
newseqen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f30  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000153c  080090c8  080090c8  000190c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a604  0800a604  000206f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a604  0800a604  0001a604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a60c  0800a60c  000206f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a60c  0800a60c  0001a60c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a610  0800a610  0001a610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006f8  20000000  0800a614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028c4  200006f8  0800ad0c  000206f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002fbc  0800ad0c  00022fbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000206f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b1b  00000000  00000000  00020728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024cf  00000000  00000000  00034243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  00036718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001000  00000000  00000000  00037820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fe6  00000000  00000000  00038820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014432  00000000  00000000  00050806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d201  00000000  00000000  00064c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  00101e39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049c8  00000000  00000000  00101efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000d8  00000000  00000000  001068c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200006f8 	.word	0x200006f8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080090b0 	.word	0x080090b0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200006fc 	.word	0x200006fc
 80001d4:	080090b0 	.word	0x080090b0

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2f>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ac:	bf24      	itt	cs
 80007ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007b6:	d90d      	bls.n	80007d4 <__aeabi_d2f+0x30>
 80007b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007d8:	d121      	bne.n	800081e <__aeabi_d2f+0x7a>
 80007da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007de:	bfbc      	itt	lt
 80007e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007e4:	4770      	bxlt	lr
 80007e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007ee:	f1c2 0218 	rsb	r2, r2, #24
 80007f2:	f1c2 0c20 	rsb	ip, r2, #32
 80007f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007fa:	fa20 f002 	lsr.w	r0, r0, r2
 80007fe:	bf18      	it	ne
 8000800:	f040 0001 	orrne.w	r0, r0, #1
 8000804:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000808:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800080c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000810:	ea40 000c 	orr.w	r0, r0, ip
 8000814:	fa23 f302 	lsr.w	r3, r3, r2
 8000818:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800081c:	e7cc      	b.n	80007b8 <__aeabi_d2f+0x14>
 800081e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000822:	d107      	bne.n	8000834 <__aeabi_d2f+0x90>
 8000824:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000828:	bf1e      	ittt	ne
 800082a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800082e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000832:	4770      	bxne	lr
 8000834:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000838:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800083c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <__aeabi_uldivmod>:
 8000844:	b953      	cbnz	r3, 800085c <__aeabi_uldivmod+0x18>
 8000846:	b94a      	cbnz	r2, 800085c <__aeabi_uldivmod+0x18>
 8000848:	2900      	cmp	r1, #0
 800084a:	bf08      	it	eq
 800084c:	2800      	cmpeq	r0, #0
 800084e:	bf1c      	itt	ne
 8000850:	f04f 31ff 	movne.w	r1, #4294967295
 8000854:	f04f 30ff 	movne.w	r0, #4294967295
 8000858:	f000 b974 	b.w	8000b44 <__aeabi_idiv0>
 800085c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000860:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000864:	f000 f806 	bl	8000874 <__udivmoddi4>
 8000868:	f8dd e004 	ldr.w	lr, [sp, #4]
 800086c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000870:	b004      	add	sp, #16
 8000872:	4770      	bx	lr

08000874 <__udivmoddi4>:
 8000874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000878:	9d08      	ldr	r5, [sp, #32]
 800087a:	4604      	mov	r4, r0
 800087c:	468e      	mov	lr, r1
 800087e:	2b00      	cmp	r3, #0
 8000880:	d14d      	bne.n	800091e <__udivmoddi4+0xaa>
 8000882:	428a      	cmp	r2, r1
 8000884:	4694      	mov	ip, r2
 8000886:	d969      	bls.n	800095c <__udivmoddi4+0xe8>
 8000888:	fab2 f282 	clz	r2, r2
 800088c:	b152      	cbz	r2, 80008a4 <__udivmoddi4+0x30>
 800088e:	fa01 f302 	lsl.w	r3, r1, r2
 8000892:	f1c2 0120 	rsb	r1, r2, #32
 8000896:	fa20 f101 	lsr.w	r1, r0, r1
 800089a:	fa0c fc02 	lsl.w	ip, ip, r2
 800089e:	ea41 0e03 	orr.w	lr, r1, r3
 80008a2:	4094      	lsls	r4, r2
 80008a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008a8:	0c21      	lsrs	r1, r4, #16
 80008aa:	fbbe f6f8 	udiv	r6, lr, r8
 80008ae:	fa1f f78c 	uxth.w	r7, ip
 80008b2:	fb08 e316 	mls	r3, r8, r6, lr
 80008b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008ba:	fb06 f107 	mul.w	r1, r6, r7
 80008be:	4299      	cmp	r1, r3
 80008c0:	d90a      	bls.n	80008d8 <__udivmoddi4+0x64>
 80008c2:	eb1c 0303 	adds.w	r3, ip, r3
 80008c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008ca:	f080 811f 	bcs.w	8000b0c <__udivmoddi4+0x298>
 80008ce:	4299      	cmp	r1, r3
 80008d0:	f240 811c 	bls.w	8000b0c <__udivmoddi4+0x298>
 80008d4:	3e02      	subs	r6, #2
 80008d6:	4463      	add	r3, ip
 80008d8:	1a5b      	subs	r3, r3, r1
 80008da:	b2a4      	uxth	r4, r4
 80008dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80008e0:	fb08 3310 	mls	r3, r8, r0, r3
 80008e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008e8:	fb00 f707 	mul.w	r7, r0, r7
 80008ec:	42a7      	cmp	r7, r4
 80008ee:	d90a      	bls.n	8000906 <__udivmoddi4+0x92>
 80008f0:	eb1c 0404 	adds.w	r4, ip, r4
 80008f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008f8:	f080 810a 	bcs.w	8000b10 <__udivmoddi4+0x29c>
 80008fc:	42a7      	cmp	r7, r4
 80008fe:	f240 8107 	bls.w	8000b10 <__udivmoddi4+0x29c>
 8000902:	4464      	add	r4, ip
 8000904:	3802      	subs	r0, #2
 8000906:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800090a:	1be4      	subs	r4, r4, r7
 800090c:	2600      	movs	r6, #0
 800090e:	b11d      	cbz	r5, 8000918 <__udivmoddi4+0xa4>
 8000910:	40d4      	lsrs	r4, r2
 8000912:	2300      	movs	r3, #0
 8000914:	e9c5 4300 	strd	r4, r3, [r5]
 8000918:	4631      	mov	r1, r6
 800091a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800091e:	428b      	cmp	r3, r1
 8000920:	d909      	bls.n	8000936 <__udivmoddi4+0xc2>
 8000922:	2d00      	cmp	r5, #0
 8000924:	f000 80ef 	beq.w	8000b06 <__udivmoddi4+0x292>
 8000928:	2600      	movs	r6, #0
 800092a:	e9c5 0100 	strd	r0, r1, [r5]
 800092e:	4630      	mov	r0, r6
 8000930:	4631      	mov	r1, r6
 8000932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000936:	fab3 f683 	clz	r6, r3
 800093a:	2e00      	cmp	r6, #0
 800093c:	d14a      	bne.n	80009d4 <__udivmoddi4+0x160>
 800093e:	428b      	cmp	r3, r1
 8000940:	d302      	bcc.n	8000948 <__udivmoddi4+0xd4>
 8000942:	4282      	cmp	r2, r0
 8000944:	f200 80f9 	bhi.w	8000b3a <__udivmoddi4+0x2c6>
 8000948:	1a84      	subs	r4, r0, r2
 800094a:	eb61 0303 	sbc.w	r3, r1, r3
 800094e:	2001      	movs	r0, #1
 8000950:	469e      	mov	lr, r3
 8000952:	2d00      	cmp	r5, #0
 8000954:	d0e0      	beq.n	8000918 <__udivmoddi4+0xa4>
 8000956:	e9c5 4e00 	strd	r4, lr, [r5]
 800095a:	e7dd      	b.n	8000918 <__udivmoddi4+0xa4>
 800095c:	b902      	cbnz	r2, 8000960 <__udivmoddi4+0xec>
 800095e:	deff      	udf	#255	; 0xff
 8000960:	fab2 f282 	clz	r2, r2
 8000964:	2a00      	cmp	r2, #0
 8000966:	f040 8092 	bne.w	8000a8e <__udivmoddi4+0x21a>
 800096a:	eba1 010c 	sub.w	r1, r1, ip
 800096e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000972:	fa1f fe8c 	uxth.w	lr, ip
 8000976:	2601      	movs	r6, #1
 8000978:	0c20      	lsrs	r0, r4, #16
 800097a:	fbb1 f3f7 	udiv	r3, r1, r7
 800097e:	fb07 1113 	mls	r1, r7, r3, r1
 8000982:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000986:	fb0e f003 	mul.w	r0, lr, r3
 800098a:	4288      	cmp	r0, r1
 800098c:	d908      	bls.n	80009a0 <__udivmoddi4+0x12c>
 800098e:	eb1c 0101 	adds.w	r1, ip, r1
 8000992:	f103 38ff 	add.w	r8, r3, #4294967295
 8000996:	d202      	bcs.n	800099e <__udivmoddi4+0x12a>
 8000998:	4288      	cmp	r0, r1
 800099a:	f200 80cb 	bhi.w	8000b34 <__udivmoddi4+0x2c0>
 800099e:	4643      	mov	r3, r8
 80009a0:	1a09      	subs	r1, r1, r0
 80009a2:	b2a4      	uxth	r4, r4
 80009a4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009a8:	fb07 1110 	mls	r1, r7, r0, r1
 80009ac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009b0:	fb0e fe00 	mul.w	lr, lr, r0
 80009b4:	45a6      	cmp	lr, r4
 80009b6:	d908      	bls.n	80009ca <__udivmoddi4+0x156>
 80009b8:	eb1c 0404 	adds.w	r4, ip, r4
 80009bc:	f100 31ff 	add.w	r1, r0, #4294967295
 80009c0:	d202      	bcs.n	80009c8 <__udivmoddi4+0x154>
 80009c2:	45a6      	cmp	lr, r4
 80009c4:	f200 80bb 	bhi.w	8000b3e <__udivmoddi4+0x2ca>
 80009c8:	4608      	mov	r0, r1
 80009ca:	eba4 040e 	sub.w	r4, r4, lr
 80009ce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009d2:	e79c      	b.n	800090e <__udivmoddi4+0x9a>
 80009d4:	f1c6 0720 	rsb	r7, r6, #32
 80009d8:	40b3      	lsls	r3, r6
 80009da:	fa22 fc07 	lsr.w	ip, r2, r7
 80009de:	ea4c 0c03 	orr.w	ip, ip, r3
 80009e2:	fa20 f407 	lsr.w	r4, r0, r7
 80009e6:	fa01 f306 	lsl.w	r3, r1, r6
 80009ea:	431c      	orrs	r4, r3
 80009ec:	40f9      	lsrs	r1, r7
 80009ee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009f2:	fa00 f306 	lsl.w	r3, r0, r6
 80009f6:	fbb1 f8f9 	udiv	r8, r1, r9
 80009fa:	0c20      	lsrs	r0, r4, #16
 80009fc:	fa1f fe8c 	uxth.w	lr, ip
 8000a00:	fb09 1118 	mls	r1, r9, r8, r1
 8000a04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a08:	fb08 f00e 	mul.w	r0, r8, lr
 8000a0c:	4288      	cmp	r0, r1
 8000a0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a12:	d90b      	bls.n	8000a2c <__udivmoddi4+0x1b8>
 8000a14:	eb1c 0101 	adds.w	r1, ip, r1
 8000a18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a1c:	f080 8088 	bcs.w	8000b30 <__udivmoddi4+0x2bc>
 8000a20:	4288      	cmp	r0, r1
 8000a22:	f240 8085 	bls.w	8000b30 <__udivmoddi4+0x2bc>
 8000a26:	f1a8 0802 	sub.w	r8, r8, #2
 8000a2a:	4461      	add	r1, ip
 8000a2c:	1a09      	subs	r1, r1, r0
 8000a2e:	b2a4      	uxth	r4, r4
 8000a30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a34:	fb09 1110 	mls	r1, r9, r0, r1
 8000a38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a40:	458e      	cmp	lr, r1
 8000a42:	d908      	bls.n	8000a56 <__udivmoddi4+0x1e2>
 8000a44:	eb1c 0101 	adds.w	r1, ip, r1
 8000a48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a4c:	d26c      	bcs.n	8000b28 <__udivmoddi4+0x2b4>
 8000a4e:	458e      	cmp	lr, r1
 8000a50:	d96a      	bls.n	8000b28 <__udivmoddi4+0x2b4>
 8000a52:	3802      	subs	r0, #2
 8000a54:	4461      	add	r1, ip
 8000a56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a5e:	eba1 010e 	sub.w	r1, r1, lr
 8000a62:	42a1      	cmp	r1, r4
 8000a64:	46c8      	mov	r8, r9
 8000a66:	46a6      	mov	lr, r4
 8000a68:	d356      	bcc.n	8000b18 <__udivmoddi4+0x2a4>
 8000a6a:	d053      	beq.n	8000b14 <__udivmoddi4+0x2a0>
 8000a6c:	b15d      	cbz	r5, 8000a86 <__udivmoddi4+0x212>
 8000a6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a72:	eb61 010e 	sbc.w	r1, r1, lr
 8000a76:	fa01 f707 	lsl.w	r7, r1, r7
 8000a7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a7e:	40f1      	lsrs	r1, r6
 8000a80:	431f      	orrs	r7, r3
 8000a82:	e9c5 7100 	strd	r7, r1, [r5]
 8000a86:	2600      	movs	r6, #0
 8000a88:	4631      	mov	r1, r6
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	f1c2 0320 	rsb	r3, r2, #32
 8000a92:	40d8      	lsrs	r0, r3
 8000a94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a98:	fa21 f303 	lsr.w	r3, r1, r3
 8000a9c:	4091      	lsls	r1, r2
 8000a9e:	4301      	orrs	r1, r0
 8000aa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aa4:	fa1f fe8c 	uxth.w	lr, ip
 8000aa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000aac:	fb07 3610 	mls	r6, r7, r0, r3
 8000ab0:	0c0b      	lsrs	r3, r1, #16
 8000ab2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ab6:	fb00 f60e 	mul.w	r6, r0, lr
 8000aba:	429e      	cmp	r6, r3
 8000abc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ac0:	d908      	bls.n	8000ad4 <__udivmoddi4+0x260>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000aca:	d22f      	bcs.n	8000b2c <__udivmoddi4+0x2b8>
 8000acc:	429e      	cmp	r6, r3
 8000ace:	d92d      	bls.n	8000b2c <__udivmoddi4+0x2b8>
 8000ad0:	3802      	subs	r0, #2
 8000ad2:	4463      	add	r3, ip
 8000ad4:	1b9b      	subs	r3, r3, r6
 8000ad6:	b289      	uxth	r1, r1
 8000ad8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000adc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ae0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ae4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ae8:	428b      	cmp	r3, r1
 8000aea:	d908      	bls.n	8000afe <__udivmoddi4+0x28a>
 8000aec:	eb1c 0101 	adds.w	r1, ip, r1
 8000af0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000af4:	d216      	bcs.n	8000b24 <__udivmoddi4+0x2b0>
 8000af6:	428b      	cmp	r3, r1
 8000af8:	d914      	bls.n	8000b24 <__udivmoddi4+0x2b0>
 8000afa:	3e02      	subs	r6, #2
 8000afc:	4461      	add	r1, ip
 8000afe:	1ac9      	subs	r1, r1, r3
 8000b00:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b04:	e738      	b.n	8000978 <__udivmoddi4+0x104>
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e705      	b.n	8000918 <__udivmoddi4+0xa4>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e3      	b.n	80008d8 <__udivmoddi4+0x64>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6f8      	b.n	8000906 <__udivmoddi4+0x92>
 8000b14:	454b      	cmp	r3, r9
 8000b16:	d2a9      	bcs.n	8000a6c <__udivmoddi4+0x1f8>
 8000b18:	ebb9 0802 	subs.w	r8, r9, r2
 8000b1c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7a3      	b.n	8000a6c <__udivmoddi4+0x1f8>
 8000b24:	4646      	mov	r6, r8
 8000b26:	e7ea      	b.n	8000afe <__udivmoddi4+0x28a>
 8000b28:	4620      	mov	r0, r4
 8000b2a:	e794      	b.n	8000a56 <__udivmoddi4+0x1e2>
 8000b2c:	4640      	mov	r0, r8
 8000b2e:	e7d1      	b.n	8000ad4 <__udivmoddi4+0x260>
 8000b30:	46d0      	mov	r8, sl
 8000b32:	e77b      	b.n	8000a2c <__udivmoddi4+0x1b8>
 8000b34:	3b02      	subs	r3, #2
 8000b36:	4461      	add	r1, ip
 8000b38:	e732      	b.n	80009a0 <__udivmoddi4+0x12c>
 8000b3a:	4630      	mov	r0, r6
 8000b3c:	e709      	b.n	8000952 <__udivmoddi4+0xde>
 8000b3e:	4464      	add	r4, ip
 8000b40:	3802      	subs	r0, #2
 8000b42:	e742      	b.n	80009ca <__udivmoddi4+0x156>

08000b44 <__aeabi_idiv0>:
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <SPI_command>:
void SPI_command(void){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
// pins are all good , SPI is always the problem!!!
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <SPI_command+0x68>)
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d128      	bne.n	8000ba8 <SPI_command+0x60>
 8000b56:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <SPI_command+0x6c>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d124      	bne.n	8000ba8 <SPI_command+0x60>

uint8_t spi_store[5];

	//clk_pin=(i&1)^1;
		//bsrr_long=0;
		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8000b5e:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <SPI_command+0x70>)
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	0a1b      	lsrs	r3, r3, #8
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d003      	beq.n	8000b72 <SPI_command+0x2a>
 8000b6a:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <SPI_command+0x74>)
 8000b6c:	22f8      	movs	r2, #248	; 0xf8
 8000b6e:	701a      	strb	r2, [r3, #0]
 8000b70:	e002      	b.n	8000b78 <SPI_command+0x30>
 8000b72:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <SPI_command+0x74>)
 8000b74:	22fa      	movs	r2, #250	; 0xfa
 8000b76:	701a      	strb	r2, [r3, #0]
/*		bsrr_long=spi_byte<<16; // top byte for command 24-16, then 2 bytes of data 16-0
		spi_hold=(spi_hold&255);
		bsrr_long=bsrr_long+((spi_hold>>4)<<12); // 4 bits to top
		bsrr_long=bsrr_long+((spi_hold&15)<<4);	// 4 bits to top
*/
	spi_store[0]=spi_byte&255;
 8000b78:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <SPI_command+0x74>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	703b      	strb	r3, [r7, #0]
	spi_store[1]=((spi_hold>>4)<<4)&255;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <SPI_command+0x70>)
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	091b      	lsrs	r3, r3, #4
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	011b      	lsls	r3, r3, #4
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	707b      	strb	r3, [r7, #1]
	spi_store[2]=((spi_hold&15)<<4)&255;
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <SPI_command+0x70>)
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	011b      	lsls	r3, r3, #4
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	70bb      	strb	r3, [r7, #2]

// send this to spi for now
		HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3, 5);  // working good
 8000b96:	4639      	mov	r1, r7
 8000b98:	2305      	movs	r3, #5
 8000b9a:	2203      	movs	r2, #3
 8000b9c:	4808      	ldr	r0, [pc, #32]	; (8000bc0 <SPI_command+0x78>)
 8000b9e:	f006 fc26 	bl	80073ee <HAL_SPI_Transmit>


//HAL_Delay(10);
	spi_enable=1; }
 8000ba2:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <SPI_command+0x68>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	801a      	strh	r2, [r3, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	2000209e 	.word	0x2000209e
 8000bb4:	200020a4 	.word	0x200020a4
 8000bb8:	200020a2 	.word	0x200020a2
 8000bbc:	200020a0 	.word	0x200020a0
 8000bc0:	20002e88 	.word	0x20002e88

08000bc4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)    // unreliable

{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	time_proc++;
 8000bcc:	4b27      	ldr	r3, [pc, #156]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000bce:	881b      	ldrh	r3, [r3, #0]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	4b25      	ldr	r3, [pc, #148]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000bd6:	801a      	strh	r2, [r3, #0]
	//if (((sample_point==511) || (sample_point==1022)) && (bank_write)  ) error_count++;

	if (sample_point==511) {bank_write=1; sample_pointD=0; time_proc=0;  }
 8000bd8:	4b25      	ldr	r3, [pc, #148]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000bda:	881b      	ldrh	r3, [r3, #0]
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d108      	bne.n	8000bf8 <HAL_TIM_PeriodElapsedCallback+0x34>
 8000be6:	4b23      	ldr	r3, [pc, #140]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	801a      	strh	r2, [r3, #0]
 8000bec:	4b22      	ldr	r3, [pc, #136]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	801a      	strh	r2, [r3, #0]
 8000bf2:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	801a      	strh	r2, [r3, #0]
	if (sample_point==1022) {bank_write=1; sample_pointD=512;time_proc=0; }
 8000bf8:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d109      	bne.n	8000c1a <HAL_TIM_PeriodElapsedCallback+0x56>
 8000c06:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	801a      	strh	r2, [r3, #0]
 8000c0c:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000c0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c12:	801a      	strh	r2, [r3, #0]
 8000c14:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	801a      	strh	r2, [r3, #0]
	sample_point=sample_point & 1023;// this is 1
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000c1c:	881b      	ldrh	r3, [r3, #0]
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000c28:	801a      	strh	r2, [r3, #0]
	play_hold=play_sample[sample_point]; // this is 2
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000c2c:	881b      	ldrh	r3, [r3, #0]
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	461a      	mov	r2, r3
 8000c32:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000c34:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000c3a:	801a      	strh	r2, [r3, #0]





	if(TIM3==htim->Instance)			// nothing here is consistent
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a10      	ldr	r2, [pc, #64]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d10b      	bne.n	8000c5e <HAL_TIM_PeriodElapsedCallback+0x9a>
{


TIM3->CCR3=play_hold ;  // keep readin sample storage
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000c48:	881b      	ldrh	r3, [r3, #0]
 8000c4a:	b29a      	uxth	r2, r3
 8000c4c:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000c4e:	63da      	str	r2, [r3, #60]	; 0x3c


//if (bs_count==255
	//	)  { bs_count=0; menu_store=(menuSelect>>2); } else bs_count++; // menu select, higher count just spills over  159 chamge to 128 2*64
//}
sample_point++; //this needs to be here or too fast and wrong sample rate
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000c52:	881b      	ldrh	r3, [r3, #0]
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	3301      	adds	r3, #1
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000c5c:	801a      	strh	r2, [r3, #0]

}

}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20002d30 	.word	0x20002d30
 8000c70:	200013e2 	.word	0x200013e2
 8000c74:	200002be 	.word	0x200002be
 8000c78:	200013e6 	.word	0x200013e6
 8000c7c:	20000be0 	.word	0x20000be0
 8000c80:	200013e4 	.word	0x200013e4
 8000c84:	40000400 	.word	0x40000400

08000c88 <analoginputloopb>:
						}  // get value this this on e is blank
		//HAL_ADC_Stop(&hadc1);
//for (i=0;i<3;i++){ adc_values[i]= (adc_values[i]>>8) &15; } // reduce value to 4 bit
}
*/
void analoginputloopb(void){  //works fine still
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0


	//menuSelect = (7 - (adc_values[0] >>2))<<1;		//x *16  main menu select
	//menuSelect = (15 - (adc_values[0] >>1));		//x *7  main menu select
	//menuSelectX=(31 - adc_values[1])>>1;  // Y select inside page
	menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 8000c8e:	4b80      	ldr	r3, [pc, #512]	; (8000e90 <analoginputloopb+0x208>)
 8000c90:	889b      	ldrh	r3, [r3, #4]
 8000c92:	091b      	lsrs	r3, r3, #4
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	4b7e      	ldr	r3, [pc, #504]	; (8000e94 <analoginputloopb+0x20c>)
 8000c9a:	701a      	strb	r2, [r3, #0]
		menuSelectX=cursor_menu[2]&15;  // Y select inside page
 8000c9c:	4b7c      	ldr	r3, [pc, #496]	; (8000e90 <analoginputloopb+0x208>)
 8000c9e:	889b      	ldrh	r3, [r3, #4]
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	f003 030f 	and.w	r3, r3, #15
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	4b7b      	ldr	r3, [pc, #492]	; (8000e98 <analoginputloopb+0x210>)
 8000caa:	701a      	strb	r2, [r3, #0]
	//	counterVarB = menuSelectX + menuSelect; // select mem page 10*8  and location pointer  77
//		if (adc_values[1]>15)	menu_holder=disp_lut [(menuSelect)	+1] [31-adc_values[1]]; // change back to 0-15
//	else menu_holder=disp_lut [(menuSelect)	] [15-adc_values[1]];  // grab disp lut value for pointer if valid then write for now

		//menu_holder=disp_lut [(menuSelect)	] [(15-adc_values[1])];   // value from disp lut
		menu_holder=disp_lut [menuSelect] [menuSelectX];   // value from disp lut
 8000cac:	4b79      	ldr	r3, [pc, #484]	; (8000e94 <analoginputloopb+0x20c>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	4b79      	ldr	r3, [pc, #484]	; (8000e98 <analoginputloopb+0x210>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4a78      	ldr	r2, [pc, #480]	; (8000e9c <analoginputloopb+0x214>)
 8000cba:	0103      	lsls	r3, r0, #4
 8000cbc:	440b      	add	r3, r1
 8000cbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cc2:	80fb      	strh	r3, [r7, #6]
		cursor_menu[1]=0;
 8000cc4:	4b72      	ldr	r3, [pc, #456]	; (8000e90 <analoginputloopb+0x208>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	805a      	strh	r2, [r3, #2]
		//cursor_menu[2]=cursor_lookup[enc2_dir];
		// cursor_menu[2]=cursor_lookup[enc2_dir]; //needed for correct line sequence ,obsolete
		cursor_menu[2]=enc2_dir;
 8000cca:	4b75      	ldr	r3, [pc, #468]	; (8000ea0 <analoginputloopb+0x218>)
 8000ccc:	881a      	ldrh	r2, [r3, #0]
 8000cce:	4b70      	ldr	r3, [pc, #448]	; (8000e90 <analoginputloopb+0x208>)
 8000cd0:	809a      	strh	r2, [r3, #4]

		//cursor_menu[2]=(16-adc_values[1]);



		if (menu_holder>127)	counterVarB=menu_holder-128; //  points to actual potvalues location from dsip_lut when value is higher than 127 , works ok problem with menu display
 8000cd2:	88fb      	ldrh	r3, [r7, #6]
 8000cd4:	2b7f      	cmp	r3, #127	; 0x7f
 8000cd6:	d904      	bls.n	8000ce2 <analoginputloopb+0x5a>
 8000cd8:	88fb      	ldrh	r3, [r7, #6]
 8000cda:	3b80      	subs	r3, #128	; 0x80
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	4b71      	ldr	r3, [pc, #452]	; (8000ea4 <analoginputloopb+0x21c>)
 8000ce0:	801a      	strh	r2, [r3, #0]
		if (menu_holder>511)	counterVarB=menu_holder-384;		// text pointer , max potvalue address is 142 , fix second page issue later
 8000ce2:	88fb      	ldrh	r3, [r7, #6]
 8000ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ce8:	d305      	bcc.n	8000cf6 <analoginputloopb+0x6e>
 8000cea:	88fb      	ldrh	r3, [r7, #6]
 8000cec:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	4b6c      	ldr	r3, [pc, #432]	; (8000ea4 <analoginputloopb+0x21c>)
 8000cf4:	801a      	strh	r2, [r3, #0]


		enc_dir=potSource[counterVarB];
 8000cf6:	4b6b      	ldr	r3, [pc, #428]	; (8000ea4 <analoginputloopb+0x21c>)
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	4b6a      	ldr	r3, [pc, #424]	; (8000ea8 <analoginputloopb+0x220>)
 8000cfe:	5c9b      	ldrb	r3, [r3, r2]
 8000d00:	b21a      	sxth	r2, r3
 8000d02:	4b6a      	ldr	r3, [pc, #424]	; (8000eac <analoginputloopb+0x224>)
 8000d04:	801a      	strh	r2, [r3, #0]


	enc_temp=(TIM2->CNT)>>1;  // read counter tim2 ,divider ok
 8000d06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0c:	085b      	lsrs	r3, r3, #1
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	4b67      	ldr	r3, [pc, #412]	; (8000eb0 <analoginputloopb+0x228>)
 8000d12:	801a      	strh	r2, [r3, #0]
	enc2_temp=(TIM4->CNT)>>1;  // read counter tim4
 8000d14:	4b67      	ldr	r3, [pc, #412]	; (8000eb4 <analoginputloopb+0x22c>)
 8000d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d18:	085b      	lsrs	r3, r3, #1
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	4b66      	ldr	r3, [pc, #408]	; (8000eb8 <analoginputloopb+0x230>)
 8000d1e:	801a      	strh	r2, [r3, #0]
	enc2_temp=enc2_temp&127; // fix overflow ? , dont need a lot because of skip
 8000d20:	4b65      	ldr	r3, [pc, #404]	; (8000eb8 <analoginputloopb+0x230>)
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	4b63      	ldr	r3, [pc, #396]	; (8000eb8 <analoginputloopb+0x230>)
 8000d2c:	801a      	strh	r2, [r3, #0]

	if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-(disp_multi[enc2_dir>>4]);   // start settle timer , will do 2 times per turn always, wire opposite
 8000d2e:	4b60      	ldr	r3, [pc, #384]	; (8000eb0 <analoginputloopb+0x228>)
 8000d30:	881a      	ldrh	r2, [r3, #0]
 8000d32:	4b62      	ldr	r3, [pc, #392]	; (8000ebc <analoginputloopb+0x234>)
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d910      	bls.n	8000d5c <analoginputloopb+0xd4>
 8000d3a:	4b5c      	ldr	r3, [pc, #368]	; (8000eac <analoginputloopb+0x224>)
 8000d3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	4b57      	ldr	r3, [pc, #348]	; (8000ea0 <analoginputloopb+0x218>)
 8000d44:	881b      	ldrh	r3, [r3, #0]
 8000d46:	091b      	lsrs	r3, r3, #4
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4b5c      	ldr	r3, [pc, #368]	; (8000ec0 <analoginputloopb+0x238>)
 8000d4e:	5c5b      	ldrb	r3, [r3, r1]
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	b21a      	sxth	r2, r3
 8000d58:	4b54      	ldr	r3, [pc, #336]	; (8000eac <analoginputloopb+0x224>)
 8000d5a:	801a      	strh	r2, [r3, #0]
	if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+(disp_multi[enc2_dir>>4]);   // start settle timer , will do 2 times per turn always, wire opposite , step multiplier
 8000d5c:	4b54      	ldr	r3, [pc, #336]	; (8000eb0 <analoginputloopb+0x228>)
 8000d5e:	881a      	ldrh	r2, [r3, #0]
 8000d60:	4b56      	ldr	r3, [pc, #344]	; (8000ebc <analoginputloopb+0x234>)
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d210      	bcs.n	8000d8a <analoginputloopb+0x102>
 8000d68:	4b4d      	ldr	r3, [pc, #308]	; (8000ea0 <analoginputloopb+0x218>)
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	091b      	lsrs	r3, r3, #4
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b53      	ldr	r3, [pc, #332]	; (8000ec0 <analoginputloopb+0x238>)
 8000d74:	5c9b      	ldrb	r3, [r3, r2]
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	4b4c      	ldr	r3, [pc, #304]	; (8000eac <analoginputloopb+0x224>)
 8000d7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	4413      	add	r3, r2
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	b21a      	sxth	r2, r3
 8000d86:	4b49      	ldr	r3, [pc, #292]	; (8000eac <analoginputloopb+0x224>)
 8000d88:	801a      	strh	r2, [r3, #0]
	//if (enc_temp<enc_tempB)	 enc_dir++;

  enc2_temp=enc2_lut[enc2_temp];  // force alternative values for skip  , seems to work ok , disable temporarily
 8000d8a:	4b4b      	ldr	r3, [pc, #300]	; (8000eb8 <analoginputloopb+0x230>)
 8000d8c:	881b      	ldrh	r3, [r3, #0]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b4c      	ldr	r3, [pc, #304]	; (8000ec4 <analoginputloopb+0x23c>)
 8000d92:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000d96:	4b48      	ldr	r3, [pc, #288]	; (8000eb8 <analoginputloopb+0x230>)
 8000d98:	801a      	strh	r2, [r3, #0]
  if (enc2_temp>383) enc2_temp=383;  //mem overflow somewhere
 8000d9a:	4b47      	ldr	r3, [pc, #284]	; (8000eb8 <analoginputloopb+0x230>)
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000da2:	d303      	bcc.n	8000dac <analoginputloopb+0x124>
 8000da4:	4b44      	ldr	r3, [pc, #272]	; (8000eb8 <analoginputloopb+0x230>)
 8000da6:	f240 127f 	movw	r2, #383	; 0x17f
 8000daa:	801a      	strh	r2, [r3, #0]
	if (enc_dir>160) enc_dir=160;
 8000dac:	4b3f      	ldr	r3, [pc, #252]	; (8000eac <analoginputloopb+0x224>)
 8000dae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db2:	2ba0      	cmp	r3, #160	; 0xa0
 8000db4:	dd02      	ble.n	8000dbc <analoginputloopb+0x134>
 8000db6:	4b3d      	ldr	r3, [pc, #244]	; (8000eac <analoginputloopb+0x224>)
 8000db8:	22a0      	movs	r2, #160	; 0xa0
 8000dba:	801a      	strh	r2, [r3, #0]
			if (enc_dir<0) enc_dir=0;
 8000dbc:	4b3b      	ldr	r3, [pc, #236]	; (8000eac <analoginputloopb+0x224>)
 8000dbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	da02      	bge.n	8000dcc <analoginputloopb+0x144>
 8000dc6:	4b39      	ldr	r3, [pc, #228]	; (8000eac <analoginputloopb+0x224>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	801a      	strh	r2, [r3, #0]
			//if (enc2_temp<16) enc_dir=(enc_dir<<2) & 127; // faster for notes on first row

			potSource[counterVarB]=enc_dir;       // enter data into potsource
 8000dcc:	4b37      	ldr	r3, [pc, #220]	; (8000eac <analoginputloopb+0x224>)
 8000dce:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000dd2:	4b34      	ldr	r3, [pc, #208]	; (8000ea4 <analoginputloopb+0x21c>)
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	b2c9      	uxtb	r1, r1
 8000dda:	4b33      	ldr	r3, [pc, #204]	; (8000ea8 <analoginputloopb+0x220>)
 8000ddc:	5499      	strb	r1, [r3, r2]
					enc_dir=0;
 8000dde:	4b33      	ldr	r3, [pc, #204]	; (8000eac <analoginputloopb+0x224>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	801a      	strh	r2, [r3, #0]
			enc_tempB=enc_temp;
 8000de4:	4b32      	ldr	r3, [pc, #200]	; (8000eb0 <analoginputloopb+0x228>)
 8000de6:	881a      	ldrh	r2, [r3, #0]
 8000de8:	4b34      	ldr	r3, [pc, #208]	; (8000ebc <analoginputloopb+0x234>)
 8000dea:	801a      	strh	r2, [r3, #0]
			//if (enc2_dir>383) enc2_dir=383;

			//if  (enc2_temp>enc2_tempB)	 enc2_dir++;   // start settle timer , will do 2 times per turn always
			//if (enc2_temp<enc2_tempB)	 enc2_dir--;
			enc2_dir=enc2_temp; //temp to try source data
 8000dec:	4b32      	ldr	r3, [pc, #200]	; (8000eb8 <analoginputloopb+0x230>)
 8000dee:	881a      	ldrh	r2, [r3, #0]
 8000df0:	4b2b      	ldr	r3, [pc, #172]	; (8000ea0 <analoginputloopb+0x218>)
 8000df2:	801a      	strh	r2, [r3, #0]
		//	if (enc2_dir>127) menu_page[1]=127; else if (enc2_dir>255)   menu_page[1]=255;				else menu_page[1]=0;
		//	menu_page[1]= (enc2_dir >>7) <<7;

			menu_page[1]=enc2_dir&384;
 8000df4:	4b2a      	ldr	r3, [pc, #168]	; (8000ea0 <analoginputloopb+0x218>)
 8000df6:	881b      	ldrh	r3, [r3, #0]
 8000df8:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	4b32      	ldr	r3, [pc, #200]	; (8000ec8 <analoginputloopb+0x240>)
 8000e00:	805a      	strh	r2, [r3, #2]


			//if (enc2_dir>255) {menu_page[1]=0;display_fill();}

					if ((enc2_temp>127) && (enc2_tempB<=127)) display_fill();    // need to optimize
 8000e02:	4b2d      	ldr	r3, [pc, #180]	; (8000eb8 <analoginputloopb+0x230>)
 8000e04:	881b      	ldrh	r3, [r3, #0]
 8000e06:	2b7f      	cmp	r3, #127	; 0x7f
 8000e08:	d905      	bls.n	8000e16 <analoginputloopb+0x18e>
 8000e0a:	4b30      	ldr	r3, [pc, #192]	; (8000ecc <analoginputloopb+0x244>)
 8000e0c:	881b      	ldrh	r3, [r3, #0]
 8000e0e:	2b7f      	cmp	r3, #127	; 0x7f
 8000e10:	d801      	bhi.n	8000e16 <analoginputloopb+0x18e>
 8000e12:	f000 fa07 	bl	8001224 <display_fill>
					if ((enc2_temp<=127) && (enc2_tempB>127)) display_fill();
 8000e16:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <analoginputloopb+0x230>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	2b7f      	cmp	r3, #127	; 0x7f
 8000e1c:	d805      	bhi.n	8000e2a <analoginputloopb+0x1a2>
 8000e1e:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <analoginputloopb+0x244>)
 8000e20:	881b      	ldrh	r3, [r3, #0]
 8000e22:	2b7f      	cmp	r3, #127	; 0x7f
 8000e24:	d901      	bls.n	8000e2a <analoginputloopb+0x1a2>
 8000e26:	f000 f9fd 	bl	8001224 <display_fill>
					if ((enc2_temp>255) && (enc2_tempB<=255)) display_fill();
 8000e2a:	4b23      	ldr	r3, [pc, #140]	; (8000eb8 <analoginputloopb+0x230>)
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	2bff      	cmp	r3, #255	; 0xff
 8000e30:	d905      	bls.n	8000e3e <analoginputloopb+0x1b6>
 8000e32:	4b26      	ldr	r3, [pc, #152]	; (8000ecc <analoginputloopb+0x244>)
 8000e34:	881b      	ldrh	r3, [r3, #0]
 8000e36:	2bff      	cmp	r3, #255	; 0xff
 8000e38:	d801      	bhi.n	8000e3e <analoginputloopb+0x1b6>
 8000e3a:	f000 f9f3 	bl	8001224 <display_fill>
					if ((enc2_temp<=255) && (enc2_tempB>255)) display_fill();
 8000e3e:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <analoginputloopb+0x230>)
 8000e40:	881b      	ldrh	r3, [r3, #0]
 8000e42:	2bff      	cmp	r3, #255	; 0xff
 8000e44:	d805      	bhi.n	8000e52 <analoginputloopb+0x1ca>
 8000e46:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <analoginputloopb+0x244>)
 8000e48:	881b      	ldrh	r3, [r3, #0]
 8000e4a:	2bff      	cmp	r3, #255	; 0xff
 8000e4c:	d901      	bls.n	8000e52 <analoginputloopb+0x1ca>
 8000e4e:	f000 f9e9 	bl	8001224 <display_fill>
					if ((enc2_temp>383) && (enc2_tempB<=383)) display_fill();
 8000e52:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <analoginputloopb+0x230>)
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000e5a:	d306      	bcc.n	8000e6a <analoginputloopb+0x1e2>
 8000e5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <analoginputloopb+0x244>)
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000e64:	d201      	bcs.n	8000e6a <analoginputloopb+0x1e2>
 8000e66:	f000 f9dd 	bl	8001224 <display_fill>
					//if ((enc2_temp<=383) && (enc2_tempB>383)) display_fill();
					//if ((enc2_temp<127) && (enc2_tempB>384)) display_fill();
					//if ((enc2_temp<=511) && (enc2_tempB<127)) display_fill();


					enc2_tempB=enc2_temp; // to effective as counter not getting reset
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <analoginputloopb+0x230>)
 8000e6c:	881a      	ldrh	r2, [r3, #0]
 8000e6e:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <analoginputloopb+0x244>)
 8000e70:	801a      	strh	r2, [r3, #0]


potValues[counterVarB]=(potSource[counterVarB]>>4) & 15 ;  // reduce values for now ,use original for others , slow count
 8000e72:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <analoginputloopb+0x21c>)
 8000e74:	881b      	ldrh	r3, [r3, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <analoginputloopb+0x220>)
 8000e7a:	5c9b      	ldrb	r3, [r3, r2]
 8000e7c:	4a09      	ldr	r2, [pc, #36]	; (8000ea4 <analoginputloopb+0x21c>)
 8000e7e:	8812      	ldrh	r2, [r2, #0]
 8000e80:	091b      	lsrs	r3, r3, #4
 8000e82:	b2d9      	uxtb	r1, r3
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <analoginputloopb+0x248>)
 8000e86:	5499      	strb	r1, [r3, r2]

//potValues[counterVarB]=potSource[counterVarB] & 15 ;  // reduce values for now ,use original for others



}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	200020a8 	.word	0x200020a8
 8000e94:	20000b84 	.word	0x20000b84
 8000e98:	20000b85 	.word	0x20000b85
 8000e9c:	0800943c 	.word	0x0800943c
 8000ea0:	20002096 	.word	0x20002096
 8000ea4:	20000b86 	.word	0x20000b86
 8000ea8:	20000a04 	.word	0x20000a04
 8000eac:	20002098 	.word	0x20002098
 8000eb0:	2000208e 	.word	0x2000208e
 8000eb4:	40000800 	.word	0x40000800
 8000eb8:	20002092 	.word	0x20002092
 8000ebc:	20002090 	.word	0x20002090
 8000ec0:	200006c4 	.word	0x200006c4
 8000ec4:	20000714 	.word	0x20000714
 8000ec8:	200020b8 	.word	0x200020b8
 8000ecc:	20002094 	.word	0x20002094
 8000ed0:	20000884 	.word	0x20000884

08000ed4 <display_init>:
void display_init(void){
 8000ed4:	b5b0      	push	{r4, r5, r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af00      	add	r7, sp, #0
	//uint8_t sp2_command=0xf8+(0<<1);


		 // uint16_t disp[]={  304,304,304,270,257,268,384,258,51,51,52,53,54,55,56,57,58,0};  // normal characters
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd
 8000eda:	4b64      	ldr	r3, [pc, #400]	; (800106c <display_init+0x198>)
 8000edc:	1d3c      	adds	r4, r7, #4
 8000ede:	461d      	mov	r5, r3
 8000ee0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee8:	682b      	ldr	r3, [r5, #0]
 8000eea:	8023      	strh	r3, [r4, #0]
		  if (spi_send==0){         // sets data byte
 8000eec:	4b60      	ldr	r3, [pc, #384]	; (8001070 <display_init+0x19c>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f040 80b6 	bne.w	8001062 <display_init+0x18e>

/*if ((enc2_dir>63) && (menu_page[2]==0))  {init=4;menu_page[2]=1;}  //restart page draw for second page , might need home pos init
if  ((init==76) && (menu_page[2]==1)) menu_page[2]=2; //after drawing second page and finish
if ((enc2_dir<63) && (menu_page[2]==2))  {init=4;menu_page[2]=0;}
*/
switch(init){     //Remember every line advances +char on display ,,all this is mostly unneeded
 8000ef6:	4b5f      	ldr	r3, [pc, #380]	; (8001074 <display_init+0x1a0>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	3b4d      	subs	r3, #77	; 0x4d
 8000efc:	2b07      	cmp	r3, #7
 8000efe:	d879      	bhi.n	8000ff4 <display_init+0x120>
 8000f00:	a201      	add	r2, pc, #4	; (adr r2, 8000f08 <display_init+0x34>)
 8000f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f06:	bf00      	nop
 8000f08:	08000f29 	.word	0x08000f29
 8000f0c:	08000f59 	.word	0x08000f59
 8000f10:	08000f61 	.word	0x08000f61
 8000f14:	08000f7d 	.word	0x08000f7d
 8000f18:	08000f91 	.word	0x08000f91
 8000f1c:	08000f9f 	.word	0x08000f9f
 8000f20:	08000fb3 	.word	0x08000fb3
 8000f24:	08000fc7 	.word	0x08000fc7

case 77: spi_hold=384+(init_b>>1);init=init+((init_b&1)*2);break; // no delay ,jump to either blink sets
 8000f28:	4b53      	ldr	r3, [pc, #332]	; (8001078 <display_init+0x1a4>)
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	085b      	lsrs	r3, r3, #1
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	4b51      	ldr	r3, [pc, #324]	; (800107c <display_init+0x1a8>)
 8000f38:	801a      	strh	r2, [r3, #0]
 8000f3a:	4b4f      	ldr	r3, [pc, #316]	; (8001078 <display_init+0x1a4>)
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4b4a      	ldr	r3, [pc, #296]	; (8001074 <display_init+0x1a0>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	4413      	add	r3, r2
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4b48      	ldr	r3, [pc, #288]	; (8001074 <display_init+0x1a0>)
 8000f54:	701a      	strb	r2, [r3, #0]
 8000f56:	e05f      	b.n	8001018 <display_init+0x144>

case 78: spi_hold=10;break; //write one set then jump
 8000f58:	4b48      	ldr	r3, [pc, #288]	; (800107c <display_init+0x1a8>)
 8000f5a:	220a      	movs	r2, #10
 8000f5c:	801a      	strh	r2, [r3, #0]
 8000f5e:	e05b      	b.n	8001018 <display_init+0x144>
case 79: spi_hold=spell[(init_b&62)+1];init=81;break;
 8000f60:	4b45      	ldr	r3, [pc, #276]	; (8001078 <display_init+0x1a4>)
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000f68:	3301      	adds	r3, #1
 8000f6a:	4a45      	ldr	r2, [pc, #276]	; (8001080 <display_init+0x1ac>)
 8000f6c:	5cd3      	ldrb	r3, [r2, r3]
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	4b42      	ldr	r3, [pc, #264]	; (800107c <display_init+0x1a8>)
 8000f72:	801a      	strh	r2, [r3, #0]
 8000f74:	4b3f      	ldr	r3, [pc, #252]	; (8001074 <display_init+0x1a0>)
 8000f76:	2251      	movs	r2, #81	; 0x51
 8000f78:	701a      	strb	r2, [r3, #0]
 8000f7a:	e04d      	b.n	8001018 <display_init+0x144>
case 80: spi_hold=spell[init_b&62];break; // or write other set then jump
 8000f7c:	4b3e      	ldr	r3, [pc, #248]	; (8001078 <display_init+0x1a4>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000f84:	4a3e      	ldr	r2, [pc, #248]	; (8001080 <display_init+0x1ac>)
 8000f86:	5cd3      	ldrb	r3, [r2, r3]
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	4b3c      	ldr	r3, [pc, #240]	; (800107c <display_init+0x1a8>)
 8000f8c:	801a      	strh	r2, [r3, #0]
 8000f8e:	e043      	b.n	8001018 <display_init+0x144>
case 81: spi_hold=10;init=81;break;
 8000f90:	4b3a      	ldr	r3, [pc, #232]	; (800107c <display_init+0x1a8>)
 8000f92:	220a      	movs	r2, #10
 8000f94:	801a      	strh	r2, [r3, #0]
 8000f96:	4b37      	ldr	r3, [pc, #220]	; (8001074 <display_init+0x1a0>)
 8000f98:	2251      	movs	r2, #81	; 0x51
 8000f9a:	701a      	strb	r2, [r3, #0]
 8000f9c:	e03c      	b.n	8001018 <display_init+0x144>


case 82: spi_hold=384+(init_b>>1);break;  // finish writes
 8000f9e:	4b36      	ldr	r3, [pc, #216]	; (8001078 <display_init+0x1a4>)
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	085b      	lsrs	r3, r3, #1
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	4b33      	ldr	r3, [pc, #204]	; (800107c <display_init+0x1a8>)
 8000fae:	801a      	strh	r2, [r3, #0]
 8000fb0:	e032      	b.n	8001018 <display_init+0x144>
case 83: spi_hold=spell[init_b&62];break;
 8000fb2:	4b31      	ldr	r3, [pc, #196]	; (8001078 <display_init+0x1a4>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000fba:	4a31      	ldr	r2, [pc, #196]	; (8001080 <display_init+0x1ac>)
 8000fbc:	5cd3      	ldrb	r3, [r2, r3]
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	4b2e      	ldr	r3, [pc, #184]	; (800107c <display_init+0x1a8>)
 8000fc2:	801a      	strh	r2, [r3, #0]
 8000fc4:	e028      	b.n	8001018 <display_init+0x144>
case 84 : spi_hold=spell[(init_b&62)+1];init_b=cursor_menu[2]&63;displayBuffer ();init=76; break; //update cursor and displaybuffer
 8000fc6:	4b2c      	ldr	r3, [pc, #176]	; (8001078 <display_init+0x1a4>)
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000fce:	3301      	adds	r3, #1
 8000fd0:	4a2b      	ldr	r2, [pc, #172]	; (8001080 <display_init+0x1ac>)
 8000fd2:	5cd3      	ldrb	r3, [r2, r3]
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	4b29      	ldr	r3, [pc, #164]	; (800107c <display_init+0x1a8>)
 8000fd8:	801a      	strh	r2, [r3, #0]
 8000fda:	4b2a      	ldr	r3, [pc, #168]	; (8001084 <display_init+0x1b0>)
 8000fdc:	889b      	ldrh	r3, [r3, #4]
 8000fde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	4b24      	ldr	r3, [pc, #144]	; (8001078 <display_init+0x1a4>)
 8000fe6:	801a      	strh	r2, [r3, #0]
 8000fe8:	f000 f948 	bl	800127c <displayBuffer>
 8000fec:	4b21      	ldr	r3, [pc, #132]	; (8001074 <display_init+0x1a0>)
 8000fee:	224c      	movs	r2, #76	; 0x4c
 8000ff0:	701a      	strb	r2, [r3, #0]
 8000ff2:	e011      	b.n	8001018 <display_init+0x144>
default : init_b=init-6;displayBuffer ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 8000ff4:	4b1f      	ldr	r3, [pc, #124]	; (8001074 <display_init+0x1a0>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	3b06      	subs	r3, #6
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <display_init+0x1a4>)
 8001000:	801a      	strh	r2, [r3, #0]
 8001002:	f000 f93b 	bl	800127c <displayBuffer>
 8001006:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <display_init+0x1a4>)
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	461a      	mov	r2, r3
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <display_init+0x1ac>)
 800100e:	5c9b      	ldrb	r3, [r3, r2]
 8001010:	b29a      	uxth	r2, r3
 8001012:	4b1a      	ldr	r3, [pc, #104]	; (800107c <display_init+0x1a8>)
 8001014:	801a      	strh	r2, [r3, #0]
 8001016:	bf00      	nop
}


if (init<6)	{HAL_Delay(3);spi_hold=disp[init] ;  init_b=cursor_menu[2]; } //delay needs to go
 8001018:	4b16      	ldr	r3, [pc, #88]	; (8001074 <display_init+0x1a0>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b05      	cmp	r3, #5
 800101e:	d80f      	bhi.n	8001040 <display_init+0x16c>
 8001020:	2003      	movs	r0, #3
 8001022:	f002 fe29 	bl	8003c78 <HAL_Delay>
 8001026:	4b13      	ldr	r3, [pc, #76]	; (8001074 <display_init+0x1a0>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	3328      	adds	r3, #40	; 0x28
 800102e:	443b      	add	r3, r7
 8001030:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <display_init+0x1a8>)
 8001036:	801a      	strh	r2, [r3, #0]
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <display_init+0x1b0>)
 800103a:	889a      	ldrh	r2, [r3, #4]
 800103c:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <display_init+0x1a4>)
 800103e:	801a      	strh	r2, [r3, #0]

init++;   // after 6 it quits the rest is not needed
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <display_init+0x1a0>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	3301      	adds	r3, #1
 8001046:	b2da      	uxtb	r2, r3
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <display_init+0x1a0>)
 800104a:	701a      	strb	r2, [r3, #0]
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <display_init+0x19c>)
 800104e:	2201      	movs	r2, #1
 8001050:	701a      	strb	r2, [r3, #0]
 8001052:	f7ff fd79 	bl	8000b48 <SPI_command>
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <display_init+0x19c>)
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
 800105c:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <display_init+0x1b4>)
 800105e:	2200      	movs	r2, #0
 8001060:	801a      	strh	r2, [r3, #0]
		  //if ((bsrr_counter==49) && (spi_send==2)) {bsrr_counter=0; spi_send=0;}
		  if (bsrr_counter==49)  {bsrr_counter=0; spi_send=0;}
		 }
*/

}
 8001062:	bf00      	nop
 8001064:	3728      	adds	r7, #40	; 0x28
 8001066:	46bd      	mov	sp, r7
 8001068:	bdb0      	pop	{r4, r5, r7, pc}
 800106a:	bf00      	nop
 800106c:	0800933c 	.word	0x0800933c
 8001070:	200020a4 	.word	0x200020a4
 8001074:	200020a5 	.word	0x200020a5
 8001078:	200020a6 	.word	0x200020a6
 800107c:	200020a2 	.word	0x200020a2
 8001080:	2000010c 	.word	0x2000010c
 8001084:	200020a8 	.word	0x200020a8
 8001088:	2000209e 	.word	0x2000209e

0800108c <display_update>:



}

void display_update(void){				//spi display updater code , all gfx , works pretty ok n doesn't need to be running always 18x 128 ,constant scanning
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0

	uint8_t spi_store[5];

switch (gfx_skip) { // 1-17  one row
 8001092:	4b5d      	ldr	r3, [pc, #372]	; (8001208 <display_update+0x17c>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b03      	cmp	r3, #3
 8001098:	d035      	beq.n	8001106 <display_update+0x7a>
 800109a:	2b03      	cmp	r3, #3
 800109c:	dc3d      	bgt.n	800111a <display_update+0x8e>
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d002      	beq.n	80010a8 <display_update+0x1c>
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d020      	beq.n	80010e8 <display_update+0x5c>
 80010a6:	e038      	b.n	800111a <display_update+0x8e>


case 1 : {spi_hold=((gfx_counter[0])&31)+384;gfx_counter[4]=(gfx_counter[0]>>5);  gfx_counter[0]=(gfx_counter[0]+1)&63 ;gfx_skip++;break ;}  // count up positions
 80010a8:	4b58      	ldr	r3, [pc, #352]	; (800120c <display_update+0x180>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	f003 031f 	and.w	r3, r3, #31
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	4b55      	ldr	r3, [pc, #340]	; (8001210 <display_update+0x184>)
 80010ba:	801a      	strh	r2, [r3, #0]
 80010bc:	4b53      	ldr	r3, [pc, #332]	; (800120c <display_update+0x180>)
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	095b      	lsrs	r3, r3, #5
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	4b51      	ldr	r3, [pc, #324]	; (800120c <display_update+0x180>)
 80010c6:	811a      	strh	r2, [r3, #8]
 80010c8:	4b50      	ldr	r3, [pc, #320]	; (800120c <display_update+0x180>)
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	3301      	adds	r3, #1
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	4b4d      	ldr	r3, [pc, #308]	; (800120c <display_update+0x180>)
 80010d8:	801a      	strh	r2, [r3, #0]
 80010da:	4b4b      	ldr	r3, [pc, #300]	; (8001208 <display_update+0x17c>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	3301      	adds	r3, #1
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b49      	ldr	r3, [pc, #292]	; (8001208 <display_update+0x17c>)
 80010e4:	701a      	strb	r2, [r3, #0]
 80010e6:	e028      	b.n	800113a <display_update+0xae>
case 2  : {	spi_hold=384+(gfx_counter[4]*8);gfx_skip++;break ;  }
 80010e8:	4b48      	ldr	r3, [pc, #288]	; (800120c <display_update+0x180>)
 80010ea:	891b      	ldrh	r3, [r3, #8]
 80010ec:	3330      	adds	r3, #48	; 0x30
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	4b46      	ldr	r3, [pc, #280]	; (8001210 <display_update+0x184>)
 80010f6:	801a      	strh	r2, [r3, #0]
 80010f8:	4b43      	ldr	r3, [pc, #268]	; (8001208 <display_update+0x17c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	3301      	adds	r3, #1
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	4b41      	ldr	r3, [pc, #260]	; (8001208 <display_update+0x17c>)
 8001102:	701a      	strb	r2, [r3, #0]
 8001104:	e019      	b.n	800113a <display_update+0xae>
case 3   : gfx_counter[3]=0; gfx_skip++;break;
 8001106:	4b41      	ldr	r3, [pc, #260]	; (800120c <display_update+0x180>)
 8001108:	2200      	movs	r2, #0
 800110a:	80da      	strh	r2, [r3, #6]
 800110c:	4b3e      	ldr	r3, [pc, #248]	; (8001208 <display_update+0x17c>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	3301      	adds	r3, #1
 8001112:	b2da      	uxtb	r2, r3
 8001114:	4b3c      	ldr	r3, [pc, #240]	; (8001208 <display_update+0x17c>)
 8001116:	701a      	strb	r2, [r3, #0]
 8001118:	e00f      	b.n	800113a <display_update+0xae>
//case 18 : gfx_counter[2]=(gfx_counter[2]+1) &63; gfx_counter[3]=0;gfx_skip=1;break;  //not ideal
default :  gfx_counter[3]=(gfx_counter[3]+1)&15;gfx_skip++;break;
 800111a:	4b3c      	ldr	r3, [pc, #240]	; (800120c <display_update+0x180>)
 800111c:	88db      	ldrh	r3, [r3, #6]
 800111e:	3301      	adds	r3, #1
 8001120:	b29b      	uxth	r3, r3
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	b29a      	uxth	r2, r3
 8001128:	4b38      	ldr	r3, [pc, #224]	; (800120c <display_update+0x180>)
 800112a:	80da      	strh	r2, [r3, #6]
 800112c:	4b36      	ldr	r3, [pc, #216]	; (8001208 <display_update+0x17c>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	3301      	adds	r3, #1
 8001132:	b2da      	uxtb	r2, r3
 8001134:	4b34      	ldr	r3, [pc, #208]	; (8001208 <display_update+0x17c>)
 8001136:	701a      	strb	r2, [r3, #0]
 8001138:	bf00      	nop

}


if ((gfx_skip==2) || (gfx_skip==3) || (gfx_skip==1)) spi_hold=spi_hold; else spi_hold=gfx_ram[gfx_counter[2]] [gfx_counter[3]] ; // write command or data
 800113a:	4b33      	ldr	r3, [pc, #204]	; (8001208 <display_update+0x17c>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b02      	cmp	r3, #2
 8001140:	d007      	beq.n	8001152 <display_update+0xc6>
 8001142:	4b31      	ldr	r3, [pc, #196]	; (8001208 <display_update+0x17c>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b03      	cmp	r3, #3
 8001148:	d003      	beq.n	8001152 <display_update+0xc6>
 800114a:	4b2f      	ldr	r3, [pc, #188]	; (8001208 <display_update+0x17c>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d104      	bne.n	800115c <display_update+0xd0>
 8001152:	4b2f      	ldr	r3, [pc, #188]	; (8001210 <display_update+0x184>)
 8001154:	881a      	ldrh	r2, [r3, #0]
 8001156:	4b2e      	ldr	r3, [pc, #184]	; (8001210 <display_update+0x184>)
 8001158:	801a      	strh	r2, [r3, #0]
 800115a:	e00d      	b.n	8001178 <display_update+0xec>
 800115c:	4b2b      	ldr	r3, [pc, #172]	; (800120c <display_update+0x180>)
 800115e:	889b      	ldrh	r3, [r3, #4]
 8001160:	4618      	mov	r0, r3
 8001162:	4b2a      	ldr	r3, [pc, #168]	; (800120c <display_update+0x180>)
 8001164:	88db      	ldrh	r3, [r3, #6]
 8001166:	4619      	mov	r1, r3
 8001168:	4a2a      	ldr	r2, [pc, #168]	; (8001214 <display_update+0x188>)
 800116a:	0103      	lsls	r3, r0, #4
 800116c:	4413      	add	r3, r2
 800116e:	440b      	add	r3, r1
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b29a      	uxth	r2, r3
 8001174:	4b26      	ldr	r3, [pc, #152]	; (8001210 <display_update+0x184>)
 8001176:	801a      	strh	r2, [r3, #0]

if (gfx_skip==19)  {gfx_counter[2]=(gfx_counter[2]+1) &63; gfx_counter[3]=0;gfx_skip=1;}   // fixed last doubled char
 8001178:	4b23      	ldr	r3, [pc, #140]	; (8001208 <display_update+0x17c>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b13      	cmp	r3, #19
 800117e:	d10e      	bne.n	800119e <display_update+0x112>
 8001180:	4b22      	ldr	r3, [pc, #136]	; (800120c <display_update+0x180>)
 8001182:	889b      	ldrh	r3, [r3, #4]
 8001184:	3301      	adds	r3, #1
 8001186:	b29b      	uxth	r3, r3
 8001188:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800118c:	b29a      	uxth	r2, r3
 800118e:	4b1f      	ldr	r3, [pc, #124]	; (800120c <display_update+0x180>)
 8001190:	809a      	strh	r2, [r3, #4]
 8001192:	4b1e      	ldr	r3, [pc, #120]	; (800120c <display_update+0x180>)
 8001194:	2200      	movs	r2, #0
 8001196:	80da      	strh	r2, [r3, #6]
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <display_update+0x17c>)
 800119a:	2201      	movs	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]

		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 800119e:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <display_update+0x184>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	0a1b      	lsrs	r3, r3, #8
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <display_update+0x126>
 80011aa:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <display_update+0x18c>)
 80011ac:	22f8      	movs	r2, #248	; 0xf8
 80011ae:	701a      	strb	r2, [r3, #0]
 80011b0:	e002      	b.n	80011b8 <display_update+0x12c>
 80011b2:	4b19      	ldr	r3, [pc, #100]	; (8001218 <display_update+0x18c>)
 80011b4:	22fa      	movs	r2, #250	; 0xfa
 80011b6:	701a      	strb	r2, [r3, #0]

		spi_store[0]=spi_byte&255;
 80011b8:	4b17      	ldr	r3, [pc, #92]	; (8001218 <display_update+0x18c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	703b      	strb	r3, [r7, #0]
		spi_store[1]=((spi_hold>>4)<<4)&255;
 80011be:	4b14      	ldr	r3, [pc, #80]	; (8001210 <display_update+0x184>)
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	091b      	lsrs	r3, r3, #4
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	011b      	lsls	r3, r3, #4
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	707b      	strb	r3, [r7, #1]
		spi_store[2]=((spi_hold&15)<<4)&255;
 80011cc:	4b10      	ldr	r3, [pc, #64]	; (8001210 <display_update+0x184>)
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	011b      	lsls	r3, r3, #4
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	70bb      	strb	r3, [r7, #2]

	// send this to spi for now
			HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3, 3);  // working good ,blocking , never set time too high  or figure other option maybe DMA
 80011d6:	4639      	mov	r1, r7
 80011d8:	2303      	movs	r3, #3
 80011da:	2203      	movs	r2, #3
 80011dc:	480f      	ldr	r0, [pc, #60]	; (800121c <display_update+0x190>)
 80011de:	f006 f906 	bl	80073ee <HAL_SPI_Transmit>


disp_end=gfx_skip+gfx_counter[2]+gfx_counter[3];			// vsynch for displaybuffer
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <display_update+0x180>)
 80011e4:	889b      	ldrh	r3, [r3, #4]
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <display_update+0x17c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	4413      	add	r3, r2
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <display_update+0x180>)
 80011f2:	88db      	ldrh	r3, [r3, #6]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	4413      	add	r3, r2
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <display_update+0x194>)
 80011fc:	701a      	strb	r2, [r3, #0]


}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200006c0 	.word	0x200006c0
 800120c:	20002904 	.word	0x20002904
 8001210:	200020a2 	.word	0x200020a2
 8001214:	200024f8 	.word	0x200024f8
 8001218:	200020a0 	.word	0x200020a0
 800121c:	20002e88 	.word	0x20002e88
 8001220:	20002912 	.word	0x20002912

08001224 <display_fill>:
void display_fill(void)  {     // full update of gfx memory
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
loop_counter3=1;
 8001228:	4b10      	ldr	r3, [pc, #64]	; (800126c <display_fill+0x48>)
 800122a:	2201      	movs	r2, #1
 800122c:	701a      	strb	r2, [r3, #0]
for (n=0;n<2048;n++)	{ //fills up gfx ram or not
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <display_fill+0x4c>)
 8001230:	2200      	movs	r2, #0
 8001232:	801a      	strh	r2, [r3, #0]
 8001234:	e011      	b.n	800125a <display_fill+0x36>

enc2_dir=(n>>4)+menu_page[1]; 												// 0-128         +      0,127,255,
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <display_fill+0x4c>)
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	091b      	lsrs	r3, r3, #4
 800123c:	b29a      	uxth	r2, r3
 800123e:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <display_fill+0x50>)
 8001240:	885b      	ldrh	r3, [r3, #2]
 8001242:	4413      	add	r3, r2
 8001244:	b29a      	uxth	r2, r3
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <display_fill+0x54>)
 8001248:	801a      	strh	r2, [r3, #0]

displayBuffer();
 800124a:	f000 f817 	bl	800127c <displayBuffer>
for (n=0;n<2048;n++)	{ //fills up gfx ram or not
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <display_fill+0x4c>)
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	3301      	adds	r3, #1
 8001254:	b29a      	uxth	r2, r3
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <display_fill+0x4c>)
 8001258:	801a      	strh	r2, [r3, #0]
 800125a:	4b05      	ldr	r3, [pc, #20]	; (8001270 <display_fill+0x4c>)
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001262:	d3e8      	bcc.n	8001236 <display_fill+0x12>
}
//enc2_dir=menu_page[1];  // end clean
}
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20002913 	.word	0x20002913
 8001270:	20000bba 	.word	0x20000bba
 8001274:	200020b8 	.word	0x200020b8
 8001278:	20002096 	.word	0x20002096

0800127c <displayBuffer>:



void displayBuffer (void){        //  in a constant state of flux
 800127c:	b4b0      	push	{r4, r5, r7}
 800127e:	b089      	sub	sp, #36	; 0x24
 8001280:	af00      	add	r7, sp, #0

	if (disp_stepper==0) init_b=enc2_dir; else init_b=111+disp_stepper;  // fetch values for last line or cursor
 8001282:	4b39      	ldr	r3, [pc, #228]	; (8001368 <displayBuffer+0xec>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d104      	bne.n	8001294 <displayBuffer+0x18>
 800128a:	4b38      	ldr	r3, [pc, #224]	; (800136c <displayBuffer+0xf0>)
 800128c:	881a      	ldrh	r2, [r3, #0]
 800128e:	4b38      	ldr	r3, [pc, #224]	; (8001370 <displayBuffer+0xf4>)
 8001290:	801a      	strh	r2, [r3, #0]
 8001292:	e006      	b.n	80012a2 <displayBuffer+0x26>
 8001294:	4b34      	ldr	r3, [pc, #208]	; (8001368 <displayBuffer+0xec>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	b29b      	uxth	r3, r3
 800129a:	336f      	adds	r3, #111	; 0x6f
 800129c:	b29a      	uxth	r2, r3
 800129e:	4b34      	ldr	r3, [pc, #208]	; (8001370 <displayBuffer+0xf4>)
 80012a0:	801a      	strh	r2, [r3, #0]

	uint8_t d_count;
uint16_t init_x=((init_b>>4)<<3);    // normal x8 , try other 64 x16
 80012a2:	4b33      	ldr	r3, [pc, #204]	; (8001370 <displayBuffer+0xf4>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	091b      	lsrs	r3, r3, #4
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	83bb      	strh	r3, [r7, #28]
uint8_t init_x2=init_x&63;  // 0-64  character address in gfx
 80012ae:	8bbb      	ldrh	r3, [r7, #28]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012b6:	76fb      	strb	r3, [r7, #27]
uint8_t init_y=init_b&15;
 80012b8:	4b2d      	ldr	r3, [pc, #180]	; (8001370 <displayBuffer+0xf4>)
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	f003 030f 	and.w	r3, r3, #15
 80012c2:	76bb      	strb	r3, [r7, #26]
uint16_t store_x;
uint8_t lfotarget_menu[20]={0,40,16,8,40,40,48,56,64,72,0,0,0,0,0,0,0,0,0,0};  // keep lfo target list here for now *8
 80012c4:	4b2b      	ldr	r3, [pc, #172]	; (8001374 <displayBuffer+0xf8>)
 80012c6:	1d3c      	adds	r4, r7, #4
 80012c8:	461d      	mov	r5, r3
 80012ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ce:	682b      	ldr	r3, [r5, #0]
 80012d0:	6023      	str	r3, [r4, #0]
// just to point the lfo number



//if (enc2_dir<128){
	if (disp_stepper==0) { store_c= disp_lut [init_b>>4]  [init_y] ; feedback_pointer=((enc2_dir>>4)<<3)&127; feedback_line[10]=((enc2_dir&15)>>1)+48;  // pointer and data , runs at every character drawn at cursor
 80012d2:	4b25      	ldr	r3, [pc, #148]	; (8001368 <displayBuffer+0xec>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d17a      	bne.n	80013d0 <displayBuffer+0x154>
 80012da:	4b25      	ldr	r3, [pc, #148]	; (8001370 <displayBuffer+0xf4>)
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	091b      	lsrs	r3, r3, #4
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	461a      	mov	r2, r3
 80012e4:	7ebb      	ldrb	r3, [r7, #26]
 80012e6:	4924      	ldr	r1, [pc, #144]	; (8001378 <displayBuffer+0xfc>)
 80012e8:	0112      	lsls	r2, r2, #4
 80012ea:	4413      	add	r3, r2
 80012ec:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80012f0:	4b22      	ldr	r3, [pc, #136]	; (800137c <displayBuffer+0x100>)
 80012f2:	801a      	strh	r2, [r3, #0]
 80012f4:	4b1d      	ldr	r3, [pc, #116]	; (800136c <displayBuffer+0xf0>)
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	091b      	lsrs	r3, r3, #4
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	b29b      	uxth	r3, r3
 8001300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001304:	b29a      	uxth	r2, r3
 8001306:	4b1e      	ldr	r3, [pc, #120]	; (8001380 <displayBuffer+0x104>)
 8001308:	801a      	strh	r2, [r3, #0]
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <displayBuffer+0xf0>)
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	105b      	asrs	r3, r3, #1
 8001310:	b29b      	uxth	r3, r3
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	b29b      	uxth	r3, r3
 8001318:	3330      	adds	r3, #48	; 0x30
 800131a:	b29a      	uxth	r2, r3
 800131c:	4b19      	ldr	r3, [pc, #100]	; (8001384 <displayBuffer+0x108>)
 800131e:	829a      	strh	r2, [r3, #20]


	menulength = sizeof(menu_items) / sizeof(menu_items[feedback_pointer]);  // get length of data on location
 8001320:	4b19      	ldr	r3, [pc, #100]	; (8001388 <displayBuffer+0x10c>)
 8001322:	2235      	movs	r2, #53	; 0x35
 8001324:	701a      	strb	r2, [r3, #0]

	for (i = 0; i < 56; i++)
 8001326:	4b19      	ldr	r3, [pc, #100]	; (800138c <displayBuffer+0x110>)
 8001328:	2200      	movs	r2, #0
 800132a:	801a      	strh	r2, [r3, #0]
 800132c:	e014      	b.n	8001358 <displayBuffer+0xdc>
		{ if (menu_loc[i]==store_c){menu_locA=i;break;}    // gets disp_lut number that points in menu_items
 800132e:	4b17      	ldr	r3, [pc, #92]	; (800138c <displayBuffer+0x110>)
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	4b16      	ldr	r3, [pc, #88]	; (8001390 <displayBuffer+0x114>)
 8001336:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <displayBuffer+0x100>)
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	d104      	bne.n	800134c <displayBuffer+0xd0>
 8001342:	4b12      	ldr	r3, [pc, #72]	; (800138c <displayBuffer+0x110>)
 8001344:	881a      	ldrh	r2, [r3, #0]
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <displayBuffer+0x118>)
 8001348:	801a      	strh	r2, [r3, #0]
 800134a:	e009      	b.n	8001360 <displayBuffer+0xe4>
	for (i = 0; i < 56; i++)
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <displayBuffer+0x110>)
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	3301      	adds	r3, #1
 8001352:	b29a      	uxth	r2, r3
 8001354:	4b0d      	ldr	r3, [pc, #52]	; (800138c <displayBuffer+0x110>)
 8001356:	801a      	strh	r2, [r3, #0]
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <displayBuffer+0x110>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	2b37      	cmp	r3, #55	; 0x37
 800135e:	d9e6      	bls.n	800132e <displayBuffer+0xb2>

		}

	for (i = 0; i < menulength; i++)
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <displayBuffer+0x110>)
 8001362:	2200      	movs	r2, #0
 8001364:	801a      	strh	r2, [r3, #0]
 8001366:	e02c      	b.n	80013c2 <displayBuffer+0x146>
 8001368:	200006e5 	.word	0x200006e5
 800136c:	20002096 	.word	0x20002096
 8001370:	200020a6 	.word	0x200020a6
 8001374:	08009360 	.word	0x08009360
 8001378:	0800943c 	.word	0x0800943c
 800137c:	20000bb8 	.word	0x20000bb8
 8001380:	2000087c 	.word	0x2000087c
 8001384:	20000000 	.word	0x20000000
 8001388:	20000880 	.word	0x20000880
 800138c:	20000bdc 	.word	0x20000bdc
 8001390:	0800983c 	.word	0x0800983c
 8001394:	2000087e 	.word	0x2000087e
	{ menulist_hold[i+1]=menu_items[menu_locA] [i];
 8001398:	4b84      	ldr	r3, [pc, #528]	; (80015ac <displayBuffer+0x330>)
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	4b84      	ldr	r3, [pc, #528]	; (80015b0 <displayBuffer+0x334>)
 80013a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013a4:	4a83      	ldr	r2, [pc, #524]	; (80015b4 <displayBuffer+0x338>)
 80013a6:	8812      	ldrh	r2, [r2, #0]
 80013a8:	441a      	add	r2, r3
 80013aa:	4b82      	ldr	r3, [pc, #520]	; (80015b4 <displayBuffer+0x338>)
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	3301      	adds	r3, #1
 80013b0:	7811      	ldrb	r1, [r2, #0]
 80013b2:	4a81      	ldr	r2, [pc, #516]	; (80015b8 <displayBuffer+0x33c>)
 80013b4:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < menulength; i++)
 80013b6:	4b7f      	ldr	r3, [pc, #508]	; (80015b4 <displayBuffer+0x338>)
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	3301      	adds	r3, #1
 80013bc:	b29a      	uxth	r2, r3
 80013be:	4b7d      	ldr	r3, [pc, #500]	; (80015b4 <displayBuffer+0x338>)
 80013c0:	801a      	strh	r2, [r3, #0]
 80013c2:	4b7e      	ldr	r3, [pc, #504]	; (80015bc <displayBuffer+0x340>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	4b7a      	ldr	r3, [pc, #488]	; (80015b4 <displayBuffer+0x338>)
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d8e3      	bhi.n	8001398 <displayBuffer+0x11c>

	}   // grab item , this works but slower

	}

	if  ((disp_stepper<11) && (disp_stepper))   {      // 0-9 chars of line 8 , overhead is ok
 80013d0:	4b7b      	ldr	r3, [pc, #492]	; (80015c0 <displayBuffer+0x344>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b0a      	cmp	r3, #10
 80013d6:	d817      	bhi.n	8001408 <displayBuffer+0x18c>
 80013d8:	4b79      	ldr	r3, [pc, #484]	; (80015c0 <displayBuffer+0x344>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d013      	beq.n	8001408 <displayBuffer+0x18c>

//{	feedback_line[disp_stepper]=menuList[disp_stepper+feedback_pointer];  // feedback data info standard , per character 0-16

		feedback_line[disp_stepper]=menulist_hold[disp_stepper];  // feedback data modified 0-16
 80013e0:	4b77      	ldr	r3, [pc, #476]	; (80015c0 <displayBuffer+0x344>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b74      	ldr	r3, [pc, #464]	; (80015b8 <displayBuffer+0x33c>)
 80013e8:	5c99      	ldrb	r1, [r3, r2]
 80013ea:	4b75      	ldr	r3, [pc, #468]	; (80015c0 <displayBuffer+0x344>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	461a      	mov	r2, r3
 80013f0:	b289      	uxth	r1, r1
 80013f2:	4b74      	ldr	r3, [pc, #464]	; (80015c4 <displayBuffer+0x348>)
 80013f4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

store_c=feedback_line[disp_stepper];//gets potvalues pointer from menus or feedback line , per character
 80013f8:	4b71      	ldr	r3, [pc, #452]	; (80015c0 <displayBuffer+0x344>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b71      	ldr	r3, [pc, #452]	; (80015c4 <displayBuffer+0x348>)
 8001400:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001404:	4b70      	ldr	r3, [pc, #448]	; (80015c8 <displayBuffer+0x34c>)
 8001406:	801a      	strh	r2, [r3, #0]
	}

if (disp_stepper>10) store_c=feedback_line[disp_stepper];  /// just the lcd out  values at end of line 8
 8001408:	4b6d      	ldr	r3, [pc, #436]	; (80015c0 <displayBuffer+0x344>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b0a      	cmp	r3, #10
 800140e:	d907      	bls.n	8001420 <displayBuffer+0x1a4>
 8001410:	4b6b      	ldr	r3, [pc, #428]	; (80015c0 <displayBuffer+0x344>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	461a      	mov	r2, r3
 8001416:	4b6b      	ldr	r3, [pc, #428]	; (80015c4 <displayBuffer+0x348>)
 8001418:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800141c:	4b6a      	ldr	r3, [pc, #424]	; (80015c8 <displayBuffer+0x34c>)
 800141e:	801a      	strh	r2, [r3, #0]


	// all this can be simplified
	 if (store_c==64) store_c=47;  //EMPTY SPACE
 8001420:	4b69      	ldr	r3, [pc, #420]	; (80015c8 <displayBuffer+0x34c>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	2b40      	cmp	r3, #64	; 0x40
 8001426:	d102      	bne.n	800142e <displayBuffer+0x1b2>
 8001428:	4b67      	ldr	r3, [pc, #412]	; (80015c8 <displayBuffer+0x34c>)
 800142a:	222f      	movs	r2, #47	; 0x2f
 800142c:	801a      	strh	r2, [r3, #0]
	if ((store_c>127)&& (store_c<255))  {lcd_out3=potSource[store_c-128] ;     store_c= potValues[store_c&127]+48;															}		// NORMAL POTVALUES 0-127
 800142e:	4b66      	ldr	r3, [pc, #408]	; (80015c8 <displayBuffer+0x34c>)
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	2b7f      	cmp	r3, #127	; 0x7f
 8001434:	d916      	bls.n	8001464 <displayBuffer+0x1e8>
 8001436:	4b64      	ldr	r3, [pc, #400]	; (80015c8 <displayBuffer+0x34c>)
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	2bfe      	cmp	r3, #254	; 0xfe
 800143c:	d812      	bhi.n	8001464 <displayBuffer+0x1e8>
 800143e:	4b62      	ldr	r3, [pc, #392]	; (80015c8 <displayBuffer+0x34c>)
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	3b80      	subs	r3, #128	; 0x80
 8001444:	4a61      	ldr	r2, [pc, #388]	; (80015cc <displayBuffer+0x350>)
 8001446:	5cd3      	ldrb	r3, [r2, r3]
 8001448:	b29a      	uxth	r2, r3
 800144a:	4b61      	ldr	r3, [pc, #388]	; (80015d0 <displayBuffer+0x354>)
 800144c:	801a      	strh	r2, [r3, #0]
 800144e:	4b5e      	ldr	r3, [pc, #376]	; (80015c8 <displayBuffer+0x34c>)
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001456:	4a5f      	ldr	r2, [pc, #380]	; (80015d4 <displayBuffer+0x358>)
 8001458:	5cd3      	ldrb	r3, [r2, r3]
 800145a:	b29b      	uxth	r3, r3
 800145c:	3330      	adds	r3, #48	; 0x30
 800145e:	b29a      	uxth	r2, r3
 8001460:	4b59      	ldr	r3, [pc, #356]	; (80015c8 <displayBuffer+0x34c>)
 8001462:	801a      	strh	r2, [r3, #0]
	if ((store_c>254)	&& (store_c<384)) 											{lcd_out3=potSource[store_c-128] ;store_c= potValues[store_c-128]+48;}  // POTVALUES 128+
 8001464:	4b58      	ldr	r3, [pc, #352]	; (80015c8 <displayBuffer+0x34c>)
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	2bfe      	cmp	r3, #254	; 0xfe
 800146a:	d916      	bls.n	800149a <displayBuffer+0x21e>
 800146c:	4b56      	ldr	r3, [pc, #344]	; (80015c8 <displayBuffer+0x34c>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8001474:	d211      	bcs.n	800149a <displayBuffer+0x21e>
 8001476:	4b54      	ldr	r3, [pc, #336]	; (80015c8 <displayBuffer+0x34c>)
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	3b80      	subs	r3, #128	; 0x80
 800147c:	4a53      	ldr	r2, [pc, #332]	; (80015cc <displayBuffer+0x350>)
 800147e:	5cd3      	ldrb	r3, [r2, r3]
 8001480:	b29a      	uxth	r2, r3
 8001482:	4b53      	ldr	r3, [pc, #332]	; (80015d0 <displayBuffer+0x354>)
 8001484:	801a      	strh	r2, [r3, #0]
 8001486:	4b50      	ldr	r3, [pc, #320]	; (80015c8 <displayBuffer+0x34c>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	3b80      	subs	r3, #128	; 0x80
 800148c:	4a51      	ldr	r2, [pc, #324]	; (80015d4 <displayBuffer+0x358>)
 800148e:	5cd3      	ldrb	r3, [r2, r3]
 8001490:	b29b      	uxth	r3, r3
 8001492:	3330      	adds	r3, #48	; 0x30
 8001494:	b29a      	uxth	r2, r3
 8001496:	4b4c      	ldr	r3, [pc, #304]	; (80015c8 <displayBuffer+0x34c>)
 8001498:	801a      	strh	r2, [r3, #0]
//	if ((store_c>127)	&& (store_c<384)) 	{store_c= potValues[store_c&127]+48;}		// NORMAL POTVALUES
	if (store_c>511)		{store_c=store_c&127;			store_c= menuList2		[     (lfotarget_menu[   ((store_c>>3))  ])	+(store_c&7)]						; } // VARIABLE MENU ITEMS CHAR LUT
 800149a:	4b4b      	ldr	r3, [pc, #300]	; (80015c8 <displayBuffer+0x34c>)
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014a2:	d319      	bcc.n	80014d8 <displayBuffer+0x25c>
 80014a4:	4b48      	ldr	r3, [pc, #288]	; (80015c8 <displayBuffer+0x34c>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	4b46      	ldr	r3, [pc, #280]	; (80015c8 <displayBuffer+0x34c>)
 80014b0:	801a      	strh	r2, [r3, #0]
 80014b2:	4b45      	ldr	r3, [pc, #276]	; (80015c8 <displayBuffer+0x34c>)
 80014b4:	881b      	ldrh	r3, [r3, #0]
 80014b6:	08db      	lsrs	r3, r3, #3
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	3320      	adds	r3, #32
 80014bc:	443b      	add	r3, r7
 80014be:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80014c2:	461a      	mov	r2, r3
 80014c4:	4b40      	ldr	r3, [pc, #256]	; (80015c8 <displayBuffer+0x34c>)
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	4413      	add	r3, r2
 80014ce:	4a42      	ldr	r2, [pc, #264]	; (80015d8 <displayBuffer+0x35c>)
 80014d0:	5cd3      	ldrb	r3, [r2, r3]
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	4b3c      	ldr	r3, [pc, #240]	; (80015c8 <displayBuffer+0x34c>)
 80014d6:	801a      	strh	r2, [r3, #0]

	store_c=store_c-47; store_c = store_c &127;	  // spell no longer ?, store_c changes		STARTS FROM 0
 80014d8:	4b3b      	ldr	r3, [pc, #236]	; (80015c8 <displayBuffer+0x34c>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	3b2f      	subs	r3, #47	; 0x2f
 80014de:	b29a      	uxth	r2, r3
 80014e0:	4b39      	ldr	r3, [pc, #228]	; (80015c8 <displayBuffer+0x34c>)
 80014e2:	801a      	strh	r2, [r3, #0]
 80014e4:	4b38      	ldr	r3, [pc, #224]	; (80015c8 <displayBuffer+0x34c>)
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	4b36      	ldr	r3, [pc, #216]	; (80015c8 <displayBuffer+0x34c>)
 80014f0:	801a      	strh	r2, [r3, #0]

store_x=(store_c*8);  // i line characters , might shrink it and use extr for other  visuals
 80014f2:	4b35      	ldr	r3, [pc, #212]	; (80015c8 <displayBuffer+0x34c>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	833b      	strh	r3, [r7, #24]


if (( !loop_counter3) && (disp_stepper==0))     // blinker for cursor character only  , might just flip the whole last line from prev tables then its x4 faster
 80014fa:	4b38      	ldr	r3, [pc, #224]	; (80015dc <displayBuffer+0x360>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d11f      	bne.n	8001542 <displayBuffer+0x2c6>
 8001502:	4b2f      	ldr	r3, [pc, #188]	; (80015c0 <displayBuffer+0x344>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d11b      	bne.n	8001542 <displayBuffer+0x2c6>
	for (d_count=0;d_count<7;d_count++){
 800150a:	2300      	movs	r3, #0
 800150c:	77fb      	strb	r3, [r7, #31]
 800150e:	e014      	b.n	800153a <displayBuffer+0x2be>
						gfx_ram[d_count+init_x2] [init_y] = gfx_char[d_count+store_x]^127; //write character to ram ,should be elsewhere , blank is correct
 8001510:	7ffa      	ldrb	r2, [r7, #31]
 8001512:	8b3b      	ldrh	r3, [r7, #24]
 8001514:	4413      	add	r3, r2
 8001516:	4a32      	ldr	r2, [pc, #200]	; (80015e0 <displayBuffer+0x364>)
 8001518:	5cd1      	ldrb	r1, [r2, r3]
 800151a:	7ffa      	ldrb	r2, [r7, #31]
 800151c:	7efb      	ldrb	r3, [r7, #27]
 800151e:	441a      	add	r2, r3
 8001520:	7ebb      	ldrb	r3, [r7, #26]
 8001522:	f081 017f 	eor.w	r1, r1, #127	; 0x7f
 8001526:	b2c8      	uxtb	r0, r1
 8001528:	492e      	ldr	r1, [pc, #184]	; (80015e4 <displayBuffer+0x368>)
 800152a:	0112      	lsls	r2, r2, #4
 800152c:	440a      	add	r2, r1
 800152e:	4413      	add	r3, r2
 8001530:	4602      	mov	r2, r0
 8001532:	701a      	strb	r2, [r3, #0]
	for (d_count=0;d_count<7;d_count++){
 8001534:	7ffb      	ldrb	r3, [r7, #31]
 8001536:	3301      	adds	r3, #1
 8001538:	77fb      	strb	r3, [r7, #31]
 800153a:	7ffb      	ldrb	r3, [r7, #31]
 800153c:	2b06      	cmp	r3, #6
 800153e:	d9e7      	bls.n	8001510 <displayBuffer+0x294>
if (( !loop_counter3) && (disp_stepper==0))     // blinker for cursor character only  , might just flip the whole last line from prev tables then its x4 faster
 8001540:	e017      	b.n	8001572 <displayBuffer+0x2f6>
	}
else for (d_count=0;d_count<7;d_count++){
 8001542:	2300      	movs	r3, #0
 8001544:	77fb      	strb	r3, [r7, #31]
 8001546:	e011      	b.n	800156c <displayBuffer+0x2f0>
	gfx_ram[d_count+init_x2] [init_y] = gfx_char[d_count+store_x]; //write character to ram ,should be elsewhere , seems affected by later stufff
 8001548:	7ffa      	ldrb	r2, [r7, #31]
 800154a:	8b3b      	ldrh	r3, [r7, #24]
 800154c:	18d1      	adds	r1, r2, r3
 800154e:	7ffa      	ldrb	r2, [r7, #31]
 8001550:	7efb      	ldrb	r3, [r7, #27]
 8001552:	441a      	add	r2, r3
 8001554:	7ebb      	ldrb	r3, [r7, #26]
 8001556:	4822      	ldr	r0, [pc, #136]	; (80015e0 <displayBuffer+0x364>)
 8001558:	5c40      	ldrb	r0, [r0, r1]
 800155a:	4922      	ldr	r1, [pc, #136]	; (80015e4 <displayBuffer+0x368>)
 800155c:	0112      	lsls	r2, r2, #4
 800155e:	440a      	add	r2, r1
 8001560:	4413      	add	r3, r2
 8001562:	4602      	mov	r2, r0
 8001564:	701a      	strb	r2, [r3, #0]
else for (d_count=0;d_count<7;d_count++){
 8001566:	7ffb      	ldrb	r3, [r7, #31]
 8001568:	3301      	adds	r3, #1
 800156a:	77fb      	strb	r3, [r7, #31]
 800156c:	7ffb      	ldrb	r3, [r7, #31]
 800156e:	2b06      	cmp	r3, #6
 8001570:	d9ea      	bls.n	8001548 <displayBuffer+0x2cc>





gfx_ram[7+init_x2] [init_y] = 0; // last line is blank between rows or whatever
 8001572:	7efb      	ldrb	r3, [r7, #27]
 8001574:	1dda      	adds	r2, r3, #7
 8001576:	7ebb      	ldrb	r3, [r7, #26]
 8001578:	491a      	ldr	r1, [pc, #104]	; (80015e4 <displayBuffer+0x368>)
 800157a:	0112      	lsls	r2, r2, #4
 800157c:	440a      	add	r2, r1
 800157e:	4413      	add	r3, r2
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]



if (disp_stepper==15) disp_stepper=0; else disp_stepper++;				// count to 16
 8001584:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <displayBuffer+0x344>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b0f      	cmp	r3, #15
 800158a:	d103      	bne.n	8001594 <displayBuffer+0x318>
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <displayBuffer+0x344>)
 800158e:	2200      	movs	r2, #0
 8001590:	701a      	strb	r2, [r3, #0]

}
 8001592:	e005      	b.n	80015a0 <displayBuffer+0x324>
if (disp_stepper==15) disp_stepper=0; else disp_stepper++;				// count to 16
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <displayBuffer+0x344>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	3301      	adds	r3, #1
 800159a:	b2da      	uxtb	r2, r3
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <displayBuffer+0x344>)
 800159e:	701a      	strb	r2, [r3, #0]
}
 80015a0:	bf00      	nop
 80015a2:	3724      	adds	r7, #36	; 0x24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bcb0      	pop	{r4, r5, r7}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	2000087e 	.word	0x2000087e
 80015b0:	20000024 	.word	0x20000024
 80015b4:	20000bdc 	.word	0x20000bdc
 80015b8:	200000f8 	.word	0x200000f8
 80015bc:	20000880 	.word	0x20000880
 80015c0:	200006e5 	.word	0x200006e5
 80015c4:	20000000 	.word	0x20000000
 80015c8:	20000bb8 	.word	0x20000bb8
 80015cc:	20000a04 	.word	0x20000a04
 80015d0:	20002910 	.word	0x20002910
 80015d4:	20000884 	.word	0x20000884
 80015d8:	080098a8 	.word	0x080098a8
 80015dc:	20002913 	.word	0x20002913
 80015e0:	200002c0 	.word	0x200002c0
 80015e4:	200024f8 	.word	0x200024f8

080015e8 <sampling>:


void sampling(void){						// 18 ms of data
 80015e8:	b5b0      	push	{r4, r5, r7, lr}
 80015ea:	f5ad 5d85 	sub.w	sp, sp, #4256	; 0x10a0
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0

//	if (time_proc>580) time_final=time_proc;

if (time_proc>300)  	time_final[0]=time_proc;
 80015f2:	4baf      	ldr	r3, [pc, #700]	; (80018b0 <sampling+0x2c8>)
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80015fa:	d903      	bls.n	8001604 <sampling+0x1c>
 80015fc:	4bac      	ldr	r3, [pc, #688]	; (80018b0 <sampling+0x2c8>)
 80015fe:	881a      	ldrh	r2, [r3, #0]
 8001600:	4bac      	ldr	r3, [pc, #688]	; (80018b4 <sampling+0x2cc>)
 8001602:	801a      	strh	r2, [r3, #0]
	uint8_t t_ac;

uint8_t mask_i;
uint8_t mask_k;
uint8_t adsr_mult[5];
bank_write=0;
 8001604:	4bac      	ldr	r3, [pc, #688]	; (80018b8 <sampling+0x2d0>)
 8001606:	2200      	movs	r2, #0
 8001608:	801a      	strh	r2, [r3, #0]
//time_proc=0;   //millis

//adc_read();
//uint16_t isr_tempo=isrMask; // get tempo value
sample_pointB=sample_pointD;
 800160a:	4bac      	ldr	r3, [pc, #688]	; (80018bc <sampling+0x2d4>)
 800160c:	881a      	ldrh	r2, [r3, #0]
 800160e:	4bac      	ldr	r3, [pc, #688]	; (80018c0 <sampling+0x2d8>)
 8001610:	801a      	strh	r2, [r3, #0]
unsigned short tempo_start=0;  // enabled when i=isrMask;
 8001612:	2300      	movs	r3, #0
 8001614:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8001618:	f102 0204 	add.w	r2, r2, #4
 800161c:	8013      	strh	r3, [r2, #0]
static unsigned short tempo_end=0;   // last count before note start
uint16_t i_total;
uint16_t tempo_mod=tempo_lut[potSource[109]];  // set tempo,speed from lut 40-200bpm  ,changed to 4x for note lenght
 800161e:	4ba9      	ldr	r3, [pc, #676]	; (80018c4 <sampling+0x2dc>)
 8001620:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8001624:	461a      	mov	r2, r3
 8001626:	4ba8      	ldr	r3, [pc, #672]	; (80018c8 <sampling+0x2e0>)
 8001628:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800162c:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001630:	f102 0214 	add.w	r2, r2, #20
 8001634:	8013      	strh	r3, [r2, #0]

uint8_t l;			// 35.002khz(0.02857ms) sample, 1 sample is temp count (16x=0.00045712) , *16=1 note ,at 300 (437bpm),(1/(0.00002857*tempo count*16)=1beat in s
float freq_temp;	// (1/(bpm/60)) /0.00045712=tempo count ie 1093.8 for 120bpm
float freq2_temp;
float freq_adder;
float tempo_sync=16384/((tempo_mod*16)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80
 8001636:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800163a:	f103 0314 	add.w	r3, r3, #20
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	da00      	bge.n	8001646 <sampling+0x5e>
 8001644:	331f      	adds	r3, #31
 8001646:	115b      	asrs	r3, r3, #5
 8001648:	461a      	mov	r2, r3
 800164a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800164e:	fb93 f3f2 	sdiv	r3, r3, r2
 8001652:	ee07 3a90 	vmov	s15, r3
 8001656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800165a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800165e:	f103 0310 	add.w	r3, r3, #16
 8001662:	edc3 7a00 	vstr	s15, [r3]
tempo_sync=tempo_sync/80;  // bit weird her , this is adsr !
 8001666:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800166a:	f103 0310 	add.w	r3, r3, #16
 800166e:	ed93 7a00 	vldr	s14, [r3]
 8001672:	eddf 6a96 	vldr	s13, [pc, #600]	; 80018cc <sampling+0x2e4>
 8001676:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800167a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800167e:	f103 0310 	add.w	r3, r3, #16
 8001682:	edc3 7a00 	vstr	s15, [r3]

uint32_t  note_toggler[17]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //records note position on 0-512   using a bit
 8001686:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800168a:	f103 0308 	add.w	r3, r3, #8
 800168e:	2244      	movs	r2, #68	; 0x44
 8001690:	2100      	movs	r1, #0
 8001692:	4618      	mov	r0, r3
 8001694:	f007 fd04 	bl	80090a0 <memset>
for (i=0;i<16;i++) {  note_toggler[i]=0; }
 8001698:	4b8d      	ldr	r3, [pc, #564]	; (80018d0 <sampling+0x2e8>)
 800169a:	2200      	movs	r2, #0
 800169c:	801a      	strh	r2, [r3, #0]
 800169e:	e010      	b.n	80016c2 <sampling+0xda>
 80016a0:	4b8b      	ldr	r3, [pc, #556]	; (80018d0 <sampling+0x2e8>)
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 80016aa:	f103 0308 	add.w	r3, r3, #8
 80016ae:	443b      	add	r3, r7
 80016b0:	2200      	movs	r2, #0
 80016b2:	f843 2c80 	str.w	r2, [r3, #-128]
 80016b6:	4b86      	ldr	r3, [pc, #536]	; (80018d0 <sampling+0x2e8>)
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	3301      	adds	r3, #1
 80016bc:	b29a      	uxth	r2, r3
 80016be:	4b84      	ldr	r3, [pc, #528]	; (80018d0 <sampling+0x2e8>)
 80016c0:	801a      	strh	r2, [r3, #0]
 80016c2:	4b83      	ldr	r3, [pc, #524]	; (80018d0 <sampling+0x2e8>)
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	2b0f      	cmp	r3, #15
 80016c8:	d9ea      	bls.n	80016a0 <sampling+0xb8>

//lcd_out3=menu_page[1]; // still goes to 15

//lcd_out3=adc_values[0]+adc_values[1]+adc_values[2]; // 3 digit read out , works ok,, [2] works but thats it
//lcd_out3=lcd_out3+180;
potSource[150]=(lcd_out3/100)*16;  // still works
 80016ca:	4b82      	ldr	r3, [pc, #520]	; (80018d4 <sampling+0x2ec>)
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	4a82      	ldr	r2, [pc, #520]	; (80018d8 <sampling+0x2f0>)
 80016d0:	fba2 2303 	umull	r2, r3, r2, r3
 80016d4:	095b      	lsrs	r3, r3, #5
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	011b      	lsls	r3, r3, #4
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	4b79      	ldr	r3, [pc, #484]	; (80018c4 <sampling+0x2dc>)
 80016e0:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
potSource[151]=((lcd_out3 %100)/10)*16;		 // 0-160 to 0-10
 80016e4:	4b7b      	ldr	r3, [pc, #492]	; (80018d4 <sampling+0x2ec>)
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	4a7b      	ldr	r2, [pc, #492]	; (80018d8 <sampling+0x2f0>)
 80016ea:	fba2 1203 	umull	r1, r2, r2, r3
 80016ee:	0952      	lsrs	r2, r2, #5
 80016f0:	2164      	movs	r1, #100	; 0x64
 80016f2:	fb01 f202 	mul.w	r2, r1, r2
 80016f6:	1a9b      	subs	r3, r3, r2
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	4a78      	ldr	r2, [pc, #480]	; (80018dc <sampling+0x2f4>)
 80016fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001700:	08db      	lsrs	r3, r3, #3
 8001702:	b29b      	uxth	r3, r3
 8001704:	b2db      	uxtb	r3, r3
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4b6e      	ldr	r3, [pc, #440]	; (80018c4 <sampling+0x2dc>)
 800170c:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
potSource[152]=(lcd_out3%10)*16;
 8001710:	4b70      	ldr	r3, [pc, #448]	; (80018d4 <sampling+0x2ec>)
 8001712:	881a      	ldrh	r2, [r3, #0]
 8001714:	4b71      	ldr	r3, [pc, #452]	; (80018dc <sampling+0x2f4>)
 8001716:	fba3 1302 	umull	r1, r3, r3, r2
 800171a:	08d9      	lsrs	r1, r3, #3
 800171c:	460b      	mov	r3, r1
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	440b      	add	r3, r1
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	b29b      	uxth	r3, r3
 8001728:	b2db      	uxtb	r3, r3
 800172a:	011b      	lsls	r3, r3, #4
 800172c:	b2da      	uxtb	r2, r3
 800172e:	4b65      	ldr	r3, [pc, #404]	; (80018c4 <sampling+0x2dc>)
 8001730:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98


unsigned short  sine_zero;  // zero cross
note_holdA=0;
 8001734:	4b6a      	ldr	r3, [pc, #424]	; (80018e0 <sampling+0x2f8>)
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
//printf ("crap \n");
//printf("%d|",adc_values[0] );printf("%d|",adc_values[1] );printf("%d|",adc_values[2] );printf("%d|\n",adc_values[3] );
uint8_t note_patterns[8]={1,4,2,2,1,4,2,1,4,2,1,4,4};   // creating beats
 800173a:	4a6a      	ldr	r2, [pc, #424]	; (80018e4 <sampling+0x2fc>)
 800173c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001740:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001744:	e883 0003 	stmia.w	r3, {r0, r1}
uint8_t note_lenght=5-note_patterns[seq_pos&7] ; // note length modifier , higher faster
 8001748:	4b67      	ldr	r3, [pc, #412]	; (80018e8 <sampling+0x300>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8001754:	f103 0308 	add.w	r3, r3, #8
 8001758:	443b      	add	r3, r7
 800175a:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 800175e:	f1c3 0305 	rsb	r3, r3, #5
 8001762:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001766:	f102 020f 	add.w	r2, r2, #15
 800176a:	7013      	strb	r3, [r2, #0]
//tempo_mod=tempo_mod-63+(lfo_out[1]>>7);
//if (tempo_mod<450) tempo_mod=((tempo_mod-200)>>1) +200; // more res lower
uint8_t note_plain;
int8_t ring_mod=0;
 800176c:	2300      	movs	r3, #0
 800176e:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001772:	f102 020e 	add.w	r2, r2, #14
 8001776:	7013      	strb	r3, [r2, #0]
//sample_Accu2=0;
//printf (adc_values[0]," ",adc_values[1]," ",adc_values[2]," ","crap \n");
// some good phasin and delays here
uint8_t cross_fade[2];
uint8_t fader[17]={0,1,5,11,19,28,39,51,64,76,88,99,108,116,122,126,127}; // sine curve for cross fade
 8001778:	4b5c      	ldr	r3, [pc, #368]	; (80018ec <sampling+0x304>)
 800177a:	f507 5480 	add.w	r4, r7, #4096	; 0x1000
 800177e:	f104 0408 	add.w	r4, r4, #8
 8001782:	461d      	mov	r5, r3
 8001784:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001786:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001788:	682b      	ldr	r3, [r5, #0]
 800178a:	7023      	strb	r3, [r4, #0]
adc_values[2]= 15; //force for now
 800178c:	4b58      	ldr	r3, [pc, #352]	; (80018f0 <sampling+0x308>)
 800178e:	220f      	movs	r2, #15
 8001790:	809a      	strh	r2, [r3, #4]
if(adc_values[2]&16)     	{cross_fade[1]=127-fader[adc_values[2]&15]; cross_fade[2]=127;}  else {cross_fade[2]=fader[adc_values[2]&15]; cross_fade[1]=127;} //calculate crossfader
 8001792:	4b57      	ldr	r3, [pc, #348]	; (80018f0 <sampling+0x308>)
 8001794:	889b      	ldrh	r3, [r3, #4]
 8001796:	f003 0310 	and.w	r3, r3, #16
 800179a:	2b00      	cmp	r3, #0
 800179c:	d019      	beq.n	80017d2 <sampling+0x1ea>
 800179e:	4b54      	ldr	r3, [pc, #336]	; (80018f0 <sampling+0x308>)
 80017a0:	889b      	ldrh	r3, [r3, #4]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 80017aa:	f103 0308 	add.w	r3, r3, #8
 80017ae:	443b      	add	r3, r7
 80017b0:	f813 3ca0 	ldrb.w	r3, [r3, #-160]
 80017b4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80017be:	f102 021d 	add.w	r2, r2, #29
 80017c2:	7013      	strb	r3, [r2, #0]
 80017c4:	237f      	movs	r3, #127	; 0x7f
 80017c6:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80017ca:	f102 021e 	add.w	r2, r2, #30
 80017ce:	7013      	strb	r3, [r2, #0]
 80017d0:	e015      	b.n	80017fe <sampling+0x216>
 80017d2:	4b47      	ldr	r3, [pc, #284]	; (80018f0 <sampling+0x308>)
 80017d4:	889b      	ldrh	r3, [r3, #4]
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 80017de:	f103 0308 	add.w	r3, r3, #8
 80017e2:	443b      	add	r3, r7
 80017e4:	f813 3ca0 	ldrb.w	r3, [r3, #-160]
 80017e8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80017ec:	f102 021e 	add.w	r2, r2, #30
 80017f0:	7013      	strb	r3, [r2, #0]
 80017f2:	237f      	movs	r3, #127	; 0x7f
 80017f4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80017f8:	f102 021d 	add.w	r2, r2, #29
 80017fc:	7013      	strb	r3, [r2, #0]

// doing lfo calc here as it is slow only for now
////////////////////adsr/////////////////////////////////////////
if	 (adsr_temp==0) {		adsr_att=(161-potSource[20] ) *0.02 ; // for now all of them from this only , speed , 0-16  // rarely read
 80017fe:	4b3d      	ldr	r3, [pc, #244]	; (80018f4 <sampling+0x30c>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d146      	bne.n	8001894 <sampling+0x2ac>
 8001806:	4b2f      	ldr	r3, [pc, #188]	; (80018c4 <sampling+0x2dc>)
 8001808:	7d1b      	ldrb	r3, [r3, #20]
 800180a:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe ff5e 	bl	80006d0 <__aeabi_i2d>
 8001814:	a322      	add	r3, pc, #136	; (adr r3, 80018a0 <sampling+0x2b8>)
 8001816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181a:	f7fe fcdd 	bl	80001d8 <__aeabi_dmul>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4610      	mov	r0, r2
 8001824:	4619      	mov	r1, r3
 8001826:	f7fe ffbd 	bl	80007a4 <__aeabi_d2f>
 800182a:	4603      	mov	r3, r0
 800182c:	4a32      	ldr	r2, [pc, #200]	; (80018f8 <sampling+0x310>)
 800182e:	6013      	str	r3, [r2, #0]
as_sustain=((161-potSource[21])*0.01);  // length and level this is ok is running 1/16 ish				as_attack=as_attack-as_sustain;
 8001830:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <sampling+0x2dc>)
 8001832:	7d5b      	ldrb	r3, [r3, #21]
 8001834:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe ff49 	bl	80006d0 <__aeabi_i2d>
 800183e:	a31a      	add	r3, pc, #104	; (adr r3, 80018a8 <sampling+0x2c0>)
 8001840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001844:	f7fe fcc8 	bl	80001d8 <__aeabi_dmul>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	f7fe ffa8 	bl	80007a4 <__aeabi_d2f>
 8001854:	4603      	mov	r3, r0
 8001856:	4a29      	ldr	r2, [pc, #164]	; (80018fc <sampling+0x314>)
 8001858:	6013      	str	r3, [r2, #0]
adsr_att=adsr_att*adsr_att;
 800185a:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <sampling+0x310>)
 800185c:	ed93 7a00 	vldr	s14, [r3]
 8001860:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <sampling+0x310>)
 8001862:	edd3 7a00 	vldr	s15, [r3]
 8001866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800186a:	4b23      	ldr	r3, [pc, #140]	; (80018f8 <sampling+0x310>)
 800186c:	edc3 7a00 	vstr	s15, [r3]
as_sustain=as_sustain*as_sustain;
 8001870:	4b22      	ldr	r3, [pc, #136]	; (80018fc <sampling+0x314>)
 8001872:	ed93 7a00 	vldr	s14, [r3]
 8001876:	4b21      	ldr	r3, [pc, #132]	; (80018fc <sampling+0x314>)
 8001878:	edd3 7a00 	vldr	s15, [r3]
 800187c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001880:	4b1e      	ldr	r3, [pc, #120]	; (80018fc <sampling+0x314>)
 8001882:	edc3 7a00 	vstr	s15, [r3]

adsr_temp=1;
 8001886:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <sampling+0x30c>)
 8001888:	2201      	movs	r2, #1
 800188a:	701a      	strb	r2, [r3, #0]
as_attack=0;
 800188c:	4b1c      	ldr	r3, [pc, #112]	; (8001900 <sampling+0x318>)
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
}

float lut_temp;

for (i=0;i<256;i++) {
 8001894:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <sampling+0x2e8>)
 8001896:	2200      	movs	r2, #0
 8001898:	801a      	strh	r2, [r3, #0]
 800189a:	e104      	b.n	8001aa6 <sampling+0x4be>
 800189c:	f3af 8000 	nop.w
 80018a0:	47ae147b 	.word	0x47ae147b
 80018a4:	3f947ae1 	.word	0x3f947ae1
 80018a8:	47ae147b 	.word	0x47ae147b
 80018ac:	3f847ae1 	.word	0x3f847ae1
 80018b0:	20002d30 	.word	0x20002d30
 80018b4:	20002d2c 	.word	0x20002d2c
 80018b8:	200002be 	.word	0x200002be
 80018bc:	200013e6 	.word	0x200013e6
 80018c0:	20000bda 	.word	0x20000bda
 80018c4:	20000a04 	.word	0x20000a04
 80018c8:	200023b4 	.word	0x200023b4
 80018cc:	42a00000 	.word	0x42a00000
 80018d0:	20000bdc 	.word	0x20000bdc
 80018d4:	20002910 	.word	0x20002910
 80018d8:	51eb851f 	.word	0x51eb851f
 80018dc:	cccccccd 	.word	0xcccccccd
 80018e0:	20002053 	.word	0x20002053
 80018e4:	08009374 	.word	0x08009374
 80018e8:	20000bb4 	.word	0x20000bb4
 80018ec:	0800937c 	.word	0x0800937c
 80018f0:	200002b4 	.word	0x200002b4
 80018f4:	2000202c 	.word	0x2000202c
 80018f8:	20002900 	.word	0x20002900
 80018fc:	200028fc 	.word	0x200028fc
 8001900:	200028f8 	.word	0x200028f8

	if     (as_attack<1000)    																		{as_attack=as_attack+adsr_att;					lut_temp=as_attack; } //0-1000
 8001904:	4b8e      	ldr	r3, [pc, #568]	; (8001b40 <sampling+0x558>)
 8001906:	edd3 7a00 	vldr	s15, [r3]
 800190a:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8001b44 <sampling+0x55c>
 800190e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001916:	d511      	bpl.n	800193c <sampling+0x354>
 8001918:	4b89      	ldr	r3, [pc, #548]	; (8001b40 <sampling+0x558>)
 800191a:	ed93 7a00 	vldr	s14, [r3]
 800191e:	4b8a      	ldr	r3, [pc, #552]	; (8001b48 <sampling+0x560>)
 8001920:	edd3 7a00 	vldr	s15, [r3]
 8001924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001928:	4b85      	ldr	r3, [pc, #532]	; (8001b40 <sampling+0x558>)
 800192a:	edc3 7a00 	vstr	s15, [r3]
 800192e:	4b84      	ldr	r3, [pc, #528]	; (8001b40 <sampling+0x558>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001936:	f102 021c 	add.w	r2, r2, #28
 800193a:	6013      	str	r3, [r2, #0]
	 if  ((as_attack<1500)  && (as_attack>999))  										{as_attack=as_attack+adsr_att;					lut_temp=1500-(as_attack-500);  }  // 1000-500
 800193c:	4b80      	ldr	r3, [pc, #512]	; (8001b40 <sampling+0x558>)
 800193e:	edd3 7a00 	vldr	s15, [r3]
 8001942:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8001b4c <sampling+0x564>
 8001946:	eef4 7ac7 	vcmpe.f32	s15, s14
 800194a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194e:	d525      	bpl.n	800199c <sampling+0x3b4>
 8001950:	4b7b      	ldr	r3, [pc, #492]	; (8001b40 <sampling+0x558>)
 8001952:	edd3 7a00 	vldr	s15, [r3]
 8001956:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8001b50 <sampling+0x568>
 800195a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800195e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001962:	dd1b      	ble.n	800199c <sampling+0x3b4>
 8001964:	4b76      	ldr	r3, [pc, #472]	; (8001b40 <sampling+0x558>)
 8001966:	ed93 7a00 	vldr	s14, [r3]
 800196a:	4b77      	ldr	r3, [pc, #476]	; (8001b48 <sampling+0x560>)
 800196c:	edd3 7a00 	vldr	s15, [r3]
 8001970:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001974:	4b72      	ldr	r3, [pc, #456]	; (8001b40 <sampling+0x558>)
 8001976:	edc3 7a00 	vstr	s15, [r3]
 800197a:	4b71      	ldr	r3, [pc, #452]	; (8001b40 <sampling+0x558>)
 800197c:	edd3 7a00 	vldr	s15, [r3]
 8001980:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8001b54 <sampling+0x56c>
 8001984:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001988:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8001b4c <sampling+0x564>
 800198c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001990:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001994:	f103 031c 	add.w	r3, r3, #28
 8001998:	edc3 7a00 	vstr	s15, [r3]
	 if ((as_attack>1499)   && 		(as_attack<2000)) 																{		lut_temp=500; 	as_attack=as_attack+as_sustain;}
 800199c:	4b68      	ldr	r3, [pc, #416]	; (8001b40 <sampling+0x558>)
 800199e:	edd3 7a00 	vldr	s15, [r3]
 80019a2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001b58 <sampling+0x570>
 80019a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ae:	dd1a      	ble.n	80019e6 <sampling+0x3fe>
 80019b0:	4b63      	ldr	r3, [pc, #396]	; (8001b40 <sampling+0x558>)
 80019b2:	edd3 7a00 	vldr	s15, [r3]
 80019b6:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001b5c <sampling+0x574>
 80019ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c2:	d510      	bpl.n	80019e6 <sampling+0x3fe>
 80019c4:	4b66      	ldr	r3, [pc, #408]	; (8001b60 <sampling+0x578>)
 80019c6:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80019ca:	f102 021c 	add.w	r2, r2, #28
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b5b      	ldr	r3, [pc, #364]	; (8001b40 <sampling+0x558>)
 80019d2:	ed93 7a00 	vldr	s14, [r3]
 80019d6:	4b63      	ldr	r3, [pc, #396]	; (8001b64 <sampling+0x57c>)
 80019d8:	edd3 7a00 	vldr	s15, [r3]
 80019dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e0:	4b57      	ldr	r3, [pc, #348]	; (8001b40 <sampling+0x558>)
 80019e2:	edc3 7a00 	vstr	s15, [r3]
	if ((as_attack>1999)  &&  (as_attack<2500)	)																							{as_attack=as_attack+as_sustain	;	lut_temp=2500-as_attack; } //500-0;
 80019e6:	4b56      	ldr	r3, [pc, #344]	; (8001b40 <sampling+0x558>)
 80019e8:	edd3 7a00 	vldr	s15, [r3]
 80019ec:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001b68 <sampling+0x580>
 80019f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f8:	dd21      	ble.n	8001a3e <sampling+0x456>
 80019fa:	4b51      	ldr	r3, [pc, #324]	; (8001b40 <sampling+0x558>)
 80019fc:	edd3 7a00 	vldr	s15, [r3]
 8001a00:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001b6c <sampling+0x584>
 8001a04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0c:	d517      	bpl.n	8001a3e <sampling+0x456>
 8001a0e:	4b4c      	ldr	r3, [pc, #304]	; (8001b40 <sampling+0x558>)
 8001a10:	ed93 7a00 	vldr	s14, [r3]
 8001a14:	4b53      	ldr	r3, [pc, #332]	; (8001b64 <sampling+0x57c>)
 8001a16:	edd3 7a00 	vldr	s15, [r3]
 8001a1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a1e:	4b48      	ldr	r3, [pc, #288]	; (8001b40 <sampling+0x558>)
 8001a20:	edc3 7a00 	vstr	s15, [r3]
 8001a24:	4b46      	ldr	r3, [pc, #280]	; (8001b40 <sampling+0x558>)
 8001a26:	edd3 7a00 	vldr	s15, [r3]
 8001a2a:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8001b6c <sampling+0x584>
 8001a2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a32:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001a36:	f103 031c 	add.w	r3, r3, #28
 8001a3a:	edc3 7a00 	vstr	s15, [r3]
	if (as_attack>3000)   																																			{lut_temp=1; as_attack=4000; }     // THE END
 8001a3e:	4b40      	ldr	r3, [pc, #256]	; (8001b40 <sampling+0x558>)
 8001a40:	edd3 7a00 	vldr	s15, [r3]
 8001a44:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001b70 <sampling+0x588>
 8001a48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a50:	dd09      	ble.n	8001a66 <sampling+0x47e>
 8001a52:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a56:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001a5a:	f102 021c 	add.w	r2, r2, #28
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	4b37      	ldr	r3, [pc, #220]	; (8001b40 <sampling+0x558>)
 8001a62:	4a44      	ldr	r2, [pc, #272]	; (8001b74 <sampling+0x58c>)
 8001a64:	601a      	str	r2, [r3, #0]

adsr_lut[i]= lut_temp*0.001;
 8001a66:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001a6a:	f103 031c 	add.w	r3, r3, #28
 8001a6e:	6818      	ldr	r0, [r3, #0]
 8001a70:	f7fe fe40 	bl	80006f4 <__aeabi_f2d>
 8001a74:	a330      	add	r3, pc, #192	; (adr r3, 8001b38 <sampling+0x550>)
 8001a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7a:	f7fe fbad 	bl	80001d8 <__aeabi_dmul>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	493d      	ldr	r1, [pc, #244]	; (8001b78 <sampling+0x590>)
 8001a84:	8809      	ldrh	r1, [r1, #0]
 8001a86:	460c      	mov	r4, r1
 8001a88:	4610      	mov	r0, r2
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f7fe fe8a 	bl	80007a4 <__aeabi_d2f>
 8001a90:	4602      	mov	r2, r0
 8001a92:	493a      	ldr	r1, [pc, #232]	; (8001b7c <sampling+0x594>)
 8001a94:	00a3      	lsls	r3, r4, #2
 8001a96:	440b      	add	r3, r1
 8001a98:	601a      	str	r2, [r3, #0]
for (i=0;i<256;i++) {
 8001a9a:	4b37      	ldr	r3, [pc, #220]	; (8001b78 <sampling+0x590>)
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	4b35      	ldr	r3, [pc, #212]	; (8001b78 <sampling+0x590>)
 8001aa4:	801a      	strh	r2, [r3, #0]
 8001aa6:	4b34      	ldr	r3, [pc, #208]	; (8001b78 <sampling+0x590>)
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	2bff      	cmp	r3, #255	; 0xff
 8001aac:	f67f af2a 	bls.w	8001904 <sampling+0x31c>
}


///////////////////////////////////////////////////////////////

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8001ab0:	4b31      	ldr	r3, [pc, #196]	; (8001b78 <sampling+0x590>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	801a      	strh	r2, [r3, #0]
 8001ab6:	e335      	b.n	8002124 <sampling+0xb3c>

	i_total=i+sample_pointB;
 8001ab8:	4b2f      	ldr	r3, [pc, #188]	; (8001b78 <sampling+0x590>)
 8001aba:	881a      	ldrh	r2, [r3, #0]
 8001abc:	4b30      	ldr	r3, [pc, #192]	; (8001b80 <sampling+0x598>)
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001ac6:	f102 0202 	add.w	r2, r2, #2
 8001aca:	8013      	strh	r3, [r2, #0]
	i_frac=i>>6;
 8001acc:	4b2a      	ldr	r3, [pc, #168]	; (8001b78 <sampling+0x590>)
 8001ace:	881b      	ldrh	r3, [r3, #0]
 8001ad0:	099b      	lsrs	r3, r3, #6
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	4b2b      	ldr	r3, [pc, #172]	; (8001b84 <sampling+0x59c>)
 8001ad8:	701a      	strb	r2, [r3, #0]
	note_plain=potValues[seq_pos & 7 ];
 8001ada:	4b2b      	ldr	r3, [pc, #172]	; (8001b88 <sampling+0x5a0>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	4a2a      	ldr	r2, [pc, #168]	; (8001b8c <sampling+0x5a4>)
 8001ae4:	5cd3      	ldrb	r3, [r2, r3]
 8001ae6:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001aea:	f102 021f 	add.w	r2, r2, #31
 8001aee:	7013      	strb	r3, [r2, #0]
potValues[i&255]=potSource[i&255]>>4; //just to update values
 8001af0:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <sampling+0x590>)
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	4a26      	ldr	r2, [pc, #152]	; (8001b90 <sampling+0x5a8>)
 8001af8:	5cd2      	ldrb	r2, [r2, r3]
 8001afa:	4b1f      	ldr	r3, [pc, #124]	; (8001b78 <sampling+0x590>)
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	0912      	lsrs	r2, r2, #4
 8001b02:	b2d1      	uxtb	r1, r2
 8001b04:	4a21      	ldr	r2, [pc, #132]	; (8001b8c <sampling+0x5a4>)
 8001b06:	54d1      	strb	r1, [r2, r3]
	if (tempo_count>=tempo_mod) { next_isr=(next_isr+1)& 4095;tempo_count=0;  }  else {tempo_count++; }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 8001b08:	4b22      	ldr	r3, [pc, #136]	; (8001b94 <sampling+0x5ac>)
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001b10:	f102 0214 	add.w	r2, r2, #20
 8001b14:	8812      	ldrh	r2, [r2, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d840      	bhi.n	8001b9c <sampling+0x5b4>
 8001b1a:	4b1f      	ldr	r3, [pc, #124]	; (8001b98 <sampling+0x5b0>)
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <sampling+0x5b0>)
 8001b2a:	801a      	strh	r2, [r3, #0]
 8001b2c:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <sampling+0x5ac>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	801a      	strh	r2, [r3, #0]
 8001b32:	e039      	b.n	8001ba8 <sampling+0x5c0>
 8001b34:	f3af 8000 	nop.w
 8001b38:	d2f1a9fc 	.word	0xd2f1a9fc
 8001b3c:	3f50624d 	.word	0x3f50624d
 8001b40:	200028f8 	.word	0x200028f8
 8001b44:	447a0000 	.word	0x447a0000
 8001b48:	20002900 	.word	0x20002900
 8001b4c:	44bb8000 	.word	0x44bb8000
 8001b50:	4479c000 	.word	0x4479c000
 8001b54:	43fa0000 	.word	0x43fa0000
 8001b58:	44bb6000 	.word	0x44bb6000
 8001b5c:	44fa0000 	.word	0x44fa0000
 8001b60:	43fa0000 	.word	0x43fa0000
 8001b64:	200028fc 	.word	0x200028fc
 8001b68:	44f9e000 	.word	0x44f9e000
 8001b6c:	451c4000 	.word	0x451c4000
 8001b70:	453b8000 	.word	0x453b8000
 8001b74:	457a0000 	.word	0x457a0000
 8001b78:	20000bdc 	.word	0x20000bdc
 8001b7c:	20001c2c 	.word	0x20001c2c
 8001b80:	20000bda 	.word	0x20000bda
 8001b84:	20002158 	.word	0x20002158
 8001b88:	20000bb4 	.word	0x20000bb4
 8001b8c:	20000884 	.word	0x20000884
 8001b90:	20000a04 	.word	0x20000a04
 8001b94:	2000209a 	.word	0x2000209a
 8001b98:	20002046 	.word	0x20002046
 8001b9c:	4ba0      	ldr	r3, [pc, #640]	; (8001e20 <sampling+0x838>)
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	4b9e      	ldr	r3, [pc, #632]	; (8001e20 <sampling+0x838>)
 8001ba6:	801a      	strh	r2, [r3, #0]
// tempo_count is about 1000-400
	tempo_start=0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8001bae:	f102 0204 	add.w	r2, r2, #4
 8001bb2:	8013      	strh	r3, [r2, #0]
	if ((next_isr>>4) != (seq_pos)) { 					// next note step 140ms
 8001bb4:	4b9b      	ldr	r3, [pc, #620]	; (8001e24 <sampling+0x83c>)
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	091b      	lsrs	r3, r3, #4
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	4b9a      	ldr	r3, [pc, #616]	; (8001e28 <sampling+0x840>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d00c      	beq.n	8001be0 <sampling+0x5f8>
		seq_pos=(next_isr>>4); // seq pos =256 max , isr = 1/16 of a note, note lenght is 1-4
 8001bc6:	4b97      	ldr	r3, [pc, #604]	; (8001e24 <sampling+0x83c>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	091b      	lsrs	r3, r3, #4
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	4b95      	ldr	r3, [pc, #596]	; (8001e28 <sampling+0x840>)
 8001bd2:	701a      	strb	r2, [r3, #0]
		tempo_start=1;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8001bda:	f102 0204 	add.w	r2, r2, #4
 8001bde:	8013      	strh	r3, [r2, #0]
// record note triggers or seq_changes position ,NEEDS TO BE OFF FOR NOTE 0
}


	if(tempo_start  )    // Calculates only on note change, gotta change seq_pos somehow  , only activates when change in seq pos
 8001be0:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8001be4:	f103 0304 	add.w	r3, r3, #4
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f000 80fc 	beq.w	8001de8 <sampling+0x800>
	{
	//printf("\n");//	ITM_SendChar( 65 );   //  Send ASCII code 65 = ’A’
	//printf("%d" ,note_channel[10]);


		potValues[32]=(adc_values[0]>>2)&15; //assigned pots to start of loopers 0-16,works
 8001bf0:	4b8e      	ldr	r3, [pc, #568]	; (8001e2c <sampling+0x844>)
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	089b      	lsrs	r3, r3, #2
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	4b8b      	ldr	r3, [pc, #556]	; (8001e30 <sampling+0x848>)
 8001c02:	f883 2020 	strb.w	r2, [r3, #32]
		potValues[33]=(adc_values[1]>>2)&15;
 8001c06:	4b89      	ldr	r3, [pc, #548]	; (8001e2c <sampling+0x844>)
 8001c08:	885b      	ldrh	r3, [r3, #2]
 8001c0a:	089b      	lsrs	r3, r3, #2
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	f003 030f 	and.w	r3, r3, #15
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	4b86      	ldr	r3, [pc, #536]	; (8001e30 <sampling+0x848>)
 8001c18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21


		seq_loop[2]=((potValues[32]+(seq_pos&7))&15); // calc  8 note loop positions sets looping point in sequence
 8001c1c:	4b84      	ldr	r3, [pc, #528]	; (8001e30 <sampling+0x848>)
 8001c1e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001c22:	4b81      	ldr	r3, [pc, #516]	; (8001e28 <sampling+0x840>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	f003 030f 	and.w	r3, r3, #15
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	4b7f      	ldr	r3, [pc, #508]	; (8001e34 <sampling+0x84c>)
 8001c38:	709a      	strb	r2, [r3, #2]

		//seq_loop[3]=(potValues[33]+(( seq_pos&31 ) >>2)) & 15;  // quater speed
			seq_loop[3]=((potValues[33]+(seq_pos&15))&15); //sets looping point in sequence this is full 16 note
 8001c3a:	4b7d      	ldr	r3, [pc, #500]	; (8001e30 <sampling+0x848>)
 8001c3c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001c40:	4b79      	ldr	r3, [pc, #484]	; (8001e28 <sampling+0x840>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	4413      	add	r3, r2
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	f003 030f 	and.w	r3, r3, #15
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	4b79      	ldr	r3, [pc, #484]	; (8001e34 <sampling+0x84c>)
 8001c50:	70da      	strb	r2, [r3, #3]

			seq_loop[4]=((potValues[32]+(seq_pos&7))&15);
 8001c52:	4b77      	ldr	r3, [pc, #476]	; (8001e30 <sampling+0x848>)
 8001c54:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001c58:	4b73      	ldr	r3, [pc, #460]	; (8001e28 <sampling+0x840>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	4413      	add	r3, r2
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	4b71      	ldr	r3, [pc, #452]	; (8001e34 <sampling+0x84c>)
 8001c6e:	711a      	strb	r2, [r3, #4]

		//seq_loop[4]=((potValues[32]+((seq_pos&15)>>1))&15); // half speed

		note_channel[2]=potValues[80+seq_loop[2]]+potValues[72];  //loop 8 notes from pos and x times
 8001c70:	4b70      	ldr	r3, [pc, #448]	; (8001e34 <sampling+0x84c>)
 8001c72:	789b      	ldrb	r3, [r3, #2]
 8001c74:	3350      	adds	r3, #80	; 0x50
 8001c76:	4a6e      	ldr	r2, [pc, #440]	; (8001e30 <sampling+0x848>)
 8001c78:	5cd3      	ldrb	r3, [r2, r3]
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	4b6c      	ldr	r3, [pc, #432]	; (8001e30 <sampling+0x848>)
 8001c7e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	4413      	add	r3, r2
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	4b6b      	ldr	r3, [pc, #428]	; (8001e38 <sampling+0x850>)
 8001c8a:	809a      	strh	r2, [r3, #4]
		note_channel[3]=potValues[seq_loop[3]];  //loop 8 notes from pos and x times ,might disable normal adsr completely
 8001c8c:	4b69      	ldr	r3, [pc, #420]	; (8001e34 <sampling+0x84c>)
 8001c8e:	78db      	ldrb	r3, [r3, #3]
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b67      	ldr	r3, [pc, #412]	; (8001e30 <sampling+0x848>)
 8001c94:	5c9b      	ldrb	r3, [r3, r2]
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	4b67      	ldr	r3, [pc, #412]	; (8001e38 <sampling+0x850>)
 8001c9a:	80da      	strh	r2, [r3, #6]
	if (note_channel[3]) 		{note_channel[3]=note_channel[3]+potValues[73];	adsr_retrigger[3]=1; note_toggler[i>>5]=1<<(i&31   )   ; } // stay at zero for off
 8001c9c:	4b66      	ldr	r3, [pc, #408]	; (8001e38 <sampling+0x850>)
 8001c9e:	88db      	ldrh	r3, [r3, #6]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d01e      	beq.n	8001ce2 <sampling+0x6fa>
 8001ca4:	4b64      	ldr	r3, [pc, #400]	; (8001e38 <sampling+0x850>)
 8001ca6:	88da      	ldrh	r2, [r3, #6]
 8001ca8:	4b61      	ldr	r3, [pc, #388]	; (8001e30 <sampling+0x848>)
 8001caa:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	4413      	add	r3, r2
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	4b60      	ldr	r3, [pc, #384]	; (8001e38 <sampling+0x850>)
 8001cb6:	80da      	strh	r2, [r3, #6]
 8001cb8:	4b60      	ldr	r3, [pc, #384]	; (8001e3c <sampling+0x854>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	80da      	strh	r2, [r3, #6]
 8001cbe:	4b60      	ldr	r3, [pc, #384]	; (8001e40 <sampling+0x858>)
 8001cc0:	881b      	ldrh	r3, [r3, #0]
 8001cc2:	f003 031f 	and.w	r3, r3, #31
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	409a      	lsls	r2, r3
 8001cca:	4b5d      	ldr	r3, [pc, #372]	; (8001e40 <sampling+0x858>)
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	095b      	lsrs	r3, r3, #5
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8001cd8:	f103 0308 	add.w	r3, r3, #8
 8001cdc:	443b      	add	r3, r7
 8001cde:	f843 2c80 	str.w	r2, [r3, #-128]
	//note_channel[3]=(note_channel[3]-4)+(lfo_out[2]>>11);

	//if (((seq_pos&7)==0) && (adsr_toggle[6]==2))		{adsr_retrigger[6]=1; } else adsr_retrigger[6]=0; // delete


	note_channel[5]=potValues[80+(seq_pos&15)];  // sample
 8001ce2:	4b51      	ldr	r3, [pc, #324]	; (8001e28 <sampling+0x840>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	3350      	adds	r3, #80	; 0x50
 8001cec:	4a50      	ldr	r2, [pc, #320]	; (8001e30 <sampling+0x848>)
 8001cee:	5cd3      	ldrb	r3, [r2, r3]
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	4b51      	ldr	r3, [pc, #324]	; (8001e38 <sampling+0x850>)
 8001cf4:	815a      	strh	r2, [r3, #10]


	if ((note_channel[5]) && (adsr_toggle[5]==2)) {note_holdB=note_channel[5]; one_shot=0;}  // grab note when on ,one shot also , also delete
 8001cf6:	4b50      	ldr	r3, [pc, #320]	; (8001e38 <sampling+0x850>)
 8001cf8:	895b      	ldrh	r3, [r3, #10]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00b      	beq.n	8001d16 <sampling+0x72e>
 8001cfe:	4b51      	ldr	r3, [pc, #324]	; (8001e44 <sampling+0x85c>)
 8001d00:	795b      	ldrb	r3, [r3, #5]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d107      	bne.n	8001d16 <sampling+0x72e>
 8001d06:	4b4c      	ldr	r3, [pc, #304]	; (8001e38 <sampling+0x850>)
 8001d08:	895b      	ldrh	r3, [r3, #10]
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	4b4e      	ldr	r3, [pc, #312]	; (8001e48 <sampling+0x860>)
 8001d0e:	701a      	strb	r2, [r3, #0]
 8001d10:	4b4e      	ldr	r3, [pc, #312]	; (8001e4c <sampling+0x864>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]


	note_holdB=potValues[80+seq_loop[2]]+(potValues[74]);  //
 8001d16:	4b47      	ldr	r3, [pc, #284]	; (8001e34 <sampling+0x84c>)
 8001d18:	789b      	ldrb	r3, [r3, #2]
 8001d1a:	3350      	adds	r3, #80	; 0x50
 8001d1c:	4a44      	ldr	r2, [pc, #272]	; (8001e30 <sampling+0x848>)
 8001d1e:	5cd2      	ldrb	r2, [r2, r3]
 8001d20:	4b43      	ldr	r3, [pc, #268]	; (8001e30 <sampling+0x848>)
 8001d22:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8001d26:	4413      	add	r3, r2
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4b47      	ldr	r3, [pc, #284]	; (8001e48 <sampling+0x860>)
 8001d2c:	701a      	strb	r2, [r3, #0]

	//note_holdB=(note_holdB-4)+(lfo_out[2][i_frac]>>11);  //no go with float, disabler as lfo produces garbage



	note_holdB=MajorNote[note_holdB];
 8001d2e:	4b46      	ldr	r3, [pc, #280]	; (8001e48 <sampling+0x860>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	4b46      	ldr	r3, [pc, #280]	; (8001e50 <sampling+0x868>)
 8001d36:	5c9a      	ldrb	r2, [r3, r2]
 8001d38:	4b43      	ldr	r3, [pc, #268]	; (8001e48 <sampling+0x860>)
 8001d3a:	701a      	strb	r2, [r3, #0]
	//note_holdB=11; // works ok with single note @24 but   fails on other
	sine_adder=sine_lut[note_holdB];	//sets freq ,1.0594  * 16536 =17518  ,
 8001d3c:	4b42      	ldr	r3, [pc, #264]	; (8001e48 <sampling+0x860>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	4b44      	ldr	r3, [pc, #272]	; (8001e54 <sampling+0x86c>)
 8001d44:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001d48:	4b43      	ldr	r3, [pc, #268]	; (8001e58 <sampling+0x870>)
 8001d4a:	801a      	strh	r2, [r3, #0]
	sine_adder= (sine_adder*1200)>>10;  // modify different sample size , just need single cycle length and thats it
 8001d4c:	4b42      	ldr	r3, [pc, #264]	; (8001e58 <sampling+0x870>)
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001d56:	fb02 f303 	mul.w	r3, r2, r3
 8001d5a:	129b      	asrs	r3, r3, #10
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	4b3e      	ldr	r3, [pc, #248]	; (8001e58 <sampling+0x870>)
 8001d60:	801a      	strh	r2, [r3, #0]
		mask_result =0;
 8001d62:	4b3e      	ldr	r3, [pc, #248]	; (8001e5c <sampling+0x874>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	801a      	strh	r2, [r3, #0]
		sample_Accu[3]=0; // reset to 0 mani sample hold
		sample_Accu[4]=0; // reset to 0 mani sample hold
		sample_Accu[5]=0; // reset to 0 mani sample hold
*/

		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8001d6e:	f102 0207 	add.w	r2, r2, #7
 8001d72:	7013      	strb	r3, [r2, #0]
 8001d74:	e031      	b.n	8001dda <sampling+0x7f2>

	if (note_channel[mask_i]) {tune_Accu=sample_Noteadd[MajorNote[note_channel[mask_i]]];   note_tuned[mask_i]=(tune_Accu);       } // relies on note channel clear , not good , clear not channel straight after
 8001d76:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8001d7a:	f103 0307 	add.w	r3, r3, #7
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	4a2d      	ldr	r2, [pc, #180]	; (8001e38 <sampling+0x850>)
 8001d82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d01c      	beq.n	8001dc4 <sampling+0x7dc>
 8001d8a:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8001d8e:	f103 0307 	add.w	r3, r3, #7
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	4a28      	ldr	r2, [pc, #160]	; (8001e38 <sampling+0x850>)
 8001d96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4b2c      	ldr	r3, [pc, #176]	; (8001e50 <sampling+0x868>)
 8001d9e:	5c9b      	ldrb	r3, [r3, r2]
 8001da0:	461a      	mov	r2, r3
 8001da2:	4b2f      	ldr	r3, [pc, #188]	; (8001e60 <sampling+0x878>)
 8001da4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001da8:	461a      	mov	r2, r3
 8001daa:	4b2e      	ldr	r3, [pc, #184]	; (8001e64 <sampling+0x87c>)
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	4b2d      	ldr	r3, [pc, #180]	; (8001e64 <sampling+0x87c>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8001db6:	f103 0307 	add.w	r3, r3, #7
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	b291      	uxth	r1, r2
 8001dbe:	4a2a      	ldr	r2, [pc, #168]	; (8001e68 <sampling+0x880>)
 8001dc0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8001dc4:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8001dc8:	f103 0307 	add.w	r3, r3, #7
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8001dd4:	f102 0207 	add.w	r2, r2, #7
 8001dd8:	7013      	strb	r3, [r2, #0]
 8001dda:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8001dde:	f103 0307 	add.w	r3, r3, #7
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d9c6      	bls.n	8001d76 <sampling+0x78e>

  // calc freq 1/isr or 1/16 per note ,need for pitch bend and so on , change depending on decay

// lfo section

	if ((i&63)==0) {   // calculate lfo maybe 8 times for now , seems to fill up
 8001de8:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <sampling+0x858>)
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f040 8191 	bne.w	8002118 <sampling+0xb30>
freq_temp=0;
 8001df6:	f04f 0300 	mov.w	r3, #0
 8001dfa:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001dfe:	f102 0218 	add.w	r2, r2, #24
 8001e02:	6013      	str	r3, [r2, #0]
freq2_temp=0;
 8001e04:	f04f 0300 	mov.w	r3, #0
 8001e08:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001e0c:	f102 0214 	add.w	r2, r2, #20
 8001e10:	6013      	str	r3, [r2, #0]

//uint8_t i_frac2=(i_frac+7)&7;  //previous value can change shape  , not  bad effect

		for (l=0;l<10;l++){   //current lfo setup , messy
 8001e12:	2300      	movs	r3, #0
 8001e14:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8001e18:	f102 0203 	add.w	r2, r2, #3
 8001e1c:	7013      	strb	r3, [r2, #0]
 8001e1e:	e139      	b.n	8002094 <sampling+0xaac>
 8001e20:	2000209a 	.word	0x2000209a
 8001e24:	20002046 	.word	0x20002046
 8001e28:	20000bb4 	.word	0x20000bb4
 8001e2c:	200002b4 	.word	0x200002b4
 8001e30:	20000884 	.word	0x20000884
 8001e34:	200020c0 	.word	0x200020c0
 8001e38:	200013e8 	.word	0x200013e8
 8001e3c:	20002030 	.word	0x20002030
 8001e40:	20000bdc 	.word	0x20000bdc
 8001e44:	20002048 	.word	0x20002048
 8001e48:	20002054 	.word	0x20002054
 8001e4c:	2000208c 	.word	0x2000208c
 8001e50:	080093bc 	.word	0x080093bc
 8001e54:	20000250 	.word	0x20000250
 8001e58:	20000bb6 	.word	0x20000bb6
 8001e5c:	20001426 	.word	0x20001426
 8001e60:	080093d8 	.word	0x080093d8
 8001e64:	20000bb0 	.word	0x20000bb0
 8001e68:	20000b98 	.word	0x20000b98

			freq_temp=potSource[130+l];
 8001e6c:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8001e70:	f103 0303 	add.w	r3, r3, #3
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	3382      	adds	r3, #130	; 0x82
 8001e78:	4ab3      	ldr	r2, [pc, #716]	; (8002148 <sampling+0xb60>)
 8001e7a:	5cd3      	ldrb	r3, [r2, r3]
 8001e7c:	ee07 3a90 	vmov	s15, r3
 8001e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e84:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001e88:	f103 0318 	add.w	r3, r3, #24
 8001e8c:	edc3 7a00 	vstr	s15, [r3]
			freq2_temp=freq_temp*tempo_sync ; //correction to one note per cycle ,fixed , maybe loose this
 8001e90:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001e94:	f103 0318 	add.w	r3, r3, #24
 8001e98:	ed93 7a00 	vldr	s14, [r3]
 8001e9c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001ea0:	f103 0310 	add.w	r3, r3, #16
 8001ea4:	edd3 7a00 	vldr	s15, [r3]
 8001ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eac:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001eb0:	f103 0314 	add.w	r3, r3, #20
 8001eb4:	edc3 7a00 	vstr	s15, [r3]

			freq_temp=lfo_accu[l][i_frac]+ freq2_temp;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar
 8001eb8:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8001ebc:	f103 0303 	add.w	r3, r3, #3
 8001ec0:	781a      	ldrb	r2, [r3, #0]
 8001ec2:	4ba2      	ldr	r3, [pc, #648]	; (800214c <sampling+0xb64>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	49a1      	ldr	r1, [pc, #644]	; (8002150 <sampling+0xb68>)
 8001eca:	4613      	mov	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	4403      	add	r3, r0
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	440b      	add	r3, r1
 8001ed8:	edd3 7a00 	vldr	s15, [r3]
 8001edc:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001ee0:	f103 0314 	add.w	r3, r3, #20
 8001ee4:	ed93 7a00 	vldr	s14, [r3]
 8001ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eec:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001ef0:	f103 0318 	add.w	r3, r3, #24
 8001ef4:	edc3 7a00 	vstr	s15, [r3]


//			if ((tempo_count<50) && ((next_isr&15)==15)) freq_temp=0;   // trying retrigger
		if (freq_temp>16384) lfo_accu[l][i_frac]=freq_temp-16384; else lfo_accu[l][i_frac]=freq_temp; // write back value
 8001ef8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001efc:	f103 0318 	add.w	r3, r3, #24
 8001f00:	edd3 7a00 	vldr	s15, [r3]
 8001f04:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8002154 <sampling+0xb6c>
 8001f08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f10:	dd1c      	ble.n	8001f4c <sampling+0x964>
 8001f12:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8001f16:	f103 0303 	add.w	r3, r3, #3
 8001f1a:	781a      	ldrb	r2, [r3, #0]
 8001f1c:	4b8b      	ldr	r3, [pc, #556]	; (800214c <sampling+0xb64>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001f26:	f103 0318 	add.w	r3, r3, #24
 8001f2a:	edd3 7a00 	vldr	s15, [r3]
 8001f2e:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8002154 <sampling+0xb6c>
 8001f32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f36:	4986      	ldr	r1, [pc, #536]	; (8002150 <sampling+0xb68>)
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	4403      	add	r3, r0
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	440b      	add	r3, r1
 8001f46:	edc3 7a00 	vstr	s15, [r3]
 8001f4a:	e015      	b.n	8001f78 <sampling+0x990>
 8001f4c:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8001f50:	f103 0303 	add.w	r3, r3, #3
 8001f54:	781a      	ldrb	r2, [r3, #0]
 8001f56:	4b7d      	ldr	r3, [pc, #500]	; (800214c <sampling+0xb64>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	497c      	ldr	r1, [pc, #496]	; (8002150 <sampling+0xb68>)
 8001f5e:	4613      	mov	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4403      	add	r3, r0
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001f70:	f102 0218 	add.w	r2, r2, #24
 8001f74:	6812      	ldr	r2, [r2, #0]
 8001f76:	601a      	str	r2, [r3, #0]
		freq_temp=lfo_accu[l][i_frac]; // 0-255 limit + above zero
 8001f78:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8001f7c:	f103 0303 	add.w	r3, r3, #3
 8001f80:	781a      	ldrb	r2, [r3, #0]
 8001f82:	4b72      	ldr	r3, [pc, #456]	; (800214c <sampling+0xb64>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	4971      	ldr	r1, [pc, #452]	; (8002150 <sampling+0xb68>)
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	4403      	add	r3, r0
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	440b      	add	r3, r1
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001f9e:	f102 0218 	add.w	r2, r2, #24
 8001fa2:	6013      	str	r3, [r2, #0]
		freq_temp=freq_temp*0.000383495;  // 0-255 , chang this for depth
 8001fa4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001fa8:	f103 0318 	add.w	r3, r3, #24
 8001fac:	6818      	ldr	r0, [r3, #0]
 8001fae:	f7fe fba1 	bl	80006f4 <__aeabi_f2d>
 8001fb2:	a361      	add	r3, pc, #388	; (adr r3, 8002138 <sampling+0xb50>)
 8001fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb8:	f7fe f90e 	bl	80001d8 <__aeabi_dmul>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	f7fe fbee 	bl	80007a4 <__aeabi_d2f>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001fce:	f102 0218 	add.w	r2, r2, #24
 8001fd2:	6013      	str	r3, [r2, #0]
		freq2_temp =arm_sin_f32(freq_temp); // seems to be working ok till here , not doing right here now
 8001fd4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001fd8:	f103 0318 	add.w	r3, r3, #24
 8001fdc:	6818      	ldr	r0, [r3, #0]
 8001fde:	f7fe fb89 	bl	80006f4 <__aeabi_f2d>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	ec43 2b10 	vmov	d0, r2, r3
 8001fea:	f006 ffe3 	bl	8008fb4 <arm_sin_f32>
 8001fee:	ee07 0a90 	vmov	s15, r0
 8001ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ff6:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001ffa:	f103 0314 	add.w	r3, r3, #20
 8001ffe:	edc3 7a00 	vstr	s15, [r3]
		freq_temp=freq2_temp*potSource[140+l]*51;   // not working  proper something with angles i think
 8002002:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002006:	f103 0303 	add.w	r3, r3, #3
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	338c      	adds	r3, #140	; 0x8c
 800200e:	4a4e      	ldr	r2, [pc, #312]	; (8002148 <sampling+0xb60>)
 8002010:	5cd3      	ldrb	r3, [r2, r3]
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800201a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800201e:	f103 0314 	add.w	r3, r3, #20
 8002022:	edd3 7a00 	vldr	s15, [r3]
 8002026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800202a:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8002158 <sampling+0xb70>
 800202e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002032:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002036:	f103 0318 	add.w	r3, r3, #24
 800203a:	edc3 7a00 	vstr	s15, [r3]

		lfo_out[l] [i_frac]=freq_temp+8195; // ok now
 800203e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002042:	f103 0318 	add.w	r3, r3, #24
 8002046:	edd3 7a00 	vldr	s15, [r3]
 800204a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800215c <sampling+0xb74>
 800204e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002052:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002056:	f103 0303 	add.w	r3, r3, #3
 800205a:	781a      	ldrb	r2, [r3, #0]
 800205c:	4b3b      	ldr	r3, [pc, #236]	; (800214c <sampling+0xb64>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	461c      	mov	r4, r3
 8002062:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002066:	ee17 3a90 	vmov	r3, s15
 800206a:	b298      	uxth	r0, r3
 800206c:	493c      	ldr	r1, [pc, #240]	; (8002160 <sampling+0xb78>)
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4423      	add	r3, r4
 8002078:	4602      	mov	r2, r0
 800207a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (l=0;l<10;l++){   //current lfo setup , messy
 800207e:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002082:	f103 0303 	add.w	r3, r3, #3
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	3301      	adds	r3, #1
 800208a:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 800208e:	f102 0203 	add.w	r2, r2, #3
 8002092:	7013      	strb	r3, [r2, #0]
 8002094:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002098:	f103 0303 	add.w	r3, r3, #3
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b09      	cmp	r3, #9
 80020a0:	f67f aee4 	bls.w	8001e6c <sampling+0x884>

		} // lfo gen : 0=f1 , 1=tempo,2=pitch


			freq_pointer[0] [i_frac]=lfo_out [0][i_frac]*0.00006435; // problem was selecting accu instead of out , good now
 80020a4:	4b29      	ldr	r3, [pc, #164]	; (800214c <sampling+0xb64>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	4b2d      	ldr	r3, [pc, #180]	; (8002160 <sampling+0xb78>)
 80020ac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe fb0d 	bl	80006d0 <__aeabi_i2d>
 80020b6:	a322      	add	r3, pc, #136	; (adr r3, 8002140 <sampling+0xb58>)
 80020b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020bc:	f7fe f88c 	bl	80001d8 <__aeabi_dmul>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4921      	ldr	r1, [pc, #132]	; (800214c <sampling+0xb64>)
 80020c6:	7809      	ldrb	r1, [r1, #0]
 80020c8:	460c      	mov	r4, r1
 80020ca:	4610      	mov	r0, r2
 80020cc:	4619      	mov	r1, r3
 80020ce:	f7fe fb69 	bl	80007a4 <__aeabi_d2f>
 80020d2:	4602      	mov	r2, r0
 80020d4:	4923      	ldr	r1, [pc, #140]	; (8002164 <sampling+0xb7c>)
 80020d6:	00a3      	lsls	r3, r4, #2
 80020d8:	440b      	add	r3, r1
 80020da:	601a      	str	r2, [r3, #0]
		freq_pointer[2] [i_frac] =lfo_out [3][i_frac]*0.00006435;; // filter lfos
 80020dc:	4b1b      	ldr	r3, [pc, #108]	; (800214c <sampling+0xb64>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	4a1f      	ldr	r2, [pc, #124]	; (8002160 <sampling+0xb78>)
 80020e2:	331e      	adds	r3, #30
 80020e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe faf1 	bl	80006d0 <__aeabi_i2d>
 80020ee:	a314      	add	r3, pc, #80	; (adr r3, 8002140 <sampling+0xb58>)
 80020f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f4:	f7fe f870 	bl	80001d8 <__aeabi_dmul>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4913      	ldr	r1, [pc, #76]	; (800214c <sampling+0xb64>)
 80020fe:	7809      	ldrb	r1, [r1, #0]
 8002100:	460c      	mov	r4, r1
 8002102:	4610      	mov	r0, r2
 8002104:	4619      	mov	r1, r3
 8002106:	f7fe fb4d 	bl	80007a4 <__aeabi_d2f>
 800210a:	4602      	mov	r2, r0
 800210c:	4915      	ldr	r1, [pc, #84]	; (8002164 <sampling+0xb7c>)
 800210e:	f104 0312 	add.w	r3, r4, #18
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	601a      	str	r2, [r3, #0]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002118:	4b13      	ldr	r3, [pc, #76]	; (8002168 <sampling+0xb80>)
 800211a:	881b      	ldrh	r3, [r3, #0]
 800211c:	3301      	adds	r3, #1
 800211e:	b29a      	uxth	r2, r3
 8002120:	4b11      	ldr	r3, [pc, #68]	; (8002168 <sampling+0xb80>)
 8002122:	801a      	strh	r2, [r3, #0]
 8002124:	4b10      	ldr	r3, [pc, #64]	; (8002168 <sampling+0xb80>)
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800212c:	f4ff acc4 	bcc.w	8001ab8 <sampling+0x4d0>
// filter loop
int32_t play_holder1[512];    // data banks
int32_t play_holder2[512];


for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002130:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <sampling+0xb80>)
 8002132:	2200      	movs	r2, #0
 8002134:	801a      	strh	r2, [r3, #0]
 8002136:	e0f5      	b.n	8002324 <sampling+0xd3c>
 8002138:	7bb1a72c 	.word	0x7bb1a72c
 800213c:	3f3921fa 	.word	0x3f3921fa
 8002140:	94fd52a7 	.word	0x94fd52a7
 8002144:	3f10de74 	.word	0x3f10de74
 8002148:	20000a04 	.word	0x20000a04
 800214c:	20002158 	.word	0x20002158
 8002150:	2000215c 	.word	0x2000215c
 8002154:	46800000 	.word	0x46800000
 8002158:	424c0000 	.word	0x424c0000
 800215c:	46000c00 	.word	0x46000c00
 8002160:	200022ec 	.word	0x200022ec
 8002164:	200020c8 	.word	0x200020c8
 8002168:	20000bdc 	.word	0x20000bdc
	i_total=i+sample_pointB;
 800216c:	4b81      	ldr	r3, [pc, #516]	; (8002374 <sampling+0xd8c>)
 800216e:	881a      	ldrh	r2, [r3, #0]
 8002170:	4b81      	ldr	r3, [pc, #516]	; (8002378 <sampling+0xd90>)
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	4413      	add	r3, r2
 8002176:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800217a:	f102 0202 	add.w	r2, r2, #2
 800217e:	8013      	strh	r3, [r2, #0]
	i_frac=(i>>6);
 8002180:	4b7c      	ldr	r3, [pc, #496]	; (8002374 <sampling+0xd8c>)
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	099b      	lsrs	r3, r3, #6
 8002186:	b29b      	uxth	r3, r3
 8002188:	b2da      	uxtb	r2, r3
 800218a:	4b7c      	ldr	r3, [pc, #496]	; (800237c <sampling+0xd94>)
 800218c:	701a      	strb	r2, [r3, #0]
// every step   1,110,928   >>20  ,per note
// New oscillators , sync, trigger input , waveshape ,zero cross
	sample_accus[0] = sample_accus[0] + note_tuned[0]; //careful with signed bit shift,better compare
 800218e:	4b7c      	ldr	r3, [pc, #496]	; (8002380 <sampling+0xd98>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a7c      	ldr	r2, [pc, #496]	; (8002384 <sampling+0xd9c>)
 8002194:	8812      	ldrh	r2, [r2, #0]
 8002196:	4413      	add	r3, r2
 8002198:	4a79      	ldr	r2, [pc, #484]	; (8002380 <sampling+0xd98>)
 800219a:	6013      	str	r3, [r2, #0]

	if (sample_accus[0]>524287) sample_accus[0] =-sample_accus[0] ; // faster >  than &  ,strange
 800219c:	4b78      	ldr	r3, [pc, #480]	; (8002380 <sampling+0xd98>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80021a4:	db04      	blt.n	80021b0 <sampling+0xbc8>
 80021a6:	4b76      	ldr	r3, [pc, #472]	; (8002380 <sampling+0xd98>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	425b      	negs	r3, r3
 80021ac:	4a74      	ldr	r2, [pc, #464]	; (8002380 <sampling+0xd98>)
 80021ae:	6013      	str	r3, [r2, #0]



	sample_accus[1] = sample_accus[1] + note_tuned[1];  // normal adder full volume
 80021b0:	4b73      	ldr	r3, [pc, #460]	; (8002380 <sampling+0xd98>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	4a73      	ldr	r2, [pc, #460]	; (8002384 <sampling+0xd9c>)
 80021b6:	8852      	ldrh	r2, [r2, #2]
 80021b8:	4413      	add	r3, r2
 80021ba:	4a71      	ldr	r2, [pc, #452]	; (8002380 <sampling+0xd98>)
 80021bc:	6053      	str	r3, [r2, #4]
		//	if (!(note_channel[0]))   sample_accus[1] =0;  // turn off with vel now , maybe use mask
			if (sample_accus[1]>524287) sample_accus[1] =-sample_accus[1] ; // faster >  than &  ,strange
 80021be:	4b70      	ldr	r3, [pc, #448]	; (8002380 <sampling+0xd98>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80021c6:	db04      	blt.n	80021d2 <sampling+0xbea>
 80021c8:	4b6d      	ldr	r3, [pc, #436]	; (8002380 <sampling+0xd98>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	425b      	negs	r3, r3
 80021ce:	4a6c      	ldr	r2, [pc, #432]	; (8002380 <sampling+0xd98>)
 80021d0:	6053      	str	r3, [r2, #4]

			sample_accus[2] = sample_accus[2] + note_tuned[2];
 80021d2:	4b6b      	ldr	r3, [pc, #428]	; (8002380 <sampling+0xd98>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	4a6b      	ldr	r2, [pc, #428]	; (8002384 <sampling+0xd9c>)
 80021d8:	8892      	ldrh	r2, [r2, #4]
 80021da:	4413      	add	r3, r2
 80021dc:	4a68      	ldr	r2, [pc, #416]	; (8002380 <sampling+0xd98>)
 80021de:	6093      	str	r3, [r2, #8]
			//		if (!(note_channel[0]))   sample_accus[2] =0;  // turn off with vel now , maybe use mask
					if (sample_accus[2]>524287) sample_accus[2] =-sample_accus[2] ; // faster >  than &  ,strange
 80021e0:	4b67      	ldr	r3, [pc, #412]	; (8002380 <sampling+0xd98>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80021e8:	db04      	blt.n	80021f4 <sampling+0xc0c>
 80021ea:	4b65      	ldr	r3, [pc, #404]	; (8002380 <sampling+0xd98>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	425b      	negs	r3, r3
 80021f0:	4a63      	ldr	r2, [pc, #396]	; (8002380 <sampling+0xd98>)
 80021f2:	6093      	str	r3, [r2, #8]

					sample_accus[3] = sample_accus[3] + note_tuned[3]; // bouncing somewhere
 80021f4:	4b62      	ldr	r3, [pc, #392]	; (8002380 <sampling+0xd98>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	4a62      	ldr	r2, [pc, #392]	; (8002384 <sampling+0xd9c>)
 80021fa:	88d2      	ldrh	r2, [r2, #6]
 80021fc:	4413      	add	r3, r2
 80021fe:	4a60      	ldr	r2, [pc, #384]	; (8002380 <sampling+0xd98>)
 8002200:	60d3      	str	r3, [r2, #12]
					//sample_accus[3] = sample_accus[3] +4000;
					//	if (!(note_channel[0]))   sample_accus[3] =0;  // turn off with vel now , maybe use mask
							if (sample_accus[3]>524287) sample_accus[3] =-sample_accus[3] ; // faster >  than &  ,strange
 8002202:	4b5f      	ldr	r3, [pc, #380]	; (8002380 <sampling+0xd98>)
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800220a:	db04      	blt.n	8002216 <sampling+0xc2e>
 800220c:	4b5c      	ldr	r3, [pc, #368]	; (8002380 <sampling+0xd98>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	425b      	negs	r3, r3
 8002212:	4a5b      	ldr	r2, [pc, #364]	; (8002380 <sampling+0xd98>)
 8002214:	60d3      	str	r3, [r2, #12]

							sample_accus[4] = sample_accus[4] + note_tuned[4];
 8002216:	4b5a      	ldr	r3, [pc, #360]	; (8002380 <sampling+0xd98>)
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	4a5a      	ldr	r2, [pc, #360]	; (8002384 <sampling+0xd9c>)
 800221c:	8912      	ldrh	r2, [r2, #8]
 800221e:	4413      	add	r3, r2
 8002220:	4a57      	ldr	r2, [pc, #348]	; (8002380 <sampling+0xd98>)
 8002222:	6113      	str	r3, [r2, #16]
								//	if (!(note_channel[4]))   sample_accus[4] =0;  // turn off with vel now , maybe use mask
									if (sample_accus[4]>524287) sample_accus[4] =-sample_accus[4] ; // faster >  than &  ,strange
 8002224:	4b56      	ldr	r3, [pc, #344]	; (8002380 <sampling+0xd98>)
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800222c:	db04      	blt.n	8002238 <sampling+0xc50>
 800222e:	4b54      	ldr	r3, [pc, #336]	; (8002380 <sampling+0xd98>)
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	425b      	negs	r3, r3
 8002234:	4a52      	ldr	r2, [pc, #328]	; (8002380 <sampling+0xd98>)
 8002236:	6113      	str	r3, [r2, #16]

									sample_Accu[2] = 0;sample_Accu[0] =0;sample_Accu[3] =0; //all zeroed
 8002238:	4b53      	ldr	r3, [pc, #332]	; (8002388 <sampling+0xda0>)
 800223a:	2200      	movs	r2, #0
 800223c:	609a      	str	r2, [r3, #8]
 800223e:	4b52      	ldr	r3, [pc, #328]	; (8002388 <sampling+0xda0>)
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	4b50      	ldr	r3, [pc, #320]	; (8002388 <sampling+0xda0>)
 8002246:	2200      	movs	r2, #0
 8002248:	60da      	str	r2, [r3, #12]
									//if (sample_accus[2]<0) sample_Accu[2]=+sample_accus[2]; else sample_Accu[2]=sample_accus[2]; // convert to triangle ?
									sample_Accu[0]=sample_accus[2]>>7; // needs cut a bit
 800224a:	4b4d      	ldr	r3, [pc, #308]	; (8002380 <sampling+0xd98>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	11db      	asrs	r3, r3, #7
 8002250:	4a4d      	ldr	r2, [pc, #308]	; (8002388 <sampling+0xda0>)
 8002252:	6013      	str	r3, [r2, #0]

							sample_Accu[0] = ((sine_out+sample_Accu[0])*cross_fade[1]);   // sine input plus other
 8002254:	4b4c      	ldr	r3, [pc, #304]	; (8002388 <sampling+0xda0>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	4b4c      	ldr	r3, [pc, #304]	; (800238c <sampling+0xda4>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4413      	add	r3, r2
 800225e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002262:	f102 021d 	add.w	r2, r2, #29
 8002266:	7812      	ldrb	r2, [r2, #0]
 8002268:	fb02 f303 	mul.w	r3, r2, r3
 800226c:	4a46      	ldr	r2, [pc, #280]	; (8002388 <sampling+0xda0>)
 800226e:	6013      	str	r3, [r2, #0]
							//sample_Accu[0] = (sine_out*cross_fade[1]);  // sine out only
									//if (sample_accus[3]<0) sample_Accu[3]=+sample_accus[3]; else sample_Accu[3]=sample_accus[3]; // convert to triangle
									sample_Accu[3]=sample_accus[3];
 8002270:	4b43      	ldr	r3, [pc, #268]	; (8002380 <sampling+0xd98>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	4a44      	ldr	r2, [pc, #272]	; (8002388 <sampling+0xda0>)
 8002276:	60d3      	str	r3, [r2, #12]
									sample_Accu[2] = (sample_Accu[3]*cross_fade[2]);			//27b, 2 out f2  might do a crossfade here using pot 3
 8002278:	4b43      	ldr	r3, [pc, #268]	; (8002388 <sampling+0xda0>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002280:	f102 021e 	add.w	r2, r2, #30
 8002284:	7812      	ldrb	r2, [r2, #0]
 8002286:	fb02 f303 	mul.w	r3, r2, r3
 800228a:	4a3f      	ldr	r2, [pc, #252]	; (8002388 <sampling+0xda0>)
 800228c:	6093      	str	r3, [r2, #8]
									//	sample_Accu[5] = sample_Accu[4]+ (sample_accus[4]*4);			// drum and envelope

	//	sample_Accu=sample_Accu-(1<<21);


if (sine_counterB==0) 	sine_temp2=sine_adder;
 800228e:	4b40      	ldr	r3, [pc, #256]	; (8002390 <sampling+0xda8>)
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d103      	bne.n	800229e <sampling+0xcb6>
 8002296:	4b3f      	ldr	r3, [pc, #252]	; (8002394 <sampling+0xdac>)
 8002298:	881a      	ldrh	r2, [r3, #0]
 800229a:	4b3f      	ldr	r3, [pc, #252]	; (8002398 <sampling+0xdb0>)
 800229c:	801a      	strh	r2, [r3, #0]

	sine_counterB=sine_counterB+sine_temp2 ;  // sine up counter per cycle , however sine adder needs to wait
 800229e:	4b3c      	ldr	r3, [pc, #240]	; (8002390 <sampling+0xda8>)
 80022a0:	881a      	ldrh	r2, [r3, #0]
 80022a2:	4b3d      	ldr	r3, [pc, #244]	; (8002398 <sampling+0xdb0>)
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	4413      	add	r3, r2
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	4b39      	ldr	r3, [pc, #228]	; (8002390 <sampling+0xda8>)
 80022ac:	801a      	strh	r2, [r3, #0]
	if (sine_counterB>>7) sine_zero=0; else sine_zero=1;
 80022ae:	4b38      	ldr	r3, [pc, #224]	; (8002390 <sampling+0xda8>)
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	09db      	lsrs	r3, r3, #7
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d004      	beq.n	80022c4 <sampling+0xcdc>
 80022ba:	2300      	movs	r3, #0
 80022bc:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80022c0:	8013      	strh	r3, [r2, #0]
 80022c2:	e003      	b.n	80022cc <sampling+0xce4>
 80022c4:	2301      	movs	r3, #1
 80022c6:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80022ca:	8013      	strh	r3, [r2, #0]

if (sine_counterB>(sine_length<<5)) sine_counterB=0; //fixed for now
 80022cc:	4b30      	ldr	r3, [pc, #192]	; (8002390 <sampling+0xda8>)
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	461a      	mov	r2, r3
 80022d2:	4b32      	ldr	r3, [pc, #200]	; (800239c <sampling+0xdb4>)
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	015b      	lsls	r3, r3, #5
 80022d8:	429a      	cmp	r2, r3
 80022da:	dd02      	ble.n	80022e2 <sampling+0xcfa>
 80022dc:	4b2c      	ldr	r3, [pc, #176]	; (8002390 <sampling+0xda8>)
 80022de:	2200      	movs	r2, #0
 80022e0:	801a      	strh	r2, [r3, #0]
sine_count(); // calc sine   distortion out when hcagning note
 80022e2:	f000 f989 	bl	80025f8 <sine_count>
play_holder1[i]=sample_Accu[0];  // write to bank
 80022e6:	4b23      	ldr	r3, [pc, #140]	; (8002374 <sampling+0xd8c>)
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	4619      	mov	r1, r3
 80022ec:	4b26      	ldr	r3, [pc, #152]	; (8002388 <sampling+0xda0>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80022f4:	f103 0308 	add.w	r3, r3, #8
 80022f8:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 80022fc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
play_holder2[i]=sample_Accu[2];
 8002300:	4b1c      	ldr	r3, [pc, #112]	; (8002374 <sampling+0xd8c>)
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	4b20      	ldr	r3, [pc, #128]	; (8002388 <sampling+0xda0>)
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800230e:	4619      	mov	r1, r3
 8002310:	0083      	lsls	r3, r0, #2
 8002312:	440b      	add	r3, r1
 8002314:	f843 2ca0 	str.w	r2, [r3, #-160]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002318:	4b16      	ldr	r3, [pc, #88]	; (8002374 <sampling+0xd8c>)
 800231a:	881b      	ldrh	r3, [r3, #0]
 800231c:	3301      	adds	r3, #1
 800231e:	b29a      	uxth	r2, r3
 8002320:	4b14      	ldr	r3, [pc, #80]	; (8002374 <sampling+0xd8c>)
 8002322:	801a      	strh	r2, [r3, #0]
 8002324:	4b13      	ldr	r3, [pc, #76]	; (8002374 <sampling+0xd8c>)
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800232c:	f4ff af1e 	bcc.w	800216c <sampling+0xb84>



int32_t filter_Accu;

uint16_t temp3_hold[3]={2000,2000,2000};
 8002330:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002334:	4a1a      	ldr	r2, [pc, #104]	; (80023a0 <sampling+0xdb8>)
 8002336:	3ba8      	subs	r3, #168	; 0xa8
 8002338:	e892 0003 	ldmia.w	r2, {r0, r1}
 800233c:	6018      	str	r0, [r3, #0]
 800233e:	3304      	adds	r3, #4
 8002340:	8019      	strh	r1, [r3, #0]

//uint16_t* click=&input_holder[0];

uint16_t crap_hold=2000;
 8002342:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002346:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800234a:	f102 020c 	add.w	r2, r2, #12
 800234e:	8013      	strh	r3, [r2, #0]

				uint16_t crap_hold1=2000;
 8002350:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002354:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002358:	f102 0216 	add.w	r2, r2, #22
 800235c:	8013      	strh	r3, [r2, #0]
				uint16_t crap_hold2=2000;
 800235e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002362:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002366:	f102 020a 	add.w	r2, r2, #10
 800236a:	8013      	strh	r3, [r2, #0]




for (i=0;i<512;i++) // 15-20 tmr cycles (174)
 800236c:	4b01      	ldr	r3, [pc, #4]	; (8002374 <sampling+0xd8c>)
 800236e:	2200      	movs	r2, #0
 8002370:	801a      	strh	r2, [r3, #0]
 8002372:	e05d      	b.n	8002430 <sampling+0xe48>
 8002374:	20000bdc 	.word	0x20000bdc
 8002378:	20000bda 	.word	0x20000bda
 800237c:	20002158 	.word	0x20002158
 8002380:	20002074 	.word	0x20002074
 8002384:	20000b98 	.word	0x20000b98
 8002388:	20000bbc 	.word	0x20000bbc
 800238c:	20000b90 	.word	0x20000b90
 8002390:	20000b8e 	.word	0x20000b8e
 8002394:	20000bb6 	.word	0x20000bb6
 8002398:	20000b94 	.word	0x20000b94
 800239c:	2000024e 	.word	0x2000024e
 80023a0:	08009390 	.word	0x08009390
			{




				crap_hold=((input_holder[i]*7)+crap_hold2)>>3;
 80023a4:	4b85      	ldr	r3, [pc, #532]	; (80025bc <sampling+0xfd4>)
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	461a      	mov	r2, r3
 80023aa:	4b85      	ldr	r3, [pc, #532]	; (80025c0 <sampling+0xfd8>)
 80023ac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80023b0:	461a      	mov	r2, r3
 80023b2:	4613      	mov	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	1a9a      	subs	r2, r3, r2
 80023b8:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80023bc:	f103 030a 	add.w	r3, r3, #10
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	4413      	add	r3, r2
 80023c4:	10db      	asrs	r3, r3, #3
 80023c6:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80023ca:	f102 020c 	add.w	r2, r2, #12
 80023ce:	8013      	strh	r3, [r2, #0]
					crap_hold1=((crap_hold*7)+crap_hold1)>>3;
 80023d0:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80023d4:	f103 030c 	add.w	r3, r3, #12
 80023d8:	881a      	ldrh	r2, [r3, #0]
 80023da:	4613      	mov	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	1a9a      	subs	r2, r3, r2
 80023e0:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80023e4:	f103 0316 	add.w	r3, r3, #22
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	4413      	add	r3, r2
 80023ec:	10db      	asrs	r3, r3, #3
 80023ee:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80023f2:	f102 0216 	add.w	r2, r2, #22
 80023f6:	8013      	strh	r3, [r2, #0]
					input_holder[i] =((crap_hold1*7)+crap_hold2)>>3;
 80023f8:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80023fc:	f103 0316 	add.w	r3, r3, #22
 8002400:	881a      	ldrh	r2, [r3, #0]
 8002402:	4613      	mov	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	1a9a      	subs	r2, r3, r2
 8002408:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800240c:	f103 030a 	add.w	r3, r3, #10
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	4413      	add	r3, r2
 8002414:	10d9      	asrs	r1, r3, #3
 8002416:	4b69      	ldr	r3, [pc, #420]	; (80025bc <sampling+0xfd4>)
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	b289      	uxth	r1, r1
 800241e:	4b68      	ldr	r3, [pc, #416]	; (80025c0 <sampling+0xfd8>)
 8002420:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
for (i=0;i<512;i++) // 15-20 tmr cycles (174)
 8002424:	4b65      	ldr	r3, [pc, #404]	; (80025bc <sampling+0xfd4>)
 8002426:	881b      	ldrh	r3, [r3, #0]
 8002428:	3301      	adds	r3, #1
 800242a:	b29a      	uxth	r2, r3
 800242c:	4b63      	ldr	r3, [pc, #396]	; (80025bc <sampling+0xfd4>)
 800242e:	801a      	strh	r2, [r3, #0]
 8002430:	4b62      	ldr	r3, [pc, #392]	; (80025bc <sampling+0xfd4>)
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002438:	d3b4      	bcc.n	80023a4 <sampling+0xdbc>

}
*/


int32_t feedback_out=filter_out[3];   // 191 sample time
 800243a:	4b62      	ldr	r3, [pc, #392]	; (80025c4 <sampling+0xfdc>)
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002442:	f102 0204 	add.w	r2, r2, #4
 8002446:	6013      	str	r3, [r2, #0]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out
 8002448:	4b5c      	ldr	r3, [pc, #368]	; (80025bc <sampling+0xfd4>)
 800244a:	2200      	movs	r2, #0
 800244c:	801a      	strh	r2, [r3, #0]
 800244e:	e09b      	b.n	8002588 <sampling+0xfa0>
	i_total=i+sample_pointB;
 8002450:	4b5a      	ldr	r3, [pc, #360]	; (80025bc <sampling+0xfd4>)
 8002452:	881a      	ldrh	r2, [r3, #0]
 8002454:	4b5c      	ldr	r3, [pc, #368]	; (80025c8 <sampling+0xfe0>)
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	4413      	add	r3, r2
 800245a:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800245e:	f102 0202 	add.w	r2, r2, #2
 8002462:	8013      	strh	r3, [r2, #0]
i_frac=(i>>6);
 8002464:	4b55      	ldr	r3, [pc, #340]	; (80025bc <sampling+0xfd4>)
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	099b      	lsrs	r3, r3, #6
 800246a:	b29b      	uxth	r3, r3
 800246c:	b2da      	uxtb	r2, r3
 800246e:	4b57      	ldr	r3, [pc, #348]	; (80025cc <sampling+0xfe4>)
 8002470:	701a      	strb	r2, [r3, #0]

// filter 1
if (		(note_toggler[i>>5]	)==(1<<(i&31)	)) 				{adsr_temp =0;  trigger_counter++; trigger_counter=trigger_counter&1023  ;}
 8002472:	4b52      	ldr	r3, [pc, #328]	; (80025bc <sampling+0xfd4>)
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	095b      	lsrs	r3, r3, #5
 8002478:	b29b      	uxth	r3, r3
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8002480:	f103 0308 	add.w	r3, r3, #8
 8002484:	443b      	add	r3, r7
 8002486:	f853 3c80 	ldr.w	r3, [r3, #-128]
 800248a:	4a4c      	ldr	r2, [pc, #304]	; (80025bc <sampling+0xfd4>)
 800248c:	8812      	ldrh	r2, [r2, #0]
 800248e:	f002 021f 	and.w	r2, r2, #31
 8002492:	2101      	movs	r1, #1
 8002494:	fa01 f202 	lsl.w	r2, r1, r2
 8002498:	4293      	cmp	r3, r2
 800249a:	d10f      	bne.n	80024bc <sampling+0xed4>
 800249c:	4b4c      	ldr	r3, [pc, #304]	; (80025d0 <sampling+0xfe8>)
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
 80024a2:	4b4c      	ldr	r3, [pc, #304]	; (80025d4 <sampling+0xfec>)
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	3301      	adds	r3, #1
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	4b4a      	ldr	r3, [pc, #296]	; (80025d4 <sampling+0xfec>)
 80024ac:	801a      	strh	r2, [r3, #0]
 80024ae:	4b49      	ldr	r3, [pc, #292]	; (80025d4 <sampling+0xfec>)
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	4b46      	ldr	r3, [pc, #280]	; (80025d4 <sampling+0xfec>)
 80024ba:	801a      	strh	r2, [r3, #0]
//sample_Accu[1]=(sample_Accu[1]-2020)<<14; // shift to correct level



//sample_Accu[1]=sample_Accu[1]-60000;
sample_Accu[1]=play_holder1[i];  // sine input
 80024bc:	4b3f      	ldr	r3, [pc, #252]	; (80025bc <sampling+0xfd4>)
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	461a      	mov	r2, r3
 80024c2:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80024c6:	f103 0308 	add.w	r3, r3, #8
 80024ca:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 80024ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024d2:	4a41      	ldr	r2, [pc, #260]	; (80025d8 <sampling+0xff0>)
 80024d4:	6053      	str	r3, [r2, #4]
sample_Accu[3]=play_holder2[i] >>5; // sine
 80024d6:	4b39      	ldr	r3, [pc, #228]	; (80025bc <sampling+0xfd4>)
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 80024e6:	115b      	asrs	r3, r3, #5
 80024e8:	4a3b      	ldr	r2, [pc, #236]	; (80025d8 <sampling+0xff0>)
 80024ea:	60d3      	str	r3, [r2, #12]
				filter_hold[1]=(filter_accus[10]+filter_accus[12])*0.5; //half sample
				sample_Accu[2] =filter_accus[10]; //out
				filter_accus[12]=filter_accus[10]; //write back new value

*/
filter_Accu=0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80024f2:	f102 0218 	add.w	r2, r2, #24
 80024f6:	6013      	str	r3, [r2, #0]
//filter_Accu=(sample_Accu[0]+sample_Accu[2])>>8; //filter + drum out


//filter_Accu=(sample_Accu[1]+sample_Accu[3])>>8; //filter + drum out ,clean out
 filter_Accu=sample_Accu[1]>>7;
 80024f8:	4b37      	ldr	r3, [pc, #220]	; (80025d8 <sampling+0xff0>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	11db      	asrs	r3, r3, #7
 80024fe:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002502:	f102 0218 	add.w	r2, r2, #24
 8002506:	6013      	str	r3, [r2, #0]

// filter_Accu=sample_Accu[2]>>11;
//filter_Accu=(sample_Accu[1]>>7)+(sample_Accu[3]>>8); //filter + drum out
 if (one_shot!=199)   one_shot++;  //play one attack then stop
 8002508:	4b34      	ldr	r3, [pc, #208]	; (80025dc <sampling+0xff4>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2bc7      	cmp	r3, #199	; 0xc7
 800250e:	d005      	beq.n	800251c <sampling+0xf34>
 8002510:	4b32      	ldr	r3, [pc, #200]	; (80025dc <sampling+0xff4>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	3301      	adds	r3, #1
 8002516:	b2da      	uxtb	r2, r3
 8002518:	4b30      	ldr	r3, [pc, #192]	; (80025dc <sampling+0xff4>)
 800251a:	701a      	strb	r2, [r3, #0]

 if (filter_Accu>0xFFFF) filter_Accu=0xFFFF; else if (filter_Accu<-65535) filter_Accu=-65535;  // limiter to 16 bits
 800251c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002520:	f103 0318 	add.w	r3, r3, #24
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800252a:	db07      	blt.n	800253c <sampling+0xf54>
 800252c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002530:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002534:	f102 0218 	add.w	r2, r2, #24
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	e00d      	b.n	8002558 <sampling+0xf70>
 800253c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002540:	f103 0318 	add.w	r3, r3, #24
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800254a:	dc05      	bgt.n	8002558 <sampling+0xf70>
 800254c:	4b24      	ldr	r3, [pc, #144]	; (80025e0 <sampling+0xff8>)
 800254e:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002552:	f102 0218 	add.w	r2, r2, #24
 8002556:	6013      	str	r3, [r2, #0]


 play_sample[i_total]=(filter_Accu>>6)+1024;   // final output disable for now 2544
 8002558:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800255c:	f103 0318 	add.w	r3, r3, #24
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	119b      	asrs	r3, r3, #6
 8002564:	b29a      	uxth	r2, r3
 8002566:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800256a:	f103 0302 	add.w	r3, r3, #2
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002574:	b291      	uxth	r1, r2
 8002576:	4a1b      	ldr	r2, [pc, #108]	; (80025e4 <sampling+0xffc>)
 8002578:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out
 800257c:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <sampling+0xfd4>)
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	3301      	adds	r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	4b0d      	ldr	r3, [pc, #52]	; (80025bc <sampling+0xfd4>)
 8002586:	801a      	strh	r2, [r3, #0]
 8002588:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <sampling+0xfd4>)
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002590:	f4ff af5e 	bcc.w	8002450 <sampling+0xe68>
} // end of filer


//time_final=time_proc;   // in samples

if (bank_write) {time_final[1]=time_proc; error_count++;};  // tick timer in samples ,normal max 20 but some 230
 8002594:	4b14      	ldr	r3, [pc, #80]	; (80025e8 <sampling+0x1000>)
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d009      	beq.n	80025b0 <sampling+0xfc8>
 800259c:	4b13      	ldr	r3, [pc, #76]	; (80025ec <sampling+0x1004>)
 800259e:	881a      	ldrh	r2, [r3, #0]
 80025a0:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <sampling+0x1008>)
 80025a2:	805a      	strh	r2, [r3, #2]
 80025a4:	4b13      	ldr	r3, [pc, #76]	; (80025f4 <sampling+0x100c>)
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	3301      	adds	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <sampling+0x100c>)
 80025ae:	801a      	strh	r2, [r3, #0]



//bank_write=0;   /// total 320 sample time (39khz)
}
 80025b0:	bf00      	nop
 80025b2:	f507 5785 	add.w	r7, r7, #4256	; 0x10a0
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bdb0      	pop	{r4, r5, r7, pc}
 80025bc:	20000bdc 	.word	0x20000bdc
 80025c0:	20002918 	.word	0x20002918
 80025c4:	20002058 	.word	0x20002058
 80025c8:	20000bda 	.word	0x20000bda
 80025cc:	20002158 	.word	0x20002158
 80025d0:	2000202c 	.word	0x2000202c
 80025d4:	2000215a 	.word	0x2000215a
 80025d8:	20000bbc 	.word	0x20000bbc
 80025dc:	2000208c 	.word	0x2000208c
 80025e0:	ffff0001 	.word	0xffff0001
 80025e4:	20000be0 	.word	0x20000be0
 80025e8:	200002be 	.word	0x200002be
 80025ec:	20002d30 	.word	0x20002d30
 80025f0:	20002d2c 	.word	0x20002d2c
 80025f4:	20002d32 	.word	0x20002d32

080025f8 <sine_count>:
mask_result=mask_tempB &1;


}

void sine_count(void) {         // sine_out is the output 9  bit  , works
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
int32_t sine_tempA;
int32_t sine_tempB;
int8_t sine_frac;


sine_counter=(sine_counterB>>5);  // up countr controlled by counter
 80025fe:	4b2f      	ldr	r3, [pc, #188]	; (80026bc <sine_count+0xc4>)
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	b29a      	uxth	r2, r3
 8002606:	4b2e      	ldr	r3, [pc, #184]	; (80026c0 <sine_count+0xc8>)
 8002608:	801a      	strh	r2, [r3, #0]
sine_frac=sine_counterB & 31;  // grab last 5 bits, actual position for linear interpol,fractional
 800260a:	4b2c      	ldr	r3, [pc, #176]	; (80026bc <sine_count+0xc4>)
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	b25b      	sxtb	r3, r3
 8002610:	f003 031f 	and.w	r3, r3, #31
 8002614:	73fb      	strb	r3, [r7, #15]

	if (sine_counter>sine_length) sine_counter = sine_length;		// seems to be faster than using a for loop to calculate both values
 8002616:	4b2a      	ldr	r3, [pc, #168]	; (80026c0 <sine_count+0xc8>)
 8002618:	881a      	ldrh	r2, [r3, #0]
 800261a:	4b2a      	ldr	r3, [pc, #168]	; (80026c4 <sine_count+0xcc>)
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	429a      	cmp	r2, r3
 8002620:	d903      	bls.n	800262a <sine_count+0x32>
 8002622:	4b28      	ldr	r3, [pc, #160]	; (80026c4 <sine_count+0xcc>)
 8002624:	881a      	ldrh	r2, [r3, #0]
 8002626:	4b26      	ldr	r3, [pc, #152]	; (80026c0 <sine_count+0xc8>)
 8002628:	801a      	strh	r2, [r3, #0]

	sine_out = sine_block[sine_counter];  // 0- 40000
 800262a:	4b25      	ldr	r3, [pc, #148]	; (80026c0 <sine_count+0xc8>)
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	4b25      	ldr	r3, [pc, #148]	; (80026c8 <sine_count+0xd0>)
 8002632:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002636:	461a      	mov	r2, r3
 8002638:	4b24      	ldr	r3, [pc, #144]	; (80026cc <sine_count+0xd4>)
 800263a:	601a      	str	r2, [r3, #0]
	sine_tempA=sine_out; // grab first value , needs to be always plus
 800263c:	4b23      	ldr	r3, [pc, #140]	; (80026cc <sine_count+0xd4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	60bb      	str	r3, [r7, #8]
	sine_tempA=sine_tempA-20000; //convert to signed
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 8002648:	3b20      	subs	r3, #32
 800264a:	60bb      	str	r3, [r7, #8]

	sine_counter++;
 800264c:	4b1c      	ldr	r3, [pc, #112]	; (80026c0 <sine_count+0xc8>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	3301      	adds	r3, #1
 8002652:	b29a      	uxth	r2, r3
 8002654:	4b1a      	ldr	r3, [pc, #104]	; (80026c0 <sine_count+0xc8>)
 8002656:	801a      	strh	r2, [r3, #0]
	if (sine_counter>=sine_length)  sine_counter=0; // set to sample length
 8002658:	4b19      	ldr	r3, [pc, #100]	; (80026c0 <sine_count+0xc8>)
 800265a:	881a      	ldrh	r2, [r3, #0]
 800265c:	4b19      	ldr	r3, [pc, #100]	; (80026c4 <sine_count+0xcc>)
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	429a      	cmp	r2, r3
 8002662:	d302      	bcc.n	800266a <sine_count+0x72>
 8002664:	4b16      	ldr	r3, [pc, #88]	; (80026c0 <sine_count+0xc8>)
 8002666:	2200      	movs	r2, #0
 8002668:	801a      	strh	r2, [r3, #0]

			sine_out = sine_block[sine_counter];  // grab second value
 800266a:	4b15      	ldr	r3, [pc, #84]	; (80026c0 <sine_count+0xc8>)
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	4b15      	ldr	r3, [pc, #84]	; (80026c8 <sine_count+0xd0>)
 8002672:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002676:	461a      	mov	r2, r3
 8002678:	4b14      	ldr	r3, [pc, #80]	; (80026cc <sine_count+0xd4>)
 800267a:	601a      	str	r2, [r3, #0]

		sine_tempB=sine_out; // grab first value
 800267c:	4b13      	ldr	r3, [pc, #76]	; (80026cc <sine_count+0xd4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	607b      	str	r3, [r7, #4]
			sine_tempB=sine_tempB-20000;  // convert to signed and +256 to -256
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 8002688:	3b20      	subs	r3, #32
 800268a:	607b      	str	r3, [r7, #4]

			sine_tempB=	sine_tempB-sine_tempA;   // calculate fraction then add
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	607b      	str	r3, [r7, #4]
			sine_tempB=sine_tempB>>5; // div 32 or 32 upsample
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	115b      	asrs	r3, r3, #5
 8002698:	607b      	str	r3, [r7, #4]

			sine_tempB=sine_tempB*sine_frac; // mult by steps , can overshoot !!
 800269a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	fb02 f303 	mul.w	r3, r2, r3
 80026a4:	607b      	str	r3, [r7, #4]

			sine_out=(sine_tempA+sine_tempB);   // add back to start value
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4413      	add	r3, r2
 80026ac:	4a07      	ldr	r2, [pc, #28]	; (80026cc <sine_count+0xd4>)
 80026ae:	6013      	str	r3, [r2, #0]
			//sine_tempA=sine_tempA; //needs

			//sine_out=sine_tempA;


}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	20000b8e 	.word	0x20000b8e
 80026c0:	20000b8c 	.word	0x20000b8c
 80026c4:	2000024e 	.word	0x2000024e
 80026c8:	0800992c 	.word	0x0800992c
 80026cc:	20000b90 	.word	0x20000b90

080026d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026d0:	b5b0      	push	{r4, r5, r7, lr}
 80026d2:	b0b4      	sub	sp, #208	; 0xd0
 80026d4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026d6:	f001 fa5d 	bl	8003b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026da:	f000 fc25 	bl	8002f28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026de:	f000 feeb 	bl	80034b8 <MX_GPIO_Init>
  MX_DMA_Init();
 80026e2:	f000 fec9 	bl	8003478 <MX_DMA_Init>
  MX_ADC1_Init();
 80026e6:	f000 fc89 	bl	8002ffc <MX_ADC1_Init>
  MX_SPI2_Init();
 80026ea:	f000 fd71 	bl	80031d0 <MX_SPI2_Init>
  MX_TIM3_Init();
 80026ee:	f000 fdf9 	bl	80032e4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80026f2:	f000 fe6d 	bl	80033d0 <MX_TIM4_Init>
  MX_I2C2_Init();
 80026f6:	f000 fd07 	bl	8003108 <MX_I2C2_Init>
  MX_TIM2_Init();
 80026fa:	f000 fd9f 	bl	800323c <MX_TIM2_Init>
  MX_SPI1_Init();
 80026fe:	f000 fd31 	bl	8003164 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  const volatile uint8_t *userConfig=(const volatile uint8_t *)0x0800D2F0;
 8002702:	4bc5      	ldr	r3, [pc, #788]	; (8002a18 <main+0x348>)
 8002704:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4



//LL_SPI_Enable(SPI2);

  HAL_SPI_Init(&hspi2); // write to register hspi2
 8002708:	48c4      	ldr	r0, [pc, #784]	; (8002a1c <main+0x34c>)
 800270a:	f004 fde7 	bl	80072dc <HAL_SPI_Init>
  HAL_SPI_Init(&hspi1); // write to register hspi2
 800270e:	48c4      	ldr	r0, [pc, #784]	; (8002a20 <main+0x350>)
 8002710:	f004 fde4 	bl	80072dc <HAL_SPI_Init>
  // lcd_init(); // keep this late or have issues
//HAL_TIM_Base_Start_IT(&htim1);  // This needs to work for irq   ,disbling tim1 made loop a lot faster
//TIM1->CCER=0;
HAL_TIM_Base_Start_IT(&htim3);  // This needs to work for irq
 8002714:	48c3      	ldr	r0, [pc, #780]	; (8002a24 <main+0x354>)
 8002716:	f005 fc33 	bl	8007f80 <HAL_TIM_Base_Start_IT>
TIM3->CCER=0;
 800271a:	4bc3      	ldr	r3, [pc, #780]	; (8002a28 <main+0x358>)
 800271c:	2200      	movs	r2, #0
 800271e:	621a      	str	r2, [r3, #32]
HAL_TIM_Base_Start(&htim2);
 8002720:	48c2      	ldr	r0, [pc, #776]	; (8002a2c <main+0x35c>)
 8002722:	f005 fbd3 	bl	8007ecc <HAL_TIM_Base_Start>
HAL_TIM_Base_Start(&htim4);
 8002726:	48c2      	ldr	r0, [pc, #776]	; (8002a30 <main+0x360>)
 8002728:	f005 fbd0 	bl	8007ecc <HAL_TIM_Base_Start>
//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  // they both work fine together
HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 800272c:	2108      	movs	r1, #8
 800272e:	48bd      	ldr	r0, [pc, #756]	; (8002a24 <main+0x354>)
 8002730:	f005 fce2 	bl	80080f8 <HAL_TIM_PWM_Start>
//HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,pData, 63);
TIM2->CNT=32000;
 8002734:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002738:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800273c:	625a      	str	r2, [r3, #36]	; 0x24
HAL_ADC_Start(&hadc1);
 800273e:	48bd      	ldr	r0, [pc, #756]	; (8002a34 <main+0x364>)
 8002740:	f001 fb02 	bl	8003d48 <HAL_ADC_Start>
HAL_ADC_Start_DMA(&hadc1, adc_source, 1024); //dma start ,needs this and adc start ,set sampling time to very long or it will fail
 8002744:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002748:	49bb      	ldr	r1, [pc, #748]	; (8002a38 <main+0x368>)
 800274a:	48ba      	ldr	r0, [pc, #744]	; (8002a34 <main+0x364>)
 800274c:	f001 fc3c 	bl	8003fc8 <HAL_ADC_Start_DMA>


HAL_I2C_MspInit(&hi2c2);
 8002750:	48ba      	ldr	r0, [pc, #744]	; (8002a3c <main+0x36c>)
 8002752:	f000 ffeb 	bl	800372c <HAL_I2C_MspInit>
uint8_t send_spi1[5]={0x90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,};
 8002756:	4aba      	ldr	r2, [pc, #744]	; (8002a40 <main+0x370>)
 8002758:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800275c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002760:	6018      	str	r0, [r3, #0]
 8002762:	3304      	adds	r3, #4
 8002764:	7019      	strb	r1, [r3, #0]





HAL_Delay(5);
 8002766:	2005      	movs	r0, #5
 8002768:	f001 fa86 	bl	8003c78 <HAL_Delay>


send_spi1[0]=0x06; //enable write  , only lasts for single operation
 800276c:	2306      	movs	r3, #6
 800276e:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002772:	2200      	movs	r2, #0
 8002774:	2110      	movs	r1, #16
 8002776:	48b3      	ldr	r0, [pc, #716]	; (8002a44 <main+0x374>)
 8002778:	f003 f992 	bl	8005aa0 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 800277c:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8002780:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002784:	2201      	movs	r2, #1
 8002786:	48a6      	ldr	r0, [pc, #664]	; (8002a20 <main+0x350>)
 8002788:	f004 fe31 	bl	80073ee <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 800278c:	2201      	movs	r2, #1
 800278e:	2110      	movs	r1, #16
 8002790:	48ac      	ldr	r0, [pc, #688]	; (8002a44 <main+0x374>)
 8002792:	f003 f985 	bl	8005aa0 <HAL_GPIO_WritePin>
HAL_Delay(5);
 8002796:	2005      	movs	r0, #5
 8002798:	f001 fa6e 	bl	8003c78 <HAL_Delay>
send_spi1[0]=0x20; //sector erase
 800279c:	2320      	movs	r3, #32
 800279e:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
send_spi1[1]=0; //24bit address msb
 80027a2:	2300      	movs	r3, #0
 80027a4:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
send_spi1[2]=0; //24bit address
 80027a8:	2300      	movs	r3, #0
 80027aa:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
send_spi1[3]=1; //24bit address lsb
 80027ae:	2301      	movs	r3, #1
 80027b0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);         // enable for sector erase   , stays empty when enabled
 80027b4:	2200      	movs	r2, #0
 80027b6:	2110      	movs	r1, #16
 80027b8:	48a2      	ldr	r0, [pc, #648]	; (8002a44 <main+0x374>)
 80027ba:	f003 f971 	bl	8005aa0 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 4, 1000);   //erase sector ,works
 80027be:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80027c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027c6:	2204      	movs	r2, #4
 80027c8:	4895      	ldr	r0, [pc, #596]	; (8002a20 <main+0x350>)
 80027ca:	f004 fe10 	bl	80073ee <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 80027ce:	2201      	movs	r2, #1
 80027d0:	2110      	movs	r1, #16
 80027d2:	489c      	ldr	r0, [pc, #624]	; (8002a44 <main+0x374>)
 80027d4:	f003 f964 	bl	8005aa0 <HAL_GPIO_WritePin>


send_spi1[0]=0x05; //read status register  if writing
 80027d8:	2305      	movs	r3, #5
 80027da:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
send_spi1[1]=0; //24bit address msb
 80027de:	2300      	movs	r3, #0
 80027e0:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
status_reg[1]=1; // set busy on
 80027e4:	4b98      	ldr	r3, [pc, #608]	; (8002a48 <main+0x378>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	705a      	strb	r2, [r3, #1]

while (status_reg[1]&1){								// check if write busy
 80027ea:	e012      	b.n	8002812 <main+0x142>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 80027ec:	2200      	movs	r2, #0
 80027ee:	2110      	movs	r1, #16
 80027f0:	4894      	ldr	r0, [pc, #592]	; (8002a44 <main+0x374>)
 80027f2:	f003 f955 	bl	8005aa0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, send_spi1, status_reg,2, 200);
 80027f6:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80027fa:	23c8      	movs	r3, #200	; 0xc8
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	2302      	movs	r3, #2
 8002800:	4a91      	ldr	r2, [pc, #580]	; (8002a48 <main+0x378>)
 8002802:	4887      	ldr	r0, [pc, #540]	; (8002a20 <main+0x350>)
 8002804:	f005 f840 	bl	8007888 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002808:	2201      	movs	r2, #1
 800280a:	2110      	movs	r1, #16
 800280c:	488d      	ldr	r0, [pc, #564]	; (8002a44 <main+0x374>)
 800280e:	f003 f947 	bl	8005aa0 <HAL_GPIO_WritePin>
while (status_reg[1]&1){								// check if write busy
 8002812:	4b8d      	ldr	r3, [pc, #564]	; (8002a48 <main+0x378>)
 8002814:	785b      	ldrb	r3, [r3, #1]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1e6      	bne.n	80027ec <main+0x11c>
}

send_spi1[0]=0x06; //enable write again
 800281e:	2306      	movs	r3, #6
 8002820:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002824:	2200      	movs	r2, #0
 8002826:	2110      	movs	r1, #16
 8002828:	4886      	ldr	r0, [pc, #536]	; (8002a44 <main+0x374>)
 800282a:	f003 f939 	bl	8005aa0 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 800282e:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8002832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002836:	2201      	movs	r2, #1
 8002838:	4879      	ldr	r0, [pc, #484]	; (8002a20 <main+0x350>)
 800283a:	f004 fdd8 	bl	80073ee <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 800283e:	2201      	movs	r2, #1
 8002840:	2110      	movs	r1, #16
 8002842:	4880      	ldr	r0, [pc, #512]	; (8002a44 <main+0x374>)
 8002844:	f003 f92c 	bl	8005aa0 <HAL_GPIO_WritePin>
HAL_Delay(5);
 8002848:	2005      	movs	r0, #5
 800284a:	f001 fa15 	bl	8003c78 <HAL_Delay>




//uint8_t temp_spi1[]={0x02,0,0,1,"H","E","L","L","O"," ","W","O","R","L","D",250,0,0} ; //page progrram ,24bit(address)  +1-255 byte data  (page)
uint8_t temp_spi1[]={0x02,0,0,1,128,129,130,131,132,133,134,135,136,137,138,250,0,0} ; //page progrram ,24bit(address)  +1-255 byte data  (page)
 800284e:	4b7f      	ldr	r3, [pc, #508]	; (8002a4c <main+0x37c>)
 8002850:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8002854:	461d      	mov	r5, r3
 8002856:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002858:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800285a:	682b      	ldr	r3, [r5, #0]
 800285c:	8023      	strh	r3, [r4, #0]
memcpy  (send_spi1,temp_spi1, 14);   // copy new array over old
 800285e:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8002862:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002866:	220e      	movs	r2, #14
 8002868:	4618      	mov	r0, r3
 800286a:	f006 fc0b 	bl	8009084 <memcpy>

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 800286e:	2200      	movs	r2, #0
 8002870:	2110      	movs	r1, #16
 8002872:	4874      	ldr	r0, [pc, #464]	; (8002a44 <main+0x374>)
 8002874:	f003 f914 	bl	8005aa0 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 14, 1000);  //address,page program
 8002878:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 800287c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002880:	220e      	movs	r2, #14
 8002882:	4867      	ldr	r0, [pc, #412]	; (8002a20 <main+0x350>)
 8002884:	f004 fdb3 	bl	80073ee <HAL_SPI_Transmit>

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002888:	2201      	movs	r2, #1
 800288a:	2110      	movs	r1, #16
 800288c:	486d      	ldr	r0, [pc, #436]	; (8002a44 <main+0x374>)
 800288e:	f003 f907 	bl	8005aa0 <HAL_GPIO_WritePin>




HAL_Delay(25);
 8002892:	2019      	movs	r0, #25
 8002894:	f001 f9f0 	bl	8003c78 <HAL_Delay>
send_spi1[0]=0x04; //disable write
 8002898:	2304      	movs	r3, #4
 800289a:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 800289e:	2200      	movs	r2, #0
 80028a0:	2110      	movs	r1, #16
 80028a2:	4868      	ldr	r0, [pc, #416]	; (8002a44 <main+0x374>)
 80028a4:	f003 f8fc 	bl	8005aa0 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 80028a8:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80028ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028b0:	2201      	movs	r2, #1
 80028b2:	485b      	ldr	r0, [pc, #364]	; (8002a20 <main+0x350>)
 80028b4:	f004 fd9b 	bl	80073ee <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 80028b8:	2201      	movs	r2, #1
 80028ba:	2110      	movs	r1, #16
 80028bc:	4861      	ldr	r0, [pc, #388]	; (8002a44 <main+0x374>)
 80028be:	f003 f8ef 	bl	8005aa0 <HAL_GPIO_WritePin>

HAL_Delay(5);
 80028c2:	2005      	movs	r0, #5
 80028c4:	f001 f9d8 	bl	8003c78 <HAL_Delay>
memcpy  (send_spi1,return_spi1, 14);   // clear out
 80028c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80028cc:	220e      	movs	r2, #14
 80028ce:	4960      	ldr	r1, [pc, #384]	; (8002a50 <main+0x380>)
 80028d0:	4618      	mov	r0, r3
 80028d2:	f006 fbd7 	bl	8009084 <memcpy>
send_spi1[0]=0x03; //read page 1
 80028d6:	2303      	movs	r3, #3
 80028d8:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
send_spi1[1]=0; //24bit address msb
 80028dc:	2300      	movs	r3, #0
 80028de:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
send_spi1[2]=0; //24bit address
 80028e2:	2300      	movs	r3, #0
 80028e4:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
send_spi1[3]=1; //24bit address lsb
 80028e8:	2301      	movs	r3, #1
 80028ea:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // when readin low till the end
 80028ee:	2200      	movs	r2, #0
 80028f0:	2110      	movs	r1, #16
 80028f2:	4854      	ldr	r0, [pc, #336]	; (8002a44 <main+0x374>)
 80028f4:	f003 f8d4 	bl	8005aa0 <HAL_GPIO_WritePin>

HAL_SPI_Transmit (&hspi1, send_spi1, 4, 100);
 80028f8:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80028fc:	2364      	movs	r3, #100	; 0x64
 80028fe:	2204      	movs	r2, #4
 8002900:	4847      	ldr	r0, [pc, #284]	; (8002a20 <main+0x350>)
 8002902:	f004 fd74 	bl	80073ee <HAL_SPI_Transmit>
HAL_SPI_Receive (&hspi1, return_spi1, 10, 100);   // works fine
 8002906:	2364      	movs	r3, #100	; 0x64
 8002908:	220a      	movs	r2, #10
 800290a:	4951      	ldr	r1, [pc, #324]	; (8002a50 <main+0x380>)
 800290c:	4844      	ldr	r0, [pc, #272]	; (8002a20 <main+0x350>)
 800290e:	f004 feaa 	bl	8007666 <HAL_SPI_Receive>

//HAL_SPI_TransmitReceive(&hspi1, send_spi1, return_spi1,14, 100);  // better in case skip , 4 bytes is null then data , slow
//HAL_Delay(5);

//HAL_SPI_Receive(&hspi1, return_spi1, 12, 1000);  // reverse msb ?
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002912:	2201      	movs	r2, #1
 8002914:	2110      	movs	r1, #16
 8002916:	484b      	ldr	r0, [pc, #300]	; (8002a44 <main+0x374>)
 8002918:	f003 f8c2 	bl	8005aa0 <HAL_GPIO_WritePin>
send_spi1[1]=0; //24bit address lsb
HAL_SPI_Transmit(&hspi1, send_spi1, 4, 1000);   //erase sector
*/


HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 800291c:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8002920:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002924:	2201      	movs	r2, #1
 8002926:	483e      	ldr	r0, [pc, #248]	; (8002a20 <main+0x350>)
 8002928:	f004 fd61 	bl	80073ee <HAL_SPI_Transmit>
} // reads stored values for potvalues
*/

uint8_t potSource2[65];
uint8_t potSource3[65];
HAL_I2C_Mem_Read(&hi2c2, 160, (1<<6), 2,&potSource, 64,1000);		// all good
 800292c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002930:	9302      	str	r3, [sp, #8]
 8002932:	2340      	movs	r3, #64	; 0x40
 8002934:	9301      	str	r3, [sp, #4]
 8002936:	4b47      	ldr	r3, [pc, #284]	; (8002a54 <main+0x384>)
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	2302      	movs	r3, #2
 800293c:	2240      	movs	r2, #64	; 0x40
 800293e:	21a0      	movs	r1, #160	; 0xa0
 8002940:	483e      	ldr	r0, [pc, #248]	; (8002a3c <main+0x36c>)
 8002942:	f003 fb05 	bl	8005f50 <HAL_I2C_Mem_Read>
HAL_I2C_Mem_Read(&hi2c2, 160, (2<<6), 2,&potSource2,64,1000);
 8002946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800294a:	9302      	str	r3, [sp, #8]
 800294c:	2340      	movs	r3, #64	; 0x40
 800294e:	9301      	str	r3, [sp, #4]
 8002950:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	2302      	movs	r3, #2
 8002958:	2280      	movs	r2, #128	; 0x80
 800295a:	21a0      	movs	r1, #160	; 0xa0
 800295c:	4837      	ldr	r0, [pc, #220]	; (8002a3c <main+0x36c>)
 800295e:	f003 faf7 	bl	8005f50 <HAL_I2C_Mem_Read>
HAL_I2C_Mem_Read(&hi2c2, 160, (3<<6), 2,&potSource3,64,1000);
 8002962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002966:	9302      	str	r3, [sp, #8]
 8002968:	2340      	movs	r3, #64	; 0x40
 800296a:	9301      	str	r3, [sp, #4]
 800296c:	f107 0308 	add.w	r3, r7, #8
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	2302      	movs	r3, #2
 8002974:	22c0      	movs	r2, #192	; 0xc0
 8002976:	21a0      	movs	r1, #160	; 0xa0
 8002978:	4830      	ldr	r0, [pc, #192]	; (8002a3c <main+0x36c>)
 800297a:	f003 fae9 	bl	8005f50 <HAL_I2C_Mem_Read>

for(i=0;i<1024;i++){
 800297e:	4b36      	ldr	r3, [pc, #216]	; (8002a58 <main+0x388>)
 8002980:	2200      	movs	r2, #0
 8002982:	801a      	strh	r2, [r3, #0]
 8002984:	e024      	b.n	80029d0 <main+0x300>
//	gfx_ram[i]=gfx_char[((i>>5)&7)+((i>>8)<<3)]; // test input fill  8*128 v+h just normal characters
	gfx_ram[i&63] [i>>6]  =gfx_char[8+(i&7)+(((i>>3)*8)&63)];
 8002986:	4b34      	ldr	r3, [pc, #208]	; (8002a58 <main+0x388>)
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	f103 0208 	add.w	r2, r3, #8
 8002992:	4b31      	ldr	r3, [pc, #196]	; (8002a58 <main+0x388>)
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	08db      	lsrs	r3, r3, #3
 8002998:	b29b      	uxth	r3, r3
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029a0:	441a      	add	r2, r3
 80029a2:	4b2d      	ldr	r3, [pc, #180]	; (8002a58 <main+0x388>)
 80029a4:	881b      	ldrh	r3, [r3, #0]
 80029a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029aa:	492b      	ldr	r1, [pc, #172]	; (8002a58 <main+0x388>)
 80029ac:	8809      	ldrh	r1, [r1, #0]
 80029ae:	0989      	lsrs	r1, r1, #6
 80029b0:	b289      	uxth	r1, r1
 80029b2:	4608      	mov	r0, r1
 80029b4:	4929      	ldr	r1, [pc, #164]	; (8002a5c <main+0x38c>)
 80029b6:	5c89      	ldrb	r1, [r1, r2]
 80029b8:	4a29      	ldr	r2, [pc, #164]	; (8002a60 <main+0x390>)
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	4413      	add	r3, r2
 80029be:	4403      	add	r3, r0
 80029c0:	460a      	mov	r2, r1
 80029c2:	701a      	strb	r2, [r3, #0]
for(i=0;i<1024;i++){
 80029c4:	4b24      	ldr	r3, [pc, #144]	; (8002a58 <main+0x388>)
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	3301      	adds	r3, #1
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	4b22      	ldr	r3, [pc, #136]	; (8002a58 <main+0x388>)
 80029ce:	801a      	strh	r2, [r3, #0]
 80029d0:	4b21      	ldr	r3, [pc, #132]	; (8002a58 <main+0x388>)
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d8:	d3d5      	bcc.n	8002986 <main+0x2b6>
//gfx_ram[i&63] [i>>6]  =250;
}

for(i=0;i<64;i++){
 80029da:	4b1f      	ldr	r3, [pc, #124]	; (8002a58 <main+0x388>)
 80029dc:	2200      	movs	r2, #0
 80029de:	801a      	strh	r2, [r3, #0]
 80029e0:	e011      	b.n	8002a06 <main+0x336>
	potSource[i+64]=potSource2[i];  //load up from eeprom
 80029e2:	4b1d      	ldr	r3, [pc, #116]	; (8002a58 <main+0x388>)
 80029e4:	881b      	ldrh	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <main+0x388>)
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	3340      	adds	r3, #64	; 0x40
 80029ee:	32c0      	adds	r2, #192	; 0xc0
 80029f0:	443a      	add	r2, r7
 80029f2:	f812 1c74 	ldrb.w	r1, [r2, #-116]
 80029f6:	4a17      	ldr	r2, [pc, #92]	; (8002a54 <main+0x384>)
 80029f8:	54d1      	strb	r1, [r2, r3]
for(i=0;i<64;i++){
 80029fa:	4b17      	ldr	r3, [pc, #92]	; (8002a58 <main+0x388>)
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	3301      	adds	r3, #1
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <main+0x388>)
 8002a04:	801a      	strh	r2, [r3, #0]
 8002a06:	4b14      	ldr	r3, [pc, #80]	; (8002a58 <main+0x388>)
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	2b3f      	cmp	r3, #63	; 0x3f
 8002a0c:	d9e9      	bls.n	80029e2 <main+0x312>
}

for(i=0;i<64;i++){
 8002a0e:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <main+0x388>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	801a      	strh	r2, [r3, #0]
 8002a14:	e038      	b.n	8002a88 <main+0x3b8>
 8002a16:	bf00      	nop
 8002a18:	0800d2f0 	.word	0x0800d2f0
 8002a1c:	20002e88 	.word	0x20002e88
 8002a20:	20002e30 	.word	0x20002e30
 8002a24:	20002f28 	.word	0x20002f28
 8002a28:	40000400 	.word	0x40000400
 8002a2c:	20002ee0 	.word	0x20002ee0
 8002a30:	20002f70 	.word	0x20002f70
 8002a34:	20002d34 	.word	0x20002d34
 8002a38:	20001428 	.word	0x20001428
 8002a3c:	20002ddc 	.word	0x20002ddc
 8002a40:	080093a0 	.word	0x080093a0
 8002a44:	40020000 	.word	0x40020000
 8002a48:	200006e8 	.word	0x200006e8
 8002a4c:	080093a8 	.word	0x080093a8
 8002a50:	20002d1c 	.word	0x20002d1c
 8002a54:	20000a04 	.word	0x20000a04
 8002a58:	20000bdc 	.word	0x20000bdc
 8002a5c:	200002c0 	.word	0x200002c0
 8002a60:	200024f8 	.word	0x200024f8
	potSource[i+128]=potSource3[i];
 8002a64:	4b84      	ldr	r3, [pc, #528]	; (8002c78 <main+0x5a8>)
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4b83      	ldr	r3, [pc, #524]	; (8002c78 <main+0x5a8>)
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	3380      	adds	r3, #128	; 0x80
 8002a70:	32c0      	adds	r2, #192	; 0xc0
 8002a72:	443a      	add	r2, r7
 8002a74:	f812 1cb8 	ldrb.w	r1, [r2, #-184]
 8002a78:	4a80      	ldr	r2, [pc, #512]	; (8002c7c <main+0x5ac>)
 8002a7a:	54d1      	strb	r1, [r2, r3]
for(i=0;i<64;i++){
 8002a7c:	4b7e      	ldr	r3, [pc, #504]	; (8002c78 <main+0x5a8>)
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	3301      	adds	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	4b7c      	ldr	r3, [pc, #496]	; (8002c78 <main+0x5a8>)
 8002a86:	801a      	strh	r2, [r3, #0]
 8002a88:	4b7b      	ldr	r3, [pc, #492]	; (8002c78 <main+0x5a8>)
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	2b3f      	cmp	r3, #63	; 0x3f
 8002a8e:	d9e9      	bls.n	8002a64 <main+0x394>
}

for(i=0;i<180;i++){
 8002a90:	4b79      	ldr	r3, [pc, #484]	; (8002c78 <main+0x5a8>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	801a      	strh	r2, [r3, #0]
 8002a96:	e010      	b.n	8002aba <main+0x3ea>
	potValues[i]=potSource[i]>>4;
 8002a98:	4b77      	ldr	r3, [pc, #476]	; (8002c78 <main+0x5a8>)
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4b77      	ldr	r3, [pc, #476]	; (8002c7c <main+0x5ac>)
 8002aa0:	5c9b      	ldrb	r3, [r3, r2]
 8002aa2:	4a75      	ldr	r2, [pc, #468]	; (8002c78 <main+0x5a8>)
 8002aa4:	8812      	ldrh	r2, [r2, #0]
 8002aa6:	091b      	lsrs	r3, r3, #4
 8002aa8:	b2d9      	uxtb	r1, r3
 8002aaa:	4b75      	ldr	r3, [pc, #468]	; (8002c80 <main+0x5b0>)
 8002aac:	5499      	strb	r1, [r3, r2]
for(i=0;i<180;i++){
 8002aae:	4b72      	ldr	r3, [pc, #456]	; (8002c78 <main+0x5a8>)
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	4b70      	ldr	r3, [pc, #448]	; (8002c78 <main+0x5a8>)
 8002ab8:	801a      	strh	r2, [r3, #0]
 8002aba:	4b6f      	ldr	r3, [pc, #444]	; (8002c78 <main+0x5a8>)
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	2bb3      	cmp	r3, #179	; 0xb3
 8002ac0:	d9ea      	bls.n	8002a98 <main+0x3c8>
}

float tempo_hold;  // calculate tempo look up
for (i=0;i<161;i++) {
 8002ac2:	4b6d      	ldr	r3, [pc, #436]	; (8002c78 <main+0x5a8>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	801a      	strh	r2, [r3, #0]
 8002ac8:	e040      	b.n	8002b4c <main+0x47c>

tempo_hold=(i+180)*0.0166666666;
 8002aca:	4b6b      	ldr	r3, [pc, #428]	; (8002c78 <main+0x5a8>)
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	33b4      	adds	r3, #180	; 0xb4
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7fd fdfd 	bl	80006d0 <__aeabi_i2d>
 8002ad6:	a364      	add	r3, pc, #400	; (adr r3, 8002c68 <main+0x598>)
 8002ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002adc:	f7fd fb7c 	bl	80001d8 <__aeabi_dmul>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4610      	mov	r0, r2
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	f7fd fe5c 	bl	80007a4 <__aeabi_d2f>
 8002aec:	4603      	mov	r3, r0
 8002aee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

tempo_hold=	1/tempo_hold;
 8002af2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002af6:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002afa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002afe:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
//tempo_hold=	tempo_hold*2187.6*4;      // change for the sake of note length
tempo_hold=	tempo_hold*2187.6*1;      // change for the sake of note length
 8002b02:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8002b06:	f7fd fdf5 	bl	80006f4 <__aeabi_f2d>
 8002b0a:	a359      	add	r3, pc, #356	; (adr r3, 8002c70 <main+0x5a0>)
 8002b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b10:	f7fd fb62 	bl	80001d8 <__aeabi_dmul>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	f7fd fe42 	bl	80007a4 <__aeabi_d2f>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
tempo_lut[i]=tempo_hold;
 8002b26:	4b54      	ldr	r3, [pc, #336]	; (8002c78 <main+0x5a8>)
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002b30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b34:	ee17 3a90 	vmov	r3, s15
 8002b38:	b299      	uxth	r1, r3
 8002b3a:	4b52      	ldr	r3, [pc, #328]	; (8002c84 <main+0x5b4>)
 8002b3c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
for (i=0;i<161;i++) {
 8002b40:	4b4d      	ldr	r3, [pc, #308]	; (8002c78 <main+0x5a8>)
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	3301      	adds	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	4b4b      	ldr	r3, [pc, #300]	; (8002c78 <main+0x5a8>)
 8002b4a:	801a      	strh	r2, [r3, #0]
 8002b4c:	4b4a      	ldr	r3, [pc, #296]	; (8002c78 <main+0x5a8>)
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	2ba0      	cmp	r3, #160	; 0xa0
 8002b52:	d9ba      	bls.n	8002aca <main+0x3fa>
}
isrMask=571; // def tempo 571=180bpm , 20 ms /isrcount
 8002b54:	4b4c      	ldr	r3, [pc, #304]	; (8002c88 <main+0x5b8>)
 8002b56:	f240 223b 	movw	r2, #571	; 0x23b
 8002b5a:	801a      	strh	r2, [r3, #0]

noteTiming=24;
 8002b5c:	4b4b      	ldr	r3, [pc, #300]	; (8002c8c <main+0x5bc>)
 8002b5e:	2218      	movs	r2, #24
 8002b60:	701a      	strb	r2, [r3, #0]
for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8002b62:	4b45      	ldr	r3, [pc, #276]	; (8002c78 <main+0x5a8>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	801a      	strh	r2, [r3, #0]
 8002b68:	e00b      	b.n	8002b82 <main+0x4b2>
	spell[i]=67;
 8002b6a:	4b43      	ldr	r3, [pc, #268]	; (8002c78 <main+0x5a8>)
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	4b47      	ldr	r3, [pc, #284]	; (8002c90 <main+0x5c0>)
 8002b72:	2143      	movs	r1, #67	; 0x43
 8002b74:	5499      	strb	r1, [r3, r2]
for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8002b76:	4b40      	ldr	r3, [pc, #256]	; (8002c78 <main+0x5a8>)
 8002b78:	881b      	ldrh	r3, [r3, #0]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	4b3e      	ldr	r3, [pc, #248]	; (8002c78 <main+0x5a8>)
 8002b80:	801a      	strh	r2, [r3, #0]
 8002b82:	4b3d      	ldr	r3, [pc, #244]	; (8002c78 <main+0x5a8>)
 8002b84:	881b      	ldrh	r3, [r3, #0]
 8002b86:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002b8a:	d3ee      	bcc.n	8002b6a <main+0x49a>

}

display_fill();
 8002b8c:	f7fe fb4a 	bl	8001224 <display_fill>
// build display, enc_lut2, works good

for (i=0;i<512;i++)	{gfx_char[i]=gfx_char[i];
 8002b90:	4b39      	ldr	r3, [pc, #228]	; (8002c78 <main+0x5a8>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	801a      	strh	r2, [r3, #0]
 8002b96:	e00f      	b.n	8002bb8 <main+0x4e8>
 8002b98:	4b37      	ldr	r3, [pc, #220]	; (8002c78 <main+0x5a8>)
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4b36      	ldr	r3, [pc, #216]	; (8002c78 <main+0x5a8>)
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	4b3b      	ldr	r3, [pc, #236]	; (8002c94 <main+0x5c4>)
 8002ba6:	5c59      	ldrb	r1, [r3, r1]
 8002ba8:	4b3a      	ldr	r3, [pc, #232]	; (8002c94 <main+0x5c4>)
 8002baa:	5499      	strb	r1, [r3, r2]
 8002bac:	4b32      	ldr	r3, [pc, #200]	; (8002c78 <main+0x5a8>)
 8002bae:	881b      	ldrh	r3, [r3, #0]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	4b30      	ldr	r3, [pc, #192]	; (8002c78 <main+0x5a8>)
 8002bb6:	801a      	strh	r2, [r3, #0]
 8002bb8:	4b2f      	ldr	r3, [pc, #188]	; (8002c78 <main+0x5a8>)
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bc0:	d3ea      	bcc.n	8002b98 <main+0x4c8>




//   produce extra menu pages here /////////////////////////////////////////////////////////////////////////////////
uint16_t lut_temp2=0;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
uint16_t lut_temp3=0;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
for  (i=0;i<390;i++){					// get a few more pages
 8002bce:	4b2a      	ldr	r3, [pc, #168]	; (8002c78 <main+0x5a8>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	801a      	strh	r2, [r3, #0]
 8002bd4:	e027      	b.n	8002c26 <main+0x556>

	if (disp_lut [i>>4] [i&15] <95) lut_temp2=lut_temp2+1;    // skip space or characters
 8002bd6:	4b28      	ldr	r3, [pc, #160]	; (8002c78 <main+0x5a8>)
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	091b      	lsrs	r3, r3, #4
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	461a      	mov	r2, r3
 8002be0:	4b25      	ldr	r3, [pc, #148]	; (8002c78 <main+0x5a8>)
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	492b      	ldr	r1, [pc, #172]	; (8002c98 <main+0x5c8>)
 8002bea:	0112      	lsls	r2, r2, #4
 8002bec:	4413      	add	r3, r2
 8002bee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002bf2:	2b5e      	cmp	r3, #94	; 0x5e
 8002bf4:	d805      	bhi.n	8002c02 <main+0x532>
 8002bf6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8002c00:	e00b      	b.n	8002c1a <main+0x54a>

	else {enc2_lut[lut_temp3] =i;  lut_temp3++;}     // goes to 511
 8002c02:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8002c06:	4a1c      	ldr	r2, [pc, #112]	; (8002c78 <main+0x5a8>)
 8002c08:	8811      	ldrh	r1, [r2, #0]
 8002c0a:	4a24      	ldr	r2, [pc, #144]	; (8002c9c <main+0x5cc>)
 8002c0c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002c10:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8002c14:	3301      	adds	r3, #1
 8002c16:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
for  (i=0;i<390;i++){					// get a few more pages
 8002c1a:	4b17      	ldr	r3, [pc, #92]	; (8002c78 <main+0x5a8>)
 8002c1c:	881b      	ldrh	r3, [r3, #0]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	4b15      	ldr	r3, [pc, #84]	; (8002c78 <main+0x5a8>)
 8002c24:	801a      	strh	r2, [r3, #0]
 8002c26:	4b14      	ldr	r3, [pc, #80]	; (8002c78 <main+0x5a8>)
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 8002c2e:	d3d2      	bcc.n	8002bd6 <main+0x506>
}


menuSelect=0;
 8002c30:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <main+0x5d0>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	701a      	strb	r2, [r3, #0]
// fill up sample
firstbarLoop=0;
 8002c36:	4b1b      	ldr	r3, [pc, #108]	; (8002ca4 <main+0x5d4>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	701a      	strb	r2, [r3, #0]
  while (1)																																																		//   while loop , random 20+ms freeze around 0.5 sec
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_counter++ ;
 8002c3c:	4b1a      	ldr	r3, [pc, #104]	; (8002ca8 <main+0x5d8>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	3301      	adds	r3, #1
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	4b18      	ldr	r3, [pc, #96]	; (8002ca8 <main+0x5d8>)
 8002c46:	701a      	strb	r2, [r3, #0]
	  loop_counter2++;//
 8002c48:	4b18      	ldr	r3, [pc, #96]	; (8002cac <main+0x5dc>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	4a17      	ldr	r2, [pc, #92]	; (8002cac <main+0x5dc>)
 8002c50:	6013      	str	r3, [r2, #0]

	  // if (menu_page<320) lcd_feedback();  //curious no issues with lcd without this  , maybe spell writing
	  if (mem_count==255) mem_count=0; else mem_count++;  // write to first
 8002c52:	4b17      	ldr	r3, [pc, #92]	; (8002cb0 <main+0x5e0>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2bff      	cmp	r3, #255	; 0xff
 8002c58:	d12c      	bne.n	8002cb4 <main+0x5e4>
 8002c5a:	4b15      	ldr	r3, [pc, #84]	; (8002cb0 <main+0x5e0>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	701a      	strb	r2, [r3, #0]
 8002c60:	e02e      	b.n	8002cc0 <main+0x5f0>
 8002c62:	bf00      	nop
 8002c64:	f3af 8000 	nop.w
 8002c68:	0febdd13 	.word	0x0febdd13
 8002c6c:	3f911111 	.word	0x3f911111
 8002c70:	33333333 	.word	0x33333333
 8002c74:	40a11733 	.word	0x40a11733
 8002c78:	20000bdc 	.word	0x20000bdc
 8002c7c:	20000a04 	.word	0x20000a04
 8002c80:	20000884 	.word	0x20000884
 8002c84:	200023b4 	.word	0x200023b4
 8002c88:	20000b8a 	.word	0x20000b8a
 8002c8c:	20000b83 	.word	0x20000b83
 8002c90:	2000010c 	.word	0x2000010c
 8002c94:	200002c0 	.word	0x200002c0
 8002c98:	0800943c 	.word	0x0800943c
 8002c9c:	20000714 	.word	0x20000714
 8002ca0:	20000b84 	.word	0x20000b84
 8002ca4:	20000b88 	.word	0x20000b88
 8002ca8:	20000bd8 	.word	0x20000bd8
 8002cac:	200020b0 	.word	0x200020b0
 8002cb0:	200020ae 	.word	0x200020ae
 8002cb4:	4b87      	ldr	r3, [pc, #540]	; (8002ed4 <main+0x804>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	4b85      	ldr	r3, [pc, #532]	; (8002ed4 <main+0x804>)
 8002cbe:	701a      	strb	r2, [r3, #0]
	  if 	((loop_counter2&7)==6)      {analoginputloopb();} // this is ok , plenty quick , no freeze here
 8002cc0:	4b85      	ldr	r3, [pc, #532]	; (8002ed8 <main+0x808>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	2b06      	cmp	r3, #6
 8002cca:	d101      	bne.n	8002cd0 <main+0x600>
 8002ccc:	f7fd ffdc 	bl	8000c88 <analoginputloopb>


if (loop_counter2==9096) {    //   4096=1min=32bytes so 4mins per 128 bank or 15 writes/hour , no freeze here
 8002cd0:	4b81      	ldr	r3, [pc, #516]	; (8002ed8 <main+0x808>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f242 3288 	movw	r2, #9096	; 0x2388
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d126      	bne.n	8002d2a <main+0x65a>

	mem_buf=potSource[mem_count];
 8002cdc:	4b7d      	ldr	r3, [pc, #500]	; (8002ed4 <main+0x804>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4b7e      	ldr	r3, [pc, #504]	; (8002edc <main+0x80c>)
 8002ce4:	5c9a      	ldrb	r2, [r3, r2]
 8002ce6:	4b7e      	ldr	r3, [pc, #504]	; (8002ee0 <main+0x810>)
 8002ce8:	701a      	strb	r2, [r3, #0]
	// read values from stored


	HAL_I2C_Mem_Write(&hi2c2, 160, ((1+(mem_count>>6))<<6)+(mem_count&63), 2, &mem_buf, 1, 1000);  // "&hi2c2"  actual register address
 8002cea:	4b7a      	ldr	r3, [pc, #488]	; (8002ed4 <main+0x804>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	099b      	lsrs	r3, r3, #6
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	019b      	lsls	r3, r3, #6
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	4b75      	ldr	r3, [pc, #468]	; (8002ed4 <main+0x804>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	4413      	add	r3, r2
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d10:	9302      	str	r3, [sp, #8]
 8002d12:	2301      	movs	r3, #1
 8002d14:	9301      	str	r3, [sp, #4]
 8002d16:	4b72      	ldr	r3, [pc, #456]	; (8002ee0 <main+0x810>)
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	21a0      	movs	r1, #160	; 0xa0
 8002d1e:	4871      	ldr	r0, [pc, #452]	; (8002ee4 <main+0x814>)
 8002d20:	f003 f81c 	bl	8005d5c <HAL_I2C_Mem_Write>
	//HAL_Delay(5); // this is slow , no bueno




	loop_counter2=0; //reset
 8002d24:	4b6c      	ldr	r3, [pc, #432]	; (8002ed8 <main+0x808>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]

}


	  if (disp_end==1)	 {  // displaybuffer after each full screen update on spi  ,, no freezes here
 8002d2a:	4b6f      	ldr	r3, [pc, #444]	; (8002ee8 <main+0x818>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d12a      	bne.n	8002d88 <main+0x6b8>

		  { if (loop_counter3)  enc2_tempc=enc2_dir; else enc2_dir=enc2_tempc; }    //hold enc till finished , this to clean up characters for now ,works ok
 8002d32:	4b6e      	ldr	r3, [pc, #440]	; (8002eec <main+0x81c>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d004      	beq.n	8002d44 <main+0x674>
 8002d3a:	4b6d      	ldr	r3, [pc, #436]	; (8002ef0 <main+0x820>)
 8002d3c:	881a      	ldrh	r2, [r3, #0]
 8002d3e:	4b6d      	ldr	r3, [pc, #436]	; (8002ef4 <main+0x824>)
 8002d40:	801a      	strh	r2, [r3, #0]
 8002d42:	e003      	b.n	8002d4c <main+0x67c>
 8002d44:	4b6b      	ldr	r3, [pc, #428]	; (8002ef4 <main+0x824>)
 8002d46:	881a      	ldrh	r2, [r3, #0]
 8002d48:	4b69      	ldr	r3, [pc, #420]	; (8002ef0 <main+0x820>)
 8002d4a:	801a      	strh	r2, [r3, #0]
		  loop_counter3=!loop_counter3;  //blinker flips on each full page refresh
 8002d4c:	4b67      	ldr	r3, [pc, #412]	; (8002eec <main+0x81c>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	bf0c      	ite	eq
 8002d54:	2301      	moveq	r3, #1
 8002d56:	2300      	movne	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	4b63      	ldr	r3, [pc, #396]	; (8002eec <main+0x81c>)
 8002d5e:	701a      	strb	r2, [r3, #0]

		  for (i=0;i<16;i++) {   displayBuffer();}
 8002d60:	4b65      	ldr	r3, [pc, #404]	; (8002ef8 <main+0x828>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	801a      	strh	r2, [r3, #0]
 8002d66:	e007      	b.n	8002d78 <main+0x6a8>
 8002d68:	f7fe fa88 	bl	800127c <displayBuffer>
 8002d6c:	4b62      	ldr	r3, [pc, #392]	; (8002ef8 <main+0x828>)
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	3301      	adds	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	4b60      	ldr	r3, [pc, #384]	; (8002ef8 <main+0x828>)
 8002d76:	801a      	strh	r2, [r3, #0]
 8002d78:	4b5f      	ldr	r3, [pc, #380]	; (8002ef8 <main+0x828>)
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	2b0f      	cmp	r3, #15
 8002d7e:	d9f3      	bls.n	8002d68 <main+0x698>
		  enc2_dir=enc2_tempc;
 8002d80:	4b5c      	ldr	r3, [pc, #368]	; (8002ef4 <main+0x824>)
 8002d82:	881a      	ldrh	r2, [r3, #0]
 8002d84:	4b5a      	ldr	r3, [pc, #360]	; (8002ef0 <main+0x820>)
 8002d86:	801a      	strh	r2, [r3, #0]

	  }


	  if (init<6)				// after 6 its done for good   // no freeze here
 8002d88:	4b5c      	ldr	r3, [pc, #368]	; (8002efc <main+0x82c>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b05      	cmp	r3, #5
 8002d8e:	d810      	bhi.n	8002db2 <main+0x6e2>
{
	  for (i=0;i<6;i++) {display_init();}  //1-2ms ?  change length if flickering ,maybe initial data
 8002d90:	4b59      	ldr	r3, [pc, #356]	; (8002ef8 <main+0x828>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	801a      	strh	r2, [r3, #0]
 8002d96:	e007      	b.n	8002da8 <main+0x6d8>
 8002d98:	f7fe f89c 	bl	8000ed4 <display_init>
 8002d9c:	4b56      	ldr	r3, [pc, #344]	; (8002ef8 <main+0x828>)
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	3301      	adds	r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	4b54      	ldr	r3, [pc, #336]	; (8002ef8 <main+0x828>)
 8002da6:	801a      	strh	r2, [r3, #0]
 8002da8:	4b53      	ldr	r3, [pc, #332]	; (8002ef8 <main+0x828>)
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	2b05      	cmp	r3, #5
 8002dae:	d9f3      	bls.n	8002d98 <main+0x6c8>
 8002db0:	e001      	b.n	8002db6 <main+0x6e6>
} else {display_update(); }  // send spi line data every loop cycle , self contained, single 8pixel line 18*256steps
 8002db2:	f7fe f96b 	bl	800108c <display_update>


	  ///////////////////////////////////////////////////////////////////////////////

	  if (loop_counter == 255)	{ // grab adc readings + 3ms , 32 step  // no freeze
 8002db6:	4b52      	ldr	r3, [pc, #328]	; (8002f00 <main+0x830>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2bff      	cmp	r3, #255	; 0xff
 8002dbc:	d128      	bne.n	8002e10 <main+0x740>



		  //HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go

		  HAL_ADCEx_InjectedStart(&hadc1) ;  // start injected mode normal conversion
 8002dbe:	4851      	ldr	r0, [pc, #324]	; (8002f04 <main+0x834>)
 8002dc0:	f001 fd10 	bl	80047e4 <HAL_ADCEx_InjectedStart>
		  uint16_t adc_temp1[4]={0,0,0,0};
 8002dc4:	463b      	mov	r3, r7
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	605a      	str	r2, [r3, #4]

		  HAL_ADC_PollForConversion(&hadc1,1);  // works but  slow ,blocking very slow, set quick time out
 8002dcc:	2101      	movs	r1, #1
 8002dce:	484d      	ldr	r0, [pc, #308]	; (8002f04 <main+0x834>)
 8002dd0:	f001 f86e 	bl	8003eb0 <HAL_ADC_PollForConversion>

		  adc_temp1[0]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	484b      	ldr	r0, [pc, #300]	; (8002f04 <main+0x834>)
 8002dd8:	f001 fe1a 	bl	8004a10 <HAL_ADCEx_InjectedGetValue>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	803b      	strh	r3, [r7, #0]
		  adc_temp1[1] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8002de2:	2102      	movs	r1, #2
 8002de4:	4847      	ldr	r0, [pc, #284]	; (8002f04 <main+0x834>)
 8002de6:	f001 fe13 	bl	8004a10 <HAL_ADCEx_InjectedGetValue>
 8002dea:	4603      	mov	r3, r0
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	807b      	strh	r3, [r7, #2]
		//  adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
		  adc_values[0]=	  adc_temp1[0]>>7;
 8002df0:	883b      	ldrh	r3, [r7, #0]
 8002df2:	09db      	lsrs	r3, r3, #7
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	4b44      	ldr	r3, [pc, #272]	; (8002f08 <main+0x838>)
 8002df8:	801a      	strh	r2, [r3, #0]
		  adc_values[1]=	  adc_temp1[1]>>7;
 8002dfa:	887b      	ldrh	r3, [r7, #2]
 8002dfc:	09db      	lsrs	r3, r3, #7
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	4b41      	ldr	r3, [pc, #260]	; (8002f08 <main+0x838>)
 8002e02:	805a      	strh	r2, [r3, #2]
		//  adc_values[2]=	  adc_temp1[2]>>7;
		  HAL_ADCEx_InjectedStop(&hadc1) ;
 8002e04:	483f      	ldr	r0, [pc, #252]	; (8002f04 <main+0x834>)
 8002e06:	f001 fdb7 	bl	8004978 <HAL_ADCEx_InjectedStop>


		  //HAL_ADC_Start_DMA(&hadc1, adc_source, 512);


	  	loop_counter=0;
 8002e0a:	4b3d      	ldr	r3, [pc, #244]	; (8002f00 <main+0x830>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	701a      	strb	r2, [r3, #0]
	  }

	  if ((seq_pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 8002e10:	4b3e      	ldr	r3, [pc, #248]	; (8002f0c <main+0x83c>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b07      	cmp	r3, #7
 8002e16:	d106      	bne.n	8002e26 <main+0x756>
 8002e18:	4b3d      	ldr	r3, [pc, #244]	; (8002f10 <main+0x840>)
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d102      	bne.n	8002e26 <main+0x756>
 8002e20:	4b3b      	ldr	r3, [pc, #236]	; (8002f10 <main+0x840>)
 8002e22:	2201      	movs	r2, #1
 8002e24:	801a      	strh	r2, [r3, #0]
	   if (promValue<64) promValue=promValue+1 ; else promValue=0;  // fetch eeprom   nogo
	  	  if ((promValues[promValue] ) !=(potValues[promValue]))  EEPROM.write(promValue,(potValues[promValue]));   //  not too happy can totally kill speed  will have to put elsewhere
	  	  promValues[promValue] =potValues[promValue];
	  	   */

	  	     HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,(seq_pos & 1)); // easy skip ?
 8002e26:	4b39      	ldr	r3, [pc, #228]	; (8002f0c <main+0x83c>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	461a      	mov	r2, r3
 8002e32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e36:	4837      	ldr	r0, [pc, #220]	; (8002f14 <main+0x844>)
 8002e38:	f002 fe32 	bl	8005aa0 <HAL_GPIO_WritePin>




	  	//	adc_flag=0;
	  		if (adc_flag) {
 8002e3c:	4b36      	ldr	r3, [pc, #216]	; (8002f18 <main+0x848>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d041      	beq.n	8002ec8 <main+0x7f8>
	  		HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go
 8002e44:	482f      	ldr	r0, [pc, #188]	; (8002f04 <main+0x834>)
 8002e46:	f001 f9af 	bl	80041a8 <HAL_ADC_Stop_DMA>
	  		HAL_ADC_Start_DMA(&hadc1, adc_source, 1024); //dma start ,needs this and adc start ,set sampling time
 8002e4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e4e:	4933      	ldr	r1, [pc, #204]	; (8002f1c <main+0x84c>)
 8002e50:	482c      	ldr	r0, [pc, #176]	; (8002f04 <main+0x834>)
 8002e52:	f001 f8b9 	bl	8003fc8 <HAL_ADC_Start_DMA>

	  			uint16_t* click=&adc_source[0];
 8002e56:	4b31      	ldr	r3, [pc, #196]	; (8002f1c <main+0x84c>)
 8002e58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	  			for (i=0;i<512;i++)
 8002e5c:	4b26      	ldr	r3, [pc, #152]	; (8002ef8 <main+0x828>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	801a      	strh	r2, [r3, #0]
 8002e62:	e029      	b.n	8002eb8 <main+0x7e8>
	  			{

	  				uint16_t crap_hold=*click;
 8002e64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2

	  			uint16_t crap_hold1=*(++click);
 8002e6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e72:	3302      	adds	r3, #2
 8002e74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	  		click++;
 8002e82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e86:	3302      	adds	r3, #2
 8002e88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	  	//			uint16_t crap_hold=adc_source[i*2];

	  				 // 				uint16_t crap_hold1=adc_source[(i*2)+1];

	  				input_holder[i] = (crap_hold+crap_hold1 )>>1;
 8002e8c:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 8002e90:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8002e94:	4413      	add	r3, r2
 8002e96:	1059      	asrs	r1, r3, #1
 8002e98:	4b17      	ldr	r3, [pc, #92]	; (8002ef8 <main+0x828>)
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	b289      	uxth	r1, r1
 8002ea0:	4b1f      	ldr	r3, [pc, #124]	; (8002f20 <main+0x850>)
 8002ea2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  				adc_flag=0;
 8002ea6:	4b1c      	ldr	r3, [pc, #112]	; (8002f18 <main+0x848>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	701a      	strb	r2, [r3, #0]
	  			for (i=0;i<512;i++)
 8002eac:	4b12      	ldr	r3, [pc, #72]	; (8002ef8 <main+0x828>)
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	4b10      	ldr	r3, [pc, #64]	; (8002ef8 <main+0x828>)
 8002eb6:	801a      	strh	r2, [r3, #0]
 8002eb8:	4b0f      	ldr	r3, [pc, #60]	; (8002ef8 <main+0x828>)
 8002eba:	881b      	ldrh	r3, [r3, #0]
 8002ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ec0:	d3d0      	bcc.n	8002e64 <main+0x794>
	  			}
	  		}

	while  (bank_write)                         {							// wait for adc , priority
 8002ec2:	e001      	b.n	8002ec8 <main+0x7f8>



		  //HAL_Delay(4);
	  		//sample_point=sample_point&768 ;
	  		sampling();
 8002ec4:	f7fe fb90 	bl	80015e8 <sampling>
	while  (bank_write)                         {							// wait for adc , priority
 8002ec8:	4b16      	ldr	r3, [pc, #88]	; (8002f24 <main+0x854>)
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1f9      	bne.n	8002ec4 <main+0x7f4>
	  loop_counter++ ;
 8002ed0:	e6b4      	b.n	8002c3c <main+0x56c>
 8002ed2:	bf00      	nop
 8002ed4:	200020ae 	.word	0x200020ae
 8002ed8:	200020b0 	.word	0x200020b0
 8002edc:	20000a04 	.word	0x20000a04
 8002ee0:	200020b4 	.word	0x200020b4
 8002ee4:	20002ddc 	.word	0x20002ddc
 8002ee8:	20002912 	.word	0x20002912
 8002eec:	20002913 	.word	0x20002913
 8002ef0:	20002096 	.word	0x20002096
 8002ef4:	20002914 	.word	0x20002914
 8002ef8:	20000bdc 	.word	0x20000bdc
 8002efc:	200020a5 	.word	0x200020a5
 8002f00:	20000bd8 	.word	0x20000bd8
 8002f04:	20002d34 	.word	0x20002d34
 8002f08:	200002b4 	.word	0x200002b4
 8002f0c:	20000bb4 	.word	0x20000bb4
 8002f10:	2000209c 	.word	0x2000209c
 8002f14:	40020800 	.word	0x40020800
 8002f18:	20002d18 	.word	0x20002d18
 8002f1c:	20001428 	.word	0x20001428
 8002f20:	20002918 	.word	0x20002918
 8002f24:	200002be 	.word	0x200002be

08002f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b094      	sub	sp, #80	; 0x50
 8002f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f2e:	f107 0320 	add.w	r3, r7, #32
 8002f32:	2230      	movs	r2, #48	; 0x30
 8002f34:	2100      	movs	r1, #0
 8002f36:	4618      	mov	r0, r3
 8002f38:	f006 f8b2 	bl	80090a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f3c:	f107 030c 	add.w	r3, r7, #12
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	605a      	str	r2, [r3, #4]
 8002f46:	609a      	str	r2, [r3, #8]
 8002f48:	60da      	str	r2, [r3, #12]
 8002f4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60bb      	str	r3, [r7, #8]
 8002f50:	4b28      	ldr	r3, [pc, #160]	; (8002ff4 <SystemClock_Config+0xcc>)
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	4a27      	ldr	r2, [pc, #156]	; (8002ff4 <SystemClock_Config+0xcc>)
 8002f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f5c:	4b25      	ldr	r3, [pc, #148]	; (8002ff4 <SystemClock_Config+0xcc>)
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f64:	60bb      	str	r3, [r7, #8]
 8002f66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f68:	2300      	movs	r3, #0
 8002f6a:	607b      	str	r3, [r7, #4]
 8002f6c:	4b22      	ldr	r3, [pc, #136]	; (8002ff8 <SystemClock_Config+0xd0>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a21      	ldr	r2, [pc, #132]	; (8002ff8 <SystemClock_Config+0xd0>)
 8002f72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	4b1f      	ldr	r3, [pc, #124]	; (8002ff8 <SystemClock_Config+0xd0>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f80:	607b      	str	r3, [r7, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f84:	2302      	movs	r3, #2
 8002f86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f8c:	2310      	movs	r3, #16
 8002f8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f90:	2302      	movs	r3, #2
 8002f92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f94:	2300      	movs	r3, #0
 8002f96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002f98:	2308      	movs	r3, #8
 8002f9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002f9c:	2364      	movs	r3, #100	; 0x64
 8002f9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fa8:	f107 0320 	add.w	r3, r7, #32
 8002fac:	4618      	mov	r0, r3
 8002fae:	f003 fd51 	bl	8006a54 <HAL_RCC_OscConfig>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002fb8:	f000 faf6 	bl	80035a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fbc:	230f      	movs	r3, #15
 8002fbe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fcc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002fce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fd2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002fd4:	f107 030c 	add.w	r3, r7, #12
 8002fd8:	2103      	movs	r1, #3
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f003 ffb2 	bl	8006f44 <HAL_RCC_ClockConfig>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002fe6:	f000 fadf 	bl	80035a8 <Error_Handler>
  }
}
 8002fea:	bf00      	nop
 8002fec:	3750      	adds	r7, #80	; 0x50
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	40007000 	.word	0x40007000

08002ffc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08c      	sub	sp, #48	; 0x30
 8003000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003002:	f107 0320 	add.w	r3, r7, #32
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	605a      	str	r2, [r3, #4]
 800300c:	609a      	str	r2, [r3, #8]
 800300e:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8003010:	463b      	mov	r3, r7
 8003012:	2220      	movs	r2, #32
 8003014:	2100      	movs	r1, #0
 8003016:	4618      	mov	r0, r3
 8003018:	f006 f842 	bl	80090a0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800301c:	4b36      	ldr	r3, [pc, #216]	; (80030f8 <MX_ADC1_Init+0xfc>)
 800301e:	4a37      	ldr	r2, [pc, #220]	; (80030fc <MX_ADC1_Init+0x100>)
 8003020:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003022:	4b35      	ldr	r3, [pc, #212]	; (80030f8 <MX_ADC1_Init+0xfc>)
 8003024:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003028:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800302a:	4b33      	ldr	r3, [pc, #204]	; (80030f8 <MX_ADC1_Init+0xfc>)
 800302c:	2200      	movs	r2, #0
 800302e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003030:	4b31      	ldr	r3, [pc, #196]	; (80030f8 <MX_ADC1_Init+0xfc>)
 8003032:	2201      	movs	r2, #1
 8003034:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003036:	4b30      	ldr	r3, [pc, #192]	; (80030f8 <MX_ADC1_Init+0xfc>)
 8003038:	2201      	movs	r2, #1
 800303a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800303c:	4b2e      	ldr	r3, [pc, #184]	; (80030f8 <MX_ADC1_Init+0xfc>)
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003044:	4b2c      	ldr	r3, [pc, #176]	; (80030f8 <MX_ADC1_Init+0xfc>)
 8003046:	2200      	movs	r2, #0
 8003048:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800304a:	4b2b      	ldr	r3, [pc, #172]	; (80030f8 <MX_ADC1_Init+0xfc>)
 800304c:	4a2c      	ldr	r2, [pc, #176]	; (8003100 <MX_ADC1_Init+0x104>)
 800304e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003050:	4b29      	ldr	r3, [pc, #164]	; (80030f8 <MX_ADC1_Init+0xfc>)
 8003052:	2200      	movs	r2, #0
 8003054:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003056:	4b28      	ldr	r3, [pc, #160]	; (80030f8 <MX_ADC1_Init+0xfc>)
 8003058:	2201      	movs	r2, #1
 800305a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800305c:	4b26      	ldr	r3, [pc, #152]	; (80030f8 <MX_ADC1_Init+0xfc>)
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003064:	4b24      	ldr	r3, [pc, #144]	; (80030f8 <MX_ADC1_Init+0xfc>)
 8003066:	2200      	movs	r2, #0
 8003068:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800306a:	4823      	ldr	r0, [pc, #140]	; (80030f8 <MX_ADC1_Init+0xfc>)
 800306c:	f000 fe28 	bl	8003cc0 <HAL_ADC_Init>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8003076:	f000 fa97 	bl	80035a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800307a:	2309      	movs	r3, #9
 800307c:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 800307e:	2301      	movs	r3, #1
 8003080:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8003082:	2306      	movs	r3, #6
 8003084:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003086:	f107 0320 	add.w	r3, r7, #32
 800308a:	4619      	mov	r1, r3
 800308c:	481a      	ldr	r0, [pc, #104]	; (80030f8 <MX_ADC1_Init+0xfc>)
 800308e:	f001 f8f9 	bl	8004284 <HAL_ADC_ConfigChannel>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8003098:	f000 fa86 	bl	80035a8 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 800309c:	2300      	movs	r3, #0
 800309e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 80030a0:	2301      	movs	r3, #1
 80030a2:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 2;
 80030a4:	2302      	movs	r3, #2
 80030a6:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_56CYCLES;
 80030a8:	2303      	movs	r3, #3
 80030aa:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 80030ac:	2300      	movs	r3, #0
 80030ae:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80030b0:	4b14      	ldr	r3, [pc, #80]	; (8003104 <MX_ADC1_Init+0x108>)
 80030b2:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80030b4:	2300      	movs	r3, #0
 80030b6:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80030b8:	2300      	movs	r3, #0
 80030ba:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80030c0:	463b      	mov	r3, r7
 80030c2:	4619      	mov	r1, r3
 80030c4:	480c      	ldr	r0, [pc, #48]	; (80030f8 <MX_ADC1_Init+0xfc>)
 80030c6:	f001 fcdb 	bl	8004a80 <HAL_ADCEx_InjectedConfigChannel>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80030d0:	f000 fa6a 	bl	80035a8 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 80030d4:	2302      	movs	r3, #2
 80030d6:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 80030d8:	2302      	movs	r3, #2
 80030da:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80030dc:	463b      	mov	r3, r7
 80030de:	4619      	mov	r1, r3
 80030e0:	4805      	ldr	r0, [pc, #20]	; (80030f8 <MX_ADC1_Init+0xfc>)
 80030e2:	f001 fccd 	bl	8004a80 <HAL_ADCEx_InjectedConfigChannel>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80030ec:	f000 fa5c 	bl	80035a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80030f0:	bf00      	nop
 80030f2:	3730      	adds	r7, #48	; 0x30
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	20002d34 	.word	0x20002d34
 80030fc:	40012000 	.word	0x40012000
 8003100:	0f000001 	.word	0x0f000001
 8003104:	000f0001 	.word	0x000f0001

08003108 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800310c:	4b12      	ldr	r3, [pc, #72]	; (8003158 <MX_I2C2_Init+0x50>)
 800310e:	4a13      	ldr	r2, [pc, #76]	; (800315c <MX_I2C2_Init+0x54>)
 8003110:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003112:	4b11      	ldr	r3, [pc, #68]	; (8003158 <MX_I2C2_Init+0x50>)
 8003114:	4a12      	ldr	r2, [pc, #72]	; (8003160 <MX_I2C2_Init+0x58>)
 8003116:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003118:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <MX_I2C2_Init+0x50>)
 800311a:	2200      	movs	r2, #0
 800311c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800311e:	4b0e      	ldr	r3, [pc, #56]	; (8003158 <MX_I2C2_Init+0x50>)
 8003120:	2200      	movs	r2, #0
 8003122:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <MX_I2C2_Init+0x50>)
 8003126:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800312a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800312c:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <MX_I2C2_Init+0x50>)
 800312e:	2200      	movs	r2, #0
 8003130:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003132:	4b09      	ldr	r3, [pc, #36]	; (8003158 <MX_I2C2_Init+0x50>)
 8003134:	2200      	movs	r2, #0
 8003136:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003138:	4b07      	ldr	r3, [pc, #28]	; (8003158 <MX_I2C2_Init+0x50>)
 800313a:	2200      	movs	r2, #0
 800313c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800313e:	4b06      	ldr	r3, [pc, #24]	; (8003158 <MX_I2C2_Init+0x50>)
 8003140:	2200      	movs	r2, #0
 8003142:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003144:	4804      	ldr	r0, [pc, #16]	; (8003158 <MX_I2C2_Init+0x50>)
 8003146:	f002 fcc5 	bl	8005ad4 <HAL_I2C_Init>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003150:	f000 fa2a 	bl	80035a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003154:	bf00      	nop
 8003156:	bd80      	pop	{r7, pc}
 8003158:	20002ddc 	.word	0x20002ddc
 800315c:	40005800 	.word	0x40005800
 8003160:	00061a80 	.word	0x00061a80

08003164 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003168:	4b17      	ldr	r3, [pc, #92]	; (80031c8 <MX_SPI1_Init+0x64>)
 800316a:	4a18      	ldr	r2, [pc, #96]	; (80031cc <MX_SPI1_Init+0x68>)
 800316c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800316e:	4b16      	ldr	r3, [pc, #88]	; (80031c8 <MX_SPI1_Init+0x64>)
 8003170:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003174:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003176:	4b14      	ldr	r3, [pc, #80]	; (80031c8 <MX_SPI1_Init+0x64>)
 8003178:	2200      	movs	r2, #0
 800317a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800317c:	4b12      	ldr	r3, [pc, #72]	; (80031c8 <MX_SPI1_Init+0x64>)
 800317e:	2200      	movs	r2, #0
 8003180:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003182:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <MX_SPI1_Init+0x64>)
 8003184:	2200      	movs	r2, #0
 8003186:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003188:	4b0f      	ldr	r3, [pc, #60]	; (80031c8 <MX_SPI1_Init+0x64>)
 800318a:	2200      	movs	r2, #0
 800318c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800318e:	4b0e      	ldr	r3, [pc, #56]	; (80031c8 <MX_SPI1_Init+0x64>)
 8003190:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003194:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003196:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <MX_SPI1_Init+0x64>)
 8003198:	2208      	movs	r2, #8
 800319a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800319c:	4b0a      	ldr	r3, [pc, #40]	; (80031c8 <MX_SPI1_Init+0x64>)
 800319e:	2200      	movs	r2, #0
 80031a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80031a2:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <MX_SPI1_Init+0x64>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031a8:	4b07      	ldr	r3, [pc, #28]	; (80031c8 <MX_SPI1_Init+0x64>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80031ae:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <MX_SPI1_Init+0x64>)
 80031b0:	220a      	movs	r2, #10
 80031b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80031b4:	4804      	ldr	r0, [pc, #16]	; (80031c8 <MX_SPI1_Init+0x64>)
 80031b6:	f004 f891 	bl	80072dc <HAL_SPI_Init>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80031c0:	f000 f9f2 	bl	80035a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80031c4:	bf00      	nop
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	20002e30 	.word	0x20002e30
 80031cc:	40013000 	.word	0x40013000

080031d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80031d4:	4b17      	ldr	r3, [pc, #92]	; (8003234 <MX_SPI2_Init+0x64>)
 80031d6:	4a18      	ldr	r2, [pc, #96]	; (8003238 <MX_SPI2_Init+0x68>)
 80031d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80031da:	4b16      	ldr	r3, [pc, #88]	; (8003234 <MX_SPI2_Init+0x64>)
 80031dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80031e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80031e2:	4b14      	ldr	r3, [pc, #80]	; (8003234 <MX_SPI2_Init+0x64>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80031e8:	4b12      	ldr	r3, [pc, #72]	; (8003234 <MX_SPI2_Init+0x64>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031ee:	4b11      	ldr	r3, [pc, #68]	; (8003234 <MX_SPI2_Init+0x64>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031f4:	4b0f      	ldr	r3, [pc, #60]	; (8003234 <MX_SPI2_Init+0x64>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80031fa:	4b0e      	ldr	r3, [pc, #56]	; (8003234 <MX_SPI2_Init+0x64>)
 80031fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003200:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003202:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <MX_SPI2_Init+0x64>)
 8003204:	2230      	movs	r2, #48	; 0x30
 8003206:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003208:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <MX_SPI2_Init+0x64>)
 800320a:	2200      	movs	r2, #0
 800320c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800320e:	4b09      	ldr	r3, [pc, #36]	; (8003234 <MX_SPI2_Init+0x64>)
 8003210:	2200      	movs	r2, #0
 8003212:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003214:	4b07      	ldr	r3, [pc, #28]	; (8003234 <MX_SPI2_Init+0x64>)
 8003216:	2200      	movs	r2, #0
 8003218:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800321a:	4b06      	ldr	r3, [pc, #24]	; (8003234 <MX_SPI2_Init+0x64>)
 800321c:	220a      	movs	r2, #10
 800321e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003220:	4804      	ldr	r0, [pc, #16]	; (8003234 <MX_SPI2_Init+0x64>)
 8003222:	f004 f85b 	bl	80072dc <HAL_SPI_Init>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800322c:	f000 f9bc 	bl	80035a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003230:	bf00      	nop
 8003232:	bd80      	pop	{r7, pc}
 8003234:	20002e88 	.word	0x20002e88
 8003238:	40003800 	.word	0x40003800

0800323c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08c      	sub	sp, #48	; 0x30
 8003240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003242:	f107 030c 	add.w	r3, r7, #12
 8003246:	2224      	movs	r2, #36	; 0x24
 8003248:	2100      	movs	r1, #0
 800324a:	4618      	mov	r0, r3
 800324c:	f005 ff28 	bl	80090a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003250:	1d3b      	adds	r3, r7, #4
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003258:	4b21      	ldr	r3, [pc, #132]	; (80032e0 <MX_TIM2_Init+0xa4>)
 800325a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800325e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003260:	4b1f      	ldr	r3, [pc, #124]	; (80032e0 <MX_TIM2_Init+0xa4>)
 8003262:	2200      	movs	r2, #0
 8003264:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003266:	4b1e      	ldr	r3, [pc, #120]	; (80032e0 <MX_TIM2_Init+0xa4>)
 8003268:	2200      	movs	r2, #0
 800326a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800326c:	4b1c      	ldr	r3, [pc, #112]	; (80032e0 <MX_TIM2_Init+0xa4>)
 800326e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003272:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8003274:	4b1a      	ldr	r3, [pc, #104]	; (80032e0 <MX_TIM2_Init+0xa4>)
 8003276:	f44f 7200 	mov.w	r2, #512	; 0x200
 800327a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800327c:	4b18      	ldr	r3, [pc, #96]	; (80032e0 <MX_TIM2_Init+0xa4>)
 800327e:	2200      	movs	r2, #0
 8003280:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003282:	2301      	movs	r3, #1
 8003284:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003286:	2302      	movs	r3, #2
 8003288:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800328a:	2301      	movs	r3, #1
 800328c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800328e:	2300      	movs	r3, #0
 8003290:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8003292:	2302      	movs	r3, #2
 8003294:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003296:	2302      	movs	r3, #2
 8003298:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800329a:	2301      	movs	r3, #1
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800329e:	2300      	movs	r3, #0
 80032a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 80032a2:	2302      	movs	r3, #2
 80032a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80032a6:	f107 030c 	add.w	r3, r7, #12
 80032aa:	4619      	mov	r1, r3
 80032ac:	480c      	ldr	r0, [pc, #48]	; (80032e0 <MX_TIM2_Init+0xa4>)
 80032ae:	f004 ffd3 	bl	8008258 <HAL_TIM_Encoder_Init>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80032b8:	f000 f976 	bl	80035a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032bc:	2300      	movs	r3, #0
 80032be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032c0:	2300      	movs	r3, #0
 80032c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032c4:	1d3b      	adds	r3, r7, #4
 80032c6:	4619      	mov	r1, r3
 80032c8:	4805      	ldr	r0, [pc, #20]	; (80032e0 <MX_TIM2_Init+0xa4>)
 80032ca:	f005 fdf1 	bl	8008eb0 <HAL_TIMEx_MasterConfigSynchronization>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80032d4:	f000 f968 	bl	80035a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80032d8:	bf00      	nop
 80032da:	3730      	adds	r7, #48	; 0x30
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	20002ee0 	.word	0x20002ee0

080032e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08e      	sub	sp, #56	; 0x38
 80032e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	605a      	str	r2, [r3, #4]
 80032f4:	609a      	str	r2, [r3, #8]
 80032f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032f8:	f107 0320 	add.w	r3, r7, #32
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003302:	1d3b      	adds	r3, r7, #4
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	60da      	str	r2, [r3, #12]
 800330e:	611a      	str	r2, [r3, #16]
 8003310:	615a      	str	r2, [r3, #20]
 8003312:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003314:	4b2c      	ldr	r3, [pc, #176]	; (80033c8 <MX_TIM3_Init+0xe4>)
 8003316:	4a2d      	ldr	r2, [pc, #180]	; (80033cc <MX_TIM3_Init+0xe8>)
 8003318:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800331a:	4b2b      	ldr	r3, [pc, #172]	; (80033c8 <MX_TIM3_Init+0xe4>)
 800331c:	2200      	movs	r2, #0
 800331e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003320:	4b29      	ldr	r3, [pc, #164]	; (80033c8 <MX_TIM3_Init+0xe4>)
 8003322:	2200      	movs	r2, #0
 8003324:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2544;
 8003326:	4b28      	ldr	r3, [pc, #160]	; (80033c8 <MX_TIM3_Init+0xe4>)
 8003328:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800332c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800332e:	4b26      	ldr	r3, [pc, #152]	; (80033c8 <MX_TIM3_Init+0xe4>)
 8003330:	2200      	movs	r2, #0
 8003332:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003334:	4b24      	ldr	r3, [pc, #144]	; (80033c8 <MX_TIM3_Init+0xe4>)
 8003336:	2280      	movs	r2, #128	; 0x80
 8003338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800333a:	4823      	ldr	r0, [pc, #140]	; (80033c8 <MX_TIM3_Init+0xe4>)
 800333c:	f004 fd76 	bl	8007e2c <HAL_TIM_Base_Init>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003346:	f000 f92f 	bl	80035a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800334a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800334e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003350:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003354:	4619      	mov	r1, r3
 8003356:	481c      	ldr	r0, [pc, #112]	; (80033c8 <MX_TIM3_Init+0xe4>)
 8003358:	f005 f9ee 	bl	8008738 <HAL_TIM_ConfigClockSource>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003362:	f000 f921 	bl	80035a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003366:	4818      	ldr	r0, [pc, #96]	; (80033c8 <MX_TIM3_Init+0xe4>)
 8003368:	f004 fe6c 	bl	8008044 <HAL_TIM_PWM_Init>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003372:	f000 f919 	bl	80035a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003376:	2300      	movs	r3, #0
 8003378:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800337a:	2300      	movs	r3, #0
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800337e:	f107 0320 	add.w	r3, r7, #32
 8003382:	4619      	mov	r1, r3
 8003384:	4810      	ldr	r0, [pc, #64]	; (80033c8 <MX_TIM3_Init+0xe4>)
 8003386:	f005 fd93 	bl	8008eb0 <HAL_TIMEx_MasterConfigSynchronization>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003390:	f000 f90a 	bl	80035a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003394:	2370      	movs	r3, #112	; 0x70
 8003396:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003398:	2300      	movs	r3, #0
 800339a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800339c:	2300      	movs	r3, #0
 800339e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033a0:	2300      	movs	r3, #0
 80033a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80033a4:	1d3b      	adds	r3, r7, #4
 80033a6:	2208      	movs	r2, #8
 80033a8:	4619      	mov	r1, r3
 80033aa:	4807      	ldr	r0, [pc, #28]	; (80033c8 <MX_TIM3_Init+0xe4>)
 80033ac:	f005 f902 	bl	80085b4 <HAL_TIM_PWM_ConfigChannel>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80033b6:	f000 f8f7 	bl	80035a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80033ba:	4803      	ldr	r0, [pc, #12]	; (80033c8 <MX_TIM3_Init+0xe4>)
 80033bc:	f000 fb32 	bl	8003a24 <HAL_TIM_MspPostInit>

}
 80033c0:	bf00      	nop
 80033c2:	3738      	adds	r7, #56	; 0x38
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	20002f28 	.word	0x20002f28
 80033cc:	40000400 	.word	0x40000400

080033d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08c      	sub	sp, #48	; 0x30
 80033d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80033d6:	f107 030c 	add.w	r3, r7, #12
 80033da:	2224      	movs	r2, #36	; 0x24
 80033dc:	2100      	movs	r1, #0
 80033de:	4618      	mov	r0, r3
 80033e0:	f005 fe5e 	bl	80090a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033e4:	1d3b      	adds	r3, r7, #4
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80033ec:	4b20      	ldr	r3, [pc, #128]	; (8003470 <MX_TIM4_Init+0xa0>)
 80033ee:	4a21      	ldr	r2, [pc, #132]	; (8003474 <MX_TIM4_Init+0xa4>)
 80033f0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80033f2:	4b1f      	ldr	r3, [pc, #124]	; (8003470 <MX_TIM4_Init+0xa0>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033f8:	4b1d      	ldr	r3, [pc, #116]	; (8003470 <MX_TIM4_Init+0xa0>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80033fe:	4b1c      	ldr	r3, [pc, #112]	; (8003470 <MX_TIM4_Init+0xa0>)
 8003400:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003404:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003406:	4b1a      	ldr	r3, [pc, #104]	; (8003470 <MX_TIM4_Init+0xa0>)
 8003408:	2200      	movs	r2, #0
 800340a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800340c:	4b18      	ldr	r3, [pc, #96]	; (8003470 <MX_TIM4_Init+0xa0>)
 800340e:	2200      	movs	r2, #0
 8003410:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003412:	2301      	movs	r3, #1
 8003414:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003416:	2302      	movs	r3, #2
 8003418:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800341a:	2301      	movs	r3, #1
 800341c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800341e:	2300      	movs	r3, #0
 8003420:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8003422:	2302      	movs	r3, #2
 8003424:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003426:	2302      	movs	r3, #2
 8003428:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800342a:	2301      	movs	r3, #1
 800342c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800342e:	2300      	movs	r3, #0
 8003430:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8003432:	2302      	movs	r3, #2
 8003434:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003436:	f107 030c 	add.w	r3, r7, #12
 800343a:	4619      	mov	r1, r3
 800343c:	480c      	ldr	r0, [pc, #48]	; (8003470 <MX_TIM4_Init+0xa0>)
 800343e:	f004 ff0b 	bl	8008258 <HAL_TIM_Encoder_Init>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003448:	f000 f8ae 	bl	80035a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800344c:	2300      	movs	r3, #0
 800344e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003450:	2300      	movs	r3, #0
 8003452:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003454:	1d3b      	adds	r3, r7, #4
 8003456:	4619      	mov	r1, r3
 8003458:	4805      	ldr	r0, [pc, #20]	; (8003470 <MX_TIM4_Init+0xa0>)
 800345a:	f005 fd29 	bl	8008eb0 <HAL_TIMEx_MasterConfigSynchronization>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003464:	f000 f8a0 	bl	80035a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003468:	bf00      	nop
 800346a:	3730      	adds	r7, #48	; 0x30
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	20002f70 	.word	0x20002f70
 8003474:	40000800 	.word	0x40000800

08003478 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800347e:	2300      	movs	r3, #0
 8003480:	607b      	str	r3, [r7, #4]
 8003482:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <MX_DMA_Init+0x3c>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	4a0b      	ldr	r2, [pc, #44]	; (80034b4 <MX_DMA_Init+0x3c>)
 8003488:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800348c:	6313      	str	r3, [r2, #48]	; 0x30
 800348e:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <MX_DMA_Init+0x3c>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003496:	607b      	str	r3, [r7, #4]
 8003498:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800349a:	2200      	movs	r2, #0
 800349c:	2100      	movs	r1, #0
 800349e:	203c      	movs	r0, #60	; 0x3c
 80034a0:	f001 fd63 	bl	8004f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80034a4:	203c      	movs	r0, #60	; 0x3c
 80034a6:	f001 fd7c 	bl	8004fa2 <HAL_NVIC_EnableIRQ>

}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40023800 	.word	0x40023800

080034b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b088      	sub	sp, #32
 80034bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034be:	f107 030c 	add.w	r3, r7, #12
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	605a      	str	r2, [r3, #4]
 80034c8:	609a      	str	r2, [r3, #8]
 80034ca:	60da      	str	r2, [r3, #12]
 80034cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	4b2a      	ldr	r3, [pc, #168]	; (800357c <MX_GPIO_Init+0xc4>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	4a29      	ldr	r2, [pc, #164]	; (800357c <MX_GPIO_Init+0xc4>)
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	6313      	str	r3, [r2, #48]	; 0x30
 80034de:	4b27      	ldr	r3, [pc, #156]	; (800357c <MX_GPIO_Init+0xc4>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	60bb      	str	r3, [r7, #8]
 80034e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ea:	2300      	movs	r3, #0
 80034ec:	607b      	str	r3, [r7, #4]
 80034ee:	4b23      	ldr	r3, [pc, #140]	; (800357c <MX_GPIO_Init+0xc4>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	4a22      	ldr	r2, [pc, #136]	; (800357c <MX_GPIO_Init+0xc4>)
 80034f4:	f043 0302 	orr.w	r3, r3, #2
 80034f8:	6313      	str	r3, [r2, #48]	; 0x30
 80034fa:	4b20      	ldr	r3, [pc, #128]	; (800357c <MX_GPIO_Init+0xc4>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	607b      	str	r3, [r7, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003506:	2300      	movs	r3, #0
 8003508:	603b      	str	r3, [r7, #0]
 800350a:	4b1c      	ldr	r3, [pc, #112]	; (800357c <MX_GPIO_Init+0xc4>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	4a1b      	ldr	r2, [pc, #108]	; (800357c <MX_GPIO_Init+0xc4>)
 8003510:	f043 0304 	orr.w	r3, r3, #4
 8003514:	6313      	str	r3, [r2, #48]	; 0x30
 8003516:	4b19      	ldr	r3, [pc, #100]	; (800357c <MX_GPIO_Init+0xc4>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003522:	2200      	movs	r2, #0
 8003524:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003528:	4815      	ldr	r0, [pc, #84]	; (8003580 <MX_GPIO_Init+0xc8>)
 800352a:	f002 fab9 	bl	8005aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 800352e:	2201      	movs	r2, #1
 8003530:	2110      	movs	r1, #16
 8003532:	4814      	ldr	r0, [pc, #80]	; (8003584 <MX_GPIO_Init+0xcc>)
 8003534:	f002 fab4 	bl	8005aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003538:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800353c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800353e:	2301      	movs	r3, #1
 8003540:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003546:	2300      	movs	r3, #0
 8003548:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800354a:	f107 030c 	add.w	r3, r7, #12
 800354e:	4619      	mov	r1, r3
 8003550:	480b      	ldr	r0, [pc, #44]	; (8003580 <MX_GPIO_Init+0xc8>)
 8003552:	f002 f921 	bl	8005798 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 8003556:	2310      	movs	r3, #16
 8003558:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800355a:	2301      	movs	r3, #1
 800355c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355e:	2300      	movs	r3, #0
 8003560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003562:	2303      	movs	r3, #3
 8003564:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 8003566:	f107 030c 	add.w	r3, r7, #12
 800356a:	4619      	mov	r1, r3
 800356c:	4805      	ldr	r0, [pc, #20]	; (8003584 <MX_GPIO_Init+0xcc>)
 800356e:	f002 f913 	bl	8005798 <HAL_GPIO_Init>

}
 8003572:	bf00      	nop
 8003574:	3720      	adds	r7, #32
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40023800 	.word	0x40023800
 8003580:	40020800 	.word	0x40020800
 8003584:	40020000 	.word	0x40020000

08003588 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)   // get data after conversion
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
adc_flag=1;
 8003590:	4b04      	ldr	r3, [pc, #16]	; (80035a4 <HAL_ADC_ConvCpltCallback+0x1c>)
 8003592:	2201      	movs	r2, #1
 8003594:	701a      	strb	r2, [r3, #0]


}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	20002d18 	.word	0x20002d18

080035a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035ac:	b672      	cpsid	i
}
 80035ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035b0:	e7fe      	b.n	80035b0 <Error_Handler+0x8>
	...

080035b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	607b      	str	r3, [r7, #4]
 80035be:	4b10      	ldr	r3, [pc, #64]	; (8003600 <HAL_MspInit+0x4c>)
 80035c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c2:	4a0f      	ldr	r2, [pc, #60]	; (8003600 <HAL_MspInit+0x4c>)
 80035c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035c8:	6453      	str	r3, [r2, #68]	; 0x44
 80035ca:	4b0d      	ldr	r3, [pc, #52]	; (8003600 <HAL_MspInit+0x4c>)
 80035cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035d2:	607b      	str	r3, [r7, #4]
 80035d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035d6:	2300      	movs	r3, #0
 80035d8:	603b      	str	r3, [r7, #0]
 80035da:	4b09      	ldr	r3, [pc, #36]	; (8003600 <HAL_MspInit+0x4c>)
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	4a08      	ldr	r2, [pc, #32]	; (8003600 <HAL_MspInit+0x4c>)
 80035e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e4:	6413      	str	r3, [r2, #64]	; 0x40
 80035e6:	4b06      	ldr	r3, [pc, #24]	; (8003600 <HAL_MspInit+0x4c>)
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ee:	603b      	str	r3, [r7, #0]
 80035f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	40023800 	.word	0x40023800

08003604 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b08a      	sub	sp, #40	; 0x28
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800360c:	f107 0314 	add.w	r3, r7, #20
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	605a      	str	r2, [r3, #4]
 8003616:	609a      	str	r2, [r3, #8]
 8003618:	60da      	str	r2, [r3, #12]
 800361a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a3c      	ldr	r2, [pc, #240]	; (8003714 <HAL_ADC_MspInit+0x110>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d171      	bne.n	800370a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003626:	2300      	movs	r3, #0
 8003628:	613b      	str	r3, [r7, #16]
 800362a:	4b3b      	ldr	r3, [pc, #236]	; (8003718 <HAL_ADC_MspInit+0x114>)
 800362c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362e:	4a3a      	ldr	r2, [pc, #232]	; (8003718 <HAL_ADC_MspInit+0x114>)
 8003630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003634:	6453      	str	r3, [r2, #68]	; 0x44
 8003636:	4b38      	ldr	r3, [pc, #224]	; (8003718 <HAL_ADC_MspInit+0x114>)
 8003638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363e:	613b      	str	r3, [r7, #16]
 8003640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003642:	2300      	movs	r3, #0
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	4b34      	ldr	r3, [pc, #208]	; (8003718 <HAL_ADC_MspInit+0x114>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	4a33      	ldr	r2, [pc, #204]	; (8003718 <HAL_ADC_MspInit+0x114>)
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	6313      	str	r3, [r2, #48]	; 0x30
 8003652:	4b31      	ldr	r3, [pc, #196]	; (8003718 <HAL_ADC_MspInit+0x114>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800365e:	2300      	movs	r3, #0
 8003660:	60bb      	str	r3, [r7, #8]
 8003662:	4b2d      	ldr	r3, [pc, #180]	; (8003718 <HAL_ADC_MspInit+0x114>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	4a2c      	ldr	r2, [pc, #176]	; (8003718 <HAL_ADC_MspInit+0x114>)
 8003668:	f043 0302 	orr.w	r3, r3, #2
 800366c:	6313      	str	r3, [r2, #48]	; 0x30
 800366e:	4b2a      	ldr	r3, [pc, #168]	; (8003718 <HAL_ADC_MspInit+0x114>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	60bb      	str	r3, [r7, #8]
 8003678:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA0-WKUP     ------> ADC1_IN0
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0;
 800367a:	2305      	movs	r3, #5
 800367c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800367e:	2303      	movs	r3, #3
 8003680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003682:	2300      	movs	r3, #0
 8003684:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003686:	f107 0314 	add.w	r3, r7, #20
 800368a:	4619      	mov	r1, r3
 800368c:	4823      	ldr	r0, [pc, #140]	; (800371c <HAL_ADC_MspInit+0x118>)
 800368e:	f002 f883 	bl	8005798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003692:	2302      	movs	r3, #2
 8003694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003696:	2303      	movs	r3, #3
 8003698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369a:	2300      	movs	r3, #0
 800369c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800369e:	f107 0314 	add.w	r3, r7, #20
 80036a2:	4619      	mov	r1, r3
 80036a4:	481e      	ldr	r0, [pc, #120]	; (8003720 <HAL_ADC_MspInit+0x11c>)
 80036a6:	f002 f877 	bl	8005798 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80036aa:	4b1e      	ldr	r3, [pc, #120]	; (8003724 <HAL_ADC_MspInit+0x120>)
 80036ac:	4a1e      	ldr	r2, [pc, #120]	; (8003728 <HAL_ADC_MspInit+0x124>)
 80036ae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80036b0:	4b1c      	ldr	r3, [pc, #112]	; (8003724 <HAL_ADC_MspInit+0x120>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036b6:	4b1b      	ldr	r3, [pc, #108]	; (8003724 <HAL_ADC_MspInit+0x120>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80036bc:	4b19      	ldr	r3, [pc, #100]	; (8003724 <HAL_ADC_MspInit+0x120>)
 80036be:	2200      	movs	r2, #0
 80036c0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80036c2:	4b18      	ldr	r3, [pc, #96]	; (8003724 <HAL_ADC_MspInit+0x120>)
 80036c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036c8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80036ca:	4b16      	ldr	r3, [pc, #88]	; (8003724 <HAL_ADC_MspInit+0x120>)
 80036cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036d0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80036d2:	4b14      	ldr	r3, [pc, #80]	; (8003724 <HAL_ADC_MspInit+0x120>)
 80036d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80036da:	4b12      	ldr	r3, [pc, #72]	; (8003724 <HAL_ADC_MspInit+0x120>)
 80036dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036e0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80036e2:	4b10      	ldr	r3, [pc, #64]	; (8003724 <HAL_ADC_MspInit+0x120>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036e8:	4b0e      	ldr	r3, [pc, #56]	; (8003724 <HAL_ADC_MspInit+0x120>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80036ee:	480d      	ldr	r0, [pc, #52]	; (8003724 <HAL_ADC_MspInit+0x120>)
 80036f0:	f001 fc72 	bl	8004fd8 <HAL_DMA_Init>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80036fa:	f7ff ff55 	bl	80035a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a08      	ldr	r2, [pc, #32]	; (8003724 <HAL_ADC_MspInit+0x120>)
 8003702:	639a      	str	r2, [r3, #56]	; 0x38
 8003704:	4a07      	ldr	r2, [pc, #28]	; (8003724 <HAL_ADC_MspInit+0x120>)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800370a:	bf00      	nop
 800370c:	3728      	adds	r7, #40	; 0x28
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40012000 	.word	0x40012000
 8003718:	40023800 	.word	0x40023800
 800371c:	40020000 	.word	0x40020000
 8003720:	40020400 	.word	0x40020400
 8003724:	20002d7c 	.word	0x20002d7c
 8003728:	40026470 	.word	0x40026470

0800372c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08a      	sub	sp, #40	; 0x28
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003734:	f107 0314 	add.w	r3, r7, #20
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	605a      	str	r2, [r3, #4]
 800373e:	609a      	str	r2, [r3, #8]
 8003740:	60da      	str	r2, [r3, #12]
 8003742:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a22      	ldr	r2, [pc, #136]	; (80037d4 <HAL_I2C_MspInit+0xa8>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d13d      	bne.n	80037ca <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800374e:	2300      	movs	r3, #0
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	4b21      	ldr	r3, [pc, #132]	; (80037d8 <HAL_I2C_MspInit+0xac>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	4a20      	ldr	r2, [pc, #128]	; (80037d8 <HAL_I2C_MspInit+0xac>)
 8003758:	f043 0302 	orr.w	r3, r3, #2
 800375c:	6313      	str	r3, [r2, #48]	; 0x30
 800375e:	4b1e      	ldr	r3, [pc, #120]	; (80037d8 <HAL_I2C_MspInit+0xac>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB9     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800376a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800376e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003770:	2312      	movs	r3, #18
 8003772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003774:	2300      	movs	r3, #0
 8003776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003778:	2303      	movs	r3, #3
 800377a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800377c:	2309      	movs	r3, #9
 800377e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003780:	f107 0314 	add.w	r3, r7, #20
 8003784:	4619      	mov	r1, r3
 8003786:	4815      	ldr	r0, [pc, #84]	; (80037dc <HAL_I2C_MspInit+0xb0>)
 8003788:	f002 f806 	bl	8005798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800378c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003792:	2312      	movs	r3, #18
 8003794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003796:	2300      	movs	r3, #0
 8003798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800379a:	2303      	movs	r3, #3
 800379c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800379e:	2304      	movs	r3, #4
 80037a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037a2:	f107 0314 	add.w	r3, r7, #20
 80037a6:	4619      	mov	r1, r3
 80037a8:	480c      	ldr	r0, [pc, #48]	; (80037dc <HAL_I2C_MspInit+0xb0>)
 80037aa:	f001 fff5 	bl	8005798 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80037ae:	2300      	movs	r3, #0
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	4b09      	ldr	r3, [pc, #36]	; (80037d8 <HAL_I2C_MspInit+0xac>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	4a08      	ldr	r2, [pc, #32]	; (80037d8 <HAL_I2C_MspInit+0xac>)
 80037b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037bc:	6413      	str	r3, [r2, #64]	; 0x40
 80037be:	4b06      	ldr	r3, [pc, #24]	; (80037d8 <HAL_I2C_MspInit+0xac>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80037ca:	bf00      	nop
 80037cc:	3728      	adds	r7, #40	; 0x28
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	40005800 	.word	0x40005800
 80037d8:	40023800 	.word	0x40023800
 80037dc:	40020400 	.word	0x40020400

080037e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08c      	sub	sp, #48	; 0x30
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037e8:	f107 031c 	add.w	r3, r7, #28
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	605a      	str	r2, [r3, #4]
 80037f2:	609a      	str	r2, [r3, #8]
 80037f4:	60da      	str	r2, [r3, #12]
 80037f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a32      	ldr	r2, [pc, #200]	; (80038c8 <HAL_SPI_MspInit+0xe8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d12c      	bne.n	800385c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003802:	2300      	movs	r3, #0
 8003804:	61bb      	str	r3, [r7, #24]
 8003806:	4b31      	ldr	r3, [pc, #196]	; (80038cc <HAL_SPI_MspInit+0xec>)
 8003808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380a:	4a30      	ldr	r2, [pc, #192]	; (80038cc <HAL_SPI_MspInit+0xec>)
 800380c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003810:	6453      	str	r3, [r2, #68]	; 0x44
 8003812:	4b2e      	ldr	r3, [pc, #184]	; (80038cc <HAL_SPI_MspInit+0xec>)
 8003814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003816:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800381a:	61bb      	str	r3, [r7, #24]
 800381c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800381e:	2300      	movs	r3, #0
 8003820:	617b      	str	r3, [r7, #20]
 8003822:	4b2a      	ldr	r3, [pc, #168]	; (80038cc <HAL_SPI_MspInit+0xec>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	4a29      	ldr	r2, [pc, #164]	; (80038cc <HAL_SPI_MspInit+0xec>)
 8003828:	f043 0301 	orr.w	r3, r3, #1
 800382c:	6313      	str	r3, [r2, #48]	; 0x30
 800382e:	4b27      	ldr	r3, [pc, #156]	; (80038cc <HAL_SPI_MspInit+0xec>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	617b      	str	r3, [r7, #20]
 8003838:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 800383a:	23e0      	movs	r3, #224	; 0xe0
 800383c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800383e:	2302      	movs	r3, #2
 8003840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003842:	2300      	movs	r3, #0
 8003844:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003846:	2303      	movs	r3, #3
 8003848:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800384a:	2305      	movs	r3, #5
 800384c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800384e:	f107 031c 	add.w	r3, r7, #28
 8003852:	4619      	mov	r1, r3
 8003854:	481e      	ldr	r0, [pc, #120]	; (80038d0 <HAL_SPI_MspInit+0xf0>)
 8003856:	f001 ff9f 	bl	8005798 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800385a:	e031      	b.n	80038c0 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a1c      	ldr	r2, [pc, #112]	; (80038d4 <HAL_SPI_MspInit+0xf4>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d12c      	bne.n	80038c0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003866:	2300      	movs	r3, #0
 8003868:	613b      	str	r3, [r7, #16]
 800386a:	4b18      	ldr	r3, [pc, #96]	; (80038cc <HAL_SPI_MspInit+0xec>)
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	4a17      	ldr	r2, [pc, #92]	; (80038cc <HAL_SPI_MspInit+0xec>)
 8003870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003874:	6413      	str	r3, [r2, #64]	; 0x40
 8003876:	4b15      	ldr	r3, [pc, #84]	; (80038cc <HAL_SPI_MspInit+0xec>)
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003882:	2300      	movs	r3, #0
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	4b11      	ldr	r3, [pc, #68]	; (80038cc <HAL_SPI_MspInit+0xec>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	4a10      	ldr	r2, [pc, #64]	; (80038cc <HAL_SPI_MspInit+0xec>)
 800388c:	f043 0302 	orr.w	r3, r3, #2
 8003890:	6313      	str	r3, [r2, #48]	; 0x30
 8003892:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <HAL_SPI_MspInit+0xec>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 800389e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80038a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a4:	2302      	movs	r3, #2
 80038a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ac:	2303      	movs	r3, #3
 80038ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80038b0:	2305      	movs	r3, #5
 80038b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038b4:	f107 031c 	add.w	r3, r7, #28
 80038b8:	4619      	mov	r1, r3
 80038ba:	4807      	ldr	r0, [pc, #28]	; (80038d8 <HAL_SPI_MspInit+0xf8>)
 80038bc:	f001 ff6c 	bl	8005798 <HAL_GPIO_Init>
}
 80038c0:	bf00      	nop
 80038c2:	3730      	adds	r7, #48	; 0x30
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40013000 	.word	0x40013000
 80038cc:	40023800 	.word	0x40023800
 80038d0:	40020000 	.word	0x40020000
 80038d4:	40003800 	.word	0x40003800
 80038d8:	40020400 	.word	0x40020400

080038dc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08c      	sub	sp, #48	; 0x30
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e4:	f107 031c 	add.w	r3, r7, #28
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	605a      	str	r2, [r3, #4]
 80038ee:	609a      	str	r2, [r3, #8]
 80038f0:	60da      	str	r2, [r3, #12]
 80038f2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fc:	d12d      	bne.n	800395a <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80038fe:	2300      	movs	r3, #0
 8003900:	61bb      	str	r3, [r7, #24]
 8003902:	4b30      	ldr	r3, [pc, #192]	; (80039c4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	4a2f      	ldr	r2, [pc, #188]	; (80039c4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003908:	f043 0301 	orr.w	r3, r3, #1
 800390c:	6413      	str	r3, [r2, #64]	; 0x40
 800390e:	4b2d      	ldr	r3, [pc, #180]	; (80039c4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	61bb      	str	r3, [r7, #24]
 8003918:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	617b      	str	r3, [r7, #20]
 800391e:	4b29      	ldr	r3, [pc, #164]	; (80039c4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	4a28      	ldr	r2, [pc, #160]	; (80039c4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003924:	f043 0301 	orr.w	r3, r3, #1
 8003928:	6313      	str	r3, [r2, #48]	; 0x30
 800392a:	4b26      	ldr	r3, [pc, #152]	; (80039c4 <HAL_TIM_Encoder_MspInit+0xe8>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	617b      	str	r3, [r7, #20]
 8003934:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 8003936:	f248 0302 	movw	r3, #32770	; 0x8002
 800393a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800393c:	2302      	movs	r3, #2
 800393e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003940:	2301      	movs	r3, #1
 8003942:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003944:	2300      	movs	r3, #0
 8003946:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003948:	2301      	movs	r3, #1
 800394a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800394c:	f107 031c 	add.w	r3, r7, #28
 8003950:	4619      	mov	r1, r3
 8003952:	481d      	ldr	r0, [pc, #116]	; (80039c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003954:	f001 ff20 	bl	8005798 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003958:	e030      	b.n	80039bc <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a1b      	ldr	r2, [pc, #108]	; (80039cc <HAL_TIM_Encoder_MspInit+0xf0>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d12b      	bne.n	80039bc <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003964:	2300      	movs	r3, #0
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	4b16      	ldr	r3, [pc, #88]	; (80039c4 <HAL_TIM_Encoder_MspInit+0xe8>)
 800396a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396c:	4a15      	ldr	r2, [pc, #84]	; (80039c4 <HAL_TIM_Encoder_MspInit+0xe8>)
 800396e:	f043 0304 	orr.w	r3, r3, #4
 8003972:	6413      	str	r3, [r2, #64]	; 0x40
 8003974:	4b13      	ldr	r3, [pc, #76]	; (80039c4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003980:	2300      	movs	r3, #0
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	4b0f      	ldr	r3, [pc, #60]	; (80039c4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003988:	4a0e      	ldr	r2, [pc, #56]	; (80039c4 <HAL_TIM_Encoder_MspInit+0xe8>)
 800398a:	f043 0302 	orr.w	r3, r3, #2
 800398e:	6313      	str	r3, [r2, #48]	; 0x30
 8003990:	4b0c      	ldr	r3, [pc, #48]	; (80039c4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800399c:	23c0      	movs	r3, #192	; 0xc0
 800399e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a0:	2302      	movs	r3, #2
 80039a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039a4:	2301      	movs	r3, #1
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039a8:	2300      	movs	r3, #0
 80039aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80039ac:	2302      	movs	r3, #2
 80039ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039b0:	f107 031c 	add.w	r3, r7, #28
 80039b4:	4619      	mov	r1, r3
 80039b6:	4806      	ldr	r0, [pc, #24]	; (80039d0 <HAL_TIM_Encoder_MspInit+0xf4>)
 80039b8:	f001 feee 	bl	8005798 <HAL_GPIO_Init>
}
 80039bc:	bf00      	nop
 80039be:	3730      	adds	r7, #48	; 0x30
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40023800 	.word	0x40023800
 80039c8:	40020000 	.word	0x40020000
 80039cc:	40000800 	.word	0x40000800
 80039d0:	40020400 	.word	0x40020400

080039d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a0e      	ldr	r2, [pc, #56]	; (8003a1c <HAL_TIM_Base_MspInit+0x48>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d115      	bne.n	8003a12 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80039e6:	2300      	movs	r3, #0
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	4b0d      	ldr	r3, [pc, #52]	; (8003a20 <HAL_TIM_Base_MspInit+0x4c>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	4a0c      	ldr	r2, [pc, #48]	; (8003a20 <HAL_TIM_Base_MspInit+0x4c>)
 80039f0:	f043 0302 	orr.w	r3, r3, #2
 80039f4:	6413      	str	r3, [r2, #64]	; 0x40
 80039f6:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <HAL_TIM_Base_MspInit+0x4c>)
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003a02:	2200      	movs	r2, #0
 8003a04:	2100      	movs	r1, #0
 8003a06:	201d      	movs	r0, #29
 8003a08:	f001 faaf 	bl	8004f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003a0c:	201d      	movs	r0, #29
 8003a0e:	f001 fac8 	bl	8004fa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003a12:	bf00      	nop
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40000400 	.word	0x40000400
 8003a20:	40023800 	.word	0x40023800

08003a24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a2c:	f107 030c 	add.w	r3, r7, #12
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	605a      	str	r2, [r3, #4]
 8003a36:	609a      	str	r2, [r3, #8]
 8003a38:	60da      	str	r2, [r3, #12]
 8003a3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a12      	ldr	r2, [pc, #72]	; (8003a8c <HAL_TIM_MspPostInit+0x68>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d11d      	bne.n	8003a82 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a46:	2300      	movs	r3, #0
 8003a48:	60bb      	str	r3, [r7, #8]
 8003a4a:	4b11      	ldr	r3, [pc, #68]	; (8003a90 <HAL_TIM_MspPostInit+0x6c>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	4a10      	ldr	r2, [pc, #64]	; (8003a90 <HAL_TIM_MspPostInit+0x6c>)
 8003a50:	f043 0302 	orr.w	r3, r3, #2
 8003a54:	6313      	str	r3, [r2, #48]	; 0x30
 8003a56:	4b0e      	ldr	r3, [pc, #56]	; (8003a90 <HAL_TIM_MspPostInit+0x6c>)
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	60bb      	str	r3, [r7, #8]
 8003a60:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003a62:	2301      	movs	r3, #1
 8003a64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a66:	2302      	movs	r3, #2
 8003a68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003a72:	2302      	movs	r3, #2
 8003a74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a76:	f107 030c 	add.w	r3, r7, #12
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4805      	ldr	r0, [pc, #20]	; (8003a94 <HAL_TIM_MspPostInit+0x70>)
 8003a7e:	f001 fe8b 	bl	8005798 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003a82:	bf00      	nop
 8003a84:	3720      	adds	r7, #32
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40000400 	.word	0x40000400
 8003a90:	40023800 	.word	0x40023800
 8003a94:	40020400 	.word	0x40020400

08003a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a9c:	e7fe      	b.n	8003a9c <NMI_Handler+0x4>

08003a9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003aa2:	e7fe      	b.n	8003aa2 <HardFault_Handler+0x4>

08003aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003aa8:	e7fe      	b.n	8003aa8 <MemManage_Handler+0x4>

08003aaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003aae:	e7fe      	b.n	8003aae <BusFault_Handler+0x4>

08003ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ab4:	e7fe      	b.n	8003ab4 <UsageFault_Handler+0x4>

08003ab6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003aba:	bf00      	nop
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ac8:	bf00      	nop
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ad6:	bf00      	nop
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ae4:	f000 f8a8 	bl	8003c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ae8:	bf00      	nop
 8003aea:	bd80      	pop	{r7, pc}

08003aec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003af0:	4802      	ldr	r0, [pc, #8]	; (8003afc <TIM3_IRQHandler+0x10>)
 8003af2:	f004 fc57 	bl	80083a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003af6:	bf00      	nop
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20002f28 	.word	0x20002f28

08003b00 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b04:	4802      	ldr	r0, [pc, #8]	; (8003b10 <DMA2_Stream4_IRQHandler+0x10>)
 8003b06:	f001 fbdd 	bl	80052c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003b0a:	bf00      	nop
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	20002d7c 	.word	0x20002d7c

08003b14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b18:	4b08      	ldr	r3, [pc, #32]	; (8003b3c <SystemInit+0x28>)
 8003b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1e:	4a07      	ldr	r2, [pc, #28]	; (8003b3c <SystemInit+0x28>)
 8003b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b28:	4b04      	ldr	r3, [pc, #16]	; (8003b3c <SystemInit+0x28>)
 8003b2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b2e:	609a      	str	r2, [r3, #8]
#endif
}
 8003b30:	bf00      	nop
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	e000ed00 	.word	0xe000ed00

08003b40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003b44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003b46:	e003      	b.n	8003b50 <LoopCopyDataInit>

08003b48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003b48:	4b0c      	ldr	r3, [pc, #48]	; (8003b7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003b4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003b4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003b4e:	3104      	adds	r1, #4

08003b50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003b50:	480b      	ldr	r0, [pc, #44]	; (8003b80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003b52:	4b0c      	ldr	r3, [pc, #48]	; (8003b84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003b54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003b56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003b58:	d3f6      	bcc.n	8003b48 <CopyDataInit>
  ldr  r2, =_sbss
 8003b5a:	4a0b      	ldr	r2, [pc, #44]	; (8003b88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003b5c:	e002      	b.n	8003b64 <LoopFillZerobss>

08003b5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003b5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003b60:	f842 3b04 	str.w	r3, [r2], #4

08003b64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003b64:	4b09      	ldr	r3, [pc, #36]	; (8003b8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003b66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003b68:	d3f9      	bcc.n	8003b5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003b6a:	f7ff ffd3 	bl	8003b14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b6e:	f005 fa65 	bl	800903c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b72:	f7fe fdad 	bl	80026d0 <main>
  bx  lr    
 8003b76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b78:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003b7c:	0800a614 	.word	0x0800a614
  ldr  r0, =_sdata
 8003b80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003b84:	200006f8 	.word	0x200006f8
  ldr  r2, =_sbss
 8003b88:	200006f8 	.word	0x200006f8
  ldr  r3, = _ebss
 8003b8c:	20002fbc 	.word	0x20002fbc

08003b90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b90:	e7fe      	b.n	8003b90 <ADC_IRQHandler>
	...

08003b94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b98:	4b0e      	ldr	r3, [pc, #56]	; (8003bd4 <HAL_Init+0x40>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a0d      	ldr	r2, [pc, #52]	; (8003bd4 <HAL_Init+0x40>)
 8003b9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ba2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ba4:	4b0b      	ldr	r3, [pc, #44]	; (8003bd4 <HAL_Init+0x40>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a0a      	ldr	r2, [pc, #40]	; (8003bd4 <HAL_Init+0x40>)
 8003baa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bb0:	4b08      	ldr	r3, [pc, #32]	; (8003bd4 <HAL_Init+0x40>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a07      	ldr	r2, [pc, #28]	; (8003bd4 <HAL_Init+0x40>)
 8003bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bbc:	2003      	movs	r0, #3
 8003bbe:	f001 f9c9 	bl	8004f54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	f000 f808 	bl	8003bd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bc8:	f7ff fcf4 	bl	80035b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40023c00 	.word	0x40023c00

08003bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003be0:	4b12      	ldr	r3, [pc, #72]	; (8003c2c <HAL_InitTick+0x54>)
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	4b12      	ldr	r3, [pc, #72]	; (8003c30 <HAL_InitTick+0x58>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	4619      	mov	r1, r3
 8003bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f001 f9e1 	bl	8004fbe <HAL_SYSTICK_Config>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e00e      	b.n	8003c24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b0f      	cmp	r3, #15
 8003c0a:	d80a      	bhi.n	8003c22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	f04f 30ff 	mov.w	r0, #4294967295
 8003c14:	f001 f9a9 	bl	8004f6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c18:	4a06      	ldr	r2, [pc, #24]	; (8003c34 <HAL_InitTick+0x5c>)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	e000      	b.n	8003c24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	200006ec 	.word	0x200006ec
 8003c30:	200006f4 	.word	0x200006f4
 8003c34:	200006f0 	.word	0x200006f0

08003c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c3c:	4b06      	ldr	r3, [pc, #24]	; (8003c58 <HAL_IncTick+0x20>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	461a      	mov	r2, r3
 8003c42:	4b06      	ldr	r3, [pc, #24]	; (8003c5c <HAL_IncTick+0x24>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4413      	add	r3, r2
 8003c48:	4a04      	ldr	r2, [pc, #16]	; (8003c5c <HAL_IncTick+0x24>)
 8003c4a:	6013      	str	r3, [r2, #0]
}
 8003c4c:	bf00      	nop
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	200006f4 	.word	0x200006f4
 8003c5c:	20002fb8 	.word	0x20002fb8

08003c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  return uwTick;
 8003c64:	4b03      	ldr	r3, [pc, #12]	; (8003c74 <HAL_GetTick+0x14>)
 8003c66:	681b      	ldr	r3, [r3, #0]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	20002fb8 	.word	0x20002fb8

08003c78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c80:	f7ff ffee 	bl	8003c60 <HAL_GetTick>
 8003c84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c90:	d005      	beq.n	8003c9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c92:	4b0a      	ldr	r3, [pc, #40]	; (8003cbc <HAL_Delay+0x44>)
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	461a      	mov	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c9e:	bf00      	nop
 8003ca0:	f7ff ffde 	bl	8003c60 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d8f7      	bhi.n	8003ca0 <HAL_Delay+0x28>
  {
  }
}
 8003cb0:	bf00      	nop
 8003cb2:	bf00      	nop
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	200006f4 	.word	0x200006f4

08003cc0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e033      	b.n	8003d3e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d109      	bne.n	8003cf2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7ff fc90 	bl	8003604 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	f003 0310 	and.w	r3, r3, #16
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d118      	bne.n	8003d30 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d06:	f023 0302 	bic.w	r3, r3, #2
 8003d0a:	f043 0202 	orr.w	r2, r3, #2
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 fbe8 	bl	80044e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	f023 0303 	bic.w	r3, r3, #3
 8003d26:	f043 0201 	orr.w	r2, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	641a      	str	r2, [r3, #64]	; 0x40
 8003d2e:	e001      	b.n	8003d34 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
	...

08003d48 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d101      	bne.n	8003d62 <HAL_ADC_Start+0x1a>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	e097      	b.n	8003e92 <HAL_ADC_Start+0x14a>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d018      	beq.n	8003daa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689a      	ldr	r2, [r3, #8]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f042 0201 	orr.w	r2, r2, #1
 8003d86:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003d88:	4b45      	ldr	r3, [pc, #276]	; (8003ea0 <HAL_ADC_Start+0x158>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a45      	ldr	r2, [pc, #276]	; (8003ea4 <HAL_ADC_Start+0x15c>)
 8003d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d92:	0c9a      	lsrs	r2, r3, #18
 8003d94:	4613      	mov	r3, r2
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	4413      	add	r3, r2
 8003d9a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003d9c:	e002      	b.n	8003da4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	3b01      	subs	r3, #1
 8003da2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f9      	bne.n	8003d9e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d15f      	bne.n	8003e78 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003dc0:	f023 0301 	bic.w	r3, r3, #1
 8003dc4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d007      	beq.n	8003dea <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003de2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df6:	d106      	bne.n	8003e06 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfc:	f023 0206 	bic.w	r2, r3, #6
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	645a      	str	r2, [r3, #68]	; 0x44
 8003e04:	e002      	b.n	8003e0c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e14:	4b24      	ldr	r3, [pc, #144]	; (8003ea8 <HAL_ADC_Start+0x160>)
 8003e16:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003e20:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f003 031f 	and.w	r3, r3, #31
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10f      	bne.n	8003e4e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d129      	bne.n	8003e90 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e4a:	609a      	str	r2, [r3, #8]
 8003e4c:	e020      	b.n	8003e90 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a16      	ldr	r2, [pc, #88]	; (8003eac <HAL_ADC_Start+0x164>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d11b      	bne.n	8003e90 <HAL_ADC_Start+0x148>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d114      	bne.n	8003e90 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689a      	ldr	r2, [r3, #8]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e74:	609a      	str	r2, [r3, #8]
 8003e76:	e00b      	b.n	8003e90 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7c:	f043 0210 	orr.w	r2, r3, #16
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e88:	f043 0201 	orr.w	r2, r3, #1
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	200006ec 	.word	0x200006ec
 8003ea4:	431bde83 	.word	0x431bde83
 8003ea8:	40012300 	.word	0x40012300
 8003eac:	40012000 	.word	0x40012000

08003eb0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ecc:	d113      	bne.n	8003ef6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003ed8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003edc:	d10b      	bne.n	8003ef6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	f043 0220 	orr.w	r2, r3, #32
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e063      	b.n	8003fbe <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003ef6:	f7ff feb3 	bl	8003c60 <HAL_GetTick>
 8003efa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003efc:	e021      	b.n	8003f42 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f04:	d01d      	beq.n	8003f42 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d007      	beq.n	8003f1c <HAL_ADC_PollForConversion+0x6c>
 8003f0c:	f7ff fea8 	bl	8003c60 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d212      	bcs.n	8003f42 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d00b      	beq.n	8003f42 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	f043 0204 	orr.w	r2, r3, #4
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e03d      	b.n	8003fbe <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d1d6      	bne.n	8003efe <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f06f 0212 	mvn.w	r2, #18
 8003f58:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d123      	bne.n	8003fbc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d11f      	bne.n	8003fbc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f82:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d006      	beq.n	8003f98 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d111      	bne.n	8003fbc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d105      	bne.n	8003fbc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	f043 0201 	orr.w	r2, r3, #1
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <HAL_ADC_Start_DMA+0x1e>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e0ce      	b.n	8004184 <HAL_ADC_Start_DMA+0x1bc>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d018      	beq.n	800402e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800400c:	4b5f      	ldr	r3, [pc, #380]	; (800418c <HAL_ADC_Start_DMA+0x1c4>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a5f      	ldr	r2, [pc, #380]	; (8004190 <HAL_ADC_Start_DMA+0x1c8>)
 8004012:	fba2 2303 	umull	r2, r3, r2, r3
 8004016:	0c9a      	lsrs	r2, r3, #18
 8004018:	4613      	mov	r3, r2
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	4413      	add	r3, r2
 800401e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004020:	e002      	b.n	8004028 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	3b01      	subs	r3, #1
 8004026:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f9      	bne.n	8004022 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004038:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800403c:	d107      	bne.n	800404e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800404c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b01      	cmp	r3, #1
 800405a:	f040 8086 	bne.w	800416a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004066:	f023 0301 	bic.w	r3, r3, #1
 800406a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800407c:	2b00      	cmp	r3, #0
 800407e:	d007      	beq.n	8004090 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004088:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800409c:	d106      	bne.n	80040ac <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a2:	f023 0206 	bic.w	r2, r3, #6
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	645a      	str	r2, [r3, #68]	; 0x44
 80040aa:	e002      	b.n	80040b2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040ba:	4b36      	ldr	r3, [pc, #216]	; (8004194 <HAL_ADC_Start_DMA+0x1cc>)
 80040bc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c2:	4a35      	ldr	r2, [pc, #212]	; (8004198 <HAL_ADC_Start_DMA+0x1d0>)
 80040c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ca:	4a34      	ldr	r2, [pc, #208]	; (800419c <HAL_ADC_Start_DMA+0x1d4>)
 80040cc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d2:	4a33      	ldr	r2, [pc, #204]	; (80041a0 <HAL_ADC_Start_DMA+0x1d8>)
 80040d4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80040de:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80040ee:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689a      	ldr	r2, [r3, #8]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040fe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	334c      	adds	r3, #76	; 0x4c
 800410a:	4619      	mov	r1, r3
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f001 f810 	bl	8005134 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f003 031f 	and.w	r3, r3, #31
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10f      	bne.n	8004140 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d129      	bne.n	8004182 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800413c:	609a      	str	r2, [r3, #8]
 800413e:	e020      	b.n	8004182 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a17      	ldr	r2, [pc, #92]	; (80041a4 <HAL_ADC_Start_DMA+0x1dc>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d11b      	bne.n	8004182 <HAL_ADC_Start_DMA+0x1ba>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d114      	bne.n	8004182 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689a      	ldr	r2, [r3, #8]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004166:	609a      	str	r2, [r3, #8]
 8004168:	e00b      	b.n	8004182 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	f043 0210 	orr.w	r2, r3, #16
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417a:	f043 0201 	orr.w	r2, r3, #1
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	200006ec 	.word	0x200006ec
 8004190:	431bde83 	.word	0x431bde83
 8004194:	40012300 	.word	0x40012300
 8004198:	080046e1 	.word	0x080046e1
 800419c:	0800479b 	.word	0x0800479b
 80041a0:	080047b7 	.word	0x080047b7
 80041a4:	40012000 	.word	0x40012000

080041a8 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041b0:	2300      	movs	r3, #0
 80041b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d101      	bne.n	80041c2 <HAL_ADC_Stop_DMA+0x1a>
 80041be:	2302      	movs	r3, #2
 80041c0:	e048      	b.n	8004254 <HAL_ADC_Stop_DMA+0xac>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0201 	bic.w	r2, r2, #1
 80041d8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d130      	bne.n	800424a <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041f6:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d10f      	bne.n	8004226 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420a:	4618      	mov	r0, r3
 800420c:	f000 ffea 	bl	80051e4 <HAL_DMA_Abort>
 8004210:	4603      	mov	r3, r0
 8004212:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004214:	7bfb      	ldrb	r3, [r7, #15]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d005      	beq.n	8004226 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004234:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800423e:	f023 0301 	bic.w	r3, r3, #1
 8004242:	f043 0201 	orr.w	r2, r3, #1
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004252:	7bfb      	ldrb	r3, [r7, #15]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800428e:	2300      	movs	r3, #0
 8004290:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_ADC_ConfigChannel+0x1c>
 800429c:	2302      	movs	r3, #2
 800429e:	e113      	b.n	80044c8 <HAL_ADC_ConfigChannel+0x244>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b09      	cmp	r3, #9
 80042ae:	d925      	bls.n	80042fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68d9      	ldr	r1, [r3, #12]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	461a      	mov	r2, r3
 80042be:	4613      	mov	r3, r2
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	4413      	add	r3, r2
 80042c4:	3b1e      	subs	r3, #30
 80042c6:	2207      	movs	r2, #7
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	43da      	mvns	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	400a      	ands	r2, r1
 80042d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68d9      	ldr	r1, [r3, #12]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	4618      	mov	r0, r3
 80042e8:	4603      	mov	r3, r0
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	4403      	add	r3, r0
 80042ee:	3b1e      	subs	r3, #30
 80042f0:	409a      	lsls	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	60da      	str	r2, [r3, #12]
 80042fa:	e022      	b.n	8004342 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6919      	ldr	r1, [r3, #16]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	b29b      	uxth	r3, r3
 8004308:	461a      	mov	r2, r3
 800430a:	4613      	mov	r3, r2
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	4413      	add	r3, r2
 8004310:	2207      	movs	r2, #7
 8004312:	fa02 f303 	lsl.w	r3, r2, r3
 8004316:	43da      	mvns	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	400a      	ands	r2, r1
 800431e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6919      	ldr	r1, [r3, #16]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	689a      	ldr	r2, [r3, #8]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	b29b      	uxth	r3, r3
 8004330:	4618      	mov	r0, r3
 8004332:	4603      	mov	r3, r0
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	4403      	add	r3, r0
 8004338:	409a      	lsls	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	2b06      	cmp	r3, #6
 8004348:	d824      	bhi.n	8004394 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	4613      	mov	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	3b05      	subs	r3, #5
 800435c:	221f      	movs	r2, #31
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	43da      	mvns	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	400a      	ands	r2, r1
 800436a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	b29b      	uxth	r3, r3
 8004378:	4618      	mov	r0, r3
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685a      	ldr	r2, [r3, #4]
 800437e:	4613      	mov	r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	4413      	add	r3, r2
 8004384:	3b05      	subs	r3, #5
 8004386:	fa00 f203 	lsl.w	r2, r0, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	635a      	str	r2, [r3, #52]	; 0x34
 8004392:	e04c      	b.n	800442e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	2b0c      	cmp	r3, #12
 800439a:	d824      	bhi.n	80043e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	4613      	mov	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	3b23      	subs	r3, #35	; 0x23
 80043ae:	221f      	movs	r2, #31
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	43da      	mvns	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	400a      	ands	r2, r1
 80043bc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	4618      	mov	r0, r3
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	4613      	mov	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	3b23      	subs	r3, #35	; 0x23
 80043d8:	fa00 f203 	lsl.w	r2, r0, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	631a      	str	r2, [r3, #48]	; 0x30
 80043e4:	e023      	b.n	800442e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	4613      	mov	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	3b41      	subs	r3, #65	; 0x41
 80043f8:	221f      	movs	r2, #31
 80043fa:	fa02 f303 	lsl.w	r3, r2, r3
 80043fe:	43da      	mvns	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	400a      	ands	r2, r1
 8004406:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	b29b      	uxth	r3, r3
 8004414:	4618      	mov	r0, r3
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	4613      	mov	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	3b41      	subs	r3, #65	; 0x41
 8004422:	fa00 f203 	lsl.w	r2, r0, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800442e:	4b29      	ldr	r3, [pc, #164]	; (80044d4 <HAL_ADC_ConfigChannel+0x250>)
 8004430:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a28      	ldr	r2, [pc, #160]	; (80044d8 <HAL_ADC_ConfigChannel+0x254>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d10f      	bne.n	800445c <HAL_ADC_ConfigChannel+0x1d8>
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b12      	cmp	r3, #18
 8004442:	d10b      	bne.n	800445c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a1d      	ldr	r2, [pc, #116]	; (80044d8 <HAL_ADC_ConfigChannel+0x254>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d12b      	bne.n	80044be <HAL_ADC_ConfigChannel+0x23a>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a1c      	ldr	r2, [pc, #112]	; (80044dc <HAL_ADC_ConfigChannel+0x258>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d003      	beq.n	8004478 <HAL_ADC_ConfigChannel+0x1f4>
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b11      	cmp	r3, #17
 8004476:	d122      	bne.n	80044be <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a11      	ldr	r2, [pc, #68]	; (80044dc <HAL_ADC_ConfigChannel+0x258>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d111      	bne.n	80044be <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800449a:	4b11      	ldr	r3, [pc, #68]	; (80044e0 <HAL_ADC_ConfigChannel+0x25c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a11      	ldr	r2, [pc, #68]	; (80044e4 <HAL_ADC_ConfigChannel+0x260>)
 80044a0:	fba2 2303 	umull	r2, r3, r2, r3
 80044a4:	0c9a      	lsrs	r2, r3, #18
 80044a6:	4613      	mov	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80044b0:	e002      	b.n	80044b8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	3b01      	subs	r3, #1
 80044b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1f9      	bne.n	80044b2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	40012300 	.word	0x40012300
 80044d8:	40012000 	.word	0x40012000
 80044dc:	10000012 	.word	0x10000012
 80044e0:	200006ec 	.word	0x200006ec
 80044e4:	431bde83 	.word	0x431bde83

080044e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044f0:	4b79      	ldr	r3, [pc, #484]	; (80046d8 <ADC_Init+0x1f0>)
 80044f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	685a      	ldr	r2, [r3, #4]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	431a      	orrs	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800451c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6859      	ldr	r1, [r3, #4]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	021a      	lsls	r2, r3, #8
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004540:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6859      	ldr	r1, [r3, #4]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689a      	ldr	r2, [r3, #8]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004562:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6899      	ldr	r1, [r3, #8]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68da      	ldr	r2, [r3, #12]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457a:	4a58      	ldr	r2, [pc, #352]	; (80046dc <ADC_Init+0x1f4>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d022      	beq.n	80045c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800458e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6899      	ldr	r1, [r3, #8]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80045b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6899      	ldr	r1, [r3, #8]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	609a      	str	r2, [r3, #8]
 80045c4:	e00f      	b.n	80045e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80045e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 0202 	bic.w	r2, r2, #2
 80045f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6899      	ldr	r1, [r3, #8]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	7e1b      	ldrb	r3, [r3, #24]
 8004600:	005a      	lsls	r2, r3, #1
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d01b      	beq.n	800464c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004622:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004632:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6859      	ldr	r1, [r3, #4]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	3b01      	subs	r3, #1
 8004640:	035a      	lsls	r2, r3, #13
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	605a      	str	r2, [r3, #4]
 800464a:	e007      	b.n	800465c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800465a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800466a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	3b01      	subs	r3, #1
 8004678:	051a      	lsls	r2, r3, #20
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004690:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6899      	ldr	r1, [r3, #8]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800469e:	025a      	lsls	r2, r3, #9
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689a      	ldr	r2, [r3, #8]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6899      	ldr	r1, [r3, #8]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	029a      	lsls	r2, r3, #10
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	609a      	str	r2, [r3, #8]
}
 80046cc:	bf00      	nop
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	40012300 	.word	0x40012300
 80046dc:	0f000001 	.word	0x0f000001

080046e0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d13c      	bne.n	8004774 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d12b      	bne.n	800476c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004718:	2b00      	cmp	r3, #0
 800471a:	d127      	bne.n	800476c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004722:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004726:	2b00      	cmp	r3, #0
 8004728:	d006      	beq.n	8004738 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004734:	2b00      	cmp	r3, #0
 8004736:	d119      	bne.n	800476c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0220 	bic.w	r2, r2, #32
 8004746:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004758:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d105      	bne.n	800476c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004764:	f043 0201 	orr.w	r2, r3, #1
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f7fe ff0b 	bl	8003588 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004772:	e00e      	b.n	8004792 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004778:	f003 0310 	and.w	r3, r3, #16
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f7ff fd75 	bl	8004270 <HAL_ADC_ErrorCallback>
}
 8004786:	e004      	b.n	8004792 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	4798      	blx	r3
}
 8004792:	bf00      	nop
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b084      	sub	sp, #16
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f7ff fd57 	bl	800425c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80047ae:	bf00      	nop
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b084      	sub	sp, #16
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2240      	movs	r2, #64	; 0x40
 80047c8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ce:	f043 0204 	orr.w	r2, r3, #4
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f7ff fd4a 	bl	8004270 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80047dc:	bf00      	nop
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80047f0:	2300      	movs	r3, #0
 80047f2:	617b      	str	r3, [r7, #20]
 80047f4:	2300      	movs	r3, #0
 80047f6:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d101      	bne.n	8004806 <HAL_ADCEx_InjectedStart+0x22>
 8004802:	2302      	movs	r3, #2
 8004804:	e0aa      	b.n	800495c <HAL_ADCEx_InjectedStart+0x178>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b01      	cmp	r3, #1
 800481a:	d018      	beq.n	800484e <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0201 	orr.w	r2, r2, #1
 800482a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800482c:	4b4e      	ldr	r3, [pc, #312]	; (8004968 <HAL_ADCEx_InjectedStart+0x184>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a4e      	ldr	r2, [pc, #312]	; (800496c <HAL_ADCEx_InjectedStart+0x188>)
 8004832:	fba2 2303 	umull	r2, r3, r2, r3
 8004836:	0c9a      	lsrs	r2, r3, #18
 8004838:	4613      	mov	r3, r2
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	4413      	add	r3, r2
 800483e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004840:	e002      	b.n	8004848 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	3b01      	subs	r3, #1
 8004846:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1f9      	bne.n	8004842 <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b01      	cmp	r3, #1
 800485a:	d172      	bne.n	8004942 <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004864:	f023 0301 	bic.w	r3, r3, #1
 8004868:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004878:	2b00      	cmp	r3, #0
 800487a:	d102      	bne.n	8004882 <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f06f 0204 	mvn.w	r2, #4
 8004892:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004894:	4b36      	ldr	r3, [pc, #216]	; (8004970 <HAL_ADCEx_InjectedStart+0x18c>)
 8004896:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f003 031f 	and.w	r3, r3, #31
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d124      	bne.n	80048ee <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	bf0c      	ite	eq
 80048b2:	2301      	moveq	r3, #1
 80048b4:	2300      	movne	r3, #0
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	bf0c      	ite	eq
 80048c8:	2301      	moveq	r3, #1
 80048ca:	2300      	movne	r3, #0
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d041      	beq.n	800495a <HAL_ADCEx_InjectedStart+0x176>
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d03e      	beq.n	800495a <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689a      	ldr	r2, [r3, #8]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80048ea:	609a      	str	r2, [r3, #8]
 80048ec:	e035      	b.n	800495a <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	bf0c      	ite	eq
 80048fc:	2301      	moveq	r3, #1
 80048fe:	2300      	movne	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800490e:	2b00      	cmp	r3, #0
 8004910:	bf0c      	ite	eq
 8004912:	2301      	moveq	r3, #1
 8004914:	2300      	movne	r3, #0
 8004916:	b2db      	uxtb	r3, r3
 8004918:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a15      	ldr	r2, [pc, #84]	; (8004974 <HAL_ADCEx_InjectedStart+0x190>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d11a      	bne.n	800495a <HAL_ADCEx_InjectedStart+0x176>
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d017      	beq.n	800495a <HAL_ADCEx_InjectedStart+0x176>
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d014      	beq.n	800495a <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689a      	ldr	r2, [r3, #8]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800493e:	609a      	str	r2, [r3, #8]
 8004940:	e00b      	b.n	800495a <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	f043 0210 	orr.w	r2, r3, #16
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004952:	f043 0201 	orr.w	r2, r3, #1
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	371c      	adds	r7, #28
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	200006ec 	.word	0x200006ec
 800496c:	431bde83 	.word	0x431bde83
 8004970:	40012300 	.word	0x40012300
 8004974:	40012000 	.word	0x40012000

08004978 <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004980:	2300      	movs	r3, #0
 8004982:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800498a:	2b01      	cmp	r3, #1
 800498c:	d101      	bne.n	8004992 <HAL_ADCEx_InjectedStop+0x1a>
 800498e:	2302      	movs	r3, #2
 8004990:	e037      	b.n	8004a02 <HAL_ADCEx_InjectedStop+0x8a>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d120      	bne.n	80049e8 <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d119      	bne.n	80049e8 <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689a      	ldr	r2, [r3, #8]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0201 	bic.w	r2, r2, #1
 80049c2:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d112      	bne.n	80049f8 <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80049da:	f023 0301 	bic.w	r3, r3, #1
 80049de:	f043 0201 	orr.w	r2, r3, #1
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80049e6:	e007      	b.n	80049f8 <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ec:	f043 0220 	orr.w	r2, r3, #32
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
	...

08004a10 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f06f 0204 	mvn.w	r2, #4
 8004a26:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	2b03      	cmp	r3, #3
 8004a2e:	d81f      	bhi.n	8004a70 <HAL_ADCEx_InjectedGetValue+0x60>
 8004a30:	a201      	add	r2, pc, #4	; (adr r2, 8004a38 <HAL_ADCEx_InjectedGetValue+0x28>)
 8004a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a36:	bf00      	nop
 8004a38:	08004a67 	.word	0x08004a67
 8004a3c:	08004a5d 	.word	0x08004a5d
 8004a40:	08004a53 	.word	0x08004a53
 8004a44:	08004a49 	.word	0x08004a49
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a4e:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8004a50:	e00f      	b.n	8004a72 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a58:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8004a5a:	e00a      	b.n	8004a72 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	60fb      	str	r3, [r7, #12]
    }
    break;
 8004a64:	e005      	b.n	8004a72 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6c:	60fb      	str	r3, [r7, #12]
    }
    break;
 8004a6e:	e000      	b.n	8004a72 <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8004a70:	bf00      	nop
  }
  return tmp;
 8004a72:	68fb      	ldr	r3, [r7, #12]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3714      	adds	r7, #20
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d101      	bne.n	8004a98 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8004a94:	2302      	movs	r3, #2
 8004a96:	e17e      	b.n	8004d96 <HAL_ADCEx_InjectedConfigChannel+0x316>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b09      	cmp	r3, #9
 8004aa6:	d925      	bls.n	8004af4 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68d9      	ldr	r1, [r3, #12]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	4413      	add	r3, r2
 8004abc:	3b1e      	subs	r3, #30
 8004abe:	2207      	movs	r2, #7
 8004ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac4:	43da      	mvns	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	400a      	ands	r2, r1
 8004acc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68d9      	ldr	r1, [r3, #12]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	689a      	ldr	r2, [r3, #8]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	4618      	mov	r0, r3
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	4403      	add	r3, r0
 8004ae6:	3b1e      	subs	r3, #30
 8004ae8:	409a      	lsls	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	60da      	str	r2, [r3, #12]
 8004af2:	e022      	b.n	8004b3a <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6919      	ldr	r1, [r3, #16]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	461a      	mov	r2, r3
 8004b02:	4613      	mov	r3, r2
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	4413      	add	r3, r2
 8004b08:	2207      	movs	r2, #7
 8004b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0e:	43da      	mvns	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	400a      	ands	r2, r1
 8004b16:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6919      	ldr	r1, [r3, #16]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	689a      	ldr	r2, [r3, #8]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	4618      	mov	r0, r3
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	4403      	add	r3, r0
 8004b30:	409a      	lsls	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004b48:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	3b01      	subs	r3, #1
 8004b56:	051a      	lsls	r2, r3, #20
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	3303      	adds	r3, #3
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	221f      	movs	r2, #31
 8004b84:	fa02 f303 	lsl.w	r3, r2, r3
 8004b88:	43da      	mvns	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	400a      	ands	r2, r1
 8004b90:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	3303      	adds	r3, #3
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	fa00 f203 	lsl.w	r2, r0, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	4a75      	ldr	r2, [pc, #468]	; (8004da4 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d022      	beq.n	8004c18 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8004be0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6899      	ldr	r1, [r3, #8]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	699a      	ldr	r2, [r3, #24]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004c02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6899      	ldr	r1, [r3, #8]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	69da      	ldr	r2, [r3, #28]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	609a      	str	r2, [r3, #8]
 8004c16:	e00f      	b.n	8004c38 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689a      	ldr	r2, [r3, #8]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8004c26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689a      	ldr	r2, [r3, #8]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004c36:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	7d5b      	ldrb	r3, [r3, #21]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d008      	beq.n	8004c52 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c4e:	605a      	str	r2, [r3, #4]
 8004c50:	e007      	b.n	8004c62 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c60:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	7d1b      	ldrb	r3, [r3, #20]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d008      	beq.n	8004c7c <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c78:	605a      	str	r2, [r3, #4]
 8004c7a:	e007      	b.n	8004c8c <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c8a:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	2b03      	cmp	r3, #3
 8004c92:	d02e      	beq.n	8004cf2 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8004c94:	2b03      	cmp	r3, #3
 8004c96:	d840      	bhi.n	8004d1a <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d002      	beq.n	8004ca2 <HAL_ADCEx_InjectedConfigChannel+0x222>
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d014      	beq.n	8004cca <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8004ca0:	e03b      	b.n	8004d1a <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6812      	ldr	r2, [r2, #0]
 8004cac:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004cb0:	f023 030f 	bic.w	r3, r3, #15
 8004cb4:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6959      	ldr	r1, [r3, #20]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	68da      	ldr	r2, [r3, #12]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	615a      	str	r2, [r3, #20]
      break;
 8004cc8:	e03b      	b.n	8004d42 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6812      	ldr	r2, [r2, #0]
 8004cd4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004cd8:	f023 030f 	bic.w	r3, r3, #15
 8004cdc:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6999      	ldr	r1, [r3, #24]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	68da      	ldr	r2, [r3, #12]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	619a      	str	r2, [r3, #24]
      break;
 8004cf0:	e027      	b.n	8004d42 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	6812      	ldr	r2, [r2, #0]
 8004cfc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004d00:	f023 030f 	bic.w	r3, r3, #15
 8004d04:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	69d9      	ldr	r1, [r3, #28]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	68da      	ldr	r2, [r3, #12]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	61da      	str	r2, [r3, #28]
      break;
 8004d18:	e013      	b.n	8004d42 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	6812      	ldr	r2, [r2, #0]
 8004d24:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004d28:	f023 030f 	bic.w	r3, r3, #15
 8004d2c:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6a19      	ldr	r1, [r3, #32]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	68da      	ldr	r2, [r3, #12]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	621a      	str	r2, [r3, #32]
      break;
 8004d40:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d42:	4b19      	ldr	r3, [pc, #100]	; (8004da8 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8004d44:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a18      	ldr	r2, [pc, #96]	; (8004dac <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d109      	bne.n	8004d64 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2b12      	cmp	r3, #18
 8004d56:	d105      	bne.n	8004d64 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a10      	ldr	r2, [pc, #64]	; (8004dac <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d10e      	bne.n	8004d8c <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a0f      	ldr	r2, [pc, #60]	; (8004db0 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d003      	beq.n	8004d80 <HAL_ADCEx_InjectedConfigChannel+0x300>
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b11      	cmp	r3, #17
 8004d7e:	d105      	bne.n	8004d8c <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	000f0001 	.word	0x000f0001
 8004da8:	40012300 	.word	0x40012300
 8004dac:	40012000 	.word	0x40012000
 8004db0:	10000012 	.word	0x10000012

08004db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f003 0307 	and.w	r3, r3, #7
 8004dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004dc4:	4b0c      	ldr	r3, [pc, #48]	; (8004df8 <__NVIC_SetPriorityGrouping+0x44>)
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ddc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004de6:	4a04      	ldr	r2, [pc, #16]	; (8004df8 <__NVIC_SetPriorityGrouping+0x44>)
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	60d3      	str	r3, [r2, #12]
}
 8004dec:	bf00      	nop
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	e000ed00 	.word	0xe000ed00

08004dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e00:	4b04      	ldr	r3, [pc, #16]	; (8004e14 <__NVIC_GetPriorityGrouping+0x18>)
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	0a1b      	lsrs	r3, r3, #8
 8004e06:	f003 0307 	and.w	r3, r3, #7
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr
 8004e14:	e000ed00 	.word	0xe000ed00

08004e18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	4603      	mov	r3, r0
 8004e20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	db0b      	blt.n	8004e42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e2a:	79fb      	ldrb	r3, [r7, #7]
 8004e2c:	f003 021f 	and.w	r2, r3, #31
 8004e30:	4907      	ldr	r1, [pc, #28]	; (8004e50 <__NVIC_EnableIRQ+0x38>)
 8004e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e36:	095b      	lsrs	r3, r3, #5
 8004e38:	2001      	movs	r0, #1
 8004e3a:	fa00 f202 	lsl.w	r2, r0, r2
 8004e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	e000e100 	.word	0xe000e100

08004e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	6039      	str	r1, [r7, #0]
 8004e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	db0a      	blt.n	8004e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	b2da      	uxtb	r2, r3
 8004e6c:	490c      	ldr	r1, [pc, #48]	; (8004ea0 <__NVIC_SetPriority+0x4c>)
 8004e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e72:	0112      	lsls	r2, r2, #4
 8004e74:	b2d2      	uxtb	r2, r2
 8004e76:	440b      	add	r3, r1
 8004e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e7c:	e00a      	b.n	8004e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	4908      	ldr	r1, [pc, #32]	; (8004ea4 <__NVIC_SetPriority+0x50>)
 8004e84:	79fb      	ldrb	r3, [r7, #7]
 8004e86:	f003 030f 	and.w	r3, r3, #15
 8004e8a:	3b04      	subs	r3, #4
 8004e8c:	0112      	lsls	r2, r2, #4
 8004e8e:	b2d2      	uxtb	r2, r2
 8004e90:	440b      	add	r3, r1
 8004e92:	761a      	strb	r2, [r3, #24]
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	e000e100 	.word	0xe000e100
 8004ea4:	e000ed00 	.word	0xe000ed00

08004ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b089      	sub	sp, #36	; 0x24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	f1c3 0307 	rsb	r3, r3, #7
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	bf28      	it	cs
 8004ec6:	2304      	movcs	r3, #4
 8004ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	3304      	adds	r3, #4
 8004ece:	2b06      	cmp	r3, #6
 8004ed0:	d902      	bls.n	8004ed8 <NVIC_EncodePriority+0x30>
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	3b03      	subs	r3, #3
 8004ed6:	e000      	b.n	8004eda <NVIC_EncodePriority+0x32>
 8004ed8:	2300      	movs	r3, #0
 8004eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004edc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee6:	43da      	mvns	r2, r3
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	401a      	ands	r2, r3
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8004efa:	43d9      	mvns	r1, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f00:	4313      	orrs	r3, r2
         );
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3724      	adds	r7, #36	; 0x24
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
	...

08004f10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f20:	d301      	bcc.n	8004f26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f22:	2301      	movs	r3, #1
 8004f24:	e00f      	b.n	8004f46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f26:	4a0a      	ldr	r2, [pc, #40]	; (8004f50 <SysTick_Config+0x40>)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f2e:	210f      	movs	r1, #15
 8004f30:	f04f 30ff 	mov.w	r0, #4294967295
 8004f34:	f7ff ff8e 	bl	8004e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f38:	4b05      	ldr	r3, [pc, #20]	; (8004f50 <SysTick_Config+0x40>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f3e:	4b04      	ldr	r3, [pc, #16]	; (8004f50 <SysTick_Config+0x40>)
 8004f40:	2207      	movs	r2, #7
 8004f42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	e000e010 	.word	0xe000e010

08004f54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f7ff ff29 	bl	8004db4 <__NVIC_SetPriorityGrouping>
}
 8004f62:	bf00      	nop
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b086      	sub	sp, #24
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	4603      	mov	r3, r0
 8004f72:	60b9      	str	r1, [r7, #8]
 8004f74:	607a      	str	r2, [r7, #4]
 8004f76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f7c:	f7ff ff3e 	bl	8004dfc <__NVIC_GetPriorityGrouping>
 8004f80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	68b9      	ldr	r1, [r7, #8]
 8004f86:	6978      	ldr	r0, [r7, #20]
 8004f88:	f7ff ff8e 	bl	8004ea8 <NVIC_EncodePriority>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f92:	4611      	mov	r1, r2
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7ff ff5d 	bl	8004e54 <__NVIC_SetPriority>
}
 8004f9a:	bf00      	nop
 8004f9c:	3718      	adds	r7, #24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b082      	sub	sp, #8
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	4603      	mov	r3, r0
 8004faa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7ff ff31 	bl	8004e18 <__NVIC_EnableIRQ>
}
 8004fb6:	bf00      	nop
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b082      	sub	sp, #8
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7ff ffa2 	bl	8004f10 <SysTick_Config>
 8004fcc:	4603      	mov	r3, r0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
	...

08004fd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004fe4:	f7fe fe3c 	bl	8003c60 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d101      	bne.n	8004ff4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e099      	b.n	8005128 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0201 	bic.w	r2, r2, #1
 8005012:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005014:	e00f      	b.n	8005036 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005016:	f7fe fe23 	bl	8003c60 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b05      	cmp	r3, #5
 8005022:	d908      	bls.n	8005036 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2220      	movs	r2, #32
 8005028:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2203      	movs	r2, #3
 800502e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e078      	b.n	8005128 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1e8      	bne.n	8005016 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	4b38      	ldr	r3, [pc, #224]	; (8005130 <HAL_DMA_Init+0x158>)
 8005050:	4013      	ands	r3, r2
 8005052:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005062:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800506e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800507a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	4313      	orrs	r3, r2
 8005086:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508c:	2b04      	cmp	r3, #4
 800508e:	d107      	bne.n	80050a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005098:	4313      	orrs	r3, r2
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	4313      	orrs	r3, r2
 800509e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f023 0307 	bic.w	r3, r3, #7
 80050b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	4313      	orrs	r3, r2
 80050c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	2b04      	cmp	r3, #4
 80050c8:	d117      	bne.n	80050fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00e      	beq.n	80050fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 fadf 	bl	80056a0 <DMA_CheckFifoParam>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d008      	beq.n	80050fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2240      	movs	r2, #64	; 0x40
 80050ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80050f6:	2301      	movs	r3, #1
 80050f8:	e016      	b.n	8005128 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 fa96 	bl	8005634 <DMA_CalcBaseAndBitshift>
 8005108:	4603      	mov	r3, r0
 800510a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005110:	223f      	movs	r2, #63	; 0x3f
 8005112:	409a      	lsls	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3718      	adds	r7, #24
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	f010803f 	.word	0xf010803f

08005134 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
 8005140:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005142:	2300      	movs	r3, #0
 8005144:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <HAL_DMA_Start_IT+0x26>
 8005156:	2302      	movs	r3, #2
 8005158:	e040      	b.n	80051dc <HAL_DMA_Start_IT+0xa8>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b01      	cmp	r3, #1
 800516c:	d12f      	bne.n	80051ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2202      	movs	r2, #2
 8005172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	68b9      	ldr	r1, [r7, #8]
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 fa28 	bl	80055d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800518c:	223f      	movs	r2, #63	; 0x3f
 800518e:	409a      	lsls	r2, r3
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0216 	orr.w	r2, r2, #22
 80051a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d007      	beq.n	80051bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0208 	orr.w	r2, r2, #8
 80051ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0201 	orr.w	r2, r2, #1
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	e005      	b.n	80051da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80051d6:	2302      	movs	r3, #2
 80051d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80051da:	7dfb      	ldrb	r3, [r7, #23]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3718      	adds	r7, #24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80051f2:	f7fe fd35 	bl	8003c60 <HAL_GetTick>
 80051f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d008      	beq.n	8005216 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2280      	movs	r2, #128	; 0x80
 8005208:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e052      	b.n	80052bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 0216 	bic.w	r2, r2, #22
 8005224:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	695a      	ldr	r2, [r3, #20]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005234:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	2b00      	cmp	r3, #0
 800523c:	d103      	bne.n	8005246 <HAL_DMA_Abort+0x62>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005242:	2b00      	cmp	r3, #0
 8005244:	d007      	beq.n	8005256 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 0208 	bic.w	r2, r2, #8
 8005254:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 0201 	bic.w	r2, r2, #1
 8005264:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005266:	e013      	b.n	8005290 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005268:	f7fe fcfa 	bl	8003c60 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b05      	cmp	r3, #5
 8005274:	d90c      	bls.n	8005290 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2220      	movs	r2, #32
 800527a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2203      	movs	r2, #3
 8005280:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e015      	b.n	80052bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1e4      	bne.n	8005268 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052a2:	223f      	movs	r2, #63	; 0x3f
 80052a4:	409a      	lsls	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80052d0:	4b8e      	ldr	r3, [pc, #568]	; (800550c <HAL_DMA_IRQHandler+0x248>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a8e      	ldr	r2, [pc, #568]	; (8005510 <HAL_DMA_IRQHandler+0x24c>)
 80052d6:	fba2 2303 	umull	r2, r3, r2, r3
 80052da:	0a9b      	lsrs	r3, r3, #10
 80052dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ee:	2208      	movs	r2, #8
 80052f0:	409a      	lsls	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	4013      	ands	r3, r2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d01a      	beq.n	8005330 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	2b00      	cmp	r3, #0
 8005306:	d013      	beq.n	8005330 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 0204 	bic.w	r2, r2, #4
 8005316:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800531c:	2208      	movs	r2, #8
 800531e:	409a      	lsls	r2, r3
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005328:	f043 0201 	orr.w	r2, r3, #1
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005334:	2201      	movs	r2, #1
 8005336:	409a      	lsls	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	4013      	ands	r3, r2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d012      	beq.n	8005366 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00b      	beq.n	8005366 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005352:	2201      	movs	r2, #1
 8005354:	409a      	lsls	r2, r3
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535e:	f043 0202 	orr.w	r2, r3, #2
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800536a:	2204      	movs	r2, #4
 800536c:	409a      	lsls	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4013      	ands	r3, r2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d012      	beq.n	800539c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00b      	beq.n	800539c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005388:	2204      	movs	r2, #4
 800538a:	409a      	lsls	r2, r3
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005394:	f043 0204 	orr.w	r2, r3, #4
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053a0:	2210      	movs	r2, #16
 80053a2:	409a      	lsls	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	4013      	ands	r3, r2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d043      	beq.n	8005434 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0308 	and.w	r3, r3, #8
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d03c      	beq.n	8005434 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053be:	2210      	movs	r2, #16
 80053c0:	409a      	lsls	r2, r3
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d018      	beq.n	8005406 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d108      	bne.n	80053f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d024      	beq.n	8005434 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	4798      	blx	r3
 80053f2:	e01f      	b.n	8005434 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d01b      	beq.n	8005434 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	4798      	blx	r3
 8005404:	e016      	b.n	8005434 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005410:	2b00      	cmp	r3, #0
 8005412:	d107      	bne.n	8005424 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 0208 	bic.w	r2, r2, #8
 8005422:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	2b00      	cmp	r3, #0
 800542a:	d003      	beq.n	8005434 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005438:	2220      	movs	r2, #32
 800543a:	409a      	lsls	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4013      	ands	r3, r2
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 808f 	beq.w	8005564 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0310 	and.w	r3, r3, #16
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 8087 	beq.w	8005564 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800545a:	2220      	movs	r2, #32
 800545c:	409a      	lsls	r2, r3
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b05      	cmp	r3, #5
 800546c:	d136      	bne.n	80054dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f022 0216 	bic.w	r2, r2, #22
 800547c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	695a      	ldr	r2, [r3, #20]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800548c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	2b00      	cmp	r3, #0
 8005494:	d103      	bne.n	800549e <HAL_DMA_IRQHandler+0x1da>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800549a:	2b00      	cmp	r3, #0
 800549c:	d007      	beq.n	80054ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 0208 	bic.w	r2, r2, #8
 80054ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b2:	223f      	movs	r2, #63	; 0x3f
 80054b4:	409a      	lsls	r2, r3
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d07e      	beq.n	80055d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	4798      	blx	r3
        }
        return;
 80054da:	e079      	b.n	80055d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d01d      	beq.n	8005526 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10d      	bne.n	8005514 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d031      	beq.n	8005564 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	4798      	blx	r3
 8005508:	e02c      	b.n	8005564 <HAL_DMA_IRQHandler+0x2a0>
 800550a:	bf00      	nop
 800550c:	200006ec 	.word	0x200006ec
 8005510:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005518:	2b00      	cmp	r3, #0
 800551a:	d023      	beq.n	8005564 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	4798      	blx	r3
 8005524:	e01e      	b.n	8005564 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10f      	bne.n	8005554 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 0210 	bic.w	r2, r2, #16
 8005542:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005558:	2b00      	cmp	r3, #0
 800555a:	d003      	beq.n	8005564 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005568:	2b00      	cmp	r3, #0
 800556a:	d032      	beq.n	80055d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	d022      	beq.n	80055be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2205      	movs	r2, #5
 800557c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 0201 	bic.w	r2, r2, #1
 800558e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	3301      	adds	r3, #1
 8005594:	60bb      	str	r3, [r7, #8]
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	429a      	cmp	r2, r3
 800559a:	d307      	bcc.n	80055ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1f2      	bne.n	8005590 <HAL_DMA_IRQHandler+0x2cc>
 80055aa:	e000      	b.n	80055ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80055ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d005      	beq.n	80055d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	4798      	blx	r3
 80055ce:	e000      	b.n	80055d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80055d0:	bf00      	nop
    }
  }
}
 80055d2:	3718      	adds	r7, #24
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
 80055e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80055f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	2b40      	cmp	r3, #64	; 0x40
 8005604:	d108      	bne.n	8005618 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005616:	e007      	b.n	8005628 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	60da      	str	r2, [r3, #12]
}
 8005628:	bf00      	nop
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	b2db      	uxtb	r3, r3
 8005642:	3b10      	subs	r3, #16
 8005644:	4a14      	ldr	r2, [pc, #80]	; (8005698 <DMA_CalcBaseAndBitshift+0x64>)
 8005646:	fba2 2303 	umull	r2, r3, r2, r3
 800564a:	091b      	lsrs	r3, r3, #4
 800564c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800564e:	4a13      	ldr	r2, [pc, #76]	; (800569c <DMA_CalcBaseAndBitshift+0x68>)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4413      	add	r3, r2
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	461a      	mov	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2b03      	cmp	r3, #3
 8005660:	d909      	bls.n	8005676 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800566a:	f023 0303 	bic.w	r3, r3, #3
 800566e:	1d1a      	adds	r2, r3, #4
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	659a      	str	r2, [r3, #88]	; 0x58
 8005674:	e007      	b.n	8005686 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800567e:	f023 0303 	bic.w	r3, r3, #3
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800568a:	4618      	mov	r0, r3
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	aaaaaaab 	.word	0xaaaaaaab
 800569c:	08009df8 	.word	0x08009df8

080056a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056a8:	2300      	movs	r3, #0
 80056aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d11f      	bne.n	80056fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	2b03      	cmp	r3, #3
 80056be:	d856      	bhi.n	800576e <DMA_CheckFifoParam+0xce>
 80056c0:	a201      	add	r2, pc, #4	; (adr r2, 80056c8 <DMA_CheckFifoParam+0x28>)
 80056c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c6:	bf00      	nop
 80056c8:	080056d9 	.word	0x080056d9
 80056cc:	080056eb 	.word	0x080056eb
 80056d0:	080056d9 	.word	0x080056d9
 80056d4:	0800576f 	.word	0x0800576f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d046      	beq.n	8005772 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056e8:	e043      	b.n	8005772 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80056f2:	d140      	bne.n	8005776 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056f8:	e03d      	b.n	8005776 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005702:	d121      	bne.n	8005748 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	2b03      	cmp	r3, #3
 8005708:	d837      	bhi.n	800577a <DMA_CheckFifoParam+0xda>
 800570a:	a201      	add	r2, pc, #4	; (adr r2, 8005710 <DMA_CheckFifoParam+0x70>)
 800570c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005710:	08005721 	.word	0x08005721
 8005714:	08005727 	.word	0x08005727
 8005718:	08005721 	.word	0x08005721
 800571c:	08005739 	.word	0x08005739
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	73fb      	strb	r3, [r7, #15]
      break;
 8005724:	e030      	b.n	8005788 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d025      	beq.n	800577e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005736:	e022      	b.n	800577e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005740:	d11f      	bne.n	8005782 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005746:	e01c      	b.n	8005782 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2b02      	cmp	r3, #2
 800574c:	d903      	bls.n	8005756 <DMA_CheckFifoParam+0xb6>
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	2b03      	cmp	r3, #3
 8005752:	d003      	beq.n	800575c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005754:	e018      	b.n	8005788 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	73fb      	strb	r3, [r7, #15]
      break;
 800575a:	e015      	b.n	8005788 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005760:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00e      	beq.n	8005786 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	73fb      	strb	r3, [r7, #15]
      break;
 800576c:	e00b      	b.n	8005786 <DMA_CheckFifoParam+0xe6>
      break;
 800576e:	bf00      	nop
 8005770:	e00a      	b.n	8005788 <DMA_CheckFifoParam+0xe8>
      break;
 8005772:	bf00      	nop
 8005774:	e008      	b.n	8005788 <DMA_CheckFifoParam+0xe8>
      break;
 8005776:	bf00      	nop
 8005778:	e006      	b.n	8005788 <DMA_CheckFifoParam+0xe8>
      break;
 800577a:	bf00      	nop
 800577c:	e004      	b.n	8005788 <DMA_CheckFifoParam+0xe8>
      break;
 800577e:	bf00      	nop
 8005780:	e002      	b.n	8005788 <DMA_CheckFifoParam+0xe8>
      break;   
 8005782:	bf00      	nop
 8005784:	e000      	b.n	8005788 <DMA_CheckFifoParam+0xe8>
      break;
 8005786:	bf00      	nop
    }
  } 
  
  return status; 
 8005788:	7bfb      	ldrb	r3, [r7, #15]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop

08005798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005798:	b480      	push	{r7}
 800579a:	b089      	sub	sp, #36	; 0x24
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80057a2:	2300      	movs	r3, #0
 80057a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80057aa:	2300      	movs	r3, #0
 80057ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057ae:	2300      	movs	r3, #0
 80057b0:	61fb      	str	r3, [r7, #28]
 80057b2:	e159      	b.n	8005a68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80057b4:	2201      	movs	r2, #1
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	fa02 f303 	lsl.w	r3, r2, r3
 80057bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	4013      	ands	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	f040 8148 	bne.w	8005a62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f003 0303 	and.w	r3, r3, #3
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d005      	beq.n	80057ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d130      	bne.n	800584c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	005b      	lsls	r3, r3, #1
 80057f4:	2203      	movs	r2, #3
 80057f6:	fa02 f303 	lsl.w	r3, r2, r3
 80057fa:	43db      	mvns	r3, r3
 80057fc:	69ba      	ldr	r2, [r7, #24]
 80057fe:	4013      	ands	r3, r2
 8005800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	68da      	ldr	r2, [r3, #12]
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	005b      	lsls	r3, r3, #1
 800580a:	fa02 f303 	lsl.w	r3, r2, r3
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	4313      	orrs	r3, r2
 8005812:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005820:	2201      	movs	r2, #1
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	fa02 f303 	lsl.w	r3, r2, r3
 8005828:	43db      	mvns	r3, r3
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	4013      	ands	r3, r2
 800582e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	091b      	lsrs	r3, r3, #4
 8005836:	f003 0201 	and.w	r2, r3, #1
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	fa02 f303 	lsl.w	r3, r2, r3
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	4313      	orrs	r3, r2
 8005844:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f003 0303 	and.w	r3, r3, #3
 8005854:	2b03      	cmp	r3, #3
 8005856:	d017      	beq.n	8005888 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	2203      	movs	r2, #3
 8005864:	fa02 f303 	lsl.w	r3, r2, r3
 8005868:	43db      	mvns	r3, r3
 800586a:	69ba      	ldr	r2, [r7, #24]
 800586c:	4013      	ands	r3, r2
 800586e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	005b      	lsls	r3, r3, #1
 8005878:	fa02 f303 	lsl.w	r3, r2, r3
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	4313      	orrs	r3, r2
 8005880:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	69ba      	ldr	r2, [r7, #24]
 8005886:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f003 0303 	and.w	r3, r3, #3
 8005890:	2b02      	cmp	r3, #2
 8005892:	d123      	bne.n	80058dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	08da      	lsrs	r2, r3, #3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	3208      	adds	r2, #8
 800589c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	220f      	movs	r2, #15
 80058ac:	fa02 f303 	lsl.w	r3, r2, r3
 80058b0:	43db      	mvns	r3, r3
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	4013      	ands	r3, r2
 80058b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	691a      	ldr	r2, [r3, #16]
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	f003 0307 	and.w	r3, r3, #7
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	fa02 f303 	lsl.w	r3, r2, r3
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	08da      	lsrs	r2, r3, #3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	3208      	adds	r2, #8
 80058d6:	69b9      	ldr	r1, [r7, #24]
 80058d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	2203      	movs	r2, #3
 80058e8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ec:	43db      	mvns	r3, r3
 80058ee:	69ba      	ldr	r2, [r7, #24]
 80058f0:	4013      	ands	r3, r2
 80058f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f003 0203 	and.w	r2, r3, #3
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	005b      	lsls	r3, r3, #1
 8005900:	fa02 f303 	lsl.w	r3, r2, r3
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	4313      	orrs	r3, r2
 8005908:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 80a2 	beq.w	8005a62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800591e:	2300      	movs	r3, #0
 8005920:	60fb      	str	r3, [r7, #12]
 8005922:	4b57      	ldr	r3, [pc, #348]	; (8005a80 <HAL_GPIO_Init+0x2e8>)
 8005924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005926:	4a56      	ldr	r2, [pc, #344]	; (8005a80 <HAL_GPIO_Init+0x2e8>)
 8005928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800592c:	6453      	str	r3, [r2, #68]	; 0x44
 800592e:	4b54      	ldr	r3, [pc, #336]	; (8005a80 <HAL_GPIO_Init+0x2e8>)
 8005930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800593a:	4a52      	ldr	r2, [pc, #328]	; (8005a84 <HAL_GPIO_Init+0x2ec>)
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	089b      	lsrs	r3, r3, #2
 8005940:	3302      	adds	r3, #2
 8005942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005946:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	f003 0303 	and.w	r3, r3, #3
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	220f      	movs	r2, #15
 8005952:	fa02 f303 	lsl.w	r3, r2, r3
 8005956:	43db      	mvns	r3, r3
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	4013      	ands	r3, r2
 800595c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a49      	ldr	r2, [pc, #292]	; (8005a88 <HAL_GPIO_Init+0x2f0>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d019      	beq.n	800599a <HAL_GPIO_Init+0x202>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a48      	ldr	r2, [pc, #288]	; (8005a8c <HAL_GPIO_Init+0x2f4>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d013      	beq.n	8005996 <HAL_GPIO_Init+0x1fe>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a47      	ldr	r2, [pc, #284]	; (8005a90 <HAL_GPIO_Init+0x2f8>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d00d      	beq.n	8005992 <HAL_GPIO_Init+0x1fa>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a46      	ldr	r2, [pc, #280]	; (8005a94 <HAL_GPIO_Init+0x2fc>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d007      	beq.n	800598e <HAL_GPIO_Init+0x1f6>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a45      	ldr	r2, [pc, #276]	; (8005a98 <HAL_GPIO_Init+0x300>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d101      	bne.n	800598a <HAL_GPIO_Init+0x1f2>
 8005986:	2304      	movs	r3, #4
 8005988:	e008      	b.n	800599c <HAL_GPIO_Init+0x204>
 800598a:	2307      	movs	r3, #7
 800598c:	e006      	b.n	800599c <HAL_GPIO_Init+0x204>
 800598e:	2303      	movs	r3, #3
 8005990:	e004      	b.n	800599c <HAL_GPIO_Init+0x204>
 8005992:	2302      	movs	r3, #2
 8005994:	e002      	b.n	800599c <HAL_GPIO_Init+0x204>
 8005996:	2301      	movs	r3, #1
 8005998:	e000      	b.n	800599c <HAL_GPIO_Init+0x204>
 800599a:	2300      	movs	r3, #0
 800599c:	69fa      	ldr	r2, [r7, #28]
 800599e:	f002 0203 	and.w	r2, r2, #3
 80059a2:	0092      	lsls	r2, r2, #2
 80059a4:	4093      	lsls	r3, r2
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80059ac:	4935      	ldr	r1, [pc, #212]	; (8005a84 <HAL_GPIO_Init+0x2ec>)
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	089b      	lsrs	r3, r3, #2
 80059b2:	3302      	adds	r3, #2
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059ba:	4b38      	ldr	r3, [pc, #224]	; (8005a9c <HAL_GPIO_Init+0x304>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	43db      	mvns	r3, r3
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	4013      	ands	r3, r2
 80059c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	4313      	orrs	r3, r2
 80059dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059de:	4a2f      	ldr	r2, [pc, #188]	; (8005a9c <HAL_GPIO_Init+0x304>)
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059e4:	4b2d      	ldr	r3, [pc, #180]	; (8005a9c <HAL_GPIO_Init+0x304>)
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	43db      	mvns	r3, r3
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	4013      	ands	r3, r2
 80059f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d003      	beq.n	8005a08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005a00:	69ba      	ldr	r2, [r7, #24]
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a08:	4a24      	ldr	r2, [pc, #144]	; (8005a9c <HAL_GPIO_Init+0x304>)
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a0e:	4b23      	ldr	r3, [pc, #140]	; (8005a9c <HAL_GPIO_Init+0x304>)
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	43db      	mvns	r3, r3
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a32:	4a1a      	ldr	r2, [pc, #104]	; (8005a9c <HAL_GPIO_Init+0x304>)
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a38:	4b18      	ldr	r3, [pc, #96]	; (8005a9c <HAL_GPIO_Init+0x304>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	43db      	mvns	r3, r3
 8005a42:	69ba      	ldr	r2, [r7, #24]
 8005a44:	4013      	ands	r3, r2
 8005a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a5c:	4a0f      	ldr	r2, [pc, #60]	; (8005a9c <HAL_GPIO_Init+0x304>)
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	3301      	adds	r3, #1
 8005a66:	61fb      	str	r3, [r7, #28]
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	2b0f      	cmp	r3, #15
 8005a6c:	f67f aea2 	bls.w	80057b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a70:	bf00      	nop
 8005a72:	bf00      	nop
 8005a74:	3724      	adds	r7, #36	; 0x24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	40023800 	.word	0x40023800
 8005a84:	40013800 	.word	0x40013800
 8005a88:	40020000 	.word	0x40020000
 8005a8c:	40020400 	.word	0x40020400
 8005a90:	40020800 	.word	0x40020800
 8005a94:	40020c00 	.word	0x40020c00
 8005a98:	40021000 	.word	0x40021000
 8005a9c:	40013c00 	.word	0x40013c00

08005aa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	807b      	strh	r3, [r7, #2]
 8005aac:	4613      	mov	r3, r2
 8005aae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ab0:	787b      	ldrb	r3, [r7, #1]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ab6:	887a      	ldrh	r2, [r7, #2]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005abc:	e003      	b.n	8005ac6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005abe:	887b      	ldrh	r3, [r7, #2]
 8005ac0:	041a      	lsls	r2, r3, #16
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	619a      	str	r2, [r3, #24]
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
	...

08005ad4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e12b      	b.n	8005d3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d106      	bne.n	8005b00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7fd fe16 	bl	800372c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2224      	movs	r2, #36	; 0x24
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f022 0201 	bic.w	r2, r2, #1
 8005b16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b38:	f001 fbbc 	bl	80072b4 <HAL_RCC_GetPCLK1Freq>
 8005b3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	4a81      	ldr	r2, [pc, #516]	; (8005d48 <HAL_I2C_Init+0x274>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d807      	bhi.n	8005b58 <HAL_I2C_Init+0x84>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	4a80      	ldr	r2, [pc, #512]	; (8005d4c <HAL_I2C_Init+0x278>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	bf94      	ite	ls
 8005b50:	2301      	movls	r3, #1
 8005b52:	2300      	movhi	r3, #0
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	e006      	b.n	8005b66 <HAL_I2C_Init+0x92>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4a7d      	ldr	r2, [pc, #500]	; (8005d50 <HAL_I2C_Init+0x27c>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	bf94      	ite	ls
 8005b60:	2301      	movls	r3, #1
 8005b62:	2300      	movhi	r3, #0
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e0e7      	b.n	8005d3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	4a78      	ldr	r2, [pc, #480]	; (8005d54 <HAL_I2C_Init+0x280>)
 8005b72:	fba2 2303 	umull	r2, r3, r2, r3
 8005b76:	0c9b      	lsrs	r3, r3, #18
 8005b78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	4a6a      	ldr	r2, [pc, #424]	; (8005d48 <HAL_I2C_Init+0x274>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d802      	bhi.n	8005ba8 <HAL_I2C_Init+0xd4>
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	e009      	b.n	8005bbc <HAL_I2C_Init+0xe8>
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005bae:	fb02 f303 	mul.w	r3, r2, r3
 8005bb2:	4a69      	ldr	r2, [pc, #420]	; (8005d58 <HAL_I2C_Init+0x284>)
 8005bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb8:	099b      	lsrs	r3, r3, #6
 8005bba:	3301      	adds	r3, #1
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	6812      	ldr	r2, [r2, #0]
 8005bc0:	430b      	orrs	r3, r1
 8005bc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005bce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	495c      	ldr	r1, [pc, #368]	; (8005d48 <HAL_I2C_Init+0x274>)
 8005bd8:	428b      	cmp	r3, r1
 8005bda:	d819      	bhi.n	8005c10 <HAL_I2C_Init+0x13c>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	1e59      	subs	r1, r3, #1
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bea:	1c59      	adds	r1, r3, #1
 8005bec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005bf0:	400b      	ands	r3, r1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00a      	beq.n	8005c0c <HAL_I2C_Init+0x138>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	1e59      	subs	r1, r3, #1
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	005b      	lsls	r3, r3, #1
 8005c00:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c04:	3301      	adds	r3, #1
 8005c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c0a:	e051      	b.n	8005cb0 <HAL_I2C_Init+0x1dc>
 8005c0c:	2304      	movs	r3, #4
 8005c0e:	e04f      	b.n	8005cb0 <HAL_I2C_Init+0x1dc>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d111      	bne.n	8005c3c <HAL_I2C_Init+0x168>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	1e58      	subs	r0, r3, #1
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6859      	ldr	r1, [r3, #4]
 8005c20:	460b      	mov	r3, r1
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	440b      	add	r3, r1
 8005c26:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	bf0c      	ite	eq
 8005c34:	2301      	moveq	r3, #1
 8005c36:	2300      	movne	r3, #0
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	e012      	b.n	8005c62 <HAL_I2C_Init+0x18e>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	1e58      	subs	r0, r3, #1
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6859      	ldr	r1, [r3, #4]
 8005c44:	460b      	mov	r3, r1
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	440b      	add	r3, r1
 8005c4a:	0099      	lsls	r1, r3, #2
 8005c4c:	440b      	add	r3, r1
 8005c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c52:	3301      	adds	r3, #1
 8005c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	bf0c      	ite	eq
 8005c5c:	2301      	moveq	r3, #1
 8005c5e:	2300      	movne	r3, #0
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <HAL_I2C_Init+0x196>
 8005c66:	2301      	movs	r3, #1
 8005c68:	e022      	b.n	8005cb0 <HAL_I2C_Init+0x1dc>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10e      	bne.n	8005c90 <HAL_I2C_Init+0x1bc>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	1e58      	subs	r0, r3, #1
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6859      	ldr	r1, [r3, #4]
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	440b      	add	r3, r1
 8005c80:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c84:	3301      	adds	r3, #1
 8005c86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c8e:	e00f      	b.n	8005cb0 <HAL_I2C_Init+0x1dc>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	1e58      	subs	r0, r3, #1
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6859      	ldr	r1, [r3, #4]
 8005c98:	460b      	mov	r3, r1
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	440b      	add	r3, r1
 8005c9e:	0099      	lsls	r1, r3, #2
 8005ca0:	440b      	add	r3, r1
 8005ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cb0:	6879      	ldr	r1, [r7, #4]
 8005cb2:	6809      	ldr	r1, [r1, #0]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	69da      	ldr	r2, [r3, #28]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	431a      	orrs	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005cde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	6911      	ldr	r1, [r2, #16]
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	68d2      	ldr	r2, [r2, #12]
 8005cea:	4311      	orrs	r1, r2
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	6812      	ldr	r2, [r2, #0]
 8005cf0:	430b      	orrs	r3, r1
 8005cf2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	695a      	ldr	r2, [r3, #20]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	431a      	orrs	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f042 0201 	orr.w	r2, r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	000186a0 	.word	0x000186a0
 8005d4c:	001e847f 	.word	0x001e847f
 8005d50:	003d08ff 	.word	0x003d08ff
 8005d54:	431bde83 	.word	0x431bde83
 8005d58:	10624dd3 	.word	0x10624dd3

08005d5c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b088      	sub	sp, #32
 8005d60:	af02      	add	r7, sp, #8
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	4608      	mov	r0, r1
 8005d66:	4611      	mov	r1, r2
 8005d68:	461a      	mov	r2, r3
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	817b      	strh	r3, [r7, #10]
 8005d6e:	460b      	mov	r3, r1
 8005d70:	813b      	strh	r3, [r7, #8]
 8005d72:	4613      	mov	r3, r2
 8005d74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d76:	f7fd ff73 	bl	8003c60 <HAL_GetTick>
 8005d7a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b20      	cmp	r3, #32
 8005d86:	f040 80d9 	bne.w	8005f3c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	9300      	str	r3, [sp, #0]
 8005d8e:	2319      	movs	r3, #25
 8005d90:	2201      	movs	r2, #1
 8005d92:	496d      	ldr	r1, [pc, #436]	; (8005f48 <HAL_I2C_Mem_Write+0x1ec>)
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	f000 fc7f 	bl	8006698 <I2C_WaitOnFlagUntilTimeout>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005da0:	2302      	movs	r3, #2
 8005da2:	e0cc      	b.n	8005f3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d101      	bne.n	8005db2 <HAL_I2C_Mem_Write+0x56>
 8005dae:	2302      	movs	r3, #2
 8005db0:	e0c5      	b.n	8005f3e <HAL_I2C_Mem_Write+0x1e2>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d007      	beq.n	8005dd8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f042 0201 	orr.w	r2, r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005de6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2221      	movs	r2, #33	; 0x21
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2240      	movs	r2, #64	; 0x40
 8005df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6a3a      	ldr	r2, [r7, #32]
 8005e02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005e08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4a4d      	ldr	r2, [pc, #308]	; (8005f4c <HAL_I2C_Mem_Write+0x1f0>)
 8005e18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e1a:	88f8      	ldrh	r0, [r7, #6]
 8005e1c:	893a      	ldrh	r2, [r7, #8]
 8005e1e:	8979      	ldrh	r1, [r7, #10]
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	9301      	str	r3, [sp, #4]
 8005e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	4603      	mov	r3, r0
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f000 fab6 	bl	800639c <I2C_RequestMemoryWrite>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d052      	beq.n	8005edc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e081      	b.n	8005f3e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f000 fd00 	bl	8006844 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00d      	beq.n	8005e66 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	d107      	bne.n	8005e62 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e06b      	b.n	8005f3e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6a:	781a      	ldrb	r2, [r3, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e76:	1c5a      	adds	r2, r3, #1
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e80:	3b01      	subs	r3, #1
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	f003 0304 	and.w	r3, r3, #4
 8005ea0:	2b04      	cmp	r3, #4
 8005ea2:	d11b      	bne.n	8005edc <HAL_I2C_Mem_Write+0x180>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d017      	beq.n	8005edc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	781a      	ldrb	r2, [r3, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebc:	1c5a      	adds	r2, r3, #1
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1aa      	bne.n	8005e3a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 fcec 	bl	80068c6 <I2C_WaitOnBTFFlagUntilTimeout>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00d      	beq.n	8005f10 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef8:	2b04      	cmp	r3, #4
 8005efa:	d107      	bne.n	8005f0c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f0a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e016      	b.n	8005f3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2220      	movs	r2, #32
 8005f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	e000      	b.n	8005f3e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005f3c:	2302      	movs	r3, #2
  }
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3718      	adds	r7, #24
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	00100002 	.word	0x00100002
 8005f4c:	ffff0000 	.word	0xffff0000

08005f50 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b08c      	sub	sp, #48	; 0x30
 8005f54:	af02      	add	r7, sp, #8
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	4608      	mov	r0, r1
 8005f5a:	4611      	mov	r1, r2
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	4603      	mov	r3, r0
 8005f60:	817b      	strh	r3, [r7, #10]
 8005f62:	460b      	mov	r3, r1
 8005f64:	813b      	strh	r3, [r7, #8]
 8005f66:	4613      	mov	r3, r2
 8005f68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f6a:	f7fd fe79 	bl	8003c60 <HAL_GetTick>
 8005f6e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2b20      	cmp	r3, #32
 8005f7a:	f040 8208 	bne.w	800638e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	2319      	movs	r3, #25
 8005f84:	2201      	movs	r2, #1
 8005f86:	497b      	ldr	r1, [pc, #492]	; (8006174 <HAL_I2C_Mem_Read+0x224>)
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f000 fb85 	bl	8006698 <I2C_WaitOnFlagUntilTimeout>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d001      	beq.n	8005f98 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005f94:	2302      	movs	r3, #2
 8005f96:	e1fb      	b.n	8006390 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d101      	bne.n	8005fa6 <HAL_I2C_Mem_Read+0x56>
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	e1f4      	b.n	8006390 <HAL_I2C_Mem_Read+0x440>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d007      	beq.n	8005fcc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f042 0201 	orr.w	r2, r2, #1
 8005fca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2222      	movs	r2, #34	; 0x22
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2240      	movs	r2, #64	; 0x40
 8005fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ff6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006002:	b29a      	uxth	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4a5b      	ldr	r2, [pc, #364]	; (8006178 <HAL_I2C_Mem_Read+0x228>)
 800600c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800600e:	88f8      	ldrh	r0, [r7, #6]
 8006010:	893a      	ldrh	r2, [r7, #8]
 8006012:	8979      	ldrh	r1, [r7, #10]
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	9301      	str	r3, [sp, #4]
 8006018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	4603      	mov	r3, r0
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f000 fa52 	bl	80064c8 <I2C_RequestMemoryRead>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d001      	beq.n	800602e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e1b0      	b.n	8006390 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006032:	2b00      	cmp	r3, #0
 8006034:	d113      	bne.n	800605e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006036:	2300      	movs	r3, #0
 8006038:	623b      	str	r3, [r7, #32]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	623b      	str	r3, [r7, #32]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	623b      	str	r3, [r7, #32]
 800604a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	e184      	b.n	8006368 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006062:	2b01      	cmp	r3, #1
 8006064:	d11b      	bne.n	800609e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006074:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006076:	2300      	movs	r3, #0
 8006078:	61fb      	str	r3, [r7, #28]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	61fb      	str	r3, [r7, #28]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	61fb      	str	r3, [r7, #28]
 800608a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800609a:	601a      	str	r2, [r3, #0]
 800609c:	e164      	b.n	8006368 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d11b      	bne.n	80060de <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060c6:	2300      	movs	r3, #0
 80060c8:	61bb      	str	r3, [r7, #24]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	61bb      	str	r3, [r7, #24]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	61bb      	str	r3, [r7, #24]
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	e144      	b.n	8006368 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060de:	2300      	movs	r3, #0
 80060e0:	617b      	str	r3, [r7, #20]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	695b      	ldr	r3, [r3, #20]
 80060e8:	617b      	str	r3, [r7, #20]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	617b      	str	r3, [r7, #20]
 80060f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80060f4:	e138      	b.n	8006368 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060fa:	2b03      	cmp	r3, #3
 80060fc:	f200 80f1 	bhi.w	80062e2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006104:	2b01      	cmp	r3, #1
 8006106:	d123      	bne.n	8006150 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800610a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f000 fc1b 	bl	8006948 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e139      	b.n	8006390 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	691a      	ldr	r2, [r3, #16]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006126:	b2d2      	uxtb	r2, r2
 8006128:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612e:	1c5a      	adds	r2, r3, #1
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006138:	3b01      	subs	r3, #1
 800613a:	b29a      	uxth	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006144:	b29b      	uxth	r3, r3
 8006146:	3b01      	subs	r3, #1
 8006148:	b29a      	uxth	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800614e:	e10b      	b.n	8006368 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006154:	2b02      	cmp	r3, #2
 8006156:	d14e      	bne.n	80061f6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615a:	9300      	str	r3, [sp, #0]
 800615c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615e:	2200      	movs	r2, #0
 8006160:	4906      	ldr	r1, [pc, #24]	; (800617c <HAL_I2C_Mem_Read+0x22c>)
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 fa98 	bl	8006698 <I2C_WaitOnFlagUntilTimeout>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d008      	beq.n	8006180 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e10e      	b.n	8006390 <HAL_I2C_Mem_Read+0x440>
 8006172:	bf00      	nop
 8006174:	00100002 	.word	0x00100002
 8006178:	ffff0000 	.word	0xffff0000
 800617c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800618e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	691a      	ldr	r2, [r3, #16]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619a:	b2d2      	uxtb	r2, r2
 800619c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a2:	1c5a      	adds	r2, r3, #1
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ac:	3b01      	subs	r3, #1
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	3b01      	subs	r3, #1
 80061bc:	b29a      	uxth	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	691a      	ldr	r2, [r3, #16]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061cc:	b2d2      	uxtb	r2, r2
 80061ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d4:	1c5a      	adds	r2, r3, #1
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061de:	3b01      	subs	r3, #1
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	3b01      	subs	r3, #1
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80061f4:	e0b8      	b.n	8006368 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fc:	2200      	movs	r2, #0
 80061fe:	4966      	ldr	r1, [pc, #408]	; (8006398 <HAL_I2C_Mem_Read+0x448>)
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 fa49 	bl	8006698 <I2C_WaitOnFlagUntilTimeout>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d001      	beq.n	8006210 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e0bf      	b.n	8006390 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800621e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	691a      	ldr	r2, [r3, #16]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622a:	b2d2      	uxtb	r2, r2
 800622c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	1c5a      	adds	r2, r3, #1
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800623c:	3b01      	subs	r3, #1
 800623e:	b29a      	uxth	r2, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006248:	b29b      	uxth	r3, r3
 800624a:	3b01      	subs	r3, #1
 800624c:	b29a      	uxth	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006258:	2200      	movs	r2, #0
 800625a:	494f      	ldr	r1, [pc, #316]	; (8006398 <HAL_I2C_Mem_Read+0x448>)
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f000 fa1b 	bl	8006698 <I2C_WaitOnFlagUntilTimeout>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e091      	b.n	8006390 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800627a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	691a      	ldr	r2, [r3, #16]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006286:	b2d2      	uxtb	r2, r2
 8006288:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628e:	1c5a      	adds	r2, r3, #1
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006298:	3b01      	subs	r3, #1
 800629a:	b29a      	uxth	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	3b01      	subs	r3, #1
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	691a      	ldr	r2, [r3, #16]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b8:	b2d2      	uxtb	r2, r2
 80062ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	1c5a      	adds	r2, r3, #1
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ca:	3b01      	subs	r3, #1
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	3b01      	subs	r3, #1
 80062da:	b29a      	uxth	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80062e0:	e042      	b.n	8006368 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f000 fb2e 	bl	8006948 <I2C_WaitOnRXNEFlagUntilTimeout>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e04c      	b.n	8006390 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	691a      	ldr	r2, [r3, #16]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006300:	b2d2      	uxtb	r2, r2
 8006302:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006308:	1c5a      	adds	r2, r3, #1
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006312:	3b01      	subs	r3, #1
 8006314:	b29a      	uxth	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800631e:	b29b      	uxth	r3, r3
 8006320:	3b01      	subs	r3, #1
 8006322:	b29a      	uxth	r2, r3
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	f003 0304 	and.w	r3, r3, #4
 8006332:	2b04      	cmp	r3, #4
 8006334:	d118      	bne.n	8006368 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	691a      	ldr	r2, [r3, #16]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	b2d2      	uxtb	r2, r2
 8006342:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006348:	1c5a      	adds	r2, r3, #1
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006352:	3b01      	subs	r3, #1
 8006354:	b29a      	uxth	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800635e:	b29b      	uxth	r3, r3
 8006360:	3b01      	subs	r3, #1
 8006362:	b29a      	uxth	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800636c:	2b00      	cmp	r3, #0
 800636e:	f47f aec2 	bne.w	80060f6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2220      	movs	r2, #32
 8006376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	e000      	b.n	8006390 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800638e:	2302      	movs	r3, #2
  }
}
 8006390:	4618      	mov	r0, r3
 8006392:	3728      	adds	r7, #40	; 0x28
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	00010004 	.word	0x00010004

0800639c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b088      	sub	sp, #32
 80063a0:	af02      	add	r7, sp, #8
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	4608      	mov	r0, r1
 80063a6:	4611      	mov	r1, r2
 80063a8:	461a      	mov	r2, r3
 80063aa:	4603      	mov	r3, r0
 80063ac:	817b      	strh	r3, [r7, #10]
 80063ae:	460b      	mov	r3, r1
 80063b0:	813b      	strh	r3, [r7, #8]
 80063b2:	4613      	mov	r3, r2
 80063b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	6a3b      	ldr	r3, [r7, #32]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f000 f960 	bl	8006698 <I2C_WaitOnFlagUntilTimeout>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00d      	beq.n	80063fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063ec:	d103      	bne.n	80063f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e05f      	b.n	80064ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80063fa:	897b      	ldrh	r3, [r7, #10]
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	461a      	mov	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006408:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	6a3a      	ldr	r2, [r7, #32]
 800640e:	492d      	ldr	r1, [pc, #180]	; (80064c4 <I2C_RequestMemoryWrite+0x128>)
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 f998 	bl	8006746 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d001      	beq.n	8006420 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e04c      	b.n	80064ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006420:	2300      	movs	r3, #0
 8006422:	617b      	str	r3, [r7, #20]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	617b      	str	r3, [r7, #20]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	617b      	str	r3, [r7, #20]
 8006434:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006438:	6a39      	ldr	r1, [r7, #32]
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f000 fa02 	bl	8006844 <I2C_WaitOnTXEFlagUntilTimeout>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00d      	beq.n	8006462 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644a:	2b04      	cmp	r3, #4
 800644c:	d107      	bne.n	800645e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800645c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e02b      	b.n	80064ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006462:	88fb      	ldrh	r3, [r7, #6]
 8006464:	2b01      	cmp	r3, #1
 8006466:	d105      	bne.n	8006474 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006468:	893b      	ldrh	r3, [r7, #8]
 800646a:	b2da      	uxtb	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	611a      	str	r2, [r3, #16]
 8006472:	e021      	b.n	80064b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006474:	893b      	ldrh	r3, [r7, #8]
 8006476:	0a1b      	lsrs	r3, r3, #8
 8006478:	b29b      	uxth	r3, r3
 800647a:	b2da      	uxtb	r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006484:	6a39      	ldr	r1, [r7, #32]
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f000 f9dc 	bl	8006844 <I2C_WaitOnTXEFlagUntilTimeout>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00d      	beq.n	80064ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006496:	2b04      	cmp	r3, #4
 8006498:	d107      	bne.n	80064aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e005      	b.n	80064ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064ae:	893b      	ldrh	r3, [r7, #8]
 80064b0:	b2da      	uxtb	r2, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3718      	adds	r7, #24
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	00010002 	.word	0x00010002

080064c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b088      	sub	sp, #32
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	4608      	mov	r0, r1
 80064d2:	4611      	mov	r1, r2
 80064d4:	461a      	mov	r2, r3
 80064d6:	4603      	mov	r3, r0
 80064d8:	817b      	strh	r3, [r7, #10]
 80064da:	460b      	mov	r3, r1
 80064dc:	813b      	strh	r3, [r7, #8]
 80064de:	4613      	mov	r3, r2
 80064e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006500:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	2200      	movs	r2, #0
 800650a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f000 f8c2 	bl	8006698 <I2C_WaitOnFlagUntilTimeout>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00d      	beq.n	8006536 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006524:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006528:	d103      	bne.n	8006532 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006530:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e0aa      	b.n	800668c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006536:	897b      	ldrh	r3, [r7, #10]
 8006538:	b2db      	uxtb	r3, r3
 800653a:	461a      	mov	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006544:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006548:	6a3a      	ldr	r2, [r7, #32]
 800654a:	4952      	ldr	r1, [pc, #328]	; (8006694 <I2C_RequestMemoryRead+0x1cc>)
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 f8fa 	bl	8006746 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d001      	beq.n	800655c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e097      	b.n	800668c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800655c:	2300      	movs	r3, #0
 800655e:	617b      	str	r3, [r7, #20]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	617b      	str	r3, [r7, #20]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	617b      	str	r3, [r7, #20]
 8006570:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006574:	6a39      	ldr	r1, [r7, #32]
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f000 f964 	bl	8006844 <I2C_WaitOnTXEFlagUntilTimeout>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00d      	beq.n	800659e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006586:	2b04      	cmp	r3, #4
 8006588:	d107      	bne.n	800659a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006598:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e076      	b.n	800668c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800659e:	88fb      	ldrh	r3, [r7, #6]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d105      	bne.n	80065b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065a4:	893b      	ldrh	r3, [r7, #8]
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	611a      	str	r2, [r3, #16]
 80065ae:	e021      	b.n	80065f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80065b0:	893b      	ldrh	r3, [r7, #8]
 80065b2:	0a1b      	lsrs	r3, r3, #8
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065c0:	6a39      	ldr	r1, [r7, #32]
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f000 f93e 	bl	8006844 <I2C_WaitOnTXEFlagUntilTimeout>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00d      	beq.n	80065ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d2:	2b04      	cmp	r3, #4
 80065d4:	d107      	bne.n	80065e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e050      	b.n	800668c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065ea:	893b      	ldrh	r3, [r7, #8]
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065f6:	6a39      	ldr	r1, [r7, #32]
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f000 f923 	bl	8006844 <I2C_WaitOnTXEFlagUntilTimeout>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00d      	beq.n	8006620 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006608:	2b04      	cmp	r3, #4
 800660a:	d107      	bne.n	800661c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800661a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e035      	b.n	800668c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800662e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	6a3b      	ldr	r3, [r7, #32]
 8006636:	2200      	movs	r2, #0
 8006638:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f000 f82b 	bl	8006698 <I2C_WaitOnFlagUntilTimeout>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00d      	beq.n	8006664 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006656:	d103      	bne.n	8006660 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800665e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e013      	b.n	800668c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006664:	897b      	ldrh	r3, [r7, #10]
 8006666:	b2db      	uxtb	r3, r3
 8006668:	f043 0301 	orr.w	r3, r3, #1
 800666c:	b2da      	uxtb	r2, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006676:	6a3a      	ldr	r2, [r7, #32]
 8006678:	4906      	ldr	r1, [pc, #24]	; (8006694 <I2C_RequestMemoryRead+0x1cc>)
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f000 f863 	bl	8006746 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e000      	b.n	800668c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3718      	adds	r7, #24
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	00010002 	.word	0x00010002

08006698 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	603b      	str	r3, [r7, #0]
 80066a4:	4613      	mov	r3, r2
 80066a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066a8:	e025      	b.n	80066f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b0:	d021      	beq.n	80066f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066b2:	f7fd fad5 	bl	8003c60 <HAL_GetTick>
 80066b6:	4602      	mov	r2, r0
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	683a      	ldr	r2, [r7, #0]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d302      	bcc.n	80066c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d116      	bne.n	80066f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2220      	movs	r2, #32
 80066d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e2:	f043 0220 	orr.w	r2, r3, #32
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e023      	b.n	800673e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	0c1b      	lsrs	r3, r3, #16
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d10d      	bne.n	800671c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	43da      	mvns	r2, r3
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	4013      	ands	r3, r2
 800670c:	b29b      	uxth	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	bf0c      	ite	eq
 8006712:	2301      	moveq	r3, #1
 8006714:	2300      	movne	r3, #0
 8006716:	b2db      	uxtb	r3, r3
 8006718:	461a      	mov	r2, r3
 800671a:	e00c      	b.n	8006736 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	43da      	mvns	r2, r3
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	4013      	ands	r3, r2
 8006728:	b29b      	uxth	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	bf0c      	ite	eq
 800672e:	2301      	moveq	r3, #1
 8006730:	2300      	movne	r3, #0
 8006732:	b2db      	uxtb	r3, r3
 8006734:	461a      	mov	r2, r3
 8006736:	79fb      	ldrb	r3, [r7, #7]
 8006738:	429a      	cmp	r2, r3
 800673a:	d0b6      	beq.n	80066aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b084      	sub	sp, #16
 800674a:	af00      	add	r7, sp, #0
 800674c:	60f8      	str	r0, [r7, #12]
 800674e:	60b9      	str	r1, [r7, #8]
 8006750:	607a      	str	r2, [r7, #4]
 8006752:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006754:	e051      	b.n	80067fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	695b      	ldr	r3, [r3, #20]
 800675c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006764:	d123      	bne.n	80067ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006774:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800677e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2220      	movs	r2, #32
 800678a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679a:	f043 0204 	orr.w	r2, r3, #4
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e046      	b.n	800683c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b4:	d021      	beq.n	80067fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067b6:	f7fd fa53 	bl	8003c60 <HAL_GetTick>
 80067ba:	4602      	mov	r2, r0
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d302      	bcc.n	80067cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d116      	bne.n	80067fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2200      	movs	r2, #0
 80067d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2220      	movs	r2, #32
 80067d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e6:	f043 0220 	orr.w	r2, r3, #32
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e020      	b.n	800683c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	0c1b      	lsrs	r3, r3, #16
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b01      	cmp	r3, #1
 8006802:	d10c      	bne.n	800681e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	43da      	mvns	r2, r3
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	4013      	ands	r3, r2
 8006810:	b29b      	uxth	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	bf14      	ite	ne
 8006816:	2301      	movne	r3, #1
 8006818:	2300      	moveq	r3, #0
 800681a:	b2db      	uxtb	r3, r3
 800681c:	e00b      	b.n	8006836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	43da      	mvns	r2, r3
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	4013      	ands	r3, r2
 800682a:	b29b      	uxth	r3, r3
 800682c:	2b00      	cmp	r3, #0
 800682e:	bf14      	ite	ne
 8006830:	2301      	movne	r3, #1
 8006832:	2300      	moveq	r3, #0
 8006834:	b2db      	uxtb	r3, r3
 8006836:	2b00      	cmp	r3, #0
 8006838:	d18d      	bne.n	8006756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006850:	e02d      	b.n	80068ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f000 f8ce 	bl	80069f4 <I2C_IsAcknowledgeFailed>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d001      	beq.n	8006862 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e02d      	b.n	80068be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006868:	d021      	beq.n	80068ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800686a:	f7fd f9f9 	bl	8003c60 <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	429a      	cmp	r2, r3
 8006878:	d302      	bcc.n	8006880 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d116      	bne.n	80068ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2220      	movs	r2, #32
 800688a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689a:	f043 0220 	orr.w	r2, r3, #32
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e007      	b.n	80068be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b8:	2b80      	cmp	r3, #128	; 0x80
 80068ba:	d1ca      	bne.n	8006852 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b084      	sub	sp, #16
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	60f8      	str	r0, [r7, #12]
 80068ce:	60b9      	str	r1, [r7, #8]
 80068d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068d2:	e02d      	b.n	8006930 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f000 f88d 	bl	80069f4 <I2C_IsAcknowledgeFailed>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d001      	beq.n	80068e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e02d      	b.n	8006940 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ea:	d021      	beq.n	8006930 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ec:	f7fd f9b8 	bl	8003c60 <HAL_GetTick>
 80068f0:	4602      	mov	r2, r0
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d302      	bcc.n	8006902 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d116      	bne.n	8006930 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2220      	movs	r2, #32
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691c:	f043 0220 	orr.w	r2, r3, #32
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e007      	b.n	8006940 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	f003 0304 	and.w	r3, r3, #4
 800693a:	2b04      	cmp	r3, #4
 800693c:	d1ca      	bne.n	80068d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006954:	e042      	b.n	80069dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	f003 0310 	and.w	r3, r3, #16
 8006960:	2b10      	cmp	r3, #16
 8006962:	d119      	bne.n	8006998 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f06f 0210 	mvn.w	r2, #16
 800696c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2220      	movs	r2, #32
 8006978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e029      	b.n	80069ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006998:	f7fd f962 	bl	8003c60 <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	68ba      	ldr	r2, [r7, #8]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d302      	bcc.n	80069ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d116      	bne.n	80069dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2220      	movs	r2, #32
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c8:	f043 0220 	orr.w	r2, r3, #32
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e007      	b.n	80069ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e6:	2b40      	cmp	r3, #64	; 0x40
 80069e8:	d1b5      	bne.n	8006956 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a0a:	d11b      	bne.n	8006a44 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a14:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2220      	movs	r2, #32
 8006a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a30:	f043 0204 	orr.w	r2, r3, #4
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e000      	b.n	8006a46 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	370c      	adds	r7, #12
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
	...

08006a54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d101      	bne.n	8006a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e267      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d075      	beq.n	8006b5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a72:	4b88      	ldr	r3, [pc, #544]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	f003 030c 	and.w	r3, r3, #12
 8006a7a:	2b04      	cmp	r3, #4
 8006a7c:	d00c      	beq.n	8006a98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a7e:	4b85      	ldr	r3, [pc, #532]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a86:	2b08      	cmp	r3, #8
 8006a88:	d112      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a8a:	4b82      	ldr	r3, [pc, #520]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a96:	d10b      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a98:	4b7e      	ldr	r3, [pc, #504]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d05b      	beq.n	8006b5c <HAL_RCC_OscConfig+0x108>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d157      	bne.n	8006b5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e242      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ab8:	d106      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x74>
 8006aba:	4b76      	ldr	r3, [pc, #472]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a75      	ldr	r2, [pc, #468]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ac4:	6013      	str	r3, [r2, #0]
 8006ac6:	e01d      	b.n	8006b04 <HAL_RCC_OscConfig+0xb0>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ad0:	d10c      	bne.n	8006aec <HAL_RCC_OscConfig+0x98>
 8006ad2:	4b70      	ldr	r3, [pc, #448]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a6f      	ldr	r2, [pc, #444]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006adc:	6013      	str	r3, [r2, #0]
 8006ade:	4b6d      	ldr	r3, [pc, #436]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a6c      	ldr	r2, [pc, #432]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ae8:	6013      	str	r3, [r2, #0]
 8006aea:	e00b      	b.n	8006b04 <HAL_RCC_OscConfig+0xb0>
 8006aec:	4b69      	ldr	r3, [pc, #420]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a68      	ldr	r2, [pc, #416]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006af6:	6013      	str	r3, [r2, #0]
 8006af8:	4b66      	ldr	r3, [pc, #408]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a65      	ldr	r2, [pc, #404]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d013      	beq.n	8006b34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b0c:	f7fd f8a8 	bl	8003c60 <HAL_GetTick>
 8006b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b12:	e008      	b.n	8006b26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b14:	f7fd f8a4 	bl	8003c60 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	2b64      	cmp	r3, #100	; 0x64
 8006b20:	d901      	bls.n	8006b26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e207      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b26:	4b5b      	ldr	r3, [pc, #364]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d0f0      	beq.n	8006b14 <HAL_RCC_OscConfig+0xc0>
 8006b32:	e014      	b.n	8006b5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b34:	f7fd f894 	bl	8003c60 <HAL_GetTick>
 8006b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b3a:	e008      	b.n	8006b4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b3c:	f7fd f890 	bl	8003c60 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b64      	cmp	r3, #100	; 0x64
 8006b48:	d901      	bls.n	8006b4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e1f3      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b4e:	4b51      	ldr	r3, [pc, #324]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1f0      	bne.n	8006b3c <HAL_RCC_OscConfig+0xe8>
 8006b5a:	e000      	b.n	8006b5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0302 	and.w	r3, r3, #2
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d063      	beq.n	8006c32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b6a:	4b4a      	ldr	r3, [pc, #296]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f003 030c 	and.w	r3, r3, #12
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00b      	beq.n	8006b8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b76:	4b47      	ldr	r3, [pc, #284]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b7e:	2b08      	cmp	r3, #8
 8006b80:	d11c      	bne.n	8006bbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b82:	4b44      	ldr	r3, [pc, #272]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d116      	bne.n	8006bbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b8e:	4b41      	ldr	r3, [pc, #260]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d005      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x152>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d001      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e1c7      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ba6:	4b3b      	ldr	r3, [pc, #236]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	00db      	lsls	r3, r3, #3
 8006bb4:	4937      	ldr	r1, [pc, #220]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bba:	e03a      	b.n	8006c32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d020      	beq.n	8006c06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bc4:	4b34      	ldr	r3, [pc, #208]	; (8006c98 <HAL_RCC_OscConfig+0x244>)
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bca:	f7fd f849 	bl	8003c60 <HAL_GetTick>
 8006bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bd0:	e008      	b.n	8006be4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bd2:	f7fd f845 	bl	8003c60 <HAL_GetTick>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d901      	bls.n	8006be4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e1a8      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006be4:	4b2b      	ldr	r3, [pc, #172]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0302 	and.w	r3, r3, #2
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d0f0      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bf0:	4b28      	ldr	r3, [pc, #160]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	00db      	lsls	r3, r3, #3
 8006bfe:	4925      	ldr	r1, [pc, #148]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006c00:	4313      	orrs	r3, r2
 8006c02:	600b      	str	r3, [r1, #0]
 8006c04:	e015      	b.n	8006c32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c06:	4b24      	ldr	r3, [pc, #144]	; (8006c98 <HAL_RCC_OscConfig+0x244>)
 8006c08:	2200      	movs	r2, #0
 8006c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c0c:	f7fd f828 	bl	8003c60 <HAL_GetTick>
 8006c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c12:	e008      	b.n	8006c26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c14:	f7fd f824 	bl	8003c60 <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d901      	bls.n	8006c26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e187      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c26:	4b1b      	ldr	r3, [pc, #108]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0302 	and.w	r3, r3, #2
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1f0      	bne.n	8006c14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0308 	and.w	r3, r3, #8
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d036      	beq.n	8006cac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d016      	beq.n	8006c74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c46:	4b15      	ldr	r3, [pc, #84]	; (8006c9c <HAL_RCC_OscConfig+0x248>)
 8006c48:	2201      	movs	r2, #1
 8006c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c4c:	f7fd f808 	bl	8003c60 <HAL_GetTick>
 8006c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c52:	e008      	b.n	8006c66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c54:	f7fd f804 	bl	8003c60 <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d901      	bls.n	8006c66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e167      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c66:	4b0b      	ldr	r3, [pc, #44]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d0f0      	beq.n	8006c54 <HAL_RCC_OscConfig+0x200>
 8006c72:	e01b      	b.n	8006cac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c74:	4b09      	ldr	r3, [pc, #36]	; (8006c9c <HAL_RCC_OscConfig+0x248>)
 8006c76:	2200      	movs	r2, #0
 8006c78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c7a:	f7fc fff1 	bl	8003c60 <HAL_GetTick>
 8006c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c80:	e00e      	b.n	8006ca0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c82:	f7fc ffed 	bl	8003c60 <HAL_GetTick>
 8006c86:	4602      	mov	r2, r0
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d907      	bls.n	8006ca0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e150      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
 8006c94:	40023800 	.word	0x40023800
 8006c98:	42470000 	.word	0x42470000
 8006c9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ca0:	4b88      	ldr	r3, [pc, #544]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ca4:	f003 0302 	and.w	r3, r3, #2
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1ea      	bne.n	8006c82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0304 	and.w	r3, r3, #4
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f000 8097 	beq.w	8006de8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cbe:	4b81      	ldr	r3, [pc, #516]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d10f      	bne.n	8006cea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60bb      	str	r3, [r7, #8]
 8006cce:	4b7d      	ldr	r3, [pc, #500]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd2:	4a7c      	ldr	r2, [pc, #496]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8006cda:	4b7a      	ldr	r3, [pc, #488]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ce2:	60bb      	str	r3, [r7, #8]
 8006ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cea:	4b77      	ldr	r3, [pc, #476]	; (8006ec8 <HAL_RCC_OscConfig+0x474>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d118      	bne.n	8006d28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cf6:	4b74      	ldr	r3, [pc, #464]	; (8006ec8 <HAL_RCC_OscConfig+0x474>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a73      	ldr	r2, [pc, #460]	; (8006ec8 <HAL_RCC_OscConfig+0x474>)
 8006cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d02:	f7fc ffad 	bl	8003c60 <HAL_GetTick>
 8006d06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d08:	e008      	b.n	8006d1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d0a:	f7fc ffa9 	bl	8003c60 <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d901      	bls.n	8006d1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e10c      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d1c:	4b6a      	ldr	r3, [pc, #424]	; (8006ec8 <HAL_RCC_OscConfig+0x474>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d0f0      	beq.n	8006d0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d106      	bne.n	8006d3e <HAL_RCC_OscConfig+0x2ea>
 8006d30:	4b64      	ldr	r3, [pc, #400]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d34:	4a63      	ldr	r2, [pc, #396]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d36:	f043 0301 	orr.w	r3, r3, #1
 8006d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8006d3c:	e01c      	b.n	8006d78 <HAL_RCC_OscConfig+0x324>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	2b05      	cmp	r3, #5
 8006d44:	d10c      	bne.n	8006d60 <HAL_RCC_OscConfig+0x30c>
 8006d46:	4b5f      	ldr	r3, [pc, #380]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d4a:	4a5e      	ldr	r2, [pc, #376]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d4c:	f043 0304 	orr.w	r3, r3, #4
 8006d50:	6713      	str	r3, [r2, #112]	; 0x70
 8006d52:	4b5c      	ldr	r3, [pc, #368]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d56:	4a5b      	ldr	r2, [pc, #364]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d58:	f043 0301 	orr.w	r3, r3, #1
 8006d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8006d5e:	e00b      	b.n	8006d78 <HAL_RCC_OscConfig+0x324>
 8006d60:	4b58      	ldr	r3, [pc, #352]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d64:	4a57      	ldr	r2, [pc, #348]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d66:	f023 0301 	bic.w	r3, r3, #1
 8006d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8006d6c:	4b55      	ldr	r3, [pc, #340]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d70:	4a54      	ldr	r2, [pc, #336]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d72:	f023 0304 	bic.w	r3, r3, #4
 8006d76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d015      	beq.n	8006dac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d80:	f7fc ff6e 	bl	8003c60 <HAL_GetTick>
 8006d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d86:	e00a      	b.n	8006d9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d88:	f7fc ff6a 	bl	8003c60 <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d901      	bls.n	8006d9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e0cb      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d9e:	4b49      	ldr	r3, [pc, #292]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d0ee      	beq.n	8006d88 <HAL_RCC_OscConfig+0x334>
 8006daa:	e014      	b.n	8006dd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dac:	f7fc ff58 	bl	8003c60 <HAL_GetTick>
 8006db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006db2:	e00a      	b.n	8006dca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006db4:	f7fc ff54 	bl	8003c60 <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d901      	bls.n	8006dca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e0b5      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dca:	4b3e      	ldr	r3, [pc, #248]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1ee      	bne.n	8006db4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006dd6:	7dfb      	ldrb	r3, [r7, #23]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d105      	bne.n	8006de8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ddc:	4b39      	ldr	r3, [pc, #228]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de0:	4a38      	ldr	r2, [pc, #224]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006de2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006de6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 80a1 	beq.w	8006f34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006df2:	4b34      	ldr	r3, [pc, #208]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f003 030c 	and.w	r3, r3, #12
 8006dfa:	2b08      	cmp	r3, #8
 8006dfc:	d05c      	beq.n	8006eb8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d141      	bne.n	8006e8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e06:	4b31      	ldr	r3, [pc, #196]	; (8006ecc <HAL_RCC_OscConfig+0x478>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e0c:	f7fc ff28 	bl	8003c60 <HAL_GetTick>
 8006e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e12:	e008      	b.n	8006e26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e14:	f7fc ff24 	bl	8003c60 <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d901      	bls.n	8006e26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e087      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e26:	4b27      	ldr	r3, [pc, #156]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1f0      	bne.n	8006e14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	69da      	ldr	r2, [r3, #28]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e40:	019b      	lsls	r3, r3, #6
 8006e42:	431a      	orrs	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e48:	085b      	lsrs	r3, r3, #1
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	041b      	lsls	r3, r3, #16
 8006e4e:	431a      	orrs	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e54:	061b      	lsls	r3, r3, #24
 8006e56:	491b      	ldr	r1, [pc, #108]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e5c:	4b1b      	ldr	r3, [pc, #108]	; (8006ecc <HAL_RCC_OscConfig+0x478>)
 8006e5e:	2201      	movs	r2, #1
 8006e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e62:	f7fc fefd 	bl	8003c60 <HAL_GetTick>
 8006e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e68:	e008      	b.n	8006e7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e6a:	f7fc fef9 	bl	8003c60 <HAL_GetTick>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	d901      	bls.n	8006e7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	e05c      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e7c:	4b11      	ldr	r3, [pc, #68]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d0f0      	beq.n	8006e6a <HAL_RCC_OscConfig+0x416>
 8006e88:	e054      	b.n	8006f34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e8a:	4b10      	ldr	r3, [pc, #64]	; (8006ecc <HAL_RCC_OscConfig+0x478>)
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e90:	f7fc fee6 	bl	8003c60 <HAL_GetTick>
 8006e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e96:	e008      	b.n	8006eaa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e98:	f7fc fee2 	bl	8003c60 <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d901      	bls.n	8006eaa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e045      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eaa:	4b06      	ldr	r3, [pc, #24]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1f0      	bne.n	8006e98 <HAL_RCC_OscConfig+0x444>
 8006eb6:	e03d      	b.n	8006f34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d107      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e038      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
 8006ec4:	40023800 	.word	0x40023800
 8006ec8:	40007000 	.word	0x40007000
 8006ecc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ed0:	4b1b      	ldr	r3, [pc, #108]	; (8006f40 <HAL_RCC_OscConfig+0x4ec>)
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d028      	beq.n	8006f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d121      	bne.n	8006f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d11a      	bne.n	8006f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f00:	4013      	ands	r3, r2
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d111      	bne.n	8006f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f16:	085b      	lsrs	r3, r3, #1
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d107      	bne.n	8006f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d001      	beq.n	8006f34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e000      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3718      	adds	r7, #24
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	40023800 	.word	0x40023800

08006f44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d101      	bne.n	8006f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e0cc      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f58:	4b68      	ldr	r3, [pc, #416]	; (80070fc <HAL_RCC_ClockConfig+0x1b8>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0307 	and.w	r3, r3, #7
 8006f60:	683a      	ldr	r2, [r7, #0]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d90c      	bls.n	8006f80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f66:	4b65      	ldr	r3, [pc, #404]	; (80070fc <HAL_RCC_ClockConfig+0x1b8>)
 8006f68:	683a      	ldr	r2, [r7, #0]
 8006f6a:	b2d2      	uxtb	r2, r2
 8006f6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f6e:	4b63      	ldr	r3, [pc, #396]	; (80070fc <HAL_RCC_ClockConfig+0x1b8>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0307 	and.w	r3, r3, #7
 8006f76:	683a      	ldr	r2, [r7, #0]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d001      	beq.n	8006f80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e0b8      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0302 	and.w	r3, r3, #2
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d020      	beq.n	8006fce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0304 	and.w	r3, r3, #4
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d005      	beq.n	8006fa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f98:	4b59      	ldr	r3, [pc, #356]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	4a58      	ldr	r2, [pc, #352]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006f9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006fa2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0308 	and.w	r3, r3, #8
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d005      	beq.n	8006fbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fb0:	4b53      	ldr	r3, [pc, #332]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	4a52      	ldr	r2, [pc, #328]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006fba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fbc:	4b50      	ldr	r3, [pc, #320]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	494d      	ldr	r1, [pc, #308]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0301 	and.w	r3, r3, #1
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d044      	beq.n	8007064 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d107      	bne.n	8006ff2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fe2:	4b47      	ldr	r3, [pc, #284]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d119      	bne.n	8007022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e07f      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d003      	beq.n	8007002 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d107      	bne.n	8007012 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007002:	4b3f      	ldr	r3, [pc, #252]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d109      	bne.n	8007022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e06f      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007012:	4b3b      	ldr	r3, [pc, #236]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0302 	and.w	r3, r3, #2
 800701a:	2b00      	cmp	r3, #0
 800701c:	d101      	bne.n	8007022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e067      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007022:	4b37      	ldr	r3, [pc, #220]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f023 0203 	bic.w	r2, r3, #3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	4934      	ldr	r1, [pc, #208]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8007030:	4313      	orrs	r3, r2
 8007032:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007034:	f7fc fe14 	bl	8003c60 <HAL_GetTick>
 8007038:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800703a:	e00a      	b.n	8007052 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800703c:	f7fc fe10 	bl	8003c60 <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	f241 3288 	movw	r2, #5000	; 0x1388
 800704a:	4293      	cmp	r3, r2
 800704c:	d901      	bls.n	8007052 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e04f      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007052:	4b2b      	ldr	r3, [pc, #172]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f003 020c 	and.w	r2, r3, #12
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	429a      	cmp	r2, r3
 8007062:	d1eb      	bne.n	800703c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007064:	4b25      	ldr	r3, [pc, #148]	; (80070fc <HAL_RCC_ClockConfig+0x1b8>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 0307 	and.w	r3, r3, #7
 800706c:	683a      	ldr	r2, [r7, #0]
 800706e:	429a      	cmp	r2, r3
 8007070:	d20c      	bcs.n	800708c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007072:	4b22      	ldr	r3, [pc, #136]	; (80070fc <HAL_RCC_ClockConfig+0x1b8>)
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	b2d2      	uxtb	r2, r2
 8007078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800707a:	4b20      	ldr	r3, [pc, #128]	; (80070fc <HAL_RCC_ClockConfig+0x1b8>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0307 	and.w	r3, r3, #7
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	429a      	cmp	r2, r3
 8007086:	d001      	beq.n	800708c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e032      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0304 	and.w	r3, r3, #4
 8007094:	2b00      	cmp	r3, #0
 8007096:	d008      	beq.n	80070aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007098:	4b19      	ldr	r3, [pc, #100]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	4916      	ldr	r1, [pc, #88]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 0308 	and.w	r3, r3, #8
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d009      	beq.n	80070ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070b6:	4b12      	ldr	r3, [pc, #72]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	00db      	lsls	r3, r3, #3
 80070c4:	490e      	ldr	r1, [pc, #56]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80070ca:	f000 f821 	bl	8007110 <HAL_RCC_GetSysClockFreq>
 80070ce:	4602      	mov	r2, r0
 80070d0:	4b0b      	ldr	r3, [pc, #44]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	091b      	lsrs	r3, r3, #4
 80070d6:	f003 030f 	and.w	r3, r3, #15
 80070da:	490a      	ldr	r1, [pc, #40]	; (8007104 <HAL_RCC_ClockConfig+0x1c0>)
 80070dc:	5ccb      	ldrb	r3, [r1, r3]
 80070de:	fa22 f303 	lsr.w	r3, r2, r3
 80070e2:	4a09      	ldr	r2, [pc, #36]	; (8007108 <HAL_RCC_ClockConfig+0x1c4>)
 80070e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80070e6:	4b09      	ldr	r3, [pc, #36]	; (800710c <HAL_RCC_ClockConfig+0x1c8>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7fc fd74 	bl	8003bd8 <HAL_InitTick>

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	40023c00 	.word	0x40023c00
 8007100:	40023800 	.word	0x40023800
 8007104:	08009de0 	.word	0x08009de0
 8007108:	200006ec 	.word	0x200006ec
 800710c:	200006f0 	.word	0x200006f0

08007110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007114:	b090      	sub	sp, #64	; 0x40
 8007116:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007118:	2300      	movs	r3, #0
 800711a:	637b      	str	r3, [r7, #52]	; 0x34
 800711c:	2300      	movs	r3, #0
 800711e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007120:	2300      	movs	r3, #0
 8007122:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007124:	2300      	movs	r3, #0
 8007126:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007128:	4b59      	ldr	r3, [pc, #356]	; (8007290 <HAL_RCC_GetSysClockFreq+0x180>)
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f003 030c 	and.w	r3, r3, #12
 8007130:	2b08      	cmp	r3, #8
 8007132:	d00d      	beq.n	8007150 <HAL_RCC_GetSysClockFreq+0x40>
 8007134:	2b08      	cmp	r3, #8
 8007136:	f200 80a1 	bhi.w	800727c <HAL_RCC_GetSysClockFreq+0x16c>
 800713a:	2b00      	cmp	r3, #0
 800713c:	d002      	beq.n	8007144 <HAL_RCC_GetSysClockFreq+0x34>
 800713e:	2b04      	cmp	r3, #4
 8007140:	d003      	beq.n	800714a <HAL_RCC_GetSysClockFreq+0x3a>
 8007142:	e09b      	b.n	800727c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007144:	4b53      	ldr	r3, [pc, #332]	; (8007294 <HAL_RCC_GetSysClockFreq+0x184>)
 8007146:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007148:	e09b      	b.n	8007282 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800714a:	4b53      	ldr	r3, [pc, #332]	; (8007298 <HAL_RCC_GetSysClockFreq+0x188>)
 800714c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800714e:	e098      	b.n	8007282 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007150:	4b4f      	ldr	r3, [pc, #316]	; (8007290 <HAL_RCC_GetSysClockFreq+0x180>)
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007158:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800715a:	4b4d      	ldr	r3, [pc, #308]	; (8007290 <HAL_RCC_GetSysClockFreq+0x180>)
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d028      	beq.n	80071b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007166:	4b4a      	ldr	r3, [pc, #296]	; (8007290 <HAL_RCC_GetSysClockFreq+0x180>)
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	099b      	lsrs	r3, r3, #6
 800716c:	2200      	movs	r2, #0
 800716e:	623b      	str	r3, [r7, #32]
 8007170:	627a      	str	r2, [r7, #36]	; 0x24
 8007172:	6a3b      	ldr	r3, [r7, #32]
 8007174:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007178:	2100      	movs	r1, #0
 800717a:	4b47      	ldr	r3, [pc, #284]	; (8007298 <HAL_RCC_GetSysClockFreq+0x188>)
 800717c:	fb03 f201 	mul.w	r2, r3, r1
 8007180:	2300      	movs	r3, #0
 8007182:	fb00 f303 	mul.w	r3, r0, r3
 8007186:	4413      	add	r3, r2
 8007188:	4a43      	ldr	r2, [pc, #268]	; (8007298 <HAL_RCC_GetSysClockFreq+0x188>)
 800718a:	fba0 1202 	umull	r1, r2, r0, r2
 800718e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007190:	460a      	mov	r2, r1
 8007192:	62ba      	str	r2, [r7, #40]	; 0x28
 8007194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007196:	4413      	add	r3, r2
 8007198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800719a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800719c:	2200      	movs	r2, #0
 800719e:	61bb      	str	r3, [r7, #24]
 80071a0:	61fa      	str	r2, [r7, #28]
 80071a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80071aa:	f7f9 fb4b 	bl	8000844 <__aeabi_uldivmod>
 80071ae:	4602      	mov	r2, r0
 80071b0:	460b      	mov	r3, r1
 80071b2:	4613      	mov	r3, r2
 80071b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071b6:	e053      	b.n	8007260 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071b8:	4b35      	ldr	r3, [pc, #212]	; (8007290 <HAL_RCC_GetSysClockFreq+0x180>)
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	099b      	lsrs	r3, r3, #6
 80071be:	2200      	movs	r2, #0
 80071c0:	613b      	str	r3, [r7, #16]
 80071c2:	617a      	str	r2, [r7, #20]
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80071ca:	f04f 0b00 	mov.w	fp, #0
 80071ce:	4652      	mov	r2, sl
 80071d0:	465b      	mov	r3, fp
 80071d2:	f04f 0000 	mov.w	r0, #0
 80071d6:	f04f 0100 	mov.w	r1, #0
 80071da:	0159      	lsls	r1, r3, #5
 80071dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80071e0:	0150      	lsls	r0, r2, #5
 80071e2:	4602      	mov	r2, r0
 80071e4:	460b      	mov	r3, r1
 80071e6:	ebb2 080a 	subs.w	r8, r2, sl
 80071ea:	eb63 090b 	sbc.w	r9, r3, fp
 80071ee:	f04f 0200 	mov.w	r2, #0
 80071f2:	f04f 0300 	mov.w	r3, #0
 80071f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80071fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80071fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007202:	ebb2 0408 	subs.w	r4, r2, r8
 8007206:	eb63 0509 	sbc.w	r5, r3, r9
 800720a:	f04f 0200 	mov.w	r2, #0
 800720e:	f04f 0300 	mov.w	r3, #0
 8007212:	00eb      	lsls	r3, r5, #3
 8007214:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007218:	00e2      	lsls	r2, r4, #3
 800721a:	4614      	mov	r4, r2
 800721c:	461d      	mov	r5, r3
 800721e:	eb14 030a 	adds.w	r3, r4, sl
 8007222:	603b      	str	r3, [r7, #0]
 8007224:	eb45 030b 	adc.w	r3, r5, fp
 8007228:	607b      	str	r3, [r7, #4]
 800722a:	f04f 0200 	mov.w	r2, #0
 800722e:	f04f 0300 	mov.w	r3, #0
 8007232:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007236:	4629      	mov	r1, r5
 8007238:	028b      	lsls	r3, r1, #10
 800723a:	4621      	mov	r1, r4
 800723c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007240:	4621      	mov	r1, r4
 8007242:	028a      	lsls	r2, r1, #10
 8007244:	4610      	mov	r0, r2
 8007246:	4619      	mov	r1, r3
 8007248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800724a:	2200      	movs	r2, #0
 800724c:	60bb      	str	r3, [r7, #8]
 800724e:	60fa      	str	r2, [r7, #12]
 8007250:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007254:	f7f9 faf6 	bl	8000844 <__aeabi_uldivmod>
 8007258:	4602      	mov	r2, r0
 800725a:	460b      	mov	r3, r1
 800725c:	4613      	mov	r3, r2
 800725e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007260:	4b0b      	ldr	r3, [pc, #44]	; (8007290 <HAL_RCC_GetSysClockFreq+0x180>)
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	0c1b      	lsrs	r3, r3, #16
 8007266:	f003 0303 	and.w	r3, r3, #3
 800726a:	3301      	adds	r3, #1
 800726c:	005b      	lsls	r3, r3, #1
 800726e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007270:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007274:	fbb2 f3f3 	udiv	r3, r2, r3
 8007278:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800727a:	e002      	b.n	8007282 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800727c:	4b05      	ldr	r3, [pc, #20]	; (8007294 <HAL_RCC_GetSysClockFreq+0x184>)
 800727e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007280:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007284:	4618      	mov	r0, r3
 8007286:	3740      	adds	r7, #64	; 0x40
 8007288:	46bd      	mov	sp, r7
 800728a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800728e:	bf00      	nop
 8007290:	40023800 	.word	0x40023800
 8007294:	00f42400 	.word	0x00f42400
 8007298:	017d7840 	.word	0x017d7840

0800729c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800729c:	b480      	push	{r7}
 800729e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072a0:	4b03      	ldr	r3, [pc, #12]	; (80072b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80072a2:	681b      	ldr	r3, [r3, #0]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	200006ec 	.word	0x200006ec

080072b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80072b8:	f7ff fff0 	bl	800729c <HAL_RCC_GetHCLKFreq>
 80072bc:	4602      	mov	r2, r0
 80072be:	4b05      	ldr	r3, [pc, #20]	; (80072d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	0a9b      	lsrs	r3, r3, #10
 80072c4:	f003 0307 	and.w	r3, r3, #7
 80072c8:	4903      	ldr	r1, [pc, #12]	; (80072d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072ca:	5ccb      	ldrb	r3, [r1, r3]
 80072cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	40023800 	.word	0x40023800
 80072d8:	08009df0 	.word	0x08009df0

080072dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d101      	bne.n	80072ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e07b      	b.n	80073e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d108      	bne.n	8007308 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072fe:	d009      	beq.n	8007314 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	61da      	str	r2, [r3, #28]
 8007306:	e005      	b.n	8007314 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b00      	cmp	r3, #0
 8007324:	d106      	bne.n	8007334 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7fc fa56 	bl	80037e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2202      	movs	r2, #2
 8007338:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800734a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800735c:	431a      	orrs	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007366:	431a      	orrs	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	f003 0302 	and.w	r3, r3, #2
 8007370:	431a      	orrs	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	695b      	ldr	r3, [r3, #20]
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	431a      	orrs	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007384:	431a      	orrs	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	69db      	ldr	r3, [r3, #28]
 800738a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800738e:	431a      	orrs	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a1b      	ldr	r3, [r3, #32]
 8007394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007398:	ea42 0103 	orr.w	r1, r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	430a      	orrs	r2, r1
 80073aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	0c1b      	lsrs	r3, r3, #16
 80073b2:	f003 0104 	and.w	r1, r3, #4
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ba:	f003 0210 	and.w	r2, r3, #16
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	430a      	orrs	r2, r1
 80073c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	69da      	ldr	r2, [r3, #28]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3708      	adds	r7, #8
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b088      	sub	sp, #32
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	60f8      	str	r0, [r7, #12]
 80073f6:	60b9      	str	r1, [r7, #8]
 80073f8:	603b      	str	r3, [r7, #0]
 80073fa:	4613      	mov	r3, r2
 80073fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80073fe:	2300      	movs	r3, #0
 8007400:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007408:	2b01      	cmp	r3, #1
 800740a:	d101      	bne.n	8007410 <HAL_SPI_Transmit+0x22>
 800740c:	2302      	movs	r3, #2
 800740e:	e126      	b.n	800765e <HAL_SPI_Transmit+0x270>
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007418:	f7fc fc22 	bl	8003c60 <HAL_GetTick>
 800741c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800741e:	88fb      	ldrh	r3, [r7, #6]
 8007420:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007428:	b2db      	uxtb	r3, r3
 800742a:	2b01      	cmp	r3, #1
 800742c:	d002      	beq.n	8007434 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800742e:	2302      	movs	r3, #2
 8007430:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007432:	e10b      	b.n	800764c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d002      	beq.n	8007440 <HAL_SPI_Transmit+0x52>
 800743a:	88fb      	ldrh	r3, [r7, #6]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d102      	bne.n	8007446 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007444:	e102      	b.n	800764c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2203      	movs	r2, #3
 800744a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	68ba      	ldr	r2, [r7, #8]
 8007458:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	88fa      	ldrh	r2, [r7, #6]
 800745e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	88fa      	ldrh	r2, [r7, #6]
 8007464:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2200      	movs	r2, #0
 800747c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800748c:	d10f      	bne.n	80074ae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800749c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b8:	2b40      	cmp	r3, #64	; 0x40
 80074ba:	d007      	beq.n	80074cc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074d4:	d14b      	bne.n	800756e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d002      	beq.n	80074e4 <HAL_SPI_Transmit+0xf6>
 80074de:	8afb      	ldrh	r3, [r7, #22]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d13e      	bne.n	8007562 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e8:	881a      	ldrh	r2, [r3, #0]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f4:	1c9a      	adds	r2, r3, #2
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074fe:	b29b      	uxth	r3, r3
 8007500:	3b01      	subs	r3, #1
 8007502:	b29a      	uxth	r2, r3
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007508:	e02b      	b.n	8007562 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f003 0302 	and.w	r3, r3, #2
 8007514:	2b02      	cmp	r3, #2
 8007516:	d112      	bne.n	800753e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751c:	881a      	ldrh	r2, [r3, #0]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007528:	1c9a      	adds	r2, r3, #2
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007532:	b29b      	uxth	r3, r3
 8007534:	3b01      	subs	r3, #1
 8007536:	b29a      	uxth	r2, r3
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	86da      	strh	r2, [r3, #54]	; 0x36
 800753c:	e011      	b.n	8007562 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800753e:	f7fc fb8f 	bl	8003c60 <HAL_GetTick>
 8007542:	4602      	mov	r2, r0
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	683a      	ldr	r2, [r7, #0]
 800754a:	429a      	cmp	r2, r3
 800754c:	d803      	bhi.n	8007556 <HAL_SPI_Transmit+0x168>
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007554:	d102      	bne.n	800755c <HAL_SPI_Transmit+0x16e>
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d102      	bne.n	8007562 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800755c:	2303      	movs	r3, #3
 800755e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007560:	e074      	b.n	800764c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007566:	b29b      	uxth	r3, r3
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1ce      	bne.n	800750a <HAL_SPI_Transmit+0x11c>
 800756c:	e04c      	b.n	8007608 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d002      	beq.n	800757c <HAL_SPI_Transmit+0x18e>
 8007576:	8afb      	ldrh	r3, [r7, #22]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d140      	bne.n	80075fe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	330c      	adds	r3, #12
 8007586:	7812      	ldrb	r2, [r2, #0]
 8007588:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758e:	1c5a      	adds	r2, r3, #1
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007598:	b29b      	uxth	r3, r3
 800759a:	3b01      	subs	r3, #1
 800759c:	b29a      	uxth	r2, r3
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80075a2:	e02c      	b.n	80075fe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f003 0302 	and.w	r3, r3, #2
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d113      	bne.n	80075da <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	330c      	adds	r3, #12
 80075bc:	7812      	ldrb	r2, [r2, #0]
 80075be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c4:	1c5a      	adds	r2, r3, #1
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	3b01      	subs	r3, #1
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80075d8:	e011      	b.n	80075fe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075da:	f7fc fb41 	bl	8003c60 <HAL_GetTick>
 80075de:	4602      	mov	r2, r0
 80075e0:	69bb      	ldr	r3, [r7, #24]
 80075e2:	1ad3      	subs	r3, r2, r3
 80075e4:	683a      	ldr	r2, [r7, #0]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d803      	bhi.n	80075f2 <HAL_SPI_Transmit+0x204>
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f0:	d102      	bne.n	80075f8 <HAL_SPI_Transmit+0x20a>
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d102      	bne.n	80075fe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80075fc:	e026      	b.n	800764c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007602:	b29b      	uxth	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1cd      	bne.n	80075a4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007608:	69ba      	ldr	r2, [r7, #24]
 800760a:	6839      	ldr	r1, [r7, #0]
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f000 fbcb 	bl	8007da8 <SPI_EndRxTxTransaction>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d002      	beq.n	800761e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2220      	movs	r2, #32
 800761c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10a      	bne.n	800763c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007626:	2300      	movs	r3, #0
 8007628:	613b      	str	r3, [r7, #16]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	613b      	str	r3, [r7, #16]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	613b      	str	r3, [r7, #16]
 800763a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007640:	2b00      	cmp	r3, #0
 8007642:	d002      	beq.n	800764a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	77fb      	strb	r3, [r7, #31]
 8007648:	e000      	b.n	800764c <HAL_SPI_Transmit+0x25e>
  }

error:
 800764a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800765c:	7ffb      	ldrb	r3, [r7, #31]
}
 800765e:	4618      	mov	r0, r3
 8007660:	3720      	adds	r7, #32
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b088      	sub	sp, #32
 800766a:	af02      	add	r7, sp, #8
 800766c:	60f8      	str	r0, [r7, #12]
 800766e:	60b9      	str	r1, [r7, #8]
 8007670:	603b      	str	r3, [r7, #0]
 8007672:	4613      	mov	r3, r2
 8007674:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007676:	2300      	movs	r3, #0
 8007678:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007682:	d112      	bne.n	80076aa <HAL_SPI_Receive+0x44>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d10e      	bne.n	80076aa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2204      	movs	r2, #4
 8007690:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007694:	88fa      	ldrh	r2, [r7, #6]
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	4613      	mov	r3, r2
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	68b9      	ldr	r1, [r7, #8]
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f000 f8f1 	bl	8007888 <HAL_SPI_TransmitReceive>
 80076a6:	4603      	mov	r3, r0
 80076a8:	e0ea      	b.n	8007880 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d101      	bne.n	80076b8 <HAL_SPI_Receive+0x52>
 80076b4:	2302      	movs	r3, #2
 80076b6:	e0e3      	b.n	8007880 <HAL_SPI_Receive+0x21a>
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076c0:	f7fc face 	bl	8003c60 <HAL_GetTick>
 80076c4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d002      	beq.n	80076d8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80076d2:	2302      	movs	r3, #2
 80076d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80076d6:	e0ca      	b.n	800786e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d002      	beq.n	80076e4 <HAL_SPI_Receive+0x7e>
 80076de:	88fb      	ldrh	r3, [r7, #6]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d102      	bne.n	80076ea <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80076e8:	e0c1      	b.n	800786e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2204      	movs	r2, #4
 80076ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	68ba      	ldr	r2, [r7, #8]
 80076fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	88fa      	ldrh	r2, [r7, #6]
 8007702:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	88fa      	ldrh	r2, [r7, #6]
 8007708:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007730:	d10f      	bne.n	8007752 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007740:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007750:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800775c:	2b40      	cmp	r3, #64	; 0x40
 800775e:	d007      	beq.n	8007770 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800776e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d162      	bne.n	800783e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007778:	e02e      	b.n	80077d8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f003 0301 	and.w	r3, r3, #1
 8007784:	2b01      	cmp	r3, #1
 8007786:	d115      	bne.n	80077b4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f103 020c 	add.w	r2, r3, #12
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007794:	7812      	ldrb	r2, [r2, #0]
 8007796:	b2d2      	uxtb	r2, r2
 8007798:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779e:	1c5a      	adds	r2, r3, #1
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	3b01      	subs	r3, #1
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80077b2:	e011      	b.n	80077d8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077b4:	f7fc fa54 	bl	8003c60 <HAL_GetTick>
 80077b8:	4602      	mov	r2, r0
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d803      	bhi.n	80077cc <HAL_SPI_Receive+0x166>
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ca:	d102      	bne.n	80077d2 <HAL_SPI_Receive+0x16c>
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d102      	bne.n	80077d8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80077d2:	2303      	movs	r3, #3
 80077d4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80077d6:	e04a      	b.n	800786e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077dc:	b29b      	uxth	r3, r3
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1cb      	bne.n	800777a <HAL_SPI_Receive+0x114>
 80077e2:	e031      	b.n	8007848 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d113      	bne.n	800781a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68da      	ldr	r2, [r3, #12]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fc:	b292      	uxth	r2, r2
 80077fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007804:	1c9a      	adds	r2, r3, #2
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800780e:	b29b      	uxth	r3, r3
 8007810:	3b01      	subs	r3, #1
 8007812:	b29a      	uxth	r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007818:	e011      	b.n	800783e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800781a:	f7fc fa21 	bl	8003c60 <HAL_GetTick>
 800781e:	4602      	mov	r2, r0
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	683a      	ldr	r2, [r7, #0]
 8007826:	429a      	cmp	r2, r3
 8007828:	d803      	bhi.n	8007832 <HAL_SPI_Receive+0x1cc>
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007830:	d102      	bne.n	8007838 <HAL_SPI_Receive+0x1d2>
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d102      	bne.n	800783e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007838:	2303      	movs	r3, #3
 800783a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800783c:	e017      	b.n	800786e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007842:	b29b      	uxth	r3, r3
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1cd      	bne.n	80077e4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007848:	693a      	ldr	r2, [r7, #16]
 800784a:	6839      	ldr	r1, [r7, #0]
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f000 fa45 	bl	8007cdc <SPI_EndRxTransaction>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2220      	movs	r2, #32
 800785c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007862:	2b00      	cmp	r3, #0
 8007864:	d002      	beq.n	800786c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	75fb      	strb	r3, [r7, #23]
 800786a:	e000      	b.n	800786e <HAL_SPI_Receive+0x208>
  }

error :
 800786c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2201      	movs	r2, #1
 8007872:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800787e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3718      	adds	r7, #24
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b08c      	sub	sp, #48	; 0x30
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	607a      	str	r2, [r7, #4]
 8007894:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007896:	2301      	movs	r3, #1
 8007898:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800789a:	2300      	movs	r3, #0
 800789c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d101      	bne.n	80078ae <HAL_SPI_TransmitReceive+0x26>
 80078aa:	2302      	movs	r3, #2
 80078ac:	e18a      	b.n	8007bc4 <HAL_SPI_TransmitReceive+0x33c>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078b6:	f7fc f9d3 	bl	8003c60 <HAL_GetTick>
 80078ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80078cc:	887b      	ldrh	r3, [r7, #2]
 80078ce:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80078d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d00f      	beq.n	80078f8 <HAL_SPI_TransmitReceive+0x70>
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078de:	d107      	bne.n	80078f0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d103      	bne.n	80078f0 <HAL_SPI_TransmitReceive+0x68>
 80078e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078ec:	2b04      	cmp	r3, #4
 80078ee:	d003      	beq.n	80078f8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80078f0:	2302      	movs	r3, #2
 80078f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80078f6:	e15b      	b.n	8007bb0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d005      	beq.n	800790a <HAL_SPI_TransmitReceive+0x82>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d002      	beq.n	800790a <HAL_SPI_TransmitReceive+0x82>
 8007904:	887b      	ldrh	r3, [r7, #2]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d103      	bne.n	8007912 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007910:	e14e      	b.n	8007bb0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007918:	b2db      	uxtb	r3, r3
 800791a:	2b04      	cmp	r3, #4
 800791c:	d003      	beq.n	8007926 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2205      	movs	r2, #5
 8007922:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	887a      	ldrh	r2, [r7, #2]
 8007936:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	887a      	ldrh	r2, [r7, #2]
 800793c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	68ba      	ldr	r2, [r7, #8]
 8007942:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	887a      	ldrh	r2, [r7, #2]
 8007948:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	887a      	ldrh	r2, [r7, #2]
 800794e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007966:	2b40      	cmp	r3, #64	; 0x40
 8007968:	d007      	beq.n	800797a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007978:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007982:	d178      	bne.n	8007a76 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d002      	beq.n	8007992 <HAL_SPI_TransmitReceive+0x10a>
 800798c:	8b7b      	ldrh	r3, [r7, #26]
 800798e:	2b01      	cmp	r3, #1
 8007990:	d166      	bne.n	8007a60 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007996:	881a      	ldrh	r2, [r3, #0]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a2:	1c9a      	adds	r2, r3, #2
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	3b01      	subs	r3, #1
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079b6:	e053      	b.n	8007a60 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	f003 0302 	and.w	r3, r3, #2
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d11b      	bne.n	80079fe <HAL_SPI_TransmitReceive+0x176>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d016      	beq.n	80079fe <HAL_SPI_TransmitReceive+0x176>
 80079d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d113      	bne.n	80079fe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079da:	881a      	ldrh	r2, [r3, #0]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e6:	1c9a      	adds	r2, r3, #2
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	3b01      	subs	r3, #1
 80079f4:	b29a      	uxth	r2, r3
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079fa:	2300      	movs	r3, #0
 80079fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	f003 0301 	and.w	r3, r3, #1
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d119      	bne.n	8007a40 <HAL_SPI_TransmitReceive+0x1b8>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d014      	beq.n	8007a40 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68da      	ldr	r2, [r3, #12]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a20:	b292      	uxth	r2, r2
 8007a22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a28:	1c9a      	adds	r2, r3, #2
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	3b01      	subs	r3, #1
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a40:	f7fc f90e 	bl	8003c60 <HAL_GetTick>
 8007a44:	4602      	mov	r2, r0
 8007a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d807      	bhi.n	8007a60 <HAL_SPI_TransmitReceive+0x1d8>
 8007a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a56:	d003      	beq.n	8007a60 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007a5e:	e0a7      	b.n	8007bb0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1a6      	bne.n	80079b8 <HAL_SPI_TransmitReceive+0x130>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1a1      	bne.n	80079b8 <HAL_SPI_TransmitReceive+0x130>
 8007a74:	e07c      	b.n	8007b70 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d002      	beq.n	8007a84 <HAL_SPI_TransmitReceive+0x1fc>
 8007a7e:	8b7b      	ldrh	r3, [r7, #26]
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d16b      	bne.n	8007b5c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	330c      	adds	r3, #12
 8007a8e:	7812      	ldrb	r2, [r2, #0]
 8007a90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a96:	1c5a      	adds	r2, r3, #1
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007aaa:	e057      	b.n	8007b5c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d11c      	bne.n	8007af4 <HAL_SPI_TransmitReceive+0x26c>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d017      	beq.n	8007af4 <HAL_SPI_TransmitReceive+0x26c>
 8007ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d114      	bne.n	8007af4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	330c      	adds	r3, #12
 8007ad4:	7812      	ldrb	r2, [r2, #0]
 8007ad6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007adc:	1c5a      	adds	r2, r3, #1
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	b29a      	uxth	r2, r3
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007af0:	2300      	movs	r3, #0
 8007af2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d119      	bne.n	8007b36 <HAL_SPI_TransmitReceive+0x2ae>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d014      	beq.n	8007b36 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68da      	ldr	r2, [r3, #12]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b16:	b2d2      	uxtb	r2, r2
 8007b18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1e:	1c5a      	adds	r2, r3, #1
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b32:	2301      	movs	r3, #1
 8007b34:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007b36:	f7fc f893 	bl	8003c60 <HAL_GetTick>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d803      	bhi.n	8007b4e <HAL_SPI_TransmitReceive+0x2c6>
 8007b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b4c:	d102      	bne.n	8007b54 <HAL_SPI_TransmitReceive+0x2cc>
 8007b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d103      	bne.n	8007b5c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007b54:	2303      	movs	r3, #3
 8007b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007b5a:	e029      	b.n	8007bb0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d1a2      	bne.n	8007aac <HAL_SPI_TransmitReceive+0x224>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d19d      	bne.n	8007aac <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f000 f917 	bl	8007da8 <SPI_EndRxTxTransaction>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d006      	beq.n	8007b8e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2220      	movs	r2, #32
 8007b8a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007b8c:	e010      	b.n	8007bb0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10b      	bne.n	8007bae <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b96:	2300      	movs	r3, #0
 8007b98:	617b      	str	r3, [r7, #20]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	617b      	str	r3, [r7, #20]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	617b      	str	r3, [r7, #20]
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	e000      	b.n	8007bb0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007bae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007bc0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3730      	adds	r7, #48	; 0x30
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b088      	sub	sp, #32
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	603b      	str	r3, [r7, #0]
 8007bd8:	4613      	mov	r3, r2
 8007bda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007bdc:	f7fc f840 	bl	8003c60 <HAL_GetTick>
 8007be0:	4602      	mov	r2, r0
 8007be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be4:	1a9b      	subs	r3, r3, r2
 8007be6:	683a      	ldr	r2, [r7, #0]
 8007be8:	4413      	add	r3, r2
 8007bea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007bec:	f7fc f838 	bl	8003c60 <HAL_GetTick>
 8007bf0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007bf2:	4b39      	ldr	r3, [pc, #228]	; (8007cd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	015b      	lsls	r3, r3, #5
 8007bf8:	0d1b      	lsrs	r3, r3, #20
 8007bfa:	69fa      	ldr	r2, [r7, #28]
 8007bfc:	fb02 f303 	mul.w	r3, r2, r3
 8007c00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c02:	e054      	b.n	8007cae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c0a:	d050      	beq.n	8007cae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c0c:	f7fc f828 	bl	8003c60 <HAL_GetTick>
 8007c10:	4602      	mov	r2, r0
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	69fa      	ldr	r2, [r7, #28]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d902      	bls.n	8007c22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d13d      	bne.n	8007c9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	685a      	ldr	r2, [r3, #4]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c3a:	d111      	bne.n	8007c60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c44:	d004      	beq.n	8007c50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c4e:	d107      	bne.n	8007c60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c68:	d10f      	bne.n	8007c8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c78:	601a      	str	r2, [r3, #0]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e017      	b.n	8007cce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d101      	bne.n	8007ca8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	3b01      	subs	r3, #1
 8007cac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	689a      	ldr	r2, [r3, #8]
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	68ba      	ldr	r2, [r7, #8]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	bf0c      	ite	eq
 8007cbe:	2301      	moveq	r3, #1
 8007cc0:	2300      	movne	r3, #0
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	79fb      	ldrb	r3, [r7, #7]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d19b      	bne.n	8007c04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3720      	adds	r7, #32
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	200006ec 	.word	0x200006ec

08007cdc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af02      	add	r7, sp, #8
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cf0:	d111      	bne.n	8007d16 <SPI_EndRxTransaction+0x3a>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cfa:	d004      	beq.n	8007d06 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d04:	d107      	bne.n	8007d16 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d14:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d1e:	d12a      	bne.n	8007d76 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d28:	d012      	beq.n	8007d50 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	9300      	str	r3, [sp, #0]
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	2200      	movs	r2, #0
 8007d32:	2180      	movs	r1, #128	; 0x80
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f7ff ff49 	bl	8007bcc <SPI_WaitFlagStateUntilTimeout>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d02d      	beq.n	8007d9c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d44:	f043 0220 	orr.w	r2, r3, #32
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	e026      	b.n	8007d9e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	9300      	str	r3, [sp, #0]
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	2200      	movs	r2, #0
 8007d58:	2101      	movs	r1, #1
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f7ff ff36 	bl	8007bcc <SPI_WaitFlagStateUntilTimeout>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d01a      	beq.n	8007d9c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d6a:	f043 0220 	orr.w	r2, r3, #32
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007d72:	2303      	movs	r3, #3
 8007d74:	e013      	b.n	8007d9e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	2101      	movs	r1, #1
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f7ff ff23 	bl	8007bcc <SPI_WaitFlagStateUntilTimeout>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d007      	beq.n	8007d9c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d90:	f043 0220 	orr.w	r2, r3, #32
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007d98:	2303      	movs	r3, #3
 8007d9a:	e000      	b.n	8007d9e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
	...

08007da8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b088      	sub	sp, #32
 8007dac:	af02      	add	r7, sp, #8
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007db4:	4b1b      	ldr	r3, [pc, #108]	; (8007e24 <SPI_EndRxTxTransaction+0x7c>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a1b      	ldr	r2, [pc, #108]	; (8007e28 <SPI_EndRxTxTransaction+0x80>)
 8007dba:	fba2 2303 	umull	r2, r3, r2, r3
 8007dbe:	0d5b      	lsrs	r3, r3, #21
 8007dc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007dc4:	fb02 f303 	mul.w	r3, r2, r3
 8007dc8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007dd2:	d112      	bne.n	8007dfa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	2180      	movs	r1, #128	; 0x80
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f7ff fef4 	bl	8007bcc <SPI_WaitFlagStateUntilTimeout>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d016      	beq.n	8007e18 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dee:	f043 0220 	orr.w	r2, r3, #32
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e00f      	b.n	8007e1a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00a      	beq.n	8007e16 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	3b01      	subs	r3, #1
 8007e04:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e10:	2b80      	cmp	r3, #128	; 0x80
 8007e12:	d0f2      	beq.n	8007dfa <SPI_EndRxTxTransaction+0x52>
 8007e14:	e000      	b.n	8007e18 <SPI_EndRxTxTransaction+0x70>
        break;
 8007e16:	bf00      	nop
  }

  return HAL_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3718      	adds	r7, #24
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	200006ec 	.word	0x200006ec
 8007e28:	165e9f81 	.word	0x165e9f81

08007e2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d101      	bne.n	8007e3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e041      	b.n	8007ec2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d106      	bne.n	8007e58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f7fb fdbe 	bl	80039d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	3304      	adds	r3, #4
 8007e68:	4619      	mov	r1, r3
 8007e6a:	4610      	mov	r0, r2
 8007e6c:	f000 fd54 	bl	8008918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3708      	adds	r7, #8
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
	...

08007ecc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d001      	beq.n	8007ee4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e03c      	b.n	8007f5e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a1e      	ldr	r2, [pc, #120]	; (8007f6c <HAL_TIM_Base_Start+0xa0>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d018      	beq.n	8007f28 <HAL_TIM_Base_Start+0x5c>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007efe:	d013      	beq.n	8007f28 <HAL_TIM_Base_Start+0x5c>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a1a      	ldr	r2, [pc, #104]	; (8007f70 <HAL_TIM_Base_Start+0xa4>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d00e      	beq.n	8007f28 <HAL_TIM_Base_Start+0x5c>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a19      	ldr	r2, [pc, #100]	; (8007f74 <HAL_TIM_Base_Start+0xa8>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d009      	beq.n	8007f28 <HAL_TIM_Base_Start+0x5c>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a17      	ldr	r2, [pc, #92]	; (8007f78 <HAL_TIM_Base_Start+0xac>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d004      	beq.n	8007f28 <HAL_TIM_Base_Start+0x5c>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a16      	ldr	r2, [pc, #88]	; (8007f7c <HAL_TIM_Base_Start+0xb0>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d111      	bne.n	8007f4c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	f003 0307 	and.w	r3, r3, #7
 8007f32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2b06      	cmp	r3, #6
 8007f38:	d010      	beq.n	8007f5c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f042 0201 	orr.w	r2, r2, #1
 8007f48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f4a:	e007      	b.n	8007f5c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f042 0201 	orr.w	r2, r2, #1
 8007f5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3714      	adds	r7, #20
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	40010000 	.word	0x40010000
 8007f70:	40000400 	.word	0x40000400
 8007f74:	40000800 	.word	0x40000800
 8007f78:	40000c00 	.word	0x40000c00
 8007f7c:	40014000 	.word	0x40014000

08007f80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d001      	beq.n	8007f98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f94:	2301      	movs	r3, #1
 8007f96:	e044      	b.n	8008022 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2202      	movs	r2, #2
 8007f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68da      	ldr	r2, [r3, #12]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f042 0201 	orr.w	r2, r2, #1
 8007fae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a1e      	ldr	r2, [pc, #120]	; (8008030 <HAL_TIM_Base_Start_IT+0xb0>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d018      	beq.n	8007fec <HAL_TIM_Base_Start_IT+0x6c>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fc2:	d013      	beq.n	8007fec <HAL_TIM_Base_Start_IT+0x6c>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a1a      	ldr	r2, [pc, #104]	; (8008034 <HAL_TIM_Base_Start_IT+0xb4>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d00e      	beq.n	8007fec <HAL_TIM_Base_Start_IT+0x6c>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a19      	ldr	r2, [pc, #100]	; (8008038 <HAL_TIM_Base_Start_IT+0xb8>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d009      	beq.n	8007fec <HAL_TIM_Base_Start_IT+0x6c>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a17      	ldr	r2, [pc, #92]	; (800803c <HAL_TIM_Base_Start_IT+0xbc>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d004      	beq.n	8007fec <HAL_TIM_Base_Start_IT+0x6c>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a16      	ldr	r2, [pc, #88]	; (8008040 <HAL_TIM_Base_Start_IT+0xc0>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d111      	bne.n	8008010 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	f003 0307 	and.w	r3, r3, #7
 8007ff6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2b06      	cmp	r3, #6
 8007ffc:	d010      	beq.n	8008020 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f042 0201 	orr.w	r2, r2, #1
 800800c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800800e:	e007      	b.n	8008020 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f042 0201 	orr.w	r2, r2, #1
 800801e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3714      	adds	r7, #20
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	40010000 	.word	0x40010000
 8008034:	40000400 	.word	0x40000400
 8008038:	40000800 	.word	0x40000800
 800803c:	40000c00 	.word	0x40000c00
 8008040:	40014000 	.word	0x40014000

08008044 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d101      	bne.n	8008056 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	e041      	b.n	80080da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800805c:	b2db      	uxtb	r3, r3
 800805e:	2b00      	cmp	r3, #0
 8008060:	d106      	bne.n	8008070 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f839 	bl	80080e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2202      	movs	r2, #2
 8008074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	3304      	adds	r3, #4
 8008080:	4619      	mov	r1, r3
 8008082:	4610      	mov	r0, r2
 8008084:	f000 fc48 	bl	8008918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3708      	adds	r7, #8
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80080e2:	b480      	push	{r7}
 80080e4:	b083      	sub	sp, #12
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80080ea:	bf00      	nop
 80080ec:	370c      	adds	r7, #12
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
	...

080080f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d109      	bne.n	800811c <HAL_TIM_PWM_Start+0x24>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800810e:	b2db      	uxtb	r3, r3
 8008110:	2b01      	cmp	r3, #1
 8008112:	bf14      	ite	ne
 8008114:	2301      	movne	r3, #1
 8008116:	2300      	moveq	r3, #0
 8008118:	b2db      	uxtb	r3, r3
 800811a:	e022      	b.n	8008162 <HAL_TIM_PWM_Start+0x6a>
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	2b04      	cmp	r3, #4
 8008120:	d109      	bne.n	8008136 <HAL_TIM_PWM_Start+0x3e>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008128:	b2db      	uxtb	r3, r3
 800812a:	2b01      	cmp	r3, #1
 800812c:	bf14      	ite	ne
 800812e:	2301      	movne	r3, #1
 8008130:	2300      	moveq	r3, #0
 8008132:	b2db      	uxtb	r3, r3
 8008134:	e015      	b.n	8008162 <HAL_TIM_PWM_Start+0x6a>
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	2b08      	cmp	r3, #8
 800813a:	d109      	bne.n	8008150 <HAL_TIM_PWM_Start+0x58>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008142:	b2db      	uxtb	r3, r3
 8008144:	2b01      	cmp	r3, #1
 8008146:	bf14      	ite	ne
 8008148:	2301      	movne	r3, #1
 800814a:	2300      	moveq	r3, #0
 800814c:	b2db      	uxtb	r3, r3
 800814e:	e008      	b.n	8008162 <HAL_TIM_PWM_Start+0x6a>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008156:	b2db      	uxtb	r3, r3
 8008158:	2b01      	cmp	r3, #1
 800815a:	bf14      	ite	ne
 800815c:	2301      	movne	r3, #1
 800815e:	2300      	moveq	r3, #0
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	d001      	beq.n	800816a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	e068      	b.n	800823c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d104      	bne.n	800817a <HAL_TIM_PWM_Start+0x82>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2202      	movs	r2, #2
 8008174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008178:	e013      	b.n	80081a2 <HAL_TIM_PWM_Start+0xaa>
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	2b04      	cmp	r3, #4
 800817e:	d104      	bne.n	800818a <HAL_TIM_PWM_Start+0x92>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2202      	movs	r2, #2
 8008184:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008188:	e00b      	b.n	80081a2 <HAL_TIM_PWM_Start+0xaa>
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	2b08      	cmp	r3, #8
 800818e:	d104      	bne.n	800819a <HAL_TIM_PWM_Start+0xa2>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2202      	movs	r2, #2
 8008194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008198:	e003      	b.n	80081a2 <HAL_TIM_PWM_Start+0xaa>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2202      	movs	r2, #2
 800819e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2201      	movs	r2, #1
 80081a8:	6839      	ldr	r1, [r7, #0]
 80081aa:	4618      	mov	r0, r3
 80081ac:	f000 fe5a 	bl	8008e64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a23      	ldr	r2, [pc, #140]	; (8008244 <HAL_TIM_PWM_Start+0x14c>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d107      	bne.n	80081ca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a1d      	ldr	r2, [pc, #116]	; (8008244 <HAL_TIM_PWM_Start+0x14c>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d018      	beq.n	8008206 <HAL_TIM_PWM_Start+0x10e>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081dc:	d013      	beq.n	8008206 <HAL_TIM_PWM_Start+0x10e>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a19      	ldr	r2, [pc, #100]	; (8008248 <HAL_TIM_PWM_Start+0x150>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d00e      	beq.n	8008206 <HAL_TIM_PWM_Start+0x10e>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a17      	ldr	r2, [pc, #92]	; (800824c <HAL_TIM_PWM_Start+0x154>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d009      	beq.n	8008206 <HAL_TIM_PWM_Start+0x10e>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a16      	ldr	r2, [pc, #88]	; (8008250 <HAL_TIM_PWM_Start+0x158>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d004      	beq.n	8008206 <HAL_TIM_PWM_Start+0x10e>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a14      	ldr	r2, [pc, #80]	; (8008254 <HAL_TIM_PWM_Start+0x15c>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d111      	bne.n	800822a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	f003 0307 	and.w	r3, r3, #7
 8008210:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2b06      	cmp	r3, #6
 8008216:	d010      	beq.n	800823a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f042 0201 	orr.w	r2, r2, #1
 8008226:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008228:	e007      	b.n	800823a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f042 0201 	orr.w	r2, r2, #1
 8008238:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800823a:	2300      	movs	r3, #0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	40010000 	.word	0x40010000
 8008248:	40000400 	.word	0x40000400
 800824c:	40000800 	.word	0x40000800
 8008250:	40000c00 	.word	0x40000c00
 8008254:	40014000 	.word	0x40014000

08008258 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b086      	sub	sp, #24
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d101      	bne.n	800826c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008268:	2301      	movs	r3, #1
 800826a:	e097      	b.n	800839c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008272:	b2db      	uxtb	r3, r3
 8008274:	2b00      	cmp	r3, #0
 8008276:	d106      	bne.n	8008286 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f7fb fb2b 	bl	80038dc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2202      	movs	r2, #2
 800828a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	6812      	ldr	r2, [r2, #0]
 8008298:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800829c:	f023 0307 	bic.w	r3, r3, #7
 80082a0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	3304      	adds	r3, #4
 80082aa:	4619      	mov	r1, r3
 80082ac:	4610      	mov	r0, r2
 80082ae:	f000 fb33 	bl	8008918 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	6a1b      	ldr	r3, [r3, #32]
 80082c8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082da:	f023 0303 	bic.w	r3, r3, #3
 80082de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	689a      	ldr	r2, [r3, #8]
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	021b      	lsls	r3, r3, #8
 80082ea:	4313      	orrs	r3, r2
 80082ec:	693a      	ldr	r2, [r7, #16]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80082f8:	f023 030c 	bic.w	r3, r3, #12
 80082fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008304:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008308:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	68da      	ldr	r2, [r3, #12]
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	69db      	ldr	r3, [r3, #28]
 8008312:	021b      	lsls	r3, r3, #8
 8008314:	4313      	orrs	r3, r2
 8008316:	693a      	ldr	r2, [r7, #16]
 8008318:	4313      	orrs	r3, r2
 800831a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	011a      	lsls	r2, r3, #4
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	6a1b      	ldr	r3, [r3, #32]
 8008326:	031b      	lsls	r3, r3, #12
 8008328:	4313      	orrs	r3, r2
 800832a:	693a      	ldr	r2, [r7, #16]
 800832c:	4313      	orrs	r3, r2
 800832e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008336:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800833e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	685a      	ldr	r2, [r3, #4]
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	695b      	ldr	r3, [r3, #20]
 8008348:	011b      	lsls	r3, r3, #4
 800834a:	4313      	orrs	r3, r2
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	4313      	orrs	r3, r2
 8008350:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	697a      	ldr	r2, [r7, #20]
 8008358:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	693a      	ldr	r2, [r7, #16]
 8008360:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2201      	movs	r2, #1
 800836e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2201      	movs	r2, #1
 8008376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2201      	movs	r2, #1
 800837e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2201      	movs	r2, #1
 8008386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2201      	movs	r2, #1
 800838e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2201      	movs	r2, #1
 8008396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3718      	adds	r7, #24
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	f003 0302 	and.w	r3, r3, #2
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d122      	bne.n	8008400 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	f003 0302 	and.w	r3, r3, #2
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d11b      	bne.n	8008400 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f06f 0202 	mvn.w	r2, #2
 80083d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2201      	movs	r2, #1
 80083d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	699b      	ldr	r3, [r3, #24]
 80083de:	f003 0303 	and.w	r3, r3, #3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d003      	beq.n	80083ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 fa77 	bl	80088da <HAL_TIM_IC_CaptureCallback>
 80083ec:	e005      	b.n	80083fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 fa69 	bl	80088c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 fa7a 	bl	80088ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	f003 0304 	and.w	r3, r3, #4
 800840a:	2b04      	cmp	r3, #4
 800840c:	d122      	bne.n	8008454 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	f003 0304 	and.w	r3, r3, #4
 8008418:	2b04      	cmp	r3, #4
 800841a:	d11b      	bne.n	8008454 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f06f 0204 	mvn.w	r2, #4
 8008424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2202      	movs	r2, #2
 800842a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	699b      	ldr	r3, [r3, #24]
 8008432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008436:	2b00      	cmp	r3, #0
 8008438:	d003      	beq.n	8008442 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 fa4d 	bl	80088da <HAL_TIM_IC_CaptureCallback>
 8008440:	e005      	b.n	800844e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 fa3f 	bl	80088c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fa50 	bl	80088ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	f003 0308 	and.w	r3, r3, #8
 800845e:	2b08      	cmp	r3, #8
 8008460:	d122      	bne.n	80084a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	f003 0308 	and.w	r3, r3, #8
 800846c:	2b08      	cmp	r3, #8
 800846e:	d11b      	bne.n	80084a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f06f 0208 	mvn.w	r2, #8
 8008478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2204      	movs	r2, #4
 800847e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	69db      	ldr	r3, [r3, #28]
 8008486:	f003 0303 	and.w	r3, r3, #3
 800848a:	2b00      	cmp	r3, #0
 800848c:	d003      	beq.n	8008496 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fa23 	bl	80088da <HAL_TIM_IC_CaptureCallback>
 8008494:	e005      	b.n	80084a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fa15 	bl	80088c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 fa26 	bl	80088ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	f003 0310 	and.w	r3, r3, #16
 80084b2:	2b10      	cmp	r3, #16
 80084b4:	d122      	bne.n	80084fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	f003 0310 	and.w	r3, r3, #16
 80084c0:	2b10      	cmp	r3, #16
 80084c2:	d11b      	bne.n	80084fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f06f 0210 	mvn.w	r2, #16
 80084cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2208      	movs	r2, #8
 80084d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	69db      	ldr	r3, [r3, #28]
 80084da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d003      	beq.n	80084ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f9f9 	bl	80088da <HAL_TIM_IC_CaptureCallback>
 80084e8:	e005      	b.n	80084f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 f9eb 	bl	80088c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f9fc 	bl	80088ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	f003 0301 	and.w	r3, r3, #1
 8008506:	2b01      	cmp	r3, #1
 8008508:	d10e      	bne.n	8008528 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	f003 0301 	and.w	r3, r3, #1
 8008514:	2b01      	cmp	r3, #1
 8008516:	d107      	bne.n	8008528 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f06f 0201 	mvn.w	r2, #1
 8008520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f7f8 fb4e 	bl	8000bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008532:	2b80      	cmp	r3, #128	; 0x80
 8008534:	d10e      	bne.n	8008554 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008540:	2b80      	cmp	r3, #128	; 0x80
 8008542:	d107      	bne.n	8008554 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800854c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fd26 	bl	8008fa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800855e:	2b40      	cmp	r3, #64	; 0x40
 8008560:	d10e      	bne.n	8008580 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800856c:	2b40      	cmp	r3, #64	; 0x40
 800856e:	d107      	bne.n	8008580 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f9c1 	bl	8008902 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	691b      	ldr	r3, [r3, #16]
 8008586:	f003 0320 	and.w	r3, r3, #32
 800858a:	2b20      	cmp	r3, #32
 800858c:	d10e      	bne.n	80085ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	f003 0320 	and.w	r3, r3, #32
 8008598:	2b20      	cmp	r3, #32
 800859a:	d107      	bne.n	80085ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f06f 0220 	mvn.w	r2, #32
 80085a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 fcf0 	bl	8008f8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80085ac:	bf00      	nop
 80085ae:	3708      	adds	r7, #8
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b086      	sub	sp, #24
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085c0:	2300      	movs	r3, #0
 80085c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d101      	bne.n	80085d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80085ce:	2302      	movs	r3, #2
 80085d0:	e0ae      	b.n	8008730 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2201      	movs	r2, #1
 80085d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2b0c      	cmp	r3, #12
 80085de:	f200 809f 	bhi.w	8008720 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80085e2:	a201      	add	r2, pc, #4	; (adr r2, 80085e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80085e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e8:	0800861d 	.word	0x0800861d
 80085ec:	08008721 	.word	0x08008721
 80085f0:	08008721 	.word	0x08008721
 80085f4:	08008721 	.word	0x08008721
 80085f8:	0800865d 	.word	0x0800865d
 80085fc:	08008721 	.word	0x08008721
 8008600:	08008721 	.word	0x08008721
 8008604:	08008721 	.word	0x08008721
 8008608:	0800869f 	.word	0x0800869f
 800860c:	08008721 	.word	0x08008721
 8008610:	08008721 	.word	0x08008721
 8008614:	08008721 	.word	0x08008721
 8008618:	080086df 	.word	0x080086df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	68b9      	ldr	r1, [r7, #8]
 8008622:	4618      	mov	r0, r3
 8008624:	f000 f9f8 	bl	8008a18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	699a      	ldr	r2, [r3, #24]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f042 0208 	orr.w	r2, r2, #8
 8008636:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	699a      	ldr	r2, [r3, #24]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f022 0204 	bic.w	r2, r2, #4
 8008646:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	6999      	ldr	r1, [r3, #24]
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	691a      	ldr	r2, [r3, #16]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	430a      	orrs	r2, r1
 8008658:	619a      	str	r2, [r3, #24]
      break;
 800865a:	e064      	b.n	8008726 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	68b9      	ldr	r1, [r7, #8]
 8008662:	4618      	mov	r0, r3
 8008664:	f000 fa3e 	bl	8008ae4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	699a      	ldr	r2, [r3, #24]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	699a      	ldr	r2, [r3, #24]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6999      	ldr	r1, [r3, #24]
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	021a      	lsls	r2, r3, #8
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	430a      	orrs	r2, r1
 800869a:	619a      	str	r2, [r3, #24]
      break;
 800869c:	e043      	b.n	8008726 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68b9      	ldr	r1, [r7, #8]
 80086a4:	4618      	mov	r0, r3
 80086a6:	f000 fa89 	bl	8008bbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	69da      	ldr	r2, [r3, #28]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f042 0208 	orr.w	r2, r2, #8
 80086b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	69da      	ldr	r2, [r3, #28]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f022 0204 	bic.w	r2, r2, #4
 80086c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	69d9      	ldr	r1, [r3, #28]
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	691a      	ldr	r2, [r3, #16]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	430a      	orrs	r2, r1
 80086da:	61da      	str	r2, [r3, #28]
      break;
 80086dc:	e023      	b.n	8008726 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68b9      	ldr	r1, [r7, #8]
 80086e4:	4618      	mov	r0, r3
 80086e6:	f000 fad3 	bl	8008c90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	69da      	ldr	r2, [r3, #28]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	69da      	ldr	r2, [r3, #28]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008708:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	69d9      	ldr	r1, [r3, #28]
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	691b      	ldr	r3, [r3, #16]
 8008714:	021a      	lsls	r2, r3, #8
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	430a      	orrs	r2, r1
 800871c:	61da      	str	r2, [r3, #28]
      break;
 800871e:	e002      	b.n	8008726 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	75fb      	strb	r3, [r7, #23]
      break;
 8008724:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800872e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008730:	4618      	mov	r0, r3
 8008732:	3718      	adds	r7, #24
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008742:	2300      	movs	r3, #0
 8008744:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800874c:	2b01      	cmp	r3, #1
 800874e:	d101      	bne.n	8008754 <HAL_TIM_ConfigClockSource+0x1c>
 8008750:	2302      	movs	r3, #2
 8008752:	e0b4      	b.n	80088be <HAL_TIM_ConfigClockSource+0x186>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2202      	movs	r2, #2
 8008760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800877a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	68ba      	ldr	r2, [r7, #8]
 8008782:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800878c:	d03e      	beq.n	800880c <HAL_TIM_ConfigClockSource+0xd4>
 800878e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008792:	f200 8087 	bhi.w	80088a4 <HAL_TIM_ConfigClockSource+0x16c>
 8008796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800879a:	f000 8086 	beq.w	80088aa <HAL_TIM_ConfigClockSource+0x172>
 800879e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087a2:	d87f      	bhi.n	80088a4 <HAL_TIM_ConfigClockSource+0x16c>
 80087a4:	2b70      	cmp	r3, #112	; 0x70
 80087a6:	d01a      	beq.n	80087de <HAL_TIM_ConfigClockSource+0xa6>
 80087a8:	2b70      	cmp	r3, #112	; 0x70
 80087aa:	d87b      	bhi.n	80088a4 <HAL_TIM_ConfigClockSource+0x16c>
 80087ac:	2b60      	cmp	r3, #96	; 0x60
 80087ae:	d050      	beq.n	8008852 <HAL_TIM_ConfigClockSource+0x11a>
 80087b0:	2b60      	cmp	r3, #96	; 0x60
 80087b2:	d877      	bhi.n	80088a4 <HAL_TIM_ConfigClockSource+0x16c>
 80087b4:	2b50      	cmp	r3, #80	; 0x50
 80087b6:	d03c      	beq.n	8008832 <HAL_TIM_ConfigClockSource+0xfa>
 80087b8:	2b50      	cmp	r3, #80	; 0x50
 80087ba:	d873      	bhi.n	80088a4 <HAL_TIM_ConfigClockSource+0x16c>
 80087bc:	2b40      	cmp	r3, #64	; 0x40
 80087be:	d058      	beq.n	8008872 <HAL_TIM_ConfigClockSource+0x13a>
 80087c0:	2b40      	cmp	r3, #64	; 0x40
 80087c2:	d86f      	bhi.n	80088a4 <HAL_TIM_ConfigClockSource+0x16c>
 80087c4:	2b30      	cmp	r3, #48	; 0x30
 80087c6:	d064      	beq.n	8008892 <HAL_TIM_ConfigClockSource+0x15a>
 80087c8:	2b30      	cmp	r3, #48	; 0x30
 80087ca:	d86b      	bhi.n	80088a4 <HAL_TIM_ConfigClockSource+0x16c>
 80087cc:	2b20      	cmp	r3, #32
 80087ce:	d060      	beq.n	8008892 <HAL_TIM_ConfigClockSource+0x15a>
 80087d0:	2b20      	cmp	r3, #32
 80087d2:	d867      	bhi.n	80088a4 <HAL_TIM_ConfigClockSource+0x16c>
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d05c      	beq.n	8008892 <HAL_TIM_ConfigClockSource+0x15a>
 80087d8:	2b10      	cmp	r3, #16
 80087da:	d05a      	beq.n	8008892 <HAL_TIM_ConfigClockSource+0x15a>
 80087dc:	e062      	b.n	80088a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6818      	ldr	r0, [r3, #0]
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	6899      	ldr	r1, [r3, #8]
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	685a      	ldr	r2, [r3, #4]
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	f000 fb19 	bl	8008e24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008800:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	68ba      	ldr	r2, [r7, #8]
 8008808:	609a      	str	r2, [r3, #8]
      break;
 800880a:	e04f      	b.n	80088ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6818      	ldr	r0, [r3, #0]
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	6899      	ldr	r1, [r3, #8]
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	685a      	ldr	r2, [r3, #4]
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	f000 fb02 	bl	8008e24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	689a      	ldr	r2, [r3, #8]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800882e:	609a      	str	r2, [r3, #8]
      break;
 8008830:	e03c      	b.n	80088ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6818      	ldr	r0, [r3, #0]
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	6859      	ldr	r1, [r3, #4]
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	461a      	mov	r2, r3
 8008840:	f000 fa76 	bl	8008d30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2150      	movs	r1, #80	; 0x50
 800884a:	4618      	mov	r0, r3
 800884c:	f000 facf 	bl	8008dee <TIM_ITRx_SetConfig>
      break;
 8008850:	e02c      	b.n	80088ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6818      	ldr	r0, [r3, #0]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	6859      	ldr	r1, [r3, #4]
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	461a      	mov	r2, r3
 8008860:	f000 fa95 	bl	8008d8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2160      	movs	r1, #96	; 0x60
 800886a:	4618      	mov	r0, r3
 800886c:	f000 fabf 	bl	8008dee <TIM_ITRx_SetConfig>
      break;
 8008870:	e01c      	b.n	80088ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6818      	ldr	r0, [r3, #0]
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	6859      	ldr	r1, [r3, #4]
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	68db      	ldr	r3, [r3, #12]
 800887e:	461a      	mov	r2, r3
 8008880:	f000 fa56 	bl	8008d30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	2140      	movs	r1, #64	; 0x40
 800888a:	4618      	mov	r0, r3
 800888c:	f000 faaf 	bl	8008dee <TIM_ITRx_SetConfig>
      break;
 8008890:	e00c      	b.n	80088ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4619      	mov	r1, r3
 800889c:	4610      	mov	r0, r2
 800889e:	f000 faa6 	bl	8008dee <TIM_ITRx_SetConfig>
      break;
 80088a2:	e003      	b.n	80088ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	73fb      	strb	r3, [r7, #15]
      break;
 80088a8:	e000      	b.n	80088ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80088aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088c6:	b480      	push	{r7}
 80088c8:	b083      	sub	sp, #12
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80088ce:	bf00      	nop
 80088d0:	370c      	adds	r7, #12
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr

080088da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80088da:	b480      	push	{r7}
 80088dc:	b083      	sub	sp, #12
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80088e2:	bf00      	nop
 80088e4:	370c      	adds	r7, #12
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr

080088ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80088ee:	b480      	push	{r7}
 80088f0:	b083      	sub	sp, #12
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80088f6:	bf00      	nop
 80088f8:	370c      	adds	r7, #12
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr

08008902 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008902:	b480      	push	{r7}
 8008904:	b083      	sub	sp, #12
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800890a:	bf00      	nop
 800890c:	370c      	adds	r7, #12
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
	...

08008918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a34      	ldr	r2, [pc, #208]	; (80089fc <TIM_Base_SetConfig+0xe4>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d00f      	beq.n	8008950 <TIM_Base_SetConfig+0x38>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008936:	d00b      	beq.n	8008950 <TIM_Base_SetConfig+0x38>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a31      	ldr	r2, [pc, #196]	; (8008a00 <TIM_Base_SetConfig+0xe8>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d007      	beq.n	8008950 <TIM_Base_SetConfig+0x38>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a30      	ldr	r2, [pc, #192]	; (8008a04 <TIM_Base_SetConfig+0xec>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d003      	beq.n	8008950 <TIM_Base_SetConfig+0x38>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a2f      	ldr	r2, [pc, #188]	; (8008a08 <TIM_Base_SetConfig+0xf0>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d108      	bne.n	8008962 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	4313      	orrs	r3, r2
 8008960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4a25      	ldr	r2, [pc, #148]	; (80089fc <TIM_Base_SetConfig+0xe4>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d01b      	beq.n	80089a2 <TIM_Base_SetConfig+0x8a>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008970:	d017      	beq.n	80089a2 <TIM_Base_SetConfig+0x8a>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4a22      	ldr	r2, [pc, #136]	; (8008a00 <TIM_Base_SetConfig+0xe8>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d013      	beq.n	80089a2 <TIM_Base_SetConfig+0x8a>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4a21      	ldr	r2, [pc, #132]	; (8008a04 <TIM_Base_SetConfig+0xec>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d00f      	beq.n	80089a2 <TIM_Base_SetConfig+0x8a>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a20      	ldr	r2, [pc, #128]	; (8008a08 <TIM_Base_SetConfig+0xf0>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d00b      	beq.n	80089a2 <TIM_Base_SetConfig+0x8a>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4a1f      	ldr	r2, [pc, #124]	; (8008a0c <TIM_Base_SetConfig+0xf4>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d007      	beq.n	80089a2 <TIM_Base_SetConfig+0x8a>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4a1e      	ldr	r2, [pc, #120]	; (8008a10 <TIM_Base_SetConfig+0xf8>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d003      	beq.n	80089a2 <TIM_Base_SetConfig+0x8a>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4a1d      	ldr	r2, [pc, #116]	; (8008a14 <TIM_Base_SetConfig+0xfc>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d108      	bne.n	80089b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	4313      	orrs	r3, r2
 80089b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	695b      	ldr	r3, [r3, #20]
 80089be:	4313      	orrs	r3, r2
 80089c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	68fa      	ldr	r2, [r7, #12]
 80089c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	689a      	ldr	r2, [r3, #8]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	4a08      	ldr	r2, [pc, #32]	; (80089fc <TIM_Base_SetConfig+0xe4>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d103      	bne.n	80089e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	691a      	ldr	r2, [r3, #16]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	615a      	str	r2, [r3, #20]
}
 80089ee:	bf00      	nop
 80089f0:	3714      	adds	r7, #20
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop
 80089fc:	40010000 	.word	0x40010000
 8008a00:	40000400 	.word	0x40000400
 8008a04:	40000800 	.word	0x40000800
 8008a08:	40000c00 	.word	0x40000c00
 8008a0c:	40014000 	.word	0x40014000
 8008a10:	40014400 	.word	0x40014400
 8008a14:	40014800 	.word	0x40014800

08008a18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b087      	sub	sp, #28
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a1b      	ldr	r3, [r3, #32]
 8008a26:	f023 0201 	bic.w	r2, r3, #1
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a1b      	ldr	r3, [r3, #32]
 8008a32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	699b      	ldr	r3, [r3, #24]
 8008a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f023 0303 	bic.w	r3, r3, #3
 8008a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	4313      	orrs	r3, r2
 8008a58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	f023 0302 	bic.w	r3, r3, #2
 8008a60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4a1c      	ldr	r2, [pc, #112]	; (8008ae0 <TIM_OC1_SetConfig+0xc8>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d10c      	bne.n	8008a8e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	f023 0308 	bic.w	r3, r3, #8
 8008a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	697a      	ldr	r2, [r7, #20]
 8008a82:	4313      	orrs	r3, r2
 8008a84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	f023 0304 	bic.w	r3, r3, #4
 8008a8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4a13      	ldr	r2, [pc, #76]	; (8008ae0 <TIM_OC1_SetConfig+0xc8>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d111      	bne.n	8008aba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	695b      	ldr	r3, [r3, #20]
 8008aaa:	693a      	ldr	r2, [r7, #16]
 8008aac:	4313      	orrs	r3, r2
 8008aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	693a      	ldr	r2, [r7, #16]
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	693a      	ldr	r2, [r7, #16]
 8008abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	685a      	ldr	r2, [r3, #4]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	697a      	ldr	r2, [r7, #20]
 8008ad2:	621a      	str	r2, [r3, #32]
}
 8008ad4:	bf00      	nop
 8008ad6:	371c      	adds	r7, #28
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr
 8008ae0:	40010000 	.word	0x40010000

08008ae4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b087      	sub	sp, #28
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6a1b      	ldr	r3, [r3, #32]
 8008af2:	f023 0210 	bic.w	r2, r3, #16
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a1b      	ldr	r3, [r3, #32]
 8008afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	699b      	ldr	r3, [r3, #24]
 8008b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	021b      	lsls	r3, r3, #8
 8008b22:	68fa      	ldr	r2, [r7, #12]
 8008b24:	4313      	orrs	r3, r2
 8008b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	f023 0320 	bic.w	r3, r3, #32
 8008b2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	011b      	lsls	r3, r3, #4
 8008b36:	697a      	ldr	r2, [r7, #20]
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4a1e      	ldr	r2, [pc, #120]	; (8008bb8 <TIM_OC2_SetConfig+0xd4>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d10d      	bne.n	8008b60 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	011b      	lsls	r3, r3, #4
 8008b52:	697a      	ldr	r2, [r7, #20]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4a15      	ldr	r2, [pc, #84]	; (8008bb8 <TIM_OC2_SetConfig+0xd4>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d113      	bne.n	8008b90 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	695b      	ldr	r3, [r3, #20]
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	4313      	orrs	r3, r2
 8008b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	699b      	ldr	r3, [r3, #24]
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	693a      	ldr	r2, [r7, #16]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	693a      	ldr	r2, [r7, #16]
 8008b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	685a      	ldr	r2, [r3, #4]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	697a      	ldr	r2, [r7, #20]
 8008ba8:	621a      	str	r2, [r3, #32]
}
 8008baa:	bf00      	nop
 8008bac:	371c      	adds	r7, #28
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	40010000 	.word	0x40010000

08008bbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b087      	sub	sp, #28
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6a1b      	ldr	r3, [r3, #32]
 8008bca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a1b      	ldr	r3, [r3, #32]
 8008bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	69db      	ldr	r3, [r3, #28]
 8008be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f023 0303 	bic.w	r3, r3, #3
 8008bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	021b      	lsls	r3, r3, #8
 8008c0c:	697a      	ldr	r2, [r7, #20]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4a1d      	ldr	r2, [pc, #116]	; (8008c8c <TIM_OC3_SetConfig+0xd0>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d10d      	bne.n	8008c36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	68db      	ldr	r3, [r3, #12]
 8008c26:	021b      	lsls	r3, r3, #8
 8008c28:	697a      	ldr	r2, [r7, #20]
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a14      	ldr	r2, [pc, #80]	; (8008c8c <TIM_OC3_SetConfig+0xd0>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d113      	bne.n	8008c66 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	695b      	ldr	r3, [r3, #20]
 8008c52:	011b      	lsls	r3, r3, #4
 8008c54:	693a      	ldr	r2, [r7, #16]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	699b      	ldr	r3, [r3, #24]
 8008c5e:	011b      	lsls	r3, r3, #4
 8008c60:	693a      	ldr	r2, [r7, #16]
 8008c62:	4313      	orrs	r3, r2
 8008c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	693a      	ldr	r2, [r7, #16]
 8008c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	685a      	ldr	r2, [r3, #4]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	697a      	ldr	r2, [r7, #20]
 8008c7e:	621a      	str	r2, [r3, #32]
}
 8008c80:	bf00      	nop
 8008c82:	371c      	adds	r7, #28
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr
 8008c8c:	40010000 	.word	0x40010000

08008c90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b087      	sub	sp, #28
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a1b      	ldr	r3, [r3, #32]
 8008c9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6a1b      	ldr	r3, [r3, #32]
 8008caa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	69db      	ldr	r3, [r3, #28]
 8008cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	021b      	lsls	r3, r3, #8
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	031b      	lsls	r3, r3, #12
 8008ce2:	693a      	ldr	r2, [r7, #16]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a10      	ldr	r2, [pc, #64]	; (8008d2c <TIM_OC4_SetConfig+0x9c>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d109      	bne.n	8008d04 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	695b      	ldr	r3, [r3, #20]
 8008cfc:	019b      	lsls	r3, r3, #6
 8008cfe:	697a      	ldr	r2, [r7, #20]
 8008d00:	4313      	orrs	r3, r2
 8008d02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	697a      	ldr	r2, [r7, #20]
 8008d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	685a      	ldr	r2, [r3, #4]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	693a      	ldr	r2, [r7, #16]
 8008d1c:	621a      	str	r2, [r3, #32]
}
 8008d1e:	bf00      	nop
 8008d20:	371c      	adds	r7, #28
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	40010000 	.word	0x40010000

08008d30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b087      	sub	sp, #28
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6a1b      	ldr	r3, [r3, #32]
 8008d40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	6a1b      	ldr	r3, [r3, #32]
 8008d46:	f023 0201 	bic.w	r2, r3, #1
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	699b      	ldr	r3, [r3, #24]
 8008d52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	011b      	lsls	r3, r3, #4
 8008d60:	693a      	ldr	r2, [r7, #16]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	f023 030a 	bic.w	r3, r3, #10
 8008d6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d6e:	697a      	ldr	r2, [r7, #20]
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	693a      	ldr	r2, [r7, #16]
 8008d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	697a      	ldr	r2, [r7, #20]
 8008d80:	621a      	str	r2, [r3, #32]
}
 8008d82:	bf00      	nop
 8008d84:	371c      	adds	r7, #28
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr

08008d8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d8e:	b480      	push	{r7}
 8008d90:	b087      	sub	sp, #28
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	60f8      	str	r0, [r7, #12]
 8008d96:	60b9      	str	r1, [r7, #8]
 8008d98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6a1b      	ldr	r3, [r3, #32]
 8008d9e:	f023 0210 	bic.w	r2, r3, #16
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6a1b      	ldr	r3, [r3, #32]
 8008db0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008db8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	031b      	lsls	r3, r3, #12
 8008dbe:	697a      	ldr	r2, [r7, #20]
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008dca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	011b      	lsls	r3, r3, #4
 8008dd0:	693a      	ldr	r2, [r7, #16]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	697a      	ldr	r2, [r7, #20]
 8008dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	693a      	ldr	r2, [r7, #16]
 8008de0:	621a      	str	r2, [r3, #32]
}
 8008de2:	bf00      	nop
 8008de4:	371c      	adds	r7, #28
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr

08008dee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008dee:	b480      	push	{r7}
 8008df0:	b085      	sub	sp, #20
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
 8008df6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e06:	683a      	ldr	r2, [r7, #0]
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	f043 0307 	orr.w	r3, r3, #7
 8008e10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	609a      	str	r2, [r3, #8]
}
 8008e18:	bf00      	nop
 8008e1a:	3714      	adds	r7, #20
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b087      	sub	sp, #28
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	607a      	str	r2, [r7, #4]
 8008e30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	021a      	lsls	r2, r3, #8
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	431a      	orrs	r2, r3
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	697a      	ldr	r2, [r7, #20]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	697a      	ldr	r2, [r7, #20]
 8008e56:	609a      	str	r2, [r3, #8]
}
 8008e58:	bf00      	nop
 8008e5a:	371c      	adds	r7, #28
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b087      	sub	sp, #28
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	f003 031f 	and.w	r3, r3, #31
 8008e76:	2201      	movs	r2, #1
 8008e78:	fa02 f303 	lsl.w	r3, r2, r3
 8008e7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6a1a      	ldr	r2, [r3, #32]
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	43db      	mvns	r3, r3
 8008e86:	401a      	ands	r2, r3
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6a1a      	ldr	r2, [r3, #32]
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	f003 031f 	and.w	r3, r3, #31
 8008e96:	6879      	ldr	r1, [r7, #4]
 8008e98:	fa01 f303 	lsl.w	r3, r1, r3
 8008e9c:	431a      	orrs	r2, r3
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	621a      	str	r2, [r3, #32]
}
 8008ea2:	bf00      	nop
 8008ea4:	371c      	adds	r7, #28
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
	...

08008eb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b085      	sub	sp, #20
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d101      	bne.n	8008ec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ec4:	2302      	movs	r3, #2
 8008ec6:	e050      	b.n	8008f6a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2202      	movs	r2, #2
 8008ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a1c      	ldr	r2, [pc, #112]	; (8008f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d018      	beq.n	8008f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f14:	d013      	beq.n	8008f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a18      	ldr	r2, [pc, #96]	; (8008f7c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d00e      	beq.n	8008f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a16      	ldr	r2, [pc, #88]	; (8008f80 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d009      	beq.n	8008f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a15      	ldr	r2, [pc, #84]	; (8008f84 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d004      	beq.n	8008f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a13      	ldr	r2, [pc, #76]	; (8008f88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d10c      	bne.n	8008f58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	68ba      	ldr	r2, [r7, #8]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	68ba      	ldr	r2, [r7, #8]
 8008f56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3714      	adds	r7, #20
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr
 8008f76:	bf00      	nop
 8008f78:	40010000 	.word	0x40010000
 8008f7c:	40000400 	.word	0x40000400
 8008f80:	40000800 	.word	0x40000800
 8008f84:	40000c00 	.word	0x40000c00
 8008f88:	40014000 	.word	0x40014000

08008f8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f94:	bf00      	nop
 8008f96:	370c      	adds	r7, #12
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008fa8:	bf00      	nop
 8008faa:	370c      	adds	r7, #12
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <arm_sin_f32>:
 8008fb4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8009030 <arm_sin_f32+0x7c>
 8008fb8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008fbc:	ee20 7a07 	vmul.f32	s14, s0, s14
 8008fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fc4:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8008fc8:	d42c      	bmi.n	8009024 <arm_sin_f32+0x70>
 8008fca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008fce:	eddf 6a19 	vldr	s13, [pc, #100]	; 8009034 <arm_sin_f32+0x80>
 8008fd2:	4a19      	ldr	r2, [pc, #100]	; (8009038 <arm_sin_f32+0x84>)
 8008fd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008fd8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008fdc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008fe0:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fe8:	bfa8      	it	ge
 8008fea:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 8008fee:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8008ff2:	ee17 3a10 	vmov	r3, s14
 8008ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ffa:	ee07 3a10 	vmov	s14, r3
 8008ffe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8009002:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8009006:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800900a:	edd1 6a01 	vldr	s13, [r1, #4]
 800900e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009012:	ed91 0a00 	vldr	s0, [r1]
 8009016:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800901a:	ee27 0a00 	vmul.f32	s0, s14, s0
 800901e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009022:	4770      	bx	lr
 8009024:	ee17 3a90 	vmov	r3, s15
 8009028:	3b01      	subs	r3, #1
 800902a:	ee07 3a90 	vmov	s15, r3
 800902e:	e7cc      	b.n	8008fca <arm_sin_f32+0x16>
 8009030:	3e22f983 	.word	0x3e22f983
 8009034:	44000000 	.word	0x44000000
 8009038:	08009e00 	.word	0x08009e00

0800903c <__libc_init_array>:
 800903c:	b570      	push	{r4, r5, r6, lr}
 800903e:	4d0d      	ldr	r5, [pc, #52]	; (8009074 <__libc_init_array+0x38>)
 8009040:	4c0d      	ldr	r4, [pc, #52]	; (8009078 <__libc_init_array+0x3c>)
 8009042:	1b64      	subs	r4, r4, r5
 8009044:	10a4      	asrs	r4, r4, #2
 8009046:	2600      	movs	r6, #0
 8009048:	42a6      	cmp	r6, r4
 800904a:	d109      	bne.n	8009060 <__libc_init_array+0x24>
 800904c:	4d0b      	ldr	r5, [pc, #44]	; (800907c <__libc_init_array+0x40>)
 800904e:	4c0c      	ldr	r4, [pc, #48]	; (8009080 <__libc_init_array+0x44>)
 8009050:	f000 f82e 	bl	80090b0 <_init>
 8009054:	1b64      	subs	r4, r4, r5
 8009056:	10a4      	asrs	r4, r4, #2
 8009058:	2600      	movs	r6, #0
 800905a:	42a6      	cmp	r6, r4
 800905c:	d105      	bne.n	800906a <__libc_init_array+0x2e>
 800905e:	bd70      	pop	{r4, r5, r6, pc}
 8009060:	f855 3b04 	ldr.w	r3, [r5], #4
 8009064:	4798      	blx	r3
 8009066:	3601      	adds	r6, #1
 8009068:	e7ee      	b.n	8009048 <__libc_init_array+0xc>
 800906a:	f855 3b04 	ldr.w	r3, [r5], #4
 800906e:	4798      	blx	r3
 8009070:	3601      	adds	r6, #1
 8009072:	e7f2      	b.n	800905a <__libc_init_array+0x1e>
 8009074:	0800a60c 	.word	0x0800a60c
 8009078:	0800a60c 	.word	0x0800a60c
 800907c:	0800a60c 	.word	0x0800a60c
 8009080:	0800a610 	.word	0x0800a610

08009084 <memcpy>:
 8009084:	440a      	add	r2, r1
 8009086:	4291      	cmp	r1, r2
 8009088:	f100 33ff 	add.w	r3, r0, #4294967295
 800908c:	d100      	bne.n	8009090 <memcpy+0xc>
 800908e:	4770      	bx	lr
 8009090:	b510      	push	{r4, lr}
 8009092:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009096:	f803 4f01 	strb.w	r4, [r3, #1]!
 800909a:	4291      	cmp	r1, r2
 800909c:	d1f9      	bne.n	8009092 <memcpy+0xe>
 800909e:	bd10      	pop	{r4, pc}

080090a0 <memset>:
 80090a0:	4402      	add	r2, r0
 80090a2:	4603      	mov	r3, r0
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d100      	bne.n	80090aa <memset+0xa>
 80090a8:	4770      	bx	lr
 80090aa:	f803 1b01 	strb.w	r1, [r3], #1
 80090ae:	e7f9      	b.n	80090a4 <memset+0x4>

080090b0 <_init>:
 80090b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090b2:	bf00      	nop
 80090b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090b6:	bc08      	pop	{r3}
 80090b8:	469e      	mov	lr, r3
 80090ba:	4770      	bx	lr

080090bc <_fini>:
 80090bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090be:	bf00      	nop
 80090c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090c2:	bc08      	pop	{r3}
 80090c4:	469e      	mov	lr, r3
 80090c6:	4770      	bx	lr
