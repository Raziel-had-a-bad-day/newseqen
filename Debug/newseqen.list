
newseqen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009380  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014d0  08009518  08009518  00019518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9e8  0800a9e8  000206f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9e8  0800a9e8  0001a9e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9f0  0800a9f0  000206f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9f0  0800a9f0  0001a9f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9f4  0800a9f4  0001a9f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006f8  20000000  0800a9f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034ec  200006f8  0800b0f0  000206f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003be4  0800b0f0  00023be4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000206f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001316f  00000000  00000000  00020728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002493  00000000  00000000  00033897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001110  00000000  00000000  00035d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001008  00000000  00000000  00036e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018813  00000000  00000000  00037e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014967  00000000  00000000  0005065b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e824  00000000  00000000  00064fc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  001037e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049e0  00000000  00000000  001038a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000d8  00000000  00000000  00108288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200006f8 	.word	0x200006f8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009500 	.word	0x08009500

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200006fc 	.word	0x200006fc
 80001d4:	08009500 	.word	0x08009500

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2f>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ac:	bf24      	itt	cs
 80007ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007b6:	d90d      	bls.n	80007d4 <__aeabi_d2f+0x30>
 80007b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007d8:	d121      	bne.n	800081e <__aeabi_d2f+0x7a>
 80007da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007de:	bfbc      	itt	lt
 80007e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007e4:	4770      	bxlt	lr
 80007e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007ee:	f1c2 0218 	rsb	r2, r2, #24
 80007f2:	f1c2 0c20 	rsb	ip, r2, #32
 80007f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007fa:	fa20 f002 	lsr.w	r0, r0, r2
 80007fe:	bf18      	it	ne
 8000800:	f040 0001 	orrne.w	r0, r0, #1
 8000804:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000808:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800080c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000810:	ea40 000c 	orr.w	r0, r0, ip
 8000814:	fa23 f302 	lsr.w	r3, r3, r2
 8000818:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800081c:	e7cc      	b.n	80007b8 <__aeabi_d2f+0x14>
 800081e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000822:	d107      	bne.n	8000834 <__aeabi_d2f+0x90>
 8000824:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000828:	bf1e      	ittt	ne
 800082a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800082e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000832:	4770      	bxne	lr
 8000834:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000838:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800083c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <__aeabi_uldivmod>:
 8000844:	b953      	cbnz	r3, 800085c <__aeabi_uldivmod+0x18>
 8000846:	b94a      	cbnz	r2, 800085c <__aeabi_uldivmod+0x18>
 8000848:	2900      	cmp	r1, #0
 800084a:	bf08      	it	eq
 800084c:	2800      	cmpeq	r0, #0
 800084e:	bf1c      	itt	ne
 8000850:	f04f 31ff 	movne.w	r1, #4294967295
 8000854:	f04f 30ff 	movne.w	r0, #4294967295
 8000858:	f000 b974 	b.w	8000b44 <__aeabi_idiv0>
 800085c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000860:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000864:	f000 f806 	bl	8000874 <__udivmoddi4>
 8000868:	f8dd e004 	ldr.w	lr, [sp, #4]
 800086c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000870:	b004      	add	sp, #16
 8000872:	4770      	bx	lr

08000874 <__udivmoddi4>:
 8000874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000878:	9d08      	ldr	r5, [sp, #32]
 800087a:	4604      	mov	r4, r0
 800087c:	468e      	mov	lr, r1
 800087e:	2b00      	cmp	r3, #0
 8000880:	d14d      	bne.n	800091e <__udivmoddi4+0xaa>
 8000882:	428a      	cmp	r2, r1
 8000884:	4694      	mov	ip, r2
 8000886:	d969      	bls.n	800095c <__udivmoddi4+0xe8>
 8000888:	fab2 f282 	clz	r2, r2
 800088c:	b152      	cbz	r2, 80008a4 <__udivmoddi4+0x30>
 800088e:	fa01 f302 	lsl.w	r3, r1, r2
 8000892:	f1c2 0120 	rsb	r1, r2, #32
 8000896:	fa20 f101 	lsr.w	r1, r0, r1
 800089a:	fa0c fc02 	lsl.w	ip, ip, r2
 800089e:	ea41 0e03 	orr.w	lr, r1, r3
 80008a2:	4094      	lsls	r4, r2
 80008a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008a8:	0c21      	lsrs	r1, r4, #16
 80008aa:	fbbe f6f8 	udiv	r6, lr, r8
 80008ae:	fa1f f78c 	uxth.w	r7, ip
 80008b2:	fb08 e316 	mls	r3, r8, r6, lr
 80008b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008ba:	fb06 f107 	mul.w	r1, r6, r7
 80008be:	4299      	cmp	r1, r3
 80008c0:	d90a      	bls.n	80008d8 <__udivmoddi4+0x64>
 80008c2:	eb1c 0303 	adds.w	r3, ip, r3
 80008c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008ca:	f080 811f 	bcs.w	8000b0c <__udivmoddi4+0x298>
 80008ce:	4299      	cmp	r1, r3
 80008d0:	f240 811c 	bls.w	8000b0c <__udivmoddi4+0x298>
 80008d4:	3e02      	subs	r6, #2
 80008d6:	4463      	add	r3, ip
 80008d8:	1a5b      	subs	r3, r3, r1
 80008da:	b2a4      	uxth	r4, r4
 80008dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80008e0:	fb08 3310 	mls	r3, r8, r0, r3
 80008e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008e8:	fb00 f707 	mul.w	r7, r0, r7
 80008ec:	42a7      	cmp	r7, r4
 80008ee:	d90a      	bls.n	8000906 <__udivmoddi4+0x92>
 80008f0:	eb1c 0404 	adds.w	r4, ip, r4
 80008f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008f8:	f080 810a 	bcs.w	8000b10 <__udivmoddi4+0x29c>
 80008fc:	42a7      	cmp	r7, r4
 80008fe:	f240 8107 	bls.w	8000b10 <__udivmoddi4+0x29c>
 8000902:	4464      	add	r4, ip
 8000904:	3802      	subs	r0, #2
 8000906:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800090a:	1be4      	subs	r4, r4, r7
 800090c:	2600      	movs	r6, #0
 800090e:	b11d      	cbz	r5, 8000918 <__udivmoddi4+0xa4>
 8000910:	40d4      	lsrs	r4, r2
 8000912:	2300      	movs	r3, #0
 8000914:	e9c5 4300 	strd	r4, r3, [r5]
 8000918:	4631      	mov	r1, r6
 800091a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800091e:	428b      	cmp	r3, r1
 8000920:	d909      	bls.n	8000936 <__udivmoddi4+0xc2>
 8000922:	2d00      	cmp	r5, #0
 8000924:	f000 80ef 	beq.w	8000b06 <__udivmoddi4+0x292>
 8000928:	2600      	movs	r6, #0
 800092a:	e9c5 0100 	strd	r0, r1, [r5]
 800092e:	4630      	mov	r0, r6
 8000930:	4631      	mov	r1, r6
 8000932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000936:	fab3 f683 	clz	r6, r3
 800093a:	2e00      	cmp	r6, #0
 800093c:	d14a      	bne.n	80009d4 <__udivmoddi4+0x160>
 800093e:	428b      	cmp	r3, r1
 8000940:	d302      	bcc.n	8000948 <__udivmoddi4+0xd4>
 8000942:	4282      	cmp	r2, r0
 8000944:	f200 80f9 	bhi.w	8000b3a <__udivmoddi4+0x2c6>
 8000948:	1a84      	subs	r4, r0, r2
 800094a:	eb61 0303 	sbc.w	r3, r1, r3
 800094e:	2001      	movs	r0, #1
 8000950:	469e      	mov	lr, r3
 8000952:	2d00      	cmp	r5, #0
 8000954:	d0e0      	beq.n	8000918 <__udivmoddi4+0xa4>
 8000956:	e9c5 4e00 	strd	r4, lr, [r5]
 800095a:	e7dd      	b.n	8000918 <__udivmoddi4+0xa4>
 800095c:	b902      	cbnz	r2, 8000960 <__udivmoddi4+0xec>
 800095e:	deff      	udf	#255	; 0xff
 8000960:	fab2 f282 	clz	r2, r2
 8000964:	2a00      	cmp	r2, #0
 8000966:	f040 8092 	bne.w	8000a8e <__udivmoddi4+0x21a>
 800096a:	eba1 010c 	sub.w	r1, r1, ip
 800096e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000972:	fa1f fe8c 	uxth.w	lr, ip
 8000976:	2601      	movs	r6, #1
 8000978:	0c20      	lsrs	r0, r4, #16
 800097a:	fbb1 f3f7 	udiv	r3, r1, r7
 800097e:	fb07 1113 	mls	r1, r7, r3, r1
 8000982:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000986:	fb0e f003 	mul.w	r0, lr, r3
 800098a:	4288      	cmp	r0, r1
 800098c:	d908      	bls.n	80009a0 <__udivmoddi4+0x12c>
 800098e:	eb1c 0101 	adds.w	r1, ip, r1
 8000992:	f103 38ff 	add.w	r8, r3, #4294967295
 8000996:	d202      	bcs.n	800099e <__udivmoddi4+0x12a>
 8000998:	4288      	cmp	r0, r1
 800099a:	f200 80cb 	bhi.w	8000b34 <__udivmoddi4+0x2c0>
 800099e:	4643      	mov	r3, r8
 80009a0:	1a09      	subs	r1, r1, r0
 80009a2:	b2a4      	uxth	r4, r4
 80009a4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009a8:	fb07 1110 	mls	r1, r7, r0, r1
 80009ac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009b0:	fb0e fe00 	mul.w	lr, lr, r0
 80009b4:	45a6      	cmp	lr, r4
 80009b6:	d908      	bls.n	80009ca <__udivmoddi4+0x156>
 80009b8:	eb1c 0404 	adds.w	r4, ip, r4
 80009bc:	f100 31ff 	add.w	r1, r0, #4294967295
 80009c0:	d202      	bcs.n	80009c8 <__udivmoddi4+0x154>
 80009c2:	45a6      	cmp	lr, r4
 80009c4:	f200 80bb 	bhi.w	8000b3e <__udivmoddi4+0x2ca>
 80009c8:	4608      	mov	r0, r1
 80009ca:	eba4 040e 	sub.w	r4, r4, lr
 80009ce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009d2:	e79c      	b.n	800090e <__udivmoddi4+0x9a>
 80009d4:	f1c6 0720 	rsb	r7, r6, #32
 80009d8:	40b3      	lsls	r3, r6
 80009da:	fa22 fc07 	lsr.w	ip, r2, r7
 80009de:	ea4c 0c03 	orr.w	ip, ip, r3
 80009e2:	fa20 f407 	lsr.w	r4, r0, r7
 80009e6:	fa01 f306 	lsl.w	r3, r1, r6
 80009ea:	431c      	orrs	r4, r3
 80009ec:	40f9      	lsrs	r1, r7
 80009ee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009f2:	fa00 f306 	lsl.w	r3, r0, r6
 80009f6:	fbb1 f8f9 	udiv	r8, r1, r9
 80009fa:	0c20      	lsrs	r0, r4, #16
 80009fc:	fa1f fe8c 	uxth.w	lr, ip
 8000a00:	fb09 1118 	mls	r1, r9, r8, r1
 8000a04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a08:	fb08 f00e 	mul.w	r0, r8, lr
 8000a0c:	4288      	cmp	r0, r1
 8000a0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a12:	d90b      	bls.n	8000a2c <__udivmoddi4+0x1b8>
 8000a14:	eb1c 0101 	adds.w	r1, ip, r1
 8000a18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a1c:	f080 8088 	bcs.w	8000b30 <__udivmoddi4+0x2bc>
 8000a20:	4288      	cmp	r0, r1
 8000a22:	f240 8085 	bls.w	8000b30 <__udivmoddi4+0x2bc>
 8000a26:	f1a8 0802 	sub.w	r8, r8, #2
 8000a2a:	4461      	add	r1, ip
 8000a2c:	1a09      	subs	r1, r1, r0
 8000a2e:	b2a4      	uxth	r4, r4
 8000a30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a34:	fb09 1110 	mls	r1, r9, r0, r1
 8000a38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a40:	458e      	cmp	lr, r1
 8000a42:	d908      	bls.n	8000a56 <__udivmoddi4+0x1e2>
 8000a44:	eb1c 0101 	adds.w	r1, ip, r1
 8000a48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a4c:	d26c      	bcs.n	8000b28 <__udivmoddi4+0x2b4>
 8000a4e:	458e      	cmp	lr, r1
 8000a50:	d96a      	bls.n	8000b28 <__udivmoddi4+0x2b4>
 8000a52:	3802      	subs	r0, #2
 8000a54:	4461      	add	r1, ip
 8000a56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a5e:	eba1 010e 	sub.w	r1, r1, lr
 8000a62:	42a1      	cmp	r1, r4
 8000a64:	46c8      	mov	r8, r9
 8000a66:	46a6      	mov	lr, r4
 8000a68:	d356      	bcc.n	8000b18 <__udivmoddi4+0x2a4>
 8000a6a:	d053      	beq.n	8000b14 <__udivmoddi4+0x2a0>
 8000a6c:	b15d      	cbz	r5, 8000a86 <__udivmoddi4+0x212>
 8000a6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a72:	eb61 010e 	sbc.w	r1, r1, lr
 8000a76:	fa01 f707 	lsl.w	r7, r1, r7
 8000a7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a7e:	40f1      	lsrs	r1, r6
 8000a80:	431f      	orrs	r7, r3
 8000a82:	e9c5 7100 	strd	r7, r1, [r5]
 8000a86:	2600      	movs	r6, #0
 8000a88:	4631      	mov	r1, r6
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	f1c2 0320 	rsb	r3, r2, #32
 8000a92:	40d8      	lsrs	r0, r3
 8000a94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a98:	fa21 f303 	lsr.w	r3, r1, r3
 8000a9c:	4091      	lsls	r1, r2
 8000a9e:	4301      	orrs	r1, r0
 8000aa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aa4:	fa1f fe8c 	uxth.w	lr, ip
 8000aa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000aac:	fb07 3610 	mls	r6, r7, r0, r3
 8000ab0:	0c0b      	lsrs	r3, r1, #16
 8000ab2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ab6:	fb00 f60e 	mul.w	r6, r0, lr
 8000aba:	429e      	cmp	r6, r3
 8000abc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ac0:	d908      	bls.n	8000ad4 <__udivmoddi4+0x260>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000aca:	d22f      	bcs.n	8000b2c <__udivmoddi4+0x2b8>
 8000acc:	429e      	cmp	r6, r3
 8000ace:	d92d      	bls.n	8000b2c <__udivmoddi4+0x2b8>
 8000ad0:	3802      	subs	r0, #2
 8000ad2:	4463      	add	r3, ip
 8000ad4:	1b9b      	subs	r3, r3, r6
 8000ad6:	b289      	uxth	r1, r1
 8000ad8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000adc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ae0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ae4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ae8:	428b      	cmp	r3, r1
 8000aea:	d908      	bls.n	8000afe <__udivmoddi4+0x28a>
 8000aec:	eb1c 0101 	adds.w	r1, ip, r1
 8000af0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000af4:	d216      	bcs.n	8000b24 <__udivmoddi4+0x2b0>
 8000af6:	428b      	cmp	r3, r1
 8000af8:	d914      	bls.n	8000b24 <__udivmoddi4+0x2b0>
 8000afa:	3e02      	subs	r6, #2
 8000afc:	4461      	add	r1, ip
 8000afe:	1ac9      	subs	r1, r1, r3
 8000b00:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b04:	e738      	b.n	8000978 <__udivmoddi4+0x104>
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e705      	b.n	8000918 <__udivmoddi4+0xa4>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e3      	b.n	80008d8 <__udivmoddi4+0x64>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6f8      	b.n	8000906 <__udivmoddi4+0x92>
 8000b14:	454b      	cmp	r3, r9
 8000b16:	d2a9      	bcs.n	8000a6c <__udivmoddi4+0x1f8>
 8000b18:	ebb9 0802 	subs.w	r8, r9, r2
 8000b1c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7a3      	b.n	8000a6c <__udivmoddi4+0x1f8>
 8000b24:	4646      	mov	r6, r8
 8000b26:	e7ea      	b.n	8000afe <__udivmoddi4+0x28a>
 8000b28:	4620      	mov	r0, r4
 8000b2a:	e794      	b.n	8000a56 <__udivmoddi4+0x1e2>
 8000b2c:	4640      	mov	r0, r8
 8000b2e:	e7d1      	b.n	8000ad4 <__udivmoddi4+0x260>
 8000b30:	46d0      	mov	r8, sl
 8000b32:	e77b      	b.n	8000a2c <__udivmoddi4+0x1b8>
 8000b34:	3b02      	subs	r3, #2
 8000b36:	4461      	add	r1, ip
 8000b38:	e732      	b.n	80009a0 <__udivmoddi4+0x12c>
 8000b3a:	4630      	mov	r0, r6
 8000b3c:	e709      	b.n	8000952 <__udivmoddi4+0xde>
 8000b3e:	4464      	add	r4, ip
 8000b40:	3802      	subs	r0, #2
 8000b42:	e742      	b.n	80009ca <__udivmoddi4+0x156>

08000b44 <__aeabi_idiv0>:
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <SPI_command>:





void SPI_command(void){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
// pins are all good , SPI is always the problem!!!
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <SPI_command+0x68>)
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d128      	bne.n	8000ba8 <SPI_command+0x60>
 8000b56:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <SPI_command+0x6c>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d124      	bne.n	8000ba8 <SPI_command+0x60>

uint8_t spi_store[5];

	//clk_pin=(i&1)^1;
		//bsrr_long=0;
		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8000b5e:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <SPI_command+0x70>)
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	0a1b      	lsrs	r3, r3, #8
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d003      	beq.n	8000b72 <SPI_command+0x2a>
 8000b6a:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <SPI_command+0x74>)
 8000b6c:	22f8      	movs	r2, #248	; 0xf8
 8000b6e:	701a      	strb	r2, [r3, #0]
 8000b70:	e002      	b.n	8000b78 <SPI_command+0x30>
 8000b72:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <SPI_command+0x74>)
 8000b74:	22fa      	movs	r2, #250	; 0xfa
 8000b76:	701a      	strb	r2, [r3, #0]
/*		bsrr_long=spi_byte<<16; // top byte for command 24-16, then 2 bytes of data 16-0
		spi_hold=(spi_hold&255);
		bsrr_long=bsrr_long+((spi_hold>>4)<<12); // 4 bits to top
		bsrr_long=bsrr_long+((spi_hold&15)<<4);	// 4 bits to top
*/
	spi_store[0]=spi_byte&255;
 8000b78:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <SPI_command+0x74>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	703b      	strb	r3, [r7, #0]
	spi_store[1]=((spi_hold>>4)<<4)&255;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <SPI_command+0x70>)
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	091b      	lsrs	r3, r3, #4
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	011b      	lsls	r3, r3, #4
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	707b      	strb	r3, [r7, #1]
	spi_store[2]=((spi_hold&15)<<4)&255;
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <SPI_command+0x70>)
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	011b      	lsls	r3, r3, #4
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	70bb      	strb	r3, [r7, #2]

// send this to spi for now
		HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3, 5);  // working good
 8000b96:	4639      	mov	r1, r7
 8000b98:	2305      	movs	r3, #5
 8000b9a:	2203      	movs	r2, #3
 8000b9c:	4808      	ldr	r0, [pc, #32]	; (8000bc0 <SPI_command+0x78>)
 8000b9e:	f006 fe4e 	bl	800783e <HAL_SPI_Transmit>


//HAL_Delay(10);
	spi_enable=1; }
 8000ba2:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <SPI_command+0x68>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	801a      	strh	r2, [r3, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	2000201a 	.word	0x2000201a
 8000bb4:	20002020 	.word	0x20002020
 8000bb8:	2000201e 	.word	0x2000201e
 8000bbc:	2000201c 	.word	0x2000201c
 8000bc0:	20003ab0 	.word	0x20003ab0

08000bc4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)    // unreliable

{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	time_proc++;
 8000bcc:	4b24      	ldr	r3, [pc, #144]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000bce:	881b      	ldrh	r3, [r3, #0]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	4b22      	ldr	r3, [pc, #136]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000bd6:	801a      	strh	r2, [r3, #0]
	//if (((sample_point==511) || (sample_point==1022)) && (bank_write)  ) error_count++;

	if (sample_point==511) {bank_write=1; sample_pointD=0;  }
 8000bd8:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000bda:	881b      	ldrh	r3, [r3, #0]
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d105      	bne.n	8000bf2 <HAL_TIM_PeriodElapsedCallback+0x2e>
 8000be6:	4b20      	ldr	r3, [pc, #128]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	801a      	strh	r2, [r3, #0]
 8000bec:	4b1f      	ldr	r3, [pc, #124]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	801a      	strh	r2, [r3, #0]
	if (sample_point==1022) {bank_write=1; sample_pointD=512; }
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000bf4:	881b      	ldrh	r3, [r3, #0]
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d106      	bne.n	8000c0e <HAL_TIM_PeriodElapsedCallback+0x4a>
 8000c00:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	801a      	strh	r2, [r3, #0]
 8000c06:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000c08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c0c:	801a      	strh	r2, [r3, #0]
	sample_point=sample_point & 1023;// this is 1
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c10:	881b      	ldrh	r3, [r3, #0]
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c1c:	801a      	strh	r2, [r3, #0]
	play_hold=play_sample[sample_point]; // this is 2
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000c28:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000c2e:	801a      	strh	r2, [r3, #0]





	if(TIM3==htim->Instance)			// nothing here is consistent
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a10      	ldr	r2, [pc, #64]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d10b      	bne.n	8000c52 <HAL_TIM_PeriodElapsedCallback+0x8e>
{


TIM3->CCR3=play_hold ;  // keep readin sample storage
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000c42:	63da      	str	r2, [r3, #60]	; 0x3c


//if (bs_count==255
	//	)  { bs_count=0; menu_store=(menuSelect>>2); } else bs_count++; // menu select, higher count just spills over  159 chamge to 128 2*64
//}
sample_point++; //this needs to be here or too fast and wrong sample rate
 8000c44:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c46:	881b      	ldrh	r3, [r3, #0]
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c50:	801a      	strh	r2, [r3, #0]

}

}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	20002d28 	.word	0x20002d28
 8000c64:	200013c6 	.word	0x200013c6
 8000c68:	200001ea 	.word	0x200001ea
 8000c6c:	200013ca 	.word	0x200013ca
 8000c70:	20000bc4 	.word	0x20000bc4
 8000c74:	200013c8 	.word	0x200013c8
 8000c78:	40000400 	.word	0x40000400

08000c7c <analoginputloopb>:
						}  // get value this this on e is blank
		//HAL_ADC_Stop(&hadc1);
//for (i=0;i<3;i++){ adc_values[i]= (adc_values[i]>>8) &15; } // reduce value to 4 bit
}
*/
void analoginputloopb(void){  //works fine still
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0


	//menuSelect = (7 - (adc_values[0] >>2))<<1;		//x *16  main menu select
	//menuSelect = (15 - (adc_values[0] >>1));		//x *7  main menu select
	//menuSelectX=(31 - adc_values[1])>>1;  // Y select inside page
	menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 8000c82:	4b80      	ldr	r3, [pc, #512]	; (8000e84 <analoginputloopb+0x208>)
 8000c84:	889b      	ldrh	r3, [r3, #4]
 8000c86:	091b      	lsrs	r3, r3, #4
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	4b7e      	ldr	r3, [pc, #504]	; (8000e88 <analoginputloopb+0x20c>)
 8000c8e:	701a      	strb	r2, [r3, #0]
		menuSelectX=cursor_menu[2]&15;  // Y select inside page
 8000c90:	4b7c      	ldr	r3, [pc, #496]	; (8000e84 <analoginputloopb+0x208>)
 8000c92:	889b      	ldrh	r3, [r3, #4]
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	f003 030f 	and.w	r3, r3, #15
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	4b7b      	ldr	r3, [pc, #492]	; (8000e8c <analoginputloopb+0x210>)
 8000c9e:	701a      	strb	r2, [r3, #0]
	//	counterVarB = menuSelectX + menuSelect; // select mem page 10*8  and location pointer  77
//		if (adc_values[1]>15)	menu_holder=disp_lut [(menuSelect)	+1] [31-adc_values[1]]; // change back to 0-15
//	else menu_holder=disp_lut [(menuSelect)	] [15-adc_values[1]];  // grab disp lut value for pointer if valid then write for now

		//menu_holder=disp_lut [(menuSelect)	] [(15-adc_values[1])];   // value from disp lut
		menu_holder=disp_lut [menuSelect] [menuSelectX];   // value from disp lut
 8000ca0:	4b79      	ldr	r3, [pc, #484]	; (8000e88 <analoginputloopb+0x20c>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	4b79      	ldr	r3, [pc, #484]	; (8000e8c <analoginputloopb+0x210>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	4619      	mov	r1, r3
 8000cac:	4a78      	ldr	r2, [pc, #480]	; (8000e90 <analoginputloopb+0x214>)
 8000cae:	0103      	lsls	r3, r0, #4
 8000cb0:	440b      	add	r3, r1
 8000cb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cb6:	80fb      	strh	r3, [r7, #6]
		cursor_menu[1]=0;
 8000cb8:	4b72      	ldr	r3, [pc, #456]	; (8000e84 <analoginputloopb+0x208>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	805a      	strh	r2, [r3, #2]
		//cursor_menu[2]=cursor_lookup[enc2_dir];
		// cursor_menu[2]=cursor_lookup[enc2_dir]; //needed for correct line sequence ,obsolete
		cursor_menu[2]=enc2_dir;
 8000cbe:	4b75      	ldr	r3, [pc, #468]	; (8000e94 <analoginputloopb+0x218>)
 8000cc0:	881a      	ldrh	r2, [r3, #0]
 8000cc2:	4b70      	ldr	r3, [pc, #448]	; (8000e84 <analoginputloopb+0x208>)
 8000cc4:	809a      	strh	r2, [r3, #4]

		//cursor_menu[2]=(16-adc_values[1]);



		if (menu_holder>127)	counterVarB=menu_holder-128; //  points to actual potvalues location from dsip_lut when value is higher than 127 , works ok problem with menu display
 8000cc6:	88fb      	ldrh	r3, [r7, #6]
 8000cc8:	2b7f      	cmp	r3, #127	; 0x7f
 8000cca:	d904      	bls.n	8000cd6 <analoginputloopb+0x5a>
 8000ccc:	88fb      	ldrh	r3, [r7, #6]
 8000cce:	3b80      	subs	r3, #128	; 0x80
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	4b71      	ldr	r3, [pc, #452]	; (8000e98 <analoginputloopb+0x21c>)
 8000cd4:	801a      	strh	r2, [r3, #0]
		if (menu_holder>511)	counterVarB=menu_holder-384;		// text pointer , max potvalue address is 142 , fix second page issue later
 8000cd6:	88fb      	ldrh	r3, [r7, #6]
 8000cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cdc:	d305      	bcc.n	8000cea <analoginputloopb+0x6e>
 8000cde:	88fb      	ldrh	r3, [r7, #6]
 8000ce0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	4b6c      	ldr	r3, [pc, #432]	; (8000e98 <analoginputloopb+0x21c>)
 8000ce8:	801a      	strh	r2, [r3, #0]


		enc_dir=potSource[counterVarB];
 8000cea:	4b6b      	ldr	r3, [pc, #428]	; (8000e98 <analoginputloopb+0x21c>)
 8000cec:	881b      	ldrh	r3, [r3, #0]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	4b6a      	ldr	r3, [pc, #424]	; (8000e9c <analoginputloopb+0x220>)
 8000cf2:	5c9b      	ldrb	r3, [r3, r2]
 8000cf4:	b21a      	sxth	r2, r3
 8000cf6:	4b6a      	ldr	r3, [pc, #424]	; (8000ea0 <analoginputloopb+0x224>)
 8000cf8:	801a      	strh	r2, [r3, #0]


	enc_temp=(TIM2->CNT)>>1;  // read counter tim2 ,divider ok
 8000cfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d00:	085b      	lsrs	r3, r3, #1
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	4b67      	ldr	r3, [pc, #412]	; (8000ea4 <analoginputloopb+0x228>)
 8000d06:	801a      	strh	r2, [r3, #0]
	enc2_temp=(TIM4->CNT)>>1;  // read counter tim4
 8000d08:	4b67      	ldr	r3, [pc, #412]	; (8000ea8 <analoginputloopb+0x22c>)
 8000d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0c:	085b      	lsrs	r3, r3, #1
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	4b66      	ldr	r3, [pc, #408]	; (8000eac <analoginputloopb+0x230>)
 8000d12:	801a      	strh	r2, [r3, #0]
	enc2_temp=enc2_temp&127; // fix overflow ? , dont need a lot because of skip
 8000d14:	4b65      	ldr	r3, [pc, #404]	; (8000eac <analoginputloopb+0x230>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	4b63      	ldr	r3, [pc, #396]	; (8000eac <analoginputloopb+0x230>)
 8000d20:	801a      	strh	r2, [r3, #0]

	if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-(disp_multi[enc2_dir>>4]);   // start settle timer , will do 2 times per turn always, wire opposite
 8000d22:	4b60      	ldr	r3, [pc, #384]	; (8000ea4 <analoginputloopb+0x228>)
 8000d24:	881a      	ldrh	r2, [r3, #0]
 8000d26:	4b62      	ldr	r3, [pc, #392]	; (8000eb0 <analoginputloopb+0x234>)
 8000d28:	881b      	ldrh	r3, [r3, #0]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d910      	bls.n	8000d50 <analoginputloopb+0xd4>
 8000d2e:	4b5c      	ldr	r3, [pc, #368]	; (8000ea0 <analoginputloopb+0x224>)
 8000d30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	4b57      	ldr	r3, [pc, #348]	; (8000e94 <analoginputloopb+0x218>)
 8000d38:	881b      	ldrh	r3, [r3, #0]
 8000d3a:	091b      	lsrs	r3, r3, #4
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4b5c      	ldr	r3, [pc, #368]	; (8000eb4 <analoginputloopb+0x238>)
 8000d42:	5c5b      	ldrb	r3, [r3, r1]
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	b21a      	sxth	r2, r3
 8000d4c:	4b54      	ldr	r3, [pc, #336]	; (8000ea0 <analoginputloopb+0x224>)
 8000d4e:	801a      	strh	r2, [r3, #0]
	if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+(disp_multi[enc2_dir>>4]);   // start settle timer , will do 2 times per turn always, wire opposite , step multiplier
 8000d50:	4b54      	ldr	r3, [pc, #336]	; (8000ea4 <analoginputloopb+0x228>)
 8000d52:	881a      	ldrh	r2, [r3, #0]
 8000d54:	4b56      	ldr	r3, [pc, #344]	; (8000eb0 <analoginputloopb+0x234>)
 8000d56:	881b      	ldrh	r3, [r3, #0]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d210      	bcs.n	8000d7e <analoginputloopb+0x102>
 8000d5c:	4b4d      	ldr	r3, [pc, #308]	; (8000e94 <analoginputloopb+0x218>)
 8000d5e:	881b      	ldrh	r3, [r3, #0]
 8000d60:	091b      	lsrs	r3, r3, #4
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b53      	ldr	r3, [pc, #332]	; (8000eb4 <analoginputloopb+0x238>)
 8000d68:	5c9b      	ldrb	r3, [r3, r2]
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	4b4c      	ldr	r3, [pc, #304]	; (8000ea0 <analoginputloopb+0x224>)
 8000d6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	4413      	add	r3, r2
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	b21a      	sxth	r2, r3
 8000d7a:	4b49      	ldr	r3, [pc, #292]	; (8000ea0 <analoginputloopb+0x224>)
 8000d7c:	801a      	strh	r2, [r3, #0]
	//if (enc_temp<enc_tempB)	 enc_dir++;

  enc2_temp=enc2_lut[enc2_temp];  // force alternative values for skip  , seems to work ok , disable temporarily
 8000d7e:	4b4b      	ldr	r3, [pc, #300]	; (8000eac <analoginputloopb+0x230>)
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	461a      	mov	r2, r3
 8000d84:	4b4c      	ldr	r3, [pc, #304]	; (8000eb8 <analoginputloopb+0x23c>)
 8000d86:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000d8a:	4b48      	ldr	r3, [pc, #288]	; (8000eac <analoginputloopb+0x230>)
 8000d8c:	801a      	strh	r2, [r3, #0]
  if (enc2_temp>383) enc2_temp=383;  //mem overflow somewhere
 8000d8e:	4b47      	ldr	r3, [pc, #284]	; (8000eac <analoginputloopb+0x230>)
 8000d90:	881b      	ldrh	r3, [r3, #0]
 8000d92:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000d96:	d303      	bcc.n	8000da0 <analoginputloopb+0x124>
 8000d98:	4b44      	ldr	r3, [pc, #272]	; (8000eac <analoginputloopb+0x230>)
 8000d9a:	f240 127f 	movw	r2, #383	; 0x17f
 8000d9e:	801a      	strh	r2, [r3, #0]
	if (enc_dir>160) enc_dir=160;
 8000da0:	4b3f      	ldr	r3, [pc, #252]	; (8000ea0 <analoginputloopb+0x224>)
 8000da2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000da6:	2ba0      	cmp	r3, #160	; 0xa0
 8000da8:	dd02      	ble.n	8000db0 <analoginputloopb+0x134>
 8000daa:	4b3d      	ldr	r3, [pc, #244]	; (8000ea0 <analoginputloopb+0x224>)
 8000dac:	22a0      	movs	r2, #160	; 0xa0
 8000dae:	801a      	strh	r2, [r3, #0]
			if (enc_dir<0) enc_dir=0;
 8000db0:	4b3b      	ldr	r3, [pc, #236]	; (8000ea0 <analoginputloopb+0x224>)
 8000db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	da02      	bge.n	8000dc0 <analoginputloopb+0x144>
 8000dba:	4b39      	ldr	r3, [pc, #228]	; (8000ea0 <analoginputloopb+0x224>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	801a      	strh	r2, [r3, #0]
			//if (enc2_temp<16) enc_dir=(enc_dir<<2) & 127; // faster for notes on first row

			potSource[counterVarB]=enc_dir;       // enter data into potsource
 8000dc0:	4b37      	ldr	r3, [pc, #220]	; (8000ea0 <analoginputloopb+0x224>)
 8000dc2:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000dc6:	4b34      	ldr	r3, [pc, #208]	; (8000e98 <analoginputloopb+0x21c>)
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	b2c9      	uxtb	r1, r1
 8000dce:	4b33      	ldr	r3, [pc, #204]	; (8000e9c <analoginputloopb+0x220>)
 8000dd0:	5499      	strb	r1, [r3, r2]
					enc_dir=0;
 8000dd2:	4b33      	ldr	r3, [pc, #204]	; (8000ea0 <analoginputloopb+0x224>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	801a      	strh	r2, [r3, #0]
			enc_tempB=enc_temp;
 8000dd8:	4b32      	ldr	r3, [pc, #200]	; (8000ea4 <analoginputloopb+0x228>)
 8000dda:	881a      	ldrh	r2, [r3, #0]
 8000ddc:	4b34      	ldr	r3, [pc, #208]	; (8000eb0 <analoginputloopb+0x234>)
 8000dde:	801a      	strh	r2, [r3, #0]
			//if (enc2_dir>383) enc2_dir=383;

			//if  (enc2_temp>enc2_tempB)	 enc2_dir++;   // start settle timer , will do 2 times per turn always
			//if (enc2_temp<enc2_tempB)	 enc2_dir--;
			enc2_dir=enc2_temp; //temp to try source data
 8000de0:	4b32      	ldr	r3, [pc, #200]	; (8000eac <analoginputloopb+0x230>)
 8000de2:	881a      	ldrh	r2, [r3, #0]
 8000de4:	4b2b      	ldr	r3, [pc, #172]	; (8000e94 <analoginputloopb+0x218>)
 8000de6:	801a      	strh	r2, [r3, #0]
		//	if (enc2_dir>127) menu_page[1]=127; else if (enc2_dir>255)   menu_page[1]=255;				else menu_page[1]=0;
		//	menu_page[1]= (enc2_dir >>7) <<7;

			menu_page[1]=enc2_dir&384;
 8000de8:	4b2a      	ldr	r3, [pc, #168]	; (8000e94 <analoginputloopb+0x218>)
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	4b32      	ldr	r3, [pc, #200]	; (8000ebc <analoginputloopb+0x240>)
 8000df4:	805a      	strh	r2, [r3, #2]


			//if (enc2_dir>255) {menu_page[1]=0;display_fill();}

					if ((enc2_temp>127) && (enc2_tempB<=127)) display_fill();    // need to optimize
 8000df6:	4b2d      	ldr	r3, [pc, #180]	; (8000eac <analoginputloopb+0x230>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	2b7f      	cmp	r3, #127	; 0x7f
 8000dfc:	d905      	bls.n	8000e0a <analoginputloopb+0x18e>
 8000dfe:	4b30      	ldr	r3, [pc, #192]	; (8000ec0 <analoginputloopb+0x244>)
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	2b7f      	cmp	r3, #127	; 0x7f
 8000e04:	d801      	bhi.n	8000e0a <analoginputloopb+0x18e>
 8000e06:	f000 fa07 	bl	8001218 <display_fill>
					if ((enc2_temp<=127) && (enc2_tempB>127)) display_fill();
 8000e0a:	4b28      	ldr	r3, [pc, #160]	; (8000eac <analoginputloopb+0x230>)
 8000e0c:	881b      	ldrh	r3, [r3, #0]
 8000e0e:	2b7f      	cmp	r3, #127	; 0x7f
 8000e10:	d805      	bhi.n	8000e1e <analoginputloopb+0x1a2>
 8000e12:	4b2b      	ldr	r3, [pc, #172]	; (8000ec0 <analoginputloopb+0x244>)
 8000e14:	881b      	ldrh	r3, [r3, #0]
 8000e16:	2b7f      	cmp	r3, #127	; 0x7f
 8000e18:	d901      	bls.n	8000e1e <analoginputloopb+0x1a2>
 8000e1a:	f000 f9fd 	bl	8001218 <display_fill>
					if ((enc2_temp>255) && (enc2_tempB<=255)) display_fill();
 8000e1e:	4b23      	ldr	r3, [pc, #140]	; (8000eac <analoginputloopb+0x230>)
 8000e20:	881b      	ldrh	r3, [r3, #0]
 8000e22:	2bff      	cmp	r3, #255	; 0xff
 8000e24:	d905      	bls.n	8000e32 <analoginputloopb+0x1b6>
 8000e26:	4b26      	ldr	r3, [pc, #152]	; (8000ec0 <analoginputloopb+0x244>)
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	2bff      	cmp	r3, #255	; 0xff
 8000e2c:	d801      	bhi.n	8000e32 <analoginputloopb+0x1b6>
 8000e2e:	f000 f9f3 	bl	8001218 <display_fill>
					if ((enc2_temp<=255) && (enc2_tempB>255)) display_fill();
 8000e32:	4b1e      	ldr	r3, [pc, #120]	; (8000eac <analoginputloopb+0x230>)
 8000e34:	881b      	ldrh	r3, [r3, #0]
 8000e36:	2bff      	cmp	r3, #255	; 0xff
 8000e38:	d805      	bhi.n	8000e46 <analoginputloopb+0x1ca>
 8000e3a:	4b21      	ldr	r3, [pc, #132]	; (8000ec0 <analoginputloopb+0x244>)
 8000e3c:	881b      	ldrh	r3, [r3, #0]
 8000e3e:	2bff      	cmp	r3, #255	; 0xff
 8000e40:	d901      	bls.n	8000e46 <analoginputloopb+0x1ca>
 8000e42:	f000 f9e9 	bl	8001218 <display_fill>
					if ((enc2_temp>383) && (enc2_tempB<=383)) display_fill();
 8000e46:	4b19      	ldr	r3, [pc, #100]	; (8000eac <analoginputloopb+0x230>)
 8000e48:	881b      	ldrh	r3, [r3, #0]
 8000e4a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000e4e:	d306      	bcc.n	8000e5e <analoginputloopb+0x1e2>
 8000e50:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <analoginputloopb+0x244>)
 8000e52:	881b      	ldrh	r3, [r3, #0]
 8000e54:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000e58:	d201      	bcs.n	8000e5e <analoginputloopb+0x1e2>
 8000e5a:	f000 f9dd 	bl	8001218 <display_fill>
					//if ((enc2_temp<=383) && (enc2_tempB>383)) display_fill();
					//if ((enc2_temp<127) && (enc2_tempB>384)) display_fill();
					//if ((enc2_temp<=511) && (enc2_tempB<127)) display_fill();


					enc2_tempB=enc2_temp; // to effective as counter not getting reset
 8000e5e:	4b13      	ldr	r3, [pc, #76]	; (8000eac <analoginputloopb+0x230>)
 8000e60:	881a      	ldrh	r2, [r3, #0]
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <analoginputloopb+0x244>)
 8000e64:	801a      	strh	r2, [r3, #0]


potValues[counterVarB]=(potSource[counterVarB]>>4) & 15 ;  // reduce values for now ,use original for others , slow count
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <analoginputloopb+0x21c>)
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <analoginputloopb+0x220>)
 8000e6e:	5c9b      	ldrb	r3, [r3, r2]
 8000e70:	4a09      	ldr	r2, [pc, #36]	; (8000e98 <analoginputloopb+0x21c>)
 8000e72:	8812      	ldrh	r2, [r2, #0]
 8000e74:	091b      	lsrs	r3, r3, #4
 8000e76:	b2d9      	uxtb	r1, r3
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <analoginputloopb+0x248>)
 8000e7a:	5499      	strb	r1, [r3, r2]

//potValues[counterVarB]=potSource[counterVarB] & 15 ;  // reduce values for now ,use original for others



}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20002024 	.word	0x20002024
 8000e88:	20000b8e 	.word	0x20000b8e
 8000e8c:	20000b8f 	.word	0x20000b8f
 8000e90:	080098a4 	.word	0x080098a4
 8000e94:	20002012 	.word	0x20002012
 8000e98:	20000b94 	.word	0x20000b94
 8000e9c:	20000a04 	.word	0x20000a04
 8000ea0:	20002014 	.word	0x20002014
 8000ea4:	2000200a 	.word	0x2000200a
 8000ea8:	40000800 	.word	0x40000800
 8000eac:	2000200e 	.word	0x2000200e
 8000eb0:	2000200c 	.word	0x2000200c
 8000eb4:	200001f0 	.word	0x200001f0
 8000eb8:	20000714 	.word	0x20000714
 8000ebc:	20002034 	.word	0x20002034
 8000ec0:	20002010 	.word	0x20002010
 8000ec4:	20000884 	.word	0x20000884

08000ec8 <display_init>:
void display_init(void){
 8000ec8:	b5b0      	push	{r4, r5, r7, lr}
 8000eca:	b08a      	sub	sp, #40	; 0x28
 8000ecc:	af00      	add	r7, sp, #0
	//uint8_t sp2_command=0xf8+(0<<1);


		 // uint16_t disp[]={  304,304,304,270,257,268,384,258,51,51,52,53,54,55,56,57,58,0};  // normal characters
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd
 8000ece:	4b64      	ldr	r3, [pc, #400]	; (8001060 <display_init+0x198>)
 8000ed0:	1d3c      	adds	r4, r7, #4
 8000ed2:	461d      	mov	r5, r3
 8000ed4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000edc:	682b      	ldr	r3, [r5, #0]
 8000ede:	8023      	strh	r3, [r4, #0]
		  if (spi_send==0){         // sets data byte
 8000ee0:	4b60      	ldr	r3, [pc, #384]	; (8001064 <display_init+0x19c>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f040 80b6 	bne.w	8001056 <display_init+0x18e>

/*if ((enc2_dir>63) && (menu_page[2]==0))  {init=4;menu_page[2]=1;}  //restart page draw for second page , might need home pos init
if  ((init==76) && (menu_page[2]==1)) menu_page[2]=2; //after drawing second page and finish
if ((enc2_dir<63) && (menu_page[2]==2))  {init=4;menu_page[2]=0;}
*/
switch(init){     //Remember every line advances +char on display ,,all this is mostly unneeded
 8000eea:	4b5f      	ldr	r3, [pc, #380]	; (8001068 <display_init+0x1a0>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	3b4d      	subs	r3, #77	; 0x4d
 8000ef0:	2b07      	cmp	r3, #7
 8000ef2:	d879      	bhi.n	8000fe8 <display_init+0x120>
 8000ef4:	a201      	add	r2, pc, #4	; (adr r2, 8000efc <display_init+0x34>)
 8000ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000efa:	bf00      	nop
 8000efc:	08000f1d 	.word	0x08000f1d
 8000f00:	08000f4d 	.word	0x08000f4d
 8000f04:	08000f55 	.word	0x08000f55
 8000f08:	08000f71 	.word	0x08000f71
 8000f0c:	08000f85 	.word	0x08000f85
 8000f10:	08000f93 	.word	0x08000f93
 8000f14:	08000fa7 	.word	0x08000fa7
 8000f18:	08000fbb 	.word	0x08000fbb

case 77: spi_hold=384+(init_b>>1);init=init+((init_b&1)*2);break; // no delay ,jump to either blink sets
 8000f1c:	4b53      	ldr	r3, [pc, #332]	; (800106c <display_init+0x1a4>)
 8000f1e:	881b      	ldrh	r3, [r3, #0]
 8000f20:	085b      	lsrs	r3, r3, #1
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	4b51      	ldr	r3, [pc, #324]	; (8001070 <display_init+0x1a8>)
 8000f2c:	801a      	strh	r2, [r3, #0]
 8000f2e:	4b4f      	ldr	r3, [pc, #316]	; (800106c <display_init+0x1a4>)
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	f003 0301 	and.w	r3, r3, #1
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4b4a      	ldr	r3, [pc, #296]	; (8001068 <display_init+0x1a0>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	4413      	add	r3, r2
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4b48      	ldr	r3, [pc, #288]	; (8001068 <display_init+0x1a0>)
 8000f48:	701a      	strb	r2, [r3, #0]
 8000f4a:	e05f      	b.n	800100c <display_init+0x144>

case 78: spi_hold=10;break; //write one set then jump
 8000f4c:	4b48      	ldr	r3, [pc, #288]	; (8001070 <display_init+0x1a8>)
 8000f4e:	220a      	movs	r2, #10
 8000f50:	801a      	strh	r2, [r3, #0]
 8000f52:	e05b      	b.n	800100c <display_init+0x144>
case 79: spi_hold=spell[(init_b&62)+1];init=81;break;
 8000f54:	4b45      	ldr	r3, [pc, #276]	; (800106c <display_init+0x1a4>)
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	4a45      	ldr	r2, [pc, #276]	; (8001074 <display_init+0x1ac>)
 8000f60:	5cd3      	ldrb	r3, [r2, r3]
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	4b42      	ldr	r3, [pc, #264]	; (8001070 <display_init+0x1a8>)
 8000f66:	801a      	strh	r2, [r3, #0]
 8000f68:	4b3f      	ldr	r3, [pc, #252]	; (8001068 <display_init+0x1a0>)
 8000f6a:	2251      	movs	r2, #81	; 0x51
 8000f6c:	701a      	strb	r2, [r3, #0]
 8000f6e:	e04d      	b.n	800100c <display_init+0x144>
case 80: spi_hold=spell[init_b&62];break; // or write other set then jump
 8000f70:	4b3e      	ldr	r3, [pc, #248]	; (800106c <display_init+0x1a4>)
 8000f72:	881b      	ldrh	r3, [r3, #0]
 8000f74:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000f78:	4a3e      	ldr	r2, [pc, #248]	; (8001074 <display_init+0x1ac>)
 8000f7a:	5cd3      	ldrb	r3, [r2, r3]
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	4b3c      	ldr	r3, [pc, #240]	; (8001070 <display_init+0x1a8>)
 8000f80:	801a      	strh	r2, [r3, #0]
 8000f82:	e043      	b.n	800100c <display_init+0x144>
case 81: spi_hold=10;init=81;break;
 8000f84:	4b3a      	ldr	r3, [pc, #232]	; (8001070 <display_init+0x1a8>)
 8000f86:	220a      	movs	r2, #10
 8000f88:	801a      	strh	r2, [r3, #0]
 8000f8a:	4b37      	ldr	r3, [pc, #220]	; (8001068 <display_init+0x1a0>)
 8000f8c:	2251      	movs	r2, #81	; 0x51
 8000f8e:	701a      	strb	r2, [r3, #0]
 8000f90:	e03c      	b.n	800100c <display_init+0x144>


case 82: spi_hold=384+(init_b>>1);break;  // finish writes
 8000f92:	4b36      	ldr	r3, [pc, #216]	; (800106c <display_init+0x1a4>)
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	085b      	lsrs	r3, r3, #1
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	4b33      	ldr	r3, [pc, #204]	; (8001070 <display_init+0x1a8>)
 8000fa2:	801a      	strh	r2, [r3, #0]
 8000fa4:	e032      	b.n	800100c <display_init+0x144>
case 83: spi_hold=spell[init_b&62];break;
 8000fa6:	4b31      	ldr	r3, [pc, #196]	; (800106c <display_init+0x1a4>)
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000fae:	4a31      	ldr	r2, [pc, #196]	; (8001074 <display_init+0x1ac>)
 8000fb0:	5cd3      	ldrb	r3, [r2, r3]
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	4b2e      	ldr	r3, [pc, #184]	; (8001070 <display_init+0x1a8>)
 8000fb6:	801a      	strh	r2, [r3, #0]
 8000fb8:	e028      	b.n	800100c <display_init+0x144>
case 84 : spi_hold=spell[(init_b&62)+1];init_b=cursor_menu[2]&63;displayBuffer ();init=76; break; //update cursor and displaybuffer
 8000fba:	4b2c      	ldr	r3, [pc, #176]	; (800106c <display_init+0x1a4>)
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	4a2b      	ldr	r2, [pc, #172]	; (8001074 <display_init+0x1ac>)
 8000fc6:	5cd3      	ldrb	r3, [r2, r3]
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	4b29      	ldr	r3, [pc, #164]	; (8001070 <display_init+0x1a8>)
 8000fcc:	801a      	strh	r2, [r3, #0]
 8000fce:	4b2a      	ldr	r3, [pc, #168]	; (8001078 <display_init+0x1b0>)
 8000fd0:	889b      	ldrh	r3, [r3, #4]
 8000fd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	4b24      	ldr	r3, [pc, #144]	; (800106c <display_init+0x1a4>)
 8000fda:	801a      	strh	r2, [r3, #0]
 8000fdc:	f000 f948 	bl	8001270 <displayBuffer>
 8000fe0:	4b21      	ldr	r3, [pc, #132]	; (8001068 <display_init+0x1a0>)
 8000fe2:	224c      	movs	r2, #76	; 0x4c
 8000fe4:	701a      	strb	r2, [r3, #0]
 8000fe6:	e011      	b.n	800100c <display_init+0x144>
default : init_b=init-6;displayBuffer ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 8000fe8:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <display_init+0x1a0>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	3b06      	subs	r3, #6
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	4b1e      	ldr	r3, [pc, #120]	; (800106c <display_init+0x1a4>)
 8000ff4:	801a      	strh	r2, [r3, #0]
 8000ff6:	f000 f93b 	bl	8001270 <displayBuffer>
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	; (800106c <display_init+0x1a4>)
 8000ffc:	881b      	ldrh	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	4b1c      	ldr	r3, [pc, #112]	; (8001074 <display_init+0x1ac>)
 8001002:	5c9b      	ldrb	r3, [r3, r2]
 8001004:	b29a      	uxth	r2, r3
 8001006:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <display_init+0x1a8>)
 8001008:	801a      	strh	r2, [r3, #0]
 800100a:	bf00      	nop
}


if (init<6)	{HAL_Delay(3);spi_hold=disp[init] ;  init_b=cursor_menu[2]; } //delay needs to go
 800100c:	4b16      	ldr	r3, [pc, #88]	; (8001068 <display_init+0x1a0>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b05      	cmp	r3, #5
 8001012:	d80f      	bhi.n	8001034 <display_init+0x16c>
 8001014:	2003      	movs	r0, #3
 8001016:	f003 f857 	bl	80040c8 <HAL_Delay>
 800101a:	4b13      	ldr	r3, [pc, #76]	; (8001068 <display_init+0x1a0>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	3328      	adds	r3, #40	; 0x28
 8001022:	443b      	add	r3, r7
 8001024:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <display_init+0x1a8>)
 800102a:	801a      	strh	r2, [r3, #0]
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <display_init+0x1b0>)
 800102e:	889a      	ldrh	r2, [r3, #4]
 8001030:	4b0e      	ldr	r3, [pc, #56]	; (800106c <display_init+0x1a4>)
 8001032:	801a      	strh	r2, [r3, #0]

init++;   // after 6 it quits the rest is not needed
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <display_init+0x1a0>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	3301      	adds	r3, #1
 800103a:	b2da      	uxtb	r2, r3
 800103c:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <display_init+0x1a0>)
 800103e:	701a      	strb	r2, [r3, #0]
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <display_init+0x19c>)
 8001042:	2201      	movs	r2, #1
 8001044:	701a      	strb	r2, [r3, #0]
 8001046:	f7ff fd7f 	bl	8000b48 <SPI_command>
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <display_init+0x19c>)
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <display_init+0x1b4>)
 8001052:	2200      	movs	r2, #0
 8001054:	801a      	strh	r2, [r3, #0]
		  //if ((bsrr_counter==49) && (spi_send==2)) {bsrr_counter=0; spi_send=0;}
		  if (bsrr_counter==49)  {bsrr_counter=0; spi_send=0;}
		 }
*/

}
 8001056:	bf00      	nop
 8001058:	3728      	adds	r7, #40	; 0x28
 800105a:	46bd      	mov	sp, r7
 800105c:	bdb0      	pop	{r4, r5, r7, pc}
 800105e:	bf00      	nop
 8001060:	080097d0 	.word	0x080097d0
 8001064:	20002020 	.word	0x20002020
 8001068:	20002021 	.word	0x20002021
 800106c:	20002022 	.word	0x20002022
 8001070:	2000201e 	.word	0x2000201e
 8001074:	20000038 	.word	0x20000038
 8001078:	20002024 	.word	0x20002024
 800107c:	2000201a 	.word	0x2000201a

08001080 <display_update>:



}

void display_update(void){				//spi display updater code , all gfx , works pretty ok n doesn't need to be running always 18x 128 ,constant scanning
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0

	uint8_t spi_store[5];

switch (gfx_skip) { // 1-17  one row
 8001086:	4b5d      	ldr	r3, [pc, #372]	; (80011fc <display_update+0x17c>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b03      	cmp	r3, #3
 800108c:	d035      	beq.n	80010fa <display_update+0x7a>
 800108e:	2b03      	cmp	r3, #3
 8001090:	dc3d      	bgt.n	800110e <display_update+0x8e>
 8001092:	2b01      	cmp	r3, #1
 8001094:	d002      	beq.n	800109c <display_update+0x1c>
 8001096:	2b02      	cmp	r3, #2
 8001098:	d020      	beq.n	80010dc <display_update+0x5c>
 800109a:	e038      	b.n	800110e <display_update+0x8e>


case 1 : {spi_hold=((gfx_counter[0])&31)+384;gfx_counter[4]=(gfx_counter[0]>>5);  gfx_counter[0]=(gfx_counter[0]+1)&63 ;gfx_skip++;break ;}  // count up positions
 800109c:	4b58      	ldr	r3, [pc, #352]	; (8001200 <display_update+0x180>)
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	f003 031f 	and.w	r3, r3, #31
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	4b55      	ldr	r3, [pc, #340]	; (8001204 <display_update+0x184>)
 80010ae:	801a      	strh	r2, [r3, #0]
 80010b0:	4b53      	ldr	r3, [pc, #332]	; (8001200 <display_update+0x180>)
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	095b      	lsrs	r3, r3, #5
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	4b51      	ldr	r3, [pc, #324]	; (8001200 <display_update+0x180>)
 80010ba:	811a      	strh	r2, [r3, #8]
 80010bc:	4b50      	ldr	r3, [pc, #320]	; (8001200 <display_update+0x180>)
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	3301      	adds	r3, #1
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	4b4d      	ldr	r3, [pc, #308]	; (8001200 <display_update+0x180>)
 80010cc:	801a      	strh	r2, [r3, #0]
 80010ce:	4b4b      	ldr	r3, [pc, #300]	; (80011fc <display_update+0x17c>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	3301      	adds	r3, #1
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4b49      	ldr	r3, [pc, #292]	; (80011fc <display_update+0x17c>)
 80010d8:	701a      	strb	r2, [r3, #0]
 80010da:	e028      	b.n	800112e <display_update+0xae>
case 2  : {	spi_hold=384+(gfx_counter[4]*8);gfx_skip++;break ;  }
 80010dc:	4b48      	ldr	r3, [pc, #288]	; (8001200 <display_update+0x180>)
 80010de:	891b      	ldrh	r3, [r3, #8]
 80010e0:	3330      	adds	r3, #48	; 0x30
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	4b46      	ldr	r3, [pc, #280]	; (8001204 <display_update+0x184>)
 80010ea:	801a      	strh	r2, [r3, #0]
 80010ec:	4b43      	ldr	r3, [pc, #268]	; (80011fc <display_update+0x17c>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	3301      	adds	r3, #1
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	4b41      	ldr	r3, [pc, #260]	; (80011fc <display_update+0x17c>)
 80010f6:	701a      	strb	r2, [r3, #0]
 80010f8:	e019      	b.n	800112e <display_update+0xae>
case 3   : gfx_counter[3]=0; gfx_skip++;break;
 80010fa:	4b41      	ldr	r3, [pc, #260]	; (8001200 <display_update+0x180>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	80da      	strh	r2, [r3, #6]
 8001100:	4b3e      	ldr	r3, [pc, #248]	; (80011fc <display_update+0x17c>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	3301      	adds	r3, #1
 8001106:	b2da      	uxtb	r2, r3
 8001108:	4b3c      	ldr	r3, [pc, #240]	; (80011fc <display_update+0x17c>)
 800110a:	701a      	strb	r2, [r3, #0]
 800110c:	e00f      	b.n	800112e <display_update+0xae>
//case 18 : gfx_counter[2]=(gfx_counter[2]+1) &63; gfx_counter[3]=0;gfx_skip=1;break;  //not ideal
default :  gfx_counter[3]=(gfx_counter[3]+1)&15;gfx_skip++;break;
 800110e:	4b3c      	ldr	r3, [pc, #240]	; (8001200 <display_update+0x180>)
 8001110:	88db      	ldrh	r3, [r3, #6]
 8001112:	3301      	adds	r3, #1
 8001114:	b29b      	uxth	r3, r3
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	b29a      	uxth	r2, r3
 800111c:	4b38      	ldr	r3, [pc, #224]	; (8001200 <display_update+0x180>)
 800111e:	80da      	strh	r2, [r3, #6]
 8001120:	4b36      	ldr	r3, [pc, #216]	; (80011fc <display_update+0x17c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	3301      	adds	r3, #1
 8001126:	b2da      	uxtb	r2, r3
 8001128:	4b34      	ldr	r3, [pc, #208]	; (80011fc <display_update+0x17c>)
 800112a:	701a      	strb	r2, [r3, #0]
 800112c:	bf00      	nop

}


if ((gfx_skip==2) || (gfx_skip==3) || (gfx_skip==1)) spi_hold=spi_hold; else spi_hold=gfx_ram[gfx_counter[2]] [gfx_counter[3]] ; // write command or data
 800112e:	4b33      	ldr	r3, [pc, #204]	; (80011fc <display_update+0x17c>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b02      	cmp	r3, #2
 8001134:	d007      	beq.n	8001146 <display_update+0xc6>
 8001136:	4b31      	ldr	r3, [pc, #196]	; (80011fc <display_update+0x17c>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b03      	cmp	r3, #3
 800113c:	d003      	beq.n	8001146 <display_update+0xc6>
 800113e:	4b2f      	ldr	r3, [pc, #188]	; (80011fc <display_update+0x17c>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d104      	bne.n	8001150 <display_update+0xd0>
 8001146:	4b2f      	ldr	r3, [pc, #188]	; (8001204 <display_update+0x184>)
 8001148:	881a      	ldrh	r2, [r3, #0]
 800114a:	4b2e      	ldr	r3, [pc, #184]	; (8001204 <display_update+0x184>)
 800114c:	801a      	strh	r2, [r3, #0]
 800114e:	e00d      	b.n	800116c <display_update+0xec>
 8001150:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <display_update+0x180>)
 8001152:	889b      	ldrh	r3, [r3, #4]
 8001154:	4618      	mov	r0, r3
 8001156:	4b2a      	ldr	r3, [pc, #168]	; (8001200 <display_update+0x180>)
 8001158:	88db      	ldrh	r3, [r3, #6]
 800115a:	4619      	mov	r1, r3
 800115c:	4a2a      	ldr	r2, [pc, #168]	; (8001208 <display_update+0x188>)
 800115e:	0103      	lsls	r3, r0, #4
 8001160:	4413      	add	r3, r2
 8001162:	440b      	add	r3, r1
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	b29a      	uxth	r2, r3
 8001168:	4b26      	ldr	r3, [pc, #152]	; (8001204 <display_update+0x184>)
 800116a:	801a      	strh	r2, [r3, #0]

if (gfx_skip==19)  {gfx_counter[2]=(gfx_counter[2]+1) &63; gfx_counter[3]=0;gfx_skip=1;}   // fixed last doubled char
 800116c:	4b23      	ldr	r3, [pc, #140]	; (80011fc <display_update+0x17c>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b13      	cmp	r3, #19
 8001172:	d10e      	bne.n	8001192 <display_update+0x112>
 8001174:	4b22      	ldr	r3, [pc, #136]	; (8001200 <display_update+0x180>)
 8001176:	889b      	ldrh	r3, [r3, #4]
 8001178:	3301      	adds	r3, #1
 800117a:	b29b      	uxth	r3, r3
 800117c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001180:	b29a      	uxth	r2, r3
 8001182:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <display_update+0x180>)
 8001184:	809a      	strh	r2, [r3, #4]
 8001186:	4b1e      	ldr	r3, [pc, #120]	; (8001200 <display_update+0x180>)
 8001188:	2200      	movs	r2, #0
 800118a:	80da      	strh	r2, [r3, #6]
 800118c:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <display_update+0x17c>)
 800118e:	2201      	movs	r2, #1
 8001190:	701a      	strb	r2, [r3, #0]

		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8001192:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <display_update+0x184>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	0a1b      	lsrs	r3, r3, #8
 8001198:	b29b      	uxth	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <display_update+0x126>
 800119e:	4b1b      	ldr	r3, [pc, #108]	; (800120c <display_update+0x18c>)
 80011a0:	22f8      	movs	r2, #248	; 0xf8
 80011a2:	701a      	strb	r2, [r3, #0]
 80011a4:	e002      	b.n	80011ac <display_update+0x12c>
 80011a6:	4b19      	ldr	r3, [pc, #100]	; (800120c <display_update+0x18c>)
 80011a8:	22fa      	movs	r2, #250	; 0xfa
 80011aa:	701a      	strb	r2, [r3, #0]

		spi_store[0]=spi_byte&255;
 80011ac:	4b17      	ldr	r3, [pc, #92]	; (800120c <display_update+0x18c>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	703b      	strb	r3, [r7, #0]
		spi_store[1]=((spi_hold>>4)<<4)&255;
 80011b2:	4b14      	ldr	r3, [pc, #80]	; (8001204 <display_update+0x184>)
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	091b      	lsrs	r3, r3, #4
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	011b      	lsls	r3, r3, #4
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	707b      	strb	r3, [r7, #1]
		spi_store[2]=((spi_hold&15)<<4)&255;
 80011c0:	4b10      	ldr	r3, [pc, #64]	; (8001204 <display_update+0x184>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	011b      	lsls	r3, r3, #4
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	70bb      	strb	r3, [r7, #2]

	// send this to spi for now
			HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3, 3);  // working good ,blocking , never set time too high  or figure other option maybe DMA
 80011ca:	4639      	mov	r1, r7
 80011cc:	2303      	movs	r3, #3
 80011ce:	2203      	movs	r2, #3
 80011d0:	480f      	ldr	r0, [pc, #60]	; (8001210 <display_update+0x190>)
 80011d2:	f006 fb34 	bl	800783e <HAL_SPI_Transmit>


disp_end=gfx_skip+gfx_counter[2]+gfx_counter[3];			// vsynch for displaybuffer
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <display_update+0x180>)
 80011d8:	889b      	ldrh	r3, [r3, #4]
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	4b07      	ldr	r3, [pc, #28]	; (80011fc <display_update+0x17c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	4413      	add	r3, r2
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <display_update+0x180>)
 80011e6:	88db      	ldrh	r3, [r3, #6]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	4413      	add	r3, r2
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <display_update+0x194>)
 80011f0:	701a      	strb	r2, [r3, #0]


}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	200001ec 	.word	0x200001ec
 8001200:	200028fc 	.word	0x200028fc
 8001204:	2000201e 	.word	0x2000201e
 8001208:	200024cc 	.word	0x200024cc
 800120c:	2000201c 	.word	0x2000201c
 8001210:	20003ab0 	.word	0x20003ab0
 8001214:	2000290a 	.word	0x2000290a

08001218 <display_fill>:
void display_fill(void)  {     // full update of gfx memory
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
loop_counter3=1;
 800121c:	4b10      	ldr	r3, [pc, #64]	; (8001260 <display_fill+0x48>)
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
for (n=0;n<2048;n++)	{ //fills up gfx ram or not
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <display_fill+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	801a      	strh	r2, [r3, #0]
 8001228:	e011      	b.n	800124e <display_fill+0x36>

enc2_dir=(n>>4)+menu_page[1]; 												// 0-128         +      0,127,255,
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <display_fill+0x4c>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	091b      	lsrs	r3, r3, #4
 8001230:	b29a      	uxth	r2, r3
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <display_fill+0x50>)
 8001234:	885b      	ldrh	r3, [r3, #2]
 8001236:	4413      	add	r3, r2
 8001238:	b29a      	uxth	r2, r3
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <display_fill+0x54>)
 800123c:	801a      	strh	r2, [r3, #0]

displayBuffer();
 800123e:	f000 f817 	bl	8001270 <displayBuffer>
for (n=0;n<2048;n++)	{ //fills up gfx ram or not
 8001242:	4b08      	ldr	r3, [pc, #32]	; (8001264 <display_fill+0x4c>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	3301      	adds	r3, #1
 8001248:	b29a      	uxth	r2, r3
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <display_fill+0x4c>)
 800124c:	801a      	strh	r2, [r3, #0]
 800124e:	4b05      	ldr	r3, [pc, #20]	; (8001264 <display_fill+0x4c>)
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001256:	d3e8      	bcc.n	800122a <display_fill+0x12>
}
//enc2_dir=menu_page[1];  // end clean
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	2000290b 	.word	0x2000290b
 8001264:	20000b9e 	.word	0x20000b9e
 8001268:	20002034 	.word	0x20002034
 800126c:	20002012 	.word	0x20002012

08001270 <displayBuffer>:



void displayBuffer (void){        //  in a constant state of flux
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0

	if (disp_stepper==0) init_b=enc2_dir; else init_b=111+disp_stepper;  // fetch values for last line or cursor
 8001276:	4b36      	ldr	r3, [pc, #216]	; (8001350 <displayBuffer+0xe0>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d104      	bne.n	8001288 <displayBuffer+0x18>
 800127e:	4b35      	ldr	r3, [pc, #212]	; (8001354 <displayBuffer+0xe4>)
 8001280:	881a      	ldrh	r2, [r3, #0]
 8001282:	4b35      	ldr	r3, [pc, #212]	; (8001358 <displayBuffer+0xe8>)
 8001284:	801a      	strh	r2, [r3, #0]
 8001286:	e006      	b.n	8001296 <displayBuffer+0x26>
 8001288:	4b31      	ldr	r3, [pc, #196]	; (8001350 <displayBuffer+0xe0>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	b29b      	uxth	r3, r3
 800128e:	336f      	adds	r3, #111	; 0x6f
 8001290:	b29a      	uxth	r2, r3
 8001292:	4b31      	ldr	r3, [pc, #196]	; (8001358 <displayBuffer+0xe8>)
 8001294:	801a      	strh	r2, [r3, #0]

	uint8_t d_count;
uint16_t init_x=((init_b>>4)<<3);    // normal x8 , try other 64 x16
 8001296:	4b30      	ldr	r3, [pc, #192]	; (8001358 <displayBuffer+0xe8>)
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	091b      	lsrs	r3, r3, #4
 800129c:	b29b      	uxth	r3, r3
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	80bb      	strh	r3, [r7, #4]
uint8_t init_x2=init_x&63;  // 0-64  character address in gfx
 80012a2:	88bb      	ldrh	r3, [r7, #4]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012aa:	70fb      	strb	r3, [r7, #3]
uint8_t init_y=init_b&15;
 80012ac:	4b2a      	ldr	r3, [pc, #168]	; (8001358 <displayBuffer+0xe8>)
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	70bb      	strb	r3, [r7, #2]
// just to point the lfo number



//if (enc2_dir<128){
	if (disp_stepper==0) { store_c= disp_lut [init_b>>4]  [init_y] ; feedback_pointer=((enc2_dir>>4)<<3)&127; feedback_line[10]=((enc2_dir&15)>>1)+48;  // pointer and data , runs at every character drawn at cursor
 80012b8:	4b25      	ldr	r3, [pc, #148]	; (8001350 <displayBuffer+0xe0>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d179      	bne.n	80013b4 <displayBuffer+0x144>
 80012c0:	4b25      	ldr	r3, [pc, #148]	; (8001358 <displayBuffer+0xe8>)
 80012c2:	881b      	ldrh	r3, [r3, #0]
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	461a      	mov	r2, r3
 80012ca:	78bb      	ldrb	r3, [r7, #2]
 80012cc:	4923      	ldr	r1, [pc, #140]	; (800135c <displayBuffer+0xec>)
 80012ce:	0112      	lsls	r2, r2, #4
 80012d0:	4413      	add	r3, r2
 80012d2:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80012d6:	4b22      	ldr	r3, [pc, #136]	; (8001360 <displayBuffer+0xf0>)
 80012d8:	801a      	strh	r2, [r3, #0]
 80012da:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <displayBuffer+0xe4>)
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	091b      	lsrs	r3, r3, #4
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <displayBuffer+0xf4>)
 80012ee:	801a      	strh	r2, [r3, #0]
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <displayBuffer+0xe4>)
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	105b      	asrs	r3, r3, #1
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	3330      	adds	r3, #48	; 0x30
 8001300:	b29a      	uxth	r2, r3
 8001302:	4b19      	ldr	r3, [pc, #100]	; (8001368 <displayBuffer+0xf8>)
 8001304:	829a      	strh	r2, [r3, #20]


	menulength = sizeof(menu_items) / sizeof(menu_items[feedback_pointer]);  // get length of data on location
 8001306:	4b19      	ldr	r3, [pc, #100]	; (800136c <displayBuffer+0xfc>)
 8001308:	2235      	movs	r2, #53	; 0x35
 800130a:	701a      	strb	r2, [r3, #0]

	for (i = 0; i < 56; i++)
 800130c:	4b18      	ldr	r3, [pc, #96]	; (8001370 <displayBuffer+0x100>)
 800130e:	2200      	movs	r2, #0
 8001310:	801a      	strh	r2, [r3, #0]
 8001312:	e014      	b.n	800133e <displayBuffer+0xce>
		{ if (menu_loc[i]==store_c){menu_locA=i;break;}    // gets disp_lut number that points in menu_items
 8001314:	4b16      	ldr	r3, [pc, #88]	; (8001370 <displayBuffer+0x100>)
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	461a      	mov	r2, r3
 800131a:	4b16      	ldr	r3, [pc, #88]	; (8001374 <displayBuffer+0x104>)
 800131c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <displayBuffer+0xf0>)
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	429a      	cmp	r2, r3
 8001326:	d104      	bne.n	8001332 <displayBuffer+0xc2>
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <displayBuffer+0x100>)
 800132a:	881a      	ldrh	r2, [r3, #0]
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <displayBuffer+0x108>)
 800132e:	801a      	strh	r2, [r3, #0]
 8001330:	e009      	b.n	8001346 <displayBuffer+0xd6>
	for (i = 0; i < 56; i++)
 8001332:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <displayBuffer+0x100>)
 8001334:	881b      	ldrh	r3, [r3, #0]
 8001336:	3301      	adds	r3, #1
 8001338:	b29a      	uxth	r2, r3
 800133a:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <displayBuffer+0x100>)
 800133c:	801a      	strh	r2, [r3, #0]
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <displayBuffer+0x100>)
 8001340:	881b      	ldrh	r3, [r3, #0]
 8001342:	2b37      	cmp	r3, #55	; 0x37
 8001344:	d9e6      	bls.n	8001314 <displayBuffer+0xa4>

		}

	for (i = 0; i < menulength; i++)
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <displayBuffer+0x100>)
 8001348:	2200      	movs	r2, #0
 800134a:	801a      	strh	r2, [r3, #0]
 800134c:	e02b      	b.n	80013a6 <displayBuffer+0x136>
 800134e:	bf00      	nop
 8001350:	20000211 	.word	0x20000211
 8001354:	20002012 	.word	0x20002012
 8001358:	20002022 	.word	0x20002022
 800135c:	080098a4 	.word	0x080098a4
 8001360:	20000b9c 	.word	0x20000b9c
 8001364:	2000087c 	.word	0x2000087c
 8001368:	20000000 	.word	0x20000000
 800136c:	20000880 	.word	0x20000880
 8001370:	20000bc0 	.word	0x20000bc0
 8001374:	08009ca4 	.word	0x08009ca4
 8001378:	2000087e 	.word	0x2000087e
	{ menulist_hold[i+1]=menu_items[menu_locA] [i];
 800137c:	4b8c      	ldr	r3, [pc, #560]	; (80015b0 <displayBuffer+0x340>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	4b8c      	ldr	r3, [pc, #560]	; (80015b4 <displayBuffer+0x344>)
 8001384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001388:	4a8b      	ldr	r2, [pc, #556]	; (80015b8 <displayBuffer+0x348>)
 800138a:	8812      	ldrh	r2, [r2, #0]
 800138c:	441a      	add	r2, r3
 800138e:	4b8a      	ldr	r3, [pc, #552]	; (80015b8 <displayBuffer+0x348>)
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	3301      	adds	r3, #1
 8001394:	7811      	ldrb	r1, [r2, #0]
 8001396:	4a89      	ldr	r2, [pc, #548]	; (80015bc <displayBuffer+0x34c>)
 8001398:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < menulength; i++)
 800139a:	4b87      	ldr	r3, [pc, #540]	; (80015b8 <displayBuffer+0x348>)
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	3301      	adds	r3, #1
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	4b85      	ldr	r3, [pc, #532]	; (80015b8 <displayBuffer+0x348>)
 80013a4:	801a      	strh	r2, [r3, #0]
 80013a6:	4b86      	ldr	r3, [pc, #536]	; (80015c0 <displayBuffer+0x350>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	4b82      	ldr	r3, [pc, #520]	; (80015b8 <displayBuffer+0x348>)
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d8e3      	bhi.n	800137c <displayBuffer+0x10c>

	}   // grab item , this works but slower

	}

	if  ((disp_stepper<11) && (disp_stepper))   {      // 0-9 chars of line 8 , overhead is ok
 80013b4:	4b83      	ldr	r3, [pc, #524]	; (80015c4 <displayBuffer+0x354>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b0a      	cmp	r3, #10
 80013ba:	d817      	bhi.n	80013ec <displayBuffer+0x17c>
 80013bc:	4b81      	ldr	r3, [pc, #516]	; (80015c4 <displayBuffer+0x354>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d013      	beq.n	80013ec <displayBuffer+0x17c>

//{	feedback_line[disp_stepper]=menuList[disp_stepper+feedback_pointer];  // feedback data info standard , per character 0-16

		feedback_line[disp_stepper]=menulist_hold[disp_stepper];  // feedback data modified 0-16
 80013c4:	4b7f      	ldr	r3, [pc, #508]	; (80015c4 <displayBuffer+0x354>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b7c      	ldr	r3, [pc, #496]	; (80015bc <displayBuffer+0x34c>)
 80013cc:	5c99      	ldrb	r1, [r3, r2]
 80013ce:	4b7d      	ldr	r3, [pc, #500]	; (80015c4 <displayBuffer+0x354>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	b289      	uxth	r1, r1
 80013d6:	4b7c      	ldr	r3, [pc, #496]	; (80015c8 <displayBuffer+0x358>)
 80013d8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

store_c=feedback_line[disp_stepper];//gets potvalues pointer from menus or feedback line , per character
 80013dc:	4b79      	ldr	r3, [pc, #484]	; (80015c4 <displayBuffer+0x354>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b79      	ldr	r3, [pc, #484]	; (80015c8 <displayBuffer+0x358>)
 80013e4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80013e8:	4b78      	ldr	r3, [pc, #480]	; (80015cc <displayBuffer+0x35c>)
 80013ea:	801a      	strh	r2, [r3, #0]
	}

//if (disp_stepper>10) store_c=feedback_line[disp_stepper];  /// just the lcd out  values at end of line 8
if ((disp_stepper>11) &&  (disp_stepper<15)) store_c=potSource[368+disp_stepper]+48;  /// just the lcd out  values at end of line 8
 80013ec:	4b75      	ldr	r3, [pc, #468]	; (80015c4 <displayBuffer+0x354>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b0b      	cmp	r3, #11
 80013f2:	d90e      	bls.n	8001412 <displayBuffer+0x1a2>
 80013f4:	4b73      	ldr	r3, [pc, #460]	; (80015c4 <displayBuffer+0x354>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b0e      	cmp	r3, #14
 80013fa:	d80a      	bhi.n	8001412 <displayBuffer+0x1a2>
 80013fc:	4b71      	ldr	r3, [pc, #452]	; (80015c4 <displayBuffer+0x354>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8001404:	4a72      	ldr	r2, [pc, #456]	; (80015d0 <displayBuffer+0x360>)
 8001406:	5cd3      	ldrb	r3, [r2, r3]
 8001408:	b29b      	uxth	r3, r3
 800140a:	3330      	adds	r3, #48	; 0x30
 800140c:	b29a      	uxth	r2, r3
 800140e:	4b6f      	ldr	r3, [pc, #444]	; (80015cc <displayBuffer+0x35c>)
 8001410:	801a      	strh	r2, [r3, #0]
if (disp_stepper>14) store_c=feedback_line[disp_stepper];  /// just the lcd out  values at end of line 8
 8001412:	4b6c      	ldr	r3, [pc, #432]	; (80015c4 <displayBuffer+0x354>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b0e      	cmp	r3, #14
 8001418:	d907      	bls.n	800142a <displayBuffer+0x1ba>
 800141a:	4b6a      	ldr	r3, [pc, #424]	; (80015c4 <displayBuffer+0x354>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	4b69      	ldr	r3, [pc, #420]	; (80015c8 <displayBuffer+0x358>)
 8001422:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001426:	4b69      	ldr	r3, [pc, #420]	; (80015cc <displayBuffer+0x35c>)
 8001428:	801a      	strh	r2, [r3, #0]
	// all this can be simplified
	 if (store_c==64) store_c=47;  //EMPTY SPACE
 800142a:	4b68      	ldr	r3, [pc, #416]	; (80015cc <displayBuffer+0x35c>)
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	2b40      	cmp	r3, #64	; 0x40
 8001430:	d102      	bne.n	8001438 <displayBuffer+0x1c8>
 8001432:	4b66      	ldr	r3, [pc, #408]	; (80015cc <displayBuffer+0x35c>)
 8001434:	222f      	movs	r2, #47	; 0x2f
 8001436:	801a      	strh	r2, [r3, #0]
	if ((store_c>127)&& (store_c<255))  {lcd_out3=potSource[store_c-128] ;     store_c= potValues[store_c&127]+48;															}		// NORMAL POTVALUES 0-127
 8001438:	4b64      	ldr	r3, [pc, #400]	; (80015cc <displayBuffer+0x35c>)
 800143a:	881b      	ldrh	r3, [r3, #0]
 800143c:	2b7f      	cmp	r3, #127	; 0x7f
 800143e:	d916      	bls.n	800146e <displayBuffer+0x1fe>
 8001440:	4b62      	ldr	r3, [pc, #392]	; (80015cc <displayBuffer+0x35c>)
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	2bfe      	cmp	r3, #254	; 0xfe
 8001446:	d812      	bhi.n	800146e <displayBuffer+0x1fe>
 8001448:	4b60      	ldr	r3, [pc, #384]	; (80015cc <displayBuffer+0x35c>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	3b80      	subs	r3, #128	; 0x80
 800144e:	4a60      	ldr	r2, [pc, #384]	; (80015d0 <displayBuffer+0x360>)
 8001450:	5cd3      	ldrb	r3, [r2, r3]
 8001452:	b29a      	uxth	r2, r3
 8001454:	4b5f      	ldr	r3, [pc, #380]	; (80015d4 <displayBuffer+0x364>)
 8001456:	801a      	strh	r2, [r3, #0]
 8001458:	4b5c      	ldr	r3, [pc, #368]	; (80015cc <displayBuffer+0x35c>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001460:	4a5d      	ldr	r2, [pc, #372]	; (80015d8 <displayBuffer+0x368>)
 8001462:	5cd3      	ldrb	r3, [r2, r3]
 8001464:	b29b      	uxth	r3, r3
 8001466:	3330      	adds	r3, #48	; 0x30
 8001468:	b29a      	uxth	r2, r3
 800146a:	4b58      	ldr	r3, [pc, #352]	; (80015cc <displayBuffer+0x35c>)
 800146c:	801a      	strh	r2, [r3, #0]
	if ((store_c>254)	&& (store_c<384)) 											{lcd_out3=potSource[store_c-128] ;store_c= potValues[store_c-128]+48;}  // POTVALUES 128+
 800146e:	4b57      	ldr	r3, [pc, #348]	; (80015cc <displayBuffer+0x35c>)
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	2bfe      	cmp	r3, #254	; 0xfe
 8001474:	d916      	bls.n	80014a4 <displayBuffer+0x234>
 8001476:	4b55      	ldr	r3, [pc, #340]	; (80015cc <displayBuffer+0x35c>)
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800147e:	d211      	bcs.n	80014a4 <displayBuffer+0x234>
 8001480:	4b52      	ldr	r3, [pc, #328]	; (80015cc <displayBuffer+0x35c>)
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	3b80      	subs	r3, #128	; 0x80
 8001486:	4a52      	ldr	r2, [pc, #328]	; (80015d0 <displayBuffer+0x360>)
 8001488:	5cd3      	ldrb	r3, [r2, r3]
 800148a:	b29a      	uxth	r2, r3
 800148c:	4b51      	ldr	r3, [pc, #324]	; (80015d4 <displayBuffer+0x364>)
 800148e:	801a      	strh	r2, [r3, #0]
 8001490:	4b4e      	ldr	r3, [pc, #312]	; (80015cc <displayBuffer+0x35c>)
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	3b80      	subs	r3, #128	; 0x80
 8001496:	4a50      	ldr	r2, [pc, #320]	; (80015d8 <displayBuffer+0x368>)
 8001498:	5cd3      	ldrb	r3, [r2, r3]
 800149a:	b29b      	uxth	r3, r3
 800149c:	3330      	adds	r3, #48	; 0x30
 800149e:	b29a      	uxth	r2, r3
 80014a0:	4b4a      	ldr	r3, [pc, #296]	; (80015cc <displayBuffer+0x35c>)
 80014a2:	801a      	strh	r2, [r3, #0]
//	if ((store_c>127)	&& (store_c<384)) 	{store_c= potValues[store_c&127]+48;}		// NORMAL POTVALUES
	//if (store_c>511)		{store_c=store_c&127;			store_c= menuList2		[     (lfotarget_menu[   ((store_c>>3))  ])	+(store_c&7)]						; } // VARIABLE MENU ITEMS CHAR LUT
	if (store_c>511)		{store_c=store_c&127;			store_c= menu_items		[potSource[330]]    	[store_c&7]						; } // VARIABLE MENU ITEMS CHAR LUT
 80014a4:	4b49      	ldr	r3, [pc, #292]	; (80015cc <displayBuffer+0x35c>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014ac:	d316      	bcc.n	80014dc <displayBuffer+0x26c>
 80014ae:	4b47      	ldr	r3, [pc, #284]	; (80015cc <displayBuffer+0x35c>)
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	4b44      	ldr	r3, [pc, #272]	; (80015cc <displayBuffer+0x35c>)
 80014ba:	801a      	strh	r2, [r3, #0]
 80014bc:	4b44      	ldr	r3, [pc, #272]	; (80015d0 <displayBuffer+0x360>)
 80014be:	f893 314a 	ldrb.w	r3, [r3, #330]	; 0x14a
 80014c2:	461a      	mov	r2, r3
 80014c4:	4b3b      	ldr	r3, [pc, #236]	; (80015b4 <displayBuffer+0x344>)
 80014c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80014ca:	4b40      	ldr	r3, [pc, #256]	; (80015cc <displayBuffer+0x35c>)
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	4413      	add	r3, r2
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	4b3c      	ldr	r3, [pc, #240]	; (80015cc <displayBuffer+0x35c>)
 80014da:	801a      	strh	r2, [r3, #0]
	store_c=store_c-47; store_c = store_c &127;	  // spell no longer ?, store_c changes		STARTS FROM 0
 80014dc:	4b3b      	ldr	r3, [pc, #236]	; (80015cc <displayBuffer+0x35c>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	3b2f      	subs	r3, #47	; 0x2f
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	4b39      	ldr	r3, [pc, #228]	; (80015cc <displayBuffer+0x35c>)
 80014e6:	801a      	strh	r2, [r3, #0]
 80014e8:	4b38      	ldr	r3, [pc, #224]	; (80015cc <displayBuffer+0x35c>)
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	4b36      	ldr	r3, [pc, #216]	; (80015cc <displayBuffer+0x35c>)
 80014f4:	801a      	strh	r2, [r3, #0]

store_x=(store_c*8);  // i line characters , might shrink it and use extr for other  visuals
 80014f6:	4b35      	ldr	r3, [pc, #212]	; (80015cc <displayBuffer+0x35c>)
 80014f8:	881b      	ldrh	r3, [r3, #0]
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	803b      	strh	r3, [r7, #0]


if (( !loop_counter3) && (disp_stepper==0))     // blinker for cursor character only  , might just flip the whole last line from prev tables then its x4 faster
 80014fe:	4b37      	ldr	r3, [pc, #220]	; (80015dc <displayBuffer+0x36c>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d11f      	bne.n	8001546 <displayBuffer+0x2d6>
 8001506:	4b2f      	ldr	r3, [pc, #188]	; (80015c4 <displayBuffer+0x354>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d11b      	bne.n	8001546 <displayBuffer+0x2d6>
	for (d_count=0;d_count<7;d_count++){
 800150e:	2300      	movs	r3, #0
 8001510:	71fb      	strb	r3, [r7, #7]
 8001512:	e014      	b.n	800153e <displayBuffer+0x2ce>
						gfx_ram[d_count+init_x2] [init_y] = gfx_char[d_count+store_x]^127; //write character to ram ,should be elsewhere , blank is correct
 8001514:	79fa      	ldrb	r2, [r7, #7]
 8001516:	883b      	ldrh	r3, [r7, #0]
 8001518:	4413      	add	r3, r2
 800151a:	4a31      	ldr	r2, [pc, #196]	; (80015e0 <displayBuffer+0x370>)
 800151c:	5cd1      	ldrb	r1, [r2, r3]
 800151e:	79fa      	ldrb	r2, [r7, #7]
 8001520:	78fb      	ldrb	r3, [r7, #3]
 8001522:	441a      	add	r2, r3
 8001524:	78bb      	ldrb	r3, [r7, #2]
 8001526:	f081 017f 	eor.w	r1, r1, #127	; 0x7f
 800152a:	b2c8      	uxtb	r0, r1
 800152c:	492d      	ldr	r1, [pc, #180]	; (80015e4 <displayBuffer+0x374>)
 800152e:	0112      	lsls	r2, r2, #4
 8001530:	440a      	add	r2, r1
 8001532:	4413      	add	r3, r2
 8001534:	4602      	mov	r2, r0
 8001536:	701a      	strb	r2, [r3, #0]
	for (d_count=0;d_count<7;d_count++){
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	3301      	adds	r3, #1
 800153c:	71fb      	strb	r3, [r7, #7]
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	2b06      	cmp	r3, #6
 8001542:	d9e7      	bls.n	8001514 <displayBuffer+0x2a4>
if (( !loop_counter3) && (disp_stepper==0))     // blinker for cursor character only  , might just flip the whole last line from prev tables then its x4 faster
 8001544:	e017      	b.n	8001576 <displayBuffer+0x306>
	}
else for (d_count=0;d_count<7;d_count++){
 8001546:	2300      	movs	r3, #0
 8001548:	71fb      	strb	r3, [r7, #7]
 800154a:	e011      	b.n	8001570 <displayBuffer+0x300>
	gfx_ram[d_count+init_x2] [init_y] = gfx_char[d_count+store_x]; //write character to ram ,should be elsewhere , seems affected by later stufff
 800154c:	79fa      	ldrb	r2, [r7, #7]
 800154e:	883b      	ldrh	r3, [r7, #0]
 8001550:	18d1      	adds	r1, r2, r3
 8001552:	79fa      	ldrb	r2, [r7, #7]
 8001554:	78fb      	ldrb	r3, [r7, #3]
 8001556:	441a      	add	r2, r3
 8001558:	78bb      	ldrb	r3, [r7, #2]
 800155a:	4821      	ldr	r0, [pc, #132]	; (80015e0 <displayBuffer+0x370>)
 800155c:	5c40      	ldrb	r0, [r0, r1]
 800155e:	4921      	ldr	r1, [pc, #132]	; (80015e4 <displayBuffer+0x374>)
 8001560:	0112      	lsls	r2, r2, #4
 8001562:	440a      	add	r2, r1
 8001564:	4413      	add	r3, r2
 8001566:	4602      	mov	r2, r0
 8001568:	701a      	strb	r2, [r3, #0]
else for (d_count=0;d_count<7;d_count++){
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	3301      	adds	r3, #1
 800156e:	71fb      	strb	r3, [r7, #7]
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	2b06      	cmp	r3, #6
 8001574:	d9ea      	bls.n	800154c <displayBuffer+0x2dc>





gfx_ram[7+init_x2] [init_y] = 0; // last line is blank between rows or whatever
 8001576:	78fb      	ldrb	r3, [r7, #3]
 8001578:	1dda      	adds	r2, r3, #7
 800157a:	78bb      	ldrb	r3, [r7, #2]
 800157c:	4919      	ldr	r1, [pc, #100]	; (80015e4 <displayBuffer+0x374>)
 800157e:	0112      	lsls	r2, r2, #4
 8001580:	440a      	add	r2, r1
 8001582:	4413      	add	r3, r2
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]



if (disp_stepper==15) disp_stepper=0; else disp_stepper++;				// count to 16
 8001588:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <displayBuffer+0x354>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b0f      	cmp	r3, #15
 800158e:	d103      	bne.n	8001598 <displayBuffer+0x328>
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <displayBuffer+0x354>)
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]

}
 8001596:	e005      	b.n	80015a4 <displayBuffer+0x334>
if (disp_stepper==15) disp_stepper=0; else disp_stepper++;				// count to 16
 8001598:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <displayBuffer+0x354>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	3301      	adds	r3, #1
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <displayBuffer+0x354>)
 80015a2:	701a      	strb	r2, [r3, #0]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	2000087e 	.word	0x2000087e
 80015b4:	20000218 	.word	0x20000218
 80015b8:	20000bc0 	.word	0x20000bc0
 80015bc:	20000024 	.word	0x20000024
 80015c0:	20000880 	.word	0x20000880
 80015c4:	20000211 	.word	0x20000211
 80015c8:	20000000 	.word	0x20000000
 80015cc:	20000b9c 	.word	0x20000b9c
 80015d0:	20000a04 	.word	0x20000a04
 80015d4:	20002908 	.word	0x20002908
 80015d8:	20000884 	.word	0x20000884
 80015dc:	2000290b 	.word	0x2000290b
 80015e0:	200002ec 	.word	0x200002ec
 80015e4:	200024cc 	.word	0x200024cc

080015e8 <sampling>:


void sampling(void){						// 18 ms of data
 80015e8:	b5b0      	push	{r4, r5, r7, lr}
 80015ea:	f5ad 5d84 	sub.w	sp, sp, #4224	; 0x1080
 80015ee:	af00      	add	r7, sp, #0

//	if (time_proc>580) time_final=time_proc;


time_proc=0;
 80015f0:	4b97      	ldr	r3, [pc, #604]	; (8001850 <sampling+0x268>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	801a      	strh	r2, [r3, #0]


uint8_t mask_i;


bank_write=0;
 80015f6:	4b97      	ldr	r3, [pc, #604]	; (8001854 <sampling+0x26c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	801a      	strh	r2, [r3, #0]
//time_proc=0;   //millis

//adc_read();
//uint16_t isr_tempo=isrMask; // get tempo value
sample_pointB=sample_pointD;
 80015fc:	4b96      	ldr	r3, [pc, #600]	; (8001858 <sampling+0x270>)
 80015fe:	881a      	ldrh	r2, [r3, #0]
 8001600:	4b96      	ldr	r3, [pc, #600]	; (800185c <sampling+0x274>)
 8001602:	801a      	strh	r2, [r3, #0]
unsigned short tempo_start=0;  // enabled when i=isrMask;
 8001604:	2300      	movs	r3, #0
 8001606:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800160a:	f102 021c 	add.w	r2, r2, #28
 800160e:	8013      	strh	r3, [r2, #0]

uint16_t i_total;
uint16_t tempo_mod=tempo_lut[seq.tempo];  // set tempo,speed from lut 40-200bpm  ,changed to 4x for note lenght
 8001610:	4b93      	ldr	r3, [pc, #588]	; (8001860 <sampling+0x278>)
 8001612:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001616:	461a      	mov	r2, r3
 8001618:	4b92      	ldr	r3, [pc, #584]	; (8001864 <sampling+0x27c>)
 800161a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800161e:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001622:	f102 020c 	add.w	r2, r2, #12
 8001626:	8013      	strh	r3, [r2, #0]

uint8_t l;			// 35.002khz(0.02857ms) sample, 1 sample is temp count (16x=0.00045712) , *16=1 note ,at 300 (437bpm),(1/(0.00002857*tempo count*16)=1beat in s
float freq_temp;	// (1/(bpm/60)) /0.00045712=tempo count ie 1093.8 for 120bpm
float freq2_temp;

float tempo_sync=16384/((tempo_mod*16)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80
 8001628:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800162c:	f103 030c 	add.w	r3, r3, #12
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	da00      	bge.n	8001638 <sampling+0x50>
 8001636:	331f      	adds	r3, #31
 8001638:	115b      	asrs	r3, r3, #5
 800163a:	461a      	mov	r2, r3
 800163c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001640:	fb93 f3f2 	sdiv	r3, r3, r2
 8001644:	ee07 3a90 	vmov	s15, r3
 8001648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800164c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001650:	f103 0308 	add.w	r3, r3, #8
 8001654:	edc3 7a00 	vstr	s15, [r3]
tempo_sync=tempo_sync/80;  // bit weird her , this is adsr !
 8001658:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800165c:	f103 0308 	add.w	r3, r3, #8
 8001660:	ed93 7a00 	vldr	s14, [r3]
 8001664:	eddf 6a80 	vldr	s13, [pc, #512]	; 8001868 <sampling+0x280>
 8001668:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800166c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001670:	f103 0308 	add.w	r3, r3, #8
 8001674:	edc3 7a00 	vstr	s15, [r3]

uint32_t  note_toggler[17]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //records note position on 0-512   using a bit
 8001678:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800167c:	f103 0318 	add.w	r3, r3, #24
 8001680:	2244      	movs	r2, #68	; 0x44
 8001682:	2100      	movs	r1, #0
 8001684:	4618      	mov	r0, r3
 8001686:	f007 ff33 	bl	80094f0 <memset>
for (i=0;i<16;i++) {  note_toggler[i]=0; }
 800168a:	4b78      	ldr	r3, [pc, #480]	; (800186c <sampling+0x284>)
 800168c:	2200      	movs	r2, #0
 800168e:	801a      	strh	r2, [r3, #0]
 8001690:	e00e      	b.n	80016b0 <sampling+0xc8>
 8001692:	4b76      	ldr	r3, [pc, #472]	; (800186c <sampling+0x284>)
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 800169c:	443b      	add	r3, r7
 800169e:	2200      	movs	r2, #0
 80016a0:	f843 2c68 	str.w	r2, [r3, #-104]
 80016a4:	4b71      	ldr	r3, [pc, #452]	; (800186c <sampling+0x284>)
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	3301      	adds	r3, #1
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	4b6f      	ldr	r3, [pc, #444]	; (800186c <sampling+0x284>)
 80016ae:	801a      	strh	r2, [r3, #0]
 80016b0:	4b6e      	ldr	r3, [pc, #440]	; (800186c <sampling+0x284>)
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	2b0f      	cmp	r3, #15
 80016b6:	d9ec      	bls.n	8001692 <sampling+0xaa>

//lcd_out3=menu_page[1]; // still goes to 15

//lcd_out3=adc_values[0]+adc_values[1]+adc_values[2]; // 3 digit read out , works ok,, [2] works but thats it
//lcd_out3=lcd_out3+180;
potSource[380]=(lcd_out3/100)*16;  // still works   , potsource ref is located in feedback line var
 80016b8:	4b6d      	ldr	r3, [pc, #436]	; (8001870 <sampling+0x288>)
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	4a6d      	ldr	r2, [pc, #436]	; (8001874 <sampling+0x28c>)
 80016be:	fba2 2303 	umull	r2, r3, r2, r3
 80016c2:	095b      	lsrs	r3, r3, #5
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	011b      	lsls	r3, r3, #4
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	4b6a      	ldr	r3, [pc, #424]	; (8001878 <sampling+0x290>)
 80016ce:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
potSource[381]=((lcd_out3 %100)/10)*16;		 // 0-160 to 0-10
 80016d2:	4b67      	ldr	r3, [pc, #412]	; (8001870 <sampling+0x288>)
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	4a67      	ldr	r2, [pc, #412]	; (8001874 <sampling+0x28c>)
 80016d8:	fba2 1203 	umull	r1, r2, r2, r3
 80016dc:	0952      	lsrs	r2, r2, #5
 80016de:	2164      	movs	r1, #100	; 0x64
 80016e0:	fb01 f202 	mul.w	r2, r1, r2
 80016e4:	1a9b      	subs	r3, r3, r2
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	4a64      	ldr	r2, [pc, #400]	; (800187c <sampling+0x294>)
 80016ea:	fba2 2303 	umull	r2, r3, r2, r3
 80016ee:	08db      	lsrs	r3, r3, #3
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	011b      	lsls	r3, r3, #4
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	4b5f      	ldr	r3, [pc, #380]	; (8001878 <sampling+0x290>)
 80016fa:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
potSource[382]=(lcd_out3%10)*16;
 80016fe:	4b5c      	ldr	r3, [pc, #368]	; (8001870 <sampling+0x288>)
 8001700:	881a      	ldrh	r2, [r3, #0]
 8001702:	4b5e      	ldr	r3, [pc, #376]	; (800187c <sampling+0x294>)
 8001704:	fba3 1302 	umull	r1, r3, r3, r2
 8001708:	08d9      	lsrs	r1, r3, #3
 800170a:	460b      	mov	r3, r1
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	440b      	add	r3, r1
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	b29b      	uxth	r3, r3
 8001716:	b2db      	uxtb	r3, r3
 8001718:	011b      	lsls	r3, r3, #4
 800171a:	b2da      	uxtb	r2, r3
 800171c:	4b56      	ldr	r3, [pc, #344]	; (8001878 <sampling+0x290>)
 800171e:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e



note_holdA=0;
 8001722:	4b57      	ldr	r3, [pc, #348]	; (8001880 <sampling+0x298>)
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]

//sample_Accu2=0;
//printf (adc_values[0]," ",adc_values[1]," ",adc_values[2]," ","crap \n");
// some good phasin and delays here
uint8_t cross_fade[2];
uint8_t fader[17]={0,1,5,11,19,28,39,51,64,76,88,99,108,116,122,126,127}; // sine curve for cross fade
 8001728:	4b56      	ldr	r3, [pc, #344]	; (8001884 <sampling+0x29c>)
 800172a:	f507 5480 	add.w	r4, r7, #4096	; 0x1000
 800172e:	461d      	mov	r5, r3
 8001730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001734:	682b      	ldr	r3, [r5, #0]
 8001736:	7023      	strb	r3, [r4, #0]
adc_values[2]= 15; //force for now
 8001738:	4b53      	ldr	r3, [pc, #332]	; (8001888 <sampling+0x2a0>)
 800173a:	220f      	movs	r2, #15
 800173c:	809a      	strh	r2, [r3, #4]
if(adc_values[2]&16)     	{cross_fade[1]=127-fader[adc_values[2]&15]; cross_fade[2]=127;}  else {cross_fade[2]=fader[adc_values[2]&15]; cross_fade[1]=127;} //calculate crossfader
 800173e:	4b52      	ldr	r3, [pc, #328]	; (8001888 <sampling+0x2a0>)
 8001740:	889b      	ldrh	r3, [r3, #4]
 8001742:	f003 0310 	and.w	r3, r3, #16
 8001746:	2b00      	cmp	r3, #0
 8001748:	d017      	beq.n	800177a <sampling+0x192>
 800174a:	4b4f      	ldr	r3, [pc, #316]	; (8001888 <sampling+0x2a0>)
 800174c:	889b      	ldrh	r3, [r3, #4]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001756:	443b      	add	r3, r7
 8001758:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 800175c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001760:	b2db      	uxtb	r3, r3
 8001762:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001766:	f102 0215 	add.w	r2, r2, #21
 800176a:	7013      	strb	r3, [r2, #0]
 800176c:	237f      	movs	r3, #127	; 0x7f
 800176e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001772:	f102 0216 	add.w	r2, r2, #22
 8001776:	7013      	strb	r3, [r2, #0]
 8001778:	e013      	b.n	80017a2 <sampling+0x1ba>
 800177a:	4b43      	ldr	r3, [pc, #268]	; (8001888 <sampling+0x2a0>)
 800177c:	889b      	ldrh	r3, [r3, #4]
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001786:	443b      	add	r3, r7
 8001788:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 800178c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001790:	f102 0216 	add.w	r2, r2, #22
 8001794:	7013      	strb	r3, [r2, #0]
 8001796:	237f      	movs	r3, #127	; 0x7f
 8001798:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800179c:	f102 0215 	add.w	r2, r2, #21
 80017a0:	7013      	strb	r3, [r2, #0]

// doing lfo calc here as it is slow only for now
////////////////////adsr/////////////////////////////////////////
if	 (ADSR[0].attack_trigger==0) {		adsr_att=(161-ADSR[0].attack ) *0.02 ; // for now all of them from this only , speed , 0-16  // rarely read
 80017a2:	4b3a      	ldr	r3, [pc, #232]	; (800188c <sampling+0x2a4>)
 80017a4:	791b      	ldrb	r3, [r3, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d146      	bne.n	8001838 <sampling+0x250>
 80017aa:	4b38      	ldr	r3, [pc, #224]	; (800188c <sampling+0x2a4>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe ff8c 	bl	80006d0 <__aeabi_i2d>
 80017b8:	a321      	add	r3, pc, #132	; (adr r3, 8001840 <sampling+0x258>)
 80017ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017be:	f7fe fd0b 	bl	80001d8 <__aeabi_dmul>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	f7fe ffeb 	bl	80007a4 <__aeabi_d2f>
 80017ce:	4603      	mov	r3, r0
 80017d0:	4a2f      	ldr	r2, [pc, #188]	; (8001890 <sampling+0x2a8>)
 80017d2:	6013      	str	r3, [r2, #0]
ADSR[0].sustain_data=((161-ADSR[0].decay)*0.01);  // length and level this is ok is running 1/16 ish				ADSR[0].attack_data=ADSR[0].attack_data-ADSR[0].sustain_data;
 80017d4:	4b2d      	ldr	r3, [pc, #180]	; (800188c <sampling+0x2a4>)
 80017d6:	785b      	ldrb	r3, [r3, #1]
 80017d8:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe ff77 	bl	80006d0 <__aeabi_i2d>
 80017e2:	a319      	add	r3, pc, #100	; (adr r3, 8001848 <sampling+0x260>)
 80017e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e8:	f7fe fcf6 	bl	80001d8 <__aeabi_dmul>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f7fe ffd6 	bl	80007a4 <__aeabi_d2f>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4a24      	ldr	r2, [pc, #144]	; (800188c <sampling+0x2a4>)
 80017fc:	6113      	str	r3, [r2, #16]
adsr_att=adsr_att*adsr_att;
 80017fe:	4b24      	ldr	r3, [pc, #144]	; (8001890 <sampling+0x2a8>)
 8001800:	ed93 7a00 	vldr	s14, [r3]
 8001804:	4b22      	ldr	r3, [pc, #136]	; (8001890 <sampling+0x2a8>)
 8001806:	edd3 7a00 	vldr	s15, [r3]
 800180a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800180e:	4b20      	ldr	r3, [pc, #128]	; (8001890 <sampling+0x2a8>)
 8001810:	edc3 7a00 	vstr	s15, [r3]
ADSR[0].sustain_data=ADSR[0].sustain_data*ADSR[0].sustain_data;
 8001814:	4b1d      	ldr	r3, [pc, #116]	; (800188c <sampling+0x2a4>)
 8001816:	ed93 7a04 	vldr	s14, [r3, #16]
 800181a:	4b1c      	ldr	r3, [pc, #112]	; (800188c <sampling+0x2a4>)
 800181c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001824:	4b19      	ldr	r3, [pc, #100]	; (800188c <sampling+0x2a4>)
 8001826:	edc3 7a04 	vstr	s15, [r3, #16]

ADSR[0].attack_trigger=1;
 800182a:	4b18      	ldr	r3, [pc, #96]	; (800188c <sampling+0x2a4>)
 800182c:	2201      	movs	r2, #1
 800182e:	711a      	strb	r2, [r3, #4]
ADSR[0].attack_data=0;
 8001830:	4b16      	ldr	r3, [pc, #88]	; (800188c <sampling+0x2a4>)
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
}

//float ADSR[0].buffer_temp;    // adsr

for (i=0;i<256;i++) {
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <sampling+0x284>)
 800183a:	2200      	movs	r2, #0
 800183c:	801a      	strh	r2, [r3, #0]
 800183e:	e0e9      	b.n	8001a14 <sampling+0x42c>
 8001840:	47ae147b 	.word	0x47ae147b
 8001844:	3f947ae1 	.word	0x3f947ae1
 8001848:	47ae147b 	.word	0x47ae147b
 800184c:	3f847ae1 	.word	0x3f847ae1
 8001850:	20002d28 	.word	0x20002d28
 8001854:	200001ea 	.word	0x200001ea
 8001858:	200013ca 	.word	0x200013ca
 800185c:	20000bbe 	.word	0x20000bbe
 8001860:	2000392c 	.word	0x2000392c
 8001864:	20002388 	.word	0x20002388
 8001868:	42a00000 	.word	0x42a00000
 800186c:	20000bc0 	.word	0x20000bc0
 8001870:	20002908 	.word	0x20002908
 8001874:	51eb851f 	.word	0x51eb851f
 8001878:	20000a04 	.word	0x20000a04
 800187c:	cccccccd 	.word	0xcccccccd
 8001880:	20001fec 	.word	0x20001fec
 8001884:	080097f4 	.word	0x080097f4
 8001888:	200001e0 	.word	0x200001e0
 800188c:	20002e30 	.word	0x20002e30
 8001890:	200028f8 	.word	0x200028f8

	if     (ADSR[0].attack_data<1000)    																		{ADSR[0].attack_data=ADSR[0].attack_data+adsr_att;					ADSR[0].buffer_temp=ADSR[0].attack_data; } //0-1000
 8001894:	4b84      	ldr	r3, [pc, #528]	; (8001aa8 <sampling+0x4c0>)
 8001896:	edd3 7a02 	vldr	s15, [r3, #8]
 800189a:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8001aac <sampling+0x4c4>
 800189e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a6:	d50e      	bpl.n	80018c6 <sampling+0x2de>
 80018a8:	4b7f      	ldr	r3, [pc, #508]	; (8001aa8 <sampling+0x4c0>)
 80018aa:	ed93 7a02 	vldr	s14, [r3, #8]
 80018ae:	4b80      	ldr	r3, [pc, #512]	; (8001ab0 <sampling+0x4c8>)
 80018b0:	edd3 7a00 	vldr	s15, [r3]
 80018b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b8:	4b7b      	ldr	r3, [pc, #492]	; (8001aa8 <sampling+0x4c0>)
 80018ba:	edc3 7a02 	vstr	s15, [r3, #8]
 80018be:	4b7a      	ldr	r3, [pc, #488]	; (8001aa8 <sampling+0x4c0>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	4a79      	ldr	r2, [pc, #484]	; (8001aa8 <sampling+0x4c0>)
 80018c4:	6193      	str	r3, [r2, #24]
	 if  ((ADSR[0].attack_data<1500)  && (ADSR[0].attack_data>999))  					{ADSR[0].attack_data=ADSR[0].attack_data+adsr_att;					ADSR[0].buffer_temp=1500-(ADSR[0].attack_data-500);  }  // 1000-500
 80018c6:	4b78      	ldr	r3, [pc, #480]	; (8001aa8 <sampling+0x4c0>)
 80018c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80018cc:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8001ab4 <sampling+0x4cc>
 80018d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d8:	d522      	bpl.n	8001920 <sampling+0x338>
 80018da:	4b73      	ldr	r3, [pc, #460]	; (8001aa8 <sampling+0x4c0>)
 80018dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80018e0:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001ab8 <sampling+0x4d0>
 80018e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ec:	dd18      	ble.n	8001920 <sampling+0x338>
 80018ee:	4b6e      	ldr	r3, [pc, #440]	; (8001aa8 <sampling+0x4c0>)
 80018f0:	ed93 7a02 	vldr	s14, [r3, #8]
 80018f4:	4b6e      	ldr	r3, [pc, #440]	; (8001ab0 <sampling+0x4c8>)
 80018f6:	edd3 7a00 	vldr	s15, [r3]
 80018fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018fe:	4b6a      	ldr	r3, [pc, #424]	; (8001aa8 <sampling+0x4c0>)
 8001900:	edc3 7a02 	vstr	s15, [r3, #8]
 8001904:	4b68      	ldr	r3, [pc, #416]	; (8001aa8 <sampling+0x4c0>)
 8001906:	edd3 7a02 	vldr	s15, [r3, #8]
 800190a:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001abc <sampling+0x4d4>
 800190e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001912:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8001ab4 <sampling+0x4cc>
 8001916:	ee77 7a67 	vsub.f32	s15, s14, s15
 800191a:	4b63      	ldr	r3, [pc, #396]	; (8001aa8 <sampling+0x4c0>)
 800191c:	edc3 7a06 	vstr	s15, [r3, #24]
	 if ((ADSR[0].attack_data>1499)   && 		(ADSR[0].attack_data<2000)) 			{		ADSR[0].buffer_temp=500; 	ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data;}
 8001920:	4b61      	ldr	r3, [pc, #388]	; (8001aa8 <sampling+0x4c0>)
 8001922:	edd3 7a02 	vldr	s15, [r3, #8]
 8001926:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001ac0 <sampling+0x4d8>
 800192a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800192e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001932:	dd17      	ble.n	8001964 <sampling+0x37c>
 8001934:	4b5c      	ldr	r3, [pc, #368]	; (8001aa8 <sampling+0x4c0>)
 8001936:	edd3 7a02 	vldr	s15, [r3, #8]
 800193a:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001ac4 <sampling+0x4dc>
 800193e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001946:	d50d      	bpl.n	8001964 <sampling+0x37c>
 8001948:	4b57      	ldr	r3, [pc, #348]	; (8001aa8 <sampling+0x4c0>)
 800194a:	4a5f      	ldr	r2, [pc, #380]	; (8001ac8 <sampling+0x4e0>)
 800194c:	619a      	str	r2, [r3, #24]
 800194e:	4b56      	ldr	r3, [pc, #344]	; (8001aa8 <sampling+0x4c0>)
 8001950:	ed93 7a02 	vldr	s14, [r3, #8]
 8001954:	4b54      	ldr	r3, [pc, #336]	; (8001aa8 <sampling+0x4c0>)
 8001956:	edd3 7a04 	vldr	s15, [r3, #16]
 800195a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800195e:	4b52      	ldr	r3, [pc, #328]	; (8001aa8 <sampling+0x4c0>)
 8001960:	edc3 7a02 	vstr	s15, [r3, #8]
	if ((ADSR[0].attack_data>1999)  &&  (ADSR[0].attack_data<2500)	)					{ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data	;	ADSR[0].buffer_temp=2500-ADSR[0].attack_data; } //500-0;
 8001964:	4b50      	ldr	r3, [pc, #320]	; (8001aa8 <sampling+0x4c0>)
 8001966:	edd3 7a02 	vldr	s15, [r3, #8]
 800196a:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001acc <sampling+0x4e4>
 800196e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001976:	dd1e      	ble.n	80019b6 <sampling+0x3ce>
 8001978:	4b4b      	ldr	r3, [pc, #300]	; (8001aa8 <sampling+0x4c0>)
 800197a:	edd3 7a02 	vldr	s15, [r3, #8]
 800197e:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001ad0 <sampling+0x4e8>
 8001982:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198a:	d514      	bpl.n	80019b6 <sampling+0x3ce>
 800198c:	4b46      	ldr	r3, [pc, #280]	; (8001aa8 <sampling+0x4c0>)
 800198e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001992:	4b45      	ldr	r3, [pc, #276]	; (8001aa8 <sampling+0x4c0>)
 8001994:	edd3 7a04 	vldr	s15, [r3, #16]
 8001998:	ee77 7a27 	vadd.f32	s15, s14, s15
 800199c:	4b42      	ldr	r3, [pc, #264]	; (8001aa8 <sampling+0x4c0>)
 800199e:	edc3 7a02 	vstr	s15, [r3, #8]
 80019a2:	4b41      	ldr	r3, [pc, #260]	; (8001aa8 <sampling+0x4c0>)
 80019a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80019a8:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8001ad0 <sampling+0x4e8>
 80019ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019b0:	4b3d      	ldr	r3, [pc, #244]	; (8001aa8 <sampling+0x4c0>)
 80019b2:	edc3 7a06 	vstr	s15, [r3, #24]
	if (ADSR[0].attack_data>3000)   																			{ADSR[0].buffer_temp=1; ADSR[0].attack_data=4000; }     // THE END
 80019b6:	4b3c      	ldr	r3, [pc, #240]	; (8001aa8 <sampling+0x4c0>)
 80019b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80019bc:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001ad4 <sampling+0x4ec>
 80019c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c8:	dd06      	ble.n	80019d8 <sampling+0x3f0>
 80019ca:	4b37      	ldr	r3, [pc, #220]	; (8001aa8 <sampling+0x4c0>)
 80019cc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80019d0:	619a      	str	r2, [r3, #24]
 80019d2:	4b35      	ldr	r3, [pc, #212]	; (8001aa8 <sampling+0x4c0>)
 80019d4:	4a40      	ldr	r2, [pc, #256]	; (8001ad8 <sampling+0x4f0>)
 80019d6:	609a      	str	r2, [r3, #8]

adsr_lut[i]= ADSR[0].buffer_temp*0.001;
 80019d8:	4b33      	ldr	r3, [pc, #204]	; (8001aa8 <sampling+0x4c0>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe fe89 	bl	80006f4 <__aeabi_f2d>
 80019e2:	a32f      	add	r3, pc, #188	; (adr r3, 8001aa0 <sampling+0x4b8>)
 80019e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e8:	f7fe fbf6 	bl	80001d8 <__aeabi_dmul>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	493a      	ldr	r1, [pc, #232]	; (8001adc <sampling+0x4f4>)
 80019f2:	8809      	ldrh	r1, [r1, #0]
 80019f4:	460c      	mov	r4, r1
 80019f6:	4610      	mov	r0, r2
 80019f8:	4619      	mov	r1, r3
 80019fa:	f7fe fed3 	bl	80007a4 <__aeabi_d2f>
 80019fe:	4602      	mov	r2, r0
 8001a00:	4937      	ldr	r1, [pc, #220]	; (8001ae0 <sampling+0x4f8>)
 8001a02:	00a3      	lsls	r3, r4, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	601a      	str	r2, [r3, #0]
for (i=0;i<256;i++) {
 8001a08:	4b34      	ldr	r3, [pc, #208]	; (8001adc <sampling+0x4f4>)
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	4b32      	ldr	r3, [pc, #200]	; (8001adc <sampling+0x4f4>)
 8001a12:	801a      	strh	r2, [r3, #0]
 8001a14:	4b31      	ldr	r3, [pc, #196]	; (8001adc <sampling+0x4f4>)
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	2bff      	cmp	r3, #255	; 0xff
 8001a1a:	f67f af3b 	bls.w	8001894 <sampling+0x2ac>


///////////////////////////////////////////////////////////////
uint8_t note_plain;

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8001a1e:	4b2f      	ldr	r3, [pc, #188]	; (8001adc <sampling+0x4f4>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	801a      	strh	r2, [r3, #0]
 8001a24:	e390      	b.n	8002148 <sampling+0xb60>

	i_total=i+sample_pointB;
 8001a26:	4b2d      	ldr	r3, [pc, #180]	; (8001adc <sampling+0x4f4>)
 8001a28:	881a      	ldrh	r2, [r3, #0]
 8001a2a:	4b2e      	ldr	r3, [pc, #184]	; (8001ae4 <sampling+0x4fc>)
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	4413      	add	r3, r2
 8001a30:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001a34:	f102 0202 	add.w	r2, r2, #2
 8001a38:	8013      	strh	r3, [r2, #0]
	i_frac=i>>6;   //   0-8 steps
 8001a3a:	4b28      	ldr	r3, [pc, #160]	; (8001adc <sampling+0x4f4>)
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	099b      	lsrs	r3, r3, #6
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	4b28      	ldr	r3, [pc, #160]	; (8001ae8 <sampling+0x500>)
 8001a46:	701a      	strb	r2, [r3, #0]
	note_plain=seq.notes1[seq.pos & 7 ];
 8001a48:	4b28      	ldr	r3, [pc, #160]	; (8001aec <sampling+0x504>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	4a26      	ldr	r2, [pc, #152]	; (8001aec <sampling+0x504>)
 8001a52:	4413      	add	r3, r2
 8001a54:	785b      	ldrb	r3, [r3, #1]
 8001a56:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001a5a:	7013      	strb	r3, [r2, #0]
potValues[i&255]=potSource[i&255]>>4; //just to update values
 8001a5c:	4b1f      	ldr	r3, [pc, #124]	; (8001adc <sampling+0x4f4>)
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	4a23      	ldr	r2, [pc, #140]	; (8001af0 <sampling+0x508>)
 8001a64:	5cd2      	ldrb	r2, [r2, r3]
 8001a66:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <sampling+0x4f4>)
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	0912      	lsrs	r2, r2, #4
 8001a6e:	b2d1      	uxtb	r1, r2
 8001a70:	4a20      	ldr	r2, [pc, #128]	; (8001af4 <sampling+0x50c>)
 8001a72:	54d1      	strb	r1, [r2, r3]
	if (tempo_count>=tempo_mod) { next_isr=(next_isr+1)& 4095;tempo_count=0;  }  else {tempo_count++; }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 8001a74:	4b20      	ldr	r3, [pc, #128]	; (8001af8 <sampling+0x510>)
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001a7c:	f102 020c 	add.w	r2, r2, #12
 8001a80:	8812      	ldrh	r2, [r2, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d83c      	bhi.n	8001b00 <sampling+0x518>
 8001a86:	4b1d      	ldr	r3, [pc, #116]	; (8001afc <sampling+0x514>)
 8001a88:	881b      	ldrh	r3, [r3, #0]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	4b19      	ldr	r3, [pc, #100]	; (8001afc <sampling+0x514>)
 8001a96:	801a      	strh	r2, [r3, #0]
 8001a98:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <sampling+0x510>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	801a      	strh	r2, [r3, #0]
 8001a9e:	e035      	b.n	8001b0c <sampling+0x524>
 8001aa0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001aa4:	3f50624d 	.word	0x3f50624d
 8001aa8:	20002e30 	.word	0x20002e30
 8001aac:	447a0000 	.word	0x447a0000
 8001ab0:	200028f8 	.word	0x200028f8
 8001ab4:	44bb8000 	.word	0x44bb8000
 8001ab8:	4479c000 	.word	0x4479c000
 8001abc:	43fa0000 	.word	0x43fa0000
 8001ac0:	44bb6000 	.word	0x44bb6000
 8001ac4:	44fa0000 	.word	0x44fa0000
 8001ac8:	43fa0000 	.word	0x43fa0000
 8001acc:	44f9e000 	.word	0x44f9e000
 8001ad0:	451c4000 	.word	0x451c4000
 8001ad4:	453b8000 	.word	0x453b8000
 8001ad8:	457a0000 	.word	0x457a0000
 8001adc:	20000bc0 	.word	0x20000bc0
 8001ae0:	20001bd4 	.word	0x20001bd4
 8001ae4:	20000bbe 	.word	0x20000bbe
 8001ae8:	2000212c 	.word	0x2000212c
 8001aec:	2000392c 	.word	0x2000392c
 8001af0:	20000a04 	.word	0x20000a04
 8001af4:	20000884 	.word	0x20000884
 8001af8:	20002016 	.word	0x20002016
 8001afc:	20001fea 	.word	0x20001fea
 8001b00:	4b9e      	ldr	r3, [pc, #632]	; (8001d7c <sampling+0x794>)
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	3301      	adds	r3, #1
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	4b9c      	ldr	r3, [pc, #624]	; (8001d7c <sampling+0x794>)
 8001b0a:	801a      	strh	r2, [r3, #0]
// tempo_count is about 1000-400
	tempo_start=0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001b12:	f102 021c 	add.w	r2, r2, #28
 8001b16:	8013      	strh	r3, [r2, #0]
	if ((next_isr>>4) != (seq.pos)) { 					// next note step 140ms
 8001b18:	4b99      	ldr	r3, [pc, #612]	; (8001d80 <sampling+0x798>)
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	091b      	lsrs	r3, r3, #4
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	4b98      	ldr	r3, [pc, #608]	; (8001d84 <sampling+0x79c>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d00c      	beq.n	8001b44 <sampling+0x55c>
		seq.pos=(next_isr>>4); // seq pos =256 max , isr = 1/16 of a note, note lenght is 1-4
 8001b2a:	4b95      	ldr	r3, [pc, #596]	; (8001d80 <sampling+0x798>)
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	091b      	lsrs	r3, r3, #4
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	4b93      	ldr	r3, [pc, #588]	; (8001d84 <sampling+0x79c>)
 8001b36:	701a      	strb	r2, [r3, #0]
		tempo_start=1;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001b3e:	f102 021c 	add.w	r2, r2, #28
 8001b42:	8013      	strh	r3, [r2, #0]
// record note triggers or seq_changes position ,NEEDS TO BE OFF FOR NOTE 0
}


	if(tempo_start  )    // Calculates only on note change, gotta change seq.pos somehow  , only activates when change in seq pos
 8001b44:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001b48:	f103 031c 	add.w	r3, r3, #28
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 80f8 	beq.w	8001d44 <sampling+0x75c>
	{
	//printf("\n");//	ITM_SendChar( 65 );   //  Send ASCII code 65 = ’A’
	//printf("%d" ,note[].pitch[10]);


		note[2].timeshift=(adc_values[0]>>2)&15; //assigned pots to start of loopers 0-16,works
 8001b54:	4b8c      	ldr	r3, [pc, #560]	; (8001d88 <sampling+0x7a0>)
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	089b      	lsrs	r3, r3, #2
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	4b89      	ldr	r3, [pc, #548]	; (8001d8c <sampling+0x7a4>)
 8001b66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		note[3].timeshift=(adc_values[1]>>2)&15;
 8001b6a:	4b87      	ldr	r3, [pc, #540]	; (8001d88 <sampling+0x7a0>)
 8001b6c:	885b      	ldrh	r3, [r3, #2]
 8001b6e:	089b      	lsrs	r3, r3, #2
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	f003 030f 	and.w	r3, r3, #15
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4b84      	ldr	r3, [pc, #528]	; (8001d8c <sampling+0x7a4>)
 8001b7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38


		seq.loop[2]=((note[2].timeshift+(seq.pos&7))&15); // calc  8 note loop positions sets looping point in sequence
 8001b80:	4b82      	ldr	r3, [pc, #520]	; (8001d8c <sampling+0x7a4>)
 8001b82:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001b86:	4b7f      	ldr	r3, [pc, #508]	; (8001d84 <sampling+0x79c>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	4413      	add	r3, r2
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	f003 030f 	and.w	r3, r3, #15
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	4b7a      	ldr	r3, [pc, #488]	; (8001d84 <sampling+0x79c>)
 8001b9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		//seq.loop[3]=(note[3].timeshift+(( seq.pos&31 ) >>2)) & 15;  // quater speed
			seq.loop[3]=((note[3].timeshift+(seq.pos&15))&15); //sets looping point in sequence this is full 16 note
 8001ba0:	4b7a      	ldr	r3, [pc, #488]	; (8001d8c <sampling+0x7a4>)
 8001ba2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001ba6:	4b77      	ldr	r3, [pc, #476]	; (8001d84 <sampling+0x79c>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	4b73      	ldr	r3, [pc, #460]	; (8001d84 <sampling+0x79c>)
 8001bb6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

			seq.loop[4]=((note[2].timeshift+(seq.pos&7))&15);
 8001bba:	4b74      	ldr	r3, [pc, #464]	; (8001d8c <sampling+0x7a4>)
 8001bbc:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001bc0:	4b70      	ldr	r3, [pc, #448]	; (8001d84 <sampling+0x79c>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	4b6b      	ldr	r3, [pc, #428]	; (8001d84 <sampling+0x79c>)
 8001bd6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

		//seq.loop[4]=((note[2].timeshift+((seq.pos&15)>>1))&15); // half speed

		note[2].pitch=seq.notes2[seq.loop[2]]+note[2].transpose;  //loop 8 notes from pos and x times
 8001bda:	4b6a      	ldr	r3, [pc, #424]	; (8001d84 <sampling+0x79c>)
 8001bdc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b68      	ldr	r3, [pc, #416]	; (8001d84 <sampling+0x79c>)
 8001be4:	4413      	add	r3, r2
 8001be6:	7c9a      	ldrb	r2, [r3, #18]
 8001be8:	4b68      	ldr	r3, [pc, #416]	; (8001d8c <sampling+0x7a4>)
 8001bea:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001bee:	4413      	add	r3, r2
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4b66      	ldr	r3, [pc, #408]	; (8001d8c <sampling+0x7a4>)
 8001bf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		note[3].pitch=seq.notes1[seq.loop[3]];  //loop 8 notes from pos and x times ,might disable normal adsr completely
 8001bf8:	4b62      	ldr	r3, [pc, #392]	; (8001d84 <sampling+0x79c>)
 8001bfa:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001bfe:	461a      	mov	r2, r3
 8001c00:	4b60      	ldr	r3, [pc, #384]	; (8001d84 <sampling+0x79c>)
 8001c02:	4413      	add	r3, r2
 8001c04:	785a      	ldrb	r2, [r3, #1]
 8001c06:	4b61      	ldr	r3, [pc, #388]	; (8001d8c <sampling+0x7a4>)
 8001c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	if (note[3].pitch) 		{note[3].pitch=note[3].pitch+note[3].transpose;	adsr_retrigger[3]=1; note_toggler[i>>5]=1<<(i&31   )   ; } // stay at zero for off
 8001c0c:	4b5f      	ldr	r3, [pc, #380]	; (8001d8c <sampling+0x7a4>)
 8001c0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d01d      	beq.n	8001c52 <sampling+0x66a>
 8001c16:	4b5d      	ldr	r3, [pc, #372]	; (8001d8c <sampling+0x7a4>)
 8001c18:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001c1c:	4b5b      	ldr	r3, [pc, #364]	; (8001d8c <sampling+0x7a4>)
 8001c1e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001c22:	4413      	add	r3, r2
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	4b59      	ldr	r3, [pc, #356]	; (8001d8c <sampling+0x7a4>)
 8001c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8001c2c:	4b58      	ldr	r3, [pc, #352]	; (8001d90 <sampling+0x7a8>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	80da      	strh	r2, [r3, #6]
 8001c32:	4b58      	ldr	r3, [pc, #352]	; (8001d94 <sampling+0x7ac>)
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	f003 031f 	and.w	r3, r3, #31
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	409a      	lsls	r2, r3
 8001c3e:	4b55      	ldr	r3, [pc, #340]	; (8001d94 <sampling+0x7ac>)
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	095b      	lsrs	r3, r3, #5
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001c4c:	443b      	add	r3, r7
 8001c4e:	f843 2c68 	str.w	r2, [r3, #-104]


	//if ((note[5].pitch) && (adsr_toggle[5]==2)) {note[5].pitch=note[5].pitch; one_shot=0;}  // grab note when on ,one shot also , also delete


	note[5].pitch=seq.notes2[seq.loop[2]]+(note[5].transpose);  //
 8001c52:	4b4c      	ldr	r3, [pc, #304]	; (8001d84 <sampling+0x79c>)
 8001c54:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b4a      	ldr	r3, [pc, #296]	; (8001d84 <sampling+0x79c>)
 8001c5c:	4413      	add	r3, r2
 8001c5e:	7c9a      	ldrb	r2, [r3, #18]
 8001c60:	4b4a      	ldr	r3, [pc, #296]	; (8001d8c <sampling+0x7a4>)
 8001c62:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8001c66:	4413      	add	r3, r2
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4b48      	ldr	r3, [pc, #288]	; (8001d8c <sampling+0x7a4>)
 8001c6c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54





	note[5].pitch=MajorNote[note[5].pitch];
 8001c70:	4b46      	ldr	r3, [pc, #280]	; (8001d8c <sampling+0x7a4>)
 8001c72:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001c76:	461a      	mov	r2, r3
 8001c78:	4b47      	ldr	r3, [pc, #284]	; (8001d98 <sampling+0x7b0>)
 8001c7a:	5c9a      	ldrb	r2, [r3, r2]
 8001c7c:	4b43      	ldr	r3, [pc, #268]	; (8001d8c <sampling+0x7a4>)
 8001c7e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	//note[5].pitch=11; // works ok with single note @24 but   fails on other
	note[5].tuned=sine_lut[note[5].pitch];	//sets freq ,1.0594  * 16536 =17518  ,
 8001c82:	4b42      	ldr	r3, [pc, #264]	; (8001d8c <sampling+0x7a4>)
 8001c84:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b44      	ldr	r3, [pc, #272]	; (8001d9c <sampling+0x7b4>)
 8001c8c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001c90:	4b3e      	ldr	r3, [pc, #248]	; (8001d8c <sampling+0x7a4>)
 8001c92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	note[5].tuned= (note[5].tuned*1200)>>10;  // modify different sample size , just need single cycle length and thats it
 8001c96:	4b3d      	ldr	r3, [pc, #244]	; (8001d8c <sampling+0x7a4>)
 8001c98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001ca2:	fb02 f303 	mul.w	r3, r2, r3
 8001ca6:	129b      	asrs	r3, r3, #10
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	4b38      	ldr	r3, [pc, #224]	; (8001d8c <sampling+0x7a4>)
 8001cac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		mask_result =0;
 8001cb0:	4b3b      	ldr	r3, [pc, #236]	; (8001da0 <sampling+0x7b8>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	801a      	strh	r2, [r3, #0]
		sample_Accu[3]=0; // reset to 0 mani sample hold
		sample_Accu[4]=0; // reset to 0 mani sample hold
		sample_Accu[5]=0; // reset to 0 mani sample hold
*/

		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001cbc:	f102 021f 	add.w	r2, r2, #31
 8001cc0:	7013      	strb	r3, [r2, #0]
 8001cc2:	e038      	b.n	8001d36 <sampling+0x74e>

	if (note[mask_i].pitch) {tune_Accu=sample_Noteadd[MajorNote[note[mask_i].pitch]];   note[mask_i].tuned=(tune_Accu);       } // relies on note channel clear , not good , clear not channel straight after
 8001cc4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001cc8:	f103 031f 	add.w	r3, r3, #31
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	4a2f      	ldr	r2, [pc, #188]	; (8001d8c <sampling+0x7a4>)
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d021      	beq.n	8001d20 <sampling+0x738>
 8001cdc:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001ce0:	f103 031f 	add.w	r3, r3, #31
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	4a29      	ldr	r2, [pc, #164]	; (8001d8c <sampling+0x7a4>)
 8001ce8:	011b      	lsls	r3, r3, #4
 8001cea:	4413      	add	r3, r2
 8001cec:	3304      	adds	r3, #4
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b29      	ldr	r3, [pc, #164]	; (8001d98 <sampling+0x7b0>)
 8001cf4:	5c9b      	ldrb	r3, [r3, r2]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4b2a      	ldr	r3, [pc, #168]	; (8001da4 <sampling+0x7bc>)
 8001cfa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	4b29      	ldr	r3, [pc, #164]	; (8001da8 <sampling+0x7c0>)
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	4b28      	ldr	r3, [pc, #160]	; (8001da8 <sampling+0x7c0>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001d0c:	f103 031f 	add.w	r3, r3, #31
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	b291      	uxth	r1, r2
 8001d14:	4a1d      	ldr	r2, [pc, #116]	; (8001d8c <sampling+0x7a4>)
 8001d16:	011b      	lsls	r3, r3, #4
 8001d18:	4413      	add	r3, r2
 8001d1a:	330e      	adds	r3, #14
 8001d1c:	460a      	mov	r2, r1
 8001d1e:	801a      	strh	r2, [r3, #0]
		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8001d20:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001d24:	f103 031f 	add.w	r3, r3, #31
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001d30:	f102 021f 	add.w	r2, r2, #31
 8001d34:	7013      	strb	r3, [r2, #0]
 8001d36:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001d3a:	f103 031f 	add.w	r3, r3, #31
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d9bf      	bls.n	8001cc4 <sampling+0x6dc>

  // calc freq 1/isr or 1/16 per note ,need for pitch bend and so on , change depending on decay

// lfo section

	if ((i&63)==0) {   // calculate lfo maybe 8 times for now , seems to fill up
 8001d44:	4b13      	ldr	r3, [pc, #76]	; (8001d94 <sampling+0x7ac>)
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f040 81f5 	bne.w	800213c <sampling+0xb54>
freq_temp=0;
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001d5a:	f102 0214 	add.w	r2, r2, #20
 8001d5e:	6013      	str	r3, [r2, #0]
freq2_temp=0;
 8001d60:	f04f 0300 	mov.w	r3, #0
 8001d64:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001d68:	f102 021c 	add.w	r2, r2, #28
 8001d6c:	6013      	str	r3, [r2, #0]

//uint8_t i_frac2=(i_frac+7)&7;  //previous value can change shape  , not  bad effect

		for (l=0;l<10;l++){   //current lfo setup , messy
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001d74:	f102 021b 	add.w	r2, r2, #27
 8001d78:	7013      	strb	r3, [r2, #0]
 8001d7a:	e19d      	b.n	80020b8 <sampling+0xad0>
 8001d7c:	20002016 	.word	0x20002016
 8001d80:	20001fea 	.word	0x20001fea
 8001d84:	2000392c 	.word	0x2000392c
 8001d88:	200001e0 	.word	0x200001e0
 8001d8c:	200038bc 	.word	0x200038bc
 8001d90:	20001fd4 	.word	0x20001fd4
 8001d94:	20000bc0 	.word	0x20000bc0
 8001d98:	08009824 	.word	0x08009824
 8001d9c:	2000017c 	.word	0x2000017c
 8001da0:	200013cc 	.word	0x200013cc
 8001da4:	08009840 	.word	0x08009840
 8001da8:	20000b98 	.word	0x20000b98
			//LFO[l].rate=potSource[130+l];   //grab dat for now
			freq_temp=LFO[l].rate +1;  // rate. this needs a little log
 8001dac:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001db0:	f103 031b 	add.w	r3, r3, #27
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	4a47      	ldr	r2, [pc, #284]	; (8001ed4 <sampling+0x8ec>)
 8001db8:	211a      	movs	r1, #26
 8001dba:	fb01 f303 	mul.w	r3, r1, r3
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3302      	adds	r3, #2
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	ee07 3a90 	vmov	s15, r3
 8001dca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dce:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001dd2:	f103 0314 	add.w	r3, r3, #20
 8001dd6:	edc3 7a00 	vstr	s15, [r3]
			freq2_temp=freq_temp*freq_temp;
 8001dda:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001dde:	f103 0314 	add.w	r3, r3, #20
 8001de2:	edd3 7a00 	vldr	s15, [r3]
 8001de6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001dea:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001dee:	f103 031c 	add.w	r3, r3, #28
 8001df2:	edc3 7a00 	vstr	s15, [r3]
			freq_temp=freq2_temp/64;
 8001df6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001dfa:	f103 031c 	add.w	r3, r3, #28
 8001dfe:	ed93 7a00 	vldr	s14, [r3]
 8001e02:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001ed8 <sampling+0x8f0>
 8001e06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e0a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001e0e:	f103 0314 	add.w	r3, r3, #20
 8001e12:	edc3 7a00 	vstr	s15, [r3]
			freq2_temp=freq_temp*tempo_sync ; //correction to one note per cycle ,fixed , maybe loose this
 8001e16:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001e1a:	f103 0314 	add.w	r3, r3, #20
 8001e1e:	ed93 7a00 	vldr	s14, [r3]
 8001e22:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001e26:	f103 0308 	add.w	r3, r3, #8
 8001e2a:	edd3 7a00 	vldr	s15, [r3]
 8001e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e32:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001e36:	f103 031c 	add.w	r3, r3, #28
 8001e3a:	edc3 7a00 	vstr	s15, [r3]

			freq_temp=lfo_accu[l][i_frac]+ freq2_temp;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar
 8001e3e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001e42:	f103 031b 	add.w	r3, r3, #27
 8001e46:	781a      	ldrb	r2, [r3, #0]
 8001e48:	4b24      	ldr	r3, [pc, #144]	; (8001edc <sampling+0x8f4>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	4924      	ldr	r1, [pc, #144]	; (8001ee0 <sampling+0x8f8>)
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	4403      	add	r3, r0
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	edd3 7a00 	vldr	s15, [r3]
 8001e62:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001e66:	f103 031c 	add.w	r3, r3, #28
 8001e6a:	ed93 7a00 	vldr	s14, [r3]
 8001e6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e72:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001e76:	f103 0314 	add.w	r3, r3, #20
 8001e7a:	edc3 7a00 	vstr	s15, [r3]


//			if ((tempo_count<50) && ((next_isr&15)==15)) freq_temp=0;   // trying retrigger
		if (freq_temp>16384) lfo_accu[l][i_frac]=freq_temp-16384; else lfo_accu[l][i_frac]=freq_temp; // write back value
 8001e7e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001e82:	f103 0314 	add.w	r3, r3, #20
 8001e86:	edd3 7a00 	vldr	s15, [r3]
 8001e8a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001ee4 <sampling+0x8fc>
 8001e8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e96:	dd27      	ble.n	8001ee8 <sampling+0x900>
 8001e98:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001e9c:	f103 031b 	add.w	r3, r3, #27
 8001ea0:	781a      	ldrb	r2, [r3, #0]
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <sampling+0x8f4>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001eac:	f103 0314 	add.w	r3, r3, #20
 8001eb0:	edd3 7a00 	vldr	s15, [r3]
 8001eb4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001ee4 <sampling+0x8fc>
 8001eb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ebc:	4908      	ldr	r1, [pc, #32]	; (8001ee0 <sampling+0x8f8>)
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	4403      	add	r3, r0
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	edc3 7a00 	vstr	s15, [r3]
 8001ed0:	e020      	b.n	8001f14 <sampling+0x92c>
 8001ed2:	bf00      	nop
 8001ed4:	20002d2c 	.word	0x20002d2c
 8001ed8:	42800000 	.word	0x42800000
 8001edc:	2000212c 	.word	0x2000212c
 8001ee0:	20002130 	.word	0x20002130
 8001ee4:	46800000 	.word	0x46800000
 8001ee8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001eec:	f103 031b 	add.w	r3, r3, #27
 8001ef0:	781a      	ldrb	r2, [r3, #0]
 8001ef2:	4b9f      	ldr	r3, [pc, #636]	; (8002170 <sampling+0xb88>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	499e      	ldr	r1, [pc, #632]	; (8002174 <sampling+0xb8c>)
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	4403      	add	r3, r0
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	440b      	add	r3, r1
 8001f08:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001f0c:	f102 0214 	add.w	r2, r2, #20
 8001f10:	6812      	ldr	r2, [r2, #0]
 8001f12:	601a      	str	r2, [r3, #0]
		freq_temp=lfo_accu[l][i_frac]; // 0-255 limit + above zero
 8001f14:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001f18:	f103 031b 	add.w	r3, r3, #27
 8001f1c:	781a      	ldrb	r2, [r3, #0]
 8001f1e:	4b94      	ldr	r3, [pc, #592]	; (8002170 <sampling+0xb88>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	4993      	ldr	r1, [pc, #588]	; (8002174 <sampling+0xb8c>)
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4403      	add	r3, r0
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	440b      	add	r3, r1
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001f3a:	f102 0214 	add.w	r2, r2, #20
 8001f3e:	6013      	str	r3, [r2, #0]
		freq_temp=freq_temp*0.000383495;  // 0-255 , chang this for depth
 8001f40:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001f44:	f103 0314 	add.w	r3, r3, #20
 8001f48:	6818      	ldr	r0, [r3, #0]
 8001f4a:	f7fe fbd3 	bl	80006f4 <__aeabi_f2d>
 8001f4e:	a384      	add	r3, pc, #528	; (adr r3, 8002160 <sampling+0xb78>)
 8001f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f54:	f7fe f940 	bl	80001d8 <__aeabi_dmul>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4619      	mov	r1, r3
 8001f60:	f7fe fc20 	bl	80007a4 <__aeabi_d2f>
 8001f64:	4603      	mov	r3, r0
 8001f66:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001f6a:	f102 0214 	add.w	r2, r2, #20
 8001f6e:	6013      	str	r3, [r2, #0]
		freq2_temp =arm_sin_f32(freq_temp); // seems ok   , cmsis is ok
 8001f70:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001f74:	f103 0314 	add.w	r3, r3, #20
 8001f78:	ed93 0a00 	vldr	s0, [r3]
 8001f7c:	f007 fa42 	bl	8009404 <arm_sin_f32>
 8001f80:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001f84:	f103 031c 	add.w	r3, r3, #28
 8001f88:	ed83 0a00 	vstr	s0, [r3]
		freq_temp=freq2_temp*LFO[l].depth*51;   // depth
 8001f8c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001f90:	f103 031b 	add.w	r3, r3, #27
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	4a78      	ldr	r2, [pc, #480]	; (8002178 <sampling+0xb90>)
 8001f98:	211a      	movs	r1, #26
 8001f9a:	fb01 f303 	mul.w	r3, r1, r3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	ee07 3a90 	vmov	s15, r3
 8001fa8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fac:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001fb0:	f103 031c 	add.w	r3, r3, #28
 8001fb4:	edd3 7a00 	vldr	s15, [r3]
 8001fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fbc:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 800217c <sampling+0xb94>
 8001fc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fc4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001fc8:	f103 0314 	add.w	r3, r3, #20
 8001fcc:	edc3 7a00 	vstr	s15, [r3]
		if (freq_temp>8195)  freq_temp=8195;
 8001fd0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001fd4:	f103 0314 	add.w	r3, r3, #20
 8001fd8:	edd3 7a00 	vldr	s15, [r3]
 8001fdc:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8002180 <sampling+0xb98>
 8001fe0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe8:	dd05      	ble.n	8001ff6 <sampling+0xa0e>
 8001fea:	4b66      	ldr	r3, [pc, #408]	; (8002184 <sampling+0xb9c>)
 8001fec:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001ff0:	f102 0214 	add.w	r2, r2, #20
 8001ff4:	6013      	str	r3, [r2, #0]
		if (freq_temp<-8195)  freq_temp=-8195;   // clip to 13bit
 8001ff6:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001ffa:	f103 0314 	add.w	r3, r3, #20
 8001ffe:	edd3 7a00 	vldr	s15, [r3]
 8002002:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8002188 <sampling+0xba0>
 8002006:	eef4 7ac7 	vcmpe.f32	s15, s14
 800200a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800200e:	d505      	bpl.n	800201c <sampling+0xa34>
 8002010:	4b5e      	ldr	r3, [pc, #376]	; (800218c <sampling+0xba4>)
 8002012:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002016:	f102 0214 	add.w	r2, r2, #20
 800201a:	6013      	str	r3, [r2, #0]
		lfo_out[l] [i_frac]=freq_temp+8195; // ok now     , 8 steps per i loop , 14 bit
 800201c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002020:	f103 0314 	add.w	r3, r3, #20
 8002024:	edd3 7a00 	vldr	s15, [r3]
 8002028:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8002180 <sampling+0xb98>
 800202c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002030:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002034:	f103 031b 	add.w	r3, r3, #27
 8002038:	781a      	ldrb	r2, [r3, #0]
 800203a:	4b4d      	ldr	r3, [pc, #308]	; (8002170 <sampling+0xb88>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	461c      	mov	r4, r3
 8002040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002044:	ee17 3a90 	vmov	r3, s15
 8002048:	b298      	uxth	r0, r3
 800204a:	4951      	ldr	r1, [pc, #324]	; (8002190 <sampling+0xba8>)
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4423      	add	r3, r4
 8002056:	4602      	mov	r2, r0
 8002058:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		LFO[l].out[i_frac]=lfo_out[l] [i_frac];  // just copy for now
 800205c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002060:	f103 031b 	add.w	r3, r3, #27
 8002064:	7819      	ldrb	r1, [r3, #0]
 8002066:	4b42      	ldr	r3, [pc, #264]	; (8002170 <sampling+0xb88>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	461d      	mov	r5, r3
 800206c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002070:	f103 031b 	add.w	r3, r3, #27
 8002074:	781a      	ldrb	r2, [r3, #0]
 8002076:	4b3e      	ldr	r3, [pc, #248]	; (8002170 <sampling+0xb88>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	461c      	mov	r4, r3
 800207c:	4844      	ldr	r0, [pc, #272]	; (8002190 <sampling+0xba8>)
 800207e:	460b      	mov	r3, r1
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	442b      	add	r3, r5
 8002088:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 800208c:	493a      	ldr	r1, [pc, #232]	; (8002178 <sampling+0xb90>)
 800208e:	4613      	mov	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	4413      	add	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	4423      	add	r3, r4
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	440b      	add	r3, r1
 800209e:	4602      	mov	r2, r0
 80020a0:	80da      	strh	r2, [r3, #6]
		for (l=0;l<10;l++){   //current lfo setup , messy
 80020a2:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80020a6:	f103 031b 	add.w	r3, r3, #27
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	3301      	adds	r3, #1
 80020ae:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80020b2:	f102 021b 	add.w	r2, r2, #27
 80020b6:	7013      	strb	r3, [r2, #0]
 80020b8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80020bc:	f103 031b 	add.w	r3, r3, #27
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b09      	cmp	r3, #9
 80020c4:	f67f ae72 	bls.w	8001dac <sampling+0x7c4>
		} // lfo gen : 0=f1 , 1=tempo,2=pitch


			freq_pointer[0] [i_frac]=lfo_out [0][i_frac]*0.00006435; // problem was selecting accu instead of out , good now
 80020c8:	4b29      	ldr	r3, [pc, #164]	; (8002170 <sampling+0xb88>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b30      	ldr	r3, [pc, #192]	; (8002190 <sampling+0xba8>)
 80020d0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe fafb 	bl	80006d0 <__aeabi_i2d>
 80020da:	a323      	add	r3, pc, #140	; (adr r3, 8002168 <sampling+0xb80>)
 80020dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e0:	f7fe f87a 	bl	80001d8 <__aeabi_dmul>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4921      	ldr	r1, [pc, #132]	; (8002170 <sampling+0xb88>)
 80020ea:	7809      	ldrb	r1, [r1, #0]
 80020ec:	460c      	mov	r4, r1
 80020ee:	4610      	mov	r0, r2
 80020f0:	4619      	mov	r1, r3
 80020f2:	f7fe fb57 	bl	80007a4 <__aeabi_d2f>
 80020f6:	4602      	mov	r2, r0
 80020f8:	4926      	ldr	r1, [pc, #152]	; (8002194 <sampling+0xbac>)
 80020fa:	00a3      	lsls	r3, r4, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	601a      	str	r2, [r3, #0]
		freq_pointer[2] [i_frac] =lfo_out [3][i_frac]*0.00006435;; // filter lfos
 8002100:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <sampling+0xb88>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	4a22      	ldr	r2, [pc, #136]	; (8002190 <sampling+0xba8>)
 8002106:	331e      	adds	r3, #30
 8002108:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe fadf 	bl	80006d0 <__aeabi_i2d>
 8002112:	a315      	add	r3, pc, #84	; (adr r3, 8002168 <sampling+0xb80>)
 8002114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002118:	f7fe f85e 	bl	80001d8 <__aeabi_dmul>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	4913      	ldr	r1, [pc, #76]	; (8002170 <sampling+0xb88>)
 8002122:	7809      	ldrb	r1, [r1, #0]
 8002124:	460c      	mov	r4, r1
 8002126:	4610      	mov	r0, r2
 8002128:	4619      	mov	r1, r3
 800212a:	f7fe fb3b 	bl	80007a4 <__aeabi_d2f>
 800212e:	4602      	mov	r2, r0
 8002130:	4918      	ldr	r1, [pc, #96]	; (8002194 <sampling+0xbac>)
 8002132:	f104 0312 	add.w	r3, r4, #18
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	601a      	str	r2, [r3, #0]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 800213c:	4b16      	ldr	r3, [pc, #88]	; (8002198 <sampling+0xbb0>)
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	3301      	adds	r3, #1
 8002142:	b29a      	uxth	r2, r3
 8002144:	4b14      	ldr	r3, [pc, #80]	; (8002198 <sampling+0xbb0>)
 8002146:	801a      	strh	r2, [r3, #0]
 8002148:	4b13      	ldr	r3, [pc, #76]	; (8002198 <sampling+0xbb0>)
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002150:	f4ff ac69 	bcc.w	8001a26 <sampling+0x43e>
// filter loop
int32_t play_holder1[512];    // data banks
int32_t play_holder2[512];
uint8_t sine_zero;

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002154:	4b10      	ldr	r3, [pc, #64]	; (8002198 <sampling+0xbb0>)
 8002156:	2200      	movs	r2, #0
 8002158:	801a      	strh	r2, [r3, #0]
 800215a:	e0ff      	b.n	800235c <sampling+0xd74>
 800215c:	f3af 8000 	nop.w
 8002160:	7bb1a72c 	.word	0x7bb1a72c
 8002164:	3f3921fa 	.word	0x3f3921fa
 8002168:	94fd52a7 	.word	0x94fd52a7
 800216c:	3f10de74 	.word	0x3f10de74
 8002170:	2000212c 	.word	0x2000212c
 8002174:	20002130 	.word	0x20002130
 8002178:	20002d2c 	.word	0x20002d2c
 800217c:	424c0000 	.word	0x424c0000
 8002180:	46000c00 	.word	0x46000c00
 8002184:	46000c00 	.word	0x46000c00
 8002188:	c6000c00 	.word	0xc6000c00
 800218c:	c6000c00 	.word	0xc6000c00
 8002190:	200022c0 	.word	0x200022c0
 8002194:	2000209c 	.word	0x2000209c
 8002198:	20000bc0 	.word	0x20000bc0
	i_total=i+sample_pointB;
 800219c:	4b7f      	ldr	r3, [pc, #508]	; (800239c <sampling+0xdb4>)
 800219e:	881a      	ldrh	r2, [r3, #0]
 80021a0:	4b7f      	ldr	r3, [pc, #508]	; (80023a0 <sampling+0xdb8>)
 80021a2:	881b      	ldrh	r3, [r3, #0]
 80021a4:	4413      	add	r3, r2
 80021a6:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80021aa:	f102 0202 	add.w	r2, r2, #2
 80021ae:	8013      	strh	r3, [r2, #0]
	i_frac=(i>>6);
 80021b0:	4b7a      	ldr	r3, [pc, #488]	; (800239c <sampling+0xdb4>)
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	099b      	lsrs	r3, r3, #6
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	4b7a      	ldr	r3, [pc, #488]	; (80023a4 <sampling+0xdbc>)
 80021bc:	701a      	strb	r2, [r3, #0]
// every step   1,110,928   >>20  ,per note
// New oscillators , sync, trigger input , waveshape ,zero cross
	sample_accus[0] = sample_accus[0] + note[0].tuned; //careful with signed bit shift,better compare
 80021be:	4b7a      	ldr	r3, [pc, #488]	; (80023a8 <sampling+0xdc0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a7a      	ldr	r2, [pc, #488]	; (80023ac <sampling+0xdc4>)
 80021c4:	89d2      	ldrh	r2, [r2, #14]
 80021c6:	4413      	add	r3, r2
 80021c8:	4a77      	ldr	r2, [pc, #476]	; (80023a8 <sampling+0xdc0>)
 80021ca:	6013      	str	r3, [r2, #0]

	if (sample_accus[0]>524287) sample_accus[0] =-sample_accus[0] ; // faster >  than &  ,strange
 80021cc:	4b76      	ldr	r3, [pc, #472]	; (80023a8 <sampling+0xdc0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80021d4:	db04      	blt.n	80021e0 <sampling+0xbf8>
 80021d6:	4b74      	ldr	r3, [pc, #464]	; (80023a8 <sampling+0xdc0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	425b      	negs	r3, r3
 80021dc:	4a72      	ldr	r2, [pc, #456]	; (80023a8 <sampling+0xdc0>)
 80021de:	6013      	str	r3, [r2, #0]



	sample_accus[1] = sample_accus[1] + note[1].tuned;  // normal adder full volume
 80021e0:	4b71      	ldr	r3, [pc, #452]	; (80023a8 <sampling+0xdc0>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	4a71      	ldr	r2, [pc, #452]	; (80023ac <sampling+0xdc4>)
 80021e6:	8bd2      	ldrh	r2, [r2, #30]
 80021e8:	4413      	add	r3, r2
 80021ea:	4a6f      	ldr	r2, [pc, #444]	; (80023a8 <sampling+0xdc0>)
 80021ec:	6053      	str	r3, [r2, #4]
		//	if (!(note[].pitch[0]))   sample_accus[1] =0;  // turn off with vel now , maybe use mask
			if (sample_accus[1]>524287) sample_accus[1] =-sample_accus[1] ; // faster >  than &  ,strange
 80021ee:	4b6e      	ldr	r3, [pc, #440]	; (80023a8 <sampling+0xdc0>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80021f6:	db04      	blt.n	8002202 <sampling+0xc1a>
 80021f8:	4b6b      	ldr	r3, [pc, #428]	; (80023a8 <sampling+0xdc0>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	425b      	negs	r3, r3
 80021fe:	4a6a      	ldr	r2, [pc, #424]	; (80023a8 <sampling+0xdc0>)
 8002200:	6053      	str	r3, [r2, #4]

			sample_accus[2] = sample_accus[2] + note[2].tuned;
 8002202:	4b69      	ldr	r3, [pc, #420]	; (80023a8 <sampling+0xdc0>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	4a69      	ldr	r2, [pc, #420]	; (80023ac <sampling+0xdc4>)
 8002208:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800220a:	4413      	add	r3, r2
 800220c:	4a66      	ldr	r2, [pc, #408]	; (80023a8 <sampling+0xdc0>)
 800220e:	6093      	str	r3, [r2, #8]
			//		if (!(note[].pitch[0]))   sample_accus[2] =0;  // turn off with vel now , maybe use mask
					if (sample_accus[2]>524287) sample_accus[2] =-sample_accus[2] ; // faster >  than &  ,strange
 8002210:	4b65      	ldr	r3, [pc, #404]	; (80023a8 <sampling+0xdc0>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002218:	db04      	blt.n	8002224 <sampling+0xc3c>
 800221a:	4b63      	ldr	r3, [pc, #396]	; (80023a8 <sampling+0xdc0>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	425b      	negs	r3, r3
 8002220:	4a61      	ldr	r2, [pc, #388]	; (80023a8 <sampling+0xdc0>)
 8002222:	6093      	str	r3, [r2, #8]

					sample_accus[3] = sample_accus[3] + note[3].tuned; // bouncing somewhere
 8002224:	4b60      	ldr	r3, [pc, #384]	; (80023a8 <sampling+0xdc0>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	4a60      	ldr	r2, [pc, #384]	; (80023ac <sampling+0xdc4>)
 800222a:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 800222c:	4413      	add	r3, r2
 800222e:	4a5e      	ldr	r2, [pc, #376]	; (80023a8 <sampling+0xdc0>)
 8002230:	60d3      	str	r3, [r2, #12]
					//sample_accus[3] = sample_accus[3] +4000;
					//	if (!(note[].pitch[0]))   sample_accus[3] =0;  // turn off with vel now , maybe use mask
							if (sample_accus[3]>524287) sample_accus[3] =-sample_accus[3] ; // faster >  than &  ,strange
 8002232:	4b5d      	ldr	r3, [pc, #372]	; (80023a8 <sampling+0xdc0>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800223a:	db04      	blt.n	8002246 <sampling+0xc5e>
 800223c:	4b5a      	ldr	r3, [pc, #360]	; (80023a8 <sampling+0xdc0>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	425b      	negs	r3, r3
 8002242:	4a59      	ldr	r2, [pc, #356]	; (80023a8 <sampling+0xdc0>)
 8002244:	60d3      	str	r3, [r2, #12]

							sample_accus[4] = sample_accus[4] + note[4].tuned;
 8002246:	4b58      	ldr	r3, [pc, #352]	; (80023a8 <sampling+0xdc0>)
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	4a58      	ldr	r2, [pc, #352]	; (80023ac <sampling+0xdc4>)
 800224c:	f8b2 204e 	ldrh.w	r2, [r2, #78]	; 0x4e
 8002250:	4413      	add	r3, r2
 8002252:	4a55      	ldr	r2, [pc, #340]	; (80023a8 <sampling+0xdc0>)
 8002254:	6113      	str	r3, [r2, #16]
								//	if (!(note[].pitch[4]))   sample_accus[4] =0;  // turn off with vel now , maybe use mask
									if (sample_accus[4]>524287) sample_accus[4] =-sample_accus[4] ; // faster >  than &  ,strange
 8002256:	4b54      	ldr	r3, [pc, #336]	; (80023a8 <sampling+0xdc0>)
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800225e:	db04      	blt.n	800226a <sampling+0xc82>
 8002260:	4b51      	ldr	r3, [pc, #324]	; (80023a8 <sampling+0xdc0>)
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	425b      	negs	r3, r3
 8002266:	4a50      	ldr	r2, [pc, #320]	; (80023a8 <sampling+0xdc0>)
 8002268:	6113      	str	r3, [r2, #16]

									sample_Accu[2] = 0;sample_Accu[0] =0;sample_Accu[3] =0; //all zeroed
 800226a:	4b51      	ldr	r3, [pc, #324]	; (80023b0 <sampling+0xdc8>)
 800226c:	2200      	movs	r2, #0
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	4b4f      	ldr	r3, [pc, #316]	; (80023b0 <sampling+0xdc8>)
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	4b4e      	ldr	r3, [pc, #312]	; (80023b0 <sampling+0xdc8>)
 8002278:	2200      	movs	r2, #0
 800227a:	60da      	str	r2, [r3, #12]
									//if (sample_accus[2]<0) sample_Accu[2]=+sample_accus[2]; else sample_Accu[2]=sample_accus[2]; // convert to triangle ?
									sample_Accu[0]=sample_accus[2]>>7; // needs cut a bit
 800227c:	4b4a      	ldr	r3, [pc, #296]	; (80023a8 <sampling+0xdc0>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	11db      	asrs	r3, r3, #7
 8002282:	4a4b      	ldr	r2, [pc, #300]	; (80023b0 <sampling+0xdc8>)
 8002284:	6013      	str	r3, [r2, #0]

							sample_Accu[0] = ((sine_out+sample_Accu[0])*cross_fade[1]);   // sine input plus other
 8002286:	4b4a      	ldr	r3, [pc, #296]	; (80023b0 <sampling+0xdc8>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	4b4a      	ldr	r3, [pc, #296]	; (80023b4 <sampling+0xdcc>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4413      	add	r3, r2
 8002290:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002294:	f102 0215 	add.w	r2, r2, #21
 8002298:	7812      	ldrb	r2, [r2, #0]
 800229a:	fb02 f303 	mul.w	r3, r2, r3
 800229e:	4a44      	ldr	r2, [pc, #272]	; (80023b0 <sampling+0xdc8>)
 80022a0:	6013      	str	r3, [r2, #0]
							//sample_Accu[0] = (sine_out*cross_fade[1]);  // sine out only
									//if (sample_accus[3]<0) sample_Accu[3]=+sample_accus[3]; else sample_Accu[3]=sample_accus[3]; // convert to triangle
									sample_Accu[3]=sample_accus[3];
 80022a2:	4b41      	ldr	r3, [pc, #260]	; (80023a8 <sampling+0xdc0>)
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	4a42      	ldr	r2, [pc, #264]	; (80023b0 <sampling+0xdc8>)
 80022a8:	60d3      	str	r3, [r2, #12]
									sample_Accu[2] = (sample_Accu[3]*cross_fade[2]);			//27b, 2 out f2  might do a crossfade here using pot 3
 80022aa:	4b41      	ldr	r3, [pc, #260]	; (80023b0 <sampling+0xdc8>)
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80022b2:	f102 0216 	add.w	r2, r2, #22
 80022b6:	7812      	ldrb	r2, [r2, #0]
 80022b8:	fb02 f303 	mul.w	r3, r2, r3
 80022bc:	4a3c      	ldr	r2, [pc, #240]	; (80023b0 <sampling+0xdc8>)
 80022be:	6093      	str	r3, [r2, #8]
									//	sample_Accu[5] = sample_Accu[4]+ (sample_accus[4]*4);			// drum and envelope

	//	sample_Accu=sample_Accu-(1<<21);


if (sine_counterB==0) 	sine_temp2=note[5].tuned;
 80022c0:	4b3d      	ldr	r3, [pc, #244]	; (80023b8 <sampling+0xdd0>)
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d104      	bne.n	80022d2 <sampling+0xcea>
 80022c8:	4b38      	ldr	r3, [pc, #224]	; (80023ac <sampling+0xdc4>)
 80022ca:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 80022ce:	4b3b      	ldr	r3, [pc, #236]	; (80023bc <sampling+0xdd4>)
 80022d0:	801a      	strh	r2, [r3, #0]

	sine_counterB=sine_counterB+sine_temp2 ;  // sine up counter per cycle , however sine adder needs to wait
 80022d2:	4b39      	ldr	r3, [pc, #228]	; (80023b8 <sampling+0xdd0>)
 80022d4:	881a      	ldrh	r2, [r3, #0]
 80022d6:	4b39      	ldr	r3, [pc, #228]	; (80023bc <sampling+0xdd4>)
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	4413      	add	r3, r2
 80022dc:	b29a      	uxth	r2, r3
 80022de:	4b36      	ldr	r3, [pc, #216]	; (80023b8 <sampling+0xdd0>)
 80022e0:	801a      	strh	r2, [r3, #0]
	if (sine_counterB>>7) sine_zero=0; else sine_zero=1;
 80022e2:	4b35      	ldr	r3, [pc, #212]	; (80023b8 <sampling+0xdd0>)
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	09db      	lsrs	r3, r3, #7
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d006      	beq.n	80022fc <sampling+0xd14>
 80022ee:	2300      	movs	r3, #0
 80022f0:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80022f4:	f102 0201 	add.w	r2, r2, #1
 80022f8:	7013      	strb	r3, [r2, #0]
 80022fa:	e005      	b.n	8002308 <sampling+0xd20>
 80022fc:	2301      	movs	r3, #1
 80022fe:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002302:	f102 0201 	add.w	r2, r2, #1
 8002306:	7013      	strb	r3, [r2, #0]

if (sine_counterB>(sine_length<<5)) sine_counterB=0; //fixed for now
 8002308:	4b2b      	ldr	r3, [pc, #172]	; (80023b8 <sampling+0xdd0>)
 800230a:	881b      	ldrh	r3, [r3, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	4b2c      	ldr	r3, [pc, #176]	; (80023c0 <sampling+0xdd8>)
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	015b      	lsls	r3, r3, #5
 8002314:	429a      	cmp	r2, r3
 8002316:	dd02      	ble.n	800231e <sampling+0xd36>
 8002318:	4b27      	ldr	r3, [pc, #156]	; (80023b8 <sampling+0xdd0>)
 800231a:	2200      	movs	r2, #0
 800231c:	801a      	strh	r2, [r3, #0]
sine_count(); // calc sine   distortion out when hcagning note
 800231e:	f000 faf9 	bl	8002914 <sine_count>
play_holder1[i]=sample_Accu[0];  // write to bank
 8002322:	4b1e      	ldr	r3, [pc, #120]	; (800239c <sampling+0xdb4>)
 8002324:	881b      	ldrh	r3, [r3, #0]
 8002326:	4619      	mov	r1, r3
 8002328:	4b21      	ldr	r3, [pc, #132]	; (80023b0 <sampling+0xdc8>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002330:	f5a3 6308 	sub.w	r3, r3, #2176	; 0x880
 8002334:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
play_holder2[i]=sample_Accu[2];
 8002338:	4b18      	ldr	r3, [pc, #96]	; (800239c <sampling+0xdb4>)
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	4b1c      	ldr	r3, [pc, #112]	; (80023b0 <sampling+0xdc8>)
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002346:	4619      	mov	r1, r3
 8002348:	0083      	lsls	r3, r0, #2
 800234a:	440b      	add	r3, r1
 800234c:	f843 2c80 	str.w	r2, [r3, #-128]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002350:	4b12      	ldr	r3, [pc, #72]	; (800239c <sampling+0xdb4>)
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	3301      	adds	r3, #1
 8002356:	b29a      	uxth	r2, r3
 8002358:	4b10      	ldr	r3, [pc, #64]	; (800239c <sampling+0xdb4>)
 800235a:	801a      	strh	r2, [r3, #0]
 800235c:	4b0f      	ldr	r3, [pc, #60]	; (800239c <sampling+0xdb4>)
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002364:	f4ff af1a 	bcc.w	800219c <sampling+0xbb4>



//uint16_t* click=&input_holder[0];

uint16_t crap_hold=2000;
 8002368:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800236c:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002370:	f102 0206 	add.w	r2, r2, #6
 8002374:	8013      	strh	r3, [r2, #0]

				uint16_t crap_hold1=2000;
 8002376:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800237a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800237e:	f102 020e 	add.w	r2, r2, #14
 8002382:	8013      	strh	r3, [r2, #0]
				uint16_t crap_hold2=2000;
 8002384:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002388:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800238c:	f102 0204 	add.w	r2, r2, #4
 8002390:	8013      	strh	r3, [r2, #0]




for (i=0;i<512;i++) // 15-20 tmr cycles (174)
 8002392:	4b02      	ldr	r3, [pc, #8]	; (800239c <sampling+0xdb4>)
 8002394:	2200      	movs	r2, #0
 8002396:	801a      	strh	r2, [r3, #0]
 8002398:	e05a      	b.n	8002450 <sampling+0xe68>
 800239a:	bf00      	nop
 800239c:	20000bc0 	.word	0x20000bc0
 80023a0:	20000bbe 	.word	0x20000bbe
 80023a4:	2000212c 	.word	0x2000212c
 80023a8:	20001ff0 	.word	0x20001ff0
 80023ac:	200038bc 	.word	0x200038bc
 80023b0:	20000ba0 	.word	0x20000ba0
 80023b4:	20000b88 	.word	0x20000b88
 80023b8:	20000b86 	.word	0x20000b86
 80023bc:	20000b8c 	.word	0x20000b8c
 80023c0:	2000017a 	.word	0x2000017a
			{




				crap_hold=((input_holder[i]*7)+crap_hold2)>>3;
 80023c4:	4b61      	ldr	r3, [pc, #388]	; (800254c <sampling+0xf64>)
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	461a      	mov	r2, r3
 80023ca:	4b61      	ldr	r3, [pc, #388]	; (8002550 <sampling+0xf68>)
 80023cc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80023d0:	461a      	mov	r2, r3
 80023d2:	4613      	mov	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	1a9a      	subs	r2, r3, r2
 80023d8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80023dc:	f103 0304 	add.w	r3, r3, #4
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	4413      	add	r3, r2
 80023e4:	10db      	asrs	r3, r3, #3
 80023e6:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80023ea:	f102 0206 	add.w	r2, r2, #6
 80023ee:	8013      	strh	r3, [r2, #0]
					crap_hold1=((crap_hold*7)+crap_hold1)>>3;
 80023f0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80023f4:	f103 0306 	add.w	r3, r3, #6
 80023f8:	881a      	ldrh	r2, [r3, #0]
 80023fa:	4613      	mov	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	1a9a      	subs	r2, r3, r2
 8002400:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002404:	f103 030e 	add.w	r3, r3, #14
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	4413      	add	r3, r2
 800240c:	10db      	asrs	r3, r3, #3
 800240e:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002412:	f102 020e 	add.w	r2, r2, #14
 8002416:	8013      	strh	r3, [r2, #0]
					input_holder[i] =((crap_hold1*7)+crap_hold2)>>3;
 8002418:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800241c:	f103 030e 	add.w	r3, r3, #14
 8002420:	881a      	ldrh	r2, [r3, #0]
 8002422:	4613      	mov	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	1a9a      	subs	r2, r3, r2
 8002428:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800242c:	f103 0304 	add.w	r3, r3, #4
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	4413      	add	r3, r2
 8002434:	10d9      	asrs	r1, r3, #3
 8002436:	4b45      	ldr	r3, [pc, #276]	; (800254c <sampling+0xf64>)
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	461a      	mov	r2, r3
 800243c:	b289      	uxth	r1, r1
 800243e:	4b44      	ldr	r3, [pc, #272]	; (8002550 <sampling+0xf68>)
 8002440:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
for (i=0;i<512;i++) // 15-20 tmr cycles (174)
 8002444:	4b41      	ldr	r3, [pc, #260]	; (800254c <sampling+0xf64>)
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	3301      	adds	r3, #1
 800244a:	b29a      	uxth	r2, r3
 800244c:	4b3f      	ldr	r3, [pc, #252]	; (800254c <sampling+0xf64>)
 800244e:	801a      	strh	r2, [r3, #0]
 8002450:	4b3e      	ldr	r3, [pc, #248]	; (800254c <sampling+0xf64>)
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002458:	d3b4      	bcc.n	80023c4 <sampling+0xddc>
}
*/



for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out
 800245a:	4b3c      	ldr	r3, [pc, #240]	; (800254c <sampling+0xf64>)
 800245c:	2200      	movs	r2, #0
 800245e:	801a      	strh	r2, [r3, #0]
 8002460:	e228      	b.n	80028b4 <sampling+0x12cc>
	i_total=i+sample_pointB;
 8002462:	4b3a      	ldr	r3, [pc, #232]	; (800254c <sampling+0xf64>)
 8002464:	881a      	ldrh	r2, [r3, #0]
 8002466:	4b3b      	ldr	r3, [pc, #236]	; (8002554 <sampling+0xf6c>)
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	4413      	add	r3, r2
 800246c:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002470:	f102 0202 	add.w	r2, r2, #2
 8002474:	8013      	strh	r3, [r2, #0]
i_frac=(i>>6);
 8002476:	4b35      	ldr	r3, [pc, #212]	; (800254c <sampling+0xf64>)
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	099b      	lsrs	r3, r3, #6
 800247c:	b29b      	uxth	r3, r3
 800247e:	b2da      	uxtb	r2, r3
 8002480:	4b35      	ldr	r3, [pc, #212]	; (8002558 <sampling+0xf70>)
 8002482:	701a      	strb	r2, [r3, #0]

// filter 1
if (		(note_toggler[i>>5]	)==(1<<(i&31)	)) 				{ADSR[0].attack_trigger =0;  trigger_counter++; trigger_counter=trigger_counter&1023  ;}
 8002484:	4b31      	ldr	r3, [pc, #196]	; (800254c <sampling+0xf64>)
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	095b      	lsrs	r3, r3, #5
 800248a:	b29b      	uxth	r3, r3
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8002492:	443b      	add	r3, r7
 8002494:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8002498:	4a2c      	ldr	r2, [pc, #176]	; (800254c <sampling+0xf64>)
 800249a:	8812      	ldrh	r2, [r2, #0]
 800249c:	f002 021f 	and.w	r2, r2, #31
 80024a0:	2101      	movs	r1, #1
 80024a2:	fa01 f202 	lsl.w	r2, r1, r2
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d10f      	bne.n	80024ca <sampling+0xee2>
 80024aa:	4b2c      	ldr	r3, [pc, #176]	; (800255c <sampling+0xf74>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	711a      	strb	r2, [r3, #4]
 80024b0:	4b2b      	ldr	r3, [pc, #172]	; (8002560 <sampling+0xf78>)
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	3301      	adds	r3, #1
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	4b29      	ldr	r3, [pc, #164]	; (8002560 <sampling+0xf78>)
 80024ba:	801a      	strh	r2, [r3, #0]
 80024bc:	4b28      	ldr	r3, [pc, #160]	; (8002560 <sampling+0xf78>)
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	4b26      	ldr	r3, [pc, #152]	; (8002560 <sampling+0xf78>)
 80024c8:	801a      	strh	r2, [r3, #0]
//sample_Accu[1]=(sample_Accu[1]-2020)<<14; // shift to correct level



//sample_Accu[1]=sample_Accu[1]-60000;
sample_Accu[1]=play_holder1[i];  // sine input
 80024ca:	4b20      	ldr	r3, [pc, #128]	; (800254c <sampling+0xf64>)
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80024d4:	f5a3 6308 	sub.w	r3, r3, #2176	; 0x880
 80024d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024dc:	4a21      	ldr	r2, [pc, #132]	; (8002564 <sampling+0xf7c>)
 80024de:	6053      	str	r3, [r2, #4]
sample_Accu[3]=play_holder2[i] >>5; // sine
 80024e0:	4b1a      	ldr	r3, [pc, #104]	; (800254c <sampling+0xf64>)
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	f853 3c80 	ldr.w	r3, [r3, #-128]
 80024f0:	115b      	asrs	r3, r3, #5
 80024f2:	4a1c      	ldr	r2, [pc, #112]	; (8002564 <sampling+0xf7c>)
 80024f4:	60d3      	str	r3, [r2, #12]

// this section is about 100 tmr cycles

freq_point[0]=freq_pointer[0] [i_frac];; // load up coeffs
 80024f6:	4b18      	ldr	r3, [pc, #96]	; (8002558 <sampling+0xf70>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	4a1b      	ldr	r2, [pc, #108]	; (8002568 <sampling+0xf80>)
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a1a      	ldr	r2, [pc, #104]	; (800256c <sampling+0xf84>)
 8002504:	6013      	str	r3, [r2, #0]
//freq_point[1]=freq_pointer[1] [i_frac];
freq_point[2]=freq_pointer[2] [i_frac];  // ok , array was too short
 8002506:	4b14      	ldr	r3, [pc, #80]	; (8002558 <sampling+0xf70>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	4a17      	ldr	r2, [pc, #92]	; (8002568 <sampling+0xf80>)
 800250c:	3312      	adds	r3, #18
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a15      	ldr	r2, [pc, #84]	; (800256c <sampling+0xf84>)
 8002516:	6093      	str	r3, [r2, #8]
//freq_point[3]=freq_pointer[3] [i_frac];
//freq_point[0]=0.5;  //was ok with this
	//	freq_point[2]=0.5;


adsr_level[3] = adsr_lut	[i>>1];
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <sampling+0xf64>)
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	085b      	lsrs	r3, r3, #1
 800251e:	b29b      	uxth	r3, r3
 8002520:	4a13      	ldr	r2, [pc, #76]	; (8002570 <sampling+0xf88>)
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a12      	ldr	r2, [pc, #72]	; (8002574 <sampling+0xf8c>)
 800252a:	60d3      	str	r3, [r2, #12]


if (freq_point[0]>1) freq_point[0]=1; else if (freq_point[0]<0) freq_point[0]=0;// just in case
 800252c:	4b0f      	ldr	r3, [pc, #60]	; (800256c <sampling+0xf84>)
 800252e:	edd3 7a00 	vldr	s15, [r3]
 8002532:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002536:	eef4 7ac7 	vcmpe.f32	s15, s14
 800253a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800253e:	dd1b      	ble.n	8002578 <sampling+0xf90>
 8002540:	4b0a      	ldr	r3, [pc, #40]	; (800256c <sampling+0xf84>)
 8002542:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	e022      	b.n	8002590 <sampling+0xfa8>
 800254a:	bf00      	nop
 800254c:	20000bc0 	.word	0x20000bc0
 8002550:	20002910 	.word	0x20002910
 8002554:	20000bbe 	.word	0x20000bbe
 8002558:	2000212c 	.word	0x2000212c
 800255c:	20002e30 	.word	0x20002e30
 8002560:	2000212e 	.word	0x2000212e
 8002564:	20000ba0 	.word	0x20000ba0
 8002568:	2000209c 	.word	0x2000209c
 800256c:	2000208c 	.word	0x2000208c
 8002570:	20001bd4 	.word	0x20001bd4
 8002574:	200028cc 	.word	0x200028cc
 8002578:	4bb3      	ldr	r3, [pc, #716]	; (8002848 <sampling+0x1260>)
 800257a:	edd3 7a00 	vldr	s15, [r3]
 800257e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002586:	d503      	bpl.n	8002590 <sampling+0xfa8>
 8002588:	4baf      	ldr	r3, [pc, #700]	; (8002848 <sampling+0x1260>)
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
		//freq_point[0]=0.50;
		freq_point[1]=1-freq_point[0];
 8002590:	4bad      	ldr	r3, [pc, #692]	; (8002848 <sampling+0x1260>)
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800259a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800259e:	4baa      	ldr	r3, [pc, #680]	; (8002848 <sampling+0x1260>)
 80025a0:	edc3 7a01 	vstr	s15, [r3, #4]
		sample_Accu[1] = sample_Accu[1]>>13;
 80025a4:	4ba9      	ldr	r3, [pc, #676]	; (800284c <sampling+0x1264>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	135b      	asrs	r3, r3, #13
 80025aa:	4aa8      	ldr	r2, [pc, #672]	; (800284c <sampling+0x1264>)
 80025ac:	6053      	str	r3, [r2, #4]

		//int16_t  ADSR[0].buffer_temp2=lfo_out [1] [i>>6];

		//ADSR[0].buffer_temp2=ADSR[0].buffer_temp2-8195;
		//sample_Accu[1] = sample_Accu[1] *lfo_out [0] [i>>6];     // vol lfo
		sample_Accu[1] = sample_Accu[1] *LFO[0].out[i>>6];
 80025ae:	4ba7      	ldr	r3, [pc, #668]	; (800284c <sampling+0x1264>)
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	4ba7      	ldr	r3, [pc, #668]	; (8002850 <sampling+0x1268>)
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	099b      	lsrs	r3, r3, #6
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	49a6      	ldr	r1, [pc, #664]	; (8002854 <sampling+0x126c>)
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	440b      	add	r3, r1
 80025c0:	88db      	ldrh	r3, [r3, #6]
 80025c2:	fb02 f303 	mul.w	r3, r2, r3
 80025c6:	4aa1      	ldr	r2, [pc, #644]	; (800284c <sampling+0x1264>)
 80025c8:	6053      	str	r3, [r2, #4]



		//	filter_accus[1]=sample_Accu[1]+((filter_hold[0])*0.5); // saw
	//	filter_accus[1]=	filter_accus[1]*adsr_level[3][i_frac];
		filter_accus[1]=	filter_accus[1]*adsr_level[3];
 80025ca:	4ba3      	ldr	r3, [pc, #652]	; (8002858 <sampling+0x1270>)
 80025cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80025d0:	4ba2      	ldr	r3, [pc, #648]	; (800285c <sampling+0x1274>)
 80025d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80025d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025da:	4b9f      	ldr	r3, [pc, #636]	; (8002858 <sampling+0x1270>)
 80025dc:	edc3 7a01 	vstr	s15, [r3, #4]

		filter_accus[2]=(filter_accus[1]*freq_point[0])+(filter_accus[2]*freq_point[1]);					// maybe allow bandpass insted of lpf
 80025e0:	4b9d      	ldr	r3, [pc, #628]	; (8002858 <sampling+0x1270>)
 80025e2:	ed93 7a01 	vldr	s14, [r3, #4]
 80025e6:	4b98      	ldr	r3, [pc, #608]	; (8002848 <sampling+0x1260>)
 80025e8:	edd3 7a00 	vldr	s15, [r3]
 80025ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025f0:	4b99      	ldr	r3, [pc, #612]	; (8002858 <sampling+0x1270>)
 80025f2:	edd3 6a02 	vldr	s13, [r3, #8]
 80025f6:	4b94      	ldr	r3, [pc, #592]	; (8002848 <sampling+0x1260>)
 80025f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80025fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002604:	4b94      	ldr	r3, [pc, #592]	; (8002858 <sampling+0x1270>)
 8002606:	edc3 7a02 	vstr	s15, [r3, #8]
		filter_accus[3]=(filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]);
 800260a:	4b93      	ldr	r3, [pc, #588]	; (8002858 <sampling+0x1270>)
 800260c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002610:	4b8d      	ldr	r3, [pc, #564]	; (8002848 <sampling+0x1260>)
 8002612:	edd3 7a00 	vldr	s15, [r3]
 8002616:	ee27 7a27 	vmul.f32	s14, s14, s15
 800261a:	4b8f      	ldr	r3, [pc, #572]	; (8002858 <sampling+0x1270>)
 800261c:	edd3 6a03 	vldr	s13, [r3, #12]
 8002620:	4b89      	ldr	r3, [pc, #548]	; (8002848 <sampling+0x1260>)
 8002622:	edd3 7a01 	vldr	s15, [r3, #4]
 8002626:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800262a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800262e:	4b8a      	ldr	r3, [pc, #552]	; (8002858 <sampling+0x1270>)
 8002630:	edc3 7a03 	vstr	s15, [r3, #12]
		filter_accus[4]=(filter_accus[3]*freq_point[0])+(filter_accus[4]*freq_point[1]);
 8002634:	4b88      	ldr	r3, [pc, #544]	; (8002858 <sampling+0x1270>)
 8002636:	ed93 7a03 	vldr	s14, [r3, #12]
 800263a:	4b83      	ldr	r3, [pc, #524]	; (8002848 <sampling+0x1260>)
 800263c:	edd3 7a00 	vldr	s15, [r3]
 8002640:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002644:	4b84      	ldr	r3, [pc, #528]	; (8002858 <sampling+0x1270>)
 8002646:	edd3 6a04 	vldr	s13, [r3, #16]
 800264a:	4b7f      	ldr	r3, [pc, #508]	; (8002848 <sampling+0x1260>)
 800264c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002650:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002658:	4b7f      	ldr	r3, [pc, #508]	; (8002858 <sampling+0x1270>)
 800265a:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[5]=(filter_accus[4]*freq_point[0])+(filter_accus[5]*freq_point[1]);
 800265e:	4b7e      	ldr	r3, [pc, #504]	; (8002858 <sampling+0x1270>)
 8002660:	ed93 7a04 	vldr	s14, [r3, #16]
 8002664:	4b78      	ldr	r3, [pc, #480]	; (8002848 <sampling+0x1260>)
 8002666:	edd3 7a00 	vldr	s15, [r3]
 800266a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800266e:	4b7a      	ldr	r3, [pc, #488]	; (8002858 <sampling+0x1270>)
 8002670:	edd3 6a05 	vldr	s13, [r3, #20]
 8002674:	4b74      	ldr	r3, [pc, #464]	; (8002848 <sampling+0x1260>)
 8002676:	edd3 7a01 	vldr	s15, [r3, #4]
 800267a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800267e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002682:	4b75      	ldr	r3, [pc, #468]	; (8002858 <sampling+0x1270>)
 8002684:	edc3 7a05 	vstr	s15, [r3, #20]
		filter_hold[0]=(filter_accus[5]+filter_accus[11])*0.5; //half sample , nice
 8002688:	4b73      	ldr	r3, [pc, #460]	; (8002858 <sampling+0x1270>)
 800268a:	ed93 7a05 	vldr	s14, [r3, #20]
 800268e:	4b72      	ldr	r3, [pc, #456]	; (8002858 <sampling+0x1270>)
 8002690:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002698:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800269c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026a0:	4b6f      	ldr	r3, [pc, #444]	; (8002860 <sampling+0x1278>)
 80026a2:	edc3 7a00 	vstr	s15, [r3]
		sample_Accu[0] =filter_accus[5]; // out
 80026a6:	4b6c      	ldr	r3, [pc, #432]	; (8002858 <sampling+0x1270>)
 80026a8:	edd3 7a05 	vldr	s15, [r3, #20]
 80026ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026b0:	ee17 2a90 	vmov	r2, s15
 80026b4:	4b65      	ldr	r3, [pc, #404]	; (800284c <sampling+0x1264>)
 80026b6:	601a      	str	r2, [r3, #0]
		filter_accus[11]=filter_accus[5]; //write back new value
 80026b8:	4b67      	ldr	r3, [pc, #412]	; (8002858 <sampling+0x1270>)
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	4a66      	ldr	r2, [pc, #408]	; (8002858 <sampling+0x1270>)
 80026be:	62d3      	str	r3, [r2, #44]	; 0x2c
		//sample_Accu[0] =sample_Accu[1];

		//filter 2
		sample_Accu[3]=play_holder2[i] >>5; // sine
 80026c0:	4b63      	ldr	r3, [pc, #396]	; (8002850 <sampling+0x1268>)
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	f853 3c80 	ldr.w	r3, [r3, #-128]
 80026d0:	115b      	asrs	r3, r3, #5
 80026d2:	4a5e      	ldr	r2, [pc, #376]	; (800284c <sampling+0x1264>)
 80026d4:	60d3      	str	r3, [r2, #12]


				if (freq_point[2]>1) freq_point[2]=1;
 80026d6:	4b5c      	ldr	r3, [pc, #368]	; (8002848 <sampling+0x1260>)
 80026d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80026dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e8:	dd03      	ble.n	80026f2 <sampling+0x110a>
 80026ea:	4b57      	ldr	r3, [pc, #348]	; (8002848 <sampling+0x1260>)
 80026ec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80026f0:	609a      	str	r2, [r3, #8]

				freq_point[3]=1-freq_point[2];
 80026f2:	4b55      	ldr	r3, [pc, #340]	; (8002848 <sampling+0x1260>)
 80026f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80026f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002700:	4b51      	ldr	r3, [pc, #324]	; (8002848 <sampling+0x1260>)
 8002702:	edc3 7a03 	vstr	s15, [r3, #12]
				filter_accus[6]=sample_Accu[3];
 8002706:	4b51      	ldr	r3, [pc, #324]	; (800284c <sampling+0x1264>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	ee07 3a90 	vmov	s15, r3
 800270e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002712:	4b51      	ldr	r3, [pc, #324]	; (8002858 <sampling+0x1270>)
 8002714:	edc3 7a06 	vstr	s15, [r3, #24]
			//	filter_accus[6]= filter_accus[6]*adsr_level[3]; // add adsr envelope

				filter_accus[7]=(filter_accus[6]*freq_point[2])+(filter_accus[7]*freq_point[3]);
 8002718:	4b4f      	ldr	r3, [pc, #316]	; (8002858 <sampling+0x1270>)
 800271a:	ed93 7a06 	vldr	s14, [r3, #24]
 800271e:	4b4a      	ldr	r3, [pc, #296]	; (8002848 <sampling+0x1260>)
 8002720:	edd3 7a02 	vldr	s15, [r3, #8]
 8002724:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002728:	4b4b      	ldr	r3, [pc, #300]	; (8002858 <sampling+0x1270>)
 800272a:	edd3 6a07 	vldr	s13, [r3, #28]
 800272e:	4b46      	ldr	r3, [pc, #280]	; (8002848 <sampling+0x1260>)
 8002730:	edd3 7a03 	vldr	s15, [r3, #12]
 8002734:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002738:	ee77 7a27 	vadd.f32	s15, s14, s15
 800273c:	4b46      	ldr	r3, [pc, #280]	; (8002858 <sampling+0x1270>)
 800273e:	edc3 7a07 	vstr	s15, [r3, #28]
				filter_accus[8]=(filter_accus[7]*freq_point[2])+(filter_accus[8]*freq_point[3]);
 8002742:	4b45      	ldr	r3, [pc, #276]	; (8002858 <sampling+0x1270>)
 8002744:	ed93 7a07 	vldr	s14, [r3, #28]
 8002748:	4b3f      	ldr	r3, [pc, #252]	; (8002848 <sampling+0x1260>)
 800274a:	edd3 7a02 	vldr	s15, [r3, #8]
 800274e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002752:	4b41      	ldr	r3, [pc, #260]	; (8002858 <sampling+0x1270>)
 8002754:	edd3 6a08 	vldr	s13, [r3, #32]
 8002758:	4b3b      	ldr	r3, [pc, #236]	; (8002848 <sampling+0x1260>)
 800275a:	edd3 7a03 	vldr	s15, [r3, #12]
 800275e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002762:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002766:	4b3c      	ldr	r3, [pc, #240]	; (8002858 <sampling+0x1270>)
 8002768:	edc3 7a08 	vstr	s15, [r3, #32]
				filter_accus[9]=(filter_accus[8]*freq_point[2])+(filter_accus[9]*freq_point[3]);
 800276c:	4b3a      	ldr	r3, [pc, #232]	; (8002858 <sampling+0x1270>)
 800276e:	ed93 7a08 	vldr	s14, [r3, #32]
 8002772:	4b35      	ldr	r3, [pc, #212]	; (8002848 <sampling+0x1260>)
 8002774:	edd3 7a02 	vldr	s15, [r3, #8]
 8002778:	ee27 7a27 	vmul.f32	s14, s14, s15
 800277c:	4b36      	ldr	r3, [pc, #216]	; (8002858 <sampling+0x1270>)
 800277e:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002782:	4b31      	ldr	r3, [pc, #196]	; (8002848 <sampling+0x1260>)
 8002784:	edd3 7a03 	vldr	s15, [r3, #12]
 8002788:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800278c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002790:	4b31      	ldr	r3, [pc, #196]	; (8002858 <sampling+0x1270>)
 8002792:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				filter_accus[10]=(filter_accus[9]*freq_point[2])+(filter_accus[10]*freq_point[3]);
 8002796:	4b30      	ldr	r3, [pc, #192]	; (8002858 <sampling+0x1270>)
 8002798:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800279c:	4b2a      	ldr	r3, [pc, #168]	; (8002848 <sampling+0x1260>)
 800279e:	edd3 7a02 	vldr	s15, [r3, #8]
 80027a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027a6:	4b2c      	ldr	r3, [pc, #176]	; (8002858 <sampling+0x1270>)
 80027a8:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80027ac:	4b26      	ldr	r3, [pc, #152]	; (8002848 <sampling+0x1260>)
 80027ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80027b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ba:	4b27      	ldr	r3, [pc, #156]	; (8002858 <sampling+0x1270>)
 80027bc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				filter_hold[1]=(filter_accus[10]+filter_accus[12])*0.5; //half sample
 80027c0:	4b25      	ldr	r3, [pc, #148]	; (8002858 <sampling+0x1270>)
 80027c2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80027c6:	4b24      	ldr	r3, [pc, #144]	; (8002858 <sampling+0x1270>)
 80027c8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80027cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80027d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027d8:	4b21      	ldr	r3, [pc, #132]	; (8002860 <sampling+0x1278>)
 80027da:	edc3 7a01 	vstr	s15, [r3, #4]
				sample_Accu[2] =filter_accus[10]; //out
 80027de:	4b1e      	ldr	r3, [pc, #120]	; (8002858 <sampling+0x1270>)
 80027e0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80027e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027e8:	ee17 2a90 	vmov	r2, s15
 80027ec:	4b17      	ldr	r3, [pc, #92]	; (800284c <sampling+0x1264>)
 80027ee:	609a      	str	r2, [r3, #8]
				filter_accus[12]=filter_accus[10]; //write back new value
 80027f0:	4b19      	ldr	r3, [pc, #100]	; (8002858 <sampling+0x1270>)
 80027f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f4:	4a18      	ldr	r2, [pc, #96]	; (8002858 <sampling+0x1270>)
 80027f6:	6313      	str	r3, [r2, #48]	; 0x30


filter_Accu=0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80027fe:	f102 0210 	add.w	r2, r2, #16
 8002802:	6013      	str	r3, [r2, #0]
//filter_Accu=(sample_Accu[0]+sample_Accu[2])>>8; //filter + drum out


//filter_Accu=(sample_Accu[1]+sample_Accu[3])>>8; //filter + drum out ,clean out
 filter_Accu=sample_Accu[1]>>7;
 8002804:	4b11      	ldr	r3, [pc, #68]	; (800284c <sampling+0x1264>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	11db      	asrs	r3, r3, #7
 800280a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800280e:	f102 0210 	add.w	r2, r2, #16
 8002812:	6013      	str	r3, [r2, #0]

// filter_Accu=sample_Accu[2]>>11;
//filter_Accu=(sample_Accu[1]>>7)+(sample_Accu[3]>>8); //filter + drum out
 if (one_shot!=199)   one_shot++;  //play one attack then stop
 8002814:	4b13      	ldr	r3, [pc, #76]	; (8002864 <sampling+0x127c>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2bc7      	cmp	r3, #199	; 0xc7
 800281a:	d005      	beq.n	8002828 <sampling+0x1240>
 800281c:	4b11      	ldr	r3, [pc, #68]	; (8002864 <sampling+0x127c>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	3301      	adds	r3, #1
 8002822:	b2da      	uxtb	r2, r3
 8002824:	4b0f      	ldr	r3, [pc, #60]	; (8002864 <sampling+0x127c>)
 8002826:	701a      	strb	r2, [r3, #0]

 if (filter_Accu>0xFFFF) filter_Accu=0xFFFF; else if (filter_Accu<-65535) filter_Accu=-65535;  // limiter to 16 bits
 8002828:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800282c:	f103 0310 	add.w	r3, r3, #16
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002836:	db17      	blt.n	8002868 <sampling+0x1280>
 8002838:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800283c:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002840:	f102 0210 	add.w	r2, r2, #16
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	e01d      	b.n	8002884 <sampling+0x129c>
 8002848:	2000208c 	.word	0x2000208c
 800284c:	20000ba0 	.word	0x20000ba0
 8002850:	20000bc0 	.word	0x20000bc0
 8002854:	20002d2c 	.word	0x20002d2c
 8002858:	2000203c 	.word	0x2000203c
 800285c:	200028cc 	.word	0x200028cc
 8002860:	20002078 	.word	0x20002078
 8002864:	20002008 	.word	0x20002008
 8002868:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800286c:	f103 0310 	add.w	r3, r3, #16
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002876:	dc05      	bgt.n	8002884 <sampling+0x129c>
 8002878:	4b1f      	ldr	r3, [pc, #124]	; (80028f8 <sampling+0x1310>)
 800287a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800287e:	f102 0210 	add.w	r2, r2, #16
 8002882:	6013      	str	r3, [r2, #0]


 play_sample[i_total]=(filter_Accu>>6)+1024;   // final output disable for now 2544
 8002884:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002888:	f103 0310 	add.w	r3, r3, #16
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	119b      	asrs	r3, r3, #6
 8002890:	b29a      	uxth	r2, r3
 8002892:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002896:	f103 0302 	add.w	r3, r3, #2
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028a0:	b291      	uxth	r1, r2
 80028a2:	4a16      	ldr	r2, [pc, #88]	; (80028fc <sampling+0x1314>)
 80028a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out
 80028a8:	4b15      	ldr	r3, [pc, #84]	; (8002900 <sampling+0x1318>)
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	3301      	adds	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	4b13      	ldr	r3, [pc, #76]	; (8002900 <sampling+0x1318>)
 80028b2:	801a      	strh	r2, [r3, #0]
 80028b4:	4b12      	ldr	r3, [pc, #72]	; (8002900 <sampling+0x1318>)
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028bc:	f4ff add1 	bcc.w	8002462 <sampling+0xe7a>
} // end of filer


//time_final=time_proc;   // in samples

if (bank_write) {time_final[1]=time_proc; error_count++;};  // tick timer in samples ,normal max 20 but some 230
 80028c0:	4b10      	ldr	r3, [pc, #64]	; (8002904 <sampling+0x131c>)
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d009      	beq.n	80028dc <sampling+0x12f4>
 80028c8:	4b0f      	ldr	r3, [pc, #60]	; (8002908 <sampling+0x1320>)
 80028ca:	881a      	ldrh	r2, [r3, #0]
 80028cc:	4b0f      	ldr	r3, [pc, #60]	; (800290c <sampling+0x1324>)
 80028ce:	805a      	strh	r2, [r3, #2]
 80028d0:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <sampling+0x1328>)
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	3301      	adds	r3, #1
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	4b0d      	ldr	r3, [pc, #52]	; (8002910 <sampling+0x1328>)
 80028da:	801a      	strh	r2, [r3, #0]
if (time_proc>100)  	time_final[0]=time_proc;
 80028dc:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <sampling+0x1320>)
 80028de:	881b      	ldrh	r3, [r3, #0]
 80028e0:	2b64      	cmp	r3, #100	; 0x64
 80028e2:	d903      	bls.n	80028ec <sampling+0x1304>
 80028e4:	4b08      	ldr	r3, [pc, #32]	; (8002908 <sampling+0x1320>)
 80028e6:	881a      	ldrh	r2, [r3, #0]
 80028e8:	4b08      	ldr	r3, [pc, #32]	; (800290c <sampling+0x1324>)
 80028ea:	801a      	strh	r2, [r3, #0]


//bank_write=0;   /// total 320 sample time (39khz)
}
 80028ec:	bf00      	nop
 80028ee:	f507 5784 	add.w	r7, r7, #4224	; 0x1080
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bdb0      	pop	{r4, r5, r7, pc}
 80028f6:	bf00      	nop
 80028f8:	ffff0001 	.word	0xffff0001
 80028fc:	20000bc4 	.word	0x20000bc4
 8002900:	20000bc0 	.word	0x20000bc0
 8002904:	200001ea 	.word	0x200001ea
 8002908:	20002d28 	.word	0x20002d28
 800290c:	20002d24 	.word	0x20002d24
 8002910:	20002d2a 	.word	0x20002d2a

08002914 <sine_count>:
mask_result=mask_tempB &1;


}

void sine_count(void) {         // sine_out is the output 9  bit  , works
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
int32_t sine_tempA;
int32_t sine_tempB;
int8_t sine_frac;


sine_counter=(sine_counterB>>5);  // up countr controlled by counter
 800291a:	4b2f      	ldr	r3, [pc, #188]	; (80029d8 <sine_count+0xc4>)
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	095b      	lsrs	r3, r3, #5
 8002920:	b29a      	uxth	r2, r3
 8002922:	4b2e      	ldr	r3, [pc, #184]	; (80029dc <sine_count+0xc8>)
 8002924:	801a      	strh	r2, [r3, #0]
sine_frac=sine_counterB & 31;  // grab last 5 bits, actual position for linear interpol,fractional
 8002926:	4b2c      	ldr	r3, [pc, #176]	; (80029d8 <sine_count+0xc4>)
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	b25b      	sxtb	r3, r3
 800292c:	f003 031f 	and.w	r3, r3, #31
 8002930:	73fb      	strb	r3, [r7, #15]

	if (sine_counter>sine_length) sine_counter = sine_length;		// seems to be faster than using a for loop to calculate both values
 8002932:	4b2a      	ldr	r3, [pc, #168]	; (80029dc <sine_count+0xc8>)
 8002934:	881a      	ldrh	r2, [r3, #0]
 8002936:	4b2a      	ldr	r3, [pc, #168]	; (80029e0 <sine_count+0xcc>)
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d903      	bls.n	8002946 <sine_count+0x32>
 800293e:	4b28      	ldr	r3, [pc, #160]	; (80029e0 <sine_count+0xcc>)
 8002940:	881a      	ldrh	r2, [r3, #0]
 8002942:	4b26      	ldr	r3, [pc, #152]	; (80029dc <sine_count+0xc8>)
 8002944:	801a      	strh	r2, [r3, #0]

	sine_out = sine_block[sine_counter];  // 0- 40000
 8002946:	4b25      	ldr	r3, [pc, #148]	; (80029dc <sine_count+0xc8>)
 8002948:	881b      	ldrh	r3, [r3, #0]
 800294a:	461a      	mov	r2, r3
 800294c:	4b25      	ldr	r3, [pc, #148]	; (80029e4 <sine_count+0xd0>)
 800294e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002952:	461a      	mov	r2, r3
 8002954:	4b24      	ldr	r3, [pc, #144]	; (80029e8 <sine_count+0xd4>)
 8002956:	601a      	str	r2, [r3, #0]
	sine_tempA=sine_out; // grab first value , needs to be always plus
 8002958:	4b23      	ldr	r3, [pc, #140]	; (80029e8 <sine_count+0xd4>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	60bb      	str	r3, [r7, #8]
	sine_tempA=sine_tempA-20000; //convert to signed
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 8002964:	3b20      	subs	r3, #32
 8002966:	60bb      	str	r3, [r7, #8]

	sine_counter++;
 8002968:	4b1c      	ldr	r3, [pc, #112]	; (80029dc <sine_count+0xc8>)
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	3301      	adds	r3, #1
 800296e:	b29a      	uxth	r2, r3
 8002970:	4b1a      	ldr	r3, [pc, #104]	; (80029dc <sine_count+0xc8>)
 8002972:	801a      	strh	r2, [r3, #0]
	if (sine_counter>=sine_length)  sine_counter=0; // set to sample length
 8002974:	4b19      	ldr	r3, [pc, #100]	; (80029dc <sine_count+0xc8>)
 8002976:	881a      	ldrh	r2, [r3, #0]
 8002978:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <sine_count+0xcc>)
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d302      	bcc.n	8002986 <sine_count+0x72>
 8002980:	4b16      	ldr	r3, [pc, #88]	; (80029dc <sine_count+0xc8>)
 8002982:	2200      	movs	r2, #0
 8002984:	801a      	strh	r2, [r3, #0]

			sine_out = sine_block[sine_counter];  // grab second value
 8002986:	4b15      	ldr	r3, [pc, #84]	; (80029dc <sine_count+0xc8>)
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	4b15      	ldr	r3, [pc, #84]	; (80029e4 <sine_count+0xd0>)
 800298e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002992:	461a      	mov	r2, r3
 8002994:	4b14      	ldr	r3, [pc, #80]	; (80029e8 <sine_count+0xd4>)
 8002996:	601a      	str	r2, [r3, #0]

		sine_tempB=sine_out; // grab first value
 8002998:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <sine_count+0xd4>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	607b      	str	r3, [r7, #4]
			sine_tempB=sine_tempB-20000;  // convert to signed and +256 to -256
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 80029a4:	3b20      	subs	r3, #32
 80029a6:	607b      	str	r3, [r7, #4]

			sine_tempB=	sine_tempB-sine_tempA;   // calculate fraction then add
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	607b      	str	r3, [r7, #4]
			sine_tempB=sine_tempB>>5; // div 32 or 32 upsample
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	115b      	asrs	r3, r3, #5
 80029b4:	607b      	str	r3, [r7, #4]

			sine_tempB=sine_tempB*sine_frac; // mult by steps , can overshoot !!
 80029b6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	fb02 f303 	mul.w	r3, r2, r3
 80029c0:	607b      	str	r3, [r7, #4]

			sine_out=(sine_tempA+sine_tempB);   // add back to start value
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4413      	add	r3, r2
 80029c8:	4a07      	ldr	r2, [pc, #28]	; (80029e8 <sine_count+0xd4>)
 80029ca:	6013      	str	r3, [r2, #0]
			//sine_tempA=sine_tempA; //needs

			//sine_out=sine_tempA;


}
 80029cc:	bf00      	nop
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	20000b86 	.word	0x20000b86
 80029dc:	20000b84 	.word	0x20000b84
 80029e0:	2000017a 	.word	0x2000017a
 80029e4:	08009d10 	.word	0x08009d10
 80029e8:	20000b88 	.word	0x20000b88
 80029ec:	00000000 	.word	0x00000000

080029f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029f2:	b0a3      	sub	sp, #140	; 0x8c
 80029f4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029f6:	f001 faf5 	bl	8003fe4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029fa:	f000 fcbd 	bl	8003378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029fe:	f000 ff83 	bl	8003908 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a02:	f000 ff61 	bl	80038c8 <MX_DMA_Init>
  MX_ADC1_Init();
 8002a06:	f000 fd21 	bl	800344c <MX_ADC1_Init>
  MX_SPI2_Init();
 8002a0a:	f000 fe09 	bl	8003620 <MX_SPI2_Init>
  MX_TIM3_Init();
 8002a0e:	f000 fe91 	bl	8003734 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002a12:	f000 ff05 	bl	8003820 <MX_TIM4_Init>
  MX_I2C2_Init();
 8002a16:	f000 fd9f 	bl	8003558 <MX_I2C2_Init>
  MX_TIM2_Init();
 8002a1a:	f000 fe37 	bl	800368c <MX_TIM2_Init>
  MX_SPI1_Init();
 8002a1e:	f000 fdc9 	bl	80035b4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  const volatile uint8_t *userConfig=(const volatile uint8_t *)0x0800D2F0;
 8002a22:	4bbf      	ldr	r3, [pc, #764]	; (8002d20 <main+0x330>)
 8002a24:	66fb      	str	r3, [r7, #108]	; 0x6c



//LL_SPI_Enable(SPI2);

  HAL_SPI_Init(&hspi2); // write to register hspi2
 8002a26:	48bf      	ldr	r0, [pc, #764]	; (8002d24 <main+0x334>)
 8002a28:	f004 fe80 	bl	800772c <HAL_SPI_Init>
  HAL_SPI_Init(&hspi1); // write to register hspi2
 8002a2c:	48be      	ldr	r0, [pc, #760]	; (8002d28 <main+0x338>)
 8002a2e:	f004 fe7d 	bl	800772c <HAL_SPI_Init>
  // lcd_init(); // keep this late or have issues
//HAL_TIM_Base_Start_IT(&htim1);  // This needs to work for irq   ,disbling tim1 made loop a lot faster
//TIM1->CCER=0;
HAL_TIM_Base_Start_IT(&htim3);  // This needs to work for irq
 8002a32:	48be      	ldr	r0, [pc, #760]	; (8002d2c <main+0x33c>)
 8002a34:	f005 fccc 	bl	80083d0 <HAL_TIM_Base_Start_IT>
TIM3->CCER=0;
 8002a38:	4bbd      	ldr	r3, [pc, #756]	; (8002d30 <main+0x340>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	621a      	str	r2, [r3, #32]
HAL_TIM_Base_Start(&htim2);
 8002a3e:	48bd      	ldr	r0, [pc, #756]	; (8002d34 <main+0x344>)
 8002a40:	f005 fc6c 	bl	800831c <HAL_TIM_Base_Start>
HAL_TIM_Base_Start(&htim4);
 8002a44:	48bc      	ldr	r0, [pc, #752]	; (8002d38 <main+0x348>)
 8002a46:	f005 fc69 	bl	800831c <HAL_TIM_Base_Start>
//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  // they both work fine together
HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8002a4a:	2108      	movs	r1, #8
 8002a4c:	48b7      	ldr	r0, [pc, #732]	; (8002d2c <main+0x33c>)
 8002a4e:	f005 fd7b 	bl	8008548 <HAL_TIM_PWM_Start>
//HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,pData, 63);
TIM2->CNT=32000;
 8002a52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a56:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002a5a:	625a      	str	r2, [r3, #36]	; 0x24
HAL_ADC_Start(&hadc1);
 8002a5c:	48b7      	ldr	r0, [pc, #732]	; (8002d3c <main+0x34c>)
 8002a5e:	f001 fb9b 	bl	8004198 <HAL_ADC_Start>
HAL_ADC_Start_DMA(&hadc1, adc_source, 1024); //dma start ,needs this and adc start ,set sampling time to very long or it will fail
 8002a62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a66:	49b6      	ldr	r1, [pc, #728]	; (8002d40 <main+0x350>)
 8002a68:	48b4      	ldr	r0, [pc, #720]	; (8002d3c <main+0x34c>)
 8002a6a:	f001 fcd5 	bl	8004418 <HAL_ADC_Start_DMA>


HAL_I2C_MspInit(&hi2c2);
 8002a6e:	48b5      	ldr	r0, [pc, #724]	; (8002d44 <main+0x354>)
 8002a70:	f001 f884 	bl	8003b7c <HAL_I2C_MspInit>
uint8_t send_spi1[5]={0x90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,};
 8002a74:	4ab4      	ldr	r2, [pc, #720]	; (8002d48 <main+0x358>)
 8002a76:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002a7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a7e:	6018      	str	r0, [r3, #0]
 8002a80:	3304      	adds	r3, #4
 8002a82:	7019      	strb	r1, [r3, #0]





HAL_Delay(5);
 8002a84:	2005      	movs	r0, #5
 8002a86:	f001 fb1f 	bl	80040c8 <HAL_Delay>


send_spi1[0]=0x06; //enable write  , only lasts for single operation
 8002a8a:	2306      	movs	r3, #6
 8002a8c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002a90:	2200      	movs	r2, #0
 8002a92:	2110      	movs	r1, #16
 8002a94:	48ad      	ldr	r0, [pc, #692]	; (8002d4c <main+0x35c>)
 8002a96:	f003 fa2b 	bl	8005ef0 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8002a9a:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	48a0      	ldr	r0, [pc, #640]	; (8002d28 <main+0x338>)
 8002aa6:	f004 feca 	bl	800783e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002aaa:	2201      	movs	r2, #1
 8002aac:	2110      	movs	r1, #16
 8002aae:	48a7      	ldr	r0, [pc, #668]	; (8002d4c <main+0x35c>)
 8002ab0:	f003 fa1e 	bl	8005ef0 <HAL_GPIO_WritePin>
HAL_Delay(5);
 8002ab4:	2005      	movs	r0, #5
 8002ab6:	f001 fb07 	bl	80040c8 <HAL_Delay>
send_spi1[0]=0x20; //sector erase
 8002aba:	2320      	movs	r3, #32
 8002abc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
send_spi1[1]=0; //24bit address msb
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
send_spi1[2]=0; //24bit address
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
send_spi1[3]=1; //24bit address lsb
 8002acc:	2301      	movs	r3, #1
 8002ace:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);         // enable for sector erase   , stays empty when enabled
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2110      	movs	r1, #16
 8002ad6:	489d      	ldr	r0, [pc, #628]	; (8002d4c <main+0x35c>)
 8002ad8:	f003 fa0a 	bl	8005ef0 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 4, 1000);   //erase sector ,works
 8002adc:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002ae0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ae4:	2204      	movs	r2, #4
 8002ae6:	4890      	ldr	r0, [pc, #576]	; (8002d28 <main+0x338>)
 8002ae8:	f004 fea9 	bl	800783e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002aec:	2201      	movs	r2, #1
 8002aee:	2110      	movs	r1, #16
 8002af0:	4896      	ldr	r0, [pc, #600]	; (8002d4c <main+0x35c>)
 8002af2:	f003 f9fd 	bl	8005ef0 <HAL_GPIO_WritePin>


send_spi1[0]=0x05; //read status register  if writing
 8002af6:	2305      	movs	r3, #5
 8002af8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
send_spi1[1]=0; //24bit address msb
 8002afc:	2300      	movs	r3, #0
 8002afe:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
status_reg[1]=1; // set busy on
 8002b02:	4b93      	ldr	r3, [pc, #588]	; (8002d50 <main+0x360>)
 8002b04:	2201      	movs	r2, #1
 8002b06:	705a      	strb	r2, [r3, #1]

while (status_reg[1]&1){								// check if write busy
 8002b08:	e012      	b.n	8002b30 <main+0x140>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2110      	movs	r1, #16
 8002b0e:	488f      	ldr	r0, [pc, #572]	; (8002d4c <main+0x35c>)
 8002b10:	f003 f9ee 	bl	8005ef0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, send_spi1, status_reg,2, 200);
 8002b14:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002b18:	23c8      	movs	r3, #200	; 0xc8
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	4a8c      	ldr	r2, [pc, #560]	; (8002d50 <main+0x360>)
 8002b20:	4881      	ldr	r0, [pc, #516]	; (8002d28 <main+0x338>)
 8002b22:	f005 f8d9 	bl	8007cd8 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002b26:	2201      	movs	r2, #1
 8002b28:	2110      	movs	r1, #16
 8002b2a:	4888      	ldr	r0, [pc, #544]	; (8002d4c <main+0x35c>)
 8002b2c:	f003 f9e0 	bl	8005ef0 <HAL_GPIO_WritePin>
while (status_reg[1]&1){								// check if write busy
 8002b30:	4b87      	ldr	r3, [pc, #540]	; (8002d50 <main+0x360>)
 8002b32:	785b      	ldrb	r3, [r3, #1]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1e6      	bne.n	8002b0a <main+0x11a>
}

send_spi1[0]=0x06; //enable write again
 8002b3c:	2306      	movs	r3, #6
 8002b3e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002b42:	2200      	movs	r2, #0
 8002b44:	2110      	movs	r1, #16
 8002b46:	4881      	ldr	r0, [pc, #516]	; (8002d4c <main+0x35c>)
 8002b48:	f003 f9d2 	bl	8005ef0 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8002b4c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002b50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b54:	2201      	movs	r2, #1
 8002b56:	4874      	ldr	r0, [pc, #464]	; (8002d28 <main+0x338>)
 8002b58:	f004 fe71 	bl	800783e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	2110      	movs	r1, #16
 8002b60:	487a      	ldr	r0, [pc, #488]	; (8002d4c <main+0x35c>)
 8002b62:	f003 f9c5 	bl	8005ef0 <HAL_GPIO_WritePin>
HAL_Delay(5);
 8002b66:	2005      	movs	r0, #5
 8002b68:	f001 faae 	bl	80040c8 <HAL_Delay>




//uint8_t temp_spi1[]={0x02,0,0,1,"H","E","L","L","O"," ","W","O","R","L","D",250,0,0} ; //page progrram ,24bit(address)  +1-255 byte data  (page)
uint8_t temp_spi1[]={0x02,0,0,1,128,129,130,131,132,133,134,135,136,137,138,250,0,0} ; //page progrram ,24bit(address)  +1-255 byte data  (page)
 8002b6c:	4b79      	ldr	r3, [pc, #484]	; (8002d54 <main+0x364>)
 8002b6e:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8002b72:	461d      	mov	r5, r3
 8002b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b78:	682b      	ldr	r3, [r5, #0]
 8002b7a:	8023      	strh	r3, [r4, #0]
memcpy  (send_spi1,temp_spi1, 14);   // copy new array over old
 8002b7c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002b80:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002b84:	220e      	movs	r2, #14
 8002b86:	4618      	mov	r0, r3
 8002b88:	f006 fca4 	bl	80094d4 <memcpy>

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	2110      	movs	r1, #16
 8002b90:	486e      	ldr	r0, [pc, #440]	; (8002d4c <main+0x35c>)
 8002b92:	f003 f9ad 	bl	8005ef0 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 14, 1000);  //address,page program
 8002b96:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b9e:	220e      	movs	r2, #14
 8002ba0:	4861      	ldr	r0, [pc, #388]	; (8002d28 <main+0x338>)
 8002ba2:	f004 fe4c 	bl	800783e <HAL_SPI_Transmit>

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	2110      	movs	r1, #16
 8002baa:	4868      	ldr	r0, [pc, #416]	; (8002d4c <main+0x35c>)
 8002bac:	f003 f9a0 	bl	8005ef0 <HAL_GPIO_WritePin>




HAL_Delay(25);
 8002bb0:	2019      	movs	r0, #25
 8002bb2:	f001 fa89 	bl	80040c8 <HAL_Delay>
send_spi1[0]=0x04; //disable write
 8002bb6:	2304      	movs	r3, #4
 8002bb8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	2110      	movs	r1, #16
 8002bc0:	4862      	ldr	r0, [pc, #392]	; (8002d4c <main+0x35c>)
 8002bc2:	f003 f995 	bl	8005ef0 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8002bc6:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bce:	2201      	movs	r2, #1
 8002bd0:	4855      	ldr	r0, [pc, #340]	; (8002d28 <main+0x338>)
 8002bd2:	f004 fe34 	bl	800783e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	2110      	movs	r1, #16
 8002bda:	485c      	ldr	r0, [pc, #368]	; (8002d4c <main+0x35c>)
 8002bdc:	f003 f988 	bl	8005ef0 <HAL_GPIO_WritePin>

HAL_Delay(5);
 8002be0:	2005      	movs	r0, #5
 8002be2:	f001 fa71 	bl	80040c8 <HAL_Delay>
memcpy  (send_spi1,return_spi1, 14);   // clear out
 8002be6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002bea:	220e      	movs	r2, #14
 8002bec:	495a      	ldr	r1, [pc, #360]	; (8002d58 <main+0x368>)
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f006 fc70 	bl	80094d4 <memcpy>
send_spi1[0]=0x03; //read page 1
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
send_spi1[1]=0; //24bit address msb
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
send_spi1[2]=0; //24bit address
 8002c00:	2300      	movs	r3, #0
 8002c02:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
send_spi1[3]=1; //24bit address lsb
 8002c06:	2301      	movs	r3, #1
 8002c08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // when readin low till the end
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	2110      	movs	r1, #16
 8002c10:	484e      	ldr	r0, [pc, #312]	; (8002d4c <main+0x35c>)
 8002c12:	f003 f96d 	bl	8005ef0 <HAL_GPIO_WritePin>

HAL_SPI_Transmit (&hspi1, send_spi1, 4, 100);
 8002c16:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002c1a:	2364      	movs	r3, #100	; 0x64
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	4842      	ldr	r0, [pc, #264]	; (8002d28 <main+0x338>)
 8002c20:	f004 fe0d 	bl	800783e <HAL_SPI_Transmit>
HAL_SPI_Receive (&hspi1, return_spi1, 10, 100);   // works fine
 8002c24:	2364      	movs	r3, #100	; 0x64
 8002c26:	220a      	movs	r2, #10
 8002c28:	494b      	ldr	r1, [pc, #300]	; (8002d58 <main+0x368>)
 8002c2a:	483f      	ldr	r0, [pc, #252]	; (8002d28 <main+0x338>)
 8002c2c:	f004 ff43 	bl	8007ab6 <HAL_SPI_Receive>

//HAL_SPI_TransmitReceive(&hspi1, send_spi1, return_spi1,14, 100);  // better in case skip , 4 bytes is null then data , slow
//HAL_Delay(5);

//HAL_SPI_Receive(&hspi1, return_spi1, 12, 1000);  // reverse msb ?
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002c30:	2201      	movs	r2, #1
 8002c32:	2110      	movs	r1, #16
 8002c34:	4845      	ldr	r0, [pc, #276]	; (8002d4c <main+0x35c>)
 8002c36:	f003 f95b 	bl	8005ef0 <HAL_GPIO_WritePin>



HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8002c3a:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c42:	2201      	movs	r2, #1
 8002c44:	4838      	ldr	r0, [pc, #224]	; (8002d28 <main+0x338>)
 8002c46:	f004 fdfa 	bl	800783e <HAL_SPI_Transmit>

uint8_t potSource2[64];



for(i=0;i<5;i++){     // 256
 8002c4a:	4b44      	ldr	r3, [pc, #272]	; (8002d5c <main+0x36c>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	801a      	strh	r2, [r3, #0]
 8002c50:	e02f      	b.n	8002cb2 <main+0x2c2>
HAL_I2C_Mem_Read(&hi2c2, 160, 64+(i*64), 2,&potSource2, 64,1000);		// all good readin eeprom  values
 8002c52:	4b42      	ldr	r3, [pc, #264]	; (8002d5c <main+0x36c>)
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	3301      	adds	r3, #1
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	019b      	lsls	r3, r3, #6
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c62:	9302      	str	r3, [sp, #8]
 8002c64:	2340      	movs	r3, #64	; 0x40
 8002c66:	9301      	str	r3, [sp, #4]
 8002c68:	f107 0308 	add.w	r3, r7, #8
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	2302      	movs	r3, #2
 8002c70:	21a0      	movs	r1, #160	; 0xa0
 8002c72:	4834      	ldr	r0, [pc, #208]	; (8002d44 <main+0x354>)
 8002c74:	f003 fb94 	bl	80063a0 <HAL_I2C_Mem_Read>

memcpy (potSource+(i*64),potSource2,sizeof(potSource2));   //this works  ok now
 8002c78:	4b38      	ldr	r3, [pc, #224]	; (8002d5c <main+0x36c>)
 8002c7a:	881b      	ldrh	r3, [r3, #0]
 8002c7c:	019b      	lsls	r3, r3, #6
 8002c7e:	461a      	mov	r2, r3
 8002c80:	4b37      	ldr	r3, [pc, #220]	; (8002d60 <main+0x370>)
 8002c82:	4413      	add	r3, r2
 8002c84:	f107 0408 	add.w	r4, r7, #8
 8002c88:	469c      	mov	ip, r3
 8002c8a:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8002c8e:	4665      	mov	r5, ip
 8002c90:	4626      	mov	r6, r4
 8002c92:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002c94:	6028      	str	r0, [r5, #0]
 8002c96:	6069      	str	r1, [r5, #4]
 8002c98:	60aa      	str	r2, [r5, #8]
 8002c9a:	60eb      	str	r3, [r5, #12]
 8002c9c:	3410      	adds	r4, #16
 8002c9e:	f10c 0c10 	add.w	ip, ip, #16
 8002ca2:	4574      	cmp	r4, lr
 8002ca4:	d1f3      	bne.n	8002c8e <main+0x29e>
for(i=0;i<5;i++){     // 256
 8002ca6:	4b2d      	ldr	r3, [pc, #180]	; (8002d5c <main+0x36c>)
 8002ca8:	881b      	ldrh	r3, [r3, #0]
 8002caa:	3301      	adds	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	4b2b      	ldr	r3, [pc, #172]	; (8002d5c <main+0x36c>)
 8002cb0:	801a      	strh	r2, [r3, #0]
 8002cb2:	4b2a      	ldr	r3, [pc, #168]	; (8002d5c <main+0x36c>)
 8002cb4:	881b      	ldrh	r3, [r3, #0]
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d9cb      	bls.n	8002c52 <main+0x262>


}

for(i=0;i<1024;i++){
 8002cba:	4b28      	ldr	r3, [pc, #160]	; (8002d5c <main+0x36c>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	801a      	strh	r2, [r3, #0]
 8002cc0:	e024      	b.n	8002d0c <main+0x31c>
//	gfx_ram[i]=gfx_char[((i>>5)&7)+((i>>8)<<3)]; // test input fill  8*128 v+h just normal characters
	gfx_ram[i&63] [i>>6]  =gfx_char[8+(i&7)+(((i>>3)*8)&63)];
 8002cc2:	4b26      	ldr	r3, [pc, #152]	; (8002d5c <main+0x36c>)
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	f103 0208 	add.w	r2, r3, #8
 8002cce:	4b23      	ldr	r3, [pc, #140]	; (8002d5c <main+0x36c>)
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	08db      	lsrs	r3, r3, #3
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cdc:	441a      	add	r2, r3
 8002cde:	4b1f      	ldr	r3, [pc, #124]	; (8002d5c <main+0x36c>)
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ce6:	491d      	ldr	r1, [pc, #116]	; (8002d5c <main+0x36c>)
 8002ce8:	8809      	ldrh	r1, [r1, #0]
 8002cea:	0989      	lsrs	r1, r1, #6
 8002cec:	b289      	uxth	r1, r1
 8002cee:	4608      	mov	r0, r1
 8002cf0:	491c      	ldr	r1, [pc, #112]	; (8002d64 <main+0x374>)
 8002cf2:	5c89      	ldrb	r1, [r1, r2]
 8002cf4:	4a1c      	ldr	r2, [pc, #112]	; (8002d68 <main+0x378>)
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	4413      	add	r3, r2
 8002cfa:	4403      	add	r3, r0
 8002cfc:	460a      	mov	r2, r1
 8002cfe:	701a      	strb	r2, [r3, #0]
for(i=0;i<1024;i++){
 8002d00:	4b16      	ldr	r3, [pc, #88]	; (8002d5c <main+0x36c>)
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	3301      	adds	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	4b14      	ldr	r3, [pc, #80]	; (8002d5c <main+0x36c>)
 8002d0a:	801a      	strh	r2, [r3, #0]
 8002d0c:	4b13      	ldr	r3, [pc, #76]	; (8002d5c <main+0x36c>)
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d14:	d3d5      	bcc.n	8002cc2 <main+0x2d2>
//gfx_ram[i&63] [i>>6]  =250;
}



for(i=0;i<260;i++){			// write potvalues ,for display
 8002d16:	4b11      	ldr	r3, [pc, #68]	; (8002d5c <main+0x36c>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	801a      	strh	r2, [r3, #0]
 8002d1c:	e037      	b.n	8002d8e <main+0x39e>
 8002d1e:	bf00      	nop
 8002d20:	0800d2f0 	.word	0x0800d2f0
 8002d24:	20003ab0 	.word	0x20003ab0
 8002d28:	20003a58 	.word	0x20003a58
 8002d2c:	20003b50 	.word	0x20003b50
 8002d30:	40000400 	.word	0x40000400
 8002d34:	20003b08 	.word	0x20003b08
 8002d38:	20003b98 	.word	0x20003b98
 8002d3c:	2000395c 	.word	0x2000395c
 8002d40:	200013d0 	.word	0x200013d0
 8002d44:	20003a04 	.word	0x20003a04
 8002d48:	08009808 	.word	0x08009808
 8002d4c:	40020000 	.word	0x40020000
 8002d50:	20000214 	.word	0x20000214
 8002d54:	08009810 	.word	0x08009810
 8002d58:	20002d14 	.word	0x20002d14
 8002d5c:	20000bc0 	.word	0x20000bc0
 8002d60:	20000a04 	.word	0x20000a04
 8002d64:	200002ec 	.word	0x200002ec
 8002d68:	200024cc 	.word	0x200024cc
	potValues[i]=potSource[i]>>4;
 8002d6c:	4b8c      	ldr	r3, [pc, #560]	; (8002fa0 <main+0x5b0>)
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	461a      	mov	r2, r3
 8002d72:	4b8c      	ldr	r3, [pc, #560]	; (8002fa4 <main+0x5b4>)
 8002d74:	5c9b      	ldrb	r3, [r3, r2]
 8002d76:	4a8a      	ldr	r2, [pc, #552]	; (8002fa0 <main+0x5b0>)
 8002d78:	8812      	ldrh	r2, [r2, #0]
 8002d7a:	091b      	lsrs	r3, r3, #4
 8002d7c:	b2d9      	uxtb	r1, r3
 8002d7e:	4b8a      	ldr	r3, [pc, #552]	; (8002fa8 <main+0x5b8>)
 8002d80:	5499      	strb	r1, [r3, r2]
for(i=0;i<260;i++){			// write potvalues ,for display
 8002d82:	4b87      	ldr	r3, [pc, #540]	; (8002fa0 <main+0x5b0>)
 8002d84:	881b      	ldrh	r3, [r3, #0]
 8002d86:	3301      	adds	r3, #1
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	4b85      	ldr	r3, [pc, #532]	; (8002fa0 <main+0x5b0>)
 8002d8c:	801a      	strh	r2, [r3, #0]
 8002d8e:	4b84      	ldr	r3, [pc, #528]	; (8002fa0 <main+0x5b0>)
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d96:	d3e9      	bcc.n	8002d6c <main+0x37c>
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////// variable fill

memcpy(&seq,potSource,46 );  // load from potSource
 8002d98:	4a84      	ldr	r2, [pc, #528]	; (8002fac <main+0x5bc>)
 8002d9a:	4b82      	ldr	r3, [pc, #520]	; (8002fa4 <main+0x5b4>)
 8002d9c:	4614      	mov	r4, r2
 8002d9e:	461d      	mov	r5, r3
 8002da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002da4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002da8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002dac:	c407      	stmia	r4!, {r0, r1, r2}
 8002dae:	8023      	strh	r3, [r4, #0]


for(i=0;i<10;i++){
 8002db0:	4b7b      	ldr	r3, [pc, #492]	; (8002fa0 <main+0x5b0>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	801a      	strh	r2, [r3, #0]
 8002db6:	e047      	b.n	8002e48 <main+0x458>
	if (i<8){    memcpy(&note[i],potSource+46+(i*14),14 );}  //grab note settings ,112 total , works ok
 8002db8:	4b79      	ldr	r3, [pc, #484]	; (8002fa0 <main+0x5b0>)
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	2b07      	cmp	r3, #7
 8002dbe:	d812      	bhi.n	8002de6 <main+0x3f6>
 8002dc0:	4b77      	ldr	r3, [pc, #476]	; (8002fa0 <main+0x5b0>)
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	4a7a      	ldr	r2, [pc, #488]	; (8002fb0 <main+0x5c0>)
 8002dc8:	1898      	adds	r0, r3, r2
 8002dca:	4b75      	ldr	r3, [pc, #468]	; (8002fa0 <main+0x5b0>)
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	1a9b      	subs	r3, r3, r2
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	332e      	adds	r3, #46	; 0x2e
 8002dda:	4a72      	ldr	r2, [pc, #456]	; (8002fa4 <main+0x5b4>)
 8002ddc:	4413      	add	r3, r2
 8002dde:	220e      	movs	r2, #14
 8002de0:	4619      	mov	r1, r3
 8002de2:	f006 fb77 	bl	80094d4 <memcpy>

	memcpy(&LFO[i],potSource+158+(i*5),5 );  // + 50
 8002de6:	4b6e      	ldr	r3, [pc, #440]	; (8002fa0 <main+0x5b0>)
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	231a      	movs	r3, #26
 8002dee:	fb02 f303 	mul.w	r3, r2, r3
 8002df2:	4a70      	ldr	r2, [pc, #448]	; (8002fb4 <main+0x5c4>)
 8002df4:	1898      	adds	r0, r3, r2
 8002df6:	4b6a      	ldr	r3, [pc, #424]	; (8002fa0 <main+0x5b0>)
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	339e      	adds	r3, #158	; 0x9e
 8002e04:	4a67      	ldr	r2, [pc, #412]	; (8002fa4 <main+0x5b4>)
 8002e06:	4413      	add	r3, r2
 8002e08:	2205      	movs	r2, #5
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	f006 fb62 	bl	80094d4 <memcpy>
	memcpy(&ADSR[i],potSource+208+(i*5),5 );  // +50  ,
 8002e10:	4b63      	ldr	r3, [pc, #396]	; (8002fa0 <main+0x5b0>)
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	461a      	mov	r2, r3
 8002e16:	f44f 7307 	mov.w	r3, #540	; 0x21c
 8002e1a:	fb02 f303 	mul.w	r3, r2, r3
 8002e1e:	4a66      	ldr	r2, [pc, #408]	; (8002fb8 <main+0x5c8>)
 8002e20:	1898      	adds	r0, r3, r2
 8002e22:	4b5f      	ldr	r3, [pc, #380]	; (8002fa0 <main+0x5b0>)
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	33d0      	adds	r3, #208	; 0xd0
 8002e30:	4a5c      	ldr	r2, [pc, #368]	; (8002fa4 <main+0x5b4>)
 8002e32:	4413      	add	r3, r2
 8002e34:	2205      	movs	r2, #5
 8002e36:	4619      	mov	r1, r3
 8002e38:	f006 fb4c 	bl	80094d4 <memcpy>
for(i=0;i<10;i++){
 8002e3c:	4b58      	ldr	r3, [pc, #352]	; (8002fa0 <main+0x5b0>)
 8002e3e:	881b      	ldrh	r3, [r3, #0]
 8002e40:	3301      	adds	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	4b56      	ldr	r3, [pc, #344]	; (8002fa0 <main+0x5b0>)
 8002e46:	801a      	strh	r2, [r3, #0]
 8002e48:	4b55      	ldr	r3, [pc, #340]	; (8002fa0 <main+0x5b0>)
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	2b09      	cmp	r3, #9
 8002e4e:	d9b3      	bls.n	8002db8 <main+0x3c8>




float tempo_hold;  // calculate tempo look up
for (i=0;i<161;i++) {
 8002e50:	4b53      	ldr	r3, [pc, #332]	; (8002fa0 <main+0x5b0>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	801a      	strh	r2, [r3, #0]
 8002e56:	e03d      	b.n	8002ed4 <main+0x4e4>

tempo_hold=(i+180)*0.0166666666;
 8002e58:	4b51      	ldr	r3, [pc, #324]	; (8002fa0 <main+0x5b0>)
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	33b4      	adds	r3, #180	; 0xb4
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fd fc36 	bl	80006d0 <__aeabi_i2d>
 8002e64:	a34a      	add	r3, pc, #296	; (adr r3, 8002f90 <main+0x5a0>)
 8002e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6a:	f7fd f9b5 	bl	80001d8 <__aeabi_dmul>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4610      	mov	r0, r2
 8002e74:	4619      	mov	r1, r3
 8002e76:	f7fd fc95 	bl	80007a4 <__aeabi_d2f>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	667b      	str	r3, [r7, #100]	; 0x64

tempo_hold=	1/tempo_hold;
 8002e7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e82:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002e86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e8a:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
//tempo_hold=	tempo_hold*2187.6*4;      // change for the sake of note length
tempo_hold=	tempo_hold*2187.6*1;      // change for the sake of note length
 8002e8e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002e90:	f7fd fc30 	bl	80006f4 <__aeabi_f2d>
 8002e94:	a340      	add	r3, pc, #256	; (adr r3, 8002f98 <main+0x5a8>)
 8002e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9a:	f7fd f99d 	bl	80001d8 <__aeabi_dmul>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4610      	mov	r0, r2
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	f7fd fc7d 	bl	80007a4 <__aeabi_d2f>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	667b      	str	r3, [r7, #100]	; 0x64
tempo_lut[i]=tempo_hold;
 8002eae:	4b3c      	ldr	r3, [pc, #240]	; (8002fa0 <main+0x5b0>)
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002eb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ebc:	ee17 3a90 	vmov	r3, s15
 8002ec0:	b299      	uxth	r1, r3
 8002ec2:	4b3e      	ldr	r3, [pc, #248]	; (8002fbc <main+0x5cc>)
 8002ec4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
for (i=0;i<161;i++) {
 8002ec8:	4b35      	ldr	r3, [pc, #212]	; (8002fa0 <main+0x5b0>)
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	4b33      	ldr	r3, [pc, #204]	; (8002fa0 <main+0x5b0>)
 8002ed2:	801a      	strh	r2, [r3, #0]
 8002ed4:	4b32      	ldr	r3, [pc, #200]	; (8002fa0 <main+0x5b0>)
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	2ba0      	cmp	r3, #160	; 0xa0
 8002eda:	d9bd      	bls.n	8002e58 <main+0x468>
}
isrMask=571; // def tempo 571=180bpm , 20 ms /isrcount
 8002edc:	4b38      	ldr	r3, [pc, #224]	; (8002fc0 <main+0x5d0>)
 8002ede:	f240 223b 	movw	r2, #571	; 0x23b
 8002ee2:	801a      	strh	r2, [r3, #0]

noteTiming=24;
 8002ee4:	4b37      	ldr	r3, [pc, #220]	; (8002fc4 <main+0x5d4>)
 8002ee6:	2218      	movs	r2, #24
 8002ee8:	701a      	strb	r2, [r3, #0]
for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8002eea:	4b2d      	ldr	r3, [pc, #180]	; (8002fa0 <main+0x5b0>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	801a      	strh	r2, [r3, #0]
 8002ef0:	e00b      	b.n	8002f0a <main+0x51a>
	spell[i]=67;
 8002ef2:	4b2b      	ldr	r3, [pc, #172]	; (8002fa0 <main+0x5b0>)
 8002ef4:	881b      	ldrh	r3, [r3, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	4b33      	ldr	r3, [pc, #204]	; (8002fc8 <main+0x5d8>)
 8002efa:	2143      	movs	r1, #67	; 0x43
 8002efc:	5499      	strb	r1, [r3, r2]
for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8002efe:	4b28      	ldr	r3, [pc, #160]	; (8002fa0 <main+0x5b0>)
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	3301      	adds	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	4b26      	ldr	r3, [pc, #152]	; (8002fa0 <main+0x5b0>)
 8002f08:	801a      	strh	r2, [r3, #0]
 8002f0a:	4b25      	ldr	r3, [pc, #148]	; (8002fa0 <main+0x5b0>)
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002f12:	d3ee      	bcc.n	8002ef2 <main+0x502>

}

display_fill();
 8002f14:	f7fe f980 	bl	8001218 <display_fill>
// build display, enc_lut2, works good

for (i=0;i<512;i++)	{gfx_char[i]=gfx_char[i];
 8002f18:	4b21      	ldr	r3, [pc, #132]	; (8002fa0 <main+0x5b0>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	801a      	strh	r2, [r3, #0]
 8002f1e:	e00f      	b.n	8002f40 <main+0x550>
 8002f20:	4b1f      	ldr	r3, [pc, #124]	; (8002fa0 <main+0x5b0>)
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	4619      	mov	r1, r3
 8002f26:	4b1e      	ldr	r3, [pc, #120]	; (8002fa0 <main+0x5b0>)
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	4b27      	ldr	r3, [pc, #156]	; (8002fcc <main+0x5dc>)
 8002f2e:	5c59      	ldrb	r1, [r3, r1]
 8002f30:	4b26      	ldr	r3, [pc, #152]	; (8002fcc <main+0x5dc>)
 8002f32:	5499      	strb	r1, [r3, r2]
 8002f34:	4b1a      	ldr	r3, [pc, #104]	; (8002fa0 <main+0x5b0>)
 8002f36:	881b      	ldrh	r3, [r3, #0]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	4b18      	ldr	r3, [pc, #96]	; (8002fa0 <main+0x5b0>)
 8002f3e:	801a      	strh	r2, [r3, #0]
 8002f40:	4b17      	ldr	r3, [pc, #92]	; (8002fa0 <main+0x5b0>)
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f48:	d3ea      	bcc.n	8002f20 <main+0x530>




//   produce extra menu pages here /////////////////////////////////////////////////////////////////////////////////
uint16_t lut_temp2=0;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
uint16_t lut_temp3=0;
 8002f50:	2300      	movs	r3, #0
 8002f52:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
for  (i=0;i<390;i++){					// get a few more pages
 8002f56:	4b12      	ldr	r3, [pc, #72]	; (8002fa0 <main+0x5b0>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	801a      	strh	r2, [r3, #0]
 8002f5c:	e04c      	b.n	8002ff8 <main+0x608>

	if (disp_lut [i>>4] [i&15] <95) lut_temp2=lut_temp2+1;    // skip space or characters
 8002f5e:	4b10      	ldr	r3, [pc, #64]	; (8002fa0 <main+0x5b0>)
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	091b      	lsrs	r3, r3, #4
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	461a      	mov	r2, r3
 8002f68:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <main+0x5b0>)
 8002f6a:	881b      	ldrh	r3, [r3, #0]
 8002f6c:	f003 030f 	and.w	r3, r3, #15
 8002f70:	4917      	ldr	r1, [pc, #92]	; (8002fd0 <main+0x5e0>)
 8002f72:	0112      	lsls	r2, r2, #4
 8002f74:	4413      	add	r3, r2
 8002f76:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002f7a:	2b5e      	cmp	r3, #94	; 0x5e
 8002f7c:	d82a      	bhi.n	8002fd4 <main+0x5e4>
 8002f7e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002f82:	3301      	adds	r3, #1
 8002f84:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002f88:	e030      	b.n	8002fec <main+0x5fc>
 8002f8a:	bf00      	nop
 8002f8c:	f3af 8000 	nop.w
 8002f90:	0febdd13 	.word	0x0febdd13
 8002f94:	3f911111 	.word	0x3f911111
 8002f98:	33333333 	.word	0x33333333
 8002f9c:	40a11733 	.word	0x40a11733
 8002fa0:	20000bc0 	.word	0x20000bc0
 8002fa4:	20000a04 	.word	0x20000a04
 8002fa8:	20000884 	.word	0x20000884
 8002fac:	2000392c 	.word	0x2000392c
 8002fb0:	200038bc 	.word	0x200038bc
 8002fb4:	20002d2c 	.word	0x20002d2c
 8002fb8:	20002e30 	.word	0x20002e30
 8002fbc:	20002388 	.word	0x20002388
 8002fc0:	20000b90 	.word	0x20000b90
 8002fc4:	20000881 	.word	0x20000881
 8002fc8:	20000038 	.word	0x20000038
 8002fcc:	200002ec 	.word	0x200002ec
 8002fd0:	080098a4 	.word	0x080098a4

	else {enc2_lut[lut_temp3] =i;  lut_temp3++;}     // goes to 511
 8002fd4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002fd8:	4a84      	ldr	r2, [pc, #528]	; (80031ec <main+0x7fc>)
 8002fda:	8811      	ldrh	r1, [r2, #0]
 8002fdc:	4a84      	ldr	r2, [pc, #528]	; (80031f0 <main+0x800>)
 8002fde:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002fe2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
for  (i=0;i<390;i++){					// get a few more pages
 8002fec:	4b7f      	ldr	r3, [pc, #508]	; (80031ec <main+0x7fc>)
 8002fee:	881b      	ldrh	r3, [r3, #0]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	4b7d      	ldr	r3, [pc, #500]	; (80031ec <main+0x7fc>)
 8002ff6:	801a      	strh	r2, [r3, #0]
 8002ff8:	4b7c      	ldr	r3, [pc, #496]	; (80031ec <main+0x7fc>)
 8002ffa:	881b      	ldrh	r3, [r3, #0]
 8002ffc:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 8003000:	d3ad      	bcc.n	8002f5e <main+0x56e>
}


menuSelect=0;
 8003002:	4b7c      	ldr	r3, [pc, #496]	; (80031f4 <main+0x804>)
 8003004:	2200      	movs	r2, #0
 8003006:	701a      	strb	r2, [r3, #0]
// fill up sample
firstbarLoop=0;
 8003008:	4b7b      	ldr	r3, [pc, #492]	; (80031f8 <main+0x808>)
 800300a:	2200      	movs	r2, #0
 800300c:	701a      	strb	r2, [r3, #0]
  while (1)																																																		//   while loop , random 20+ms freeze around 0.5 sec
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_counter++ ;
 800300e:	4b7b      	ldr	r3, [pc, #492]	; (80031fc <main+0x80c>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	3301      	adds	r3, #1
 8003014:	b2da      	uxtb	r2, r3
 8003016:	4b79      	ldr	r3, [pc, #484]	; (80031fc <main+0x80c>)
 8003018:	701a      	strb	r2, [r3, #0]
	  loop_counter2++;//
 800301a:	4b79      	ldr	r3, [pc, #484]	; (8003200 <main+0x810>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	3301      	adds	r3, #1
 8003020:	4a77      	ldr	r2, [pc, #476]	; (8003200 <main+0x810>)
 8003022:	6013      	str	r3, [r2, #0]

	  // if (menu_page<320) lcd_feedback();  //curious no issues with lcd without this  , maybe spell writing

	  if 	((loop_counter2&7)==6)      {analoginputloopb();} // this is ok , plenty quick , no freeze here
 8003024:	4b76      	ldr	r3, [pc, #472]	; (8003200 <main+0x810>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	2b06      	cmp	r3, #6
 800302e:	d101      	bne.n	8003034 <main+0x644>
 8003030:	f7fd fe24 	bl	8000c7c <analoginputloopb>


if (loop_counter2==9096) {    //   4096=1min=32bytes so 4mins per 128 bank or 15 writes/hour , no freeze here
 8003034:	4b72      	ldr	r3, [pc, #456]	; (8003200 <main+0x810>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f242 3288 	movw	r2, #9096	; 0x2388
 800303c:	4293      	cmp	r3, r2
 800303e:	f040 8090 	bne.w	8003162 <main+0x772>
	  if (mem_count==255) mem_count=0; else mem_count++;  // write to first this was moved for no logical reason ?
 8003042:	4b70      	ldr	r3, [pc, #448]	; (8003204 <main+0x814>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2bff      	cmp	r3, #255	; 0xff
 8003048:	d103      	bne.n	8003052 <main+0x662>
 800304a:	4b6e      	ldr	r3, [pc, #440]	; (8003204 <main+0x814>)
 800304c:	2200      	movs	r2, #0
 800304e:	701a      	strb	r2, [r3, #0]
 8003050:	e005      	b.n	800305e <main+0x66e>
 8003052:	4b6c      	ldr	r3, [pc, #432]	; (8003204 <main+0x814>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	3301      	adds	r3, #1
 8003058:	b2da      	uxtb	r2, r3
 800305a:	4b6a      	ldr	r3, [pc, #424]	; (8003204 <main+0x814>)
 800305c:	701a      	strb	r2, [r3, #0]



	// read values from stored

memcpy(potSource,&seq,sizeof(seq)); // about 45 bytes
 800305e:	4a6a      	ldr	r2, [pc, #424]	; (8003208 <main+0x818>)
 8003060:	4b6a      	ldr	r3, [pc, #424]	; (800320c <main+0x81c>)
 8003062:	4614      	mov	r4, r2
 8003064:	461d      	mov	r5, r3
 8003066:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003068:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800306a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800306c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800306e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003072:	c407      	stmia	r4!, {r0, r1, r2}
 8003074:	8023      	strh	r3, [r4, #0]

for(i=0;i<10;i++){
 8003076:	4b5d      	ldr	r3, [pc, #372]	; (80031ec <main+0x7fc>)
 8003078:	2200      	movs	r2, #0
 800307a:	801a      	strh	r2, [r3, #0]
 800307c:	e047      	b.n	800310e <main+0x71e>
	if (i<8){    memcpy(potSource+46+(i*14),&note[i],14 );}  //grab note settings ,112 total , works
 800307e:	4b5b      	ldr	r3, [pc, #364]	; (80031ec <main+0x7fc>)
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	2b07      	cmp	r3, #7
 8003084:	d812      	bhi.n	80030ac <main+0x6bc>
 8003086:	4b59      	ldr	r3, [pc, #356]	; (80031ec <main+0x7fc>)
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	4613      	mov	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	1a9b      	subs	r3, r3, r2
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	332e      	adds	r3, #46	; 0x2e
 8003096:	4a5c      	ldr	r2, [pc, #368]	; (8003208 <main+0x818>)
 8003098:	1898      	adds	r0, r3, r2
 800309a:	4b54      	ldr	r3, [pc, #336]	; (80031ec <main+0x7fc>)
 800309c:	881b      	ldrh	r3, [r3, #0]
 800309e:	011b      	lsls	r3, r3, #4
 80030a0:	4a5b      	ldr	r2, [pc, #364]	; (8003210 <main+0x820>)
 80030a2:	4413      	add	r3, r2
 80030a4:	220e      	movs	r2, #14
 80030a6:	4619      	mov	r1, r3
 80030a8:	f006 fa14 	bl	80094d4 <memcpy>

	memcpy(potSource+158+(i*5),&LFO[i],5 );  // + 50
 80030ac:	4b4f      	ldr	r3, [pc, #316]	; (80031ec <main+0x7fc>)
 80030ae:	881b      	ldrh	r3, [r3, #0]
 80030b0:	461a      	mov	r2, r3
 80030b2:	4613      	mov	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	339e      	adds	r3, #158	; 0x9e
 80030ba:	4a53      	ldr	r2, [pc, #332]	; (8003208 <main+0x818>)
 80030bc:	1898      	adds	r0, r3, r2
 80030be:	4b4b      	ldr	r3, [pc, #300]	; (80031ec <main+0x7fc>)
 80030c0:	881b      	ldrh	r3, [r3, #0]
 80030c2:	461a      	mov	r2, r3
 80030c4:	231a      	movs	r3, #26
 80030c6:	fb02 f303 	mul.w	r3, r2, r3
 80030ca:	4a52      	ldr	r2, [pc, #328]	; (8003214 <main+0x824>)
 80030cc:	4413      	add	r3, r2
 80030ce:	2205      	movs	r2, #5
 80030d0:	4619      	mov	r1, r3
 80030d2:	f006 f9ff 	bl	80094d4 <memcpy>
	memcpy(potSource+208+(i*5),&ADSR[i],5 );  // +50  ,
 80030d6:	4b45      	ldr	r3, [pc, #276]	; (80031ec <main+0x7fc>)
 80030d8:	881b      	ldrh	r3, [r3, #0]
 80030da:	461a      	mov	r2, r3
 80030dc:	4613      	mov	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	33d0      	adds	r3, #208	; 0xd0
 80030e4:	4a48      	ldr	r2, [pc, #288]	; (8003208 <main+0x818>)
 80030e6:	1898      	adds	r0, r3, r2
 80030e8:	4b40      	ldr	r3, [pc, #256]	; (80031ec <main+0x7fc>)
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	461a      	mov	r2, r3
 80030ee:	f44f 7307 	mov.w	r3, #540	; 0x21c
 80030f2:	fb02 f303 	mul.w	r3, r2, r3
 80030f6:	4a48      	ldr	r2, [pc, #288]	; (8003218 <main+0x828>)
 80030f8:	4413      	add	r3, r2
 80030fa:	2205      	movs	r2, #5
 80030fc:	4619      	mov	r1, r3
 80030fe:	f006 f9e9 	bl	80094d4 <memcpy>
for(i=0;i<10;i++){
 8003102:	4b3a      	ldr	r3, [pc, #232]	; (80031ec <main+0x7fc>)
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	3301      	adds	r3, #1
 8003108:	b29a      	uxth	r2, r3
 800310a:	4b38      	ldr	r3, [pc, #224]	; (80031ec <main+0x7fc>)
 800310c:	801a      	strh	r2, [r3, #0]
 800310e:	4b37      	ldr	r3, [pc, #220]	; (80031ec <main+0x7fc>)
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	2b09      	cmp	r3, #9
 8003114:	d9b3      	bls.n	800307e <main+0x68e>

}	// copy vars into potSource

mem_buf=potSource[mem_count];
 8003116:	4b3b      	ldr	r3, [pc, #236]	; (8003204 <main+0x814>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	461a      	mov	r2, r3
 800311c:	4b3a      	ldr	r3, [pc, #232]	; (8003208 <main+0x818>)
 800311e:	5c9a      	ldrb	r2, [r3, r2]
 8003120:	4b3e      	ldr	r3, [pc, #248]	; (800321c <main+0x82c>)
 8003122:	701a      	strb	r2, [r3, #0]
//if (mem_buf>160) mem_buf=160;   // just in case , may be a problem

	HAL_I2C_Mem_Write(&hi2c2, 160, ((1+(mem_count>>6))<<6)+(mem_count&63), 2, &mem_buf, 1, 100);  // "&hi2c2"  actual register address
 8003124:	4b37      	ldr	r3, [pc, #220]	; (8003204 <main+0x814>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	099b      	lsrs	r3, r3, #6
 800312a:	b2db      	uxtb	r3, r3
 800312c:	b29b      	uxth	r3, r3
 800312e:	3301      	adds	r3, #1
 8003130:	b29b      	uxth	r3, r3
 8003132:	019b      	lsls	r3, r3, #6
 8003134:	b29a      	uxth	r2, r3
 8003136:	4b33      	ldr	r3, [pc, #204]	; (8003204 <main+0x814>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	b29b      	uxth	r3, r3
 800313c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003140:	b29b      	uxth	r3, r3
 8003142:	4413      	add	r3, r2
 8003144:	b29a      	uxth	r2, r3
 8003146:	2364      	movs	r3, #100	; 0x64
 8003148:	9302      	str	r3, [sp, #8]
 800314a:	2301      	movs	r3, #1
 800314c:	9301      	str	r3, [sp, #4]
 800314e:	4b33      	ldr	r3, [pc, #204]	; (800321c <main+0x82c>)
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	2302      	movs	r3, #2
 8003154:	21a0      	movs	r1, #160	; 0xa0
 8003156:	4832      	ldr	r0, [pc, #200]	; (8003220 <main+0x830>)
 8003158:	f003 f828 	bl	80061ac <HAL_I2C_Mem_Write>
	//HAL_Delay(5); // this is slow , no bueno




	loop_counter2=0; //reset
 800315c:	4b28      	ldr	r3, [pc, #160]	; (8003200 <main+0x810>)
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]

}


	  if (disp_end==1)	 {  // displaybuffer after each full screen update on spi  ,, no freezes here
 8003162:	4b30      	ldr	r3, [pc, #192]	; (8003224 <main+0x834>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d12a      	bne.n	80031c0 <main+0x7d0>

		  { if (loop_counter3)  enc2_tempc=enc2_dir; else enc2_dir=enc2_tempc; }    //hold enc till finished , this to clean up characters for now ,works ok
 800316a:	4b2f      	ldr	r3, [pc, #188]	; (8003228 <main+0x838>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d004      	beq.n	800317c <main+0x78c>
 8003172:	4b2e      	ldr	r3, [pc, #184]	; (800322c <main+0x83c>)
 8003174:	881a      	ldrh	r2, [r3, #0]
 8003176:	4b2e      	ldr	r3, [pc, #184]	; (8003230 <main+0x840>)
 8003178:	801a      	strh	r2, [r3, #0]
 800317a:	e003      	b.n	8003184 <main+0x794>
 800317c:	4b2c      	ldr	r3, [pc, #176]	; (8003230 <main+0x840>)
 800317e:	881a      	ldrh	r2, [r3, #0]
 8003180:	4b2a      	ldr	r3, [pc, #168]	; (800322c <main+0x83c>)
 8003182:	801a      	strh	r2, [r3, #0]
		  loop_counter3=!loop_counter3;  //blinker flips on each full page refresh
 8003184:	4b28      	ldr	r3, [pc, #160]	; (8003228 <main+0x838>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	bf0c      	ite	eq
 800318c:	2301      	moveq	r3, #1
 800318e:	2300      	movne	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	461a      	mov	r2, r3
 8003194:	4b24      	ldr	r3, [pc, #144]	; (8003228 <main+0x838>)
 8003196:	701a      	strb	r2, [r3, #0]

		  for (i=0;i<16;i++) {   displayBuffer();}
 8003198:	4b14      	ldr	r3, [pc, #80]	; (80031ec <main+0x7fc>)
 800319a:	2200      	movs	r2, #0
 800319c:	801a      	strh	r2, [r3, #0]
 800319e:	e007      	b.n	80031b0 <main+0x7c0>
 80031a0:	f7fe f866 	bl	8001270 <displayBuffer>
 80031a4:	4b11      	ldr	r3, [pc, #68]	; (80031ec <main+0x7fc>)
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	3301      	adds	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	4b0f      	ldr	r3, [pc, #60]	; (80031ec <main+0x7fc>)
 80031ae:	801a      	strh	r2, [r3, #0]
 80031b0:	4b0e      	ldr	r3, [pc, #56]	; (80031ec <main+0x7fc>)
 80031b2:	881b      	ldrh	r3, [r3, #0]
 80031b4:	2b0f      	cmp	r3, #15
 80031b6:	d9f3      	bls.n	80031a0 <main+0x7b0>
		  enc2_dir=enc2_tempc;
 80031b8:	4b1d      	ldr	r3, [pc, #116]	; (8003230 <main+0x840>)
 80031ba:	881a      	ldrh	r2, [r3, #0]
 80031bc:	4b1b      	ldr	r3, [pc, #108]	; (800322c <main+0x83c>)
 80031be:	801a      	strh	r2, [r3, #0]

	  }


	  if (init<6)				// after 6 its done for good   // no freeze here
 80031c0:	4b1c      	ldr	r3, [pc, #112]	; (8003234 <main+0x844>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	2b05      	cmp	r3, #5
 80031c6:	d837      	bhi.n	8003238 <main+0x848>
{
	  for (i=0;i<6;i++) {display_init();}  //1-2ms ?  change length if flickering ,maybe initial data
 80031c8:	4b08      	ldr	r3, [pc, #32]	; (80031ec <main+0x7fc>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	801a      	strh	r2, [r3, #0]
 80031ce:	e007      	b.n	80031e0 <main+0x7f0>
 80031d0:	f7fd fe7a 	bl	8000ec8 <display_init>
 80031d4:	4b05      	ldr	r3, [pc, #20]	; (80031ec <main+0x7fc>)
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	3301      	adds	r3, #1
 80031da:	b29a      	uxth	r2, r3
 80031dc:	4b03      	ldr	r3, [pc, #12]	; (80031ec <main+0x7fc>)
 80031de:	801a      	strh	r2, [r3, #0]
 80031e0:	4b02      	ldr	r3, [pc, #8]	; (80031ec <main+0x7fc>)
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	2b05      	cmp	r3, #5
 80031e6:	d9f3      	bls.n	80031d0 <main+0x7e0>
 80031e8:	e028      	b.n	800323c <main+0x84c>
 80031ea:	bf00      	nop
 80031ec:	20000bc0 	.word	0x20000bc0
 80031f0:	20000714 	.word	0x20000714
 80031f4:	20000b8e 	.word	0x20000b8e
 80031f8:	20000b92 	.word	0x20000b92
 80031fc:	20000bbc 	.word	0x20000bbc
 8003200:	2000202c 	.word	0x2000202c
 8003204:	2000202a 	.word	0x2000202a
 8003208:	20000a04 	.word	0x20000a04
 800320c:	2000392c 	.word	0x2000392c
 8003210:	200038bc 	.word	0x200038bc
 8003214:	20002d2c 	.word	0x20002d2c
 8003218:	20002e30 	.word	0x20002e30
 800321c:	20002030 	.word	0x20002030
 8003220:	20003a04 	.word	0x20003a04
 8003224:	2000290a 	.word	0x2000290a
 8003228:	2000290b 	.word	0x2000290b
 800322c:	20002012 	.word	0x20002012
 8003230:	2000290c 	.word	0x2000290c
 8003234:	20002021 	.word	0x20002021
} else {display_update(); }  // send spi line data every loop cycle , self contained, single 8pixel line 18*256steps
 8003238:	f7fd ff22 	bl	8001080 <display_update>


	  ///////////////////////////////////////////////////////////////////////////////

	  if (loop_counter == 255)	{ // grab adc readings + 3ms , 32 step  // no freeze
 800323c:	4b43      	ldr	r3, [pc, #268]	; (800334c <main+0x95c>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2bff      	cmp	r3, #255	; 0xff
 8003242:	d128      	bne.n	8003296 <main+0x8a6>



		  //HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go

		  HAL_ADCEx_InjectedStart(&hadc1) ;  // start injected mode normal conversion
 8003244:	4842      	ldr	r0, [pc, #264]	; (8003350 <main+0x960>)
 8003246:	f001 fcf5 	bl	8004c34 <HAL_ADCEx_InjectedStart>
		  uint16_t adc_temp1[4]={0,0,0,0};
 800324a:	463b      	mov	r3, r7
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	605a      	str	r2, [r3, #4]

		  HAL_ADC_PollForConversion(&hadc1,1);  // works but  slow ,blocking very slow, set quick time out
 8003252:	2101      	movs	r1, #1
 8003254:	483e      	ldr	r0, [pc, #248]	; (8003350 <main+0x960>)
 8003256:	f001 f853 	bl	8004300 <HAL_ADC_PollForConversion>

		  adc_temp1[0]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 800325a:	2101      	movs	r1, #1
 800325c:	483c      	ldr	r0, [pc, #240]	; (8003350 <main+0x960>)
 800325e:	f001 fdff 	bl	8004e60 <HAL_ADCEx_InjectedGetValue>
 8003262:	4603      	mov	r3, r0
 8003264:	b29b      	uxth	r3, r3
 8003266:	803b      	strh	r3, [r7, #0]
		  adc_temp1[1] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8003268:	2102      	movs	r1, #2
 800326a:	4839      	ldr	r0, [pc, #228]	; (8003350 <main+0x960>)
 800326c:	f001 fdf8 	bl	8004e60 <HAL_ADCEx_InjectedGetValue>
 8003270:	4603      	mov	r3, r0
 8003272:	b29b      	uxth	r3, r3
 8003274:	807b      	strh	r3, [r7, #2]
		//  adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
		  adc_values[0]=	  adc_temp1[0]>>7;
 8003276:	883b      	ldrh	r3, [r7, #0]
 8003278:	09db      	lsrs	r3, r3, #7
 800327a:	b29a      	uxth	r2, r3
 800327c:	4b35      	ldr	r3, [pc, #212]	; (8003354 <main+0x964>)
 800327e:	801a      	strh	r2, [r3, #0]
		  adc_values[1]=	  adc_temp1[1]>>7;
 8003280:	887b      	ldrh	r3, [r7, #2]
 8003282:	09db      	lsrs	r3, r3, #7
 8003284:	b29a      	uxth	r2, r3
 8003286:	4b33      	ldr	r3, [pc, #204]	; (8003354 <main+0x964>)
 8003288:	805a      	strh	r2, [r3, #2]
		//  adc_values[2]=	  adc_temp1[2]>>7;
		  HAL_ADCEx_InjectedStop(&hadc1) ;
 800328a:	4831      	ldr	r0, [pc, #196]	; (8003350 <main+0x960>)
 800328c:	f001 fd9c 	bl	8004dc8 <HAL_ADCEx_InjectedStop>


		  //HAL_ADC_Start_DMA(&hadc1, adc_source, 512);


	  	loop_counter=0;
 8003290:	4b2e      	ldr	r3, [pc, #184]	; (800334c <main+0x95c>)
 8003292:	2200      	movs	r2, #0
 8003294:	701a      	strb	r2, [r3, #0]
	  }

	  if ((seq.pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 8003296:	4b30      	ldr	r3, [pc, #192]	; (8003358 <main+0x968>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b07      	cmp	r3, #7
 800329c:	d106      	bne.n	80032ac <main+0x8bc>
 800329e:	4b2f      	ldr	r3, [pc, #188]	; (800335c <main+0x96c>)
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d102      	bne.n	80032ac <main+0x8bc>
 80032a6:	4b2d      	ldr	r3, [pc, #180]	; (800335c <main+0x96c>)
 80032a8:	2201      	movs	r2, #1
 80032aa:	801a      	strh	r2, [r3, #0]
	   if (promValue<64) promValue=promValue+1 ; else promValue=0;  // fetch eeprom   nogo
	  	  if ((promValues[promValue] ) !=(potValues[promValue]))  EEPROM.write(promValue,(potValues[promValue]));   //  not too happy can totally kill speed  will have to put elsewhere
	  	  promValues[promValue] =potValues[promValue];
	  	   */

	  	     HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,(seq.pos & 1)); // easy skip ?
 80032ac:	4b2a      	ldr	r3, [pc, #168]	; (8003358 <main+0x968>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	461a      	mov	r2, r3
 80032b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032bc:	4828      	ldr	r0, [pc, #160]	; (8003360 <main+0x970>)
 80032be:	f002 fe17 	bl	8005ef0 <HAL_GPIO_WritePin>




	  	//	adc_flag=0;
	  		if (adc_flag) {
 80032c2:	4b28      	ldr	r3, [pc, #160]	; (8003364 <main+0x974>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d03a      	beq.n	8003340 <main+0x950>
	  		HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go
 80032ca:	4821      	ldr	r0, [pc, #132]	; (8003350 <main+0x960>)
 80032cc:	f001 f994 	bl	80045f8 <HAL_ADC_Stop_DMA>
	  		HAL_ADC_Start_DMA(&hadc1, adc_source, 1024); //dma start ,needs this and adc start ,set sampling time
 80032d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032d4:	4924      	ldr	r1, [pc, #144]	; (8003368 <main+0x978>)
 80032d6:	481e      	ldr	r0, [pc, #120]	; (8003350 <main+0x960>)
 80032d8:	f001 f89e 	bl	8004418 <HAL_ADC_Start_DMA>

	  			uint16_t* click=&adc_source[0];
 80032dc:	4b22      	ldr	r3, [pc, #136]	; (8003368 <main+0x978>)
 80032de:	673b      	str	r3, [r7, #112]	; 0x70

	  			for (i=0;i<512;i++)
 80032e0:	4b22      	ldr	r3, [pc, #136]	; (800336c <main+0x97c>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	801a      	strh	r2, [r3, #0]
 80032e6:	e023      	b.n	8003330 <main+0x940>
	  			{

	  				uint16_t crap_hold=*click;
 80032e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

	  			uint16_t crap_hold1=*(++click);
 80032f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032f2:	3302      	adds	r3, #2
 80032f4:	673b      	str	r3, [r7, #112]	; 0x70
 80032f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032f8:	881b      	ldrh	r3, [r3, #0]
 80032fa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
	  		click++;
 80032fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003300:	3302      	adds	r3, #2
 8003302:	673b      	str	r3, [r7, #112]	; 0x70

	  	//			uint16_t crap_hold=adc_source[i*2];

	  				 // 				uint16_t crap_hold1=adc_source[(i*2)+1];

	  				input_holder[i] = (crap_hold+crap_hold1 )>>1;
 8003304:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8003308:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800330c:	4413      	add	r3, r2
 800330e:	1059      	asrs	r1, r3, #1
 8003310:	4b16      	ldr	r3, [pc, #88]	; (800336c <main+0x97c>)
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	461a      	mov	r2, r3
 8003316:	b289      	uxth	r1, r1
 8003318:	4b15      	ldr	r3, [pc, #84]	; (8003370 <main+0x980>)
 800331a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  				adc_flag=0;
 800331e:	4b11      	ldr	r3, [pc, #68]	; (8003364 <main+0x974>)
 8003320:	2200      	movs	r2, #0
 8003322:	701a      	strb	r2, [r3, #0]
	  			for (i=0;i<512;i++)
 8003324:	4b11      	ldr	r3, [pc, #68]	; (800336c <main+0x97c>)
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	3301      	adds	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	4b0f      	ldr	r3, [pc, #60]	; (800336c <main+0x97c>)
 800332e:	801a      	strh	r2, [r3, #0]
 8003330:	4b0e      	ldr	r3, [pc, #56]	; (800336c <main+0x97c>)
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003338:	d3d6      	bcc.n	80032e8 <main+0x8f8>
	  			}
	  		}

	while  (bank_write)                         {							// wait for adc , priority
 800333a:	e001      	b.n	8003340 <main+0x950>



		  //HAL_Delay(4);
	  		//sample_point=sample_point&768 ;
	  		sampling();
 800333c:	f7fe f954 	bl	80015e8 <sampling>
	while  (bank_write)                         {							// wait for adc , priority
 8003340:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <main+0x984>)
 8003342:	881b      	ldrh	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1f9      	bne.n	800333c <main+0x94c>
	  loop_counter++ ;
 8003348:	e661      	b.n	800300e <main+0x61e>
 800334a:	bf00      	nop
 800334c:	20000bbc 	.word	0x20000bbc
 8003350:	2000395c 	.word	0x2000395c
 8003354:	200001e0 	.word	0x200001e0
 8003358:	2000392c 	.word	0x2000392c
 800335c:	20002018 	.word	0x20002018
 8003360:	40020800 	.word	0x40020800
 8003364:	20002d10 	.word	0x20002d10
 8003368:	200013d0 	.word	0x200013d0
 800336c:	20000bc0 	.word	0x20000bc0
 8003370:	20002910 	.word	0x20002910
 8003374:	200001ea 	.word	0x200001ea

08003378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b094      	sub	sp, #80	; 0x50
 800337c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800337e:	f107 0320 	add.w	r3, r7, #32
 8003382:	2230      	movs	r2, #48	; 0x30
 8003384:	2100      	movs	r1, #0
 8003386:	4618      	mov	r0, r3
 8003388:	f006 f8b2 	bl	80094f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800338c:	f107 030c 	add.w	r3, r7, #12
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	605a      	str	r2, [r3, #4]
 8003396:	609a      	str	r2, [r3, #8]
 8003398:	60da      	str	r2, [r3, #12]
 800339a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800339c:	2300      	movs	r3, #0
 800339e:	60bb      	str	r3, [r7, #8]
 80033a0:	4b28      	ldr	r3, [pc, #160]	; (8003444 <SystemClock_Config+0xcc>)
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	4a27      	ldr	r2, [pc, #156]	; (8003444 <SystemClock_Config+0xcc>)
 80033a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033aa:	6413      	str	r3, [r2, #64]	; 0x40
 80033ac:	4b25      	ldr	r3, [pc, #148]	; (8003444 <SystemClock_Config+0xcc>)
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b4:	60bb      	str	r3, [r7, #8]
 80033b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80033b8:	2300      	movs	r3, #0
 80033ba:	607b      	str	r3, [r7, #4]
 80033bc:	4b22      	ldr	r3, [pc, #136]	; (8003448 <SystemClock_Config+0xd0>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a21      	ldr	r2, [pc, #132]	; (8003448 <SystemClock_Config+0xd0>)
 80033c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	4b1f      	ldr	r3, [pc, #124]	; (8003448 <SystemClock_Config+0xd0>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80033d0:	607b      	str	r3, [r7, #4]
 80033d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80033d4:	2302      	movs	r3, #2
 80033d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80033d8:	2301      	movs	r3, #1
 80033da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80033dc:	2310      	movs	r3, #16
 80033de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033e0:	2302      	movs	r3, #2
 80033e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80033e4:	2300      	movs	r3, #0
 80033e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80033e8:	2308      	movs	r3, #8
 80033ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80033ec:	2364      	movs	r3, #100	; 0x64
 80033ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80033f0:	2302      	movs	r3, #2
 80033f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80033f4:	2304      	movs	r3, #4
 80033f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033f8:	f107 0320 	add.w	r3, r7, #32
 80033fc:	4618      	mov	r0, r3
 80033fe:	f003 fd51 	bl	8006ea4 <HAL_RCC_OscConfig>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003408:	f000 faf6 	bl	80039f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800340c:	230f      	movs	r3, #15
 800340e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003410:	2302      	movs	r3, #2
 8003412:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003414:	2300      	movs	r3, #0
 8003416:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800341c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800341e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003422:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003424:	f107 030c 	add.w	r3, r7, #12
 8003428:	2103      	movs	r1, #3
 800342a:	4618      	mov	r0, r3
 800342c:	f003 ffb2 	bl	8007394 <HAL_RCC_ClockConfig>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003436:	f000 fadf 	bl	80039f8 <Error_Handler>
  }
}
 800343a:	bf00      	nop
 800343c:	3750      	adds	r7, #80	; 0x50
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40023800 	.word	0x40023800
 8003448:	40007000 	.word	0x40007000

0800344c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b08c      	sub	sp, #48	; 0x30
 8003450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003452:	f107 0320 	add.w	r3, r7, #32
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	605a      	str	r2, [r3, #4]
 800345c:	609a      	str	r2, [r3, #8]
 800345e:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8003460:	463b      	mov	r3, r7
 8003462:	2220      	movs	r2, #32
 8003464:	2100      	movs	r1, #0
 8003466:	4618      	mov	r0, r3
 8003468:	f006 f842 	bl	80094f0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800346c:	4b36      	ldr	r3, [pc, #216]	; (8003548 <MX_ADC1_Init+0xfc>)
 800346e:	4a37      	ldr	r2, [pc, #220]	; (800354c <MX_ADC1_Init+0x100>)
 8003470:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003472:	4b35      	ldr	r3, [pc, #212]	; (8003548 <MX_ADC1_Init+0xfc>)
 8003474:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003478:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800347a:	4b33      	ldr	r3, [pc, #204]	; (8003548 <MX_ADC1_Init+0xfc>)
 800347c:	2200      	movs	r2, #0
 800347e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003480:	4b31      	ldr	r3, [pc, #196]	; (8003548 <MX_ADC1_Init+0xfc>)
 8003482:	2201      	movs	r2, #1
 8003484:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003486:	4b30      	ldr	r3, [pc, #192]	; (8003548 <MX_ADC1_Init+0xfc>)
 8003488:	2201      	movs	r2, #1
 800348a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800348c:	4b2e      	ldr	r3, [pc, #184]	; (8003548 <MX_ADC1_Init+0xfc>)
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003494:	4b2c      	ldr	r3, [pc, #176]	; (8003548 <MX_ADC1_Init+0xfc>)
 8003496:	2200      	movs	r2, #0
 8003498:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800349a:	4b2b      	ldr	r3, [pc, #172]	; (8003548 <MX_ADC1_Init+0xfc>)
 800349c:	4a2c      	ldr	r2, [pc, #176]	; (8003550 <MX_ADC1_Init+0x104>)
 800349e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80034a0:	4b29      	ldr	r3, [pc, #164]	; (8003548 <MX_ADC1_Init+0xfc>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80034a6:	4b28      	ldr	r3, [pc, #160]	; (8003548 <MX_ADC1_Init+0xfc>)
 80034a8:	2201      	movs	r2, #1
 80034aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80034ac:	4b26      	ldr	r3, [pc, #152]	; (8003548 <MX_ADC1_Init+0xfc>)
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80034b4:	4b24      	ldr	r3, [pc, #144]	; (8003548 <MX_ADC1_Init+0xfc>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80034ba:	4823      	ldr	r0, [pc, #140]	; (8003548 <MX_ADC1_Init+0xfc>)
 80034bc:	f000 fe28 	bl	8004110 <HAL_ADC_Init>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 80034c6:	f000 fa97 	bl	80039f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80034ca:	2309      	movs	r3, #9
 80034cc:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 80034ce:	2301      	movs	r3, #1
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80034d2:	2306      	movs	r3, #6
 80034d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034d6:	f107 0320 	add.w	r3, r7, #32
 80034da:	4619      	mov	r1, r3
 80034dc:	481a      	ldr	r0, [pc, #104]	; (8003548 <MX_ADC1_Init+0xfc>)
 80034de:	f001 f8f9 	bl	80046d4 <HAL_ADC_ConfigChannel>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80034e8:	f000 fa86 	bl	80039f8 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 80034ec:	2300      	movs	r3, #0
 80034ee:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 80034f0:	2301      	movs	r3, #1
 80034f2:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 2;
 80034f4:	2302      	movs	r3, #2
 80034f6:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_56CYCLES;
 80034f8:	2303      	movs	r3, #3
 80034fa:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 80034fc:	2300      	movs	r3, #0
 80034fe:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8003500:	4b14      	ldr	r3, [pc, #80]	; (8003554 <MX_ADC1_Init+0x108>)
 8003502:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8003504:	2300      	movs	r3, #0
 8003506:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8003508:	2300      	movs	r3, #0
 800350a:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800350c:	2300      	movs	r3, #0
 800350e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8003510:	463b      	mov	r3, r7
 8003512:	4619      	mov	r1, r3
 8003514:	480c      	ldr	r0, [pc, #48]	; (8003548 <MX_ADC1_Init+0xfc>)
 8003516:	f001 fcdb 	bl	8004ed0 <HAL_ADCEx_InjectedConfigChannel>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8003520:	f000 fa6a 	bl	80039f8 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8003524:	2302      	movs	r3, #2
 8003526:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8003528:	2302      	movs	r3, #2
 800352a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800352c:	463b      	mov	r3, r7
 800352e:	4619      	mov	r1, r3
 8003530:	4805      	ldr	r0, [pc, #20]	; (8003548 <MX_ADC1_Init+0xfc>)
 8003532:	f001 fccd 	bl	8004ed0 <HAL_ADCEx_InjectedConfigChannel>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 800353c:	f000 fa5c 	bl	80039f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003540:	bf00      	nop
 8003542:	3730      	adds	r7, #48	; 0x30
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	2000395c 	.word	0x2000395c
 800354c:	40012000 	.word	0x40012000
 8003550:	0f000001 	.word	0x0f000001
 8003554:	000f0001 	.word	0x000f0001

08003558 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800355c:	4b12      	ldr	r3, [pc, #72]	; (80035a8 <MX_I2C2_Init+0x50>)
 800355e:	4a13      	ldr	r2, [pc, #76]	; (80035ac <MX_I2C2_Init+0x54>)
 8003560:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003562:	4b11      	ldr	r3, [pc, #68]	; (80035a8 <MX_I2C2_Init+0x50>)
 8003564:	4a12      	ldr	r2, [pc, #72]	; (80035b0 <MX_I2C2_Init+0x58>)
 8003566:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003568:	4b0f      	ldr	r3, [pc, #60]	; (80035a8 <MX_I2C2_Init+0x50>)
 800356a:	2200      	movs	r2, #0
 800356c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800356e:	4b0e      	ldr	r3, [pc, #56]	; (80035a8 <MX_I2C2_Init+0x50>)
 8003570:	2200      	movs	r2, #0
 8003572:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003574:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <MX_I2C2_Init+0x50>)
 8003576:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800357a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800357c:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <MX_I2C2_Init+0x50>)
 800357e:	2200      	movs	r2, #0
 8003580:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003582:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <MX_I2C2_Init+0x50>)
 8003584:	2200      	movs	r2, #0
 8003586:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003588:	4b07      	ldr	r3, [pc, #28]	; (80035a8 <MX_I2C2_Init+0x50>)
 800358a:	2200      	movs	r2, #0
 800358c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800358e:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <MX_I2C2_Init+0x50>)
 8003590:	2200      	movs	r2, #0
 8003592:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003594:	4804      	ldr	r0, [pc, #16]	; (80035a8 <MX_I2C2_Init+0x50>)
 8003596:	f002 fcc5 	bl	8005f24 <HAL_I2C_Init>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80035a0:	f000 fa2a 	bl	80039f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80035a4:	bf00      	nop
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	20003a04 	.word	0x20003a04
 80035ac:	40005800 	.word	0x40005800
 80035b0:	00061a80 	.word	0x00061a80

080035b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80035b8:	4b17      	ldr	r3, [pc, #92]	; (8003618 <MX_SPI1_Init+0x64>)
 80035ba:	4a18      	ldr	r2, [pc, #96]	; (800361c <MX_SPI1_Init+0x68>)
 80035bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80035be:	4b16      	ldr	r3, [pc, #88]	; (8003618 <MX_SPI1_Init+0x64>)
 80035c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80035c6:	4b14      	ldr	r3, [pc, #80]	; (8003618 <MX_SPI1_Init+0x64>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80035cc:	4b12      	ldr	r3, [pc, #72]	; (8003618 <MX_SPI1_Init+0x64>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80035d2:	4b11      	ldr	r3, [pc, #68]	; (8003618 <MX_SPI1_Init+0x64>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80035d8:	4b0f      	ldr	r3, [pc, #60]	; (8003618 <MX_SPI1_Init+0x64>)
 80035da:	2200      	movs	r2, #0
 80035dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80035de:	4b0e      	ldr	r3, [pc, #56]	; (8003618 <MX_SPI1_Init+0x64>)
 80035e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80035e6:	4b0c      	ldr	r3, [pc, #48]	; (8003618 <MX_SPI1_Init+0x64>)
 80035e8:	2208      	movs	r2, #8
 80035ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035ec:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <MX_SPI1_Init+0x64>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80035f2:	4b09      	ldr	r3, [pc, #36]	; (8003618 <MX_SPI1_Init+0x64>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035f8:	4b07      	ldr	r3, [pc, #28]	; (8003618 <MX_SPI1_Init+0x64>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80035fe:	4b06      	ldr	r3, [pc, #24]	; (8003618 <MX_SPI1_Init+0x64>)
 8003600:	220a      	movs	r2, #10
 8003602:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003604:	4804      	ldr	r0, [pc, #16]	; (8003618 <MX_SPI1_Init+0x64>)
 8003606:	f004 f891 	bl	800772c <HAL_SPI_Init>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003610:	f000 f9f2 	bl	80039f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003614:	bf00      	nop
 8003616:	bd80      	pop	{r7, pc}
 8003618:	20003a58 	.word	0x20003a58
 800361c:	40013000 	.word	0x40013000

08003620 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003624:	4b17      	ldr	r3, [pc, #92]	; (8003684 <MX_SPI2_Init+0x64>)
 8003626:	4a18      	ldr	r2, [pc, #96]	; (8003688 <MX_SPI2_Init+0x68>)
 8003628:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800362a:	4b16      	ldr	r3, [pc, #88]	; (8003684 <MX_SPI2_Init+0x64>)
 800362c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003630:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003632:	4b14      	ldr	r3, [pc, #80]	; (8003684 <MX_SPI2_Init+0x64>)
 8003634:	2200      	movs	r2, #0
 8003636:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003638:	4b12      	ldr	r3, [pc, #72]	; (8003684 <MX_SPI2_Init+0x64>)
 800363a:	2200      	movs	r2, #0
 800363c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800363e:	4b11      	ldr	r3, [pc, #68]	; (8003684 <MX_SPI2_Init+0x64>)
 8003640:	2200      	movs	r2, #0
 8003642:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003644:	4b0f      	ldr	r3, [pc, #60]	; (8003684 <MX_SPI2_Init+0x64>)
 8003646:	2200      	movs	r2, #0
 8003648:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800364a:	4b0e      	ldr	r3, [pc, #56]	; (8003684 <MX_SPI2_Init+0x64>)
 800364c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003650:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003652:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <MX_SPI2_Init+0x64>)
 8003654:	2230      	movs	r2, #48	; 0x30
 8003656:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003658:	4b0a      	ldr	r3, [pc, #40]	; (8003684 <MX_SPI2_Init+0x64>)
 800365a:	2200      	movs	r2, #0
 800365c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800365e:	4b09      	ldr	r3, [pc, #36]	; (8003684 <MX_SPI2_Init+0x64>)
 8003660:	2200      	movs	r2, #0
 8003662:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003664:	4b07      	ldr	r3, [pc, #28]	; (8003684 <MX_SPI2_Init+0x64>)
 8003666:	2200      	movs	r2, #0
 8003668:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800366a:	4b06      	ldr	r3, [pc, #24]	; (8003684 <MX_SPI2_Init+0x64>)
 800366c:	220a      	movs	r2, #10
 800366e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003670:	4804      	ldr	r0, [pc, #16]	; (8003684 <MX_SPI2_Init+0x64>)
 8003672:	f004 f85b 	bl	800772c <HAL_SPI_Init>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800367c:	f000 f9bc 	bl	80039f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003680:	bf00      	nop
 8003682:	bd80      	pop	{r7, pc}
 8003684:	20003ab0 	.word	0x20003ab0
 8003688:	40003800 	.word	0x40003800

0800368c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08c      	sub	sp, #48	; 0x30
 8003690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003692:	f107 030c 	add.w	r3, r7, #12
 8003696:	2224      	movs	r2, #36	; 0x24
 8003698:	2100      	movs	r1, #0
 800369a:	4618      	mov	r0, r3
 800369c:	f005 ff28 	bl	80094f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036a0:	1d3b      	adds	r3, r7, #4
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80036a8:	4b21      	ldr	r3, [pc, #132]	; (8003730 <MX_TIM2_Init+0xa4>)
 80036aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80036b0:	4b1f      	ldr	r3, [pc, #124]	; (8003730 <MX_TIM2_Init+0xa4>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036b6:	4b1e      	ldr	r3, [pc, #120]	; (8003730 <MX_TIM2_Init+0xa4>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80036bc:	4b1c      	ldr	r3, [pc, #112]	; (8003730 <MX_TIM2_Init+0xa4>)
 80036be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80036c4:	4b1a      	ldr	r3, [pc, #104]	; (8003730 <MX_TIM2_Init+0xa4>)
 80036c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036cc:	4b18      	ldr	r3, [pc, #96]	; (8003730 <MX_TIM2_Init+0xa4>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80036d2:	2301      	movs	r3, #1
 80036d4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80036d6:	2302      	movs	r3, #2
 80036d8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80036da:	2301      	movs	r3, #1
 80036dc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80036de:	2300      	movs	r3, #0
 80036e0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 80036e2:	2302      	movs	r3, #2
 80036e4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80036e6:	2302      	movs	r3, #2
 80036e8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80036ea:	2301      	movs	r3, #1
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80036ee:	2300      	movs	r3, #0
 80036f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 80036f2:	2302      	movs	r3, #2
 80036f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80036f6:	f107 030c 	add.w	r3, r7, #12
 80036fa:	4619      	mov	r1, r3
 80036fc:	480c      	ldr	r0, [pc, #48]	; (8003730 <MX_TIM2_Init+0xa4>)
 80036fe:	f004 ffd3 	bl	80086a8 <HAL_TIM_Encoder_Init>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003708:	f000 f976 	bl	80039f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800370c:	2300      	movs	r3, #0
 800370e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003710:	2300      	movs	r3, #0
 8003712:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003714:	1d3b      	adds	r3, r7, #4
 8003716:	4619      	mov	r1, r3
 8003718:	4805      	ldr	r0, [pc, #20]	; (8003730 <MX_TIM2_Init+0xa4>)
 800371a:	f005 fdf1 	bl	8009300 <HAL_TIMEx_MasterConfigSynchronization>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003724:	f000 f968 	bl	80039f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003728:	bf00      	nop
 800372a:	3730      	adds	r7, #48	; 0x30
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	20003b08 	.word	0x20003b08

08003734 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b08e      	sub	sp, #56	; 0x38
 8003738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800373a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	605a      	str	r2, [r3, #4]
 8003744:	609a      	str	r2, [r3, #8]
 8003746:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003748:	f107 0320 	add.w	r3, r7, #32
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003752:	1d3b      	adds	r3, r7, #4
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	605a      	str	r2, [r3, #4]
 800375a:	609a      	str	r2, [r3, #8]
 800375c:	60da      	str	r2, [r3, #12]
 800375e:	611a      	str	r2, [r3, #16]
 8003760:	615a      	str	r2, [r3, #20]
 8003762:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003764:	4b2c      	ldr	r3, [pc, #176]	; (8003818 <MX_TIM3_Init+0xe4>)
 8003766:	4a2d      	ldr	r2, [pc, #180]	; (800381c <MX_TIM3_Init+0xe8>)
 8003768:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800376a:	4b2b      	ldr	r3, [pc, #172]	; (8003818 <MX_TIM3_Init+0xe4>)
 800376c:	2200      	movs	r2, #0
 800376e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003770:	4b29      	ldr	r3, [pc, #164]	; (8003818 <MX_TIM3_Init+0xe4>)
 8003772:	2200      	movs	r2, #0
 8003774:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2544;
 8003776:	4b28      	ldr	r3, [pc, #160]	; (8003818 <MX_TIM3_Init+0xe4>)
 8003778:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800377c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800377e:	4b26      	ldr	r3, [pc, #152]	; (8003818 <MX_TIM3_Init+0xe4>)
 8003780:	2200      	movs	r2, #0
 8003782:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003784:	4b24      	ldr	r3, [pc, #144]	; (8003818 <MX_TIM3_Init+0xe4>)
 8003786:	2280      	movs	r2, #128	; 0x80
 8003788:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800378a:	4823      	ldr	r0, [pc, #140]	; (8003818 <MX_TIM3_Init+0xe4>)
 800378c:	f004 fd76 	bl	800827c <HAL_TIM_Base_Init>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003796:	f000 f92f 	bl	80039f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800379a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800379e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80037a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037a4:	4619      	mov	r1, r3
 80037a6:	481c      	ldr	r0, [pc, #112]	; (8003818 <MX_TIM3_Init+0xe4>)
 80037a8:	f005 f9ee 	bl	8008b88 <HAL_TIM_ConfigClockSource>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80037b2:	f000 f921 	bl	80039f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80037b6:	4818      	ldr	r0, [pc, #96]	; (8003818 <MX_TIM3_Init+0xe4>)
 80037b8:	f004 fe6c 	bl	8008494 <HAL_TIM_PWM_Init>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80037c2:	f000 f919 	bl	80039f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037c6:	2300      	movs	r3, #0
 80037c8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037ca:	2300      	movs	r3, #0
 80037cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80037ce:	f107 0320 	add.w	r3, r7, #32
 80037d2:	4619      	mov	r1, r3
 80037d4:	4810      	ldr	r0, [pc, #64]	; (8003818 <MX_TIM3_Init+0xe4>)
 80037d6:	f005 fd93 	bl	8009300 <HAL_TIMEx_MasterConfigSynchronization>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80037e0:	f000 f90a 	bl	80039f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80037e4:	2370      	movs	r3, #112	; 0x70
 80037e6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80037e8:	2300      	movs	r3, #0
 80037ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037ec:	2300      	movs	r3, #0
 80037ee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037f0:	2300      	movs	r3, #0
 80037f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80037f4:	1d3b      	adds	r3, r7, #4
 80037f6:	2208      	movs	r2, #8
 80037f8:	4619      	mov	r1, r3
 80037fa:	4807      	ldr	r0, [pc, #28]	; (8003818 <MX_TIM3_Init+0xe4>)
 80037fc:	f005 f902 	bl	8008a04 <HAL_TIM_PWM_ConfigChannel>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003806:	f000 f8f7 	bl	80039f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800380a:	4803      	ldr	r0, [pc, #12]	; (8003818 <MX_TIM3_Init+0xe4>)
 800380c:	f000 fb32 	bl	8003e74 <HAL_TIM_MspPostInit>

}
 8003810:	bf00      	nop
 8003812:	3738      	adds	r7, #56	; 0x38
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	20003b50 	.word	0x20003b50
 800381c:	40000400 	.word	0x40000400

08003820 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b08c      	sub	sp, #48	; 0x30
 8003824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003826:	f107 030c 	add.w	r3, r7, #12
 800382a:	2224      	movs	r2, #36	; 0x24
 800382c:	2100      	movs	r1, #0
 800382e:	4618      	mov	r0, r3
 8003830:	f005 fe5e 	bl	80094f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003834:	1d3b      	adds	r3, r7, #4
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800383c:	4b20      	ldr	r3, [pc, #128]	; (80038c0 <MX_TIM4_Init+0xa0>)
 800383e:	4a21      	ldr	r2, [pc, #132]	; (80038c4 <MX_TIM4_Init+0xa4>)
 8003840:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003842:	4b1f      	ldr	r3, [pc, #124]	; (80038c0 <MX_TIM4_Init+0xa0>)
 8003844:	2200      	movs	r2, #0
 8003846:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003848:	4b1d      	ldr	r3, [pc, #116]	; (80038c0 <MX_TIM4_Init+0xa0>)
 800384a:	2200      	movs	r2, #0
 800384c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800384e:	4b1c      	ldr	r3, [pc, #112]	; (80038c0 <MX_TIM4_Init+0xa0>)
 8003850:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003854:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003856:	4b1a      	ldr	r3, [pc, #104]	; (80038c0 <MX_TIM4_Init+0xa0>)
 8003858:	2200      	movs	r2, #0
 800385a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800385c:	4b18      	ldr	r3, [pc, #96]	; (80038c0 <MX_TIM4_Init+0xa0>)
 800385e:	2200      	movs	r2, #0
 8003860:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003862:	2301      	movs	r3, #1
 8003864:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003866:	2302      	movs	r3, #2
 8003868:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800386a:	2301      	movs	r3, #1
 800386c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800386e:	2300      	movs	r3, #0
 8003870:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8003872:	2302      	movs	r3, #2
 8003874:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003876:	2302      	movs	r3, #2
 8003878:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800387a:	2301      	movs	r3, #1
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800387e:	2300      	movs	r3, #0
 8003880:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8003882:	2302      	movs	r3, #2
 8003884:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003886:	f107 030c 	add.w	r3, r7, #12
 800388a:	4619      	mov	r1, r3
 800388c:	480c      	ldr	r0, [pc, #48]	; (80038c0 <MX_TIM4_Init+0xa0>)
 800388e:	f004 ff0b 	bl	80086a8 <HAL_TIM_Encoder_Init>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003898:	f000 f8ae 	bl	80039f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800389c:	2300      	movs	r3, #0
 800389e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038a0:	2300      	movs	r3, #0
 80038a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80038a4:	1d3b      	adds	r3, r7, #4
 80038a6:	4619      	mov	r1, r3
 80038a8:	4805      	ldr	r0, [pc, #20]	; (80038c0 <MX_TIM4_Init+0xa0>)
 80038aa:	f005 fd29 	bl	8009300 <HAL_TIMEx_MasterConfigSynchronization>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80038b4:	f000 f8a0 	bl	80039f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80038b8:	bf00      	nop
 80038ba:	3730      	adds	r7, #48	; 0x30
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	20003b98 	.word	0x20003b98
 80038c4:	40000800 	.word	0x40000800

080038c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80038ce:	2300      	movs	r3, #0
 80038d0:	607b      	str	r3, [r7, #4]
 80038d2:	4b0c      	ldr	r3, [pc, #48]	; (8003904 <MX_DMA_Init+0x3c>)
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	4a0b      	ldr	r2, [pc, #44]	; (8003904 <MX_DMA_Init+0x3c>)
 80038d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038dc:	6313      	str	r3, [r2, #48]	; 0x30
 80038de:	4b09      	ldr	r3, [pc, #36]	; (8003904 <MX_DMA_Init+0x3c>)
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038e6:	607b      	str	r3, [r7, #4]
 80038e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80038ea:	2200      	movs	r2, #0
 80038ec:	2100      	movs	r1, #0
 80038ee:	203c      	movs	r0, #60	; 0x3c
 80038f0:	f001 fd63 	bl	80053ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80038f4:	203c      	movs	r0, #60	; 0x3c
 80038f6:	f001 fd7c 	bl	80053f2 <HAL_NVIC_EnableIRQ>

}
 80038fa:	bf00      	nop
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40023800 	.word	0x40023800

08003908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b088      	sub	sp, #32
 800390c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800390e:	f107 030c 	add.w	r3, r7, #12
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	605a      	str	r2, [r3, #4]
 8003918:	609a      	str	r2, [r3, #8]
 800391a:	60da      	str	r2, [r3, #12]
 800391c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	60bb      	str	r3, [r7, #8]
 8003922:	4b2a      	ldr	r3, [pc, #168]	; (80039cc <MX_GPIO_Init+0xc4>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	4a29      	ldr	r2, [pc, #164]	; (80039cc <MX_GPIO_Init+0xc4>)
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	6313      	str	r3, [r2, #48]	; 0x30
 800392e:	4b27      	ldr	r3, [pc, #156]	; (80039cc <MX_GPIO_Init+0xc4>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	60bb      	str	r3, [r7, #8]
 8003938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800393a:	2300      	movs	r3, #0
 800393c:	607b      	str	r3, [r7, #4]
 800393e:	4b23      	ldr	r3, [pc, #140]	; (80039cc <MX_GPIO_Init+0xc4>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	4a22      	ldr	r2, [pc, #136]	; (80039cc <MX_GPIO_Init+0xc4>)
 8003944:	f043 0302 	orr.w	r3, r3, #2
 8003948:	6313      	str	r3, [r2, #48]	; 0x30
 800394a:	4b20      	ldr	r3, [pc, #128]	; (80039cc <MX_GPIO_Init+0xc4>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	607b      	str	r3, [r7, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003956:	2300      	movs	r3, #0
 8003958:	603b      	str	r3, [r7, #0]
 800395a:	4b1c      	ldr	r3, [pc, #112]	; (80039cc <MX_GPIO_Init+0xc4>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	4a1b      	ldr	r2, [pc, #108]	; (80039cc <MX_GPIO_Init+0xc4>)
 8003960:	f043 0304 	orr.w	r3, r3, #4
 8003964:	6313      	str	r3, [r2, #48]	; 0x30
 8003966:	4b19      	ldr	r3, [pc, #100]	; (80039cc <MX_GPIO_Init+0xc4>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	f003 0304 	and.w	r3, r3, #4
 800396e:	603b      	str	r3, [r7, #0]
 8003970:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003972:	2200      	movs	r2, #0
 8003974:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003978:	4815      	ldr	r0, [pc, #84]	; (80039d0 <MX_GPIO_Init+0xc8>)
 800397a:	f002 fab9 	bl	8005ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 800397e:	2201      	movs	r2, #1
 8003980:	2110      	movs	r1, #16
 8003982:	4814      	ldr	r0, [pc, #80]	; (80039d4 <MX_GPIO_Init+0xcc>)
 8003984:	f002 fab4 	bl	8005ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003988:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800398c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800398e:	2301      	movs	r3, #1
 8003990:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003992:	2300      	movs	r3, #0
 8003994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003996:	2300      	movs	r3, #0
 8003998:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800399a:	f107 030c 	add.w	r3, r7, #12
 800399e:	4619      	mov	r1, r3
 80039a0:	480b      	ldr	r0, [pc, #44]	; (80039d0 <MX_GPIO_Init+0xc8>)
 80039a2:	f002 f921 	bl	8005be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 80039a6:	2310      	movs	r3, #16
 80039a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039aa:	2301      	movs	r3, #1
 80039ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039b2:	2303      	movs	r3, #3
 80039b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 80039b6:	f107 030c 	add.w	r3, r7, #12
 80039ba:	4619      	mov	r1, r3
 80039bc:	4805      	ldr	r0, [pc, #20]	; (80039d4 <MX_GPIO_Init+0xcc>)
 80039be:	f002 f913 	bl	8005be8 <HAL_GPIO_Init>

}
 80039c2:	bf00      	nop
 80039c4:	3720      	adds	r7, #32
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40023800 	.word	0x40023800
 80039d0:	40020800 	.word	0x40020800
 80039d4:	40020000 	.word	0x40020000

080039d8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)   // get data after conversion
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
adc_flag=1;
 80039e0:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <HAL_ADC_ConvCpltCallback+0x1c>)
 80039e2:	2201      	movs	r2, #1
 80039e4:	701a      	strb	r2, [r3, #0]


}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	20002d10 	.word	0x20002d10

080039f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80039fc:	b672      	cpsid	i
}
 80039fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a00:	e7fe      	b.n	8003a00 <Error_Handler+0x8>
	...

08003a04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	607b      	str	r3, [r7, #4]
 8003a0e:	4b10      	ldr	r3, [pc, #64]	; (8003a50 <HAL_MspInit+0x4c>)
 8003a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a12:	4a0f      	ldr	r2, [pc, #60]	; (8003a50 <HAL_MspInit+0x4c>)
 8003a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a18:	6453      	str	r3, [r2, #68]	; 0x44
 8003a1a:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <HAL_MspInit+0x4c>)
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a22:	607b      	str	r3, [r7, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a26:	2300      	movs	r3, #0
 8003a28:	603b      	str	r3, [r7, #0]
 8003a2a:	4b09      	ldr	r3, [pc, #36]	; (8003a50 <HAL_MspInit+0x4c>)
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	4a08      	ldr	r2, [pc, #32]	; (8003a50 <HAL_MspInit+0x4c>)
 8003a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a34:	6413      	str	r3, [r2, #64]	; 0x40
 8003a36:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <HAL_MspInit+0x4c>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a3e:	603b      	str	r3, [r7, #0]
 8003a40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	40023800 	.word	0x40023800

08003a54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08a      	sub	sp, #40	; 0x28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a5c:	f107 0314 	add.w	r3, r7, #20
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	605a      	str	r2, [r3, #4]
 8003a66:	609a      	str	r2, [r3, #8]
 8003a68:	60da      	str	r2, [r3, #12]
 8003a6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a3c      	ldr	r2, [pc, #240]	; (8003b64 <HAL_ADC_MspInit+0x110>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d171      	bne.n	8003b5a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003a76:	2300      	movs	r3, #0
 8003a78:	613b      	str	r3, [r7, #16]
 8003a7a:	4b3b      	ldr	r3, [pc, #236]	; (8003b68 <HAL_ADC_MspInit+0x114>)
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7e:	4a3a      	ldr	r2, [pc, #232]	; (8003b68 <HAL_ADC_MspInit+0x114>)
 8003a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a84:	6453      	str	r3, [r2, #68]	; 0x44
 8003a86:	4b38      	ldr	r3, [pc, #224]	; (8003b68 <HAL_ADC_MspInit+0x114>)
 8003a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8e:	613b      	str	r3, [r7, #16]
 8003a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a92:	2300      	movs	r3, #0
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	4b34      	ldr	r3, [pc, #208]	; (8003b68 <HAL_ADC_MspInit+0x114>)
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	4a33      	ldr	r2, [pc, #204]	; (8003b68 <HAL_ADC_MspInit+0x114>)
 8003a9c:	f043 0301 	orr.w	r3, r3, #1
 8003aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8003aa2:	4b31      	ldr	r3, [pc, #196]	; (8003b68 <HAL_ADC_MspInit+0x114>)
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60bb      	str	r3, [r7, #8]
 8003ab2:	4b2d      	ldr	r3, [pc, #180]	; (8003b68 <HAL_ADC_MspInit+0x114>)
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	4a2c      	ldr	r2, [pc, #176]	; (8003b68 <HAL_ADC_MspInit+0x114>)
 8003ab8:	f043 0302 	orr.w	r3, r3, #2
 8003abc:	6313      	str	r3, [r2, #48]	; 0x30
 8003abe:	4b2a      	ldr	r3, [pc, #168]	; (8003b68 <HAL_ADC_MspInit+0x114>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	60bb      	str	r3, [r7, #8]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA0-WKUP     ------> ADC1_IN0
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0;
 8003aca:	2305      	movs	r3, #5
 8003acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad6:	f107 0314 	add.w	r3, r7, #20
 8003ada:	4619      	mov	r1, r3
 8003adc:	4823      	ldr	r0, [pc, #140]	; (8003b6c <HAL_ADC_MspInit+0x118>)
 8003ade:	f002 f883 	bl	8005be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aee:	f107 0314 	add.w	r3, r7, #20
 8003af2:	4619      	mov	r1, r3
 8003af4:	481e      	ldr	r0, [pc, #120]	; (8003b70 <HAL_ADC_MspInit+0x11c>)
 8003af6:	f002 f877 	bl	8005be8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8003afa:	4b1e      	ldr	r3, [pc, #120]	; (8003b74 <HAL_ADC_MspInit+0x120>)
 8003afc:	4a1e      	ldr	r2, [pc, #120]	; (8003b78 <HAL_ADC_MspInit+0x124>)
 8003afe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003b00:	4b1c      	ldr	r3, [pc, #112]	; (8003b74 <HAL_ADC_MspInit+0x120>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b06:	4b1b      	ldr	r3, [pc, #108]	; (8003b74 <HAL_ADC_MspInit+0x120>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b0c:	4b19      	ldr	r3, [pc, #100]	; (8003b74 <HAL_ADC_MspInit+0x120>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003b12:	4b18      	ldr	r3, [pc, #96]	; (8003b74 <HAL_ADC_MspInit+0x120>)
 8003b14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b18:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b1a:	4b16      	ldr	r3, [pc, #88]	; (8003b74 <HAL_ADC_MspInit+0x120>)
 8003b1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b20:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b22:	4b14      	ldr	r3, [pc, #80]	; (8003b74 <HAL_ADC_MspInit+0x120>)
 8003b24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b28:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003b2a:	4b12      	ldr	r3, [pc, #72]	; (8003b74 <HAL_ADC_MspInit+0x120>)
 8003b2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b30:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003b32:	4b10      	ldr	r3, [pc, #64]	; (8003b74 <HAL_ADC_MspInit+0x120>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b38:	4b0e      	ldr	r3, [pc, #56]	; (8003b74 <HAL_ADC_MspInit+0x120>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003b3e:	480d      	ldr	r0, [pc, #52]	; (8003b74 <HAL_ADC_MspInit+0x120>)
 8003b40:	f001 fc72 	bl	8005428 <HAL_DMA_Init>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8003b4a:	f7ff ff55 	bl	80039f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a08      	ldr	r2, [pc, #32]	; (8003b74 <HAL_ADC_MspInit+0x120>)
 8003b52:	639a      	str	r2, [r3, #56]	; 0x38
 8003b54:	4a07      	ldr	r2, [pc, #28]	; (8003b74 <HAL_ADC_MspInit+0x120>)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003b5a:	bf00      	nop
 8003b5c:	3728      	adds	r7, #40	; 0x28
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	40012000 	.word	0x40012000
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	40020000 	.word	0x40020000
 8003b70:	40020400 	.word	0x40020400
 8003b74:	200039a4 	.word	0x200039a4
 8003b78:	40026470 	.word	0x40026470

08003b7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b08a      	sub	sp, #40	; 0x28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b84:	f107 0314 	add.w	r3, r7, #20
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	605a      	str	r2, [r3, #4]
 8003b8e:	609a      	str	r2, [r3, #8]
 8003b90:	60da      	str	r2, [r3, #12]
 8003b92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a22      	ldr	r2, [pc, #136]	; (8003c24 <HAL_I2C_MspInit+0xa8>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d13d      	bne.n	8003c1a <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	4b21      	ldr	r3, [pc, #132]	; (8003c28 <HAL_I2C_MspInit+0xac>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	4a20      	ldr	r2, [pc, #128]	; (8003c28 <HAL_I2C_MspInit+0xac>)
 8003ba8:	f043 0302 	orr.w	r3, r3, #2
 8003bac:	6313      	str	r3, [r2, #48]	; 0x30
 8003bae:	4b1e      	ldr	r3, [pc, #120]	; (8003c28 <HAL_I2C_MspInit+0xac>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	613b      	str	r3, [r7, #16]
 8003bb8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB9     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003bba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003bc0:	2312      	movs	r3, #18
 8003bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8003bcc:	2309      	movs	r3, #9
 8003bce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bd0:	f107 0314 	add.w	r3, r7, #20
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4815      	ldr	r0, [pc, #84]	; (8003c2c <HAL_I2C_MspInit+0xb0>)
 8003bd8:	f002 f806 	bl	8005be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003bdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003be2:	2312      	movs	r3, #18
 8003be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bea:	2303      	movs	r3, #3
 8003bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003bee:	2304      	movs	r3, #4
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bf2:	f107 0314 	add.w	r3, r7, #20
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	480c      	ldr	r0, [pc, #48]	; (8003c2c <HAL_I2C_MspInit+0xb0>)
 8003bfa:	f001 fff5 	bl	8005be8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <HAL_I2C_MspInit+0xac>)
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	4a08      	ldr	r2, [pc, #32]	; (8003c28 <HAL_I2C_MspInit+0xac>)
 8003c08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c0e:	4b06      	ldr	r3, [pc, #24]	; (8003c28 <HAL_I2C_MspInit+0xac>)
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003c1a:	bf00      	nop
 8003c1c:	3728      	adds	r7, #40	; 0x28
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40005800 	.word	0x40005800
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	40020400 	.word	0x40020400

08003c30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b08c      	sub	sp, #48	; 0x30
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c38:	f107 031c 	add.w	r3, r7, #28
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	605a      	str	r2, [r3, #4]
 8003c42:	609a      	str	r2, [r3, #8]
 8003c44:	60da      	str	r2, [r3, #12]
 8003c46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a32      	ldr	r2, [pc, #200]	; (8003d18 <HAL_SPI_MspInit+0xe8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d12c      	bne.n	8003cac <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003c52:	2300      	movs	r3, #0
 8003c54:	61bb      	str	r3, [r7, #24]
 8003c56:	4b31      	ldr	r3, [pc, #196]	; (8003d1c <HAL_SPI_MspInit+0xec>)
 8003c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5a:	4a30      	ldr	r2, [pc, #192]	; (8003d1c <HAL_SPI_MspInit+0xec>)
 8003c5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c60:	6453      	str	r3, [r2, #68]	; 0x44
 8003c62:	4b2e      	ldr	r3, [pc, #184]	; (8003d1c <HAL_SPI_MspInit+0xec>)
 8003c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c6a:	61bb      	str	r3, [r7, #24]
 8003c6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c6e:	2300      	movs	r3, #0
 8003c70:	617b      	str	r3, [r7, #20]
 8003c72:	4b2a      	ldr	r3, [pc, #168]	; (8003d1c <HAL_SPI_MspInit+0xec>)
 8003c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c76:	4a29      	ldr	r2, [pc, #164]	; (8003d1c <HAL_SPI_MspInit+0xec>)
 8003c78:	f043 0301 	orr.w	r3, r3, #1
 8003c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c7e:	4b27      	ldr	r3, [pc, #156]	; (8003d1c <HAL_SPI_MspInit+0xec>)
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	617b      	str	r3, [r7, #20]
 8003c88:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 8003c8a:	23e0      	movs	r3, #224	; 0xe0
 8003c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c8e:	2302      	movs	r3, #2
 8003c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c96:	2303      	movs	r3, #3
 8003c98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c9a:	2305      	movs	r3, #5
 8003c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c9e:	f107 031c 	add.w	r3, r7, #28
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	481e      	ldr	r0, [pc, #120]	; (8003d20 <HAL_SPI_MspInit+0xf0>)
 8003ca6:	f001 ff9f 	bl	8005be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003caa:	e031      	b.n	8003d10 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a1c      	ldr	r2, [pc, #112]	; (8003d24 <HAL_SPI_MspInit+0xf4>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d12c      	bne.n	8003d10 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	4b18      	ldr	r3, [pc, #96]	; (8003d1c <HAL_SPI_MspInit+0xec>)
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	4a17      	ldr	r2, [pc, #92]	; (8003d1c <HAL_SPI_MspInit+0xec>)
 8003cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8003cc6:	4b15      	ldr	r3, [pc, #84]	; (8003d1c <HAL_SPI_MspInit+0xec>)
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	4b11      	ldr	r3, [pc, #68]	; (8003d1c <HAL_SPI_MspInit+0xec>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	4a10      	ldr	r2, [pc, #64]	; (8003d1c <HAL_SPI_MspInit+0xec>)
 8003cdc:	f043 0302 	orr.w	r3, r3, #2
 8003ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ce2:	4b0e      	ldr	r3, [pc, #56]	; (8003d1c <HAL_SPI_MspInit+0xec>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8003cee:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003d00:	2305      	movs	r3, #5
 8003d02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d04:	f107 031c 	add.w	r3, r7, #28
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4807      	ldr	r0, [pc, #28]	; (8003d28 <HAL_SPI_MspInit+0xf8>)
 8003d0c:	f001 ff6c 	bl	8005be8 <HAL_GPIO_Init>
}
 8003d10:	bf00      	nop
 8003d12:	3730      	adds	r7, #48	; 0x30
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40013000 	.word	0x40013000
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	40020000 	.word	0x40020000
 8003d24:	40003800 	.word	0x40003800
 8003d28:	40020400 	.word	0x40020400

08003d2c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08c      	sub	sp, #48	; 0x30
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d34:	f107 031c 	add.w	r3, r7, #28
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	605a      	str	r2, [r3, #4]
 8003d3e:	609a      	str	r2, [r3, #8]
 8003d40:	60da      	str	r2, [r3, #12]
 8003d42:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d4c:	d12d      	bne.n	8003daa <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61bb      	str	r3, [r7, #24]
 8003d52:	4b30      	ldr	r3, [pc, #192]	; (8003e14 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	4a2f      	ldr	r2, [pc, #188]	; (8003e14 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003d58:	f043 0301 	orr.w	r3, r3, #1
 8003d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d5e:	4b2d      	ldr	r3, [pc, #180]	; (8003e14 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	61bb      	str	r3, [r7, #24]
 8003d68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	4b29      	ldr	r3, [pc, #164]	; (8003e14 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d72:	4a28      	ldr	r2, [pc, #160]	; (8003e14 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003d74:	f043 0301 	orr.w	r3, r3, #1
 8003d78:	6313      	str	r3, [r2, #48]	; 0x30
 8003d7a:	4b26      	ldr	r3, [pc, #152]	; (8003e14 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	617b      	str	r3, [r7, #20]
 8003d84:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 8003d86:	f248 0302 	movw	r3, #32770	; 0x8002
 8003d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d90:	2301      	movs	r3, #1
 8003d92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d94:	2300      	movs	r3, #0
 8003d96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d9c:	f107 031c 	add.w	r3, r7, #28
 8003da0:	4619      	mov	r1, r3
 8003da2:	481d      	ldr	r0, [pc, #116]	; (8003e18 <HAL_TIM_Encoder_MspInit+0xec>)
 8003da4:	f001 ff20 	bl	8005be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003da8:	e030      	b.n	8003e0c <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a1b      	ldr	r2, [pc, #108]	; (8003e1c <HAL_TIM_Encoder_MspInit+0xf0>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d12b      	bne.n	8003e0c <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003db4:	2300      	movs	r3, #0
 8003db6:	613b      	str	r3, [r7, #16]
 8003db8:	4b16      	ldr	r3, [pc, #88]	; (8003e14 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	4a15      	ldr	r2, [pc, #84]	; (8003e14 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003dbe:	f043 0304 	orr.w	r3, r3, #4
 8003dc2:	6413      	str	r3, [r2, #64]	; 0x40
 8003dc4:	4b13      	ldr	r3, [pc, #76]	; (8003e14 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	613b      	str	r3, [r7, #16]
 8003dce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd8:	4a0e      	ldr	r2, [pc, #56]	; (8003e14 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003dda:	f043 0302 	orr.w	r3, r3, #2
 8003dde:	6313      	str	r3, [r2, #48]	; 0x30
 8003de0:	4b0c      	ldr	r3, [pc, #48]	; (8003e14 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003dec:	23c0      	movs	r3, #192	; 0xc0
 8003dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df0:	2302      	movs	r3, #2
 8003df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003df4:	2301      	movs	r3, #1
 8003df6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e00:	f107 031c 	add.w	r3, r7, #28
 8003e04:	4619      	mov	r1, r3
 8003e06:	4806      	ldr	r0, [pc, #24]	; (8003e20 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003e08:	f001 feee 	bl	8005be8 <HAL_GPIO_Init>
}
 8003e0c:	bf00      	nop
 8003e0e:	3730      	adds	r7, #48	; 0x30
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40023800 	.word	0x40023800
 8003e18:	40020000 	.word	0x40020000
 8003e1c:	40000800 	.word	0x40000800
 8003e20:	40020400 	.word	0x40020400

08003e24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a0e      	ldr	r2, [pc, #56]	; (8003e6c <HAL_TIM_Base_MspInit+0x48>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d115      	bne.n	8003e62 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	4b0d      	ldr	r3, [pc, #52]	; (8003e70 <HAL_TIM_Base_MspInit+0x4c>)
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	4a0c      	ldr	r2, [pc, #48]	; (8003e70 <HAL_TIM_Base_MspInit+0x4c>)
 8003e40:	f043 0302 	orr.w	r3, r3, #2
 8003e44:	6413      	str	r3, [r2, #64]	; 0x40
 8003e46:	4b0a      	ldr	r3, [pc, #40]	; (8003e70 <HAL_TIM_Base_MspInit+0x4c>)
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003e52:	2200      	movs	r2, #0
 8003e54:	2100      	movs	r1, #0
 8003e56:	201d      	movs	r0, #29
 8003e58:	f001 faaf 	bl	80053ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003e5c:	201d      	movs	r0, #29
 8003e5e:	f001 fac8 	bl	80053f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003e62:	bf00      	nop
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	40000400 	.word	0x40000400
 8003e70:	40023800 	.word	0x40023800

08003e74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b088      	sub	sp, #32
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e7c:	f107 030c 	add.w	r3, r7, #12
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	605a      	str	r2, [r3, #4]
 8003e86:	609a      	str	r2, [r3, #8]
 8003e88:	60da      	str	r2, [r3, #12]
 8003e8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a12      	ldr	r2, [pc, #72]	; (8003edc <HAL_TIM_MspPostInit+0x68>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d11d      	bne.n	8003ed2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e96:	2300      	movs	r3, #0
 8003e98:	60bb      	str	r3, [r7, #8]
 8003e9a:	4b11      	ldr	r3, [pc, #68]	; (8003ee0 <HAL_TIM_MspPostInit+0x6c>)
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9e:	4a10      	ldr	r2, [pc, #64]	; (8003ee0 <HAL_TIM_MspPostInit+0x6c>)
 8003ea0:	f043 0302 	orr.w	r3, r3, #2
 8003ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ea6:	4b0e      	ldr	r3, [pc, #56]	; (8003ee0 <HAL_TIM_MspPostInit+0x6c>)
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	60bb      	str	r3, [r7, #8]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ec6:	f107 030c 	add.w	r3, r7, #12
 8003eca:	4619      	mov	r1, r3
 8003ecc:	4805      	ldr	r0, [pc, #20]	; (8003ee4 <HAL_TIM_MspPostInit+0x70>)
 8003ece:	f001 fe8b 	bl	8005be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003ed2:	bf00      	nop
 8003ed4:	3720      	adds	r7, #32
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	40000400 	.word	0x40000400
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	40020400 	.word	0x40020400

08003ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003eec:	e7fe      	b.n	8003eec <NMI_Handler+0x4>

08003eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ef2:	e7fe      	b.n	8003ef2 <HardFault_Handler+0x4>

08003ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ef8:	e7fe      	b.n	8003ef8 <MemManage_Handler+0x4>

08003efa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003efa:	b480      	push	{r7}
 8003efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003efe:	e7fe      	b.n	8003efe <BusFault_Handler+0x4>

08003f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f04:	e7fe      	b.n	8003f04 <UsageFault_Handler+0x4>

08003f06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f06:	b480      	push	{r7}
 8003f08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f0a:	bf00      	nop
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f18:	bf00      	nop
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f22:	b480      	push	{r7}
 8003f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f26:	bf00      	nop
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f34:	f000 f8a8 	bl	8004088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f38:	bf00      	nop
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003f40:	4802      	ldr	r0, [pc, #8]	; (8003f4c <TIM3_IRQHandler+0x10>)
 8003f42:	f004 fc57 	bl	80087f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003f46:	bf00      	nop
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	20003b50 	.word	0x20003b50

08003f50 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003f54:	4802      	ldr	r0, [pc, #8]	; (8003f60 <DMA2_Stream4_IRQHandler+0x10>)
 8003f56:	f001 fbdd 	bl	8005714 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003f5a:	bf00      	nop
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	200039a4 	.word	0x200039a4

08003f64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f68:	4b08      	ldr	r3, [pc, #32]	; (8003f8c <SystemInit+0x28>)
 8003f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6e:	4a07      	ldr	r2, [pc, #28]	; (8003f8c <SystemInit+0x28>)
 8003f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f78:	4b04      	ldr	r3, [pc, #16]	; (8003f8c <SystemInit+0x28>)
 8003f7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f7e:	609a      	str	r2, [r3, #8]
#endif
}
 8003f80:	bf00      	nop
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	e000ed00 	.word	0xe000ed00

08003f90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003fc8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003f94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003f96:	e003      	b.n	8003fa0 <LoopCopyDataInit>

08003f98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003f98:	4b0c      	ldr	r3, [pc, #48]	; (8003fcc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003f9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003f9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003f9e:	3104      	adds	r1, #4

08003fa0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003fa0:	480b      	ldr	r0, [pc, #44]	; (8003fd0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003fa2:	4b0c      	ldr	r3, [pc, #48]	; (8003fd4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003fa4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003fa6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003fa8:	d3f6      	bcc.n	8003f98 <CopyDataInit>
  ldr  r2, =_sbss
 8003faa:	4a0b      	ldr	r2, [pc, #44]	; (8003fd8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003fac:	e002      	b.n	8003fb4 <LoopFillZerobss>

08003fae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003fae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003fb0:	f842 3b04 	str.w	r3, [r2], #4

08003fb4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003fb4:	4b09      	ldr	r3, [pc, #36]	; (8003fdc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003fb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003fb8:	d3f9      	bcc.n	8003fae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003fba:	f7ff ffd3 	bl	8003f64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003fbe:	f005 fa65 	bl	800948c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fc2:	f7fe fd15 	bl	80029f0 <main>
  bx  lr    
 8003fc6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003fc8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003fcc:	0800a9f8 	.word	0x0800a9f8
  ldr  r0, =_sdata
 8003fd0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003fd4:	200006f8 	.word	0x200006f8
  ldr  r2, =_sbss
 8003fd8:	200006f8 	.word	0x200006f8
  ldr  r3, = _ebss
 8003fdc:	20003be4 	.word	0x20003be4

08003fe0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fe0:	e7fe      	b.n	8003fe0 <ADC_IRQHandler>
	...

08003fe4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003fe8:	4b0e      	ldr	r3, [pc, #56]	; (8004024 <HAL_Init+0x40>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a0d      	ldr	r2, [pc, #52]	; (8004024 <HAL_Init+0x40>)
 8003fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ff2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ff4:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <HAL_Init+0x40>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a0a      	ldr	r2, [pc, #40]	; (8004024 <HAL_Init+0x40>)
 8003ffa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ffe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004000:	4b08      	ldr	r3, [pc, #32]	; (8004024 <HAL_Init+0x40>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a07      	ldr	r2, [pc, #28]	; (8004024 <HAL_Init+0x40>)
 8004006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800400a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800400c:	2003      	movs	r0, #3
 800400e:	f001 f9c9 	bl	80053a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004012:	2000      	movs	r0, #0
 8004014:	f000 f808 	bl	8004028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004018:	f7ff fcf4 	bl	8003a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	40023c00 	.word	0x40023c00

08004028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004030:	4b12      	ldr	r3, [pc, #72]	; (800407c <HAL_InitTick+0x54>)
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	4b12      	ldr	r3, [pc, #72]	; (8004080 <HAL_InitTick+0x58>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	4619      	mov	r1, r3
 800403a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800403e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004042:	fbb2 f3f3 	udiv	r3, r2, r3
 8004046:	4618      	mov	r0, r3
 8004048:	f001 f9e1 	bl	800540e <HAL_SYSTICK_Config>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e00e      	b.n	8004074 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b0f      	cmp	r3, #15
 800405a:	d80a      	bhi.n	8004072 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800405c:	2200      	movs	r2, #0
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	f04f 30ff 	mov.w	r0, #4294967295
 8004064:	f001 f9a9 	bl	80053ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004068:	4a06      	ldr	r2, [pc, #24]	; (8004084 <HAL_InitTick+0x5c>)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800406e:	2300      	movs	r3, #0
 8004070:	e000      	b.n	8004074 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
}
 8004074:	4618      	mov	r0, r3
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	200006ec 	.word	0x200006ec
 8004080:	200006f4 	.word	0x200006f4
 8004084:	200006f0 	.word	0x200006f0

08004088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800408c:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <HAL_IncTick+0x20>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	461a      	mov	r2, r3
 8004092:	4b06      	ldr	r3, [pc, #24]	; (80040ac <HAL_IncTick+0x24>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4413      	add	r3, r2
 8004098:	4a04      	ldr	r2, [pc, #16]	; (80040ac <HAL_IncTick+0x24>)
 800409a:	6013      	str	r3, [r2, #0]
}
 800409c:	bf00      	nop
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	200006f4 	.word	0x200006f4
 80040ac:	20003be0 	.word	0x20003be0

080040b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  return uwTick;
 80040b4:	4b03      	ldr	r3, [pc, #12]	; (80040c4 <HAL_GetTick+0x14>)
 80040b6:	681b      	ldr	r3, [r3, #0]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	20003be0 	.word	0x20003be0

080040c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040d0:	f7ff ffee 	bl	80040b0 <HAL_GetTick>
 80040d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e0:	d005      	beq.n	80040ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040e2:	4b0a      	ldr	r3, [pc, #40]	; (800410c <HAL_Delay+0x44>)
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	461a      	mov	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4413      	add	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80040ee:	bf00      	nop
 80040f0:	f7ff ffde 	bl	80040b0 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d8f7      	bhi.n	80040f0 <HAL_Delay+0x28>
  {
  }
}
 8004100:	bf00      	nop
 8004102:	bf00      	nop
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	200006f4 	.word	0x200006f4

08004110 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004118:	2300      	movs	r3, #0
 800411a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e033      	b.n	800418e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	2b00      	cmp	r3, #0
 800412c:	d109      	bne.n	8004142 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7ff fc90 	bl	8003a54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	f003 0310 	and.w	r3, r3, #16
 800414a:	2b00      	cmp	r3, #0
 800414c:	d118      	bne.n	8004180 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004156:	f023 0302 	bic.w	r3, r3, #2
 800415a:	f043 0202 	orr.w	r2, r3, #2
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 fbe8 	bl	8004938 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	f023 0303 	bic.w	r3, r3, #3
 8004176:	f043 0201 	orr.w	r2, r3, #1
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	641a      	str	r2, [r3, #64]	; 0x40
 800417e:	e001      	b.n	8004184 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800418c:	7bfb      	ldrb	r3, [r7, #15]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d101      	bne.n	80041b2 <HAL_ADC_Start+0x1a>
 80041ae:	2302      	movs	r3, #2
 80041b0:	e097      	b.n	80042e2 <HAL_ADC_Start+0x14a>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d018      	beq.n	80041fa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689a      	ldr	r2, [r3, #8]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0201 	orr.w	r2, r2, #1
 80041d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80041d8:	4b45      	ldr	r3, [pc, #276]	; (80042f0 <HAL_ADC_Start+0x158>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a45      	ldr	r2, [pc, #276]	; (80042f4 <HAL_ADC_Start+0x15c>)
 80041de:	fba2 2303 	umull	r2, r3, r2, r3
 80041e2:	0c9a      	lsrs	r2, r3, #18
 80041e4:	4613      	mov	r3, r2
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	4413      	add	r3, r2
 80041ea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80041ec:	e002      	b.n	80041f4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	3b01      	subs	r3, #1
 80041f2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1f9      	bne.n	80041ee <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b01      	cmp	r3, #1
 8004206:	d15f      	bne.n	80042c8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004210:	f023 0301 	bic.w	r3, r3, #1
 8004214:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004226:	2b00      	cmp	r3, #0
 8004228:	d007      	beq.n	800423a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004232:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004246:	d106      	bne.n	8004256 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424c:	f023 0206 	bic.w	r2, r3, #6
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	645a      	str	r2, [r3, #68]	; 0x44
 8004254:	e002      	b.n	800425c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004264:	4b24      	ldr	r3, [pc, #144]	; (80042f8 <HAL_ADC_Start+0x160>)
 8004266:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004270:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f003 031f 	and.w	r3, r3, #31
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10f      	bne.n	800429e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d129      	bne.n	80042e0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689a      	ldr	r2, [r3, #8]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800429a:	609a      	str	r2, [r3, #8]
 800429c:	e020      	b.n	80042e0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a16      	ldr	r2, [pc, #88]	; (80042fc <HAL_ADC_Start+0x164>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d11b      	bne.n	80042e0 <HAL_ADC_Start+0x148>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d114      	bne.n	80042e0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80042c4:	609a      	str	r2, [r3, #8]
 80042c6:	e00b      	b.n	80042e0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	f043 0210 	orr.w	r2, r3, #16
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d8:	f043 0201 	orr.w	r2, r3, #1
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	200006ec 	.word	0x200006ec
 80042f4:	431bde83 	.word	0x431bde83
 80042f8:	40012300 	.word	0x40012300
 80042fc:	40012000 	.word	0x40012000

08004300 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800430a:	2300      	movs	r3, #0
 800430c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800431c:	d113      	bne.n	8004346 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800432c:	d10b      	bne.n	8004346 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	f043 0220 	orr.w	r2, r3, #32
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e063      	b.n	800440e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004346:	f7ff feb3 	bl	80040b0 <HAL_GetTick>
 800434a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800434c:	e021      	b.n	8004392 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004354:	d01d      	beq.n	8004392 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d007      	beq.n	800436c <HAL_ADC_PollForConversion+0x6c>
 800435c:	f7ff fea8 	bl	80040b0 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	429a      	cmp	r2, r3
 800436a:	d212      	bcs.n	8004392 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b02      	cmp	r3, #2
 8004378:	d00b      	beq.n	8004392 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	f043 0204 	orr.w	r2, r3, #4
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e03d      	b.n	800440e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b02      	cmp	r3, #2
 800439e:	d1d6      	bne.n	800434e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f06f 0212 	mvn.w	r2, #18
 80043a8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d123      	bne.n	800440c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d11f      	bne.n	800440c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d006      	beq.n	80043e8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d111      	bne.n	800440c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d105      	bne.n	800440c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	f043 0201 	orr.w	r2, r3, #1
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800442e:	2b01      	cmp	r3, #1
 8004430:	d101      	bne.n	8004436 <HAL_ADC_Start_DMA+0x1e>
 8004432:	2302      	movs	r3, #2
 8004434:	e0ce      	b.n	80045d4 <HAL_ADC_Start_DMA+0x1bc>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b01      	cmp	r3, #1
 800444a:	d018      	beq.n	800447e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0201 	orr.w	r2, r2, #1
 800445a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800445c:	4b5f      	ldr	r3, [pc, #380]	; (80045dc <HAL_ADC_Start_DMA+0x1c4>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a5f      	ldr	r2, [pc, #380]	; (80045e0 <HAL_ADC_Start_DMA+0x1c8>)
 8004462:	fba2 2303 	umull	r2, r3, r2, r3
 8004466:	0c9a      	lsrs	r2, r3, #18
 8004468:	4613      	mov	r3, r2
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	4413      	add	r3, r2
 800446e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004470:	e002      	b.n	8004478 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	3b01      	subs	r3, #1
 8004476:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1f9      	bne.n	8004472 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800448c:	d107      	bne.n	800449e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800449c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	f040 8086 	bne.w	80045ba <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80044b6:	f023 0301 	bic.w	r3, r3, #1
 80044ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d007      	beq.n	80044e0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80044d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ec:	d106      	bne.n	80044fc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f2:	f023 0206 	bic.w	r2, r3, #6
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	645a      	str	r2, [r3, #68]	; 0x44
 80044fa:	e002      	b.n	8004502 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800450a:	4b36      	ldr	r3, [pc, #216]	; (80045e4 <HAL_ADC_Start_DMA+0x1cc>)
 800450c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004512:	4a35      	ldr	r2, [pc, #212]	; (80045e8 <HAL_ADC_Start_DMA+0x1d0>)
 8004514:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451a:	4a34      	ldr	r2, [pc, #208]	; (80045ec <HAL_ADC_Start_DMA+0x1d4>)
 800451c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004522:	4a33      	ldr	r2, [pc, #204]	; (80045f0 <HAL_ADC_Start_DMA+0x1d8>)
 8004524:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800452e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800453e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689a      	ldr	r2, [r3, #8]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800454e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	334c      	adds	r3, #76	; 0x4c
 800455a:	4619      	mov	r1, r3
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f001 f810 	bl	8005584 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f003 031f 	and.w	r3, r3, #31
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10f      	bne.n	8004590 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d129      	bne.n	80045d2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800458c:	609a      	str	r2, [r3, #8]
 800458e:	e020      	b.n	80045d2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a17      	ldr	r2, [pc, #92]	; (80045f4 <HAL_ADC_Start_DMA+0x1dc>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d11b      	bne.n	80045d2 <HAL_ADC_Start_DMA+0x1ba>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d114      	bne.n	80045d2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80045b6:	609a      	str	r2, [r3, #8]
 80045b8:	e00b      	b.n	80045d2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	f043 0210 	orr.w	r2, r3, #16
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ca:	f043 0201 	orr.w	r2, r3, #1
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3718      	adds	r7, #24
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	200006ec 	.word	0x200006ec
 80045e0:	431bde83 	.word	0x431bde83
 80045e4:	40012300 	.word	0x40012300
 80045e8:	08004b31 	.word	0x08004b31
 80045ec:	08004beb 	.word	0x08004beb
 80045f0:	08004c07 	.word	0x08004c07
 80045f4:	40012000 	.word	0x40012000

080045f8 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004600:	2300      	movs	r3, #0
 8004602:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800460a:	2b01      	cmp	r3, #1
 800460c:	d101      	bne.n	8004612 <HAL_ADC_Stop_DMA+0x1a>
 800460e:	2302      	movs	r3, #2
 8004610:	e048      	b.n	80046a4 <HAL_ADC_Stop_DMA+0xac>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 0201 	bic.w	r2, r2, #1
 8004628:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b00      	cmp	r3, #0
 8004636:	d130      	bne.n	800469a <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689a      	ldr	r2, [r3, #8]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004646:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d10f      	bne.n	8004676 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465a:	4618      	mov	r0, r3
 800465c:	f000 ffea 	bl	8005634 <HAL_DMA_Abort>
 8004660:	4603      	mov	r3, r0
 8004662:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004664:	7bfb      	ldrb	r3, [r7, #15]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d005      	beq.n	8004676 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004684:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800468e:	f023 0301 	bic.w	r3, r3, #1
 8004692:	f043 0201 	orr.w	r2, r3, #1
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80046a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <HAL_ADC_ConfigChannel+0x1c>
 80046ec:	2302      	movs	r3, #2
 80046ee:	e113      	b.n	8004918 <HAL_ADC_ConfigChannel+0x244>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2b09      	cmp	r3, #9
 80046fe:	d925      	bls.n	800474c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68d9      	ldr	r1, [r3, #12]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	b29b      	uxth	r3, r3
 800470c:	461a      	mov	r2, r3
 800470e:	4613      	mov	r3, r2
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	4413      	add	r3, r2
 8004714:	3b1e      	subs	r3, #30
 8004716:	2207      	movs	r2, #7
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	43da      	mvns	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	400a      	ands	r2, r1
 8004724:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68d9      	ldr	r1, [r3, #12]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	b29b      	uxth	r3, r3
 8004736:	4618      	mov	r0, r3
 8004738:	4603      	mov	r3, r0
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	4403      	add	r3, r0
 800473e:	3b1e      	subs	r3, #30
 8004740:	409a      	lsls	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	60da      	str	r2, [r3, #12]
 800474a:	e022      	b.n	8004792 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6919      	ldr	r1, [r3, #16]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	b29b      	uxth	r3, r3
 8004758:	461a      	mov	r2, r3
 800475a:	4613      	mov	r3, r2
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	4413      	add	r3, r2
 8004760:	2207      	movs	r2, #7
 8004762:	fa02 f303 	lsl.w	r3, r2, r3
 8004766:	43da      	mvns	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	400a      	ands	r2, r1
 800476e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6919      	ldr	r1, [r3, #16]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	689a      	ldr	r2, [r3, #8]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	b29b      	uxth	r3, r3
 8004780:	4618      	mov	r0, r3
 8004782:	4603      	mov	r3, r0
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	4403      	add	r3, r0
 8004788:	409a      	lsls	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2b06      	cmp	r3, #6
 8004798:	d824      	bhi.n	80047e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	4613      	mov	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	3b05      	subs	r3, #5
 80047ac:	221f      	movs	r2, #31
 80047ae:	fa02 f303 	lsl.w	r3, r2, r3
 80047b2:	43da      	mvns	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	400a      	ands	r2, r1
 80047ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	4618      	mov	r0, r3
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	4613      	mov	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	3b05      	subs	r3, #5
 80047d6:	fa00 f203 	lsl.w	r2, r0, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	635a      	str	r2, [r3, #52]	; 0x34
 80047e2:	e04c      	b.n	800487e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	2b0c      	cmp	r3, #12
 80047ea:	d824      	bhi.n	8004836 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	4613      	mov	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	3b23      	subs	r3, #35	; 0x23
 80047fe:	221f      	movs	r2, #31
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	43da      	mvns	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	400a      	ands	r2, r1
 800480c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	b29b      	uxth	r3, r3
 800481a:	4618      	mov	r0, r3
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	4613      	mov	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	3b23      	subs	r3, #35	; 0x23
 8004828:	fa00 f203 	lsl.w	r2, r0, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	430a      	orrs	r2, r1
 8004832:	631a      	str	r2, [r3, #48]	; 0x30
 8004834:	e023      	b.n	800487e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	4613      	mov	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	3b41      	subs	r3, #65	; 0x41
 8004848:	221f      	movs	r2, #31
 800484a:	fa02 f303 	lsl.w	r3, r2, r3
 800484e:	43da      	mvns	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	400a      	ands	r2, r1
 8004856:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	b29b      	uxth	r3, r3
 8004864:	4618      	mov	r0, r3
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	4613      	mov	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	4413      	add	r3, r2
 8004870:	3b41      	subs	r3, #65	; 0x41
 8004872:	fa00 f203 	lsl.w	r2, r0, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800487e:	4b29      	ldr	r3, [pc, #164]	; (8004924 <HAL_ADC_ConfigChannel+0x250>)
 8004880:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a28      	ldr	r2, [pc, #160]	; (8004928 <HAL_ADC_ConfigChannel+0x254>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d10f      	bne.n	80048ac <HAL_ADC_ConfigChannel+0x1d8>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2b12      	cmp	r3, #18
 8004892:	d10b      	bne.n	80048ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a1d      	ldr	r2, [pc, #116]	; (8004928 <HAL_ADC_ConfigChannel+0x254>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d12b      	bne.n	800490e <HAL_ADC_ConfigChannel+0x23a>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a1c      	ldr	r2, [pc, #112]	; (800492c <HAL_ADC_ConfigChannel+0x258>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d003      	beq.n	80048c8 <HAL_ADC_ConfigChannel+0x1f4>
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b11      	cmp	r3, #17
 80048c6:	d122      	bne.n	800490e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a11      	ldr	r2, [pc, #68]	; (800492c <HAL_ADC_ConfigChannel+0x258>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d111      	bne.n	800490e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80048ea:	4b11      	ldr	r3, [pc, #68]	; (8004930 <HAL_ADC_ConfigChannel+0x25c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a11      	ldr	r2, [pc, #68]	; (8004934 <HAL_ADC_ConfigChannel+0x260>)
 80048f0:	fba2 2303 	umull	r2, r3, r2, r3
 80048f4:	0c9a      	lsrs	r2, r3, #18
 80048f6:	4613      	mov	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004900:	e002      	b.n	8004908 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	3b01      	subs	r3, #1
 8004906:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1f9      	bne.n	8004902 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3714      	adds	r7, #20
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr
 8004924:	40012300 	.word	0x40012300
 8004928:	40012000 	.word	0x40012000
 800492c:	10000012 	.word	0x10000012
 8004930:	200006ec 	.word	0x200006ec
 8004934:	431bde83 	.word	0x431bde83

08004938 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004940:	4b79      	ldr	r3, [pc, #484]	; (8004b28 <ADC_Init+0x1f0>)
 8004942:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	431a      	orrs	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800496c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6859      	ldr	r1, [r3, #4]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	021a      	lsls	r2, r3, #8
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004990:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	6859      	ldr	r1, [r3, #4]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689a      	ldr	r2, [r3, #8]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6899      	ldr	r1, [r3, #8]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68da      	ldr	r2, [r3, #12]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ca:	4a58      	ldr	r2, [pc, #352]	; (8004b2c <ADC_Init+0x1f4>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d022      	beq.n	8004a16 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689a      	ldr	r2, [r3, #8]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80049de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6899      	ldr	r1, [r3, #8]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6899      	ldr	r1, [r3, #8]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	609a      	str	r2, [r3, #8]
 8004a14:	e00f      	b.n	8004a36 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	689a      	ldr	r2, [r3, #8]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a34:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 0202 	bic.w	r2, r2, #2
 8004a44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6899      	ldr	r1, [r3, #8]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	7e1b      	ldrb	r3, [r3, #24]
 8004a50:	005a      	lsls	r2, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d01b      	beq.n	8004a9c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a72:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004a82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6859      	ldr	r1, [r3, #4]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	035a      	lsls	r2, r3, #13
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	605a      	str	r2, [r3, #4]
 8004a9a:	e007      	b.n	8004aac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aaa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004aba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	051a      	lsls	r2, r3, #20
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689a      	ldr	r2, [r3, #8]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004ae0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6899      	ldr	r1, [r3, #8]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004aee:	025a      	lsls	r2, r3, #9
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689a      	ldr	r2, [r3, #8]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6899      	ldr	r1, [r3, #8]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	029a      	lsls	r2, r3, #10
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	609a      	str	r2, [r3, #8]
}
 8004b1c:	bf00      	nop
 8004b1e:	3714      	adds	r7, #20
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	40012300 	.word	0x40012300
 8004b2c:	0f000001 	.word	0x0f000001

08004b30 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d13c      	bne.n	8004bc4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d12b      	bne.n	8004bbc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d127      	bne.n	8004bbc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b72:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d006      	beq.n	8004b88 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d119      	bne.n	8004bbc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f022 0220 	bic.w	r2, r2, #32
 8004b96:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d105      	bne.n	8004bbc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb4:	f043 0201 	orr.w	r2, r3, #1
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f7fe ff0b 	bl	80039d8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004bc2:	e00e      	b.n	8004be2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc8:	f003 0310 	and.w	r3, r3, #16
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f7ff fd75 	bl	80046c0 <HAL_ADC_ErrorCallback>
}
 8004bd6:	e004      	b.n	8004be2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	4798      	blx	r3
}
 8004be2:	bf00      	nop
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b084      	sub	sp, #16
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f7ff fd57 	bl	80046ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004bfe:	bf00      	nop
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b084      	sub	sp, #16
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c12:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2240      	movs	r2, #64	; 0x40
 8004c18:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1e:	f043 0204 	orr.w	r2, r3, #4
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f7ff fd4a 	bl	80046c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c2c:	bf00      	nop
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	2300      	movs	r3, #0
 8004c46:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d101      	bne.n	8004c56 <HAL_ADCEx_InjectedStart+0x22>
 8004c52:	2302      	movs	r3, #2
 8004c54:	e0aa      	b.n	8004dac <HAL_ADCEx_InjectedStart+0x178>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d018      	beq.n	8004c9e <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689a      	ldr	r2, [r3, #8]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0201 	orr.w	r2, r2, #1
 8004c7a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004c7c:	4b4e      	ldr	r3, [pc, #312]	; (8004db8 <HAL_ADCEx_InjectedStart+0x184>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a4e      	ldr	r2, [pc, #312]	; (8004dbc <HAL_ADCEx_InjectedStart+0x188>)
 8004c82:	fba2 2303 	umull	r2, r3, r2, r3
 8004c86:	0c9a      	lsrs	r2, r3, #18
 8004c88:	4613      	mov	r3, r2
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	4413      	add	r3, r2
 8004c8e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004c90:	e002      	b.n	8004c98 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	3b01      	subs	r3, #1
 8004c96:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1f9      	bne.n	8004c92 <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d172      	bne.n	8004d92 <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004cb4:	f023 0301 	bic.w	r3, r3, #1
 8004cb8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d102      	bne.n	8004cd2 <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f06f 0204 	mvn.w	r2, #4
 8004ce2:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ce4:	4b36      	ldr	r3, [pc, #216]	; (8004dc0 <HAL_ADCEx_InjectedStart+0x18c>)
 8004ce6:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f003 031f 	and.w	r3, r3, #31
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d124      	bne.n	8004d3e <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	bf0c      	ite	eq
 8004d02:	2301      	moveq	r3, #1
 8004d04:	2300      	movne	r3, #0
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	bf0c      	ite	eq
 8004d18:	2301      	moveq	r3, #1
 8004d1a:	2300      	movne	r3, #0
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d041      	beq.n	8004daa <HAL_ADCEx_InjectedStart+0x176>
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d03e      	beq.n	8004daa <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689a      	ldr	r2, [r3, #8]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004d3a:	609a      	str	r2, [r3, #8]
 8004d3c:	e035      	b.n	8004daa <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	bf0c      	ite	eq
 8004d4c:	2301      	moveq	r3, #1
 8004d4e:	2300      	movne	r3, #0
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	bf0c      	ite	eq
 8004d62:	2301      	moveq	r3, #1
 8004d64:	2300      	movne	r3, #0
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a15      	ldr	r2, [pc, #84]	; (8004dc4 <HAL_ADCEx_InjectedStart+0x190>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d11a      	bne.n	8004daa <HAL_ADCEx_InjectedStart+0x176>
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d017      	beq.n	8004daa <HAL_ADCEx_InjectedStart+0x176>
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d014      	beq.n	8004daa <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689a      	ldr	r2, [r3, #8]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004d8e:	609a      	str	r2, [r3, #8]
 8004d90:	e00b      	b.n	8004daa <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	f043 0210 	orr.w	r2, r3, #16
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da2:	f043 0201 	orr.w	r2, r3, #1
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	371c      	adds	r7, #28
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	200006ec 	.word	0x200006ec
 8004dbc:	431bde83 	.word	0x431bde83
 8004dc0:	40012300 	.word	0x40012300
 8004dc4:	40012000 	.word	0x40012000

08004dc8 <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d101      	bne.n	8004de2 <HAL_ADCEx_InjectedStop+0x1a>
 8004dde:	2302      	movs	r3, #2
 8004de0:	e037      	b.n	8004e52 <HAL_ADCEx_InjectedStop+0x8a>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d120      	bne.n	8004e38 <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d119      	bne.n	8004e38 <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689a      	ldr	r2, [r3, #8]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 0201 	bic.w	r2, r2, #1
 8004e12:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d112      	bne.n	8004e48 <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e26:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004e2a:	f023 0301 	bic.w	r3, r3, #1
 8004e2e:	f043 0201 	orr.w	r2, r3, #1
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004e36:	e007      	b.n	8004e48 <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3c:	f043 0220 	orr.w	r2, r3, #32
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3714      	adds	r7, #20
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
	...

08004e60 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f06f 0204 	mvn.w	r2, #4
 8004e76:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	2b03      	cmp	r3, #3
 8004e7e:	d81f      	bhi.n	8004ec0 <HAL_ADCEx_InjectedGetValue+0x60>
 8004e80:	a201      	add	r2, pc, #4	; (adr r2, 8004e88 <HAL_ADCEx_InjectedGetValue+0x28>)
 8004e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e86:	bf00      	nop
 8004e88:	08004eb7 	.word	0x08004eb7
 8004e8c:	08004ead 	.word	0x08004ead
 8004e90:	08004ea3 	.word	0x08004ea3
 8004e94:	08004e99 	.word	0x08004e99
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e9e:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8004ea0:	e00f      	b.n	8004ec2 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea8:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8004eaa:	e00a      	b.n	8004ec2 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	60fb      	str	r3, [r7, #12]
    }
    break;
 8004eb4:	e005      	b.n	8004ec2 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ebc:	60fb      	str	r3, [r7, #12]
    }
    break;
 8004ebe:	e000      	b.n	8004ec2 <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8004ec0:	bf00      	nop
  }
  return tmp;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d101      	bne.n	8004ee8 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	e17e      	b.n	80051e6 <HAL_ADCEx_InjectedConfigChannel+0x316>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b09      	cmp	r3, #9
 8004ef6:	d925      	bls.n	8004f44 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68d9      	ldr	r1, [r3, #12]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	461a      	mov	r2, r3
 8004f06:	4613      	mov	r3, r2
 8004f08:	005b      	lsls	r3, r3, #1
 8004f0a:	4413      	add	r3, r2
 8004f0c:	3b1e      	subs	r3, #30
 8004f0e:	2207      	movs	r2, #7
 8004f10:	fa02 f303 	lsl.w	r3, r2, r3
 8004f14:	43da      	mvns	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	400a      	ands	r2, r1
 8004f1c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68d9      	ldr	r1, [r3, #12]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	4618      	mov	r0, r3
 8004f30:	4603      	mov	r3, r0
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	4403      	add	r3, r0
 8004f36:	3b1e      	subs	r3, #30
 8004f38:	409a      	lsls	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	60da      	str	r2, [r3, #12]
 8004f42:	e022      	b.n	8004f8a <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6919      	ldr	r1, [r3, #16]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	461a      	mov	r2, r3
 8004f52:	4613      	mov	r3, r2
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	4413      	add	r3, r2
 8004f58:	2207      	movs	r2, #7
 8004f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5e:	43da      	mvns	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	400a      	ands	r2, r1
 8004f66:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6919      	ldr	r1, [r3, #16]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	689a      	ldr	r2, [r3, #8]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	4618      	mov	r0, r3
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	4403      	add	r3, r0
 8004f80:	409a      	lsls	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004f98:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	051a      	lsls	r2, r3, #20
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	b2da      	uxtb	r2, r3
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	3303      	adds	r3, #3
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	461a      	mov	r2, r3
 8004fcc:	4613      	mov	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	221f      	movs	r2, #31
 8004fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd8:	43da      	mvns	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	400a      	ands	r2, r1
 8004fe0:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	4618      	mov	r0, r3
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	3303      	adds	r3, #3
 8005002:	b2db      	uxtb	r3, r3
 8005004:	461a      	mov	r2, r3
 8005006:	4613      	mov	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	fa00 f203 	lsl.w	r2, r0, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	430a      	orrs	r2, r1
 8005016:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	4a75      	ldr	r2, [pc, #468]	; (80051f4 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d022      	beq.n	8005068 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8005030:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6899      	ldr	r1, [r3, #8]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	699a      	ldr	r2, [r3, #24]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689a      	ldr	r2, [r3, #8]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005052:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6899      	ldr	r1, [r3, #8]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	69da      	ldr	r2, [r3, #28]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	609a      	str	r2, [r3, #8]
 8005066:	e00f      	b.n	8005088 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689a      	ldr	r2, [r3, #8]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8005076:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689a      	ldr	r2, [r3, #8]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005086:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	7d5b      	ldrb	r3, [r3, #21]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d008      	beq.n	80050a2 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800509e:	605a      	str	r2, [r3, #4]
 80050a0:	e007      	b.n	80050b2 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b0:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	7d1b      	ldrb	r3, [r3, #20]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d008      	beq.n	80050cc <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050c8:	605a      	str	r2, [r3, #4]
 80050ca:	e007      	b.n	80050dc <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050da:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	2b03      	cmp	r3, #3
 80050e2:	d02e      	beq.n	8005142 <HAL_ADCEx_InjectedConfigChannel+0x272>
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d840      	bhi.n	800516a <HAL_ADCEx_InjectedConfigChannel+0x29a>
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d002      	beq.n	80050f2 <HAL_ADCEx_InjectedConfigChannel+0x222>
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d014      	beq.n	800511a <HAL_ADCEx_InjectedConfigChannel+0x24a>
 80050f0:	e03b      	b.n	800516a <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	695b      	ldr	r3, [r3, #20]
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	6812      	ldr	r2, [r2, #0]
 80050fc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005100:	f023 030f 	bic.w	r3, r3, #15
 8005104:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6959      	ldr	r1, [r3, #20]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	68da      	ldr	r2, [r3, #12]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	430a      	orrs	r2, r1
 8005116:	615a      	str	r2, [r3, #20]
      break;
 8005118:	e03b      	b.n	8005192 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6812      	ldr	r2, [r2, #0]
 8005124:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005128:	f023 030f 	bic.w	r3, r3, #15
 800512c:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6999      	ldr	r1, [r3, #24]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	68da      	ldr	r2, [r3, #12]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	430a      	orrs	r2, r1
 800513e:	619a      	str	r2, [r3, #24]
      break;
 8005140:	e027      	b.n	8005192 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	69db      	ldr	r3, [r3, #28]
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	6812      	ldr	r2, [r2, #0]
 800514c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005150:	f023 030f 	bic.w	r3, r3, #15
 8005154:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	69d9      	ldr	r1, [r3, #28]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	68da      	ldr	r2, [r3, #12]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	61da      	str	r2, [r3, #28]
      break;
 8005168:	e013      	b.n	8005192 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	6812      	ldr	r2, [r2, #0]
 8005174:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005178:	f023 030f 	bic.w	r3, r3, #15
 800517c:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	6a19      	ldr	r1, [r3, #32]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	68da      	ldr	r2, [r3, #12]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	621a      	str	r2, [r3, #32]
      break;
 8005190:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005192:	4b19      	ldr	r3, [pc, #100]	; (80051f8 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8005194:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a18      	ldr	r2, [pc, #96]	; (80051fc <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d109      	bne.n	80051b4 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b12      	cmp	r3, #18
 80051a6:	d105      	bne.n	80051b4 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a10      	ldr	r2, [pc, #64]	; (80051fc <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d10e      	bne.n	80051dc <HAL_ADCEx_InjectedConfigChannel+0x30c>
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a0f      	ldr	r2, [pc, #60]	; (8005200 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d003      	beq.n	80051d0 <HAL_ADCEx_InjectedConfigChannel+0x300>
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2b11      	cmp	r3, #17
 80051ce:	d105      	bne.n	80051dc <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3714      	adds	r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	000f0001 	.word	0x000f0001
 80051f8:	40012300 	.word	0x40012300
 80051fc:	40012000 	.word	0x40012000
 8005200:	10000012 	.word	0x10000012

08005204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f003 0307 	and.w	r3, r3, #7
 8005212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005214:	4b0c      	ldr	r3, [pc, #48]	; (8005248 <__NVIC_SetPriorityGrouping+0x44>)
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005220:	4013      	ands	r3, r2
 8005222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800522c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005236:	4a04      	ldr	r2, [pc, #16]	; (8005248 <__NVIC_SetPriorityGrouping+0x44>)
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	60d3      	str	r3, [r2, #12]
}
 800523c:	bf00      	nop
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	e000ed00 	.word	0xe000ed00

0800524c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005250:	4b04      	ldr	r3, [pc, #16]	; (8005264 <__NVIC_GetPriorityGrouping+0x18>)
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	0a1b      	lsrs	r3, r3, #8
 8005256:	f003 0307 	and.w	r3, r3, #7
}
 800525a:	4618      	mov	r0, r3
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	e000ed00 	.word	0xe000ed00

08005268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	4603      	mov	r3, r0
 8005270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005276:	2b00      	cmp	r3, #0
 8005278:	db0b      	blt.n	8005292 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800527a:	79fb      	ldrb	r3, [r7, #7]
 800527c:	f003 021f 	and.w	r2, r3, #31
 8005280:	4907      	ldr	r1, [pc, #28]	; (80052a0 <__NVIC_EnableIRQ+0x38>)
 8005282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005286:	095b      	lsrs	r3, r3, #5
 8005288:	2001      	movs	r0, #1
 800528a:	fa00 f202 	lsl.w	r2, r0, r2
 800528e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005292:	bf00      	nop
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	e000e100 	.word	0xe000e100

080052a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	4603      	mov	r3, r0
 80052ac:	6039      	str	r1, [r7, #0]
 80052ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	db0a      	blt.n	80052ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	490c      	ldr	r1, [pc, #48]	; (80052f0 <__NVIC_SetPriority+0x4c>)
 80052be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052c2:	0112      	lsls	r2, r2, #4
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	440b      	add	r3, r1
 80052c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052cc:	e00a      	b.n	80052e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	4908      	ldr	r1, [pc, #32]	; (80052f4 <__NVIC_SetPriority+0x50>)
 80052d4:	79fb      	ldrb	r3, [r7, #7]
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	3b04      	subs	r3, #4
 80052dc:	0112      	lsls	r2, r2, #4
 80052de:	b2d2      	uxtb	r2, r2
 80052e0:	440b      	add	r3, r1
 80052e2:	761a      	strb	r2, [r3, #24]
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	e000e100 	.word	0xe000e100
 80052f4:	e000ed00 	.word	0xe000ed00

080052f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b089      	sub	sp, #36	; 0x24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f003 0307 	and.w	r3, r3, #7
 800530a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	f1c3 0307 	rsb	r3, r3, #7
 8005312:	2b04      	cmp	r3, #4
 8005314:	bf28      	it	cs
 8005316:	2304      	movcs	r3, #4
 8005318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	3304      	adds	r3, #4
 800531e:	2b06      	cmp	r3, #6
 8005320:	d902      	bls.n	8005328 <NVIC_EncodePriority+0x30>
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	3b03      	subs	r3, #3
 8005326:	e000      	b.n	800532a <NVIC_EncodePriority+0x32>
 8005328:	2300      	movs	r3, #0
 800532a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800532c:	f04f 32ff 	mov.w	r2, #4294967295
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	fa02 f303 	lsl.w	r3, r2, r3
 8005336:	43da      	mvns	r2, r3
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	401a      	ands	r2, r3
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005340:	f04f 31ff 	mov.w	r1, #4294967295
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	fa01 f303 	lsl.w	r3, r1, r3
 800534a:	43d9      	mvns	r1, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005350:	4313      	orrs	r3, r2
         );
}
 8005352:	4618      	mov	r0, r3
 8005354:	3724      	adds	r7, #36	; 0x24
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
	...

08005360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	3b01      	subs	r3, #1
 800536c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005370:	d301      	bcc.n	8005376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005372:	2301      	movs	r3, #1
 8005374:	e00f      	b.n	8005396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005376:	4a0a      	ldr	r2, [pc, #40]	; (80053a0 <SysTick_Config+0x40>)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	3b01      	subs	r3, #1
 800537c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800537e:	210f      	movs	r1, #15
 8005380:	f04f 30ff 	mov.w	r0, #4294967295
 8005384:	f7ff ff8e 	bl	80052a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005388:	4b05      	ldr	r3, [pc, #20]	; (80053a0 <SysTick_Config+0x40>)
 800538a:	2200      	movs	r2, #0
 800538c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800538e:	4b04      	ldr	r3, [pc, #16]	; (80053a0 <SysTick_Config+0x40>)
 8005390:	2207      	movs	r2, #7
 8005392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	e000e010 	.word	0xe000e010

080053a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f7ff ff29 	bl	8005204 <__NVIC_SetPriorityGrouping>
}
 80053b2:	bf00      	nop
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b086      	sub	sp, #24
 80053be:	af00      	add	r7, sp, #0
 80053c0:	4603      	mov	r3, r0
 80053c2:	60b9      	str	r1, [r7, #8]
 80053c4:	607a      	str	r2, [r7, #4]
 80053c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80053c8:	2300      	movs	r3, #0
 80053ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80053cc:	f7ff ff3e 	bl	800524c <__NVIC_GetPriorityGrouping>
 80053d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	68b9      	ldr	r1, [r7, #8]
 80053d6:	6978      	ldr	r0, [r7, #20]
 80053d8:	f7ff ff8e 	bl	80052f8 <NVIC_EncodePriority>
 80053dc:	4602      	mov	r2, r0
 80053de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053e2:	4611      	mov	r1, r2
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7ff ff5d 	bl	80052a4 <__NVIC_SetPriority>
}
 80053ea:	bf00      	nop
 80053ec:	3718      	adds	r7, #24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b082      	sub	sp, #8
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	4603      	mov	r3, r0
 80053fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005400:	4618      	mov	r0, r3
 8005402:	f7ff ff31 	bl	8005268 <__NVIC_EnableIRQ>
}
 8005406:	bf00      	nop
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b082      	sub	sp, #8
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7ff ffa2 	bl	8005360 <SysTick_Config>
 800541c:	4603      	mov	r3, r0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005430:	2300      	movs	r3, #0
 8005432:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005434:	f7fe fe3c 	bl	80040b0 <HAL_GetTick>
 8005438:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e099      	b.n	8005578 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 0201 	bic.w	r2, r2, #1
 8005462:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005464:	e00f      	b.n	8005486 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005466:	f7fe fe23 	bl	80040b0 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	2b05      	cmp	r3, #5
 8005472:	d908      	bls.n	8005486 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2220      	movs	r2, #32
 8005478:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2203      	movs	r2, #3
 800547e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e078      	b.n	8005578 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1e8      	bne.n	8005466 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	4b38      	ldr	r3, [pc, #224]	; (8005580 <HAL_DMA_Init+0x158>)
 80054a0:	4013      	ands	r3, r2
 80054a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	2b04      	cmp	r3, #4
 80054de:	d107      	bne.n	80054f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e8:	4313      	orrs	r3, r2
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f023 0307 	bic.w	r3, r3, #7
 8005506:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	4313      	orrs	r3, r2
 8005510:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	2b04      	cmp	r3, #4
 8005518:	d117      	bne.n	800554a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	4313      	orrs	r3, r2
 8005522:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00e      	beq.n	800554a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 fadf 	bl	8005af0 <DMA_CheckFifoParam>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d008      	beq.n	800554a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2240      	movs	r2, #64	; 0x40
 800553c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005546:	2301      	movs	r3, #1
 8005548:	e016      	b.n	8005578 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 fa96 	bl	8005a84 <DMA_CalcBaseAndBitshift>
 8005558:	4603      	mov	r3, r0
 800555a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005560:	223f      	movs	r2, #63	; 0x3f
 8005562:	409a      	lsls	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	f010803f 	.word	0xf010803f

08005584 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
 8005590:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005592:	2300      	movs	r3, #0
 8005594:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800559a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d101      	bne.n	80055aa <HAL_DMA_Start_IT+0x26>
 80055a6:	2302      	movs	r3, #2
 80055a8:	e040      	b.n	800562c <HAL_DMA_Start_IT+0xa8>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d12f      	bne.n	800561e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2202      	movs	r2, #2
 80055c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	68b9      	ldr	r1, [r7, #8]
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f000 fa28 	bl	8005a28 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055dc:	223f      	movs	r2, #63	; 0x3f
 80055de:	409a      	lsls	r2, r3
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f042 0216 	orr.w	r2, r2, #22
 80055f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d007      	beq.n	800560c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f042 0208 	orr.w	r2, r2, #8
 800560a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f042 0201 	orr.w	r2, r2, #1
 800561a:	601a      	str	r2, [r3, #0]
 800561c:	e005      	b.n	800562a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005626:	2302      	movs	r3, #2
 8005628:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800562a:	7dfb      	ldrb	r3, [r7, #23]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3718      	adds	r7, #24
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005640:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005642:	f7fe fd35 	bl	80040b0 <HAL_GetTick>
 8005646:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b02      	cmp	r3, #2
 8005652:	d008      	beq.n	8005666 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2280      	movs	r2, #128	; 0x80
 8005658:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e052      	b.n	800570c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 0216 	bic.w	r2, r2, #22
 8005674:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	695a      	ldr	r2, [r3, #20]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005684:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568a:	2b00      	cmp	r3, #0
 800568c:	d103      	bne.n	8005696 <HAL_DMA_Abort+0x62>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005692:	2b00      	cmp	r3, #0
 8005694:	d007      	beq.n	80056a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f022 0208 	bic.w	r2, r2, #8
 80056a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 0201 	bic.w	r2, r2, #1
 80056b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056b6:	e013      	b.n	80056e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056b8:	f7fe fcfa 	bl	80040b0 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b05      	cmp	r3, #5
 80056c4:	d90c      	bls.n	80056e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2220      	movs	r2, #32
 80056ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2203      	movs	r2, #3
 80056d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e015      	b.n	800570c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e4      	bne.n	80056b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056f2:	223f      	movs	r2, #63	; 0x3f
 80056f4:	409a      	lsls	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800571c:	2300      	movs	r3, #0
 800571e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005720:	4b8e      	ldr	r3, [pc, #568]	; (800595c <HAL_DMA_IRQHandler+0x248>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a8e      	ldr	r2, [pc, #568]	; (8005960 <HAL_DMA_IRQHandler+0x24c>)
 8005726:	fba2 2303 	umull	r2, r3, r2, r3
 800572a:	0a9b      	lsrs	r3, r3, #10
 800572c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005732:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800573e:	2208      	movs	r2, #8
 8005740:	409a      	lsls	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	4013      	ands	r3, r2
 8005746:	2b00      	cmp	r3, #0
 8005748:	d01a      	beq.n	8005780 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0304 	and.w	r3, r3, #4
 8005754:	2b00      	cmp	r3, #0
 8005756:	d013      	beq.n	8005780 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f022 0204 	bic.w	r2, r2, #4
 8005766:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800576c:	2208      	movs	r2, #8
 800576e:	409a      	lsls	r2, r3
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005778:	f043 0201 	orr.w	r2, r3, #1
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005784:	2201      	movs	r2, #1
 8005786:	409a      	lsls	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4013      	ands	r3, r2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d012      	beq.n	80057b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00b      	beq.n	80057b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057a2:	2201      	movs	r2, #1
 80057a4:	409a      	lsls	r2, r3
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ae:	f043 0202 	orr.w	r2, r3, #2
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ba:	2204      	movs	r2, #4
 80057bc:	409a      	lsls	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	4013      	ands	r3, r2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d012      	beq.n	80057ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00b      	beq.n	80057ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057d8:	2204      	movs	r2, #4
 80057da:	409a      	lsls	r2, r3
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e4:	f043 0204 	orr.w	r2, r3, #4
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f0:	2210      	movs	r2, #16
 80057f2:	409a      	lsls	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	4013      	ands	r3, r2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d043      	beq.n	8005884 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0308 	and.w	r3, r3, #8
 8005806:	2b00      	cmp	r3, #0
 8005808:	d03c      	beq.n	8005884 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800580e:	2210      	movs	r2, #16
 8005810:	409a      	lsls	r2, r3
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d018      	beq.n	8005856 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d108      	bne.n	8005844 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005836:	2b00      	cmp	r3, #0
 8005838:	d024      	beq.n	8005884 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	4798      	blx	r3
 8005842:	e01f      	b.n	8005884 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005848:	2b00      	cmp	r3, #0
 800584a:	d01b      	beq.n	8005884 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	4798      	blx	r3
 8005854:	e016      	b.n	8005884 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005860:	2b00      	cmp	r3, #0
 8005862:	d107      	bne.n	8005874 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f022 0208 	bic.w	r2, r2, #8
 8005872:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005888:	2220      	movs	r2, #32
 800588a:	409a      	lsls	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4013      	ands	r3, r2
 8005890:	2b00      	cmp	r3, #0
 8005892:	f000 808f 	beq.w	80059b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0310 	and.w	r3, r3, #16
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 8087 	beq.w	80059b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058aa:	2220      	movs	r2, #32
 80058ac:	409a      	lsls	r2, r3
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b05      	cmp	r3, #5
 80058bc:	d136      	bne.n	800592c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0216 	bic.w	r2, r2, #22
 80058cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	695a      	ldr	r2, [r3, #20]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d103      	bne.n	80058ee <HAL_DMA_IRQHandler+0x1da>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d007      	beq.n	80058fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 0208 	bic.w	r2, r2, #8
 80058fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005902:	223f      	movs	r2, #63	; 0x3f
 8005904:	409a      	lsls	r2, r3
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800591e:	2b00      	cmp	r3, #0
 8005920:	d07e      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	4798      	blx	r3
        }
        return;
 800592a:	e079      	b.n	8005a20 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d01d      	beq.n	8005976 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10d      	bne.n	8005964 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800594c:	2b00      	cmp	r3, #0
 800594e:	d031      	beq.n	80059b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	4798      	blx	r3
 8005958:	e02c      	b.n	80059b4 <HAL_DMA_IRQHandler+0x2a0>
 800595a:	bf00      	nop
 800595c:	200006ec 	.word	0x200006ec
 8005960:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005968:	2b00      	cmp	r3, #0
 800596a:	d023      	beq.n	80059b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	4798      	blx	r3
 8005974:	e01e      	b.n	80059b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10f      	bne.n	80059a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f022 0210 	bic.w	r2, r2, #16
 8005992:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d032      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d022      	beq.n	8005a0e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2205      	movs	r2, #5
 80059cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f022 0201 	bic.w	r2, r2, #1
 80059de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	3301      	adds	r3, #1
 80059e4:	60bb      	str	r3, [r7, #8]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d307      	bcc.n	80059fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1f2      	bne.n	80059e0 <HAL_DMA_IRQHandler+0x2cc>
 80059fa:	e000      	b.n	80059fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80059fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d005      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	4798      	blx	r3
 8005a1e:	e000      	b.n	8005a22 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005a20:	bf00      	nop
    }
  }
}
 8005a22:	3718      	adds	r7, #24
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
 8005a34:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a44:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	683a      	ldr	r2, [r7, #0]
 8005a4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	2b40      	cmp	r3, #64	; 0x40
 8005a54:	d108      	bne.n	8005a68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005a66:	e007      	b.n	8005a78 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	60da      	str	r2, [r3, #12]
}
 8005a78:	bf00      	nop
 8005a7a:	3714      	adds	r7, #20
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	3b10      	subs	r3, #16
 8005a94:	4a14      	ldr	r2, [pc, #80]	; (8005ae8 <DMA_CalcBaseAndBitshift+0x64>)
 8005a96:	fba2 2303 	umull	r2, r3, r2, r3
 8005a9a:	091b      	lsrs	r3, r3, #4
 8005a9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005a9e:	4a13      	ldr	r2, [pc, #76]	; (8005aec <DMA_CalcBaseAndBitshift+0x68>)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2b03      	cmp	r3, #3
 8005ab0:	d909      	bls.n	8005ac6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005aba:	f023 0303 	bic.w	r3, r3, #3
 8005abe:	1d1a      	adds	r2, r3, #4
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	659a      	str	r2, [r3, #88]	; 0x58
 8005ac4:	e007      	b.n	8005ad6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005ace:	f023 0303 	bic.w	r3, r3, #3
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	aaaaaaab 	.word	0xaaaaaaab
 8005aec:	0800a1dc 	.word	0x0800a1dc

08005af0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005af8:	2300      	movs	r3, #0
 8005afa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d11f      	bne.n	8005b4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	2b03      	cmp	r3, #3
 8005b0e:	d856      	bhi.n	8005bbe <DMA_CheckFifoParam+0xce>
 8005b10:	a201      	add	r2, pc, #4	; (adr r2, 8005b18 <DMA_CheckFifoParam+0x28>)
 8005b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b16:	bf00      	nop
 8005b18:	08005b29 	.word	0x08005b29
 8005b1c:	08005b3b 	.word	0x08005b3b
 8005b20:	08005b29 	.word	0x08005b29
 8005b24:	08005bbf 	.word	0x08005bbf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d046      	beq.n	8005bc2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b38:	e043      	b.n	8005bc2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b42:	d140      	bne.n	8005bc6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b48:	e03d      	b.n	8005bc6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b52:	d121      	bne.n	8005b98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2b03      	cmp	r3, #3
 8005b58:	d837      	bhi.n	8005bca <DMA_CheckFifoParam+0xda>
 8005b5a:	a201      	add	r2, pc, #4	; (adr r2, 8005b60 <DMA_CheckFifoParam+0x70>)
 8005b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b60:	08005b71 	.word	0x08005b71
 8005b64:	08005b77 	.word	0x08005b77
 8005b68:	08005b71 	.word	0x08005b71
 8005b6c:	08005b89 	.word	0x08005b89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	73fb      	strb	r3, [r7, #15]
      break;
 8005b74:	e030      	b.n	8005bd8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d025      	beq.n	8005bce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b86:	e022      	b.n	8005bce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b90:	d11f      	bne.n	8005bd2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005b96:	e01c      	b.n	8005bd2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d903      	bls.n	8005ba6 <DMA_CheckFifoParam+0xb6>
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	2b03      	cmp	r3, #3
 8005ba2:	d003      	beq.n	8005bac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005ba4:	e018      	b.n	8005bd8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	73fb      	strb	r3, [r7, #15]
      break;
 8005baa:	e015      	b.n	8005bd8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00e      	beq.n	8005bd6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	73fb      	strb	r3, [r7, #15]
      break;
 8005bbc:	e00b      	b.n	8005bd6 <DMA_CheckFifoParam+0xe6>
      break;
 8005bbe:	bf00      	nop
 8005bc0:	e00a      	b.n	8005bd8 <DMA_CheckFifoParam+0xe8>
      break;
 8005bc2:	bf00      	nop
 8005bc4:	e008      	b.n	8005bd8 <DMA_CheckFifoParam+0xe8>
      break;
 8005bc6:	bf00      	nop
 8005bc8:	e006      	b.n	8005bd8 <DMA_CheckFifoParam+0xe8>
      break;
 8005bca:	bf00      	nop
 8005bcc:	e004      	b.n	8005bd8 <DMA_CheckFifoParam+0xe8>
      break;
 8005bce:	bf00      	nop
 8005bd0:	e002      	b.n	8005bd8 <DMA_CheckFifoParam+0xe8>
      break;   
 8005bd2:	bf00      	nop
 8005bd4:	e000      	b.n	8005bd8 <DMA_CheckFifoParam+0xe8>
      break;
 8005bd6:	bf00      	nop
    }
  } 
  
  return status; 
 8005bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop

08005be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b089      	sub	sp, #36	; 0x24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005bfe:	2300      	movs	r3, #0
 8005c00:	61fb      	str	r3, [r7, #28]
 8005c02:	e159      	b.n	8005eb8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c04:	2201      	movs	r2, #1
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	4013      	ands	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	f040 8148 	bne.w	8005eb2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f003 0303 	and.w	r3, r3, #3
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d005      	beq.n	8005c3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d130      	bne.n	8005c9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	005b      	lsls	r3, r3, #1
 8005c44:	2203      	movs	r2, #3
 8005c46:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4a:	43db      	mvns	r3, r3
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	4013      	ands	r3, r2
 8005c50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5e:	69ba      	ldr	r2, [r7, #24]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c70:	2201      	movs	r2, #1
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	fa02 f303 	lsl.w	r3, r2, r3
 8005c78:	43db      	mvns	r3, r3
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	091b      	lsrs	r3, r3, #4
 8005c86:	f003 0201 	and.w	r2, r3, #1
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f003 0303 	and.w	r3, r3, #3
 8005ca4:	2b03      	cmp	r3, #3
 8005ca6:	d017      	beq.n	8005cd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	005b      	lsls	r3, r3, #1
 8005cb2:	2203      	movs	r2, #3
 8005cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb8:	43db      	mvns	r3, r3
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ccc:	69ba      	ldr	r2, [r7, #24]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f003 0303 	and.w	r3, r3, #3
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d123      	bne.n	8005d2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	08da      	lsrs	r2, r3, #3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3208      	adds	r2, #8
 8005cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	f003 0307 	and.w	r3, r3, #7
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	220f      	movs	r2, #15
 8005cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005d00:	43db      	mvns	r3, r3
 8005d02:	69ba      	ldr	r2, [r7, #24]
 8005d04:	4013      	ands	r3, r2
 8005d06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	691a      	ldr	r2, [r3, #16]
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	f003 0307 	and.w	r3, r3, #7
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	fa02 f303 	lsl.w	r3, r2, r3
 8005d18:	69ba      	ldr	r2, [r7, #24]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	08da      	lsrs	r2, r3, #3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	3208      	adds	r2, #8
 8005d26:	69b9      	ldr	r1, [r7, #24]
 8005d28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	005b      	lsls	r3, r3, #1
 8005d36:	2203      	movs	r2, #3
 8005d38:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3c:	43db      	mvns	r3, r3
 8005d3e:	69ba      	ldr	r2, [r7, #24]
 8005d40:	4013      	ands	r3, r2
 8005d42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f003 0203 	and.w	r2, r3, #3
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	005b      	lsls	r3, r3, #1
 8005d50:	fa02 f303 	lsl.w	r3, r2, r3
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 80a2 	beq.w	8005eb2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d6e:	2300      	movs	r3, #0
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	4b57      	ldr	r3, [pc, #348]	; (8005ed0 <HAL_GPIO_Init+0x2e8>)
 8005d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d76:	4a56      	ldr	r2, [pc, #344]	; (8005ed0 <HAL_GPIO_Init+0x2e8>)
 8005d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8005d7e:	4b54      	ldr	r3, [pc, #336]	; (8005ed0 <HAL_GPIO_Init+0x2e8>)
 8005d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d86:	60fb      	str	r3, [r7, #12]
 8005d88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d8a:	4a52      	ldr	r2, [pc, #328]	; (8005ed4 <HAL_GPIO_Init+0x2ec>)
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	089b      	lsrs	r3, r3, #2
 8005d90:	3302      	adds	r3, #2
 8005d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	f003 0303 	and.w	r3, r3, #3
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	220f      	movs	r2, #15
 8005da2:	fa02 f303 	lsl.w	r3, r2, r3
 8005da6:	43db      	mvns	r3, r3
 8005da8:	69ba      	ldr	r2, [r7, #24]
 8005daa:	4013      	ands	r3, r2
 8005dac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a49      	ldr	r2, [pc, #292]	; (8005ed8 <HAL_GPIO_Init+0x2f0>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d019      	beq.n	8005dea <HAL_GPIO_Init+0x202>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a48      	ldr	r2, [pc, #288]	; (8005edc <HAL_GPIO_Init+0x2f4>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d013      	beq.n	8005de6 <HAL_GPIO_Init+0x1fe>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a47      	ldr	r2, [pc, #284]	; (8005ee0 <HAL_GPIO_Init+0x2f8>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d00d      	beq.n	8005de2 <HAL_GPIO_Init+0x1fa>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a46      	ldr	r2, [pc, #280]	; (8005ee4 <HAL_GPIO_Init+0x2fc>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d007      	beq.n	8005dde <HAL_GPIO_Init+0x1f6>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a45      	ldr	r2, [pc, #276]	; (8005ee8 <HAL_GPIO_Init+0x300>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d101      	bne.n	8005dda <HAL_GPIO_Init+0x1f2>
 8005dd6:	2304      	movs	r3, #4
 8005dd8:	e008      	b.n	8005dec <HAL_GPIO_Init+0x204>
 8005dda:	2307      	movs	r3, #7
 8005ddc:	e006      	b.n	8005dec <HAL_GPIO_Init+0x204>
 8005dde:	2303      	movs	r3, #3
 8005de0:	e004      	b.n	8005dec <HAL_GPIO_Init+0x204>
 8005de2:	2302      	movs	r3, #2
 8005de4:	e002      	b.n	8005dec <HAL_GPIO_Init+0x204>
 8005de6:	2301      	movs	r3, #1
 8005de8:	e000      	b.n	8005dec <HAL_GPIO_Init+0x204>
 8005dea:	2300      	movs	r3, #0
 8005dec:	69fa      	ldr	r2, [r7, #28]
 8005dee:	f002 0203 	and.w	r2, r2, #3
 8005df2:	0092      	lsls	r2, r2, #2
 8005df4:	4093      	lsls	r3, r2
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005dfc:	4935      	ldr	r1, [pc, #212]	; (8005ed4 <HAL_GPIO_Init+0x2ec>)
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	089b      	lsrs	r3, r3, #2
 8005e02:	3302      	adds	r3, #2
 8005e04:	69ba      	ldr	r2, [r7, #24]
 8005e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e0a:	4b38      	ldr	r3, [pc, #224]	; (8005eec <HAL_GPIO_Init+0x304>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	43db      	mvns	r3, r3
 8005e14:	69ba      	ldr	r2, [r7, #24]
 8005e16:	4013      	ands	r3, r2
 8005e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005e26:	69ba      	ldr	r2, [r7, #24]
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e2e:	4a2f      	ldr	r2, [pc, #188]	; (8005eec <HAL_GPIO_Init+0x304>)
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e34:	4b2d      	ldr	r3, [pc, #180]	; (8005eec <HAL_GPIO_Init+0x304>)
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	43db      	mvns	r3, r3
 8005e3e:	69ba      	ldr	r2, [r7, #24]
 8005e40:	4013      	ands	r3, r2
 8005e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d003      	beq.n	8005e58 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e58:	4a24      	ldr	r2, [pc, #144]	; (8005eec <HAL_GPIO_Init+0x304>)
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005e5e:	4b23      	ldr	r3, [pc, #140]	; (8005eec <HAL_GPIO_Init+0x304>)
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	43db      	mvns	r3, r3
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e82:	4a1a      	ldr	r2, [pc, #104]	; (8005eec <HAL_GPIO_Init+0x304>)
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e88:	4b18      	ldr	r3, [pc, #96]	; (8005eec <HAL_GPIO_Init+0x304>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	43db      	mvns	r3, r3
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	4013      	ands	r3, r2
 8005e96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d003      	beq.n	8005eac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005ea4:	69ba      	ldr	r2, [r7, #24]
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005eac:	4a0f      	ldr	r2, [pc, #60]	; (8005eec <HAL_GPIO_Init+0x304>)
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	61fb      	str	r3, [r7, #28]
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	2b0f      	cmp	r3, #15
 8005ebc:	f67f aea2 	bls.w	8005c04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ec0:	bf00      	nop
 8005ec2:	bf00      	nop
 8005ec4:	3724      	adds	r7, #36	; 0x24
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	40023800 	.word	0x40023800
 8005ed4:	40013800 	.word	0x40013800
 8005ed8:	40020000 	.word	0x40020000
 8005edc:	40020400 	.word	0x40020400
 8005ee0:	40020800 	.word	0x40020800
 8005ee4:	40020c00 	.word	0x40020c00
 8005ee8:	40021000 	.word	0x40021000
 8005eec:	40013c00 	.word	0x40013c00

08005ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	807b      	strh	r3, [r7, #2]
 8005efc:	4613      	mov	r3, r2
 8005efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f00:	787b      	ldrb	r3, [r7, #1]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f06:	887a      	ldrh	r2, [r7, #2]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f0c:	e003      	b.n	8005f16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f0e:	887b      	ldrh	r3, [r7, #2]
 8005f10:	041a      	lsls	r2, r3, #16
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	619a      	str	r2, [r3, #24]
}
 8005f16:	bf00      	nop
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
	...

08005f24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e12b      	b.n	800618e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d106      	bne.n	8005f50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7fd fe16 	bl	8003b7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2224      	movs	r2, #36	; 0x24
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 0201 	bic.w	r2, r2, #1
 8005f66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005f88:	f001 fbbc 	bl	8007704 <HAL_RCC_GetPCLK1Freq>
 8005f8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	4a81      	ldr	r2, [pc, #516]	; (8006198 <HAL_I2C_Init+0x274>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d807      	bhi.n	8005fa8 <HAL_I2C_Init+0x84>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4a80      	ldr	r2, [pc, #512]	; (800619c <HAL_I2C_Init+0x278>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	bf94      	ite	ls
 8005fa0:	2301      	movls	r3, #1
 8005fa2:	2300      	movhi	r3, #0
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	e006      	b.n	8005fb6 <HAL_I2C_Init+0x92>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	4a7d      	ldr	r2, [pc, #500]	; (80061a0 <HAL_I2C_Init+0x27c>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	bf94      	ite	ls
 8005fb0:	2301      	movls	r3, #1
 8005fb2:	2300      	movhi	r3, #0
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d001      	beq.n	8005fbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e0e7      	b.n	800618e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	4a78      	ldr	r2, [pc, #480]	; (80061a4 <HAL_I2C_Init+0x280>)
 8005fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc6:	0c9b      	lsrs	r3, r3, #18
 8005fc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	6a1b      	ldr	r3, [r3, #32]
 8005fe4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	4a6a      	ldr	r2, [pc, #424]	; (8006198 <HAL_I2C_Init+0x274>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d802      	bhi.n	8005ff8 <HAL_I2C_Init+0xd4>
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	e009      	b.n	800600c <HAL_I2C_Init+0xe8>
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005ffe:	fb02 f303 	mul.w	r3, r2, r3
 8006002:	4a69      	ldr	r2, [pc, #420]	; (80061a8 <HAL_I2C_Init+0x284>)
 8006004:	fba2 2303 	umull	r2, r3, r2, r3
 8006008:	099b      	lsrs	r3, r3, #6
 800600a:	3301      	adds	r3, #1
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	6812      	ldr	r2, [r2, #0]
 8006010:	430b      	orrs	r3, r1
 8006012:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	69db      	ldr	r3, [r3, #28]
 800601a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800601e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	495c      	ldr	r1, [pc, #368]	; (8006198 <HAL_I2C_Init+0x274>)
 8006028:	428b      	cmp	r3, r1
 800602a:	d819      	bhi.n	8006060 <HAL_I2C_Init+0x13c>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	1e59      	subs	r1, r3, #1
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	005b      	lsls	r3, r3, #1
 8006036:	fbb1 f3f3 	udiv	r3, r1, r3
 800603a:	1c59      	adds	r1, r3, #1
 800603c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006040:	400b      	ands	r3, r1
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00a      	beq.n	800605c <HAL_I2C_Init+0x138>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	1e59      	subs	r1, r3, #1
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	005b      	lsls	r3, r3, #1
 8006050:	fbb1 f3f3 	udiv	r3, r1, r3
 8006054:	3301      	adds	r3, #1
 8006056:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800605a:	e051      	b.n	8006100 <HAL_I2C_Init+0x1dc>
 800605c:	2304      	movs	r3, #4
 800605e:	e04f      	b.n	8006100 <HAL_I2C_Init+0x1dc>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d111      	bne.n	800608c <HAL_I2C_Init+0x168>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	1e58      	subs	r0, r3, #1
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6859      	ldr	r1, [r3, #4]
 8006070:	460b      	mov	r3, r1
 8006072:	005b      	lsls	r3, r3, #1
 8006074:	440b      	add	r3, r1
 8006076:	fbb0 f3f3 	udiv	r3, r0, r3
 800607a:	3301      	adds	r3, #1
 800607c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006080:	2b00      	cmp	r3, #0
 8006082:	bf0c      	ite	eq
 8006084:	2301      	moveq	r3, #1
 8006086:	2300      	movne	r3, #0
 8006088:	b2db      	uxtb	r3, r3
 800608a:	e012      	b.n	80060b2 <HAL_I2C_Init+0x18e>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	1e58      	subs	r0, r3, #1
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6859      	ldr	r1, [r3, #4]
 8006094:	460b      	mov	r3, r1
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	440b      	add	r3, r1
 800609a:	0099      	lsls	r1, r3, #2
 800609c:	440b      	add	r3, r1
 800609e:	fbb0 f3f3 	udiv	r3, r0, r3
 80060a2:	3301      	adds	r3, #1
 80060a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	bf0c      	ite	eq
 80060ac:	2301      	moveq	r3, #1
 80060ae:	2300      	movne	r3, #0
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <HAL_I2C_Init+0x196>
 80060b6:	2301      	movs	r3, #1
 80060b8:	e022      	b.n	8006100 <HAL_I2C_Init+0x1dc>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10e      	bne.n	80060e0 <HAL_I2C_Init+0x1bc>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	1e58      	subs	r0, r3, #1
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6859      	ldr	r1, [r3, #4]
 80060ca:	460b      	mov	r3, r1
 80060cc:	005b      	lsls	r3, r3, #1
 80060ce:	440b      	add	r3, r1
 80060d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80060d4:	3301      	adds	r3, #1
 80060d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060de:	e00f      	b.n	8006100 <HAL_I2C_Init+0x1dc>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	1e58      	subs	r0, r3, #1
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6859      	ldr	r1, [r3, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	440b      	add	r3, r1
 80060ee:	0099      	lsls	r1, r3, #2
 80060f0:	440b      	add	r3, r1
 80060f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80060f6:	3301      	adds	r3, #1
 80060f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006100:	6879      	ldr	r1, [r7, #4]
 8006102:	6809      	ldr	r1, [r1, #0]
 8006104:	4313      	orrs	r3, r2
 8006106:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	69da      	ldr	r2, [r3, #28]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	431a      	orrs	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	430a      	orrs	r2, r1
 8006122:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800612e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	6911      	ldr	r1, [r2, #16]
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	68d2      	ldr	r2, [r2, #12]
 800613a:	4311      	orrs	r1, r2
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	6812      	ldr	r2, [r2, #0]
 8006140:	430b      	orrs	r3, r1
 8006142:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	695a      	ldr	r2, [r3, #20]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	431a      	orrs	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	430a      	orrs	r2, r1
 800615e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f042 0201 	orr.w	r2, r2, #1
 800616e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2220      	movs	r2, #32
 800617a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	000186a0 	.word	0x000186a0
 800619c:	001e847f 	.word	0x001e847f
 80061a0:	003d08ff 	.word	0x003d08ff
 80061a4:	431bde83 	.word	0x431bde83
 80061a8:	10624dd3 	.word	0x10624dd3

080061ac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b088      	sub	sp, #32
 80061b0:	af02      	add	r7, sp, #8
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	4608      	mov	r0, r1
 80061b6:	4611      	mov	r1, r2
 80061b8:	461a      	mov	r2, r3
 80061ba:	4603      	mov	r3, r0
 80061bc:	817b      	strh	r3, [r7, #10]
 80061be:	460b      	mov	r3, r1
 80061c0:	813b      	strh	r3, [r7, #8]
 80061c2:	4613      	mov	r3, r2
 80061c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80061c6:	f7fd ff73 	bl	80040b0 <HAL_GetTick>
 80061ca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b20      	cmp	r3, #32
 80061d6:	f040 80d9 	bne.w	800638c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	2319      	movs	r3, #25
 80061e0:	2201      	movs	r2, #1
 80061e2:	496d      	ldr	r1, [pc, #436]	; (8006398 <HAL_I2C_Mem_Write+0x1ec>)
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 fc7f 	bl	8006ae8 <I2C_WaitOnFlagUntilTimeout>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d001      	beq.n	80061f4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80061f0:	2302      	movs	r3, #2
 80061f2:	e0cc      	b.n	800638e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d101      	bne.n	8006202 <HAL_I2C_Mem_Write+0x56>
 80061fe:	2302      	movs	r3, #2
 8006200:	e0c5      	b.n	800638e <HAL_I2C_Mem_Write+0x1e2>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	2b01      	cmp	r3, #1
 8006216:	d007      	beq.n	8006228 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f042 0201 	orr.w	r2, r2, #1
 8006226:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006236:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2221      	movs	r2, #33	; 0x21
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2240      	movs	r2, #64	; 0x40
 8006244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6a3a      	ldr	r2, [r7, #32]
 8006252:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006258:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800625e:	b29a      	uxth	r2, r3
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	4a4d      	ldr	r2, [pc, #308]	; (800639c <HAL_I2C_Mem_Write+0x1f0>)
 8006268:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800626a:	88f8      	ldrh	r0, [r7, #6]
 800626c:	893a      	ldrh	r2, [r7, #8]
 800626e:	8979      	ldrh	r1, [r7, #10]
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	9301      	str	r3, [sp, #4]
 8006274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	4603      	mov	r3, r0
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f000 fab6 	bl	80067ec <I2C_RequestMemoryWrite>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d052      	beq.n	800632c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e081      	b.n	800638e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 fd00 	bl	8006c94 <I2C_WaitOnTXEFlagUntilTimeout>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00d      	beq.n	80062b6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629e:	2b04      	cmp	r3, #4
 80062a0:	d107      	bne.n	80062b2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e06b      	b.n	800638e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ba:	781a      	ldrb	r2, [r3, #0]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c6:	1c5a      	adds	r2, r3, #1
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d0:	3b01      	subs	r3, #1
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062dc:	b29b      	uxth	r3, r3
 80062de:	3b01      	subs	r3, #1
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	f003 0304 	and.w	r3, r3, #4
 80062f0:	2b04      	cmp	r3, #4
 80062f2:	d11b      	bne.n	800632c <HAL_I2C_Mem_Write+0x180>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d017      	beq.n	800632c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006300:	781a      	ldrb	r2, [r3, #0]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630c:	1c5a      	adds	r2, r3, #1
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006316:	3b01      	subs	r3, #1
 8006318:	b29a      	uxth	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006322:	b29b      	uxth	r3, r3
 8006324:	3b01      	subs	r3, #1
 8006326:	b29a      	uxth	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1aa      	bne.n	800628a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006338:	68f8      	ldr	r0, [r7, #12]
 800633a:	f000 fcec 	bl	8006d16 <I2C_WaitOnBTFFlagUntilTimeout>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00d      	beq.n	8006360 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006348:	2b04      	cmp	r3, #4
 800634a:	d107      	bne.n	800635c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800635a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e016      	b.n	800638e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800636e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2220      	movs	r2, #32
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006388:	2300      	movs	r3, #0
 800638a:	e000      	b.n	800638e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800638c:	2302      	movs	r3, #2
  }
}
 800638e:	4618      	mov	r0, r3
 8006390:	3718      	adds	r7, #24
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	00100002 	.word	0x00100002
 800639c:	ffff0000 	.word	0xffff0000

080063a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b08c      	sub	sp, #48	; 0x30
 80063a4:	af02      	add	r7, sp, #8
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	4608      	mov	r0, r1
 80063aa:	4611      	mov	r1, r2
 80063ac:	461a      	mov	r2, r3
 80063ae:	4603      	mov	r3, r0
 80063b0:	817b      	strh	r3, [r7, #10]
 80063b2:	460b      	mov	r3, r1
 80063b4:	813b      	strh	r3, [r7, #8]
 80063b6:	4613      	mov	r3, r2
 80063b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063ba:	f7fd fe79 	bl	80040b0 <HAL_GetTick>
 80063be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	2b20      	cmp	r3, #32
 80063ca:	f040 8208 	bne.w	80067de <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d0:	9300      	str	r3, [sp, #0]
 80063d2:	2319      	movs	r3, #25
 80063d4:	2201      	movs	r2, #1
 80063d6:	497b      	ldr	r1, [pc, #492]	; (80065c4 <HAL_I2C_Mem_Read+0x224>)
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f000 fb85 	bl	8006ae8 <I2C_WaitOnFlagUntilTimeout>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d001      	beq.n	80063e8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80063e4:	2302      	movs	r3, #2
 80063e6:	e1fb      	b.n	80067e0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d101      	bne.n	80063f6 <HAL_I2C_Mem_Read+0x56>
 80063f2:	2302      	movs	r3, #2
 80063f4:	e1f4      	b.n	80067e0 <HAL_I2C_Mem_Read+0x440>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	2b01      	cmp	r3, #1
 800640a:	d007      	beq.n	800641c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f042 0201 	orr.w	r2, r2, #1
 800641a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800642a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2222      	movs	r2, #34	; 0x22
 8006430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2240      	movs	r2, #64	; 0x40
 8006438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006446:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800644c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006452:	b29a      	uxth	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	4a5b      	ldr	r2, [pc, #364]	; (80065c8 <HAL_I2C_Mem_Read+0x228>)
 800645c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800645e:	88f8      	ldrh	r0, [r7, #6]
 8006460:	893a      	ldrh	r2, [r7, #8]
 8006462:	8979      	ldrh	r1, [r7, #10]
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	9301      	str	r3, [sp, #4]
 8006468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	4603      	mov	r3, r0
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f000 fa52 	bl	8006918 <I2C_RequestMemoryRead>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d001      	beq.n	800647e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e1b0      	b.n	80067e0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006482:	2b00      	cmp	r3, #0
 8006484:	d113      	bne.n	80064ae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006486:	2300      	movs	r3, #0
 8006488:	623b      	str	r3, [r7, #32]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	695b      	ldr	r3, [r3, #20]
 8006490:	623b      	str	r3, [r7, #32]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	623b      	str	r3, [r7, #32]
 800649a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064aa:	601a      	str	r2, [r3, #0]
 80064ac:	e184      	b.n	80067b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d11b      	bne.n	80064ee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064c6:	2300      	movs	r3, #0
 80064c8:	61fb      	str	r3, [r7, #28]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	61fb      	str	r3, [r7, #28]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	61fb      	str	r3, [r7, #28]
 80064da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064ea:	601a      	str	r2, [r3, #0]
 80064ec:	e164      	b.n	80067b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d11b      	bne.n	800652e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006504:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006514:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006516:	2300      	movs	r3, #0
 8006518:	61bb      	str	r3, [r7, #24]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	61bb      	str	r3, [r7, #24]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	61bb      	str	r3, [r7, #24]
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	e144      	b.n	80067b8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800652e:	2300      	movs	r3, #0
 8006530:	617b      	str	r3, [r7, #20]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	617b      	str	r3, [r7, #20]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	617b      	str	r3, [r7, #20]
 8006542:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006544:	e138      	b.n	80067b8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800654a:	2b03      	cmp	r3, #3
 800654c:	f200 80f1 	bhi.w	8006732 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006554:	2b01      	cmp	r3, #1
 8006556:	d123      	bne.n	80065a0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800655a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f000 fc1b 	bl	8006d98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d001      	beq.n	800656c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e139      	b.n	80067e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	691a      	ldr	r2, [r3, #16]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006576:	b2d2      	uxtb	r2, r2
 8006578:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006588:	3b01      	subs	r3, #1
 800658a:	b29a      	uxth	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006594:	b29b      	uxth	r3, r3
 8006596:	3b01      	subs	r3, #1
 8006598:	b29a      	uxth	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800659e:	e10b      	b.n	80067b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d14e      	bne.n	8006646 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ae:	2200      	movs	r2, #0
 80065b0:	4906      	ldr	r1, [pc, #24]	; (80065cc <HAL_I2C_Mem_Read+0x22c>)
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f000 fa98 	bl	8006ae8 <I2C_WaitOnFlagUntilTimeout>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d008      	beq.n	80065d0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e10e      	b.n	80067e0 <HAL_I2C_Mem_Read+0x440>
 80065c2:	bf00      	nop
 80065c4:	00100002 	.word	0x00100002
 80065c8:	ffff0000 	.word	0xffff0000
 80065cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	691a      	ldr	r2, [r3, #16]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ea:	b2d2      	uxtb	r2, r2
 80065ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f2:	1c5a      	adds	r2, r3, #1
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065fc:	3b01      	subs	r3, #1
 80065fe:	b29a      	uxth	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006608:	b29b      	uxth	r3, r3
 800660a:	3b01      	subs	r3, #1
 800660c:	b29a      	uxth	r2, r3
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	691a      	ldr	r2, [r3, #16]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661c:	b2d2      	uxtb	r2, r2
 800661e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006624:	1c5a      	adds	r2, r3, #1
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800662e:	3b01      	subs	r3, #1
 8006630:	b29a      	uxth	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663a:	b29b      	uxth	r3, r3
 800663c:	3b01      	subs	r3, #1
 800663e:	b29a      	uxth	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006644:	e0b8      	b.n	80067b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006648:	9300      	str	r3, [sp, #0]
 800664a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664c:	2200      	movs	r2, #0
 800664e:	4966      	ldr	r1, [pc, #408]	; (80067e8 <HAL_I2C_Mem_Read+0x448>)
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f000 fa49 	bl	8006ae8 <I2C_WaitOnFlagUntilTimeout>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e0bf      	b.n	80067e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800666e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	691a      	ldr	r2, [r3, #16]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667a:	b2d2      	uxtb	r2, r2
 800667c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006682:	1c5a      	adds	r2, r3, #1
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800668c:	3b01      	subs	r3, #1
 800668e:	b29a      	uxth	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006698:	b29b      	uxth	r3, r3
 800669a:	3b01      	subs	r3, #1
 800669c:	b29a      	uxth	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a4:	9300      	str	r3, [sp, #0]
 80066a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a8:	2200      	movs	r2, #0
 80066aa:	494f      	ldr	r1, [pc, #316]	; (80067e8 <HAL_I2C_Mem_Read+0x448>)
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 fa1b 	bl	8006ae8 <I2C_WaitOnFlagUntilTimeout>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d001      	beq.n	80066bc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e091      	b.n	80067e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	691a      	ldr	r2, [r3, #16]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d6:	b2d2      	uxtb	r2, r2
 80066d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066de:	1c5a      	adds	r2, r3, #1
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066e8:	3b01      	subs	r3, #1
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	3b01      	subs	r3, #1
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	691a      	ldr	r2, [r3, #16]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006708:	b2d2      	uxtb	r2, r2
 800670a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006710:	1c5a      	adds	r2, r3, #1
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800671a:	3b01      	subs	r3, #1
 800671c:	b29a      	uxth	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006726:	b29b      	uxth	r3, r3
 8006728:	3b01      	subs	r3, #1
 800672a:	b29a      	uxth	r2, r3
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006730:	e042      	b.n	80067b8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006734:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f000 fb2e 	bl	8006d98 <I2C_WaitOnRXNEFlagUntilTimeout>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d001      	beq.n	8006746 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e04c      	b.n	80067e0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	691a      	ldr	r2, [r3, #16]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006750:	b2d2      	uxtb	r2, r2
 8006752:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006758:	1c5a      	adds	r2, r3, #1
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006762:	3b01      	subs	r3, #1
 8006764:	b29a      	uxth	r2, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800676e:	b29b      	uxth	r3, r3
 8006770:	3b01      	subs	r3, #1
 8006772:	b29a      	uxth	r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	f003 0304 	and.w	r3, r3, #4
 8006782:	2b04      	cmp	r3, #4
 8006784:	d118      	bne.n	80067b8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	691a      	ldr	r2, [r3, #16]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006790:	b2d2      	uxtb	r2, r2
 8006792:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006798:	1c5a      	adds	r2, r3, #1
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067a2:	3b01      	subs	r3, #1
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	3b01      	subs	r3, #1
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f47f aec2 	bne.w	8006546 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2220      	movs	r2, #32
 80067c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80067da:	2300      	movs	r3, #0
 80067dc:	e000      	b.n	80067e0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80067de:	2302      	movs	r3, #2
  }
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3728      	adds	r7, #40	; 0x28
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	00010004 	.word	0x00010004

080067ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b088      	sub	sp, #32
 80067f0:	af02      	add	r7, sp, #8
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	4608      	mov	r0, r1
 80067f6:	4611      	mov	r1, r2
 80067f8:	461a      	mov	r2, r3
 80067fa:	4603      	mov	r3, r0
 80067fc:	817b      	strh	r3, [r7, #10]
 80067fe:	460b      	mov	r3, r1
 8006800:	813b      	strh	r3, [r7, #8]
 8006802:	4613      	mov	r3, r2
 8006804:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006814:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006818:	9300      	str	r3, [sp, #0]
 800681a:	6a3b      	ldr	r3, [r7, #32]
 800681c:	2200      	movs	r2, #0
 800681e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f000 f960 	bl	8006ae8 <I2C_WaitOnFlagUntilTimeout>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00d      	beq.n	800684a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800683c:	d103      	bne.n	8006846 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006844:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e05f      	b.n	800690a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800684a:	897b      	ldrh	r3, [r7, #10]
 800684c:	b2db      	uxtb	r3, r3
 800684e:	461a      	mov	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006858:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800685a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685c:	6a3a      	ldr	r2, [r7, #32]
 800685e:	492d      	ldr	r1, [pc, #180]	; (8006914 <I2C_RequestMemoryWrite+0x128>)
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f000 f998 	bl	8006b96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d001      	beq.n	8006870 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e04c      	b.n	800690a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006870:	2300      	movs	r3, #0
 8006872:	617b      	str	r3, [r7, #20]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	617b      	str	r3, [r7, #20]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	617b      	str	r3, [r7, #20]
 8006884:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006888:	6a39      	ldr	r1, [r7, #32]
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f000 fa02 	bl	8006c94 <I2C_WaitOnTXEFlagUntilTimeout>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00d      	beq.n	80068b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689a:	2b04      	cmp	r3, #4
 800689c:	d107      	bne.n	80068ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e02b      	b.n	800690a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80068b2:	88fb      	ldrh	r3, [r7, #6]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d105      	bne.n	80068c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80068b8:	893b      	ldrh	r3, [r7, #8]
 80068ba:	b2da      	uxtb	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	611a      	str	r2, [r3, #16]
 80068c2:	e021      	b.n	8006908 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80068c4:	893b      	ldrh	r3, [r7, #8]
 80068c6:	0a1b      	lsrs	r3, r3, #8
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d4:	6a39      	ldr	r1, [r7, #32]
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f000 f9dc 	bl	8006c94 <I2C_WaitOnTXEFlagUntilTimeout>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00d      	beq.n	80068fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e6:	2b04      	cmp	r3, #4
 80068e8:	d107      	bne.n	80068fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e005      	b.n	800690a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80068fe:	893b      	ldrh	r3, [r7, #8]
 8006900:	b2da      	uxtb	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3718      	adds	r7, #24
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	00010002 	.word	0x00010002

08006918 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b088      	sub	sp, #32
 800691c:	af02      	add	r7, sp, #8
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	4608      	mov	r0, r1
 8006922:	4611      	mov	r1, r2
 8006924:	461a      	mov	r2, r3
 8006926:	4603      	mov	r3, r0
 8006928:	817b      	strh	r3, [r7, #10]
 800692a:	460b      	mov	r3, r1
 800692c:	813b      	strh	r3, [r7, #8]
 800692e:	4613      	mov	r3, r2
 8006930:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006940:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006950:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	6a3b      	ldr	r3, [r7, #32]
 8006958:	2200      	movs	r2, #0
 800695a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f000 f8c2 	bl	8006ae8 <I2C_WaitOnFlagUntilTimeout>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00d      	beq.n	8006986 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006978:	d103      	bne.n	8006982 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006980:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e0aa      	b.n	8006adc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006986:	897b      	ldrh	r3, [r7, #10]
 8006988:	b2db      	uxtb	r3, r3
 800698a:	461a      	mov	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006994:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006998:	6a3a      	ldr	r2, [r7, #32]
 800699a:	4952      	ldr	r1, [pc, #328]	; (8006ae4 <I2C_RequestMemoryRead+0x1cc>)
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f000 f8fa 	bl	8006b96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d001      	beq.n	80069ac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e097      	b.n	8006adc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069ac:	2300      	movs	r3, #0
 80069ae:	617b      	str	r3, [r7, #20]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	617b      	str	r3, [r7, #20]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	617b      	str	r3, [r7, #20]
 80069c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069c4:	6a39      	ldr	r1, [r7, #32]
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f000 f964 	bl	8006c94 <I2C_WaitOnTXEFlagUntilTimeout>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00d      	beq.n	80069ee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d6:	2b04      	cmp	r3, #4
 80069d8:	d107      	bne.n	80069ea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e076      	b.n	8006adc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80069ee:	88fb      	ldrh	r3, [r7, #6]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d105      	bne.n	8006a00 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80069f4:	893b      	ldrh	r3, [r7, #8]
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	611a      	str	r2, [r3, #16]
 80069fe:	e021      	b.n	8006a44 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006a00:	893b      	ldrh	r3, [r7, #8]
 8006a02:	0a1b      	lsrs	r3, r3, #8
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	b2da      	uxtb	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a10:	6a39      	ldr	r1, [r7, #32]
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f000 f93e 	bl	8006c94 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00d      	beq.n	8006a3a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a22:	2b04      	cmp	r3, #4
 8006a24:	d107      	bne.n	8006a36 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e050      	b.n	8006adc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a3a:	893b      	ldrh	r3, [r7, #8]
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a46:	6a39      	ldr	r1, [r7, #32]
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f000 f923 	bl	8006c94 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00d      	beq.n	8006a70 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a58:	2b04      	cmp	r3, #4
 8006a5a:	d107      	bne.n	8006a6c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a6a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e035      	b.n	8006adc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a7e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a82:	9300      	str	r3, [sp, #0]
 8006a84:	6a3b      	ldr	r3, [r7, #32]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 f82b 	bl	8006ae8 <I2C_WaitOnFlagUntilTimeout>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00d      	beq.n	8006ab4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aa6:	d103      	bne.n	8006ab0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006aae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e013      	b.n	8006adc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006ab4:	897b      	ldrh	r3, [r7, #10]
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	f043 0301 	orr.w	r3, r3, #1
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	6a3a      	ldr	r2, [r7, #32]
 8006ac8:	4906      	ldr	r1, [pc, #24]	; (8006ae4 <I2C_RequestMemoryRead+0x1cc>)
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f000 f863 	bl	8006b96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e000      	b.n	8006adc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3718      	adds	r7, #24
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	00010002 	.word	0x00010002

08006ae8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	603b      	str	r3, [r7, #0]
 8006af4:	4613      	mov	r3, r2
 8006af6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006af8:	e025      	b.n	8006b46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b00:	d021      	beq.n	8006b46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b02:	f7fd fad5 	bl	80040b0 <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	683a      	ldr	r2, [r7, #0]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d302      	bcc.n	8006b18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d116      	bne.n	8006b46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2220      	movs	r2, #32
 8006b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b32:	f043 0220 	orr.w	r2, r3, #32
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e023      	b.n	8006b8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	0c1b      	lsrs	r3, r3, #16
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d10d      	bne.n	8006b6c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	695b      	ldr	r3, [r3, #20]
 8006b56:	43da      	mvns	r2, r3
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	bf0c      	ite	eq
 8006b62:	2301      	moveq	r3, #1
 8006b64:	2300      	movne	r3, #0
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	461a      	mov	r2, r3
 8006b6a:	e00c      	b.n	8006b86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	43da      	mvns	r2, r3
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	4013      	ands	r3, r2
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	bf0c      	ite	eq
 8006b7e:	2301      	moveq	r3, #1
 8006b80:	2300      	movne	r3, #0
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	461a      	mov	r2, r3
 8006b86:	79fb      	ldrb	r3, [r7, #7]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d0b6      	beq.n	8006afa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b084      	sub	sp, #16
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	60f8      	str	r0, [r7, #12]
 8006b9e:	60b9      	str	r1, [r7, #8]
 8006ba0:	607a      	str	r2, [r7, #4]
 8006ba2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ba4:	e051      	b.n	8006c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	695b      	ldr	r3, [r3, #20]
 8006bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bb4:	d123      	bne.n	8006bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bc4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006bce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2220      	movs	r2, #32
 8006bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bea:	f043 0204 	orr.w	r2, r3, #4
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e046      	b.n	8006c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c04:	d021      	beq.n	8006c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c06:	f7fd fa53 	bl	80040b0 <HAL_GetTick>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d302      	bcc.n	8006c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d116      	bne.n	8006c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2220      	movs	r2, #32
 8006c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c36:	f043 0220 	orr.w	r2, r3, #32
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e020      	b.n	8006c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	0c1b      	lsrs	r3, r3, #16
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d10c      	bne.n	8006c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	43da      	mvns	r2, r3
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	4013      	ands	r3, r2
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	bf14      	ite	ne
 8006c66:	2301      	movne	r3, #1
 8006c68:	2300      	moveq	r3, #0
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	e00b      	b.n	8006c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	43da      	mvns	r2, r3
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	4013      	ands	r3, r2
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	bf14      	ite	ne
 8006c80:	2301      	movne	r3, #1
 8006c82:	2300      	moveq	r3, #0
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d18d      	bne.n	8006ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ca0:	e02d      	b.n	8006cfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f000 f8ce 	bl	8006e44 <I2C_IsAcknowledgeFailed>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d001      	beq.n	8006cb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e02d      	b.n	8006d0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb8:	d021      	beq.n	8006cfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cba:	f7fd f9f9 	bl	80040b0 <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d302      	bcc.n	8006cd0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d116      	bne.n	8006cfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2220      	movs	r2, #32
 8006cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cea:	f043 0220 	orr.w	r2, r3, #32
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e007      	b.n	8006d0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	695b      	ldr	r3, [r3, #20]
 8006d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d08:	2b80      	cmp	r3, #128	; 0x80
 8006d0a:	d1ca      	bne.n	8006ca2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b084      	sub	sp, #16
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	60f8      	str	r0, [r7, #12]
 8006d1e:	60b9      	str	r1, [r7, #8]
 8006d20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d22:	e02d      	b.n	8006d80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f000 f88d 	bl	8006e44 <I2C_IsAcknowledgeFailed>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d001      	beq.n	8006d34 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e02d      	b.n	8006d90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d3a:	d021      	beq.n	8006d80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d3c:	f7fd f9b8 	bl	80040b0 <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d302      	bcc.n	8006d52 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d116      	bne.n	8006d80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6c:	f043 0220 	orr.w	r2, r3, #32
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e007      	b.n	8006d90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	f003 0304 	and.w	r3, r3, #4
 8006d8a:	2b04      	cmp	r3, #4
 8006d8c:	d1ca      	bne.n	8006d24 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006da4:	e042      	b.n	8006e2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	f003 0310 	and.w	r3, r3, #16
 8006db0:	2b10      	cmp	r3, #16
 8006db2:	d119      	bne.n	8006de8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f06f 0210 	mvn.w	r2, #16
 8006dbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2220      	movs	r2, #32
 8006dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e029      	b.n	8006e3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006de8:	f7fd f962 	bl	80040b0 <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d302      	bcc.n	8006dfe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d116      	bne.n	8006e2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2220      	movs	r2, #32
 8006e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e18:	f043 0220 	orr.w	r2, r3, #32
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e007      	b.n	8006e3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e36:	2b40      	cmp	r3, #64	; 0x40
 8006e38:	d1b5      	bne.n	8006da6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	695b      	ldr	r3, [r3, #20]
 8006e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e5a:	d11b      	bne.n	8006e94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2220      	movs	r2, #32
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e80:	f043 0204 	orr.w	r2, r3, #4
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e000      	b.n	8006e96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	370c      	adds	r7, #12
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
	...

08006ea4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d101      	bne.n	8006eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e267      	b.n	8007386 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d075      	beq.n	8006fae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ec2:	4b88      	ldr	r3, [pc, #544]	; (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f003 030c 	and.w	r3, r3, #12
 8006eca:	2b04      	cmp	r3, #4
 8006ecc:	d00c      	beq.n	8006ee8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ece:	4b85      	ldr	r3, [pc, #532]	; (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ed6:	2b08      	cmp	r3, #8
 8006ed8:	d112      	bne.n	8006f00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006eda:	4b82      	ldr	r3, [pc, #520]	; (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ee2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ee6:	d10b      	bne.n	8006f00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ee8:	4b7e      	ldr	r3, [pc, #504]	; (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d05b      	beq.n	8006fac <HAL_RCC_OscConfig+0x108>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d157      	bne.n	8006fac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e242      	b.n	8007386 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f08:	d106      	bne.n	8006f18 <HAL_RCC_OscConfig+0x74>
 8006f0a:	4b76      	ldr	r3, [pc, #472]	; (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a75      	ldr	r2, [pc, #468]	; (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f14:	6013      	str	r3, [r2, #0]
 8006f16:	e01d      	b.n	8006f54 <HAL_RCC_OscConfig+0xb0>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f20:	d10c      	bne.n	8006f3c <HAL_RCC_OscConfig+0x98>
 8006f22:	4b70      	ldr	r3, [pc, #448]	; (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a6f      	ldr	r2, [pc, #444]	; (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f2c:	6013      	str	r3, [r2, #0]
 8006f2e:	4b6d      	ldr	r3, [pc, #436]	; (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a6c      	ldr	r2, [pc, #432]	; (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f38:	6013      	str	r3, [r2, #0]
 8006f3a:	e00b      	b.n	8006f54 <HAL_RCC_OscConfig+0xb0>
 8006f3c:	4b69      	ldr	r3, [pc, #420]	; (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a68      	ldr	r2, [pc, #416]	; (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f46:	6013      	str	r3, [r2, #0]
 8006f48:	4b66      	ldr	r3, [pc, #408]	; (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a65      	ldr	r2, [pc, #404]	; (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d013      	beq.n	8006f84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f5c:	f7fd f8a8 	bl	80040b0 <HAL_GetTick>
 8006f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f62:	e008      	b.n	8006f76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f64:	f7fd f8a4 	bl	80040b0 <HAL_GetTick>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	2b64      	cmp	r3, #100	; 0x64
 8006f70:	d901      	bls.n	8006f76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e207      	b.n	8007386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f76:	4b5b      	ldr	r3, [pc, #364]	; (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d0f0      	beq.n	8006f64 <HAL_RCC_OscConfig+0xc0>
 8006f82:	e014      	b.n	8006fae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f84:	f7fd f894 	bl	80040b0 <HAL_GetTick>
 8006f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f8a:	e008      	b.n	8006f9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f8c:	f7fd f890 	bl	80040b0 <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	2b64      	cmp	r3, #100	; 0x64
 8006f98:	d901      	bls.n	8006f9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e1f3      	b.n	8007386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f9e:	4b51      	ldr	r3, [pc, #324]	; (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1f0      	bne.n	8006f8c <HAL_RCC_OscConfig+0xe8>
 8006faa:	e000      	b.n	8006fae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d063      	beq.n	8007082 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006fba:	4b4a      	ldr	r3, [pc, #296]	; (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	f003 030c 	and.w	r3, r3, #12
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00b      	beq.n	8006fde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006fc6:	4b47      	ldr	r3, [pc, #284]	; (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006fce:	2b08      	cmp	r3, #8
 8006fd0:	d11c      	bne.n	800700c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006fd2:	4b44      	ldr	r3, [pc, #272]	; (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d116      	bne.n	800700c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fde:	4b41      	ldr	r3, [pc, #260]	; (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 0302 	and.w	r3, r3, #2
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d005      	beq.n	8006ff6 <HAL_RCC_OscConfig+0x152>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d001      	beq.n	8006ff6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e1c7      	b.n	8007386 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ff6:	4b3b      	ldr	r3, [pc, #236]	; (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	00db      	lsls	r3, r3, #3
 8007004:	4937      	ldr	r1, [pc, #220]	; (80070e4 <HAL_RCC_OscConfig+0x240>)
 8007006:	4313      	orrs	r3, r2
 8007008:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800700a:	e03a      	b.n	8007082 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d020      	beq.n	8007056 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007014:	4b34      	ldr	r3, [pc, #208]	; (80070e8 <HAL_RCC_OscConfig+0x244>)
 8007016:	2201      	movs	r2, #1
 8007018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800701a:	f7fd f849 	bl	80040b0 <HAL_GetTick>
 800701e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007020:	e008      	b.n	8007034 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007022:	f7fd f845 	bl	80040b0 <HAL_GetTick>
 8007026:	4602      	mov	r2, r0
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	2b02      	cmp	r3, #2
 800702e:	d901      	bls.n	8007034 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e1a8      	b.n	8007386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007034:	4b2b      	ldr	r3, [pc, #172]	; (80070e4 <HAL_RCC_OscConfig+0x240>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0302 	and.w	r3, r3, #2
 800703c:	2b00      	cmp	r3, #0
 800703e:	d0f0      	beq.n	8007022 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007040:	4b28      	ldr	r3, [pc, #160]	; (80070e4 <HAL_RCC_OscConfig+0x240>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	00db      	lsls	r3, r3, #3
 800704e:	4925      	ldr	r1, [pc, #148]	; (80070e4 <HAL_RCC_OscConfig+0x240>)
 8007050:	4313      	orrs	r3, r2
 8007052:	600b      	str	r3, [r1, #0]
 8007054:	e015      	b.n	8007082 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007056:	4b24      	ldr	r3, [pc, #144]	; (80070e8 <HAL_RCC_OscConfig+0x244>)
 8007058:	2200      	movs	r2, #0
 800705a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800705c:	f7fd f828 	bl	80040b0 <HAL_GetTick>
 8007060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007062:	e008      	b.n	8007076 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007064:	f7fd f824 	bl	80040b0 <HAL_GetTick>
 8007068:	4602      	mov	r2, r0
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	2b02      	cmp	r3, #2
 8007070:	d901      	bls.n	8007076 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e187      	b.n	8007386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007076:	4b1b      	ldr	r3, [pc, #108]	; (80070e4 <HAL_RCC_OscConfig+0x240>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0302 	and.w	r3, r3, #2
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1f0      	bne.n	8007064 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0308 	and.w	r3, r3, #8
 800708a:	2b00      	cmp	r3, #0
 800708c:	d036      	beq.n	80070fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d016      	beq.n	80070c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007096:	4b15      	ldr	r3, [pc, #84]	; (80070ec <HAL_RCC_OscConfig+0x248>)
 8007098:	2201      	movs	r2, #1
 800709a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800709c:	f7fd f808 	bl	80040b0 <HAL_GetTick>
 80070a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070a2:	e008      	b.n	80070b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070a4:	f7fd f804 	bl	80040b0 <HAL_GetTick>
 80070a8:	4602      	mov	r2, r0
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d901      	bls.n	80070b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e167      	b.n	8007386 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070b6:	4b0b      	ldr	r3, [pc, #44]	; (80070e4 <HAL_RCC_OscConfig+0x240>)
 80070b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070ba:	f003 0302 	and.w	r3, r3, #2
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d0f0      	beq.n	80070a4 <HAL_RCC_OscConfig+0x200>
 80070c2:	e01b      	b.n	80070fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070c4:	4b09      	ldr	r3, [pc, #36]	; (80070ec <HAL_RCC_OscConfig+0x248>)
 80070c6:	2200      	movs	r2, #0
 80070c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070ca:	f7fc fff1 	bl	80040b0 <HAL_GetTick>
 80070ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070d0:	e00e      	b.n	80070f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070d2:	f7fc ffed 	bl	80040b0 <HAL_GetTick>
 80070d6:	4602      	mov	r2, r0
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d907      	bls.n	80070f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e150      	b.n	8007386 <HAL_RCC_OscConfig+0x4e2>
 80070e4:	40023800 	.word	0x40023800
 80070e8:	42470000 	.word	0x42470000
 80070ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070f0:	4b88      	ldr	r3, [pc, #544]	; (8007314 <HAL_RCC_OscConfig+0x470>)
 80070f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070f4:	f003 0302 	and.w	r3, r3, #2
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1ea      	bne.n	80070d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0304 	and.w	r3, r3, #4
 8007104:	2b00      	cmp	r3, #0
 8007106:	f000 8097 	beq.w	8007238 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800710a:	2300      	movs	r3, #0
 800710c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800710e:	4b81      	ldr	r3, [pc, #516]	; (8007314 <HAL_RCC_OscConfig+0x470>)
 8007110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10f      	bne.n	800713a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800711a:	2300      	movs	r3, #0
 800711c:	60bb      	str	r3, [r7, #8]
 800711e:	4b7d      	ldr	r3, [pc, #500]	; (8007314 <HAL_RCC_OscConfig+0x470>)
 8007120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007122:	4a7c      	ldr	r2, [pc, #496]	; (8007314 <HAL_RCC_OscConfig+0x470>)
 8007124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007128:	6413      	str	r3, [r2, #64]	; 0x40
 800712a:	4b7a      	ldr	r3, [pc, #488]	; (8007314 <HAL_RCC_OscConfig+0x470>)
 800712c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007132:	60bb      	str	r3, [r7, #8]
 8007134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007136:	2301      	movs	r3, #1
 8007138:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800713a:	4b77      	ldr	r3, [pc, #476]	; (8007318 <HAL_RCC_OscConfig+0x474>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007142:	2b00      	cmp	r3, #0
 8007144:	d118      	bne.n	8007178 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007146:	4b74      	ldr	r3, [pc, #464]	; (8007318 <HAL_RCC_OscConfig+0x474>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a73      	ldr	r2, [pc, #460]	; (8007318 <HAL_RCC_OscConfig+0x474>)
 800714c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007152:	f7fc ffad 	bl	80040b0 <HAL_GetTick>
 8007156:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007158:	e008      	b.n	800716c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800715a:	f7fc ffa9 	bl	80040b0 <HAL_GetTick>
 800715e:	4602      	mov	r2, r0
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	2b02      	cmp	r3, #2
 8007166:	d901      	bls.n	800716c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e10c      	b.n	8007386 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800716c:	4b6a      	ldr	r3, [pc, #424]	; (8007318 <HAL_RCC_OscConfig+0x474>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007174:	2b00      	cmp	r3, #0
 8007176:	d0f0      	beq.n	800715a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d106      	bne.n	800718e <HAL_RCC_OscConfig+0x2ea>
 8007180:	4b64      	ldr	r3, [pc, #400]	; (8007314 <HAL_RCC_OscConfig+0x470>)
 8007182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007184:	4a63      	ldr	r2, [pc, #396]	; (8007314 <HAL_RCC_OscConfig+0x470>)
 8007186:	f043 0301 	orr.w	r3, r3, #1
 800718a:	6713      	str	r3, [r2, #112]	; 0x70
 800718c:	e01c      	b.n	80071c8 <HAL_RCC_OscConfig+0x324>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	2b05      	cmp	r3, #5
 8007194:	d10c      	bne.n	80071b0 <HAL_RCC_OscConfig+0x30c>
 8007196:	4b5f      	ldr	r3, [pc, #380]	; (8007314 <HAL_RCC_OscConfig+0x470>)
 8007198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800719a:	4a5e      	ldr	r2, [pc, #376]	; (8007314 <HAL_RCC_OscConfig+0x470>)
 800719c:	f043 0304 	orr.w	r3, r3, #4
 80071a0:	6713      	str	r3, [r2, #112]	; 0x70
 80071a2:	4b5c      	ldr	r3, [pc, #368]	; (8007314 <HAL_RCC_OscConfig+0x470>)
 80071a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071a6:	4a5b      	ldr	r2, [pc, #364]	; (8007314 <HAL_RCC_OscConfig+0x470>)
 80071a8:	f043 0301 	orr.w	r3, r3, #1
 80071ac:	6713      	str	r3, [r2, #112]	; 0x70
 80071ae:	e00b      	b.n	80071c8 <HAL_RCC_OscConfig+0x324>
 80071b0:	4b58      	ldr	r3, [pc, #352]	; (8007314 <HAL_RCC_OscConfig+0x470>)
 80071b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b4:	4a57      	ldr	r2, [pc, #348]	; (8007314 <HAL_RCC_OscConfig+0x470>)
 80071b6:	f023 0301 	bic.w	r3, r3, #1
 80071ba:	6713      	str	r3, [r2, #112]	; 0x70
 80071bc:	4b55      	ldr	r3, [pc, #340]	; (8007314 <HAL_RCC_OscConfig+0x470>)
 80071be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c0:	4a54      	ldr	r2, [pc, #336]	; (8007314 <HAL_RCC_OscConfig+0x470>)
 80071c2:	f023 0304 	bic.w	r3, r3, #4
 80071c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d015      	beq.n	80071fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071d0:	f7fc ff6e 	bl	80040b0 <HAL_GetTick>
 80071d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071d6:	e00a      	b.n	80071ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071d8:	f7fc ff6a 	bl	80040b0 <HAL_GetTick>
 80071dc:	4602      	mov	r2, r0
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d901      	bls.n	80071ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e0cb      	b.n	8007386 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071ee:	4b49      	ldr	r3, [pc, #292]	; (8007314 <HAL_RCC_OscConfig+0x470>)
 80071f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f2:	f003 0302 	and.w	r3, r3, #2
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d0ee      	beq.n	80071d8 <HAL_RCC_OscConfig+0x334>
 80071fa:	e014      	b.n	8007226 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071fc:	f7fc ff58 	bl	80040b0 <HAL_GetTick>
 8007200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007202:	e00a      	b.n	800721a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007204:	f7fc ff54 	bl	80040b0 <HAL_GetTick>
 8007208:	4602      	mov	r2, r0
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007212:	4293      	cmp	r3, r2
 8007214:	d901      	bls.n	800721a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e0b5      	b.n	8007386 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800721a:	4b3e      	ldr	r3, [pc, #248]	; (8007314 <HAL_RCC_OscConfig+0x470>)
 800721c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800721e:	f003 0302 	and.w	r3, r3, #2
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1ee      	bne.n	8007204 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007226:	7dfb      	ldrb	r3, [r7, #23]
 8007228:	2b01      	cmp	r3, #1
 800722a:	d105      	bne.n	8007238 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800722c:	4b39      	ldr	r3, [pc, #228]	; (8007314 <HAL_RCC_OscConfig+0x470>)
 800722e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007230:	4a38      	ldr	r2, [pc, #224]	; (8007314 <HAL_RCC_OscConfig+0x470>)
 8007232:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007236:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	2b00      	cmp	r3, #0
 800723e:	f000 80a1 	beq.w	8007384 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007242:	4b34      	ldr	r3, [pc, #208]	; (8007314 <HAL_RCC_OscConfig+0x470>)
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f003 030c 	and.w	r3, r3, #12
 800724a:	2b08      	cmp	r3, #8
 800724c:	d05c      	beq.n	8007308 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	2b02      	cmp	r3, #2
 8007254:	d141      	bne.n	80072da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007256:	4b31      	ldr	r3, [pc, #196]	; (800731c <HAL_RCC_OscConfig+0x478>)
 8007258:	2200      	movs	r2, #0
 800725a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800725c:	f7fc ff28 	bl	80040b0 <HAL_GetTick>
 8007260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007262:	e008      	b.n	8007276 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007264:	f7fc ff24 	bl	80040b0 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	2b02      	cmp	r3, #2
 8007270:	d901      	bls.n	8007276 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e087      	b.n	8007386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007276:	4b27      	ldr	r3, [pc, #156]	; (8007314 <HAL_RCC_OscConfig+0x470>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1f0      	bne.n	8007264 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	69da      	ldr	r2, [r3, #28]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a1b      	ldr	r3, [r3, #32]
 800728a:	431a      	orrs	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007290:	019b      	lsls	r3, r3, #6
 8007292:	431a      	orrs	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007298:	085b      	lsrs	r3, r3, #1
 800729a:	3b01      	subs	r3, #1
 800729c:	041b      	lsls	r3, r3, #16
 800729e:	431a      	orrs	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a4:	061b      	lsls	r3, r3, #24
 80072a6:	491b      	ldr	r1, [pc, #108]	; (8007314 <HAL_RCC_OscConfig+0x470>)
 80072a8:	4313      	orrs	r3, r2
 80072aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072ac:	4b1b      	ldr	r3, [pc, #108]	; (800731c <HAL_RCC_OscConfig+0x478>)
 80072ae:	2201      	movs	r2, #1
 80072b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072b2:	f7fc fefd 	bl	80040b0 <HAL_GetTick>
 80072b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072b8:	e008      	b.n	80072cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072ba:	f7fc fef9 	bl	80040b0 <HAL_GetTick>
 80072be:	4602      	mov	r2, r0
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d901      	bls.n	80072cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80072c8:	2303      	movs	r3, #3
 80072ca:	e05c      	b.n	8007386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072cc:	4b11      	ldr	r3, [pc, #68]	; (8007314 <HAL_RCC_OscConfig+0x470>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d0f0      	beq.n	80072ba <HAL_RCC_OscConfig+0x416>
 80072d8:	e054      	b.n	8007384 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072da:	4b10      	ldr	r3, [pc, #64]	; (800731c <HAL_RCC_OscConfig+0x478>)
 80072dc:	2200      	movs	r2, #0
 80072de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072e0:	f7fc fee6 	bl	80040b0 <HAL_GetTick>
 80072e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072e6:	e008      	b.n	80072fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072e8:	f7fc fee2 	bl	80040b0 <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d901      	bls.n	80072fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e045      	b.n	8007386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072fa:	4b06      	ldr	r3, [pc, #24]	; (8007314 <HAL_RCC_OscConfig+0x470>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1f0      	bne.n	80072e8 <HAL_RCC_OscConfig+0x444>
 8007306:	e03d      	b.n	8007384 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d107      	bne.n	8007320 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e038      	b.n	8007386 <HAL_RCC_OscConfig+0x4e2>
 8007314:	40023800 	.word	0x40023800
 8007318:	40007000 	.word	0x40007000
 800731c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007320:	4b1b      	ldr	r3, [pc, #108]	; (8007390 <HAL_RCC_OscConfig+0x4ec>)
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d028      	beq.n	8007380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007338:	429a      	cmp	r2, r3
 800733a:	d121      	bne.n	8007380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007346:	429a      	cmp	r2, r3
 8007348:	d11a      	bne.n	8007380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007350:	4013      	ands	r3, r2
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007356:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007358:	4293      	cmp	r3, r2
 800735a:	d111      	bne.n	8007380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007366:	085b      	lsrs	r3, r3, #1
 8007368:	3b01      	subs	r3, #1
 800736a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800736c:	429a      	cmp	r2, r3
 800736e:	d107      	bne.n	8007380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800737c:	429a      	cmp	r2, r3
 800737e:	d001      	beq.n	8007384 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	e000      	b.n	8007386 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3718      	adds	r7, #24
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	40023800 	.word	0x40023800

08007394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d101      	bne.n	80073a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e0cc      	b.n	8007542 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80073a8:	4b68      	ldr	r3, [pc, #416]	; (800754c <HAL_RCC_ClockConfig+0x1b8>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0307 	and.w	r3, r3, #7
 80073b0:	683a      	ldr	r2, [r7, #0]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d90c      	bls.n	80073d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073b6:	4b65      	ldr	r3, [pc, #404]	; (800754c <HAL_RCC_ClockConfig+0x1b8>)
 80073b8:	683a      	ldr	r2, [r7, #0]
 80073ba:	b2d2      	uxtb	r2, r2
 80073bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073be:	4b63      	ldr	r3, [pc, #396]	; (800754c <HAL_RCC_ClockConfig+0x1b8>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0307 	and.w	r3, r3, #7
 80073c6:	683a      	ldr	r2, [r7, #0]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d001      	beq.n	80073d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e0b8      	b.n	8007542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 0302 	and.w	r3, r3, #2
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d020      	beq.n	800741e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0304 	and.w	r3, r3, #4
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d005      	beq.n	80073f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80073e8:	4b59      	ldr	r3, [pc, #356]	; (8007550 <HAL_RCC_ClockConfig+0x1bc>)
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	4a58      	ldr	r2, [pc, #352]	; (8007550 <HAL_RCC_ClockConfig+0x1bc>)
 80073ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80073f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0308 	and.w	r3, r3, #8
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d005      	beq.n	800740c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007400:	4b53      	ldr	r3, [pc, #332]	; (8007550 <HAL_RCC_ClockConfig+0x1bc>)
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	4a52      	ldr	r2, [pc, #328]	; (8007550 <HAL_RCC_ClockConfig+0x1bc>)
 8007406:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800740a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800740c:	4b50      	ldr	r3, [pc, #320]	; (8007550 <HAL_RCC_ClockConfig+0x1bc>)
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	494d      	ldr	r1, [pc, #308]	; (8007550 <HAL_RCC_ClockConfig+0x1bc>)
 800741a:	4313      	orrs	r3, r2
 800741c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	2b00      	cmp	r3, #0
 8007428:	d044      	beq.n	80074b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d107      	bne.n	8007442 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007432:	4b47      	ldr	r3, [pc, #284]	; (8007550 <HAL_RCC_ClockConfig+0x1bc>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800743a:	2b00      	cmp	r3, #0
 800743c:	d119      	bne.n	8007472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	e07f      	b.n	8007542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	2b02      	cmp	r3, #2
 8007448:	d003      	beq.n	8007452 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800744e:	2b03      	cmp	r3, #3
 8007450:	d107      	bne.n	8007462 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007452:	4b3f      	ldr	r3, [pc, #252]	; (8007550 <HAL_RCC_ClockConfig+0x1bc>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d109      	bne.n	8007472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e06f      	b.n	8007542 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007462:	4b3b      	ldr	r3, [pc, #236]	; (8007550 <HAL_RCC_ClockConfig+0x1bc>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 0302 	and.w	r3, r3, #2
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e067      	b.n	8007542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007472:	4b37      	ldr	r3, [pc, #220]	; (8007550 <HAL_RCC_ClockConfig+0x1bc>)
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f023 0203 	bic.w	r2, r3, #3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	4934      	ldr	r1, [pc, #208]	; (8007550 <HAL_RCC_ClockConfig+0x1bc>)
 8007480:	4313      	orrs	r3, r2
 8007482:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007484:	f7fc fe14 	bl	80040b0 <HAL_GetTick>
 8007488:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800748a:	e00a      	b.n	80074a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800748c:	f7fc fe10 	bl	80040b0 <HAL_GetTick>
 8007490:	4602      	mov	r2, r0
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	f241 3288 	movw	r2, #5000	; 0x1388
 800749a:	4293      	cmp	r3, r2
 800749c:	d901      	bls.n	80074a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800749e:	2303      	movs	r3, #3
 80074a0:	e04f      	b.n	8007542 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074a2:	4b2b      	ldr	r3, [pc, #172]	; (8007550 <HAL_RCC_ClockConfig+0x1bc>)
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	f003 020c 	and.w	r2, r3, #12
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d1eb      	bne.n	800748c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80074b4:	4b25      	ldr	r3, [pc, #148]	; (800754c <HAL_RCC_ClockConfig+0x1b8>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 0307 	and.w	r3, r3, #7
 80074bc:	683a      	ldr	r2, [r7, #0]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d20c      	bcs.n	80074dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074c2:	4b22      	ldr	r3, [pc, #136]	; (800754c <HAL_RCC_ClockConfig+0x1b8>)
 80074c4:	683a      	ldr	r2, [r7, #0]
 80074c6:	b2d2      	uxtb	r2, r2
 80074c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074ca:	4b20      	ldr	r3, [pc, #128]	; (800754c <HAL_RCC_ClockConfig+0x1b8>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 0307 	and.w	r3, r3, #7
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d001      	beq.n	80074dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e032      	b.n	8007542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0304 	and.w	r3, r3, #4
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d008      	beq.n	80074fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80074e8:	4b19      	ldr	r3, [pc, #100]	; (8007550 <HAL_RCC_ClockConfig+0x1bc>)
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	4916      	ldr	r1, [pc, #88]	; (8007550 <HAL_RCC_ClockConfig+0x1bc>)
 80074f6:	4313      	orrs	r3, r2
 80074f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 0308 	and.w	r3, r3, #8
 8007502:	2b00      	cmp	r3, #0
 8007504:	d009      	beq.n	800751a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007506:	4b12      	ldr	r3, [pc, #72]	; (8007550 <HAL_RCC_ClockConfig+0x1bc>)
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	00db      	lsls	r3, r3, #3
 8007514:	490e      	ldr	r1, [pc, #56]	; (8007550 <HAL_RCC_ClockConfig+0x1bc>)
 8007516:	4313      	orrs	r3, r2
 8007518:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800751a:	f000 f821 	bl	8007560 <HAL_RCC_GetSysClockFreq>
 800751e:	4602      	mov	r2, r0
 8007520:	4b0b      	ldr	r3, [pc, #44]	; (8007550 <HAL_RCC_ClockConfig+0x1bc>)
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	091b      	lsrs	r3, r3, #4
 8007526:	f003 030f 	and.w	r3, r3, #15
 800752a:	490a      	ldr	r1, [pc, #40]	; (8007554 <HAL_RCC_ClockConfig+0x1c0>)
 800752c:	5ccb      	ldrb	r3, [r1, r3]
 800752e:	fa22 f303 	lsr.w	r3, r2, r3
 8007532:	4a09      	ldr	r2, [pc, #36]	; (8007558 <HAL_RCC_ClockConfig+0x1c4>)
 8007534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007536:	4b09      	ldr	r3, [pc, #36]	; (800755c <HAL_RCC_ClockConfig+0x1c8>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4618      	mov	r0, r3
 800753c:	f7fc fd74 	bl	8004028 <HAL_InitTick>

  return HAL_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	40023c00 	.word	0x40023c00
 8007550:	40023800 	.word	0x40023800
 8007554:	0800a1c4 	.word	0x0800a1c4
 8007558:	200006ec 	.word	0x200006ec
 800755c:	200006f0 	.word	0x200006f0

08007560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007564:	b090      	sub	sp, #64	; 0x40
 8007566:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007568:	2300      	movs	r3, #0
 800756a:	637b      	str	r3, [r7, #52]	; 0x34
 800756c:	2300      	movs	r3, #0
 800756e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007570:	2300      	movs	r3, #0
 8007572:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007574:	2300      	movs	r3, #0
 8007576:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007578:	4b59      	ldr	r3, [pc, #356]	; (80076e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f003 030c 	and.w	r3, r3, #12
 8007580:	2b08      	cmp	r3, #8
 8007582:	d00d      	beq.n	80075a0 <HAL_RCC_GetSysClockFreq+0x40>
 8007584:	2b08      	cmp	r3, #8
 8007586:	f200 80a1 	bhi.w	80076cc <HAL_RCC_GetSysClockFreq+0x16c>
 800758a:	2b00      	cmp	r3, #0
 800758c:	d002      	beq.n	8007594 <HAL_RCC_GetSysClockFreq+0x34>
 800758e:	2b04      	cmp	r3, #4
 8007590:	d003      	beq.n	800759a <HAL_RCC_GetSysClockFreq+0x3a>
 8007592:	e09b      	b.n	80076cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007594:	4b53      	ldr	r3, [pc, #332]	; (80076e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8007596:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007598:	e09b      	b.n	80076d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800759a:	4b53      	ldr	r3, [pc, #332]	; (80076e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800759c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800759e:	e098      	b.n	80076d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80075a0:	4b4f      	ldr	r3, [pc, #316]	; (80076e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075a8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80075aa:	4b4d      	ldr	r3, [pc, #308]	; (80076e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d028      	beq.n	8007608 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075b6:	4b4a      	ldr	r3, [pc, #296]	; (80076e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	099b      	lsrs	r3, r3, #6
 80075bc:	2200      	movs	r2, #0
 80075be:	623b      	str	r3, [r7, #32]
 80075c0:	627a      	str	r2, [r7, #36]	; 0x24
 80075c2:	6a3b      	ldr	r3, [r7, #32]
 80075c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80075c8:	2100      	movs	r1, #0
 80075ca:	4b47      	ldr	r3, [pc, #284]	; (80076e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80075cc:	fb03 f201 	mul.w	r2, r3, r1
 80075d0:	2300      	movs	r3, #0
 80075d2:	fb00 f303 	mul.w	r3, r0, r3
 80075d6:	4413      	add	r3, r2
 80075d8:	4a43      	ldr	r2, [pc, #268]	; (80076e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80075da:	fba0 1202 	umull	r1, r2, r0, r2
 80075de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075e0:	460a      	mov	r2, r1
 80075e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80075e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075e6:	4413      	add	r3, r2
 80075e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ec:	2200      	movs	r2, #0
 80075ee:	61bb      	str	r3, [r7, #24]
 80075f0:	61fa      	str	r2, [r7, #28]
 80075f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80075fa:	f7f9 f923 	bl	8000844 <__aeabi_uldivmod>
 80075fe:	4602      	mov	r2, r0
 8007600:	460b      	mov	r3, r1
 8007602:	4613      	mov	r3, r2
 8007604:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007606:	e053      	b.n	80076b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007608:	4b35      	ldr	r3, [pc, #212]	; (80076e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	099b      	lsrs	r3, r3, #6
 800760e:	2200      	movs	r2, #0
 8007610:	613b      	str	r3, [r7, #16]
 8007612:	617a      	str	r2, [r7, #20]
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800761a:	f04f 0b00 	mov.w	fp, #0
 800761e:	4652      	mov	r2, sl
 8007620:	465b      	mov	r3, fp
 8007622:	f04f 0000 	mov.w	r0, #0
 8007626:	f04f 0100 	mov.w	r1, #0
 800762a:	0159      	lsls	r1, r3, #5
 800762c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007630:	0150      	lsls	r0, r2, #5
 8007632:	4602      	mov	r2, r0
 8007634:	460b      	mov	r3, r1
 8007636:	ebb2 080a 	subs.w	r8, r2, sl
 800763a:	eb63 090b 	sbc.w	r9, r3, fp
 800763e:	f04f 0200 	mov.w	r2, #0
 8007642:	f04f 0300 	mov.w	r3, #0
 8007646:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800764a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800764e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007652:	ebb2 0408 	subs.w	r4, r2, r8
 8007656:	eb63 0509 	sbc.w	r5, r3, r9
 800765a:	f04f 0200 	mov.w	r2, #0
 800765e:	f04f 0300 	mov.w	r3, #0
 8007662:	00eb      	lsls	r3, r5, #3
 8007664:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007668:	00e2      	lsls	r2, r4, #3
 800766a:	4614      	mov	r4, r2
 800766c:	461d      	mov	r5, r3
 800766e:	eb14 030a 	adds.w	r3, r4, sl
 8007672:	603b      	str	r3, [r7, #0]
 8007674:	eb45 030b 	adc.w	r3, r5, fp
 8007678:	607b      	str	r3, [r7, #4]
 800767a:	f04f 0200 	mov.w	r2, #0
 800767e:	f04f 0300 	mov.w	r3, #0
 8007682:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007686:	4629      	mov	r1, r5
 8007688:	028b      	lsls	r3, r1, #10
 800768a:	4621      	mov	r1, r4
 800768c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007690:	4621      	mov	r1, r4
 8007692:	028a      	lsls	r2, r1, #10
 8007694:	4610      	mov	r0, r2
 8007696:	4619      	mov	r1, r3
 8007698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800769a:	2200      	movs	r2, #0
 800769c:	60bb      	str	r3, [r7, #8]
 800769e:	60fa      	str	r2, [r7, #12]
 80076a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076a4:	f7f9 f8ce 	bl	8000844 <__aeabi_uldivmod>
 80076a8:	4602      	mov	r2, r0
 80076aa:	460b      	mov	r3, r1
 80076ac:	4613      	mov	r3, r2
 80076ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80076b0:	4b0b      	ldr	r3, [pc, #44]	; (80076e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	0c1b      	lsrs	r3, r3, #16
 80076b6:	f003 0303 	and.w	r3, r3, #3
 80076ba:	3301      	adds	r3, #1
 80076bc:	005b      	lsls	r3, r3, #1
 80076be:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80076c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80076c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80076ca:	e002      	b.n	80076d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80076cc:	4b05      	ldr	r3, [pc, #20]	; (80076e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80076ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80076d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80076d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3740      	adds	r7, #64	; 0x40
 80076d8:	46bd      	mov	sp, r7
 80076da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076de:	bf00      	nop
 80076e0:	40023800 	.word	0x40023800
 80076e4:	00f42400 	.word	0x00f42400
 80076e8:	017d7840 	.word	0x017d7840

080076ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076ec:	b480      	push	{r7}
 80076ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076f0:	4b03      	ldr	r3, [pc, #12]	; (8007700 <HAL_RCC_GetHCLKFreq+0x14>)
 80076f2:	681b      	ldr	r3, [r3, #0]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop
 8007700:	200006ec 	.word	0x200006ec

08007704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007708:	f7ff fff0 	bl	80076ec <HAL_RCC_GetHCLKFreq>
 800770c:	4602      	mov	r2, r0
 800770e:	4b05      	ldr	r3, [pc, #20]	; (8007724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	0a9b      	lsrs	r3, r3, #10
 8007714:	f003 0307 	and.w	r3, r3, #7
 8007718:	4903      	ldr	r1, [pc, #12]	; (8007728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800771a:	5ccb      	ldrb	r3, [r1, r3]
 800771c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007720:	4618      	mov	r0, r3
 8007722:	bd80      	pop	{r7, pc}
 8007724:	40023800 	.word	0x40023800
 8007728:	0800a1d4 	.word	0x0800a1d4

0800772c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d101      	bne.n	800773e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e07b      	b.n	8007836 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007742:	2b00      	cmp	r3, #0
 8007744:	d108      	bne.n	8007758 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800774e:	d009      	beq.n	8007764 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	61da      	str	r2, [r3, #28]
 8007756:	e005      	b.n	8007764 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007770:	b2db      	uxtb	r3, r3
 8007772:	2b00      	cmp	r3, #0
 8007774:	d106      	bne.n	8007784 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f7fc fa56 	bl	8003c30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2202      	movs	r2, #2
 8007788:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800779a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80077ac:	431a      	orrs	r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077b6:	431a      	orrs	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	f003 0302 	and.w	r3, r3, #2
 80077c0:	431a      	orrs	r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	695b      	ldr	r3, [r3, #20]
 80077c6:	f003 0301 	and.w	r3, r3, #1
 80077ca:	431a      	orrs	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	699b      	ldr	r3, [r3, #24]
 80077d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077d4:	431a      	orrs	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	69db      	ldr	r3, [r3, #28]
 80077da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077de:	431a      	orrs	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6a1b      	ldr	r3, [r3, #32]
 80077e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077e8:	ea42 0103 	orr.w	r1, r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	430a      	orrs	r2, r1
 80077fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	0c1b      	lsrs	r3, r3, #16
 8007802:	f003 0104 	and.w	r1, r3, #4
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780a:	f003 0210 	and.w	r2, r3, #16
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	430a      	orrs	r2, r1
 8007814:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	69da      	ldr	r2, [r3, #28]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007824:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3708      	adds	r7, #8
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800783e:	b580      	push	{r7, lr}
 8007840:	b088      	sub	sp, #32
 8007842:	af00      	add	r7, sp, #0
 8007844:	60f8      	str	r0, [r7, #12]
 8007846:	60b9      	str	r1, [r7, #8]
 8007848:	603b      	str	r3, [r7, #0]
 800784a:	4613      	mov	r3, r2
 800784c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800784e:	2300      	movs	r3, #0
 8007850:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007858:	2b01      	cmp	r3, #1
 800785a:	d101      	bne.n	8007860 <HAL_SPI_Transmit+0x22>
 800785c:	2302      	movs	r3, #2
 800785e:	e126      	b.n	8007aae <HAL_SPI_Transmit+0x270>
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007868:	f7fc fc22 	bl	80040b0 <HAL_GetTick>
 800786c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800786e:	88fb      	ldrh	r3, [r7, #6]
 8007870:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007878:	b2db      	uxtb	r3, r3
 800787a:	2b01      	cmp	r3, #1
 800787c:	d002      	beq.n	8007884 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800787e:	2302      	movs	r3, #2
 8007880:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007882:	e10b      	b.n	8007a9c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d002      	beq.n	8007890 <HAL_SPI_Transmit+0x52>
 800788a:	88fb      	ldrh	r3, [r7, #6]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d102      	bne.n	8007896 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007894:	e102      	b.n	8007a9c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2203      	movs	r2, #3
 800789a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	68ba      	ldr	r2, [r7, #8]
 80078a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	88fa      	ldrh	r2, [r7, #6]
 80078ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	88fa      	ldrh	r2, [r7, #6]
 80078b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078dc:	d10f      	bne.n	80078fe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007908:	2b40      	cmp	r3, #64	; 0x40
 800790a:	d007      	beq.n	800791c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800791a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007924:	d14b      	bne.n	80079be <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d002      	beq.n	8007934 <HAL_SPI_Transmit+0xf6>
 800792e:	8afb      	ldrh	r3, [r7, #22]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d13e      	bne.n	80079b2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007938:	881a      	ldrh	r2, [r3, #0]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007944:	1c9a      	adds	r2, r3, #2
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800794e:	b29b      	uxth	r3, r3
 8007950:	3b01      	subs	r3, #1
 8007952:	b29a      	uxth	r2, r3
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007958:	e02b      	b.n	80079b2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	f003 0302 	and.w	r3, r3, #2
 8007964:	2b02      	cmp	r3, #2
 8007966:	d112      	bne.n	800798e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796c:	881a      	ldrh	r2, [r3, #0]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007978:	1c9a      	adds	r2, r3, #2
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007982:	b29b      	uxth	r3, r3
 8007984:	3b01      	subs	r3, #1
 8007986:	b29a      	uxth	r2, r3
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	86da      	strh	r2, [r3, #54]	; 0x36
 800798c:	e011      	b.n	80079b2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800798e:	f7fc fb8f 	bl	80040b0 <HAL_GetTick>
 8007992:	4602      	mov	r2, r0
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	1ad3      	subs	r3, r2, r3
 8007998:	683a      	ldr	r2, [r7, #0]
 800799a:	429a      	cmp	r2, r3
 800799c:	d803      	bhi.n	80079a6 <HAL_SPI_Transmit+0x168>
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a4:	d102      	bne.n	80079ac <HAL_SPI_Transmit+0x16e>
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d102      	bne.n	80079b2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80079b0:	e074      	b.n	8007a9c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1ce      	bne.n	800795a <HAL_SPI_Transmit+0x11c>
 80079bc:	e04c      	b.n	8007a58 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d002      	beq.n	80079cc <HAL_SPI_Transmit+0x18e>
 80079c6:	8afb      	ldrh	r3, [r7, #22]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d140      	bne.n	8007a4e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	330c      	adds	r3, #12
 80079d6:	7812      	ldrb	r2, [r2, #0]
 80079d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079de:	1c5a      	adds	r2, r3, #1
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	3b01      	subs	r3, #1
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80079f2:	e02c      	b.n	8007a4e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	f003 0302 	and.w	r3, r3, #2
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d113      	bne.n	8007a2a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	330c      	adds	r3, #12
 8007a0c:	7812      	ldrb	r2, [r2, #0]
 8007a0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a14:	1c5a      	adds	r2, r3, #1
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	3b01      	subs	r3, #1
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	86da      	strh	r2, [r3, #54]	; 0x36
 8007a28:	e011      	b.n	8007a4e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a2a:	f7fc fb41 	bl	80040b0 <HAL_GetTick>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	683a      	ldr	r2, [r7, #0]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d803      	bhi.n	8007a42 <HAL_SPI_Transmit+0x204>
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a40:	d102      	bne.n	8007a48 <HAL_SPI_Transmit+0x20a>
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d102      	bne.n	8007a4e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a4c:	e026      	b.n	8007a9c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1cd      	bne.n	80079f4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a58:	69ba      	ldr	r2, [r7, #24]
 8007a5a:	6839      	ldr	r1, [r7, #0]
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f000 fbcb 	bl	80081f8 <SPI_EndRxTxTransaction>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d002      	beq.n	8007a6e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2220      	movs	r2, #32
 8007a6c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d10a      	bne.n	8007a8c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a76:	2300      	movs	r3, #0
 8007a78:	613b      	str	r3, [r7, #16]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	613b      	str	r3, [r7, #16]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	613b      	str	r3, [r7, #16]
 8007a8a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d002      	beq.n	8007a9a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	77fb      	strb	r3, [r7, #31]
 8007a98:	e000      	b.n	8007a9c <HAL_SPI_Transmit+0x25e>
  }

error:
 8007a9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007aac:	7ffb      	ldrb	r3, [r7, #31]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3720      	adds	r7, #32
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b088      	sub	sp, #32
 8007aba:	af02      	add	r7, sp, #8
 8007abc:	60f8      	str	r0, [r7, #12]
 8007abe:	60b9      	str	r1, [r7, #8]
 8007ac0:	603b      	str	r3, [r7, #0]
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ad2:	d112      	bne.n	8007afa <HAL_SPI_Receive+0x44>
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10e      	bne.n	8007afa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2204      	movs	r2, #4
 8007ae0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007ae4:	88fa      	ldrh	r2, [r7, #6]
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	4613      	mov	r3, r2
 8007aec:	68ba      	ldr	r2, [r7, #8]
 8007aee:	68b9      	ldr	r1, [r7, #8]
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f000 f8f1 	bl	8007cd8 <HAL_SPI_TransmitReceive>
 8007af6:	4603      	mov	r3, r0
 8007af8:	e0ea      	b.n	8007cd0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d101      	bne.n	8007b08 <HAL_SPI_Receive+0x52>
 8007b04:	2302      	movs	r3, #2
 8007b06:	e0e3      	b.n	8007cd0 <HAL_SPI_Receive+0x21a>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b10:	f7fc face 	bl	80040b0 <HAL_GetTick>
 8007b14:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d002      	beq.n	8007b28 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007b22:	2302      	movs	r3, #2
 8007b24:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b26:	e0ca      	b.n	8007cbe <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d002      	beq.n	8007b34 <HAL_SPI_Receive+0x7e>
 8007b2e:	88fb      	ldrh	r3, [r7, #6]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d102      	bne.n	8007b3a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b38:	e0c1      	b.n	8007cbe <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2204      	movs	r2, #4
 8007b3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	68ba      	ldr	r2, [r7, #8]
 8007b4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	88fa      	ldrh	r2, [r7, #6]
 8007b52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	88fa      	ldrh	r2, [r7, #6]
 8007b58:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2200      	movs	r2, #0
 8007b64:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b80:	d10f      	bne.n	8007ba2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007ba0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bac:	2b40      	cmp	r3, #64	; 0x40
 8007bae:	d007      	beq.n	8007bc0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bbe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d162      	bne.n	8007c8e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007bc8:	e02e      	b.n	8007c28 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f003 0301 	and.w	r3, r3, #1
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d115      	bne.n	8007c04 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f103 020c 	add.w	r2, r3, #12
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be4:	7812      	ldrb	r2, [r2, #0]
 8007be6:	b2d2      	uxtb	r2, r2
 8007be8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bee:	1c5a      	adds	r2, r3, #1
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c02:	e011      	b.n	8007c28 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c04:	f7fc fa54 	bl	80040b0 <HAL_GetTick>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	1ad3      	subs	r3, r2, r3
 8007c0e:	683a      	ldr	r2, [r7, #0]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d803      	bhi.n	8007c1c <HAL_SPI_Receive+0x166>
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c1a:	d102      	bne.n	8007c22 <HAL_SPI_Receive+0x16c>
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d102      	bne.n	8007c28 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007c26:	e04a      	b.n	8007cbe <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1cb      	bne.n	8007bca <HAL_SPI_Receive+0x114>
 8007c32:	e031      	b.n	8007c98 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	f003 0301 	and.w	r3, r3, #1
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d113      	bne.n	8007c6a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68da      	ldr	r2, [r3, #12]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4c:	b292      	uxth	r2, r2
 8007c4e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c54:	1c9a      	adds	r2, r3, #2
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	3b01      	subs	r3, #1
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c68:	e011      	b.n	8007c8e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c6a:	f7fc fa21 	bl	80040b0 <HAL_GetTick>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	683a      	ldr	r2, [r7, #0]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d803      	bhi.n	8007c82 <HAL_SPI_Receive+0x1cc>
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c80:	d102      	bne.n	8007c88 <HAL_SPI_Receive+0x1d2>
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d102      	bne.n	8007c8e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007c8c:	e017      	b.n	8007cbe <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1cd      	bne.n	8007c34 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	6839      	ldr	r1, [r7, #0]
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f000 fa45 	bl	800812c <SPI_EndRxTransaction>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d002      	beq.n	8007cae <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2220      	movs	r2, #32
 8007cac:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d002      	beq.n	8007cbc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	75fb      	strb	r3, [r7, #23]
 8007cba:	e000      	b.n	8007cbe <HAL_SPI_Receive+0x208>
  }

error :
 8007cbc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3718      	adds	r7, #24
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b08c      	sub	sp, #48	; 0x30
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	607a      	str	r2, [r7, #4]
 8007ce4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007cea:	2300      	movs	r3, #0
 8007cec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d101      	bne.n	8007cfe <HAL_SPI_TransmitReceive+0x26>
 8007cfa:	2302      	movs	r3, #2
 8007cfc:	e18a      	b.n	8008014 <HAL_SPI_TransmitReceive+0x33c>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d06:	f7fc f9d3 	bl	80040b0 <HAL_GetTick>
 8007d0a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007d1c:	887b      	ldrh	r3, [r7, #2]
 8007d1e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007d20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d00f      	beq.n	8007d48 <HAL_SPI_TransmitReceive+0x70>
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d2e:	d107      	bne.n	8007d40 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d103      	bne.n	8007d40 <HAL_SPI_TransmitReceive+0x68>
 8007d38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d3c:	2b04      	cmp	r3, #4
 8007d3e:	d003      	beq.n	8007d48 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007d40:	2302      	movs	r3, #2
 8007d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007d46:	e15b      	b.n	8008000 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d005      	beq.n	8007d5a <HAL_SPI_TransmitReceive+0x82>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d002      	beq.n	8007d5a <HAL_SPI_TransmitReceive+0x82>
 8007d54:	887b      	ldrh	r3, [r7, #2]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d103      	bne.n	8007d62 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007d60:	e14e      	b.n	8008000 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	2b04      	cmp	r3, #4
 8007d6c:	d003      	beq.n	8007d76 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2205      	movs	r2, #5
 8007d72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	887a      	ldrh	r2, [r7, #2]
 8007d86:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	887a      	ldrh	r2, [r7, #2]
 8007d8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	68ba      	ldr	r2, [r7, #8]
 8007d92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	887a      	ldrh	r2, [r7, #2]
 8007d98:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	887a      	ldrh	r2, [r7, #2]
 8007d9e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2200      	movs	r2, #0
 8007da4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2200      	movs	r2, #0
 8007daa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db6:	2b40      	cmp	r3, #64	; 0x40
 8007db8:	d007      	beq.n	8007dca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007dc8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	68db      	ldr	r3, [r3, #12]
 8007dce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dd2:	d178      	bne.n	8007ec6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d002      	beq.n	8007de2 <HAL_SPI_TransmitReceive+0x10a>
 8007ddc:	8b7b      	ldrh	r3, [r7, #26]
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d166      	bne.n	8007eb0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de6:	881a      	ldrh	r2, [r3, #0]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df2:	1c9a      	adds	r2, r3, #2
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	b29a      	uxth	r2, r3
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e06:	e053      	b.n	8007eb0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	f003 0302 	and.w	r3, r3, #2
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d11b      	bne.n	8007e4e <HAL_SPI_TransmitReceive+0x176>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d016      	beq.n	8007e4e <HAL_SPI_TransmitReceive+0x176>
 8007e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d113      	bne.n	8007e4e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e2a:	881a      	ldrh	r2, [r3, #0]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e36:	1c9a      	adds	r2, r3, #2
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	3b01      	subs	r3, #1
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	f003 0301 	and.w	r3, r3, #1
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d119      	bne.n	8007e90 <HAL_SPI_TransmitReceive+0x1b8>
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d014      	beq.n	8007e90 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	68da      	ldr	r2, [r3, #12]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e70:	b292      	uxth	r2, r2
 8007e72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e78:	1c9a      	adds	r2, r3, #2
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	3b01      	subs	r3, #1
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007e90:	f7fc f90e 	bl	80040b0 <HAL_GetTick>
 8007e94:	4602      	mov	r2, r0
 8007e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d807      	bhi.n	8007eb0 <HAL_SPI_TransmitReceive+0x1d8>
 8007ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea6:	d003      	beq.n	8007eb0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007eae:	e0a7      	b.n	8008000 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d1a6      	bne.n	8007e08 <HAL_SPI_TransmitReceive+0x130>
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1a1      	bne.n	8007e08 <HAL_SPI_TransmitReceive+0x130>
 8007ec4:	e07c      	b.n	8007fc0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d002      	beq.n	8007ed4 <HAL_SPI_TransmitReceive+0x1fc>
 8007ece:	8b7b      	ldrh	r3, [r7, #26]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d16b      	bne.n	8007fac <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	330c      	adds	r3, #12
 8007ede:	7812      	ldrb	r2, [r2, #0]
 8007ee0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee6:	1c5a      	adds	r2, r3, #1
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007efa:	e057      	b.n	8007fac <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	f003 0302 	and.w	r3, r3, #2
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d11c      	bne.n	8007f44 <HAL_SPI_TransmitReceive+0x26c>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d017      	beq.n	8007f44 <HAL_SPI_TransmitReceive+0x26c>
 8007f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d114      	bne.n	8007f44 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	330c      	adds	r3, #12
 8007f24:	7812      	ldrb	r2, [r2, #0]
 8007f26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f2c:	1c5a      	adds	r2, r3, #1
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	b29a      	uxth	r2, r3
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f40:	2300      	movs	r3, #0
 8007f42:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	f003 0301 	and.w	r3, r3, #1
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d119      	bne.n	8007f86 <HAL_SPI_TransmitReceive+0x2ae>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d014      	beq.n	8007f86 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68da      	ldr	r2, [r3, #12]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f66:	b2d2      	uxtb	r2, r2
 8007f68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6e:	1c5a      	adds	r2, r3, #1
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f82:	2301      	movs	r3, #1
 8007f84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007f86:	f7fc f893 	bl	80040b0 <HAL_GetTick>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d803      	bhi.n	8007f9e <HAL_SPI_TransmitReceive+0x2c6>
 8007f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f9c:	d102      	bne.n	8007fa4 <HAL_SPI_TransmitReceive+0x2cc>
 8007f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d103      	bne.n	8007fac <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007faa:	e029      	b.n	8008000 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d1a2      	bne.n	8007efc <HAL_SPI_TransmitReceive+0x224>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d19d      	bne.n	8007efc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f000 f917 	bl	80081f8 <SPI_EndRxTxTransaction>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d006      	beq.n	8007fde <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2220      	movs	r2, #32
 8007fda:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007fdc:	e010      	b.n	8008000 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d10b      	bne.n	8007ffe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	617b      	str	r3, [r7, #20]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	617b      	str	r3, [r7, #20]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	617b      	str	r3, [r7, #20]
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	e000      	b.n	8008000 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007ffe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2200      	movs	r2, #0
 800800c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008010:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008014:	4618      	mov	r0, r3
 8008016:	3730      	adds	r7, #48	; 0x30
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b088      	sub	sp, #32
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	603b      	str	r3, [r7, #0]
 8008028:	4613      	mov	r3, r2
 800802a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800802c:	f7fc f840 	bl	80040b0 <HAL_GetTick>
 8008030:	4602      	mov	r2, r0
 8008032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008034:	1a9b      	subs	r3, r3, r2
 8008036:	683a      	ldr	r2, [r7, #0]
 8008038:	4413      	add	r3, r2
 800803a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800803c:	f7fc f838 	bl	80040b0 <HAL_GetTick>
 8008040:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008042:	4b39      	ldr	r3, [pc, #228]	; (8008128 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	015b      	lsls	r3, r3, #5
 8008048:	0d1b      	lsrs	r3, r3, #20
 800804a:	69fa      	ldr	r2, [r7, #28]
 800804c:	fb02 f303 	mul.w	r3, r2, r3
 8008050:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008052:	e054      	b.n	80080fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800805a:	d050      	beq.n	80080fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800805c:	f7fc f828 	bl	80040b0 <HAL_GetTick>
 8008060:	4602      	mov	r2, r0
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	1ad3      	subs	r3, r2, r3
 8008066:	69fa      	ldr	r2, [r7, #28]
 8008068:	429a      	cmp	r2, r3
 800806a:	d902      	bls.n	8008072 <SPI_WaitFlagStateUntilTimeout+0x56>
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d13d      	bne.n	80080ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	685a      	ldr	r2, [r3, #4]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008080:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800808a:	d111      	bne.n	80080b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008094:	d004      	beq.n	80080a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800809e:	d107      	bne.n	80080b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080b8:	d10f      	bne.n	80080da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080c8:	601a      	str	r2, [r3, #0]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2201      	movs	r2, #1
 80080de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80080ea:	2303      	movs	r3, #3
 80080ec:	e017      	b.n	800811e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d101      	bne.n	80080f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80080f4:	2300      	movs	r3, #0
 80080f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	3b01      	subs	r3, #1
 80080fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	689a      	ldr	r2, [r3, #8]
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	4013      	ands	r3, r2
 8008108:	68ba      	ldr	r2, [r7, #8]
 800810a:	429a      	cmp	r2, r3
 800810c:	bf0c      	ite	eq
 800810e:	2301      	moveq	r3, #1
 8008110:	2300      	movne	r3, #0
 8008112:	b2db      	uxtb	r3, r3
 8008114:	461a      	mov	r2, r3
 8008116:	79fb      	ldrb	r3, [r7, #7]
 8008118:	429a      	cmp	r2, r3
 800811a:	d19b      	bne.n	8008054 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3720      	adds	r7, #32
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	200006ec 	.word	0x200006ec

0800812c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b086      	sub	sp, #24
 8008130:	af02      	add	r7, sp, #8
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008140:	d111      	bne.n	8008166 <SPI_EndRxTransaction+0x3a>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800814a:	d004      	beq.n	8008156 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008154:	d107      	bne.n	8008166 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008164:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800816e:	d12a      	bne.n	80081c6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008178:	d012      	beq.n	80081a0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	9300      	str	r3, [sp, #0]
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	2200      	movs	r2, #0
 8008182:	2180      	movs	r1, #128	; 0x80
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f7ff ff49 	bl	800801c <SPI_WaitFlagStateUntilTimeout>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d02d      	beq.n	80081ec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008194:	f043 0220 	orr.w	r2, r3, #32
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800819c:	2303      	movs	r3, #3
 800819e:	e026      	b.n	80081ee <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	9300      	str	r3, [sp, #0]
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	2200      	movs	r2, #0
 80081a8:	2101      	movs	r1, #1
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	f7ff ff36 	bl	800801c <SPI_WaitFlagStateUntilTimeout>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d01a      	beq.n	80081ec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ba:	f043 0220 	orr.w	r2, r3, #32
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e013      	b.n	80081ee <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	9300      	str	r3, [sp, #0]
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	2200      	movs	r2, #0
 80081ce:	2101      	movs	r1, #1
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f7ff ff23 	bl	800801c <SPI_WaitFlagStateUntilTimeout>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d007      	beq.n	80081ec <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081e0:	f043 0220 	orr.w	r2, r3, #32
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80081e8:	2303      	movs	r3, #3
 80081ea:	e000      	b.n	80081ee <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
	...

080081f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b088      	sub	sp, #32
 80081fc:	af02      	add	r7, sp, #8
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008204:	4b1b      	ldr	r3, [pc, #108]	; (8008274 <SPI_EndRxTxTransaction+0x7c>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a1b      	ldr	r2, [pc, #108]	; (8008278 <SPI_EndRxTxTransaction+0x80>)
 800820a:	fba2 2303 	umull	r2, r3, r2, r3
 800820e:	0d5b      	lsrs	r3, r3, #21
 8008210:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008214:	fb02 f303 	mul.w	r3, r2, r3
 8008218:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008222:	d112      	bne.n	800824a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	9300      	str	r3, [sp, #0]
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	2200      	movs	r2, #0
 800822c:	2180      	movs	r1, #128	; 0x80
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	f7ff fef4 	bl	800801c <SPI_WaitFlagStateUntilTimeout>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d016      	beq.n	8008268 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800823e:	f043 0220 	orr.w	r2, r3, #32
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008246:	2303      	movs	r3, #3
 8008248:	e00f      	b.n	800826a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d00a      	beq.n	8008266 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	3b01      	subs	r3, #1
 8008254:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008260:	2b80      	cmp	r3, #128	; 0x80
 8008262:	d0f2      	beq.n	800824a <SPI_EndRxTxTransaction+0x52>
 8008264:	e000      	b.n	8008268 <SPI_EndRxTxTransaction+0x70>
        break;
 8008266:	bf00      	nop
  }

  return HAL_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3718      	adds	r7, #24
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	200006ec 	.word	0x200006ec
 8008278:	165e9f81 	.word	0x165e9f81

0800827c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d101      	bne.n	800828e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e041      	b.n	8008312 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008294:	b2db      	uxtb	r3, r3
 8008296:	2b00      	cmp	r3, #0
 8008298:	d106      	bne.n	80082a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f7fb fdbe 	bl	8003e24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2202      	movs	r2, #2
 80082ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	3304      	adds	r3, #4
 80082b8:	4619      	mov	r1, r3
 80082ba:	4610      	mov	r0, r2
 80082bc:	f000 fd54 	bl	8008d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3708      	adds	r7, #8
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
	...

0800831c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800832a:	b2db      	uxtb	r3, r3
 800832c:	2b01      	cmp	r3, #1
 800832e:	d001      	beq.n	8008334 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	e03c      	b.n	80083ae <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2202      	movs	r2, #2
 8008338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a1e      	ldr	r2, [pc, #120]	; (80083bc <HAL_TIM_Base_Start+0xa0>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d018      	beq.n	8008378 <HAL_TIM_Base_Start+0x5c>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800834e:	d013      	beq.n	8008378 <HAL_TIM_Base_Start+0x5c>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a1a      	ldr	r2, [pc, #104]	; (80083c0 <HAL_TIM_Base_Start+0xa4>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d00e      	beq.n	8008378 <HAL_TIM_Base_Start+0x5c>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a19      	ldr	r2, [pc, #100]	; (80083c4 <HAL_TIM_Base_Start+0xa8>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d009      	beq.n	8008378 <HAL_TIM_Base_Start+0x5c>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a17      	ldr	r2, [pc, #92]	; (80083c8 <HAL_TIM_Base_Start+0xac>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d004      	beq.n	8008378 <HAL_TIM_Base_Start+0x5c>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a16      	ldr	r2, [pc, #88]	; (80083cc <HAL_TIM_Base_Start+0xb0>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d111      	bne.n	800839c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	f003 0307 	and.w	r3, r3, #7
 8008382:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2b06      	cmp	r3, #6
 8008388:	d010      	beq.n	80083ac <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f042 0201 	orr.w	r2, r2, #1
 8008398:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800839a:	e007      	b.n	80083ac <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f042 0201 	orr.w	r2, r2, #1
 80083aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3714      	adds	r7, #20
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	40010000 	.word	0x40010000
 80083c0:	40000400 	.word	0x40000400
 80083c4:	40000800 	.word	0x40000800
 80083c8:	40000c00 	.word	0x40000c00
 80083cc:	40014000 	.word	0x40014000

080083d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d001      	beq.n	80083e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	e044      	b.n	8008472 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2202      	movs	r2, #2
 80083ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68da      	ldr	r2, [r3, #12]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f042 0201 	orr.w	r2, r2, #1
 80083fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a1e      	ldr	r2, [pc, #120]	; (8008480 <HAL_TIM_Base_Start_IT+0xb0>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d018      	beq.n	800843c <HAL_TIM_Base_Start_IT+0x6c>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008412:	d013      	beq.n	800843c <HAL_TIM_Base_Start_IT+0x6c>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a1a      	ldr	r2, [pc, #104]	; (8008484 <HAL_TIM_Base_Start_IT+0xb4>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d00e      	beq.n	800843c <HAL_TIM_Base_Start_IT+0x6c>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a19      	ldr	r2, [pc, #100]	; (8008488 <HAL_TIM_Base_Start_IT+0xb8>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d009      	beq.n	800843c <HAL_TIM_Base_Start_IT+0x6c>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a17      	ldr	r2, [pc, #92]	; (800848c <HAL_TIM_Base_Start_IT+0xbc>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d004      	beq.n	800843c <HAL_TIM_Base_Start_IT+0x6c>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a16      	ldr	r2, [pc, #88]	; (8008490 <HAL_TIM_Base_Start_IT+0xc0>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d111      	bne.n	8008460 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	f003 0307 	and.w	r3, r3, #7
 8008446:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2b06      	cmp	r3, #6
 800844c:	d010      	beq.n	8008470 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f042 0201 	orr.w	r2, r2, #1
 800845c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800845e:	e007      	b.n	8008470 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f042 0201 	orr.w	r2, r2, #1
 800846e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3714      	adds	r7, #20
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	40010000 	.word	0x40010000
 8008484:	40000400 	.word	0x40000400
 8008488:	40000800 	.word	0x40000800
 800848c:	40000c00 	.word	0x40000c00
 8008490:	40014000 	.word	0x40014000

08008494 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d101      	bne.n	80084a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	e041      	b.n	800852a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d106      	bne.n	80084c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 f839 	bl	8008532 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2202      	movs	r2, #2
 80084c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	3304      	adds	r3, #4
 80084d0:	4619      	mov	r1, r3
 80084d2:	4610      	mov	r0, r2
 80084d4:	f000 fc48 	bl	8008d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2201      	movs	r2, #1
 800850c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3708      	adds	r7, #8
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008532:	b480      	push	{r7}
 8008534:	b083      	sub	sp, #12
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800853a:	bf00      	nop
 800853c:	370c      	adds	r7, #12
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
	...

08008548 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d109      	bne.n	800856c <HAL_TIM_PWM_Start+0x24>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800855e:	b2db      	uxtb	r3, r3
 8008560:	2b01      	cmp	r3, #1
 8008562:	bf14      	ite	ne
 8008564:	2301      	movne	r3, #1
 8008566:	2300      	moveq	r3, #0
 8008568:	b2db      	uxtb	r3, r3
 800856a:	e022      	b.n	80085b2 <HAL_TIM_PWM_Start+0x6a>
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	2b04      	cmp	r3, #4
 8008570:	d109      	bne.n	8008586 <HAL_TIM_PWM_Start+0x3e>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008578:	b2db      	uxtb	r3, r3
 800857a:	2b01      	cmp	r3, #1
 800857c:	bf14      	ite	ne
 800857e:	2301      	movne	r3, #1
 8008580:	2300      	moveq	r3, #0
 8008582:	b2db      	uxtb	r3, r3
 8008584:	e015      	b.n	80085b2 <HAL_TIM_PWM_Start+0x6a>
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	2b08      	cmp	r3, #8
 800858a:	d109      	bne.n	80085a0 <HAL_TIM_PWM_Start+0x58>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008592:	b2db      	uxtb	r3, r3
 8008594:	2b01      	cmp	r3, #1
 8008596:	bf14      	ite	ne
 8008598:	2301      	movne	r3, #1
 800859a:	2300      	moveq	r3, #0
 800859c:	b2db      	uxtb	r3, r3
 800859e:	e008      	b.n	80085b2 <HAL_TIM_PWM_Start+0x6a>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	bf14      	ite	ne
 80085ac:	2301      	movne	r3, #1
 80085ae:	2300      	moveq	r3, #0
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d001      	beq.n	80085ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	e068      	b.n	800868c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d104      	bne.n	80085ca <HAL_TIM_PWM_Start+0x82>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2202      	movs	r2, #2
 80085c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085c8:	e013      	b.n	80085f2 <HAL_TIM_PWM_Start+0xaa>
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	2b04      	cmp	r3, #4
 80085ce:	d104      	bne.n	80085da <HAL_TIM_PWM_Start+0x92>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2202      	movs	r2, #2
 80085d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085d8:	e00b      	b.n	80085f2 <HAL_TIM_PWM_Start+0xaa>
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	2b08      	cmp	r3, #8
 80085de:	d104      	bne.n	80085ea <HAL_TIM_PWM_Start+0xa2>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2202      	movs	r2, #2
 80085e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085e8:	e003      	b.n	80085f2 <HAL_TIM_PWM_Start+0xaa>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2202      	movs	r2, #2
 80085ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2201      	movs	r2, #1
 80085f8:	6839      	ldr	r1, [r7, #0]
 80085fa:	4618      	mov	r0, r3
 80085fc:	f000 fe5a 	bl	80092b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a23      	ldr	r2, [pc, #140]	; (8008694 <HAL_TIM_PWM_Start+0x14c>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d107      	bne.n	800861a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008618:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a1d      	ldr	r2, [pc, #116]	; (8008694 <HAL_TIM_PWM_Start+0x14c>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d018      	beq.n	8008656 <HAL_TIM_PWM_Start+0x10e>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800862c:	d013      	beq.n	8008656 <HAL_TIM_PWM_Start+0x10e>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a19      	ldr	r2, [pc, #100]	; (8008698 <HAL_TIM_PWM_Start+0x150>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d00e      	beq.n	8008656 <HAL_TIM_PWM_Start+0x10e>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a17      	ldr	r2, [pc, #92]	; (800869c <HAL_TIM_PWM_Start+0x154>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d009      	beq.n	8008656 <HAL_TIM_PWM_Start+0x10e>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a16      	ldr	r2, [pc, #88]	; (80086a0 <HAL_TIM_PWM_Start+0x158>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d004      	beq.n	8008656 <HAL_TIM_PWM_Start+0x10e>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a14      	ldr	r2, [pc, #80]	; (80086a4 <HAL_TIM_PWM_Start+0x15c>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d111      	bne.n	800867a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	f003 0307 	and.w	r3, r3, #7
 8008660:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2b06      	cmp	r3, #6
 8008666:	d010      	beq.n	800868a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f042 0201 	orr.w	r2, r2, #1
 8008676:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008678:	e007      	b.n	800868a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f042 0201 	orr.w	r2, r2, #1
 8008688:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800868a:	2300      	movs	r3, #0
}
 800868c:	4618      	mov	r0, r3
 800868e:	3710      	adds	r7, #16
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	40010000 	.word	0x40010000
 8008698:	40000400 	.word	0x40000400
 800869c:	40000800 	.word	0x40000800
 80086a0:	40000c00 	.word	0x40000c00
 80086a4:	40014000 	.word	0x40014000

080086a8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b086      	sub	sp, #24
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d101      	bne.n	80086bc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e097      	b.n	80087ec <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d106      	bne.n	80086d6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f7fb fb2b 	bl	8003d2c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2202      	movs	r2, #2
 80086da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	6812      	ldr	r2, [r2, #0]
 80086e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086ec:	f023 0307 	bic.w	r3, r3, #7
 80086f0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	3304      	adds	r3, #4
 80086fa:	4619      	mov	r1, r3
 80086fc:	4610      	mov	r0, r2
 80086fe:	f000 fb33 	bl	8008d68 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	6a1b      	ldr	r3, [r3, #32]
 8008718:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	4313      	orrs	r3, r2
 8008722:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800872a:	f023 0303 	bic.w	r3, r3, #3
 800872e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	689a      	ldr	r2, [r3, #8]
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	699b      	ldr	r3, [r3, #24]
 8008738:	021b      	lsls	r3, r3, #8
 800873a:	4313      	orrs	r3, r2
 800873c:	693a      	ldr	r2, [r7, #16]
 800873e:	4313      	orrs	r3, r2
 8008740:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008748:	f023 030c 	bic.w	r3, r3, #12
 800874c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008754:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008758:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	68da      	ldr	r2, [r3, #12]
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	69db      	ldr	r3, [r3, #28]
 8008762:	021b      	lsls	r3, r3, #8
 8008764:	4313      	orrs	r3, r2
 8008766:	693a      	ldr	r2, [r7, #16]
 8008768:	4313      	orrs	r3, r2
 800876a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	011a      	lsls	r2, r3, #4
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	6a1b      	ldr	r3, [r3, #32]
 8008776:	031b      	lsls	r3, r3, #12
 8008778:	4313      	orrs	r3, r2
 800877a:	693a      	ldr	r2, [r7, #16]
 800877c:	4313      	orrs	r3, r2
 800877e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008786:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800878e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	685a      	ldr	r2, [r3, #4]
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	695b      	ldr	r3, [r3, #20]
 8008798:	011b      	lsls	r3, r3, #4
 800879a:	4313      	orrs	r3, r2
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	4313      	orrs	r3, r2
 80087a0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	697a      	ldr	r2, [r7, #20]
 80087a8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	693a      	ldr	r2, [r7, #16]
 80087b0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2201      	movs	r2, #1
 80087be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2201      	movs	r2, #1
 80087ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2201      	movs	r2, #1
 80087d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2201      	movs	r2, #1
 80087de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2201      	movs	r2, #1
 80087e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3718      	adds	r7, #24
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	f003 0302 	and.w	r3, r3, #2
 8008806:	2b02      	cmp	r3, #2
 8008808:	d122      	bne.n	8008850 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	f003 0302 	and.w	r3, r3, #2
 8008814:	2b02      	cmp	r3, #2
 8008816:	d11b      	bne.n	8008850 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f06f 0202 	mvn.w	r2, #2
 8008820:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2201      	movs	r2, #1
 8008826:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	699b      	ldr	r3, [r3, #24]
 800882e:	f003 0303 	and.w	r3, r3, #3
 8008832:	2b00      	cmp	r3, #0
 8008834:	d003      	beq.n	800883e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 fa77 	bl	8008d2a <HAL_TIM_IC_CaptureCallback>
 800883c:	e005      	b.n	800884a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 fa69 	bl	8008d16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 fa7a 	bl	8008d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	691b      	ldr	r3, [r3, #16]
 8008856:	f003 0304 	and.w	r3, r3, #4
 800885a:	2b04      	cmp	r3, #4
 800885c:	d122      	bne.n	80088a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	f003 0304 	and.w	r3, r3, #4
 8008868:	2b04      	cmp	r3, #4
 800886a:	d11b      	bne.n	80088a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f06f 0204 	mvn.w	r2, #4
 8008874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2202      	movs	r2, #2
 800887a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	699b      	ldr	r3, [r3, #24]
 8008882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008886:	2b00      	cmp	r3, #0
 8008888:	d003      	beq.n	8008892 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 fa4d 	bl	8008d2a <HAL_TIM_IC_CaptureCallback>
 8008890:	e005      	b.n	800889e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 fa3f 	bl	8008d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 fa50 	bl	8008d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	691b      	ldr	r3, [r3, #16]
 80088aa:	f003 0308 	and.w	r3, r3, #8
 80088ae:	2b08      	cmp	r3, #8
 80088b0:	d122      	bne.n	80088f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	f003 0308 	and.w	r3, r3, #8
 80088bc:	2b08      	cmp	r3, #8
 80088be:	d11b      	bne.n	80088f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f06f 0208 	mvn.w	r2, #8
 80088c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2204      	movs	r2, #4
 80088ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	69db      	ldr	r3, [r3, #28]
 80088d6:	f003 0303 	and.w	r3, r3, #3
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d003      	beq.n	80088e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 fa23 	bl	8008d2a <HAL_TIM_IC_CaptureCallback>
 80088e4:	e005      	b.n	80088f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 fa15 	bl	8008d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 fa26 	bl	8008d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	f003 0310 	and.w	r3, r3, #16
 8008902:	2b10      	cmp	r3, #16
 8008904:	d122      	bne.n	800894c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	f003 0310 	and.w	r3, r3, #16
 8008910:	2b10      	cmp	r3, #16
 8008912:	d11b      	bne.n	800894c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f06f 0210 	mvn.w	r2, #16
 800891c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2208      	movs	r2, #8
 8008922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	69db      	ldr	r3, [r3, #28]
 800892a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800892e:	2b00      	cmp	r3, #0
 8008930:	d003      	beq.n	800893a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 f9f9 	bl	8008d2a <HAL_TIM_IC_CaptureCallback>
 8008938:	e005      	b.n	8008946 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 f9eb 	bl	8008d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 f9fc 	bl	8008d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	f003 0301 	and.w	r3, r3, #1
 8008956:	2b01      	cmp	r3, #1
 8008958:	d10e      	bne.n	8008978 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	f003 0301 	and.w	r3, r3, #1
 8008964:	2b01      	cmp	r3, #1
 8008966:	d107      	bne.n	8008978 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f06f 0201 	mvn.w	r2, #1
 8008970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f7f8 f926 	bl	8000bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	691b      	ldr	r3, [r3, #16]
 800897e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008982:	2b80      	cmp	r3, #128	; 0x80
 8008984:	d10e      	bne.n	80089a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008990:	2b80      	cmp	r3, #128	; 0x80
 8008992:	d107      	bne.n	80089a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800899c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 fd26 	bl	80093f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	691b      	ldr	r3, [r3, #16]
 80089aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ae:	2b40      	cmp	r3, #64	; 0x40
 80089b0:	d10e      	bne.n	80089d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089bc:	2b40      	cmp	r3, #64	; 0x40
 80089be:	d107      	bne.n	80089d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80089c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f9c1 	bl	8008d52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	f003 0320 	and.w	r3, r3, #32
 80089da:	2b20      	cmp	r3, #32
 80089dc:	d10e      	bne.n	80089fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	f003 0320 	and.w	r3, r3, #32
 80089e8:	2b20      	cmp	r3, #32
 80089ea:	d107      	bne.n	80089fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f06f 0220 	mvn.w	r2, #32
 80089f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fcf0 	bl	80093dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80089fc:	bf00      	nop
 80089fe:	3708      	adds	r7, #8
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b086      	sub	sp, #24
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a10:	2300      	movs	r3, #0
 8008a12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d101      	bne.n	8008a22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008a1e:	2302      	movs	r3, #2
 8008a20:	e0ae      	b.n	8008b80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2201      	movs	r2, #1
 8008a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2b0c      	cmp	r3, #12
 8008a2e:	f200 809f 	bhi.w	8008b70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008a32:	a201      	add	r2, pc, #4	; (adr r2, 8008a38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a38:	08008a6d 	.word	0x08008a6d
 8008a3c:	08008b71 	.word	0x08008b71
 8008a40:	08008b71 	.word	0x08008b71
 8008a44:	08008b71 	.word	0x08008b71
 8008a48:	08008aad 	.word	0x08008aad
 8008a4c:	08008b71 	.word	0x08008b71
 8008a50:	08008b71 	.word	0x08008b71
 8008a54:	08008b71 	.word	0x08008b71
 8008a58:	08008aef 	.word	0x08008aef
 8008a5c:	08008b71 	.word	0x08008b71
 8008a60:	08008b71 	.word	0x08008b71
 8008a64:	08008b71 	.word	0x08008b71
 8008a68:	08008b2f 	.word	0x08008b2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	68b9      	ldr	r1, [r7, #8]
 8008a72:	4618      	mov	r0, r3
 8008a74:	f000 f9f8 	bl	8008e68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	699a      	ldr	r2, [r3, #24]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f042 0208 	orr.w	r2, r2, #8
 8008a86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	699a      	ldr	r2, [r3, #24]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f022 0204 	bic.w	r2, r2, #4
 8008a96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	6999      	ldr	r1, [r3, #24]
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	691a      	ldr	r2, [r3, #16]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	430a      	orrs	r2, r1
 8008aa8:	619a      	str	r2, [r3, #24]
      break;
 8008aaa:	e064      	b.n	8008b76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68b9      	ldr	r1, [r7, #8]
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f000 fa3e 	bl	8008f34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	699a      	ldr	r2, [r3, #24]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ac6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	699a      	ldr	r2, [r3, #24]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ad6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	6999      	ldr	r1, [r3, #24]
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	691b      	ldr	r3, [r3, #16]
 8008ae2:	021a      	lsls	r2, r3, #8
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	430a      	orrs	r2, r1
 8008aea:	619a      	str	r2, [r3, #24]
      break;
 8008aec:	e043      	b.n	8008b76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	68b9      	ldr	r1, [r7, #8]
 8008af4:	4618      	mov	r0, r3
 8008af6:	f000 fa89 	bl	800900c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	69da      	ldr	r2, [r3, #28]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f042 0208 	orr.w	r2, r2, #8
 8008b08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	69da      	ldr	r2, [r3, #28]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f022 0204 	bic.w	r2, r2, #4
 8008b18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	69d9      	ldr	r1, [r3, #28]
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	691a      	ldr	r2, [r3, #16]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	430a      	orrs	r2, r1
 8008b2a:	61da      	str	r2, [r3, #28]
      break;
 8008b2c:	e023      	b.n	8008b76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	68b9      	ldr	r1, [r7, #8]
 8008b34:	4618      	mov	r0, r3
 8008b36:	f000 fad3 	bl	80090e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	69da      	ldr	r2, [r3, #28]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	69da      	ldr	r2, [r3, #28]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	69d9      	ldr	r1, [r3, #28]
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	691b      	ldr	r3, [r3, #16]
 8008b64:	021a      	lsls	r2, r3, #8
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	430a      	orrs	r2, r1
 8008b6c:	61da      	str	r2, [r3, #28]
      break;
 8008b6e:	e002      	b.n	8008b76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008b70:	2301      	movs	r3, #1
 8008b72:	75fb      	strb	r3, [r7, #23]
      break;
 8008b74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3718      	adds	r7, #24
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b92:	2300      	movs	r3, #0
 8008b94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d101      	bne.n	8008ba4 <HAL_TIM_ConfigClockSource+0x1c>
 8008ba0:	2302      	movs	r3, #2
 8008ba2:	e0b4      	b.n	8008d0e <HAL_TIM_ConfigClockSource+0x186>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2202      	movs	r2, #2
 8008bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008bc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008bca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	68ba      	ldr	r2, [r7, #8]
 8008bd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bdc:	d03e      	beq.n	8008c5c <HAL_TIM_ConfigClockSource+0xd4>
 8008bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008be2:	f200 8087 	bhi.w	8008cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8008be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bea:	f000 8086 	beq.w	8008cfa <HAL_TIM_ConfigClockSource+0x172>
 8008bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bf2:	d87f      	bhi.n	8008cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8008bf4:	2b70      	cmp	r3, #112	; 0x70
 8008bf6:	d01a      	beq.n	8008c2e <HAL_TIM_ConfigClockSource+0xa6>
 8008bf8:	2b70      	cmp	r3, #112	; 0x70
 8008bfa:	d87b      	bhi.n	8008cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8008bfc:	2b60      	cmp	r3, #96	; 0x60
 8008bfe:	d050      	beq.n	8008ca2 <HAL_TIM_ConfigClockSource+0x11a>
 8008c00:	2b60      	cmp	r3, #96	; 0x60
 8008c02:	d877      	bhi.n	8008cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8008c04:	2b50      	cmp	r3, #80	; 0x50
 8008c06:	d03c      	beq.n	8008c82 <HAL_TIM_ConfigClockSource+0xfa>
 8008c08:	2b50      	cmp	r3, #80	; 0x50
 8008c0a:	d873      	bhi.n	8008cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8008c0c:	2b40      	cmp	r3, #64	; 0x40
 8008c0e:	d058      	beq.n	8008cc2 <HAL_TIM_ConfigClockSource+0x13a>
 8008c10:	2b40      	cmp	r3, #64	; 0x40
 8008c12:	d86f      	bhi.n	8008cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8008c14:	2b30      	cmp	r3, #48	; 0x30
 8008c16:	d064      	beq.n	8008ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8008c18:	2b30      	cmp	r3, #48	; 0x30
 8008c1a:	d86b      	bhi.n	8008cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8008c1c:	2b20      	cmp	r3, #32
 8008c1e:	d060      	beq.n	8008ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8008c20:	2b20      	cmp	r3, #32
 8008c22:	d867      	bhi.n	8008cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d05c      	beq.n	8008ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8008c28:	2b10      	cmp	r3, #16
 8008c2a:	d05a      	beq.n	8008ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8008c2c:	e062      	b.n	8008cf4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6818      	ldr	r0, [r3, #0]
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	6899      	ldr	r1, [r3, #8]
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	685a      	ldr	r2, [r3, #4]
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	68db      	ldr	r3, [r3, #12]
 8008c3e:	f000 fb19 	bl	8009274 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008c50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68ba      	ldr	r2, [r7, #8]
 8008c58:	609a      	str	r2, [r3, #8]
      break;
 8008c5a:	e04f      	b.n	8008cfc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6818      	ldr	r0, [r3, #0]
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	6899      	ldr	r1, [r3, #8]
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	685a      	ldr	r2, [r3, #4]
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	f000 fb02 	bl	8009274 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	689a      	ldr	r2, [r3, #8]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c7e:	609a      	str	r2, [r3, #8]
      break;
 8008c80:	e03c      	b.n	8008cfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6818      	ldr	r0, [r3, #0]
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	6859      	ldr	r1, [r3, #4]
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	461a      	mov	r2, r3
 8008c90:	f000 fa76 	bl	8009180 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2150      	movs	r1, #80	; 0x50
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f000 facf 	bl	800923e <TIM_ITRx_SetConfig>
      break;
 8008ca0:	e02c      	b.n	8008cfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6818      	ldr	r0, [r3, #0]
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	6859      	ldr	r1, [r3, #4]
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	461a      	mov	r2, r3
 8008cb0:	f000 fa95 	bl	80091de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2160      	movs	r1, #96	; 0x60
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f000 fabf 	bl	800923e <TIM_ITRx_SetConfig>
      break;
 8008cc0:	e01c      	b.n	8008cfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6818      	ldr	r0, [r3, #0]
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	6859      	ldr	r1, [r3, #4]
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	68db      	ldr	r3, [r3, #12]
 8008cce:	461a      	mov	r2, r3
 8008cd0:	f000 fa56 	bl	8009180 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2140      	movs	r1, #64	; 0x40
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f000 faaf 	bl	800923e <TIM_ITRx_SetConfig>
      break;
 8008ce0:	e00c      	b.n	8008cfc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4619      	mov	r1, r3
 8008cec:	4610      	mov	r0, r2
 8008cee:	f000 faa6 	bl	800923e <TIM_ITRx_SetConfig>
      break;
 8008cf2:	e003      	b.n	8008cfc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8008cf8:	e000      	b.n	8008cfc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008cfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3710      	adds	r7, #16
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d16:	b480      	push	{r7}
 8008d18:	b083      	sub	sp, #12
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d1e:	bf00      	nop
 8008d20:	370c      	adds	r7, #12
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr

08008d2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d2a:	b480      	push	{r7}
 8008d2c:	b083      	sub	sp, #12
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d32:	bf00      	nop
 8008d34:	370c      	adds	r7, #12
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr

08008d3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d3e:	b480      	push	{r7}
 8008d40:	b083      	sub	sp, #12
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d46:	bf00      	nop
 8008d48:	370c      	adds	r7, #12
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr

08008d52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d52:	b480      	push	{r7}
 8008d54:	b083      	sub	sp, #12
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d5a:	bf00      	nop
 8008d5c:	370c      	adds	r7, #12
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr
	...

08008d68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4a34      	ldr	r2, [pc, #208]	; (8008e4c <TIM_Base_SetConfig+0xe4>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d00f      	beq.n	8008da0 <TIM_Base_SetConfig+0x38>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d86:	d00b      	beq.n	8008da0 <TIM_Base_SetConfig+0x38>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4a31      	ldr	r2, [pc, #196]	; (8008e50 <TIM_Base_SetConfig+0xe8>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d007      	beq.n	8008da0 <TIM_Base_SetConfig+0x38>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a30      	ldr	r2, [pc, #192]	; (8008e54 <TIM_Base_SetConfig+0xec>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d003      	beq.n	8008da0 <TIM_Base_SetConfig+0x38>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a2f      	ldr	r2, [pc, #188]	; (8008e58 <TIM_Base_SetConfig+0xf0>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d108      	bne.n	8008db2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008da6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	68fa      	ldr	r2, [r7, #12]
 8008dae:	4313      	orrs	r3, r2
 8008db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4a25      	ldr	r2, [pc, #148]	; (8008e4c <TIM_Base_SetConfig+0xe4>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d01b      	beq.n	8008df2 <TIM_Base_SetConfig+0x8a>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dc0:	d017      	beq.n	8008df2 <TIM_Base_SetConfig+0x8a>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4a22      	ldr	r2, [pc, #136]	; (8008e50 <TIM_Base_SetConfig+0xe8>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d013      	beq.n	8008df2 <TIM_Base_SetConfig+0x8a>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a21      	ldr	r2, [pc, #132]	; (8008e54 <TIM_Base_SetConfig+0xec>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d00f      	beq.n	8008df2 <TIM_Base_SetConfig+0x8a>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a20      	ldr	r2, [pc, #128]	; (8008e58 <TIM_Base_SetConfig+0xf0>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d00b      	beq.n	8008df2 <TIM_Base_SetConfig+0x8a>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4a1f      	ldr	r2, [pc, #124]	; (8008e5c <TIM_Base_SetConfig+0xf4>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d007      	beq.n	8008df2 <TIM_Base_SetConfig+0x8a>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a1e      	ldr	r2, [pc, #120]	; (8008e60 <TIM_Base_SetConfig+0xf8>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d003      	beq.n	8008df2 <TIM_Base_SetConfig+0x8a>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4a1d      	ldr	r2, [pc, #116]	; (8008e64 <TIM_Base_SetConfig+0xfc>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d108      	bne.n	8008e04 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	68fa      	ldr	r2, [r7, #12]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	695b      	ldr	r3, [r3, #20]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	689a      	ldr	r2, [r3, #8]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4a08      	ldr	r2, [pc, #32]	; (8008e4c <TIM_Base_SetConfig+0xe4>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d103      	bne.n	8008e38 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	691a      	ldr	r2, [r3, #16]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	615a      	str	r2, [r3, #20]
}
 8008e3e:	bf00      	nop
 8008e40:	3714      	adds	r7, #20
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	40010000 	.word	0x40010000
 8008e50:	40000400 	.word	0x40000400
 8008e54:	40000800 	.word	0x40000800
 8008e58:	40000c00 	.word	0x40000c00
 8008e5c:	40014000 	.word	0x40014000
 8008e60:	40014400 	.word	0x40014400
 8008e64:	40014800 	.word	0x40014800

08008e68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b087      	sub	sp, #28
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a1b      	ldr	r3, [r3, #32]
 8008e76:	f023 0201 	bic.w	r2, r3, #1
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6a1b      	ldr	r3, [r3, #32]
 8008e82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	699b      	ldr	r3, [r3, #24]
 8008e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f023 0303 	bic.w	r3, r3, #3
 8008e9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	f023 0302 	bic.w	r3, r3, #2
 8008eb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	697a      	ldr	r2, [r7, #20]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4a1c      	ldr	r2, [pc, #112]	; (8008f30 <TIM_OC1_SetConfig+0xc8>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d10c      	bne.n	8008ede <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	f023 0308 	bic.w	r3, r3, #8
 8008eca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	697a      	ldr	r2, [r7, #20]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	f023 0304 	bic.w	r3, r3, #4
 8008edc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4a13      	ldr	r2, [pc, #76]	; (8008f30 <TIM_OC1_SetConfig+0xc8>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d111      	bne.n	8008f0a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008eec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	695b      	ldr	r3, [r3, #20]
 8008efa:	693a      	ldr	r2, [r7, #16]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	699b      	ldr	r3, [r3, #24]
 8008f04:	693a      	ldr	r2, [r7, #16]
 8008f06:	4313      	orrs	r3, r2
 8008f08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	693a      	ldr	r2, [r7, #16]
 8008f0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	68fa      	ldr	r2, [r7, #12]
 8008f14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	685a      	ldr	r2, [r3, #4]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	697a      	ldr	r2, [r7, #20]
 8008f22:	621a      	str	r2, [r3, #32]
}
 8008f24:	bf00      	nop
 8008f26:	371c      	adds	r7, #28
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr
 8008f30:	40010000 	.word	0x40010000

08008f34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b087      	sub	sp, #28
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a1b      	ldr	r3, [r3, #32]
 8008f42:	f023 0210 	bic.w	r2, r3, #16
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6a1b      	ldr	r3, [r3, #32]
 8008f4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	699b      	ldr	r3, [r3, #24]
 8008f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	021b      	lsls	r3, r3, #8
 8008f72:	68fa      	ldr	r2, [r7, #12]
 8008f74:	4313      	orrs	r3, r2
 8008f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	f023 0320 	bic.w	r3, r3, #32
 8008f7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	011b      	lsls	r3, r3, #4
 8008f86:	697a      	ldr	r2, [r7, #20]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	4a1e      	ldr	r2, [pc, #120]	; (8009008 <TIM_OC2_SetConfig+0xd4>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d10d      	bne.n	8008fb0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	011b      	lsls	r3, r3, #4
 8008fa2:	697a      	ldr	r2, [r7, #20]
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4a15      	ldr	r2, [pc, #84]	; (8009008 <TIM_OC2_SetConfig+0xd4>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d113      	bne.n	8008fe0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008fbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	695b      	ldr	r3, [r3, #20]
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	693a      	ldr	r2, [r7, #16]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	699b      	ldr	r3, [r3, #24]
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	693a      	ldr	r2, [r7, #16]
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	693a      	ldr	r2, [r7, #16]
 8008fe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	685a      	ldr	r2, [r3, #4]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	697a      	ldr	r2, [r7, #20]
 8008ff8:	621a      	str	r2, [r3, #32]
}
 8008ffa:	bf00      	nop
 8008ffc:	371c      	adds	r7, #28
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop
 8009008:	40010000 	.word	0x40010000

0800900c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800900c:	b480      	push	{r7}
 800900e:	b087      	sub	sp, #28
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6a1b      	ldr	r3, [r3, #32]
 800901a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6a1b      	ldr	r3, [r3, #32]
 8009026:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	69db      	ldr	r3, [r3, #28]
 8009032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800903a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f023 0303 	bic.w	r3, r3, #3
 8009042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	4313      	orrs	r3, r2
 800904c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	689b      	ldr	r3, [r3, #8]
 800905a:	021b      	lsls	r3, r3, #8
 800905c:	697a      	ldr	r2, [r7, #20]
 800905e:	4313      	orrs	r3, r2
 8009060:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4a1d      	ldr	r2, [pc, #116]	; (80090dc <TIM_OC3_SetConfig+0xd0>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d10d      	bne.n	8009086 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009070:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	021b      	lsls	r3, r3, #8
 8009078:	697a      	ldr	r2, [r7, #20]
 800907a:	4313      	orrs	r3, r2
 800907c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4a14      	ldr	r2, [pc, #80]	; (80090dc <TIM_OC3_SetConfig+0xd0>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d113      	bne.n	80090b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009094:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800909c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	695b      	ldr	r3, [r3, #20]
 80090a2:	011b      	lsls	r3, r3, #4
 80090a4:	693a      	ldr	r2, [r7, #16]
 80090a6:	4313      	orrs	r3, r2
 80090a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	699b      	ldr	r3, [r3, #24]
 80090ae:	011b      	lsls	r3, r3, #4
 80090b0:	693a      	ldr	r2, [r7, #16]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	693a      	ldr	r2, [r7, #16]
 80090ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	68fa      	ldr	r2, [r7, #12]
 80090c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	685a      	ldr	r2, [r3, #4]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	697a      	ldr	r2, [r7, #20]
 80090ce:	621a      	str	r2, [r3, #32]
}
 80090d0:	bf00      	nop
 80090d2:	371c      	adds	r7, #28
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr
 80090dc:	40010000 	.word	0x40010000

080090e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b087      	sub	sp, #28
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6a1b      	ldr	r3, [r3, #32]
 80090ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6a1b      	ldr	r3, [r3, #32]
 80090fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	69db      	ldr	r3, [r3, #28]
 8009106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800910e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009116:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	021b      	lsls	r3, r3, #8
 800911e:	68fa      	ldr	r2, [r7, #12]
 8009120:	4313      	orrs	r3, r2
 8009122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800912a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	031b      	lsls	r3, r3, #12
 8009132:	693a      	ldr	r2, [r7, #16]
 8009134:	4313      	orrs	r3, r2
 8009136:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4a10      	ldr	r2, [pc, #64]	; (800917c <TIM_OC4_SetConfig+0x9c>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d109      	bne.n	8009154 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009146:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	695b      	ldr	r3, [r3, #20]
 800914c:	019b      	lsls	r3, r3, #6
 800914e:	697a      	ldr	r2, [r7, #20]
 8009150:	4313      	orrs	r3, r2
 8009152:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	697a      	ldr	r2, [r7, #20]
 8009158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	68fa      	ldr	r2, [r7, #12]
 800915e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	685a      	ldr	r2, [r3, #4]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	693a      	ldr	r2, [r7, #16]
 800916c:	621a      	str	r2, [r3, #32]
}
 800916e:	bf00      	nop
 8009170:	371c      	adds	r7, #28
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr
 800917a:	bf00      	nop
 800917c:	40010000 	.word	0x40010000

08009180 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009180:	b480      	push	{r7}
 8009182:	b087      	sub	sp, #28
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	6a1b      	ldr	r3, [r3, #32]
 8009190:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6a1b      	ldr	r3, [r3, #32]
 8009196:	f023 0201 	bic.w	r2, r3, #1
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	699b      	ldr	r3, [r3, #24]
 80091a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80091aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	011b      	lsls	r3, r3, #4
 80091b0:	693a      	ldr	r2, [r7, #16]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	f023 030a 	bic.w	r3, r3, #10
 80091bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80091be:	697a      	ldr	r2, [r7, #20]
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	693a      	ldr	r2, [r7, #16]
 80091ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	697a      	ldr	r2, [r7, #20]
 80091d0:	621a      	str	r2, [r3, #32]
}
 80091d2:	bf00      	nop
 80091d4:	371c      	adds	r7, #28
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr

080091de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091de:	b480      	push	{r7}
 80091e0:	b087      	sub	sp, #28
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	60f8      	str	r0, [r7, #12]
 80091e6:	60b9      	str	r1, [r7, #8]
 80091e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6a1b      	ldr	r3, [r3, #32]
 80091ee:	f023 0210 	bic.w	r2, r3, #16
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	699b      	ldr	r3, [r3, #24]
 80091fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	6a1b      	ldr	r3, [r3, #32]
 8009200:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009208:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	031b      	lsls	r3, r3, #12
 800920e:	697a      	ldr	r2, [r7, #20]
 8009210:	4313      	orrs	r3, r2
 8009212:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800921a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	011b      	lsls	r3, r3, #4
 8009220:	693a      	ldr	r2, [r7, #16]
 8009222:	4313      	orrs	r3, r2
 8009224:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	697a      	ldr	r2, [r7, #20]
 800922a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	693a      	ldr	r2, [r7, #16]
 8009230:	621a      	str	r2, [r3, #32]
}
 8009232:	bf00      	nop
 8009234:	371c      	adds	r7, #28
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr

0800923e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800923e:	b480      	push	{r7}
 8009240:	b085      	sub	sp, #20
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
 8009246:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009254:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009256:	683a      	ldr	r2, [r7, #0]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	4313      	orrs	r3, r2
 800925c:	f043 0307 	orr.w	r3, r3, #7
 8009260:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	609a      	str	r2, [r3, #8]
}
 8009268:	bf00      	nop
 800926a:	3714      	adds	r7, #20
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr

08009274 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009274:	b480      	push	{r7}
 8009276:	b087      	sub	sp, #28
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	607a      	str	r2, [r7, #4]
 8009280:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800928e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	021a      	lsls	r2, r3, #8
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	431a      	orrs	r2, r3
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	4313      	orrs	r3, r2
 800929c:	697a      	ldr	r2, [r7, #20]
 800929e:	4313      	orrs	r3, r2
 80092a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	697a      	ldr	r2, [r7, #20]
 80092a6:	609a      	str	r2, [r3, #8]
}
 80092a8:	bf00      	nop
 80092aa:	371c      	adds	r7, #28
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b087      	sub	sp, #28
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	f003 031f 	and.w	r3, r3, #31
 80092c6:	2201      	movs	r2, #1
 80092c8:	fa02 f303 	lsl.w	r3, r2, r3
 80092cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6a1a      	ldr	r2, [r3, #32]
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	43db      	mvns	r3, r3
 80092d6:	401a      	ands	r2, r3
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6a1a      	ldr	r2, [r3, #32]
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	f003 031f 	and.w	r3, r3, #31
 80092e6:	6879      	ldr	r1, [r7, #4]
 80092e8:	fa01 f303 	lsl.w	r3, r1, r3
 80092ec:	431a      	orrs	r2, r3
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	621a      	str	r2, [r3, #32]
}
 80092f2:	bf00      	nop
 80092f4:	371c      	adds	r7, #28
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr
	...

08009300 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009300:	b480      	push	{r7}
 8009302:	b085      	sub	sp, #20
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009310:	2b01      	cmp	r3, #1
 8009312:	d101      	bne.n	8009318 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009314:	2302      	movs	r3, #2
 8009316:	e050      	b.n	80093ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2202      	movs	r2, #2
 8009324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800933e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	68fa      	ldr	r2, [r7, #12]
 8009346:	4313      	orrs	r3, r2
 8009348:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	68fa      	ldr	r2, [r7, #12]
 8009350:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a1c      	ldr	r2, [pc, #112]	; (80093c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d018      	beq.n	800938e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009364:	d013      	beq.n	800938e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a18      	ldr	r2, [pc, #96]	; (80093cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d00e      	beq.n	800938e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a16      	ldr	r2, [pc, #88]	; (80093d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d009      	beq.n	800938e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4a15      	ldr	r2, [pc, #84]	; (80093d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d004      	beq.n	800938e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a13      	ldr	r2, [pc, #76]	; (80093d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d10c      	bne.n	80093a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009394:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	68ba      	ldr	r2, [r7, #8]
 800939c:	4313      	orrs	r3, r2
 800939e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	68ba      	ldr	r2, [r7, #8]
 80093a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3714      	adds	r7, #20
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr
 80093c6:	bf00      	nop
 80093c8:	40010000 	.word	0x40010000
 80093cc:	40000400 	.word	0x40000400
 80093d0:	40000800 	.word	0x40000800
 80093d4:	40000c00 	.word	0x40000c00
 80093d8:	40014000 	.word	0x40014000

080093dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80093e4:	bf00      	nop
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80093f8:	bf00      	nop
 80093fa:	370c      	adds	r7, #12
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr

08009404 <arm_sin_f32>:
 8009404:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8009480 <arm_sin_f32+0x7c>
 8009408:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800940c:	ee20 7a07 	vmul.f32	s14, s0, s14
 8009410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009414:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8009418:	d42c      	bmi.n	8009474 <arm_sin_f32+0x70>
 800941a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800941e:	eddf 6a19 	vldr	s13, [pc, #100]	; 8009484 <arm_sin_f32+0x80>
 8009422:	4a19      	ldr	r2, [pc, #100]	; (8009488 <arm_sin_f32+0x84>)
 8009424:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009428:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800942c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009430:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009438:	bfa8      	it	ge
 800943a:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 800943e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8009442:	ee17 3a10 	vmov	r3, s14
 8009446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800944a:	ee07 3a10 	vmov	s14, r3
 800944e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8009452:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8009456:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800945a:	edd1 6a01 	vldr	s13, [r1, #4]
 800945e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009462:	ed91 0a00 	vldr	s0, [r1]
 8009466:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800946a:	ee27 0a00 	vmul.f32	s0, s14, s0
 800946e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009472:	4770      	bx	lr
 8009474:	ee17 3a90 	vmov	r3, s15
 8009478:	3b01      	subs	r3, #1
 800947a:	ee07 3a90 	vmov	s15, r3
 800947e:	e7cc      	b.n	800941a <arm_sin_f32+0x16>
 8009480:	3e22f983 	.word	0x3e22f983
 8009484:	44000000 	.word	0x44000000
 8009488:	0800a1e4 	.word	0x0800a1e4

0800948c <__libc_init_array>:
 800948c:	b570      	push	{r4, r5, r6, lr}
 800948e:	4d0d      	ldr	r5, [pc, #52]	; (80094c4 <__libc_init_array+0x38>)
 8009490:	4c0d      	ldr	r4, [pc, #52]	; (80094c8 <__libc_init_array+0x3c>)
 8009492:	1b64      	subs	r4, r4, r5
 8009494:	10a4      	asrs	r4, r4, #2
 8009496:	2600      	movs	r6, #0
 8009498:	42a6      	cmp	r6, r4
 800949a:	d109      	bne.n	80094b0 <__libc_init_array+0x24>
 800949c:	4d0b      	ldr	r5, [pc, #44]	; (80094cc <__libc_init_array+0x40>)
 800949e:	4c0c      	ldr	r4, [pc, #48]	; (80094d0 <__libc_init_array+0x44>)
 80094a0:	f000 f82e 	bl	8009500 <_init>
 80094a4:	1b64      	subs	r4, r4, r5
 80094a6:	10a4      	asrs	r4, r4, #2
 80094a8:	2600      	movs	r6, #0
 80094aa:	42a6      	cmp	r6, r4
 80094ac:	d105      	bne.n	80094ba <__libc_init_array+0x2e>
 80094ae:	bd70      	pop	{r4, r5, r6, pc}
 80094b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80094b4:	4798      	blx	r3
 80094b6:	3601      	adds	r6, #1
 80094b8:	e7ee      	b.n	8009498 <__libc_init_array+0xc>
 80094ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80094be:	4798      	blx	r3
 80094c0:	3601      	adds	r6, #1
 80094c2:	e7f2      	b.n	80094aa <__libc_init_array+0x1e>
 80094c4:	0800a9f0 	.word	0x0800a9f0
 80094c8:	0800a9f0 	.word	0x0800a9f0
 80094cc:	0800a9f0 	.word	0x0800a9f0
 80094d0:	0800a9f4 	.word	0x0800a9f4

080094d4 <memcpy>:
 80094d4:	440a      	add	r2, r1
 80094d6:	4291      	cmp	r1, r2
 80094d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80094dc:	d100      	bne.n	80094e0 <memcpy+0xc>
 80094de:	4770      	bx	lr
 80094e0:	b510      	push	{r4, lr}
 80094e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094ea:	4291      	cmp	r1, r2
 80094ec:	d1f9      	bne.n	80094e2 <memcpy+0xe>
 80094ee:	bd10      	pop	{r4, pc}

080094f0 <memset>:
 80094f0:	4402      	add	r2, r0
 80094f2:	4603      	mov	r3, r0
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d100      	bne.n	80094fa <memset+0xa>
 80094f8:	4770      	bx	lr
 80094fa:	f803 1b01 	strb.w	r1, [r3], #1
 80094fe:	e7f9      	b.n	80094f4 <memset+0x4>

08009500 <_init>:
 8009500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009502:	bf00      	nop
 8009504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009506:	bc08      	pop	{r3}
 8009508:	469e      	mov	lr, r3
 800950a:	4770      	bx	lr

0800950c <_fini>:
 800950c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800950e:	bf00      	nop
 8009510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009512:	bc08      	pop	{r3}
 8009514:	469e      	mov	lr, r3
 8009516:	4770      	bx	lr
