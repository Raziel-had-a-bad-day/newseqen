
newseqen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d410  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002708  0800d5a8  0800d5a8  0001d5a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fcb0  0800fcb0  00028fec  2**0
                  CONTENTS
  4 .ARM          00000008  0800fcb0  0800fcb0  0001fcb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fcb8  0800fcb8  00028fec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fcb8  0800fcb8  0001fcb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fcbc  0800fcbc  0001fcbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00008fec  20000000  0800fcc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a2f8  20008fec  08018cac  00028fec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200132e4  08018cac  000332e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00028fec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b62  00000000  00000000  0002901c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002840  00000000  00000000  00041b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c0  00000000  00000000  000443c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d8  00000000  00000000  00045880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018dea  00000000  00000000  00046c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019b2d  00000000  00000000  0005fa42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1ffc  00000000  00000000  0007956f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  0011b56b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bdc  00000000  00000000  0011b62c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000d8  00000000  00000000  00121208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20008fec 	.word	0x20008fec
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800d590 	.word	0x0800d590

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20008ff0 	.word	0x20008ff0
 80001d4:	0800d590 	.word	0x0800d590

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_dmul>:
 80001e8:	b570      	push	{r4, r5, r6, lr}
 80001ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001f6:	bf1d      	ittte	ne
 80001f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001fc:	ea94 0f0c 	teqne	r4, ip
 8000200:	ea95 0f0c 	teqne	r5, ip
 8000204:	f000 f8de 	bleq	80003c4 <__aeabi_dmul+0x1dc>
 8000208:	442c      	add	r4, r5
 800020a:	ea81 0603 	eor.w	r6, r1, r3
 800020e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000212:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000216:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021a:	bf18      	it	ne
 800021c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000228:	d038      	beq.n	800029c <__aeabi_dmul+0xb4>
 800022a:	fba0 ce02 	umull	ip, lr, r0, r2
 800022e:	f04f 0500 	mov.w	r5, #0
 8000232:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000236:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800023a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800023e:	f04f 0600 	mov.w	r6, #0
 8000242:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000246:	f09c 0f00 	teq	ip, #0
 800024a:	bf18      	it	ne
 800024c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000250:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000254:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000258:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800025c:	d204      	bcs.n	8000268 <__aeabi_dmul+0x80>
 800025e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000262:	416d      	adcs	r5, r5
 8000264:	eb46 0606 	adc.w	r6, r6, r6
 8000268:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800026c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000270:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000274:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000278:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800027c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000280:	bf88      	it	hi
 8000282:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000286:	d81e      	bhi.n	80002c6 <__aeabi_dmul+0xde>
 8000288:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a0:	ea46 0101 	orr.w	r1, r6, r1
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	ea81 0103 	eor.w	r1, r1, r3
 80002ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b0:	bfc2      	ittt	gt
 80002b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	popgt	{r4, r5, r6, pc}
 80002bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c0:	f04f 0e00 	mov.w	lr, #0
 80002c4:	3c01      	subs	r4, #1
 80002c6:	f300 80ab 	bgt.w	8000420 <__aeabi_dmul+0x238>
 80002ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ce:	bfde      	ittt	le
 80002d0:	2000      	movle	r0, #0
 80002d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002d6:	bd70      	pople	{r4, r5, r6, pc}
 80002d8:	f1c4 0400 	rsb	r4, r4, #0
 80002dc:	3c20      	subs	r4, #32
 80002de:	da35      	bge.n	800034c <__aeabi_dmul+0x164>
 80002e0:	340c      	adds	r4, #12
 80002e2:	dc1b      	bgt.n	800031c <__aeabi_dmul+0x134>
 80002e4:	f104 0414 	add.w	r4, r4, #20
 80002e8:	f1c4 0520 	rsb	r5, r4, #32
 80002ec:	fa00 f305 	lsl.w	r3, r0, r5
 80002f0:	fa20 f004 	lsr.w	r0, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea40 0002 	orr.w	r0, r0, r2
 80002fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000300:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000304:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000308:	fa21 f604 	lsr.w	r6, r1, r4
 800030c:	eb42 0106 	adc.w	r1, r2, r6
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f1c4 040c 	rsb	r4, r4, #12
 8000320:	f1c4 0520 	rsb	r5, r4, #32
 8000324:	fa00 f304 	lsl.w	r3, r0, r4
 8000328:	fa20 f005 	lsr.w	r0, r0, r5
 800032c:	fa01 f204 	lsl.w	r2, r1, r4
 8000330:	ea40 0002 	orr.w	r0, r0, r2
 8000334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000338:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 0520 	rsb	r5, r4, #32
 8000350:	fa00 f205 	lsl.w	r2, r0, r5
 8000354:	ea4e 0e02 	orr.w	lr, lr, r2
 8000358:	fa20 f304 	lsr.w	r3, r0, r4
 800035c:	fa01 f205 	lsl.w	r2, r1, r5
 8000360:	ea43 0302 	orr.w	r3, r3, r2
 8000364:	fa21 f004 	lsr.w	r0, r1, r4
 8000368:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800036c:	fa21 f204 	lsr.w	r2, r1, r4
 8000370:	ea20 0002 	bic.w	r0, r0, r2
 8000374:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800037c:	bf08      	it	eq
 800037e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f094 0f00 	teq	r4, #0
 8000388:	d10f      	bne.n	80003aa <__aeabi_dmul+0x1c2>
 800038a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800038e:	0040      	lsls	r0, r0, #1
 8000390:	eb41 0101 	adc.w	r1, r1, r1
 8000394:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3c01      	subeq	r4, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1a6>
 800039e:	ea41 0106 	orr.w	r1, r1, r6
 80003a2:	f095 0f00 	teq	r5, #0
 80003a6:	bf18      	it	ne
 80003a8:	4770      	bxne	lr
 80003aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ae:	0052      	lsls	r2, r2, #1
 80003b0:	eb43 0303 	adc.w	r3, r3, r3
 80003b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3d01      	subeq	r5, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1c6>
 80003be:	ea43 0306 	orr.w	r3, r3, r6
 80003c2:	4770      	bx	lr
 80003c4:	ea94 0f0c 	teq	r4, ip
 80003c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003cc:	bf18      	it	ne
 80003ce:	ea95 0f0c 	teqne	r5, ip
 80003d2:	d00c      	beq.n	80003ee <__aeabi_dmul+0x206>
 80003d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d8:	bf18      	it	ne
 80003da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003de:	d1d1      	bne.n	8000384 <__aeabi_dmul+0x19c>
 80003e0:	ea81 0103 	eor.w	r1, r1, r3
 80003e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd70      	pop	{r4, r5, r6, pc}
 80003ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f2:	bf06      	itte	eq
 80003f4:	4610      	moveq	r0, r2
 80003f6:	4619      	moveq	r1, r3
 80003f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fc:	d019      	beq.n	8000432 <__aeabi_dmul+0x24a>
 80003fe:	ea94 0f0c 	teq	r4, ip
 8000402:	d102      	bne.n	800040a <__aeabi_dmul+0x222>
 8000404:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000408:	d113      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800040a:	ea95 0f0c 	teq	r5, ip
 800040e:	d105      	bne.n	800041c <__aeabi_dmul+0x234>
 8000410:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000414:	bf1c      	itt	ne
 8000416:	4610      	movne	r0, r2
 8000418:	4619      	movne	r1, r3
 800041a:	d10a      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800041c:	ea81 0103 	eor.w	r1, r1, r3
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd70      	pop	{r4, r5, r6, pc}
 8000432:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000436:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800043a:	bd70      	pop	{r4, r5, r6, pc}

0800043c <__aeabi_drsub>:
 800043c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000440:	e002      	b.n	8000448 <__adddf3>
 8000442:	bf00      	nop

08000444 <__aeabi_dsub>:
 8000444:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000448 <__adddf3>:
 8000448:	b530      	push	{r4, r5, lr}
 800044a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800044e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	bf1f      	itttt	ne
 800045e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000462:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000466:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800046e:	f000 80e2 	beq.w	8000636 <__adddf3+0x1ee>
 8000472:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000476:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047a:	bfb8      	it	lt
 800047c:	426d      	neglt	r5, r5
 800047e:	dd0c      	ble.n	800049a <__adddf3+0x52>
 8000480:	442c      	add	r4, r5
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	ea82 0000 	eor.w	r0, r2, r0
 800048e:	ea83 0101 	eor.w	r1, r3, r1
 8000492:	ea80 0202 	eor.w	r2, r0, r2
 8000496:	ea81 0303 	eor.w	r3, r1, r3
 800049a:	2d36      	cmp	r5, #54	; 0x36
 800049c:	bf88      	it	hi
 800049e:	bd30      	pophi	{r4, r5, pc}
 80004a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x70>
 80004b2:	4240      	negs	r0, r0
 80004b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c4:	d002      	beq.n	80004cc <__adddf3+0x84>
 80004c6:	4252      	negs	r2, r2
 80004c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004cc:	ea94 0f05 	teq	r4, r5
 80004d0:	f000 80a7 	beq.w	8000622 <__adddf3+0x1da>
 80004d4:	f1a4 0401 	sub.w	r4, r4, #1
 80004d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004dc:	db0d      	blt.n	80004fa <__adddf3+0xb2>
 80004de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e2:	fa22 f205 	lsr.w	r2, r2, r5
 80004e6:	1880      	adds	r0, r0, r2
 80004e8:	f141 0100 	adc.w	r1, r1, #0
 80004ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f0:	1880      	adds	r0, r0, r2
 80004f2:	fa43 f305 	asr.w	r3, r3, r5
 80004f6:	4159      	adcs	r1, r3
 80004f8:	e00e      	b.n	8000518 <__adddf3+0xd0>
 80004fa:	f1a5 0520 	sub.w	r5, r5, #32
 80004fe:	f10e 0e20 	add.w	lr, lr, #32
 8000502:	2a01      	cmp	r2, #1
 8000504:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000508:	bf28      	it	cs
 800050a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	d507      	bpl.n	800052e <__adddf3+0xe6>
 800051e:	f04f 0e00 	mov.w	lr, #0
 8000522:	f1dc 0c00 	rsbs	ip, ip, #0
 8000526:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052a:	eb6e 0101 	sbc.w	r1, lr, r1
 800052e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000532:	d31b      	bcc.n	800056c <__adddf3+0x124>
 8000534:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000538:	d30c      	bcc.n	8000554 <__adddf3+0x10c>
 800053a:	0849      	lsrs	r1, r1, #1
 800053c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000540:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000544:	f104 0401 	add.w	r4, r4, #1
 8000548:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800054c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000550:	f080 809a 	bcs.w	8000688 <__adddf3+0x240>
 8000554:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000558:	bf08      	it	eq
 800055a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800055e:	f150 0000 	adcs.w	r0, r0, #0
 8000562:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000566:	ea41 0105 	orr.w	r1, r1, r5
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000570:	4140      	adcs	r0, r0
 8000572:	eb41 0101 	adc.w	r1, r1, r1
 8000576:	3c01      	subs	r4, #1
 8000578:	bf28      	it	cs
 800057a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800057e:	d2e9      	bcs.n	8000554 <__adddf3+0x10c>
 8000580:	f091 0f00 	teq	r1, #0
 8000584:	bf04      	itt	eq
 8000586:	4601      	moveq	r1, r0
 8000588:	2000      	moveq	r0, #0
 800058a:	fab1 f381 	clz	r3, r1
 800058e:	bf08      	it	eq
 8000590:	3320      	addeq	r3, #32
 8000592:	f1a3 030b 	sub.w	r3, r3, #11
 8000596:	f1b3 0220 	subs.w	r2, r3, #32
 800059a:	da0c      	bge.n	80005b6 <__adddf3+0x16e>
 800059c:	320c      	adds	r2, #12
 800059e:	dd08      	ble.n	80005b2 <__adddf3+0x16a>
 80005a0:	f102 0c14 	add.w	ip, r2, #20
 80005a4:	f1c2 020c 	rsb	r2, r2, #12
 80005a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ac:	fa21 f102 	lsr.w	r1, r1, r2
 80005b0:	e00c      	b.n	80005cc <__adddf3+0x184>
 80005b2:	f102 0214 	add.w	r2, r2, #20
 80005b6:	bfd8      	it	le
 80005b8:	f1c2 0c20 	rsble	ip, r2, #32
 80005bc:	fa01 f102 	lsl.w	r1, r1, r2
 80005c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c4:	bfdc      	itt	le
 80005c6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ca:	4090      	lslle	r0, r2
 80005cc:	1ae4      	subs	r4, r4, r3
 80005ce:	bfa2      	ittt	ge
 80005d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d4:	4329      	orrge	r1, r5
 80005d6:	bd30      	popge	{r4, r5, pc}
 80005d8:	ea6f 0404 	mvn.w	r4, r4
 80005dc:	3c1f      	subs	r4, #31
 80005de:	da1c      	bge.n	800061a <__adddf3+0x1d2>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc0e      	bgt.n	8000602 <__adddf3+0x1ba>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0220 	rsb	r2, r4, #32
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f302 	lsl.w	r3, r1, r2
 80005f4:	ea40 0003 	orr.w	r0, r0, r3
 80005f8:	fa21 f304 	lsr.w	r3, r1, r4
 80005fc:	ea45 0103 	orr.w	r1, r5, r3
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f1c4 040c 	rsb	r4, r4, #12
 8000606:	f1c4 0220 	rsb	r2, r4, #32
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 f304 	lsl.w	r3, r1, r4
 8000612:	ea40 0003 	orr.w	r0, r0, r3
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	fa21 f004 	lsr.w	r0, r1, r4
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f094 0f00 	teq	r4, #0
 8000626:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800062a:	bf06      	itte	eq
 800062c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000630:	3401      	addeq	r4, #1
 8000632:	3d01      	subne	r5, #1
 8000634:	e74e      	b.n	80004d4 <__adddf3+0x8c>
 8000636:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063a:	bf18      	it	ne
 800063c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000640:	d029      	beq.n	8000696 <__adddf3+0x24e>
 8000642:	ea94 0f05 	teq	r4, r5
 8000646:	bf08      	it	eq
 8000648:	ea90 0f02 	teqeq	r0, r2
 800064c:	d005      	beq.n	800065a <__adddf3+0x212>
 800064e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000652:	bf04      	itt	eq
 8000654:	4619      	moveq	r1, r3
 8000656:	4610      	moveq	r0, r2
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	ea91 0f03 	teq	r1, r3
 800065e:	bf1e      	ittt	ne
 8000660:	2100      	movne	r1, #0
 8000662:	2000      	movne	r0, #0
 8000664:	bd30      	popne	{r4, r5, pc}
 8000666:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066a:	d105      	bne.n	8000678 <__adddf3+0x230>
 800066c:	0040      	lsls	r0, r0, #1
 800066e:	4149      	adcs	r1, r1
 8000670:	bf28      	it	cs
 8000672:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd30      	pop	{r4, r5, pc}
 8000678:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800067c:	bf3c      	itt	cc
 800067e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000682:	bd30      	popcc	{r4, r5, pc}
 8000684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000688:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800068c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000690:	f04f 0000 	mov.w	r0, #0
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069a:	bf1a      	itte	ne
 800069c:	4619      	movne	r1, r3
 800069e:	4610      	movne	r0, r2
 80006a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a4:	bf1c      	itt	ne
 80006a6:	460b      	movne	r3, r1
 80006a8:	4602      	movne	r2, r0
 80006aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ae:	bf06      	itte	eq
 80006b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b4:	ea91 0f03 	teqeq	r1, r3
 80006b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	bf00      	nop

080006c0 <__aeabi_ui2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f04f 0500 	mov.w	r5, #0
 80006d8:	f04f 0100 	mov.w	r1, #0
 80006dc:	e750      	b.n	8000580 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_i2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f8:	bf48      	it	mi
 80006fa:	4240      	negmi	r0, r0
 80006fc:	f04f 0100 	mov.w	r1, #0
 8000700:	e73e      	b.n	8000580 <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_f2d>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000712:	bf1f      	itttt	ne
 8000714:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000718:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800071c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000720:	4770      	bxne	lr
 8000722:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000726:	bf08      	it	eq
 8000728:	4770      	bxeq	lr
 800072a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800072e:	bf04      	itt	eq
 8000730:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000734:	4770      	bxeq	lr
 8000736:	b530      	push	{r4, r5, lr}
 8000738:	f44f 7460 	mov.w	r4, #896	; 0x380
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	e71c      	b.n	8000580 <__adddf3+0x138>
 8000746:	bf00      	nop

08000748 <__aeabi_ul2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f04f 0500 	mov.w	r5, #0
 8000756:	e00a      	b.n	800076e <__aeabi_l2d+0x16>

08000758 <__aeabi_l2d>:
 8000758:	ea50 0201 	orrs.w	r2, r0, r1
 800075c:	bf08      	it	eq
 800075e:	4770      	bxeq	lr
 8000760:	b530      	push	{r4, r5, lr}
 8000762:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000766:	d502      	bpl.n	800076e <__aeabi_l2d+0x16>
 8000768:	4240      	negs	r0, r0
 800076a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800076e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000772:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000776:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077a:	f43f aed8 	beq.w	800052e <__adddf3+0xe6>
 800077e:	f04f 0203 	mov.w	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000796:	f1c2 0320 	rsb	r3, r2, #32
 800079a:	fa00 fc03 	lsl.w	ip, r0, r3
 800079e:	fa20 f002 	lsr.w	r0, r0, r2
 80007a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007a6:	ea40 000e 	orr.w	r0, r0, lr
 80007aa:	fa21 f102 	lsr.w	r1, r1, r2
 80007ae:	4414      	add	r4, r2
 80007b0:	e6bd      	b.n	800052e <__adddf3+0xe6>
 80007b2:	bf00      	nop

080007b4 <__aeabi_d2uiz>:
 80007b4:	004a      	lsls	r2, r1, #1
 80007b6:	d211      	bcs.n	80007dc <__aeabi_d2uiz+0x28>
 80007b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007bc:	d211      	bcs.n	80007e2 <__aeabi_d2uiz+0x2e>
 80007be:	d50d      	bpl.n	80007dc <__aeabi_d2uiz+0x28>
 80007c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007c8:	d40e      	bmi.n	80007e8 <__aeabi_d2uiz+0x34>
 80007ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007d6:	fa23 f002 	lsr.w	r0, r3, r2
 80007da:	4770      	bx	lr
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	4770      	bx	lr
 80007e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007e6:	d102      	bne.n	80007ee <__aeabi_d2uiz+0x3a>
 80007e8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ec:	4770      	bx	lr
 80007ee:	f04f 0000 	mov.w	r0, #0
 80007f2:	4770      	bx	lr

080007f4 <__aeabi_d2f>:
 80007f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007fc:	bf24      	itt	cs
 80007fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000802:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000806:	d90d      	bls.n	8000824 <__aeabi_d2f+0x30>
 8000808:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800080c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000810:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000814:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000818:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800081c:	bf08      	it	eq
 800081e:	f020 0001 	biceq.w	r0, r0, #1
 8000822:	4770      	bx	lr
 8000824:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000828:	d121      	bne.n	800086e <__aeabi_d2f+0x7a>
 800082a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800082e:	bfbc      	itt	lt
 8000830:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000834:	4770      	bxlt	lr
 8000836:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800083a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800083e:	f1c2 0218 	rsb	r2, r2, #24
 8000842:	f1c2 0c20 	rsb	ip, r2, #32
 8000846:	fa10 f30c 	lsls.w	r3, r0, ip
 800084a:	fa20 f002 	lsr.w	r0, r0, r2
 800084e:	bf18      	it	ne
 8000850:	f040 0001 	orrne.w	r0, r0, #1
 8000854:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000858:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800085c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000860:	ea40 000c 	orr.w	r0, r0, ip
 8000864:	fa23 f302 	lsr.w	r3, r3, r2
 8000868:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800086c:	e7cc      	b.n	8000808 <__aeabi_d2f+0x14>
 800086e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000872:	d107      	bne.n	8000884 <__aeabi_d2f+0x90>
 8000874:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000878:	bf1e      	ittt	ne
 800087a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800087e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000882:	4770      	bxne	lr
 8000884:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000888:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800088c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop

08000894 <__aeabi_uldivmod>:
 8000894:	b953      	cbnz	r3, 80008ac <__aeabi_uldivmod+0x18>
 8000896:	b94a      	cbnz	r2, 80008ac <__aeabi_uldivmod+0x18>
 8000898:	2900      	cmp	r1, #0
 800089a:	bf08      	it	eq
 800089c:	2800      	cmpeq	r0, #0
 800089e:	bf1c      	itt	ne
 80008a0:	f04f 31ff 	movne.w	r1, #4294967295
 80008a4:	f04f 30ff 	movne.w	r0, #4294967295
 80008a8:	f000 b974 	b.w	8000b94 <__aeabi_idiv0>
 80008ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b4:	f000 f806 	bl	80008c4 <__udivmoddi4>
 80008b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c0:	b004      	add	sp, #16
 80008c2:	4770      	bx	lr

080008c4 <__udivmoddi4>:
 80008c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c8:	9d08      	ldr	r5, [sp, #32]
 80008ca:	4604      	mov	r4, r0
 80008cc:	468e      	mov	lr, r1
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d14d      	bne.n	800096e <__udivmoddi4+0xaa>
 80008d2:	428a      	cmp	r2, r1
 80008d4:	4694      	mov	ip, r2
 80008d6:	d969      	bls.n	80009ac <__udivmoddi4+0xe8>
 80008d8:	fab2 f282 	clz	r2, r2
 80008dc:	b152      	cbz	r2, 80008f4 <__udivmoddi4+0x30>
 80008de:	fa01 f302 	lsl.w	r3, r1, r2
 80008e2:	f1c2 0120 	rsb	r1, r2, #32
 80008e6:	fa20 f101 	lsr.w	r1, r0, r1
 80008ea:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ee:	ea41 0e03 	orr.w	lr, r1, r3
 80008f2:	4094      	lsls	r4, r2
 80008f4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008f8:	0c21      	lsrs	r1, r4, #16
 80008fa:	fbbe f6f8 	udiv	r6, lr, r8
 80008fe:	fa1f f78c 	uxth.w	r7, ip
 8000902:	fb08 e316 	mls	r3, r8, r6, lr
 8000906:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800090a:	fb06 f107 	mul.w	r1, r6, r7
 800090e:	4299      	cmp	r1, r3
 8000910:	d90a      	bls.n	8000928 <__udivmoddi4+0x64>
 8000912:	eb1c 0303 	adds.w	r3, ip, r3
 8000916:	f106 30ff 	add.w	r0, r6, #4294967295
 800091a:	f080 811f 	bcs.w	8000b5c <__udivmoddi4+0x298>
 800091e:	4299      	cmp	r1, r3
 8000920:	f240 811c 	bls.w	8000b5c <__udivmoddi4+0x298>
 8000924:	3e02      	subs	r6, #2
 8000926:	4463      	add	r3, ip
 8000928:	1a5b      	subs	r3, r3, r1
 800092a:	b2a4      	uxth	r4, r4
 800092c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000930:	fb08 3310 	mls	r3, r8, r0, r3
 8000934:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000938:	fb00 f707 	mul.w	r7, r0, r7
 800093c:	42a7      	cmp	r7, r4
 800093e:	d90a      	bls.n	8000956 <__udivmoddi4+0x92>
 8000940:	eb1c 0404 	adds.w	r4, ip, r4
 8000944:	f100 33ff 	add.w	r3, r0, #4294967295
 8000948:	f080 810a 	bcs.w	8000b60 <__udivmoddi4+0x29c>
 800094c:	42a7      	cmp	r7, r4
 800094e:	f240 8107 	bls.w	8000b60 <__udivmoddi4+0x29c>
 8000952:	4464      	add	r4, ip
 8000954:	3802      	subs	r0, #2
 8000956:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800095a:	1be4      	subs	r4, r4, r7
 800095c:	2600      	movs	r6, #0
 800095e:	b11d      	cbz	r5, 8000968 <__udivmoddi4+0xa4>
 8000960:	40d4      	lsrs	r4, r2
 8000962:	2300      	movs	r3, #0
 8000964:	e9c5 4300 	strd	r4, r3, [r5]
 8000968:	4631      	mov	r1, r6
 800096a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800096e:	428b      	cmp	r3, r1
 8000970:	d909      	bls.n	8000986 <__udivmoddi4+0xc2>
 8000972:	2d00      	cmp	r5, #0
 8000974:	f000 80ef 	beq.w	8000b56 <__udivmoddi4+0x292>
 8000978:	2600      	movs	r6, #0
 800097a:	e9c5 0100 	strd	r0, r1, [r5]
 800097e:	4630      	mov	r0, r6
 8000980:	4631      	mov	r1, r6
 8000982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000986:	fab3 f683 	clz	r6, r3
 800098a:	2e00      	cmp	r6, #0
 800098c:	d14a      	bne.n	8000a24 <__udivmoddi4+0x160>
 800098e:	428b      	cmp	r3, r1
 8000990:	d302      	bcc.n	8000998 <__udivmoddi4+0xd4>
 8000992:	4282      	cmp	r2, r0
 8000994:	f200 80f9 	bhi.w	8000b8a <__udivmoddi4+0x2c6>
 8000998:	1a84      	subs	r4, r0, r2
 800099a:	eb61 0303 	sbc.w	r3, r1, r3
 800099e:	2001      	movs	r0, #1
 80009a0:	469e      	mov	lr, r3
 80009a2:	2d00      	cmp	r5, #0
 80009a4:	d0e0      	beq.n	8000968 <__udivmoddi4+0xa4>
 80009a6:	e9c5 4e00 	strd	r4, lr, [r5]
 80009aa:	e7dd      	b.n	8000968 <__udivmoddi4+0xa4>
 80009ac:	b902      	cbnz	r2, 80009b0 <__udivmoddi4+0xec>
 80009ae:	deff      	udf	#255	; 0xff
 80009b0:	fab2 f282 	clz	r2, r2
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	f040 8092 	bne.w	8000ade <__udivmoddi4+0x21a>
 80009ba:	eba1 010c 	sub.w	r1, r1, ip
 80009be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009c2:	fa1f fe8c 	uxth.w	lr, ip
 80009c6:	2601      	movs	r6, #1
 80009c8:	0c20      	lsrs	r0, r4, #16
 80009ca:	fbb1 f3f7 	udiv	r3, r1, r7
 80009ce:	fb07 1113 	mls	r1, r7, r3, r1
 80009d2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009d6:	fb0e f003 	mul.w	r0, lr, r3
 80009da:	4288      	cmp	r0, r1
 80009dc:	d908      	bls.n	80009f0 <__udivmoddi4+0x12c>
 80009de:	eb1c 0101 	adds.w	r1, ip, r1
 80009e2:	f103 38ff 	add.w	r8, r3, #4294967295
 80009e6:	d202      	bcs.n	80009ee <__udivmoddi4+0x12a>
 80009e8:	4288      	cmp	r0, r1
 80009ea:	f200 80cb 	bhi.w	8000b84 <__udivmoddi4+0x2c0>
 80009ee:	4643      	mov	r3, r8
 80009f0:	1a09      	subs	r1, r1, r0
 80009f2:	b2a4      	uxth	r4, r4
 80009f4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f8:	fb07 1110 	mls	r1, r7, r0, r1
 80009fc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a00:	fb0e fe00 	mul.w	lr, lr, r0
 8000a04:	45a6      	cmp	lr, r4
 8000a06:	d908      	bls.n	8000a1a <__udivmoddi4+0x156>
 8000a08:	eb1c 0404 	adds.w	r4, ip, r4
 8000a0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a10:	d202      	bcs.n	8000a18 <__udivmoddi4+0x154>
 8000a12:	45a6      	cmp	lr, r4
 8000a14:	f200 80bb 	bhi.w	8000b8e <__udivmoddi4+0x2ca>
 8000a18:	4608      	mov	r0, r1
 8000a1a:	eba4 040e 	sub.w	r4, r4, lr
 8000a1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a22:	e79c      	b.n	800095e <__udivmoddi4+0x9a>
 8000a24:	f1c6 0720 	rsb	r7, r6, #32
 8000a28:	40b3      	lsls	r3, r6
 8000a2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a32:	fa20 f407 	lsr.w	r4, r0, r7
 8000a36:	fa01 f306 	lsl.w	r3, r1, r6
 8000a3a:	431c      	orrs	r4, r3
 8000a3c:	40f9      	lsrs	r1, r7
 8000a3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a42:	fa00 f306 	lsl.w	r3, r0, r6
 8000a46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a4a:	0c20      	lsrs	r0, r4, #16
 8000a4c:	fa1f fe8c 	uxth.w	lr, ip
 8000a50:	fb09 1118 	mls	r1, r9, r8, r1
 8000a54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a58:	fb08 f00e 	mul.w	r0, r8, lr
 8000a5c:	4288      	cmp	r0, r1
 8000a5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a62:	d90b      	bls.n	8000a7c <__udivmoddi4+0x1b8>
 8000a64:	eb1c 0101 	adds.w	r1, ip, r1
 8000a68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a6c:	f080 8088 	bcs.w	8000b80 <__udivmoddi4+0x2bc>
 8000a70:	4288      	cmp	r0, r1
 8000a72:	f240 8085 	bls.w	8000b80 <__udivmoddi4+0x2bc>
 8000a76:	f1a8 0802 	sub.w	r8, r8, #2
 8000a7a:	4461      	add	r1, ip
 8000a7c:	1a09      	subs	r1, r1, r0
 8000a7e:	b2a4      	uxth	r4, r4
 8000a80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a84:	fb09 1110 	mls	r1, r9, r0, r1
 8000a88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a90:	458e      	cmp	lr, r1
 8000a92:	d908      	bls.n	8000aa6 <__udivmoddi4+0x1e2>
 8000a94:	eb1c 0101 	adds.w	r1, ip, r1
 8000a98:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a9c:	d26c      	bcs.n	8000b78 <__udivmoddi4+0x2b4>
 8000a9e:	458e      	cmp	lr, r1
 8000aa0:	d96a      	bls.n	8000b78 <__udivmoddi4+0x2b4>
 8000aa2:	3802      	subs	r0, #2
 8000aa4:	4461      	add	r1, ip
 8000aa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000aaa:	fba0 9402 	umull	r9, r4, r0, r2
 8000aae:	eba1 010e 	sub.w	r1, r1, lr
 8000ab2:	42a1      	cmp	r1, r4
 8000ab4:	46c8      	mov	r8, r9
 8000ab6:	46a6      	mov	lr, r4
 8000ab8:	d356      	bcc.n	8000b68 <__udivmoddi4+0x2a4>
 8000aba:	d053      	beq.n	8000b64 <__udivmoddi4+0x2a0>
 8000abc:	b15d      	cbz	r5, 8000ad6 <__udivmoddi4+0x212>
 8000abe:	ebb3 0208 	subs.w	r2, r3, r8
 8000ac2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ac6:	fa01 f707 	lsl.w	r7, r1, r7
 8000aca:	fa22 f306 	lsr.w	r3, r2, r6
 8000ace:	40f1      	lsrs	r1, r6
 8000ad0:	431f      	orrs	r7, r3
 8000ad2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ad6:	2600      	movs	r6, #0
 8000ad8:	4631      	mov	r1, r6
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	f1c2 0320 	rsb	r3, r2, #32
 8000ae2:	40d8      	lsrs	r0, r3
 8000ae4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae8:	fa21 f303 	lsr.w	r3, r1, r3
 8000aec:	4091      	lsls	r1, r2
 8000aee:	4301      	orrs	r1, r0
 8000af0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af4:	fa1f fe8c 	uxth.w	lr, ip
 8000af8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000afc:	fb07 3610 	mls	r6, r7, r0, r3
 8000b00:	0c0b      	lsrs	r3, r1, #16
 8000b02:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b06:	fb00 f60e 	mul.w	r6, r0, lr
 8000b0a:	429e      	cmp	r6, r3
 8000b0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000b10:	d908      	bls.n	8000b24 <__udivmoddi4+0x260>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b1a:	d22f      	bcs.n	8000b7c <__udivmoddi4+0x2b8>
 8000b1c:	429e      	cmp	r6, r3
 8000b1e:	d92d      	bls.n	8000b7c <__udivmoddi4+0x2b8>
 8000b20:	3802      	subs	r0, #2
 8000b22:	4463      	add	r3, ip
 8000b24:	1b9b      	subs	r3, r3, r6
 8000b26:	b289      	uxth	r1, r1
 8000b28:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b2c:	fb07 3316 	mls	r3, r7, r6, r3
 8000b30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b34:	fb06 f30e 	mul.w	r3, r6, lr
 8000b38:	428b      	cmp	r3, r1
 8000b3a:	d908      	bls.n	8000b4e <__udivmoddi4+0x28a>
 8000b3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b40:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b44:	d216      	bcs.n	8000b74 <__udivmoddi4+0x2b0>
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d914      	bls.n	8000b74 <__udivmoddi4+0x2b0>
 8000b4a:	3e02      	subs	r6, #2
 8000b4c:	4461      	add	r1, ip
 8000b4e:	1ac9      	subs	r1, r1, r3
 8000b50:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b54:	e738      	b.n	80009c8 <__udivmoddi4+0x104>
 8000b56:	462e      	mov	r6, r5
 8000b58:	4628      	mov	r0, r5
 8000b5a:	e705      	b.n	8000968 <__udivmoddi4+0xa4>
 8000b5c:	4606      	mov	r6, r0
 8000b5e:	e6e3      	b.n	8000928 <__udivmoddi4+0x64>
 8000b60:	4618      	mov	r0, r3
 8000b62:	e6f8      	b.n	8000956 <__udivmoddi4+0x92>
 8000b64:	454b      	cmp	r3, r9
 8000b66:	d2a9      	bcs.n	8000abc <__udivmoddi4+0x1f8>
 8000b68:	ebb9 0802 	subs.w	r8, r9, r2
 8000b6c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b70:	3801      	subs	r0, #1
 8000b72:	e7a3      	b.n	8000abc <__udivmoddi4+0x1f8>
 8000b74:	4646      	mov	r6, r8
 8000b76:	e7ea      	b.n	8000b4e <__udivmoddi4+0x28a>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	e794      	b.n	8000aa6 <__udivmoddi4+0x1e2>
 8000b7c:	4640      	mov	r0, r8
 8000b7e:	e7d1      	b.n	8000b24 <__udivmoddi4+0x260>
 8000b80:	46d0      	mov	r8, sl
 8000b82:	e77b      	b.n	8000a7c <__udivmoddi4+0x1b8>
 8000b84:	3b02      	subs	r3, #2
 8000b86:	4461      	add	r1, ip
 8000b88:	e732      	b.n	80009f0 <__udivmoddi4+0x12c>
 8000b8a:	4630      	mov	r0, r6
 8000b8c:	e709      	b.n	80009a2 <__udivmoddi4+0xde>
 8000b8e:	4464      	add	r4, ip
 8000b90:	3802      	subs	r0, #2
 8000b92:	e742      	b.n	8000a1a <__udivmoddi4+0x156>

08000b94 <__aeabi_idiv0>:
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <menu_vars>:
uint8_t*  menu_vars(char* menu_string,  uint8_t var_index   ){ // in comes name and index , out goes variable reference pointer
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	70fb      	strb	r3, [r7, #3]


	char menu_string2[8];
	//var_index=var_index&15;    //set var index ie  LFO[1].rate ,false
	uint8_t menu_countr=0; //  menu vars
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	75fb      	strb	r3, [r7, #23]
	uint8_t *menu_vars_var1=NULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]

	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000bac:	4bbb      	ldr	r3, [pc, #748]	; (8000e9c <menu_vars+0x304>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	801a      	strh	r2, [r3, #0]
 8000bb2:	e01d      	b.n	8000bf0 <menu_vars+0x58>

		memcpy(menu_string2, menu_titles_final[i], 8);  // copy title list
 8000bb4:	4bb9      	ldr	r3, [pc, #740]	; (8000e9c <menu_vars+0x304>)
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4bb9      	ldr	r3, [pc, #740]	; (8000ea0 <menu_vars+0x308>)
 8000bbc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000bc0:	f107 0308 	add.w	r3, r7, #8
 8000bc4:	6810      	ldr	r0, [r2, #0]
 8000bc6:	6851      	ldr	r1, [r2, #4]
 8000bc8:	c303      	stmia	r3!, {r0, r1}
		if ((strncmp(menu_string, menu_string2, 8)) == 0) {
 8000bca:	f107 0308 	add.w	r3, r7, #8
 8000bce:	2208      	movs	r2, #8
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f00c fc3c 	bl	800d450 <strncmp>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d102      	bne.n	8000be4 <menu_vars+0x4c>
			menu_countr = i;
 8000bde:	4baf      	ldr	r3, [pc, #700]	; (8000e9c <menu_vars+0x304>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000be4:	4bad      	ldr	r3, [pc, #692]	; (8000e9c <menu_vars+0x304>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	4bab      	ldr	r3, [pc, #684]	; (8000e9c <menu_vars+0x304>)
 8000bee:	801a      	strh	r2, [r3, #0]
 8000bf0:	4baa      	ldr	r3, [pc, #680]	; (8000e9c <menu_vars+0x304>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	2b41      	cmp	r3, #65	; 0x41
 8000bf6:	d9dd      	bls.n	8000bb4 <menu_vars+0x1c>

		}
	}
	menu_vars_ref=menu_countr ;
 8000bf8:	4aaa      	ldr	r2, [pc, #680]	; (8000ea4 <menu_vars+0x30c>)
 8000bfa:	7dfb      	ldrb	r3, [r7, #23]
 8000bfc:	7013      	strb	r3, [r2, #0]
	if (var_index>menu_vars_index_limit[menu_countr]) var_index=menu_vars_index_limit[menu_countr];   // make sure it stays right
 8000bfe:	7dfb      	ldrb	r3, [r7, #23]
 8000c00:	4aa9      	ldr	r2, [pc, #676]	; (8000ea8 <menu_vars+0x310>)
 8000c02:	5cd3      	ldrb	r3, [r2, r3]
 8000c04:	78fa      	ldrb	r2, [r7, #3]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d903      	bls.n	8000c12 <menu_vars+0x7a>
 8000c0a:	7dfb      	ldrb	r3, [r7, #23]
 8000c0c:	4aa6      	ldr	r2, [pc, #664]	; (8000ea8 <menu_vars+0x310>)
 8000c0e:	5cd3      	ldrb	r3, [r2, r3]
 8000c10:	70fb      	strb	r3, [r7, #3]

	switch(menu_countr){
 8000c12:	7dfb      	ldrb	r3, [r7, #23]
 8000c14:	2b40      	cmp	r3, #64	; 0x40
 8000c16:	f200 8250 	bhi.w	80010ba <menu_vars+0x522>
 8000c1a:	a201      	add	r2, pc, #4	; (adr r2, 8000c20 <menu_vars+0x88>)
 8000c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c20:	08000d25 	.word	0x08000d25
 8000c24:	08000d2b 	.word	0x08000d2b
 8000c28:	08000d3d 	.word	0x08000d3d
 8000c2c:	08000d51 	.word	0x08000d51
 8000c30:	08000d65 	.word	0x08000d65
 8000c34:	08000d79 	.word	0x08000d79
 8000c38:	08000d8b 	.word	0x08000d8b
 8000c3c:	08000d91 	.word	0x08000d91
 8000c40:	08000da3 	.word	0x08000da3
 8000c44:	08000db7 	.word	0x08000db7
 8000c48:	08000dcb 	.word	0x08000dcb
 8000c4c:	08000ddf 	.word	0x08000ddf
 8000c50:	08000de5 	.word	0x08000de5
 8000c54:	08000df1 	.word	0x08000df1
 8000c58:	08000dff 	.word	0x08000dff
 8000c5c:	08000e0d 	.word	0x08000e0d
 8000c60:	08000e1b 	.word	0x08000e1b
 8000c64:	08000e29 	.word	0x08000e29
 8000c68:	08000e37 	.word	0x08000e37
 8000c6c:	08000e45 	.word	0x08000e45
 8000c70:	08000e53 	.word	0x08000e53
 8000c74:	08000e61 	.word	0x08000e61
 8000c78:	08000e67 	.word	0x08000e67
 8000c7c:	08000e6d 	.word	0x08000e6d
 8000c80:	08000e73 	.word	0x08000e73
 8000c84:	08000e7f 	.word	0x08000e7f
 8000c88:	08000e8d 	.word	0x08000e8d
 8000c8c:	08000ec5 	.word	0x08000ec5
 8000c90:	08000ed1 	.word	0x08000ed1
 8000c94:	08000edf 	.word	0x08000edf
 8000c98:	08000eed 	.word	0x08000eed
 8000c9c:	08000efb 	.word	0x08000efb
 8000ca0:	08000f09 	.word	0x08000f09
 8000ca4:	08000f17 	.word	0x08000f17
 8000ca8:	08000f25 	.word	0x08000f25
 8000cac:	08000f33 	.word	0x08000f33
 8000cb0:	08000f45 	.word	0x08000f45
 8000cb4:	08000f55 	.word	0x08000f55
 8000cb8:	08000f67 	.word	0x08000f67
 8000cbc:	08000f79 	.word	0x08000f79
 8000cc0:	08000f8b 	.word	0x08000f8b
 8000cc4:	08000f9d 	.word	0x08000f9d
 8000cc8:	08000fb1 	.word	0x08000fb1
 8000ccc:	08000fc5 	.word	0x08000fc5
 8000cd0:	08000fd9 	.word	0x08000fd9
 8000cd4:	08000fe5 	.word	0x08000fe5
 8000cd8:	08000feb 	.word	0x08000feb
 8000cdc:	08000ff1 	.word	0x08000ff1
 8000ce0:	08000ff7 	.word	0x08000ff7
 8000ce4:	08001001 	.word	0x08001001
 8000ce8:	08001013 	.word	0x08001013
 8000cec:	08001027 	.word	0x08001027
 8000cf0:	0800103b 	.word	0x0800103b
 8000cf4:	0800104f 	.word	0x0800104f
 8000cf8:	08001059 	.word	0x08001059
 8000cfc:	0800105f 	.word	0x0800105f
 8000d00:	08001065 	.word	0x08001065
 8000d04:	0800106b 	.word	0x0800106b
 8000d08:	08001071 	.word	0x08001071
 8000d0c:	08001077 	.word	0x08001077
 8000d10:	08001083 	.word	0x08001083
 8000d14:	08001089 	.word	0x08001089
 8000d18:	0800108f 	.word	0x0800108f
 8000d1c:	0800109f 	.word	0x0800109f
 8000d20:	080010ad 	.word	0x080010ad
	case 0:     menu_vars_var1= NULL; break;
 8000d24:	2300      	movs	r3, #0
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	e1ca      	b.n	80010c0 <menu_vars+0x528>
	case 1:     menu_vars_var1= &LFO[var_index].rate   ; break;
 8000d2a:	78fa      	ldrb	r2, [r7, #3]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	011b      	lsls	r3, r3, #4
 8000d30:	4413      	add	r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4a5d      	ldr	r2, [pc, #372]	; (8000eac <menu_vars+0x314>)
 8000d36:	4413      	add	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	e1c1      	b.n	80010c0 <menu_vars+0x528>
	case 2:     menu_vars_var1= &LFO[var_index].depth    ; break;
 8000d3c:	78fa      	ldrb	r2, [r7, #3]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	011b      	lsls	r3, r3, #4
 8000d42:	4413      	add	r3, r2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	4a59      	ldr	r2, [pc, #356]	; (8000eac <menu_vars+0x314>)
 8000d48:	4413      	add	r3, r2
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	e1b7      	b.n	80010c0 <menu_vars+0x528>
	case 3:     menu_vars_var1= &LFO[var_index].delay    ; break;
 8000d50:	78fa      	ldrb	r2, [r7, #3]
 8000d52:	4613      	mov	r3, r2
 8000d54:	011b      	lsls	r3, r3, #4
 8000d56:	4413      	add	r3, r2
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	4a54      	ldr	r2, [pc, #336]	; (8000eac <menu_vars+0x314>)
 8000d5c:	4413      	add	r3, r2
 8000d5e:	3304      	adds	r3, #4
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	e1ad      	b.n	80010c0 <menu_vars+0x528>
	case 4:     menu_vars_var1= &LFO[var_index].offset    ; break;
 8000d64:	78fa      	ldrb	r2, [r7, #3]
 8000d66:	4613      	mov	r3, r2
 8000d68:	011b      	lsls	r3, r3, #4
 8000d6a:	4413      	add	r3, r2
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	4a4f      	ldr	r2, [pc, #316]	; (8000eac <menu_vars+0x314>)
 8000d70:	4413      	add	r3, r2
 8000d72:	3303      	adds	r3, #3
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	e1a3      	b.n	80010c0 <menu_vars+0x528>
	case 5:     menu_vars_var1= &patch[var_index].target    ; break;  // velocity etc
 8000d78:	78fb      	ldrb	r3, [r7, #3]
 8000d7a:	222c      	movs	r2, #44	; 0x2c
 8000d7c:	fb02 f303 	mul.w	r3, r2, r3
 8000d80:	4a4b      	ldr	r2, [pc, #300]	; (8000eb0 <menu_vars+0x318>)
 8000d82:	4413      	add	r3, r2
 8000d84:	3301      	adds	r3, #1
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	e19a      	b.n	80010c0 <menu_vars+0x528>
	case 6:     menu_vars_var1= NULL   ; break;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	e197      	b.n	80010c0 <menu_vars+0x528>
	case 7:     menu_vars_var1= &ADSR[var_index].attack    ; break;
 8000d90:	78fa      	ldrb	r2, [r7, #3]
 8000d92:	4613      	mov	r3, r2
 8000d94:	011b      	lsls	r3, r3, #4
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	4a46      	ldr	r2, [pc, #280]	; (8000eb4 <menu_vars+0x31c>)
 8000d9c:	4413      	add	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	e18e      	b.n	80010c0 <menu_vars+0x528>
	case 8:     menu_vars_var1= &ADSR[var_index].decay    ; break;
 8000da2:	78fa      	ldrb	r2, [r7, #3]
 8000da4:	4613      	mov	r3, r2
 8000da6:	011b      	lsls	r3, r3, #4
 8000da8:	1a9b      	subs	r3, r3, r2
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	4a41      	ldr	r2, [pc, #260]	; (8000eb4 <menu_vars+0x31c>)
 8000dae:	4413      	add	r3, r2
 8000db0:	3301      	adds	r3, #1
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	e184      	b.n	80010c0 <menu_vars+0x528>
	case 9:     menu_vars_var1= &ADSR[var_index].sustain    ; break;
 8000db6:	78fa      	ldrb	r2, [r7, #3]
 8000db8:	4613      	mov	r3, r2
 8000dba:	011b      	lsls	r3, r3, #4
 8000dbc:	1a9b      	subs	r3, r3, r2
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	4a3c      	ldr	r2, [pc, #240]	; (8000eb4 <menu_vars+0x31c>)
 8000dc2:	4413      	add	r3, r2
 8000dc4:	3302      	adds	r3, #2
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	e17a      	b.n	80010c0 <menu_vars+0x528>
	case 10:     menu_vars_var1= &ADSR[var_index].release    ; break;
 8000dca:	78fa      	ldrb	r2, [r7, #3]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	011b      	lsls	r3, r3, #4
 8000dd0:	1a9b      	subs	r3, r3, r2
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	4a37      	ldr	r2, [pc, #220]	; (8000eb4 <menu_vars+0x31c>)
 8000dd6:	4413      	add	r3, r2
 8000dd8:	3303      	adds	r3, #3
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	e170      	b.n	80010c0 <menu_vars+0x528>
	case 11:     menu_vars_var1= NULL  ; break;
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	e16d      	b.n	80010c0 <menu_vars+0x528>
	case 12:     menu_vars_var1= &note[var_index].osc    ; break;
 8000de4:	78fb      	ldrb	r3, [r7, #3]
 8000de6:	011b      	lsls	r3, r3, #4
 8000de8:	4a33      	ldr	r2, [pc, #204]	; (8000eb8 <menu_vars+0x320>)
 8000dea:	4413      	add	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	e167      	b.n	80010c0 <menu_vars+0x528>
	case 13:     menu_vars_var1= &note[var_index].osc2    ; break;
 8000df0:	78fb      	ldrb	r3, [r7, #3]
 8000df2:	011b      	lsls	r3, r3, #4
 8000df4:	4a30      	ldr	r2, [pc, #192]	; (8000eb8 <menu_vars+0x320>)
 8000df6:	4413      	add	r3, r2
 8000df8:	3301      	adds	r3, #1
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	e160      	b.n	80010c0 <menu_vars+0x528>
	case 14:     menu_vars_var1= &note[var_index].pitch    ; break;
 8000dfe:	78fb      	ldrb	r3, [r7, #3]
 8000e00:	011b      	lsls	r3, r3, #4
 8000e02:	4a2d      	ldr	r2, [pc, #180]	; (8000eb8 <menu_vars+0x320>)
 8000e04:	4413      	add	r3, r2
 8000e06:	3302      	adds	r3, #2
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	e159      	b.n	80010c0 <menu_vars+0x528>
	case 15:     menu_vars_var1= &note[var_index].duration    ; break;
 8000e0c:	78fb      	ldrb	r3, [r7, #3]
 8000e0e:	011b      	lsls	r3, r3, #4
 8000e10:	4a29      	ldr	r2, [pc, #164]	; (8000eb8 <menu_vars+0x320>)
 8000e12:	4413      	add	r3, r2
 8000e14:	3303      	adds	r3, #3
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	e152      	b.n	80010c0 <menu_vars+0x528>
	case 16:     menu_vars_var1= &note[var_index].position    ; break;
 8000e1a:	78fb      	ldrb	r3, [r7, #3]
 8000e1c:	011b      	lsls	r3, r3, #4
 8000e1e:	4a26      	ldr	r2, [pc, #152]	; (8000eb8 <menu_vars+0x320>)
 8000e20:	4413      	add	r3, r2
 8000e22:	3304      	adds	r3, #4
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	e14b      	b.n	80010c0 <menu_vars+0x528>
	case 17:     menu_vars_var1= &note[var_index].transpose    ; break;
 8000e28:	78fb      	ldrb	r3, [r7, #3]
 8000e2a:	011b      	lsls	r3, r3, #4
 8000e2c:	4a22      	ldr	r2, [pc, #136]	; (8000eb8 <menu_vars+0x320>)
 8000e2e:	4413      	add	r3, r2
 8000e30:	3305      	adds	r3, #5
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	e144      	b.n	80010c0 <menu_vars+0x528>
	case 18:     menu_vars_var1= &note[var_index].timeshift    ; break;
 8000e36:	78fb      	ldrb	r3, [r7, #3]
 8000e38:	011b      	lsls	r3, r3, #4
 8000e3a:	4a1f      	ldr	r2, [pc, #124]	; (8000eb8 <menu_vars+0x320>)
 8000e3c:	4413      	add	r3, r2
 8000e3e:	3306      	adds	r3, #6
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	e13d      	b.n	80010c0 <menu_vars+0x528>
	case 19:     menu_vars_var1= &note[var_index].velocity   ; break; // 16 bit
 8000e44:	78fb      	ldrb	r3, [r7, #3]
 8000e46:	011b      	lsls	r3, r3, #4
 8000e48:	4a1b      	ldr	r2, [pc, #108]	; (8000eb8 <menu_vars+0x320>)
 8000e4a:	4413      	add	r3, r2
 8000e4c:	3307      	adds	r3, #7
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	e136      	b.n	80010c0 <menu_vars+0x528>
	case 20:     menu_vars_var1= &note[var_index].detune    ; break;
 8000e52:	78fb      	ldrb	r3, [r7, #3]
 8000e54:	011b      	lsls	r3, r3, #4
 8000e56:	3308      	adds	r3, #8
 8000e58:	4a17      	ldr	r2, [pc, #92]	; (8000eb8 <menu_vars+0x320>)
 8000e5a:	4413      	add	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	e12f      	b.n	80010c0 <menu_vars+0x528>
	case 21:     menu_vars_var1= NULL   ; break;
 8000e60:	2300      	movs	r3, #0
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	e12c      	b.n	80010c0 <menu_vars+0x528>
	case 22:     menu_vars_var1= &seq.pos    ; break;
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <menu_vars+0x324>)
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	e129      	b.n	80010c0 <menu_vars+0x528>
	case 23:     menu_vars_var1= &seq.tempo    ; break;
 8000e6c:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <menu_vars+0x328>)
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	e126      	b.n	80010c0 <menu_vars+0x528>
	case 24:     menu_vars_var1= &seq.notes1[var_index]   ; break;
 8000e72:	78fb      	ldrb	r3, [r7, #3]
 8000e74:	4a11      	ldr	r2, [pc, #68]	; (8000ebc <menu_vars+0x324>)
 8000e76:	4413      	add	r3, r2
 8000e78:	3302      	adds	r3, #2
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	e120      	b.n	80010c0 <menu_vars+0x528>
	case 25:     menu_vars_var1= &seq.notes2[var_index]   ; break;
 8000e7e:	78fb      	ldrb	r3, [r7, #3]
 8000e80:	3310      	adds	r3, #16
 8000e82:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <menu_vars+0x324>)
 8000e84:	4413      	add	r3, r2
 8000e86:	3303      	adds	r3, #3
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	e119      	b.n	80010c0 <menu_vars+0x528>
	case 26:     menu_vars_var1= &seq.loop [var_index]    ; break;
 8000e8c:	78fb      	ldrb	r3, [r7, #3]
 8000e8e:	3320      	adds	r3, #32
 8000e90:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <menu_vars+0x324>)
 8000e92:	4413      	add	r3, r2
 8000e94:	3304      	adds	r3, #4
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	e112      	b.n	80010c0 <menu_vars+0x528>
 8000e9a:	bf00      	nop
 8000e9c:	200096de 	.word	0x200096de
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	2000e09d 	.word	0x2000e09d
 8000ea8:	0800edd0 	.word	0x0800edd0
 8000eac:	2000cc78 	.word	0x2000cc78
 8000eb0:	2000d0ec 	.word	0x2000d0ec
 8000eb4:	2000d024 	.word	0x2000d024
 8000eb8:	20008e1c 	.word	0x20008e1c
 8000ebc:	2000d0bc 	.word	0x2000d0bc
 8000ec0:	2000d0bd 	.word	0x2000d0bd
	case 27: 	menu_vars_var1=&filter[var_index].cutoff_1 ;break;
 8000ec4:	78fb      	ldrb	r3, [r7, #3]
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	4a80      	ldr	r2, [pc, #512]	; (80010cc <menu_vars+0x534>)
 8000eca:	4413      	add	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	e0f7      	b.n	80010c0 <menu_vars+0x528>
	case 28: 	menu_vars_var1=&filter[var_index].cutoff_2 ;break;  // fine tune
 8000ed0:	78fb      	ldrb	r3, [r7, #3]
 8000ed2:	00db      	lsls	r3, r3, #3
 8000ed4:	4a7d      	ldr	r2, [pc, #500]	; (80010cc <menu_vars+0x534>)
 8000ed6:	4413      	add	r3, r2
 8000ed8:	3301      	adds	r3, #1
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	e0f0      	b.n	80010c0 <menu_vars+0x528>
	case 29: 	menu_vars_var1=&filter[var_index].resonance ;break;
 8000ede:	78fb      	ldrb	r3, [r7, #3]
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	4a7a      	ldr	r2, [pc, #488]	; (80010cc <menu_vars+0x534>)
 8000ee4:	4413      	add	r3, r2
 8000ee6:	3302      	adds	r3, #2
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	e0e9      	b.n	80010c0 <menu_vars+0x528>
	case 30: 	menu_vars_var1=&filter[var_index].q_level  ;break;
 8000eec:	78fb      	ldrb	r3, [r7, #3]
 8000eee:	00db      	lsls	r3, r3, #3
 8000ef0:	4a76      	ldr	r2, [pc, #472]	; (80010cc <menu_vars+0x534>)
 8000ef2:	4413      	add	r3, r2
 8000ef4:	3303      	adds	r3, #3
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	e0e2      	b.n	80010c0 <menu_vars+0x528>
	case 31: 	menu_vars_var1=&filter[var_index].level;break;
 8000efa:	78fb      	ldrb	r3, [r7, #3]
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	4a73      	ldr	r2, [pc, #460]	; (80010cc <menu_vars+0x534>)
 8000f00:	4413      	add	r3, r2
 8000f02:	3304      	adds	r3, #4
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	e0db      	b.n	80010c0 <menu_vars+0x528>
	case 32: 	menu_vars_var1=&filter[var_index].feedback ;break;
 8000f08:	78fb      	ldrb	r3, [r7, #3]
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	4a6f      	ldr	r2, [pc, #444]	; (80010cc <menu_vars+0x534>)
 8000f0e:	4413      	add	r3, r2
 8000f10:	3307      	adds	r3, #7
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	e0d4      	b.n	80010c0 <menu_vars+0x528>
	case 33: 	menu_vars_var1=&filter[var_index].out_mix ;break;
 8000f16:	78fb      	ldrb	r3, [r7, #3]
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	4a6c      	ldr	r2, [pc, #432]	; (80010cc <menu_vars+0x534>)
 8000f1c:	4413      	add	r3, r2
 8000f1e:	3306      	adds	r3, #6
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	e0cd      	b.n	80010c0 <menu_vars+0x528>
	case 34: 	menu_vars_var1=&filter[var_index].poles ;break;
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	4a68      	ldr	r2, [pc, #416]	; (80010cc <menu_vars+0x534>)
 8000f2a:	4413      	add	r3, r2
 8000f2c:	3305      	adds	r3, #5
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	e0c6      	b.n	80010c0 <menu_vars+0x528>
	case 35:     menu_vars_var1= &patch[var_index].target_index    ; break;     // select note
 8000f32:	78fb      	ldrb	r3, [r7, #3]
 8000f34:	222c      	movs	r2, #44	; 0x2c
 8000f36:	fb02 f303 	mul.w	r3, r2, r3
 8000f3a:	4a65      	ldr	r2, [pc, #404]	; (80010d0 <menu_vars+0x538>)
 8000f3c:	4413      	add	r3, r2
 8000f3e:	3302      	adds	r3, #2
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	e0bd      	b.n	80010c0 <menu_vars+0x528>
	case 36: 	menu_vars_var1=&patch[var_index].input1 ;break;
 8000f44:	78fb      	ldrb	r3, [r7, #3]
 8000f46:	222c      	movs	r2, #44	; 0x2c
 8000f48:	fb02 f303 	mul.w	r3, r2, r3
 8000f4c:	4a60      	ldr	r2, [pc, #384]	; (80010d0 <menu_vars+0x538>)
 8000f4e:	4413      	add	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	e0b5      	b.n	80010c0 <menu_vars+0x528>
	case 37: 	menu_vars_var1=&patch[var_index].input2 ;break;
 8000f54:	78fb      	ldrb	r3, [r7, #3]
 8000f56:	222c      	movs	r2, #44	; 0x2c
 8000f58:	fb02 f303 	mul.w	r3, r2, r3
 8000f5c:	4a5c      	ldr	r2, [pc, #368]	; (80010d0 <menu_vars+0x538>)
 8000f5e:	4413      	add	r3, r2
 8000f60:	3303      	adds	r3, #3
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	e0ac      	b.n	80010c0 <menu_vars+0x528>
	case 38: 	menu_vars_var1=&patch[var_index].in_mix ;break;
 8000f66:	78fb      	ldrb	r3, [r7, #3]
 8000f68:	222c      	movs	r2, #44	; 0x2c
 8000f6a:	fb02 f303 	mul.w	r3, r2, r3
 8000f6e:	4a58      	ldr	r2, [pc, #352]	; (80010d0 <menu_vars+0x538>)
 8000f70:	4413      	add	r3, r2
 8000f72:	3304      	adds	r3, #4
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	e0a3      	b.n	80010c0 <menu_vars+0x528>
	case 39: 	menu_vars_var1=&patch[var_index].in_offset ;break;
 8000f78:	78fb      	ldrb	r3, [r7, #3]
 8000f7a:	222c      	movs	r2, #44	; 0x2c
 8000f7c:	fb02 f303 	mul.w	r3, r2, r3
 8000f80:	4a53      	ldr	r2, [pc, #332]	; (80010d0 <menu_vars+0x538>)
 8000f82:	4413      	add	r3, r2
 8000f84:	3305      	adds	r3, #5
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	e09a      	b.n	80010c0 <menu_vars+0x528>
	case 40:     menu_vars_var1= &LFO_slave1[var_index].rate   ; break;
 8000f8a:	78fa      	ldrb	r2, [r7, #3]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	4413      	add	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	4a4f      	ldr	r2, [pc, #316]	; (80010d4 <menu_vars+0x53c>)
 8000f96:	4413      	add	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	e091      	b.n	80010c0 <menu_vars+0x528>
	case 41:     menu_vars_var1= &LFO_slave1[var_index].depth    ; break;
 8000f9c:	78fa      	ldrb	r2, [r7, #3]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	4413      	add	r3, r2
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	4a4b      	ldr	r2, [pc, #300]	; (80010d4 <menu_vars+0x53c>)
 8000fa8:	4413      	add	r3, r2
 8000faa:	3301      	adds	r3, #1
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	e087      	b.n	80010c0 <menu_vars+0x528>
	case 42:     menu_vars_var1= &LFO_slave1[var_index].delay    ; break;
 8000fb0:	78fa      	ldrb	r2, [r7, #3]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	4a46      	ldr	r2, [pc, #280]	; (80010d4 <menu_vars+0x53c>)
 8000fbc:	4413      	add	r3, r2
 8000fbe:	3304      	adds	r3, #4
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	e07d      	b.n	80010c0 <menu_vars+0x528>
	case 43:     menu_vars_var1= &LFO_slave1[var_index].offset    ; break;
 8000fc4:	78fa      	ldrb	r2, [r7, #3]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4413      	add	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4a41      	ldr	r2, [pc, #260]	; (80010d4 <menu_vars+0x53c>)
 8000fd0:	4413      	add	r3, r2
 8000fd2:	3303      	adds	r3, #3
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	e073      	b.n	80010c0 <menu_vars+0x528>
	case 44: 	menu_vars_var1=&sampler.offset2[var_index] ;break;
 8000fd8:	78fb      	ldrb	r3, [r7, #3]
 8000fda:	3310      	adds	r3, #16
 8000fdc:	4a3e      	ldr	r2, [pc, #248]	; (80010d8 <menu_vars+0x540>)
 8000fde:	4413      	add	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	e06d      	b.n	80010c0 <menu_vars+0x528>
	case 45: 	menu_vars_var1=&sampler.RAM_offset ;break;
 8000fe4:	4b3d      	ldr	r3, [pc, #244]	; (80010dc <menu_vars+0x544>)
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	e06a      	b.n	80010c0 <menu_vars+0x528>
	case 46: 	menu_vars_var1=&sampler.end_MSB ;break;
 8000fea:	4b3d      	ldr	r3, [pc, #244]	; (80010e0 <menu_vars+0x548>)
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	e067      	b.n	80010c0 <menu_vars+0x528>
	case 47: 	menu_vars_var1=&sampler.end_LSB ;break;
 8000ff0:	4b3c      	ldr	r3, [pc, #240]	; (80010e4 <menu_vars+0x54c>)
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	e064      	b.n	80010c0 <menu_vars+0x528>
	case 48: 	menu_vars_var1=&sampler.offset[var_index] ;break;
 8000ff6:	78fb      	ldrb	r3, [r7, #3]
 8000ff8:	4a37      	ldr	r2, [pc, #220]	; (80010d8 <menu_vars+0x540>)
 8000ffa:	4413      	add	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	e05f      	b.n	80010c0 <menu_vars+0x528>
	case 49:     menu_vars_var1= &LFO_square[var_index].rate   ; break;
 8001000:	78fa      	ldrb	r2, [r7, #3]
 8001002:	4613      	mov	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4a37      	ldr	r2, [pc, #220]	; (80010e8 <menu_vars+0x550>)
 800100c:	4413      	add	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	e056      	b.n	80010c0 <menu_vars+0x528>
	case 50:     menu_vars_var1= &LFO_square[var_index].depth    ; break;
 8001012:	78fa      	ldrb	r2, [r7, #3]
 8001014:	4613      	mov	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4a32      	ldr	r2, [pc, #200]	; (80010e8 <menu_vars+0x550>)
 800101e:	4413      	add	r3, r2
 8001020:	3301      	adds	r3, #1
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	e04c      	b.n	80010c0 <menu_vars+0x528>
	case 51:     menu_vars_var1= &LFO_square[var_index].offset    ; break;
 8001026:	78fa      	ldrb	r2, [r7, #3]
 8001028:	4613      	mov	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4413      	add	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4a2d      	ldr	r2, [pc, #180]	; (80010e8 <menu_vars+0x550>)
 8001032:	4413      	add	r3, r2
 8001034:	3302      	adds	r3, #2
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	e042      	b.n	80010c0 <menu_vars+0x528>
	case 52:     menu_vars_var1= &LFO_square[var_index].delay    ; break;
 800103a:	78fa      	ldrb	r2, [r7, #3]
 800103c:	4613      	mov	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4413      	add	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4a28      	ldr	r2, [pc, #160]	; (80010e8 <menu_vars+0x550>)
 8001046:	4413      	add	r3, r2
 8001048:	3303      	adds	r3, #3
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	e038      	b.n	80010c0 <menu_vars+0x528>
	case 53:     menu_vars_var1= &LCD_Info[var_index]    ; break; // send as char
 800104e:	78fb      	ldrb	r3, [r7, #3]
 8001050:	4a26      	ldr	r2, [pc, #152]	; (80010ec <menu_vars+0x554>)
 8001052:	4413      	add	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	e033      	b.n	80010c0 <menu_vars+0x528>
	case 54: 	menu_vars_var1=&sampler.trigger_1 ;break;
 8001058:	4b25      	ldr	r3, [pc, #148]	; (80010f0 <menu_vars+0x558>)
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	e030      	b.n	80010c0 <menu_vars+0x528>
	case 55: 	menu_vars_var1=&sampler.trigger_2 ;break;
 800105e:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <menu_vars+0x55c>)
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	e02d      	b.n	80010c0 <menu_vars+0x528>
	case 56: 	menu_vars_var1=&sampler.trigger_3 ;break;
 8001064:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <menu_vars+0x560>)
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	e02a      	b.n	80010c0 <menu_vars+0x528>
	case 57: 	menu_vars_var1=&sampler.trigger_4 ;break;
 800106a:	4b24      	ldr	r3, [pc, #144]	; (80010fc <menu_vars+0x564>)
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	e027      	b.n	80010c0 <menu_vars+0x528>
	case 58: 	menu_vars_var1=&sampler.repeat  ;break;
 8001070:	4b23      	ldr	r3, [pc, #140]	; (8001100 <menu_vars+0x568>)
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	e024      	b.n	80010c0 <menu_vars+0x528>
	case 59: 	menu_vars_var1=&sampler.sample_select[var_index]  ;break;
 8001076:	78fb      	ldrb	r3, [r7, #3]
 8001078:	3308      	adds	r3, #8
 800107a:	4a17      	ldr	r2, [pc, #92]	; (80010d8 <menu_vars+0x540>)
 800107c:	4413      	add	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	e01e      	b.n	80010c0 <menu_vars+0x528>
	case 60: 	menu_vars_var1=&sampler.sample_save  ;break;
 8001082:	4b20      	ldr	r3, [pc, #128]	; (8001104 <menu_vars+0x56c>)
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	e01b      	b.n	80010c0 <menu_vars+0x528>
	case 61: 	menu_vars_var1=&sampler.sample_save_enable  ;break;
 8001088:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <menu_vars+0x570>)
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	e018      	b.n	80010c0 <menu_vars+0x528>
	case 62:     menu_vars_var1= &note[var_index].slide_length    ; break;
 800108e:	78fb      	ldrb	r3, [r7, #3]
 8001090:	011b      	lsls	r3, r3, #4
 8001092:	3308      	adds	r3, #8
 8001094:	4a1d      	ldr	r2, [pc, #116]	; (800110c <menu_vars+0x574>)
 8001096:	4413      	add	r3, r2
 8001098:	3301      	adds	r3, #1
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	e010      	b.n	80010c0 <menu_vars+0x528>
	case 63: 	menu_vars_var1=&sampler.Snotes1[var_index]  ;break;
 800109e:	78fb      	ldrb	r3, [r7, #3]
 80010a0:	3350      	adds	r3, #80	; 0x50
 80010a2:	4a0d      	ldr	r2, [pc, #52]	; (80010d8 <menu_vars+0x540>)
 80010a4:	4413      	add	r3, r2
 80010a6:	3306      	adds	r3, #6
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	e009      	b.n	80010c0 <menu_vars+0x528>
	case 64: 	menu_vars_var1=&sampler.Snotes2[var_index]  ;break;
 80010ac:	78fb      	ldrb	r3, [r7, #3]
 80010ae:	3360      	adds	r3, #96	; 0x60
 80010b0:	4a09      	ldr	r2, [pc, #36]	; (80010d8 <menu_vars+0x540>)
 80010b2:	4413      	add	r3, r2
 80010b4:	3306      	adds	r3, #6
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	e002      	b.n	80010c0 <menu_vars+0x528>

	default :		menu_vars_var1= NULL   ; break;
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	bf00      	nop

	}
    // copy back address  ,ok
	// return the result number for later reference
	//menu_vars_var= menu_vars_var1;
	return menu_vars_var1;
 80010c0:	693b      	ldr	r3, [r7, #16]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20008ebc 	.word	0x20008ebc
 80010d0:	2000d0ec 	.word	0x2000d0ec
 80010d4:	2000cf20 	.word	0x2000cf20
 80010d8:	20008edc 	.word	0x20008edc
 80010dc:	20008f19 	.word	0x20008f19
 80010e0:	20008f1c 	.word	0x20008f1c
 80010e4:	20008f1d 	.word	0x20008f1d
 80010e8:	2000cf5c 	.word	0x2000cf5c
 80010ec:	2000f2b8 	.word	0x2000f2b8
 80010f0:	20008f14 	.word	0x20008f14
 80010f4:	20008f15 	.word	0x20008f15
 80010f8:	20008f16 	.word	0x20008f16
 80010fc:	20008f17 	.word	0x20008f17
 8001100:	20008f18 	.word	0x20008f18
 8001104:	20008f1e 	.word	0x20008f1e
 8001108:	20008f24 	.word	0x20008f24
 800110c:	20008e1c 	.word	0x20008e1c

08001110 <menu_parser>:





void menu_parser(void){          // parse out menus , shouldn't have to run (in theory) once filled ,only for feedback pointer maybe
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0

	    char menu_string[8]="xxxxxxxx";   // incoming string holder (single)
 8001116:	4a6b      	ldr	r2, [pc, #428]	; (80012c4 <menu_parser+0x1b4>)
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001120:	e883 0003 	stmia.w	r3, {r0, r1}
	    char menu_string2[8]="hhhhhhhh";
 8001124:	4a68      	ldr	r2, [pc, #416]	; (80012c8 <menu_parser+0x1b8>)
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	e892 0003 	ldmia.w	r2, {r0, r1}
 800112c:	e883 0003 	stmia.w	r3, {r0, r1}
	    uint8_t string_counter=0;
 8001130:	2300      	movs	r3, #0
 8001132:	75fb      	strb	r3, [r7, #23]
    	    uint16_t menu_searchsize=sizeof(default_menu)-8;   // this should fairly big always , leave gap at the end , atm 480
 8001134:	f640 7346 	movw	r3, #3910	; 0xf46
 8001138:	82bb      	strh	r3, [r7, #20]

	    if (string_search>menu_searchsize) {                    //this is ok
 800113a:	4b64      	ldr	r3, [pc, #400]	; (80012cc <menu_parser+0x1bc>)
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	8aba      	ldrh	r2, [r7, #20]
 8001140:	429a      	cmp	r2, r3
 8001142:	f0c0 80bb 	bcc.w	80012bc <menu_parser+0x1ac>
		    return;    }    // check if bigger than search area
	    //if (menu_counter>240)  return;
	    memcpy(menu_string,default_menu+string_search,8);    //copy 8 strings created menu array
 8001146:	4b61      	ldr	r3, [pc, #388]	; (80012cc <menu_parser+0x1bc>)
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	4b60      	ldr	r3, [pc, #384]	; (80012d0 <menu_parser+0x1c0>)
 800114e:	441a      	add	r2, r3
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	6810      	ldr	r0, [r2, #0]
 8001156:	6851      	ldr	r1, [r2, #4]
 8001158:	c303      	stmia	r3!, {r0, r1}
	    ////////////////////////////
	    for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 800115a:	2300      	movs	r3, #0
 800115c:	75fb      	strb	r3, [r7, #23]
 800115e:	e092      	b.n	8001286 <menu_parser+0x176>

		    memcpy(menu_string2,menu_titles_final[string_counter],8);
 8001160:	7dfb      	ldrb	r3, [r7, #23]
 8001162:	4a5c      	ldr	r2, [pc, #368]	; (80012d4 <menu_parser+0x1c4>)
 8001164:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	6810      	ldr	r0, [r2, #0]
 800116c:	6851      	ldr	r1, [r2, #4]
 800116e:	c303      	stmia	r3!, {r0, r1}
		    if  ((strncmp(menu_string,menu_string2,8))==0) 								// compare and if true pass var,seq
 8001170:	1d39      	adds	r1, r7, #4
 8001172:	f107 030c 	add.w	r3, r7, #12
 8001176:	2208      	movs	r2, #8
 8001178:	4618      	mov	r0, r3
 800117a:	f00c f969 	bl	800d450 <strncmp>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d17d      	bne.n	8001280 <menu_parser+0x170>
		    {

			    if ((menu_counter>111 )&&(menu_counter<128 )) menu_counter=menu_counter+16;   // skip to second page
 8001184:	4b54      	ldr	r3, [pc, #336]	; (80012d8 <menu_parser+0x1c8>)
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	2b6f      	cmp	r3, #111	; 0x6f
 800118a:	d909      	bls.n	80011a0 <menu_parser+0x90>
 800118c:	4b52      	ldr	r3, [pc, #328]	; (80012d8 <menu_parser+0x1c8>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	2b7f      	cmp	r3, #127	; 0x7f
 8001192:	d805      	bhi.n	80011a0 <menu_parser+0x90>
 8001194:	4b50      	ldr	r3, [pc, #320]	; (80012d8 <menu_parser+0x1c8>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	3310      	adds	r3, #16
 800119a:	b29a      	uxth	r2, r3
 800119c:	4b4e      	ldr	r3, [pc, #312]	; (80012d8 <menu_parser+0x1c8>)
 800119e:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>239)&&(menu_counter<256 )) menu_counter=menu_counter+16; // skip
 80011a0:	4b4d      	ldr	r3, [pc, #308]	; (80012d8 <menu_parser+0x1c8>)
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	2bef      	cmp	r3, #239	; 0xef
 80011a6:	d909      	bls.n	80011bc <menu_parser+0xac>
 80011a8:	4b4b      	ldr	r3, [pc, #300]	; (80012d8 <menu_parser+0x1c8>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	2bff      	cmp	r3, #255	; 0xff
 80011ae:	d805      	bhi.n	80011bc <menu_parser+0xac>
 80011b0:	4b49      	ldr	r3, [pc, #292]	; (80012d8 <menu_parser+0x1c8>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	3310      	adds	r3, #16
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	4b47      	ldr	r3, [pc, #284]	; (80012d8 <menu_parser+0x1c8>)
 80011ba:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>367)&&(menu_counter<384 )) menu_counter=menu_counter+16; // skip
 80011bc:	4b46      	ldr	r3, [pc, #280]	; (80012d8 <menu_parser+0x1c8>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 80011c4:	d30a      	bcc.n	80011dc <menu_parser+0xcc>
 80011c6:	4b44      	ldr	r3, [pc, #272]	; (80012d8 <menu_parser+0x1c8>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80011ce:	d205      	bcs.n	80011dc <menu_parser+0xcc>
 80011d0:	4b41      	ldr	r3, [pc, #260]	; (80012d8 <menu_parser+0x1c8>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	3310      	adds	r3, #16
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	4b3f      	ldr	r3, [pc, #252]	; (80012d8 <menu_parser+0x1c8>)
 80011da:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>495)&&(menu_counter<512 )) menu_counter=menu_counter+16; // skip
 80011dc:	4b3e      	ldr	r3, [pc, #248]	; (80012d8 <menu_parser+0x1c8>)
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 80011e4:	d30a      	bcc.n	80011fc <menu_parser+0xec>
 80011e6:	4b3c      	ldr	r3, [pc, #240]	; (80012d8 <menu_parser+0x1c8>)
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011ee:	d205      	bcs.n	80011fc <menu_parser+0xec>
 80011f0:	4b39      	ldr	r3, [pc, #228]	; (80012d8 <menu_parser+0x1c8>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	3310      	adds	r3, #16
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	4b37      	ldr	r3, [pc, #220]	; (80012d8 <menu_parser+0x1c8>)
 80011fa:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>623)&&(menu_counter<640 )) menu_counter=menu_counter+16; // skip
 80011fc:	4b36      	ldr	r3, [pc, #216]	; (80012d8 <menu_parser+0x1c8>)
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8001204:	d30a      	bcc.n	800121c <menu_parser+0x10c>
 8001206:	4b34      	ldr	r3, [pc, #208]	; (80012d8 <menu_parser+0x1c8>)
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800120e:	d205      	bcs.n	800121c <menu_parser+0x10c>
 8001210:	4b31      	ldr	r3, [pc, #196]	; (80012d8 <menu_parser+0x1c8>)
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	3310      	adds	r3, #16
 8001216:	b29a      	uxth	r2, r3
 8001218:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <menu_parser+0x1c8>)
 800121a:	801a      	strh	r2, [r3, #0]

			    menu_title_lut[menu_title_count]=  (string_counter <<16)+(menu_counter&1023);   // search result  and disp lcd position counter
 800121c:	7dfb      	ldrb	r3, [r7, #23]
 800121e:	041a      	lsls	r2, r3, #16
 8001220:	4b2d      	ldr	r3, [pc, #180]	; (80012d8 <menu_parser+0x1c8>)
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001228:	18d1      	adds	r1, r2, r3
 800122a:	4b2c      	ldr	r3, [pc, #176]	; (80012dc <menu_parser+0x1cc>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <menu_parser+0x1d0>)
 8001232:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    			    memcpy(menu_index_list+(menu_title_count*2),default_menu+string_search-2,2); // get array  index under ,LFO[1]  etc ,ok
 8001236:	4b29      	ldr	r3, [pc, #164]	; (80012dc <menu_parser+0x1cc>)
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	461a      	mov	r2, r3
 800123e:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <menu_parser+0x1d4>)
 8001240:	18d0      	adds	r0, r2, r3
 8001242:	4b22      	ldr	r3, [pc, #136]	; (80012cc <menu_parser+0x1bc>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	3b02      	subs	r3, #2
 8001248:	4a21      	ldr	r2, [pc, #132]	; (80012d0 <menu_parser+0x1c0>)
 800124a:	4413      	add	r3, r2
 800124c:	2202      	movs	r2, #2
 800124e:	4619      	mov	r1, r3
 8001250:	f00c f8e8 	bl	800d424 <memcpy>
        			    menu_title_count++;
 8001254:	4b21      	ldr	r3, [pc, #132]	; (80012dc <menu_parser+0x1cc>)
 8001256:	881b      	ldrh	r3, [r3, #0]
 8001258:	3301      	adds	r3, #1
 800125a:	b29a      	uxth	r2, r3
 800125c:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <menu_parser+0x1cc>)
 800125e:	801a      	strh	r2, [r3, #0]
			    menu_counter++;
 8001260:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <menu_parser+0x1c8>)
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	3301      	adds	r3, #1
 8001266:	b29a      	uxth	r2, r3
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <menu_parser+0x1c8>)
 800126a:	801a      	strh	r2, [r3, #0]
			    space_check=0;
 800126c:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <menu_parser+0x1d8>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
			    string_search=string_search+8;     // advance search position
 8001272:	4b16      	ldr	r3, [pc, #88]	; (80012cc <menu_parser+0x1bc>)
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	3308      	adds	r3, #8
 8001278:	b29a      	uxth	r2, r3
 800127a:	4b14      	ldr	r3, [pc, #80]	; (80012cc <menu_parser+0x1bc>)
 800127c:	801a      	strh	r2, [r3, #0]
    			    return;}
 800127e:	e01e      	b.n	80012be <menu_parser+0x1ae>
	    for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 8001280:	7dfb      	ldrb	r3, [r7, #23]
 8001282:	3301      	adds	r3, #1
 8001284:	75fb      	strb	r3, [r7, #23]
 8001286:	7dfb      	ldrb	r3, [r7, #23]
 8001288:	2b41      	cmp	r3, #65	; 0x41
 800128a:	f67f af69 	bls.w	8001160 <menu_parser+0x50>
    	    }
        if (space_check>1)  menu_counter++;   //this is ok
 800128e:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <menu_parser+0x1d8>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d905      	bls.n	80012a2 <menu_parser+0x192>
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <menu_parser+0x1c8>)
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	3301      	adds	r3, #1
 800129c:	b29a      	uxth	r2, r3
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <menu_parser+0x1c8>)
 80012a0:	801a      	strh	r2, [r3, #0]
	    space_check++;  // count empty spaces or fill characters
 80012a2:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <menu_parser+0x1d8>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	3301      	adds	r3, #1
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <menu_parser+0x1d8>)
 80012ac:	701a      	strb	r2, [r3, #0]
	    string_search++;
 80012ae:	4b07      	ldr	r3, [pc, #28]	; (80012cc <menu_parser+0x1bc>)
 80012b0:	881b      	ldrh	r3, [r3, #0]
 80012b2:	3301      	adds	r3, #1
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	4b05      	ldr	r3, [pc, #20]	; (80012cc <menu_parser+0x1bc>)
 80012b8:	801a      	strh	r2, [r3, #0]
	    return;
 80012ba:	e000      	b.n	80012be <menu_parser+0x1ae>
		    return;    }    // check if bigger than search area
 80012bc:	bf00      	nop

    }
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	0800dab8 	.word	0x0800dab8
 80012c8:	0800dac0 	.word	0x0800dac0
 80012cc:	2000d45c 	.word	0x2000d45c
 80012d0:	0800de80 	.word	0x0800de80
 80012d4:	20000000 	.word	0x20000000
 80012d8:	2000d45e 	.word	0x2000d45e
 80012dc:	2000d462 	.word	0x2000d462
 80012e0:	2000d464 	.word	0x2000d464
 80012e4:	2000dc64 	.word	0x2000dc64
 80012e8:	2000d460 	.word	0x2000d460

080012ec <patch_target_parse>:

void patch_target_parse(void){    // records ptr for target options , works ok
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
uint8_t skip=0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	75fb      	strb	r3, [r7, #23]
		uint8_t counter;

for (counter=0;counter<20;counter++){
 80012f6:	2300      	movs	r3, #0
 80012f8:	75bb      	strb	r3, [r7, #22]
 80012fa:	e1b5      	b.n	8001668 <patch_target_parse+0x37c>

			uint16_t* output_hold;
			uint16_t* output_hold2;


			uint8_t input_hold=patch[counter].input1;
 80012fc:	7dbb      	ldrb	r3, [r7, #22]
 80012fe:	4a97      	ldr	r2, [pc, #604]	; (800155c <patch_target_parse+0x270>)
 8001300:	212c      	movs	r1, #44	; 0x2c
 8001302:	fb01 f303 	mul.w	r3, r1, r3
 8001306:	4413      	add	r3, r2
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	727b      	strb	r3, [r7, #9]
			uint8_t input_hold2=patch[counter].input2;
 800130c:	7dbb      	ldrb	r3, [r7, #22]
 800130e:	4a93      	ldr	r2, [pc, #588]	; (800155c <patch_target_parse+0x270>)
 8001310:	212c      	movs	r1, #44	; 0x2c
 8001312:	fb01 f303 	mul.w	r3, r1, r3
 8001316:	4413      	add	r3, r2
 8001318:	3303      	adds	r3, #3
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	723b      	strb	r3, [r7, #8]
			if (patch[counter].input1>=(menu_lookup_count))    patch[counter].input1=0;    // limit
 800131e:	7dbb      	ldrb	r3, [r7, #22]
 8001320:	4a8e      	ldr	r2, [pc, #568]	; (800155c <patch_target_parse+0x270>)
 8001322:	212c      	movs	r1, #44	; 0x2c
 8001324:	fb01 f303 	mul.w	r3, r1, r3
 8001328:	4413      	add	r3, r2
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b41      	cmp	r3, #65	; 0x41
 800132e:	d907      	bls.n	8001340 <patch_target_parse+0x54>
 8001330:	7dbb      	ldrb	r3, [r7, #22]
 8001332:	4a8a      	ldr	r2, [pc, #552]	; (800155c <patch_target_parse+0x270>)
 8001334:	212c      	movs	r1, #44	; 0x2c
 8001336:	fb01 f303 	mul.w	r3, r1, r3
 800133a:	4413      	add	r3, r2
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]

			switch(input_hold&3){     // lfo now , can add adsr later
 8001340:	7a7b      	ldrb	r3, [r7, #9]
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	2b03      	cmp	r3, #3
 8001348:	d840      	bhi.n	80013cc <patch_target_parse+0xe0>
 800134a:	a201      	add	r2, pc, #4	; (adr r2, 8001350 <patch_target_parse+0x64>)
 800134c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001350:	08001361 	.word	0x08001361
 8001354:	0800137b 	.word	0x0800137b
 8001358:	08001397 	.word	0x08001397
 800135c:	080013b3 	.word	0x080013b3

						case 0:   output_hold=&LFO[input_hold>>2].out[0];break;
 8001360:	7a7b      	ldrb	r3, [r7, #9]
 8001362:	089b      	lsrs	r3, r3, #2
 8001364:	b2db      	uxtb	r3, r3
 8001366:	461a      	mov	r2, r3
 8001368:	4613      	mov	r3, r2
 800136a:	011b      	lsls	r3, r3, #4
 800136c:	4413      	add	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4a7b      	ldr	r2, [pc, #492]	; (8001560 <patch_target_parse+0x274>)
 8001372:	4413      	add	r3, r2
 8001374:	3306      	adds	r3, #6
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	e028      	b.n	80013cc <patch_target_parse+0xe0>
						case 1:   output_hold=&LFO[input_hold>>2].out_saw[0];break;
 800137a:	7a7b      	ldrb	r3, [r7, #9]
 800137c:	089b      	lsrs	r3, r3, #2
 800137e:	b2db      	uxtb	r3, r3
 8001380:	461a      	mov	r2, r3
 8001382:	4613      	mov	r3, r2
 8001384:	011b      	lsls	r3, r3, #4
 8001386:	4413      	add	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	3318      	adds	r3, #24
 800138c:	4a74      	ldr	r2, [pc, #464]	; (8001560 <patch_target_parse+0x274>)
 800138e:	4413      	add	r3, r2
 8001390:	3302      	adds	r3, #2
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	e01a      	b.n	80013cc <patch_target_parse+0xe0>
						case 2:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
 8001396:	7a7b      	ldrb	r3, [r7, #9]
 8001398:	089b      	lsrs	r3, r3, #2
 800139a:	b2db      	uxtb	r3, r3
 800139c:	461a      	mov	r2, r3
 800139e:	4613      	mov	r3, r2
 80013a0:	011b      	lsls	r3, r3, #4
 80013a2:	4413      	add	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	3328      	adds	r3, #40	; 0x28
 80013a8:	4a6d      	ldr	r2, [pc, #436]	; (8001560 <patch_target_parse+0x274>)
 80013aa:	4413      	add	r3, r2
 80013ac:	3306      	adds	r3, #6
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	e00c      	b.n	80013cc <patch_target_parse+0xe0>
						//case 3:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
						case 3:   output_hold=&LFO_square[input_hold>>2].out[0];break;
 80013b2:	7a7b      	ldrb	r3, [r7, #9]
 80013b4:	089b      	lsrs	r3, r3, #2
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	461a      	mov	r2, r3
 80013ba:	4613      	mov	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4a68      	ldr	r2, [pc, #416]	; (8001564 <patch_target_parse+0x278>)
 80013c4:	4413      	add	r3, r2
 80013c6:	3304      	adds	r3, #4
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	bf00      	nop
			}
			if (patch[counter].input2>=(menu_lookup_count))    patch[counter].input2=0;    // limit
 80013cc:	7dbb      	ldrb	r3, [r7, #22]
 80013ce:	4a63      	ldr	r2, [pc, #396]	; (800155c <patch_target_parse+0x270>)
 80013d0:	212c      	movs	r1, #44	; 0x2c
 80013d2:	fb01 f303 	mul.w	r3, r1, r3
 80013d6:	4413      	add	r3, r2
 80013d8:	3303      	adds	r3, #3
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b41      	cmp	r3, #65	; 0x41
 80013de:	d908      	bls.n	80013f2 <patch_target_parse+0x106>
 80013e0:	7dbb      	ldrb	r3, [r7, #22]
 80013e2:	4a5e      	ldr	r2, [pc, #376]	; (800155c <patch_target_parse+0x270>)
 80013e4:	212c      	movs	r1, #44	; 0x2c
 80013e6:	fb01 f303 	mul.w	r3, r1, r3
 80013ea:	4413      	add	r3, r2
 80013ec:	3303      	adds	r3, #3
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]

			switch(input_hold2&3){     // lfo now , can add adsr later
 80013f2:	7a3b      	ldrb	r3, [r7, #8]
 80013f4:	f003 0303 	and.w	r3, r3, #3
 80013f8:	2b03      	cmp	r3, #3
 80013fa:	d841      	bhi.n	8001480 <patch_target_parse+0x194>
 80013fc:	a201      	add	r2, pc, #4	; (adr r2, 8001404 <patch_target_parse+0x118>)
 80013fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001402:	bf00      	nop
 8001404:	08001415 	.word	0x08001415
 8001408:	0800142f 	.word	0x0800142f
 800140c:	0800144b 	.word	0x0800144b
 8001410:	08001467 	.word	0x08001467

			case 0:   output_hold2=&LFO[input_hold2>>2].out[0];break;
 8001414:	7a3b      	ldrb	r3, [r7, #8]
 8001416:	089b      	lsrs	r3, r3, #2
 8001418:	b2db      	uxtb	r3, r3
 800141a:	461a      	mov	r2, r3
 800141c:	4613      	mov	r3, r2
 800141e:	011b      	lsls	r3, r3, #4
 8001420:	4413      	add	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4a4e      	ldr	r2, [pc, #312]	; (8001560 <patch_target_parse+0x274>)
 8001426:	4413      	add	r3, r2
 8001428:	3306      	adds	r3, #6
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	e028      	b.n	8001480 <patch_target_parse+0x194>
			case 1:   output_hold2=&LFO[input_hold2>>2].out_saw[0];break;
 800142e:	7a3b      	ldrb	r3, [r7, #8]
 8001430:	089b      	lsrs	r3, r3, #2
 8001432:	b2db      	uxtb	r3, r3
 8001434:	461a      	mov	r2, r3
 8001436:	4613      	mov	r3, r2
 8001438:	011b      	lsls	r3, r3, #4
 800143a:	4413      	add	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	3318      	adds	r3, #24
 8001440:	4a47      	ldr	r2, [pc, #284]	; (8001560 <patch_target_parse+0x274>)
 8001442:	4413      	add	r3, r2
 8001444:	3302      	adds	r3, #2
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	e01a      	b.n	8001480 <patch_target_parse+0x194>
			case 2:   output_hold2=&LFO[input_hold2>>2].out_tri[0];break;
 800144a:	7a3b      	ldrb	r3, [r7, #8]
 800144c:	089b      	lsrs	r3, r3, #2
 800144e:	b2db      	uxtb	r3, r3
 8001450:	461a      	mov	r2, r3
 8001452:	4613      	mov	r3, r2
 8001454:	011b      	lsls	r3, r3, #4
 8001456:	4413      	add	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	3328      	adds	r3, #40	; 0x28
 800145c:	4a40      	ldr	r2, [pc, #256]	; (8001560 <patch_target_parse+0x274>)
 800145e:	4413      	add	r3, r2
 8001460:	3306      	adds	r3, #6
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	e00c      	b.n	8001480 <patch_target_parse+0x194>
			//case 3:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
			case 3:   output_hold2=&LFO_square[input_hold2>>2].out[0];break;
 8001466:	7a3b      	ldrb	r3, [r7, #8]
 8001468:	089b      	lsrs	r3, r3, #2
 800146a:	b2db      	uxtb	r3, r3
 800146c:	461a      	mov	r2, r3
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4a3b      	ldr	r2, [pc, #236]	; (8001564 <patch_target_parse+0x278>)
 8001478:	4413      	add	r3, r2
 800147a:	3304      	adds	r3, #4
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	bf00      	nop
			}

			if (patch[counter].input1==41) output_hold=&adc_values[1];   // same format as lfo
 8001480:	7dbb      	ldrb	r3, [r7, #22]
 8001482:	4a36      	ldr	r2, [pc, #216]	; (800155c <patch_target_parse+0x270>)
 8001484:	212c      	movs	r1, #44	; 0x2c
 8001486:	fb01 f303 	mul.w	r3, r1, r3
 800148a:	4413      	add	r3, r2
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b29      	cmp	r3, #41	; 0x29
 8001490:	d101      	bne.n	8001496 <patch_target_parse+0x1aa>
 8001492:	4b35      	ldr	r3, [pc, #212]	; (8001568 <patch_target_parse+0x27c>)
 8001494:	613b      	str	r3, [r7, #16]
			if (patch[counter].input1==42) output_hold=&adc_values[2]; // do this for other single values
 8001496:	7dbb      	ldrb	r3, [r7, #22]
 8001498:	4a30      	ldr	r2, [pc, #192]	; (800155c <patch_target_parse+0x270>)
 800149a:	212c      	movs	r1, #44	; 0x2c
 800149c:	fb01 f303 	mul.w	r3, r1, r3
 80014a0:	4413      	add	r3, r2
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b2a      	cmp	r3, #42	; 0x2a
 80014a6:	d101      	bne.n	80014ac <patch_target_parse+0x1c0>
 80014a8:	4b30      	ldr	r3, [pc, #192]	; (800156c <patch_target_parse+0x280>)
 80014aa:	613b      	str	r3, [r7, #16]
			if (patch[counter].input1==43) output_hold=&adc_values[0];
 80014ac:	7dbb      	ldrb	r3, [r7, #22]
 80014ae:	4a2b      	ldr	r2, [pc, #172]	; (800155c <patch_target_parse+0x270>)
 80014b0:	212c      	movs	r1, #44	; 0x2c
 80014b2:	fb01 f303 	mul.w	r3, r1, r3
 80014b6:	4413      	add	r3, r2
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b2b      	cmp	r3, #43	; 0x2b
 80014bc:	d101      	bne.n	80014c2 <patch_target_parse+0x1d6>
 80014be:	4b2c      	ldr	r3, [pc, #176]	; (8001570 <patch_target_parse+0x284>)
 80014c0:	613b      	str	r3, [r7, #16]
			if (patch[counter].input2==41) output_hold2=&adc_values[1];   // waiting on 8 values
 80014c2:	7dbb      	ldrb	r3, [r7, #22]
 80014c4:	4a25      	ldr	r2, [pc, #148]	; (800155c <patch_target_parse+0x270>)
 80014c6:	212c      	movs	r1, #44	; 0x2c
 80014c8:	fb01 f303 	mul.w	r3, r1, r3
 80014cc:	4413      	add	r3, r2
 80014ce:	3303      	adds	r3, #3
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b29      	cmp	r3, #41	; 0x29
 80014d4:	d101      	bne.n	80014da <patch_target_parse+0x1ee>
 80014d6:	4b24      	ldr	r3, [pc, #144]	; (8001568 <patch_target_parse+0x27c>)
 80014d8:	60fb      	str	r3, [r7, #12]
			if (patch[counter].input2==42) output_hold2=&adc_values[2]; // do this for other single values
 80014da:	7dbb      	ldrb	r3, [r7, #22]
 80014dc:	4a1f      	ldr	r2, [pc, #124]	; (800155c <patch_target_parse+0x270>)
 80014de:	212c      	movs	r1, #44	; 0x2c
 80014e0:	fb01 f303 	mul.w	r3, r1, r3
 80014e4:	4413      	add	r3, r2
 80014e6:	3303      	adds	r3, #3
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b2a      	cmp	r3, #42	; 0x2a
 80014ec:	d101      	bne.n	80014f2 <patch_target_parse+0x206>
 80014ee:	4b1f      	ldr	r3, [pc, #124]	; (800156c <patch_target_parse+0x280>)
 80014f0:	60fb      	str	r3, [r7, #12]
			if (patch[counter].input2==43) output_hold2=&adc_values[0];
 80014f2:	7dbb      	ldrb	r3, [r7, #22]
 80014f4:	4a19      	ldr	r2, [pc, #100]	; (800155c <patch_target_parse+0x270>)
 80014f6:	212c      	movs	r1, #44	; 0x2c
 80014f8:	fb01 f303 	mul.w	r3, r1, r3
 80014fc:	4413      	add	r3, r2
 80014fe:	3303      	adds	r3, #3
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b2b      	cmp	r3, #43	; 0x2b
 8001504:	d101      	bne.n	800150a <patch_target_parse+0x21e>
 8001506:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <patch_target_parse+0x284>)
 8001508:	60fb      	str	r3, [r7, #12]



			patch[counter].in1_ptr=output_hold;   // sets input pointer to first sample , default is lfo[0].out [0]
 800150a:	7dbb      	ldrb	r3, [r7, #22]
 800150c:	4a13      	ldr	r2, [pc, #76]	; (800155c <patch_target_parse+0x270>)
 800150e:	212c      	movs	r1, #44	; 0x2c
 8001510:	fb01 f303 	mul.w	r3, r1, r3
 8001514:	4413      	add	r3, r2
 8001516:	3320      	adds	r3, #32
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	601a      	str	r2, [r3, #0]
			patch[counter].in2_ptr=output_hold2;
 800151c:	7dbb      	ldrb	r3, [r7, #22]
 800151e:	4a0f      	ldr	r2, [pc, #60]	; (800155c <patch_target_parse+0x270>)
 8001520:	212c      	movs	r1, #44	; 0x2c
 8001522:	fb01 f303 	mul.w	r3, r1, r3
 8001526:	4413      	add	r3, r2
 8001528:	3324      	adds	r3, #36	; 0x24
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	601a      	str	r2, [r3, #0]


			if (patch[counter].target) {  // test if above zero
 800152e:	7dbb      	ldrb	r3, [r7, #22]
 8001530:	4a0a      	ldr	r2, [pc, #40]	; (800155c <patch_target_parse+0x270>)
 8001532:	212c      	movs	r1, #44	; 0x2c
 8001534:	fb01 f303 	mul.w	r3, r1, r3
 8001538:	4413      	add	r3, r2
 800153a:	3301      	adds	r3, #1
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	f000 808f 	beq.w	8001662 <patch_target_parse+0x376>
				uint8_t target_input=patch[counter].target; // copy to avoid messed up pointer
 8001544:	7dbb      	ldrb	r3, [r7, #22]
 8001546:	4a05      	ldr	r2, [pc, #20]	; (800155c <patch_target_parse+0x270>)
 8001548:	212c      	movs	r1, #44	; 0x2c
 800154a:	fb01 f303 	mul.w	r3, r1, r3
 800154e:	4413      	add	r3, r2
 8001550:	3301      	adds	r3, #1
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	72fb      	strb	r3, [r7, #11]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 8001556:	7afb      	ldrb	r3, [r7, #11]
 8001558:	75fb      	strb	r3, [r7, #23]
 800155a:	e016      	b.n	800158a <patch_target_parse+0x29e>
 800155c:	2000d0ec 	.word	0x2000d0ec
 8001560:	2000cc78 	.word	0x2000cc78
 8001564:	2000cf5c 	.word	0x2000cf5c
 8001568:	20008e0e 	.word	0x20008e0e
 800156c:	20008e10 	.word	0x20008e10
 8001570:	20008e0c 	.word	0x20008e0c
					if (patch_skip_list[target_input]==1)  target_input++;
 8001574:	7afb      	ldrb	r3, [r7, #11]
 8001576:	4a41      	ldr	r2, [pc, #260]	; (800167c <patch_target_parse+0x390>)
 8001578:	5cd3      	ldrb	r3, [r2, r3]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d102      	bne.n	8001584 <patch_target_parse+0x298>
 800157e:	7afb      	ldrb	r3, [r7, #11]
 8001580:	3301      	adds	r3, #1
 8001582:	72fb      	strb	r3, [r7, #11]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 8001584:	7dfb      	ldrb	r3, [r7, #23]
 8001586:	3301      	adds	r3, #1
 8001588:	75fb      	strb	r3, [r7, #23]
 800158a:	7dfb      	ldrb	r3, [r7, #23]
 800158c:	2b41      	cmp	r3, #65	; 0x41
 800158e:	d9f1      	bls.n	8001574 <patch_target_parse+0x288>
				}  // test against list and skip option if on 1
				if (target_input>(menu_lookup_count-1)) target_input=menu_lookup_count-1;
 8001590:	7afb      	ldrb	r3, [r7, #11]
 8001592:	2b41      	cmp	r3, #65	; 0x41
 8001594:	d901      	bls.n	800159a <patch_target_parse+0x2ae>
 8001596:	2341      	movs	r3, #65	; 0x41
 8001598:	72fb      	strb	r3, [r7, #11]
				if (target_input!=35)  {     // make target index is not selected
 800159a:	7afb      	ldrb	r3, [r7, #11]
 800159c:	2b23      	cmp	r3, #35	; 0x23
 800159e:	d057      	beq.n	8001650 <patch_target_parse+0x364>
			patch[counter].target=target_input; // write back corrected value
 80015a0:	7dbb      	ldrb	r3, [r7, #22]
 80015a2:	4a37      	ldr	r2, [pc, #220]	; (8001680 <patch_target_parse+0x394>)
 80015a4:	212c      	movs	r1, #44	; 0x2c
 80015a6:	fb01 f303 	mul.w	r3, r1, r3
 80015aa:	4413      	add	r3, r2
 80015ac:	3301      	adds	r3, #1
 80015ae:	7afa      	ldrb	r2, [r7, #11]
 80015b0:	701a      	strb	r2, [r3, #0]

			uint8_t target_index=patch[counter].target_index;
 80015b2:	7dbb      	ldrb	r3, [r7, #22]
 80015b4:	4a32      	ldr	r2, [pc, #200]	; (8001680 <patch_target_parse+0x394>)
 80015b6:	212c      	movs	r1, #44	; 0x2c
 80015b8:	fb01 f303 	mul.w	r3, r1, r3
 80015bc:	4413      	add	r3, r2
 80015be:	3302      	adds	r3, #2
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	72bb      	strb	r3, [r7, #10]
			if (target_index>menu_vars_index_limit[target_index]  )   // test limit
 80015c4:	7abb      	ldrb	r3, [r7, #10]
 80015c6:	4a2f      	ldr	r2, [pc, #188]	; (8001684 <patch_target_parse+0x398>)
 80015c8:	5cd3      	ldrb	r3, [r2, r3]
 80015ca:	7aba      	ldrb	r2, [r7, #10]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d903      	bls.n	80015d8 <patch_target_parse+0x2ec>
			{	target_index=menu_vars_index_limit[target_index]; }
 80015d0:	7abb      	ldrb	r3, [r7, #10]
 80015d2:	4a2c      	ldr	r2, [pc, #176]	; (8001684 <patch_target_parse+0x398>)
 80015d4:	5cd3      	ldrb	r3, [r2, r3]
 80015d6:	72bb      	strb	r3, [r7, #10]
			patch[counter].target_index=target_index;
 80015d8:	7dbb      	ldrb	r3, [r7, #22]
 80015da:	4a29      	ldr	r2, [pc, #164]	; (8001680 <patch_target_parse+0x394>)
 80015dc:	212c      	movs	r1, #44	; 0x2c
 80015de:	fb01 f303 	mul.w	r3, r1, r3
 80015e2:	4413      	add	r3, r2
 80015e4:	3302      	adds	r3, #2
 80015e6:	7aba      	ldrb	r2, [r7, #10]
 80015e8:	701a      	strb	r2, [r3, #0]
			uint8_t*  target_out_ptr= menu_vars(menu_titles_final[target_input] , target_index    );
 80015ea:	7afb      	ldrb	r3, [r7, #11]
 80015ec:	4a26      	ldr	r2, [pc, #152]	; (8001688 <patch_target_parse+0x39c>)
 80015ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f2:	7aba      	ldrb	r2, [r7, #10]
 80015f4:	4611      	mov	r1, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff face 	bl	8000b98 <menu_vars>
 80015fc:	6078      	str	r0, [r7, #4]
			if (target_out_ptr)           {patch[counter].out_ptr =target_out_ptr;     // write ptr
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d02e      	beq.n	8001662 <patch_target_parse+0x376>
 8001604:	7dbb      	ldrb	r3, [r7, #22]
 8001606:	4a1e      	ldr	r2, [pc, #120]	; (8001680 <patch_target_parse+0x394>)
 8001608:	212c      	movs	r1, #44	; 0x2c
 800160a:	fb01 f303 	mul.w	r3, r1, r3
 800160e:	4413      	add	r3, r2
 8001610:	331c      	adds	r3, #28
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	601a      	str	r2, [r3, #0]
			patch[counter].divider=LFO_vars_divider[menu_vars_ref];
 8001616:	4b1d      	ldr	r3, [pc, #116]	; (800168c <patch_target_parse+0x3a0>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	4619      	mov	r1, r3
 800161c:	7dbb      	ldrb	r3, [r7, #22]
 800161e:	4a1c      	ldr	r2, [pc, #112]	; (8001690 <patch_target_parse+0x3a4>)
 8001620:	5c50      	ldrb	r0, [r2, r1]
 8001622:	4a17      	ldr	r2, [pc, #92]	; (8001680 <patch_target_parse+0x394>)
 8001624:	212c      	movs	r1, #44	; 0x2c
 8001626:	fb01 f303 	mul.w	r3, r1, r3
 800162a:	4413      	add	r3, r2
 800162c:	3329      	adds	r3, #41	; 0x29
 800162e:	4602      	mov	r2, r0
 8001630:	701a      	strb	r2, [r3, #0]
			patch[counter].limiter=menu_vars_limiter[menu_vars_ref]; }      // writes limiter value for particular patch , deosnt save
 8001632:	4b16      	ldr	r3, [pc, #88]	; (800168c <patch_target_parse+0x3a0>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	4619      	mov	r1, r3
 8001638:	7dbb      	ldrb	r3, [r7, #22]
 800163a:	4a16      	ldr	r2, [pc, #88]	; (8001694 <patch_target_parse+0x3a8>)
 800163c:	5c50      	ldrb	r0, [r2, r1]
 800163e:	4a10      	ldr	r2, [pc, #64]	; (8001680 <patch_target_parse+0x394>)
 8001640:	212c      	movs	r1, #44	; 0x2c
 8001642:	fb01 f303 	mul.w	r3, r1, r3
 8001646:	4413      	add	r3, r2
 8001648:	3328      	adds	r3, #40	; 0x28
 800164a:	4602      	mov	r2, r0
 800164c:	701a      	strb	r2, [r3, #0]
 800164e:	e008      	b.n	8001662 <patch_target_parse+0x376>
				}
				else patch[counter].target=0;  // write back 0 if failed
 8001650:	7dbb      	ldrb	r3, [r7, #22]
 8001652:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <patch_target_parse+0x394>)
 8001654:	212c      	movs	r1, #44	; 0x2c
 8001656:	fb01 f303 	mul.w	r3, r1, r3
 800165a:	4413      	add	r3, r2
 800165c:	3301      	adds	r3, #1
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]
for (counter=0;counter<20;counter++){
 8001662:	7dbb      	ldrb	r3, [r7, #22]
 8001664:	3301      	adds	r3, #1
 8001666:	75bb      	strb	r3, [r7, #22]
 8001668:	7dbb      	ldrb	r3, [r7, #22]
 800166a:	2b13      	cmp	r3, #19
 800166c:	f67f ae46 	bls.w	80012fc <patch_target_parse+0x10>
			}
		}
	}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	0800ee58 	.word	0x0800ee58
 8001680:	2000d0ec 	.word	0x2000d0ec
 8001684:	0800edd0 	.word	0x0800edd0
 8001688:	20000000 	.word	0x20000000
 800168c:	2000e09d 	.word	0x2000e09d
 8001690:	20010358 	.word	0x20010358
 8001694:	0800ee14 	.word	0x0800ee14

08001698 <patch_target_replace>:

		}
	}*/
}

	void patch_target_replace(void){					// sttaight value replace  ,ok
 8001698:	b490      	push	{r4, r7}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
	    uint8_t loop_position=sampling_position&7;    // 0-7 , this comes usually from 0-512 loop / 64
 800169e:	4b59      	ldr	r3, [pc, #356]	; (8001804 <patch_target_replace+0x16c>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	753b      	strb	r3, [r7, #20]
	    uint8_t counter;
	   uint8_t input_loop_position;
	   int32_t output_hold;
	   int32_t output_hold2;
	   uint8_t input_mix=0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	74fb      	strb	r3, [r7, #19]

	    for (counter=0;counter<20;counter++){    // single phase inc half sine only !!!
 80016ac:	2300      	movs	r3, #0
 80016ae:	75fb      	strb	r3, [r7, #23]
 80016b0:	e09d      	b.n	80017ee <patch_target_replace+0x156>



		    if (patch[counter].target) {         // check first for enable
 80016b2:	7dfb      	ldrb	r3, [r7, #23]
 80016b4:	4a54      	ldr	r2, [pc, #336]	; (8001808 <patch_target_replace+0x170>)
 80016b6:	212c      	movs	r1, #44	; 0x2c
 80016b8:	fb01 f303 	mul.w	r3, r1, r3
 80016bc:	4413      	add	r3, r2
 80016be:	3301      	adds	r3, #1
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 8090 	beq.w	80017e8 <patch_target_replace+0x150>

			if ((patch[counter].input1>40) ||(patch[counter].input2>40) )input_loop_position=0;  else input_loop_position=loop_position;// hack
 80016c8:	7dfb      	ldrb	r3, [r7, #23]
 80016ca:	4a4f      	ldr	r2, [pc, #316]	; (8001808 <patch_target_replace+0x170>)
 80016cc:	212c      	movs	r1, #44	; 0x2c
 80016ce:	fb01 f303 	mul.w	r3, r1, r3
 80016d2:	4413      	add	r3, r2
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b28      	cmp	r3, #40	; 0x28
 80016d8:	d809      	bhi.n	80016ee <patch_target_replace+0x56>
 80016da:	7dfb      	ldrb	r3, [r7, #23]
 80016dc:	4a4a      	ldr	r2, [pc, #296]	; (8001808 <patch_target_replace+0x170>)
 80016de:	212c      	movs	r1, #44	; 0x2c
 80016e0:	fb01 f303 	mul.w	r3, r1, r3
 80016e4:	4413      	add	r3, r2
 80016e6:	3303      	adds	r3, #3
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b28      	cmp	r3, #40	; 0x28
 80016ec:	d902      	bls.n	80016f4 <patch_target_replace+0x5c>
 80016ee:	2300      	movs	r3, #0
 80016f0:	75bb      	strb	r3, [r7, #22]
 80016f2:	e001      	b.n	80016f8 <patch_target_replace+0x60>
 80016f4:	7d3b      	ldrb	r3, [r7, #20]
 80016f6:	75bb      	strb	r3, [r7, #22]


				input_mix=patch[counter].in_mix;
 80016f8:	7dfb      	ldrb	r3, [r7, #23]
 80016fa:	4a43      	ldr	r2, [pc, #268]	; (8001808 <patch_target_replace+0x170>)
 80016fc:	212c      	movs	r1, #44	; 0x2c
 80016fe:	fb01 f303 	mul.w	r3, r1, r3
 8001702:	4413      	add	r3, r2
 8001704:	3304      	adds	r3, #4
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	74fb      	strb	r3, [r7, #19]
				output_hold	      =*(patch[counter].in1_ptr+(input_loop_position));   //write output here
 800170a:	7dfb      	ldrb	r3, [r7, #23]
 800170c:	4a3e      	ldr	r2, [pc, #248]	; (8001808 <patch_target_replace+0x170>)
 800170e:	212c      	movs	r1, #44	; 0x2c
 8001710:	fb01 f303 	mul.w	r3, r1, r3
 8001714:	4413      	add	r3, r2
 8001716:	3320      	adds	r3, #32
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	7dbb      	ldrb	r3, [r7, #22]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4413      	add	r3, r2
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	60fb      	str	r3, [r7, #12]
				output_hold2	      =*(patch[counter].in2_ptr+(input_loop_position));   //write output here
 8001724:	7dfb      	ldrb	r3, [r7, #23]
 8001726:	4a38      	ldr	r2, [pc, #224]	; (8001808 <patch_target_replace+0x170>)
 8001728:	212c      	movs	r1, #44	; 0x2c
 800172a:	fb01 f303 	mul.w	r3, r1, r3
 800172e:	4413      	add	r3, r2
 8001730:	3324      	adds	r3, #36	; 0x24
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	7dbb      	ldrb	r3, [r7, #22]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	4413      	add	r3, r2
 800173a:	881b      	ldrh	r3, [r3, #0]
 800173c:	60bb      	str	r3, [r7, #8]

				output_hold	=output_hold*(16-input_mix);   // bit messy  might just pre_calc
 800173e:	7cfb      	ldrb	r3, [r7, #19]
 8001740:	f1c3 0210 	rsb	r2, r3, #16
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	fb02 f303 	mul.w	r3, r2, r3
 800174a:	60fb      	str	r3, [r7, #12]
				output_hold2	=output_hold2*input_mix;
 800174c:	7cfa      	ldrb	r2, [r7, #19]
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	fb02 f303 	mul.w	r3, r2, r3
 8001754:	60bb      	str	r3, [r7, #8]



				patch[counter].output[loop_position]	=((output_hold+output_hold2)>>4);
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	4413      	add	r3, r2
 800175c:	1119      	asrs	r1, r3, #4
 800175e:	7dfa      	ldrb	r2, [r7, #23]
 8001760:	7d3b      	ldrb	r3, [r7, #20]
 8001762:	b28c      	uxth	r4, r1
 8001764:	4928      	ldr	r1, [pc, #160]	; (8001808 <patch_target_replace+0x170>)
 8001766:	2016      	movs	r0, #22
 8001768:	fb00 f202 	mul.w	r2, r0, r2
 800176c:	4413      	add	r3, r2
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	440b      	add	r3, r1
 8001772:	4622      	mov	r2, r4
 8001774:	80da      	strh	r2, [r3, #6]


			    uint8_t  *ptr_to_modify =patch[counter].out_ptr;       // select address , not always 8 bit ,ok
 8001776:	7dfb      	ldrb	r3, [r7, #23]
 8001778:	4a23      	ldr	r2, [pc, #140]	; (8001808 <patch_target_replace+0x170>)
 800177a:	212c      	movs	r1, #44	; 0x2c
 800177c:	fb01 f303 	mul.w	r3, r1, r3
 8001780:	4413      	add	r3, r2
 8001782:	331c      	adds	r3, #28
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	607b      	str	r3, [r7, #4]
			    uint16_t lfo_out_temp=  (patch[counter].output [loop_position])>>8;  // 0-256,
 8001788:	7dfa      	ldrb	r2, [r7, #23]
 800178a:	7d3b      	ldrb	r3, [r7, #20]
 800178c:	491e      	ldr	r1, [pc, #120]	; (8001808 <patch_target_replace+0x170>)
 800178e:	2016      	movs	r0, #22
 8001790:	fb00 f202 	mul.w	r2, r0, r2
 8001794:	4413      	add	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	440b      	add	r3, r1
 800179a:	88db      	ldrh	r3, [r3, #6]
 800179c:	0a1b      	lsrs	r3, r3, #8
 800179e:	807b      	strh	r3, [r7, #2]
			    uint8_t lfo_mod1=ptr_to_modify; //ok
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	707b      	strb	r3, [r7, #1]

			    uint8_t  var_replaced =  lfo_out_temp >>patch[counter].divider;   // grab lfo out *    data to be modfied
 80017a4:	887b      	ldrh	r3, [r7, #2]
 80017a6:	7dfa      	ldrb	r2, [r7, #23]
 80017a8:	4917      	ldr	r1, [pc, #92]	; (8001808 <patch_target_replace+0x170>)
 80017aa:	202c      	movs	r0, #44	; 0x2c
 80017ac:	fb00 f202 	mul.w	r2, r0, r2
 80017b0:	440a      	add	r2, r1
 80017b2:	3229      	adds	r2, #41	; 0x29
 80017b4:	7812      	ldrb	r2, [r2, #0]
 80017b6:	4113      	asrs	r3, r2
 80017b8:	757b      	strb	r3, [r7, #21]

			    if (var_replaced>patch[counter].limiter) var_replaced=patch[counter].limiter;  // limit lfo output
 80017ba:	7dfb      	ldrb	r3, [r7, #23]
 80017bc:	4a12      	ldr	r2, [pc, #72]	; (8001808 <patch_target_replace+0x170>)
 80017be:	212c      	movs	r1, #44	; 0x2c
 80017c0:	fb01 f303 	mul.w	r3, r1, r3
 80017c4:	4413      	add	r3, r2
 80017c6:	3328      	adds	r3, #40	; 0x28
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	7d7a      	ldrb	r2, [r7, #21]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d908      	bls.n	80017e2 <patch_target_replace+0x14a>
 80017d0:	7dfb      	ldrb	r3, [r7, #23]
 80017d2:	4a0d      	ldr	r2, [pc, #52]	; (8001808 <patch_target_replace+0x170>)
 80017d4:	212c      	movs	r1, #44	; 0x2c
 80017d6:	fb01 f303 	mul.w	r3, r1, r3
 80017da:	4413      	add	r3, r2
 80017dc:	3328      	adds	r3, #40	; 0x28
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	757b      	strb	r3, [r7, #21]

			    *ptr_to_modify =var_replaced;   // replace original value,ok
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	7d7a      	ldrb	r2, [r7, #21]
 80017e6:	701a      	strb	r2, [r3, #0]
	    for (counter=0;counter<20;counter++){    // single phase inc half sine only !!!
 80017e8:	7dfb      	ldrb	r3, [r7, #23]
 80017ea:	3301      	adds	r3, #1
 80017ec:	75fb      	strb	r3, [r7, #23]
 80017ee:	7dfb      	ldrb	r3, [r7, #23]
 80017f0:	2b13      	cmp	r3, #19
 80017f2:	f67f af5e 	bls.w	80016b2 <patch_target_replace+0x1a>
		    }
	    }
    }
 80017f6:	bf00      	nop
 80017f8:	bf00      	nop
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc90      	pop	{r4, r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	2000e078 	.word	0x2000e078
 8001808:	2000d0ec 	.word	0x2000d0ec

0800180c <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)    // unreliable
	{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
		if(TIM10==htim->Instance){     // send spi to display , ok
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a2e      	ldr	r2, [pc, #184]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d118      	bne.n	8001850 <HAL_TIM_PeriodElapsedCallback+0x44>
		    HAL_SPI_Transmit_DMA(&hspi2,spi_tx_block+block_counter,54);
 800181e:	4b2e      	ldr	r3, [pc, #184]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	4b2d      	ldr	r3, [pc, #180]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001826:	4413      	add	r3, r2
 8001828:	2236      	movs	r2, #54	; 0x36
 800182a:	4619      	mov	r1, r3
 800182c:	482c      	ldr	r0, [pc, #176]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800182e:	f009 fbd5 	bl	800afdc <HAL_SPI_Transmit_DMA>
		    			if (block_counter<3456) block_counter=block_counter+54; else block_counter=0;
 8001832:	4b29      	ldr	r3, [pc, #164]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	f5b3 6f58 	cmp.w	r3, #3456	; 0xd80
 800183a:	d206      	bcs.n	800184a <HAL_TIM_PeriodElapsedCallback+0x3e>
 800183c:	4b26      	ldr	r3, [pc, #152]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	3336      	adds	r3, #54	; 0x36
 8001842:	b29a      	uxth	r2, r3
 8001844:	4b24      	ldr	r3, [pc, #144]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001846:	801a      	strh	r2, [r3, #0]
 8001848:	e002      	b.n	8001850 <HAL_TIM_PeriodElapsedCallback+0x44>
 800184a:	4b23      	ldr	r3, [pc, #140]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800184c:	2200      	movs	r2, #0
 800184e:	801a      	strh	r2, [r3, #0]

		}
		if(TIM3==htim->Instance)			//
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a23      	ldr	r2, [pc, #140]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d137      	bne.n	80018ca <HAL_TIM_PeriodElapsedCallback+0xbe>
	{
		    time_proc++;
 800185a:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	3301      	adds	r3, #1
 8001860:	b29a      	uxth	r2, r3
 8001862:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001864:	801a      	strh	r2, [r3, #0]
			play_hold=play_sample[sample_point<<1]; // this is 2
 8001866:	4b21      	ldr	r3, [pc, #132]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	b29b      	uxth	r3, r3
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4a20      	ldr	r2, [pc, #128]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001870:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001874:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001876:	801a      	strh	r2, [r3, #0]
			play_hold2=play_sample[(sample_point<<1)+1];
 8001878:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	b29b      	uxth	r3, r3
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	3301      	adds	r3, #1
 8001882:	4a1b      	ldr	r2, [pc, #108]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001884:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001888:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800188a:	801a      	strh	r2, [r3, #0]
			if (sample_point>1022)    {bank_write=2;sample_point=0;} else sample_point++;
 800188c:	4b17      	ldr	r3, [pc, #92]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	b29b      	uxth	r3, r3
 8001892:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8001896:	4293      	cmp	r3, r2
 8001898:	d906      	bls.n	80018a8 <HAL_TIM_PeriodElapsedCallback+0x9c>
 800189a:	4b18      	ldr	r3, [pc, #96]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800189c:	2202      	movs	r2, #2
 800189e:	801a      	strh	r2, [r3, #0]
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	801a      	strh	r2, [r3, #0]
 80018a6:	e006      	b.n	80018b6 <HAL_TIM_PeriodElapsedCallback+0xaa>
 80018a8:	4b10      	ldr	r3, [pc, #64]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	3301      	adds	r3, #1
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80018b4:	801a      	strh	r2, [r3, #0]

	TIM3->CCR1=play_hold ;  // keep readin sample storage
 80018b6:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80018be:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=play_hold2 ;   // load up counter on ch2
 80018c0:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80018c8:	639a      	str	r2, [r3, #56]	; 0x38
	}
	}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40014400 	.word	0x40014400
 80018d8:	2000f2a8 	.word	0x2000f2a8
 80018dc:	2000e2a8 	.word	0x2000e2a8
 80018e0:	20010520 	.word	0x20010520
 80018e4:	40000400 	.word	0x40000400
 80018e8:	2000cc74 	.word	0x2000cc74
 80018ec:	2000a6e4 	.word	0x2000a6e4
 80018f0:	200096e0 	.word	0x200096e0
 80018f4:	2000a6e6 	.word	0x2000a6e6
 80018f8:	2000a6e8 	.word	0x2000a6e8
 80018fc:	20008e16 	.word	0x20008e16

08001900 <analoginputloopb>:



    void analoginputloopb(void){  //works ,getting obsolete
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0


	    menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 8001904:	4b32      	ldr	r3, [pc, #200]	; (80019d0 <analoginputloopb+0xd0>)
 8001906:	889b      	ldrh	r3, [r3, #4]
 8001908:	091b      	lsrs	r3, r3, #4
 800190a:	b29b      	uxth	r3, r3
 800190c:	b2da      	uxtb	r2, r3
 800190e:	4b31      	ldr	r3, [pc, #196]	; (80019d4 <analoginputloopb+0xd4>)
 8001910:	701a      	strb	r2, [r3, #0]
		//    menuSelectX=cursor_menu[2]&15;  // Y select inside page
        		    cursor_menu[1]=0;
 8001912:	4b2f      	ldr	r3, [pc, #188]	; (80019d0 <analoginputloopb+0xd0>)
 8001914:	2200      	movs	r2, #0
 8001916:	805a      	strh	r2, [r3, #2]
   		    cursor_menu[2]=enc2_dir;
 8001918:	4b2f      	ldr	r3, [pc, #188]	; (80019d8 <analoginputloopb+0xd8>)
 800191a:	881a      	ldrh	r2, [r3, #0]
 800191c:	4b2c      	ldr	r3, [pc, #176]	; (80019d0 <analoginputloopb+0xd0>)
 800191e:	809a      	strh	r2, [r3, #4]

	    enc_temp=(((TIM2->CNT)+32767)>>1)&65535		;  // read counter tim2 ,divider ok
 8001920:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800192a:	337f      	adds	r3, #127	; 0x7f
 800192c:	085b      	lsrs	r3, r3, #1
 800192e:	b29a      	uxth	r2, r3
 8001930:	4b2a      	ldr	r3, [pc, #168]	; (80019dc <analoginputloopb+0xdc>)
 8001932:	801a      	strh	r2, [r3, #0]
	 //   enc2_store[enc2_store_count]=(((TIM4->CNT)+32767)>>1)&65535;  // read counter tim4, noisy
	    enc2_temp=(((TIM4->CNT)+32767)>>1)&65535;
 8001934:	4b2a      	ldr	r3, [pc, #168]	; (80019e0 <analoginputloopb+0xe0>)
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001938:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800193c:	337f      	adds	r3, #127	; 0x7f
 800193e:	085b      	lsrs	r3, r3, #1
 8001940:	b29a      	uxth	r2, r3
 8001942:	4b28      	ldr	r3, [pc, #160]	; (80019e4 <analoginputloopb+0xe4>)
 8001944:	801a      	strh	r2, [r3, #0]
	    enc2_store3=enc2_store2>>2;
	    enc2_temp=enc2_store3;
*/


	    if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-1;   //menu itme value change
 8001946:	4b25      	ldr	r3, [pc, #148]	; (80019dc <analoginputloopb+0xdc>)
 8001948:	881a      	ldrh	r2, [r3, #0]
 800194a:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <analoginputloopb+0xe8>)
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d908      	bls.n	8001964 <analoginputloopb+0x64>
 8001952:	4b26      	ldr	r3, [pc, #152]	; (80019ec <analoginputloopb+0xec>)
 8001954:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001958:	b29b      	uxth	r3, r3
 800195a:	3b01      	subs	r3, #1
 800195c:	b29b      	uxth	r3, r3
 800195e:	b21a      	sxth	r2, r3
 8001960:	4b22      	ldr	r3, [pc, #136]	; (80019ec <analoginputloopb+0xec>)
 8001962:	801a      	strh	r2, [r3, #0]
	    if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+1;
 8001964:	4b1d      	ldr	r3, [pc, #116]	; (80019dc <analoginputloopb+0xdc>)
 8001966:	881a      	ldrh	r2, [r3, #0]
 8001968:	4b1f      	ldr	r3, [pc, #124]	; (80019e8 <analoginputloopb+0xe8>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	429a      	cmp	r2, r3
 800196e:	d208      	bcs.n	8001982 <analoginputloopb+0x82>
 8001970:	4b1e      	ldr	r3, [pc, #120]	; (80019ec <analoginputloopb+0xec>)
 8001972:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001976:	b29b      	uxth	r3, r3
 8001978:	3301      	adds	r3, #1
 800197a:	b29b      	uxth	r3, r3
 800197c:	b21a      	sxth	r2, r3
 800197e:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <analoginputloopb+0xec>)
 8001980:	801a      	strh	r2, [r3, #0]


   //   if (enc2_temp>511) enc2_temp=511;  //mem overflow somewhere

      enc2_dir=65535-enc2_temp; //temp to try source data
 8001982:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <analoginputloopb+0xe4>)
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	43db      	mvns	r3, r3
 8001988:	b29a      	uxth	r2, r3
 800198a:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <analoginputloopb+0xd8>)
 800198c:	801a      	strh	r2, [r3, #0]


      if (enc_dir>32760) enc_dir=0;
 800198e:	4b17      	ldr	r3, [pc, #92]	; (80019ec <analoginputloopb+0xec>)
 8001990:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001994:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8001998:	4293      	cmp	r3, r2
 800199a:	dd02      	ble.n	80019a2 <analoginputloopb+0xa2>
 800199c:	4b13      	ldr	r3, [pc, #76]	; (80019ec <analoginputloopb+0xec>)
 800199e:	2200      	movs	r2, #0
 80019a0:	801a      	strh	r2, [r3, #0]
			    if (enc_dir<0) enc_dir=16383;
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <analoginputloopb+0xec>)
 80019a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	da03      	bge.n	80019b4 <analoginputloopb+0xb4>
 80019ac:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <analoginputloopb+0xec>)
 80019ae:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80019b2:	801a      	strh	r2, [r3, #0]

			    enc_tempB=enc_temp;
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <analoginputloopb+0xdc>)
 80019b6:	881a      	ldrh	r2, [r3, #0]
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <analoginputloopb+0xe8>)
 80019ba:	801a      	strh	r2, [r3, #0]

					    enc2_tempB=enc2_temp; // to effective as counter not getting reset
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <analoginputloopb+0xe4>)
 80019be:	881a      	ldrh	r2, [r3, #0]
 80019c0:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <analoginputloopb+0xf0>)
 80019c2:	801a      	strh	r2, [r3, #0]


 //   potValues[counterVarB]=(potSource[counterVarB]>>4) & 15 ;  // reduce values for now ,use original for others , slow count


    }
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	2000bf28 	.word	0x2000bf28
 80019d4:	200096d4 	.word	0x200096d4
 80019d8:	2000bf14 	.word	0x2000bf14
 80019dc:	2000bf0c 	.word	0x2000bf0c
 80019e0:	40000800 	.word	0x40000800
 80019e4:	2000bf10 	.word	0x2000bf10
 80019e8:	2000bf0e 	.word	0x2000bf0e
 80019ec:	2000bf16 	.word	0x2000bf16
 80019f0:	2000bf12 	.word	0x2000bf12

080019f4 <note_reset>:


void note_reset (void){          // reset deafult values before modulation , in case it gets left  with no modulator
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0

	note[0].velocity=255;note[1].velocity=255;note[2].velocity=255;note[3].velocity=255;note[4].velocity=255;note[5].velocity=255;note[6].velocity=255
 80019f8:	4b2f      	ldr	r3, [pc, #188]	; (8001ab8 <note_reset+0xc4>)
 80019fa:	22ff      	movs	r2, #255	; 0xff
 80019fc:	71da      	strb	r2, [r3, #7]
 80019fe:	4b2e      	ldr	r3, [pc, #184]	; (8001ab8 <note_reset+0xc4>)
 8001a00:	22ff      	movs	r2, #255	; 0xff
 8001a02:	75da      	strb	r2, [r3, #23]
 8001a04:	4b2c      	ldr	r3, [pc, #176]	; (8001ab8 <note_reset+0xc4>)
 8001a06:	22ff      	movs	r2, #255	; 0xff
 8001a08:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 8001a0c:	4b2a      	ldr	r3, [pc, #168]	; (8001ab8 <note_reset+0xc4>)
 8001a0e:	22ff      	movs	r2, #255	; 0xff
 8001a10:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8001a14:	4b28      	ldr	r3, [pc, #160]	; (8001ab8 <note_reset+0xc4>)
 8001a16:	22ff      	movs	r2, #255	; 0xff
 8001a18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8001a1c:	4b26      	ldr	r3, [pc, #152]	; (8001ab8 <note_reset+0xc4>)
 8001a1e:	22ff      	movs	r2, #255	; 0xff
 8001a20:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8001a24:	4b24      	ldr	r3, [pc, #144]	; (8001ab8 <note_reset+0xc4>)
 8001a26:	22ff      	movs	r2, #255	; 0xff
 8001a28:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
																;note[0].detune=0;note[1].detune=0;note[2].detune=0;note[3].detune=0;note[4].detune=0;
 8001a2c:	4b22      	ldr	r3, [pc, #136]	; (8001ab8 <note_reset+0xc4>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	721a      	strb	r2, [r3, #8]
 8001a32:	4b21      	ldr	r3, [pc, #132]	; (8001ab8 <note_reset+0xc4>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	761a      	strb	r2, [r3, #24]
 8001a38:	4b1f      	ldr	r3, [pc, #124]	; (8001ab8 <note_reset+0xc4>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001a40:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <note_reset+0xc4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001a48:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <note_reset+0xc4>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	note[5].detune=0;note[6].detune=0;
 8001a50:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <note_reset+0xc4>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001a58:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <note_reset+0xc4>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	filter[0].cutoff_1=0;filter[1].cutoff_1=0;filter[2].cutoff_1=0;filter[4].cutoff_1=0;
 8001a60:	4b16      	ldr	r3, [pc, #88]	; (8001abc <note_reset+0xc8>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <note_reset+0xc8>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	721a      	strb	r2, [r3, #8]
 8001a6c:	4b13      	ldr	r3, [pc, #76]	; (8001abc <note_reset+0xc8>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	741a      	strb	r2, [r3, #16]
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <note_reset+0xc8>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2020 	strb.w	r2, [r3, #32]
	filter[0].resonance=0;filter[1].resonance=0;filter[2].resonance=0;filter[3].resonance=0;
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <note_reset+0xc8>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	709a      	strb	r2, [r3, #2]
 8001a80:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <note_reset+0xc8>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	729a      	strb	r2, [r3, #10]
 8001a86:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <note_reset+0xc8>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	749a      	strb	r2, [r3, #18]
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <note_reset+0xc8>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	769a      	strb	r2, [r3, #26]
	note[0].position=1;note[1].position=1;note[2].position=1;note[3].position=1;
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <note_reset+0xc4>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	711a      	strb	r2, [r3, #4]
 8001a98:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <note_reset+0xc4>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	751a      	strb	r2, [r3, #20]
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <note_reset+0xc4>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001aa6:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <note_reset+0xc4>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	20008e1c 	.word	0x20008e1c
 8001abc:	20008ebc 	.word	0x20008ebc

08001ac0 <main_initial>:

void main_initial(void){
 8001ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ac2:	b0eb      	sub	sp, #428	; 0x1ac
 8001ac4:	af04      	add	r7, sp, #16
	const volatile uint8_t *userConfig=(const volatile uint8_t *)0x0800D2F0;
 8001ac6:	4bbb      	ldr	r3, [pc, #748]	; (8001db4 <main_initial+0x2f4>)
 8001ac8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184



	HAL_DMA_Init(&hdma_spi2_tx);
 8001acc:	48ba      	ldr	r0, [pc, #744]	; (8001db8 <main_initial+0x2f8>)
 8001ace:	f006 fd6f 	bl	80085b0 <HAL_DMA_Init>
	HAL_DMA_Init(&hdma_spi1_rx);
 8001ad2:	48ba      	ldr	r0, [pc, #744]	; (8001dbc <main_initial+0x2fc>)
 8001ad4:	f006 fd6c 	bl	80085b0 <HAL_DMA_Init>
	HAL_DMA_Init(&hdma_spi1_tx);
 8001ad8:	48b9      	ldr	r0, [pc, #740]	; (8001dc0 <main_initial+0x300>)
 8001ada:	f006 fd69 	bl	80085b0 <HAL_DMA_Init>


	//LL_SPI_Enable(SPI2);

	  HAL_SPI_Init(&hspi2); // write to register hspi2
 8001ade:	48b9      	ldr	r0, [pc, #740]	; (8001dc4 <main_initial+0x304>)
 8001ae0:	f008 ff14 	bl	800a90c <HAL_SPI_Init>
	  HAL_SPI_Init(&hspi1); // write to register hspi2
 8001ae4:	48b8      	ldr	r0, [pc, #736]	; (8001dc8 <main_initial+0x308>)
 8001ae6:	f008 ff11 	bl	800a90c <HAL_SPI_Init>
	  // lcd_init(); // keep this late or have issues
	//HAL_TIM_Base_Start_IT(&htim1);  // This needs to work for irq   ,disbling tim1 made loop a lot faster
	//TIM1->CCER=0;
	HAL_TIM_Base_Start_IT(&htim3);  // This needs to work for irq
 8001aea:	48b8      	ldr	r0, [pc, #736]	; (8001dcc <main_initial+0x30c>)
 8001aec:	f009 ff60 	bl	800b9b0 <HAL_TIM_Base_Start_IT>
	TIM3->CCER=0;
 8001af0:	4bb7      	ldr	r3, [pc, #732]	; (8001dd0 <main_initial+0x310>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	621a      	str	r2, [r3, #32]
	HAL_TIM_Base_Start(&htim2);
 8001af6:	48b7      	ldr	r0, [pc, #732]	; (8001dd4 <main_initial+0x314>)
 8001af8:	f009 ff00 	bl	800b8fc <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 8001afc:	48b6      	ldr	r0, [pc, #728]	; (8001dd8 <main_initial+0x318>)
 8001afe:	f009 fefd 	bl	800b8fc <HAL_TIM_Base_Start>
	//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  // they both work fine together
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001b02:	2100      	movs	r1, #0
 8001b04:	48b1      	ldr	r0, [pc, #708]	; (8001dcc <main_initial+0x30c>)
 8001b06:	f00a f897 	bl	800bc38 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8001b0a:	2104      	movs	r1, #4
 8001b0c:	48af      	ldr	r0, [pc, #700]	; (8001dcc <main_initial+0x30c>)
 8001b0e:	f00a f893 	bl	800bc38 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,pData, 63);
	TIM2->CNT=32000;
 8001b12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b16:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001b1a:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_ADC_Start(&hadc1);
 8001b1c:	48af      	ldr	r0, [pc, #700]	; (8001ddc <main_initial+0x31c>)
 8001b1e:	f005 fc09 	bl	8007334 <HAL_ADC_Start>
	HAL_ADC_Start_DMA(&hadc1, adc_source, 3072); //dma start ,needs this and adc start ,set sampling time to very long or it will fail
 8001b22:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001b26:	49ae      	ldr	r1, [pc, #696]	; (8001de0 <main_initial+0x320>)
 8001b28:	48ac      	ldr	r0, [pc, #688]	; (8001ddc <main_initial+0x31c>)
 8001b2a:	f005 fd43 	bl	80075b4 <HAL_ADC_Start_DMA>



	HAL_I2C_MspInit(&hi2c2);
 8001b2e:	48ad      	ldr	r0, [pc, #692]	; (8001de4 <main_initial+0x324>)
 8001b30:	f004 ffbe 	bl	8006ab0 <HAL_I2C_MspInit>
	uint8_t	send_spi1[260]={0x02,0,1,0,128,129,130,131,132,133,134,135,136,137,138,250,0,0} ; //page program ,24bit(address)  +1-255 byte data  (page)
 8001b34:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001b38:	f5a3 7694 	sub.w	r6, r3, #296	; 0x128
 8001b3c:	4baa      	ldr	r3, [pc, #680]	; (8001de8 <main_initial+0x328>)
 8001b3e:	4634      	mov	r4, r6
 8001b40:	461d      	mov	r5, r3
 8001b42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b46:	682b      	ldr	r3, [r5, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	8022      	strh	r2, [r4, #0]
 8001b4c:	3402      	adds	r4, #2
 8001b4e:	0c1b      	lsrs	r3, r3, #16
 8001b50:	7023      	strb	r3, [r4, #0]
 8001b52:	f106 0313 	add.w	r3, r6, #19
 8001b56:	22f1      	movs	r2, #241	; 0xf1
 8001b58:	2100      	movs	r1, #0
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f00b fc70 	bl	800d440 <memset>


	HAL_Delay(5);
 8001b60:	2005      	movs	r0, #5
 8001b62:	f005 fb7f 	bl	8007264 <HAL_Delay>



		//uint16_t sample_size=sizeof(RAM);

		uint16_t sample_size=32678;
 8001b66:	f647 73a6 	movw	r3, #32678	; 0x7fa6
 8001b6a:	f8a7 3182 	strh.w	r3, [r7, #386]	; 0x182



		uint8_t* ram_ptr=&RAM[0];
 8001b6e:	4b9f      	ldr	r3, [pc, #636]	; (8001dec <main_initial+0x32c>)
 8001b70:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

				sample_save(2,ram_ptr, sample_size);  // write sample no 255
 8001b74:	f8b7 3182 	ldrh.w	r3, [r7, #386]	; 0x182
 8001b78:	461a      	mov	r2, r3
 8001b7a:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 8001b7e:	2002      	movs	r0, #2
 8001b80:	f003 fa82 	bl	8005088 <sample_save>
				send_spi1[0]=sampler_ram_clear_test(2);  // test written ok
 8001b84:	2002      	movs	r0, #2
 8001b86:	f003 fa27 	bl	8004fd8 <sampler_ram_clear_test>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001b92:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001b96:	701a      	strb	r2, [r3, #0]



	uint8_t potSource2[64]={0};    // { [0 ... 112] = 64 };
 8001b98:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001b9c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	223c      	movs	r2, #60	; 0x3c
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4618      	mov	r0, r3
 8001bac:	f00b fc48 	bl	800d440 <memset>
	uint16_t mem_count2=0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f8a7 317a 	strh.w	r3, [r7, #378]	; 0x17a
	uint16_t mem_counter=0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f8a7 3196 	strh.w	r3, [r7, #406]	; 0x196

//flash_block_erase(0);



	flash_read_block2[0]=0x03; //read page 1
 8001bbc:	4b8c      	ldr	r3, [pc, #560]	; (8001df0 <main_initial+0x330>)
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	701a      	strb	r2, [r3, #0]
		flash_read_block2[1]=255;			// last patch for now
 8001bc2:	4b8b      	ldr	r3, [pc, #556]	; (8001df0 <main_initial+0x330>)
 8001bc4:	22ff      	movs	r2, #255	; 0xff
 8001bc6:	705a      	strb	r2, [r3, #1]
		flash_read_block2[2]=128;		// 1->127  = 32kbyte,but need 512 per step , only counts to 16383 ,    64*512
 8001bc8:	4b89      	ldr	r3, [pc, #548]	; (8001df0 <main_initial+0x330>)
 8001bca:	2280      	movs	r2, #128	; 0x80
 8001bcc:	709a      	strb	r2, [r3, #2]
		flash_read_block2[3]=0;
 8001bce:	4b88      	ldr	r3, [pc, #544]	; (8001df0 <main_initial+0x330>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	70da      	strb	r2, [r3, #3]

		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);HAL_SPI_TransmitReceive_DMA(&hspi1,flash_read_block2,flash_read_block2,1028);HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	2110      	movs	r1, #16
 8001bd8:	4886      	ldr	r0, [pc, #536]	; (8001df4 <main_initial+0x334>)
 8001bda:	f007 fa4d 	bl	8009078 <HAL_GPIO_WritePin>
 8001bde:	f240 4304 	movw	r3, #1028	; 0x404
 8001be2:	4a83      	ldr	r2, [pc, #524]	; (8001df0 <main_initial+0x330>)
 8001be4:	4982      	ldr	r1, [pc, #520]	; (8001df0 <main_initial+0x330>)
 8001be6:	4878      	ldr	r0, [pc, #480]	; (8001dc8 <main_initial+0x308>)
 8001be8:	f009 faae 	bl	800b148 <HAL_SPI_TransmitReceive_DMA>
 8001bec:	2200      	movs	r2, #0
 8001bee:	2110      	movs	r1, #16
 8001bf0:	4880      	ldr	r0, [pc, #512]	; (8001df4 <main_initial+0x334>)
 8001bf2:	f007 fa41 	bl	8009078 <HAL_GPIO_WritePin>



	HAL_I2C_Mem_Read (&hi2c2,160,64, 2 , potSource, EPROM_limit,1000); //ok
 8001bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bfa:	9302      	str	r3, [sp, #8]
 8001bfc:	f240 2366 	movw	r3, #614	; 0x266
 8001c00:	9301      	str	r3, [sp, #4]
 8001c02:	4b7d      	ldr	r3, [pc, #500]	; (8001df8 <main_initial+0x338>)
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	2302      	movs	r3, #2
 8001c08:	2240      	movs	r2, #64	; 0x40
 8001c0a:	21a0      	movs	r1, #160	; 0xa0
 8001c0c:	4875      	ldr	r0, [pc, #468]	; (8001de4 <main_initial+0x324>)
 8001c0e:	f007 fca3 	bl	8009558 <HAL_I2C_Mem_Read>


		memcpy(&seq,potSource,46 );  // load from potSource  ,, causes problems with memory ,NEEDS TO BE CONTINUOS OR  WILL  GET CORRUPT
 8001c12:	222e      	movs	r2, #46	; 0x2e
 8001c14:	4978      	ldr	r1, [pc, #480]	; (8001df8 <main_initial+0x338>)
 8001c16:	4879      	ldr	r0, [pc, #484]	; (8001dfc <main_initial+0x33c>)
 8001c18:	f00b fc04 	bl	800d424 <memcpy>
	    memcpy(&note,potSource+156,160 );   // this works but keep checking for fragmentation
 8001c1c:	4b78      	ldr	r3, [pc, #480]	; (8001e00 <main_initial+0x340>)
 8001c1e:	22a0      	movs	r2, #160	; 0xa0
 8001c20:	4619      	mov	r1, r3
 8001c22:	4878      	ldr	r0, [pc, #480]	; (8001e04 <main_initial+0x344>)
 8001c24:	f00b fbfe 	bl	800d424 <memcpy>
	    memcpy(&sampler,potSource+476,36 );
 8001c28:	4b77      	ldr	r3, [pc, #476]	; (8001e08 <main_initial+0x348>)
 8001c2a:	2224      	movs	r2, #36	; 0x24
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4877      	ldr	r0, [pc, #476]	; (8001e0c <main_initial+0x34c>)
 8001c30:	f00b fbf8 	bl	800d424 <memcpy>
	    memcpy(&sampler+36,potSource+572,20 );
 8001c34:	4b76      	ldr	r3, [pc, #472]	; (8001e10 <main_initial+0x350>)
 8001c36:	4977      	ldr	r1, [pc, #476]	; (8001e14 <main_initial+0x354>)
 8001c38:	2214      	movs	r2, #20
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f00b fbf2 	bl	800d424 <memcpy>



	    for(mem_counter=0;mem_counter<10;mem_counter++){
 8001c40:	2300      	movs	r3, #0
 8001c42:	f8a7 3196 	strh.w	r3, [r7, #406]	; 0x196
 8001c46:	e07f      	b.n	8001d48 <main_initial+0x288>

			memcpy(&LFO[mem_counter],potSource+46+(mem_counter*6),6 );  // + 60 ,ok here
 8001c48:	f8b7 2196 	ldrh.w	r2, [r7, #406]	; 0x196
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	4413      	add	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4a70      	ldr	r2, [pc, #448]	; (8001e18 <main_initial+0x358>)
 8001c56:	1898      	adds	r0, r3, r2
 8001c58:	f8b7 2196 	ldrh.w	r2, [r7, #406]	; 0x196
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4413      	add	r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	332e      	adds	r3, #46	; 0x2e
 8001c66:	4a64      	ldr	r2, [pc, #400]	; (8001df8 <main_initial+0x338>)
 8001c68:	4413      	add	r3, r2
 8001c6a:	2206      	movs	r2, #6
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f00b fbd9 	bl	800d424 <memcpy>
			memcpy(&ADSR[mem_counter],potSource+106+(mem_counter*5),5 );  // +50  ,
 8001c72:	f8b7 2196 	ldrh.w	r2, [r7, #406]	; 0x196
 8001c76:	4613      	mov	r3, r2
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	1a9b      	subs	r3, r3, r2
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	4a67      	ldr	r2, [pc, #412]	; (8001e1c <main_initial+0x35c>)
 8001c80:	1898      	adds	r0, r3, r2
 8001c82:	f8b7 2196 	ldrh.w	r2, [r7, #406]	; 0x196
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	336a      	adds	r3, #106	; 0x6a
 8001c8e:	4a5a      	ldr	r2, [pc, #360]	; (8001df8 <main_initial+0x338>)
 8001c90:	4413      	add	r3, r2
 8001c92:	2205      	movs	r2, #5
 8001c94:	4619      	mov	r1, r3
 8001c96:	f00b fbc5 	bl	800d424 <memcpy>
			memcpy(&patch[mem_counter],potSource+316+(mem_counter*6),6 );
 8001c9a:	f8b7 3196 	ldrh.w	r3, [r7, #406]	; 0x196
 8001c9e:	222c      	movs	r2, #44	; 0x2c
 8001ca0:	fb02 f303 	mul.w	r3, r2, r3
 8001ca4:	4a5e      	ldr	r2, [pc, #376]	; (8001e20 <main_initial+0x360>)
 8001ca6:	1898      	adds	r0, r3, r2
 8001ca8:	f8b7 2196 	ldrh.w	r2, [r7, #406]	; 0x196
 8001cac:	4613      	mov	r3, r2
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	4413      	add	r3, r2
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001cb8:	4a4f      	ldr	r2, [pc, #316]	; (8001df8 <main_initial+0x338>)
 8001cba:	4413      	add	r3, r2
 8001cbc:	2206      	movs	r2, #6
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f00b fbb0 	bl	800d424 <memcpy>

			memcpy(&LFO_slave1[mem_counter],potSource+376+(mem_counter*6),6 );  // + 60 ,ok here
 8001cc4:	f8b7 2196 	ldrh.w	r2, [r7, #406]	; 0x196
 8001cc8:	4613      	mov	r3, r2
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4413      	add	r3, r2
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	4a54      	ldr	r2, [pc, #336]	; (8001e24 <main_initial+0x364>)
 8001cd2:	1898      	adds	r0, r3, r2
 8001cd4:	f8b7 2196 	ldrh.w	r2, [r7, #406]	; 0x196
 8001cd8:	4613      	mov	r3, r2
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4413      	add	r3, r2
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001ce4:	4a44      	ldr	r2, [pc, #272]	; (8001df8 <main_initial+0x338>)
 8001ce6:	4413      	add	r3, r2
 8001ce8:	2206      	movs	r2, #6
 8001cea:	4619      	mov	r1, r3
 8001cec:	f00b fb9a 	bl	800d424 <memcpy>
			memcpy(&LFO_square[mem_counter],potSource+436+(mem_counter*4),4 );
 8001cf0:	f8b7 2196 	ldrh.w	r2, [r7, #406]	; 0x196
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4a4a      	ldr	r2, [pc, #296]	; (8001e28 <main_initial+0x368>)
 8001cfe:	4413      	add	r3, r2
 8001d00:	f8b7 2196 	ldrh.w	r2, [r7, #406]	; 0x196
 8001d04:	0092      	lsls	r2, r2, #2
 8001d06:	f502 72da 	add.w	r2, r2, #436	; 0x1b4
 8001d0a:	493b      	ldr	r1, [pc, #236]	; (8001df8 <main_initial+0x338>)
 8001d0c:	440a      	add	r2, r1
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	601a      	str	r2, [r3, #0]
			memcpy(&patch[mem_counter+10],potSource+512+(mem_counter*6),6 );
 8001d12:	f8b7 3196 	ldrh.w	r3, [r7, #406]	; 0x196
 8001d16:	330a      	adds	r3, #10
 8001d18:	222c      	movs	r2, #44	; 0x2c
 8001d1a:	fb02 f303 	mul.w	r3, r2, r3
 8001d1e:	4a40      	ldr	r2, [pc, #256]	; (8001e20 <main_initial+0x360>)
 8001d20:	1898      	adds	r0, r3, r2
 8001d22:	f8b7 2196 	ldrh.w	r2, [r7, #406]	; 0x196
 8001d26:	4613      	mov	r3, r2
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	4413      	add	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d32:	4a31      	ldr	r2, [pc, #196]	; (8001df8 <main_initial+0x338>)
 8001d34:	4413      	add	r3, r2
 8001d36:	2206      	movs	r2, #6
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f00b fb73 	bl	800d424 <memcpy>
	    for(mem_counter=0;mem_counter<10;mem_counter++){
 8001d3e:	f8b7 3196 	ldrh.w	r3, [r7, #406]	; 0x196
 8001d42:	3301      	adds	r3, #1
 8001d44:	f8a7 3196 	strh.w	r3, [r7, #406]	; 0x196
 8001d48:	f8b7 3196 	ldrh.w	r3, [r7, #406]	; 0x196
 8001d4c:	2b09      	cmp	r3, #9
 8001d4e:	f67f af7b 	bls.w	8001c48 <main_initial+0x188>


	    }

	    uint32_t test_eeprom=0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	    for(i=0;i<16;i++){
 8001d58:	4b34      	ldr	r3, [pc, #208]	; (8001e2c <main_initial+0x36c>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	801a      	strh	r2, [r3, #0]
 8001d5e:	e01d      	b.n	8001d9c <main_initial+0x2dc>

	    test_eeprom=seq.notes1[i]+test_eeprom;
 8001d60:	4b32      	ldr	r3, [pc, #200]	; (8001e2c <main_initial+0x36c>)
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	4b25      	ldr	r3, [pc, #148]	; (8001dfc <main_initial+0x33c>)
 8001d68:	4413      	add	r3, r2
 8001d6a:	789b      	ldrb	r3, [r3, #2]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001d72:	4413      	add	r3, r2
 8001d74:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	    test_eeprom=seq.notes2[i]+test_eeprom;
 8001d78:	4b2c      	ldr	r3, [pc, #176]	; (8001e2c <main_initial+0x36c>)
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <main_initial+0x33c>)
 8001d80:	4413      	add	r3, r2
 8001d82:	7cdb      	ldrb	r3, [r3, #19]
 8001d84:	461a      	mov	r2, r3
 8001d86:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	    for(i=0;i<16;i++){
 8001d90:	4b26      	ldr	r3, [pc, #152]	; (8001e2c <main_initial+0x36c>)
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	3301      	adds	r3, #1
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	4b24      	ldr	r3, [pc, #144]	; (8001e2c <main_initial+0x36c>)
 8001d9a:	801a      	strh	r2, [r3, #0]
 8001d9c:	4b23      	ldr	r3, [pc, #140]	; (8001e2c <main_initial+0x36c>)
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	2b0f      	cmp	r3, #15
 8001da2:	d9dd      	bls.n	8001d60 <main_initial+0x2a0>
		}
	//   if (test_eeprom==0)  disable_eeprom=1;  // if eeprom didn't load , disable writes  , usually zeros when load fails


	    for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8001da4:	4b21      	ldr	r3, [pc, #132]	; (8001e2c <main_initial+0x36c>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	801a      	strh	r2, [r3, #0]
 8001daa:	e097      	b.n	8001edc <main_initial+0x41c>

		for 	(n=0;n<18;n++){					// this is ok
 8001dac:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <main_initial+0x370>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	801a      	strh	r2, [r3, #0]
 8001db2:	e089      	b.n	8001ec8 <main_initial+0x408>
 8001db4:	0800d2f0 	.word	0x0800d2f0
 8001db8:	20010638 	.word	0x20010638
 8001dbc:	20010578 	.word	0x20010578
 8001dc0:	200105d8 	.word	0x200105d8
 8001dc4:	20010520 	.word	0x20010520
 8001dc8:	200104c8 	.word	0x200104c8
 8001dcc:	200106e0 	.word	0x200106e0
 8001dd0:	40000400 	.word	0x40000400
 8001dd4:	20010698 	.word	0x20010698
 8001dd8:	20010728 	.word	0x20010728
 8001ddc:	200103cc 	.word	0x200103cc
 8001de0:	2000a6f0 	.word	0x2000a6f0
 8001de4:	20010474 	.word	0x20010474
 8001de8:	0800dac8 	.word	0x0800dac8
 8001dec:	200001b8 	.word	0x200001b8
 8001df0:	2000f738 	.word	0x2000f738
 8001df4:	40020000 	.word	0x40020000
 8001df8:	2000946c 	.word	0x2000946c
 8001dfc:	2000d0bc 	.word	0x2000d0bc
 8001e00:	20009508 	.word	0x20009508
 8001e04:	20008e1c 	.word	0x20008e1c
 8001e08:	20009648 	.word	0x20009648
 8001e0c:	20008edc 	.word	0x20008edc
 8001e10:	2000a28c 	.word	0x2000a28c
 8001e14:	200096a8 	.word	0x200096a8
 8001e18:	2000cc78 	.word	0x2000cc78
 8001e1c:	2000d024 	.word	0x2000d024
 8001e20:	2000d0ec 	.word	0x2000d0ec
 8001e24:	2000cf20 	.word	0x2000cf20
 8001e28:	2000cf5c 	.word	0x2000cf5c
 8001e2c:	200096de 	.word	0x200096de
 8001e30:	200096d8 	.word	0x200096d8

			if (n==0) gfx_ram[(i*18)+n] = 128+(i&31);   // half page
 8001e34:	4baa      	ldr	r3, [pc, #680]	; (80020e0 <main_initial+0x620>)
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d114      	bne.n	8001e66 <main_initial+0x3a6>
 8001e3c:	4ba9      	ldr	r3, [pc, #676]	; (80020e4 <main_initial+0x624>)
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	f003 031f 	and.w	r3, r3, #31
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	4ba6      	ldr	r3, [pc, #664]	; (80020e4 <main_initial+0x624>)
 8001e4a:	881b      	ldrh	r3, [r3, #0]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	460b      	mov	r3, r1
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	440b      	add	r3, r1
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	4619      	mov	r1, r3
 8001e58:	4ba1      	ldr	r3, [pc, #644]	; (80020e0 <main_initial+0x620>)
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	440b      	add	r3, r1
 8001e5e:	3a80      	subs	r2, #128	; 0x80
 8001e60:	b2d1      	uxtb	r1, r2
 8001e62:	4aa1      	ldr	r2, [pc, #644]	; (80020e8 <main_initial+0x628>)
 8001e64:	54d1      	strb	r1, [r2, r3]
			if (n==1) gfx_ram[(i*18)+n] = 128+((i>>5)*8);    // change x to 8
 8001e66:	4b9e      	ldr	r3, [pc, #632]	; (80020e0 <main_initial+0x620>)
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d114      	bne.n	8001e98 <main_initial+0x3d8>
 8001e6e:	4b9d      	ldr	r3, [pc, #628]	; (80020e4 <main_initial+0x624>)
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	095b      	lsrs	r3, r3, #5
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	3310      	adds	r3, #16
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	4b9a      	ldr	r3, [pc, #616]	; (80020e4 <main_initial+0x624>)
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	4619      	mov	r1, r3
 8001e80:	460b      	mov	r3, r1
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	440b      	add	r3, r1
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4b95      	ldr	r3, [pc, #596]	; (80020e0 <main_initial+0x620>)
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	440b      	add	r3, r1
 8001e90:	00d2      	lsls	r2, r2, #3
 8001e92:	b2d1      	uxtb	r1, r2
 8001e94:	4a94      	ldr	r2, [pc, #592]	; (80020e8 <main_initial+0x628>)
 8001e96:	54d1      	strb	r1, [r2, r3]
			if (n>1)  gfx_ram[(i*18)+n] = 255;
 8001e98:	4b91      	ldr	r3, [pc, #580]	; (80020e0 <main_initial+0x620>)
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d90d      	bls.n	8001ebc <main_initial+0x3fc>
 8001ea0:	4b90      	ldr	r3, [pc, #576]	; (80020e4 <main_initial+0x624>)
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	4413      	add	r3, r2
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	461a      	mov	r2, r3
 8001eb0:	4b8b      	ldr	r3, [pc, #556]	; (80020e0 <main_initial+0x620>)
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	4a8c      	ldr	r2, [pc, #560]	; (80020e8 <main_initial+0x628>)
 8001eb8:	21ff      	movs	r1, #255	; 0xff
 8001eba:	54d1      	strb	r1, [r2, r3]
		for 	(n=0;n<18;n++){					// this is ok
 8001ebc:	4b88      	ldr	r3, [pc, #544]	; (80020e0 <main_initial+0x620>)
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	4b86      	ldr	r3, [pc, #536]	; (80020e0 <main_initial+0x620>)
 8001ec6:	801a      	strh	r2, [r3, #0]
 8001ec8:	4b85      	ldr	r3, [pc, #532]	; (80020e0 <main_initial+0x620>)
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	2b11      	cmp	r3, #17
 8001ece:	d9b1      	bls.n	8001e34 <main_initial+0x374>
	    for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8001ed0:	4b84      	ldr	r3, [pc, #528]	; (80020e4 <main_initial+0x624>)
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	4b82      	ldr	r3, [pc, #520]	; (80020e4 <main_initial+0x624>)
 8001eda:	801a      	strh	r2, [r3, #0]
 8001edc:	4b81      	ldr	r3, [pc, #516]	; (80020e4 <main_initial+0x624>)
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	2b3f      	cmp	r3, #63	; 0x3f
 8001ee2:	f67f af63 	bls.w	8001dac <main_initial+0x2ec>

		}

		}
	seq.pos=0;
 8001ee6:	4b81      	ldr	r3, [pc, #516]	; (80020ec <main_initial+0x62c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
	uint8_t counter;
	for (counter=0;counter<16;counter++){     // notes for sampler
 8001eec:	2300      	movs	r3, #0
 8001eee:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 8001ef2:	e021      	b.n	8001f38 <main_initial+0x478>

	sampler.Snotes1[counter]=seq.notes2[counter]&15;
 8001ef4:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8001ef8:	4a7c      	ldr	r2, [pc, #496]	; (80020ec <main_initial+0x62c>)
 8001efa:	4413      	add	r3, r2
 8001efc:	7cda      	ldrb	r2, [r3, #19]
 8001efe:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8001f02:	f002 020f 	and.w	r2, r2, #15
 8001f06:	b2d1      	uxtb	r1, r2
 8001f08:	4a79      	ldr	r2, [pc, #484]	; (80020f0 <main_initial+0x630>)
 8001f0a:	4413      	add	r3, r2
 8001f0c:	460a      	mov	r2, r1
 8001f0e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	sampler.Snotes2[counter]=(seq.notes2[counter]>>4)&15;
 8001f12:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8001f16:	4a75      	ldr	r2, [pc, #468]	; (80020ec <main_initial+0x62c>)
 8001f18:	4413      	add	r3, r2
 8001f1a:	7cda      	ldrb	r2, [r3, #19]
 8001f1c:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8001f20:	0912      	lsrs	r2, r2, #4
 8001f22:	b2d1      	uxtb	r1, r2
 8001f24:	4a72      	ldr	r2, [pc, #456]	; (80020f0 <main_initial+0x630>)
 8001f26:	4413      	add	r3, r2
 8001f28:	460a      	mov	r2, r1
 8001f2a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	for (counter=0;counter<16;counter++){     // notes for sampler
 8001f2e:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8001f32:	3301      	adds	r3, #1
 8001f34:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 8001f38:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8001f3c:	2b0f      	cmp	r3, #15
 8001f3e:	d9d9      	bls.n	8001ef4 <main_initial+0x434>
	}

	uint16_t lfo_list[24]= {1,2,3,4,8,12,16,24,32,48,64,96,128,156,228,256,512,768,1024,2048,4096,9196,16384,32768};
 8001f40:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001f44:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001f48:	4a6a      	ldr	r2, [pc, #424]	; (80020f4 <main_initial+0x634>)
 8001f4a:	461c      	mov	r4, r3
 8001f4c:	4615      	mov	r5, r2
 8001f4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f56:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001f5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	    for (counter=0;counter<20;counter++){
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 8001f64:	e020      	b.n	8001fa8 <main_initial+0x4e8>
	//	lfo_table[counter]=    (counter*counter*((counter>>5)+1))<<((counter>>2)+1);
	//	lfo_table[counter]=   (lfo_list[counter]*16) <<(counter>>15);
	//	lfo_table[counter]= (((counter>>2)+1)*16)<<(((counter>>2)+1)<<1);
	//lfo_list[counter	lfo_table[counter-1]=(( (counter-1)&3)+1)*counter*counter;
		lfo_table[counter]=lfo_list[counter]*16;
 8001f66:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8001f6a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001f6e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001f72:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001f76:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8001f7a:	0112      	lsls	r2, r2, #4
 8001f7c:	b291      	uxth	r1, r2
 8001f7e:	4a5e      	ldr	r2, [pc, #376]	; (80020f8 <main_initial+0x638>)
 8001f80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]



		if (lfo_table[counter]<17) lfo_table[counter]=16;
 8001f84:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8001f88:	4a5b      	ldr	r2, [pc, #364]	; (80020f8 <main_initial+0x638>)
 8001f8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f8e:	2b10      	cmp	r3, #16
 8001f90:	d805      	bhi.n	8001f9e <main_initial+0x4de>
 8001f92:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8001f96:	4a58      	ldr	r2, [pc, #352]	; (80020f8 <main_initial+0x638>)
 8001f98:	2110      	movs	r1, #16
 8001f9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	    for (counter=0;counter<20;counter++){
 8001f9e:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 8001fa8:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8001fac:	2b13      	cmp	r3, #19
 8001fae:	d9da      	bls.n	8001f66 <main_initial+0x4a6>
	    }



	uint32_t  tempo_hold=1;  // calculate tempo look up
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174


	  	for (i=1;i<256;i++) {     // change for 32khz   1-256 bpm
 8001fb6:	4b4b      	ldr	r3, [pc, #300]	; (80020e4 <main_initial+0x624>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	801a      	strh	r2, [r3, #0]
 8001fbc:	e01a      	b.n	8001ff4 <main_initial+0x534>
	  		tempo_hold=i;
 8001fbe:	4b49      	ldr	r3, [pc, #292]	; (80020e4 <main_initial+0x624>)
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
	  		tempo_hold=(60*seq_sample_rate)/(tempo_hold*16); //
 8001fc6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	4a4b      	ldr	r2, [pc, #300]	; (80020fc <main_initial+0x63c>)
 8001fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd2:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174

	  	tempo_lut[i]=tempo_hold;
 8001fd6:	4b43      	ldr	r3, [pc, #268]	; (80020e4 <main_initial+0x624>)
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001fe0:	b299      	uxth	r1, r3
 8001fe2:	4b47      	ldr	r3, [pc, #284]	; (8002100 <main_initial+0x640>)
 8001fe4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  	for (i=1;i<256;i++) {     // change for 32khz   1-256 bpm
 8001fe8:	4b3e      	ldr	r3, [pc, #248]	; (80020e4 <main_initial+0x624>)
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	3301      	adds	r3, #1
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	4b3c      	ldr	r3, [pc, #240]	; (80020e4 <main_initial+0x624>)
 8001ff2:	801a      	strh	r2, [r3, #0]
 8001ff4:	4b3b      	ldr	r3, [pc, #236]	; (80020e4 <main_initial+0x624>)
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	2bff      	cmp	r3, #255	; 0xff
 8001ffa:	d9e0      	bls.n	8001fbe <main_initial+0x4fe>
	  	}

	//isrMask=571; // def tempo 571=180bpm , 20 ms /isrcount

		noteTiming=24;
 8001ffc:	4b41      	ldr	r3, [pc, #260]	; (8002104 <main_initial+0x644>)
 8001ffe:	2218      	movs	r2, #24
 8002000:	701a      	strb	r2, [r3, #0]
		for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8002002:	4b38      	ldr	r3, [pc, #224]	; (80020e4 <main_initial+0x624>)
 8002004:	2200      	movs	r2, #0
 8002006:	801a      	strh	r2, [r3, #0]
 8002008:	e00b      	b.n	8002022 <main_initial+0x562>
			spell[i]=67;
 800200a:	4b36      	ldr	r3, [pc, #216]	; (80020e4 <main_initial+0x624>)
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	4b3d      	ldr	r3, [pc, #244]	; (8002108 <main_initial+0x648>)
 8002012:	2143      	movs	r1, #67	; 0x43
 8002014:	5499      	strb	r1, [r3, r2]
		for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8002016:	4b33      	ldr	r3, [pc, #204]	; (80020e4 <main_initial+0x624>)
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	3301      	adds	r3, #1
 800201c:	b29a      	uxth	r2, r3
 800201e:	4b31      	ldr	r3, [pc, #196]	; (80020e4 <main_initial+0x624>)
 8002020:	801a      	strh	r2, [r3, #0]
 8002022:	4b30      	ldr	r3, [pc, #192]	; (80020e4 <main_initial+0x624>)
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800202a:	d3ee      	bcc.n	800200a <main_initial+0x54a>

		}

		gfx_clear();
 800202c:	f002 fbb6 	bl	800479c <gfx_clear>
	uint16_t pars_counter;

	for (pars_counter=0;pars_counter<menu_parser_limit;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8002030:	2300      	movs	r3, #0
 8002032:	f8a7 318c 	strh.w	r3, [r7, #396]	; 0x18c
 8002036:	e006      	b.n	8002046 <main_initial+0x586>

			menu_parser();  // run it closer to default_menu size ,times, if default_menu is corrupt gfx breaks pretty bad
 8002038:	f7ff f86a 	bl	8001110 <menu_parser>
	for (pars_counter=0;pars_counter<menu_parser_limit;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 800203c:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 8002040:	3301      	adds	r3, #1
 8002042:	f8a7 318c 	strh.w	r3, [r7, #396]	; 0x18c
 8002046:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 800204a:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800204e:	d3f3      	bcc.n	8002038 <main_initial+0x578>

		}
	for (i=0;i<16384;i++) {     // change for 32khz   1-256 bpm
 8002050:	4b24      	ldr	r3, [pc, #144]	; (80020e4 <main_initial+0x624>)
 8002052:	2200      	movs	r2, #0
 8002054:	801a      	strh	r2, [r3, #0]
 8002056:	e005      	b.n	8002064 <main_initial+0x5a4>
 8002058:	4b22      	ldr	r3, [pc, #136]	; (80020e4 <main_initial+0x624>)
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	3301      	adds	r3, #1
 800205e:	b29a      	uxth	r2, r3
 8002060:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <main_initial+0x624>)
 8002062:	801a      	strh	r2, [r3, #0]
 8002064:	4b1f      	ldr	r3, [pc, #124]	; (80020e4 <main_initial+0x624>)
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800206c:	d3f4      	bcc.n	8002058 <main_initial+0x598>
//	RAM[i]=0;      disable for now
	}
	for (i=0;i<1024;i++) {     // change for 32khz   1-256 bpm
 800206e:	4b1d      	ldr	r3, [pc, #116]	; (80020e4 <main_initial+0x624>)
 8002070:	2200      	movs	r2, #0
 8002072:	801a      	strh	r2, [r3, #0]
 8002074:	e005      	b.n	8002082 <main_initial+0x5c2>
 8002076:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <main_initial+0x624>)
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	3301      	adds	r3, #1
 800207c:	b29a      	uxth	r2, r3
 800207e:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <main_initial+0x624>)
 8002080:	801a      	strh	r2, [r3, #0]
 8002082:	4b18      	ldr	r3, [pc, #96]	; (80020e4 <main_initial+0x624>)
 8002084:	881b      	ldrh	r3, [r3, #0]
 8002086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800208a:	d3f4      	bcc.n	8002076 <main_initial+0x5b6>

	}



		for (pars_counter=0;pars_counter<512;pars_counter++)	  default_menu3[pars_counter>>1]=64;
 800208c:	2300      	movs	r3, #0
 800208e:	f8a7 318c 	strh.w	r3, [r7, #396]	; 0x18c
 8002092:	e00c      	b.n	80020ae <main_initial+0x5ee>
 8002094:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 8002098:	085b      	lsrs	r3, r3, #1
 800209a:	b29b      	uxth	r3, r3
 800209c:	461a      	mov	r2, r3
 800209e:	4b1b      	ldr	r3, [pc, #108]	; (800210c <main_initial+0x64c>)
 80020a0:	2140      	movs	r1, #64	; 0x40
 80020a2:	5499      	strb	r1, [r3, r2]
 80020a4:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 80020a8:	3301      	adds	r3, #1
 80020aa:	f8a7 318c 	strh.w	r3, [r7, #396]	; 0x18c
 80020ae:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 80020b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020b6:	d3ed      	bcc.n	8002094 <main_initial+0x5d4>

		default_menu3_size = strlen(default_menu3);  // grab menu size , this is needed
 80020b8:	4814      	ldr	r0, [pc, #80]	; (800210c <main_initial+0x64c>)
 80020ba:	f7fe f88d 	bl	80001d8 <strlen>
 80020be:	4603      	mov	r3, r0
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	4b13      	ldr	r3, [pc, #76]	; (8002110 <main_initial+0x650>)
 80020c4:	801a      	strh	r2, [r3, #0]
			menu_title_count--;  //count back one
 80020c6:	4b13      	ldr	r3, [pc, #76]	; (8002114 <main_initial+0x654>)
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	4b11      	ldr	r3, [pc, #68]	; (8002114 <main_initial+0x654>)
 80020d0:	801a      	strh	r2, [r3, #0]
			display_clear ();
 80020d2:	f002 fba5 	bl	8004820 <display_clear>
			for (pars_counter=0;pars_counter<menu_title_count;pars_counter++)	default_menu3 [menu_title_lut[pars_counter]&1023]=48;
 80020d6:	2300      	movs	r3, #0
 80020d8:	f8a7 318c 	strh.w	r3, [r7, #396]	; 0x18c
 80020dc:	e02b      	b.n	8002136 <main_initial+0x676>
 80020de:	bf00      	nop
 80020e0:	200096d8 	.word	0x200096d8
 80020e4:	200096de 	.word	0x200096de
 80020e8:	2000c3dc 	.word	0x2000c3dc
 80020ec:	2000d0bc 	.word	0x2000d0bc
 80020f0:	20008edc 	.word	0x20008edc
 80020f4:	0800dbcc 	.word	0x0800dbcc
 80020f8:	200103a0 	.word	0x200103a0
 80020fc:	00209d9c 	.word	0x00209d9c
 8002100:	2000bfd8 	.word	0x2000bfd8
 8002104:	20009468 	.word	0x20009468
 8002108:	20008cc8 	.word	0x20008cc8
 800210c:	20009008 	.word	0x20009008
 8002110:	2000e072 	.word	0x2000e072
 8002114:	2000d462 	.word	0x2000d462
 8002118:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 800211c:	4a29      	ldr	r2, [pc, #164]	; (80021c4 <main_initial+0x704>)
 800211e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002122:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002126:	4a28      	ldr	r2, [pc, #160]	; (80021c8 <main_initial+0x708>)
 8002128:	2130      	movs	r1, #48	; 0x30
 800212a:	54d1      	strb	r1, [r2, r3]
 800212c:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 8002130:	3301      	adds	r3, #1
 8002132:	f8a7 318c 	strh.w	r3, [r7, #396]	; 0x18c
 8002136:	4b25      	ldr	r3, [pc, #148]	; (80021cc <main_initial+0x70c>)
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 800213e:	429a      	cmp	r2, r3
 8002140:	d3ea      	bcc.n	8002118 <main_initial+0x658>
			note_reset();
 8002142:	f7ff fc57 	bl	80019f4 <note_reset>


			uint8_t find_set=0;
 8002146:	2300      	movs	r3, #0
 8002148:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
			uint8_t var_hold=0;
 800214c:	2300      	movs	r3, #0
 800214e:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
			for (pars_counter=0;pars_counter<menu_lookup_count;pars_counter++){
 8002152:	2300      	movs	r3, #0
 8002154:	f8a7 318c 	strh.w	r3, [r7, #396]	; 0x18c
 8002158:	e025      	b.n	80021a6 <main_initial+0x6e6>
			   var_hold=menu_vars_limiter[pars_counter];
 800215a:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 800215e:	4a1c      	ldr	r2, [pc, #112]	; (80021d0 <main_initial+0x710>)
 8002160:	5cd3      	ldrb	r3, [r2, r3]
 8002162:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
			    find_set=0;
 8002166:	2300      	movs	r3, #0
 8002168:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
			   while ( var_hold >>= 1) {
 800216c:	e004      	b.n	8002178 <main_initial+0x6b8>
			       find_set++;
 800216e:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 8002172:	3301      	adds	r3, #1
 8002174:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
			   while ( var_hold >>= 1) {
 8002178:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 800217c:	085b      	lsrs	r3, r3, #1
 800217e:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
 8002182:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f1      	bne.n	800216e <main_initial+0x6ae>
			    }

			    LFO_vars_divider[pars_counter]= 7-find_set;    // high set bit , use it to shift left from 255
 800218a:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 800218e:	f897 218b 	ldrb.w	r2, [r7, #395]	; 0x18b
 8002192:	f1c2 0207 	rsb	r2, r2, #7
 8002196:	b2d1      	uxtb	r1, r2
 8002198:	4a0e      	ldr	r2, [pc, #56]	; (80021d4 <main_initial+0x714>)
 800219a:	54d1      	strb	r1, [r2, r3]
			for (pars_counter=0;pars_counter<menu_lookup_count;pars_counter++){
 800219c:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 80021a0:	3301      	adds	r3, #1
 80021a2:	f8a7 318c 	strh.w	r3, [r7, #396]	; 0x18c
 80021a6:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 80021aa:	2b41      	cmp	r3, #65	; 0x41
 80021ac:	d9d5      	bls.n	800215a <main_initial+0x69a>
			}

			menuSelect=0;
 80021ae:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <main_initial+0x718>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]
	// fill up sample
	firstbarLoop=0;
 80021b4:	4b09      	ldr	r3, [pc, #36]	; (80021dc <main_initial+0x71c>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	701a      	strb	r2, [r3, #0]
	//sample_ram =  &RAM[0];    //  allocate half a second

}
 80021ba:	bf00      	nop
 80021bc:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021c4:	2000d464 	.word	0x2000d464
 80021c8:	20009008 	.word	0x20009008
 80021cc:	2000d462 	.word	0x2000d462
 80021d0:	0800ee14 	.word	0x0800ee14
 80021d4:	20010358 	.word	0x20010358
 80021d8:	200096d4 	.word	0x200096d4
 80021dc:	200096d5 	.word	0x200096d5

080021e0 <patch_lists>:
void sampler_save(void){


}

void patch_lists(void){   //   ok
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
    uint8_t  list_counter;
    uint8_t list_counter2=0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	71bb      	strb	r3, [r7, #6]
    for (list_counter=0;list_counter<20;list_counter++){
 80021ea:	2300      	movs	r3, #0
 80021ec:	71fb      	strb	r3, [r7, #7]
 80021ee:	e02b      	b.n	8002248 <patch_lists+0x68>

	if ((patch[list_counter].input1&3)== 3   )    { LFO_sqr_list[list_counter2]   =  (patch[list_counter].target_index&7)+48;   // only writes sqr related  to list ,others left off
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	4a1a      	ldr	r2, [pc, #104]	; (800225c <patch_lists+0x7c>)
 80021f4:	212c      	movs	r1, #44	; 0x2c
 80021f6:	fb01 f303 	mul.w	r3, r1, r3
 80021fa:	4413      	add	r3, r2
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	2b03      	cmp	r3, #3
 8002204:	d11d      	bne.n	8002242 <patch_lists+0x62>
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	4a14      	ldr	r2, [pc, #80]	; (800225c <patch_lists+0x7c>)
 800220a:	212c      	movs	r1, #44	; 0x2c
 800220c:	fb01 f303 	mul.w	r3, r1, r3
 8002210:	4413      	add	r3, r2
 8002212:	3302      	adds	r3, #2
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	b2da      	uxtb	r2, r3
 800221c:	79bb      	ldrb	r3, [r7, #6]
 800221e:	3230      	adds	r2, #48	; 0x30
 8002220:	b2d1      	uxtb	r1, r2
 8002222:	4a0f      	ldr	r2, [pc, #60]	; (8002260 <patch_lists+0x80>)
 8002224:	54d1      	strb	r1, [r2, r3]
	sqr_target_list[list_counter2] =  (patch[list_counter].target);   //just
 8002226:	79fa      	ldrb	r2, [r7, #7]
 8002228:	79bb      	ldrb	r3, [r7, #6]
 800222a:	490c      	ldr	r1, [pc, #48]	; (800225c <patch_lists+0x7c>)
 800222c:	202c      	movs	r0, #44	; 0x2c
 800222e:	fb00 f202 	mul.w	r2, r0, r2
 8002232:	440a      	add	r2, r1
 8002234:	3201      	adds	r2, #1
 8002236:	7811      	ldrb	r1, [r2, #0]
 8002238:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <patch_lists+0x84>)
 800223a:	54d1      	strb	r1, [r2, r3]
	list_counter2++;
 800223c:	79bb      	ldrb	r3, [r7, #6]
 800223e:	3301      	adds	r3, #1
 8002240:	71bb      	strb	r3, [r7, #6]
    for (list_counter=0;list_counter<20;list_counter++){
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	3301      	adds	r3, #1
 8002246:	71fb      	strb	r3, [r7, #7]
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	2b13      	cmp	r3, #19
 800224c:	d9d0      	bls.n	80021f0 <patch_lists+0x10>

    }



}
 800224e:	bf00      	nop
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	2000d0ec 	.word	0x2000d0ec
 8002260:	2000f2ac 	.word	0x2000f2ac
 8002264:	2000f31c 	.word	0x2000f31c

08002268 <sampling>:

return  output;

}

void sampling(void){						// 330 atm or 8.5ms
 8002268:	b5b0      	push	{r4, r5, r7, lr}
 800226a:	b0ca      	sub	sp, #296	; 0x128
 800226c:	af00      	add	r7, sp, #0

//	if (time_proc>580) time_final=time_proc;

	  time_proc=0;
 800226e:	4bc5      	ldr	r3, [pc, #788]	; (8002584 <sampling+0x31c>)
 8002270:	2200      	movs	r2, #0
 8002272:	801a      	strh	r2, [r3, #0]
    static 	int16_t* sample_ptr2= &flash_read_block2[4];   // DMA load
 	int16_t* sample_ptr3= &flash_read_block3;   // DMA load
 8002274:	4bc4      	ldr	r3, [pc, #784]	; (8002588 <sampling+0x320>)
 8002276:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    int16_t* signed_ptr=&flash_read_block;
 800227a:	4bc4      	ldr	r3, [pc, #784]	; (800258c <sampling+0x324>)
 800227c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    uint32_t sample_flash_address;
    int16_t  flash_read_a=0;
 8002280:	2300      	movs	r3, #0
 8002282:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2


//time_proc=0;


	seq.swing=0;
 8002286:	4bc2      	ldr	r3, [pc, #776]	; (8002590 <sampling+0x328>)
 8002288:	2200      	movs	r2, #0
 800228a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

static	int32_t sample_accus[10] ={0,0,0,0,0,0,0,0,0,0}; // all these should be static but ok otherwise
uint8_t mask_i;
 int32_t sample_Accu[10] ={0,0,0,0,0,0,0,0,0,0};   // accu for sample output or lookup , not static !
 800228e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002292:	2228      	movs	r2, #40	; 0x28
 8002294:	2100      	movs	r1, #0
 8002296:	4618      	mov	r0, r3
 8002298:	f00b f8d2 	bl	800d440 <memset>

int32_t sample_adc=0;
 800229c:	2300      	movs	r3, #0
 800229e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
int32_t ram_temp=0;
 80022a2:	2300      	movs	r3, #0
 80022a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
uint16_t sample_counts_temp[40]={1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
 80022a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022ac:	2250      	movs	r2, #80	; 0x50
 80022ae:	2100      	movs	r1, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f00b f8c5 	bl	800d440 <memset>
 80022b6:	2301      	movs	r3, #1
 80022b8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80022bc:	2301      	movs	r3, #1
 80022be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80022c2:	2301      	movs	r3, #1
 80022c4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80022c8:	2301      	movs	r3, #1
 80022ca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80022ce:	2301      	movs	r3, #1
 80022d0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80022d4:	2301      	movs	r3, #1
 80022d6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80022da:	2301      	movs	r3, #1
 80022dc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80022e0:	2301      	movs	r3, #1
 80022e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80022e6:	2301      	movs	r3, #1
 80022e8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80022ec:	2301      	movs	r3, #1
 80022ee:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80022f2:	2301      	movs	r3, #1
 80022f4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 80022f8:	2301      	movs	r3, #1
 80022fa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80022fe:	2301      	movs	r3, #1
 8002300:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8002304:	2301      	movs	r3, #1
 8002306:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800230a:	2301      	movs	r3, #1
 800230c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002310:	2301      	movs	r3, #1
 8002312:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002316:	2301      	movs	r3, #1
 8002318:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 800231c:	2301      	movs	r3, #1
 800231e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8002322:	2301      	movs	r3, #1
 8002324:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8002328:	2301      	movs	r3, #1
 800232a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800232e:	2301      	movs	r3, #1
 8002330:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8002334:	2301      	movs	r3, #1
 8002336:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800233a:	2301      	movs	r3, #1
 800233c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8002340:	2301      	movs	r3, #1
 8002342:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8002346:	2301      	movs	r3, #1
 8002348:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 800234c:	2301      	movs	r3, #1
 800234e:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8002352:	2301      	movs	r3, #1
 8002354:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002358:	2301      	movs	r3, #1
 800235a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 800235e:	2301      	movs	r3, #1
 8002360:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002364:	2301      	movs	r3, #1
 8002366:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800236a:	2301      	movs	r3, #1
 800236c:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002370:	2301      	movs	r3, #1
 8002372:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002376:	2301      	movs	r3, #1
 8002378:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 800237c:	2301      	movs	r3, #1
 800237e:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8002382:	2301      	movs	r3, #1
 8002384:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8002388:	2301      	movs	r3, #1
 800238a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 800238e:	2301      	movs	r3, #1
 8002390:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
static int32_t phase_bank0[32];
static int32_t phase_bank1[32];
static int32_t phase_bank2[32];
static int32_t phase_bank3[32];

int32_t sample_input=0;
 8002394:	2300      	movs	r3, #0
 8002396:	63fb      	str	r3, [r7, #60]	; 0x3c
tempo_lut[131]=1023;   // force to an even count on samples
 8002398:	4b7e      	ldr	r3, [pc, #504]	; (8002594 <sampling+0x32c>)
 800239a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800239e:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106

int32_t ram_synced=0;   // ram synced to sampler.seq_pos
 80023a2:	2300      	movs	r3, #0
 80023a4:	63bb      	str	r3, [r7, #56]	; 0x38
uint8_t soft_mute=0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
//if ((sampler.record_enable==0) && (flash_flag))   {  flash_page_read ((sampler.ram_seq)<<1 ); flash_flag=0;}

if (bank_write==2)  {sample_pointD=512;}  else sample_pointD=0;
 80023ac:	4b7a      	ldr	r3, [pc, #488]	; (8002598 <sampling+0x330>)
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d104      	bne.n	80023be <sampling+0x156>
 80023b4:	4b79      	ldr	r3, [pc, #484]	; (800259c <sampling+0x334>)
 80023b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023ba:	801a      	strh	r2, [r3, #0]
 80023bc:	e002      	b.n	80023c4 <sampling+0x15c>
 80023be:	4b77      	ldr	r3, [pc, #476]	; (800259c <sampling+0x334>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	801a      	strh	r2, [r3, #0]

bank_write=0;
 80023c4:	4b74      	ldr	r3, [pc, #464]	; (8002598 <sampling+0x330>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	801a      	strh	r2, [r3, #0]
memcpy(notes_joined,seq.notes1,16);
 80023ca:	2210      	movs	r2, #16
 80023cc:	4974      	ldr	r1, [pc, #464]	; (80025a0 <sampling+0x338>)
 80023ce:	4875      	ldr	r0, [pc, #468]	; (80025a4 <sampling+0x33c>)
 80023d0:	f00b f828 	bl	800d424 <memcpy>
memcpy(notes_joined+16,seq.notes1,16);  //  only use notes 1
 80023d4:	4b74      	ldr	r3, [pc, #464]	; (80025a8 <sampling+0x340>)
 80023d6:	2210      	movs	r2, #16
 80023d8:	4971      	ldr	r1, [pc, #452]	; (80025a0 <sampling+0x338>)
 80023da:	4618      	mov	r0, r3
 80023dc:	f00b f822 	bl	800d424 <memcpy>
sample_pointB=sample_pointD;
 80023e0:	4b6e      	ldr	r3, [pc, #440]	; (800259c <sampling+0x334>)
 80023e2:	881a      	ldrh	r2, [r3, #0]
 80023e4:	4b71      	ldr	r3, [pc, #452]	; (80025ac <sampling+0x344>)
 80023e6:	801a      	strh	r2, [r3, #0]
unsigned short tempo_start=0;  // enabled when i=isrMask;
 80023e8:	2300      	movs	r3, #0
 80023ea:	f8a7 3120 	strh.w	r3, [r7, #288]	; 0x120

LCD_Info_notes(seq.loop[4]);
 80023ee:	4b68      	ldr	r3, [pc, #416]	; (8002590 <sampling+0x328>)
 80023f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80023f4:	4618      	mov	r0, r3
 80023f6:	f002 fdbb 	bl	8004f70 <LCD_Info_notes>

uint8_t counter;
for (counter=0;counter<16;counter++){				// notes for sampler
 80023fa:	2300      	movs	r3, #0
 80023fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8002400:	e01d      	b.n	800243e <sampling+0x1d6>
seq.notes2[counter]= (sampler.Snotes1[counter]&15)+ (sampler.Snotes2[counter]<<4);
 8002402:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002406:	4a6a      	ldr	r2, [pc, #424]	; (80025b0 <sampling+0x348>)
 8002408:	4413      	add	r3, r2
 800240a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	b2d9      	uxtb	r1, r3
 8002414:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002418:	4a65      	ldr	r2, [pc, #404]	; (80025b0 <sampling+0x348>)
 800241a:	4413      	add	r3, r2
 800241c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	b2da      	uxtb	r2, r3
 8002424:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002428:	440a      	add	r2, r1
 800242a:	b2d1      	uxtb	r1, r2
 800242c:	4a58      	ldr	r2, [pc, #352]	; (8002590 <sampling+0x328>)
 800242e:	4413      	add	r3, r2
 8002430:	460a      	mov	r2, r1
 8002432:	74da      	strb	r2, [r3, #19]
for (counter=0;counter<16;counter++){				// notes for sampler
 8002434:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002438:	3301      	adds	r3, #1
 800243a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 800243e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002442:	2b0f      	cmp	r3, #15
 8002444:	d9dd      	bls.n	8002402 <sampling+0x19a>

}
uint8_t sound_enable[8]={0,0,0,0,0,0,0,0};  // better here
 8002446:	4a5b      	ldr	r2, [pc, #364]	; (80025b4 <sampling+0x34c>)
 8002448:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800244c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002450:	e883 0003 	stmia.w	r3, {r0, r1}

uint16_t i_total;
uint16_t tempo_mod=tempo_lut[seq.tempo];  // set tempo,speed from lut 40-200bpm  ,changed to 4x for note lenght
 8002454:	4b4e      	ldr	r3, [pc, #312]	; (8002590 <sampling+0x328>)
 8002456:	785b      	ldrb	r3, [r3, #1]
 8002458:	461a      	mov	r2, r3
 800245a:	4b4e      	ldr	r3, [pc, #312]	; (8002594 <sampling+0x32c>)
 800245c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002460:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100

tempo_sync=16384/((tempo_mod*16)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80
 8002464:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8002468:	2b00      	cmp	r3, #0
 800246a:	da00      	bge.n	800246e <sampling+0x206>
 800246c:	331f      	adds	r3, #31
 800246e:	115b      	asrs	r3, r3, #5
 8002470:	461a      	mov	r2, r3
 8002472:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002476:	fb93 f3f2 	sdiv	r3, r3, r2
 800247a:	ee07 3a90 	vmov	s15, r3
 800247e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002482:	4b4d      	ldr	r3, [pc, #308]	; (80025b8 <sampling+0x350>)
 8002484:	edc3 7a00 	vstr	s15, [r3]
tempo_sync=tempo_sync/80;  // bit weird her , this is adsr !
 8002488:	4b4b      	ldr	r3, [pc, #300]	; (80025b8 <sampling+0x350>)
 800248a:	ed93 7a00 	vldr	s14, [r3]
 800248e:	eddf 6a4b 	vldr	s13, [pc, #300]	; 80025bc <sampling+0x354>
 8002492:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002496:	4b48      	ldr	r3, [pc, #288]	; (80025b8 <sampling+0x350>)
 8002498:	edc3 7a00 	vstr	s15, [r3]

if ((tempo_mod==511 )   && (sampler.ram_seq<=256)    && (seq.pos>>4)      )   { next_isr=0; tempo_count=0; }   //  this should sync  rough
 800249c:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 80024a0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d111      	bne.n	80024cc <sampling+0x264>
 80024a8:	4b41      	ldr	r3, [pc, #260]	; (80025b0 <sampling+0x348>)
 80024aa:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80024ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024b2:	d80b      	bhi.n	80024cc <sampling+0x264>
 80024b4:	4b36      	ldr	r3, [pc, #216]	; (8002590 <sampling+0x328>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <sampling+0x264>
 80024c0:	4b3f      	ldr	r3, [pc, #252]	; (80025c0 <sampling+0x358>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	801a      	strh	r2, [r3, #0]
 80024c6:	4b3f      	ldr	r3, [pc, #252]	; (80025c4 <sampling+0x35c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	801a      	strh	r2, [r3, #0]

seqpos_i=0; //reset
 80024cc:	4b3e      	ldr	r3, [pc, #248]	; (80025c8 <sampling+0x360>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	801a      	strh	r2, [r3, #0]
	sampler.trigger_position=0;     // reset sample start here
 80024d2:	4b37      	ldr	r3, [pc, #220]	; (80025b0 <sampling+0x348>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

uint8_t looper_dat[8]={1,3,7,15};
 80024da:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80024de:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 80024e2:	493a      	ldr	r1, [pc, #232]	; (80025cc <sampling+0x364>)
 80024e4:	4613      	mov	r3, r2
 80024e6:	c903      	ldmia	r1, {r0, r1}
 80024e8:	6018      	str	r0, [r3, #0]
 80024ea:	3304      	adds	r3, #4
 80024ec:	7019      	strb	r1, [r3, #0]
 80024ee:	1d53      	adds	r3, r2, #5
 80024f0:	2200      	movs	r2, #0
 80024f2:	801a      	strh	r2, [r3, #0]
 80024f4:	709a      	strb	r2, [r3, #2]
uint32_t lfo_tempo_hold;

if (tempo_mod_hold!=tempo_mod){					// lfo lut calculate only when changes tempo
 80024f6:	4b36      	ldr	r3, [pc, #216]	; (80025d0 <sampling+0x368>)
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	f8b7 2100 	ldrh.w	r2, [r7, #256]	; 0x100
 80024fe:	429a      	cmp	r2, r3
 8002500:	d036      	beq.n	8002570 <sampling+0x308>
		float lfo_tempo_calc=((1647099*4)/(tempo_mod)); // deafualt 1 note    12867  at 512
 8002502:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8002506:	4a33      	ldr	r2, [pc, #204]	; (80025d4 <sampling+0x36c>)
 8002508:	fb92 f3f3 	sdiv	r3, r2, r3
 800250c:	ee07 3a90 	vmov	s15, r3
 8002510:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002514:	edc7 7a3f 	vstr	s15, [r7, #252]	; 0xfc
						for (i=0;i<256;i++){								// 128 is 1 note
 8002518:	4b2f      	ldr	r3, [pc, #188]	; (80025d8 <sampling+0x370>)
 800251a:	2200      	movs	r2, #0
 800251c:	801a      	strh	r2, [r3, #0]
 800251e:	e023      	b.n	8002568 <sampling+0x300>
	lfo_tempo_hold=(((i+1)*lfo_tempo_calc))/16;               //  at 64 its 12867
 8002520:	4b2d      	ldr	r3, [pc, #180]	; (80025d8 <sampling+0x370>)
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	3301      	adds	r3, #1
 8002526:	ee07 3a90 	vmov	s15, r3
 800252a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800252e:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 8002532:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002536:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800253a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800253e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002542:	ee17 3a90 	vmov	r3, s15
 8002546:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	lfo_tempo_lut[i]= lfo_tempo_hold;
 800254a:	4b23      	ldr	r3, [pc, #140]	; (80025d8 <sampling+0x370>)
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002554:	b299      	uxth	r1, r3
 8002556:	4b21      	ldr	r3, [pc, #132]	; (80025dc <sampling+0x374>)
 8002558:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
						for (i=0;i<256;i++){								// 128 is 1 note
 800255c:	4b1e      	ldr	r3, [pc, #120]	; (80025d8 <sampling+0x370>)
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	3301      	adds	r3, #1
 8002562:	b29a      	uxth	r2, r3
 8002564:	4b1c      	ldr	r3, [pc, #112]	; (80025d8 <sampling+0x370>)
 8002566:	801a      	strh	r2, [r3, #0]
 8002568:	4b1b      	ldr	r3, [pc, #108]	; (80025d8 <sampling+0x370>)
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	2bff      	cmp	r3, #255	; 0xff
 800256e:	d9d7      	bls.n	8002520 <sampling+0x2b8>
}}
tempo_mod_hold=tempo_mod;   // for lfo
 8002570:	4a17      	ldr	r2, [pc, #92]	; (80025d0 <sampling+0x368>)
 8002572:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8002576:	8013      	strh	r3, [r2, #0]

//for (i=0;i<16;i++) {  note_toggler[i]=0; }
	//potSource[150]=(freq_point[0])*100; //0-2


patch_lists();
 8002578:	f7ff fe32 	bl	80021e0 <patch_lists>
static int32_t* osc_pointers[10];   // sample outs
uint8_t pars_counter;

//if (sampler.ram_seq>15871)  sampler.ram_seq=0;  //else sampler.ram_seq=sampler.ram_seq+1024;
//setup pointers for osc options
 for (pars_counter=0;pars_counter<5;pars_counter++)	{   // fill up pointers and reload vars
 800257c:	2300      	movs	r3, #0
 800257e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8002582:	e100      	b.n	8002786 <sampling+0x51e>
 8002584:	2000cc74 	.word	0x2000cc74
 8002588:	2000fb3c 	.word	0x2000fb3c
 800258c:	2000f338 	.word	0x2000f338
 8002590:	2000d0bc 	.word	0x2000d0bc
 8002594:	2000bfd8 	.word	0x2000bfd8
 8002598:	20008e16 	.word	0x20008e16
 800259c:	2000a6ea 	.word	0x2000a6ea
 80025a0:	2000d0be 	.word	0x2000d0be
 80025a4:	2000e07c 	.word	0x2000e07c
 80025a8:	2000e08c 	.word	0x2000e08c
 80025ac:	200096dc 	.word	0x200096dc
 80025b0:	20008edc 	.word	0x20008edc
 80025b4:	0800dbfc 	.word	0x0800dbfc
 80025b8:	2000c864 	.word	0x2000c864
 80025bc:	42a00000 	.word	0x42a00000
 80025c0:	2000bef0 	.word	0x2000bef0
 80025c4:	2000bf1a 	.word	0x2000bf1a
 80025c8:	2000f330 	.word	0x2000f330
 80025cc:	0800dc04 	.word	0x0800dc04
 80025d0:	2000c3d8 	.word	0x2000c3d8
 80025d4:	006487ec 	.word	0x006487ec
 80025d8:	200096de 	.word	0x200096de
 80025dc:	2000c1d8 	.word	0x2000c1d8


		sample_accus[pars_counter]=sample_accus_hold[pars_counter];
 80025e0:	f897 211e 	ldrb.w	r2, [r7, #286]	; 0x11e
 80025e4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80025e8:	49a5      	ldr	r1, [pc, #660]	; (8002880 <sampling+0x618>)
 80025ea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80025ee:	49a5      	ldr	r1, [pc, #660]	; (8002884 <sampling+0x61c>)
 80025f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	 if (note[pars_counter].osc==0) {osc_pointers[pars_counter]=&sample_Accu[5];  sound_enable[pars_counter]=0;} // zero
 80025f4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80025f8:	4aa3      	ldr	r2, [pc, #652]	; (8002888 <sampling+0x620>)
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	4413      	add	r3, r2
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10f      	bne.n	8002624 <sampling+0x3bc>
 8002604:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8002608:	49a0      	ldr	r1, [pc, #640]	; (800288c <sampling+0x624>)
 800260a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800260e:	3214      	adds	r2, #20
 8002610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002614:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8002618:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800261c:	443b      	add	r3, r7
 800261e:	2200      	movs	r2, #0
 8002620:	f803 2cf8 	strb.w	r2, [r3, #-248]
	 	 	 	 if (note[pars_counter].osc==1) {osc_pointers[pars_counter]=&sample_accus[pars_counter];  sound_enable[pars_counter]=1;} 						// saw
 8002624:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8002628:	4a97      	ldr	r2, [pc, #604]	; (8002888 <sampling+0x620>)
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	4413      	add	r3, r2
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d111      	bne.n	8002658 <sampling+0x3f0>
 8002634:	f897 211e 	ldrb.w	r2, [r7, #286]	; 0x11e
 8002638:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800263c:	0092      	lsls	r2, r2, #2
 800263e:	4991      	ldr	r1, [pc, #580]	; (8002884 <sampling+0x61c>)
 8002640:	440a      	add	r2, r1
 8002642:	4992      	ldr	r1, [pc, #584]	; (800288c <sampling+0x624>)
 8002644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002648:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800264c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002650:	443b      	add	r3, r7
 8002652:	2201      	movs	r2, #1
 8002654:	f803 2cf8 	strb.w	r2, [r3, #-248]
	 			if (note[pars_counter].osc==2){ osc_pointers[pars_counter]=&sample_Accu[pars_counter];sound_enable[pars_counter]=2;} 		// tri
 8002658:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800265c:	4a8a      	ldr	r2, [pc, #552]	; (8002888 <sampling+0x620>)
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	4413      	add	r3, r2
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d112      	bne.n	800268e <sampling+0x426>
 8002668:	f897 211e 	ldrb.w	r2, [r7, #286]	; 0x11e
 800266c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8002670:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002674:	0092      	lsls	r2, r2, #2
 8002676:	440a      	add	r2, r1
 8002678:	4984      	ldr	r1, [pc, #528]	; (800288c <sampling+0x624>)
 800267a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800267e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8002682:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002686:	443b      	add	r3, r7
 8002688:	2202      	movs	r2, #2
 800268a:	f803 2cf8 	strb.w	r2, [r3, #-248]
	 			if (note[pars_counter].osc==3) { osc_pointers[pars_counter]=&sample_Accu[pars_counter+6];sound_enable[3]=3;}   // sample_input
 800268e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8002692:	4a7d      	ldr	r2, [pc, #500]	; (8002888 <sampling+0x620>)
 8002694:	011b      	lsls	r3, r3, #4
 8002696:	4413      	add	r3, r2
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b03      	cmp	r3, #3
 800269c:	d10e      	bne.n	80026bc <sampling+0x454>
 800269e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80026a2:	1d9a      	adds	r2, r3, #6
 80026a4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80026a8:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80026ac:	0092      	lsls	r2, r2, #2
 80026ae:	440a      	add	r2, r1
 80026b0:	4976      	ldr	r1, [pc, #472]	; (800288c <sampling+0x624>)
 80026b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80026b6:	2303      	movs	r3, #3
 80026b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	 			if (note[pars_counter].osc==4) { osc_pointers[pars_counter]=&sample_input;sound_enable[4]=4;}  // sampleinput
 80026bc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80026c0:	4a71      	ldr	r2, [pc, #452]	; (8002888 <sampling+0x620>)
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	4413      	add	r3, r2
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d109      	bne.n	80026e0 <sampling+0x478>
 80026cc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80026d0:	496e      	ldr	r1, [pc, #440]	; (800288c <sampling+0x624>)
 80026d2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80026d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80026da:	2304      	movs	r3, #4
 80026dc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	 			if (note[pars_counter].osc==5) {osc_pointers[pars_counter]=&sample_adc;sound_enable[5]=5;}    // sine
 80026e0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80026e4:	4a68      	ldr	r2, [pc, #416]	; (8002888 <sampling+0x620>)
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	4413      	add	r3, r2
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b05      	cmp	r3, #5
 80026ee:	d109      	bne.n	8002704 <sampling+0x49c>
 80026f0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80026f4:	4965      	ldr	r1, [pc, #404]	; (800288c <sampling+0x624>)
 80026f6:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80026fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80026fe:	2305      	movs	r3, #5
 8002700:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	 			if (note[pars_counter].osc==6) {osc_pointers[pars_counter]=&ram_temp ; sound_enable[6]=6;}   // non muted RAM , just loop
 8002704:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8002708:	4a5f      	ldr	r2, [pc, #380]	; (8002888 <sampling+0x620>)
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	4413      	add	r3, r2
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b06      	cmp	r3, #6
 8002712:	d109      	bne.n	8002728 <sampling+0x4c0>
 8002714:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8002718:	495c      	ldr	r1, [pc, #368]	; (800288c <sampling+0x624>)
 800271a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800271e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002722:	2306      	movs	r3, #6
 8002724:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	 			if (note[pars_counter].osc==7) {osc_pointers[pars_counter]=&ram_synced; sound_enable[7]=7;}   // trigger 0-16
 8002728:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800272c:	4a56      	ldr	r2, [pc, #344]	; (8002888 <sampling+0x620>)
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	4413      	add	r3, r2
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b07      	cmp	r3, #7
 8002736:	d109      	bne.n	800274c <sampling+0x4e4>
 8002738:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800273c:	4953      	ldr	r1, [pc, #332]	; (800288c <sampling+0x624>)
 800273e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002746:	2307      	movs	r3, #7
 8002748:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	 			if (note[pars_counter].osc>7) {osc_pointers[pars_counter]=&sample_Accu[5]; sound_enable[pars_counter]=0;}  // zero
 800274c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8002750:	4a4d      	ldr	r2, [pc, #308]	; (8002888 <sampling+0x620>)
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	4413      	add	r3, r2
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b07      	cmp	r3, #7
 800275a:	d90f      	bls.n	800277c <sampling+0x514>
 800275c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8002760:	494a      	ldr	r1, [pc, #296]	; (800288c <sampling+0x624>)
 8002762:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002766:	3214      	adds	r2, #20
 8002768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800276c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8002770:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002774:	443b      	add	r3, r7
 8002776:	2200      	movs	r2, #0
 8002778:	f803 2cf8 	strb.w	r2, [r3, #-248]
 for (pars_counter=0;pars_counter<5;pars_counter++)	{   // fill up pointers and reload vars
 800277c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8002780:	3301      	adds	r3, #1
 8002782:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8002786:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800278a:	2b04      	cmp	r3, #4
 800278c:	f67f af28 	bls.w	80025e0 <sampling+0x378>


 }

note_holdA=0;
 8002790:	4b3f      	ldr	r3, [pc, #252]	; (8002890 <sampling+0x628>)
 8002792:	2200      	movs	r2, #0
 8002794:	701a      	strb	r2, [r3, #0]

// some good phasin and delays here
uint8_t cross_fade[2]={0,0};
 8002796:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800279a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800279e:	2200      	movs	r2, #0
 80027a0:	801a      	strh	r2, [r3, #0]
uint8_t fader[17]={0,1,5,11,19,28,39,51,64,76,88,99,108,116,122,126,127}; // sine curve for cross fade
 80027a2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80027a6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80027aa:	4a3a      	ldr	r2, [pc, #232]	; (8002894 <sampling+0x62c>)
 80027ac:	461c      	mov	r4, r3
 80027ae:	4615      	mov	r5, r2
 80027b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027b4:	682b      	ldr	r3, [r5, #0]
 80027b6:	7023      	strb	r3, [r4, #0]
//if(adc_values[2]&16)     	{cross_fade[1]=127-fader[adc_values[2]&15]; cross_fade[2]=127;}  else {cross_fade[2]=fader[adc_values[2]&15]; cross_fade[1]=127;} //calculate crossfader

// doing lfo calc here as it is slow only for now
////////////////////adsr/////////////////////////////////////////

isr_change=0;
 80027b8:	4b37      	ldr	r3, [pc, #220]	; (8002898 <sampling+0x630>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	801a      	strh	r2, [r3, #0]
uint8_t seq_dat=(1<<(((adc_values[0]>>3))+1))-1;
 80027be:	4b37      	ldr	r3, [pc, #220]	; (800289c <sampling+0x634>)
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	08db      	lsrs	r3, r3, #3
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	3301      	adds	r3, #1
 80027c8:	2201      	movs	r2, #1
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	3b01      	subs	r3, #1
 80027d2:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
///////////////////////////////////////////////////////////////

	for (i=0;i<512;i++){    // convert to signed , also use this for double buffer (no bank switch) 512 *16 is enough
 80027d6:	4b32      	ldr	r3, [pc, #200]	; (80028a0 <sampling+0x638>)
 80027d8:	2200      	movs	r2, #0
 80027da:	801a      	strh	r2, [r3, #0]
 80027dc:	e02b      	b.n	8002836 <sampling+0x5ce>

	    flash_read_a= *(sample_ptr2+i) - 32767;
 80027de:	4b31      	ldr	r3, [pc, #196]	; (80028a4 <sampling+0x63c>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	4b2f      	ldr	r3, [pc, #188]	; (80028a0 <sampling+0x638>)
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	4413      	add	r3, r2
 80027ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 80027f4:	3b7f      	subs	r3, #127	; 0x7f
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	b21b      	sxth	r3, r3
 80027fa:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
	    if ((flash_read_a==32767)   ||  (flash_read_a==-32767))   flash_read_a=0;    // stop clicks from FF bytes
 80027fe:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 8002802:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002806:	4293      	cmp	r3, r2
 8002808:	d004      	beq.n	8002814 <sampling+0x5ac>
 800280a:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 800280e:	4a26      	ldr	r2, [pc, #152]	; (80028a8 <sampling+0x640>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d102      	bne.n	800281a <sampling+0x5b2>
 8002814:	2300      	movs	r3, #0
 8002816:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
	    memcpy(&flash_read_block[i*2],&flash_read_a,2);   // load first set
 800281a:	4b21      	ldr	r3, [pc, #132]	; (80028a0 <sampling+0x638>)
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	4a22      	ldr	r2, [pc, #136]	; (80028ac <sampling+0x644>)
 8002822:	4413      	add	r3, r2
 8002824:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	; 0xc2
 8002828:	801a      	strh	r2, [r3, #0]
	for (i=0;i<512;i++){    // convert to signed , also use this for double buffer (no bank switch) 512 *16 is enough
 800282a:	4b1d      	ldr	r3, [pc, #116]	; (80028a0 <sampling+0x638>)
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	3301      	adds	r3, #1
 8002830:	b29a      	uxth	r2, r3
 8002832:	4b1b      	ldr	r3, [pc, #108]	; (80028a0 <sampling+0x638>)
 8002834:	801a      	strh	r2, [r3, #0]
 8002836:	4b1a      	ldr	r3, [pc, #104]	; (80028a0 <sampling+0x638>)
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800283e:	d3ce      	bcc.n	80027de <sampling+0x576>
	}
	if (sampler.acurrent_sample2)     sample_flash_address=((sampler.sample_select[sampler.acurrent_sample2-1] *128)<<8)+((sampler.ram_seq2>>8)<<9);
 8002840:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <sampling+0x648>)
 8002842:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8002846:	2b00      	cmp	r3, #0
 8002848:	d011      	beq.n	800286e <sampling+0x606>
 800284a:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <sampling+0x648>)
 800284c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8002850:	3b01      	subs	r3, #1
 8002852:	4a17      	ldr	r2, [pc, #92]	; (80028b0 <sampling+0x648>)
 8002854:	4413      	add	r3, r2
 8002856:	7a1b      	ldrb	r3, [r3, #8]
 8002858:	01db      	lsls	r3, r3, #7
 800285a:	021a      	lsls	r2, r3, #8
 800285c:	4b14      	ldr	r3, [pc, #80]	; (80028b0 <sampling+0x648>)
 800285e:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8002862:	0a1b      	lsrs	r3, r3, #8
 8002864:	b29b      	uxth	r3, r3
 8002866:	025b      	lsls	r3, r3, #9
 8002868:	4413      	add	r3, r2
 800286a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	sampler_1k_load(sample_flash_address);
 800286e:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8002872:	f002 fda5 	bl	80053c0 <sampler_1k_load>



for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002876:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <sampling+0x638>)
 8002878:	2200      	movs	r2, #0
 800287a:	801a      	strh	r2, [r3, #0]
 800287c:	e27a      	b.n	8002d74 <sampling+0xb0c>
 800287e:	bf00      	nop
 8002880:	2000bef4 	.word	0x2000bef4
 8002884:	200107fc 	.word	0x200107fc
 8002888:	20008e1c 	.word	0x20008e1c
 800288c:	20010824 	.word	0x20010824
 8002890:	2000bef2 	.word	0x2000bef2
 8002894:	0800dc0c 	.word	0x0800dc0c
 8002898:	200096d2 	.word	0x200096d2
 800289c:	20008e0c 	.word	0x20008e0c
 80028a0:	200096de 	.word	0x200096de
 80028a4:	20008f78 	.word	0x20008f78
 80028a8:	ffff8001 	.word	0xffff8001
 80028ac:	2000f338 	.word	0x2000f338
 80028b0:	20008edc 	.word	0x20008edc

	i_total=i+sample_pointB;
 80028b4:	4b17      	ldr	r3, [pc, #92]	; (8002914 <sampling+0x6ac>)
 80028b6:	881a      	ldrh	r2, [r3, #0]
 80028b8:	4b17      	ldr	r3, [pc, #92]	; (8002918 <sampling+0x6b0>)
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	4413      	add	r3, r2
 80028be:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
	sampling_position=i>>6;   //   0-8 steps
 80028c2:	4b14      	ldr	r3, [pc, #80]	; (8002914 <sampling+0x6ac>)
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	099b      	lsrs	r3, r3, #6
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	4b13      	ldr	r3, [pc, #76]	; (800291c <sampling+0x6b4>)
 80028ce:	701a      	strb	r2, [r3, #0]
	sampling_position_b=(sampling_position+7)&7;
 80028d0:	4b12      	ldr	r3, [pc, #72]	; (800291c <sampling+0x6b4>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	3307      	adds	r3, #7
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	4b10      	ldr	r3, [pc, #64]	; (8002920 <sampling+0x6b8>)
 80028e0:	701a      	strb	r2, [r3, #0]

//potValues[i&255]=potSource[i&255]>>4; //just to update values

if (tempo_count>=tempo_mod) { next_isr=(next_isr+1)& 4095;tempo_count=0;isr_change=next_isr+1;  }  else {tempo_count++;  }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 80028e2:	4b10      	ldr	r3, [pc, #64]	; (8002924 <sampling+0x6bc>)
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	f8b7 2100 	ldrh.w	r2, [r7, #256]	; 0x100
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d820      	bhi.n	8002930 <sampling+0x6c8>
 80028ee:	4b0e      	ldr	r3, [pc, #56]	; (8002928 <sampling+0x6c0>)
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	3301      	adds	r3, #1
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <sampling+0x6c0>)
 80028fe:	801a      	strh	r2, [r3, #0]
 8002900:	4b08      	ldr	r3, [pc, #32]	; (8002924 <sampling+0x6bc>)
 8002902:	2200      	movs	r2, #0
 8002904:	801a      	strh	r2, [r3, #0]
 8002906:	4b08      	ldr	r3, [pc, #32]	; (8002928 <sampling+0x6c0>)
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	3301      	adds	r3, #1
 800290c:	b29a      	uxth	r2, r3
 800290e:	4b07      	ldr	r3, [pc, #28]	; (800292c <sampling+0x6c4>)
 8002910:	801a      	strh	r2, [r3, #0]
 8002912:	e013      	b.n	800293c <sampling+0x6d4>
 8002914:	200096de 	.word	0x200096de
 8002918:	200096dc 	.word	0x200096dc
 800291c:	2000e078 	.word	0x2000e078
 8002920:	2000e079 	.word	0x2000e079
 8002924:	2000bf1a 	.word	0x2000bf1a
 8002928:	2000bef0 	.word	0x2000bef0
 800292c:	200096d2 	.word	0x200096d2
 8002930:	4ba4      	ldr	r3, [pc, #656]	; (8002bc4 <sampling+0x95c>)
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	3301      	adds	r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	4ba2      	ldr	r3, [pc, #648]	; (8002bc4 <sampling+0x95c>)
 800293a:	801a      	strh	r2, [r3, #0]
// tempo_count is about 1000-400
	tempo_start=0;
 800293c:	2300      	movs	r3, #0
 800293e:	f8a7 3120 	strh.w	r3, [r7, #288]	; 0x120


	if ((next_isr>>4) != (seq.pos)) { 					//     min 6400 cycles per seq.pos ,         next note step 140ms
 8002942:	4ba1      	ldr	r3, [pc, #644]	; (8002bc8 <sampling+0x960>)
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	091b      	lsrs	r3, r3, #4
 8002948:	b29a      	uxth	r2, r3
 800294a:	4ba0      	ldr	r3, [pc, #640]	; (8002bcc <sampling+0x964>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	b29b      	uxth	r3, r3
 8002950:	429a      	cmp	r2, r3
 8002952:	d009      	beq.n	8002968 <sampling+0x700>
		seq.pos=(next_isr>>4); // seq pos =256 max , isr = 1/16 of a note, note lenght is 1-4
 8002954:	4b9c      	ldr	r3, [pc, #624]	; (8002bc8 <sampling+0x960>)
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	091b      	lsrs	r3, r3, #4
 800295a:	b29b      	uxth	r3, r3
 800295c:	b2da      	uxtb	r2, r3
 800295e:	4b9b      	ldr	r3, [pc, #620]	; (8002bcc <sampling+0x964>)
 8002960:	701a      	strb	r2, [r3, #0]
		 tempo_start=1;
 8002962:	2301      	movs	r3, #1
 8002964:	f8a7 3120 	strh.w	r3, [r7, #288]	; 0x120
		    }


if (seq.tempo<60) {tempo_start=0; seq.pos=0;sampler.acurrent_sample=1;} // loop on single sample
 8002968:	4b98      	ldr	r3, [pc, #608]	; (8002bcc <sampling+0x964>)
 800296a:	785b      	ldrb	r3, [r3, #1]
 800296c:	2b3b      	cmp	r3, #59	; 0x3b
 800296e:	d809      	bhi.n	8002984 <sampling+0x71c>
 8002970:	2300      	movs	r3, #0
 8002972:	f8a7 3120 	strh.w	r3, [r7, #288]	; 0x120
 8002976:	4b95      	ldr	r3, [pc, #596]	; (8002bcc <sampling+0x964>)
 8002978:	2200      	movs	r2, #0
 800297a:	701a      	strb	r2, [r3, #0]
 800297c:	4b94      	ldr	r3, [pc, #592]	; (8002bd0 <sampling+0x968>)
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 	if(tempo_start  )    // Calculates only on note change, gotta change seq.pos somehow  , only activates when change in seq pos ie once in ten bankwrites ,rare
 8002984:	f8b7 3120 	ldrh.w	r3, [r7, #288]	; 0x120
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 81e1 	beq.w	8002d50 <sampling+0xae8>
	{
		serial_tosend=1;
 800298e:	4b91      	ldr	r3, [pc, #580]	; (8002bd4 <sampling+0x96c>)
 8002990:	2201      	movs	r2, #1
 8002992:	701a      	strb	r2, [r3, #0]
		//note_reset();
		//note[1].timeshift=(adc_values[1])&31; //assigned pots to start of loopers 0-16,works
		seqpos_i=i+1;   //record postion
 8002994:	4b90      	ldr	r3, [pc, #576]	; (8002bd8 <sampling+0x970>)
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	3301      	adds	r3, #1
 800299a:	b29a      	uxth	r2, r3
 800299c:	4b8f      	ldr	r3, [pc, #572]	; (8002bdc <sampling+0x974>)
 800299e:	801a      	strh	r2, [r3, #0]


	//	note[2].timeshift=note[1].timeshift=note[3].timeshift=note[4].timeshift;
		uint8_t   loop_temp1[4];
		loop_temp1[0]=seq.pos&7;
 80029a0:	4b8a      	ldr	r3, [pc, #552]	; (8002bcc <sampling+0x964>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80029ae:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80029b2:	701a      	strb	r2, [r3, #0]

		seq.loop[0]=(note[0].timeshift+(seq.pos&note[0].slide_length))&31;
 80029b4:	4b8a      	ldr	r3, [pc, #552]	; (8002be0 <sampling+0x978>)
 80029b6:	799a      	ldrb	r2, [r3, #6]
 80029b8:	4b84      	ldr	r3, [pc, #528]	; (8002bcc <sampling+0x964>)
 80029ba:	7819      	ldrb	r1, [r3, #0]
 80029bc:	4b88      	ldr	r3, [pc, #544]	; (8002be0 <sampling+0x978>)
 80029be:	7a5b      	ldrb	r3, [r3, #9]
 80029c0:	400b      	ands	r3, r1
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	4413      	add	r3, r2
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	f003 031f 	and.w	r3, r3, #31
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	4b7f      	ldr	r3, [pc, #508]	; (8002bcc <sampling+0x964>)
 80029d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		seq.loop[1]=(note[1].timeshift+(seq.pos&note[1].slide_length))&31;
 80029d4:	4b82      	ldr	r3, [pc, #520]	; (8002be0 <sampling+0x978>)
 80029d6:	7d9a      	ldrb	r2, [r3, #22]
 80029d8:	4b7c      	ldr	r3, [pc, #496]	; (8002bcc <sampling+0x964>)
 80029da:	7819      	ldrb	r1, [r3, #0]
 80029dc:	4b80      	ldr	r3, [pc, #512]	; (8002be0 <sampling+0x978>)
 80029de:	7e5b      	ldrb	r3, [r3, #25]
 80029e0:	400b      	ands	r3, r1
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	4413      	add	r3, r2
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	f003 031f 	and.w	r3, r3, #31
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	4b77      	ldr	r3, [pc, #476]	; (8002bcc <sampling+0x964>)
 80029f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		seq.loop[2]=(note[2].timeshift+(seq.pos&note[2].slide_length))&31; // this is really handy with sync to notes
 80029f4:	4b7a      	ldr	r3, [pc, #488]	; (8002be0 <sampling+0x978>)
 80029f6:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80029fa:	4b74      	ldr	r3, [pc, #464]	; (8002bcc <sampling+0x964>)
 80029fc:	7819      	ldrb	r1, [r3, #0]
 80029fe:	4b78      	ldr	r3, [pc, #480]	; (8002be0 <sampling+0x978>)
 8002a00:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002a04:	400b      	ands	r3, r1
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	4413      	add	r3, r2
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	4b6e      	ldr	r3, [pc, #440]	; (8002bcc <sampling+0x964>)
 8002a14:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		seq.loop[3]=(note[3].timeshift+(seq.pos&note[3].slide_length))&31;
 8002a18:	4b71      	ldr	r3, [pc, #452]	; (8002be0 <sampling+0x978>)
 8002a1a:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8002a1e:	4b6b      	ldr	r3, [pc, #428]	; (8002bcc <sampling+0x964>)
 8002a20:	7819      	ldrb	r1, [r3, #0]
 8002a22:	4b6f      	ldr	r3, [pc, #444]	; (8002be0 <sampling+0x978>)
 8002a24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a28:	400b      	ands	r3, r1
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	f003 031f 	and.w	r3, r3, #31
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	4b65      	ldr	r3, [pc, #404]	; (8002bcc <sampling+0x964>)
 8002a38:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		seq.loop[4]=(note[4].timeshift+(seq.pos&note[4].slide_length))&15;  // use this for sample
 8002a3c:	4b68      	ldr	r3, [pc, #416]	; (8002be0 <sampling+0x978>)
 8002a3e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8002a42:	4b62      	ldr	r3, [pc, #392]	; (8002bcc <sampling+0x964>)
 8002a44:	7819      	ldrb	r1, [r3, #0]
 8002a46:	4b66      	ldr	r3, [pc, #408]	; (8002be0 <sampling+0x978>)
 8002a48:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002a4c:	400b      	ands	r3, r1
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	4413      	add	r3, r2
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	f003 030f 	and.w	r3, r3, #15
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	4b5c      	ldr	r3, [pc, #368]	; (8002bcc <sampling+0x964>)
 8002a5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


		sampler.acurrent_sample=sampler.Snotes1 [seq.loop[4]]; // 0 is none
 8002a60:	4b5a      	ldr	r3, [pc, #360]	; (8002bcc <sampling+0x964>)
 8002a62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a66:	461a      	mov	r2, r3
 8002a68:	4b59      	ldr	r3, [pc, #356]	; (8002bd0 <sampling+0x968>)
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 8002a70:	4b57      	ldr	r3, [pc, #348]	; (8002bd0 <sampling+0x968>)
 8002a72:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		sampler.acurrent_sample2=sampler.Snotes2 [seq.loop[4]]; // 0 is none
 8002a76:	4b55      	ldr	r3, [pc, #340]	; (8002bcc <sampling+0x964>)
 8002a78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4b54      	ldr	r3, [pc, #336]	; (8002bd0 <sampling+0x968>)
 8002a80:	4413      	add	r3, r2
 8002a82:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 8002a86:	4b52      	ldr	r3, [pc, #328]	; (8002bd0 <sampling+0x968>)
 8002a88:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82

		soft_mute=1;  // fade out  start on note change
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
			note[0].pitch=(notes_joined[seq.loop[0]])+(note[0].transpose);    // maybe join 1 and 2
 8002a92:	4b4e      	ldr	r3, [pc, #312]	; (8002bcc <sampling+0x964>)
 8002a94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a98:	461a      	mov	r2, r3
 8002a9a:	4b52      	ldr	r3, [pc, #328]	; (8002be4 <sampling+0x97c>)
 8002a9c:	5c9a      	ldrb	r2, [r3, r2]
 8002a9e:	4b50      	ldr	r3, [pc, #320]	; (8002be0 <sampling+0x978>)
 8002aa0:	795b      	ldrb	r3, [r3, #5]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	4b4e      	ldr	r3, [pc, #312]	; (8002be0 <sampling+0x978>)
 8002aa8:	709a      	strb	r2, [r3, #2]
			//note[0].pitch=note[1].pitch+(note[0].transpose); // just double
			note[1].pitch=(notes_joined[seq.loop[1]])+(note[1].transpose);  //loop 8 notes from pos and x times
 8002aaa:	4b48      	ldr	r3, [pc, #288]	; (8002bcc <sampling+0x964>)
 8002aac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	4b4c      	ldr	r3, [pc, #304]	; (8002be4 <sampling+0x97c>)
 8002ab4:	5c9a      	ldrb	r2, [r3, r2]
 8002ab6:	4b4a      	ldr	r3, [pc, #296]	; (8002be0 <sampling+0x978>)
 8002ab8:	7d5b      	ldrb	r3, [r3, #21]
 8002aba:	4413      	add	r3, r2
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	4b48      	ldr	r3, [pc, #288]	; (8002be0 <sampling+0x978>)
 8002ac0:	749a      	strb	r2, [r3, #18]
			note[2].pitch=(notes_joined[seq.loop[2]])+(note[2].transpose);  //loop 8 notes from pos and x times
 8002ac2:	4b42      	ldr	r3, [pc, #264]	; (8002bcc <sampling+0x964>)
 8002ac4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4b46      	ldr	r3, [pc, #280]	; (8002be4 <sampling+0x97c>)
 8002acc:	5c9a      	ldrb	r2, [r3, r2]
 8002ace:	4b44      	ldr	r3, [pc, #272]	; (8002be0 <sampling+0x978>)
 8002ad0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ad4:	4413      	add	r3, r2
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	4b41      	ldr	r3, [pc, #260]	; (8002be0 <sampling+0x978>)
 8002ada:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

		note[3].pitch=(notes_joined[seq.loop[3]])+(note[3].transpose); ;  //loop 8 notes from pos and x times ,might disable normal adsr completely
 8002ade:	4b3b      	ldr	r3, [pc, #236]	; (8002bcc <sampling+0x964>)
 8002ae0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4b3f      	ldr	r3, [pc, #252]	; (8002be4 <sampling+0x97c>)
 8002ae8:	5c9a      	ldrb	r2, [r3, r2]
 8002aea:	4b3d      	ldr	r3, [pc, #244]	; (8002be0 <sampling+0x978>)
 8002aec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002af0:	4413      	add	r3, r2
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	4b3a      	ldr	r3, [pc, #232]	; (8002be0 <sampling+0x978>)
 8002af6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		note[4].position=1;    // should trigger always
 8002afa:	4b39      	ldr	r3, [pc, #228]	; (8002be0 <sampling+0x978>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		// --------------------- sampler
		uint8_t pos_divide=15;
 8002b02:	230f      	movs	r3, #15
 8002b04:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
		if (sampler.repeat) pos_divide=15>>sampler.repeat;
 8002b08:	4b31      	ldr	r3, [pc, #196]	; (8002bd0 <sampling+0x968>)
 8002b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d007      	beq.n	8002b22 <sampling+0x8ba>
 8002b12:	4b2f      	ldr	r3, [pc, #188]	; (8002bd0 <sampling+0x968>)
 8002b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b18:	461a      	mov	r2, r3
 8002b1a:	230f      	movs	r3, #15
 8002b1c:	4113      	asrs	r3, r2
 8002b1e:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d

		if (sampler.trigger_1==((seq.pos&pos_divide)+1))  sampler.trigger_position=1;
 8002b22:	4b2b      	ldr	r3, [pc, #172]	; (8002bd0 <sampling+0x968>)
 8002b24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4b28      	ldr	r3, [pc, #160]	; (8002bcc <sampling+0x964>)
 8002b2c:	781a      	ldrb	r2, [r3, #0]
 8002b2e:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8002b32:	4013      	ands	r3, r2
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	3301      	adds	r3, #1
 8002b38:	4299      	cmp	r1, r3
 8002b3a:	d103      	bne.n	8002b44 <sampling+0x8dc>
 8002b3c:	4b24      	ldr	r3, [pc, #144]	; (8002bd0 <sampling+0x968>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (sampler.trigger_2==((seq.pos&pos_divide)+1))  sampler.trigger_position=1;
 8002b44:	4b22      	ldr	r3, [pc, #136]	; (8002bd0 <sampling+0x968>)
 8002b46:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4b1f      	ldr	r3, [pc, #124]	; (8002bcc <sampling+0x964>)
 8002b4e:	781a      	ldrb	r2, [r3, #0]
 8002b50:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8002b54:	4013      	ands	r3, r2
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	3301      	adds	r3, #1
 8002b5a:	4299      	cmp	r1, r3
 8002b5c:	d103      	bne.n	8002b66 <sampling+0x8fe>
 8002b5e:	4b1c      	ldr	r3, [pc, #112]	; (8002bd0 <sampling+0x968>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (sampler.trigger_3==((seq.pos&pos_divide)+1))  sampler.trigger_position=1;
 8002b66:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <sampling+0x968>)
 8002b68:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4b17      	ldr	r3, [pc, #92]	; (8002bcc <sampling+0x964>)
 8002b70:	781a      	ldrb	r2, [r3, #0]
 8002b72:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8002b76:	4013      	ands	r3, r2
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	4299      	cmp	r1, r3
 8002b7e:	d103      	bne.n	8002b88 <sampling+0x920>
 8002b80:	4b13      	ldr	r3, [pc, #76]	; (8002bd0 <sampling+0x968>)
 8002b82:	2201      	movs	r2, #1
 8002b84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (sampler.trigger_4==((seq.pos&pos_divide)+1))  sampler.trigger_position=1;
 8002b88:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <sampling+0x968>)
 8002b8a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4b0e      	ldr	r3, [pc, #56]	; (8002bcc <sampling+0x964>)
 8002b92:	781a      	ldrb	r2, [r3, #0]
 8002b94:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8002b98:	4013      	ands	r3, r2
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	4299      	cmp	r1, r3
 8002ba0:	d103      	bne.n	8002baa <sampling+0x942>
 8002ba2:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <sampling+0x968>)
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	//	if(sampler.trigger_position) note[3].position=sampling_position+1;

		patch_target_replace();
 8002baa:	f7fe fd75 	bl	8001698 <patch_target_replace>
		uint8_t detune_temp=0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
//		if(detune_temp>27) detune_temp=27;
		   //this is for sine skip mask

//	note[3].tuned=sine_lut[MajorNote[detune_temp]];	//sets freq ,1.0594  * 16536 =17518  ,
//	note[3].tuned= (note[3].tuned*1200)>>10;  // modify different sample size , just need single cycle length and thats it
		mask_result =0;
 8002bb4:	4b0c      	ldr	r3, [pc, #48]	; (8002be8 <sampling+0x980>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	801a      	strh	r2, [r3, #0]
		uint8_t note_number;
		for (mask_i=0;mask_i<4;mask_i++)	{							// calc detune , slow ,also creates notes
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
 8002bc0:	e0c1      	b.n	8002d46 <sampling+0xade>
 8002bc2:	bf00      	nop
 8002bc4:	2000bf1a 	.word	0x2000bf1a
 8002bc8:	2000bef0 	.word	0x2000bef0
 8002bcc:	2000d0bc 	.word	0x2000d0bc
 8002bd0:	20008edc 	.word	0x20008edc
 8002bd4:	2000e2a1 	.word	0x2000e2a1
 8002bd8:	200096de 	.word	0x200096de
 8002bdc:	2000f330 	.word	0x2000f330
 8002be0:	20008e1c 	.word	0x20008e1c
 8002be4:	2000e07c 	.word	0x2000e07c
 8002be8:	2000a6ec 	.word	0x2000a6ec

			if  (note[mask_i].osc<3)  { if (seq.loop[mask_i]==0)  {note[mask_i].position=0;   } else  note[mask_i].position=sampling_position+1;    }   // disables trigger ?
 8002bec:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8002bf0:	4ab1      	ldr	r2, [pc, #708]	; (8002eb8 <sampling+0xc50>)
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	4413      	add	r3, r2
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d81c      	bhi.n	8002c36 <sampling+0x9ce>
 8002bfc:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8002c00:	4aae      	ldr	r2, [pc, #696]	; (8002ebc <sampling+0xc54>)
 8002c02:	4413      	add	r3, r2
 8002c04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d108      	bne.n	8002c1e <sampling+0x9b6>
 8002c0c:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8002c10:	4aa9      	ldr	r2, [pc, #676]	; (8002eb8 <sampling+0xc50>)
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	4413      	add	r3, r2
 8002c16:	3304      	adds	r3, #4
 8002c18:	2200      	movs	r2, #0
 8002c1a:	701a      	strb	r2, [r3, #0]
 8002c1c:	e00b      	b.n	8002c36 <sampling+0x9ce>
 8002c1e:	4ba8      	ldr	r3, [pc, #672]	; (8002ec0 <sampling+0xc58>)
 8002c20:	781a      	ldrb	r2, [r3, #0]
 8002c22:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8002c26:	3201      	adds	r2, #1
 8002c28:	b2d1      	uxtb	r1, r2
 8002c2a:	4aa3      	ldr	r2, [pc, #652]	; (8002eb8 <sampling+0xc50>)
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	4413      	add	r3, r2
 8002c30:	3304      	adds	r3, #4
 8002c32:	460a      	mov	r2, r1
 8002c34:	701a      	strb	r2, [r3, #0]

			// disable note on lowest , optional

		    detune_temp=note[mask_i].pitch+note[mask_i].detune;
 8002c36:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8002c3a:	4a9f      	ldr	r2, [pc, #636]	; (8002eb8 <sampling+0xc50>)
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	4413      	add	r3, r2
 8002c40:	3302      	adds	r3, #2
 8002c42:	781a      	ldrb	r2, [r3, #0]
 8002c44:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8002c48:	499b      	ldr	r1, [pc, #620]	; (8002eb8 <sampling+0xc50>)
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	440b      	add	r3, r1
 8002c4e:	3308      	adds	r3, #8
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	4413      	add	r3, r2
 8002c54:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c


		    if (detune_temp>pitch_limit ) detune_temp=pitch_limit;
 8002c58:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8002c5c:	2b3c      	cmp	r3, #60	; 0x3c
 8002c5e:	d902      	bls.n	8002c66 <sampling+0x9fe>
 8002c60:	233c      	movs	r3, #60	; 0x3c
 8002c62:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
		    if (detune_temp>30 )   note_number=MinorNote[detune_temp-31];    // for now
 8002c66:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8002c6a:	2b1e      	cmp	r3, #30
 8002c6c:	d907      	bls.n	8002c7e <sampling+0xa16>
 8002c6e:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8002c72:	3b1f      	subs	r3, #31
 8002c74:	4a93      	ldr	r2, [pc, #588]	; (8002ec4 <sampling+0xc5c>)
 8002c76:	5cd3      	ldrb	r3, [r2, r3]
 8002c78:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
 8002c7c:	e005      	b.n	8002c8a <sampling+0xa22>
		    else note_number=MajorNote[detune_temp];
 8002c7e:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8002c82:	4a91      	ldr	r2, [pc, #580]	; (8002ec8 <sampling+0xc60>)
 8002c84:	5cd3      	ldrb	r3, [r2, r3]
 8002c86:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
		    float tune_temp=sample_Noteadd[note_number];
 8002c8a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8002c8e:	4a8f      	ldr	r2, [pc, #572]	; (8002ecc <sampling+0xc64>)
 8002c90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c94:	ee07 3a90 	vmov	s15, r3
 8002c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c9c:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
		    if ((note[mask_i].velocity)&&(note[mask_i].osc))	    LCD_Info[15+mask_i]=major_notes[note_number]; else LCD_Info[15+mask_i]=95;
 8002ca0:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8002ca4:	4a84      	ldr	r2, [pc, #528]	; (8002eb8 <sampling+0xc50>)
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	4413      	add	r3, r2
 8002caa:	3307      	adds	r3, #7
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d011      	beq.n	8002cd6 <sampling+0xa6e>
 8002cb2:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8002cb6:	4a80      	ldr	r2, [pc, #512]	; (8002eb8 <sampling+0xc50>)
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	4413      	add	r3, r2
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d009      	beq.n	8002cd6 <sampling+0xa6e>
 8002cc2:	f897 211b 	ldrb.w	r2, [r7, #283]	; 0x11b
 8002cc6:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8002cca:	330f      	adds	r3, #15
 8002ccc:	4980      	ldr	r1, [pc, #512]	; (8002ed0 <sampling+0xc68>)
 8002cce:	5c89      	ldrb	r1, [r1, r2]
 8002cd0:	4a80      	ldr	r2, [pc, #512]	; (8002ed4 <sampling+0xc6c>)
 8002cd2:	54d1      	strb	r1, [r2, r3]
 8002cd4:	e005      	b.n	8002ce2 <sampling+0xa7a>
 8002cd6:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8002cda:	330f      	adds	r3, #15
 8002cdc:	4a7d      	ldr	r2, [pc, #500]	; (8002ed4 <sampling+0xc6c>)
 8002cde:	215f      	movs	r1, #95	; 0x5f
 8002ce0:	54d1      	strb	r1, [r2, r3]
		    //note[mask_i].tuned=sample_Noteadd[MajorNote[detune_temp]];   // put unit tune here


		    if (notes_joined[seq.loop[mask_i]] )		note[mask_i].tuned=tune_temp*0.99;	// this works
 8002ce2:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8002ce6:	4a75      	ldr	r2, [pc, #468]	; (8002ebc <sampling+0xc54>)
 8002ce8:	4413      	add	r3, r2
 8002cea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cee:	461a      	mov	r2, r3
 8002cf0:	4b79      	ldr	r3, [pc, #484]	; (8002ed8 <sampling+0xc70>)
 8002cf2:	5c9b      	ldrb	r3, [r3, r2]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d019      	beq.n	8002d2c <sampling+0xac4>
 8002cf8:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002cfc:	f7fd fd02 	bl	8000704 <__aeabi_f2d>
 8002d00:	a36b      	add	r3, pc, #428	; (adr r3, 8002eb0 <sampling+0xc48>)
 8002d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d06:	f7fd fa6f 	bl	80001e8 <__aeabi_dmul>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	f897 4123 	ldrb.w	r4, [r7, #291]	; 0x123
 8002d12:	4610      	mov	r0, r2
 8002d14:	4619      	mov	r1, r3
 8002d16:	f7fd fd4d 	bl	80007b4 <__aeabi_d2uiz>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	b299      	uxth	r1, r3
 8002d1e:	4a66      	ldr	r2, [pc, #408]	; (8002eb8 <sampling+0xc50>)
 8002d20:	0123      	lsls	r3, r4, #4
 8002d22:	4413      	add	r3, r2
 8002d24:	330e      	adds	r3, #14
 8002d26:	460a      	mov	r2, r1
 8002d28:	801a      	strh	r2, [r3, #0]
 8002d2a:	e007      	b.n	8002d3c <sampling+0xad4>
		    else note[mask_i].position=0;  // no retrigger on off note
 8002d2c:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8002d30:	4a61      	ldr	r2, [pc, #388]	; (8002eb8 <sampling+0xc50>)
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	4413      	add	r3, r2
 8002d36:	3304      	adds	r3, #4
 8002d38:	2200      	movs	r2, #0
 8002d3a:	701a      	strb	r2, [r3, #0]
		for (mask_i=0;mask_i<4;mask_i++)	{							// calc detune , slow ,also creates notes
 8002d3c:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8002d40:	3301      	adds	r3, #1
 8002d42:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
 8002d46:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8002d4a:	2b03      	cmp	r3, #3
 8002d4c:	f67f af4e 	bls.w	8002bec <sampling+0x984>
		//note_tuned[3]=2751;
	} // end of note calcualte



	if ((i&63)==0)
 8002d50:	4b62      	ldr	r3, [pc, #392]	; (8002edc <sampling+0xc74>)
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d105      	bne.n	8002d68 <sampling+0xb00>
	{
	    LFO_square_one_pulse();
 8002d5c:	f000 ff24 	bl	8003ba8 <LFO_square_one_pulse>
	    ADSR_loop();   // change to sound instead of channel  , use 4 for sample
 8002d60:	f001 f974 	bl	800404c <ADSR_loop>
		LFO_source_synced();
 8002d64:	f000 ffb0 	bl	8003cc8 <LFO_source_synced>
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002d68:	4b5c      	ldr	r3, [pc, #368]	; (8002edc <sampling+0xc74>)
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	4b5a      	ldr	r3, [pc, #360]	; (8002edc <sampling+0xc74>)
 8002d72:	801a      	strh	r2, [r3, #0]
 8002d74:	4b59      	ldr	r3, [pc, #356]	; (8002edc <sampling+0xc74>)
 8002d76:	881b      	ldrh	r3, [r3, #0]
 8002d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d7c:	f4ff ad9a 	bcc.w	80028b4 <sampling+0x64c>
int32_t  sample_temp1;
int32_t  sample_temp3;
int32_t  sample_temp4;
int32_t  sample_temp5;
int32_t  sample_temp6;
int32_t  sample_temp7=0;
 8002d80:	2300      	movs	r3, #0
 8002d82:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

memcpy(&sample_counts_temp,sample_counts_holder,80);
 8002d86:	4a56      	ldr	r2, [pc, #344]	; (8002ee0 <sampling+0xc78>)
 8002d88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d8c:	4611      	mov	r1, r2
 8002d8e:	2250      	movs	r2, #80	; 0x50
 8002d90:	4618      	mov	r0, r3
 8002d92:	f00a fb47 	bl	800d424 <memcpy>

sample_counts_temp[30]=note[0].tuned;
 8002d96:	4b48      	ldr	r3, [pc, #288]	; (8002eb8 <sampling+0xc50>)
 8002d98:	89db      	ldrh	r3, [r3, #14]
 8002d9a:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
sample_counts_temp[31]=note[1].tuned;
 8002d9e:	4b46      	ldr	r3, [pc, #280]	; (8002eb8 <sampling+0xc50>)
 8002da0:	8bdb      	ldrh	r3, [r3, #30]
 8002da2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
sample_counts_temp[32]=note[2].tuned;
 8002da6:	4b44      	ldr	r3, [pc, #272]	; (8002eb8 <sampling+0xc50>)
 8002da8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002daa:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
sample_counts_temp[33]=note[3].tuned;
 8002dae:	4b42      	ldr	r3, [pc, #264]	; (8002eb8 <sampling+0xc50>)
 8002db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002db2:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
static uint32_t*  sine_ptr_temp[5];


//tuned_list[0]=6397;
uint16_t accu_count[4];
memcpy(&accu_count,sample_accu_counter,8);  // copy counters
 8002db6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002dba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002dbe:	4a49      	ldr	r2, [pc, #292]	; (8002ee4 <sampling+0xc7c>)
 8002dc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002dc4:	e883 0003 	stmia.w	r3, {r0, r1}

memcpy(&sample_accus,sample_accus_hold,16);    // this is good
 8002dc8:	2210      	movs	r2, #16
 8002dca:	4947      	ldr	r1, [pc, #284]	; (8002ee8 <sampling+0xc80>)
 8002dcc:	4847      	ldr	r0, [pc, #284]	; (8002eec <sampling+0xc84>)
 8002dce:	f00a fb29 	bl	800d424 <memcpy>



	//if((sampler.ram_seq&255)==0)	  sampler_1k_load(sample_flash_address);

	counter_16=counter_16+2;   // jump 512 bytes
 8002dd2:	4b47      	ldr	r3, [pc, #284]	; (8002ef0 <sampling+0xc88>)
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	3302      	adds	r3, #2
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	4b45      	ldr	r3, [pc, #276]	; (8002ef0 <sampling+0xc88>)
 8002ddc:	801a      	strh	r2, [r3, #0]
	//    if (sampler.ram_seq>14000) memcpy(&error_data,flash_read_block2,127);

	uint16_t*   ram_ptr=  &RAM	;  // pointer goes to LSB !!!!
 8002dde:	4b45      	ldr	r3, [pc, #276]	; (8002ef4 <sampling+0xc8c>)
 8002de0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	//uint16_t* sample_ptr= &flash_read_block;



	if(RAM_looper>=16383) RAM_looper=0;  // with 256 we have every 64 points along the sample for position
 8002de4:	4b44      	ldr	r3, [pc, #272]	; (8002ef8 <sampling+0xc90>)
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	f643 72fe 	movw	r2, #16382	; 0x3ffe
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d902      	bls.n	8002df6 <sampling+0xb8e>
 8002df0:	4b41      	ldr	r3, [pc, #260]	; (8002ef8 <sampling+0xc90>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	801a      	strh	r2, [r3, #0]
	int32_t   sample_adc_temp;
//	if ((sampler.ram_seq&255)==0)  ram_ptr=  &flash_read_block[128];
	uint16_t looper_point=0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
//	float pitch_counter=1;

//	ram_float=(1<<20) /(1.059463*ram_float);

  flash_read_a=0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2

	for (i=0;i<512;i++){    // convert to signed , also use this for double buffer (no bank switch) 512 *16 is enough
 8002e02:	4b36      	ldr	r3, [pc, #216]	; (8002edc <sampling+0xc74>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	801a      	strh	r2, [r3, #0]
 8002e08:	e02b      	b.n	8002e62 <sampling+0xbfa>

	 //   flash_read_a= *(sample_ptr2+i);
	    flash_read_a= *(sample_ptr2+i) - 32767;
 8002e0a:	4b3c      	ldr	r3, [pc, #240]	; (8002efc <sampling+0xc94>)
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	4b33      	ldr	r3, [pc, #204]	; (8002edc <sampling+0xc74>)
 8002e10:	881b      	ldrh	r3, [r3, #0]
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	4413      	add	r3, r2
 8002e16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8002e20:	3b7f      	subs	r3, #127	; 0x7f
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	b21b      	sxth	r3, r3
 8002e26:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
					if ((flash_read_a==32767)   ||  (flash_read_a==-32767))   flash_read_a=0;    // stop clicks from FF bytes
 8002e2a:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 8002e2e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d004      	beq.n	8002e40 <sampling+0xbd8>
 8002e36:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 8002e3a:	4a31      	ldr	r2, [pc, #196]	; (8002f00 <sampling+0xc98>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d102      	bne.n	8002e46 <sampling+0xbde>
 8002e40:	2300      	movs	r3, #0
 8002e42:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
					memcpy(&flash_read_block3[i*2],&flash_read_a,2);   // load second set ,hopefully
 8002e46:	4b25      	ldr	r3, [pc, #148]	; (8002edc <sampling+0xc74>)
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	4a2d      	ldr	r2, [pc, #180]	; (8002f04 <sampling+0xc9c>)
 8002e4e:	4413      	add	r3, r2
 8002e50:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	; 0xc2
 8002e54:	801a      	strh	r2, [r3, #0]
	for (i=0;i<512;i++){    // convert to signed , also use this for double buffer (no bank switch) 512 *16 is enough
 8002e56:	4b21      	ldr	r3, [pc, #132]	; (8002edc <sampling+0xc74>)
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	4b1f      	ldr	r3, [pc, #124]	; (8002edc <sampling+0xc74>)
 8002e60:	801a      	strh	r2, [r3, #0]
 8002e62:	4b1e      	ldr	r3, [pc, #120]	; (8002edc <sampling+0xc74>)
 8002e64:	881b      	ldrh	r3, [r3, #0]
 8002e66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e6a:	d3ce      	bcc.n	8002e0a <sampling+0xba2>
	}

///    downsample  is a no go without playback from RAM , leave it , work on loops etc
//	sine_count_sample();   //change playback rate

	 if (LFO_square[0].out[0]>10) LCD_Info[60]=94  ;  else LCD_Info[60]=95;
 8002e6c:	4b26      	ldr	r3, [pc, #152]	; (8002f08 <sampling+0xca0>)
 8002e6e:	889b      	ldrh	r3, [r3, #4]
 8002e70:	2b0a      	cmp	r3, #10
 8002e72:	d904      	bls.n	8002e7e <sampling+0xc16>
 8002e74:	4b17      	ldr	r3, [pc, #92]	; (8002ed4 <sampling+0xc6c>)
 8002e76:	225e      	movs	r2, #94	; 0x5e
 8002e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002e7c:	e003      	b.n	8002e86 <sampling+0xc1e>
 8002e7e:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <sampling+0xc6c>)
 8002e80:	225f      	movs	r2, #95	; 0x5f
 8002e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	 if (LFO_square[2].out[0]>10) LCD_Info[60]=94  ;  else LCD_Info[62]=95;
 8002e86:	4b20      	ldr	r3, [pc, #128]	; (8002f08 <sampling+0xca0>)
 8002e88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e8a:	2b0a      	cmp	r3, #10
 8002e8c:	d904      	bls.n	8002e98 <sampling+0xc30>
 8002e8e:	4b11      	ldr	r3, [pc, #68]	; (8002ed4 <sampling+0xc6c>)
 8002e90:	225e      	movs	r2, #94	; 0x5e
 8002e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002e96:	e003      	b.n	8002ea0 <sampling+0xc38>
 8002e98:	4b0e      	ldr	r3, [pc, #56]	; (8002ed4 <sampling+0xc6c>)
 8002e9a:	225f      	movs	r2, #95	; 0x5f
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	 uint8_t sampler_adder_enable=1;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed

		// TIME FINAL IS 68 UP TO HERE ATM
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002ea6:	4b0d      	ldr	r3, [pc, #52]	; (8002edc <sampling+0xc74>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	801a      	strh	r2, [r3, #0]
 8002eac:	e318      	b.n	80034e0 <sampling+0x1278>
 8002eae:	bf00      	nop
 8002eb0:	7ae147ae 	.word	0x7ae147ae
 8002eb4:	3fefae14 	.word	0x3fefae14
 8002eb8:	20008e1c 	.word	0x20008e1c
 8002ebc:	2000d0bc 	.word	0x2000d0bc
 8002ec0:	2000e078 	.word	0x2000e078
 8002ec4:	0800f300 	.word	0x0800f300
 8002ec8:	0800f2e0 	.word	0x0800f2e0
 8002ecc:	0800f320 	.word	0x0800f320
 8002ed0:	0800f29c 	.word	0x0800f29c
 8002ed4:	2000f2b8 	.word	0x2000f2b8
 8002ed8:	2000e07c 	.word	0x2000e07c
 8002edc:	200096de 	.word	0x200096de
 8002ee0:	20009408 	.word	0x20009408
 8002ee4:	20009458 	.word	0x20009458
 8002ee8:	2000bef4 	.word	0x2000bef4
 8002eec:	200107fc 	.word	0x200107fc
 8002ef0:	2000ff3c 	.word	0x2000ff3c
 8002ef4:	200001b8 	.word	0x200001b8
 8002ef8:	2000ff4e 	.word	0x2000ff4e
 8002efc:	20008f78 	.word	0x20008f78
 8002f00:	ffff8001 	.word	0xffff8001
 8002f04:	2000fb3c 	.word	0x2000fb3c
 8002f08:	2000cf5c 	.word	0x2000cf5c
	i_total=i+sample_pointB;
 8002f0c:	4b44      	ldr	r3, [pc, #272]	; (8003020 <sampling+0xdb8>)
 8002f0e:	881a      	ldrh	r2, [r3, #0]
 8002f10:	4b44      	ldr	r3, [pc, #272]	; (8003024 <sampling+0xdbc>)
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	4413      	add	r3, r2
 8002f16:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
	sampling_position=(i>>6);
 8002f1a:	4b41      	ldr	r3, [pc, #260]	; (8003020 <sampling+0xdb8>)
 8002f1c:	881b      	ldrh	r3, [r3, #0]
 8002f1e:	099b      	lsrs	r3, r3, #6
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	4b40      	ldr	r3, [pc, #256]	; (8003028 <sampling+0xdc0>)
 8002f26:	701a      	strb	r2, [r3, #0]
	sampler_adder_enable=1;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
	if (sound_enable[5]) 		 {
 8002f2e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d01d      	beq.n	8002f72 <sampling+0xd0a>
	sample_adc_temp=input_holder[((adc_playback_position++)&1023)>>1];
 8002f36:	4b3d      	ldr	r3, [pc, #244]	; (800302c <sampling+0xdc4>)
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	b291      	uxth	r1, r2
 8002f3e:	4a3b      	ldr	r2, [pc, #236]	; (800302c <sampling+0xdc4>)
 8002f40:	8011      	strh	r1, [r2, #0]
 8002f42:	105b      	asrs	r3, r3, #1
 8002f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f48:	4a39      	ldr	r2, [pc, #228]	; (8003030 <sampling+0xdc8>)
 8002f4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	sample_adc_temp=(sample_adc_temp-32767)<<4;
 8002f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f56:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8002f5a:	3b7f      	subs	r3, #127	; 0x7f
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	sample_adc=(sample_adc_temp+sample_adc)>>1;}
 8002f62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f6a:	4413      	add	r3, r2
 8002f6c:	105b      	asrs	r3, r3, #1
 8002f6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	if (sound_enable[6]) 		 {
 8002f72:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d01e      	beq.n	8002fb8 <sampling+0xd50>
	looper_point=(RAM_looper+(sampler.RAM_offset<<10))&16383;  // will use different data here
 8002f7a:	4b2e      	ldr	r3, [pc, #184]	; (8003034 <sampling+0xdcc>)
 8002f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	029b      	lsls	r3, r3, #10
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	4b2c      	ldr	r3, [pc, #176]	; (8003038 <sampling+0xdd0>)
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002f92:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
	   ram_temp=*(ram_ptr+looper_point);    // works
 8002f96:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8002fa0:	4413      	add	r3, r2
 8002fa2:	881b      	ldrh	r3, [r3, #0]
 8002fa4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	ram_temp=(ram_temp-32767)<<4;
 8002fa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fac:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8002fb0:	3b7f      	subs	r3, #127	; 0x7f
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	}
	//ram_synced= *(ram_ptr+sampler.ram_seq);



	if (sampler.ram_seq<sampler.start_current) {sample_input=0;  ram_synced=32767;}
 8002fb8:	4b1e      	ldr	r3, [pc, #120]	; (8003034 <sampling+0xdcc>)
 8002fba:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 8002fbe:	4b1d      	ldr	r3, [pc, #116]	; (8003034 <sampling+0xdcc>)
 8002fc0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d205      	bcs.n	8002fd4 <sampling+0xd6c>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fcc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002fd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fd2:	e013      	b.n	8002ffc <sampling+0xd94>
	else 	{sample_input=*(signed_ptr+(sampler.ram_seq&255));ram_synced= *(ram_ptr+sampler.ram_seq);}
 8002fd4:	4b17      	ldr	r3, [pc, #92]	; (8003034 <sampling+0xdcc>)
 8002fd6:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fea:	4b12      	ldr	r3, [pc, #72]	; (8003034 <sampling+0xdcc>)
 8002fec:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8002ff6:	4413      	add	r3, r2
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	63bb      	str	r3, [r7, #56]	; 0x38
	ram_synced=(ram_synced-32767)<<4;
 8002ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffe:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8003002:	3b7f      	subs	r3, #127	; 0x7f
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	63bb      	str	r3, [r7, #56]	; 0x38

	if (sampler.ram_seq2<sampler.start_current2)  sample_temp7=0; else
 8003008:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <sampling+0xdcc>)
 800300a:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <sampling+0xdcc>)
 8003010:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8003014:	429a      	cmp	r2, r3
 8003016:	d211      	bcs.n	800303c <sampling+0xdd4>
 8003018:	2300      	movs	r3, #0
 800301a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800301e:	e019      	b.n	8003054 <sampling+0xdec>
 8003020:	200096de 	.word	0x200096de
 8003024:	200096dc 	.word	0x200096dc
 8003028:	2000e078 	.word	0x2000e078
 800302c:	2001039a 	.word	0x2001039a
 8003030:	2000c86c 	.word	0x2000c86c
 8003034:	20008edc 	.word	0x20008edc
 8003038:	2000ff4e 	.word	0x2000ff4e
	sample_temp7=*(sample_ptr3+(sampler.ram_seq2&255));
 800303c:	4bb8      	ldr	r3, [pc, #736]	; (8003320 <sampling+0x10b8>)
 800303e:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8003042:	b2db      	uxtb	r3, r3
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800304a:	4413      	add	r3, r2
 800304c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003050:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114


	if (ram_sync_swap) sample_input=ram_synced;
 8003054:	4bb3      	ldr	r3, [pc, #716]	; (8003324 <sampling+0x10bc>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <sampling+0xdf8>
 800305c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if  (sampler_mute[0])  sample_input=0;    // mute   , stops click on start
 8003060:	4bb1      	ldr	r3, [pc, #708]	; (8003328 <sampling+0x10c0>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <sampling+0xe04>
 8003068:	2300      	movs	r3, #0
 800306a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if  (sampler_mute[1])  sample_temp7=0;
 800306c:	4bae      	ldr	r3, [pc, #696]	; (8003328 <sampling+0x10c0>)
 800306e:	785b      	ldrb	r3, [r3, #1]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <sampling+0xe12>
 8003074:	2300      	movs	r3, #0
 8003076:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	//sample_input=sample_input<<3;
//	sample_temp7=sample_temp7<<3;
		if	((i&1)==1)   {  RAM_looper++;sampler.ram_seq++; sampler.ram_seq2++; }
 800307a:	4bac      	ldr	r3, [pc, #688]	; (800332c <sampling+0x10c4>)
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d015      	beq.n	80030b2 <sampling+0xe4a>
 8003086:	4baa      	ldr	r3, [pc, #680]	; (8003330 <sampling+0x10c8>)
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	3301      	adds	r3, #1
 800308c:	b29a      	uxth	r2, r3
 800308e:	4ba8      	ldr	r3, [pc, #672]	; (8003330 <sampling+0x10c8>)
 8003090:	801a      	strh	r2, [r3, #0]
 8003092:	4ba3      	ldr	r3, [pc, #652]	; (8003320 <sampling+0x10b8>)
 8003094:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8003098:	3301      	adds	r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	4ba0      	ldr	r3, [pc, #640]	; (8003320 <sampling+0x10b8>)
 800309e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 80030a2:	4b9f      	ldr	r3, [pc, #636]	; (8003320 <sampling+0x10b8>)
 80030a4:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 80030a8:	3301      	adds	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	4b9c      	ldr	r3, [pc, #624]	; (8003320 <sampling+0x10b8>)
 80030ae:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e


	if (i==seqpos_i) {sample_counts_temp[20]=sample_counts_temp[30]; 		//delay tuned changed till correct time
 80030b2:	4b9e      	ldr	r3, [pc, #632]	; (800332c <sampling+0x10c4>)
 80030b4:	881a      	ldrh	r2, [r3, #0]
 80030b6:	4b9f      	ldr	r3, [pc, #636]	; (8003334 <sampling+0x10cc>)
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d10f      	bne.n	80030de <sampling+0xe76>
 80030be:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80030c2:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
	sample_counts_temp[21]=sample_counts_temp[31];
 80030c6:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80030ca:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	sample_counts_temp[22]=sample_counts_temp[32];
 80030ce:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80030d2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	sample_counts_temp[23]=sample_counts_temp[33];
 80030d6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80030da:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	}

	if ((i&63)==0)	{
 80030de:	4b93      	ldr	r3, [pc, #588]	; (800332c <sampling+0x10c4>)
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f040 8095 	bne.w	8003216 <sampling+0xfae>

	    //  LFO_source_new(); // calculate lfo maybe 8 times for now
	   patch_target_replace();    // update values , not too bad
 80030ec:	f7fe fad4 	bl	8001698 <patch_target_replace>
float freq_temp=arm_sin_f32(filter[0].cutoff_1*0.006159)    ;   // need this for useful filter
 80030f0:	4b91      	ldr	r3, [pc, #580]	; (8003338 <sampling+0x10d0>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7fd faf3 	bl	80006e0 <__aeabi_i2d>
 80030fa:	a385      	add	r3, pc, #532	; (adr r3, 8003310 <sampling+0x10a8>)
 80030fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003100:	f7fd f872 	bl	80001e8 <__aeabi_dmul>
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	4610      	mov	r0, r2
 800310a:	4619      	mov	r1, r3
 800310c:	f7fd fb72 	bl	80007f4 <__aeabi_d2f>
 8003110:	4603      	mov	r3, r0
 8003112:	ee00 3a10 	vmov	s0, r3
 8003116:	f00a f913 	bl	800d340 <arm_sin_f32>
 800311a:	ed87 0a38 	vstr	s0, [r7, #224]	; 0xe0
	freq_pointer[0] [sampling_position]=1-freq_temp; // problem was selecting accu instead of out , good now
 800311e:	4b87      	ldr	r3, [pc, #540]	; (800333c <sampling+0x10d4>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003126:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800312a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800312e:	4a84      	ldr	r2, [pc, #528]	; (8003340 <sampling+0x10d8>)
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	edc3 7a00 	vstr	s15, [r3]
	 freq_temp=arm_sin_f32(filter[1].cutoff_1*0.006)    ;
 8003138:	4b7f      	ldr	r3, [pc, #508]	; (8003338 <sampling+0x10d0>)
 800313a:	7a1b      	ldrb	r3, [r3, #8]
 800313c:	4618      	mov	r0, r3
 800313e:	f7fd facf 	bl	80006e0 <__aeabi_i2d>
 8003142:	a375      	add	r3, pc, #468	; (adr r3, 8003318 <sampling+0x10b0>)
 8003144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003148:	f7fd f84e 	bl	80001e8 <__aeabi_dmul>
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	4610      	mov	r0, r2
 8003152:	4619      	mov	r1, r3
 8003154:	f7fd fb4e 	bl	80007f4 <__aeabi_d2f>
 8003158:	4603      	mov	r3, r0
 800315a:	ee00 3a10 	vmov	s0, r3
 800315e:	f00a f8ef 	bl	800d340 <arm_sin_f32>
 8003162:	ed87 0a38 	vstr	s0, [r7, #224]	; 0xe0
	freq_pointer[1] [sampling_position] =1-freq_temp ; // filter lfos
 8003166:	4b75      	ldr	r3, [pc, #468]	; (800333c <sampling+0x10d4>)
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800316e:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8003172:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003176:	4a72      	ldr	r2, [pc, #456]	; (8003340 <sampling+0x10d8>)
 8003178:	3309      	adds	r3, #9
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	edc3 7a00 	vstr	s15, [r3]
	freq_temp=arm_sin_f32(filter[2].cutoff_1*0.006)    ;
 8003182:	4b6d      	ldr	r3, [pc, #436]	; (8003338 <sampling+0x10d0>)
 8003184:	7c1b      	ldrb	r3, [r3, #16]
 8003186:	4618      	mov	r0, r3
 8003188:	f7fd faaa 	bl	80006e0 <__aeabi_i2d>
 800318c:	a362      	add	r3, pc, #392	; (adr r3, 8003318 <sampling+0x10b0>)
 800318e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003192:	f7fd f829 	bl	80001e8 <__aeabi_dmul>
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4610      	mov	r0, r2
 800319c:	4619      	mov	r1, r3
 800319e:	f7fd fb29 	bl	80007f4 <__aeabi_d2f>
 80031a2:	4603      	mov	r3, r0
 80031a4:	ee00 3a10 	vmov	s0, r3
 80031a8:	f00a f8ca 	bl	800d340 <arm_sin_f32>
 80031ac:	ed87 0a38 	vstr	s0, [r7, #224]	; 0xe0
	freq_pointer[2] [sampling_position] =1-freq_temp ; // filter lfos
 80031b0:	4b62      	ldr	r3, [pc, #392]	; (800333c <sampling+0x10d4>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031b8:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80031bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031c0:	4a5f      	ldr	r2, [pc, #380]	; (8003340 <sampling+0x10d8>)
 80031c2:	3312      	adds	r3, #18
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	edc3 7a00 	vstr	s15, [r3]
	 freq_temp=arm_sin_f32(filter[3].cutoff_1*0.006)    ;
 80031cc:	4b5a      	ldr	r3, [pc, #360]	; (8003338 <sampling+0x10d0>)
 80031ce:	7e1b      	ldrb	r3, [r3, #24]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fd fa85 	bl	80006e0 <__aeabi_i2d>
 80031d6:	a350      	add	r3, pc, #320	; (adr r3, 8003318 <sampling+0x10b0>)
 80031d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031dc:	f7fd f804 	bl	80001e8 <__aeabi_dmul>
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	4610      	mov	r0, r2
 80031e6:	4619      	mov	r1, r3
 80031e8:	f7fd fb04 	bl	80007f4 <__aeabi_d2f>
 80031ec:	4603      	mov	r3, r0
 80031ee:	ee00 3a10 	vmov	s0, r3
 80031f2:	f00a f8a5 	bl	800d340 <arm_sin_f32>
 80031f6:	ed87 0a38 	vstr	s0, [r7, #224]	; 0xe0
	freq_pointer[3] [sampling_position] =1-freq_temp ; // filter lfos
 80031fa:	4b50      	ldr	r3, [pc, #320]	; (800333c <sampling+0x10d4>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003202:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8003206:	ee77 7a67 	vsub.f32	s15, s14, s15
 800320a:	4a4d      	ldr	r2, [pc, #308]	; (8003340 <sampling+0x10d8>)
 800320c:	331b      	adds	r3, #27
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	edc3 7a00 	vstr	s15, [r3]

	}

	if(ADSR[0].release)       note[0].velocity=ADSR[0].buffer[sampling_position]>>2;   // disables LFO on release set to 0
 8003216:	4b4b      	ldr	r3, [pc, #300]	; (8003344 <sampling+0x10dc>)
 8003218:	78db      	ldrb	r3, [r3, #3]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00c      	beq.n	8003238 <sampling+0xfd0>
 800321e:	4b47      	ldr	r3, [pc, #284]	; (800333c <sampling+0x10d4>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	4a48      	ldr	r2, [pc, #288]	; (8003344 <sampling+0x10dc>)
 8003224:	3304      	adds	r3, #4
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	4413      	add	r3, r2
 800322a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800322e:	109b      	asrs	r3, r3, #2
 8003230:	b21b      	sxth	r3, r3
 8003232:	b2da      	uxtb	r2, r3
 8003234:	4b44      	ldr	r3, [pc, #272]	; (8003348 <sampling+0x10e0>)
 8003236:	71da      	strb	r2, [r3, #7]
	if(ADSR[1].release)       note[1].velocity=ADSR[1].buffer[sampling_position]>>2;
 8003238:	4b42      	ldr	r3, [pc, #264]	; (8003344 <sampling+0x10dc>)
 800323a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00c      	beq.n	800325c <sampling+0xff4>
 8003242:	4b3e      	ldr	r3, [pc, #248]	; (800333c <sampling+0x10d4>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	4a3f      	ldr	r2, [pc, #252]	; (8003344 <sampling+0x10dc>)
 8003248:	3313      	adds	r3, #19
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	4413      	add	r3, r2
 800324e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003252:	109b      	asrs	r3, r3, #2
 8003254:	b21b      	sxth	r3, r3
 8003256:	b2da      	uxtb	r2, r3
 8003258:	4b3b      	ldr	r3, [pc, #236]	; (8003348 <sampling+0x10e0>)
 800325a:	75da      	strb	r2, [r3, #23]
	if(ADSR[2].release)       note[2].velocity=ADSR[2].buffer[sampling_position]>>2;
 800325c:	4b39      	ldr	r3, [pc, #228]	; (8003344 <sampling+0x10dc>)
 800325e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00d      	beq.n	8003282 <sampling+0x101a>
 8003266:	4b35      	ldr	r3, [pc, #212]	; (800333c <sampling+0x10d4>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	4a36      	ldr	r2, [pc, #216]	; (8003344 <sampling+0x10dc>)
 800326c:	3322      	adds	r3, #34	; 0x22
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	4413      	add	r3, r2
 8003272:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003276:	109b      	asrs	r3, r3, #2
 8003278:	b21b      	sxth	r3, r3
 800327a:	b2da      	uxtb	r2, r3
 800327c:	4b32      	ldr	r3, [pc, #200]	; (8003348 <sampling+0x10e0>)
 800327e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if(ADSR[3].release)       note[3].velocity=ADSR[3].buffer[sampling_position]>>2;
 8003282:	4b30      	ldr	r3, [pc, #192]	; (8003344 <sampling+0x10dc>)
 8003284:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00d      	beq.n	80032a8 <sampling+0x1040>
 800328c:	4b2b      	ldr	r3, [pc, #172]	; (800333c <sampling+0x10d4>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	4a2c      	ldr	r2, [pc, #176]	; (8003344 <sampling+0x10dc>)
 8003292:	3331      	adds	r3, #49	; 0x31
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	4413      	add	r3, r2
 8003298:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800329c:	109b      	asrs	r3, r3, #2
 800329e:	b21b      	sxth	r3, r3
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	4b29      	ldr	r3, [pc, #164]	; (8003348 <sampling+0x10e0>)
 80032a4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	//if(ADSR[4].release)       note[4].velocity=ADSR[4].buffer[sampling_position]>>2;


	{	  sample_accus[0] = sample_accus[0] + sample_counts_temp[20];}  // normal adder full volume   ,11 inst
 80032a8:	4b28      	ldr	r3, [pc, #160]	; (800334c <sampling+0x10e4>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 80032b0:	4413      	add	r3, r2
 80032b2:	4a26      	ldr	r2, [pc, #152]	; (800334c <sampling+0x10e4>)
 80032b4:	6013      	str	r3, [r2, #0]
	{	sample_accus[1] = sample_accus[1] + sample_counts_temp[21];}
 80032b6:	4b25      	ldr	r3, [pc, #148]	; (800334c <sampling+0x10e4>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 80032be:	4413      	add	r3, r2
 80032c0:	4a22      	ldr	r2, [pc, #136]	; (800334c <sampling+0x10e4>)
 80032c2:	6053      	str	r3, [r2, #4]
	{	sample_accus[2] = sample_accus[2] + sample_counts_temp[22]; }// bouncing somewhere
 80032c4:	4b21      	ldr	r3, [pc, #132]	; (800334c <sampling+0x10e4>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80032cc:	4413      	add	r3, r2
 80032ce:	4a1f      	ldr	r2, [pc, #124]	; (800334c <sampling+0x10e4>)
 80032d0:	6093      	str	r3, [r2, #8]
	{	sample_accus[3] = sample_accus[3] + sample_counts_temp[23]; } // 6 cycles
 80032d2:	4b1e      	ldr	r3, [pc, #120]	; (800334c <sampling+0x10e4>)
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80032da:	4413      	add	r3, r2
 80032dc:	4a1b      	ldr	r2, [pc, #108]	; (800334c <sampling+0x10e4>)
 80032de:	60d3      	str	r3, [r2, #12]

			if (sample_accus[0]>524287) {sample_accus[0] =-0-sample_accus[0] ; } // faster >  than &  ,strange,  or is even worse
 80032e0:	4b1a      	ldr	r3, [pc, #104]	; (800334c <sampling+0x10e4>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80032e8:	db04      	blt.n	80032f4 <sampling+0x108c>
 80032ea:	4b18      	ldr	r3, [pc, #96]	; (800334c <sampling+0x10e4>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	425b      	negs	r3, r3
 80032f0:	4a16      	ldr	r2, [pc, #88]	; (800334c <sampling+0x10e4>)
 80032f2:	6013      	str	r3, [r2, #0]
			if (sample_accus[1]>524287) {sample_accus[1] =-0-sample_accus[1] ;}// faster >  than &  ,conditional statement has no ' & '  in assy
 80032f4:	4b15      	ldr	r3, [pc, #84]	; (800334c <sampling+0x10e4>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80032fc:	db28      	blt.n	8003350 <sampling+0x10e8>
 80032fe:	4b13      	ldr	r3, [pc, #76]	; (800334c <sampling+0x10e4>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	425b      	negs	r3, r3
 8003304:	4a11      	ldr	r2, [pc, #68]	; (800334c <sampling+0x10e4>)
 8003306:	6053      	str	r3, [r2, #4]
 8003308:	e022      	b.n	8003350 <sampling+0x10e8>
 800330a:	bf00      	nop
 800330c:	f3af 8000 	nop.w
 8003310:	f9378ee3 	.word	0xf9378ee3
 8003314:	3f793a2d 	.word	0x3f793a2d
 8003318:	bc6a7efa 	.word	0xbc6a7efa
 800331c:	3f789374 	.word	0x3f789374
 8003320:	20008edc 	.word	0x20008edc
 8003324:	2001039e 	.word	0x2001039e
 8003328:	2001039c 	.word	0x2001039c
 800332c:	200096de 	.word	0x200096de
 8003330:	2000ff4e 	.word	0x2000ff4e
 8003334:	2000f330 	.word	0x2000f330
 8003338:	20008ebc 	.word	0x20008ebc
 800333c:	2000e078 	.word	0x2000e078
 8003340:	2000bf48 	.word	0x2000bf48
 8003344:	2000d024 	.word	0x2000d024
 8003348:	20008e1c 	.word	0x20008e1c
 800334c:	200107fc 	.word	0x200107fc
			if (sample_accus[2]>524287) {sample_accus[2] =-0-sample_accus[2] ;} //
 8003350:	4b74      	ldr	r3, [pc, #464]	; (8003524 <sampling+0x12bc>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003358:	db04      	blt.n	8003364 <sampling+0x10fc>
 800335a:	4b72      	ldr	r3, [pc, #456]	; (8003524 <sampling+0x12bc>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	425b      	negs	r3, r3
 8003360:	4a70      	ldr	r2, [pc, #448]	; (8003524 <sampling+0x12bc>)
 8003362:	6093      	str	r3, [r2, #8]
			if (sample_accus[3]>524287) {sample_accus[3] =-0-sample_accus[3] ;} //  6 cycles
 8003364:	4b6f      	ldr	r3, [pc, #444]	; (8003524 <sampling+0x12bc>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800336c:	db04      	blt.n	8003378 <sampling+0x1110>
 800336e:	4b6d      	ldr	r3, [pc, #436]	; (8003524 <sampling+0x12bc>)
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	425b      	negs	r3, r3
 8003374:	4a6b      	ldr	r2, [pc, #428]	; (8003524 <sampling+0x12bc>)
 8003376:	60d3      	str	r3, [r2, #12]


			if (sound_enable[0]==2)    	{sample_Accu[0]=(abs(sample_accus[0])-262144)<<1;	}  // not much help at all
 8003378:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800337c:	2b02      	cmp	r3, #2
 800337e:	d109      	bne.n	8003394 <sampling+0x112c>
 8003380:	4b68      	ldr	r3, [pc, #416]	; (8003524 <sampling+0x12bc>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	bfb8      	it	lt
 8003388:	425b      	neglt	r3, r3
 800338a:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			if (sound_enable[1]==2)		 	{	sample_Accu[1]=(abs(sample_accus[1])-262144)<<1;}
 8003394:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8003398:	2b02      	cmp	r3, #2
 800339a:	d109      	bne.n	80033b0 <sampling+0x1148>
 800339c:	4b61      	ldr	r3, [pc, #388]	; (8003524 <sampling+0x12bc>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	bfb8      	it	lt
 80033a4:	425b      	neglt	r3, r3
 80033a6:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			if (sound_enable[2]==2)		 	{sample_Accu[2]=(abs(sample_accus[2])-262144)<<1;}
 80033b0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d109      	bne.n	80033cc <sampling+0x1164>
 80033b8:	4b5a      	ldr	r3, [pc, #360]	; (8003524 <sampling+0x12bc>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	bfb8      	it	lt
 80033c0:	425b      	neglt	r3, r3
 80033c2:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			if (sound_enable[3]==2) 				{sample_Accu[3]=(abs(sample_accus[3])-262144)<<1;}
 80033cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d109      	bne.n	80033e8 <sampling+0x1180>
 80033d4:	4b53      	ldr	r3, [pc, #332]	; (8003524 <sampling+0x12bc>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	bfb8      	it	lt
 80033dc:	425b      	neglt	r3, r3
 80033de:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4


			sample_temp1=(*osc_pointers[0])*note[0].velocity;
 80033e8:	4b4f      	ldr	r3, [pc, #316]	; (8003528 <sampling+0x12c0>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a4f      	ldr	r2, [pc, #316]	; (800352c <sampling+0x12c4>)
 80033f0:	79d2      	ldrb	r2, [r2, #7]
 80033f2:	fb02 f303 	mul.w	r3, r2, r3
 80033f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

			sample_temp2=(sample_temp1)>>12;
 80033fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033fe:	131b      	asrs	r3, r3, #12
 8003400:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

			sample_temp1=(*osc_pointers[1])*note[1].velocity; // needs cut a bit  ,default 20bit
 8003404:	4b48      	ldr	r3, [pc, #288]	; (8003528 <sampling+0x12c0>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a48      	ldr	r2, [pc, #288]	; (800352c <sampling+0x12c4>)
 800340c:	7dd2      	ldrb	r2, [r2, #23]
 800340e:	fb02 f303 	mul.w	r3, r2, r3
 8003412:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			sample_temp3=sample_temp1>>12; // 20+8
 8003416:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800341a:	131b      	asrs	r3, r3, #12
 800341c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4


			sample_temp1=(*osc_pointers[2])*note[2].velocity;      // needs some gain fine tune !
 8003420:	4b41      	ldr	r3, [pc, #260]	; (8003528 <sampling+0x12c0>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a41      	ldr	r2, [pc, #260]	; (800352c <sampling+0x12c4>)
 8003428:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800342c:	fb02 f303 	mul.w	r3, r2, r3
 8003430:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			sample_temp4 =sample_temp1>>12;    // 64 default 20+8
 8003434:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003438:	131b      	asrs	r3, r3, #12
 800343a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

		//	{sample_Accu[9]=sample_input;sample_Accu[8]=sample_input;sample_Accu[7]=sample_input;sample_Accu[6]=sample_input;}
					//if (note[3].position) sample_Accu[9]=(ram_temp+sample_Accu[9])>>1; // bit hot , also  add avr

					sample_temp1=(*osc_pointers[3])*	note[3].velocity;  // sine out is 16bit, add 4 then 16+8
 800343e:	4b3a      	ldr	r3, [pc, #232]	; (8003528 <sampling+0x12c0>)
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a39      	ldr	r2, [pc, #228]	; (800352c <sampling+0x12c4>)
 8003446:	f892 2037 	ldrb.w	r2, [r2, #55]	; 0x37
 800344a:	fb02 f303 	mul.w	r3, r2, r3
 800344e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
					   // no envelope for smple
				//	if (soft_mute)  sample_temp6=(*osc_pointers[4])* (256-(i>>1));  else     sample_temp6=(*osc_pointers[4])*note[4].velocity;   // not heavy
					sample_temp6=((*osc_pointers[4])*note[4].velocity)+(sample_temp7*note[5].velocity);
 8003452:	4b35      	ldr	r3, [pc, #212]	; (8003528 <sampling+0x12c0>)
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a34      	ldr	r2, [pc, #208]	; (800352c <sampling+0x12c4>)
 800345a:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 800345e:	fb03 f202 	mul.w	r2, r3, r2
 8003462:	4b32      	ldr	r3, [pc, #200]	; (800352c <sampling+0x12c4>)
 8003464:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8003468:	4619      	mov	r1, r3
 800346a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800346e:	fb01 f303 	mul.w	r3, r1, r3
 8003472:	4413      	add	r3, r2
 8003474:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

					sample_temp5 =sample_temp1>>11;
 8003478:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800347c:	12db      	asrs	r3, r3, #11
 800347e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

	play_holder0[i]=sample_temp2;  // write to bank
 8003482:	4b2b      	ldr	r3, [pc, #172]	; (8003530 <sampling+0x12c8>)
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	4619      	mov	r1, r3
 8003488:	4a2a      	ldr	r2, [pc, #168]	; (8003534 <sampling+0x12cc>)
 800348a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800348e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder1[i]=sample_temp3;
 8003492:	4b27      	ldr	r3, [pc, #156]	; (8003530 <sampling+0x12c8>)
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	4619      	mov	r1, r3
 8003498:	4a27      	ldr	r2, [pc, #156]	; (8003538 <sampling+0x12d0>)
 800349a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800349e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder2[i]=sample_temp4;
 80034a2:	4b23      	ldr	r3, [pc, #140]	; (8003530 <sampling+0x12c8>)
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	4619      	mov	r1, r3
 80034a8:	4a24      	ldr	r2, [pc, #144]	; (800353c <sampling+0x12d4>)
 80034aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80034ae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder3[i]=sample_temp5;
 80034b2:	4b1f      	ldr	r3, [pc, #124]	; (8003530 <sampling+0x12c8>)
 80034b4:	881b      	ldrh	r3, [r3, #0]
 80034b6:	4619      	mov	r1, r3
 80034b8:	4a21      	ldr	r2, [pc, #132]	; (8003540 <sampling+0x12d8>)
 80034ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80034be:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder4[i]=(sample_temp6)>>9;  // clean output , samples
 80034c2:	4b1b      	ldr	r3, [pc, #108]	; (8003530 <sampling+0x12c8>)
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	4619      	mov	r1, r3
 80034c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80034cc:	125b      	asrs	r3, r3, #9
 80034ce:	4a1d      	ldr	r2, [pc, #116]	; (8003544 <sampling+0x12dc>)
 80034d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 80034d4:	4b16      	ldr	r3, [pc, #88]	; (8003530 <sampling+0x12c8>)
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	3301      	adds	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	4b14      	ldr	r3, [pc, #80]	; (8003530 <sampling+0x12c8>)
 80034de:	801a      	strh	r2, [r3, #0]
 80034e0:	4b13      	ldr	r3, [pc, #76]	; (8003530 <sampling+0x12c8>)
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034e8:	f4ff ad10 	bcc.w	8002f0c <sampling+0xca4>

} // end of osc , doing some sound

				//		    if(note[3].position)		sine_counter[9]=sine_counter[9]+256;  // count up when on

    memcpy(&sample_accus_hold,sample_accus,16);
 80034ec:	2210      	movs	r2, #16
 80034ee:	490d      	ldr	r1, [pc, #52]	; (8003524 <sampling+0x12bc>)
 80034f0:	4815      	ldr	r0, [pc, #84]	; (8003548 <sampling+0x12e0>)
 80034f2:	f009 ff97 	bl	800d424 <memcpy>
    memcpy(&sample_accu_counter,accu_count,8);   // copy back
 80034f6:	4915      	ldr	r1, [pc, #84]	; (800354c <sampling+0x12e4>)
 80034f8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80034fc:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8003500:	460b      	mov	r3, r1
 8003502:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003506:	e883 0003 	stmia.w	r3, {r0, r1}
    memcpy(&sample_counts_holder,sample_counts_temp,80);
 800350a:	4b11      	ldr	r3, [pc, #68]	; (8003550 <sampling+0x12e8>)
 800350c:	4618      	mov	r0, r3
 800350e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003512:	2250      	movs	r2, #80	; 0x50
 8003514:	4619      	mov	r1, r3
 8003516:	f009 ff85 	bl	800d424 <memcpy>


   //uint16_t* click=&input_holder[0];

			//   TIME FINAL IS 188 UP TO HERE ATM
			for (i=0;i<512;i++) {    //  SLOW USES UP ABOUT 140
 800351a:	4b05      	ldr	r3, [pc, #20]	; (8003530 <sampling+0x12c8>)
 800351c:	2200      	movs	r2, #0
 800351e:	801a      	strh	r2, [r3, #0]
 8003520:	e23f      	b.n	80039a2 <sampling+0x173a>
 8003522:	bf00      	nop
 8003524:	200107fc 	.word	0x200107fc
 8003528:	20010824 	.word	0x20010824
 800352c:	20008e1c 	.word	0x20008e1c
 8003530:	200096de 	.word	0x200096de
 8003534:	2001084c 	.word	0x2001084c
 8003538:	2001104c 	.word	0x2001104c
 800353c:	2001184c 	.word	0x2001184c
 8003540:	2001204c 	.word	0x2001204c
 8003544:	2001284c 	.word	0x2001284c
 8003548:	2000bef4 	.word	0x2000bef4
 800354c:	20009458 	.word	0x20009458
 8003550:	20009408 	.word	0x20009408
				i_total=i+sample_pointB;
 8003554:	4bae      	ldr	r3, [pc, #696]	; (8003810 <sampling+0x15a8>)
 8003556:	881a      	ldrh	r2, [r3, #0]
 8003558:	4bae      	ldr	r3, [pc, #696]	; (8003814 <sampling+0x15ac>)
 800355a:	881b      	ldrh	r3, [r3, #0]
 800355c:	4413      	add	r3, r2
 800355e:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
				i_31=i&31;
 8003562:	4bab      	ldr	r3, [pc, #684]	; (8003810 <sampling+0x15a8>)
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	b2db      	uxtb	r3, r3
 8003568:	f003 031f 	and.w	r3, r3, #31
 800356c:	f887 30e9 	strb.w	r3, [r7, #233]	; 0xe9
			sampling_position=(i>>6);
 8003570:	4ba7      	ldr	r3, [pc, #668]	; (8003810 <sampling+0x15a8>)
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	099b      	lsrs	r3, r3, #6
 8003576:	b29b      	uxth	r3, r3
 8003578:	b2da      	uxtb	r2, r3
 800357a:	4ba7      	ldr	r3, [pc, #668]	; (8003818 <sampling+0x15b0>)
 800357c:	701a      	strb	r2, [r3, #0]

			if ((i&63)==0){
 800357e:	4ba4      	ldr	r3, [pc, #656]	; (8003810 <sampling+0x15a8>)
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003586:	2b00      	cmp	r3, #0
 8003588:	d11e      	bne.n	80035c8 <sampling+0x1360>
						phaser[0]=31-(filter[0].resonance);
 800358a:	4ba4      	ldr	r3, [pc, #656]	; (800381c <sampling+0x15b4>)
 800358c:	789b      	ldrb	r3, [r3, #2]
 800358e:	f1c3 031f 	rsb	r3, r3, #31
 8003592:	b2da      	uxtb	r2, r3
 8003594:	4ba2      	ldr	r3, [pc, #648]	; (8003820 <sampling+0x15b8>)
 8003596:	701a      	strb	r2, [r3, #0]
						phaser[1]=-31-(filter[1].resonance);
 8003598:	4ba0      	ldr	r3, [pc, #640]	; (800381c <sampling+0x15b4>)
 800359a:	7a9a      	ldrb	r2, [r3, #10]
 800359c:	f06f 031e 	mvn.w	r3, #30
 80035a0:	1a9b      	subs	r3, r3, r2
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	4b9e      	ldr	r3, [pc, #632]	; (8003820 <sampling+0x15b8>)
 80035a6:	705a      	strb	r2, [r3, #1]
						phaser[2]=31-(filter[2].resonance);
 80035a8:	4b9c      	ldr	r3, [pc, #624]	; (800381c <sampling+0x15b4>)
 80035aa:	7c9b      	ldrb	r3, [r3, #18]
 80035ac:	f1c3 031f 	rsb	r3, r3, #31
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	4b9b      	ldr	r3, [pc, #620]	; (8003820 <sampling+0x15b8>)
 80035b4:	709a      	strb	r2, [r3, #2]
						phaser[3]=31-(filter[3].resonance);
 80035b6:	4b99      	ldr	r3, [pc, #612]	; (800381c <sampling+0x15b4>)
 80035b8:	7e9b      	ldrb	r3, [r3, #26]
 80035ba:	f1c3 031f 	rsb	r3, r3, #31
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	4b97      	ldr	r3, [pc, #604]	; (8003820 <sampling+0x15b8>)
 80035c2:	70da      	strb	r2, [r3, #3]
						frq_point();
 80035c4:	f000 fcbe 	bl	8003f44 <frq_point>
			}


			phase_bank0[i_31]= sample_Accu[0]=play_holder0[i];
 80035c8:	4b91      	ldr	r3, [pc, #580]	; (8003810 <sampling+0x15a8>)
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	461a      	mov	r2, r3
 80035ce:	4b95      	ldr	r3, [pc, #596]	; (8003824 <sampling+0x15bc>)
 80035d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80035d8:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 80035dc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80035e0:	4991      	ldr	r1, [pc, #580]	; (8003828 <sampling+0x15c0>)
 80035e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			phase_bank1[i_31]=sample_Accu[1]=play_holder1[i] ; // saw
 80035e6:	4b8a      	ldr	r3, [pc, #552]	; (8003810 <sampling+0x15a8>)
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	4b8f      	ldr	r3, [pc, #572]	; (800382c <sampling+0x15c4>)
 80035ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80035f6:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 80035fa:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80035fe:	498c      	ldr	r1, [pc, #560]	; (8003830 <sampling+0x15c8>)
 8003600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			phase_bank2[i_31]=sample_Accu[2]=play_holder2[i];  // sine input
 8003604:	4b82      	ldr	r3, [pc, #520]	; (8003810 <sampling+0x15a8>)
 8003606:	881b      	ldrh	r3, [r3, #0]
 8003608:	461a      	mov	r2, r3
 800360a:	4b8a      	ldr	r3, [pc, #552]	; (8003834 <sampling+0x15cc>)
 800360c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003610:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003614:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 8003618:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800361c:	4986      	ldr	r1, [pc, #536]	; (8003838 <sampling+0x15d0>)
 800361e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			phase_bank3[i_31]=sample_Accu[3]=play_holder3[i] ;
 8003622:	4b7b      	ldr	r3, [pc, #492]	; (8003810 <sampling+0x15a8>)
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	4b84      	ldr	r3, [pc, #528]	; (800383c <sampling+0x15d4>)
 800362a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800362e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003632:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 8003636:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800363a:	4981      	ldr	r1, [pc, #516]	; (8003840 <sampling+0x15d8>)
 800363c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			sample_Accu[4]=play_holder4[i];
 8003640:	4b73      	ldr	r3, [pc, #460]	; (8003810 <sampling+0x15a8>)
 8003642:	881b      	ldrh	r3, [r3, #0]
 8003644:	461a      	mov	r2, r3
 8003646:	4b7f      	ldr	r3, [pc, #508]	; (8003844 <sampling+0x15dc>)
 8003648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800364c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (phaser[0])	sample_Accu[0]=(sample_Accu[0]>>1)+(phase_bank0[ ( i_31+phaser[0])&31	]>>1); // PHASER
 8003650:	4b73      	ldr	r3, [pc, #460]	; (8003820 <sampling+0x15b8>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d011      	beq.n	800367c <sampling+0x1414>
 8003658:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800365c:	105a      	asrs	r2, r3, #1
 800365e:	4b70      	ldr	r3, [pc, #448]	; (8003820 <sampling+0x15b8>)
 8003660:	7819      	ldrb	r1, [r3, #0]
 8003662:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 8003666:	440b      	add	r3, r1
 8003668:	b2db      	uxtb	r3, r3
 800366a:	f003 031f 	and.w	r3, r3, #31
 800366e:	496e      	ldr	r1, [pc, #440]	; (8003828 <sampling+0x15c0>)
 8003670:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003674:	105b      	asrs	r3, r3, #1
 8003676:	4413      	add	r3, r2
 8003678:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	if (phaser[1])	sample_Accu[1]=(sample_Accu[1]>>1)+(phase_bank1[( i_31+phaser[0])&31	]>>1);
 800367c:	4b68      	ldr	r3, [pc, #416]	; (8003820 <sampling+0x15b8>)
 800367e:	785b      	ldrb	r3, [r3, #1]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d011      	beq.n	80036a8 <sampling+0x1440>
 8003684:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003688:	105a      	asrs	r2, r3, #1
 800368a:	4b65      	ldr	r3, [pc, #404]	; (8003820 <sampling+0x15b8>)
 800368c:	7819      	ldrb	r1, [r3, #0]
 800368e:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 8003692:	440b      	add	r3, r1
 8003694:	b2db      	uxtb	r3, r3
 8003696:	f003 031f 	and.w	r3, r3, #31
 800369a:	4965      	ldr	r1, [pc, #404]	; (8003830 <sampling+0x15c8>)
 800369c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036a0:	105b      	asrs	r3, r3, #1
 80036a2:	4413      	add	r3, r2
 80036a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	if (phaser[2])	sample_Accu[2]=(sample_Accu[2]>>1)+(phase_bank2[  ( i_31+phaser[0])&31	]>>1);
 80036a8:	4b5d      	ldr	r3, [pc, #372]	; (8003820 <sampling+0x15b8>)
 80036aa:	789b      	ldrb	r3, [r3, #2]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d011      	beq.n	80036d4 <sampling+0x146c>
 80036b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036b4:	105a      	asrs	r2, r3, #1
 80036b6:	4b5a      	ldr	r3, [pc, #360]	; (8003820 <sampling+0x15b8>)
 80036b8:	7819      	ldrb	r1, [r3, #0]
 80036ba:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 80036be:	440b      	add	r3, r1
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	f003 031f 	and.w	r3, r3, #31
 80036c6:	495c      	ldr	r1, [pc, #368]	; (8003838 <sampling+0x15d0>)
 80036c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036cc:	105b      	asrs	r3, r3, #1
 80036ce:	4413      	add	r3, r2
 80036d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	if (phaser[3])	sample_Accu[3]=(sample_Accu[3]>>1)+(phase_bank3[  ( i_31+phaser[0])&31	]>>1);
 80036d4:	4b52      	ldr	r3, [pc, #328]	; (8003820 <sampling+0x15b8>)
 80036d6:	78db      	ldrb	r3, [r3, #3]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d011      	beq.n	8003700 <sampling+0x1498>
 80036dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80036e0:	105a      	asrs	r2, r3, #1
 80036e2:	4b4f      	ldr	r3, [pc, #316]	; (8003820 <sampling+0x15b8>)
 80036e4:	7819      	ldrb	r1, [r3, #0]
 80036e6:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 80036ea:	440b      	add	r3, r1
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	f003 031f 	and.w	r3, r3, #31
 80036f2:	4953      	ldr	r1, [pc, #332]	; (8003840 <sampling+0x15d8>)
 80036f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036f8:	105b      	asrs	r3, r3, #1
 80036fa:	4413      	add	r3, r2
 80036fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4



		    filter_Accu=sample_Accu[0]-filter_accus[3];
 8003700:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003704:	4b50      	ldr	r3, [pc, #320]	; (8003848 <sampling+0x15e0>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		//    filter_Accu2=filter_accus[2]-filter_accus[3];
		//filter_accus[2]=(filter_accus[2] + (freq_point[0]*    (filter_Accu+  filter_Accu2) ))>>16;     //short=fast , adding makes it slower


		    filter_accus[2]=((sample_Accu[0]*freq_point[0])+(filter_accus[2]*freq_point[1]))>>16;
 800370e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003712:	4a4e      	ldr	r2, [pc, #312]	; (800384c <sampling+0x15e4>)
 8003714:	8812      	ldrh	r2, [r2, #0]
 8003716:	fb03 f202 	mul.w	r2, r3, r2
 800371a:	4b4b      	ldr	r3, [pc, #300]	; (8003848 <sampling+0x15e0>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	494b      	ldr	r1, [pc, #300]	; (800384c <sampling+0x15e4>)
 8003720:	8849      	ldrh	r1, [r1, #2]
 8003722:	fb01 f303 	mul.w	r3, r1, r3
 8003726:	4413      	add	r3, r2
 8003728:	141b      	asrs	r3, r3, #16
 800372a:	4a47      	ldr	r2, [pc, #284]	; (8003848 <sampling+0x15e0>)
 800372c:	6093      	str	r3, [r2, #8]
		    filter_accus[3]=(((filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]))>>16); //1
 800372e:	4b46      	ldr	r3, [pc, #280]	; (8003848 <sampling+0x15e0>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	4a46      	ldr	r2, [pc, #280]	; (800384c <sampling+0x15e4>)
 8003734:	8812      	ldrh	r2, [r2, #0]
 8003736:	fb03 f202 	mul.w	r2, r3, r2
 800373a:	4b43      	ldr	r3, [pc, #268]	; (8003848 <sampling+0x15e0>)
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	4943      	ldr	r1, [pc, #268]	; (800384c <sampling+0x15e4>)
 8003740:	8849      	ldrh	r1, [r1, #2]
 8003742:	fb01 f303 	mul.w	r3, r1, r3
 8003746:	4413      	add	r3, r2
 8003748:	141b      	asrs	r3, r3, #16
 800374a:	4a3f      	ldr	r2, [pc, #252]	; (8003848 <sampling+0x15e0>)
 800374c:	60d3      	str	r3, [r2, #12]
		//filter_accus[3]=(((filter_accus[2]-filter_accus[3])*freq_point[1])+filter_accus[3])>>16; //1
		//filter_accus[3]=(((  ((sample_Accu[0]*freq_point[0])+(filter_accus[2]*freq_point[1]))>>16  )*freq_point[0])+(filter_accus[3]*freq_point[1]))>>16; //1

		filter_accus[5]=((sample_Accu[1]*freq_point[2])+(filter_accus[5]*freq_point[3]))>>16; // down to 12 cycles per 2 filters
 800374e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003752:	4a3e      	ldr	r2, [pc, #248]	; (800384c <sampling+0x15e4>)
 8003754:	8892      	ldrh	r2, [r2, #4]
 8003756:	fb03 f202 	mul.w	r2, r3, r2
 800375a:	4b3b      	ldr	r3, [pc, #236]	; (8003848 <sampling+0x15e0>)
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	493b      	ldr	r1, [pc, #236]	; (800384c <sampling+0x15e4>)
 8003760:	88c9      	ldrh	r1, [r1, #6]
 8003762:	fb01 f303 	mul.w	r3, r1, r3
 8003766:	4413      	add	r3, r2
 8003768:	141b      	asrs	r3, r3, #16
 800376a:	4a37      	ldr	r2, [pc, #220]	; (8003848 <sampling+0x15e0>)
 800376c:	6153      	str	r3, [r2, #20]
		filter_accus[6]=((filter_accus[5]*freq_point[2])+(filter_accus[6]*freq_point[3]))>>16;// 13 instructions in assy
 800376e:	4b36      	ldr	r3, [pc, #216]	; (8003848 <sampling+0x15e0>)
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	4a36      	ldr	r2, [pc, #216]	; (800384c <sampling+0x15e4>)
 8003774:	8892      	ldrh	r2, [r2, #4]
 8003776:	fb03 f202 	mul.w	r2, r3, r2
 800377a:	4b33      	ldr	r3, [pc, #204]	; (8003848 <sampling+0x15e0>)
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	4933      	ldr	r1, [pc, #204]	; (800384c <sampling+0x15e4>)
 8003780:	88c9      	ldrh	r1, [r1, #6]
 8003782:	fb01 f303 	mul.w	r3, r1, r3
 8003786:	4413      	add	r3, r2
 8003788:	141b      	asrs	r3, r3, #16
 800378a:	4a2f      	ldr	r2, [pc, #188]	; (8003848 <sampling+0x15e0>)
 800378c:	6193      	str	r3, [r2, #24]


		filter_accus[8]=((sample_Accu[2]*freq_point[4])+(filter_accus[8]*freq_point[5]))>>16;		// external loop is slower
 800378e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003792:	4a2e      	ldr	r2, [pc, #184]	; (800384c <sampling+0x15e4>)
 8003794:	8912      	ldrh	r2, [r2, #8]
 8003796:	fb03 f202 	mul.w	r2, r3, r2
 800379a:	4b2b      	ldr	r3, [pc, #172]	; (8003848 <sampling+0x15e0>)
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	492b      	ldr	r1, [pc, #172]	; (800384c <sampling+0x15e4>)
 80037a0:	8949      	ldrh	r1, [r1, #10]
 80037a2:	fb01 f303 	mul.w	r3, r1, r3
 80037a6:	4413      	add	r3, r2
 80037a8:	141b      	asrs	r3, r3, #16
 80037aa:	4a27      	ldr	r2, [pc, #156]	; (8003848 <sampling+0x15e0>)
 80037ac:	6213      	str	r3, [r2, #32]
		filter_accus[9]=((filter_accus[8]*freq_point[4])+(filter_accus[9]*freq_point[5]))>>16;
 80037ae:	4b26      	ldr	r3, [pc, #152]	; (8003848 <sampling+0x15e0>)
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	4a26      	ldr	r2, [pc, #152]	; (800384c <sampling+0x15e4>)
 80037b4:	8912      	ldrh	r2, [r2, #8]
 80037b6:	fb03 f202 	mul.w	r2, r3, r2
 80037ba:	4b23      	ldr	r3, [pc, #140]	; (8003848 <sampling+0x15e0>)
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	4923      	ldr	r1, [pc, #140]	; (800384c <sampling+0x15e4>)
 80037c0:	8949      	ldrh	r1, [r1, #10]
 80037c2:	fb01 f303 	mul.w	r3, r1, r3
 80037c6:	4413      	add	r3, r2
 80037c8:	141b      	asrs	r3, r3, #16
 80037ca:	4a1f      	ldr	r2, [pc, #124]	; (8003848 <sampling+0x15e0>)
 80037cc:	6253      	str	r3, [r2, #36]	; 0x24

		filter_accus[11]=((sample_Accu[3]*freq_point[6])+(filter_accus[11]*freq_point[7]))>>16;
 80037ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80037d2:	4a1e      	ldr	r2, [pc, #120]	; (800384c <sampling+0x15e4>)
 80037d4:	8992      	ldrh	r2, [r2, #12]
 80037d6:	fb03 f202 	mul.w	r2, r3, r2
 80037da:	4b1b      	ldr	r3, [pc, #108]	; (8003848 <sampling+0x15e0>)
 80037dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037de:	491b      	ldr	r1, [pc, #108]	; (800384c <sampling+0x15e4>)
 80037e0:	89c9      	ldrh	r1, [r1, #14]
 80037e2:	fb01 f303 	mul.w	r3, r1, r3
 80037e6:	4413      	add	r3, r2
 80037e8:	141b      	asrs	r3, r3, #16
 80037ea:	4a17      	ldr	r2, [pc, #92]	; (8003848 <sampling+0x15e0>)
 80037ec:	62d3      	str	r3, [r2, #44]	; 0x2c
		filter_accus[12]=((filter_accus[11]*freq_point[6])+(filter_accus[12]*freq_point[7]))>>16;
 80037ee:	4b16      	ldr	r3, [pc, #88]	; (8003848 <sampling+0x15e0>)
 80037f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f2:	4a16      	ldr	r2, [pc, #88]	; (800384c <sampling+0x15e4>)
 80037f4:	8992      	ldrh	r2, [r2, #12]
 80037f6:	fb03 f202 	mul.w	r2, r3, r2
 80037fa:	4b13      	ldr	r3, [pc, #76]	; (8003848 <sampling+0x15e0>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	4913      	ldr	r1, [pc, #76]	; (800384c <sampling+0x15e4>)
 8003800:	89c9      	ldrh	r1, [r1, #14]
 8003802:	fb01 f303 	mul.w	r3, r1, r3
 8003806:	4413      	add	r3, r2
 8003808:	141b      	asrs	r3, r3, #16
 800380a:	4a0f      	ldr	r2, [pc, #60]	; (8003848 <sampling+0x15e0>)
 800380c:	6313      	str	r3, [r2, #48]	; 0x30
 800380e:	e01f      	b.n	8003850 <sampling+0x15e8>
 8003810:	200096de 	.word	0x200096de
 8003814:	200096dc 	.word	0x200096dc
 8003818:	2000e078 	.word	0x2000e078
 800381c:	20008ebc 	.word	0x20008ebc
 8003820:	2001304c 	.word	0x2001304c
 8003824:	2001084c 	.word	0x2001084c
 8003828:	20013050 	.word	0x20013050
 800382c:	2001104c 	.word	0x2001104c
 8003830:	200130d0 	.word	0x200130d0
 8003834:	2001184c 	.word	0x2001184c
 8003838:	20013150 	.word	0x20013150
 800383c:	2001204c 	.word	0x2001204c
 8003840:	200131d0 	.word	0x200131d0
 8003844:	2001284c 	.word	0x2001284c
 8003848:	20013250 	.word	0x20013250
 800384c:	2000bf38 	.word	0x2000bf38


		  debug_value=filter_accus[9];
 8003850:	4b94      	ldr	r3, [pc, #592]	; (8003aa4 <sampling+0x183c>)
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	4a94      	ldr	r2, [pc, #592]	; (8003aa8 <sampling+0x1840>)
 8003856:	6013      	str	r3, [r2, #0]
	//	filter_accus[3]=filter_accus[3]+filter_accus[23];
		//	filter_accus[6]=filter_accus[6]+filter_accus[26];
		//	filter_accus[9]=filter_accus[9]+filter_accus[29];
		//	filter_accus[12]=filter_accus[12]+filter_accus[32];

		sample_Accu[0]=filter_accus[3];
 8003858:	4b92      	ldr	r3, [pc, #584]	; (8003aa4 <sampling+0x183c>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

		//	if (sound_enable[1]) {  // need better

	//	filter_accus[4]=filter_accus[4]-(filter_accus[6]*filter_res[1]);

		sample_Accu[1]=filter_accus[6];
 8003860:	4b90      	ldr	r3, [pc, #576]	; (8003aa4 <sampling+0x183c>)
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	//		if (sound_enable[2]) {			//filter_accus[7]=sample_Accu[2];
		//filter_accus[7]=filter_accus[7]-(filter_accus[9]*filter_res[2]);  // resonance
			   // 30 cyles for 2 poles

				sample_Accu[2]=filter_accus[9];
 8003868:	4b8e      	ldr	r3, [pc, #568]	; (8003aa4 <sampling+0x183c>)
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			//}

	//		if (sound_enable[3]  ||  sound_enable[4] ) {			//filter_accus[10]=sample_Accu[3];
				//filter_accus[10]=filter_accus[10]-(filter_accus[12]*filter_res[3]);
					 // 30 cyles for 2 poles
						sample_Accu[3]=filter_accus[12];
 8003870:	4b8c      	ldr	r3, [pc, #560]	; (8003aa4 <sampling+0x183c>)
 8003872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003874:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		filter_Accu=filter_Accu2=0;
 8003878:	2300      	movs	r3, #0
 800387a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800387e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003882:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		//if  (record_output)  {
		filter_Accu = (sample_Accu[0]+sample_Accu[1]+sample_Accu[2]+sample_Accu[3] +sample_Accu[4])>>10 ;
 8003886:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800388a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800388e:	441a      	add	r2, r3
 8003890:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003894:	441a      	add	r2, r3
 8003896:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800389a:	441a      	add	r2, r3
 800389c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80038a0:	4413      	add	r3, r2
 80038a2:	129b      	asrs	r3, r3, #10
 80038a4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		filter_Accu =filter_Accu+32767;
 80038a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80038ac:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80038b0:	337f      	adds	r3, #127	; 0x7f
 80038b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110


		output_mix[(i&510)+1]=(filter_Accu>>8) &255;
 80038b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80038ba:	121a      	asrs	r2, r3, #8
 80038bc:	4b7b      	ldr	r3, [pc, #492]	; (8003aac <sampling+0x1844>)
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80038c4:	3301      	adds	r3, #1
 80038c6:	b2d1      	uxtb	r1, r2
 80038c8:	4a79      	ldr	r2, [pc, #484]	; (8003ab0 <sampling+0x1848>)
 80038ca:	54d1      	strb	r1, [r2, r3]
		output_mix[(i&510)]=filter_Accu&255;
 80038cc:	4b77      	ldr	r3, [pc, #476]	; (8003aac <sampling+0x1844>)
 80038ce:	881b      	ldrh	r3, [r3, #0]
 80038d0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80038d4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80038d8:	b2d1      	uxtb	r1, r2
 80038da:	4a75      	ldr	r2, [pc, #468]	; (8003ab0 <sampling+0x1848>)
 80038dc:	54d1      	strb	r1, [r2, r3]


	//	}

		filter_Accu=(sample_Accu[0]+sample_Accu[1])>>6;
 80038de:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80038e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038e6:	4413      	add	r3, r2
 80038e8:	119b      	asrs	r3, r3, #6
 80038ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110



		filter_Accu2=(sample_Accu[2]+sample_Accu[3]+sample_Accu[4])>>6; //filter + drum out
 80038ee:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80038f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80038f6:	441a      	add	r2, r3
 80038f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80038fc:	4413      	add	r3, r2
 80038fe:	119b      	asrs	r3, r3, #6
 8003900:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c


	//	 if (one_shot!=199)   one_shot++;  //play one attack then stop

		 //if (filter_Accu>0xFFFF) {filter_Accu=0xFFFF;clipping++;} else if (filter_Accu<-65535) filter_Accu=-65535;  // limiter to 16 bits
		 if (filter_Accu>0x3FF) {filter_Accu=0x3FF;clipping++;} else if (filter_Accu<-1023) filter_Accu=-1023;  // limiter to 11 bits
 8003904:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800390c:	db0a      	blt.n	8003924 <sampling+0x16bc>
 800390e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003912:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003916:	4b67      	ldr	r3, [pc, #412]	; (8003ab4 <sampling+0x184c>)
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	3301      	adds	r3, #1
 800391c:	b2da      	uxtb	r2, r3
 800391e:	4b65      	ldr	r3, [pc, #404]	; (8003ab4 <sampling+0x184c>)
 8003920:	701a      	strb	r2, [r3, #0]
 8003922:	e007      	b.n	8003934 <sampling+0x16cc>
 8003924:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003928:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 800392c:	dc02      	bgt.n	8003934 <sampling+0x16cc>
 800392e:	4b62      	ldr	r3, [pc, #392]	; (8003ab8 <sampling+0x1850>)
 8003930:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		 if (filter_Accu2>0x3FF) {filter_Accu2=0x3FF;clipping++;} else if (filter_Accu2<-1023) filter_Accu2=-1023;  // limiter to 11 bits
 8003934:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800393c:	db0a      	blt.n	8003954 <sampling+0x16ec>
 800393e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003942:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003946:	4b5b      	ldr	r3, [pc, #364]	; (8003ab4 <sampling+0x184c>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	3301      	adds	r3, #1
 800394c:	b2da      	uxtb	r2, r3
 800394e:	4b59      	ldr	r3, [pc, #356]	; (8003ab4 <sampling+0x184c>)
 8003950:	701a      	strb	r2, [r3, #0]
 8003952:	e007      	b.n	8003964 <sampling+0x16fc>
 8003954:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003958:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 800395c:	dc02      	bgt.n	8003964 <sampling+0x16fc>
 800395e:	4b56      	ldr	r3, [pc, #344]	; (8003ab8 <sampling+0x1850>)
 8003960:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c



		 play_sample[(i_total<<1)]=(filter_Accu)+1023;   // final output disable for now 2544
 8003964:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003968:	b29a      	uxth	r2, r3
 800396a:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8003974:	b291      	uxth	r1, r2
 8003976:	4a51      	ldr	r2, [pc, #324]	; (8003abc <sampling+0x1854>)
 8003978:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		 play_sample[(i_total<<1)+1]=(filter_Accu2)+1023;
 800397c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003980:	b29a      	uxth	r2, r3
 8003982:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	3301      	adds	r3, #1
 800398a:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800398e:	b291      	uxth	r1, r2
 8003990:	4a4a      	ldr	r2, [pc, #296]	; (8003abc <sampling+0x1854>)
 8003992:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (i=0;i<512;i++) {    //  SLOW USES UP ABOUT 140
 8003996:	4b45      	ldr	r3, [pc, #276]	; (8003aac <sampling+0x1844>)
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	3301      	adds	r3, #1
 800399c:	b29a      	uxth	r2, r3
 800399e:	4b43      	ldr	r3, [pc, #268]	; (8003aac <sampling+0x1844>)
 80039a0:	801a      	strh	r2, [r3, #0]
 80039a2:	4b42      	ldr	r3, [pc, #264]	; (8003aac <sampling+0x1844>)
 80039a4:	881b      	ldrh	r3, [r3, #0]
 80039a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039aa:	f4ff add3 	bcc.w	8003554 <sampling+0x12ec>

		//	  memcpy(&filter_accus_hold,filter_accus,60);

		//time_final=time_proc;   // in samples

		if (bank_write)   error_count++;  // if bank write is high it means too much stall here
 80039ae:	4b44      	ldr	r3, [pc, #272]	; (8003ac0 <sampling+0x1858>)
 80039b0:	881b      	ldrh	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d006      	beq.n	80039c4 <sampling+0x175c>
 80039b6:	4b43      	ldr	r3, [pc, #268]	; (8003ac4 <sampling+0x185c>)
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	3301      	adds	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	4b40      	ldr	r3, [pc, #256]	; (8003ac4 <sampling+0x185c>)
 80039c2:	801a      	strh	r2, [r3, #0]

		if  (record_output)  record_output_to_RAM();
 80039c4:	4b40      	ldr	r3, [pc, #256]	; (8003ac8 <sampling+0x1860>)
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <sampling+0x176a>
 80039ce:	f001 fe61 	bl	8005694 <record_output_to_RAM>

		  ram_sync_swap=0;
 80039d2:	4b3e      	ldr	r3, [pc, #248]	; (8003acc <sampling+0x1864>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	701a      	strb	r2, [r3, #0]

		if     (sampler.acurrent_sample)  {sampler.start=(sampler.offset[sampler.acurrent_sample-1])<<10;  sampler.start_current=sampler.start;}		 // this works , start is always off by 256 from note start
 80039d8:	4b3d      	ldr	r3, [pc, #244]	; (8003ad0 <sampling+0x1868>)
 80039da:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d011      	beq.n	8003a06 <sampling+0x179e>
 80039e2:	4b3b      	ldr	r3, [pc, #236]	; (8003ad0 <sampling+0x1868>)
 80039e4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80039e8:	3b01      	subs	r3, #1
 80039ea:	4a39      	ldr	r2, [pc, #228]	; (8003ad0 <sampling+0x1868>)
 80039ec:	5cd3      	ldrb	r3, [r2, r3]
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	029b      	lsls	r3, r3, #10
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	4b36      	ldr	r3, [pc, #216]	; (8003ad0 <sampling+0x1868>)
 80039f6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 80039fa:	4b35      	ldr	r3, [pc, #212]	; (8003ad0 <sampling+0x1868>)
 80039fc:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8003a00:	4b33      	ldr	r3, [pc, #204]	; (8003ad0 <sampling+0x1868>)
 8003a02:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84

		if     (sampler.acurrent_sample2)  {sampler.start2=(sampler.offset[sampler.acurrent_sample2-1])<<10;  sampler.start_current2=sampler.start2;}
 8003a06:	4b32      	ldr	r3, [pc, #200]	; (8003ad0 <sampling+0x1868>)
 8003a08:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d011      	beq.n	8003a34 <sampling+0x17cc>
 8003a10:	4b2f      	ldr	r3, [pc, #188]	; (8003ad0 <sampling+0x1868>)
 8003a12:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8003a16:	3b01      	subs	r3, #1
 8003a18:	4a2d      	ldr	r2, [pc, #180]	; (8003ad0 <sampling+0x1868>)
 8003a1a:	5cd3      	ldrb	r3, [r2, r3]
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	029b      	lsls	r3, r3, #10
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	4b2b      	ldr	r3, [pc, #172]	; (8003ad0 <sampling+0x1868>)
 8003a24:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8003a28:	4b29      	ldr	r3, [pc, #164]	; (8003ad0 <sampling+0x1868>)
 8003a2a:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8003a2e:	4b28      	ldr	r3, [pc, #160]	; (8003ad0 <sampling+0x1868>)
 8003a30:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

		    if (note[4].position) {sampler.ram_seq=sampler.start-(seq_pos>>1);sampler.ram_seq2=sampler.start2-(seq_pos>>1); note[4].position=0;	}  // start from note offset
 8003a34:	4b27      	ldr	r3, [pc, #156]	; (8003ad4 <sampling+0x186c>)
 8003a36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d01d      	beq.n	8003a7a <sampling+0x1812>
 8003a3e:	4b24      	ldr	r3, [pc, #144]	; (8003ad0 <sampling+0x1868>)
 8003a40:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8003a44:	4b24      	ldr	r3, [pc, #144]	; (8003ad8 <sampling+0x1870>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	085b      	lsrs	r3, r3, #1
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	4b1f      	ldr	r3, [pc, #124]	; (8003ad0 <sampling+0x1868>)
 8003a54:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8003a58:	4b1d      	ldr	r3, [pc, #116]	; (8003ad0 <sampling+0x1868>)
 8003a5a:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8003a5e:	4b1e      	ldr	r3, [pc, #120]	; (8003ad8 <sampling+0x1870>)
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	085b      	lsrs	r3, r3, #1
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	4b18      	ldr	r3, [pc, #96]	; (8003ad0 <sampling+0x1868>)
 8003a6e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8003a72:	4b18      	ldr	r3, [pc, #96]	; (8003ad4 <sampling+0x186c>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44


		    if     (sampler.acurrent_sample==0)  sampler_mute[0]=1;    else sampler_mute[0]=0;
 8003a7a:	4b15      	ldr	r3, [pc, #84]	; (8003ad0 <sampling+0x1868>)
 8003a7c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d103      	bne.n	8003a8c <sampling+0x1824>
 8003a84:	4b15      	ldr	r3, [pc, #84]	; (8003adc <sampling+0x1874>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	701a      	strb	r2, [r3, #0]
 8003a8a:	e002      	b.n	8003a92 <sampling+0x182a>
 8003a8c:	4b13      	ldr	r3, [pc, #76]	; (8003adc <sampling+0x1874>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	701a      	strb	r2, [r3, #0]
		    if     (sampler.acurrent_sample2==0)  sampler_mute[1]=1;    else sampler_mute[1]=0;
 8003a92:	4b0f      	ldr	r3, [pc, #60]	; (8003ad0 <sampling+0x1868>)
 8003a94:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d121      	bne.n	8003ae0 <sampling+0x1878>
 8003a9c:	4b0f      	ldr	r3, [pc, #60]	; (8003adc <sampling+0x1874>)
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	705a      	strb	r2, [r3, #1]
 8003aa2:	e020      	b.n	8003ae6 <sampling+0x187e>
 8003aa4:	20013250 	.word	0x20013250
 8003aa8:	2000f334 	.word	0x2000f334
 8003aac:	200096de 	.word	0x200096de
 8003ab0:	2000ff54 	.word	0x2000ff54
 8003ab4:	2000e07b 	.word	0x2000e07b
 8003ab8:	fffffc01 	.word	0xfffffc01
 8003abc:	200096e0 	.word	0x200096e0
 8003ac0:	20008e16 	.word	0x20008e16
 8003ac4:	2000cc76 	.word	0x2000cc76
 8003ac8:	2000ff51 	.word	0x2000ff51
 8003acc:	2001039e 	.word	0x2001039e
 8003ad0:	20008edc 	.word	0x20008edc
 8003ad4:	20008e1c 	.word	0x20008e1c
 8003ad8:	200096d6 	.word	0x200096d6
 8003adc:	2001039c 	.word	0x2001039c
 8003ae0:	4b2b      	ldr	r3, [pc, #172]	; (8003b90 <sampling+0x1928>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	705a      	strb	r2, [r3, #1]
		if ((sampler.ram_seq)>=16128)     {sampler.ram_seq=sampler.start; }      // just for playback counter , maybe finishing early will cause it to stop
 8003ae6:	4b2b      	ldr	r3, [pc, #172]	; (8003b94 <sampling+0x192c>)
 8003ae8:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8003aec:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
 8003af0:	d305      	bcc.n	8003afe <sampling+0x1896>
 8003af2:	4b28      	ldr	r3, [pc, #160]	; (8003b94 <sampling+0x192c>)
 8003af4:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8003af8:	4b26      	ldr	r3, [pc, #152]	; (8003b94 <sampling+0x192c>)
 8003afa:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
		if ((sampler.ram_seq2)>=16128)     {sampler.ram_seq2=sampler.start2; }
 8003afe:	4b25      	ldr	r3, [pc, #148]	; (8003b94 <sampling+0x192c>)
 8003b00:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8003b04:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
 8003b08:	d305      	bcc.n	8003b16 <sampling+0x18ae>
 8003b0a:	4b22      	ldr	r3, [pc, #136]	; (8003b94 <sampling+0x192c>)
 8003b0c:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8003b10:	4b20      	ldr	r3, [pc, #128]	; (8003b94 <sampling+0x192c>)
 8003b12:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e


		//	sampler.length=sampler.end-sampler.start;
		if  ((sampler.acurrent_sample)    &&  (sampler.sample_select[sampler.acurrent_sample-1]==0)   )     ram_sync_swap=1;   // swap to RAM  from sample on 0 select  ,this should be started after last
 8003b16:	4b1f      	ldr	r3, [pc, #124]	; (8003b94 <sampling+0x192c>)
 8003b18:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00b      	beq.n	8003b38 <sampling+0x18d0>
 8003b20:	4b1c      	ldr	r3, [pc, #112]	; (8003b94 <sampling+0x192c>)
 8003b22:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003b26:	3b01      	subs	r3, #1
 8003b28:	4a1a      	ldr	r2, [pc, #104]	; (8003b94 <sampling+0x192c>)
 8003b2a:	4413      	add	r3, r2
 8003b2c:	7a1b      	ldrb	r3, [r3, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d102      	bne.n	8003b38 <sampling+0x18d0>
 8003b32:	4b19      	ldr	r3, [pc, #100]	; (8003b98 <sampling+0x1930>)
 8003b34:	2201      	movs	r2, #1
 8003b36:	701a      	strb	r2, [r3, #0]
	//	if(sampler.trigger_position )  { sampler.ram_seq=sampler.start;note[3].position=1; }   // starts here not perfect , figure out better



		if(counter_16>127) counter_16=0;
 8003b38:	4b18      	ldr	r3, [pc, #96]	; (8003b9c <sampling+0x1934>)
 8003b3a:	881b      	ldrh	r3, [r3, #0]
 8003b3c:	2b7f      	cmp	r3, #127	; 0x7f
 8003b3e:	d902      	bls.n	8003b46 <sampling+0x18de>
 8003b40:	4b16      	ldr	r3, [pc, #88]	; (8003b9c <sampling+0x1934>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	801a      	strh	r2, [r3, #0]

//	sample_flash_address=((sampler.sample_select[sampler.acurrent_sample] *128)<<8)+((counter_16) <<8);  // change this soemthing mroe friendly , also keep last 64k for menus ,wavs maybe just before as well


			  if  (sampler.acurrent_sample)    sample_flash_address=((sampler.sample_select[sampler.acurrent_sample-1] *128)<<8)+((sampler.ram_seq>>8)<<9);  //let see , limited now with a 1k jumps or 31
 8003b46:	4b13      	ldr	r3, [pc, #76]	; (8003b94 <sampling+0x192c>)
 8003b48:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d011      	beq.n	8003b74 <sampling+0x190c>
 8003b50:	4b10      	ldr	r3, [pc, #64]	; (8003b94 <sampling+0x192c>)
 8003b52:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003b56:	3b01      	subs	r3, #1
 8003b58:	4a0e      	ldr	r2, [pc, #56]	; (8003b94 <sampling+0x192c>)
 8003b5a:	4413      	add	r3, r2
 8003b5c:	7a1b      	ldrb	r3, [r3, #8]
 8003b5e:	01db      	lsls	r3, r3, #7
 8003b60:	021a      	lsls	r2, r3, #8
 8003b62:	4b0c      	ldr	r3, [pc, #48]	; (8003b94 <sampling+0x192c>)
 8003b64:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8003b68:	0a1b      	lsrs	r3, r3, #8
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	025b      	lsls	r3, r3, #9
 8003b6e:	4413      	add	r3, r2
 8003b70:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		//	  else  sample_flash_address=((sampler.sample_select[0] *128)<<8)+((sampler.ram_seq>>8)<<9);

			  sampler_1k_load(sample_flash_address);   // about 12 cycles  from send to receive
 8003b74:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8003b78:	f001 fc22 	bl	80053c0 <sampler_1k_load>





			     time_final[0]=time_proc;
 8003b7c:	4b08      	ldr	r3, [pc, #32]	; (8003ba0 <sampling+0x1938>)
 8003b7e:	881a      	ldrh	r2, [r3, #0]
 8003b80:	4b08      	ldr	r3, [pc, #32]	; (8003ba4 <sampling+0x193c>)
 8003b82:	801a      	strh	r2, [r3, #0]




		}  // TOTAL IS ABOUT 330 ATM  , 260 with no filters
 8003b84:	bf00      	nop
 8003b86:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bdb0      	pop	{r4, r5, r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	2001039c 	.word	0x2001039c
 8003b94:	20008edc 	.word	0x20008edc
 8003b98:	2001039e 	.word	0x2001039e
 8003b9c:	2000ff3c 	.word	0x2000ff3c
 8003ba0:	2000cc74 	.word	0x2000cc74
 8003ba4:	2000cc70 	.word	0x2000cc70

08003ba8 <LFO_square_one_pulse>:
    *(return_array + 2) = sine_tuned;
    return (sine_tempA);   // add back to start value -20k-20k  or about 16bit

    }

void LFO_square_one_pulse(void){   // sends one pulse synced to seq.pos , rate= pulse width in notes , delay = start position
 8003ba8:	b490      	push	{r4, r7}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
       // uint16_t  temp_pulse=0;
	uint8_t seqpos = seq.pos>>3 ;
 8003bae:	4b42      	ldr	r3, [pc, #264]	; (8003cb8 <LFO_square_one_pulse+0x110>)
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	08db      	lsrs	r3, r3, #3
 8003bb4:	717b      	strb	r3, [r7, #5]
     //   uint16_t counter_up; // starts at 0+delay
	//uint8_t pulse_high;
	uint8_t pulse_low;
	uint8_t seq_div=7;
 8003bb6:	2307      	movs	r3, #7
 8003bb8:	71fb      	strb	r3, [r7, #7]
	uint8_t lfo_c ;
	//uint16_t pulse_length;     // 1 note -32 ? with fractions  0-8 then 0-16 then 0-32 then 0-64 ,repeat
	uint8_t pulse_high;

	for (lfo_c=0;lfo_c<10;lfo_c++){
 8003bba:	2300      	movs	r3, #0
 8003bbc:	71bb      	strb	r3, [r7, #6]
 8003bbe:	e071      	b.n	8003ca4 <LFO_square_one_pulse+0xfc>

	    pulse_low=LFO_square[lfo_c].rate;
 8003bc0:	79ba      	ldrb	r2, [r7, #6]
 8003bc2:	493e      	ldr	r1, [pc, #248]	; (8003cbc <LFO_square_one_pulse+0x114>)
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	713b      	strb	r3, [r7, #4]
	 //   if (LFO_square[lfo_c].delay<8) delay=LFO_square[lfo_c].delay;  else delay=7;
	    pulse_high=LFO_square[lfo_c].delay;
 8003bd2:	79ba      	ldrb	r2, [r7, #6]
 8003bd4:	4939      	ldr	r1, [pc, #228]	; (8003cbc <LFO_square_one_pulse+0x114>)
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	440b      	add	r3, r1
 8003be0:	3303      	adds	r3, #3
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	70fb      	strb	r3, [r7, #3]

	    if (pulse_low<64) 						 {seq_div=63;}  // This is the end
 8003be6:	793b      	ldrb	r3, [r7, #4]
 8003be8:	2b3f      	cmp	r3, #63	; 0x3f
 8003bea:	d801      	bhi.n	8003bf0 <LFO_square_one_pulse+0x48>
 8003bec:	233f      	movs	r3, #63	; 0x3f
 8003bee:	71fb      	strb	r3, [r7, #7]
	    if  (pulse_low<32) 								 {seq_div=31;}
 8003bf0:	793b      	ldrb	r3, [r7, #4]
 8003bf2:	2b1f      	cmp	r3, #31
 8003bf4:	d801      	bhi.n	8003bfa <LFO_square_one_pulse+0x52>
 8003bf6:	231f      	movs	r3, #31
 8003bf8:	71fb      	strb	r3, [r7, #7]
	    if  (pulse_low<16) 								{ seq_div=15;}
 8003bfa:	793b      	ldrb	r3, [r7, #4]
 8003bfc:	2b0f      	cmp	r3, #15
 8003bfe:	d801      	bhi.n	8003c04 <LFO_square_one_pulse+0x5c>
 8003c00:	230f      	movs	r3, #15
 8003c02:	71fb      	strb	r3, [r7, #7]
	    if  (pulse_low<8) 									 {seq_div=7;}
 8003c04:	793b      	ldrb	r3, [r7, #4]
 8003c06:	2b07      	cmp	r3, #7
 8003c08:	d801      	bhi.n	8003c0e <LFO_square_one_pulse+0x66>
 8003c0a:	2307      	movs	r3, #7
 8003c0c:	71fb      	strb	r3, [r7, #7]
	    if  (pulse_low<4) 									 {seq_div=3;}
 8003c0e:	793b      	ldrb	r3, [r7, #4]
 8003c10:	2b03      	cmp	r3, #3
 8003c12:	d801      	bhi.n	8003c18 <LFO_square_one_pulse+0x70>
 8003c14:	2303      	movs	r3, #3
 8003c16:	71fb      	strb	r3, [r7, #7]
	    //pulse_high=(pulse_high*seq_div)>>3;   // this is the start


	    if (((seqpos&seq_div)<=pulse_low)  &&	((seqpos&seq_div)>=pulse_high))	LFO_square[lfo_c].out[sampling_position]=((LFO_square[lfo_c].depth))<<8;  // high
 8003c18:	797a      	ldrb	r2, [r7, #5]
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	793a      	ldrb	r2, [r7, #4]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d321      	bcc.n	8003c6a <LFO_square_one_pulse+0xc2>
 8003c26:	797a      	ldrb	r2, [r7, #5]
 8003c28:	79fb      	ldrb	r3, [r7, #7]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	78fa      	ldrb	r2, [r7, #3]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d81a      	bhi.n	8003c6a <LFO_square_one_pulse+0xc2>
 8003c34:	79ba      	ldrb	r2, [r7, #6]
 8003c36:	4921      	ldr	r1, [pc, #132]	; (8003cbc <LFO_square_one_pulse+0x114>)
 8003c38:	4613      	mov	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	3301      	adds	r3, #1
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	79ba      	ldrb	r2, [r7, #6]
 8003c4a:	491d      	ldr	r1, [pc, #116]	; (8003cc0 <LFO_square_one_pulse+0x118>)
 8003c4c:	7809      	ldrb	r1, [r1, #0]
 8003c4e:	460c      	mov	r4, r1
 8003c50:	021b      	lsls	r3, r3, #8
 8003c52:	b298      	uxth	r0, r3
 8003c54:	4919      	ldr	r1, [pc, #100]	; (8003cbc <LFO_square_one_pulse+0x114>)
 8003c56:	4613      	mov	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4413      	add	r3, r2
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	4423      	add	r3, r4
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	440b      	add	r3, r1
 8003c64:	4602      	mov	r2, r0
 8003c66:	809a      	strh	r2, [r3, #4]
 8003c68:	e019      	b.n	8003c9e <LFO_square_one_pulse+0xf6>
	    else LFO_square[lfo_c].out[sampling_position]=(LFO_square[lfo_c].offset)<<8;		//low
 8003c6a:	79ba      	ldrb	r2, [r7, #6]
 8003c6c:	4913      	ldr	r1, [pc, #76]	; (8003cbc <LFO_square_one_pulse+0x114>)
 8003c6e:	4613      	mov	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	440b      	add	r3, r1
 8003c78:	3302      	adds	r3, #2
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	79ba      	ldrb	r2, [r7, #6]
 8003c80:	490f      	ldr	r1, [pc, #60]	; (8003cc0 <LFO_square_one_pulse+0x118>)
 8003c82:	7809      	ldrb	r1, [r1, #0]
 8003c84:	460c      	mov	r4, r1
 8003c86:	021b      	lsls	r3, r3, #8
 8003c88:	b298      	uxth	r0, r3
 8003c8a:	490c      	ldr	r1, [pc, #48]	; (8003cbc <LFO_square_one_pulse+0x114>)
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	4423      	add	r3, r4
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	440b      	add	r3, r1
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	809a      	strh	r2, [r3, #4]
	for (lfo_c=0;lfo_c<10;lfo_c++){
 8003c9e:	79bb      	ldrb	r3, [r7, #6]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	71bb      	strb	r3, [r7, #6]
 8003ca4:	79bb      	ldrb	r3, [r7, #6]
 8003ca6:	2b09      	cmp	r3, #9
 8003ca8:	d98a      	bls.n	8003bc0 <LFO_square_one_pulse+0x18>

	}
    }
 8003caa:	bf00      	nop
 8003cac:	bf00      	nop
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bc90      	pop	{r4, r7}
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	2000d0bc 	.word	0x2000d0bc
 8003cbc:	2000cf5c 	.word	0x2000cf5c
 8003cc0:	2000e078 	.word	0x2000e078
 8003cc4:	00000000 	.word	0x00000000

08003cc8 <LFO_source_synced>:



	}

void LFO_source_synced(void){     // lfo , ok , half phase
 8003cc8:	b590      	push	{r4, r7, lr}
 8003cca:	b08d      	sub	sp, #52	; 0x34
 8003ccc:	af00      	add	r7, sp, #0


	float	freq_temp=0;
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	61bb      	str	r3, [r7, #24]
	float 	freq2_temp=0;
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t 	freq_saw=0;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t lfo_c ;
	float offset=0;
 8003cde:	f04f 0300 	mov.w	r3, #0
 8003ce2:	617b      	str	r3, [r7, #20]
	uint32_t lfo_accu_temp;
	int16_t  output_hold;
	int32_t freq_tri;
	uint32_t offset2;
	uint32_t freq_temp_saw;
	uint32_t delay_value=0;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	613b      	str	r3, [r7, #16]
	uint16_t rate;

	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003cee:	e10b      	b.n	8003f08 <LFO_source_synced+0x240>

	rate= LFO[lfo_c].rate;
 8003cf0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003cf4:	498c      	ldr	r1, [pc, #560]	; (8003f28 <LFO_source_synced+0x260>)
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	4413      	add	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	440b      	add	r3, r1
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	81fb      	strh	r3, [r7, #14]
	//if (rate>10) rate=10;

	//lfo_accu_temp=(next_isr&((1<<rate)-1))*(65535>>rate);   // calculate from next_isr, do a lut here  , 20 bit    8bit  *12 bit     20bit-8bit


	lfo_accu_temp=next_isr*lfo_table[rate];   // calculate from next_isr, do a lut here  , lfo table neds to be min 16
 8003d04:	4b89      	ldr	r3, [pc, #548]	; (8003f2c <LFO_source_synced+0x264>)
 8003d06:	881b      	ldrh	r3, [r3, #0]
 8003d08:	4619      	mov	r1, r3
 8003d0a:	89fb      	ldrh	r3, [r7, #14]
 8003d0c:	4a88      	ldr	r2, [pc, #544]	; (8003f30 <LFO_source_synced+0x268>)
 8003d0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d12:	fb01 f303 	mul.w	r3, r1, r3
 8003d16:	60bb      	str	r3, [r7, #8]
	// if (lfo_c==0)     debug_value=lfo_accu_temp;

	 delay_value=8192*(LFO[lfo_c].delay&7);  //not ok
 8003d18:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003d1c:	4982      	ldr	r1, [pc, #520]	; (8003f28 <LFO_source_synced+0x260>)
 8003d1e:	4613      	mov	r3, r2
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	4413      	add	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	440b      	add	r3, r1
 8003d28:	3304      	adds	r3, #4
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	035b      	lsls	r3, r3, #13
 8003d32:	613b      	str	r3, [r7, #16]

	 freq_temp=lfo_accu_temp*0.0000479376;
 8003d34:	68b8      	ldr	r0, [r7, #8]
 8003d36:	f7fc fcc3 	bl	80006c0 <__aeabi_ui2d>
 8003d3a:	a379      	add	r3, pc, #484	; (adr r3, 8003f20 <LFO_source_synced+0x258>)
 8003d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d40:	f7fc fa52 	bl	80001e8 <__aeabi_dmul>
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	4610      	mov	r0, r2
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	f7fc fd52 	bl	80007f4 <__aeabi_d2f>
 8003d50:	4603      	mov	r3, r0
 8003d52:	61bb      	str	r3, [r7, #24]

	 freq2_temp=arm_sin_f32(freq_temp);   // +10 cycles
 8003d54:	ed97 0a06 	vldr	s0, [r7, #24]
 8003d58:	f009 faf2 	bl	800d340 <arm_sin_f32>
 8003d5c:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	freq_temp=LFO[lfo_c].depth;
 8003d60:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003d64:	4970      	ldr	r1, [pc, #448]	; (8003f28 <LFO_source_synced+0x260>)
 8003d66:	4613      	mov	r3, r2
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	4413      	add	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	440b      	add	r3, r1
 8003d70:	3301      	adds	r3, #1
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	ee07 3a90 	vmov	s15, r3
 8003d78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d7c:	edc7 7a06 	vstr	s15, [r7, #24]
	 freq_temp= (freq2_temp*freq_temp)*256;
 8003d80:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003d84:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d8c:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8003f34 <LFO_source_synced+0x26c>
 8003d90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d94:	edc7 7a06 	vstr	s15, [r7, #24]

	 freq_temp_saw=(lfo_accu_temp+delay_value)&65535        ;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	61fb      	str	r3, [r7, #28]

 		offset=(LFO[lfo_c].offset<<8); //  limit now for finetuning
 8003da2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003da6:	4960      	ldr	r1, [pc, #384]	; (8003f28 <LFO_source_synced+0x260>)
 8003da8:	4613      	mov	r3, r2
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	4413      	add	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	3303      	adds	r3, #3
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	021b      	lsls	r3, r3, #8
 8003db8:	ee07 3a90 	vmov	s15, r3
 8003dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dc0:	edc7 7a05 	vstr	s15, [r7, #20]
			offset2=offset;
 8003dc4:	edd7 7a05 	vldr	s15, [r7, #20]
 8003dc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dcc:	ee17 3a90 	vmov	r3, s15
 8003dd0:	607b      	str	r3, [r7, #4]
 		freq2_temp=(freq_temp+offset);
 8003dd2:	ed97 7a06 	vldr	s14, [r7, #24]
 8003dd6:	edd7 7a05 	vldr	s15, [r7, #20]
 8003dda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dde:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		if (freq2_temp>65534)  freq2_temp=65535;
 8003de2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003de6:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8003f38 <LFO_source_synced+0x270>
 8003dea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003df2:	dd01      	ble.n	8003df8 <LFO_source_synced+0x130>
 8003df4:	4b51      	ldr	r3, [pc, #324]	; (8003f3c <LFO_source_synced+0x274>)
 8003df6:	62fb      	str	r3, [r7, #44]	; 0x2c
	//	if (freq2_temp<-32766) {  freq2_temp=-32767; }  // clip to 13bit -/+ 8000

						output_hold=freq2_temp;
 8003df8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003dfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e00:	ee17 3a90 	vmov	r3, s15
 8003e04:	807b      	strh	r3, [r7, #2]
				if (freq_temp_saw>65534)  freq_temp_saw=65535;
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d902      	bls.n	8003e16 <LFO_source_synced+0x14e>
 8003e10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e14:	61fb      	str	r3, [r7, #28]
					//	lfo_accu_temp=lfo_accu_temp/6;
					freq_saw=((freq_temp_saw*LFO[lfo_c].depth)>>8)+offset2;   // 51 000  + offset
 8003e16:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003e1a:	4943      	ldr	r1, [pc, #268]	; (8003f28 <LFO_source_synced+0x260>)
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	4413      	add	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	440b      	add	r3, r1
 8003e26:	3301      	adds	r3, #1
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	fb02 f303 	mul.w	r3, r2, r3
 8003e32:	0a1b      	lsrs	r3, r3, #8
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	4413      	add	r3, r2
 8003e38:	62bb      	str	r3, [r7, #40]	; 0x28

					if (freq_saw>65534)  freq_saw=65535;   // clip
 8003e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d902      	bls.n	8003e4a <LFO_source_synced+0x182>
 8003e44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e48:	62bb      	str	r3, [r7, #40]	; 0x28
				//	freq_saw=65535-freq_saw;
					LFO[lfo_c].out[sampling_position]=output_hold; // sine out
 8003e4a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003e4e:	4b3c      	ldr	r3, [pc, #240]	; (8003f40 <LFO_source_synced+0x278>)
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	461c      	mov	r4, r3
 8003e54:	8878      	ldrh	r0, [r7, #2]
 8003e56:	4934      	ldr	r1, [pc, #208]	; (8003f28 <LFO_source_synced+0x260>)
 8003e58:	4613      	mov	r3, r2
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	4413      	add	r3, r2
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	4423      	add	r3, r4
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	440b      	add	r3, r1
 8003e66:	4602      	mov	r2, r0
 8003e68:	80da      	strh	r2, [r3, #6]
				   LFO[lfo_c].out_saw[sampling_position]=freq_saw;    // saw 16 bit
 8003e6a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003e6e:	4b34      	ldr	r3, [pc, #208]	; (8003f40 <LFO_source_synced+0x278>)
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	461c      	mov	r4, r3
 8003e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e76:	b298      	uxth	r0, r3
 8003e78:	492b      	ldr	r1, [pc, #172]	; (8003f28 <LFO_source_synced+0x260>)
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	011b      	lsls	r3, r3, #4
 8003e7e:	4413      	add	r3, r2
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	4423      	add	r3, r4
 8003e84:	330c      	adds	r3, #12
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	440b      	add	r3, r1
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	805a      	strh	r2, [r3, #2]


				   if(freq_temp_saw<32768)   freq_tri=freq_temp_saw; else freq_tri=65536-freq_temp_saw;    // 0-32767
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e94:	d202      	bcs.n	8003e9c <LFO_source_synced+0x1d4>
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	623b      	str	r3, [r7, #32]
 8003e9a:	e003      	b.n	8003ea4 <LFO_source_synced+0x1dc>
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8003ea2:	623b      	str	r3, [r7, #32]
				   freq_tri=((freq_tri*LFO[lfo_c].depth)>>7)+offset2 ; // tri 16 bit
 8003ea4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003ea8:	491f      	ldr	r1, [pc, #124]	; (8003f28 <LFO_source_synced+0x260>)
 8003eaa:	4613      	mov	r3, r2
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	4413      	add	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	440b      	add	r3, r1
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	fb02 f303 	mul.w	r3, r2, r3
 8003ec0:	11db      	asrs	r3, r3, #7
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	623b      	str	r3, [r7, #32]
				//   freq_tri=((freq_tri*255)>>7)+offset2 ; // tri 16 bit
				   if (freq_tri>65534)  freq_tri=65535;   // clip
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	dd02      	ble.n	8003eda <LFO_source_synced+0x212>
 8003ed4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ed8:	623b      	str	r3, [r7, #32]
				  LFO[lfo_c].out_tri[sampling_position]=freq_tri;
 8003eda:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003ede:	4b18      	ldr	r3, [pc, #96]	; (8003f40 <LFO_source_synced+0x278>)
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	461c      	mov	r4, r3
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	b298      	uxth	r0, r3
 8003ee8:	490f      	ldr	r1, [pc, #60]	; (8003f28 <LFO_source_synced+0x260>)
 8003eea:	4613      	mov	r3, r2
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	4413      	add	r3, r2
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	4423      	add	r3, r4
 8003ef4:	3314      	adds	r3, #20
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	440b      	add	r3, r1
 8003efa:	4602      	mov	r2, r0
 8003efc:	80da      	strh	r2, [r3, #6]
	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 8003efe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f02:	3301      	adds	r3, #1
 8003f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f0c:	2b09      	cmp	r3, #9
 8003f0e:	f67f aeef 	bls.w	8003cf0 <LFO_source_synced+0x28>

		} // lfo gen : 0=f1 , 1=tempo,2=pitch



	}
 8003f12:	bf00      	nop
 8003f14:	bf00      	nop
 8003f16:	3734      	adds	r7, #52	; 0x34
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd90      	pop	{r4, r7, pc}
 8003f1c:	f3af 8000 	nop.w
 8003f20:	64dc8498 	.word	0x64dc8498
 8003f24:	3f092213 	.word	0x3f092213
 8003f28:	2000cc78 	.word	0x2000cc78
 8003f2c:	2000bef0 	.word	0x2000bef0
 8003f30:	200103a0 	.word	0x200103a0
 8003f34:	43800000 	.word	0x43800000
 8003f38:	477ffe00 	.word	0x477ffe00
 8003f3c:	477fff00 	.word	0x477fff00
 8003f40:	2000e078 	.word	0x2000e078

08003f44 <frq_point>:


void  frq_point(void){
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0

		float freq_temp;



		freq_temp=freq_pointer[0] [sampling_position]*65536;; // load up coeffs
 8003f4a:	4b3c      	ldr	r3, [pc, #240]	; (800403c <frq_point+0xf8>)
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	4a3c      	ldr	r2, [pc, #240]	; (8004040 <frq_point+0xfc>)
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	edd3 7a00 	vldr	s15, [r3]
 8003f58:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8004044 <frq_point+0x100>
 8003f5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f60:	edc7 7a01 	vstr	s15, [r7, #4]
			freq_point[0]=freq_temp;
 8003f64:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f6c:	ee17 3a90 	vmov	r3, s15
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	4b35      	ldr	r3, [pc, #212]	; (8004048 <frq_point+0x104>)
 8003f74:	801a      	strh	r2, [r3, #0]
			freq_temp=freq_pointer[1] [sampling_position]*65536;  // ok , array was too short
 8003f76:	4b31      	ldr	r3, [pc, #196]	; (800403c <frq_point+0xf8>)
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	4a31      	ldr	r2, [pc, #196]	; (8004040 <frq_point+0xfc>)
 8003f7c:	3309      	adds	r3, #9
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4413      	add	r3, r2
 8003f82:	edd3 7a00 	vldr	s15, [r3]
 8003f86:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004044 <frq_point+0x100>
 8003f8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f8e:	edc7 7a01 	vstr	s15, [r7, #4]
			freq_point[2]=freq_temp;
 8003f92:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f9a:	ee17 3a90 	vmov	r3, s15
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	4b29      	ldr	r3, [pc, #164]	; (8004048 <frq_point+0x104>)
 8003fa2:	809a      	strh	r2, [r3, #4]
			freq_temp=freq_pointer[2] [sampling_position]*65536;  // ok , array was too short
 8003fa4:	4b25      	ldr	r3, [pc, #148]	; (800403c <frq_point+0xf8>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	4a25      	ldr	r2, [pc, #148]	; (8004040 <frq_point+0xfc>)
 8003faa:	3312      	adds	r3, #18
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4413      	add	r3, r2
 8003fb0:	edd3 7a00 	vldr	s15, [r3]
 8003fb4:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004044 <frq_point+0x100>
 8003fb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fbc:	edc7 7a01 	vstr	s15, [r7, #4]
			freq_point[4]=freq_temp;
 8003fc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003fc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fc8:	ee17 3a90 	vmov	r3, s15
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	4b1e      	ldr	r3, [pc, #120]	; (8004048 <frq_point+0x104>)
 8003fd0:	811a      	strh	r2, [r3, #8]
			freq_temp=freq_pointer[3] [sampling_position]*65536;  // ok , array was too short
 8003fd2:	4b1a      	ldr	r3, [pc, #104]	; (800403c <frq_point+0xf8>)
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	4a1a      	ldr	r2, [pc, #104]	; (8004040 <frq_point+0xfc>)
 8003fd8:	331b      	adds	r3, #27
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	edd3 7a00 	vldr	s15, [r3]
 8003fe2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004044 <frq_point+0x100>
 8003fe6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fea:	edc7 7a01 	vstr	s15, [r7, #4]
			freq_point[6]=freq_temp;
 8003fee:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ff2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ff6:	ee17 3a90 	vmov	r3, s15
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	4b12      	ldr	r3, [pc, #72]	; (8004048 <frq_point+0x104>)
 8003ffe:	819a      	strh	r2, [r3, #12]
	//		if (freq_point[0]>1) freq_point[0]=1; else if (freq_point[0]<0) freq_point[0]=0;// just in case
		//	if (freq_point[4]>1) freq_point[4]=1; else if (freq_point[4]<0) freq_point[4]=0;// just in case
		//	if (freq_point[2]>1) freq_point[2]=1; else if (freq_point[2]<0) freq_point[2]=0;// just in case
		//	if (freq_point[6]>1) freq_point[6]=1; else if (freq_point[6]<0) freq_point[6]=0;// just in case

			freq_point[1]=65535-freq_point[0];
 8004000:	4b11      	ldr	r3, [pc, #68]	; (8004048 <frq_point+0x104>)
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	43db      	mvns	r3, r3
 8004006:	b29a      	uxth	r2, r3
 8004008:	4b0f      	ldr	r3, [pc, #60]	; (8004048 <frq_point+0x104>)
 800400a:	805a      	strh	r2, [r3, #2]
			freq_point[3]=65535-freq_point[2];
 800400c:	4b0e      	ldr	r3, [pc, #56]	; (8004048 <frq_point+0x104>)
 800400e:	889b      	ldrh	r3, [r3, #4]
 8004010:	43db      	mvns	r3, r3
 8004012:	b29a      	uxth	r2, r3
 8004014:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <frq_point+0x104>)
 8004016:	80da      	strh	r2, [r3, #6]
		freq_point[5]=65535-freq_point[4];
 8004018:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <frq_point+0x104>)
 800401a:	891b      	ldrh	r3, [r3, #8]
 800401c:	43db      	mvns	r3, r3
 800401e:	b29a      	uxth	r2, r3
 8004020:	4b09      	ldr	r3, [pc, #36]	; (8004048 <frq_point+0x104>)
 8004022:	815a      	strh	r2, [r3, #10]
			freq_point[7]=65535-freq_point[6];
 8004024:	4b08      	ldr	r3, [pc, #32]	; (8004048 <frq_point+0x104>)
 8004026:	899b      	ldrh	r3, [r3, #12]
 8004028:	43db      	mvns	r3, r3
 800402a:	b29a      	uxth	r2, r3
 800402c:	4b06      	ldr	r3, [pc, #24]	; (8004048 <frq_point+0x104>)
 800402e:	81da      	strh	r2, [r3, #14]
		//	filter_res[0]=freq_point[0]*0.2;
		//	filter_res[1]=freq_point[1]*0.2;
		//	filter_res[2]=freq_point[2]*0.2;
		//	filter_res[3]=freq_point[3]*0.2;

}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr
 800403c:	2000e078 	.word	0x2000e078
 8004040:	2000bf48 	.word	0x2000bf48
 8004044:	47800000 	.word	0x47800000
 8004048:	2000bf38 	.word	0x2000bf38

0800404c <ADSR_loop>:


	}


void ADSR_loop(void){
 800404c:	b490      	push	{r4, r7}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
		uint8_t counter;
		uint8_t ok=1;
 8004052:	2301      	movs	r3, #1
 8004054:	71bb      	strb	r3, [r7, #6]
		uint8_t ADSR_out=0;
 8004056:	2300      	movs	r3, #0
 8004058:	717b      	strb	r3, [r7, #5]
		uint8_t position=sampling_position;
 800405a:	4ba1      	ldr	r3, [pc, #644]	; (80042e0 <ADSR_loop+0x294>)
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	713b      	strb	r3, [r7, #4]
		//position=0;

		for (counter=0;counter<4;counter++){
 8004060:	2300      	movs	r3, #0
 8004062:	71fb      	strb	r3, [r7, #7]
 8004064:	e181      	b.n	800436a <ADSR_loop+0x31e>
		    ok=1;
 8004066:	2301      	movs	r3, #1
 8004068:	71bb      	strb	r3, [r7, #6]
	while(ok){	      // do one thing then exit
 800406a:	e141      	b.n	80042f0 <ADSR_loop+0x2a4>
	    ADSR[counter].buffer[position]=0;
 800406c:	79fa      	ldrb	r2, [r7, #7]
 800406e:	7939      	ldrb	r1, [r7, #4]
 8004070:	489c      	ldr	r0, [pc, #624]	; (80042e4 <ADSR_loop+0x298>)
 8004072:	4613      	mov	r3, r2
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	1a9b      	subs	r3, r3, r2
 8004078:	440b      	add	r3, r1
 800407a:	3304      	adds	r3, #4
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	4403      	add	r3, r0
 8004080:	2200      	movs	r2, #0
 8004082:	80da      	strh	r2, [r3, #6]
	    ADSR[counter].sustain_data=ADSR[counter].sustain<<4;
 8004084:	79fa      	ldrb	r2, [r7, #7]
 8004086:	4997      	ldr	r1, [pc, #604]	; (80042e4 <ADSR_loop+0x298>)
 8004088:	4613      	mov	r3, r2
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	1a9b      	subs	r3, r3, r2
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	440b      	add	r3, r1
 8004092:	3302      	adds	r3, #2
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	79fa      	ldrb	r2, [r7, #7]
 800409a:	b218      	sxth	r0, r3
 800409c:	4991      	ldr	r1, [pc, #580]	; (80042e4 <ADSR_loop+0x298>)
 800409e:	4613      	mov	r3, r2
 80040a0:	011b      	lsls	r3, r3, #4
 80040a2:	1a9b      	subs	r3, r3, r2
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	440b      	add	r3, r1
 80040a8:	330a      	adds	r3, #10
 80040aa:	4602      	mov	r2, r0
 80040ac:	801a      	strh	r2, [r3, #0]
      if ( note[counter].position) {   ADSR[counter].attack_data=1000;     ADSR[counter].decay_data=1000;
 80040ae:	79fb      	ldrb	r3, [r7, #7]
 80040b0:	4a8d      	ldr	r2, [pc, #564]	; (80042e8 <ADSR_loop+0x29c>)
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	4413      	add	r3, r2
 80040b6:	3304      	adds	r3, #4
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d030      	beq.n	8004120 <ADSR_loop+0xd4>
 80040be:	79fa      	ldrb	r2, [r7, #7]
 80040c0:	4988      	ldr	r1, [pc, #544]	; (80042e4 <ADSR_loop+0x298>)
 80040c2:	4613      	mov	r3, r2
 80040c4:	011b      	lsls	r3, r3, #4
 80040c6:	1a9b      	subs	r3, r3, r2
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	440b      	add	r3, r1
 80040cc:	3306      	adds	r3, #6
 80040ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040d2:	801a      	strh	r2, [r3, #0]
 80040d4:	79fa      	ldrb	r2, [r7, #7]
 80040d6:	4983      	ldr	r1, [pc, #524]	; (80042e4 <ADSR_loop+0x298>)
 80040d8:	4613      	mov	r3, r2
 80040da:	011b      	lsls	r3, r3, #4
 80040dc:	1a9b      	subs	r3, r3, r2
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	440b      	add	r3, r1
 80040e2:	3308      	adds	r3, #8
 80040e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040e8:	801a      	strh	r2, [r3, #0]
      ADSR[counter].release_data= ADSR[counter].sustain_data;       note[counter].position=0; }
 80040ea:	79f9      	ldrb	r1, [r7, #7]
 80040ec:	79fa      	ldrb	r2, [r7, #7]
 80040ee:	487d      	ldr	r0, [pc, #500]	; (80042e4 <ADSR_loop+0x298>)
 80040f0:	460b      	mov	r3, r1
 80040f2:	011b      	lsls	r3, r3, #4
 80040f4:	1a5b      	subs	r3, r3, r1
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	4403      	add	r3, r0
 80040fa:	330a      	adds	r3, #10
 80040fc:	f9b3 0000 	ldrsh.w	r0, [r3]
 8004100:	4978      	ldr	r1, [pc, #480]	; (80042e4 <ADSR_loop+0x298>)
 8004102:	4613      	mov	r3, r2
 8004104:	011b      	lsls	r3, r3, #4
 8004106:	1a9b      	subs	r3, r3, r2
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	440b      	add	r3, r1
 800410c:	330c      	adds	r3, #12
 800410e:	4602      	mov	r2, r0
 8004110:	801a      	strh	r2, [r3, #0]
 8004112:	79fb      	ldrb	r3, [r7, #7]
 8004114:	4a74      	ldr	r2, [pc, #464]	; (80042e8 <ADSR_loop+0x29c>)
 8004116:	011b      	lsls	r3, r3, #4
 8004118:	4413      	add	r3, r2
 800411a:	3304      	adds	r3, #4
 800411c:	2200      	movs	r2, #0
 800411e:	701a      	strb	r2, [r3, #0]

      if (ADSR[counter].attack_data>0) {   ADSR[counter].attack_data=ADSR[counter].attack_data-(ADSR[counter].attack<<2);
 8004120:	79fa      	ldrb	r2, [r7, #7]
 8004122:	4970      	ldr	r1, [pc, #448]	; (80042e4 <ADSR_loop+0x298>)
 8004124:	4613      	mov	r3, r2
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	1a9b      	subs	r3, r3, r2
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	440b      	add	r3, r1
 800412e:	3306      	adds	r3, #6
 8004130:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004134:	2b00      	cmp	r3, #0
 8004136:	dd3e      	ble.n	80041b6 <ADSR_loop+0x16a>
 8004138:	79fa      	ldrb	r2, [r7, #7]
 800413a:	496a      	ldr	r1, [pc, #424]	; (80042e4 <ADSR_loop+0x298>)
 800413c:	4613      	mov	r3, r2
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	1a9b      	subs	r3, r3, r2
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	440b      	add	r3, r1
 8004146:	3306      	adds	r3, #6
 8004148:	f9b3 3000 	ldrsh.w	r3, [r3]
 800414c:	b299      	uxth	r1, r3
 800414e:	79fa      	ldrb	r2, [r7, #7]
 8004150:	4864      	ldr	r0, [pc, #400]	; (80042e4 <ADSR_loop+0x298>)
 8004152:	4613      	mov	r3, r2
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	1a9b      	subs	r3, r3, r2
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	4403      	add	r3, r0
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	b29b      	uxth	r3, r3
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	b29b      	uxth	r3, r3
 8004164:	1acb      	subs	r3, r1, r3
 8004166:	b29b      	uxth	r3, r3
 8004168:	79fa      	ldrb	r2, [r7, #7]
 800416a:	b218      	sxth	r0, r3
 800416c:	495d      	ldr	r1, [pc, #372]	; (80042e4 <ADSR_loop+0x298>)
 800416e:	4613      	mov	r3, r2
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	1a9b      	subs	r3, r3, r2
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	440b      	add	r3, r1
 8004178:	3306      	adds	r3, #6
 800417a:	4602      	mov	r2, r0
 800417c:	801a      	strh	r2, [r3, #0]
    ADSR[counter].buffer[position]=1000-ADSR[counter].attack_data;break;
 800417e:	79fa      	ldrb	r2, [r7, #7]
 8004180:	4958      	ldr	r1, [pc, #352]	; (80042e4 <ADSR_loop+0x298>)
 8004182:	4613      	mov	r3, r2
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	1a9b      	subs	r3, r3, r2
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	440b      	add	r3, r1
 800418c:	3306      	adds	r3, #6
 800418e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004192:	b29b      	uxth	r3, r3
 8004194:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8004198:	b29b      	uxth	r3, r3
 800419a:	79fa      	ldrb	r2, [r7, #7]
 800419c:	7939      	ldrb	r1, [r7, #4]
 800419e:	b21c      	sxth	r4, r3
 80041a0:	4850      	ldr	r0, [pc, #320]	; (80042e4 <ADSR_loop+0x298>)
 80041a2:	4613      	mov	r3, r2
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	1a9b      	subs	r3, r3, r2
 80041a8:	440b      	add	r3, r1
 80041aa:	3304      	adds	r3, #4
 80041ac:	005b      	lsls	r3, r3, #1
 80041ae:	4403      	add	r3, r0
 80041b0:	4622      	mov	r2, r4
 80041b2:	80da      	strh	r2, [r3, #6]
 80041b4:	e0a0      	b.n	80042f8 <ADSR_loop+0x2ac>
      }

     if (ADSR[counter].decay_data>=ADSR[counter].sustain_data)   { ADSR[counter].decay_data=ADSR[counter].decay_data-(ADSR[counter].decay);
 80041b6:	79fa      	ldrb	r2, [r7, #7]
 80041b8:	494a      	ldr	r1, [pc, #296]	; (80042e4 <ADSR_loop+0x298>)
 80041ba:	4613      	mov	r3, r2
 80041bc:	011b      	lsls	r3, r3, #4
 80041be:	1a9b      	subs	r3, r3, r2
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	440b      	add	r3, r1
 80041c4:	3308      	adds	r3, #8
 80041c6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80041ca:	79fa      	ldrb	r2, [r7, #7]
 80041cc:	4845      	ldr	r0, [pc, #276]	; (80042e4 <ADSR_loop+0x298>)
 80041ce:	4613      	mov	r3, r2
 80041d0:	011b      	lsls	r3, r3, #4
 80041d2:	1a9b      	subs	r3, r3, r2
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	4403      	add	r3, r0
 80041d8:	330a      	adds	r3, #10
 80041da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041de:	4299      	cmp	r1, r3
 80041e0:	db38      	blt.n	8004254 <ADSR_loop+0x208>
 80041e2:	79fa      	ldrb	r2, [r7, #7]
 80041e4:	493f      	ldr	r1, [pc, #252]	; (80042e4 <ADSR_loop+0x298>)
 80041e6:	4613      	mov	r3, r2
 80041e8:	011b      	lsls	r3, r3, #4
 80041ea:	1a9b      	subs	r3, r3, r2
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	440b      	add	r3, r1
 80041f0:	3308      	adds	r3, #8
 80041f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041f6:	b299      	uxth	r1, r3
 80041f8:	79fa      	ldrb	r2, [r7, #7]
 80041fa:	483a      	ldr	r0, [pc, #232]	; (80042e4 <ADSR_loop+0x298>)
 80041fc:	4613      	mov	r3, r2
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	1a9b      	subs	r3, r3, r2
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	4403      	add	r3, r0
 8004206:	3301      	adds	r3, #1
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	b29b      	uxth	r3, r3
 800420c:	1acb      	subs	r3, r1, r3
 800420e:	b29b      	uxth	r3, r3
 8004210:	79fa      	ldrb	r2, [r7, #7]
 8004212:	b218      	sxth	r0, r3
 8004214:	4933      	ldr	r1, [pc, #204]	; (80042e4 <ADSR_loop+0x298>)
 8004216:	4613      	mov	r3, r2
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	1a9b      	subs	r3, r3, r2
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	440b      	add	r3, r1
 8004220:	3308      	adds	r3, #8
 8004222:	4602      	mov	r2, r0
 8004224:	801a      	strh	r2, [r3, #0]
    ADSR[counter].buffer[position]=ADSR[counter].decay_data;break;
 8004226:	79f9      	ldrb	r1, [r7, #7]
 8004228:	79fa      	ldrb	r2, [r7, #7]
 800422a:	7938      	ldrb	r0, [r7, #4]
 800422c:	4c2d      	ldr	r4, [pc, #180]	; (80042e4 <ADSR_loop+0x298>)
 800422e:	460b      	mov	r3, r1
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	1a5b      	subs	r3, r3, r1
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	4423      	add	r3, r4
 8004238:	3308      	adds	r3, #8
 800423a:	f9b3 4000 	ldrsh.w	r4, [r3]
 800423e:	4929      	ldr	r1, [pc, #164]	; (80042e4 <ADSR_loop+0x298>)
 8004240:	4613      	mov	r3, r2
 8004242:	011b      	lsls	r3, r3, #4
 8004244:	1a9b      	subs	r3, r3, r2
 8004246:	4403      	add	r3, r0
 8004248:	3304      	adds	r3, #4
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	440b      	add	r3, r1
 800424e:	4622      	mov	r2, r4
 8004250:	80da      	strh	r2, [r3, #6]
 8004252:	e051      	b.n	80042f8 <ADSR_loop+0x2ac>

      }
      if (ADSR[counter].release_data>0)  {  ADSR[counter].release_data=ADSR[counter].release_data-ADSR[counter].release;
 8004254:	79fa      	ldrb	r2, [r7, #7]
 8004256:	4923      	ldr	r1, [pc, #140]	; (80042e4 <ADSR_loop+0x298>)
 8004258:	4613      	mov	r3, r2
 800425a:	011b      	lsls	r3, r3, #4
 800425c:	1a9b      	subs	r3, r3, r2
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	440b      	add	r3, r1
 8004262:	330c      	adds	r3, #12
 8004264:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004268:	2b00      	cmp	r3, #0
 800426a:	dd3f      	ble.n	80042ec <ADSR_loop+0x2a0>
 800426c:	79fa      	ldrb	r2, [r7, #7]
 800426e:	491d      	ldr	r1, [pc, #116]	; (80042e4 <ADSR_loop+0x298>)
 8004270:	4613      	mov	r3, r2
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	1a9b      	subs	r3, r3, r2
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	440b      	add	r3, r1
 800427a:	330c      	adds	r3, #12
 800427c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004280:	b299      	uxth	r1, r3
 8004282:	79fa      	ldrb	r2, [r7, #7]
 8004284:	4817      	ldr	r0, [pc, #92]	; (80042e4 <ADSR_loop+0x298>)
 8004286:	4613      	mov	r3, r2
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	1a9b      	subs	r3, r3, r2
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	4403      	add	r3, r0
 8004290:	3303      	adds	r3, #3
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	b29b      	uxth	r3, r3
 8004296:	1acb      	subs	r3, r1, r3
 8004298:	b29b      	uxth	r3, r3
 800429a:	79fa      	ldrb	r2, [r7, #7]
 800429c:	b218      	sxth	r0, r3
 800429e:	4911      	ldr	r1, [pc, #68]	; (80042e4 <ADSR_loop+0x298>)
 80042a0:	4613      	mov	r3, r2
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	1a9b      	subs	r3, r3, r2
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	440b      	add	r3, r1
 80042aa:	330c      	adds	r3, #12
 80042ac:	4602      	mov	r2, r0
 80042ae:	801a      	strh	r2, [r3, #0]
      ADSR[counter].buffer[position]=ADSR[counter].release_data;break;
 80042b0:	79f9      	ldrb	r1, [r7, #7]
 80042b2:	79fa      	ldrb	r2, [r7, #7]
 80042b4:	7938      	ldrb	r0, [r7, #4]
 80042b6:	4c0b      	ldr	r4, [pc, #44]	; (80042e4 <ADSR_loop+0x298>)
 80042b8:	460b      	mov	r3, r1
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	1a5b      	subs	r3, r3, r1
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	4423      	add	r3, r4
 80042c2:	330c      	adds	r3, #12
 80042c4:	f9b3 4000 	ldrsh.w	r4, [r3]
 80042c8:	4906      	ldr	r1, [pc, #24]	; (80042e4 <ADSR_loop+0x298>)
 80042ca:	4613      	mov	r3, r2
 80042cc:	011b      	lsls	r3, r3, #4
 80042ce:	1a9b      	subs	r3, r3, r2
 80042d0:	4403      	add	r3, r0
 80042d2:	3304      	adds	r3, #4
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	440b      	add	r3, r1
 80042d8:	4622      	mov	r2, r4
 80042da:	80da      	strh	r2, [r3, #6]
 80042dc:	e00c      	b.n	80042f8 <ADSR_loop+0x2ac>
 80042de:	bf00      	nop
 80042e0:	2000e078 	.word	0x2000e078
 80042e4:	2000d024 	.word	0x2000d024
 80042e8:	20008e1c 	.word	0x20008e1c
      }
      ok=0;
 80042ec:	2300      	movs	r3, #0
 80042ee:	71bb      	strb	r3, [r7, #6]
	while(ok){	      // do one thing then exit
 80042f0:	79bb      	ldrb	r3, [r7, #6]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f47f aeba 	bne.w	800406c <ADSR_loop+0x20>
	}
	if ( ADSR[counter].buffer[position]<0)    ADSR[counter].buffer[position]=0;     // 0-127
 80042f8:	79fa      	ldrb	r2, [r7, #7]
 80042fa:	7939      	ldrb	r1, [r7, #4]
 80042fc:	4820      	ldr	r0, [pc, #128]	; (8004380 <ADSR_loop+0x334>)
 80042fe:	4613      	mov	r3, r2
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	1a9b      	subs	r3, r3, r2
 8004304:	440b      	add	r3, r1
 8004306:	3304      	adds	r3, #4
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	4403      	add	r3, r0
 800430c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004310:	2b00      	cmp	r3, #0
 8004312:	da0b      	bge.n	800432c <ADSR_loop+0x2e0>
 8004314:	79fa      	ldrb	r2, [r7, #7]
 8004316:	7939      	ldrb	r1, [r7, #4]
 8004318:	4819      	ldr	r0, [pc, #100]	; (8004380 <ADSR_loop+0x334>)
 800431a:	4613      	mov	r3, r2
 800431c:	011b      	lsls	r3, r3, #4
 800431e:	1a9b      	subs	r3, r3, r2
 8004320:	440b      	add	r3, r1
 8004322:	3304      	adds	r3, #4
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	4403      	add	r3, r0
 8004328:	2200      	movs	r2, #0
 800432a:	80da      	strh	r2, [r3, #6]
	if ( ADSR[counter].buffer[position]>1023)    ADSR[counter].buffer[position]=1023;
 800432c:	79fa      	ldrb	r2, [r7, #7]
 800432e:	7939      	ldrb	r1, [r7, #4]
 8004330:	4813      	ldr	r0, [pc, #76]	; (8004380 <ADSR_loop+0x334>)
 8004332:	4613      	mov	r3, r2
 8004334:	011b      	lsls	r3, r3, #4
 8004336:	1a9b      	subs	r3, r3, r2
 8004338:	440b      	add	r3, r1
 800433a:	3304      	adds	r3, #4
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	4403      	add	r3, r0
 8004340:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004348:	db0c      	blt.n	8004364 <ADSR_loop+0x318>
 800434a:	79fa      	ldrb	r2, [r7, #7]
 800434c:	7939      	ldrb	r1, [r7, #4]
 800434e:	480c      	ldr	r0, [pc, #48]	; (8004380 <ADSR_loop+0x334>)
 8004350:	4613      	mov	r3, r2
 8004352:	011b      	lsls	r3, r3, #4
 8004354:	1a9b      	subs	r3, r3, r2
 8004356:	440b      	add	r3, r1
 8004358:	3304      	adds	r3, #4
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	4403      	add	r3, r0
 800435e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004362:	80da      	strh	r2, [r3, #6]
		for (counter=0;counter<4;counter++){
 8004364:	79fb      	ldrb	r3, [r7, #7]
 8004366:	3301      	adds	r3, #1
 8004368:	71fb      	strb	r3, [r7, #7]
 800436a:	79fb      	ldrb	r3, [r7, #7]
 800436c:	2b03      	cmp	r3, #3
 800436e:	f67f ae7a 	bls.w	8004066 <ADSR_loop+0x1a>
  }




}
 8004372:	bf00      	nop
 8004374:	bf00      	nop
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bc90      	pop	{r4, r7}
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	2000d024 	.word	0x2000d024

08004384 <display_process>:
// disableplay related data

void display_process(void){							// keep data processing here
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0




}   // end o void
 8004388:	bf00      	nop
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
	...

08004394 <displayBuffer2>:


    void displayBuffer2 (void){       // only for feedback line now
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
														    //when scrolling maybe use this only until  settled
	uint16_t feedback_loc=(menu_title_lut[enc_out1]&896)+107;														// start 2*8 bit then squeeze in 20*6 bit characters
 800439a:	4b74      	ldr	r3, [pc, #464]	; (800456c <displayBuffer2+0x1d8>)
 800439c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043a0:	461a      	mov	r2, r3
 80043a2:	4b73      	ldr	r3, [pc, #460]	; (8004570 <displayBuffer2+0x1dc>)
 80043a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	f403 7360 	and.w	r3, r3, #896	; 0x380
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	336b      	adds	r3, #107	; 0x6b
 80043b2:	80bb      	strh	r3, [r7, #4]

	uint8_t crap_hold9=(menu_title_lut[enc_out1]>>16)&255;
 80043b4:	4b6d      	ldr	r3, [pc, #436]	; (800456c <displayBuffer2+0x1d8>)
 80043b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043ba:	461a      	mov	r2, r3
 80043bc:	4b6c      	ldr	r3, [pc, #432]	; (8004570 <displayBuffer2+0x1dc>)
 80043be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043c2:	0c1b      	lsrs	r3, r3, #16
 80043c4:	70fb      	strb	r3, [r7, #3]

	memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 80043c6:	78fb      	ldrb	r3, [r7, #3]
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4a6a      	ldr	r2, [pc, #424]	; (8004574 <displayBuffer2+0x1e0>)
 80043cc:	4413      	add	r3, r2
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	4b69      	ldr	r3, [pc, #420]	; (8004578 <displayBuffer2+0x1e4>)
 80043d2:	6810      	ldr	r0, [r2, #0]
 80043d4:	6851      	ldr	r1, [r2, #4]
 80043d6:	c303      	stmia	r3!, {r0, r1}
	 char temp_char[]="  ";
 80043d8:	4a68      	ldr	r2, [pc, #416]	; (800457c <displayBuffer2+0x1e8>)
 80043da:	463b      	mov	r3, r7
 80043dc:	6812      	ldr	r2, [r2, #0]
 80043de:	4611      	mov	r1, r2
 80043e0:	8019      	strh	r1, [r3, #0]
 80043e2:	3302      	adds	r3, #2
 80043e4:	0c12      	lsrs	r2, r2, #16
 80043e6:	701a      	strb	r2, [r3, #0]
	// char temp_char2[]="________";
				 memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 80043e8:	4b60      	ldr	r3, [pc, #384]	; (800456c <displayBuffer2+0x1d8>)
 80043ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	461a      	mov	r2, r3
 80043f2:	4b63      	ldr	r3, [pc, #396]	; (8004580 <displayBuffer2+0x1ec>)
 80043f4:	4413      	add	r3, r2
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	803b      	strh	r3, [r7, #0]
				 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 80043fc:	463b      	mov	r3, r7
 80043fe:	4618      	mov	r0, r3
 8004400:	f008 ffe2 	bl	800d3c8 <atoi>
 8004404:	4603      	mov	r3, r0
 8004406:	b2da      	uxtb	r2, r3
 8004408:	4b5e      	ldr	r3, [pc, #376]	; (8004584 <displayBuffer2+0x1f0>)
 800440a:	701a      	strb	r2, [r3, #0]

	menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 800440c:	4b5d      	ldr	r3, [pc, #372]	; (8004584 <displayBuffer2+0x1f0>)
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	4619      	mov	r1, r3
 8004412:	4859      	ldr	r0, [pc, #356]	; (8004578 <displayBuffer2+0x1e4>)
 8004414:	f7fc fbc0 	bl	8000b98 <menu_vars>
 8004418:	4603      	mov	r3, r0
 800441a:	4a5b      	ldr	r2, [pc, #364]	; (8004588 <displayBuffer2+0x1f4>)
 800441c:	6013      	str	r3, [r2, #0]


	     memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+crap_hold9),8);   // copy feedback data for reading,ok
 800441e:	88bb      	ldrh	r3, [r7, #4]
 8004420:	3308      	adds	r3, #8
 8004422:	4a5a      	ldr	r2, [pc, #360]	; (800458c <displayBuffer2+0x1f8>)
 8004424:	1898      	adds	r0, r3, r2
 8004426:	78fb      	ldrb	r3, [r7, #3]
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4a52      	ldr	r2, [pc, #328]	; (8004574 <displayBuffer2+0x1e0>)
 800442c:	4413      	add	r3, r2
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2208      	movs	r2, #8
 8004432:	4619      	mov	r1, r3
 8004434:	f008 fff6 	bl	800d424 <memcpy>
	     memcpy(default_menu3+feedback_loc+17,potSource+380,3);  // lcd out
 8004438:	88bb      	ldrh	r3, [r7, #4]
 800443a:	3311      	adds	r3, #17
 800443c:	4a53      	ldr	r2, [pc, #332]	; (800458c <displayBuffer2+0x1f8>)
 800443e:	4413      	add	r3, r2
 8004440:	4953      	ldr	r1, [pc, #332]	; (8004590 <displayBuffer2+0x1fc>)
 8004442:	2203      	movs	r2, #3
 8004444:	4618      	mov	r0, r3
 8004446:	f008 ffed 	bl	800d424 <memcpy>
	     memcpy(default_menu3+feedback_loc+5,temp_char,2);
 800444a:	88bb      	ldrh	r3, [r7, #4]
 800444c:	3305      	adds	r3, #5
 800444e:	4a4f      	ldr	r2, [pc, #316]	; (800458c <displayBuffer2+0x1f8>)
 8004450:	4413      	add	r3, r2
 8004452:	883a      	ldrh	r2, [r7, #0]
 8004454:	801a      	strh	r2, [r3, #0]

	     if (menu_vars_ref==5) target_display=1;
 8004456:	4b4f      	ldr	r3, [pc, #316]	; (8004594 <displayBuffer2+0x200>)
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	2b05      	cmp	r3, #5
 800445c:	d102      	bne.n	8004464 <displayBuffer2+0xd0>
 800445e:	4b4e      	ldr	r3, [pc, #312]	; (8004598 <displayBuffer2+0x204>)
 8004460:	2201      	movs	r2, #1
 8004462:	701a      	strb	r2, [r3, #0]
	     if ((menu_vars_ref==36)|| (menu_vars_ref==37)) target_display=2;
 8004464:	4b4b      	ldr	r3, [pc, #300]	; (8004594 <displayBuffer2+0x200>)
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	2b24      	cmp	r3, #36	; 0x24
 800446a:	d003      	beq.n	8004474 <displayBuffer2+0xe0>
 800446c:	4b49      	ldr	r3, [pc, #292]	; (8004594 <displayBuffer2+0x200>)
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	2b25      	cmp	r3, #37	; 0x25
 8004472:	d102      	bne.n	800447a <displayBuffer2+0xe6>
 8004474:	4b48      	ldr	r3, [pc, #288]	; (8004598 <displayBuffer2+0x204>)
 8004476:	2202      	movs	r2, #2
 8004478:	701a      	strb	r2, [r3, #0]
	     if((48<menu_vars_ref)    && (menu_vars_ref<53)) target_display=3;
 800447a:	4b46      	ldr	r3, [pc, #280]	; (8004594 <displayBuffer2+0x200>)
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	2b30      	cmp	r3, #48	; 0x30
 8004480:	d906      	bls.n	8004490 <displayBuffer2+0xfc>
 8004482:	4b44      	ldr	r3, [pc, #272]	; (8004594 <displayBuffer2+0x200>)
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	2b34      	cmp	r3, #52	; 0x34
 8004488:	d802      	bhi.n	8004490 <displayBuffer2+0xfc>
 800448a:	4b43      	ldr	r3, [pc, #268]	; (8004598 <displayBuffer2+0x204>)
 800448c:	2203      	movs	r2, #3
 800448e:	701a      	strb	r2, [r3, #0]
	 //    if((48<menu_vars_ref)    && (menu_vars_ref<53)) memcpy(LCD_Info+3, *(menu_titles_final+(*menu_vars_var)),8);  // send target for LFO_sqr  to LCD_Info


		 if (target_display)      // write LFO.target display , might use it for other things too
 8004490:	4b41      	ldr	r3, [pc, #260]	; (8004598 <displayBuffer2+0x204>)
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d054      	beq.n	8004542 <displayBuffer2+0x1ae>
	     	{
	     		uint8_t target_tmp1=*menu_vars_var ;   // this can be put anywhere now
 8004498:	4b3b      	ldr	r3, [pc, #236]	; (8004588 <displayBuffer2+0x1f4>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	71fb      	strb	r3, [r7, #7]
	     		if (target_tmp1>=menu_lookup_count) target_tmp1=0;    // check in case
 80044a0:	79fb      	ldrb	r3, [r7, #7]
 80044a2:	2b41      	cmp	r3, #65	; 0x41
 80044a4:	d901      	bls.n	80044aa <displayBuffer2+0x116>
 80044a6:	2300      	movs	r3, #0
 80044a8:	71fb      	strb	r3, [r7, #7]
	     		if (target_display==1) memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+target_tmp1),8);  // copy info for LFO
 80044aa:	4b3b      	ldr	r3, [pc, #236]	; (8004598 <displayBuffer2+0x204>)
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d10c      	bne.n	80044cc <displayBuffer2+0x138>
 80044b2:	88bb      	ldrh	r3, [r7, #4]
 80044b4:	3308      	adds	r3, #8
 80044b6:	4a35      	ldr	r2, [pc, #212]	; (800458c <displayBuffer2+0x1f8>)
 80044b8:	1898      	adds	r0, r3, r2
 80044ba:	79fb      	ldrb	r3, [r7, #7]
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4a2d      	ldr	r2, [pc, #180]	; (8004574 <displayBuffer2+0x1e0>)
 80044c0:	4413      	add	r3, r2
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2208      	movs	r2, #8
 80044c6:	4619      	mov	r1, r3
 80044c8:	f008 ffac 	bl	800d424 <memcpy>
	     		if (target_display==2) memcpy(default_menu3+feedback_loc+8, *(patch_inputs+target_tmp1),8);  // Limited atm
 80044cc:	4b32      	ldr	r3, [pc, #200]	; (8004598 <displayBuffer2+0x204>)
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d10c      	bne.n	80044ee <displayBuffer2+0x15a>
 80044d4:	88bb      	ldrh	r3, [r7, #4]
 80044d6:	3308      	adds	r3, #8
 80044d8:	4a2c      	ldr	r2, [pc, #176]	; (800458c <displayBuffer2+0x1f8>)
 80044da:	1898      	adds	r0, r3, r2
 80044dc:	79fb      	ldrb	r3, [r7, #7]
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4a2e      	ldr	r2, [pc, #184]	; (800459c <displayBuffer2+0x208>)
 80044e2:	4413      	add	r3, r2
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2208      	movs	r2, #8
 80044e8:	4619      	mov	r1, r3
 80044ea:	f008 ff9b 	bl	800d424 <memcpy>
	     	//	if (target_display==3) memcpy(LCD_Info+3,  *(patch[].target+target_tmp1),8);  // Limited atm
	     		if  (target_display==3)   //  patch feedback works ok
 80044ee:	4b2a      	ldr	r3, [pc, #168]	; (8004598 <displayBuffer2+0x204>)
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	2b03      	cmp	r3, #3
 80044f4:	d125      	bne.n	8004542 <displayBuffer2+0x1ae>
	     		    {    if (LFO_sqr_list[menu_index_in&7])   {memcpy(LCD_Info+3,  menu_titles_final[sqr_target_list[menu_index_in&7]],6);LCD_Info[10]=LFO_sqr_list[menu_index_in&7];
 80044f6:	4b23      	ldr	r3, [pc, #140]	; (8004584 <displayBuffer2+0x1f0>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	4a28      	ldr	r2, [pc, #160]	; (80045a0 <displayBuffer2+0x20c>)
 8004500:	5cd3      	ldrb	r3, [r2, r3]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d017      	beq.n	8004536 <displayBuffer2+0x1a2>
 8004506:	4827      	ldr	r0, [pc, #156]	; (80045a4 <displayBuffer2+0x210>)
 8004508:	4b1e      	ldr	r3, [pc, #120]	; (8004584 <displayBuffer2+0x1f0>)
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	4a25      	ldr	r2, [pc, #148]	; (80045a8 <displayBuffer2+0x214>)
 8004512:	5cd3      	ldrb	r3, [r2, r3]
 8004514:	461a      	mov	r2, r3
 8004516:	4b17      	ldr	r3, [pc, #92]	; (8004574 <displayBuffer2+0x1e0>)
 8004518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800451c:	2206      	movs	r2, #6
 800451e:	4619      	mov	r1, r3
 8004520:	f008 ff80 	bl	800d424 <memcpy>
 8004524:	4b17      	ldr	r3, [pc, #92]	; (8004584 <displayBuffer2+0x1f0>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	4a1c      	ldr	r2, [pc, #112]	; (80045a0 <displayBuffer2+0x20c>)
 800452e:	5cd2      	ldrb	r2, [r2, r3]
 8004530:	4b1e      	ldr	r3, [pc, #120]	; (80045ac <displayBuffer2+0x218>)
 8004532:	729a      	strb	r2, [r3, #10]
 8004534:	e005      	b.n	8004542 <displayBuffer2+0x1ae>

	     		    }  // ok
	     		 else memcpy(LCD_Info+3,"        ",8); //11
 8004536:	4b1b      	ldr	r3, [pc, #108]	; (80045a4 <displayBuffer2+0x210>)
 8004538:	2208      	movs	r2, #8
 800453a:	491d      	ldr	r1, [pc, #116]	; (80045b0 <displayBuffer2+0x21c>)
 800453c:	4618      	mov	r0, r3
 800453e:	f008 ff71 	bl	800d424 <memcpy>
	     		    }
	     	}

	     target_display=0;
 8004542:	4b15      	ldr	r3, [pc, #84]	; (8004598 <displayBuffer2+0x204>)
 8004544:	2200      	movs	r2, #0
 8004546:	701a      	strb	r2, [r3, #0]





	     if (disp_stepper==17) {disp_stepper=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8004548:	4b1a      	ldr	r3, [pc, #104]	; (80045b4 <displayBuffer2+0x220>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b11      	cmp	r3, #17
 800454e:	d103      	bne.n	8004558 <displayBuffer2+0x1c4>
 8004550:	4b18      	ldr	r3, [pc, #96]	; (80045b4 <displayBuffer2+0x220>)
 8004552:	2200      	movs	r2, #0
 8004554:	701a      	strb	r2, [r3, #0]


    }    // displayBuffer2
 8004556:	e005      	b.n	8004564 <displayBuffer2+0x1d0>
	     if (disp_stepper==17) {disp_stepper=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8004558:	4b16      	ldr	r3, [pc, #88]	; (80045b4 <displayBuffer2+0x220>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	3301      	adds	r3, #1
 800455e:	b2da      	uxtb	r2, r3
 8004560:	4b14      	ldr	r3, [pc, #80]	; (80045b4 <displayBuffer2+0x220>)
 8004562:	701a      	strb	r2, [r3, #0]
    }    // displayBuffer2
 8004564:	bf00      	nop
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	20008f68 	.word	0x20008f68
 8004570:	2000d464 	.word	0x2000d464
 8004574:	20000000 	.word	0x20000000
 8004578:	2000e068 	.word	0x2000e068
 800457c:	0800dc2c 	.word	0x0800dc2c
 8004580:	2000dc64 	.word	0x2000dc64
 8004584:	2000e070 	.word	0x2000e070
 8004588:	2000e064 	.word	0x2000e064
 800458c:	20009008 	.word	0x20009008
 8004590:	200095e8 	.word	0x200095e8
 8004594:	2000e09d 	.word	0x2000e09d
 8004598:	2000e077 	.word	0x2000e077
 800459c:	20000108 	.word	0x20000108
 80045a0:	2000f2ac 	.word	0x2000f2ac
 80045a4:	2000f2bb 	.word	0x2000f2bb
 80045a8:	2000f31c 	.word	0x2000f31c
 80045ac:	2000f2b8 	.word	0x2000f2b8
 80045b0:	0800dc20 	.word	0x0800dc20
 80045b4:	20008e18 	.word	0x20008e18

080045b8 <SPI_command>:

void SPI_command(void){
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
// pins are all good , SPI is always the problem!!!
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 80045be:	4b18      	ldr	r3, [pc, #96]	; (8004620 <SPI_command+0x68>)
 80045c0:	881b      	ldrh	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d128      	bne.n	8004618 <SPI_command+0x60>
 80045c6:	4b17      	ldr	r3, [pc, #92]	; (8004624 <SPI_command+0x6c>)
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d124      	bne.n	8004618 <SPI_command+0x60>

uint8_t spi_store[5];

	//clk_pin=(i&1)^1;
		//bsrr_long=0;
		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 80045ce:	4b16      	ldr	r3, [pc, #88]	; (8004628 <SPI_command+0x70>)
 80045d0:	881b      	ldrh	r3, [r3, #0]
 80045d2:	0a1b      	lsrs	r3, r3, #8
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <SPI_command+0x2a>
 80045da:	4b14      	ldr	r3, [pc, #80]	; (800462c <SPI_command+0x74>)
 80045dc:	22f8      	movs	r2, #248	; 0xf8
 80045de:	701a      	strb	r2, [r3, #0]
 80045e0:	e002      	b.n	80045e8 <SPI_command+0x30>
 80045e2:	4b12      	ldr	r3, [pc, #72]	; (800462c <SPI_command+0x74>)
 80045e4:	22fa      	movs	r2, #250	; 0xfa
 80045e6:	701a      	strb	r2, [r3, #0]

	spi_store[0]=spi_byte&255;
 80045e8:	4b10      	ldr	r3, [pc, #64]	; (800462c <SPI_command+0x74>)
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	703b      	strb	r3, [r7, #0]
	spi_store[1]=((spi_hold>>4)<<4)&255;
 80045ee:	4b0e      	ldr	r3, [pc, #56]	; (8004628 <SPI_command+0x70>)
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	091b      	lsrs	r3, r3, #4
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	707b      	strb	r3, [r7, #1]
	spi_store[2]=((spi_hold&15)<<4)&255;
 80045fc:	4b0a      	ldr	r3, [pc, #40]	; (8004628 <SPI_command+0x70>)
 80045fe:	881b      	ldrh	r3, [r3, #0]
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	b2db      	uxtb	r3, r3
 8004604:	70bb      	strb	r3, [r7, #2]

// send this to spi for now
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3,3
 8004606:	4639      	mov	r1, r7
 8004608:	2303      	movs	r3, #3
 800460a:	2203      	movs	r2, #3
 800460c:	4808      	ldr	r0, [pc, #32]	; (8004630 <SPI_command+0x78>)
 800460e:	f006 fa06 	bl	800aa1e <HAL_SPI_Transmit>
			);  // working good


//HAL_Delay(10);
	spi_enable=1; }
 8004612:	4b03      	ldr	r3, [pc, #12]	; (8004620 <SPI_command+0x68>)
 8004614:	2201      	movs	r2, #1
 8004616:	801a      	strh	r2, [r3, #0]
}
 8004618:	bf00      	nop
 800461a:	3708      	adds	r7, #8
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	2000bf1e 	.word	0x2000bf1e
 8004624:	2000bf24 	.word	0x2000bf24
 8004628:	2000bf22 	.word	0x2000bf22
 800462c:	2000bf20 	.word	0x2000bf20
 8004630:	20010520 	.word	0x20010520

08004634 <display_init>:

void display_init(void){
 8004634:	b5b0      	push	{r4, r5, r7, lr}
 8004636:	b08a      	sub	sp, #40	; 0x28
 8004638:	af00      	add	r7, sp, #0
	//uint8_t sp2_command=0xf8+(0<<1);
		 // uint16_t disp[]={  304,304,304,270,257,268,384,258,51,51,52,53,54,55,56,57,58,0};  // normal characters
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd 310 is extended instruction
 800463a:	4b22      	ldr	r3, [pc, #136]	; (80046c4 <display_init+0x90>)
 800463c:	1d3c      	adds	r4, r7, #4
 800463e:	461d      	mov	r5, r3
 8004640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004648:	682b      	ldr	r3, [r5, #0]
 800464a:	8023      	strh	r3, [r4, #0]
		  if (spi_send==0){         // sets data byte
 800464c:	4b1e      	ldr	r3, [pc, #120]	; (80046c8 <display_init+0x94>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d132      	bne.n	80046ba <display_init+0x86>

switch(init){     //Remember every line advances +char on display ,,all this is mostly unneeded

default : init_b=init-6;displayBuffer2 ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 8004654:	4b1d      	ldr	r3, [pc, #116]	; (80046cc <display_init+0x98>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	b29b      	uxth	r3, r3
 800465a:	3b06      	subs	r3, #6
 800465c:	b29a      	uxth	r2, r3
 800465e:	4b1c      	ldr	r3, [pc, #112]	; (80046d0 <display_init+0x9c>)
 8004660:	801a      	strh	r2, [r3, #0]
 8004662:	f7ff fe97 	bl	8004394 <displayBuffer2>
 8004666:	4b1a      	ldr	r3, [pc, #104]	; (80046d0 <display_init+0x9c>)
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	461a      	mov	r2, r3
 800466c:	4b19      	ldr	r3, [pc, #100]	; (80046d4 <display_init+0xa0>)
 800466e:	5c9b      	ldrb	r3, [r3, r2]
 8004670:	b29a      	uxth	r2, r3
 8004672:	4b19      	ldr	r3, [pc, #100]	; (80046d8 <display_init+0xa4>)
 8004674:	801a      	strh	r2, [r3, #0]
 8004676:	bf00      	nop
}


if (init<6)	{HAL_Delay(3);spi_hold=disp[init]  ; } //delay needs to go
 8004678:	4b14      	ldr	r3, [pc, #80]	; (80046cc <display_init+0x98>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b05      	cmp	r3, #5
 800467e:	d80b      	bhi.n	8004698 <display_init+0x64>
 8004680:	2003      	movs	r0, #3
 8004682:	f002 fdef 	bl	8007264 <HAL_Delay>
 8004686:	4b11      	ldr	r3, [pc, #68]	; (80046cc <display_init+0x98>)
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	005b      	lsls	r3, r3, #1
 800468c:	3328      	adds	r3, #40	; 0x28
 800468e:	443b      	add	r3, r7
 8004690:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8004694:	4b10      	ldr	r3, [pc, #64]	; (80046d8 <display_init+0xa4>)
 8004696:	801a      	strh	r2, [r3, #0]

init++;   // after 6 it quits the rest is not needed
 8004698:	4b0c      	ldr	r3, [pc, #48]	; (80046cc <display_init+0x98>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	3301      	adds	r3, #1
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	4b0a      	ldr	r3, [pc, #40]	; (80046cc <display_init+0x98>)
 80046a2:	701a      	strb	r2, [r3, #0]
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 80046a4:	4b08      	ldr	r3, [pc, #32]	; (80046c8 <display_init+0x94>)
 80046a6:	2201      	movs	r2, #1
 80046a8:	701a      	strb	r2, [r3, #0]
 80046aa:	f7ff ff85 	bl	80045b8 <SPI_command>
 80046ae:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <display_init+0x94>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	701a      	strb	r2, [r3, #0]
 80046b4:	4b09      	ldr	r3, [pc, #36]	; (80046dc <display_init+0xa8>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	801a      	strh	r2, [r3, #0]


		  }

		//  if (init==5) display_fill();
}
 80046ba:	bf00      	nop
 80046bc:	3728      	adds	r7, #40	; 0x28
 80046be:	46bd      	mov	sp, r7
 80046c0:	bdb0      	pop	{r4, r5, r7, pc}
 80046c2:	bf00      	nop
 80046c4:	0800dc30 	.word	0x0800dc30
 80046c8:	2000bf24 	.word	0x2000bf24
 80046cc:	2000bf25 	.word	0x2000bf25
 80046d0:	2000bf26 	.word	0x2000bf26
 80046d4:	20008cc8 	.word	0x20008cc8
 80046d8:	2000bf22 	.word	0x2000bf22
 80046dc:	2000bf1e 	.word	0x2000bf1e

080046e0 <gfx_TX_block>:
			if (gfx_send_counter==1151 ) { gfx_send_counter=0; disp_end=1; gfx_send_counter2=0;    } else gfx_send_counter++; ;

			} HAL_SPI_Transmit_DMA(&hspi2,spi_store,54);  // ok

}
void gfx_TX_block(void){         // send spi to lcd from gfx ram , full page needed initially as it writes commands as well
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0


			uint8_t spi_store[3];
			uint8_t spi_store2=0;
 80046e6:	2300      	movs	r3, #0
 80046e8:	73fb      	strb	r3, [r7, #15]
			uint8_t spi_store3=0;
 80046ea:	2300      	movs	r3, #0
 80046ec:	72bb      	strb	r3, [r7, #10]
			uint16_t  up_counter=0;
 80046ee:	2300      	movs	r3, #0
 80046f0:	81bb      	strh	r3, [r7, #12]
			uint8_t line_counter=0;
 80046f2:	2300      	movs	r3, #0
 80046f4:	72fb      	strb	r3, [r7, #11]

			gfx_send_counter=0;
 80046f6:	4b25      	ldr	r3, [pc, #148]	; (800478c <gfx_TX_block+0xac>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	801a      	strh	r2, [r3, #0]
			for (up_counter=0;up_counter<3456;up_counter=up_counter+3){     // no more than one line then needs pause
 80046fc:	2300      	movs	r3, #0
 80046fe:	81bb      	strh	r3, [r7, #12]
 8004700:	e034      	b.n	800476c <gfx_TX_block+0x8c>


			    spi_store3=gfx_ram[gfx_send_counter];
 8004702:	4b22      	ldr	r3, [pc, #136]	; (800478c <gfx_TX_block+0xac>)
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	461a      	mov	r2, r3
 8004708:	4b21      	ldr	r3, [pc, #132]	; (8004790 <gfx_TX_block+0xb0>)
 800470a:	5c9b      	ldrb	r3, [r3, r2]
 800470c:	72bb      	strb	r3, [r7, #10]
			    if (line_counter>1) {spi_store2=250;					// 2ms delay between location commands , data is ok full speed
 800470e:	7afb      	ldrb	r3, [r7, #11]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d902      	bls.n	800471a <gfx_TX_block+0x3a>
 8004714:	23fa      	movs	r3, #250	; 0xfa
 8004716:	73fb      	strb	r3, [r7, #15]
 8004718:	e001      	b.n	800471e <gfx_TX_block+0x3e>
			}
			else {spi_store2=248;    }//start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 800471a:	23f8      	movs	r3, #248	; 0xf8
 800471c:	73fb      	strb	r3, [r7, #15]

					spi_store[0]=spi_store2;
 800471e:	7bfb      	ldrb	r3, [r7, #15]
 8004720:	713b      	strb	r3, [r7, #4]
					spi_store[1]=((spi_store3>>4)<<4);
 8004722:	7abb      	ldrb	r3, [r7, #10]
 8004724:	091b      	lsrs	r3, r3, #4
 8004726:	b2db      	uxtb	r3, r3
 8004728:	011b      	lsls	r3, r3, #4
 800472a:	b2db      	uxtb	r3, r3
 800472c:	717b      	strb	r3, [r7, #5]
					spi_store[2]=((spi_store3&15)<<4);
 800472e:	7abb      	ldrb	r3, [r7, #10]
 8004730:	011b      	lsls	r3, r3, #4
 8004732:	b2db      	uxtb	r3, r3
 8004734:	71bb      	strb	r3, [r7, #6]
					memcpy(spi_tx_block+up_counter,spi_store,3);
 8004736:	89bb      	ldrh	r3, [r7, #12]
 8004738:	4a16      	ldr	r2, [pc, #88]	; (8004794 <gfx_TX_block+0xb4>)
 800473a:	4413      	add	r3, r2
 800473c:	461a      	mov	r2, r3
 800473e:	1d3b      	adds	r3, r7, #4
 8004740:	8819      	ldrh	r1, [r3, #0]
 8004742:	789b      	ldrb	r3, [r3, #2]
 8004744:	8011      	strh	r1, [r2, #0]
 8004746:	7093      	strb	r3, [r2, #2]
					if (line_counter==17 ) { line_counter=0;    } else line_counter++; //
 8004748:	7afb      	ldrb	r3, [r7, #11]
 800474a:	2b11      	cmp	r3, #17
 800474c:	d102      	bne.n	8004754 <gfx_TX_block+0x74>
 800474e:	2300      	movs	r3, #0
 8004750:	72fb      	strb	r3, [r7, #11]
 8004752:	e002      	b.n	800475a <gfx_TX_block+0x7a>
 8004754:	7afb      	ldrb	r3, [r7, #11]
 8004756:	3301      	adds	r3, #1
 8004758:	72fb      	strb	r3, [r7, #11]
			 gfx_send_counter++; ;
 800475a:	4b0c      	ldr	r3, [pc, #48]	; (800478c <gfx_TX_block+0xac>)
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	3301      	adds	r3, #1
 8004760:	b29a      	uxth	r2, r3
 8004762:	4b0a      	ldr	r3, [pc, #40]	; (800478c <gfx_TX_block+0xac>)
 8004764:	801a      	strh	r2, [r3, #0]
			for (up_counter=0;up_counter<3456;up_counter=up_counter+3){     // no more than one line then needs pause
 8004766:	89bb      	ldrh	r3, [r7, #12]
 8004768:	3303      	adds	r3, #3
 800476a:	81bb      	strh	r3, [r7, #12]
 800476c:	89bb      	ldrh	r3, [r7, #12]
 800476e:	f5b3 6f58 	cmp.w	r3, #3456	; 0xd80
 8004772:	d3c6      	bcc.n	8004702 <gfx_TX_block+0x22>

			} ;  // ok
			gfx_send_counter=0; disp_end=1;
 8004774:	4b05      	ldr	r3, [pc, #20]	; (800478c <gfx_TX_block+0xac>)
 8004776:	2200      	movs	r2, #0
 8004778:	801a      	strh	r2, [r3, #0]
 800477a:	4b07      	ldr	r3, [pc, #28]	; (8004798 <gfx_TX_block+0xb8>)
 800477c:	2201      	movs	r2, #1
 800477e:	701a      	strb	r2, [r3, #0]

}
 8004780:	bf00      	nop
 8004782:	3714      	adds	r7, #20
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	2000c85e 	.word	0x2000c85e
 8004790:	2000c3dc 	.word	0x2000c3dc
 8004794:	2000e2a8 	.word	0x2000e2a8
 8004798:	2000c86a 	.word	0x2000c86a

0800479c <gfx_clear>:

void gfx_clear(void){     // simple gfx ram clear ,besides feedback
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0

	for (n=0;n<1152 ;n=n+18)    {
 80047a0:	4b19      	ldr	r3, [pc, #100]	; (8004808 <gfx_clear+0x6c>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	801a      	strh	r2, [r3, #0]
 80047a6:	e01c      	b.n	80047e2 <gfx_clear+0x46>
				for (i=2;i<18;i++){ gfx_ram[n+i] =0;
 80047a8:	4b18      	ldr	r3, [pc, #96]	; (800480c <gfx_clear+0x70>)
 80047aa:	2202      	movs	r2, #2
 80047ac:	801a      	strh	r2, [r3, #0]
 80047ae:	e00e      	b.n	80047ce <gfx_clear+0x32>
 80047b0:	4b15      	ldr	r3, [pc, #84]	; (8004808 <gfx_clear+0x6c>)
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	461a      	mov	r2, r3
 80047b6:	4b15      	ldr	r3, [pc, #84]	; (800480c <gfx_clear+0x70>)
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	4413      	add	r3, r2
 80047bc:	4a14      	ldr	r2, [pc, #80]	; (8004810 <gfx_clear+0x74>)
 80047be:	2100      	movs	r1, #0
 80047c0:	54d1      	strb	r1, [r2, r3]
 80047c2:	4b12      	ldr	r3, [pc, #72]	; (800480c <gfx_clear+0x70>)
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	3301      	adds	r3, #1
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	4b10      	ldr	r3, [pc, #64]	; (800480c <gfx_clear+0x70>)
 80047cc:	801a      	strh	r2, [r3, #0]
 80047ce:	4b0f      	ldr	r3, [pc, #60]	; (800480c <gfx_clear+0x70>)
 80047d0:	881b      	ldrh	r3, [r3, #0]
 80047d2:	2b11      	cmp	r3, #17
 80047d4:	d9ec      	bls.n	80047b0 <gfx_clear+0x14>
	for (n=0;n<1152 ;n=n+18)    {
 80047d6:	4b0c      	ldr	r3, [pc, #48]	; (8004808 <gfx_clear+0x6c>)
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	3312      	adds	r3, #18
 80047dc:	b29a      	uxth	r2, r3
 80047de:	4b0a      	ldr	r3, [pc, #40]	; (8004808 <gfx_clear+0x6c>)
 80047e0:	801a      	strh	r2, [r3, #0]
 80047e2:	4b09      	ldr	r3, [pc, #36]	; (8004808 <gfx_clear+0x6c>)
 80047e4:	881b      	ldrh	r3, [r3, #0]
 80047e6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80047ea:	d3dd      	bcc.n	80047a8 <gfx_clear+0xc>

				}  }
	 gfx_send_swap=0;  // disable line skip
 80047ec:	4b09      	ldr	r3, [pc, #36]	; (8004814 <gfx_clear+0x78>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	701a      	strb	r2, [r3, #0]
	 gfx_send_counter=0;    //reset page
 80047f2:	4b09      	ldr	r3, [pc, #36]	; (8004818 <gfx_clear+0x7c>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	801a      	strh	r2, [r3, #0]
	 disp_end=0;     //  should disable display process till one page
 80047f8:	4b08      	ldr	r3, [pc, #32]	; (800481c <gfx_clear+0x80>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	701a      	strb	r2, [r3, #0]

}
 80047fe:	bf00      	nop
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	200096d8 	.word	0x200096d8
 800480c:	200096de 	.word	0x200096de
 8004810:	2000c3dc 	.word	0x2000c3dc
 8004814:	2000c860 	.word	0x2000c860
 8004818:	2000c85e 	.word	0x2000c85e
 800481c:	2000c86a 	.word	0x2000c86a

08004820 <display_clear>:

		 gfx_send();

	 }  }

void display_clear (void){ //  simple character clear on default menu3
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0

	uint16_t disp_counter=0;
 8004826:	2300      	movs	r3, #0
 8004828:	80fb      	strh	r3, [r7, #6]
	for (disp_counter=0;disp_counter<1024;disp_counter++){
 800482a:	2300      	movs	r3, #0
 800482c:	80fb      	strh	r3, [r7, #6]
 800482e:	e006      	b.n	800483e <display_clear+0x1e>
		default_menu3[disp_counter]=47;
 8004830:	88fb      	ldrh	r3, [r7, #6]
 8004832:	4a08      	ldr	r2, [pc, #32]	; (8004854 <display_clear+0x34>)
 8004834:	212f      	movs	r1, #47	; 0x2f
 8004836:	54d1      	strb	r1, [r2, r3]
	for (disp_counter=0;disp_counter<1024;disp_counter++){
 8004838:	88fb      	ldrh	r3, [r7, #6]
 800483a:	3301      	adds	r3, #1
 800483c:	80fb      	strh	r3, [r7, #6]
 800483e:	88fb      	ldrh	r3, [r7, #6]
 8004840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004844:	d3f4      	bcc.n	8004830 <display_clear+0x10>
	}


}
 8004846:	bf00      	nop
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	20009008 	.word	0x20009008

08004858 <display_generate>:
void display_generate(void){    // display character generate, 1+1+16 chars
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
uint8_t counter;
	gfx_clear_flag=0;
 800485c:	4b05      	ldr	r3, [pc, #20]	; (8004874 <display_generate+0x1c>)
 800485e:	2200      	movs	r2, #0
 8004860:	701a      	strb	r2, [r3, #0]
//	for (counter=0;counter<18;counter++) {
	display_process();
 8004862:	f7ff fd8f 	bl	8004384 <display_process>
		  displayBuffer2(); // 5 cycles max for the lot or  0.2ms
 8004866:	f7ff fd95 	bl	8004394 <displayBuffer2>
	// if(!gfx_clear_flag)   gfx_send_swap=1;   // enable line swapping
	 disp_end=0;   ///reset till next full page
 800486a:	4b03      	ldr	r3, [pc, #12]	; (8004878 <display_generate+0x20>)
 800486c:	2200      	movs	r2, #0
 800486e:	701a      	strb	r2, [r3, #0]

	//  if (!disp_stepper) break;

}
 8004870:	bf00      	nop
 8004872:	bd80      	pop	{r7, pc}
 8004874:	2000e07a 	.word	0x2000e07a
 8004878:	2000c86a 	.word	0x2000c86a

0800487c <gfx_line_fill>:



}

void gfx_line_fill (){   // fills a line to gfx_ram from default_menu3 also fills gfx_block
 800487c:	b480      	push	{r7}
 800487e:	b08b      	sub	sp, #44	; 0x2c
 8004880:	af00      	add	r7, sp, #0
		    // this now is the  emain char to disp
   // uint8_t line_selected=(loop_counter&7)+((menu_title_lut[enc_out1]>>7)*8);

    uint16_t cursor= menu_title_lut[enc_out1];
 8004882:	4b5c      	ldr	r3, [pc, #368]	; (80049f4 <gfx_line_fill+0x178>)
 8004884:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004888:	461a      	mov	r2, r3
 800488a:	4b5b      	ldr	r3, [pc, #364]	; (80049f8 <gfx_line_fill+0x17c>)
 800488c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004890:	84bb      	strh	r3, [r7, #36]	; 0x24
    uint16_t line_selected=(loop_counter&7)+((cursor>>7)*8);    // thsi needs to be 1024/16
 8004892:	4b5a      	ldr	r3, [pc, #360]	; (80049fc <gfx_line_fill+0x180>)
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	b29b      	uxth	r3, r3
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	b29a      	uxth	r2, r3
 800489e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048a0:	09db      	lsrs	r3, r3, #7
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	00db      	lsls	r3, r3, #3
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	4413      	add	r3, r2
 80048aa:	847b      	strh	r3, [r7, #34]	; 0x22
    uint16_t start_line=(line_selected&7)*144;
 80048ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	461a      	mov	r2, r3
 80048b6:	00d2      	lsls	r2, r2, #3
 80048b8:	4413      	add	r3, r2
 80048ba:	011b      	lsls	r3, r3, #4
 80048bc:	843b      	strh	r3, [r7, #32]
     uint16_t end_line=start_line+144;
 80048be:	8c3b      	ldrh	r3, [r7, #32]
 80048c0:	3390      	adds	r3, #144	; 0x90
 80048c2:	83fb      	strh	r3, [r7, #30]
     disp_end=1;
 80048c4:	4b4e      	ldr	r3, [pc, #312]	; (8004a00 <gfx_line_fill+0x184>)
 80048c6:	2201      	movs	r2, #1
 80048c8:	701a      	strb	r2, [r3, #0]
   //  uint8_t  character=default_menu3[(i-2)+(line_selected*16)]-47;
    uint8_t char_skip=0;
 80048ca:	2300      	movs	r3, #0
 80048cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
     uint16_t character;
     uint8_t spi_store[3];
     uint8_t spi_store3=0;
 80048d0:	2300      	movs	r3, #0
 80048d2:	777b      	strb	r3, [r7, #29]
     uint8_t reverse[16]={0};
 80048d4:	2300      	movs	r3, #0
 80048d6:	607b      	str	r3, [r7, #4]
 80048d8:	f107 0308 	add.w	r3, r7, #8
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	605a      	str	r2, [r3, #4]
 80048e2:	609a      	str	r2, [r3, #8]



     if ((cursor>>4) == line_selected)    reverse [(cursor&15)]=1;
 80048e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048e6:	091b      	lsrs	r3, r3, #4
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d107      	bne.n	8004900 <gfx_line_fill+0x84>
 80048f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048f2:	f003 030f 	and.w	r3, r3, #15
 80048f6:	3328      	adds	r3, #40	; 0x28
 80048f8:	443b      	add	r3, r7
 80048fa:	2201      	movs	r2, #1
 80048fc:	f803 2c24 	strb.w	r2, [r3, #-36]

     for (n=start_line;n<end_line ;n=n+18)    {    //  8*18   , 0-1152
 8004900:	4a40      	ldr	r2, [pc, #256]	; (8004a04 <gfx_line_fill+0x188>)
 8004902:	8c3b      	ldrh	r3, [r7, #32]
 8004904:	8013      	strh	r3, [r2, #0]
 8004906:	e068      	b.n	80049da <gfx_line_fill+0x15e>

	 for (i=0;i<16;i++){
 8004908:	4b3f      	ldr	r3, [pc, #252]	; (8004a08 <gfx_line_fill+0x18c>)
 800490a:	2200      	movs	r2, #0
 800490c:	801a      	strh	r2, [r3, #0]
 800490e:	e055      	b.n	80049bc <gfx_line_fill+0x140>
		 character=((default_menu3[i+(line_selected*16)]-47)*8)+char_skip;
 8004910:	4b3d      	ldr	r3, [pc, #244]	; (8004a08 <gfx_line_fill+0x18c>)
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	461a      	mov	r2, r3
 8004916:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004918:	011b      	lsls	r3, r3, #4
 800491a:	4413      	add	r3, r2
 800491c:	4a3b      	ldr	r2, [pc, #236]	; (8004a0c <gfx_line_fill+0x190>)
 800491e:	5cd3      	ldrb	r3, [r2, r3]
 8004920:	3b2f      	subs	r3, #47	; 0x2f
 8004922:	b29b      	uxth	r3, r3
 8004924:	00db      	lsls	r3, r3, #3
 8004926:	b29a      	uxth	r2, r3
 8004928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800492c:	b29b      	uxth	r3, r3
 800492e:	4413      	add	r3, r2
 8004930:	837b      	strh	r3, [r7, #26]
		 spi_store3= gfx_char[character&1023 ];     // limited characters
 8004932:	8b7b      	ldrh	r3, [r7, #26]
 8004934:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004938:	4a35      	ldr	r2, [pc, #212]	; (8004a10 <gfx_line_fill+0x194>)
 800493a:	5cd3      	ldrb	r3, [r2, r3]
 800493c:	777b      	strb	r3, [r7, #29]
		spi_store3=spi_store3^(reverse[i]*127);
 800493e:	4b32      	ldr	r3, [pc, #200]	; (8004a08 <gfx_line_fill+0x18c>)
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	3328      	adds	r3, #40	; 0x28
 8004944:	443b      	add	r3, r7
 8004946:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800494a:	461a      	mov	r2, r3
 800494c:	01d2      	lsls	r2, r2, #7
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	b2db      	uxtb	r3, r3
 8004952:	b25a      	sxtb	r2, r3
 8004954:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8004958:	4053      	eors	r3, r2
 800495a:	b25b      	sxtb	r3, r3
 800495c:	777b      	strb	r3, [r7, #29]
		 gfx_ram[n+i+2]=spi_store3;
 800495e:	4b29      	ldr	r3, [pc, #164]	; (8004a04 <gfx_line_fill+0x188>)
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	461a      	mov	r2, r3
 8004964:	4b28      	ldr	r3, [pc, #160]	; (8004a08 <gfx_line_fill+0x18c>)
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	4413      	add	r3, r2
 800496a:	3302      	adds	r3, #2
 800496c:	4929      	ldr	r1, [pc, #164]	; (8004a14 <gfx_line_fill+0x198>)
 800496e:	7f7a      	ldrb	r2, [r7, #29]
 8004970:	54ca      	strb	r2, [r1, r3]

						    spi_store[0]=250;
 8004972:	23fa      	movs	r3, #250	; 0xfa
 8004974:	753b      	strb	r3, [r7, #20]
						    spi_store[1]=((spi_store3>>4)<<4);
 8004976:	7f7b      	ldrb	r3, [r7, #29]
 8004978:	091b      	lsrs	r3, r3, #4
 800497a:	b2db      	uxtb	r3, r3
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	b2db      	uxtb	r3, r3
 8004980:	757b      	strb	r3, [r7, #21]
						    spi_store[2]=((spi_store3&15)<<4);
 8004982:	7f7b      	ldrb	r3, [r7, #29]
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	b2db      	uxtb	r3, r3
 8004988:	75bb      	strb	r3, [r7, #22]
						    memcpy(spi_tx_block+(((n+i)*3)+6),spi_store,3);  // writes only data no command
 800498a:	4b1e      	ldr	r3, [pc, #120]	; (8004a04 <gfx_line_fill+0x188>)
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	461a      	mov	r2, r3
 8004990:	4b1d      	ldr	r3, [pc, #116]	; (8004a08 <gfx_line_fill+0x18c>)
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	441a      	add	r2, r3
 8004996:	4613      	mov	r3, r2
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	4413      	add	r3, r2
 800499c:	3306      	adds	r3, #6
 800499e:	4a1e      	ldr	r2, [pc, #120]	; (8004a18 <gfx_line_fill+0x19c>)
 80049a0:	4413      	add	r3, r2
 80049a2:	461a      	mov	r2, r3
 80049a4:	f107 0314 	add.w	r3, r7, #20
 80049a8:	8819      	ldrh	r1, [r3, #0]
 80049aa:	789b      	ldrb	r3, [r3, #2]
 80049ac:	8011      	strh	r1, [r2, #0]
 80049ae:	7093      	strb	r3, [r2, #2]
	 for (i=0;i<16;i++){
 80049b0:	4b15      	ldr	r3, [pc, #84]	; (8004a08 <gfx_line_fill+0x18c>)
 80049b2:	881b      	ldrh	r3, [r3, #0]
 80049b4:	3301      	adds	r3, #1
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	4b13      	ldr	r3, [pc, #76]	; (8004a08 <gfx_line_fill+0x18c>)
 80049ba:	801a      	strh	r2, [r3, #0]
 80049bc:	4b12      	ldr	r3, [pc, #72]	; (8004a08 <gfx_line_fill+0x18c>)
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	2b0f      	cmp	r3, #15
 80049c2:	d9a5      	bls.n	8004910 <gfx_line_fill+0x94>
		     }
	char_skip++;
 80049c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049c8:	3301      	adds	r3, #1
 80049ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
     for (n=start_line;n<end_line ;n=n+18)    {    //  8*18   , 0-1152
 80049ce:	4b0d      	ldr	r3, [pc, #52]	; (8004a04 <gfx_line_fill+0x188>)
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	3312      	adds	r3, #18
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <gfx_line_fill+0x188>)
 80049d8:	801a      	strh	r2, [r3, #0]
 80049da:	4b0a      	ldr	r3, [pc, #40]	; (8004a04 <gfx_line_fill+0x188>)
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	8bfa      	ldrh	r2, [r7, #30]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d891      	bhi.n	8004908 <gfx_line_fill+0x8c>
    }
    }
 80049e4:	bf00      	nop
 80049e6:	bf00      	nop
 80049e8:	372c      	adds	r7, #44	; 0x2c
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	20008f68 	.word	0x20008f68
 80049f8:	2000d464 	.word	0x2000d464
 80049fc:	200096da 	.word	0x200096da
 8004a00:	2000c86a 	.word	0x2000c86a
 8004a04:	200096d8 	.word	0x200096d8
 8004a08:	200096de 	.word	0x200096de
 8004a0c:	20009008 	.word	0x20009008
 8004a10:	0800ee9c 	.word	0x0800ee9c
 8004a14:	2000c3dc 	.word	0x2000c3dc
 8004a18:	2000e2a8 	.word	0x2000e2a8

08004a1c <encoder2>:


void encoder2(void){  // encoder pos and data input
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0


	uint8_t crap_hold9=(menu_title_lut[enc_out1]>>16)&255;
 8004a22:	4b67      	ldr	r3, [pc, #412]	; (8004bc0 <encoder2+0x1a4>)
 8004a24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a28:	461a      	mov	r2, r3
 8004a2a:	4b66      	ldr	r3, [pc, #408]	; (8004bc4 <encoder2+0x1a8>)
 8004a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a30:	0c1b      	lsrs	r3, r3, #16
 8004a32:	71fb      	strb	r3, [r7, #7]

	    memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 8004a34:	79fb      	ldrb	r3, [r7, #7]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4a63      	ldr	r2, [pc, #396]	; (8004bc8 <encoder2+0x1ac>)
 8004a3a:	4413      	add	r3, r2
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	4b63      	ldr	r3, [pc, #396]	; (8004bcc <encoder2+0x1b0>)
 8004a40:	6810      	ldr	r0, [r2, #0]
 8004a42:	6851      	ldr	r1, [r2, #4]
 8004a44:	c303      	stmia	r3!, {r0, r1}
	     char temp_char[]="  ";
 8004a46:	4a62      	ldr	r2, [pc, #392]	; (8004bd0 <encoder2+0x1b4>)
 8004a48:	1d3b      	adds	r3, r7, #4
 8004a4a:	6812      	ldr	r2, [r2, #0]
 8004a4c:	4611      	mov	r1, r2
 8004a4e:	8019      	strh	r1, [r3, #0]
 8004a50:	3302      	adds	r3, #2
 8004a52:	0c12      	lsrs	r2, r2, #16
 8004a54:	701a      	strb	r2, [r3, #0]
				     memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 8004a56:	4b5a      	ldr	r3, [pc, #360]	; (8004bc0 <encoder2+0x1a4>)
 8004a58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	461a      	mov	r2, r3
 8004a60:	4b5c      	ldr	r3, [pc, #368]	; (8004bd4 <encoder2+0x1b8>)
 8004a62:	4413      	add	r3, r2
 8004a64:	881b      	ldrh	r3, [r3, #0]
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	80bb      	strh	r3, [r7, #4]
				     menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 8004a6a:	1d3b      	adds	r3, r7, #4
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f008 fcab 	bl	800d3c8 <atoi>
 8004a72:	4603      	mov	r3, r0
 8004a74:	b2da      	uxtb	r2, r3
 8004a76:	4b58      	ldr	r3, [pc, #352]	; (8004bd8 <encoder2+0x1bc>)
 8004a78:	701a      	strb	r2, [r3, #0]
	    menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8004a7a:	4b57      	ldr	r3, [pc, #348]	; (8004bd8 <encoder2+0x1bc>)
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	4619      	mov	r1, r3
 8004a80:	4852      	ldr	r0, [pc, #328]	; (8004bcc <encoder2+0x1b0>)
 8004a82:	f7fc f889 	bl	8000b98 <menu_vars>
 8004a86:	4603      	mov	r3, r0
 8004a88:	4a54      	ldr	r2, [pc, #336]	; (8004bdc <encoder2+0x1c0>)
 8004a8a:	6013      	str	r3, [r2, #0]
		if ((*menu_vars_var)>menu_vars_limiter[menu_vars_ref])     *menu_vars_var=menu_vars_limiter[menu_vars_ref];   // limit value sher too
 8004a8c:	4b53      	ldr	r3, [pc, #332]	; (8004bdc <encoder2+0x1c0>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	781a      	ldrb	r2, [r3, #0]
 8004a92:	4b53      	ldr	r3, [pc, #332]	; (8004be0 <encoder2+0x1c4>)
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	4619      	mov	r1, r3
 8004a98:	4b52      	ldr	r3, [pc, #328]	; (8004be4 <encoder2+0x1c8>)
 8004a9a:	5c5b      	ldrb	r3, [r3, r1]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d907      	bls.n	8004ab0 <encoder2+0x94>
 8004aa0:	4b4f      	ldr	r3, [pc, #316]	; (8004be0 <encoder2+0x1c4>)
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4b4d      	ldr	r3, [pc, #308]	; (8004bdc <encoder2+0x1c0>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a4e      	ldr	r2, [pc, #312]	; (8004be4 <encoder2+0x1c8>)
 8004aac:	5c52      	ldrb	r2, [r2, r1]
 8004aae:	701a      	strb	r2, [r3, #0]

	    // input encode ------------------------
	    if ((enc_dir!=enc_mem_dir)  )    ///write back value if encoder changed ;
 8004ab0:	4b4d      	ldr	r3, [pc, #308]	; (8004be8 <encoder2+0x1cc>)
 8004ab2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	4b4c      	ldr	r3, [pc, #304]	; (8004bec <encoder2+0x1d0>)
 8004aba:	881b      	ldrh	r3, [r3, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d024      	beq.n	8004b0a <encoder2+0xee>
	    {
		if (enc_dir>enc_mem_dir) 							*menu_vars_var=((*menu_vars_var)+1)&255;
 8004ac0:	4b49      	ldr	r3, [pc, #292]	; (8004be8 <encoder2+0x1cc>)
 8004ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	4b48      	ldr	r3, [pc, #288]	; (8004bec <encoder2+0x1d0>)
 8004aca:	881b      	ldrh	r3, [r3, #0]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	dd07      	ble.n	8004ae0 <encoder2+0xc4>
 8004ad0:	4b42      	ldr	r3, [pc, #264]	; (8004bdc <encoder2+0x1c0>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	781a      	ldrb	r2, [r3, #0]
 8004ad6:	4b41      	ldr	r3, [pc, #260]	; (8004bdc <encoder2+0x1c0>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	3201      	adds	r2, #1
 8004adc:	b2d2      	uxtb	r2, r2
 8004ade:	701a      	strb	r2, [r3, #0]
	    if ((enc_dir<enc_mem_dir)&&(*menu_vars_var))		 *menu_vars_var=((*menu_vars_var)-1)&255;
 8004ae0:	4b41      	ldr	r3, [pc, #260]	; (8004be8 <encoder2+0x1cc>)
 8004ae2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	4b40      	ldr	r3, [pc, #256]	; (8004bec <encoder2+0x1d0>)
 8004aea:	881b      	ldrh	r3, [r3, #0]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	da0c      	bge.n	8004b0a <encoder2+0xee>
 8004af0:	4b3a      	ldr	r3, [pc, #232]	; (8004bdc <encoder2+0x1c0>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d007      	beq.n	8004b0a <encoder2+0xee>
 8004afa:	4b38      	ldr	r3, [pc, #224]	; (8004bdc <encoder2+0x1c0>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	781a      	ldrb	r2, [r3, #0]
 8004b00:	4b36      	ldr	r3, [pc, #216]	; (8004bdc <encoder2+0x1c0>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3a01      	subs	r2, #1
 8004b06:	b2d2      	uxtb	r2, r2
 8004b08:	701a      	strb	r2, [r3, #0]
	    }
	    enc_mem_dir=enc_dir;
 8004b0a:	4b37      	ldr	r3, [pc, #220]	; (8004be8 <encoder2+0x1cc>)
 8004b0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	4b36      	ldr	r3, [pc, #216]	; (8004bec <encoder2+0x1d0>)
 8004b14:	801a      	strh	r2, [r3, #0]

	    // location encode ------------------------

	    if ((enc2_dir!=enc2_mem_dir)  )    ///write back value if encoder changed ;
 8004b16:	4b36      	ldr	r3, [pc, #216]	; (8004bf0 <encoder2+0x1d4>)
 8004b18:	881a      	ldrh	r2, [r3, #0]
 8004b1a:	4b36      	ldr	r3, [pc, #216]	; (8004bf4 <encoder2+0x1d8>)
 8004b1c:	881b      	ldrh	r3, [r3, #0]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d01d      	beq.n	8004b5e <encoder2+0x142>
	   	    {
	   		if (enc2_dir>enc2_mem_dir) 							enc_out1++;
 8004b22:	4b33      	ldr	r3, [pc, #204]	; (8004bf0 <encoder2+0x1d4>)
 8004b24:	881a      	ldrh	r2, [r3, #0]
 8004b26:	4b33      	ldr	r3, [pc, #204]	; (8004bf4 <encoder2+0x1d8>)
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d908      	bls.n	8004b40 <encoder2+0x124>
 8004b2e:	4b24      	ldr	r3, [pc, #144]	; (8004bc0 <encoder2+0x1a4>)
 8004b30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	3301      	adds	r3, #1
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	b21a      	sxth	r2, r3
 8004b3c:	4b20      	ldr	r3, [pc, #128]	; (8004bc0 <encoder2+0x1a4>)
 8004b3e:	801a      	strh	r2, [r3, #0]
	   	    if ((enc2_dir<enc2_mem_dir))		enc_out1--;
 8004b40:	4b2b      	ldr	r3, [pc, #172]	; (8004bf0 <encoder2+0x1d4>)
 8004b42:	881a      	ldrh	r2, [r3, #0]
 8004b44:	4b2b      	ldr	r3, [pc, #172]	; (8004bf4 <encoder2+0x1d8>)
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d208      	bcs.n	8004b5e <encoder2+0x142>
 8004b4c:	4b1c      	ldr	r3, [pc, #112]	; (8004bc0 <encoder2+0x1a4>)
 8004b4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	3b01      	subs	r3, #1
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	b21a      	sxth	r2, r3
 8004b5a:	4b19      	ldr	r3, [pc, #100]	; (8004bc0 <encoder2+0x1a4>)
 8004b5c:	801a      	strh	r2, [r3, #0]

	   	    }

	    if (page_skip)  {enc_out1=enc_out1+20; page_skip=0; }
 8004b5e:	4b26      	ldr	r3, [pc, #152]	; (8004bf8 <encoder2+0x1dc>)
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00b      	beq.n	8004b80 <encoder2+0x164>
 8004b68:	4b15      	ldr	r3, [pc, #84]	; (8004bc0 <encoder2+0x1a4>)
 8004b6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	3314      	adds	r3, #20
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	b21a      	sxth	r2, r3
 8004b76:	4b12      	ldr	r3, [pc, #72]	; (8004bc0 <encoder2+0x1a4>)
 8004b78:	801a      	strh	r2, [r3, #0]
 8004b7a:	4b1f      	ldr	r3, [pc, #124]	; (8004bf8 <encoder2+0x1dc>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	701a      	strb	r2, [r3, #0]
	    if (enc_out1>menu_title_count) enc_out1=0;
 8004b80:	4b0f      	ldr	r3, [pc, #60]	; (8004bc0 <encoder2+0x1a4>)
 8004b82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b86:	461a      	mov	r2, r3
 8004b88:	4b1c      	ldr	r3, [pc, #112]	; (8004bfc <encoder2+0x1e0>)
 8004b8a:	881b      	ldrh	r3, [r3, #0]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	dd02      	ble.n	8004b96 <encoder2+0x17a>
 8004b90:	4b0b      	ldr	r3, [pc, #44]	; (8004bc0 <encoder2+0x1a4>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	801a      	strh	r2, [r3, #0]
	   	 if (enc_out1<0) enc_out1=menu_title_count;
 8004b96:	4b0a      	ldr	r3, [pc, #40]	; (8004bc0 <encoder2+0x1a4>)
 8004b98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	da04      	bge.n	8004baa <encoder2+0x18e>
 8004ba0:	4b16      	ldr	r3, [pc, #88]	; (8004bfc <encoder2+0x1e0>)
 8004ba2:	881b      	ldrh	r3, [r3, #0]
 8004ba4:	b21a      	sxth	r2, r3
 8004ba6:	4b06      	ldr	r3, [pc, #24]	; (8004bc0 <encoder2+0x1a4>)
 8004ba8:	801a      	strh	r2, [r3, #0]

	    enc2_mem_dir=enc2_dir;
 8004baa:	4b11      	ldr	r3, [pc, #68]	; (8004bf0 <encoder2+0x1d4>)
 8004bac:	881a      	ldrh	r2, [r3, #0]
 8004bae:	4b11      	ldr	r3, [pc, #68]	; (8004bf4 <encoder2+0x1d8>)
 8004bb0:	801a      	strh	r2, [r3, #0]
	   //-------------------

		    enc2_add=0;
 8004bb2:	4b13      	ldr	r3, [pc, #76]	; (8004c00 <encoder2+0x1e4>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	701a      	strb	r2, [r3, #0]

    }
 8004bb8:	bf00      	nop
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	20008f68 	.word	0x20008f68
 8004bc4:	2000d464 	.word	0x2000d464
 8004bc8:	20000000 	.word	0x20000000
 8004bcc:	2000e068 	.word	0x2000e068
 8004bd0:	0800dc2c 	.word	0x0800dc2c
 8004bd4:	2000dc64 	.word	0x2000dc64
 8004bd8:	2000e070 	.word	0x2000e070
 8004bdc:	2000e064 	.word	0x2000e064
 8004be0:	2000e09d 	.word	0x2000e09d
 8004be4:	0800ee14 	.word	0x0800ee14
 8004be8:	2000bf16 	.word	0x2000bf16
 8004bec:	2000e2a2 	.word	0x2000e2a2
 8004bf0:	2000bf14 	.word	0x2000bf14
 8004bf4:	2000e074 	.word	0x2000e074
 8004bf8:	2000ff50 	.word	0x2000ff50
 8004bfc:	2000d462 	.word	0x2000d462
 8004c00:	2000bf18 	.word	0x2000bf18

08004c04 <menu3_fill>:


    void menu3_fill(void){   // looping write into default_menu3
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
	uint16_t   enc_up=disp_up_counter;
 8004c0a:	4b48      	ldr	r3, [pc, #288]	; (8004d2c <menu3_fill+0x128>)
 8004c0c:	881b      	ldrh	r3, [r3, #0]
 8004c0e:	81fb      	strh	r3, [r7, #14]

	if(enc_up>menu_title_count) {enc_up=0; disp_up_counter=0;}
 8004c10:	4b47      	ldr	r3, [pc, #284]	; (8004d30 <menu3_fill+0x12c>)
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	89fa      	ldrh	r2, [r7, #14]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d904      	bls.n	8004c24 <menu3_fill+0x20>
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	81fb      	strh	r3, [r7, #14]
 8004c1e:	4b43      	ldr	r3, [pc, #268]	; (8004d2c <menu3_fill+0x128>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	801a      	strh	r2, [r3, #0]

	uint8_t crap_hold10=(menu_title_lut[enc_up]>>16)&255;   // look up up menu_titles_final
 8004c24:	89fb      	ldrh	r3, [r7, #14]
 8004c26:	4a43      	ldr	r2, [pc, #268]	; (8004d34 <menu3_fill+0x130>)
 8004c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c2c:	0c1b      	lsrs	r3, r3, #16
 8004c2e:	737b      	strb	r3, [r7, #13]

	memcpy(menu_vars_in,*(menu_titles_final+crap_hold10),8);	// send back for menu vars ok
 8004c30:	7b7b      	ldrb	r3, [r7, #13]
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4a40      	ldr	r2, [pc, #256]	; (8004d38 <menu3_fill+0x134>)
 8004c36:	4413      	add	r3, r2
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	4b40      	ldr	r3, [pc, #256]	; (8004d3c <menu3_fill+0x138>)
 8004c3c:	6810      	ldr	r0, [r2, #0]
 8004c3e:	6851      	ldr	r1, [r2, #4]
 8004c40:	c303      	stmia	r3!, {r0, r1}
	 char temp_char[]="  ";
 8004c42:	4a3f      	ldr	r2, [pc, #252]	; (8004d40 <menu3_fill+0x13c>)
 8004c44:	1d3b      	adds	r3, r7, #4
 8004c46:	6812      	ldr	r2, [r2, #0]
 8004c48:	4611      	mov	r1, r2
 8004c4a:	8019      	strh	r1, [r3, #0]
 8004c4c:	3302      	adds	r3, #2
 8004c4e:	0c12      	lsrs	r2, r2, #16
 8004c50:	701a      	strb	r2, [r3, #0]
				 memcpy(temp_char,menu_index_list+((enc_up*2)),2);   // copy char to char,ok
 8004c52:	89fb      	ldrh	r3, [r7, #14]
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	461a      	mov	r2, r3
 8004c58:	4b3a      	ldr	r3, [pc, #232]	; (8004d44 <menu3_fill+0x140>)
 8004c5a:	4413      	add	r3, r2
 8004c5c:	881b      	ldrh	r3, [r3, #0]
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	80bb      	strh	r3, [r7, #4]
				 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 8004c62:	1d3b      	adds	r3, r7, #4
 8004c64:	4618      	mov	r0, r3
 8004c66:	f008 fbaf 	bl	800d3c8 <atoi>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	b2da      	uxtb	r2, r3
 8004c6e:	4b36      	ldr	r3, [pc, #216]	; (8004d48 <menu3_fill+0x144>)
 8004c70:	701a      	strb	r2, [r3, #0]

	menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8004c72:	4b35      	ldr	r3, [pc, #212]	; (8004d48 <menu3_fill+0x144>)
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	4619      	mov	r1, r3
 8004c78:	4830      	ldr	r0, [pc, #192]	; (8004d3c <menu3_fill+0x138>)
 8004c7a:	f7fb ff8d 	bl	8000b98 <menu_vars>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	4a32      	ldr	r2, [pc, #200]	; (8004d4c <menu3_fill+0x148>)
 8004c82:	6013      	str	r3, [r2, #0]

			lcd_out3=*menu_vars_var;
 8004c84:	4b31      	ldr	r3, [pc, #196]	; (8004d4c <menu3_fill+0x148>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	4b30      	ldr	r3, [pc, #192]	; (8004d50 <menu3_fill+0x14c>)
 8004c8e:	801a      	strh	r2, [r3, #0]

		if (enc_out1==enc_up) 	lcd_temp=lcd_out3;  // this may be a problem
 8004c90:	4b30      	ldr	r3, [pc, #192]	; (8004d54 <menu3_fill+0x150>)
 8004c92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c96:	461a      	mov	r2, r3
 8004c98:	89fb      	ldrh	r3, [r7, #14]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d104      	bne.n	8004ca8 <menu3_fill+0xa4>
 8004c9e:	4b2c      	ldr	r3, [pc, #176]	; (8004d50 <menu3_fill+0x14c>)
 8004ca0:	881b      	ldrh	r3, [r3, #0]
 8004ca2:	b2da      	uxtb	r2, r3
 8004ca4:	4b2c      	ldr	r3, [pc, #176]	; (8004d58 <menu3_fill+0x154>)
 8004ca6:	701a      	strb	r2, [r3, #0]

		div_limit=lcd_out3;
 8004ca8:	4b29      	ldr	r3, [pc, #164]	; (8004d50 <menu3_fill+0x14c>)
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	4b2b      	ldr	r3, [pc, #172]	; (8004d5c <menu3_fill+0x158>)
 8004cb0:	701a      	strb	r2, [r3, #0]
			if (div_limit>9) div_limit=9;
 8004cb2:	4b2a      	ldr	r3, [pc, #168]	; (8004d5c <menu3_fill+0x158>)
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	2b09      	cmp	r3, #9
 8004cb8:	d902      	bls.n	8004cc0 <menu3_fill+0xbc>
 8004cba:	4b28      	ldr	r3, [pc, #160]	; (8004d5c <menu3_fill+0x158>)
 8004cbc:	2209      	movs	r2, #9
 8004cbe:	701a      	strb	r2, [r3, #0]

		/*    if (lcd_out3>10)							div_limit= lcd_out3>>2;
				if (lcd_out3>40)							div_limit= lcd_out3>>5;*/


				uint16_t crap8=menu_title_lut[enc_up];
 8004cc0:	89fb      	ldrh	r3, [r7, #14]
 8004cc2:	4a1c      	ldr	r2, [pc, #112]	; (8004d34 <menu3_fill+0x130>)
 8004cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cc8:	817b      	strh	r3, [r7, #10]

				default_menu3[crap8]=div_limit+48;
 8004cca:	4b24      	ldr	r3, [pc, #144]	; (8004d5c <menu3_fill+0x158>)
 8004ccc:	781a      	ldrb	r2, [r3, #0]
 8004cce:	897b      	ldrh	r3, [r7, #10]
 8004cd0:	3230      	adds	r2, #48	; 0x30
 8004cd2:	b2d1      	uxtb	r1, r2
 8004cd4:	4a22      	ldr	r2, [pc, #136]	; (8004d60 <menu3_fill+0x15c>)
 8004cd6:	54d1      	strb	r1, [r2, r3]
				if (menu_vars_ref==53)  default_menu3[crap8]=lcd_out3;   // keep in char , ok
 8004cd8:	4b22      	ldr	r3, [pc, #136]	; (8004d64 <menu3_fill+0x160>)
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b35      	cmp	r3, #53	; 0x35
 8004cde:	d105      	bne.n	8004cec <menu3_fill+0xe8>
 8004ce0:	4b1b      	ldr	r3, [pc, #108]	; (8004d50 <menu3_fill+0x14c>)
 8004ce2:	881a      	ldrh	r2, [r3, #0]
 8004ce4:	897b      	ldrh	r3, [r7, #10]
 8004ce6:	b2d1      	uxtb	r1, r2
 8004ce8:	4a1d      	ldr	r2, [pc, #116]	; (8004d60 <menu3_fill+0x15c>)
 8004cea:	54d1      	strb	r1, [r2, r3]

				if ((menu_vars_ref==24))  default_menu3[crap8]=major_notes[lcd_out3&31];
 8004cec:	4b1d      	ldr	r3, [pc, #116]	; (8004d64 <menu3_fill+0x160>)
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b18      	cmp	r3, #24
 8004cf2:	d108      	bne.n	8004d06 <menu3_fill+0x102>
 8004cf4:	4b16      	ldr	r3, [pc, #88]	; (8004d50 <menu3_fill+0x14c>)
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	f003 021f 	and.w	r2, r3, #31
 8004cfc:	897b      	ldrh	r3, [r7, #10]
 8004cfe:	491a      	ldr	r1, [pc, #104]	; (8004d68 <menu3_fill+0x164>)
 8004d00:	5c89      	ldrb	r1, [r1, r2]
 8004d02:	4a17      	ldr	r2, [pc, #92]	; (8004d60 <menu3_fill+0x15c>)
 8004d04:	54d1      	strb	r1, [r2, r3]
				disp_up_counter++;
 8004d06:	4b09      	ldr	r3, [pc, #36]	; (8004d2c <menu3_fill+0x128>)
 8004d08:	881b      	ldrh	r3, [r3, #0]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	4b07      	ldr	r3, [pc, #28]	; (8004d2c <menu3_fill+0x128>)
 8004d10:	801a      	strh	r2, [r3, #0]
				if(disp_up_counter>menu_title_count) disp_up_counter=0;  // just auto scans lcd_data , can be an issue
 8004d12:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <menu3_fill+0x128>)
 8004d14:	881a      	ldrh	r2, [r3, #0]
 8004d16:	4b06      	ldr	r3, [pc, #24]	; (8004d30 <menu3_fill+0x12c>)
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d902      	bls.n	8004d24 <menu3_fill+0x120>
 8004d1e:	4b03      	ldr	r3, [pc, #12]	; (8004d2c <menu3_fill+0x128>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	801a      	strh	r2, [r3, #0]

    }
 8004d24:	bf00      	nop
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	2000e2a4 	.word	0x2000e2a4
 8004d30:	2000d462 	.word	0x2000d462
 8004d34:	2000d464 	.word	0x2000d464
 8004d38:	20000000 	.word	0x20000000
 8004d3c:	2000e068 	.word	0x2000e068
 8004d40:	0800dc2c 	.word	0x0800dc2c
 8004d44:	2000dc64 	.word	0x2000dc64
 8004d48:	2000e070 	.word	0x2000e070
 8004d4c:	2000e064 	.word	0x2000e064
 8004d50:	2000c868 	.word	0x2000c868
 8004d54:	20008f68 	.word	0x20008f68
 8004d58:	2000e076 	.word	0x2000e076
 8004d5c:	2000e09e 	.word	0x2000e09e
 8004d60:	20009008 	.word	0x20009008
 8004d64:	2000e09d 	.word	0x2000e09d
 8004d68:	0800f29c 	.word	0x0800f29c

08004d6c <LCD_Info_feedback>:

    void LCD_Info_feedback(void){
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
	  potSource[380]=(lcd_temp/100) +48;  // still works   , potsource ref is located in feedback line var  ,was sendin x16 values
 8004d70:	4b74      	ldr	r3, [pc, #464]	; (8004f44 <LCD_Info_feedback+0x1d8>)
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	4a74      	ldr	r2, [pc, #464]	; (8004f48 <LCD_Info_feedback+0x1dc>)
 8004d76:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7a:	095b      	lsrs	r3, r3, #5
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	3330      	adds	r3, #48	; 0x30
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	4b72      	ldr	r3, [pc, #456]	; (8004f4c <LCD_Info_feedback+0x1e0>)
 8004d84:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
			    potSource[381]=((lcd_temp %100)/10)+48;		 // 0-160 to 0-10
 8004d88:	4b6e      	ldr	r3, [pc, #440]	; (8004f44 <LCD_Info_feedback+0x1d8>)
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	4a6e      	ldr	r2, [pc, #440]	; (8004f48 <LCD_Info_feedback+0x1dc>)
 8004d8e:	fba2 1203 	umull	r1, r2, r2, r3
 8004d92:	0952      	lsrs	r2, r2, #5
 8004d94:	2164      	movs	r1, #100	; 0x64
 8004d96:	fb01 f202 	mul.w	r2, r1, r2
 8004d9a:	1a9b      	subs	r3, r3, r2
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	4a6c      	ldr	r2, [pc, #432]	; (8004f50 <LCD_Info_feedback+0x1e4>)
 8004da0:	fba2 2303 	umull	r2, r3, r2, r3
 8004da4:	08db      	lsrs	r3, r3, #3
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	3330      	adds	r3, #48	; 0x30
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	4b67      	ldr	r3, [pc, #412]	; (8004f4c <LCD_Info_feedback+0x1e0>)
 8004dae:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
			    potSource[382]=(lcd_temp%10)+48;
 8004db2:	4b64      	ldr	r3, [pc, #400]	; (8004f44 <LCD_Info_feedback+0x1d8>)
 8004db4:	781a      	ldrb	r2, [r3, #0]
 8004db6:	4b66      	ldr	r3, [pc, #408]	; (8004f50 <LCD_Info_feedback+0x1e4>)
 8004db8:	fba3 1302 	umull	r1, r3, r3, r2
 8004dbc:	08d9      	lsrs	r1, r3, #3
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	440b      	add	r3, r1
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	3330      	adds	r3, #48	; 0x30
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	4b5f      	ldr	r3, [pc, #380]	; (8004f4c <LCD_Info_feedback+0x1e0>)
 8004dd0:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e

			    LCD_Info[0]  =( seq.pos/100) +48;
 8004dd4:	4b5f      	ldr	r3, [pc, #380]	; (8004f54 <LCD_Info_feedback+0x1e8>)
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	4a5b      	ldr	r2, [pc, #364]	; (8004f48 <LCD_Info_feedback+0x1dc>)
 8004dda:	fba2 2303 	umull	r2, r3, r2, r3
 8004dde:	095b      	lsrs	r3, r3, #5
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	3330      	adds	r3, #48	; 0x30
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	4b5c      	ldr	r3, [pc, #368]	; (8004f58 <LCD_Info_feedback+0x1ec>)
 8004de8:	701a      	strb	r2, [r3, #0]
			    LCD_Info[1]  =( (seq.pos%100) /10)+48;
 8004dea:	4b5a      	ldr	r3, [pc, #360]	; (8004f54 <LCD_Info_feedback+0x1e8>)
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	4a56      	ldr	r2, [pc, #344]	; (8004f48 <LCD_Info_feedback+0x1dc>)
 8004df0:	fba2 1203 	umull	r1, r2, r2, r3
 8004df4:	0952      	lsrs	r2, r2, #5
 8004df6:	2164      	movs	r1, #100	; 0x64
 8004df8:	fb01 f202 	mul.w	r2, r1, r2
 8004dfc:	1a9b      	subs	r3, r3, r2
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	4a53      	ldr	r2, [pc, #332]	; (8004f50 <LCD_Info_feedback+0x1e4>)
 8004e02:	fba2 2303 	umull	r2, r3, r2, r3
 8004e06:	08db      	lsrs	r3, r3, #3
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	3330      	adds	r3, #48	; 0x30
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	4b52      	ldr	r3, [pc, #328]	; (8004f58 <LCD_Info_feedback+0x1ec>)
 8004e10:	705a      	strb	r2, [r3, #1]
			    LCD_Info[2]  =( seq.pos%10)+48 ;
 8004e12:	4b50      	ldr	r3, [pc, #320]	; (8004f54 <LCD_Info_feedback+0x1e8>)
 8004e14:	781a      	ldrb	r2, [r3, #0]
 8004e16:	4b4e      	ldr	r3, [pc, #312]	; (8004f50 <LCD_Info_feedback+0x1e4>)
 8004e18:	fba3 1302 	umull	r1, r3, r3, r2
 8004e1c:	08d9      	lsrs	r1, r3, #3
 8004e1e:	460b      	mov	r3, r1
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	440b      	add	r3, r1
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	3330      	adds	r3, #48	; 0x30
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	4b4a      	ldr	r3, [pc, #296]	; (8004f58 <LCD_Info_feedback+0x1ec>)
 8004e30:	709a      	strb	r2, [r3, #2]

			    LCD_Info[11]  =( seq.pos>>6) +49;   // +1
 8004e32:	4b48      	ldr	r3, [pc, #288]	; (8004f54 <LCD_Info_feedback+0x1e8>)
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	099b      	lsrs	r3, r3, #6
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	3331      	adds	r3, #49	; 0x31
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	4b46      	ldr	r3, [pc, #280]	; (8004f58 <LCD_Info_feedback+0x1ec>)
 8004e40:	72da      	strb	r2, [r3, #11]
			    LCD_Info[12]  =( (seq.pos&63)>>4) +49;
 8004e42:	4b44      	ldr	r3, [pc, #272]	; (8004f54 <LCD_Info_feedback+0x1e8>)
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	111b      	asrs	r3, r3, #4
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	f003 0303 	and.w	r3, r3, #3
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	3331      	adds	r3, #49	; 0x31
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	4b40      	ldr	r3, [pc, #256]	; (8004f58 <LCD_Info_feedback+0x1ec>)
 8004e56:	731a      	strb	r2, [r3, #12]
			    LCD_Info[13]  =( (((seq.pos&15)+1)%100)/10)+48 ;
 8004e58:	4b3e      	ldr	r3, [pc, #248]	; (8004f54 <LCD_Info_feedback+0x1e8>)
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	f003 030f 	and.w	r3, r3, #15
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	4b39      	ldr	r3, [pc, #228]	; (8004f48 <LCD_Info_feedback+0x1dc>)
 8004e64:	fb83 1302 	smull	r1, r3, r3, r2
 8004e68:	1159      	asrs	r1, r3, #5
 8004e6a:	17d3      	asrs	r3, r2, #31
 8004e6c:	1acb      	subs	r3, r1, r3
 8004e6e:	2164      	movs	r1, #100	; 0x64
 8004e70:	fb01 f303 	mul.w	r3, r1, r3
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	4a39      	ldr	r2, [pc, #228]	; (8004f5c <LCD_Info_feedback+0x1f0>)
 8004e78:	fb82 1203 	smull	r1, r2, r2, r3
 8004e7c:	1092      	asrs	r2, r2, #2
 8004e7e:	17db      	asrs	r3, r3, #31
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	3330      	adds	r3, #48	; 0x30
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	4b33      	ldr	r3, [pc, #204]	; (8004f58 <LCD_Info_feedback+0x1ec>)
 8004e8a:	735a      	strb	r2, [r3, #13]
			    LCD_Info[14]  =( ((seq.pos&15)+1)%10)+48 ;
 8004e8c:	4b31      	ldr	r3, [pc, #196]	; (8004f54 <LCD_Info_feedback+0x1e8>)
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	f003 030f 	and.w	r3, r3, #15
 8004e94:	1c5a      	adds	r2, r3, #1
 8004e96:	4b31      	ldr	r3, [pc, #196]	; (8004f5c <LCD_Info_feedback+0x1f0>)
 8004e98:	fb83 1302 	smull	r1, r3, r3, r2
 8004e9c:	1099      	asrs	r1, r3, #2
 8004e9e:	17d3      	asrs	r3, r2, #31
 8004ea0:	1ac9      	subs	r1, r1, r3
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	440b      	add	r3, r1
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	1ad1      	subs	r1, r2, r3
 8004eac:	b2cb      	uxtb	r3, r1
 8004eae:	3330      	adds	r3, #48	; 0x30
 8004eb0:	b2da      	uxtb	r2, r3
 8004eb2:	4b29      	ldr	r3, [pc, #164]	; (8004f58 <LCD_Info_feedback+0x1ec>)
 8004eb4:	739a      	strb	r2, [r3, #14]

			    LCD_Info[15]= ( seq.tempo/100) +48;
 8004eb6:	4b27      	ldr	r3, [pc, #156]	; (8004f54 <LCD_Info_feedback+0x1e8>)
 8004eb8:	785b      	ldrb	r3, [r3, #1]
 8004eba:	4a23      	ldr	r2, [pc, #140]	; (8004f48 <LCD_Info_feedback+0x1dc>)
 8004ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec0:	095b      	lsrs	r3, r3, #5
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	3330      	adds	r3, #48	; 0x30
 8004ec6:	b2da      	uxtb	r2, r3
 8004ec8:	4b23      	ldr	r3, [pc, #140]	; (8004f58 <LCD_Info_feedback+0x1ec>)
 8004eca:	73da      	strb	r2, [r3, #15]
			    LCD_Info[16]  =( (seq.tempo%100) /10)+48;
 8004ecc:	4b21      	ldr	r3, [pc, #132]	; (8004f54 <LCD_Info_feedback+0x1e8>)
 8004ece:	785b      	ldrb	r3, [r3, #1]
 8004ed0:	4a1d      	ldr	r2, [pc, #116]	; (8004f48 <LCD_Info_feedback+0x1dc>)
 8004ed2:	fba2 1203 	umull	r1, r2, r2, r3
 8004ed6:	0952      	lsrs	r2, r2, #5
 8004ed8:	2164      	movs	r1, #100	; 0x64
 8004eda:	fb01 f202 	mul.w	r2, r1, r2
 8004ede:	1a9b      	subs	r3, r3, r2
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	4a1b      	ldr	r2, [pc, #108]	; (8004f50 <LCD_Info_feedback+0x1e4>)
 8004ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee8:	08db      	lsrs	r3, r3, #3
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	3330      	adds	r3, #48	; 0x30
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	4b19      	ldr	r3, [pc, #100]	; (8004f58 <LCD_Info_feedback+0x1ec>)
 8004ef2:	741a      	strb	r2, [r3, #16]
			    LCD_Info[17]  =( seq.tempo%10)+48 ;
 8004ef4:	4b17      	ldr	r3, [pc, #92]	; (8004f54 <LCD_Info_feedback+0x1e8>)
 8004ef6:	785a      	ldrb	r2, [r3, #1]
 8004ef8:	4b15      	ldr	r3, [pc, #84]	; (8004f50 <LCD_Info_feedback+0x1e4>)
 8004efa:	fba3 1302 	umull	r1, r3, r3, r2
 8004efe:	08d9      	lsrs	r1, r3, #3
 8004f00:	460b      	mov	r3, r1
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	440b      	add	r3, r1
 8004f06:	005b      	lsls	r3, r3, #1
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	3330      	adds	r3, #48	; 0x30
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	4b11      	ldr	r3, [pc, #68]	; (8004f58 <LCD_Info_feedback+0x1ec>)
 8004f12:	745a      	strb	r2, [r3, #17]
if (sampler.sample_status){  if (sampler.sample_status==1) memcpy(&LCD_Info[22],"clear",5);  else  memcpy(&LCD_Info[22],"busy ",5);  }
 8004f14:	4b12      	ldr	r3, [pc, #72]	; (8004f60 <LCD_Info_feedback+0x1f4>)
 8004f16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00f      	beq.n	8004f3e <LCD_Info_feedback+0x1d2>
 8004f1e:	4b10      	ldr	r3, [pc, #64]	; (8004f60 <LCD_Info_feedback+0x1f4>)
 8004f20:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d105      	bne.n	8004f34 <LCD_Info_feedback+0x1c8>
 8004f28:	2205      	movs	r2, #5
 8004f2a:	490e      	ldr	r1, [pc, #56]	; (8004f64 <LCD_Info_feedback+0x1f8>)
 8004f2c:	480e      	ldr	r0, [pc, #56]	; (8004f68 <LCD_Info_feedback+0x1fc>)
 8004f2e:	f008 fa79 	bl	800d424 <memcpy>

    }
 8004f32:	e004      	b.n	8004f3e <LCD_Info_feedback+0x1d2>
if (sampler.sample_status){  if (sampler.sample_status==1) memcpy(&LCD_Info[22],"clear",5);  else  memcpy(&LCD_Info[22],"busy ",5);  }
 8004f34:	2205      	movs	r2, #5
 8004f36:	490d      	ldr	r1, [pc, #52]	; (8004f6c <LCD_Info_feedback+0x200>)
 8004f38:	480b      	ldr	r0, [pc, #44]	; (8004f68 <LCD_Info_feedback+0x1fc>)
 8004f3a:	f008 fa73 	bl	800d424 <memcpy>
    }
 8004f3e:	bf00      	nop
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	2000e076 	.word	0x2000e076
 8004f48:	51eb851f 	.word	0x51eb851f
 8004f4c:	2000946c 	.word	0x2000946c
 8004f50:	cccccccd 	.word	0xcccccccd
 8004f54:	2000d0bc 	.word	0x2000d0bc
 8004f58:	2000f2b8 	.word	0x2000f2b8
 8004f5c:	66666667 	.word	0x66666667
 8004f60:	20008edc 	.word	0x20008edc
 8004f64:	0800dc54 	.word	0x0800dc54
 8004f68:	2000f2ce 	.word	0x2000f2ce
 8004f6c:	0800dc5c 	.word	0x0800dc5c

08004f70 <LCD_Info_notes>:
void LCD_Info_notes(uint8_t value ){
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	4603      	mov	r3, r0
 8004f78:	71fb      	strb	r3, [r7, #7]
uint8_t counter=0;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	73fb      	strb	r3, [r7, #15]

for (counter=0;counter<8;counter++){
 8004f7e:	2300      	movs	r3, #0
 8004f80:	73fb      	strb	r3, [r7, #15]
 8004f82:	e002      	b.n	8004f8a <LCD_Info_notes+0x1a>
 8004f84:	7bfb      	ldrb	r3, [r7, #15]
 8004f86:	3301      	adds	r3, #1
 8004f88:	73fb      	strb	r3, [r7, #15]
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
 8004f8c:	2b07      	cmp	r3, #7
 8004f8e:	d9f9      	bls.n	8004f84 <LCD_Info_notes+0x14>
//  LCD_Info[20+counter]=major_notes[notes_joined[counter+note[0].timeshift]];
//  LCD_Info[28+counter]=major_notes[notes_joined[counter+note[1].timeshift]];
//  LCD_Info[36+counter]=major_notes[notes_joined[counter+note[2].timeshift]];
//  LCD_Info[44+counter]=major_notes[notes_joined[counter+note[3].timeshift]];
}
for (counter=0;counter<16;counter++){
 8004f90:	2300      	movs	r3, #0
 8004f92:	73fb      	strb	r3, [r7, #15]
 8004f94:	e013      	b.n	8004fbe <LCD_Info_notes+0x4e>
   if  ((value &15)==counter)   LCD_Info[70+counter]=61;
 8004f96:	79fb      	ldrb	r3, [r7, #7]
 8004f98:	f003 020f 	and.w	r2, r3, #15
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d105      	bne.n	8004fae <LCD_Info_notes+0x3e>
 8004fa2:	7bfb      	ldrb	r3, [r7, #15]
 8004fa4:	3346      	adds	r3, #70	; 0x46
 8004fa6:	4a0b      	ldr	r2, [pc, #44]	; (8004fd4 <LCD_Info_notes+0x64>)
 8004fa8:	213d      	movs	r1, #61	; 0x3d
 8004faa:	54d1      	strb	r1, [r2, r3]
 8004fac:	e004      	b.n	8004fb8 <LCD_Info_notes+0x48>
   else LCD_Info[70+counter]=47;
 8004fae:	7bfb      	ldrb	r3, [r7, #15]
 8004fb0:	3346      	adds	r3, #70	; 0x46
 8004fb2:	4a08      	ldr	r2, [pc, #32]	; (8004fd4 <LCD_Info_notes+0x64>)
 8004fb4:	212f      	movs	r1, #47	; 0x2f
 8004fb6:	54d1      	strb	r1, [r2, r3]
for (counter=0;counter<16;counter++){
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	73fb      	strb	r3, [r7, #15]
 8004fbe:	7bfb      	ldrb	r3, [r7, #15]
 8004fc0:	2b0f      	cmp	r3, #15
 8004fc2:	d9e8      	bls.n	8004f96 <LCD_Info_notes+0x26>

}
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	2000f2b8 	.word	0x2000f2b8

08004fd8 <sampler_ram_clear_test>:
	//   Everything  with  managing sample data

	uint8_t  sampler_ram_clear_test(uint16_t sample_number){    // returns 15   if location is clear    or ok , else  0  , sample number is  0-511 (slow version)
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b08c      	sub	sp, #48	; 0x30
 8004fdc:	af02      	add	r7, sp, #8
 8004fde:	4603      	mov	r3, r0
 8004fe0:	80fb      	strh	r3, [r7, #6]



	//  HAL_SPI_Init(&hspi1); // write to register hspi2
	if (sample_number>509) return 0;
 8004fe2:	88fb      	ldrh	r3, [r7, #6]
 8004fe4:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8004fe8:	d301      	bcc.n	8004fee <sampler_ram_clear_test+0x16>
 8004fea:	2300      	movs	r3, #0
 8004fec:	e044      	b.n	8005078 <sampler_ram_clear_test+0xa0>
	MX_SPI1_Init();
 8004fee:	f001 f909 	bl	8006204 <MX_SPI1_Init>

	uint8_t spi_test[4];
	uint8_t test_counter=0;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t test_return[24]={0};
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	60bb      	str	r3, [r7, #8]
 8004ffc:	f107 030c 	add.w	r3, r7, #12
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	605a      	str	r2, [r3, #4]
 8005006:	609a      	str	r2, [r3, #8]
 8005008:	60da      	str	r2, [r3, #12]
 800500a:	611a      	str	r2, [r3, #16]

	test_return[0]=0x03; //read page 1
 800500c:	2303      	movs	r3, #3
 800500e:	723b      	strb	r3, [r7, #8]
	test_return[1]=sample_number>>1; //24bit address msb
 8005010:	88fb      	ldrh	r3, [r7, #6]
 8005012:	085b      	lsrs	r3, r3, #1
 8005014:	b29b      	uxth	r3, r3
 8005016:	b2db      	uxtb	r3, r3
 8005018:	727b      	strb	r3, [r7, #9]
	test_return[2]=(sample_number&1)<<7; //24bit address
 800501a:	88fb      	ldrh	r3, [r7, #6]
 800501c:	01db      	lsls	r3, r3, #7
 800501e:	b2db      	uxtb	r3, r3
 8005020:	72bb      	strb	r3, [r7, #10]
	test_return[3]=0; //24bit address lsb
 8005022:	2300      	movs	r3, #0
 8005024:	72fb      	strb	r3, [r7, #11]
	////	test_return[2]=1; //
	//	test_return[3]=0;



	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // when readin low till the end
 8005026:	2200      	movs	r2, #0
 8005028:	2110      	movs	r1, #16
 800502a:	4815      	ldr	r0, [pc, #84]	; (8005080 <sampler_ram_clear_test+0xa8>)
 800502c:	f004 f824 	bl	8009078 <HAL_GPIO_WritePin>
	//HAL_SPI_ (&hspi1,test_return, 20, 1000);   // works fine
	HAL_SPI_TransmitReceive (&hspi1, test_return,test_return,  24, 100); // request data
 8005030:	f107 0208 	add.w	r2, r7, #8
 8005034:	f107 0108 	add.w	r1, r7, #8
 8005038:	2364      	movs	r3, #100	; 0x64
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	2318      	movs	r3, #24
 800503e:	4811      	ldr	r0, [pc, #68]	; (8005084 <sampler_ram_clear_test+0xac>)
 8005040:	f005 fe29 	bl	800ac96 <HAL_SPI_TransmitReceive>


	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);  // high end
 8005044:	2201      	movs	r2, #1
 8005046:	2110      	movs	r1, #16
 8005048:	480d      	ldr	r0, [pc, #52]	; (8005080 <sampler_ram_clear_test+0xa8>)
 800504a:	f004 f815 	bl	8009078 <HAL_GPIO_WritePin>

	//HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
	for (test_counter=0;test_counter<20;test_counter++){
 800504e:	2300      	movs	r3, #0
 8005050:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005054:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005058:	2b13      	cmp	r3, #19
 800505a:	d80c      	bhi.n	8005076 <sampler_ram_clear_test+0x9e>
	    if (test_return[test_counter+20]!=255) return 0;  else return 15;
 800505c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005060:	3314      	adds	r3, #20
 8005062:	3328      	adds	r3, #40	; 0x28
 8005064:	443b      	add	r3, r7
 8005066:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800506a:	2bff      	cmp	r3, #255	; 0xff
 800506c:	d001      	beq.n	8005072 <sampler_ram_clear_test+0x9a>
 800506e:	2300      	movs	r3, #0
 8005070:	e002      	b.n	8005078 <sampler_ram_clear_test+0xa0>
 8005072:	230f      	movs	r3, #15
 8005074:	e000      	b.n	8005078 <sampler_ram_clear_test+0xa0>

	}
	return 15;
 8005076:	230f      	movs	r3, #15
    }
 8005078:	4618      	mov	r0, r3
 800507a:	3728      	adds	r7, #40	; 0x28
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	40020000 	.word	0x40020000
 8005084:	200104c8 	.word	0x200104c8

08005088 <sample_save>:

	    }

	}

 void sample_save(uint16_t sample_number, uint8_t* sample_data,  uint16_t  sample_size ){				// writes data to flash (slow version )
 8005088:	b580      	push	{r7, lr}
 800508a:	b0c8      	sub	sp, #288	; 0x120
 800508c:	af00      	add	r7, sp, #0
 800508e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005092:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005096:	6019      	str	r1, [r3, #0]
 8005098:	4611      	mov	r1, r2
 800509a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800509e:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80050a2:	4602      	mov	r2, r0
 80050a4:	801a      	strh	r2, [r3, #0]
 80050a6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80050aa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050ae:	460a      	mov	r2, r1
 80050b0:	801a      	strh	r2, [r3, #0]

		stop_toggle=1;  stop_start();   // halt for slow write
 80050b2:	4bbf      	ldr	r3, [pc, #764]	; (80053b0 <sample_save+0x328>)
 80050b4:	2201      	movs	r2, #1
 80050b6:	701a      	strb	r2, [r3, #0]
 80050b8:	f001 fc22 	bl	8006900 <stop_start>

		uint8_t spi_test[270]={0};
 80050bc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80050c0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]
 80050c8:	3304      	adds	r3, #4
 80050ca:	f44f 7285 	mov.w	r2, #266	; 0x10a
 80050ce:	2100      	movs	r1, #0
 80050d0:	4618      	mov	r0, r3
 80050d2:	f008 f9b5 	bl	800d440 <memset>
		if (sample_number>509) return ;
 80050d6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80050da:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80050de:	881b      	ldrh	r3, [r3, #0]
 80050e0:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80050e4:	f080 815d 	bcs.w	80053a2 <sample_save+0x31a>

		sampler.recorded[sample_number>>5]=sampler.recorded[sample_number>>5]^(1<<(sample_number&31));   //record to eeprom
 80050e8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80050ec:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80050f0:	881b      	ldrh	r3, [r3, #0]
 80050f2:	095b      	lsrs	r3, r3, #5
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	4aaf      	ldr	r2, [pc, #700]	; (80053b4 <sample_save+0x32c>)
 80050f8:	3306      	adds	r3, #6
 80050fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050fe:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8005102:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 8005106:	8812      	ldrh	r2, [r2, #0]
 8005108:	f002 021f 	and.w	r2, r2, #31
 800510c:	2101      	movs	r1, #1
 800510e:	fa01 f202 	lsl.w	r2, r1, r2
 8005112:	4611      	mov	r1, r2
 8005114:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8005118:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 800511c:	8812      	ldrh	r2, [r2, #0]
 800511e:	0952      	lsrs	r2, r2, #5
 8005120:	b292      	uxth	r2, r2
 8005122:	4610      	mov	r0, r2
 8005124:	ea83 0201 	eor.w	r2, r3, r1
 8005128:	49a2      	ldr	r1, [pc, #648]	; (80053b4 <sample_save+0x32c>)
 800512a:	1d83      	adds	r3, r0, #6
 800512c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			spi_test[1]=sample_number>>1; //24bit address msb
 8005130:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005134:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	085b      	lsrs	r3, r3, #1
 800513c:	b29b      	uxth	r3, r3
 800513e:	b2da      	uxtb	r2, r3
 8005140:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005144:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005148:	705a      	strb	r2, [r3, #1]
			spi_test[2]=(sample_number&1)<<7; //24bit address
 800514a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800514e:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8005152:	881b      	ldrh	r3, [r3, #0]
 8005154:	01db      	lsls	r3, r3, #7
 8005156:	b2da      	uxtb	r2, r3
 8005158:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800515c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005160:	709a      	strb	r2, [r3, #2]
			spi_test[3]=0; //24bit address lsb
 8005162:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005166:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800516a:	2200      	movs	r2, #0
 800516c:	70da      	strb	r2, [r3, #3]

				//----formAT SECTION
					spi_test[0]=0x06; //enable write  , only lasts for single operation
 800516e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005172:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005176:	2206      	movs	r2, #6
 8005178:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0); // start
 800517a:	2200      	movs	r2, #0
 800517c:	2110      	movs	r1, #16
 800517e:	488e      	ldr	r0, [pc, #568]	; (80053b8 <sample_save+0x330>)
 8005180:	f003 ff7a 	bl	8009078 <HAL_GPIO_WritePin>
					HAL_SPI_Transmit(&hspi1, spi_test, 1, 1000);       // enable write
 8005184:	f107 010c 	add.w	r1, r7, #12
 8005188:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800518c:	2201      	movs	r2, #1
 800518e:	488b      	ldr	r0, [pc, #556]	; (80053bc <sample_save+0x334>)
 8005190:	f005 fc45 	bl	800aa1e <HAL_SPI_Transmit>
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);   // end
 8005194:	2201      	movs	r2, #1
 8005196:	2110      	movs	r1, #16
 8005198:	4887      	ldr	r0, [pc, #540]	; (80053b8 <sample_save+0x330>)
 800519a:	f003 ff6d 	bl	8009078 <HAL_GPIO_WritePin>
					HAL_Delay(5);
 800519e:	2005      	movs	r0, #5
 80051a0:	f002 f860 	bl	8007264 <HAL_Delay>
					spi_test[0]=0x52; //block
 80051a4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80051a8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80051ac:	2252      	movs	r2, #82	; 0x52
 80051ae:	701a      	strb	r2, [r3, #0]

					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);         // enable for sector erase   , stays empty when enabled
 80051b0:	2200      	movs	r2, #0
 80051b2:	2110      	movs	r1, #16
 80051b4:	4880      	ldr	r0, [pc, #512]	; (80053b8 <sample_save+0x330>)
 80051b6:	f003 ff5f 	bl	8009078 <HAL_GPIO_WritePin>
					HAL_SPI_Transmit(&hspi1, spi_test, 4, 1000);   //erase sector ,works       4kbytes   (block erase=32kbytes)
 80051ba:	f107 010c 	add.w	r1, r7, #12
 80051be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051c2:	2204      	movs	r2, #4
 80051c4:	487d      	ldr	r0, [pc, #500]	; (80053bc <sample_save+0x334>)
 80051c6:	f005 fc2a 	bl	800aa1e <HAL_SPI_Transmit>
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 80051ca:	2201      	movs	r2, #1
 80051cc:	2110      	movs	r1, #16
 80051ce:	487a      	ldr	r0, [pc, #488]	; (80053b8 <sample_save+0x330>)
 80051d0:	f003 ff52 	bl	8009078 <HAL_GPIO_WritePin>
					HAL_Delay(250);  // SHOULD BE ENOUGH
 80051d4:	20fa      	movs	r0, #250	; 0xfa
 80051d6:	f002 f845 	bl	8007264 <HAL_Delay>



					if (sampler_ram_clear_test(sample_number)==0) return;    // quit if not empty
 80051da:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80051de:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80051e2:	881b      	ldrh	r3, [r3, #0]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7ff fef7 	bl	8004fd8 <sampler_ram_clear_test>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 80da 	beq.w	80053a6 <sample_save+0x31e>


		//uint16_t size_count=sample_size;

			spi_test[0]=0x03; //read page 1
 80051f2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80051f6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80051fa:	2203      	movs	r2, #3
 80051fc:	701a      	strb	r2, [r3, #0]

			uint16_t write_counter=0;    // write start location
 80051fe:	2300      	movs	r3, #0
 8005200:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
			uint8_t second_byte=(sample_number&1)<<7;
 8005204:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005208:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	01db      	lsls	r3, r3, #7
 8005210:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
			uint8_t max_count= sample_size>>8;
 8005214:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005218:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800521c:	881b      	ldrh	r3, [r3, #0]
 800521e:	0a1b      	lsrs	r3, r3, #8
 8005220:	b29b      	uxth	r3, r3
 8005222:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
			if (max_count>127) max_count=127;
 8005226:	f997 311d 	ldrsb.w	r3, [r7, #285]	; 0x11d
 800522a:	2b00      	cmp	r3, #0
 800522c:	da02      	bge.n	8005234 <sample_save+0x1ac>
 800522e:	237f      	movs	r3, #127	; 0x7f
 8005230:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d

					spi_test[0]=0x06; //enable write
 8005234:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005238:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800523c:	2206      	movs	r2, #6
 800523e:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8005240:	2200      	movs	r2, #0
 8005242:	2110      	movs	r1, #16
 8005244:	485c      	ldr	r0, [pc, #368]	; (80053b8 <sample_save+0x330>)
 8005246:	f003 ff17 	bl	8009078 <HAL_GPIO_WritePin>
					HAL_SPI_Transmit(&hspi1, spi_test, 1, 1000);
 800524a:	f107 010c 	add.w	r1, r7, #12
 800524e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005252:	2201      	movs	r2, #1
 8005254:	4859      	ldr	r0, [pc, #356]	; (80053bc <sample_save+0x334>)
 8005256:	f005 fbe2 	bl	800aa1e <HAL_SPI_Transmit>
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 800525a:	2201      	movs	r2, #1
 800525c:	2110      	movs	r1, #16
 800525e:	4856      	ldr	r0, [pc, #344]	; (80053b8 <sample_save+0x330>)
 8005260:	f003 ff0a 	bl	8009078 <HAL_GPIO_WritePin>
					HAL_Delay(5);
 8005264:	2005      	movs	r0, #5
 8005266:	f001 fffd 	bl	8007264 <HAL_Delay>


					for (write_counter=0;write_counter<=max_count;write_counter++)  {
 800526a:	2300      	movs	r3, #0
 800526c:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
 8005270:	e06f      	b.n	8005352 <sample_save+0x2ca>

					    spi_test[0]=0x02; //write
 8005272:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005276:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800527a:	2202      	movs	r2, #2
 800527c:	701a      	strb	r2, [r3, #0]
					    spi_test[1]=sample_number>>1; //0-256 this stays
 800527e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005282:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	085b      	lsrs	r3, r3, #1
 800528a:	b29b      	uxth	r3, r3
 800528c:	b2da      	uxtb	r2, r3
 800528e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005292:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005296:	705a      	strb	r2, [r3, #1]
					    spi_test[2]=write_counter+second_byte; //  0->127 or 128->255
 8005298:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 800529c:	b2da      	uxtb	r2, r3
 800529e:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 80052a2:	4413      	add	r3, r2
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80052aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80052ae:	709a      	strb	r2, [r3, #2]
					    spi_test[3]=0; //24bit address lsb
 80052b0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80052b4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80052b8:	2200      	movs	r2, #0
 80052ba:	70da      	strb	r2, [r3, #3]

					//   spi_test[1]=255; //24bit address msb
					    			//		spi_test[2]=127+write_counter; //24bit address
					    			//		spi_test[3]=0; //24bit address lsb

					    memcpy  (spi_test+4 ,sample_data+(write_counter*256),  256);   // copy data to write buffer  sseems to be rolling over at 256
 80052bc:	f107 030c 	add.w	r3, r7, #12
 80052c0:	3304      	adds	r3, #4
 80052c2:	f8b7 211e 	ldrh.w	r2, [r7, #286]	; 0x11e
 80052c6:	0212      	lsls	r2, r2, #8
 80052c8:	4611      	mov	r1, r2
 80052ca:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80052ce:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80052d2:	6812      	ldr	r2, [r2, #0]
 80052d4:	4411      	add	r1, r2
 80052d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052da:	4618      	mov	r0, r3
 80052dc:	f008 f8a2 	bl	800d424 <memcpy>

					    spi_test[0]=0x06; //enable write each time
 80052e0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80052e4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80052e8:	2206      	movs	r2, #6
 80052ea:	701a      	strb	r2, [r3, #0]
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 80052ec:	2200      	movs	r2, #0
 80052ee:	2110      	movs	r1, #16
 80052f0:	4831      	ldr	r0, [pc, #196]	; (80053b8 <sample_save+0x330>)
 80052f2:	f003 fec1 	bl	8009078 <HAL_GPIO_WritePin>
					    HAL_SPI_Transmit(&hspi1, spi_test, 1, 1000);
 80052f6:	f107 010c 	add.w	r1, r7, #12
 80052fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052fe:	2201      	movs	r2, #1
 8005300:	482e      	ldr	r0, [pc, #184]	; (80053bc <sample_save+0x334>)
 8005302:	f005 fb8c 	bl	800aa1e <HAL_SPI_Transmit>
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8005306:	2201      	movs	r2, #1
 8005308:	2110      	movs	r1, #16
 800530a:	482b      	ldr	r0, [pc, #172]	; (80053b8 <sample_save+0x330>)
 800530c:	f003 feb4 	bl	8009078 <HAL_GPIO_WritePin>

					    spi_test[0]=0x02; //write
 8005310:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005314:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005318:	2202      	movs	r2, #2
 800531a:	701a      	strb	r2, [r3, #0]
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);   // low
 800531c:	2200      	movs	r2, #0
 800531e:	2110      	movs	r1, #16
 8005320:	4825      	ldr	r0, [pc, #148]	; (80053b8 <sample_save+0x330>)
 8005322:	f003 fea9 	bl	8009078 <HAL_GPIO_WritePin>
					    HAL_SPI_Transmit(&hspi1, spi_test ,260, 1000);  //address,then data
 8005326:	f107 010c 	add.w	r1, r7, #12
 800532a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800532e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005332:	4822      	ldr	r0, [pc, #136]	; (80053bc <sample_save+0x334>)
 8005334:	f005 fb73 	bl	800aa1e <HAL_SPI_Transmit>
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);  // high end
 8005338:	2201      	movs	r2, #1
 800533a:	2110      	movs	r1, #16
 800533c:	481e      	ldr	r0, [pc, #120]	; (80053b8 <sample_save+0x330>)
 800533e:	f003 fe9b 	bl	8009078 <HAL_GPIO_WritePin>
					    HAL_Delay(10);
 8005342:	200a      	movs	r0, #10
 8005344:	f001 ff8e 	bl	8007264 <HAL_Delay>
					for (write_counter=0;write_counter<=max_count;write_counter++)  {
 8005348:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 800534c:	3301      	adds	r3, #1
 800534e:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
 8005352:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8005356:	b29b      	uxth	r3, r3
 8005358:	f8b7 211e 	ldrh.w	r2, [r7, #286]	; 0x11e
 800535c:	429a      	cmp	r2, r3
 800535e:	d988      	bls.n	8005272 <sample_save+0x1ea>

					}


					spi_test[0]=0x04; //disable write
 8005360:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005364:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005368:	2204      	movs	r2, #4
 800536a:	701a      	strb	r2, [r3, #0]
										    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0); // low
 800536c:	2200      	movs	r2, #0
 800536e:	2110      	movs	r1, #16
 8005370:	4811      	ldr	r0, [pc, #68]	; (80053b8 <sample_save+0x330>)
 8005372:	f003 fe81 	bl	8009078 <HAL_GPIO_WritePin>
										    HAL_SPI_Transmit(&hspi1, spi_test, 1, 1000);
 8005376:	f107 010c 	add.w	r1, r7, #12
 800537a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800537e:	2201      	movs	r2, #1
 8005380:	480e      	ldr	r0, [pc, #56]	; (80053bc <sample_save+0x334>)
 8005382:	f005 fb4c 	bl	800aa1e <HAL_SPI_Transmit>
										    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);   // high end
 8005386:	2201      	movs	r2, #1
 8005388:	2110      	movs	r1, #16
 800538a:	480b      	ldr	r0, [pc, #44]	; (80053b8 <sample_save+0x330>)
 800538c:	f003 fe74 	bl	8009078 <HAL_GPIO_WritePin>
										    HAL_Delay(20);  //should be enough in theory
 8005390:	2014      	movs	r0, #20
 8005392:	f001 ff67 	bl	8007264 <HAL_Delay>


	 stop_toggle=2;  stop_start();  		// restart
 8005396:	4b06      	ldr	r3, [pc, #24]	; (80053b0 <sample_save+0x328>)
 8005398:	2202      	movs	r2, #2
 800539a:	701a      	strb	r2, [r3, #0]
 800539c:	f001 fab0 	bl	8006900 <stop_start>
 80053a0:	e002      	b.n	80053a8 <sample_save+0x320>
		if (sample_number>509) return ;
 80053a2:	bf00      	nop
 80053a4:	e000      	b.n	80053a8 <sample_save+0x320>
					if (sampler_ram_clear_test(sample_number)==0) return;    // quit if not empty
 80053a6:	bf00      	nop

	    }
 80053a8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	2000ff44 	.word	0x2000ff44
 80053b4:	20008edc 	.word	0x20008edc
 80053b8:	40020000 	.word	0x40020000
 80053bc:	200104c8 	.word	0x200104c8

080053c0 <sampler_1k_load>:




	void  sampler_1k_load(uint32_t load_address){   // 24 bit load address , for audio , 1kbyte   in 512 byte  chunks, last 64k off limits
 80053c0:	b580      	push	{r7, lr}
 80053c2:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80053cc:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80053d0:	6018      	str	r0, [r3, #0]

	    uint8_t send_spi2[1030]={0} ;
 80053d2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80053d6:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80053da:	2200      	movs	r2, #0
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	3304      	adds	r3, #4
 80053e0:	f240 4202 	movw	r2, #1026	; 0x402
 80053e4:	2100      	movs	r1, #0
 80053e6:	4618      	mov	r0, r3
 80053e8:	f008 f82a 	bl	800d440 <memset>

	    load_address=load_address& 16777215; // 24 bit
 80053ec:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80053f0:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80053f4:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80053f8:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 80053fc:	6812      	ldr	r2, [r2, #0]
 80053fe:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005402:	601a      	str	r2, [r3, #0]
	    if (load_address >0xFEBFFF ) return;  // IMPORTANT !
 8005404:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8005408:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a32      	ldr	r2, [pc, #200]	; (80054d8 <sampler_1k_load+0x118>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d85b      	bhi.n	80054cc <sampler_1k_load+0x10c>
	    send_spi2[0]=0x03; //read page 1
 8005414:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8005418:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800541c:	2203      	movs	r2, #3
 800541e:	701a      	strb	r2, [r3, #0]
	    send_spi2[1]=load_address>>16;			// last patch for now
 8005420:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8005424:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	0c1b      	lsrs	r3, r3, #16
 800542c:	b2da      	uxtb	r2, r3
 800542e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8005432:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8005436:	705a      	strb	r2, [r3, #1]
	    send_spi2[2]=(load_address>>8)&255;    //
 8005438:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800543c:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	0a1b      	lsrs	r3, r3, #8
 8005444:	b2da      	uxtb	r2, r3
 8005446:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800544a:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800544e:	709a      	strb	r2, [r3, #2]
	    send_spi2[3]=load_address&255;     // can start anywhere*/    // usally 0 padded when written
 8005450:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8005454:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	b2da      	uxtb	r2, r3
 800545c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8005460:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8005464:	70da      	strb	r2, [r3, #3]
	    send_spi2[3]=0;
 8005466:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800546a:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800546e:	2200      	movs	r2, #0
 8005470:	70da      	strb	r2, [r3, #3]
	    current_spi[0]=send_spi2[0];   // to track  later
 8005472:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8005476:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800547a:	781a      	ldrb	r2, [r3, #0]
 800547c:	4b17      	ldr	r3, [pc, #92]	; (80054dc <sampler_1k_load+0x11c>)
 800547e:	701a      	strb	r2, [r3, #0]
	    current_spi[1]=send_spi2[1];
 8005480:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8005484:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8005488:	785a      	ldrb	r2, [r3, #1]
 800548a:	4b14      	ldr	r3, [pc, #80]	; (80054dc <sampler_1k_load+0x11c>)
 800548c:	705a      	strb	r2, [r3, #1]
	    current_spi[2]=send_spi2[2];
 800548e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8005492:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8005496:	789a      	ldrb	r2, [r3, #2]
 8005498:	4b10      	ldr	r3, [pc, #64]	; (80054dc <sampler_1k_load+0x11c>)
 800549a:	709a      	strb	r2, [r3, #2]
	    current_spi[3]=send_spi2[3];
 800549c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80054a0:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80054a4:	78da      	ldrb	r2, [r3, #3]
 80054a6:	4b0d      	ldr	r3, [pc, #52]	; (80054dc <sampler_1k_load+0x11c>)
 80054a8:	70da      	strb	r2, [r3, #3]

	 //   if ((flash_flag==3)&&(flash_bank_read==0)) memcpy( &flash_read_block, flash_read_block2+4,1024);   flash_flag=3;

	//    if ((flash_flag==4)&&  (flash_bank_read==1) )    {

			HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);HAL_SPI_TransmitReceive_DMA(&hspi1, send_spi2,flash_read_block2,1028);
 80054aa:	2200      	movs	r2, #0
 80054ac:	2110      	movs	r1, #16
 80054ae:	480c      	ldr	r0, [pc, #48]	; (80054e0 <sampler_1k_load+0x120>)
 80054b0:	f003 fde2 	bl	8009078 <HAL_GPIO_WritePin>
 80054b4:	f107 0108 	add.w	r1, r7, #8
 80054b8:	f240 4304 	movw	r3, #1028	; 0x404
 80054bc:	4a09      	ldr	r2, [pc, #36]	; (80054e4 <sampler_1k_load+0x124>)
 80054be:	480a      	ldr	r0, [pc, #40]	; (80054e8 <sampler_1k_load+0x128>)
 80054c0:	f005 fe42 	bl	800b148 <HAL_SPI_TransmitReceive_DMA>
		    //HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  //  terrible Internet advice , put cs low before not after  !
		    flash_flag=0; // }
 80054c4:	4b09      	ldr	r3, [pc, #36]	; (80054ec <sampler_1k_load+0x12c>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	701a      	strb	r2, [r3, #0]
 80054ca:	e000      	b.n	80054ce <sampler_1k_load+0x10e>
	    if (load_address >0xFEBFFF ) return;  // IMPORTANT !
 80054cc:	bf00      	nop

	}
 80054ce:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	00febfff 	.word	0x00febfff
 80054dc:	2000ff40 	.word	0x2000ff40
 80054e0:	40020000 	.word	0x40020000
 80054e4:	2000f738 	.word	0x2000f738
 80054e8:	200104c8 	.word	0x200104c8
 80054ec:	20008f74 	.word	0x20008f74

080054f0 <sampler_ram_record>:
void sampler_ram_record(void) {
 80054f0:	b580      	push	{r7, lr}
 80054f2:	af00      	add	r7, sp, #0
	  if (!record_counter) {stop_toggle=1;  stop_start();}   // halt
 80054f4:	4b18      	ldr	r3, [pc, #96]	; (8005558 <sampler_ram_record+0x68>)
 80054f6:	881b      	ldrh	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d104      	bne.n	8005506 <sampler_ram_record+0x16>
 80054fc:	4b17      	ldr	r3, [pc, #92]	; (800555c <sampler_ram_record+0x6c>)
 80054fe:	2201      	movs	r2, #1
 8005500:	701a      	strb	r2, [r3, #0]
 8005502:	f001 f9fd 	bl	8006900 <stop_start>
	    memcpy(	&RAM[record_counter], input_holder,1024);   // transfer
 8005506:	4b14      	ldr	r3, [pc, #80]	; (8005558 <sampler_ram_record+0x68>)
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	461a      	mov	r2, r3
 800550c:	4b14      	ldr	r3, [pc, #80]	; (8005560 <sampler_ram_record+0x70>)
 800550e:	4413      	add	r3, r2
 8005510:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005514:	4913      	ldr	r1, [pc, #76]	; (8005564 <sampler_ram_record+0x74>)
 8005516:	4618      	mov	r0, r3
 8005518:	f007 ff84 	bl	800d424 <memcpy>
	record_counter =record_counter+1024;
 800551c:	4b0e      	ldr	r3, [pc, #56]	; (8005558 <sampler_ram_record+0x68>)
 800551e:	881b      	ldrh	r3, [r3, #0]
 8005520:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005524:	b29a      	uxth	r2, r3
 8005526:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <sampler_ram_record+0x68>)
 8005528:	801a      	strh	r2, [r3, #0]
	if (record_counter>=32767) { record_counter=0; sampler.record_enable=0; stop_toggle=2; RAM_normalise();  stop_start(); }  // reset and stop record
 800552a:	4b0b      	ldr	r3, [pc, #44]	; (8005558 <sampler_ram_record+0x68>)
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8005532:	4293      	cmp	r3, r2
 8005534:	d90d      	bls.n	8005552 <sampler_ram_record+0x62>
 8005536:	4b08      	ldr	r3, [pc, #32]	; (8005558 <sampler_ram_record+0x68>)
 8005538:	2200      	movs	r2, #0
 800553a:	801a      	strh	r2, [r3, #0]
 800553c:	4b0a      	ldr	r3, [pc, #40]	; (8005568 <sampler_ram_record+0x78>)
 800553e:	2200      	movs	r2, #0
 8005540:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005544:	4b05      	ldr	r3, [pc, #20]	; (800555c <sampler_ram_record+0x6c>)
 8005546:	2202      	movs	r2, #2
 8005548:	701a      	strb	r2, [r3, #0]
 800554a:	f000 f811 	bl	8005570 <RAM_normalise>
 800554e:	f001 f9d7 	bl	8006900 <stop_start>

	}
 8005552:	bf00      	nop
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	2000ff4c 	.word	0x2000ff4c
 800555c:	2000ff44 	.word	0x2000ff44
 8005560:	200001b8 	.word	0x200001b8
 8005564:	2000c86c 	.word	0x2000c86c
 8005568:	20008edc 	.word	0x20008edc
 800556c:	00000000 	.word	0x00000000

08005570 <RAM_normalise>:

void RAM_normalise(void){
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af00      	add	r7, sp, #0
	    uint16_t counter=0;
 8005576:	2300      	movs	r3, #0
 8005578:	82fb      	strh	r3, [r7, #22]
	    uint16_t peak=0;
 800557a:	2300      	movs	r3, #0
 800557c:	82bb      	strh	r3, [r7, #20]
	    uint16_t*   ram_ptr=  &RAM;
 800557e:	4b42      	ldr	r3, [pc, #264]	; (8005688 <RAM_normalise+0x118>)
 8005580:	60bb      	str	r3, [r7, #8]
	    float process1=32767 ;
 8005582:	4b42      	ldr	r3, [pc, #264]	; (800568c <RAM_normalise+0x11c>)
 8005584:	607b      	str	r3, [r7, #4]
	    uint16_t mute=1;  // mute by default
 8005586:	2301      	movs	r3, #1
 8005588:	827b      	strh	r3, [r7, #18]
	   int32_t incoming;
	    for (counter=0;counter<16384;counter++){
 800558a:	2300      	movs	r3, #0
 800558c:	82fb      	strh	r3, [r7, #22]
 800558e:	e00e      	b.n	80055ae <RAM_normalise+0x3e>

		incoming= *(ram_ptr+counter);
 8005590:	8afb      	ldrh	r3, [r7, #22]
 8005592:	005b      	lsls	r3, r3, #1
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	4413      	add	r3, r2
 8005598:	881b      	ldrh	r3, [r3, #0]
 800559a:	60fb      	str	r3, [r7, #12]
		if (incoming>peak ) peak=incoming;
 800559c:	8abb      	ldrh	r3, [r7, #20]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	dd01      	ble.n	80055a8 <RAM_normalise+0x38>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	82bb      	strh	r3, [r7, #20]
	    for (counter=0;counter<16384;counter++){
 80055a8:	8afb      	ldrh	r3, [r7, #22]
 80055aa:	3301      	adds	r3, #1
 80055ac:	82fb      	strh	r3, [r7, #22]
 80055ae:	8afb      	ldrh	r3, [r7, #22]
 80055b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055b4:	d3ec      	bcc.n	8005590 <RAM_normalise+0x20>
	    }
	    process1=(32767/(peak-process1))*0.8;
 80055b6:	8abb      	ldrh	r3, [r7, #20]
 80055b8:	ee07 3a90 	vmov	s15, r3
 80055bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80055c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055c8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8005690 <RAM_normalise+0x120>
 80055cc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80055d0:	ee16 0a90 	vmov	r0, s13
 80055d4:	f7fb f896 	bl	8000704 <__aeabi_f2d>
 80055d8:	a329      	add	r3, pc, #164	; (adr r3, 8005680 <RAM_normalise+0x110>)
 80055da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055de:	f7fa fe03 	bl	80001e8 <__aeabi_dmul>
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	4610      	mov	r0, r2
 80055e8:	4619      	mov	r1, r3
 80055ea:	f7fb f903 	bl	80007f4 <__aeabi_d2f>
 80055ee:	4603      	mov	r3, r0
 80055f0:	607b      	str	r3, [r7, #4]

	    for (counter=0;counter<16384;counter++){
 80055f2:	2300      	movs	r3, #0
 80055f4:	82fb      	strh	r3, [r7, #22]
 80055f6:	e038      	b.n	800566a <RAM_normalise+0xfa>
		incoming= (*(ram_ptr+counter))-32767;
 80055f8:	8afb      	ldrh	r3, [r7, #22]
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	4413      	add	r3, r2
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8005606:	3b7f      	subs	r3, #127	; 0x7f
 8005608:	60fb      	str	r3, [r7, #12]
		if (incoming<100) mute=0;  // mute till near zero
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2b63      	cmp	r3, #99	; 0x63
 800560e:	dc01      	bgt.n	8005614 <RAM_normalise+0xa4>
 8005610:	2300      	movs	r3, #0
 8005612:	827b      	strh	r3, [r7, #18]
		if ((counter>16200)&& (incoming<200)) mute=1;
 8005614:	8afb      	ldrh	r3, [r7, #22]
 8005616:	f643 7248 	movw	r2, #16200	; 0x3f48
 800561a:	4293      	cmp	r3, r2
 800561c:	d904      	bls.n	8005628 <RAM_normalise+0xb8>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2bc7      	cmp	r3, #199	; 0xc7
 8005622:	dc01      	bgt.n	8005628 <RAM_normalise+0xb8>
 8005624:	2301      	movs	r3, #1
 8005626:	827b      	strh	r3, [r7, #18]


		if (mute) incoming=0;  //silence near 0 at end til end
 8005628:	8a7b      	ldrh	r3, [r7, #18]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d001      	beq.n	8005632 <RAM_normalise+0xc2>
 800562e:	2300      	movs	r3, #0
 8005630:	60fb      	str	r3, [r7, #12]
		incoming=(incoming*process1)+32767;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	ee07 3a90 	vmov	s15, r3
 8005638:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800563c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005644:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8005690 <RAM_normalise+0x120>
 8005648:	ee77 7a87 	vadd.f32	s15, s15, s14
 800564c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005650:	ee17 3a90 	vmov	r3, s15
 8005654:	60fb      	str	r3, [r7, #12]


		*(ram_ptr+counter)=incoming&65535;
 8005656:	8afb      	ldrh	r3, [r7, #22]
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	4413      	add	r3, r2
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	b292      	uxth	r2, r2
 8005662:	801a      	strh	r2, [r3, #0]
	    for (counter=0;counter<16384;counter++){
 8005664:	8afb      	ldrh	r3, [r7, #22]
 8005666:	3301      	adds	r3, #1
 8005668:	82fb      	strh	r3, [r7, #22]
 800566a:	8afb      	ldrh	r3, [r7, #22]
 800566c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005670:	d3c2      	bcc.n	80055f8 <RAM_normalise+0x88>

	    }

	}
 8005672:	bf00      	nop
 8005674:	bf00      	nop
 8005676:	3718      	adds	r7, #24
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	f3af 8000 	nop.w
 8005680:	9999999a 	.word	0x9999999a
 8005684:	3fe99999 	.word	0x3fe99999
 8005688:	200001b8 	.word	0x200001b8
 800568c:	46fffe00 	.word	0x46fffe00
 8005690:	46fffe00 	.word	0x46fffe00

08005694 <record_output_to_RAM>:
void record_output_to_RAM(void){
 8005694:	b580      	push	{r7, lr}
 8005696:	af00      	add	r7, sp, #0
//	  if (sampler.record_enable)  { return;} // skip if recording already
    memcpy(	&RAM[record_out_counter], output_mix,512);   // transfer
 8005698:	4b10      	ldr	r3, [pc, #64]	; (80056dc <record_output_to_RAM+0x48>)
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	461a      	mov	r2, r3
 800569e:	4b10      	ldr	r3, [pc, #64]	; (80056e0 <record_output_to_RAM+0x4c>)
 80056a0:	4413      	add	r3, r2
 80056a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056a6:	490f      	ldr	r1, [pc, #60]	; (80056e4 <record_output_to_RAM+0x50>)
 80056a8:	4618      	mov	r0, r3
 80056aa:	f007 febb 	bl	800d424 <memcpy>
    record_out_counter =record_out_counter+512;
 80056ae:	4b0b      	ldr	r3, [pc, #44]	; (80056dc <record_output_to_RAM+0x48>)
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	4b08      	ldr	r3, [pc, #32]	; (80056dc <record_output_to_RAM+0x48>)
 80056ba:	801a      	strh	r2, [r3, #0]
if (record_out_counter>=32767) { record_out_counter=0; record_output=0;
 80056bc:	4b07      	ldr	r3, [pc, #28]	; (80056dc <record_output_to_RAM+0x48>)
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d907      	bls.n	80056d8 <record_output_to_RAM+0x44>
 80056c8:	4b04      	ldr	r3, [pc, #16]	; (80056dc <record_output_to_RAM+0x48>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	801a      	strh	r2, [r3, #0]
 80056ce:	4b06      	ldr	r3, [pc, #24]	; (80056e8 <record_output_to_RAM+0x54>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	701a      	strb	r2, [r3, #0]

						RAM_normalise();   }  // reset and stop record RAM_normalise();
 80056d4:	f7ff ff4c 	bl	8005570 <RAM_normalise>

		     }
 80056d8:	bf00      	nop
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	20010354 	.word	0x20010354
 80056e0:	200001b8 	.word	0x200001b8
 80056e4:	2000ff54 	.word	0x2000ff54
 80056e8:	2000ff51 	.word	0x2000ff51

080056ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80056ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056ee:	b0a7      	sub	sp, #156	; 0x9c
 80056f0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80056f2:	f001 fd45 	bl	8007180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80056f6:	f000 fc57 	bl	8005fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80056fa:	f000 ffd5 	bl	80066a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80056fe:	f000 ff8d 	bl	800661c <MX_DMA_Init>
  MX_ADC1_Init();
 8005702:	f000 fcbb 	bl	800607c <MX_ADC1_Init>
  MX_SPI2_Init();
 8005706:	f000 fdb3 	bl	8006270 <MX_SPI2_Init>
  MX_TIM3_Init();
 800570a:	f000 fe3b 	bl	8006384 <MX_TIM3_Init>
  MX_TIM4_Init();
 800570e:	f000 febb 	bl	8006488 <MX_TIM4_Init>
  MX_I2C2_Init();
 8005712:	f000 fd49 	bl	80061a8 <MX_I2C2_Init>
  MX_SPI1_Init();
 8005716:	f000 fd75 	bl	8006204 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800571a:	f000 ff55 	bl	80065c8 <MX_USART1_UART_Init>
  MX_TIM10_Init();
 800571e:	f000 ff09 	bl	8006534 <MX_TIM10_Init>
  MX_TIM2_Init();
 8005722:	f000 fddb 	bl	80062dc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

main_initial();   // initial setup
 8005726:	f7fc f9cb 	bl	8001ac0 <main_initial>
  while (1)																																																		//   while loop , random 20+ms freeze around 0.5 sec
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_counter++ ;
 800572a:	4bb2      	ldr	r3, [pc, #712]	; (80059f4 <main+0x308>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	3301      	adds	r3, #1
 8005730:	b2da      	uxtb	r2, r3
 8005732:	4bb0      	ldr	r3, [pc, #704]	; (80059f4 <main+0x308>)
 8005734:	701a      	strb	r2, [r3, #0]
	  loop_counter2++;// this pretty slow now thanks to gfx , no skips though
 8005736:	4bb0      	ldr	r3, [pc, #704]	; (80059f8 <main+0x30c>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	3301      	adds	r3, #1
 800573c:	4aae      	ldr	r2, [pc, #696]	; (80059f8 <main+0x30c>)
 800573e:	6013      	str	r3, [r2, #0]

	  // if (menu_page<320) lcd_feedback();  //curious no issues with lcd without this  , maybe spell writing
	  uint32_t  millis = HAL_GetTick();
 8005740:	f001 fd84 	bl	800724c <HAL_GetTick>
 8005744:	67f8      	str	r0, [r7, #124]	; 0x7c


	  if 	((loop_counter2&7)==6)      {analoginputloopb();} // this is ok , plenty quick , no freeze here
 8005746:	4bac      	ldr	r3, [pc, #688]	; (80059f8 <main+0x30c>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0307 	and.w	r3, r3, #7
 800574e:	2b06      	cmp	r3, #6
 8005750:	d101      	bne.n	8005756 <main+0x6a>
 8005752:	f7fc f8d5 	bl	8001900 <analoginputloopb>
			  if ((seq.tempo<40)&&(stop_toggle==0))    {stop_toggle=1; stop_start();stop_toggle=3; seq.tempo=50; }
 8005756:	4ba9      	ldr	r3, [pc, #676]	; (80059fc <main+0x310>)
 8005758:	785b      	ldrb	r3, [r3, #1]
 800575a:	2b27      	cmp	r3, #39	; 0x27
 800575c:	d80e      	bhi.n	800577c <main+0x90>
 800575e:	4ba8      	ldr	r3, [pc, #672]	; (8005a00 <main+0x314>)
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10a      	bne.n	800577c <main+0x90>
 8005766:	4ba6      	ldr	r3, [pc, #664]	; (8005a00 <main+0x314>)
 8005768:	2201      	movs	r2, #1
 800576a:	701a      	strb	r2, [r3, #0]
 800576c:	f001 f8c8 	bl	8006900 <stop_start>
 8005770:	4ba3      	ldr	r3, [pc, #652]	; (8005a00 <main+0x314>)
 8005772:	2203      	movs	r2, #3
 8005774:	701a      	strb	r2, [r3, #0]
 8005776:	4ba1      	ldr	r3, [pc, #644]	; (80059fc <main+0x310>)
 8005778:	2232      	movs	r2, #50	; 0x32
 800577a:	705a      	strb	r2, [r3, #1]
			  if ((seq.tempo<40)&&(stop_toggle==3))    {stop_toggle=2; stop_start();  stop_toggle=0;seq.tempo=50; }
 800577c:	4b9f      	ldr	r3, [pc, #636]	; (80059fc <main+0x310>)
 800577e:	785b      	ldrb	r3, [r3, #1]
 8005780:	2b27      	cmp	r3, #39	; 0x27
 8005782:	d80e      	bhi.n	80057a2 <main+0xb6>
 8005784:	4b9e      	ldr	r3, [pc, #632]	; (8005a00 <main+0x314>)
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	2b03      	cmp	r3, #3
 800578a:	d10a      	bne.n	80057a2 <main+0xb6>
 800578c:	4b9c      	ldr	r3, [pc, #624]	; (8005a00 <main+0x314>)
 800578e:	2202      	movs	r2, #2
 8005790:	701a      	strb	r2, [r3, #0]
 8005792:	f001 f8b5 	bl	8006900 <stop_start>
 8005796:	4b9a      	ldr	r3, [pc, #616]	; (8005a00 <main+0x314>)
 8005798:	2200      	movs	r2, #0
 800579a:	701a      	strb	r2, [r3, #0]
 800579c:	4b97      	ldr	r3, [pc, #604]	; (80059fc <main+0x310>)
 800579e:	2232      	movs	r2, #50	; 0x32
 80057a0:	705a      	strb	r2, [r3, #1]

	if (loop_counter2==9024) {    //   4096=1min=32bytes so 4mins per 128 bank or 15 writes/hour , no freeze here
 80057a2:	4b95      	ldr	r3, [pc, #596]	; (80059f8 <main+0x30c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f5b3 5f0d 	cmp.w	r3, #9024	; 0x2340
 80057aa:	f040 8191 	bne.w	8005ad0 <main+0x3e4>

		    if (mem_count>(EPROM_limit-2)) mem_count=0; else mem_count++;
 80057ae:	4b95      	ldr	r3, [pc, #596]	; (8005a04 <main+0x318>)
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	f5b3 7f19 	cmp.w	r3, #612	; 0x264
 80057b6:	d903      	bls.n	80057c0 <main+0xd4>
 80057b8:	4b92      	ldr	r3, [pc, #584]	; (8005a04 <main+0x318>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	801a      	strh	r2, [r3, #0]
 80057be:	e005      	b.n	80057cc <main+0xe0>
 80057c0:	4b90      	ldr	r3, [pc, #576]	; (8005a04 <main+0x318>)
 80057c2:	881b      	ldrh	r3, [r3, #0]
 80057c4:	3301      	adds	r3, #1
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	4b8e      	ldr	r3, [pc, #568]	; (8005a04 <main+0x318>)
 80057ca:	801a      	strh	r2, [r3, #0]
		    if (mem_count>(EPROM_limit-50)) mem_count=461;  // this might feedback
 80057cc:	4b8d      	ldr	r3, [pc, #564]	; (8005a04 <main+0x318>)
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	f5b3 7f0d 	cmp.w	r3, #564	; 0x234
 80057d4:	d903      	bls.n	80057de <main+0xf2>
 80057d6:	4b8b      	ldr	r3, [pc, #556]	; (8005a04 <main+0x318>)
 80057d8:	f240 12cd 	movw	r2, #461	; 0x1cd
 80057dc:	801a      	strh	r2, [r3, #0]
		   // write to first this was moved for no logical reason ?

			  patch_target_parse(); //
 80057de:	f7fb fd85 	bl	80012ec <patch_target_parse>
			  uint16_t mem_count2=0;	// read values from stored
 80057e2:	2300      	movs	r3, #0
 80057e4:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a


			memcpy(potSource,&seq,46); // about 35
 80057e8:	222e      	movs	r2, #46	; 0x2e
 80057ea:	4984      	ldr	r1, [pc, #528]	; (80059fc <main+0x310>)
 80057ec:	4886      	ldr	r0, [pc, #536]	; (8005a08 <main+0x31c>)
 80057ee:	f007 fe19 	bl	800d424 <memcpy>
			memcpy(potSource+476,&sampler,36);
 80057f2:	4b86      	ldr	r3, [pc, #536]	; (8005a0c <main+0x320>)
 80057f4:	2224      	movs	r2, #36	; 0x24
 80057f6:	4986      	ldr	r1, [pc, #536]	; (8005a10 <main+0x324>)
 80057f8:	4618      	mov	r0, r3
 80057fa:	f007 fe13 	bl	800d424 <memcpy>
			memcpy(potSource+572,&sampler+36,20);
 80057fe:	4b85      	ldr	r3, [pc, #532]	; (8005a14 <main+0x328>)
 8005800:	4985      	ldr	r1, [pc, #532]	; (8005a18 <main+0x32c>)
 8005802:	2214      	movs	r2, #20
 8005804:	4618      	mov	r0, r3
 8005806:	f007 fe0d 	bl	800d424 <memcpy>

			for(i=0;i<10;i++){
 800580a:	4b84      	ldr	r3, [pc, #528]	; (8005a1c <main+0x330>)
 800580c:	2200      	movs	r2, #0
 800580e:	801a      	strh	r2, [r3, #0]
 8005810:	e099      	b.n	8005946 <main+0x25a>
					memcpy(potSource+156+(i*16),&note[i],16 );  //grab note settings ,112 total , works
 8005812:	4b82      	ldr	r3, [pc, #520]	; (8005a1c <main+0x330>)
 8005814:	881b      	ldrh	r3, [r3, #0]
 8005816:	011b      	lsls	r3, r3, #4
 8005818:	339c      	adds	r3, #156	; 0x9c
 800581a:	4a7b      	ldr	r2, [pc, #492]	; (8005a08 <main+0x31c>)
 800581c:	1898      	adds	r0, r3, r2
 800581e:	4b7f      	ldr	r3, [pc, #508]	; (8005a1c <main+0x330>)
 8005820:	881b      	ldrh	r3, [r3, #0]
 8005822:	011b      	lsls	r3, r3, #4
 8005824:	4a7e      	ldr	r2, [pc, #504]	; (8005a20 <main+0x334>)
 8005826:	4413      	add	r3, r2
 8005828:	2210      	movs	r2, #16
 800582a:	4619      	mov	r1, r3
 800582c:	f007 fdfa 	bl	800d424 <memcpy>

				memcpy(potSource+46+(i*6),&LFO[i],6 );  // + 60  ,ok
 8005830:	4b7a      	ldr	r3, [pc, #488]	; (8005a1c <main+0x330>)
 8005832:	881b      	ldrh	r3, [r3, #0]
 8005834:	461a      	mov	r2, r3
 8005836:	4613      	mov	r3, r2
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	4413      	add	r3, r2
 800583c:	005b      	lsls	r3, r3, #1
 800583e:	332e      	adds	r3, #46	; 0x2e
 8005840:	4a71      	ldr	r2, [pc, #452]	; (8005a08 <main+0x31c>)
 8005842:	1898      	adds	r0, r3, r2
 8005844:	4b75      	ldr	r3, [pc, #468]	; (8005a1c <main+0x330>)
 8005846:	881b      	ldrh	r3, [r3, #0]
 8005848:	461a      	mov	r2, r3
 800584a:	4613      	mov	r3, r2
 800584c:	011b      	lsls	r3, r3, #4
 800584e:	4413      	add	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4a74      	ldr	r2, [pc, #464]	; (8005a24 <main+0x338>)
 8005854:	4413      	add	r3, r2
 8005856:	2206      	movs	r2, #6
 8005858:	4619      	mov	r1, r3
 800585a:	f007 fde3 	bl	800d424 <memcpy>
				memcpy(potSource+106+(i*5),&ADSR[i],5 );  // +50  ,
 800585e:	4b6f      	ldr	r3, [pc, #444]	; (8005a1c <main+0x330>)
 8005860:	881b      	ldrh	r3, [r3, #0]
 8005862:	461a      	mov	r2, r3
 8005864:	4613      	mov	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	336a      	adds	r3, #106	; 0x6a
 800586c:	4a66      	ldr	r2, [pc, #408]	; (8005a08 <main+0x31c>)
 800586e:	1898      	adds	r0, r3, r2
 8005870:	4b6a      	ldr	r3, [pc, #424]	; (8005a1c <main+0x330>)
 8005872:	881b      	ldrh	r3, [r3, #0]
 8005874:	461a      	mov	r2, r3
 8005876:	4613      	mov	r3, r2
 8005878:	011b      	lsls	r3, r3, #4
 800587a:	1a9b      	subs	r3, r3, r2
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	4a6a      	ldr	r2, [pc, #424]	; (8005a28 <main+0x33c>)
 8005880:	4413      	add	r3, r2
 8005882:	2205      	movs	r2, #5
 8005884:	4619      	mov	r1, r3
 8005886:	f007 fdcd 	bl	800d424 <memcpy>
				memcpy(potSource+316+(i*6),&patch[i],6 );   // not writing ?
 800588a:	4b64      	ldr	r3, [pc, #400]	; (8005a1c <main+0x330>)
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	461a      	mov	r2, r3
 8005890:	4613      	mov	r3, r2
 8005892:	005b      	lsls	r3, r3, #1
 8005894:	4413      	add	r3, r2
 8005896:	005b      	lsls	r3, r3, #1
 8005898:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800589c:	4a5a      	ldr	r2, [pc, #360]	; (8005a08 <main+0x31c>)
 800589e:	1898      	adds	r0, r3, r2
 80058a0:	4b5e      	ldr	r3, [pc, #376]	; (8005a1c <main+0x330>)
 80058a2:	881b      	ldrh	r3, [r3, #0]
 80058a4:	461a      	mov	r2, r3
 80058a6:	232c      	movs	r3, #44	; 0x2c
 80058a8:	fb02 f303 	mul.w	r3, r2, r3
 80058ac:	4a5f      	ldr	r2, [pc, #380]	; (8005a2c <main+0x340>)
 80058ae:	4413      	add	r3, r2
 80058b0:	2206      	movs	r2, #6
 80058b2:	4619      	mov	r1, r3
 80058b4:	f007 fdb6 	bl	800d424 <memcpy>

				memcpy(potSource+376+(i*6),&LFO_slave1[i],6 ); // ext llof settings
 80058b8:	4b58      	ldr	r3, [pc, #352]	; (8005a1c <main+0x330>)
 80058ba:	881b      	ldrh	r3, [r3, #0]
 80058bc:	461a      	mov	r2, r3
 80058be:	4613      	mov	r3, r2
 80058c0:	005b      	lsls	r3, r3, #1
 80058c2:	4413      	add	r3, r2
 80058c4:	005b      	lsls	r3, r3, #1
 80058c6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80058ca:	4a4f      	ldr	r2, [pc, #316]	; (8005a08 <main+0x31c>)
 80058cc:	1898      	adds	r0, r3, r2
 80058ce:	4b53      	ldr	r3, [pc, #332]	; (8005a1c <main+0x330>)
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	461a      	mov	r2, r3
 80058d4:	4613      	mov	r3, r2
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	4413      	add	r3, r2
 80058da:	005b      	lsls	r3, r3, #1
 80058dc:	4a54      	ldr	r2, [pc, #336]	; (8005a30 <main+0x344>)
 80058de:	4413      	add	r3, r2
 80058e0:	2206      	movs	r2, #6
 80058e2:	4619      	mov	r1, r3
 80058e4:	f007 fd9e 	bl	800d424 <memcpy>
				memcpy(potSource+436+(i*4),&LFO_square[i],4 );
 80058e8:	4b4c      	ldr	r3, [pc, #304]	; (8005a1c <main+0x330>)
 80058ea:	881b      	ldrh	r3, [r3, #0]
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 80058f2:	4a45      	ldr	r2, [pc, #276]	; (8005a08 <main+0x31c>)
 80058f4:	441a      	add	r2, r3
 80058f6:	4b49      	ldr	r3, [pc, #292]	; (8005a1c <main+0x330>)
 80058f8:	881b      	ldrh	r3, [r3, #0]
 80058fa:	4619      	mov	r1, r3
 80058fc:	460b      	mov	r3, r1
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	440b      	add	r3, r1
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	494b      	ldr	r1, [pc, #300]	; (8005a34 <main+0x348>)
 8005906:	440b      	add	r3, r1
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	6013      	str	r3, [r2, #0]
				memcpy(potSource+512+(i*6),&patch[i+10],6 );
 800590c:	4b43      	ldr	r3, [pc, #268]	; (8005a1c <main+0x330>)
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	461a      	mov	r2, r3
 8005912:	4613      	mov	r3, r2
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	4413      	add	r3, r2
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800591e:	4a3a      	ldr	r2, [pc, #232]	; (8005a08 <main+0x31c>)
 8005920:	1898      	adds	r0, r3, r2
 8005922:	4b3e      	ldr	r3, [pc, #248]	; (8005a1c <main+0x330>)
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	330a      	adds	r3, #10
 8005928:	222c      	movs	r2, #44	; 0x2c
 800592a:	fb02 f303 	mul.w	r3, r2, r3
 800592e:	4a3f      	ldr	r2, [pc, #252]	; (8005a2c <main+0x340>)
 8005930:	4413      	add	r3, r2
 8005932:	2206      	movs	r2, #6
 8005934:	4619      	mov	r1, r3
 8005936:	f007 fd75 	bl	800d424 <memcpy>
			for(i=0;i<10;i++){
 800593a:	4b38      	ldr	r3, [pc, #224]	; (8005a1c <main+0x330>)
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	3301      	adds	r3, #1
 8005940:	b29a      	uxth	r2, r3
 8005942:	4b36      	ldr	r3, [pc, #216]	; (8005a1c <main+0x330>)
 8005944:	801a      	strh	r2, [r3, #0]
 8005946:	4b35      	ldr	r3, [pc, #212]	; (8005a1c <main+0x330>)
 8005948:	881b      	ldrh	r3, [r3, #0]
 800594a:	2b09      	cmp	r3, #9
 800594c:	f67f af61 	bls.w	8005812 <main+0x126>

			}	// copy vars into potSource

			//HAL_UART_Transmit(&huart1,serial_send,4, 100);  //send serial again

			mem_count2=0;
 8005950:	2300      	movs	r3, #0
 8005952:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
			//	mem_buf=0;
					// mem_verify=0;

					// for patch write start at 2048 for now
			 uint8_t mem_buf_list[50]={0};
 8005956:	2300      	movs	r3, #0
 8005958:	603b      	str	r3, [r7, #0]
 800595a:	1d3b      	adds	r3, r7, #4
 800595c:	222e      	movs	r2, #46	; 0x2e
 800595e:	2100      	movs	r1, #0
 8005960:	4618      	mov	r0, r3
 8005962:	f007 fd6d 	bl	800d440 <memset>
			 uint8_t mem_verify_list[50]={0};
 8005966:	2300      	movs	r3, #0
 8005968:	637b      	str	r3, [r7, #52]	; 0x34
 800596a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800596e:	222e      	movs	r2, #46	; 0x2e
 8005970:	2100      	movs	r1, #0
 8005972:	4618      	mov	r0, r3
 8005974:	f007 fd64 	bl	800d440 <memset>
			 uint8_t read_counter=0;
 8005978:	2300      	movs	r3, #0
 800597a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			//  --   compare 50 bytes
			 memcpy(&mem_buf_list, potSource+mem_count,50);  // copy 50 from potsource
 800597e:	4b21      	ldr	r3, [pc, #132]	; (8005a04 <main+0x318>)
 8005980:	881b      	ldrh	r3, [r3, #0]
 8005982:	461a      	mov	r2, r3
 8005984:	4b20      	ldr	r3, [pc, #128]	; (8005a08 <main+0x31c>)
 8005986:	4413      	add	r3, r2
 8005988:	461c      	mov	r4, r3
 800598a:	463e      	mov	r6, r7
 800598c:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8005990:	4635      	mov	r5, r6
 8005992:	4623      	mov	r3, r4
 8005994:	6818      	ldr	r0, [r3, #0]
 8005996:	6859      	ldr	r1, [r3, #4]
 8005998:	689a      	ldr	r2, [r3, #8]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800599e:	3410      	adds	r4, #16
 80059a0:	3610      	adds	r6, #16
 80059a2:	4564      	cmp	r4, ip
 80059a4:	d1f4      	bne.n	8005990 <main+0x2a4>
 80059a6:	4632      	mov	r2, r6
 80059a8:	4623      	mov	r3, r4
 80059aa:	881b      	ldrh	r3, [r3, #0]
 80059ac:	8013      	strh	r3, [r2, #0]
			 mem_count2=((1+(mem_count>>6))<<6)+(mem_count&63);
 80059ae:	4b15      	ldr	r3, [pc, #84]	; (8005a04 <main+0x318>)
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	099b      	lsrs	r3, r3, #6
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	3301      	adds	r3, #1
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	019b      	lsls	r3, r3, #6
 80059bc:	b29a      	uxth	r2, r3
 80059be:	4b11      	ldr	r3, [pc, #68]	; (8005a04 <main+0x318>)
 80059c0:	881b      	ldrh	r3, [r3, #0]
 80059c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	4413      	add	r3, r2
 80059ca:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
			 HAL_I2C_Mem_Read(&hi2c2, 160,mem_count2, 2,mem_verify_list, 50,100);    // reading is quick , 50 bytse
 80059ce:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80059d2:	2364      	movs	r3, #100	; 0x64
 80059d4:	9302      	str	r3, [sp, #8]
 80059d6:	2332      	movs	r3, #50	; 0x32
 80059d8:	9301      	str	r3, [sp, #4]
 80059da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	2302      	movs	r3, #2
 80059e2:	21a0      	movs	r1, #160	; 0xa0
 80059e4:	4814      	ldr	r0, [pc, #80]	; (8005a38 <main+0x34c>)
 80059e6:	f003 fdb7 	bl	8009558 <HAL_I2C_Mem_Read>
			 for (read_counter=0;read_counter<50;read_counter++){
 80059ea:	2300      	movs	r3, #0
 80059ec:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80059f0:	e03d      	b.n	8005a6e <main+0x382>
 80059f2:	bf00      	nop
 80059f4:	200096da 	.word	0x200096da
 80059f8:	2000bf30 	.word	0x2000bf30
 80059fc:	2000d0bc 	.word	0x2000d0bc
 8005a00:	2000ff44 	.word	0x2000ff44
 8005a04:	2000bf2e 	.word	0x2000bf2e
 8005a08:	2000946c 	.word	0x2000946c
 8005a0c:	20009648 	.word	0x20009648
 8005a10:	20008edc 	.word	0x20008edc
 8005a14:	200096a8 	.word	0x200096a8
 8005a18:	2000a28c 	.word	0x2000a28c
 8005a1c:	200096de 	.word	0x200096de
 8005a20:	20008e1c 	.word	0x20008e1c
 8005a24:	2000cc78 	.word	0x2000cc78
 8005a28:	2000d024 	.word	0x2000d024
 8005a2c:	2000d0ec 	.word	0x2000d0ec
 8005a30:	2000cf20 	.word	0x2000cf20
 8005a34:	2000cf5c 	.word	0x2000cf5c
 8005a38:	20010474 	.word	0x20010474

			     if (mem_verify_list[read_counter]!=mem_buf_list[read_counter])  { break;}  // exit if found difference
 8005a3c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8005a40:	3388      	adds	r3, #136	; 0x88
 8005a42:	443b      	add	r3, r7
 8005a44:	f813 2c54 	ldrb.w	r2, [r3, #-84]
 8005a48:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8005a4c:	3388      	adds	r3, #136	; 0x88
 8005a4e:	443b      	add	r3, r7
 8005a50:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d10f      	bne.n	8005a78 <main+0x38c>
			     mem_count++;
 8005a58:	4b8c      	ldr	r3, [pc, #560]	; (8005c8c <main+0x5a0>)
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	4b8a      	ldr	r3, [pc, #552]	; (8005c8c <main+0x5a0>)
 8005a62:	801a      	strh	r2, [r3, #0]
			 for (read_counter=0;read_counter<50;read_counter++){
 8005a64:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8005a68:	3301      	adds	r3, #1
 8005a6a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8005a6e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8005a72:	2b31      	cmp	r3, #49	; 0x31
 8005a74:	d9e2      	bls.n	8005a3c <main+0x350>
 8005a76:	e000      	b.n	8005a7a <main+0x38e>
			     if (mem_verify_list[read_counter]!=mem_buf_list[read_counter])  { break;}  // exit if found difference
 8005a78:	bf00      	nop

			 }
						 // ----- write changed data , might shift these off by one after a while to stop wear
						 mem_buf=potSource[mem_count];
 8005a7a:	4b84      	ldr	r3, [pc, #528]	; (8005c8c <main+0x5a0>)
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	4b83      	ldr	r3, [pc, #524]	; (8005c90 <main+0x5a4>)
 8005a82:	5c9a      	ldrb	r2, [r3, r2]
 8005a84:	4b83      	ldr	r3, [pc, #524]	; (8005c94 <main+0x5a8>)
 8005a86:	701a      	strb	r2, [r3, #0]
						 mem_count2=((1+(mem_count>>6))<<6)+(mem_count&63);
 8005a88:	4b80      	ldr	r3, [pc, #512]	; (8005c8c <main+0x5a0>)
 8005a8a:	881b      	ldrh	r3, [r3, #0]
 8005a8c:	099b      	lsrs	r3, r3, #6
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	3301      	adds	r3, #1
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	019b      	lsls	r3, r3, #6
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	4b7c      	ldr	r3, [pc, #496]	; (8005c8c <main+0x5a0>)
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

			if (disable_eeprom==0)	HAL_I2C_Mem_Write(&hi2c2, 160,mem_count2 , 2, &mem_buf, 1, 100);   // write changed
 8005aa8:	4b7b      	ldr	r3, [pc, #492]	; (8005c98 <main+0x5ac>)
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10c      	bne.n	8005aca <main+0x3de>
 8005ab0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8005ab4:	2364      	movs	r3, #100	; 0x64
 8005ab6:	9302      	str	r3, [sp, #8]
 8005ab8:	2301      	movs	r3, #1
 8005aba:	9301      	str	r3, [sp, #4]
 8005abc:	4b75      	ldr	r3, [pc, #468]	; (8005c94 <main+0x5a8>)
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	21a0      	movs	r1, #160	; 0xa0
 8005ac4:	4875      	ldr	r0, [pc, #468]	; (8005c9c <main+0x5b0>)
 8005ac6:	f003 fc4d 	bl	8009364 <HAL_I2C_Mem_Write>

			 // "&hi2c2"  actual register address  , write only when needed

		loop_counter2=0; //reset
 8005aca:	4b75      	ldr	r3, [pc, #468]	; (8005ca0 <main+0x5b4>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	601a      	str	r2, [r3, #0]

		}


	if (serial_tosend){    // send on seq change
 8005ad0:	4b74      	ldr	r3, [pc, #464]	; (8005ca4 <main+0x5b8>)
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f000 8090 	beq.w	8005bfa <main+0x50e>
		uint16_t mem_counter=0;
 8005ada:	2300      	movs	r3, #0
 8005adc:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
		  memcpy(serial_source,&seq,36); // copy bits
 8005ae0:	2224      	movs	r2, #36	; 0x24
 8005ae2:	4971      	ldr	r1, [pc, #452]	; (8005ca8 <main+0x5bc>)
 8005ae4:	4871      	ldr	r0, [pc, #452]	; (8005cac <main+0x5c0>)
 8005ae6:	f007 fc9d 	bl	800d424 <memcpy>

		  memcpy(serial_source+96,potSource+252,64 );  // 4 * 16
 8005aea:	4b71      	ldr	r3, [pc, #452]	; (8005cb0 <main+0x5c4>)
 8005aec:	4971      	ldr	r1, [pc, #452]	; (8005cb4 <main+0x5c8>)
 8005aee:	2240      	movs	r2, #64	; 0x40
 8005af0:	4618      	mov	r0, r3
 8005af2:	f007 fc97 	bl	800d424 <memcpy>
		  for(mem_counter=0;mem_counter<10;mem_counter++){
 8005af6:	2300      	movs	r3, #0
 8005af8:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8005afc:	e02f      	b.n	8005b5e <main+0x472>
			  if (mem_counter<4)memcpy(serial_source+96+(mem_counter*7),&note[mem_counter+6],7 );
 8005afe:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005b02:	2b03      	cmp	r3, #3
 8005b04:	d811      	bhi.n	8005b2a <main+0x43e>
 8005b06:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	00db      	lsls	r3, r3, #3
 8005b0e:	1a9b      	subs	r3, r3, r2
 8005b10:	3360      	adds	r3, #96	; 0x60
 8005b12:	4a66      	ldr	r2, [pc, #408]	; (8005cac <main+0x5c0>)
 8005b14:	1898      	adds	r0, r3, r2
 8005b16:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005b1a:	3306      	adds	r3, #6
 8005b1c:	011b      	lsls	r3, r3, #4
 8005b1e:	4a66      	ldr	r2, [pc, #408]	; (8005cb8 <main+0x5cc>)
 8005b20:	4413      	add	r3, r2
 8005b22:	2207      	movs	r2, #7
 8005b24:	4619      	mov	r1, r3
 8005b26:	f007 fc7d 	bl	800d424 <memcpy>
						memcpy(serial_source+36+(mem_counter*6),&LFO_slave1[mem_counter],6 );  // insert lfo settings
 8005b2a:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8005b2e:	4613      	mov	r3, r2
 8005b30:	005b      	lsls	r3, r3, #1
 8005b32:	4413      	add	r3, r2
 8005b34:	005b      	lsls	r3, r3, #1
 8005b36:	3324      	adds	r3, #36	; 0x24
 8005b38:	4a5c      	ldr	r2, [pc, #368]	; (8005cac <main+0x5c0>)
 8005b3a:	1898      	adds	r0, r3, r2
 8005b3c:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8005b40:	4613      	mov	r3, r2
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	4413      	add	r3, r2
 8005b46:	005b      	lsls	r3, r3, #1
 8005b48:	4a5c      	ldr	r2, [pc, #368]	; (8005cbc <main+0x5d0>)
 8005b4a:	4413      	add	r3, r2
 8005b4c:	2206      	movs	r2, #6
 8005b4e:	4619      	mov	r1, r3
 8005b50:	f007 fc68 	bl	800d424 <memcpy>
		  for(mem_counter=0;mem_counter<10;mem_counter++){
 8005b54:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005b58:	3301      	adds	r3, #1
 8005b5a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8005b5e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005b62:	2b09      	cmp	r3, #9
 8005b64:	d9cb      	bls.n	8005afe <main+0x412>
				  }

		  while ((serial_source_temp[serial_up]==serial_source[serial_up]) &&(serial_up<161) )   {
 8005b66:	e005      	b.n	8005b74 <main+0x488>
			  serial_up++;
 8005b68:	4b55      	ldr	r3, [pc, #340]	; (8005cc0 <main+0x5d4>)
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	b2da      	uxtb	r2, r3
 8005b70:	4b53      	ldr	r3, [pc, #332]	; (8005cc0 <main+0x5d4>)
 8005b72:	701a      	strb	r2, [r3, #0]
		  while ((serial_source_temp[serial_up]==serial_source[serial_up]) &&(serial_up<161) )   {
 8005b74:	4b52      	ldr	r3, [pc, #328]	; (8005cc0 <main+0x5d4>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	461a      	mov	r2, r3
 8005b7a:	4b52      	ldr	r3, [pc, #328]	; (8005cc4 <main+0x5d8>)
 8005b7c:	5c9a      	ldrb	r2, [r3, r2]
 8005b7e:	4b50      	ldr	r3, [pc, #320]	; (8005cc0 <main+0x5d4>)
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	4619      	mov	r1, r3
 8005b84:	4b49      	ldr	r3, [pc, #292]	; (8005cac <main+0x5c0>)
 8005b86:	5c5b      	ldrb	r3, [r3, r1]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d103      	bne.n	8005b94 <main+0x4a8>
 8005b8c:	4b4c      	ldr	r3, [pc, #304]	; (8005cc0 <main+0x5d4>)
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	2ba0      	cmp	r3, #160	; 0xa0
 8005b92:	d9e9      	bls.n	8005b68 <main+0x47c>
		  }

		  serial_send[6]=0;
 8005b94:	4b4c      	ldr	r3, [pc, #304]	; (8005cc8 <main+0x5dc>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	719a      	strb	r2, [r3, #6]
		  serial_send[7]=seq.pos;  // chase
 8005b9a:	4b43      	ldr	r3, [pc, #268]	; (8005ca8 <main+0x5bc>)
 8005b9c:	781a      	ldrb	r2, [r3, #0]
 8005b9e:	4b4a      	ldr	r3, [pc, #296]	; (8005cc8 <main+0x5dc>)
 8005ba0:	71da      	strb	r2, [r3, #7]
		  serial_send[2]=serial_up;
 8005ba2:	4b47      	ldr	r3, [pc, #284]	; (8005cc0 <main+0x5d4>)
 8005ba4:	781a      	ldrb	r2, [r3, #0]
 8005ba6:	4b48      	ldr	r3, [pc, #288]	; (8005cc8 <main+0x5dc>)
 8005ba8:	709a      	strb	r2, [r3, #2]
		  serial_send[3]=serial_source[serial_up];
 8005baa:	4b45      	ldr	r3, [pc, #276]	; (8005cc0 <main+0x5d4>)
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	461a      	mov	r2, r3
 8005bb0:	4b3e      	ldr	r3, [pc, #248]	; (8005cac <main+0x5c0>)
 8005bb2:	5c9a      	ldrb	r2, [r3, r2]
 8005bb4:	4b44      	ldr	r3, [pc, #272]	; (8005cc8 <main+0x5dc>)
 8005bb6:	70da      	strb	r2, [r3, #3]
		  serial_source_temp[serial_up]=serial_source[serial_up];
 8005bb8:	4b41      	ldr	r3, [pc, #260]	; (8005cc0 <main+0x5d4>)
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	4b40      	ldr	r3, [pc, #256]	; (8005cc0 <main+0x5d4>)
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	4b39      	ldr	r3, [pc, #228]	; (8005cac <main+0x5c0>)
 8005bc6:	5c59      	ldrb	r1, [r3, r1]
 8005bc8:	4b3e      	ldr	r3, [pc, #248]	; (8005cc4 <main+0x5d8>)
 8005bca:	5499      	strb	r1, [r3, r2]
		  if (serial_up>161) serial_up=0; else serial_up++;
 8005bcc:	4b3c      	ldr	r3, [pc, #240]	; (8005cc0 <main+0x5d4>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2ba1      	cmp	r3, #161	; 0xa1
 8005bd2:	d903      	bls.n	8005bdc <main+0x4f0>
 8005bd4:	4b3a      	ldr	r3, [pc, #232]	; (8005cc0 <main+0x5d4>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	701a      	strb	r2, [r3, #0]
 8005bda:	e005      	b.n	8005be8 <main+0x4fc>
 8005bdc:	4b38      	ldr	r3, [pc, #224]	; (8005cc0 <main+0x5d4>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	3301      	adds	r3, #1
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	4b36      	ldr	r3, [pc, #216]	; (8005cc0 <main+0x5d4>)
 8005be6:	701a      	strb	r2, [r3, #0]

		  HAL_UART_Transmit(&huart1,serial_send,8, 100);  //send serial
 8005be8:	2364      	movs	r3, #100	; 0x64
 8005bea:	2208      	movs	r2, #8
 8005bec:	4936      	ldr	r1, [pc, #216]	; (8005cc8 <main+0x5dc>)
 8005bee:	4837      	ldr	r0, [pc, #220]	; (8005ccc <main+0x5e0>)
 8005bf0:	f007 f831 	bl	800cc56 <HAL_UART_Transmit>
		  serial_tosend=0;
 8005bf4:	4b2b      	ldr	r3, [pc, #172]	; (8005ca4 <main+0x5b8>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	701a      	strb	r2, [r3, #0]
	}

		if (disp_end==1)	  {display_generate();}      // run this after gfx draw page finish
 8005bfa:	4b35      	ldr	r3, [pc, #212]	; (8005cd0 <main+0x5e4>)
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d101      	bne.n	8005c06 <main+0x51a>
 8005c02:	f7fe fe29 	bl	8004858 <display_generate>

		if (init<6)				// after 6 its done for good   // no freeze here
 8005c06:	4b33      	ldr	r3, [pc, #204]	; (8005cd4 <main+0x5e8>)
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	2b05      	cmp	r3, #5
 8005c0c:	d81b      	bhi.n	8005c46 <main+0x55a>
		{
			for (i=0;i<6;i++) {display_init();}  //1-2ms ?  change length if flickering ,maybe initial data
 8005c0e:	4b32      	ldr	r3, [pc, #200]	; (8005cd8 <main+0x5ec>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	801a      	strh	r2, [r3, #0]
 8005c14:	e007      	b.n	8005c26 <main+0x53a>
 8005c16:	f7fe fd0d 	bl	8004634 <display_init>
 8005c1a:	4b2f      	ldr	r3, [pc, #188]	; (8005cd8 <main+0x5ec>)
 8005c1c:	881b      	ldrh	r3, [r3, #0]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	4b2d      	ldr	r3, [pc, #180]	; (8005cd8 <main+0x5ec>)
 8005c24:	801a      	strh	r2, [r3, #0]
 8005c26:	4b2c      	ldr	r3, [pc, #176]	; (8005cd8 <main+0x5ec>)
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	2b05      	cmp	r3, #5
 8005c2c:	d9f3      	bls.n	8005c16 <main+0x52a>

		if (init==6)  {HAL_TIM_Base_Start_IT(&htim10);HAL_TIM_Base_Start(&htim10);	 gfx_TX_block(); 				}
 8005c2e:	4b29      	ldr	r3, [pc, #164]	; (8005cd4 <main+0x5e8>)
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	2b06      	cmp	r3, #6
 8005c34:	d107      	bne.n	8005c46 <main+0x55a>
 8005c36:	4829      	ldr	r0, [pc, #164]	; (8005cdc <main+0x5f0>)
 8005c38:	f005 feba 	bl	800b9b0 <HAL_TIM_Base_Start_IT>
 8005c3c:	4827      	ldr	r0, [pc, #156]	; (8005cdc <main+0x5f0>)
 8005c3e:	f005 fe5d 	bl	800b8fc <HAL_TIM_Base_Start>
 8005c42:	f7fe fd4d 	bl	80046e0 <gfx_TX_block>
		}

		if (init > 5) {    //  around 3 cycles per single transmit  , plenty quick as is , spi lcd can really slow things down
 8005c46:	4b23      	ldr	r3, [pc, #140]	; (8005cd4 <main+0x5e8>)
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	2b05      	cmp	r3, #5
 8005c4c:	d973      	bls.n	8005d36 <main+0x64a>
			if (sampler.sample_save) {
 8005c4e:	4b24      	ldr	r3, [pc, #144]	; (8005ce0 <main+0x5f4>)
 8005c50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d049      	beq.n	8005cec <main+0x600>
			if (sampler.recorded[sampler.sample_save>>5]&(1<<(sampler.sample_save&31)))
 8005c58:	4b21      	ldr	r3, [pc, #132]	; (8005ce0 <main+0x5f4>)
 8005c5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c5e:	095b      	lsrs	r3, r3, #5
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	4a1f      	ldr	r2, [pc, #124]	; (8005ce0 <main+0x5f4>)
 8005c64:	3306      	adds	r3, #6
 8005c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c6a:	4a1d      	ldr	r2, [pc, #116]	; (8005ce0 <main+0x5f4>)
 8005c6c:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 8005c70:	f002 021f 	and.w	r2, r2, #31
 8005c74:	2101      	movs	r1, #1
 8005c76:	fa01 f202 	lsl.w	r2, r1, r2
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d031      	beq.n	8005ce4 <main+0x5f8>
			{sampler.sample_status=2;}  // feedback on sample status
 8005c80:	4b17      	ldr	r3, [pc, #92]	; (8005ce0 <main+0x5f4>)
 8005c82:	2202      	movs	r2, #2
 8005c84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8005c88:	e030      	b.n	8005cec <main+0x600>
 8005c8a:	bf00      	nop
 8005c8c:	2000bf2e 	.word	0x2000bf2e
 8005c90:	2000946c 	.word	0x2000946c
 8005c94:	2000bf34 	.word	0x2000bf34
 8005c98:	200103c8 	.word	0x200103c8
 8005c9c:	20010474 	.word	0x20010474
 8005ca0:	2000bf30 	.word	0x2000bf30
 8005ca4:	2000e2a1 	.word	0x2000e2a1
 8005ca8:	2000d0bc 	.word	0x2000d0bc
 8005cac:	2000e0a0 	.word	0x2000e0a0
 8005cb0:	2000e100 	.word	0x2000e100
 8005cb4:	20009568 	.word	0x20009568
 8005cb8:	20008e1c 	.word	0x20008e1c
 8005cbc:	2000cf20 	.word	0x2000cf20
 8005cc0:	2000e2a0 	.word	0x2000e2a0
 8005cc4:	2000e1a0 	.word	0x2000e1a0
 8005cc8:	20008f6c 	.word	0x20008f6c
 8005ccc:	200107b8 	.word	0x200107b8
 8005cd0:	2000c86a 	.word	0x2000c86a
 8005cd4:	2000bf25 	.word	0x2000bf25
 8005cd8:	200096de 	.word	0x200096de
 8005cdc:	20010770 	.word	0x20010770
 8005ce0:	20008edc 	.word	0x20008edc
			else sampler.sample_status=1;
 8005ce4:	4b9c      	ldr	r3, [pc, #624]	; (8005f58 <main+0x86c>)
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
			}
			if(sampler.sample_save_enable>10){
 8005cec:	4b9a      	ldr	r3, [pc, #616]	; (8005f58 <main+0x86c>)
 8005cee:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005cf2:	2b0a      	cmp	r3, #10
 8005cf4:	d91b      	bls.n	8005d2e <main+0x642>

			    uint16_t sample_size=sizeof(RAM);
 8005cf6:	f648 330e 	movw	r3, #35598	; 0x8b0e
 8005cfa:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

			    		uint8_t* ram_ptr=&RAM[0];
 8005cfe:	4b97      	ldr	r3, [pc, #604]	; (8005f5c <main+0x870>)
 8005d00:	677b      	str	r3, [r7, #116]	; 0x74

			    				sample_save(sampler.sample_save,ram_ptr, sample_size);  // write sample no 255
 8005d02:	4b95      	ldr	r3, [pc, #596]	; (8005f58 <main+0x86c>)
 8005d04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8005d0e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7ff f9b9 	bl	8005088 <sample_save>
			    sampler.sample_save_enable=0;
 8005d16:	4b90      	ldr	r3, [pc, #576]	; (8005f58 <main+0x86c>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			    sampler.sample_save=0;   // reset position jus tin case
 8005d1e:	4b8e      	ldr	r3, [pc, #568]	; (8005f58 <main+0x86c>)
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			    sampler.RAM_free=0; //
 8005d26:	4b8c      	ldr	r3, [pc, #560]	; (8005f58 <main+0x86c>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a


		    //full page in mem for spi

		    //  little too fast
			 menu3_fill();encoder2();
 8005d2e:	f7fe ff69 	bl	8004c04 <menu3_fill>
 8005d32:	f7fe fe73 	bl	8004a1c <encoder2>
		}


		if ((loop_counter2&1023)==0){ // grab adc readings + 3ms , 32 step  // no freeze
 8005d36:	4b8a      	ldr	r3, [pc, #552]	; (8005f60 <main+0x874>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d147      	bne.n	8005dd2 <main+0x6e6>



			//HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go

			HAL_ADCEx_InjectedStart(&hadc1) ;  // start injected mode normal conversion
 8005d42:	4888      	ldr	r0, [pc, #544]	; (8005f64 <main+0x878>)
 8005d44:	f002 f83a 	bl	8007dbc <HAL_ADCEx_InjectedStart>
			uint16_t adc_temp1[4]={0,0,0,0};
 8005d48:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	601a      	str	r2, [r3, #0]
 8005d50:	605a      	str	r2, [r3, #4]

			HAL_ADC_PollForConversion(&hadc1,1);  // works but  slow ,blocking very slow, set quick time out
 8005d52:	2101      	movs	r1, #1
 8005d54:	4883      	ldr	r0, [pc, #524]	; (8005f64 <main+0x878>)
 8005d56:	f001 fba1 	bl	800749c <HAL_ADC_PollForConversion>

			adc_temp1[0]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8005d5a:	2101      	movs	r1, #1
 8005d5c:	4881      	ldr	r0, [pc, #516]	; (8005f64 <main+0x878>)
 8005d5e:	f002 f943 	bl	8007fe8 <HAL_ADCEx_InjectedGetValue>
 8005d62:	4603      	mov	r3, r0
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
			adc_temp1[1] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8005d6a:	2102      	movs	r1, #2
 8005d6c:	487d      	ldr	r0, [pc, #500]	; (8005f64 <main+0x878>)
 8005d6e:	f002 f93b 	bl	8007fe8 <HAL_ADCEx_InjectedGetValue>
 8005d72:	4603      	mov	r3, r0
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
			adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8005d7a:	2103      	movs	r1, #3
 8005d7c:	4879      	ldr	r0, [pc, #484]	; (8005f64 <main+0x878>)
 8005d7e:	f002 f933 	bl	8007fe8 <HAL_ADCEx_InjectedGetValue>
 8005d82:	4603      	mov	r3, r0
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			HAL_ADCEx_InjectedStop(&hadc1) ;
 8005d8a:	4876      	ldr	r0, [pc, #472]	; (8005f64 <main+0x878>)
 8005d8c:	f002 f8e0 	bl	8007f50 <HAL_ADCEx_InjectedStop>
			//  adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
			adc_values[0]=	(4095-  adc_temp1[0])<<4;  //  4095 = 0
 8005d90:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005d94:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8005d98:	330f      	adds	r3, #15
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	011b      	lsls	r3, r3, #4
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	4b71      	ldr	r3, [pc, #452]	; (8005f68 <main+0x87c>)
 8005da2:	801a      	strh	r2, [r3, #0]
			adc_values[1]=	 (4095- adc_temp1[1])<<4;
 8005da4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005da8:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8005dac:	330f      	adds	r3, #15
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	011b      	lsls	r3, r3, #4
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	4b6c      	ldr	r3, [pc, #432]	; (8005f68 <main+0x87c>)
 8005db6:	805a      	strh	r2, [r3, #2]
			adc_values[2]=	 (4095-adc_temp1[2])<<4;
 8005db8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005dbc:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8005dc0:	330f      	adds	r3, #15
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	011b      	lsls	r3, r3, #4
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	4b67      	ldr	r3, [pc, #412]	; (8005f68 <main+0x87c>)
 8005dca:	809a      	strh	r2, [r3, #4]
			//  adc_values[2]=	  adc_temp1[2]>>7;

			loop_counter=0;
 8005dcc:	4b67      	ldr	r3, [pc, #412]	; (8005f6c <main+0x880>)
 8005dce:	2200      	movs	r2, #0
 8005dd0:	701a      	strb	r2, [r3, #0]
		}

		if ((seq.pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 8005dd2:	4b67      	ldr	r3, [pc, #412]	; (8005f70 <main+0x884>)
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	2b07      	cmp	r3, #7
 8005dd8:	d106      	bne.n	8005de8 <main+0x6fc>
 8005dda:	4b66      	ldr	r3, [pc, #408]	; (8005f74 <main+0x888>)
 8005ddc:	881b      	ldrh	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d102      	bne.n	8005de8 <main+0x6fc>
 8005de2:	4b64      	ldr	r3, [pc, #400]	; (8005f74 <main+0x888>)
 8005de4:	2201      	movs	r2, #1
 8005de6:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,(seq.pos & 1)); // easy skip ?
 8005de8:	4b61      	ldr	r3, [pc, #388]	; (8005f70 <main+0x884>)
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	461a      	mov	r2, r3
 8005df4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005df8:	485f      	ldr	r0, [pc, #380]	; (8005f78 <main+0x88c>)
 8005dfa:	f003 f93d 	bl	8009078 <HAL_GPIO_WritePin>
	//	adc_flag=0;
		if (adc_flag) {     //  only for sending out  , poor quality
 8005dfe:	4b5f      	ldr	r3, [pc, #380]	; (8005f7c <main+0x890>)
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d06c      	beq.n	8005ee0 <main+0x7f4>

		    if (adc_playback_position>1020) adc_playback_position=0;  // nudge
 8005e06:	4b5e      	ldr	r3, [pc, #376]	; (8005f80 <main+0x894>)
 8005e08:	881b      	ldrh	r3, [r3, #0]
 8005e0a:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8005e0e:	d902      	bls.n	8005e16 <main+0x72a>
 8005e10:	4b5b      	ldr	r3, [pc, #364]	; (8005f80 <main+0x894>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	801a      	strh	r2, [r3, #0]

		//    adc_playback_position=(adc_playback_position+512)&1023;
			uint16_t    adc_page=0; ;
 8005e16:	2300      	movs	r3, #0
 8005e18:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
			if		(adc_flag==1)	  	{	adc_page=0;			}	//dma start ,needs this and adc start ,set sampling time
 8005e1c:	4b57      	ldr	r3, [pc, #348]	; (8005f7c <main+0x890>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d102      	bne.n	8005e2a <main+0x73e>
 8005e24:	2300      	movs	r3, #0
 8005e26:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
			if		(adc_flag==2)	  	{	adc_page=1536; }
 8005e2a:	4b54      	ldr	r3, [pc, #336]	; (8005f7c <main+0x890>)
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d103      	bne.n	8005e3a <main+0x74e>
 8005e32:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005e36:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82



			uint16_t    adc_convert_count;
			uint16_t    adc_convert_temp;
			for (i=0;i<512;i++){
 8005e3a:	4b52      	ldr	r3, [pc, #328]	; (8005f84 <main+0x898>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	801a      	strh	r2, [r3, #0]
 8005e40:	e038      	b.n	8005eb4 <main+0x7c8>
				adc_convert_count=(i*3)+adc_page;
 8005e42:	4b50      	ldr	r3, [pc, #320]	; (8005f84 <main+0x898>)
 8005e44:	881b      	ldrh	r3, [r3, #0]
 8005e46:	461a      	mov	r2, r3
 8005e48:	0052      	lsls	r2, r2, #1
 8005e4a:	4413      	add	r3, r2
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8005e52:	4413      	add	r3, r2
 8005e54:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

				adc_convert_temp=adc_source[adc_convert_count]+adc_source[adc_convert_count+1]+adc_source[adc_convert_count+2]; //  17 470 khz  ~
 8005e58:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8005e5c:	4a4a      	ldr	r2, [pc, #296]	; (8005f88 <main+0x89c>)
 8005e5e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005e62:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8005e66:	3301      	adds	r3, #1
 8005e68:	4947      	ldr	r1, [pc, #284]	; (8005f88 <main+0x89c>)
 8005e6a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005e6e:	4413      	add	r3, r2
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8005e76:	3302      	adds	r3, #2
 8005e78:	4943      	ldr	r1, [pc, #268]	; (8005f88 <main+0x89c>)
 8005e7a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
				adc_convert_temp=(adc_convert_temp/3);   // dc offset nearly spot on
 8005e84:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8005e88:	4a40      	ldr	r2, [pc, #256]	; (8005f8c <main+0x8a0>)
 8005e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e8e:	085b      	lsrs	r3, r3, #1
 8005e90:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
				input_holder[i]=adc_convert_temp<<4;
 8005e94:	4b3b      	ldr	r3, [pc, #236]	; (8005f84 <main+0x898>)
 8005e96:	881b      	ldrh	r3, [r3, #0]
 8005e98:	461a      	mov	r2, r3
 8005e9a:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8005e9e:	011b      	lsls	r3, r3, #4
 8005ea0:	b299      	uxth	r1, r3
 8005ea2:	4b3b      	ldr	r3, [pc, #236]	; (8005f90 <main+0x8a4>)
 8005ea4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i=0;i<512;i++){
 8005ea8:	4b36      	ldr	r3, [pc, #216]	; (8005f84 <main+0x898>)
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	3301      	adds	r3, #1
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	4b34      	ldr	r3, [pc, #208]	; (8005f84 <main+0x898>)
 8005eb2:	801a      	strh	r2, [r3, #0]
 8005eb4:	4b33      	ldr	r3, [pc, #204]	; (8005f84 <main+0x898>)
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ebc:	d3c1      	bcc.n	8005e42 <main+0x756>
				// maybe start with signed

				//	input_holder[i]=adc_source[(i*3)+adc_page];

			}
			if (sampler.record_enable)  {sampler.RAM_free=1;  loop_counter2=111;   sampler_ram_record(); }  //stop loop counter2
 8005ebe:	4b26      	ldr	r3, [pc, #152]	; (8005f58 <main+0x86c>)
 8005ec0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d008      	beq.n	8005eda <main+0x7ee>
 8005ec8:	4b23      	ldr	r3, [pc, #140]	; (8005f58 <main+0x86c>)
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8005ed0:	4b23      	ldr	r3, [pc, #140]	; (8005f60 <main+0x874>)
 8005ed2:	226f      	movs	r2, #111	; 0x6f
 8005ed4:	601a      	str	r2, [r3, #0]
 8005ed6:	f7ff fb0b 	bl	80054f0 <sampler_ram_record>

			adc_flag=0;
 8005eda:	4b28      	ldr	r3, [pc, #160]	; (8005f7c <main+0x890>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	701a      	strb	r2, [r3, #0]
		}


		if ((sample_point>512)&&( sample_pointD==512)) bank_write=1;
 8005ee0:	4b2c      	ldr	r3, [pc, #176]	; (8005f94 <main+0x8a8>)
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eea:	d90a      	bls.n	8005f02 <main+0x816>
 8005eec:	4b2a      	ldr	r3, [pc, #168]	; (8005f98 <main+0x8ac>)
 8005eee:	881b      	ldrh	r3, [r3, #0]
 8005ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ef4:	d105      	bne.n	8005f02 <main+0x816>
 8005ef6:	4b29      	ldr	r3, [pc, #164]	; (8005f9c <main+0x8b0>)
 8005ef8:	2201      	movs	r2, #1
 8005efa:	801a      	strh	r2, [r3, #0]
		while  (bank_write)                         {							// wait for adc , priority
 8005efc:	e001      	b.n	8005f02 <main+0x816>

			sampling();
 8005efe:	f7fc f9b3 	bl	8002268 <sampling>
		while  (bank_write)                         {							// wait for adc , priority
 8005f02:	4b26      	ldr	r3, [pc, #152]	; (8005f9c <main+0x8b0>)
 8005f04:	881b      	ldrh	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1f9      	bne.n	8005efe <main+0x812>

	  	}   // should trigger this after adc reads also reset sample_point here

		if((millis-millis_stored)>5) {   // run gfx_line
 8005f0a:	4b25      	ldr	r3, [pc, #148]	; (8005fa0 <main+0x8b4>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	2b05      	cmp	r3, #5
 8005f14:	f67f ac09 	bls.w	800572a <main+0x3e>

		  LCD_Info_feedback();
 8005f18:	f7fe ff28 	bl	8004d6c <LCD_Info_feedback>
		    uint8_t up_counter2=0;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
					while ((up_counter2<8) && (init > 5) )								{
 8005f22:	e00c      	b.n	8005f3e <main+0x852>

					gfx_line_fill();   // just run 8 times between sampling , dont need more
 8005f24:	f7fe fcaa 	bl	800487c <gfx_line_fill>
					up_counter2++;
 8005f28:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
					loop_counter++;
 8005f32:	4b0e      	ldr	r3, [pc, #56]	; (8005f6c <main+0x880>)
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	3301      	adds	r3, #1
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	4b0c      	ldr	r3, [pc, #48]	; (8005f6c <main+0x880>)
 8005f3c:	701a      	strb	r2, [r3, #0]
					while ((up_counter2<8) && (init > 5) )								{
 8005f3e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8005f42:	2b07      	cmp	r3, #7
 8005f44:	d803      	bhi.n	8005f4e <main+0x862>
 8005f46:	4b17      	ldr	r3, [pc, #92]	; (8005fa4 <main+0x8b8>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	2b05      	cmp	r3, #5
 8005f4c:	d8ea      	bhi.n	8005f24 <main+0x838>
					}   millis_stored=millis;
 8005f4e:	4a14      	ldr	r2, [pc, #80]	; (8005fa0 <main+0x8b4>)
 8005f50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f52:	6013      	str	r3, [r2, #0]
  {
 8005f54:	f7ff bbe9 	b.w	800572a <main+0x3e>
 8005f58:	20008edc 	.word	0x20008edc
 8005f5c:	200001b8 	.word	0x200001b8
 8005f60:	2000bf30 	.word	0x2000bf30
 8005f64:	200103cc 	.word	0x200103cc
 8005f68:	20008e0c 	.word	0x20008e0c
 8005f6c:	200096da 	.word	0x200096da
 8005f70:	2000d0bc 	.word	0x2000d0bc
 8005f74:	2000bf1c 	.word	0x2000bf1c
 8005f78:	40020800 	.word	0x40020800
 8005f7c:	2000cc6c 	.word	0x2000cc6c
 8005f80:	2001039a 	.word	0x2001039a
 8005f84:	200096de 	.word	0x200096de
 8005f88:	2000a6f0 	.word	0x2000a6f0
 8005f8c:	aaaaaaab 	.word	0xaaaaaaab
 8005f90:	2000c86c 	.word	0x2000c86c
 8005f94:	2000a6e4 	.word	0x2000a6e4
 8005f98:	2000a6ea 	.word	0x2000a6ea
 8005f9c:	20008e16 	.word	0x20008e16
 8005fa0:	2000ff48 	.word	0x2000ff48
 8005fa4:	2000bf25 	.word	0x2000bf25

08005fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b094      	sub	sp, #80	; 0x50
 8005fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005fae:	f107 0320 	add.w	r3, r7, #32
 8005fb2:	2230      	movs	r2, #48	; 0x30
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f007 fa42 	bl	800d440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005fbc:	f107 030c 	add.w	r3, r7, #12
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	601a      	str	r2, [r3, #0]
 8005fc4:	605a      	str	r2, [r3, #4]
 8005fc6:	609a      	str	r2, [r3, #8]
 8005fc8:	60da      	str	r2, [r3, #12]
 8005fca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005fcc:	2300      	movs	r3, #0
 8005fce:	60bb      	str	r3, [r7, #8]
 8005fd0:	4b28      	ldr	r3, [pc, #160]	; (8006074 <SystemClock_Config+0xcc>)
 8005fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd4:	4a27      	ldr	r2, [pc, #156]	; (8006074 <SystemClock_Config+0xcc>)
 8005fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fda:	6413      	str	r3, [r2, #64]	; 0x40
 8005fdc:	4b25      	ldr	r3, [pc, #148]	; (8006074 <SystemClock_Config+0xcc>)
 8005fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fe4:	60bb      	str	r3, [r7, #8]
 8005fe6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005fe8:	2300      	movs	r3, #0
 8005fea:	607b      	str	r3, [r7, #4]
 8005fec:	4b22      	ldr	r3, [pc, #136]	; (8006078 <SystemClock_Config+0xd0>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a21      	ldr	r2, [pc, #132]	; (8006078 <SystemClock_Config+0xd0>)
 8005ff2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ff6:	6013      	str	r3, [r2, #0]
 8005ff8:	4b1f      	ldr	r3, [pc, #124]	; (8006078 <SystemClock_Config+0xd0>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006000:	607b      	str	r3, [r7, #4]
 8006002:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006004:	2302      	movs	r3, #2
 8006006:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006008:	2301      	movs	r3, #1
 800600a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800600c:	2310      	movs	r3, #16
 800600e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006010:	2302      	movs	r3, #2
 8006012:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006014:	2300      	movs	r3, #0
 8006016:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006018:	2308      	movs	r3, #8
 800601a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800601c:	2364      	movs	r3, #100	; 0x64
 800601e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006020:	2302      	movs	r3, #2
 8006022:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006024:	2304      	movs	r3, #4
 8006026:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006028:	f107 0320 	add.w	r3, r7, #32
 800602c:	4618      	mov	r0, r3
 800602e:	f004 f815 	bl	800a05c <HAL_RCC_OscConfig>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d001      	beq.n	800603c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006038:	f000 fc78 	bl	800692c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800603c:	230f      	movs	r3, #15
 800603e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006040:	2302      	movs	r3, #2
 8006042:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006044:	2300      	movs	r3, #0
 8006046:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800604c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800604e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006052:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8006054:	f107 030c 	add.w	r3, r7, #12
 8006058:	2103      	movs	r1, #3
 800605a:	4618      	mov	r0, r3
 800605c:	f004 fa76 	bl	800a54c <HAL_RCC_ClockConfig>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8006066:	f000 fc61 	bl	800692c <Error_Handler>
  }
}
 800606a:	bf00      	nop
 800606c:	3750      	adds	r7, #80	; 0x50
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	40023800 	.word	0x40023800
 8006078:	40007000 	.word	0x40007000

0800607c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b08c      	sub	sp, #48	; 0x30
 8006080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006082:	f107 0320 	add.w	r3, r7, #32
 8006086:	2200      	movs	r2, #0
 8006088:	601a      	str	r2, [r3, #0]
 800608a:	605a      	str	r2, [r3, #4]
 800608c:	609a      	str	r2, [r3, #8]
 800608e:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8006090:	463b      	mov	r3, r7
 8006092:	2220      	movs	r2, #32
 8006094:	2100      	movs	r1, #0
 8006096:	4618      	mov	r0, r3
 8006098:	f007 f9d2 	bl	800d440 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800609c:	4b3e      	ldr	r3, [pc, #248]	; (8006198 <MX_ADC1_Init+0x11c>)
 800609e:	4a3f      	ldr	r2, [pc, #252]	; (800619c <MX_ADC1_Init+0x120>)
 80060a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80060a2:	4b3d      	ldr	r3, [pc, #244]	; (8006198 <MX_ADC1_Init+0x11c>)
 80060a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80060a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80060aa:	4b3b      	ldr	r3, [pc, #236]	; (8006198 <MX_ADC1_Init+0x11c>)
 80060ac:	2200      	movs	r2, #0
 80060ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80060b0:	4b39      	ldr	r3, [pc, #228]	; (8006198 <MX_ADC1_Init+0x11c>)
 80060b2:	2201      	movs	r2, #1
 80060b4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80060b6:	4b38      	ldr	r3, [pc, #224]	; (8006198 <MX_ADC1_Init+0x11c>)
 80060b8:	2201      	movs	r2, #1
 80060ba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80060bc:	4b36      	ldr	r3, [pc, #216]	; (8006198 <MX_ADC1_Init+0x11c>)
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80060c4:	4b34      	ldr	r3, [pc, #208]	; (8006198 <MX_ADC1_Init+0x11c>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80060ca:	4b33      	ldr	r3, [pc, #204]	; (8006198 <MX_ADC1_Init+0x11c>)
 80060cc:	4a34      	ldr	r2, [pc, #208]	; (80061a0 <MX_ADC1_Init+0x124>)
 80060ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80060d0:	4b31      	ldr	r3, [pc, #196]	; (8006198 <MX_ADC1_Init+0x11c>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80060d6:	4b30      	ldr	r3, [pc, #192]	; (8006198 <MX_ADC1_Init+0x11c>)
 80060d8:	2201      	movs	r2, #1
 80060da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80060dc:	4b2e      	ldr	r3, [pc, #184]	; (8006198 <MX_ADC1_Init+0x11c>)
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80060e4:	4b2c      	ldr	r3, [pc, #176]	; (8006198 <MX_ADC1_Init+0x11c>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80060ea:	482b      	ldr	r0, [pc, #172]	; (8006198 <MX_ADC1_Init+0x11c>)
 80060ec:	f001 f8de 	bl	80072ac <HAL_ADC_Init>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 80060f6:	f000 fc19 	bl	800692c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80060fa:	2309      	movs	r3, #9
 80060fc:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 80060fe:	2301      	movs	r3, #1
 8006100:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8006102:	2306      	movs	r3, #6
 8006104:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006106:	f107 0320 	add.w	r3, r7, #32
 800610a:	4619      	mov	r1, r3
 800610c:	4822      	ldr	r0, [pc, #136]	; (8006198 <MX_ADC1_Init+0x11c>)
 800610e:	f001 fba5 	bl	800785c <HAL_ADC_ConfigChannel>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8006118:	f000 fc08 	bl	800692c <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 800611c:	2300      	movs	r3, #0
 800611e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8006120:	2301      	movs	r3, #1
 8006122:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8006124:	2303      	movs	r3, #3
 8006126:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_56CYCLES;
 8006128:	2303      	movs	r3, #3
 800612a:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 800612c:	2300      	movs	r3, #0
 800612e:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8006130:	4b1c      	ldr	r3, [pc, #112]	; (80061a4 <MX_ADC1_Init+0x128>)
 8006132:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8006134:	2300      	movs	r3, #0
 8006136:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8006138:	2300      	movs	r3, #0
 800613a:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800613c:	2300      	movs	r3, #0
 800613e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8006140:	463b      	mov	r3, r7
 8006142:	4619      	mov	r1, r3
 8006144:	4814      	ldr	r0, [pc, #80]	; (8006198 <MX_ADC1_Init+0x11c>)
 8006146:	f001 ff87 	bl	8008058 <HAL_ADCEx_InjectedConfigChannel>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8006150:	f000 fbec 	bl	800692c <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8006154:	2302      	movs	r3, #2
 8006156:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8006158:	2302      	movs	r3, #2
 800615a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800615c:	463b      	mov	r3, r7
 800615e:	4619      	mov	r1, r3
 8006160:	480d      	ldr	r0, [pc, #52]	; (8006198 <MX_ADC1_Init+0x11c>)
 8006162:	f001 ff79 	bl	8008058 <HAL_ADCEx_InjectedConfigChannel>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d001      	beq.n	8006170 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 800616c:	f000 fbde 	bl	800692c <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_8;
 8006170:	2308      	movs	r3, #8
 8006172:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 8006174:	2303      	movs	r3, #3
 8006176:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8006178:	2300      	movs	r3, #0
 800617a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800617c:	463b      	mov	r3, r7
 800617e:	4619      	mov	r1, r3
 8006180:	4805      	ldr	r0, [pc, #20]	; (8006198 <MX_ADC1_Init+0x11c>)
 8006182:	f001 ff69 	bl	8008058 <HAL_ADCEx_InjectedConfigChannel>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d001      	beq.n	8006190 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 800618c:	f000 fbce 	bl	800692c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006190:	bf00      	nop
 8006192:	3730      	adds	r7, #48	; 0x30
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	200103cc 	.word	0x200103cc
 800619c:	40012000 	.word	0x40012000
 80061a0:	0f000001 	.word	0x0f000001
 80061a4:	000f0001 	.word	0x000f0001

080061a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80061ac:	4b12      	ldr	r3, [pc, #72]	; (80061f8 <MX_I2C2_Init+0x50>)
 80061ae:	4a13      	ldr	r2, [pc, #76]	; (80061fc <MX_I2C2_Init+0x54>)
 80061b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80061b2:	4b11      	ldr	r3, [pc, #68]	; (80061f8 <MX_I2C2_Init+0x50>)
 80061b4:	4a12      	ldr	r2, [pc, #72]	; (8006200 <MX_I2C2_Init+0x58>)
 80061b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80061b8:	4b0f      	ldr	r3, [pc, #60]	; (80061f8 <MX_I2C2_Init+0x50>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80061be:	4b0e      	ldr	r3, [pc, #56]	; (80061f8 <MX_I2C2_Init+0x50>)
 80061c0:	2200      	movs	r2, #0
 80061c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80061c4:	4b0c      	ldr	r3, [pc, #48]	; (80061f8 <MX_I2C2_Init+0x50>)
 80061c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80061ca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80061cc:	4b0a      	ldr	r3, [pc, #40]	; (80061f8 <MX_I2C2_Init+0x50>)
 80061ce:	2200      	movs	r2, #0
 80061d0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80061d2:	4b09      	ldr	r3, [pc, #36]	; (80061f8 <MX_I2C2_Init+0x50>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80061d8:	4b07      	ldr	r3, [pc, #28]	; (80061f8 <MX_I2C2_Init+0x50>)
 80061da:	2200      	movs	r2, #0
 80061dc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80061de:	4b06      	ldr	r3, [pc, #24]	; (80061f8 <MX_I2C2_Init+0x50>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80061e4:	4804      	ldr	r0, [pc, #16]	; (80061f8 <MX_I2C2_Init+0x50>)
 80061e6:	f002 ff79 	bl	80090dc <HAL_I2C_Init>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d001      	beq.n	80061f4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80061f0:	f000 fb9c 	bl	800692c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80061f4:	bf00      	nop
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	20010474 	.word	0x20010474
 80061fc:	40005800 	.word	0x40005800
 8006200:	000186a0 	.word	0x000186a0

08006204 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006208:	4b17      	ldr	r3, [pc, #92]	; (8006268 <MX_SPI1_Init+0x64>)
 800620a:	4a18      	ldr	r2, [pc, #96]	; (800626c <MX_SPI1_Init+0x68>)
 800620c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800620e:	4b16      	ldr	r3, [pc, #88]	; (8006268 <MX_SPI1_Init+0x64>)
 8006210:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006214:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006216:	4b14      	ldr	r3, [pc, #80]	; (8006268 <MX_SPI1_Init+0x64>)
 8006218:	2200      	movs	r2, #0
 800621a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800621c:	4b12      	ldr	r3, [pc, #72]	; (8006268 <MX_SPI1_Init+0x64>)
 800621e:	2200      	movs	r2, #0
 8006220:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006222:	4b11      	ldr	r3, [pc, #68]	; (8006268 <MX_SPI1_Init+0x64>)
 8006224:	2200      	movs	r2, #0
 8006226:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006228:	4b0f      	ldr	r3, [pc, #60]	; (8006268 <MX_SPI1_Init+0x64>)
 800622a:	2200      	movs	r2, #0
 800622c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800622e:	4b0e      	ldr	r3, [pc, #56]	; (8006268 <MX_SPI1_Init+0x64>)
 8006230:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006234:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006236:	4b0c      	ldr	r3, [pc, #48]	; (8006268 <MX_SPI1_Init+0x64>)
 8006238:	2200      	movs	r2, #0
 800623a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800623c:	4b0a      	ldr	r3, [pc, #40]	; (8006268 <MX_SPI1_Init+0x64>)
 800623e:	2200      	movs	r2, #0
 8006240:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006242:	4b09      	ldr	r3, [pc, #36]	; (8006268 <MX_SPI1_Init+0x64>)
 8006244:	2200      	movs	r2, #0
 8006246:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006248:	4b07      	ldr	r3, [pc, #28]	; (8006268 <MX_SPI1_Init+0x64>)
 800624a:	2200      	movs	r2, #0
 800624c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800624e:	4b06      	ldr	r3, [pc, #24]	; (8006268 <MX_SPI1_Init+0x64>)
 8006250:	220a      	movs	r2, #10
 8006252:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006254:	4804      	ldr	r0, [pc, #16]	; (8006268 <MX_SPI1_Init+0x64>)
 8006256:	f004 fb59 	bl	800a90c <HAL_SPI_Init>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d001      	beq.n	8006264 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8006260:	f000 fb64 	bl	800692c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006264:	bf00      	nop
 8006266:	bd80      	pop	{r7, pc}
 8006268:	200104c8 	.word	0x200104c8
 800626c:	40013000 	.word	0x40013000

08006270 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006274:	4b17      	ldr	r3, [pc, #92]	; (80062d4 <MX_SPI2_Init+0x64>)
 8006276:	4a18      	ldr	r2, [pc, #96]	; (80062d8 <MX_SPI2_Init+0x68>)
 8006278:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800627a:	4b16      	ldr	r3, [pc, #88]	; (80062d4 <MX_SPI2_Init+0x64>)
 800627c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006280:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006282:	4b14      	ldr	r3, [pc, #80]	; (80062d4 <MX_SPI2_Init+0x64>)
 8006284:	2200      	movs	r2, #0
 8006286:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006288:	4b12      	ldr	r3, [pc, #72]	; (80062d4 <MX_SPI2_Init+0x64>)
 800628a:	2200      	movs	r2, #0
 800628c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800628e:	4b11      	ldr	r3, [pc, #68]	; (80062d4 <MX_SPI2_Init+0x64>)
 8006290:	2200      	movs	r2, #0
 8006292:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006294:	4b0f      	ldr	r3, [pc, #60]	; (80062d4 <MX_SPI2_Init+0x64>)
 8006296:	2200      	movs	r2, #0
 8006298:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800629a:	4b0e      	ldr	r3, [pc, #56]	; (80062d4 <MX_SPI2_Init+0x64>)
 800629c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062a0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80062a2:	4b0c      	ldr	r3, [pc, #48]	; (80062d4 <MX_SPI2_Init+0x64>)
 80062a4:	2230      	movs	r2, #48	; 0x30
 80062a6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80062a8:	4b0a      	ldr	r3, [pc, #40]	; (80062d4 <MX_SPI2_Init+0x64>)
 80062aa:	2200      	movs	r2, #0
 80062ac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80062ae:	4b09      	ldr	r3, [pc, #36]	; (80062d4 <MX_SPI2_Init+0x64>)
 80062b0:	2200      	movs	r2, #0
 80062b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062b4:	4b07      	ldr	r3, [pc, #28]	; (80062d4 <MX_SPI2_Init+0x64>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80062ba:	4b06      	ldr	r3, [pc, #24]	; (80062d4 <MX_SPI2_Init+0x64>)
 80062bc:	220a      	movs	r2, #10
 80062be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80062c0:	4804      	ldr	r0, [pc, #16]	; (80062d4 <MX_SPI2_Init+0x64>)
 80062c2:	f004 fb23 	bl	800a90c <HAL_SPI_Init>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80062cc:	f000 fb2e 	bl	800692c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80062d0:	bf00      	nop
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	20010520 	.word	0x20010520
 80062d8:	40003800 	.word	0x40003800

080062dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b08c      	sub	sp, #48	; 0x30
 80062e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80062e2:	f107 030c 	add.w	r3, r7, #12
 80062e6:	2224      	movs	r2, #36	; 0x24
 80062e8:	2100      	movs	r1, #0
 80062ea:	4618      	mov	r0, r3
 80062ec:	f007 f8a8 	bl	800d440 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80062f0:	1d3b      	adds	r3, r7, #4
 80062f2:	2200      	movs	r2, #0
 80062f4:	601a      	str	r2, [r3, #0]
 80062f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80062f8:	4b21      	ldr	r3, [pc, #132]	; (8006380 <MX_TIM2_Init+0xa4>)
 80062fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80062fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8006300:	4b1f      	ldr	r3, [pc, #124]	; (8006380 <MX_TIM2_Init+0xa4>)
 8006302:	2200      	movs	r2, #0
 8006304:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006306:	4b1e      	ldr	r3, [pc, #120]	; (8006380 <MX_TIM2_Init+0xa4>)
 8006308:	2200      	movs	r2, #0
 800630a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800630c:	4b1c      	ldr	r3, [pc, #112]	; (8006380 <MX_TIM2_Init+0xa4>)
 800630e:	f04f 32ff 	mov.w	r2, #4294967295
 8006312:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8006314:	4b1a      	ldr	r3, [pc, #104]	; (8006380 <MX_TIM2_Init+0xa4>)
 8006316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800631a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800631c:	4b18      	ldr	r3, [pc, #96]	; (8006380 <MX_TIM2_Init+0xa4>)
 800631e:	2200      	movs	r2, #0
 8006320:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8006322:	2301      	movs	r3, #1
 8006324:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8006326:	2302      	movs	r3, #2
 8006328:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800632a:	2301      	movs	r3, #1
 800632c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800632e:	2300      	movs	r3, #0
 8006330:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8006332:	2302      	movs	r3, #2
 8006334:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8006336:	2302      	movs	r3, #2
 8006338:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800633a:	2301      	movs	r3, #1
 800633c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800633e:	2300      	movs	r3, #0
 8006340:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8006342:	2302      	movs	r3, #2
 8006344:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8006346:	f107 030c 	add.w	r3, r7, #12
 800634a:	4619      	mov	r1, r3
 800634c:	480c      	ldr	r0, [pc, #48]	; (8006380 <MX_TIM2_Init+0xa4>)
 800634e:	f005 fd23 	bl	800bd98 <HAL_TIM_Encoder_Init>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8006358:	f000 fae8 	bl	800692c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800635c:	2300      	movs	r3, #0
 800635e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006360:	2300      	movs	r3, #0
 8006362:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006364:	1d3b      	adds	r3, r7, #4
 8006366:	4619      	mov	r1, r3
 8006368:	4805      	ldr	r0, [pc, #20]	; (8006380 <MX_TIM2_Init+0xa4>)
 800636a:	f006 fb9d 	bl	800caa8 <HAL_TIMEx_MasterConfigSynchronization>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8006374:	f000 fada 	bl	800692c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006378:	bf00      	nop
 800637a:	3730      	adds	r7, #48	; 0x30
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	20010698 	.word	0x20010698

08006384 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b08e      	sub	sp, #56	; 0x38
 8006388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800638a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800638e:	2200      	movs	r2, #0
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	605a      	str	r2, [r3, #4]
 8006394:	609a      	str	r2, [r3, #8]
 8006396:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006398:	f107 0320 	add.w	r3, r7, #32
 800639c:	2200      	movs	r2, #0
 800639e:	601a      	str	r2, [r3, #0]
 80063a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80063a2:	1d3b      	adds	r3, r7, #4
 80063a4:	2200      	movs	r2, #0
 80063a6:	601a      	str	r2, [r3, #0]
 80063a8:	605a      	str	r2, [r3, #4]
 80063aa:	609a      	str	r2, [r3, #8]
 80063ac:	60da      	str	r2, [r3, #12]
 80063ae:	611a      	str	r2, [r3, #16]
 80063b0:	615a      	str	r2, [r3, #20]
 80063b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80063b4:	4b32      	ldr	r3, [pc, #200]	; (8006480 <MX_TIM3_Init+0xfc>)
 80063b6:	4a33      	ldr	r2, [pc, #204]	; (8006484 <MX_TIM3_Init+0x100>)
 80063b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80063ba:	4b31      	ldr	r3, [pc, #196]	; (8006480 <MX_TIM3_Init+0xfc>)
 80063bc:	2200      	movs	r2, #0
 80063be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80063c0:	4b2f      	ldr	r3, [pc, #188]	; (8006480 <MX_TIM3_Init+0xfc>)
 80063c2:	2200      	movs	r2, #0
 80063c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2808;
 80063c6:	4b2e      	ldr	r3, [pc, #184]	; (8006480 <MX_TIM3_Init+0xfc>)
 80063c8:	f640 22f8 	movw	r2, #2808	; 0xaf8
 80063cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80063ce:	4b2c      	ldr	r3, [pc, #176]	; (8006480 <MX_TIM3_Init+0xfc>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80063d4:	4b2a      	ldr	r3, [pc, #168]	; (8006480 <MX_TIM3_Init+0xfc>)
 80063d6:	2280      	movs	r2, #128	; 0x80
 80063d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80063da:	4829      	ldr	r0, [pc, #164]	; (8006480 <MX_TIM3_Init+0xfc>)
 80063dc:	f005 fa3e 	bl	800b85c <HAL_TIM_Base_Init>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80063e6:	f000 faa1 	bl	800692c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80063ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80063f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80063f4:	4619      	mov	r1, r3
 80063f6:	4822      	ldr	r0, [pc, #136]	; (8006480 <MX_TIM3_Init+0xfc>)
 80063f8:	f005 ff9a 	bl	800c330 <HAL_TIM_ConfigClockSource>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d001      	beq.n	8006406 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8006402:	f000 fa93 	bl	800692c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006406:	481e      	ldr	r0, [pc, #120]	; (8006480 <MX_TIM3_Init+0xfc>)
 8006408:	f005 fbbc 	bl	800bb84 <HAL_TIM_PWM_Init>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8006412:	f000 fa8b 	bl	800692c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006416:	2300      	movs	r3, #0
 8006418:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800641a:	2300      	movs	r3, #0
 800641c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800641e:	f107 0320 	add.w	r3, r7, #32
 8006422:	4619      	mov	r1, r3
 8006424:	4816      	ldr	r0, [pc, #88]	; (8006480 <MX_TIM3_Init+0xfc>)
 8006426:	f006 fb3f 	bl	800caa8 <HAL_TIMEx_MasterConfigSynchronization>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8006430:	f000 fa7c 	bl	800692c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006434:	2360      	movs	r3, #96	; 0x60
 8006436:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006438:	2300      	movs	r3, #0
 800643a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800643c:	2300      	movs	r3, #0
 800643e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8006440:	2304      	movs	r3, #4
 8006442:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006444:	1d3b      	adds	r3, r7, #4
 8006446:	2200      	movs	r2, #0
 8006448:	4619      	mov	r1, r3
 800644a:	480d      	ldr	r0, [pc, #52]	; (8006480 <MX_TIM3_Init+0xfc>)
 800644c:	f005 feae 	bl	800c1ac <HAL_TIM_PWM_ConfigChannel>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8006456:	f000 fa69 	bl	800692c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800645a:	1d3b      	adds	r3, r7, #4
 800645c:	2204      	movs	r2, #4
 800645e:	4619      	mov	r1, r3
 8006460:	4807      	ldr	r0, [pc, #28]	; (8006480 <MX_TIM3_Init+0xfc>)
 8006462:	f005 fea3 	bl	800c1ac <HAL_TIM_PWM_ConfigChannel>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800646c:	f000 fa5e 	bl	800692c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006470:	4803      	ldr	r0, [pc, #12]	; (8006480 <MX_TIM3_Init+0xfc>)
 8006472:	f000 fd4d 	bl	8006f10 <HAL_TIM_MspPostInit>

}
 8006476:	bf00      	nop
 8006478:	3738      	adds	r7, #56	; 0x38
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	200106e0 	.word	0x200106e0
 8006484:	40000400 	.word	0x40000400

08006488 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b08c      	sub	sp, #48	; 0x30
 800648c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800648e:	f107 030c 	add.w	r3, r7, #12
 8006492:	2224      	movs	r2, #36	; 0x24
 8006494:	2100      	movs	r1, #0
 8006496:	4618      	mov	r0, r3
 8006498:	f006 ffd2 	bl	800d440 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800649c:	1d3b      	adds	r3, r7, #4
 800649e:	2200      	movs	r2, #0
 80064a0:	601a      	str	r2, [r3, #0]
 80064a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80064a4:	4b21      	ldr	r3, [pc, #132]	; (800652c <MX_TIM4_Init+0xa4>)
 80064a6:	4a22      	ldr	r2, [pc, #136]	; (8006530 <MX_TIM4_Init+0xa8>)
 80064a8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80064aa:	4b20      	ldr	r3, [pc, #128]	; (800652c <MX_TIM4_Init+0xa4>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064b0:	4b1e      	ldr	r3, [pc, #120]	; (800652c <MX_TIM4_Init+0xa4>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80064b6:	4b1d      	ldr	r3, [pc, #116]	; (800652c <MX_TIM4_Init+0xa4>)
 80064b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80064be:	4b1b      	ldr	r3, [pc, #108]	; (800652c <MX_TIM4_Init+0xa4>)
 80064c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064c4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064c6:	4b19      	ldr	r3, [pc, #100]	; (800652c <MX_TIM4_Init+0xa4>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 80064cc:	2302      	movs	r3, #2
 80064ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80064d0:	2302      	movs	r3, #2
 80064d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80064d4:	2301      	movs	r3, #1
 80064d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80064d8:	2300      	movs	r3, #0
 80064da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 4;
 80064dc:	2304      	movs	r3, #4
 80064de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80064e0:	2302      	movs	r3, #2
 80064e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80064e4:	2301      	movs	r3, #1
 80064e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80064e8:	2300      	movs	r3, #0
 80064ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 4;
 80064ec:	2304      	movs	r3, #4
 80064ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80064f0:	f107 030c 	add.w	r3, r7, #12
 80064f4:	4619      	mov	r1, r3
 80064f6:	480d      	ldr	r0, [pc, #52]	; (800652c <MX_TIM4_Init+0xa4>)
 80064f8:	f005 fc4e 	bl	800bd98 <HAL_TIM_Encoder_Init>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d001      	beq.n	8006506 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8006502:	f000 fa13 	bl	800692c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006506:	2300      	movs	r3, #0
 8006508:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800650a:	2300      	movs	r3, #0
 800650c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800650e:	1d3b      	adds	r3, r7, #4
 8006510:	4619      	mov	r1, r3
 8006512:	4806      	ldr	r0, [pc, #24]	; (800652c <MX_TIM4_Init+0xa4>)
 8006514:	f006 fac8 	bl	800caa8 <HAL_TIMEx_MasterConfigSynchronization>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800651e:	f000 fa05 	bl	800692c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8006522:	bf00      	nop
 8006524:	3730      	adds	r7, #48	; 0x30
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	20010728 	.word	0x20010728
 8006530:	40000800 	.word	0x40000800

08006534 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b088      	sub	sp, #32
 8006538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800653a:	1d3b      	adds	r3, r7, #4
 800653c:	2200      	movs	r2, #0
 800653e:	601a      	str	r2, [r3, #0]
 8006540:	605a      	str	r2, [r3, #4]
 8006542:	609a      	str	r2, [r3, #8]
 8006544:	60da      	str	r2, [r3, #12]
 8006546:	611a      	str	r2, [r3, #16]
 8006548:	615a      	str	r2, [r3, #20]
 800654a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800654c:	4b1c      	ldr	r3, [pc, #112]	; (80065c0 <MX_TIM10_Init+0x8c>)
 800654e:	4a1d      	ldr	r2, [pc, #116]	; (80065c4 <MX_TIM10_Init+0x90>)
 8006550:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4;
 8006552:	4b1b      	ldr	r3, [pc, #108]	; (80065c0 <MX_TIM10_Init+0x8c>)
 8006554:	2204      	movs	r2, #4
 8006556:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006558:	4b19      	ldr	r3, [pc, #100]	; (80065c0 <MX_TIM10_Init+0x8c>)
 800655a:	2200      	movs	r2, #0
 800655c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50000;
 800655e:	4b18      	ldr	r3, [pc, #96]	; (80065c0 <MX_TIM10_Init+0x8c>)
 8006560:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006564:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006566:	4b16      	ldr	r3, [pc, #88]	; (80065c0 <MX_TIM10_Init+0x8c>)
 8006568:	2200      	movs	r2, #0
 800656a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800656c:	4b14      	ldr	r3, [pc, #80]	; (80065c0 <MX_TIM10_Init+0x8c>)
 800656e:	2280      	movs	r2, #128	; 0x80
 8006570:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006572:	4813      	ldr	r0, [pc, #76]	; (80065c0 <MX_TIM10_Init+0x8c>)
 8006574:	f005 f972 	bl	800b85c <HAL_TIM_Base_Init>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d001      	beq.n	8006582 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800657e:	f000 f9d5 	bl	800692c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 8006582:	480f      	ldr	r0, [pc, #60]	; (80065c0 <MX_TIM10_Init+0x8c>)
 8006584:	f005 faa5 	bl	800bad2 <HAL_TIM_OC_Init>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800658e:	f000 f9cd 	bl	800692c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8006592:	2300      	movs	r3, #0
 8006594:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006596:	2300      	movs	r3, #0
 8006598:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800659a:	2300      	movs	r3, #0
 800659c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800659e:	2300      	movs	r3, #0
 80065a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80065a2:	1d3b      	adds	r3, r7, #4
 80065a4:	2200      	movs	r2, #0
 80065a6:	4619      	mov	r1, r3
 80065a8:	4805      	ldr	r0, [pc, #20]	; (80065c0 <MX_TIM10_Init+0x8c>)
 80065aa:	f005 fda3 	bl	800c0f4 <HAL_TIM_OC_ConfigChannel>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d001      	beq.n	80065b8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80065b4:	f000 f9ba 	bl	800692c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80065b8:	bf00      	nop
 80065ba:	3720      	adds	r7, #32
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	20010770 	.word	0x20010770
 80065c4:	40014400 	.word	0x40014400

080065c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80065cc:	4b11      	ldr	r3, [pc, #68]	; (8006614 <MX_USART1_UART_Init+0x4c>)
 80065ce:	4a12      	ldr	r2, [pc, #72]	; (8006618 <MX_USART1_UART_Init+0x50>)
 80065d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80065d2:	4b10      	ldr	r3, [pc, #64]	; (8006614 <MX_USART1_UART_Init+0x4c>)
 80065d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80065d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80065da:	4b0e      	ldr	r3, [pc, #56]	; (8006614 <MX_USART1_UART_Init+0x4c>)
 80065dc:	2200      	movs	r2, #0
 80065de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80065e0:	4b0c      	ldr	r3, [pc, #48]	; (8006614 <MX_USART1_UART_Init+0x4c>)
 80065e2:	2200      	movs	r2, #0
 80065e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80065e6:	4b0b      	ldr	r3, [pc, #44]	; (8006614 <MX_USART1_UART_Init+0x4c>)
 80065e8:	2200      	movs	r2, #0
 80065ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 80065ec:	4b09      	ldr	r3, [pc, #36]	; (8006614 <MX_USART1_UART_Init+0x4c>)
 80065ee:	2208      	movs	r2, #8
 80065f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80065f2:	4b08      	ldr	r3, [pc, #32]	; (8006614 <MX_USART1_UART_Init+0x4c>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80065f8:	4b06      	ldr	r3, [pc, #24]	; (8006614 <MX_USART1_UART_Init+0x4c>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80065fe:	4805      	ldr	r0, [pc, #20]	; (8006614 <MX_USART1_UART_Init+0x4c>)
 8006600:	f006 fad4 	bl	800cbac <HAL_HalfDuplex_Init>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800660a:	f000 f98f 	bl	800692c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800660e:	bf00      	nop
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	200107b8 	.word	0x200107b8
 8006618:	40011000 	.word	0x40011000

0800661c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006622:	2300      	movs	r3, #0
 8006624:	607b      	str	r3, [r7, #4]
 8006626:	4b1f      	ldr	r3, [pc, #124]	; (80066a4 <MX_DMA_Init+0x88>)
 8006628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662a:	4a1e      	ldr	r2, [pc, #120]	; (80066a4 <MX_DMA_Init+0x88>)
 800662c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006630:	6313      	str	r3, [r2, #48]	; 0x30
 8006632:	4b1c      	ldr	r3, [pc, #112]	; (80066a4 <MX_DMA_Init+0x88>)
 8006634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800663a:	607b      	str	r3, [r7, #4]
 800663c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800663e:	2300      	movs	r3, #0
 8006640:	603b      	str	r3, [r7, #0]
 8006642:	4b18      	ldr	r3, [pc, #96]	; (80066a4 <MX_DMA_Init+0x88>)
 8006644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006646:	4a17      	ldr	r2, [pc, #92]	; (80066a4 <MX_DMA_Init+0x88>)
 8006648:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800664c:	6313      	str	r3, [r2, #48]	; 0x30
 800664e:	4b15      	ldr	r3, [pc, #84]	; (80066a4 <MX_DMA_Init+0x88>)
 8006650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006652:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006656:	603b      	str	r3, [r7, #0]
 8006658:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800665a:	2200      	movs	r2, #0
 800665c:	2105      	movs	r1, #5
 800665e:	200f      	movs	r0, #15
 8006660:	f001 ff6f 	bl	8008542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8006664:	200f      	movs	r0, #15
 8006666:	f001 ff88 	bl	800857a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800666a:	2200      	movs	r2, #0
 800666c:	2100      	movs	r1, #0
 800666e:	2038      	movs	r0, #56	; 0x38
 8006670:	f001 ff67 	bl	8008542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8006674:	2038      	movs	r0, #56	; 0x38
 8006676:	f001 ff80 	bl	800857a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800667a:	2200      	movs	r2, #0
 800667c:	2100      	movs	r1, #0
 800667e:	203a      	movs	r0, #58	; 0x3a
 8006680:	f001 ff5f 	bl	8008542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006684:	203a      	movs	r0, #58	; 0x3a
 8006686:	f001 ff78 	bl	800857a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 2, 0);
 800668a:	2200      	movs	r2, #0
 800668c:	2102      	movs	r1, #2
 800668e:	203c      	movs	r0, #60	; 0x3c
 8006690:	f001 ff57 	bl	8008542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8006694:	203c      	movs	r0, #60	; 0x3c
 8006696:	f001 ff70 	bl	800857a <HAL_NVIC_EnableIRQ>

}
 800669a:	bf00      	nop
 800669c:	3708      	adds	r7, #8
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	40023800 	.word	0x40023800

080066a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b088      	sub	sp, #32
 80066ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066ae:	f107 030c 	add.w	r3, r7, #12
 80066b2:	2200      	movs	r2, #0
 80066b4:	601a      	str	r2, [r3, #0]
 80066b6:	605a      	str	r2, [r3, #4]
 80066b8:	609a      	str	r2, [r3, #8]
 80066ba:	60da      	str	r2, [r3, #12]
 80066bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80066be:	2300      	movs	r3, #0
 80066c0:	60bb      	str	r3, [r7, #8]
 80066c2:	4b3c      	ldr	r3, [pc, #240]	; (80067b4 <MX_GPIO_Init+0x10c>)
 80066c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c6:	4a3b      	ldr	r2, [pc, #236]	; (80067b4 <MX_GPIO_Init+0x10c>)
 80066c8:	f043 0301 	orr.w	r3, r3, #1
 80066cc:	6313      	str	r3, [r2, #48]	; 0x30
 80066ce:	4b39      	ldr	r3, [pc, #228]	; (80067b4 <MX_GPIO_Init+0x10c>)
 80066d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	60bb      	str	r3, [r7, #8]
 80066d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80066da:	2300      	movs	r3, #0
 80066dc:	607b      	str	r3, [r7, #4]
 80066de:	4b35      	ldr	r3, [pc, #212]	; (80067b4 <MX_GPIO_Init+0x10c>)
 80066e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e2:	4a34      	ldr	r2, [pc, #208]	; (80067b4 <MX_GPIO_Init+0x10c>)
 80066e4:	f043 0302 	orr.w	r3, r3, #2
 80066e8:	6313      	str	r3, [r2, #48]	; 0x30
 80066ea:	4b32      	ldr	r3, [pc, #200]	; (80067b4 <MX_GPIO_Init+0x10c>)
 80066ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	607b      	str	r3, [r7, #4]
 80066f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80066f6:	2300      	movs	r3, #0
 80066f8:	603b      	str	r3, [r7, #0]
 80066fa:	4b2e      	ldr	r3, [pc, #184]	; (80067b4 <MX_GPIO_Init+0x10c>)
 80066fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fe:	4a2d      	ldr	r2, [pc, #180]	; (80067b4 <MX_GPIO_Init+0x10c>)
 8006700:	f043 0304 	orr.w	r3, r3, #4
 8006704:	6313      	str	r3, [r2, #48]	; 0x30
 8006706:	4b2b      	ldr	r3, [pc, #172]	; (80067b4 <MX_GPIO_Init+0x10c>)
 8006708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670a:	f003 0304 	and.w	r3, r3, #4
 800670e:	603b      	str	r3, [r7, #0]
 8006710:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8006712:	2200      	movs	r2, #0
 8006714:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006718:	4827      	ldr	r0, [pc, #156]	; (80067b8 <MX_GPIO_Init+0x110>)
 800671a:	f002 fcad 	bl	8009078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 800671e:	2201      	movs	r2, #1
 8006720:	2110      	movs	r1, #16
 8006722:	4826      	ldr	r0, [pc, #152]	; (80067bc <MX_GPIO_Init+0x114>)
 8006724:	f002 fca8 	bl	8009078 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : encoder2_Pin encoder1_Pin */
  GPIO_InitStruct.Pin = encoder2_Pin|encoder1_Pin;
 8006728:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800672c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800672e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8006732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006734:	2301      	movs	r3, #1
 8006736:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006738:	f107 030c 	add.w	r3, r7, #12
 800673c:	4619      	mov	r1, r3
 800673e:	481f      	ldr	r0, [pc, #124]	; (80067bc <MX_GPIO_Init+0x114>)
 8006740:	f002 fb16 	bl	8008d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8006744:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006748:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800674a:	2301      	movs	r3, #1
 800674c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800674e:	2300      	movs	r3, #0
 8006750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006752:	2300      	movs	r3, #0
 8006754:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8006756:	f107 030c 	add.w	r3, r7, #12
 800675a:	4619      	mov	r1, r3
 800675c:	4816      	ldr	r0, [pc, #88]	; (80067b8 <MX_GPIO_Init+0x110>)
 800675e:	f002 fb07 	bl	8008d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : record_pin_Pin PB2 */
  GPIO_InitStruct.Pin = record_pin_Pin|GPIO_PIN_2;
 8006762:	f241 0304 	movw	r3, #4100	; 0x1004
 8006766:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006768:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800676c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800676e:	2301      	movs	r3, #1
 8006770:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006772:	f107 030c 	add.w	r3, r7, #12
 8006776:	4619      	mov	r1, r3
 8006778:	4811      	ldr	r0, [pc, #68]	; (80067c0 <MX_GPIO_Init+0x118>)
 800677a:	f002 faf9 	bl	8008d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 800677e:	2310      	movs	r3, #16
 8006780:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006782:	2301      	movs	r3, #1
 8006784:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006786:	2300      	movs	r3, #0
 8006788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800678a:	2303      	movs	r3, #3
 800678c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 800678e:	f107 030c 	add.w	r3, r7, #12
 8006792:	4619      	mov	r1, r3
 8006794:	4809      	ldr	r0, [pc, #36]	; (80067bc <MX_GPIO_Init+0x114>)
 8006796:	f002 faeb 	bl	8008d70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 800679a:	2200      	movs	r2, #0
 800679c:	2104      	movs	r1, #4
 800679e:	2028      	movs	r0, #40	; 0x28
 80067a0:	f001 fecf 	bl	8008542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80067a4:	2028      	movs	r0, #40	; 0x28
 80067a6:	f001 fee8 	bl	800857a <HAL_NVIC_EnableIRQ>

}
 80067aa:	bf00      	nop
 80067ac:	3720      	adds	r7, #32
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	40023800 	.word	0x40023800
 80067b8:	40020800 	.word	0x40020800
 80067bc:	40020000 	.word	0x40020000
 80067c0:	40020400 	.word	0x40020400

080067c4 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */


	void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
		adc_flag=1;
 80067cc:	4b04      	ldr	r3, [pc, #16]	; (80067e0 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 80067ce:	2201      	movs	r2, #1
 80067d0:	701a      	strb	r2, [r3, #0]

	}
 80067d2:	bf00      	nop
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	2000cc6c 	.word	0x2000cc6c

080067e4 <HAL_ADC_ConvCpltCallback>:
	void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)   // get data after conversion
	{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
	adc_flag=2;
 80067ec:	4b07      	ldr	r3, [pc, #28]	; (800680c <HAL_ADC_ConvCpltCallback+0x28>)
 80067ee:	2202      	movs	r2, #2
 80067f0:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Stop_DMA(&hadc1); HAL_ADC_Start_DMA(&hadc1,& adc_source, 3072);    // try half sample rate   , its 17606  khz
 80067f2:	4807      	ldr	r0, [pc, #28]	; (8006810 <HAL_ADC_ConvCpltCallback+0x2c>)
 80067f4:	f000 ffce 	bl	8007794 <HAL_ADC_Stop_DMA>
 80067f8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80067fc:	4905      	ldr	r1, [pc, #20]	; (8006814 <HAL_ADC_ConvCpltCallback+0x30>)
 80067fe:	4804      	ldr	r0, [pc, #16]	; (8006810 <HAL_ADC_ConvCpltCallback+0x2c>)
 8006800:	f000 fed8 	bl	80075b4 <HAL_ADC_Start_DMA>

	}
 8006804:	bf00      	nop
 8006806:	3708      	adds	r7, #8
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	2000cc6c 	.word	0x2000cc6c
 8006810:	200103cc 	.word	0x200103cc
 8006814:	2000a6f0 	.word	0x2000a6f0

08006818 <HAL_SPI_TxRxHalfCpltCallback>:

	void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef * hspi) {
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]

	    if (SPI1==hspi->Instance) {
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a05      	ldr	r2, [pc, #20]	; (800683c <HAL_SPI_TxRxHalfCpltCallback+0x24>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d102      	bne.n	8006830 <HAL_SPI_TxRxHalfCpltCallback+0x18>

				    {
			//	    error_count++;
		//	memcpy(&error_data,flash_read_block2,127);  // maybe skipping address,, yup idiot Internet advice

						flash_flag=1;}
 800682a:	4b05      	ldr	r3, [pc, #20]	; (8006840 <HAL_SPI_TxRxHalfCpltCallback+0x28>)
 800682c:	2201      	movs	r2, #1
 800682e:	701a      	strb	r2, [r3, #0]


	}		}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	40013000 	.word	0x40013000
 8006840:	20008f74 	.word	0x20008f74

08006844 <HAL_SPI_TxRxCpltCallback>:




	void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)   // when finished sending
		{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]

		   if (SPI1==hspi->Instance) {
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a07      	ldr	r2, [pc, #28]	; (8006870 <HAL_SPI_TxRxCpltCallback+0x2c>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d107      	bne.n	8006866 <HAL_SPI_TxRxCpltCallback+0x22>



		       HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);  //  end
 8006856:	2201      	movs	r2, #1
 8006858:	2110      	movs	r1, #16
 800685a:	4806      	ldr	r0, [pc, #24]	; (8006874 <HAL_SPI_TxRxCpltCallback+0x30>)
 800685c:	f002 fc0c 	bl	8009078 <HAL_GPIO_WritePin>

		       flash_flag=2;
 8006860:	4b05      	ldr	r3, [pc, #20]	; (8006878 <HAL_SPI_TxRxCpltCallback+0x34>)
 8006862:	2202      	movs	r2, #2
 8006864:	701a      	strb	r2, [r3, #0]
		   }
		}
 8006866:	bf00      	nop
 8006868:	3708      	adds	r7, #8
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	40013000 	.word	0x40013000
 8006874:	40020000 	.word	0x40020000
 8006878:	20008f74 	.word	0x20008f74

0800687c <HAL_SPI_ErrorCallback>:


	void HAL_SPI_ErrorCallback(SPI_HandleTypeDef * hspi) {
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
	   if (SPI1==hspi->Instance) {
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a07      	ldr	r2, [pc, #28]	; (80068a8 <HAL_SPI_ErrorCallback+0x2c>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d106      	bne.n	800689c <HAL_SPI_ErrorCallback+0x20>
error_count++;
 800688e:	4b07      	ldr	r3, [pc, #28]	; (80068ac <HAL_SPI_ErrorCallback+0x30>)
 8006890:	881b      	ldrh	r3, [r3, #0]
 8006892:	b29b      	uxth	r3, r3
 8006894:	3301      	adds	r3, #1
 8006896:	b29a      	uxth	r2, r3
 8006898:	4b04      	ldr	r3, [pc, #16]	; (80068ac <HAL_SPI_ErrorCallback+0x30>)
 800689a:	801a      	strh	r2, [r3, #0]

		   }
	}
 800689c:	bf00      	nop
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr
 80068a8:	40013000 	.word	0x40013000
 80068ac:	2000cc76 	.word	0x2000cc76

080068b0 <HAL_SPI_TxCpltCallback>:




void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)   // when finished sending
	{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
	    //
	 //   gfx_dma=1;
	//    if (SPI2==hspi->Instance) {gfx_dma=1;}


	}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	4603      	mov	r3, r0
 80068cc:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == record_pin_Pin) {
 80068ce:	88fb      	ldrh	r3, [r7, #6]
 80068d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068d4:	d103      	bne.n	80068de <HAL_GPIO_EXTI_Callback+0x1a>
   sampler.record_enable=1;
 80068d6:	4b08      	ldr	r3, [pc, #32]	; (80068f8 <HAL_GPIO_EXTI_Callback+0x34>)
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  }

  if(GPIO_Pin == encoder1_Pin) {
 80068de:	88fb      	ldrh	r3, [r7, #6]
 80068e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068e4:	d102      	bne.n	80068ec <HAL_GPIO_EXTI_Callback+0x28>
  //page_skip=1;
  record_output=1;
 80068e6:	4b05      	ldr	r3, [pc, #20]	; (80068fc <HAL_GPIO_EXTI_Callback+0x38>)
 80068e8:	2201      	movs	r2, #1
 80068ea:	701a      	strb	r2, [r3, #0]
  //record_output=1;
 //     page_skip=1;
  }


}
 80068ec:	bf00      	nop
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr
 80068f8:	20008edc 	.word	0x20008edc
 80068fc:	2000ff51 	.word	0x2000ff51

08006900 <stop_start>:



//NVIC_DisableIRQ(TIM3_IRQn);   //  disables all tim irq
void stop_start	(void)             {
 8006900:	b580      	push	{r7, lr}
 8006902:	af00      	add	r7, sp, #0
  //  if (TIM3==htim ->Instance)
    if  (stop_toggle ==1) {HAL_TIM_Base_Stop_IT(&htim3);}
 8006904:	4b07      	ldr	r3, [pc, #28]	; (8006924 <stop_start+0x24>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d102      	bne.n	8006912 <stop_start+0x12>
 800690c:	4806      	ldr	r0, [pc, #24]	; (8006928 <stop_start+0x28>)
 800690e:	f005 f8b1 	bl	800ba74 <HAL_TIM_Base_Stop_IT>
    if  (stop_toggle ==2) HAL_TIM_Base_Start_IT(&htim3);;
 8006912:	4b04      	ldr	r3, [pc, #16]	; (8006924 <stop_start+0x24>)
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	2b02      	cmp	r3, #2
 8006918:	d102      	bne.n	8006920 <stop_start+0x20>
 800691a:	4803      	ldr	r0, [pc, #12]	; (8006928 <stop_start+0x28>)
 800691c:	f005 f848 	bl	800b9b0 <HAL_TIM_Base_Start_IT>

}
 8006920:	bf00      	nop
 8006922:	bd80      	pop	{r7, pc}
 8006924:	2000ff44 	.word	0x2000ff44
 8006928:	200106e0 	.word	0x200106e0

0800692c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800692c:	b480      	push	{r7}
 800692e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006930:	b672      	cpsid	i
}
 8006932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006934:	e7fe      	b.n	8006934 <Error_Handler+0x8>
	...

08006938 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800693e:	2300      	movs	r3, #0
 8006940:	607b      	str	r3, [r7, #4]
 8006942:	4b10      	ldr	r3, [pc, #64]	; (8006984 <HAL_MspInit+0x4c>)
 8006944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006946:	4a0f      	ldr	r2, [pc, #60]	; (8006984 <HAL_MspInit+0x4c>)
 8006948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800694c:	6453      	str	r3, [r2, #68]	; 0x44
 800694e:	4b0d      	ldr	r3, [pc, #52]	; (8006984 <HAL_MspInit+0x4c>)
 8006950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006956:	607b      	str	r3, [r7, #4]
 8006958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800695a:	2300      	movs	r3, #0
 800695c:	603b      	str	r3, [r7, #0]
 800695e:	4b09      	ldr	r3, [pc, #36]	; (8006984 <HAL_MspInit+0x4c>)
 8006960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006962:	4a08      	ldr	r2, [pc, #32]	; (8006984 <HAL_MspInit+0x4c>)
 8006964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006968:	6413      	str	r3, [r2, #64]	; 0x40
 800696a:	4b06      	ldr	r3, [pc, #24]	; (8006984 <HAL_MspInit+0x4c>)
 800696c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006972:	603b      	str	r3, [r7, #0]
 8006974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006976:	bf00      	nop
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	40023800 	.word	0x40023800

08006988 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b08a      	sub	sp, #40	; 0x28
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006990:	f107 0314 	add.w	r3, r7, #20
 8006994:	2200      	movs	r2, #0
 8006996:	601a      	str	r2, [r3, #0]
 8006998:	605a      	str	r2, [r3, #4]
 800699a:	609a      	str	r2, [r3, #8]
 800699c:	60da      	str	r2, [r3, #12]
 800699e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a3c      	ldr	r2, [pc, #240]	; (8006a98 <HAL_ADC_MspInit+0x110>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d171      	bne.n	8006a8e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80069aa:	2300      	movs	r3, #0
 80069ac:	613b      	str	r3, [r7, #16]
 80069ae:	4b3b      	ldr	r3, [pc, #236]	; (8006a9c <HAL_ADC_MspInit+0x114>)
 80069b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b2:	4a3a      	ldr	r2, [pc, #232]	; (8006a9c <HAL_ADC_MspInit+0x114>)
 80069b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069b8:	6453      	str	r3, [r2, #68]	; 0x44
 80069ba:	4b38      	ldr	r3, [pc, #224]	; (8006a9c <HAL_ADC_MspInit+0x114>)
 80069bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069c2:	613b      	str	r3, [r7, #16]
 80069c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069c6:	2300      	movs	r3, #0
 80069c8:	60fb      	str	r3, [r7, #12]
 80069ca:	4b34      	ldr	r3, [pc, #208]	; (8006a9c <HAL_ADC_MspInit+0x114>)
 80069cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ce:	4a33      	ldr	r2, [pc, #204]	; (8006a9c <HAL_ADC_MspInit+0x114>)
 80069d0:	f043 0301 	orr.w	r3, r3, #1
 80069d4:	6313      	str	r3, [r2, #48]	; 0x30
 80069d6:	4b31      	ldr	r3, [pc, #196]	; (8006a9c <HAL_ADC_MspInit+0x114>)
 80069d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	60fb      	str	r3, [r7, #12]
 80069e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069e2:	2300      	movs	r3, #0
 80069e4:	60bb      	str	r3, [r7, #8]
 80069e6:	4b2d      	ldr	r3, [pc, #180]	; (8006a9c <HAL_ADC_MspInit+0x114>)
 80069e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ea:	4a2c      	ldr	r2, [pc, #176]	; (8006a9c <HAL_ADC_MspInit+0x114>)
 80069ec:	f043 0302 	orr.w	r3, r3, #2
 80069f0:	6313      	str	r3, [r2, #48]	; 0x30
 80069f2:	4b2a      	ldr	r3, [pc, #168]	; (8006a9c <HAL_ADC_MspInit+0x114>)
 80069f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	60bb      	str	r3, [r7, #8]
 80069fc:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA0-WKUP     ------> ADC1_IN0
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0;
 80069fe:	2305      	movs	r3, #5
 8006a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a02:	2303      	movs	r3, #3
 8006a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a06:	2300      	movs	r3, #0
 8006a08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a0a:	f107 0314 	add.w	r3, r7, #20
 8006a0e:	4619      	mov	r1, r3
 8006a10:	4823      	ldr	r0, [pc, #140]	; (8006aa0 <HAL_ADC_MspInit+0x118>)
 8006a12:	f002 f9ad 	bl	8008d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8006a16:	2303      	movs	r3, #3
 8006a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a22:	f107 0314 	add.w	r3, r7, #20
 8006a26:	4619      	mov	r1, r3
 8006a28:	481e      	ldr	r0, [pc, #120]	; (8006aa4 <HAL_ADC_MspInit+0x11c>)
 8006a2a:	f002 f9a1 	bl	8008d70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8006a2e:	4b1e      	ldr	r3, [pc, #120]	; (8006aa8 <HAL_ADC_MspInit+0x120>)
 8006a30:	4a1e      	ldr	r2, [pc, #120]	; (8006aac <HAL_ADC_MspInit+0x124>)
 8006a32:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8006a34:	4b1c      	ldr	r3, [pc, #112]	; (8006aa8 <HAL_ADC_MspInit+0x120>)
 8006a36:	2200      	movs	r2, #0
 8006a38:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006a3a:	4b1b      	ldr	r3, [pc, #108]	; (8006aa8 <HAL_ADC_MspInit+0x120>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a40:	4b19      	ldr	r3, [pc, #100]	; (8006aa8 <HAL_ADC_MspInit+0x120>)
 8006a42:	2200      	movs	r2, #0
 8006a44:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006a46:	4b18      	ldr	r3, [pc, #96]	; (8006aa8 <HAL_ADC_MspInit+0x120>)
 8006a48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a4c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006a4e:	4b16      	ldr	r3, [pc, #88]	; (8006aa8 <HAL_ADC_MspInit+0x120>)
 8006a50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a54:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006a56:	4b14      	ldr	r3, [pc, #80]	; (8006aa8 <HAL_ADC_MspInit+0x120>)
 8006a58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006a5c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006a5e:	4b12      	ldr	r3, [pc, #72]	; (8006aa8 <HAL_ADC_MspInit+0x120>)
 8006a60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a64:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006a66:	4b10      	ldr	r3, [pc, #64]	; (8006aa8 <HAL_ADC_MspInit+0x120>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006a6c:	4b0e      	ldr	r3, [pc, #56]	; (8006aa8 <HAL_ADC_MspInit+0x120>)
 8006a6e:	2200      	movs	r2, #0
 8006a70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006a72:	480d      	ldr	r0, [pc, #52]	; (8006aa8 <HAL_ADC_MspInit+0x120>)
 8006a74:	f001 fd9c 	bl	80085b0 <HAL_DMA_Init>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d001      	beq.n	8006a82 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8006a7e:	f7ff ff55 	bl	800692c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a08      	ldr	r2, [pc, #32]	; (8006aa8 <HAL_ADC_MspInit+0x120>)
 8006a86:	639a      	str	r2, [r3, #56]	; 0x38
 8006a88:	4a07      	ldr	r2, [pc, #28]	; (8006aa8 <HAL_ADC_MspInit+0x120>)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006a8e:	bf00      	nop
 8006a90:	3728      	adds	r7, #40	; 0x28
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	40012000 	.word	0x40012000
 8006a9c:	40023800 	.word	0x40023800
 8006aa0:	40020000 	.word	0x40020000
 8006aa4:	40020400 	.word	0x40020400
 8006aa8:	20010414 	.word	0x20010414
 8006aac:	40026470 	.word	0x40026470

08006ab0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b08a      	sub	sp, #40	; 0x28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ab8:	f107 0314 	add.w	r3, r7, #20
 8006abc:	2200      	movs	r2, #0
 8006abe:	601a      	str	r2, [r3, #0]
 8006ac0:	605a      	str	r2, [r3, #4]
 8006ac2:	609a      	str	r2, [r3, #8]
 8006ac4:	60da      	str	r2, [r3, #12]
 8006ac6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a22      	ldr	r2, [pc, #136]	; (8006b58 <HAL_I2C_MspInit+0xa8>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d13d      	bne.n	8006b4e <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	613b      	str	r3, [r7, #16]
 8006ad6:	4b21      	ldr	r3, [pc, #132]	; (8006b5c <HAL_I2C_MspInit+0xac>)
 8006ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ada:	4a20      	ldr	r2, [pc, #128]	; (8006b5c <HAL_I2C_MspInit+0xac>)
 8006adc:	f043 0302 	orr.w	r3, r3, #2
 8006ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ae2:	4b1e      	ldr	r3, [pc, #120]	; (8006b5c <HAL_I2C_MspInit+0xac>)
 8006ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae6:	f003 0302 	and.w	r3, r3, #2
 8006aea:	613b      	str	r3, [r7, #16]
 8006aec:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB9     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006aee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006af4:	2312      	movs	r3, #18
 8006af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006af8:	2300      	movs	r3, #0
 8006afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006afc:	2303      	movs	r3, #3
 8006afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8006b00:	2309      	movs	r3, #9
 8006b02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b04:	f107 0314 	add.w	r3, r7, #20
 8006b08:	4619      	mov	r1, r3
 8006b0a:	4815      	ldr	r0, [pc, #84]	; (8006b60 <HAL_I2C_MspInit+0xb0>)
 8006b0c:	f002 f930 	bl	8008d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006b16:	2312      	movs	r3, #18
 8006b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006b22:	2304      	movs	r3, #4
 8006b24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b26:	f107 0314 	add.w	r3, r7, #20
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	480c      	ldr	r0, [pc, #48]	; (8006b60 <HAL_I2C_MspInit+0xb0>)
 8006b2e:	f002 f91f 	bl	8008d70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006b32:	2300      	movs	r3, #0
 8006b34:	60fb      	str	r3, [r7, #12]
 8006b36:	4b09      	ldr	r3, [pc, #36]	; (8006b5c <HAL_I2C_MspInit+0xac>)
 8006b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3a:	4a08      	ldr	r2, [pc, #32]	; (8006b5c <HAL_I2C_MspInit+0xac>)
 8006b3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006b40:	6413      	str	r3, [r2, #64]	; 0x40
 8006b42:	4b06      	ldr	r3, [pc, #24]	; (8006b5c <HAL_I2C_MspInit+0xac>)
 8006b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b4a:	60fb      	str	r3, [r7, #12]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006b4e:	bf00      	nop
 8006b50:	3728      	adds	r7, #40	; 0x28
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	40005800 	.word	0x40005800
 8006b5c:	40023800 	.word	0x40023800
 8006b60:	40020400 	.word	0x40020400

08006b64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b08c      	sub	sp, #48	; 0x30
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b6c:	f107 031c 	add.w	r3, r7, #28
 8006b70:	2200      	movs	r2, #0
 8006b72:	601a      	str	r2, [r3, #0]
 8006b74:	605a      	str	r2, [r3, #4]
 8006b76:	609a      	str	r2, [r3, #8]
 8006b78:	60da      	str	r2, [r3, #12]
 8006b7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a77      	ldr	r2, [pc, #476]	; (8006d60 <HAL_SPI_MspInit+0x1fc>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	f040 8089 	bne.w	8006c9a <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006b88:	2300      	movs	r3, #0
 8006b8a:	61bb      	str	r3, [r7, #24]
 8006b8c:	4b75      	ldr	r3, [pc, #468]	; (8006d64 <HAL_SPI_MspInit+0x200>)
 8006b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b90:	4a74      	ldr	r2, [pc, #464]	; (8006d64 <HAL_SPI_MspInit+0x200>)
 8006b92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006b96:	6453      	str	r3, [r2, #68]	; 0x44
 8006b98:	4b72      	ldr	r3, [pc, #456]	; (8006d64 <HAL_SPI_MspInit+0x200>)
 8006b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ba0:	61bb      	str	r3, [r7, #24]
 8006ba2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	617b      	str	r3, [r7, #20]
 8006ba8:	4b6e      	ldr	r3, [pc, #440]	; (8006d64 <HAL_SPI_MspInit+0x200>)
 8006baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bac:	4a6d      	ldr	r2, [pc, #436]	; (8006d64 <HAL_SPI_MspInit+0x200>)
 8006bae:	f043 0301 	orr.w	r3, r3, #1
 8006bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8006bb4:	4b6b      	ldr	r3, [pc, #428]	; (8006d64 <HAL_SPI_MspInit+0x200>)
 8006bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb8:	f003 0301 	and.w	r3, r3, #1
 8006bbc:	617b      	str	r3, [r7, #20]
 8006bbe:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 8006bc0:	23e0      	movs	r3, #224	; 0xe0
 8006bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006bcc:	2302      	movs	r3, #2
 8006bce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006bd0:	2305      	movs	r3, #5
 8006bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bd4:	f107 031c 	add.w	r3, r7, #28
 8006bd8:	4619      	mov	r1, r3
 8006bda:	4863      	ldr	r0, [pc, #396]	; (8006d68 <HAL_SPI_MspInit+0x204>)
 8006bdc:	f002 f8c8 	bl	8008d70 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8006be0:	4b62      	ldr	r3, [pc, #392]	; (8006d6c <HAL_SPI_MspInit+0x208>)
 8006be2:	4a63      	ldr	r2, [pc, #396]	; (8006d70 <HAL_SPI_MspInit+0x20c>)
 8006be4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8006be6:	4b61      	ldr	r3, [pc, #388]	; (8006d6c <HAL_SPI_MspInit+0x208>)
 8006be8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8006bec:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006bee:	4b5f      	ldr	r3, [pc, #380]	; (8006d6c <HAL_SPI_MspInit+0x208>)
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006bf4:	4b5d      	ldr	r3, [pc, #372]	; (8006d6c <HAL_SPI_MspInit+0x208>)
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006bfa:	4b5c      	ldr	r3, [pc, #368]	; (8006d6c <HAL_SPI_MspInit+0x208>)
 8006bfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006c00:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006c02:	4b5a      	ldr	r3, [pc, #360]	; (8006d6c <HAL_SPI_MspInit+0x208>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006c08:	4b58      	ldr	r3, [pc, #352]	; (8006d6c <HAL_SPI_MspInit+0x208>)
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8006c0e:	4b57      	ldr	r3, [pc, #348]	; (8006d6c <HAL_SPI_MspInit+0x208>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006c14:	4b55      	ldr	r3, [pc, #340]	; (8006d6c <HAL_SPI_MspInit+0x208>)
 8006c16:	2200      	movs	r2, #0
 8006c18:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006c1a:	4b54      	ldr	r3, [pc, #336]	; (8006d6c <HAL_SPI_MspInit+0x208>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8006c20:	4852      	ldr	r0, [pc, #328]	; (8006d6c <HAL_SPI_MspInit+0x208>)
 8006c22:	f001 fcc5 	bl	80085b0 <HAL_DMA_Init>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d001      	beq.n	8006c30 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8006c2c:	f7ff fe7e 	bl	800692c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a4e      	ldr	r2, [pc, #312]	; (8006d6c <HAL_SPI_MspInit+0x208>)
 8006c34:	64da      	str	r2, [r3, #76]	; 0x4c
 8006c36:	4a4d      	ldr	r2, [pc, #308]	; (8006d6c <HAL_SPI_MspInit+0x208>)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8006c3c:	4b4d      	ldr	r3, [pc, #308]	; (8006d74 <HAL_SPI_MspInit+0x210>)
 8006c3e:	4a4e      	ldr	r2, [pc, #312]	; (8006d78 <HAL_SPI_MspInit+0x214>)
 8006c40:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8006c42:	4b4c      	ldr	r3, [pc, #304]	; (8006d74 <HAL_SPI_MspInit+0x210>)
 8006c44:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006c48:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006c4a:	4b4a      	ldr	r3, [pc, #296]	; (8006d74 <HAL_SPI_MspInit+0x210>)
 8006c4c:	2240      	movs	r2, #64	; 0x40
 8006c4e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c50:	4b48      	ldr	r3, [pc, #288]	; (8006d74 <HAL_SPI_MspInit+0x210>)
 8006c52:	2200      	movs	r2, #0
 8006c54:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006c56:	4b47      	ldr	r3, [pc, #284]	; (8006d74 <HAL_SPI_MspInit+0x210>)
 8006c58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006c5c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006c5e:	4b45      	ldr	r3, [pc, #276]	; (8006d74 <HAL_SPI_MspInit+0x210>)
 8006c60:	2200      	movs	r2, #0
 8006c62:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006c64:	4b43      	ldr	r3, [pc, #268]	; (8006d74 <HAL_SPI_MspInit+0x210>)
 8006c66:	2200      	movs	r2, #0
 8006c68:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8006c6a:	4b42      	ldr	r3, [pc, #264]	; (8006d74 <HAL_SPI_MspInit+0x210>)
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006c70:	4b40      	ldr	r3, [pc, #256]	; (8006d74 <HAL_SPI_MspInit+0x210>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006c76:	4b3f      	ldr	r3, [pc, #252]	; (8006d74 <HAL_SPI_MspInit+0x210>)
 8006c78:	2200      	movs	r2, #0
 8006c7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8006c7c:	483d      	ldr	r0, [pc, #244]	; (8006d74 <HAL_SPI_MspInit+0x210>)
 8006c7e:	f001 fc97 	bl	80085b0 <HAL_DMA_Init>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d001      	beq.n	8006c8c <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8006c88:	f7ff fe50 	bl	800692c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a39      	ldr	r2, [pc, #228]	; (8006d74 <HAL_SPI_MspInit+0x210>)
 8006c90:	649a      	str	r2, [r3, #72]	; 0x48
 8006c92:	4a38      	ldr	r2, [pc, #224]	; (8006d74 <HAL_SPI_MspInit+0x210>)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006c98:	e05e      	b.n	8006d58 <HAL_SPI_MspInit+0x1f4>
  else if(hspi->Instance==SPI2)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a37      	ldr	r2, [pc, #220]	; (8006d7c <HAL_SPI_MspInit+0x218>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d159      	bne.n	8006d58 <HAL_SPI_MspInit+0x1f4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	613b      	str	r3, [r7, #16]
 8006ca8:	4b2e      	ldr	r3, [pc, #184]	; (8006d64 <HAL_SPI_MspInit+0x200>)
 8006caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cac:	4a2d      	ldr	r2, [pc, #180]	; (8006d64 <HAL_SPI_MspInit+0x200>)
 8006cae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006cb2:	6413      	str	r3, [r2, #64]	; 0x40
 8006cb4:	4b2b      	ldr	r3, [pc, #172]	; (8006d64 <HAL_SPI_MspInit+0x200>)
 8006cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cbc:	613b      	str	r3, [r7, #16]
 8006cbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	4b27      	ldr	r3, [pc, #156]	; (8006d64 <HAL_SPI_MspInit+0x200>)
 8006cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc8:	4a26      	ldr	r2, [pc, #152]	; (8006d64 <HAL_SPI_MspInit+0x200>)
 8006cca:	f043 0302 	orr.w	r3, r3, #2
 8006cce:	6313      	str	r3, [r2, #48]	; 0x30
 8006cd0:	4b24      	ldr	r3, [pc, #144]	; (8006d64 <HAL_SPI_MspInit+0x200>)
 8006cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd4:	f003 0302 	and.w	r3, r3, #2
 8006cd8:	60fb      	str	r3, [r7, #12]
 8006cda:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8006cdc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8006ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cea:	2303      	movs	r3, #3
 8006cec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006cee:	2305      	movs	r3, #5
 8006cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cf2:	f107 031c 	add.w	r3, r7, #28
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	4821      	ldr	r0, [pc, #132]	; (8006d80 <HAL_SPI_MspInit+0x21c>)
 8006cfa:	f002 f839 	bl	8008d70 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8006cfe:	4b21      	ldr	r3, [pc, #132]	; (8006d84 <HAL_SPI_MspInit+0x220>)
 8006d00:	4a21      	ldr	r2, [pc, #132]	; (8006d88 <HAL_SPI_MspInit+0x224>)
 8006d02:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8006d04:	4b1f      	ldr	r3, [pc, #124]	; (8006d84 <HAL_SPI_MspInit+0x220>)
 8006d06:	2200      	movs	r2, #0
 8006d08:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d0a:	4b1e      	ldr	r3, [pc, #120]	; (8006d84 <HAL_SPI_MspInit+0x220>)
 8006d0c:	2240      	movs	r2, #64	; 0x40
 8006d0e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d10:	4b1c      	ldr	r3, [pc, #112]	; (8006d84 <HAL_SPI_MspInit+0x220>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006d16:	4b1b      	ldr	r3, [pc, #108]	; (8006d84 <HAL_SPI_MspInit+0x220>)
 8006d18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d1c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d1e:	4b19      	ldr	r3, [pc, #100]	; (8006d84 <HAL_SPI_MspInit+0x220>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d24:	4b17      	ldr	r3, [pc, #92]	; (8006d84 <HAL_SPI_MspInit+0x220>)
 8006d26:	2200      	movs	r2, #0
 8006d28:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8006d2a:	4b16      	ldr	r3, [pc, #88]	; (8006d84 <HAL_SPI_MspInit+0x220>)
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006d30:	4b14      	ldr	r3, [pc, #80]	; (8006d84 <HAL_SPI_MspInit+0x220>)
 8006d32:	2200      	movs	r2, #0
 8006d34:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006d36:	4b13      	ldr	r3, [pc, #76]	; (8006d84 <HAL_SPI_MspInit+0x220>)
 8006d38:	2200      	movs	r2, #0
 8006d3a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8006d3c:	4811      	ldr	r0, [pc, #68]	; (8006d84 <HAL_SPI_MspInit+0x220>)
 8006d3e:	f001 fc37 	bl	80085b0 <HAL_DMA_Init>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d001      	beq.n	8006d4c <HAL_SPI_MspInit+0x1e8>
      Error_Handler();
 8006d48:	f7ff fdf0 	bl	800692c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a0d      	ldr	r2, [pc, #52]	; (8006d84 <HAL_SPI_MspInit+0x220>)
 8006d50:	649a      	str	r2, [r3, #72]	; 0x48
 8006d52:	4a0c      	ldr	r2, [pc, #48]	; (8006d84 <HAL_SPI_MspInit+0x220>)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006d58:	bf00      	nop
 8006d5a:	3730      	adds	r7, #48	; 0x30
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	40013000 	.word	0x40013000
 8006d64:	40023800 	.word	0x40023800
 8006d68:	40020000 	.word	0x40020000
 8006d6c:	20010578 	.word	0x20010578
 8006d70:	40026410 	.word	0x40026410
 8006d74:	200105d8 	.word	0x200105d8
 8006d78:	40026440 	.word	0x40026440
 8006d7c:	40003800 	.word	0x40003800
 8006d80:	40020400 	.word	0x40020400
 8006d84:	20010638 	.word	0x20010638
 8006d88:	40026070 	.word	0x40026070

08006d8c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b08c      	sub	sp, #48	; 0x30
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d94:	f107 031c 	add.w	r3, r7, #28
 8006d98:	2200      	movs	r2, #0
 8006d9a:	601a      	str	r2, [r3, #0]
 8006d9c:	605a      	str	r2, [r3, #4]
 8006d9e:	609a      	str	r2, [r3, #8]
 8006da0:	60da      	str	r2, [r3, #12]
 8006da2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dac:	d12d      	bne.n	8006e0a <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006dae:	2300      	movs	r3, #0
 8006db0:	61bb      	str	r3, [r7, #24]
 8006db2:	4b30      	ldr	r3, [pc, #192]	; (8006e74 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db6:	4a2f      	ldr	r2, [pc, #188]	; (8006e74 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006db8:	f043 0301 	orr.w	r3, r3, #1
 8006dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8006dbe:	4b2d      	ldr	r3, [pc, #180]	; (8006e74 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	61bb      	str	r3, [r7, #24]
 8006dc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006dca:	2300      	movs	r3, #0
 8006dcc:	617b      	str	r3, [r7, #20]
 8006dce:	4b29      	ldr	r3, [pc, #164]	; (8006e74 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd2:	4a28      	ldr	r2, [pc, #160]	; (8006e74 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006dd4:	f043 0301 	orr.w	r3, r3, #1
 8006dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8006dda:	4b26      	ldr	r3, [pc, #152]	; (8006e74 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	617b      	str	r3, [r7, #20]
 8006de4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 8006de6:	f248 0302 	movw	r3, #32770	; 0x8002
 8006dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dec:	2302      	movs	r3, #2
 8006dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006df0:	2301      	movs	r3, #1
 8006df2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006df4:	2300      	movs	r3, #0
 8006df6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006dfc:	f107 031c 	add.w	r3, r7, #28
 8006e00:	4619      	mov	r1, r3
 8006e02:	481d      	ldr	r0, [pc, #116]	; (8006e78 <HAL_TIM_Encoder_MspInit+0xec>)
 8006e04:	f001 ffb4 	bl	8008d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006e08:	e030      	b.n	8006e6c <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a1b      	ldr	r2, [pc, #108]	; (8006e7c <HAL_TIM_Encoder_MspInit+0xf0>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d12b      	bne.n	8006e6c <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006e14:	2300      	movs	r3, #0
 8006e16:	613b      	str	r3, [r7, #16]
 8006e18:	4b16      	ldr	r3, [pc, #88]	; (8006e74 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1c:	4a15      	ldr	r2, [pc, #84]	; (8006e74 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006e1e:	f043 0304 	orr.w	r3, r3, #4
 8006e22:	6413      	str	r3, [r2, #64]	; 0x40
 8006e24:	4b13      	ldr	r3, [pc, #76]	; (8006e74 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e28:	f003 0304 	and.w	r3, r3, #4
 8006e2c:	613b      	str	r3, [r7, #16]
 8006e2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e30:	2300      	movs	r3, #0
 8006e32:	60fb      	str	r3, [r7, #12]
 8006e34:	4b0f      	ldr	r3, [pc, #60]	; (8006e74 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e38:	4a0e      	ldr	r2, [pc, #56]	; (8006e74 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006e3a:	f043 0302 	orr.w	r3, r3, #2
 8006e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8006e40:	4b0c      	ldr	r3, [pc, #48]	; (8006e74 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e44:	f003 0302 	and.w	r3, r3, #2
 8006e48:	60fb      	str	r3, [r7, #12]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006e4c:	23c0      	movs	r3, #192	; 0xc0
 8006e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e50:	2302      	movs	r3, #2
 8006e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e54:	2301      	movs	r3, #1
 8006e56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e60:	f107 031c 	add.w	r3, r7, #28
 8006e64:	4619      	mov	r1, r3
 8006e66:	4806      	ldr	r0, [pc, #24]	; (8006e80 <HAL_TIM_Encoder_MspInit+0xf4>)
 8006e68:	f001 ff82 	bl	8008d70 <HAL_GPIO_Init>
}
 8006e6c:	bf00      	nop
 8006e6e:	3730      	adds	r7, #48	; 0x30
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	40023800 	.word	0x40023800
 8006e78:	40020000 	.word	0x40020000
 8006e7c:	40000800 	.word	0x40000800
 8006e80:	40020400 	.word	0x40020400

08006e84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a1c      	ldr	r2, [pc, #112]	; (8006f04 <HAL_TIM_Base_MspInit+0x80>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d116      	bne.n	8006ec4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006e96:	2300      	movs	r3, #0
 8006e98:	60fb      	str	r3, [r7, #12]
 8006e9a:	4b1b      	ldr	r3, [pc, #108]	; (8006f08 <HAL_TIM_Base_MspInit+0x84>)
 8006e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9e:	4a1a      	ldr	r2, [pc, #104]	; (8006f08 <HAL_TIM_Base_MspInit+0x84>)
 8006ea0:	f043 0302 	orr.w	r3, r3, #2
 8006ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8006ea6:	4b18      	ldr	r3, [pc, #96]	; (8006f08 <HAL_TIM_Base_MspInit+0x84>)
 8006ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eaa:	f003 0302 	and.w	r3, r3, #2
 8006eae:	60fb      	str	r3, [r7, #12]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	2101      	movs	r1, #1
 8006eb6:	201d      	movs	r0, #29
 8006eb8:	f001 fb43 	bl	8008542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006ebc:	201d      	movs	r0, #29
 8006ebe:	f001 fb5c 	bl	800857a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8006ec2:	e01a      	b.n	8006efa <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a10      	ldr	r2, [pc, #64]	; (8006f0c <HAL_TIM_Base_MspInit+0x88>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d115      	bne.n	8006efa <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006ece:	2300      	movs	r3, #0
 8006ed0:	60bb      	str	r3, [r7, #8]
 8006ed2:	4b0d      	ldr	r3, [pc, #52]	; (8006f08 <HAL_TIM_Base_MspInit+0x84>)
 8006ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ed6:	4a0c      	ldr	r2, [pc, #48]	; (8006f08 <HAL_TIM_Base_MspInit+0x84>)
 8006ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006edc:	6453      	str	r3, [r2, #68]	; 0x44
 8006ede:	4b0a      	ldr	r3, [pc, #40]	; (8006f08 <HAL_TIM_Base_MspInit+0x84>)
 8006ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ee6:	60bb      	str	r3, [r7, #8]
 8006ee8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 3, 0);
 8006eea:	2200      	movs	r2, #0
 8006eec:	2103      	movs	r1, #3
 8006eee:	2019      	movs	r0, #25
 8006ef0:	f001 fb27 	bl	8008542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006ef4:	2019      	movs	r0, #25
 8006ef6:	f001 fb40 	bl	800857a <HAL_NVIC_EnableIRQ>
}
 8006efa:	bf00      	nop
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	40000400 	.word	0x40000400
 8006f08:	40023800 	.word	0x40023800
 8006f0c:	40014400 	.word	0x40014400

08006f10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b088      	sub	sp, #32
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f18:	f107 030c 	add.w	r3, r7, #12
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	601a      	str	r2, [r3, #0]
 8006f20:	605a      	str	r2, [r3, #4]
 8006f22:	609a      	str	r2, [r3, #8]
 8006f24:	60da      	str	r2, [r3, #12]
 8006f26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a12      	ldr	r2, [pc, #72]	; (8006f78 <HAL_TIM_MspPostInit+0x68>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d11d      	bne.n	8006f6e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f32:	2300      	movs	r3, #0
 8006f34:	60bb      	str	r3, [r7, #8]
 8006f36:	4b11      	ldr	r3, [pc, #68]	; (8006f7c <HAL_TIM_MspPostInit+0x6c>)
 8006f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3a:	4a10      	ldr	r2, [pc, #64]	; (8006f7c <HAL_TIM_MspPostInit+0x6c>)
 8006f3c:	f043 0302 	orr.w	r3, r3, #2
 8006f40:	6313      	str	r3, [r2, #48]	; 0x30
 8006f42:	4b0e      	ldr	r3, [pc, #56]	; (8006f7c <HAL_TIM_MspPostInit+0x6c>)
 8006f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f46:	f003 0302 	and.w	r3, r3, #2
 8006f4a:	60bb      	str	r3, [r7, #8]
 8006f4c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006f4e:	2330      	movs	r3, #48	; 0x30
 8006f50:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f52:	2302      	movs	r3, #2
 8006f54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f56:	2300      	movs	r3, #0
 8006f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006f5e:	2302      	movs	r3, #2
 8006f60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f62:	f107 030c 	add.w	r3, r7, #12
 8006f66:	4619      	mov	r1, r3
 8006f68:	4805      	ldr	r0, [pc, #20]	; (8006f80 <HAL_TIM_MspPostInit+0x70>)
 8006f6a:	f001 ff01 	bl	8008d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006f6e:	bf00      	nop
 8006f70:	3720      	adds	r7, #32
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	40000400 	.word	0x40000400
 8006f7c:	40023800 	.word	0x40023800
 8006f80:	40020400 	.word	0x40020400

08006f84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b08a      	sub	sp, #40	; 0x28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f8c:	f107 0314 	add.w	r3, r7, #20
 8006f90:	2200      	movs	r2, #0
 8006f92:	601a      	str	r2, [r3, #0]
 8006f94:	605a      	str	r2, [r3, #4]
 8006f96:	609a      	str	r2, [r3, #8]
 8006f98:	60da      	str	r2, [r3, #12]
 8006f9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a19      	ldr	r2, [pc, #100]	; (8007008 <HAL_UART_MspInit+0x84>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d12c      	bne.n	8007000 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	613b      	str	r3, [r7, #16]
 8006faa:	4b18      	ldr	r3, [pc, #96]	; (800700c <HAL_UART_MspInit+0x88>)
 8006fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fae:	4a17      	ldr	r2, [pc, #92]	; (800700c <HAL_UART_MspInit+0x88>)
 8006fb0:	f043 0310 	orr.w	r3, r3, #16
 8006fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8006fb6:	4b15      	ldr	r3, [pc, #84]	; (800700c <HAL_UART_MspInit+0x88>)
 8006fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fba:	f003 0310 	and.w	r3, r3, #16
 8006fbe:	613b      	str	r3, [r7, #16]
 8006fc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	60fb      	str	r3, [r7, #12]
 8006fc6:	4b11      	ldr	r3, [pc, #68]	; (800700c <HAL_UART_MspInit+0x88>)
 8006fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fca:	4a10      	ldr	r2, [pc, #64]	; (800700c <HAL_UART_MspInit+0x88>)
 8006fcc:	f043 0301 	orr.w	r3, r3, #1
 8006fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8006fd2:	4b0e      	ldr	r3, [pc, #56]	; (800700c <HAL_UART_MspInit+0x88>)
 8006fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	60fb      	str	r3, [r7, #12]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006fde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fec:	2300      	movs	r3, #0
 8006fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006ff0:	2307      	movs	r3, #7
 8006ff2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ff4:	f107 0314 	add.w	r3, r7, #20
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	4805      	ldr	r0, [pc, #20]	; (8007010 <HAL_UART_MspInit+0x8c>)
 8006ffc:	f001 feb8 	bl	8008d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007000:	bf00      	nop
 8007002:	3728      	adds	r7, #40	; 0x28
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	40011000 	.word	0x40011000
 800700c:	40023800 	.word	0x40023800
 8007010:	40020000 	.word	0x40020000

08007014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007014:	b480      	push	{r7}
 8007016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007018:	e7fe      	b.n	8007018 <NMI_Handler+0x4>

0800701a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800701a:	b480      	push	{r7}
 800701c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800701e:	e7fe      	b.n	800701e <HardFault_Handler+0x4>

08007020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007020:	b480      	push	{r7}
 8007022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007024:	e7fe      	b.n	8007024 <MemManage_Handler+0x4>

08007026 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007026:	b480      	push	{r7}
 8007028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800702a:	e7fe      	b.n	800702a <BusFault_Handler+0x4>

0800702c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800702c:	b480      	push	{r7}
 800702e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007030:	e7fe      	b.n	8007030 <UsageFault_Handler+0x4>

08007032 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007032:	b480      	push	{r7}
 8007034:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007036:	bf00      	nop
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007040:	b480      	push	{r7}
 8007042:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007044:	bf00      	nop
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800704e:	b480      	push	{r7}
 8007050:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007052:	bf00      	nop
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007060:	f000 f8e0 	bl	8007224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007064:	bf00      	nop
 8007066:	bd80      	pop	{r7, pc}

08007068 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800706c:	4802      	ldr	r0, [pc, #8]	; (8007078 <DMA1_Stream4_IRQHandler+0x10>)
 800706e:	f001 fc15 	bl	800889c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8007072:	bf00      	nop
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	20010638 	.word	0x20010638

0800707c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8007080:	4802      	ldr	r0, [pc, #8]	; (800708c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8007082:	f004 ff2f 	bl	800bee4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8007086:	bf00      	nop
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	20010770 	.word	0x20010770

08007090 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007094:	4802      	ldr	r0, [pc, #8]	; (80070a0 <TIM3_IRQHandler+0x10>)
 8007096:	f004 ff25 	bl	800bee4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800709a:	bf00      	nop
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	200106e0 	.word	0x200106e0

080070a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(encoder1_Pin);
 80070a8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80070ac:	f001 fffe 	bl	80090ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(encoder2_Pin);
 80070b0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80070b4:	f001 fffa 	bl	80090ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(record_pin_Pin);
 80070b8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80070bc:	f001 fff6 	bl	80090ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80070c0:	bf00      	nop
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80070c8:	4802      	ldr	r0, [pc, #8]	; (80070d4 <DMA2_Stream0_IRQHandler+0x10>)
 80070ca:	f001 fbe7 	bl	800889c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80070ce:	bf00      	nop
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	20010578 	.word	0x20010578

080070d8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80070dc:	4802      	ldr	r0, [pc, #8]	; (80070e8 <DMA2_Stream2_IRQHandler+0x10>)
 80070de:	f001 fbdd 	bl	800889c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80070e2:	bf00      	nop
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	200105d8 	.word	0x200105d8

080070ec <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80070f0:	4802      	ldr	r0, [pc, #8]	; (80070fc <DMA2_Stream4_IRQHandler+0x10>)
 80070f2:	f001 fbd3 	bl	800889c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80070f6:	bf00      	nop
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	20010414 	.word	0x20010414

08007100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007100:	b480      	push	{r7}
 8007102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007104:	4b08      	ldr	r3, [pc, #32]	; (8007128 <SystemInit+0x28>)
 8007106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800710a:	4a07      	ldr	r2, [pc, #28]	; (8007128 <SystemInit+0x28>)
 800710c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007114:	4b04      	ldr	r3, [pc, #16]	; (8007128 <SystemInit+0x28>)
 8007116:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800711a:	609a      	str	r2, [r3, #8]
#endif
}
 800711c:	bf00      	nop
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	e000ed00 	.word	0xe000ed00

0800712c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800712c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007164 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007130:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007132:	e003      	b.n	800713c <LoopCopyDataInit>

08007134 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007134:	4b0c      	ldr	r3, [pc, #48]	; (8007168 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007136:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007138:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800713a:	3104      	adds	r1, #4

0800713c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800713c:	480b      	ldr	r0, [pc, #44]	; (800716c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800713e:	4b0c      	ldr	r3, [pc, #48]	; (8007170 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007140:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007142:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007144:	d3f6      	bcc.n	8007134 <CopyDataInit>
  ldr  r2, =_sbss
 8007146:	4a0b      	ldr	r2, [pc, #44]	; (8007174 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007148:	e002      	b.n	8007150 <LoopFillZerobss>

0800714a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800714a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800714c:	f842 3b04 	str.w	r3, [r2], #4

08007150 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007150:	4b09      	ldr	r3, [pc, #36]	; (8007178 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007152:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007154:	d3f9      	bcc.n	800714a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007156:	f7ff ffd3 	bl	8007100 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800715a:	f006 f93f 	bl	800d3dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800715e:	f7fe fac5 	bl	80056ec <main>
  bx  lr    
 8007162:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8007164:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007168:	0800fcc0 	.word	0x0800fcc0
  ldr  r0, =_sdata
 800716c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007170:	20008fec 	.word	0x20008fec
  ldr  r2, =_sbss
 8007174:	20008fec 	.word	0x20008fec
  ldr  r3, = _ebss
 8007178:	200132e4 	.word	0x200132e4

0800717c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800717c:	e7fe      	b.n	800717c <ADC_IRQHandler>
	...

08007180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007184:	4b0e      	ldr	r3, [pc, #56]	; (80071c0 <HAL_Init+0x40>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a0d      	ldr	r2, [pc, #52]	; (80071c0 <HAL_Init+0x40>)
 800718a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800718e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007190:	4b0b      	ldr	r3, [pc, #44]	; (80071c0 <HAL_Init+0x40>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a0a      	ldr	r2, [pc, #40]	; (80071c0 <HAL_Init+0x40>)
 8007196:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800719a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800719c:	4b08      	ldr	r3, [pc, #32]	; (80071c0 <HAL_Init+0x40>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a07      	ldr	r2, [pc, #28]	; (80071c0 <HAL_Init+0x40>)
 80071a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80071a8:	2003      	movs	r0, #3
 80071aa:	f001 f9bf 	bl	800852c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80071ae:	2000      	movs	r0, #0
 80071b0:	f000 f808 	bl	80071c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80071b4:	f7ff fbc0 	bl	8006938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	40023c00 	.word	0x40023c00

080071c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80071cc:	4b12      	ldr	r3, [pc, #72]	; (8007218 <HAL_InitTick+0x54>)
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	4b12      	ldr	r3, [pc, #72]	; (800721c <HAL_InitTick+0x58>)
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	4619      	mov	r1, r3
 80071d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80071da:	fbb3 f3f1 	udiv	r3, r3, r1
 80071de:	fbb2 f3f3 	udiv	r3, r2, r3
 80071e2:	4618      	mov	r0, r3
 80071e4:	f001 f9d7 	bl	8008596 <HAL_SYSTICK_Config>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d001      	beq.n	80071f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e00e      	b.n	8007210 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2b0f      	cmp	r3, #15
 80071f6:	d80a      	bhi.n	800720e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80071f8:	2200      	movs	r2, #0
 80071fa:	6879      	ldr	r1, [r7, #4]
 80071fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007200:	f001 f99f 	bl	8008542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007204:	4a06      	ldr	r2, [pc, #24]	; (8007220 <HAL_InitTick+0x5c>)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800720a:	2300      	movs	r3, #0
 800720c:	e000      	b.n	8007210 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
}
 8007210:	4618      	mov	r0, r3
 8007212:	3708      	adds	r7, #8
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	20008f7c 	.word	0x20008f7c
 800721c:	20008f84 	.word	0x20008f84
 8007220:	20008f80 	.word	0x20008f80

08007224 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007224:	b480      	push	{r7}
 8007226:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007228:	4b06      	ldr	r3, [pc, #24]	; (8007244 <HAL_IncTick+0x20>)
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	461a      	mov	r2, r3
 800722e:	4b06      	ldr	r3, [pc, #24]	; (8007248 <HAL_IncTick+0x24>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4413      	add	r3, r2
 8007234:	4a04      	ldr	r2, [pc, #16]	; (8007248 <HAL_IncTick+0x24>)
 8007236:	6013      	str	r3, [r2, #0]
}
 8007238:	bf00      	nop
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	20008f84 	.word	0x20008f84
 8007248:	200132e0 	.word	0x200132e0

0800724c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800724c:	b480      	push	{r7}
 800724e:	af00      	add	r7, sp, #0
  return uwTick;
 8007250:	4b03      	ldr	r3, [pc, #12]	; (8007260 <HAL_GetTick+0x14>)
 8007252:	681b      	ldr	r3, [r3, #0]
}
 8007254:	4618      	mov	r0, r3
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	200132e0 	.word	0x200132e0

08007264 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800726c:	f7ff ffee 	bl	800724c <HAL_GetTick>
 8007270:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800727c:	d005      	beq.n	800728a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800727e:	4b0a      	ldr	r3, [pc, #40]	; (80072a8 <HAL_Delay+0x44>)
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	461a      	mov	r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	4413      	add	r3, r2
 8007288:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800728a:	bf00      	nop
 800728c:	f7ff ffde 	bl	800724c <HAL_GetTick>
 8007290:	4602      	mov	r2, r0
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	429a      	cmp	r2, r3
 800729a:	d8f7      	bhi.n	800728c <HAL_Delay+0x28>
  {
  }
}
 800729c:	bf00      	nop
 800729e:	bf00      	nop
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	20008f84 	.word	0x20008f84

080072ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80072b4:	2300      	movs	r3, #0
 80072b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d101      	bne.n	80072c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e033      	b.n	800732a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d109      	bne.n	80072de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7ff fb5c 	bl	8006988 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e2:	f003 0310 	and.w	r3, r3, #16
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d118      	bne.n	800731c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80072f2:	f023 0302 	bic.w	r3, r3, #2
 80072f6:	f043 0202 	orr.w	r2, r3, #2
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fbde 	bl	8007ac0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730e:	f023 0303 	bic.w	r3, r3, #3
 8007312:	f043 0201 	orr.w	r2, r3, #1
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	641a      	str	r2, [r3, #64]	; 0x40
 800731a:	e001      	b.n	8007320 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007328:	7bfb      	ldrb	r3, [r7, #15]
}
 800732a:	4618      	mov	r0, r3
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
	...

08007334 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8007334:	b480      	push	{r7}
 8007336:	b085      	sub	sp, #20
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800733c:	2300      	movs	r3, #0
 800733e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007346:	2b01      	cmp	r3, #1
 8007348:	d101      	bne.n	800734e <HAL_ADC_Start+0x1a>
 800734a:	2302      	movs	r3, #2
 800734c:	e097      	b.n	800747e <HAL_ADC_Start+0x14a>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f003 0301 	and.w	r3, r3, #1
 8007360:	2b01      	cmp	r3, #1
 8007362:	d018      	beq.n	8007396 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	689a      	ldr	r2, [r3, #8]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f042 0201 	orr.w	r2, r2, #1
 8007372:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007374:	4b45      	ldr	r3, [pc, #276]	; (800748c <HAL_ADC_Start+0x158>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a45      	ldr	r2, [pc, #276]	; (8007490 <HAL_ADC_Start+0x15c>)
 800737a:	fba2 2303 	umull	r2, r3, r2, r3
 800737e:	0c9a      	lsrs	r2, r3, #18
 8007380:	4613      	mov	r3, r2
 8007382:	005b      	lsls	r3, r3, #1
 8007384:	4413      	add	r3, r2
 8007386:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007388:	e002      	b.n	8007390 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	3b01      	subs	r3, #1
 800738e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1f9      	bne.n	800738a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	f003 0301 	and.w	r3, r3, #1
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d15f      	bne.n	8007464 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80073ac:	f023 0301 	bic.w	r3, r3, #1
 80073b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d007      	beq.n	80073d6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80073ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073e2:	d106      	bne.n	80073f2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073e8:	f023 0206 	bic.w	r2, r3, #6
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	645a      	str	r2, [r3, #68]	; 0x44
 80073f0:	e002      	b.n	80073f8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007400:	4b24      	ldr	r3, [pc, #144]	; (8007494 <HAL_ADC_Start+0x160>)
 8007402:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800740c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f003 031f 	and.w	r3, r3, #31
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10f      	bne.n	800743a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d129      	bne.n	800747c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	689a      	ldr	r2, [r3, #8]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007436:	609a      	str	r2, [r3, #8]
 8007438:	e020      	b.n	800747c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a16      	ldr	r2, [pc, #88]	; (8007498 <HAL_ADC_Start+0x164>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d11b      	bne.n	800747c <HAL_ADC_Start+0x148>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800744e:	2b00      	cmp	r3, #0
 8007450:	d114      	bne.n	800747c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	689a      	ldr	r2, [r3, #8]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007460:	609a      	str	r2, [r3, #8]
 8007462:	e00b      	b.n	800747c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007468:	f043 0210 	orr.w	r2, r3, #16
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007474:	f043 0201 	orr.w	r2, r3, #1
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	20008f7c 	.word	0x20008f7c
 8007490:	431bde83 	.word	0x431bde83
 8007494:	40012300 	.word	0x40012300
 8007498:	40012000 	.word	0x40012000

0800749c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80074a6:	2300      	movs	r3, #0
 80074a8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074b8:	d113      	bne.n	80074e2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80074c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074c8:	d10b      	bne.n	80074e2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ce:	f043 0220 	orr.w	r2, r3, #32
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e063      	b.n	80075aa <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80074e2:	f7ff feb3 	bl	800724c <HAL_GetTick>
 80074e6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80074e8:	e021      	b.n	800752e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f0:	d01d      	beq.n	800752e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d007      	beq.n	8007508 <HAL_ADC_PollForConversion+0x6c>
 80074f8:	f7ff fea8 	bl	800724c <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	683a      	ldr	r2, [r7, #0]
 8007504:	429a      	cmp	r2, r3
 8007506:	d212      	bcs.n	800752e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 0302 	and.w	r3, r3, #2
 8007512:	2b02      	cmp	r3, #2
 8007514:	d00b      	beq.n	800752e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751a:	f043 0204 	orr.w	r2, r3, #4
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e03d      	b.n	80075aa <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0302 	and.w	r3, r3, #2
 8007538:	2b02      	cmp	r3, #2
 800753a:	d1d6      	bne.n	80074ea <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f06f 0212 	mvn.w	r2, #18
 8007544:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800755c:	2b00      	cmp	r3, #0
 800755e:	d123      	bne.n	80075a8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007564:	2b00      	cmp	r3, #0
 8007566:	d11f      	bne.n	80075a8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007572:	2b00      	cmp	r3, #0
 8007574:	d006      	beq.n	8007584 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007580:	2b00      	cmp	r3, #0
 8007582:	d111      	bne.n	80075a8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007588:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007594:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007598:	2b00      	cmp	r3, #0
 800759a:	d105      	bne.n	80075a8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a0:	f043 0201 	orr.w	r2, r3, #1
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
	...

080075b4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b086      	sub	sp, #24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80075c0:	2300      	movs	r3, #0
 80075c2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d101      	bne.n	80075d2 <HAL_ADC_Start_DMA+0x1e>
 80075ce:	2302      	movs	r3, #2
 80075d0:	e0ce      	b.n	8007770 <HAL_ADC_Start_DMA+0x1bc>
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	f003 0301 	and.w	r3, r3, #1
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d018      	beq.n	800761a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	689a      	ldr	r2, [r3, #8]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f042 0201 	orr.w	r2, r2, #1
 80075f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80075f8:	4b5f      	ldr	r3, [pc, #380]	; (8007778 <HAL_ADC_Start_DMA+0x1c4>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a5f      	ldr	r2, [pc, #380]	; (800777c <HAL_ADC_Start_DMA+0x1c8>)
 80075fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007602:	0c9a      	lsrs	r2, r3, #18
 8007604:	4613      	mov	r3, r2
 8007606:	005b      	lsls	r3, r3, #1
 8007608:	4413      	add	r3, r2
 800760a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800760c:	e002      	b.n	8007614 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	3b01      	subs	r3, #1
 8007612:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1f9      	bne.n	800760e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007628:	d107      	bne.n	800763a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	689a      	ldr	r2, [r3, #8]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007638:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f003 0301 	and.w	r3, r3, #1
 8007644:	2b01      	cmp	r3, #1
 8007646:	f040 8086 	bne.w	8007756 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007652:	f023 0301 	bic.w	r3, r3, #1
 8007656:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007668:	2b00      	cmp	r3, #0
 800766a:	d007      	beq.n	800767c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007670:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007674:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007680:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007688:	d106      	bne.n	8007698 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800768e:	f023 0206 	bic.w	r2, r3, #6
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	645a      	str	r2, [r3, #68]	; 0x44
 8007696:	e002      	b.n	800769e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2200      	movs	r2, #0
 800769c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80076a6:	4b36      	ldr	r3, [pc, #216]	; (8007780 <HAL_ADC_Start_DMA+0x1cc>)
 80076a8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ae:	4a35      	ldr	r2, [pc, #212]	; (8007784 <HAL_ADC_Start_DMA+0x1d0>)
 80076b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b6:	4a34      	ldr	r2, [pc, #208]	; (8007788 <HAL_ADC_Start_DMA+0x1d4>)
 80076b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076be:	4a33      	ldr	r2, [pc, #204]	; (800778c <HAL_ADC_Start_DMA+0x1d8>)
 80076c0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80076ca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	685a      	ldr	r2, [r3, #4]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80076da:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	689a      	ldr	r2, [r3, #8]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076ea:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	334c      	adds	r3, #76	; 0x4c
 80076f6:	4619      	mov	r1, r3
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f001 f806 	bl	800870c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	f003 031f 	and.w	r3, r3, #31
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10f      	bne.n	800772c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007716:	2b00      	cmp	r3, #0
 8007718:	d129      	bne.n	800776e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	689a      	ldr	r2, [r3, #8]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007728:	609a      	str	r2, [r3, #8]
 800772a:	e020      	b.n	800776e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a17      	ldr	r2, [pc, #92]	; (8007790 <HAL_ADC_Start_DMA+0x1dc>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d11b      	bne.n	800776e <HAL_ADC_Start_DMA+0x1ba>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007740:	2b00      	cmp	r3, #0
 8007742:	d114      	bne.n	800776e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	689a      	ldr	r2, [r3, #8]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007752:	609a      	str	r2, [r3, #8]
 8007754:	e00b      	b.n	800776e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775a:	f043 0210 	orr.w	r2, r3, #16
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007766:	f043 0201 	orr.w	r2, r3, #1
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3718      	adds	r7, #24
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	20008f7c 	.word	0x20008f7c
 800777c:	431bde83 	.word	0x431bde83
 8007780:	40012300 	.word	0x40012300
 8007784:	08007cb9 	.word	0x08007cb9
 8007788:	08007d73 	.word	0x08007d73
 800778c:	08007d8f 	.word	0x08007d8f
 8007790:	40012000 	.word	0x40012000

08007794 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800779c:	2300      	movs	r3, #0
 800779e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d101      	bne.n	80077ae <HAL_ADC_Stop_DMA+0x1a>
 80077aa:	2302      	movs	r3, #2
 80077ac:	e048      	b.n	8007840 <HAL_ADC_Stop_DMA+0xac>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	689a      	ldr	r2, [r3, #8]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f022 0201 	bic.w	r2, r2, #1
 80077c4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	f003 0301 	and.w	r3, r3, #1
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d130      	bne.n	8007836 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	689a      	ldr	r2, [r3, #8]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077e2:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d10f      	bne.n	8007812 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f6:	4618      	mov	r0, r3
 80077f8:	f000 ffe0 	bl	80087bc <HAL_DMA_Abort>
 80077fc:	4603      	mov	r3, r0
 80077fe:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8007800:	7bfb      	ldrb	r3, [r7, #15]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d005      	beq.n	8007812 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	685a      	ldr	r2, [r3, #4]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8007820:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007826:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800782a:	f023 0301 	bic.w	r3, r3, #1
 800782e:	f043 0201 	orr.w	r2, r3, #1
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800783e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007840:	4618      	mov	r0, r3
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007866:	2300      	movs	r3, #0
 8007868:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007870:	2b01      	cmp	r3, #1
 8007872:	d101      	bne.n	8007878 <HAL_ADC_ConfigChannel+0x1c>
 8007874:	2302      	movs	r3, #2
 8007876:	e113      	b.n	8007aa0 <HAL_ADC_ConfigChannel+0x244>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2b09      	cmp	r3, #9
 8007886:	d925      	bls.n	80078d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68d9      	ldr	r1, [r3, #12]
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	b29b      	uxth	r3, r3
 8007894:	461a      	mov	r2, r3
 8007896:	4613      	mov	r3, r2
 8007898:	005b      	lsls	r3, r3, #1
 800789a:	4413      	add	r3, r2
 800789c:	3b1e      	subs	r3, #30
 800789e:	2207      	movs	r2, #7
 80078a0:	fa02 f303 	lsl.w	r3, r2, r3
 80078a4:	43da      	mvns	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	400a      	ands	r2, r1
 80078ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68d9      	ldr	r1, [r3, #12]
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	689a      	ldr	r2, [r3, #8]
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	b29b      	uxth	r3, r3
 80078be:	4618      	mov	r0, r3
 80078c0:	4603      	mov	r3, r0
 80078c2:	005b      	lsls	r3, r3, #1
 80078c4:	4403      	add	r3, r0
 80078c6:	3b1e      	subs	r3, #30
 80078c8:	409a      	lsls	r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	430a      	orrs	r2, r1
 80078d0:	60da      	str	r2, [r3, #12]
 80078d2:	e022      	b.n	800791a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6919      	ldr	r1, [r3, #16]
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	b29b      	uxth	r3, r3
 80078e0:	461a      	mov	r2, r3
 80078e2:	4613      	mov	r3, r2
 80078e4:	005b      	lsls	r3, r3, #1
 80078e6:	4413      	add	r3, r2
 80078e8:	2207      	movs	r2, #7
 80078ea:	fa02 f303 	lsl.w	r3, r2, r3
 80078ee:	43da      	mvns	r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	400a      	ands	r2, r1
 80078f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	6919      	ldr	r1, [r3, #16]
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	689a      	ldr	r2, [r3, #8]
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	b29b      	uxth	r3, r3
 8007908:	4618      	mov	r0, r3
 800790a:	4603      	mov	r3, r0
 800790c:	005b      	lsls	r3, r3, #1
 800790e:	4403      	add	r3, r0
 8007910:	409a      	lsls	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	430a      	orrs	r2, r1
 8007918:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	2b06      	cmp	r3, #6
 8007920:	d824      	bhi.n	800796c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	685a      	ldr	r2, [r3, #4]
 800792c:	4613      	mov	r3, r2
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	4413      	add	r3, r2
 8007932:	3b05      	subs	r3, #5
 8007934:	221f      	movs	r2, #31
 8007936:	fa02 f303 	lsl.w	r3, r2, r3
 800793a:	43da      	mvns	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	400a      	ands	r2, r1
 8007942:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	b29b      	uxth	r3, r3
 8007950:	4618      	mov	r0, r3
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	685a      	ldr	r2, [r3, #4]
 8007956:	4613      	mov	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
 800795c:	3b05      	subs	r3, #5
 800795e:	fa00 f203 	lsl.w	r2, r0, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	430a      	orrs	r2, r1
 8007968:	635a      	str	r2, [r3, #52]	; 0x34
 800796a:	e04c      	b.n	8007a06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	2b0c      	cmp	r3, #12
 8007972:	d824      	bhi.n	80079be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	685a      	ldr	r2, [r3, #4]
 800797e:	4613      	mov	r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4413      	add	r3, r2
 8007984:	3b23      	subs	r3, #35	; 0x23
 8007986:	221f      	movs	r2, #31
 8007988:	fa02 f303 	lsl.w	r3, r2, r3
 800798c:	43da      	mvns	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	400a      	ands	r2, r1
 8007994:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	4618      	mov	r0, r3
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	685a      	ldr	r2, [r3, #4]
 80079a8:	4613      	mov	r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4413      	add	r3, r2
 80079ae:	3b23      	subs	r3, #35	; 0x23
 80079b0:	fa00 f203 	lsl.w	r2, r0, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	430a      	orrs	r2, r1
 80079ba:	631a      	str	r2, [r3, #48]	; 0x30
 80079bc:	e023      	b.n	8007a06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	685a      	ldr	r2, [r3, #4]
 80079c8:	4613      	mov	r3, r2
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	4413      	add	r3, r2
 80079ce:	3b41      	subs	r3, #65	; 0x41
 80079d0:	221f      	movs	r2, #31
 80079d2:	fa02 f303 	lsl.w	r3, r2, r3
 80079d6:	43da      	mvns	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	400a      	ands	r2, r1
 80079de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	4618      	mov	r0, r3
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	685a      	ldr	r2, [r3, #4]
 80079f2:	4613      	mov	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	4413      	add	r3, r2
 80079f8:	3b41      	subs	r3, #65	; 0x41
 80079fa:	fa00 f203 	lsl.w	r2, r0, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	430a      	orrs	r2, r1
 8007a04:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007a06:	4b29      	ldr	r3, [pc, #164]	; (8007aac <HAL_ADC_ConfigChannel+0x250>)
 8007a08:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a28      	ldr	r2, [pc, #160]	; (8007ab0 <HAL_ADC_ConfigChannel+0x254>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d10f      	bne.n	8007a34 <HAL_ADC_ConfigChannel+0x1d8>
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2b12      	cmp	r3, #18
 8007a1a:	d10b      	bne.n	8007a34 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a1d      	ldr	r2, [pc, #116]	; (8007ab0 <HAL_ADC_ConfigChannel+0x254>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d12b      	bne.n	8007a96 <HAL_ADC_ConfigChannel+0x23a>
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a1c      	ldr	r2, [pc, #112]	; (8007ab4 <HAL_ADC_ConfigChannel+0x258>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d003      	beq.n	8007a50 <HAL_ADC_ConfigChannel+0x1f4>
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2b11      	cmp	r3, #17
 8007a4e:	d122      	bne.n	8007a96 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a11      	ldr	r2, [pc, #68]	; (8007ab4 <HAL_ADC_ConfigChannel+0x258>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d111      	bne.n	8007a96 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007a72:	4b11      	ldr	r3, [pc, #68]	; (8007ab8 <HAL_ADC_ConfigChannel+0x25c>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a11      	ldr	r2, [pc, #68]	; (8007abc <HAL_ADC_ConfigChannel+0x260>)
 8007a78:	fba2 2303 	umull	r2, r3, r2, r3
 8007a7c:	0c9a      	lsrs	r2, r3, #18
 8007a7e:	4613      	mov	r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	4413      	add	r3, r2
 8007a84:	005b      	lsls	r3, r3, #1
 8007a86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007a88:	e002      	b.n	8007a90 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1f9      	bne.n	8007a8a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3714      	adds	r7, #20
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	40012300 	.word	0x40012300
 8007ab0:	40012000 	.word	0x40012000
 8007ab4:	10000012 	.word	0x10000012
 8007ab8:	20008f7c 	.word	0x20008f7c
 8007abc:	431bde83 	.word	0x431bde83

08007ac0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007ac8:	4b79      	ldr	r3, [pc, #484]	; (8007cb0 <ADC_Init+0x1f0>)
 8007aca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	685a      	ldr	r2, [r3, #4]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	431a      	orrs	r2, r3
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	685a      	ldr	r2, [r3, #4]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007af4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	6859      	ldr	r1, [r3, #4]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	021a      	lsls	r2, r3, #8
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	430a      	orrs	r2, r1
 8007b08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007b18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	6859      	ldr	r1, [r3, #4]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	689a      	ldr	r2, [r3, #8]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	430a      	orrs	r2, r1
 8007b2a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	689a      	ldr	r2, [r3, #8]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6899      	ldr	r1, [r3, #8]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	68da      	ldr	r2, [r3, #12]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	430a      	orrs	r2, r1
 8007b4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b52:	4a58      	ldr	r2, [pc, #352]	; (8007cb4 <ADC_Init+0x1f4>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d022      	beq.n	8007b9e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	689a      	ldr	r2, [r3, #8]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007b66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6899      	ldr	r1, [r3, #8]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	430a      	orrs	r2, r1
 8007b78:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	689a      	ldr	r2, [r3, #8]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007b88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	6899      	ldr	r1, [r3, #8]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	430a      	orrs	r2, r1
 8007b9a:	609a      	str	r2, [r3, #8]
 8007b9c:	e00f      	b.n	8007bbe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	689a      	ldr	r2, [r3, #8]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007bac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	689a      	ldr	r2, [r3, #8]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007bbc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	689a      	ldr	r2, [r3, #8]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f022 0202 	bic.w	r2, r2, #2
 8007bcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	6899      	ldr	r1, [r3, #8]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	7e1b      	ldrb	r3, [r3, #24]
 8007bd8:	005a      	lsls	r2, r3, #1
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	430a      	orrs	r2, r1
 8007be0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d01b      	beq.n	8007c24 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	685a      	ldr	r2, [r3, #4]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bfa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	685a      	ldr	r2, [r3, #4]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007c0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	6859      	ldr	r1, [r3, #4]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c16:	3b01      	subs	r3, #1
 8007c18:	035a      	lsls	r2, r3, #13
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	430a      	orrs	r2, r1
 8007c20:	605a      	str	r2, [r3, #4]
 8007c22:	e007      	b.n	8007c34 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c32:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007c42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	69db      	ldr	r3, [r3, #28]
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	051a      	lsls	r2, r3, #20
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	430a      	orrs	r2, r1
 8007c58:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	689a      	ldr	r2, [r3, #8]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007c68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	6899      	ldr	r1, [r3, #8]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c76:	025a      	lsls	r2, r3, #9
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	430a      	orrs	r2, r1
 8007c7e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	689a      	ldr	r2, [r3, #8]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6899      	ldr	r1, [r3, #8]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	695b      	ldr	r3, [r3, #20]
 8007c9a:	029a      	lsls	r2, r3, #10
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	430a      	orrs	r2, r1
 8007ca2:	609a      	str	r2, [r3, #8]
}
 8007ca4:	bf00      	nop
 8007ca6:	3714      	adds	r7, #20
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr
 8007cb0:	40012300 	.word	0x40012300
 8007cb4:	0f000001 	.word	0x0f000001

08007cb8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d13c      	bne.n	8007d4c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d12b      	bne.n	8007d44 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d127      	bne.n	8007d44 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d006      	beq.n	8007d10 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d119      	bne.n	8007d44 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	685a      	ldr	r2, [r3, #4]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f022 0220 	bic.w	r2, r2, #32
 8007d1e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d105      	bne.n	8007d44 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3c:	f043 0201 	orr.w	r2, r3, #1
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f7fe fd4d 	bl	80067e4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007d4a:	e00e      	b.n	8007d6a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d50:	f003 0310 	and.w	r3, r3, #16
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d003      	beq.n	8007d60 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007d58:	68f8      	ldr	r0, [r7, #12]
 8007d5a:	f7ff fd75 	bl	8007848 <HAL_ADC_ErrorCallback>
}
 8007d5e:	e004      	b.n	8007d6a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	4798      	blx	r3
}
 8007d6a:	bf00      	nop
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b084      	sub	sp, #16
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f7fe fd1f 	bl	80067c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007d86:	bf00      	nop
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b084      	sub	sp, #16
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2240      	movs	r2, #64	; 0x40
 8007da0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007da6:	f043 0204 	orr.w	r2, r3, #4
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f7ff fd4a 	bl	8007848 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007db4:	bf00      	nop
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b087      	sub	sp, #28
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	617b      	str	r3, [r7, #20]
 8007dcc:	2300      	movs	r3, #0
 8007dce:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d101      	bne.n	8007dde <HAL_ADCEx_InjectedStart+0x22>
 8007dda:	2302      	movs	r3, #2
 8007ddc:	e0aa      	b.n	8007f34 <HAL_ADCEx_InjectedStart+0x178>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f003 0301 	and.w	r3, r3, #1
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d018      	beq.n	8007e26 <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	689a      	ldr	r2, [r3, #8]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f042 0201 	orr.w	r2, r2, #1
 8007e02:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007e04:	4b4e      	ldr	r3, [pc, #312]	; (8007f40 <HAL_ADCEx_InjectedStart+0x184>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a4e      	ldr	r2, [pc, #312]	; (8007f44 <HAL_ADCEx_InjectedStart+0x188>)
 8007e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e0e:	0c9a      	lsrs	r2, r3, #18
 8007e10:	4613      	mov	r3, r2
 8007e12:	005b      	lsls	r3, r3, #1
 8007e14:	4413      	add	r3, r2
 8007e16:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007e18:	e002      	b.n	8007e20 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1f9      	bne.n	8007e1a <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	f003 0301 	and.w	r3, r3, #1
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d172      	bne.n	8007f1a <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e38:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007e3c:	f023 0301 	bic.w	r3, r3, #1
 8007e40:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d102      	bne.n	8007e5a <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f06f 0204 	mvn.w	r2, #4
 8007e6a:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007e6c:	4b36      	ldr	r3, [pc, #216]	; (8007f48 <HAL_ADCEx_InjectedStart+0x18c>)
 8007e6e:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	f003 031f 	and.w	r3, r3, #31
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d124      	bne.n	8007ec6 <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	bf0c      	ite	eq
 8007e8a:	2301      	moveq	r3, #1
 8007e8c:	2300      	movne	r3, #0
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	bf0c      	ite	eq
 8007ea0:	2301      	moveq	r3, #1
 8007ea2:	2300      	movne	r3, #0
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d041      	beq.n	8007f32 <HAL_ADCEx_InjectedStart+0x176>
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d03e      	beq.n	8007f32 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	689a      	ldr	r2, [r3, #8]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8007ec2:	609a      	str	r2, [r3, #8]
 8007ec4:	e035      	b.n	8007f32 <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	bf0c      	ite	eq
 8007ed4:	2301      	moveq	r3, #1
 8007ed6:	2300      	movne	r3, #0
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	bf0c      	ite	eq
 8007eea:	2301      	moveq	r3, #1
 8007eec:	2300      	movne	r3, #0
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a15      	ldr	r2, [pc, #84]	; (8007f4c <HAL_ADCEx_InjectedStart+0x190>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d11a      	bne.n	8007f32 <HAL_ADCEx_InjectedStart+0x176>
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d017      	beq.n	8007f32 <HAL_ADCEx_InjectedStart+0x176>
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d014      	beq.n	8007f32 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	689a      	ldr	r2, [r3, #8]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8007f16:	609a      	str	r2, [r3, #8]
 8007f18:	e00b      	b.n	8007f32 <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1e:	f043 0210 	orr.w	r2, r3, #16
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f2a:	f043 0201 	orr.w	r2, r3, #1
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	371c      	adds	r7, #28
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr
 8007f40:	20008f7c 	.word	0x20008f7c
 8007f44:	431bde83 	.word	0x431bde83
 8007f48:	40012300 	.word	0x40012300
 8007f4c:	40012000 	.word	0x40012000

08007f50 <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d101      	bne.n	8007f6a <HAL_ADCEx_InjectedStop+0x1a>
 8007f66:	2302      	movs	r3, #2
 8007f68:	e037      	b.n	8007fda <HAL_ADCEx_InjectedStop+0x8a>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d120      	bne.n	8007fc0 <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d119      	bne.n	8007fc0 <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	689a      	ldr	r2, [r3, #8]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f022 0201 	bic.w	r2, r2, #1
 8007f9a:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	f003 0301 	and.w	r3, r3, #1
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d112      	bne.n	8007fd0 <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007fb2:	f023 0301 	bic.w	r3, r3, #1
 8007fb6:	f043 0201 	orr.w	r2, r3, #1
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8007fbe:	e007      	b.n	8007fd0 <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc4:	f043 0220 	orr.w	r2, r3, #32
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8007fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
	...

08007fe8 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f06f 0204 	mvn.w	r2, #4
 8007ffe:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	3b01      	subs	r3, #1
 8008004:	2b03      	cmp	r3, #3
 8008006:	d81f      	bhi.n	8008048 <HAL_ADCEx_InjectedGetValue+0x60>
 8008008:	a201      	add	r2, pc, #4	; (adr r2, 8008010 <HAL_ADCEx_InjectedGetValue+0x28>)
 800800a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800800e:	bf00      	nop
 8008010:	0800803f 	.word	0x0800803f
 8008014:	08008035 	.word	0x08008035
 8008018:	0800802b 	.word	0x0800802b
 800801c:	08008021 	.word	0x08008021
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008026:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8008028:	e00f      	b.n	800804a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008030:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8008032:	e00a      	b.n	800804a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803a:	60fb      	str	r3, [r7, #12]
    }
    break;
 800803c:	e005      	b.n	800804a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008044:	60fb      	str	r3, [r7, #12]
    }
    break;
 8008046:	e000      	b.n	800804a <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8008048:	bf00      	nop
  }
  return tmp;
 800804a:	68fb      	ldr	r3, [r7, #12]
}
 800804c:	4618      	mov	r0, r3
 800804e:	3714      	adds	r7, #20
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8008058:	b480      	push	{r7}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008068:	2b01      	cmp	r3, #1
 800806a:	d101      	bne.n	8008070 <HAL_ADCEx_InjectedConfigChannel+0x18>
 800806c:	2302      	movs	r3, #2
 800806e:	e17e      	b.n	800836e <HAL_ADCEx_InjectedConfigChannel+0x316>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2b09      	cmp	r3, #9
 800807e:	d925      	bls.n	80080cc <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	68d9      	ldr	r1, [r3, #12]
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	b29b      	uxth	r3, r3
 800808c:	461a      	mov	r2, r3
 800808e:	4613      	mov	r3, r2
 8008090:	005b      	lsls	r3, r3, #1
 8008092:	4413      	add	r3, r2
 8008094:	3b1e      	subs	r3, #30
 8008096:	2207      	movs	r2, #7
 8008098:	fa02 f303 	lsl.w	r3, r2, r3
 800809c:	43da      	mvns	r2, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	400a      	ands	r2, r1
 80080a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	68d9      	ldr	r1, [r3, #12]
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	689a      	ldr	r2, [r3, #8]
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	4618      	mov	r0, r3
 80080b8:	4603      	mov	r3, r0
 80080ba:	005b      	lsls	r3, r3, #1
 80080bc:	4403      	add	r3, r0
 80080be:	3b1e      	subs	r3, #30
 80080c0:	409a      	lsls	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	430a      	orrs	r2, r1
 80080c8:	60da      	str	r2, [r3, #12]
 80080ca:	e022      	b.n	8008112 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	6919      	ldr	r1, [r3, #16]
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	461a      	mov	r2, r3
 80080da:	4613      	mov	r3, r2
 80080dc:	005b      	lsls	r3, r3, #1
 80080de:	4413      	add	r3, r2
 80080e0:	2207      	movs	r2, #7
 80080e2:	fa02 f303 	lsl.w	r3, r2, r3
 80080e6:	43da      	mvns	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	400a      	ands	r2, r1
 80080ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	6919      	ldr	r1, [r3, #16]
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	689a      	ldr	r2, [r3, #8]
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	b29b      	uxth	r3, r3
 8008100:	4618      	mov	r0, r3
 8008102:	4603      	mov	r3, r0
 8008104:	005b      	lsls	r3, r3, #1
 8008106:	4403      	add	r3, r0
 8008108:	409a      	lsls	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	430a      	orrs	r2, r1
 8008110:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8008120:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	3b01      	subs	r3, #1
 800812e:	051a      	lsls	r2, r3, #20
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	430a      	orrs	r2, r1
 8008136:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	b2da      	uxtb	r2, r3
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	691b      	ldr	r3, [r3, #16]
 8008148:	b2db      	uxtb	r3, r3
 800814a:	1ad3      	subs	r3, r2, r3
 800814c:	b2db      	uxtb	r3, r3
 800814e:	3303      	adds	r3, #3
 8008150:	b2db      	uxtb	r3, r3
 8008152:	461a      	mov	r2, r3
 8008154:	4613      	mov	r3, r2
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4413      	add	r3, r2
 800815a:	221f      	movs	r2, #31
 800815c:	fa02 f303 	lsl.w	r3, r2, r3
 8008160:	43da      	mvns	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	400a      	ands	r2, r1
 8008168:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	b29b      	uxth	r3, r3
 8008176:	4618      	mov	r0, r3
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	b2da      	uxtb	r2, r3
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	b2db      	uxtb	r3, r3
 8008184:	1ad3      	subs	r3, r2, r3
 8008186:	b2db      	uxtb	r3, r3
 8008188:	3303      	adds	r3, #3
 800818a:	b2db      	uxtb	r3, r3
 800818c:	461a      	mov	r2, r3
 800818e:	4613      	mov	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4413      	add	r3, r2
 8008194:	fa00 f203 	lsl.w	r2, r0, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	430a      	orrs	r2, r1
 800819e:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	4a75      	ldr	r2, [pc, #468]	; (800837c <HAL_ADCEx_InjectedConfigChannel+0x324>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d022      	beq.n	80081f0 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	689a      	ldr	r2, [r3, #8]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80081b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	6899      	ldr	r1, [r3, #8]
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	699a      	ldr	r2, [r3, #24]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	430a      	orrs	r2, r1
 80081ca:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	689a      	ldr	r2, [r3, #8]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80081da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	6899      	ldr	r1, [r3, #8]
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	69da      	ldr	r2, [r3, #28]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	430a      	orrs	r2, r1
 80081ec:	609a      	str	r2, [r3, #8]
 80081ee:	e00f      	b.n	8008210 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	689a      	ldr	r2, [r3, #8]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80081fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	689a      	ldr	r2, [r3, #8]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800820e:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	7d5b      	ldrb	r3, [r3, #21]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d008      	beq.n	800822a <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	685a      	ldr	r2, [r3, #4]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008226:	605a      	str	r2, [r3, #4]
 8008228:	e007      	b.n	800823a <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	685a      	ldr	r2, [r3, #4]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008238:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	7d1b      	ldrb	r3, [r3, #20]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d008      	beq.n	8008254 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	685a      	ldr	r2, [r3, #4]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008250:	605a      	str	r2, [r3, #4]
 8008252:	e007      	b.n	8008264 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	685a      	ldr	r2, [r3, #4]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008262:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	2b03      	cmp	r3, #3
 800826a:	d02e      	beq.n	80082ca <HAL_ADCEx_InjectedConfigChannel+0x272>
 800826c:	2b03      	cmp	r3, #3
 800826e:	d840      	bhi.n	80082f2 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8008270:	2b01      	cmp	r3, #1
 8008272:	d002      	beq.n	800827a <HAL_ADCEx_InjectedConfigChannel+0x222>
 8008274:	2b02      	cmp	r3, #2
 8008276:	d014      	beq.n	80082a2 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8008278:	e03b      	b.n	80082f2 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	695b      	ldr	r3, [r3, #20]
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	6812      	ldr	r2, [r2, #0]
 8008284:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008288:	f023 030f 	bic.w	r3, r3, #15
 800828c:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	6959      	ldr	r1, [r3, #20]
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	68da      	ldr	r2, [r3, #12]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	430a      	orrs	r2, r1
 800829e:	615a      	str	r2, [r3, #20]
      break;
 80082a0:	e03b      	b.n	800831a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	699b      	ldr	r3, [r3, #24]
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	6812      	ldr	r2, [r2, #0]
 80082ac:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80082b0:	f023 030f 	bic.w	r3, r3, #15
 80082b4:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	6999      	ldr	r1, [r3, #24]
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	68da      	ldr	r2, [r3, #12]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	430a      	orrs	r2, r1
 80082c6:	619a      	str	r2, [r3, #24]
      break;
 80082c8:	e027      	b.n	800831a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	69db      	ldr	r3, [r3, #28]
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	6812      	ldr	r2, [r2, #0]
 80082d4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80082d8:	f023 030f 	bic.w	r3, r3, #15
 80082dc:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	69d9      	ldr	r1, [r3, #28]
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	68da      	ldr	r2, [r3, #12]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	430a      	orrs	r2, r1
 80082ee:	61da      	str	r2, [r3, #28]
      break;
 80082f0:	e013      	b.n	800831a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	6a1b      	ldr	r3, [r3, #32]
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	6812      	ldr	r2, [r2, #0]
 80082fc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008300:	f023 030f 	bic.w	r3, r3, #15
 8008304:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	6a19      	ldr	r1, [r3, #32]
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	68da      	ldr	r2, [r3, #12]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	430a      	orrs	r2, r1
 8008316:	621a      	str	r2, [r3, #32]
      break;
 8008318:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800831a:	4b19      	ldr	r3, [pc, #100]	; (8008380 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 800831c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a18      	ldr	r2, [pc, #96]	; (8008384 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d109      	bne.n	800833c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2b12      	cmp	r3, #18
 800832e:	d105      	bne.n	800833c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a10      	ldr	r2, [pc, #64]	; (8008384 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d10e      	bne.n	8008364 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a0f      	ldr	r2, [pc, #60]	; (8008388 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d003      	beq.n	8008358 <HAL_ADCEx_InjectedConfigChannel+0x300>
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2b11      	cmp	r3, #17
 8008356:	d105      	bne.n	8008364 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3714      	adds	r7, #20
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	000f0001 	.word	0x000f0001
 8008380:	40012300 	.word	0x40012300
 8008384:	40012000 	.word	0x40012000
 8008388:	10000012 	.word	0x10000012

0800838c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800838c:	b480      	push	{r7}
 800838e:	b085      	sub	sp, #20
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f003 0307 	and.w	r3, r3, #7
 800839a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800839c:	4b0c      	ldr	r3, [pc, #48]	; (80083d0 <__NVIC_SetPriorityGrouping+0x44>)
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80083a2:	68ba      	ldr	r2, [r7, #8]
 80083a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80083a8:	4013      	ands	r3, r2
 80083aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80083b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80083b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80083be:	4a04      	ldr	r2, [pc, #16]	; (80083d0 <__NVIC_SetPriorityGrouping+0x44>)
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	60d3      	str	r3, [r2, #12]
}
 80083c4:	bf00      	nop
 80083c6:	3714      	adds	r7, #20
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr
 80083d0:	e000ed00 	.word	0xe000ed00

080083d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80083d4:	b480      	push	{r7}
 80083d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80083d8:	4b04      	ldr	r3, [pc, #16]	; (80083ec <__NVIC_GetPriorityGrouping+0x18>)
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	0a1b      	lsrs	r3, r3, #8
 80083de:	f003 0307 	and.w	r3, r3, #7
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr
 80083ec:	e000ed00 	.word	0xe000ed00

080083f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	4603      	mov	r3, r0
 80083f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80083fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	db0b      	blt.n	800841a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008402:	79fb      	ldrb	r3, [r7, #7]
 8008404:	f003 021f 	and.w	r2, r3, #31
 8008408:	4907      	ldr	r1, [pc, #28]	; (8008428 <__NVIC_EnableIRQ+0x38>)
 800840a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800840e:	095b      	lsrs	r3, r3, #5
 8008410:	2001      	movs	r0, #1
 8008412:	fa00 f202 	lsl.w	r2, r0, r2
 8008416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800841a:	bf00      	nop
 800841c:	370c      	adds	r7, #12
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop
 8008428:	e000e100 	.word	0xe000e100

0800842c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	4603      	mov	r3, r0
 8008434:	6039      	str	r1, [r7, #0]
 8008436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800843c:	2b00      	cmp	r3, #0
 800843e:	db0a      	blt.n	8008456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	b2da      	uxtb	r2, r3
 8008444:	490c      	ldr	r1, [pc, #48]	; (8008478 <__NVIC_SetPriority+0x4c>)
 8008446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800844a:	0112      	lsls	r2, r2, #4
 800844c:	b2d2      	uxtb	r2, r2
 800844e:	440b      	add	r3, r1
 8008450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008454:	e00a      	b.n	800846c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	b2da      	uxtb	r2, r3
 800845a:	4908      	ldr	r1, [pc, #32]	; (800847c <__NVIC_SetPriority+0x50>)
 800845c:	79fb      	ldrb	r3, [r7, #7]
 800845e:	f003 030f 	and.w	r3, r3, #15
 8008462:	3b04      	subs	r3, #4
 8008464:	0112      	lsls	r2, r2, #4
 8008466:	b2d2      	uxtb	r2, r2
 8008468:	440b      	add	r3, r1
 800846a:	761a      	strb	r2, [r3, #24]
}
 800846c:	bf00      	nop
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr
 8008478:	e000e100 	.word	0xe000e100
 800847c:	e000ed00 	.word	0xe000ed00

08008480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008480:	b480      	push	{r7}
 8008482:	b089      	sub	sp, #36	; 0x24
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f003 0307 	and.w	r3, r3, #7
 8008492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008494:	69fb      	ldr	r3, [r7, #28]
 8008496:	f1c3 0307 	rsb	r3, r3, #7
 800849a:	2b04      	cmp	r3, #4
 800849c:	bf28      	it	cs
 800849e:	2304      	movcs	r3, #4
 80084a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	3304      	adds	r3, #4
 80084a6:	2b06      	cmp	r3, #6
 80084a8:	d902      	bls.n	80084b0 <NVIC_EncodePriority+0x30>
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	3b03      	subs	r3, #3
 80084ae:	e000      	b.n	80084b2 <NVIC_EncodePriority+0x32>
 80084b0:	2300      	movs	r3, #0
 80084b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084b4:	f04f 32ff 	mov.w	r2, #4294967295
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	fa02 f303 	lsl.w	r3, r2, r3
 80084be:	43da      	mvns	r2, r3
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	401a      	ands	r2, r3
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80084c8:	f04f 31ff 	mov.w	r1, #4294967295
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	fa01 f303 	lsl.w	r3, r1, r3
 80084d2:	43d9      	mvns	r1, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084d8:	4313      	orrs	r3, r2
         );
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3724      	adds	r7, #36	; 0x24
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr
	...

080084e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	3b01      	subs	r3, #1
 80084f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80084f8:	d301      	bcc.n	80084fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80084fa:	2301      	movs	r3, #1
 80084fc:	e00f      	b.n	800851e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80084fe:	4a0a      	ldr	r2, [pc, #40]	; (8008528 <SysTick_Config+0x40>)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	3b01      	subs	r3, #1
 8008504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008506:	210f      	movs	r1, #15
 8008508:	f04f 30ff 	mov.w	r0, #4294967295
 800850c:	f7ff ff8e 	bl	800842c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008510:	4b05      	ldr	r3, [pc, #20]	; (8008528 <SysTick_Config+0x40>)
 8008512:	2200      	movs	r2, #0
 8008514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008516:	4b04      	ldr	r3, [pc, #16]	; (8008528 <SysTick_Config+0x40>)
 8008518:	2207      	movs	r2, #7
 800851a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3708      	adds	r7, #8
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	e000e010 	.word	0xe000e010

0800852c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f7ff ff29 	bl	800838c <__NVIC_SetPriorityGrouping>
}
 800853a:	bf00      	nop
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008542:	b580      	push	{r7, lr}
 8008544:	b086      	sub	sp, #24
 8008546:	af00      	add	r7, sp, #0
 8008548:	4603      	mov	r3, r0
 800854a:	60b9      	str	r1, [r7, #8]
 800854c:	607a      	str	r2, [r7, #4]
 800854e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008550:	2300      	movs	r3, #0
 8008552:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008554:	f7ff ff3e 	bl	80083d4 <__NVIC_GetPriorityGrouping>
 8008558:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	68b9      	ldr	r1, [r7, #8]
 800855e:	6978      	ldr	r0, [r7, #20]
 8008560:	f7ff ff8e 	bl	8008480 <NVIC_EncodePriority>
 8008564:	4602      	mov	r2, r0
 8008566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800856a:	4611      	mov	r1, r2
 800856c:	4618      	mov	r0, r3
 800856e:	f7ff ff5d 	bl	800842c <__NVIC_SetPriority>
}
 8008572:	bf00      	nop
 8008574:	3718      	adds	r7, #24
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b082      	sub	sp, #8
 800857e:	af00      	add	r7, sp, #0
 8008580:	4603      	mov	r3, r0
 8008582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008588:	4618      	mov	r0, r3
 800858a:	f7ff ff31 	bl	80083f0 <__NVIC_EnableIRQ>
}
 800858e:	bf00      	nop
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b082      	sub	sp, #8
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f7ff ffa2 	bl	80084e8 <SysTick_Config>
 80085a4:	4603      	mov	r3, r0
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3708      	adds	r7, #8
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
	...

080085b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b086      	sub	sp, #24
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80085b8:	2300      	movs	r3, #0
 80085ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80085bc:	f7fe fe46 	bl	800724c <HAL_GetTick>
 80085c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d101      	bne.n	80085cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	e099      	b.n	8008700 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2202      	movs	r2, #2
 80085d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f022 0201 	bic.w	r2, r2, #1
 80085ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80085ec:	e00f      	b.n	800860e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80085ee:	f7fe fe2d 	bl	800724c <HAL_GetTick>
 80085f2:	4602      	mov	r2, r0
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	1ad3      	subs	r3, r2, r3
 80085f8:	2b05      	cmp	r3, #5
 80085fa:	d908      	bls.n	800860e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2220      	movs	r2, #32
 8008600:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2203      	movs	r2, #3
 8008606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800860a:	2303      	movs	r3, #3
 800860c:	e078      	b.n	8008700 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 0301 	and.w	r3, r3, #1
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1e8      	bne.n	80085ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008624:	697a      	ldr	r2, [r7, #20]
 8008626:	4b38      	ldr	r3, [pc, #224]	; (8008708 <HAL_DMA_Init+0x158>)
 8008628:	4013      	ands	r3, r2
 800862a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	685a      	ldr	r2, [r3, #4]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800863a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008646:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	699b      	ldr	r3, [r3, #24]
 800864c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008652:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6a1b      	ldr	r3, [r3, #32]
 8008658:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800865a:	697a      	ldr	r2, [r7, #20]
 800865c:	4313      	orrs	r3, r2
 800865e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008664:	2b04      	cmp	r3, #4
 8008666:	d107      	bne.n	8008678 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008670:	4313      	orrs	r3, r2
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	4313      	orrs	r3, r2
 8008676:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	697a      	ldr	r2, [r7, #20]
 800867e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	695b      	ldr	r3, [r3, #20]
 8008686:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	f023 0307 	bic.w	r3, r3, #7
 800868e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008694:	697a      	ldr	r2, [r7, #20]
 8008696:	4313      	orrs	r3, r2
 8008698:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869e:	2b04      	cmp	r3, #4
 80086a0:	d117      	bne.n	80086d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a6:	697a      	ldr	r2, [r7, #20]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00e      	beq.n	80086d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 fadf 	bl	8008c78 <DMA_CheckFifoParam>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d008      	beq.n	80086d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2240      	movs	r2, #64	; 0x40
 80086c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2201      	movs	r2, #1
 80086ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80086ce:	2301      	movs	r3, #1
 80086d0:	e016      	b.n	8008700 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	697a      	ldr	r2, [r7, #20]
 80086d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 fa96 	bl	8008c0c <DMA_CalcBaseAndBitshift>
 80086e0:	4603      	mov	r3, r0
 80086e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086e8:	223f      	movs	r2, #63	; 0x3f
 80086ea:	409a      	lsls	r2, r3
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	3718      	adds	r7, #24
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	f010803f 	.word	0xf010803f

0800870c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b086      	sub	sp, #24
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
 8008718:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800871a:	2300      	movs	r3, #0
 800871c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008722:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800872a:	2b01      	cmp	r3, #1
 800872c:	d101      	bne.n	8008732 <HAL_DMA_Start_IT+0x26>
 800872e:	2302      	movs	r3, #2
 8008730:	e040      	b.n	80087b4 <HAL_DMA_Start_IT+0xa8>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2201      	movs	r2, #1
 8008736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008740:	b2db      	uxtb	r3, r3
 8008742:	2b01      	cmp	r3, #1
 8008744:	d12f      	bne.n	80087a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2202      	movs	r2, #2
 800874a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	68b9      	ldr	r1, [r7, #8]
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f000 fa28 	bl	8008bb0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008764:	223f      	movs	r2, #63	; 0x3f
 8008766:	409a      	lsls	r2, r3
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f042 0216 	orr.w	r2, r2, #22
 800877a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008780:	2b00      	cmp	r3, #0
 8008782:	d007      	beq.n	8008794 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f042 0208 	orr.w	r2, r2, #8
 8008792:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f042 0201 	orr.w	r2, r2, #1
 80087a2:	601a      	str	r2, [r3, #0]
 80087a4:	e005      	b.n	80087b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80087ae:	2302      	movs	r3, #2
 80087b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80087b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3718      	adds	r7, #24
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80087ca:	f7fe fd3f 	bl	800724c <HAL_GetTick>
 80087ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	2b02      	cmp	r3, #2
 80087da:	d008      	beq.n	80087ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2280      	movs	r2, #128	; 0x80
 80087e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	e052      	b.n	8008894 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f022 0216 	bic.w	r2, r2, #22
 80087fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	695a      	ldr	r2, [r3, #20]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800880c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008812:	2b00      	cmp	r3, #0
 8008814:	d103      	bne.n	800881e <HAL_DMA_Abort+0x62>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800881a:	2b00      	cmp	r3, #0
 800881c:	d007      	beq.n	800882e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f022 0208 	bic.w	r2, r2, #8
 800882c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f022 0201 	bic.w	r2, r2, #1
 800883c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800883e:	e013      	b.n	8008868 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008840:	f7fe fd04 	bl	800724c <HAL_GetTick>
 8008844:	4602      	mov	r2, r0
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	1ad3      	subs	r3, r2, r3
 800884a:	2b05      	cmp	r3, #5
 800884c:	d90c      	bls.n	8008868 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2220      	movs	r2, #32
 8008852:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2203      	movs	r2, #3
 8008858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8008864:	2303      	movs	r3, #3
 8008866:	e015      	b.n	8008894 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f003 0301 	and.w	r3, r3, #1
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1e4      	bne.n	8008840 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800887a:	223f      	movs	r2, #63	; 0x3f
 800887c:	409a      	lsls	r2, r3
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2201      	movs	r2, #1
 8008886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2200      	movs	r2, #0
 800888e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3710      	adds	r7, #16
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b086      	sub	sp, #24
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80088a4:	2300      	movs	r3, #0
 80088a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80088a8:	4b8e      	ldr	r3, [pc, #568]	; (8008ae4 <HAL_DMA_IRQHandler+0x248>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a8e      	ldr	r2, [pc, #568]	; (8008ae8 <HAL_DMA_IRQHandler+0x24c>)
 80088ae:	fba2 2303 	umull	r2, r3, r2, r3
 80088b2:	0a9b      	lsrs	r3, r3, #10
 80088b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088c6:	2208      	movs	r2, #8
 80088c8:	409a      	lsls	r2, r3
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	4013      	ands	r3, r2
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d01a      	beq.n	8008908 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f003 0304 	and.w	r3, r3, #4
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d013      	beq.n	8008908 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f022 0204 	bic.w	r2, r2, #4
 80088ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088f4:	2208      	movs	r2, #8
 80088f6:	409a      	lsls	r2, r3
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008900:	f043 0201 	orr.w	r2, r3, #1
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800890c:	2201      	movs	r2, #1
 800890e:	409a      	lsls	r2, r3
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	4013      	ands	r3, r2
 8008914:	2b00      	cmp	r3, #0
 8008916:	d012      	beq.n	800893e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	695b      	ldr	r3, [r3, #20]
 800891e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008922:	2b00      	cmp	r3, #0
 8008924:	d00b      	beq.n	800893e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800892a:	2201      	movs	r2, #1
 800892c:	409a      	lsls	r2, r3
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008936:	f043 0202 	orr.w	r2, r3, #2
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008942:	2204      	movs	r2, #4
 8008944:	409a      	lsls	r2, r3
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	4013      	ands	r3, r2
 800894a:	2b00      	cmp	r3, #0
 800894c:	d012      	beq.n	8008974 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 0302 	and.w	r3, r3, #2
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00b      	beq.n	8008974 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008960:	2204      	movs	r2, #4
 8008962:	409a      	lsls	r2, r3
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800896c:	f043 0204 	orr.w	r2, r3, #4
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008978:	2210      	movs	r2, #16
 800897a:	409a      	lsls	r2, r3
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	4013      	ands	r3, r2
 8008980:	2b00      	cmp	r3, #0
 8008982:	d043      	beq.n	8008a0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 0308 	and.w	r3, r3, #8
 800898e:	2b00      	cmp	r3, #0
 8008990:	d03c      	beq.n	8008a0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008996:	2210      	movs	r2, #16
 8008998:	409a      	lsls	r2, r3
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d018      	beq.n	80089de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d108      	bne.n	80089cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d024      	beq.n	8008a0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	4798      	blx	r3
 80089ca:	e01f      	b.n	8008a0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d01b      	beq.n	8008a0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	4798      	blx	r3
 80089dc:	e016      	b.n	8008a0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d107      	bne.n	80089fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f022 0208 	bic.w	r2, r2, #8
 80089fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d003      	beq.n	8008a0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a10:	2220      	movs	r2, #32
 8008a12:	409a      	lsls	r2, r3
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	4013      	ands	r3, r2
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f000 808f 	beq.w	8008b3c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f003 0310 	and.w	r3, r3, #16
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	f000 8087 	beq.w	8008b3c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a32:	2220      	movs	r2, #32
 8008a34:	409a      	lsls	r2, r3
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	2b05      	cmp	r3, #5
 8008a44:	d136      	bne.n	8008ab4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f022 0216 	bic.w	r2, r2, #22
 8008a54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	695a      	ldr	r2, [r3, #20]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d103      	bne.n	8008a76 <HAL_DMA_IRQHandler+0x1da>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d007      	beq.n	8008a86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f022 0208 	bic.w	r2, r2, #8
 8008a84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a8a:	223f      	movs	r2, #63	; 0x3f
 8008a8c:	409a      	lsls	r2, r3
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2201      	movs	r2, #1
 8008a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d07e      	beq.n	8008ba8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	4798      	blx	r3
        }
        return;
 8008ab2:	e079      	b.n	8008ba8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d01d      	beq.n	8008afe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d10d      	bne.n	8008aec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d031      	beq.n	8008b3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	4798      	blx	r3
 8008ae0:	e02c      	b.n	8008b3c <HAL_DMA_IRQHandler+0x2a0>
 8008ae2:	bf00      	nop
 8008ae4:	20008f7c 	.word	0x20008f7c
 8008ae8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d023      	beq.n	8008b3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	4798      	blx	r3
 8008afc:	e01e      	b.n	8008b3c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d10f      	bne.n	8008b2c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f022 0210 	bic.w	r2, r2, #16
 8008b1a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d003      	beq.n	8008b3c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d032      	beq.n	8008baa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b48:	f003 0301 	and.w	r3, r3, #1
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d022      	beq.n	8008b96 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2205      	movs	r2, #5
 8008b54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f022 0201 	bic.w	r2, r2, #1
 8008b66:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	60bb      	str	r3, [r7, #8]
 8008b6e:	697a      	ldr	r2, [r7, #20]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d307      	bcc.n	8008b84 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f003 0301 	and.w	r3, r3, #1
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1f2      	bne.n	8008b68 <HAL_DMA_IRQHandler+0x2cc>
 8008b82:	e000      	b.n	8008b86 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008b84:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2201      	movs	r2, #1
 8008b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d005      	beq.n	8008baa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	4798      	blx	r3
 8008ba6:	e000      	b.n	8008baa <HAL_DMA_IRQHandler+0x30e>
        return;
 8008ba8:	bf00      	nop
    }
  }
}
 8008baa:	3718      	adds	r7, #24
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	607a      	str	r2, [r7, #4]
 8008bbc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008bcc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	683a      	ldr	r2, [r7, #0]
 8008bd4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	2b40      	cmp	r3, #64	; 0x40
 8008bdc:	d108      	bne.n	8008bf0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68ba      	ldr	r2, [r7, #8]
 8008bec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008bee:	e007      	b.n	8008c00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	68ba      	ldr	r2, [r7, #8]
 8008bf6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	60da      	str	r2, [r3, #12]
}
 8008c00:	bf00      	nop
 8008c02:	3714      	adds	r7, #20
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	3b10      	subs	r3, #16
 8008c1c:	4a14      	ldr	r2, [pc, #80]	; (8008c70 <DMA_CalcBaseAndBitshift+0x64>)
 8008c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c22:	091b      	lsrs	r3, r3, #4
 8008c24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008c26:	4a13      	ldr	r2, [pc, #76]	; (8008c74 <DMA_CalcBaseAndBitshift+0x68>)
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	461a      	mov	r2, r3
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2b03      	cmp	r3, #3
 8008c38:	d909      	bls.n	8008c4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008c42:	f023 0303 	bic.w	r3, r3, #3
 8008c46:	1d1a      	adds	r2, r3, #4
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	659a      	str	r2, [r3, #88]	; 0x58
 8008c4c:	e007      	b.n	8008c5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008c56:	f023 0303 	bic.w	r3, r3, #3
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3714      	adds	r7, #20
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop
 8008c70:	aaaaaaab 	.word	0xaaaaaaab
 8008c74:	0800f3a0 	.word	0x0800f3a0

08008c78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b085      	sub	sp, #20
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c80:	2300      	movs	r3, #0
 8008c82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	699b      	ldr	r3, [r3, #24]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d11f      	bne.n	8008cd2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	2b03      	cmp	r3, #3
 8008c96:	d856      	bhi.n	8008d46 <DMA_CheckFifoParam+0xce>
 8008c98:	a201      	add	r2, pc, #4	; (adr r2, 8008ca0 <DMA_CheckFifoParam+0x28>)
 8008c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c9e:	bf00      	nop
 8008ca0:	08008cb1 	.word	0x08008cb1
 8008ca4:	08008cc3 	.word	0x08008cc3
 8008ca8:	08008cb1 	.word	0x08008cb1
 8008cac:	08008d47 	.word	0x08008d47
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d046      	beq.n	8008d4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008cc0:	e043      	b.n	8008d4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008cca:	d140      	bne.n	8008d4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008cd0:	e03d      	b.n	8008d4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	699b      	ldr	r3, [r3, #24]
 8008cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cda:	d121      	bne.n	8008d20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	2b03      	cmp	r3, #3
 8008ce0:	d837      	bhi.n	8008d52 <DMA_CheckFifoParam+0xda>
 8008ce2:	a201      	add	r2, pc, #4	; (adr r2, 8008ce8 <DMA_CheckFifoParam+0x70>)
 8008ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce8:	08008cf9 	.word	0x08008cf9
 8008cec:	08008cff 	.word	0x08008cff
 8008cf0:	08008cf9 	.word	0x08008cf9
 8008cf4:	08008d11 	.word	0x08008d11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8008cfc:	e030      	b.n	8008d60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d025      	beq.n	8008d56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008d0e:	e022      	b.n	8008d56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008d18:	d11f      	bne.n	8008d5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008d1e:	e01c      	b.n	8008d5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	d903      	bls.n	8008d2e <DMA_CheckFifoParam+0xb6>
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	2b03      	cmp	r3, #3
 8008d2a:	d003      	beq.n	8008d34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008d2c:	e018      	b.n	8008d60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	73fb      	strb	r3, [r7, #15]
      break;
 8008d32:	e015      	b.n	8008d60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00e      	beq.n	8008d5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	73fb      	strb	r3, [r7, #15]
      break;
 8008d44:	e00b      	b.n	8008d5e <DMA_CheckFifoParam+0xe6>
      break;
 8008d46:	bf00      	nop
 8008d48:	e00a      	b.n	8008d60 <DMA_CheckFifoParam+0xe8>
      break;
 8008d4a:	bf00      	nop
 8008d4c:	e008      	b.n	8008d60 <DMA_CheckFifoParam+0xe8>
      break;
 8008d4e:	bf00      	nop
 8008d50:	e006      	b.n	8008d60 <DMA_CheckFifoParam+0xe8>
      break;
 8008d52:	bf00      	nop
 8008d54:	e004      	b.n	8008d60 <DMA_CheckFifoParam+0xe8>
      break;
 8008d56:	bf00      	nop
 8008d58:	e002      	b.n	8008d60 <DMA_CheckFifoParam+0xe8>
      break;   
 8008d5a:	bf00      	nop
 8008d5c:	e000      	b.n	8008d60 <DMA_CheckFifoParam+0xe8>
      break;
 8008d5e:	bf00      	nop
    }
  } 
  
  return status; 
 8008d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3714      	adds	r7, #20
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr
 8008d6e:	bf00      	nop

08008d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b089      	sub	sp, #36	; 0x24
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008d82:	2300      	movs	r3, #0
 8008d84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008d86:	2300      	movs	r3, #0
 8008d88:	61fb      	str	r3, [r7, #28]
 8008d8a:	e159      	b.n	8009040 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	fa02 f303 	lsl.w	r3, r2, r3
 8008d94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	697a      	ldr	r2, [r7, #20]
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008da0:	693a      	ldr	r2, [r7, #16]
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	f040 8148 	bne.w	800903a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	f003 0303 	and.w	r3, r3, #3
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d005      	beq.n	8008dc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008dbe:	2b02      	cmp	r3, #2
 8008dc0:	d130      	bne.n	8008e24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	005b      	lsls	r3, r3, #1
 8008dcc:	2203      	movs	r2, #3
 8008dce:	fa02 f303 	lsl.w	r3, r2, r3
 8008dd2:	43db      	mvns	r3, r3
 8008dd4:	69ba      	ldr	r2, [r7, #24]
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	68da      	ldr	r2, [r3, #12]
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	005b      	lsls	r3, r3, #1
 8008de2:	fa02 f303 	lsl.w	r3, r2, r3
 8008de6:	69ba      	ldr	r2, [r7, #24]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	69ba      	ldr	r2, [r7, #24]
 8008df0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008df8:	2201      	movs	r2, #1
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8008e00:	43db      	mvns	r3, r3
 8008e02:	69ba      	ldr	r2, [r7, #24]
 8008e04:	4013      	ands	r3, r2
 8008e06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	091b      	lsrs	r3, r3, #4
 8008e0e:	f003 0201 	and.w	r2, r3, #1
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	fa02 f303 	lsl.w	r3, r2, r3
 8008e18:	69ba      	ldr	r2, [r7, #24]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	69ba      	ldr	r2, [r7, #24]
 8008e22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	f003 0303 	and.w	r3, r3, #3
 8008e2c:	2b03      	cmp	r3, #3
 8008e2e:	d017      	beq.n	8008e60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	005b      	lsls	r3, r3, #1
 8008e3a:	2203      	movs	r2, #3
 8008e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e40:	43db      	mvns	r3, r3
 8008e42:	69ba      	ldr	r2, [r7, #24]
 8008e44:	4013      	ands	r3, r2
 8008e46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	689a      	ldr	r2, [r3, #8]
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	005b      	lsls	r3, r3, #1
 8008e50:	fa02 f303 	lsl.w	r3, r2, r3
 8008e54:	69ba      	ldr	r2, [r7, #24]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	69ba      	ldr	r2, [r7, #24]
 8008e5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	f003 0303 	and.w	r3, r3, #3
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	d123      	bne.n	8008eb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	08da      	lsrs	r2, r3, #3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	3208      	adds	r2, #8
 8008e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	f003 0307 	and.w	r3, r3, #7
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	220f      	movs	r2, #15
 8008e84:	fa02 f303 	lsl.w	r3, r2, r3
 8008e88:	43db      	mvns	r3, r3
 8008e8a:	69ba      	ldr	r2, [r7, #24]
 8008e8c:	4013      	ands	r3, r2
 8008e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	691a      	ldr	r2, [r3, #16]
 8008e94:	69fb      	ldr	r3, [r7, #28]
 8008e96:	f003 0307 	and.w	r3, r3, #7
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008ea0:	69ba      	ldr	r2, [r7, #24]
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	08da      	lsrs	r2, r3, #3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	3208      	adds	r2, #8
 8008eae:	69b9      	ldr	r1, [r7, #24]
 8008eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	005b      	lsls	r3, r3, #1
 8008ebe:	2203      	movs	r2, #3
 8008ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec4:	43db      	mvns	r3, r3
 8008ec6:	69ba      	ldr	r2, [r7, #24]
 8008ec8:	4013      	ands	r3, r2
 8008eca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	f003 0203 	and.w	r2, r3, #3
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	005b      	lsls	r3, r3, #1
 8008ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8008edc:	69ba      	ldr	r2, [r7, #24]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	69ba      	ldr	r2, [r7, #24]
 8008ee6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	f000 80a2 	beq.w	800903a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	60fb      	str	r3, [r7, #12]
 8008efa:	4b57      	ldr	r3, [pc, #348]	; (8009058 <HAL_GPIO_Init+0x2e8>)
 8008efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008efe:	4a56      	ldr	r2, [pc, #344]	; (8009058 <HAL_GPIO_Init+0x2e8>)
 8008f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f04:	6453      	str	r3, [r2, #68]	; 0x44
 8008f06:	4b54      	ldr	r3, [pc, #336]	; (8009058 <HAL_GPIO_Init+0x2e8>)
 8008f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f0e:	60fb      	str	r3, [r7, #12]
 8008f10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008f12:	4a52      	ldr	r2, [pc, #328]	; (800905c <HAL_GPIO_Init+0x2ec>)
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	089b      	lsrs	r3, r3, #2
 8008f18:	3302      	adds	r3, #2
 8008f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	f003 0303 	and.w	r3, r3, #3
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	220f      	movs	r2, #15
 8008f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f2e:	43db      	mvns	r3, r3
 8008f30:	69ba      	ldr	r2, [r7, #24]
 8008f32:	4013      	ands	r3, r2
 8008f34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	4a49      	ldr	r2, [pc, #292]	; (8009060 <HAL_GPIO_Init+0x2f0>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d019      	beq.n	8008f72 <HAL_GPIO_Init+0x202>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4a48      	ldr	r2, [pc, #288]	; (8009064 <HAL_GPIO_Init+0x2f4>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d013      	beq.n	8008f6e <HAL_GPIO_Init+0x1fe>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4a47      	ldr	r2, [pc, #284]	; (8009068 <HAL_GPIO_Init+0x2f8>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d00d      	beq.n	8008f6a <HAL_GPIO_Init+0x1fa>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	4a46      	ldr	r2, [pc, #280]	; (800906c <HAL_GPIO_Init+0x2fc>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d007      	beq.n	8008f66 <HAL_GPIO_Init+0x1f6>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4a45      	ldr	r2, [pc, #276]	; (8009070 <HAL_GPIO_Init+0x300>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d101      	bne.n	8008f62 <HAL_GPIO_Init+0x1f2>
 8008f5e:	2304      	movs	r3, #4
 8008f60:	e008      	b.n	8008f74 <HAL_GPIO_Init+0x204>
 8008f62:	2307      	movs	r3, #7
 8008f64:	e006      	b.n	8008f74 <HAL_GPIO_Init+0x204>
 8008f66:	2303      	movs	r3, #3
 8008f68:	e004      	b.n	8008f74 <HAL_GPIO_Init+0x204>
 8008f6a:	2302      	movs	r3, #2
 8008f6c:	e002      	b.n	8008f74 <HAL_GPIO_Init+0x204>
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e000      	b.n	8008f74 <HAL_GPIO_Init+0x204>
 8008f72:	2300      	movs	r3, #0
 8008f74:	69fa      	ldr	r2, [r7, #28]
 8008f76:	f002 0203 	and.w	r2, r2, #3
 8008f7a:	0092      	lsls	r2, r2, #2
 8008f7c:	4093      	lsls	r3, r2
 8008f7e:	69ba      	ldr	r2, [r7, #24]
 8008f80:	4313      	orrs	r3, r2
 8008f82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008f84:	4935      	ldr	r1, [pc, #212]	; (800905c <HAL_GPIO_Init+0x2ec>)
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	089b      	lsrs	r3, r3, #2
 8008f8a:	3302      	adds	r3, #2
 8008f8c:	69ba      	ldr	r2, [r7, #24]
 8008f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008f92:	4b38      	ldr	r3, [pc, #224]	; (8009074 <HAL_GPIO_Init+0x304>)
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	43db      	mvns	r3, r3
 8008f9c:	69ba      	ldr	r2, [r7, #24]
 8008f9e:	4013      	ands	r3, r2
 8008fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d003      	beq.n	8008fb6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8008fae:	69ba      	ldr	r2, [r7, #24]
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008fb6:	4a2f      	ldr	r2, [pc, #188]	; (8009074 <HAL_GPIO_Init+0x304>)
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008fbc:	4b2d      	ldr	r3, [pc, #180]	; (8009074 <HAL_GPIO_Init+0x304>)
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	43db      	mvns	r3, r3
 8008fc6:	69ba      	ldr	r2, [r7, #24]
 8008fc8:	4013      	ands	r3, r2
 8008fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d003      	beq.n	8008fe0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8008fd8:	69ba      	ldr	r2, [r7, #24]
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008fe0:	4a24      	ldr	r2, [pc, #144]	; (8009074 <HAL_GPIO_Init+0x304>)
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008fe6:	4b23      	ldr	r3, [pc, #140]	; (8009074 <HAL_GPIO_Init+0x304>)
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	43db      	mvns	r3, r3
 8008ff0:	69ba      	ldr	r2, [r7, #24]
 8008ff2:	4013      	ands	r3, r2
 8008ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d003      	beq.n	800900a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8009002:	69ba      	ldr	r2, [r7, #24]
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	4313      	orrs	r3, r2
 8009008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800900a:	4a1a      	ldr	r2, [pc, #104]	; (8009074 <HAL_GPIO_Init+0x304>)
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009010:	4b18      	ldr	r3, [pc, #96]	; (8009074 <HAL_GPIO_Init+0x304>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	43db      	mvns	r3, r3
 800901a:	69ba      	ldr	r2, [r7, #24]
 800901c:	4013      	ands	r3, r2
 800901e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009028:	2b00      	cmp	r3, #0
 800902a:	d003      	beq.n	8009034 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800902c:	69ba      	ldr	r2, [r7, #24]
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	4313      	orrs	r3, r2
 8009032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009034:	4a0f      	ldr	r2, [pc, #60]	; (8009074 <HAL_GPIO_Init+0x304>)
 8009036:	69bb      	ldr	r3, [r7, #24]
 8009038:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800903a:	69fb      	ldr	r3, [r7, #28]
 800903c:	3301      	adds	r3, #1
 800903e:	61fb      	str	r3, [r7, #28]
 8009040:	69fb      	ldr	r3, [r7, #28]
 8009042:	2b0f      	cmp	r3, #15
 8009044:	f67f aea2 	bls.w	8008d8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009048:	bf00      	nop
 800904a:	bf00      	nop
 800904c:	3724      	adds	r7, #36	; 0x24
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr
 8009056:	bf00      	nop
 8009058:	40023800 	.word	0x40023800
 800905c:	40013800 	.word	0x40013800
 8009060:	40020000 	.word	0x40020000
 8009064:	40020400 	.word	0x40020400
 8009068:	40020800 	.word	0x40020800
 800906c:	40020c00 	.word	0x40020c00
 8009070:	40021000 	.word	0x40021000
 8009074:	40013c00 	.word	0x40013c00

08009078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	460b      	mov	r3, r1
 8009082:	807b      	strh	r3, [r7, #2]
 8009084:	4613      	mov	r3, r2
 8009086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009088:	787b      	ldrb	r3, [r7, #1]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d003      	beq.n	8009096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800908e:	887a      	ldrh	r2, [r7, #2]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009094:	e003      	b.n	800909e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009096:	887b      	ldrh	r3, [r7, #2]
 8009098:	041a      	lsls	r2, r3, #16
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	619a      	str	r2, [r3, #24]
}
 800909e:	bf00      	nop
 80090a0:	370c      	adds	r7, #12
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr
	...

080090ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	4603      	mov	r3, r0
 80090b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80090b6:	4b08      	ldr	r3, [pc, #32]	; (80090d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80090b8:	695a      	ldr	r2, [r3, #20]
 80090ba:	88fb      	ldrh	r3, [r7, #6]
 80090bc:	4013      	ands	r3, r2
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d006      	beq.n	80090d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80090c2:	4a05      	ldr	r2, [pc, #20]	; (80090d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80090c4:	88fb      	ldrh	r3, [r7, #6]
 80090c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80090c8:	88fb      	ldrh	r3, [r7, #6]
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7fd fbfa 	bl	80068c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80090d0:	bf00      	nop
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	40013c00 	.word	0x40013c00

080090dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d101      	bne.n	80090ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	e12b      	b.n	8009346 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d106      	bne.n	8009108 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f7fd fcd4 	bl	8006ab0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2224      	movs	r2, #36	; 0x24
 800910c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f022 0201 	bic.w	r2, r2, #1
 800911e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800912e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800913e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009140:	f001 fbbc 	bl	800a8bc <HAL_RCC_GetPCLK1Freq>
 8009144:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	4a81      	ldr	r2, [pc, #516]	; (8009350 <HAL_I2C_Init+0x274>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d807      	bhi.n	8009160 <HAL_I2C_Init+0x84>
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	4a80      	ldr	r2, [pc, #512]	; (8009354 <HAL_I2C_Init+0x278>)
 8009154:	4293      	cmp	r3, r2
 8009156:	bf94      	ite	ls
 8009158:	2301      	movls	r3, #1
 800915a:	2300      	movhi	r3, #0
 800915c:	b2db      	uxtb	r3, r3
 800915e:	e006      	b.n	800916e <HAL_I2C_Init+0x92>
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	4a7d      	ldr	r2, [pc, #500]	; (8009358 <HAL_I2C_Init+0x27c>)
 8009164:	4293      	cmp	r3, r2
 8009166:	bf94      	ite	ls
 8009168:	2301      	movls	r3, #1
 800916a:	2300      	movhi	r3, #0
 800916c:	b2db      	uxtb	r3, r3
 800916e:	2b00      	cmp	r3, #0
 8009170:	d001      	beq.n	8009176 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	e0e7      	b.n	8009346 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	4a78      	ldr	r2, [pc, #480]	; (800935c <HAL_I2C_Init+0x280>)
 800917a:	fba2 2303 	umull	r2, r3, r2, r3
 800917e:	0c9b      	lsrs	r3, r3, #18
 8009180:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68ba      	ldr	r2, [r7, #8]
 8009192:	430a      	orrs	r2, r1
 8009194:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	6a1b      	ldr	r3, [r3, #32]
 800919c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	4a6a      	ldr	r2, [pc, #424]	; (8009350 <HAL_I2C_Init+0x274>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d802      	bhi.n	80091b0 <HAL_I2C_Init+0xd4>
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	3301      	adds	r3, #1
 80091ae:	e009      	b.n	80091c4 <HAL_I2C_Init+0xe8>
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80091b6:	fb02 f303 	mul.w	r3, r2, r3
 80091ba:	4a69      	ldr	r2, [pc, #420]	; (8009360 <HAL_I2C_Init+0x284>)
 80091bc:	fba2 2303 	umull	r2, r3, r2, r3
 80091c0:	099b      	lsrs	r3, r3, #6
 80091c2:	3301      	adds	r3, #1
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	6812      	ldr	r2, [r2, #0]
 80091c8:	430b      	orrs	r3, r1
 80091ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	69db      	ldr	r3, [r3, #28]
 80091d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80091d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	495c      	ldr	r1, [pc, #368]	; (8009350 <HAL_I2C_Init+0x274>)
 80091e0:	428b      	cmp	r3, r1
 80091e2:	d819      	bhi.n	8009218 <HAL_I2C_Init+0x13c>
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	1e59      	subs	r1, r3, #1
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	005b      	lsls	r3, r3, #1
 80091ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80091f2:	1c59      	adds	r1, r3, #1
 80091f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80091f8:	400b      	ands	r3, r1
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d00a      	beq.n	8009214 <HAL_I2C_Init+0x138>
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	1e59      	subs	r1, r3, #1
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	005b      	lsls	r3, r3, #1
 8009208:	fbb1 f3f3 	udiv	r3, r1, r3
 800920c:	3301      	adds	r3, #1
 800920e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009212:	e051      	b.n	80092b8 <HAL_I2C_Init+0x1dc>
 8009214:	2304      	movs	r3, #4
 8009216:	e04f      	b.n	80092b8 <HAL_I2C_Init+0x1dc>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d111      	bne.n	8009244 <HAL_I2C_Init+0x168>
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	1e58      	subs	r0, r3, #1
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6859      	ldr	r1, [r3, #4]
 8009228:	460b      	mov	r3, r1
 800922a:	005b      	lsls	r3, r3, #1
 800922c:	440b      	add	r3, r1
 800922e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009232:	3301      	adds	r3, #1
 8009234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009238:	2b00      	cmp	r3, #0
 800923a:	bf0c      	ite	eq
 800923c:	2301      	moveq	r3, #1
 800923e:	2300      	movne	r3, #0
 8009240:	b2db      	uxtb	r3, r3
 8009242:	e012      	b.n	800926a <HAL_I2C_Init+0x18e>
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	1e58      	subs	r0, r3, #1
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6859      	ldr	r1, [r3, #4]
 800924c:	460b      	mov	r3, r1
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	440b      	add	r3, r1
 8009252:	0099      	lsls	r1, r3, #2
 8009254:	440b      	add	r3, r1
 8009256:	fbb0 f3f3 	udiv	r3, r0, r3
 800925a:	3301      	adds	r3, #1
 800925c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009260:	2b00      	cmp	r3, #0
 8009262:	bf0c      	ite	eq
 8009264:	2301      	moveq	r3, #1
 8009266:	2300      	movne	r3, #0
 8009268:	b2db      	uxtb	r3, r3
 800926a:	2b00      	cmp	r3, #0
 800926c:	d001      	beq.n	8009272 <HAL_I2C_Init+0x196>
 800926e:	2301      	movs	r3, #1
 8009270:	e022      	b.n	80092b8 <HAL_I2C_Init+0x1dc>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d10e      	bne.n	8009298 <HAL_I2C_Init+0x1bc>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	1e58      	subs	r0, r3, #1
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6859      	ldr	r1, [r3, #4]
 8009282:	460b      	mov	r3, r1
 8009284:	005b      	lsls	r3, r3, #1
 8009286:	440b      	add	r3, r1
 8009288:	fbb0 f3f3 	udiv	r3, r0, r3
 800928c:	3301      	adds	r3, #1
 800928e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009296:	e00f      	b.n	80092b8 <HAL_I2C_Init+0x1dc>
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	1e58      	subs	r0, r3, #1
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6859      	ldr	r1, [r3, #4]
 80092a0:	460b      	mov	r3, r1
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	440b      	add	r3, r1
 80092a6:	0099      	lsls	r1, r3, #2
 80092a8:	440b      	add	r3, r1
 80092aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80092ae:	3301      	adds	r3, #1
 80092b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80092b8:	6879      	ldr	r1, [r7, #4]
 80092ba:	6809      	ldr	r1, [r1, #0]
 80092bc:	4313      	orrs	r3, r2
 80092be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	69da      	ldr	r2, [r3, #28]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6a1b      	ldr	r3, [r3, #32]
 80092d2:	431a      	orrs	r2, r3
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	430a      	orrs	r2, r1
 80092da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80092e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	6911      	ldr	r1, [r2, #16]
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	68d2      	ldr	r2, [r2, #12]
 80092f2:	4311      	orrs	r1, r2
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	6812      	ldr	r2, [r2, #0]
 80092f8:	430b      	orrs	r3, r1
 80092fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	695a      	ldr	r2, [r3, #20]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	699b      	ldr	r3, [r3, #24]
 800930e:	431a      	orrs	r2, r3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	430a      	orrs	r2, r1
 8009316:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f042 0201 	orr.w	r2, r2, #1
 8009326:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2220      	movs	r2, #32
 8009332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	000186a0 	.word	0x000186a0
 8009354:	001e847f 	.word	0x001e847f
 8009358:	003d08ff 	.word	0x003d08ff
 800935c:	431bde83 	.word	0x431bde83
 8009360:	10624dd3 	.word	0x10624dd3

08009364 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b088      	sub	sp, #32
 8009368:	af02      	add	r7, sp, #8
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	4608      	mov	r0, r1
 800936e:	4611      	mov	r1, r2
 8009370:	461a      	mov	r2, r3
 8009372:	4603      	mov	r3, r0
 8009374:	817b      	strh	r3, [r7, #10]
 8009376:	460b      	mov	r3, r1
 8009378:	813b      	strh	r3, [r7, #8]
 800937a:	4613      	mov	r3, r2
 800937c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800937e:	f7fd ff65 	bl	800724c <HAL_GetTick>
 8009382:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800938a:	b2db      	uxtb	r3, r3
 800938c:	2b20      	cmp	r3, #32
 800938e:	f040 80d9 	bne.w	8009544 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	9300      	str	r3, [sp, #0]
 8009396:	2319      	movs	r3, #25
 8009398:	2201      	movs	r2, #1
 800939a:	496d      	ldr	r1, [pc, #436]	; (8009550 <HAL_I2C_Mem_Write+0x1ec>)
 800939c:	68f8      	ldr	r0, [r7, #12]
 800939e:	f000 fc7f 	bl	8009ca0 <I2C_WaitOnFlagUntilTimeout>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d001      	beq.n	80093ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80093a8:	2302      	movs	r3, #2
 80093aa:	e0cc      	b.n	8009546 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d101      	bne.n	80093ba <HAL_I2C_Mem_Write+0x56>
 80093b6:	2302      	movs	r3, #2
 80093b8:	e0c5      	b.n	8009546 <HAL_I2C_Mem_Write+0x1e2>
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2201      	movs	r2, #1
 80093be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f003 0301 	and.w	r3, r3, #1
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d007      	beq.n	80093e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f042 0201 	orr.w	r2, r2, #1
 80093de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2221      	movs	r2, #33	; 0x21
 80093f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2240      	movs	r2, #64	; 0x40
 80093fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2200      	movs	r2, #0
 8009404:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	6a3a      	ldr	r2, [r7, #32]
 800940a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009410:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009416:	b29a      	uxth	r2, r3
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	4a4d      	ldr	r2, [pc, #308]	; (8009554 <HAL_I2C_Mem_Write+0x1f0>)
 8009420:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009422:	88f8      	ldrh	r0, [r7, #6]
 8009424:	893a      	ldrh	r2, [r7, #8]
 8009426:	8979      	ldrh	r1, [r7, #10]
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	9301      	str	r3, [sp, #4]
 800942c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942e:	9300      	str	r3, [sp, #0]
 8009430:	4603      	mov	r3, r0
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f000 fab6 	bl	80099a4 <I2C_RequestMemoryWrite>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d052      	beq.n	80094e4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800943e:	2301      	movs	r3, #1
 8009440:	e081      	b.n	8009546 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009442:	697a      	ldr	r2, [r7, #20]
 8009444:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009446:	68f8      	ldr	r0, [r7, #12]
 8009448:	f000 fd00 	bl	8009e4c <I2C_WaitOnTXEFlagUntilTimeout>
 800944c:	4603      	mov	r3, r0
 800944e:	2b00      	cmp	r3, #0
 8009450:	d00d      	beq.n	800946e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009456:	2b04      	cmp	r3, #4
 8009458:	d107      	bne.n	800946a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009468:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	e06b      	b.n	8009546 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009472:	781a      	ldrb	r2, [r3, #0]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947e:	1c5a      	adds	r2, r3, #1
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009488:	3b01      	subs	r3, #1
 800948a:	b29a      	uxth	r2, r3
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009494:	b29b      	uxth	r3, r3
 8009496:	3b01      	subs	r3, #1
 8009498:	b29a      	uxth	r2, r3
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	695b      	ldr	r3, [r3, #20]
 80094a4:	f003 0304 	and.w	r3, r3, #4
 80094a8:	2b04      	cmp	r3, #4
 80094aa:	d11b      	bne.n	80094e4 <HAL_I2C_Mem_Write+0x180>
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d017      	beq.n	80094e4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b8:	781a      	ldrb	r2, [r3, #0]
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c4:	1c5a      	adds	r2, r3, #1
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094ce:	3b01      	subs	r3, #1
 80094d0:	b29a      	uxth	r2, r3
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094da:	b29b      	uxth	r3, r3
 80094dc:	3b01      	subs	r3, #1
 80094de:	b29a      	uxth	r2, r3
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d1aa      	bne.n	8009442 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80094ec:	697a      	ldr	r2, [r7, #20]
 80094ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f000 fcec 	bl	8009ece <I2C_WaitOnBTFFlagUntilTimeout>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d00d      	beq.n	8009518 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009500:	2b04      	cmp	r3, #4
 8009502:	d107      	bne.n	8009514 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009512:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	e016      	b.n	8009546 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009526:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2220      	movs	r2, #32
 800952c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2200      	movs	r2, #0
 8009534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2200      	movs	r2, #0
 800953c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009540:	2300      	movs	r3, #0
 8009542:	e000      	b.n	8009546 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009544:	2302      	movs	r3, #2
  }
}
 8009546:	4618      	mov	r0, r3
 8009548:	3718      	adds	r7, #24
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	00100002 	.word	0x00100002
 8009554:	ffff0000 	.word	0xffff0000

08009558 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b08c      	sub	sp, #48	; 0x30
 800955c:	af02      	add	r7, sp, #8
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	4608      	mov	r0, r1
 8009562:	4611      	mov	r1, r2
 8009564:	461a      	mov	r2, r3
 8009566:	4603      	mov	r3, r0
 8009568:	817b      	strh	r3, [r7, #10]
 800956a:	460b      	mov	r3, r1
 800956c:	813b      	strh	r3, [r7, #8]
 800956e:	4613      	mov	r3, r2
 8009570:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009572:	f7fd fe6b 	bl	800724c <HAL_GetTick>
 8009576:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800957e:	b2db      	uxtb	r3, r3
 8009580:	2b20      	cmp	r3, #32
 8009582:	f040 8208 	bne.w	8009996 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009588:	9300      	str	r3, [sp, #0]
 800958a:	2319      	movs	r3, #25
 800958c:	2201      	movs	r2, #1
 800958e:	497b      	ldr	r1, [pc, #492]	; (800977c <HAL_I2C_Mem_Read+0x224>)
 8009590:	68f8      	ldr	r0, [r7, #12]
 8009592:	f000 fb85 	bl	8009ca0 <I2C_WaitOnFlagUntilTimeout>
 8009596:	4603      	mov	r3, r0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d001      	beq.n	80095a0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800959c:	2302      	movs	r3, #2
 800959e:	e1fb      	b.n	8009998 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d101      	bne.n	80095ae <HAL_I2C_Mem_Read+0x56>
 80095aa:	2302      	movs	r3, #2
 80095ac:	e1f4      	b.n	8009998 <HAL_I2C_Mem_Read+0x440>
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2201      	movs	r2, #1
 80095b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f003 0301 	and.w	r3, r3, #1
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d007      	beq.n	80095d4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f042 0201 	orr.w	r2, r2, #1
 80095d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80095e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2222      	movs	r2, #34	; 0x22
 80095e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2240      	movs	r2, #64	; 0x40
 80095f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2200      	movs	r2, #0
 80095f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009604:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800960a:	b29a      	uxth	r2, r3
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	4a5b      	ldr	r2, [pc, #364]	; (8009780 <HAL_I2C_Mem_Read+0x228>)
 8009614:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009616:	88f8      	ldrh	r0, [r7, #6]
 8009618:	893a      	ldrh	r2, [r7, #8]
 800961a:	8979      	ldrh	r1, [r7, #10]
 800961c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961e:	9301      	str	r3, [sp, #4]
 8009620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009622:	9300      	str	r3, [sp, #0]
 8009624:	4603      	mov	r3, r0
 8009626:	68f8      	ldr	r0, [r7, #12]
 8009628:	f000 fa52 	bl	8009ad0 <I2C_RequestMemoryRead>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d001      	beq.n	8009636 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	e1b0      	b.n	8009998 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800963a:	2b00      	cmp	r3, #0
 800963c:	d113      	bne.n	8009666 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800963e:	2300      	movs	r3, #0
 8009640:	623b      	str	r3, [r7, #32]
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	695b      	ldr	r3, [r3, #20]
 8009648:	623b      	str	r3, [r7, #32]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	699b      	ldr	r3, [r3, #24]
 8009650:	623b      	str	r3, [r7, #32]
 8009652:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009662:	601a      	str	r2, [r3, #0]
 8009664:	e184      	b.n	8009970 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800966a:	2b01      	cmp	r3, #1
 800966c:	d11b      	bne.n	80096a6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800967c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800967e:	2300      	movs	r3, #0
 8009680:	61fb      	str	r3, [r7, #28]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	695b      	ldr	r3, [r3, #20]
 8009688:	61fb      	str	r3, [r7, #28]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	699b      	ldr	r3, [r3, #24]
 8009690:	61fb      	str	r3, [r7, #28]
 8009692:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096a2:	601a      	str	r2, [r3, #0]
 80096a4:	e164      	b.n	8009970 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096aa:	2b02      	cmp	r3, #2
 80096ac:	d11b      	bne.n	80096e6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096ce:	2300      	movs	r3, #0
 80096d0:	61bb      	str	r3, [r7, #24]
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	695b      	ldr	r3, [r3, #20]
 80096d8:	61bb      	str	r3, [r7, #24]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	699b      	ldr	r3, [r3, #24]
 80096e0:	61bb      	str	r3, [r7, #24]
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	e144      	b.n	8009970 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096e6:	2300      	movs	r3, #0
 80096e8:	617b      	str	r3, [r7, #20]
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	695b      	ldr	r3, [r3, #20]
 80096f0:	617b      	str	r3, [r7, #20]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	699b      	ldr	r3, [r3, #24]
 80096f8:	617b      	str	r3, [r7, #20]
 80096fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80096fc:	e138      	b.n	8009970 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009702:	2b03      	cmp	r3, #3
 8009704:	f200 80f1 	bhi.w	80098ea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800970c:	2b01      	cmp	r3, #1
 800970e:	d123      	bne.n	8009758 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009712:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009714:	68f8      	ldr	r0, [r7, #12]
 8009716:	f000 fc1b 	bl	8009f50 <I2C_WaitOnRXNEFlagUntilTimeout>
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d001      	beq.n	8009724 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009720:	2301      	movs	r3, #1
 8009722:	e139      	b.n	8009998 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	691a      	ldr	r2, [r3, #16]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972e:	b2d2      	uxtb	r2, r2
 8009730:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009736:	1c5a      	adds	r2, r3, #1
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009740:	3b01      	subs	r3, #1
 8009742:	b29a      	uxth	r2, r3
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800974c:	b29b      	uxth	r3, r3
 800974e:	3b01      	subs	r3, #1
 8009750:	b29a      	uxth	r2, r3
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009756:	e10b      	b.n	8009970 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800975c:	2b02      	cmp	r3, #2
 800975e:	d14e      	bne.n	80097fe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009762:	9300      	str	r3, [sp, #0]
 8009764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009766:	2200      	movs	r2, #0
 8009768:	4906      	ldr	r1, [pc, #24]	; (8009784 <HAL_I2C_Mem_Read+0x22c>)
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f000 fa98 	bl	8009ca0 <I2C_WaitOnFlagUntilTimeout>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d008      	beq.n	8009788 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8009776:	2301      	movs	r3, #1
 8009778:	e10e      	b.n	8009998 <HAL_I2C_Mem_Read+0x440>
 800977a:	bf00      	nop
 800977c:	00100002 	.word	0x00100002
 8009780:	ffff0000 	.word	0xffff0000
 8009784:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009796:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	691a      	ldr	r2, [r3, #16]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a2:	b2d2      	uxtb	r2, r2
 80097a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097aa:	1c5a      	adds	r2, r3, #1
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097b4:	3b01      	subs	r3, #1
 80097b6:	b29a      	uxth	r2, r3
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	3b01      	subs	r3, #1
 80097c4:	b29a      	uxth	r2, r3
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	691a      	ldr	r2, [r3, #16]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d4:	b2d2      	uxtb	r2, r2
 80097d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097dc:	1c5a      	adds	r2, r3, #1
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097e6:	3b01      	subs	r3, #1
 80097e8:	b29a      	uxth	r2, r3
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	3b01      	subs	r3, #1
 80097f6:	b29a      	uxth	r2, r3
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80097fc:	e0b8      	b.n	8009970 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80097fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009800:	9300      	str	r3, [sp, #0]
 8009802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009804:	2200      	movs	r2, #0
 8009806:	4966      	ldr	r1, [pc, #408]	; (80099a0 <HAL_I2C_Mem_Read+0x448>)
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	f000 fa49 	bl	8009ca0 <I2C_WaitOnFlagUntilTimeout>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d001      	beq.n	8009818 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	e0bf      	b.n	8009998 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009826:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	691a      	ldr	r2, [r3, #16]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009832:	b2d2      	uxtb	r2, r2
 8009834:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983a:	1c5a      	adds	r2, r3, #1
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009844:	3b01      	subs	r3, #1
 8009846:	b29a      	uxth	r2, r3
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009850:	b29b      	uxth	r3, r3
 8009852:	3b01      	subs	r3, #1
 8009854:	b29a      	uxth	r2, r3
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800985a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985c:	9300      	str	r3, [sp, #0]
 800985e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009860:	2200      	movs	r2, #0
 8009862:	494f      	ldr	r1, [pc, #316]	; (80099a0 <HAL_I2C_Mem_Read+0x448>)
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f000 fa1b 	bl	8009ca0 <I2C_WaitOnFlagUntilTimeout>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d001      	beq.n	8009874 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009870:	2301      	movs	r3, #1
 8009872:	e091      	b.n	8009998 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009882:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	691a      	ldr	r2, [r3, #16]
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988e:	b2d2      	uxtb	r2, r2
 8009890:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009896:	1c5a      	adds	r2, r3, #1
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098a0:	3b01      	subs	r3, #1
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	3b01      	subs	r3, #1
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	691a      	ldr	r2, [r3, #16]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c0:	b2d2      	uxtb	r2, r2
 80098c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c8:	1c5a      	adds	r2, r3, #1
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098d2:	3b01      	subs	r3, #1
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098de:	b29b      	uxth	r3, r3
 80098e0:	3b01      	subs	r3, #1
 80098e2:	b29a      	uxth	r2, r3
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80098e8:	e042      	b.n	8009970 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	f000 fb2e 	bl	8009f50 <I2C_WaitOnRXNEFlagUntilTimeout>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d001      	beq.n	80098fe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e04c      	b.n	8009998 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	691a      	ldr	r2, [r3, #16]
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009908:	b2d2      	uxtb	r2, r2
 800990a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009910:	1c5a      	adds	r2, r3, #1
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800991a:	3b01      	subs	r3, #1
 800991c:	b29a      	uxth	r2, r3
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009926:	b29b      	uxth	r3, r3
 8009928:	3b01      	subs	r3, #1
 800992a:	b29a      	uxth	r2, r3
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	695b      	ldr	r3, [r3, #20]
 8009936:	f003 0304 	and.w	r3, r3, #4
 800993a:	2b04      	cmp	r3, #4
 800993c:	d118      	bne.n	8009970 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	691a      	ldr	r2, [r3, #16]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009948:	b2d2      	uxtb	r2, r2
 800994a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009950:	1c5a      	adds	r2, r3, #1
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800995a:	3b01      	subs	r3, #1
 800995c:	b29a      	uxth	r2, r3
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009966:	b29b      	uxth	r3, r3
 8009968:	3b01      	subs	r3, #1
 800996a:	b29a      	uxth	r2, r3
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009974:	2b00      	cmp	r3, #0
 8009976:	f47f aec2 	bne.w	80096fe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2220      	movs	r2, #32
 800997e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2200      	movs	r2, #0
 8009986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2200      	movs	r2, #0
 800998e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009992:	2300      	movs	r3, #0
 8009994:	e000      	b.n	8009998 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009996:	2302      	movs	r3, #2
  }
}
 8009998:	4618      	mov	r0, r3
 800999a:	3728      	adds	r7, #40	; 0x28
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}
 80099a0:	00010004 	.word	0x00010004

080099a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b088      	sub	sp, #32
 80099a8:	af02      	add	r7, sp, #8
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	4608      	mov	r0, r1
 80099ae:	4611      	mov	r1, r2
 80099b0:	461a      	mov	r2, r3
 80099b2:	4603      	mov	r3, r0
 80099b4:	817b      	strh	r3, [r7, #10]
 80099b6:	460b      	mov	r3, r1
 80099b8:	813b      	strh	r3, [r7, #8]
 80099ba:	4613      	mov	r3, r2
 80099bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80099ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d0:	9300      	str	r3, [sp, #0]
 80099d2:	6a3b      	ldr	r3, [r7, #32]
 80099d4:	2200      	movs	r2, #0
 80099d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80099da:	68f8      	ldr	r0, [r7, #12]
 80099dc:	f000 f960 	bl	8009ca0 <I2C_WaitOnFlagUntilTimeout>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d00d      	beq.n	8009a02 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099f4:	d103      	bne.n	80099fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80099fe:	2303      	movs	r3, #3
 8009a00:	e05f      	b.n	8009ac2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009a02:	897b      	ldrh	r3, [r7, #10]
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	461a      	mov	r2, r3
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009a10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a14:	6a3a      	ldr	r2, [r7, #32]
 8009a16:	492d      	ldr	r1, [pc, #180]	; (8009acc <I2C_RequestMemoryWrite+0x128>)
 8009a18:	68f8      	ldr	r0, [r7, #12]
 8009a1a:	f000 f998 	bl	8009d4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d001      	beq.n	8009a28 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009a24:	2301      	movs	r3, #1
 8009a26:	e04c      	b.n	8009ac2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a28:	2300      	movs	r3, #0
 8009a2a:	617b      	str	r3, [r7, #20]
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	695b      	ldr	r3, [r3, #20]
 8009a32:	617b      	str	r3, [r7, #20]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	699b      	ldr	r3, [r3, #24]
 8009a3a:	617b      	str	r3, [r7, #20]
 8009a3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a40:	6a39      	ldr	r1, [r7, #32]
 8009a42:	68f8      	ldr	r0, [r7, #12]
 8009a44:	f000 fa02 	bl	8009e4c <I2C_WaitOnTXEFlagUntilTimeout>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d00d      	beq.n	8009a6a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a52:	2b04      	cmp	r3, #4
 8009a54:	d107      	bne.n	8009a66 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009a66:	2301      	movs	r3, #1
 8009a68:	e02b      	b.n	8009ac2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009a6a:	88fb      	ldrh	r3, [r7, #6]
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d105      	bne.n	8009a7c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009a70:	893b      	ldrh	r3, [r7, #8]
 8009a72:	b2da      	uxtb	r2, r3
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	611a      	str	r2, [r3, #16]
 8009a7a:	e021      	b.n	8009ac0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009a7c:	893b      	ldrh	r3, [r7, #8]
 8009a7e:	0a1b      	lsrs	r3, r3, #8
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	b2da      	uxtb	r2, r3
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a8c:	6a39      	ldr	r1, [r7, #32]
 8009a8e:	68f8      	ldr	r0, [r7, #12]
 8009a90:	f000 f9dc 	bl	8009e4c <I2C_WaitOnTXEFlagUntilTimeout>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d00d      	beq.n	8009ab6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a9e:	2b04      	cmp	r3, #4
 8009aa0:	d107      	bne.n	8009ab2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ab0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	e005      	b.n	8009ac2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009ab6:	893b      	ldrh	r3, [r7, #8]
 8009ab8:	b2da      	uxtb	r2, r3
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3718      	adds	r7, #24
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	bf00      	nop
 8009acc:	00010002 	.word	0x00010002

08009ad0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b088      	sub	sp, #32
 8009ad4:	af02      	add	r7, sp, #8
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	4608      	mov	r0, r1
 8009ada:	4611      	mov	r1, r2
 8009adc:	461a      	mov	r2, r3
 8009ade:	4603      	mov	r3, r0
 8009ae0:	817b      	strh	r3, [r7, #10]
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	813b      	strh	r3, [r7, #8]
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009af8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0c:	9300      	str	r3, [sp, #0]
 8009b0e:	6a3b      	ldr	r3, [r7, #32]
 8009b10:	2200      	movs	r2, #0
 8009b12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	f000 f8c2 	bl	8009ca0 <I2C_WaitOnFlagUntilTimeout>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d00d      	beq.n	8009b3e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b30:	d103      	bne.n	8009b3a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009b3a:	2303      	movs	r3, #3
 8009b3c:	e0aa      	b.n	8009c94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009b3e:	897b      	ldrh	r3, [r7, #10]
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	461a      	mov	r2, r3
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009b4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b50:	6a3a      	ldr	r2, [r7, #32]
 8009b52:	4952      	ldr	r1, [pc, #328]	; (8009c9c <I2C_RequestMemoryRead+0x1cc>)
 8009b54:	68f8      	ldr	r0, [r7, #12]
 8009b56:	f000 f8fa 	bl	8009d4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d001      	beq.n	8009b64 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	e097      	b.n	8009c94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b64:	2300      	movs	r3, #0
 8009b66:	617b      	str	r3, [r7, #20]
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	695b      	ldr	r3, [r3, #20]
 8009b6e:	617b      	str	r3, [r7, #20]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	699b      	ldr	r3, [r3, #24]
 8009b76:	617b      	str	r3, [r7, #20]
 8009b78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b7c:	6a39      	ldr	r1, [r7, #32]
 8009b7e:	68f8      	ldr	r0, [r7, #12]
 8009b80:	f000 f964 	bl	8009e4c <I2C_WaitOnTXEFlagUntilTimeout>
 8009b84:	4603      	mov	r3, r0
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d00d      	beq.n	8009ba6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b8e:	2b04      	cmp	r3, #4
 8009b90:	d107      	bne.n	8009ba2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ba0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e076      	b.n	8009c94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009ba6:	88fb      	ldrh	r3, [r7, #6]
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d105      	bne.n	8009bb8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009bac:	893b      	ldrh	r3, [r7, #8]
 8009bae:	b2da      	uxtb	r2, r3
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	611a      	str	r2, [r3, #16]
 8009bb6:	e021      	b.n	8009bfc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009bb8:	893b      	ldrh	r3, [r7, #8]
 8009bba:	0a1b      	lsrs	r3, r3, #8
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	b2da      	uxtb	r2, r3
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bc8:	6a39      	ldr	r1, [r7, #32]
 8009bca:	68f8      	ldr	r0, [r7, #12]
 8009bcc:	f000 f93e 	bl	8009e4c <I2C_WaitOnTXEFlagUntilTimeout>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d00d      	beq.n	8009bf2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bda:	2b04      	cmp	r3, #4
 8009bdc:	d107      	bne.n	8009bee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	e050      	b.n	8009c94 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009bf2:	893b      	ldrh	r3, [r7, #8]
 8009bf4:	b2da      	uxtb	r2, r3
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bfe:	6a39      	ldr	r1, [r7, #32]
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f000 f923 	bl	8009e4c <I2C_WaitOnTXEFlagUntilTimeout>
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d00d      	beq.n	8009c28 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c10:	2b04      	cmp	r3, #4
 8009c12:	d107      	bne.n	8009c24 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c22:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009c24:	2301      	movs	r3, #1
 8009c26:	e035      	b.n	8009c94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c36:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3a:	9300      	str	r3, [sp, #0]
 8009c3c:	6a3b      	ldr	r3, [r7, #32]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009c44:	68f8      	ldr	r0, [r7, #12]
 8009c46:	f000 f82b 	bl	8009ca0 <I2C_WaitOnFlagUntilTimeout>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d00d      	beq.n	8009c6c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c5e:	d103      	bne.n	8009c68 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009c68:	2303      	movs	r3, #3
 8009c6a:	e013      	b.n	8009c94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009c6c:	897b      	ldrh	r3, [r7, #10]
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	f043 0301 	orr.w	r3, r3, #1
 8009c74:	b2da      	uxtb	r2, r3
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7e:	6a3a      	ldr	r2, [r7, #32]
 8009c80:	4906      	ldr	r1, [pc, #24]	; (8009c9c <I2C_RequestMemoryRead+0x1cc>)
 8009c82:	68f8      	ldr	r0, [r7, #12]
 8009c84:	f000 f863 	bl	8009d4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d001      	beq.n	8009c92 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	e000      	b.n	8009c94 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009c92:	2300      	movs	r3, #0
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3718      	adds	r7, #24
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	00010002 	.word	0x00010002

08009ca0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	60f8      	str	r0, [r7, #12]
 8009ca8:	60b9      	str	r1, [r7, #8]
 8009caa:	603b      	str	r3, [r7, #0]
 8009cac:	4613      	mov	r3, r2
 8009cae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009cb0:	e025      	b.n	8009cfe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cb8:	d021      	beq.n	8009cfe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cba:	f7fd fac7 	bl	800724c <HAL_GetTick>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	1ad3      	subs	r3, r2, r3
 8009cc4:	683a      	ldr	r2, [r7, #0]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d302      	bcc.n	8009cd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d116      	bne.n	8009cfe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2220      	movs	r2, #32
 8009cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cea:	f043 0220 	orr.w	r2, r3, #32
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	e023      	b.n	8009d46 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	0c1b      	lsrs	r3, r3, #16
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	d10d      	bne.n	8009d24 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	695b      	ldr	r3, [r3, #20]
 8009d0e:	43da      	mvns	r2, r3
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	4013      	ands	r3, r2
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	bf0c      	ite	eq
 8009d1a:	2301      	moveq	r3, #1
 8009d1c:	2300      	movne	r3, #0
 8009d1e:	b2db      	uxtb	r3, r3
 8009d20:	461a      	mov	r2, r3
 8009d22:	e00c      	b.n	8009d3e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	699b      	ldr	r3, [r3, #24]
 8009d2a:	43da      	mvns	r2, r3
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	4013      	ands	r3, r2
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	bf0c      	ite	eq
 8009d36:	2301      	moveq	r3, #1
 8009d38:	2300      	movne	r3, #0
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	79fb      	ldrb	r3, [r7, #7]
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d0b6      	beq.n	8009cb2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3710      	adds	r7, #16
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b084      	sub	sp, #16
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	60f8      	str	r0, [r7, #12]
 8009d56:	60b9      	str	r1, [r7, #8]
 8009d58:	607a      	str	r2, [r7, #4]
 8009d5a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009d5c:	e051      	b.n	8009e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	695b      	ldr	r3, [r3, #20]
 8009d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d6c:	d123      	bne.n	8009db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d7c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009d86:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2220      	movs	r2, #32
 8009d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da2:	f043 0204 	orr.w	r2, r3, #4
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2200      	movs	r2, #0
 8009dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	e046      	b.n	8009e44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dbc:	d021      	beq.n	8009e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dbe:	f7fd fa45 	bl	800724c <HAL_GetTick>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	1ad3      	subs	r3, r2, r3
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d302      	bcc.n	8009dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d116      	bne.n	8009e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2220      	movs	r2, #32
 8009dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2200      	movs	r2, #0
 8009de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dee:	f043 0220 	orr.w	r2, r3, #32
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e020      	b.n	8009e44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	0c1b      	lsrs	r3, r3, #16
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d10c      	bne.n	8009e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	695b      	ldr	r3, [r3, #20]
 8009e12:	43da      	mvns	r2, r3
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	4013      	ands	r3, r2
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	bf14      	ite	ne
 8009e1e:	2301      	movne	r3, #1
 8009e20:	2300      	moveq	r3, #0
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	e00b      	b.n	8009e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	699b      	ldr	r3, [r3, #24]
 8009e2c:	43da      	mvns	r2, r3
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	4013      	ands	r3, r2
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	bf14      	ite	ne
 8009e38:	2301      	movne	r3, #1
 8009e3a:	2300      	moveq	r3, #0
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d18d      	bne.n	8009d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009e42:	2300      	movs	r3, #0
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3710      	adds	r7, #16
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009e58:	e02d      	b.n	8009eb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	f000 f8ce 	bl	8009ffc <I2C_IsAcknowledgeFailed>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d001      	beq.n	8009e6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009e66:	2301      	movs	r3, #1
 8009e68:	e02d      	b.n	8009ec6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e70:	d021      	beq.n	8009eb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e72:	f7fd f9eb 	bl	800724c <HAL_GetTick>
 8009e76:	4602      	mov	r2, r0
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	1ad3      	subs	r3, r2, r3
 8009e7c:	68ba      	ldr	r2, [r7, #8]
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d302      	bcc.n	8009e88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d116      	bne.n	8009eb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2220      	movs	r2, #32
 8009e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea2:	f043 0220 	orr.w	r2, r3, #32
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2200      	movs	r2, #0
 8009eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	e007      	b.n	8009ec6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	695b      	ldr	r3, [r3, #20]
 8009ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ec0:	2b80      	cmp	r3, #128	; 0x80
 8009ec2:	d1ca      	bne.n	8009e5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b084      	sub	sp, #16
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	60f8      	str	r0, [r7, #12]
 8009ed6:	60b9      	str	r1, [r7, #8]
 8009ed8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009eda:	e02d      	b.n	8009f38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009edc:	68f8      	ldr	r0, [r7, #12]
 8009ede:	f000 f88d 	bl	8009ffc <I2C_IsAcknowledgeFailed>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d001      	beq.n	8009eec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	e02d      	b.n	8009f48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ef2:	d021      	beq.n	8009f38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ef4:	f7fd f9aa 	bl	800724c <HAL_GetTick>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	1ad3      	subs	r3, r2, r3
 8009efe:	68ba      	ldr	r2, [r7, #8]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d302      	bcc.n	8009f0a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d116      	bne.n	8009f38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2220      	movs	r2, #32
 8009f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f24:	f043 0220 	orr.w	r2, r3, #32
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009f34:	2301      	movs	r3, #1
 8009f36:	e007      	b.n	8009f48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	695b      	ldr	r3, [r3, #20]
 8009f3e:	f003 0304 	and.w	r3, r3, #4
 8009f42:	2b04      	cmp	r3, #4
 8009f44:	d1ca      	bne.n	8009edc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009f46:	2300      	movs	r3, #0
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3710      	adds	r7, #16
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b084      	sub	sp, #16
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009f5c:	e042      	b.n	8009fe4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	695b      	ldr	r3, [r3, #20]
 8009f64:	f003 0310 	and.w	r3, r3, #16
 8009f68:	2b10      	cmp	r3, #16
 8009f6a:	d119      	bne.n	8009fa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f06f 0210 	mvn.w	r2, #16
 8009f74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2220      	movs	r2, #32
 8009f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2200      	movs	r2, #0
 8009f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2200      	movs	r2, #0
 8009f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	e029      	b.n	8009ff4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fa0:	f7fd f954 	bl	800724c <HAL_GetTick>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	1ad3      	subs	r3, r2, r3
 8009faa:	68ba      	ldr	r2, [r7, #8]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d302      	bcc.n	8009fb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d116      	bne.n	8009fe4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2220      	movs	r2, #32
 8009fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fd0:	f043 0220 	orr.w	r2, r3, #32
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	e007      	b.n	8009ff4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	695b      	ldr	r3, [r3, #20]
 8009fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fee:	2b40      	cmp	r3, #64	; 0x40
 8009ff0:	d1b5      	bne.n	8009f5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009ff2:	2300      	movs	r3, #0
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	695b      	ldr	r3, [r3, #20]
 800a00a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a00e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a012:	d11b      	bne.n	800a04c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a01c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2220      	movs	r2, #32
 800a028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a038:	f043 0204 	orr.w	r2, r3, #4
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a048:	2301      	movs	r3, #1
 800a04a:	e000      	b.n	800a04e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a04c:	2300      	movs	r3, #0
}
 800a04e:	4618      	mov	r0, r3
 800a050:	370c      	adds	r7, #12
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr
	...

0800a05c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b086      	sub	sp, #24
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d101      	bne.n	800a06e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a06a:	2301      	movs	r3, #1
 800a06c:	e267      	b.n	800a53e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f003 0301 	and.w	r3, r3, #1
 800a076:	2b00      	cmp	r3, #0
 800a078:	d075      	beq.n	800a166 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a07a:	4b88      	ldr	r3, [pc, #544]	; (800a29c <HAL_RCC_OscConfig+0x240>)
 800a07c:	689b      	ldr	r3, [r3, #8]
 800a07e:	f003 030c 	and.w	r3, r3, #12
 800a082:	2b04      	cmp	r3, #4
 800a084:	d00c      	beq.n	800a0a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a086:	4b85      	ldr	r3, [pc, #532]	; (800a29c <HAL_RCC_OscConfig+0x240>)
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a08e:	2b08      	cmp	r3, #8
 800a090:	d112      	bne.n	800a0b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a092:	4b82      	ldr	r3, [pc, #520]	; (800a29c <HAL_RCC_OscConfig+0x240>)
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a09a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a09e:	d10b      	bne.n	800a0b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0a0:	4b7e      	ldr	r3, [pc, #504]	; (800a29c <HAL_RCC_OscConfig+0x240>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d05b      	beq.n	800a164 <HAL_RCC_OscConfig+0x108>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d157      	bne.n	800a164 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	e242      	b.n	800a53e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0c0:	d106      	bne.n	800a0d0 <HAL_RCC_OscConfig+0x74>
 800a0c2:	4b76      	ldr	r3, [pc, #472]	; (800a29c <HAL_RCC_OscConfig+0x240>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a75      	ldr	r2, [pc, #468]	; (800a29c <HAL_RCC_OscConfig+0x240>)
 800a0c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0cc:	6013      	str	r3, [r2, #0]
 800a0ce:	e01d      	b.n	800a10c <HAL_RCC_OscConfig+0xb0>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a0d8:	d10c      	bne.n	800a0f4 <HAL_RCC_OscConfig+0x98>
 800a0da:	4b70      	ldr	r3, [pc, #448]	; (800a29c <HAL_RCC_OscConfig+0x240>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a6f      	ldr	r2, [pc, #444]	; (800a29c <HAL_RCC_OscConfig+0x240>)
 800a0e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a0e4:	6013      	str	r3, [r2, #0]
 800a0e6:	4b6d      	ldr	r3, [pc, #436]	; (800a29c <HAL_RCC_OscConfig+0x240>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a6c      	ldr	r2, [pc, #432]	; (800a29c <HAL_RCC_OscConfig+0x240>)
 800a0ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0f0:	6013      	str	r3, [r2, #0]
 800a0f2:	e00b      	b.n	800a10c <HAL_RCC_OscConfig+0xb0>
 800a0f4:	4b69      	ldr	r3, [pc, #420]	; (800a29c <HAL_RCC_OscConfig+0x240>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a68      	ldr	r2, [pc, #416]	; (800a29c <HAL_RCC_OscConfig+0x240>)
 800a0fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a0fe:	6013      	str	r3, [r2, #0]
 800a100:	4b66      	ldr	r3, [pc, #408]	; (800a29c <HAL_RCC_OscConfig+0x240>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4a65      	ldr	r2, [pc, #404]	; (800a29c <HAL_RCC_OscConfig+0x240>)
 800a106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a10a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d013      	beq.n	800a13c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a114:	f7fd f89a 	bl	800724c <HAL_GetTick>
 800a118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a11a:	e008      	b.n	800a12e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a11c:	f7fd f896 	bl	800724c <HAL_GetTick>
 800a120:	4602      	mov	r2, r0
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	1ad3      	subs	r3, r2, r3
 800a126:	2b64      	cmp	r3, #100	; 0x64
 800a128:	d901      	bls.n	800a12e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a12a:	2303      	movs	r3, #3
 800a12c:	e207      	b.n	800a53e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a12e:	4b5b      	ldr	r3, [pc, #364]	; (800a29c <HAL_RCC_OscConfig+0x240>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a136:	2b00      	cmp	r3, #0
 800a138:	d0f0      	beq.n	800a11c <HAL_RCC_OscConfig+0xc0>
 800a13a:	e014      	b.n	800a166 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a13c:	f7fd f886 	bl	800724c <HAL_GetTick>
 800a140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a142:	e008      	b.n	800a156 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a144:	f7fd f882 	bl	800724c <HAL_GetTick>
 800a148:	4602      	mov	r2, r0
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	1ad3      	subs	r3, r2, r3
 800a14e:	2b64      	cmp	r3, #100	; 0x64
 800a150:	d901      	bls.n	800a156 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a152:	2303      	movs	r3, #3
 800a154:	e1f3      	b.n	800a53e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a156:	4b51      	ldr	r3, [pc, #324]	; (800a29c <HAL_RCC_OscConfig+0x240>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d1f0      	bne.n	800a144 <HAL_RCC_OscConfig+0xe8>
 800a162:	e000      	b.n	800a166 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f003 0302 	and.w	r3, r3, #2
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d063      	beq.n	800a23a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a172:	4b4a      	ldr	r3, [pc, #296]	; (800a29c <HAL_RCC_OscConfig+0x240>)
 800a174:	689b      	ldr	r3, [r3, #8]
 800a176:	f003 030c 	and.w	r3, r3, #12
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d00b      	beq.n	800a196 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a17e:	4b47      	ldr	r3, [pc, #284]	; (800a29c <HAL_RCC_OscConfig+0x240>)
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a186:	2b08      	cmp	r3, #8
 800a188:	d11c      	bne.n	800a1c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a18a:	4b44      	ldr	r3, [pc, #272]	; (800a29c <HAL_RCC_OscConfig+0x240>)
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a192:	2b00      	cmp	r3, #0
 800a194:	d116      	bne.n	800a1c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a196:	4b41      	ldr	r3, [pc, #260]	; (800a29c <HAL_RCC_OscConfig+0x240>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f003 0302 	and.w	r3, r3, #2
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d005      	beq.n	800a1ae <HAL_RCC_OscConfig+0x152>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d001      	beq.n	800a1ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e1c7      	b.n	800a53e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1ae:	4b3b      	ldr	r3, [pc, #236]	; (800a29c <HAL_RCC_OscConfig+0x240>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	691b      	ldr	r3, [r3, #16]
 800a1ba:	00db      	lsls	r3, r3, #3
 800a1bc:	4937      	ldr	r1, [pc, #220]	; (800a29c <HAL_RCC_OscConfig+0x240>)
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a1c2:	e03a      	b.n	800a23a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d020      	beq.n	800a20e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a1cc:	4b34      	ldr	r3, [pc, #208]	; (800a2a0 <HAL_RCC_OscConfig+0x244>)
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1d2:	f7fd f83b 	bl	800724c <HAL_GetTick>
 800a1d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a1d8:	e008      	b.n	800a1ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a1da:	f7fd f837 	bl	800724c <HAL_GetTick>
 800a1de:	4602      	mov	r2, r0
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	1ad3      	subs	r3, r2, r3
 800a1e4:	2b02      	cmp	r3, #2
 800a1e6:	d901      	bls.n	800a1ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a1e8:	2303      	movs	r3, #3
 800a1ea:	e1a8      	b.n	800a53e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a1ec:	4b2b      	ldr	r3, [pc, #172]	; (800a29c <HAL_RCC_OscConfig+0x240>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f003 0302 	and.w	r3, r3, #2
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d0f0      	beq.n	800a1da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1f8:	4b28      	ldr	r3, [pc, #160]	; (800a29c <HAL_RCC_OscConfig+0x240>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	691b      	ldr	r3, [r3, #16]
 800a204:	00db      	lsls	r3, r3, #3
 800a206:	4925      	ldr	r1, [pc, #148]	; (800a29c <HAL_RCC_OscConfig+0x240>)
 800a208:	4313      	orrs	r3, r2
 800a20a:	600b      	str	r3, [r1, #0]
 800a20c:	e015      	b.n	800a23a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a20e:	4b24      	ldr	r3, [pc, #144]	; (800a2a0 <HAL_RCC_OscConfig+0x244>)
 800a210:	2200      	movs	r2, #0
 800a212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a214:	f7fd f81a 	bl	800724c <HAL_GetTick>
 800a218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a21a:	e008      	b.n	800a22e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a21c:	f7fd f816 	bl	800724c <HAL_GetTick>
 800a220:	4602      	mov	r2, r0
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	1ad3      	subs	r3, r2, r3
 800a226:	2b02      	cmp	r3, #2
 800a228:	d901      	bls.n	800a22e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a22a:	2303      	movs	r3, #3
 800a22c:	e187      	b.n	800a53e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a22e:	4b1b      	ldr	r3, [pc, #108]	; (800a29c <HAL_RCC_OscConfig+0x240>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f003 0302 	and.w	r3, r3, #2
 800a236:	2b00      	cmp	r3, #0
 800a238:	d1f0      	bne.n	800a21c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f003 0308 	and.w	r3, r3, #8
 800a242:	2b00      	cmp	r3, #0
 800a244:	d036      	beq.n	800a2b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	695b      	ldr	r3, [r3, #20]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d016      	beq.n	800a27c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a24e:	4b15      	ldr	r3, [pc, #84]	; (800a2a4 <HAL_RCC_OscConfig+0x248>)
 800a250:	2201      	movs	r2, #1
 800a252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a254:	f7fc fffa 	bl	800724c <HAL_GetTick>
 800a258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a25a:	e008      	b.n	800a26e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a25c:	f7fc fff6 	bl	800724c <HAL_GetTick>
 800a260:	4602      	mov	r2, r0
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	1ad3      	subs	r3, r2, r3
 800a266:	2b02      	cmp	r3, #2
 800a268:	d901      	bls.n	800a26e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a26a:	2303      	movs	r3, #3
 800a26c:	e167      	b.n	800a53e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a26e:	4b0b      	ldr	r3, [pc, #44]	; (800a29c <HAL_RCC_OscConfig+0x240>)
 800a270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a272:	f003 0302 	and.w	r3, r3, #2
 800a276:	2b00      	cmp	r3, #0
 800a278:	d0f0      	beq.n	800a25c <HAL_RCC_OscConfig+0x200>
 800a27a:	e01b      	b.n	800a2b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a27c:	4b09      	ldr	r3, [pc, #36]	; (800a2a4 <HAL_RCC_OscConfig+0x248>)
 800a27e:	2200      	movs	r2, #0
 800a280:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a282:	f7fc ffe3 	bl	800724c <HAL_GetTick>
 800a286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a288:	e00e      	b.n	800a2a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a28a:	f7fc ffdf 	bl	800724c <HAL_GetTick>
 800a28e:	4602      	mov	r2, r0
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	1ad3      	subs	r3, r2, r3
 800a294:	2b02      	cmp	r3, #2
 800a296:	d907      	bls.n	800a2a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a298:	2303      	movs	r3, #3
 800a29a:	e150      	b.n	800a53e <HAL_RCC_OscConfig+0x4e2>
 800a29c:	40023800 	.word	0x40023800
 800a2a0:	42470000 	.word	0x42470000
 800a2a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a2a8:	4b88      	ldr	r3, [pc, #544]	; (800a4cc <HAL_RCC_OscConfig+0x470>)
 800a2aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2ac:	f003 0302 	and.w	r3, r3, #2
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d1ea      	bne.n	800a28a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f003 0304 	and.w	r3, r3, #4
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	f000 8097 	beq.w	800a3f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a2c6:	4b81      	ldr	r3, [pc, #516]	; (800a4cc <HAL_RCC_OscConfig+0x470>)
 800a2c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d10f      	bne.n	800a2f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	60bb      	str	r3, [r7, #8]
 800a2d6:	4b7d      	ldr	r3, [pc, #500]	; (800a4cc <HAL_RCC_OscConfig+0x470>)
 800a2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2da:	4a7c      	ldr	r2, [pc, #496]	; (800a4cc <HAL_RCC_OscConfig+0x470>)
 800a2dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2e0:	6413      	str	r3, [r2, #64]	; 0x40
 800a2e2:	4b7a      	ldr	r3, [pc, #488]	; (800a4cc <HAL_RCC_OscConfig+0x470>)
 800a2e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2ea:	60bb      	str	r3, [r7, #8]
 800a2ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a2f2:	4b77      	ldr	r3, [pc, #476]	; (800a4d0 <HAL_RCC_OscConfig+0x474>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d118      	bne.n	800a330 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a2fe:	4b74      	ldr	r3, [pc, #464]	; (800a4d0 <HAL_RCC_OscConfig+0x474>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a73      	ldr	r2, [pc, #460]	; (800a4d0 <HAL_RCC_OscConfig+0x474>)
 800a304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a30a:	f7fc ff9f 	bl	800724c <HAL_GetTick>
 800a30e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a310:	e008      	b.n	800a324 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a312:	f7fc ff9b 	bl	800724c <HAL_GetTick>
 800a316:	4602      	mov	r2, r0
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	1ad3      	subs	r3, r2, r3
 800a31c:	2b02      	cmp	r3, #2
 800a31e:	d901      	bls.n	800a324 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a320:	2303      	movs	r3, #3
 800a322:	e10c      	b.n	800a53e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a324:	4b6a      	ldr	r3, [pc, #424]	; (800a4d0 <HAL_RCC_OscConfig+0x474>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d0f0      	beq.n	800a312 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	2b01      	cmp	r3, #1
 800a336:	d106      	bne.n	800a346 <HAL_RCC_OscConfig+0x2ea>
 800a338:	4b64      	ldr	r3, [pc, #400]	; (800a4cc <HAL_RCC_OscConfig+0x470>)
 800a33a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a33c:	4a63      	ldr	r2, [pc, #396]	; (800a4cc <HAL_RCC_OscConfig+0x470>)
 800a33e:	f043 0301 	orr.w	r3, r3, #1
 800a342:	6713      	str	r3, [r2, #112]	; 0x70
 800a344:	e01c      	b.n	800a380 <HAL_RCC_OscConfig+0x324>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	2b05      	cmp	r3, #5
 800a34c:	d10c      	bne.n	800a368 <HAL_RCC_OscConfig+0x30c>
 800a34e:	4b5f      	ldr	r3, [pc, #380]	; (800a4cc <HAL_RCC_OscConfig+0x470>)
 800a350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a352:	4a5e      	ldr	r2, [pc, #376]	; (800a4cc <HAL_RCC_OscConfig+0x470>)
 800a354:	f043 0304 	orr.w	r3, r3, #4
 800a358:	6713      	str	r3, [r2, #112]	; 0x70
 800a35a:	4b5c      	ldr	r3, [pc, #368]	; (800a4cc <HAL_RCC_OscConfig+0x470>)
 800a35c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a35e:	4a5b      	ldr	r2, [pc, #364]	; (800a4cc <HAL_RCC_OscConfig+0x470>)
 800a360:	f043 0301 	orr.w	r3, r3, #1
 800a364:	6713      	str	r3, [r2, #112]	; 0x70
 800a366:	e00b      	b.n	800a380 <HAL_RCC_OscConfig+0x324>
 800a368:	4b58      	ldr	r3, [pc, #352]	; (800a4cc <HAL_RCC_OscConfig+0x470>)
 800a36a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a36c:	4a57      	ldr	r2, [pc, #348]	; (800a4cc <HAL_RCC_OscConfig+0x470>)
 800a36e:	f023 0301 	bic.w	r3, r3, #1
 800a372:	6713      	str	r3, [r2, #112]	; 0x70
 800a374:	4b55      	ldr	r3, [pc, #340]	; (800a4cc <HAL_RCC_OscConfig+0x470>)
 800a376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a378:	4a54      	ldr	r2, [pc, #336]	; (800a4cc <HAL_RCC_OscConfig+0x470>)
 800a37a:	f023 0304 	bic.w	r3, r3, #4
 800a37e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d015      	beq.n	800a3b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a388:	f7fc ff60 	bl	800724c <HAL_GetTick>
 800a38c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a38e:	e00a      	b.n	800a3a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a390:	f7fc ff5c 	bl	800724c <HAL_GetTick>
 800a394:	4602      	mov	r2, r0
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	1ad3      	subs	r3, r2, r3
 800a39a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d901      	bls.n	800a3a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a3a2:	2303      	movs	r3, #3
 800a3a4:	e0cb      	b.n	800a53e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a3a6:	4b49      	ldr	r3, [pc, #292]	; (800a4cc <HAL_RCC_OscConfig+0x470>)
 800a3a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3aa:	f003 0302 	and.w	r3, r3, #2
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d0ee      	beq.n	800a390 <HAL_RCC_OscConfig+0x334>
 800a3b2:	e014      	b.n	800a3de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a3b4:	f7fc ff4a 	bl	800724c <HAL_GetTick>
 800a3b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a3ba:	e00a      	b.n	800a3d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a3bc:	f7fc ff46 	bl	800724c <HAL_GetTick>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	1ad3      	subs	r3, r2, r3
 800a3c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d901      	bls.n	800a3d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a3ce:	2303      	movs	r3, #3
 800a3d0:	e0b5      	b.n	800a53e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a3d2:	4b3e      	ldr	r3, [pc, #248]	; (800a4cc <HAL_RCC_OscConfig+0x470>)
 800a3d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3d6:	f003 0302 	and.w	r3, r3, #2
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d1ee      	bne.n	800a3bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a3de:	7dfb      	ldrb	r3, [r7, #23]
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d105      	bne.n	800a3f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a3e4:	4b39      	ldr	r3, [pc, #228]	; (800a4cc <HAL_RCC_OscConfig+0x470>)
 800a3e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e8:	4a38      	ldr	r2, [pc, #224]	; (800a4cc <HAL_RCC_OscConfig+0x470>)
 800a3ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a3ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	699b      	ldr	r3, [r3, #24]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	f000 80a1 	beq.w	800a53c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a3fa:	4b34      	ldr	r3, [pc, #208]	; (800a4cc <HAL_RCC_OscConfig+0x470>)
 800a3fc:	689b      	ldr	r3, [r3, #8]
 800a3fe:	f003 030c 	and.w	r3, r3, #12
 800a402:	2b08      	cmp	r3, #8
 800a404:	d05c      	beq.n	800a4c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	699b      	ldr	r3, [r3, #24]
 800a40a:	2b02      	cmp	r3, #2
 800a40c:	d141      	bne.n	800a492 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a40e:	4b31      	ldr	r3, [pc, #196]	; (800a4d4 <HAL_RCC_OscConfig+0x478>)
 800a410:	2200      	movs	r2, #0
 800a412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a414:	f7fc ff1a 	bl	800724c <HAL_GetTick>
 800a418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a41a:	e008      	b.n	800a42e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a41c:	f7fc ff16 	bl	800724c <HAL_GetTick>
 800a420:	4602      	mov	r2, r0
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	1ad3      	subs	r3, r2, r3
 800a426:	2b02      	cmp	r3, #2
 800a428:	d901      	bls.n	800a42e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a42a:	2303      	movs	r3, #3
 800a42c:	e087      	b.n	800a53e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a42e:	4b27      	ldr	r3, [pc, #156]	; (800a4cc <HAL_RCC_OscConfig+0x470>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a436:	2b00      	cmp	r3, #0
 800a438:	d1f0      	bne.n	800a41c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	69da      	ldr	r2, [r3, #28]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6a1b      	ldr	r3, [r3, #32]
 800a442:	431a      	orrs	r2, r3
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a448:	019b      	lsls	r3, r3, #6
 800a44a:	431a      	orrs	r2, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a450:	085b      	lsrs	r3, r3, #1
 800a452:	3b01      	subs	r3, #1
 800a454:	041b      	lsls	r3, r3, #16
 800a456:	431a      	orrs	r2, r3
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a45c:	061b      	lsls	r3, r3, #24
 800a45e:	491b      	ldr	r1, [pc, #108]	; (800a4cc <HAL_RCC_OscConfig+0x470>)
 800a460:	4313      	orrs	r3, r2
 800a462:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a464:	4b1b      	ldr	r3, [pc, #108]	; (800a4d4 <HAL_RCC_OscConfig+0x478>)
 800a466:	2201      	movs	r2, #1
 800a468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a46a:	f7fc feef 	bl	800724c <HAL_GetTick>
 800a46e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a470:	e008      	b.n	800a484 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a472:	f7fc feeb 	bl	800724c <HAL_GetTick>
 800a476:	4602      	mov	r2, r0
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	1ad3      	subs	r3, r2, r3
 800a47c:	2b02      	cmp	r3, #2
 800a47e:	d901      	bls.n	800a484 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a480:	2303      	movs	r3, #3
 800a482:	e05c      	b.n	800a53e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a484:	4b11      	ldr	r3, [pc, #68]	; (800a4cc <HAL_RCC_OscConfig+0x470>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d0f0      	beq.n	800a472 <HAL_RCC_OscConfig+0x416>
 800a490:	e054      	b.n	800a53c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a492:	4b10      	ldr	r3, [pc, #64]	; (800a4d4 <HAL_RCC_OscConfig+0x478>)
 800a494:	2200      	movs	r2, #0
 800a496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a498:	f7fc fed8 	bl	800724c <HAL_GetTick>
 800a49c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a49e:	e008      	b.n	800a4b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a4a0:	f7fc fed4 	bl	800724c <HAL_GetTick>
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	1ad3      	subs	r3, r2, r3
 800a4aa:	2b02      	cmp	r3, #2
 800a4ac:	d901      	bls.n	800a4b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a4ae:	2303      	movs	r3, #3
 800a4b0:	e045      	b.n	800a53e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a4b2:	4b06      	ldr	r3, [pc, #24]	; (800a4cc <HAL_RCC_OscConfig+0x470>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d1f0      	bne.n	800a4a0 <HAL_RCC_OscConfig+0x444>
 800a4be:	e03d      	b.n	800a53c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	699b      	ldr	r3, [r3, #24]
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	d107      	bne.n	800a4d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	e038      	b.n	800a53e <HAL_RCC_OscConfig+0x4e2>
 800a4cc:	40023800 	.word	0x40023800
 800a4d0:	40007000 	.word	0x40007000
 800a4d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a4d8:	4b1b      	ldr	r3, [pc, #108]	; (800a548 <HAL_RCC_OscConfig+0x4ec>)
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	699b      	ldr	r3, [r3, #24]
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d028      	beq.n	800a538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d121      	bne.n	800a538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d11a      	bne.n	800a538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a502:	68fa      	ldr	r2, [r7, #12]
 800a504:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a508:	4013      	ands	r3, r2
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a50e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a510:	4293      	cmp	r3, r2
 800a512:	d111      	bne.n	800a538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a51e:	085b      	lsrs	r3, r3, #1
 800a520:	3b01      	subs	r3, #1
 800a522:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a524:	429a      	cmp	r2, r3
 800a526:	d107      	bne.n	800a538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a532:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a534:	429a      	cmp	r2, r3
 800a536:	d001      	beq.n	800a53c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	e000      	b.n	800a53e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3718      	adds	r7, #24
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	40023800 	.word	0x40023800

0800a54c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d101      	bne.n	800a560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a55c:	2301      	movs	r3, #1
 800a55e:	e0cc      	b.n	800a6fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a560:	4b68      	ldr	r3, [pc, #416]	; (800a704 <HAL_RCC_ClockConfig+0x1b8>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f003 0307 	and.w	r3, r3, #7
 800a568:	683a      	ldr	r2, [r7, #0]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d90c      	bls.n	800a588 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a56e:	4b65      	ldr	r3, [pc, #404]	; (800a704 <HAL_RCC_ClockConfig+0x1b8>)
 800a570:	683a      	ldr	r2, [r7, #0]
 800a572:	b2d2      	uxtb	r2, r2
 800a574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a576:	4b63      	ldr	r3, [pc, #396]	; (800a704 <HAL_RCC_ClockConfig+0x1b8>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f003 0307 	and.w	r3, r3, #7
 800a57e:	683a      	ldr	r2, [r7, #0]
 800a580:	429a      	cmp	r2, r3
 800a582:	d001      	beq.n	800a588 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a584:	2301      	movs	r3, #1
 800a586:	e0b8      	b.n	800a6fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f003 0302 	and.w	r3, r3, #2
 800a590:	2b00      	cmp	r3, #0
 800a592:	d020      	beq.n	800a5d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f003 0304 	and.w	r3, r3, #4
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d005      	beq.n	800a5ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a5a0:	4b59      	ldr	r3, [pc, #356]	; (800a708 <HAL_RCC_ClockConfig+0x1bc>)
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	4a58      	ldr	r2, [pc, #352]	; (800a708 <HAL_RCC_ClockConfig+0x1bc>)
 800a5a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a5aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f003 0308 	and.w	r3, r3, #8
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d005      	beq.n	800a5c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a5b8:	4b53      	ldr	r3, [pc, #332]	; (800a708 <HAL_RCC_ClockConfig+0x1bc>)
 800a5ba:	689b      	ldr	r3, [r3, #8]
 800a5bc:	4a52      	ldr	r2, [pc, #328]	; (800a708 <HAL_RCC_ClockConfig+0x1bc>)
 800a5be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a5c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a5c4:	4b50      	ldr	r3, [pc, #320]	; (800a708 <HAL_RCC_ClockConfig+0x1bc>)
 800a5c6:	689b      	ldr	r3, [r3, #8]
 800a5c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	494d      	ldr	r1, [pc, #308]	; (800a708 <HAL_RCC_ClockConfig+0x1bc>)
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f003 0301 	and.w	r3, r3, #1
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d044      	beq.n	800a66c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d107      	bne.n	800a5fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a5ea:	4b47      	ldr	r3, [pc, #284]	; (800a708 <HAL_RCC_ClockConfig+0x1bc>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d119      	bne.n	800a62a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	e07f      	b.n	800a6fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	2b02      	cmp	r3, #2
 800a600:	d003      	beq.n	800a60a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a606:	2b03      	cmp	r3, #3
 800a608:	d107      	bne.n	800a61a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a60a:	4b3f      	ldr	r3, [pc, #252]	; (800a708 <HAL_RCC_ClockConfig+0x1bc>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a612:	2b00      	cmp	r3, #0
 800a614:	d109      	bne.n	800a62a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a616:	2301      	movs	r3, #1
 800a618:	e06f      	b.n	800a6fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a61a:	4b3b      	ldr	r3, [pc, #236]	; (800a708 <HAL_RCC_ClockConfig+0x1bc>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f003 0302 	and.w	r3, r3, #2
 800a622:	2b00      	cmp	r3, #0
 800a624:	d101      	bne.n	800a62a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a626:	2301      	movs	r3, #1
 800a628:	e067      	b.n	800a6fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a62a:	4b37      	ldr	r3, [pc, #220]	; (800a708 <HAL_RCC_ClockConfig+0x1bc>)
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	f023 0203 	bic.w	r2, r3, #3
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	4934      	ldr	r1, [pc, #208]	; (800a708 <HAL_RCC_ClockConfig+0x1bc>)
 800a638:	4313      	orrs	r3, r2
 800a63a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a63c:	f7fc fe06 	bl	800724c <HAL_GetTick>
 800a640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a642:	e00a      	b.n	800a65a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a644:	f7fc fe02 	bl	800724c <HAL_GetTick>
 800a648:	4602      	mov	r2, r0
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	1ad3      	subs	r3, r2, r3
 800a64e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a652:	4293      	cmp	r3, r2
 800a654:	d901      	bls.n	800a65a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a656:	2303      	movs	r3, #3
 800a658:	e04f      	b.n	800a6fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a65a:	4b2b      	ldr	r3, [pc, #172]	; (800a708 <HAL_RCC_ClockConfig+0x1bc>)
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	f003 020c 	and.w	r2, r3, #12
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	009b      	lsls	r3, r3, #2
 800a668:	429a      	cmp	r2, r3
 800a66a:	d1eb      	bne.n	800a644 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a66c:	4b25      	ldr	r3, [pc, #148]	; (800a704 <HAL_RCC_ClockConfig+0x1b8>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f003 0307 	and.w	r3, r3, #7
 800a674:	683a      	ldr	r2, [r7, #0]
 800a676:	429a      	cmp	r2, r3
 800a678:	d20c      	bcs.n	800a694 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a67a:	4b22      	ldr	r3, [pc, #136]	; (800a704 <HAL_RCC_ClockConfig+0x1b8>)
 800a67c:	683a      	ldr	r2, [r7, #0]
 800a67e:	b2d2      	uxtb	r2, r2
 800a680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a682:	4b20      	ldr	r3, [pc, #128]	; (800a704 <HAL_RCC_ClockConfig+0x1b8>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f003 0307 	and.w	r3, r3, #7
 800a68a:	683a      	ldr	r2, [r7, #0]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d001      	beq.n	800a694 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a690:	2301      	movs	r3, #1
 800a692:	e032      	b.n	800a6fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f003 0304 	and.w	r3, r3, #4
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d008      	beq.n	800a6b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a6a0:	4b19      	ldr	r3, [pc, #100]	; (800a708 <HAL_RCC_ClockConfig+0x1bc>)
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	4916      	ldr	r1, [pc, #88]	; (800a708 <HAL_RCC_ClockConfig+0x1bc>)
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f003 0308 	and.w	r3, r3, #8
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d009      	beq.n	800a6d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a6be:	4b12      	ldr	r3, [pc, #72]	; (800a708 <HAL_RCC_ClockConfig+0x1bc>)
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	691b      	ldr	r3, [r3, #16]
 800a6ca:	00db      	lsls	r3, r3, #3
 800a6cc:	490e      	ldr	r1, [pc, #56]	; (800a708 <HAL_RCC_ClockConfig+0x1bc>)
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a6d2:	f000 f821 	bl	800a718 <HAL_RCC_GetSysClockFreq>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	4b0b      	ldr	r3, [pc, #44]	; (800a708 <HAL_RCC_ClockConfig+0x1bc>)
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	091b      	lsrs	r3, r3, #4
 800a6de:	f003 030f 	and.w	r3, r3, #15
 800a6e2:	490a      	ldr	r1, [pc, #40]	; (800a70c <HAL_RCC_ClockConfig+0x1c0>)
 800a6e4:	5ccb      	ldrb	r3, [r1, r3]
 800a6e6:	fa22 f303 	lsr.w	r3, r2, r3
 800a6ea:	4a09      	ldr	r2, [pc, #36]	; (800a710 <HAL_RCC_ClockConfig+0x1c4>)
 800a6ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a6ee:	4b09      	ldr	r3, [pc, #36]	; (800a714 <HAL_RCC_ClockConfig+0x1c8>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7fc fd66 	bl	80071c4 <HAL_InitTick>

  return HAL_OK;
 800a6f8:	2300      	movs	r3, #0
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3710      	adds	r7, #16
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	40023c00 	.word	0x40023c00
 800a708:	40023800 	.word	0x40023800
 800a70c:	0800f388 	.word	0x0800f388
 800a710:	20008f7c 	.word	0x20008f7c
 800a714:	20008f80 	.word	0x20008f80

0800a718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a71c:	b090      	sub	sp, #64	; 0x40
 800a71e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a720:	2300      	movs	r3, #0
 800a722:	637b      	str	r3, [r7, #52]	; 0x34
 800a724:	2300      	movs	r3, #0
 800a726:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a728:	2300      	movs	r3, #0
 800a72a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800a72c:	2300      	movs	r3, #0
 800a72e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a730:	4b59      	ldr	r3, [pc, #356]	; (800a898 <HAL_RCC_GetSysClockFreq+0x180>)
 800a732:	689b      	ldr	r3, [r3, #8]
 800a734:	f003 030c 	and.w	r3, r3, #12
 800a738:	2b08      	cmp	r3, #8
 800a73a:	d00d      	beq.n	800a758 <HAL_RCC_GetSysClockFreq+0x40>
 800a73c:	2b08      	cmp	r3, #8
 800a73e:	f200 80a1 	bhi.w	800a884 <HAL_RCC_GetSysClockFreq+0x16c>
 800a742:	2b00      	cmp	r3, #0
 800a744:	d002      	beq.n	800a74c <HAL_RCC_GetSysClockFreq+0x34>
 800a746:	2b04      	cmp	r3, #4
 800a748:	d003      	beq.n	800a752 <HAL_RCC_GetSysClockFreq+0x3a>
 800a74a:	e09b      	b.n	800a884 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a74c:	4b53      	ldr	r3, [pc, #332]	; (800a89c <HAL_RCC_GetSysClockFreq+0x184>)
 800a74e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800a750:	e09b      	b.n	800a88a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a752:	4b53      	ldr	r3, [pc, #332]	; (800a8a0 <HAL_RCC_GetSysClockFreq+0x188>)
 800a754:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a756:	e098      	b.n	800a88a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a758:	4b4f      	ldr	r3, [pc, #316]	; (800a898 <HAL_RCC_GetSysClockFreq+0x180>)
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a760:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a762:	4b4d      	ldr	r3, [pc, #308]	; (800a898 <HAL_RCC_GetSysClockFreq+0x180>)
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d028      	beq.n	800a7c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a76e:	4b4a      	ldr	r3, [pc, #296]	; (800a898 <HAL_RCC_GetSysClockFreq+0x180>)
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	099b      	lsrs	r3, r3, #6
 800a774:	2200      	movs	r2, #0
 800a776:	623b      	str	r3, [r7, #32]
 800a778:	627a      	str	r2, [r7, #36]	; 0x24
 800a77a:	6a3b      	ldr	r3, [r7, #32]
 800a77c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a780:	2100      	movs	r1, #0
 800a782:	4b47      	ldr	r3, [pc, #284]	; (800a8a0 <HAL_RCC_GetSysClockFreq+0x188>)
 800a784:	fb03 f201 	mul.w	r2, r3, r1
 800a788:	2300      	movs	r3, #0
 800a78a:	fb00 f303 	mul.w	r3, r0, r3
 800a78e:	4413      	add	r3, r2
 800a790:	4a43      	ldr	r2, [pc, #268]	; (800a8a0 <HAL_RCC_GetSysClockFreq+0x188>)
 800a792:	fba0 1202 	umull	r1, r2, r0, r2
 800a796:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a798:	460a      	mov	r2, r1
 800a79a:	62ba      	str	r2, [r7, #40]	; 0x28
 800a79c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a79e:	4413      	add	r3, r2
 800a7a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	61bb      	str	r3, [r7, #24]
 800a7a8:	61fa      	str	r2, [r7, #28]
 800a7aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a7ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a7b2:	f7f6 f86f 	bl	8000894 <__aeabi_uldivmod>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	4613      	mov	r3, r2
 800a7bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7be:	e053      	b.n	800a868 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a7c0:	4b35      	ldr	r3, [pc, #212]	; (800a898 <HAL_RCC_GetSysClockFreq+0x180>)
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	099b      	lsrs	r3, r3, #6
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	613b      	str	r3, [r7, #16]
 800a7ca:	617a      	str	r2, [r7, #20]
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a7d2:	f04f 0b00 	mov.w	fp, #0
 800a7d6:	4652      	mov	r2, sl
 800a7d8:	465b      	mov	r3, fp
 800a7da:	f04f 0000 	mov.w	r0, #0
 800a7de:	f04f 0100 	mov.w	r1, #0
 800a7e2:	0159      	lsls	r1, r3, #5
 800a7e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a7e8:	0150      	lsls	r0, r2, #5
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	ebb2 080a 	subs.w	r8, r2, sl
 800a7f2:	eb63 090b 	sbc.w	r9, r3, fp
 800a7f6:	f04f 0200 	mov.w	r2, #0
 800a7fa:	f04f 0300 	mov.w	r3, #0
 800a7fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a802:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a806:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a80a:	ebb2 0408 	subs.w	r4, r2, r8
 800a80e:	eb63 0509 	sbc.w	r5, r3, r9
 800a812:	f04f 0200 	mov.w	r2, #0
 800a816:	f04f 0300 	mov.w	r3, #0
 800a81a:	00eb      	lsls	r3, r5, #3
 800a81c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a820:	00e2      	lsls	r2, r4, #3
 800a822:	4614      	mov	r4, r2
 800a824:	461d      	mov	r5, r3
 800a826:	eb14 030a 	adds.w	r3, r4, sl
 800a82a:	603b      	str	r3, [r7, #0]
 800a82c:	eb45 030b 	adc.w	r3, r5, fp
 800a830:	607b      	str	r3, [r7, #4]
 800a832:	f04f 0200 	mov.w	r2, #0
 800a836:	f04f 0300 	mov.w	r3, #0
 800a83a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a83e:	4629      	mov	r1, r5
 800a840:	028b      	lsls	r3, r1, #10
 800a842:	4621      	mov	r1, r4
 800a844:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a848:	4621      	mov	r1, r4
 800a84a:	028a      	lsls	r2, r1, #10
 800a84c:	4610      	mov	r0, r2
 800a84e:	4619      	mov	r1, r3
 800a850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a852:	2200      	movs	r2, #0
 800a854:	60bb      	str	r3, [r7, #8]
 800a856:	60fa      	str	r2, [r7, #12]
 800a858:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a85c:	f7f6 f81a 	bl	8000894 <__aeabi_uldivmod>
 800a860:	4602      	mov	r2, r0
 800a862:	460b      	mov	r3, r1
 800a864:	4613      	mov	r3, r2
 800a866:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a868:	4b0b      	ldr	r3, [pc, #44]	; (800a898 <HAL_RCC_GetSysClockFreq+0x180>)
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	0c1b      	lsrs	r3, r3, #16
 800a86e:	f003 0303 	and.w	r3, r3, #3
 800a872:	3301      	adds	r3, #1
 800a874:	005b      	lsls	r3, r3, #1
 800a876:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800a878:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a87c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a880:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a882:	e002      	b.n	800a88a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a884:	4b05      	ldr	r3, [pc, #20]	; (800a89c <HAL_RCC_GetSysClockFreq+0x184>)
 800a886:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a888:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3740      	adds	r7, #64	; 0x40
 800a890:	46bd      	mov	sp, r7
 800a892:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a896:	bf00      	nop
 800a898:	40023800 	.word	0x40023800
 800a89c:	00f42400 	.word	0x00f42400
 800a8a0:	017d7840 	.word	0x017d7840

0800a8a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a8a8:	4b03      	ldr	r3, [pc, #12]	; (800a8b8 <HAL_RCC_GetHCLKFreq+0x14>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr
 800a8b6:	bf00      	nop
 800a8b8:	20008f7c 	.word	0x20008f7c

0800a8bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a8c0:	f7ff fff0 	bl	800a8a4 <HAL_RCC_GetHCLKFreq>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	4b05      	ldr	r3, [pc, #20]	; (800a8dc <HAL_RCC_GetPCLK1Freq+0x20>)
 800a8c8:	689b      	ldr	r3, [r3, #8]
 800a8ca:	0a9b      	lsrs	r3, r3, #10
 800a8cc:	f003 0307 	and.w	r3, r3, #7
 800a8d0:	4903      	ldr	r1, [pc, #12]	; (800a8e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a8d2:	5ccb      	ldrb	r3, [r1, r3]
 800a8d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	bd80      	pop	{r7, pc}
 800a8dc:	40023800 	.word	0x40023800
 800a8e0:	0800f398 	.word	0x0800f398

0800a8e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a8e8:	f7ff ffdc 	bl	800a8a4 <HAL_RCC_GetHCLKFreq>
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	4b05      	ldr	r3, [pc, #20]	; (800a904 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	0b5b      	lsrs	r3, r3, #13
 800a8f4:	f003 0307 	and.w	r3, r3, #7
 800a8f8:	4903      	ldr	r1, [pc, #12]	; (800a908 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a8fa:	5ccb      	ldrb	r3, [r1, r3]
 800a8fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a900:	4618      	mov	r0, r3
 800a902:	bd80      	pop	{r7, pc}
 800a904:	40023800 	.word	0x40023800
 800a908:	0800f398 	.word	0x0800f398

0800a90c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b082      	sub	sp, #8
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d101      	bne.n	800a91e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a91a:	2301      	movs	r3, #1
 800a91c:	e07b      	b.n	800aa16 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a922:	2b00      	cmp	r3, #0
 800a924:	d108      	bne.n	800a938 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a92e:	d009      	beq.n	800a944 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	61da      	str	r2, [r3, #28]
 800a936:	e005      	b.n	800a944 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2200      	movs	r2, #0
 800a93c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2200      	movs	r2, #0
 800a942:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2200      	movs	r2, #0
 800a948:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a950:	b2db      	uxtb	r3, r3
 800a952:	2b00      	cmp	r3, #0
 800a954:	d106      	bne.n	800a964 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f7fc f900 	bl	8006b64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2202      	movs	r2, #2
 800a968:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a97a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a98c:	431a      	orrs	r2, r3
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	68db      	ldr	r3, [r3, #12]
 800a992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a996:	431a      	orrs	r2, r3
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	691b      	ldr	r3, [r3, #16]
 800a99c:	f003 0302 	and.w	r3, r3, #2
 800a9a0:	431a      	orrs	r2, r3
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	695b      	ldr	r3, [r3, #20]
 800a9a6:	f003 0301 	and.w	r3, r3, #1
 800a9aa:	431a      	orrs	r2, r3
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	699b      	ldr	r3, [r3, #24]
 800a9b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a9b4:	431a      	orrs	r2, r3
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	69db      	ldr	r3, [r3, #28]
 800a9ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a9be:	431a      	orrs	r2, r3
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6a1b      	ldr	r3, [r3, #32]
 800a9c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9c8:	ea42 0103 	orr.w	r1, r2, r3
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	430a      	orrs	r2, r1
 800a9da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	699b      	ldr	r3, [r3, #24]
 800a9e0:	0c1b      	lsrs	r3, r3, #16
 800a9e2:	f003 0104 	and.w	r1, r3, #4
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ea:	f003 0210 	and.w	r2, r3, #16
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	430a      	orrs	r2, r1
 800a9f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	69da      	ldr	r2, [r3, #28]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800aa04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2201      	movs	r2, #1
 800aa10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800aa14:	2300      	movs	r3, #0
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3708      	adds	r7, #8
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b088      	sub	sp, #32
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	60f8      	str	r0, [r7, #12]
 800aa26:	60b9      	str	r1, [r7, #8]
 800aa28:	603b      	str	r3, [r7, #0]
 800aa2a:	4613      	mov	r3, r2
 800aa2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800aa38:	2b01      	cmp	r3, #1
 800aa3a:	d101      	bne.n	800aa40 <HAL_SPI_Transmit+0x22>
 800aa3c:	2302      	movs	r3, #2
 800aa3e:	e126      	b.n	800ac8e <HAL_SPI_Transmit+0x270>
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2201      	movs	r2, #1
 800aa44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aa48:	f7fc fc00 	bl	800724c <HAL_GetTick>
 800aa4c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800aa4e:	88fb      	ldrh	r3, [r7, #6]
 800aa50:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aa58:	b2db      	uxtb	r3, r3
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d002      	beq.n	800aa64 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800aa5e:	2302      	movs	r3, #2
 800aa60:	77fb      	strb	r3, [r7, #31]
    goto error;
 800aa62:	e10b      	b.n	800ac7c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d002      	beq.n	800aa70 <HAL_SPI_Transmit+0x52>
 800aa6a:	88fb      	ldrh	r3, [r7, #6]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d102      	bne.n	800aa76 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800aa70:	2301      	movs	r3, #1
 800aa72:	77fb      	strb	r3, [r7, #31]
    goto error;
 800aa74:	e102      	b.n	800ac7c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2203      	movs	r2, #3
 800aa7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	2200      	movs	r2, #0
 800aa82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	68ba      	ldr	r2, [r7, #8]
 800aa88:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	88fa      	ldrh	r2, [r7, #6]
 800aa8e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	88fa      	ldrh	r2, [r7, #6]
 800aa94:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2200      	movs	r2, #0
 800aab2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	689b      	ldr	r3, [r3, #8]
 800aab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aabc:	d10f      	bne.n	800aade <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aacc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aadc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aae8:	2b40      	cmp	r3, #64	; 0x40
 800aaea:	d007      	beq.n	800aafc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aafa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	68db      	ldr	r3, [r3, #12]
 800ab00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab04:	d14b      	bne.n	800ab9e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	685b      	ldr	r3, [r3, #4]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d002      	beq.n	800ab14 <HAL_SPI_Transmit+0xf6>
 800ab0e:	8afb      	ldrh	r3, [r7, #22]
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d13e      	bne.n	800ab92 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab18:	881a      	ldrh	r2, [r3, #0]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab24:	1c9a      	adds	r2, r3, #2
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	3b01      	subs	r3, #1
 800ab32:	b29a      	uxth	r2, r3
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ab38:	e02b      	b.n	800ab92 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	689b      	ldr	r3, [r3, #8]
 800ab40:	f003 0302 	and.w	r3, r3, #2
 800ab44:	2b02      	cmp	r3, #2
 800ab46:	d112      	bne.n	800ab6e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab4c:	881a      	ldrh	r2, [r3, #0]
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab58:	1c9a      	adds	r2, r3, #2
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	3b01      	subs	r3, #1
 800ab66:	b29a      	uxth	r2, r3
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	86da      	strh	r2, [r3, #54]	; 0x36
 800ab6c:	e011      	b.n	800ab92 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab6e:	f7fc fb6d 	bl	800724c <HAL_GetTick>
 800ab72:	4602      	mov	r2, r0
 800ab74:	69bb      	ldr	r3, [r7, #24]
 800ab76:	1ad3      	subs	r3, r2, r3
 800ab78:	683a      	ldr	r2, [r7, #0]
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d803      	bhi.n	800ab86 <HAL_SPI_Transmit+0x168>
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab84:	d102      	bne.n	800ab8c <HAL_SPI_Transmit+0x16e>
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d102      	bne.n	800ab92 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800ab8c:	2303      	movs	r3, #3
 800ab8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ab90:	e074      	b.n	800ac7c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d1ce      	bne.n	800ab3a <HAL_SPI_Transmit+0x11c>
 800ab9c:	e04c      	b.n	800ac38 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d002      	beq.n	800abac <HAL_SPI_Transmit+0x18e>
 800aba6:	8afb      	ldrh	r3, [r7, #22]
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d140      	bne.n	800ac2e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	330c      	adds	r3, #12
 800abb6:	7812      	ldrb	r2, [r2, #0]
 800abb8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abbe:	1c5a      	adds	r2, r3, #1
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800abc8:	b29b      	uxth	r3, r3
 800abca:	3b01      	subs	r3, #1
 800abcc:	b29a      	uxth	r2, r3
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800abd2:	e02c      	b.n	800ac2e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	689b      	ldr	r3, [r3, #8]
 800abda:	f003 0302 	and.w	r3, r3, #2
 800abde:	2b02      	cmp	r3, #2
 800abe0:	d113      	bne.n	800ac0a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	330c      	adds	r3, #12
 800abec:	7812      	ldrb	r2, [r2, #0]
 800abee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abf4:	1c5a      	adds	r2, r3, #1
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	3b01      	subs	r3, #1
 800ac02:	b29a      	uxth	r2, r3
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	86da      	strh	r2, [r3, #54]	; 0x36
 800ac08:	e011      	b.n	800ac2e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ac0a:	f7fc fb1f 	bl	800724c <HAL_GetTick>
 800ac0e:	4602      	mov	r2, r0
 800ac10:	69bb      	ldr	r3, [r7, #24]
 800ac12:	1ad3      	subs	r3, r2, r3
 800ac14:	683a      	ldr	r2, [r7, #0]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d803      	bhi.n	800ac22 <HAL_SPI_Transmit+0x204>
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac20:	d102      	bne.n	800ac28 <HAL_SPI_Transmit+0x20a>
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d102      	bne.n	800ac2e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800ac28:	2303      	movs	r3, #3
 800ac2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ac2c:	e026      	b.n	800ac7c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac32:	b29b      	uxth	r3, r3
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d1cd      	bne.n	800abd4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ac38:	69ba      	ldr	r2, [r7, #24]
 800ac3a:	6839      	ldr	r1, [r7, #0]
 800ac3c:	68f8      	ldr	r0, [r7, #12]
 800ac3e:	f000 fdcb 	bl	800b7d8 <SPI_EndRxTxTransaction>
 800ac42:	4603      	mov	r3, r0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d002      	beq.n	800ac4e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2220      	movs	r2, #32
 800ac4c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d10a      	bne.n	800ac6c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ac56:	2300      	movs	r3, #0
 800ac58:	613b      	str	r3, [r7, #16]
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	68db      	ldr	r3, [r3, #12]
 800ac60:	613b      	str	r3, [r7, #16]
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	689b      	ldr	r3, [r3, #8]
 800ac68:	613b      	str	r3, [r7, #16]
 800ac6a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d002      	beq.n	800ac7a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800ac74:	2301      	movs	r3, #1
 800ac76:	77fb      	strb	r3, [r7, #31]
 800ac78:	e000      	b.n	800ac7c <HAL_SPI_Transmit+0x25e>
  }

error:
 800ac7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	2201      	movs	r2, #1
 800ac80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	2200      	movs	r2, #0
 800ac88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ac8c:	7ffb      	ldrb	r3, [r7, #31]
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3720      	adds	r7, #32
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}

0800ac96 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b08c      	sub	sp, #48	; 0x30
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	60f8      	str	r0, [r7, #12]
 800ac9e:	60b9      	str	r1, [r7, #8]
 800aca0:	607a      	str	r2, [r7, #4]
 800aca2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800aca4:	2301      	movs	r3, #1
 800aca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800aca8:	2300      	movs	r3, #0
 800acaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d101      	bne.n	800acbc <HAL_SPI_TransmitReceive+0x26>
 800acb8:	2302      	movs	r3, #2
 800acba:	e18a      	b.n	800afd2 <HAL_SPI_TransmitReceive+0x33c>
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2201      	movs	r2, #1
 800acc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800acc4:	f7fc fac2 	bl	800724c <HAL_GetTick>
 800acc8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800acd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800acda:	887b      	ldrh	r3, [r7, #2]
 800acdc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800acde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d00f      	beq.n	800ad06 <HAL_SPI_TransmitReceive+0x70>
 800ace6:	69fb      	ldr	r3, [r7, #28]
 800ace8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800acec:	d107      	bne.n	800acfe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	689b      	ldr	r3, [r3, #8]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d103      	bne.n	800acfe <HAL_SPI_TransmitReceive+0x68>
 800acf6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800acfa:	2b04      	cmp	r3, #4
 800acfc:	d003      	beq.n	800ad06 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800acfe:	2302      	movs	r3, #2
 800ad00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ad04:	e15b      	b.n	800afbe <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d005      	beq.n	800ad18 <HAL_SPI_TransmitReceive+0x82>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d002      	beq.n	800ad18 <HAL_SPI_TransmitReceive+0x82>
 800ad12:	887b      	ldrh	r3, [r7, #2]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d103      	bne.n	800ad20 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ad18:	2301      	movs	r3, #1
 800ad1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ad1e:	e14e      	b.n	800afbe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ad26:	b2db      	uxtb	r3, r3
 800ad28:	2b04      	cmp	r3, #4
 800ad2a:	d003      	beq.n	800ad34 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	2205      	movs	r2, #5
 800ad30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2200      	movs	r2, #0
 800ad38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	687a      	ldr	r2, [r7, #4]
 800ad3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	887a      	ldrh	r2, [r7, #2]
 800ad44:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	887a      	ldrh	r2, [r7, #2]
 800ad4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	68ba      	ldr	r2, [r7, #8]
 800ad50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	887a      	ldrh	r2, [r7, #2]
 800ad56:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	887a      	ldrh	r2, [r7, #2]
 800ad5c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2200      	movs	r2, #0
 800ad62:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2200      	movs	r2, #0
 800ad68:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad74:	2b40      	cmp	r3, #64	; 0x40
 800ad76:	d007      	beq.n	800ad88 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	681a      	ldr	r2, [r3, #0]
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad90:	d178      	bne.n	800ae84 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d002      	beq.n	800ada0 <HAL_SPI_TransmitReceive+0x10a>
 800ad9a:	8b7b      	ldrh	r3, [r7, #26]
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d166      	bne.n	800ae6e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ada4:	881a      	ldrh	r2, [r3, #0]
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adb0:	1c9a      	adds	r2, r3, #2
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800adba:	b29b      	uxth	r3, r3
 800adbc:	3b01      	subs	r3, #1
 800adbe:	b29a      	uxth	r2, r3
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800adc4:	e053      	b.n	800ae6e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	f003 0302 	and.w	r3, r3, #2
 800add0:	2b02      	cmp	r3, #2
 800add2:	d11b      	bne.n	800ae0c <HAL_SPI_TransmitReceive+0x176>
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800add8:	b29b      	uxth	r3, r3
 800adda:	2b00      	cmp	r3, #0
 800addc:	d016      	beq.n	800ae0c <HAL_SPI_TransmitReceive+0x176>
 800adde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade0:	2b01      	cmp	r3, #1
 800ade2:	d113      	bne.n	800ae0c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ade8:	881a      	ldrh	r2, [r3, #0]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adf4:	1c9a      	adds	r2, r3, #2
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	3b01      	subs	r3, #1
 800ae02:	b29a      	uxth	r2, r3
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	689b      	ldr	r3, [r3, #8]
 800ae12:	f003 0301 	and.w	r3, r3, #1
 800ae16:	2b01      	cmp	r3, #1
 800ae18:	d119      	bne.n	800ae4e <HAL_SPI_TransmitReceive+0x1b8>
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d014      	beq.n	800ae4e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	68da      	ldr	r2, [r3, #12]
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae2e:	b292      	uxth	r2, r2
 800ae30:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae36:	1c9a      	adds	r2, r3, #2
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae40:	b29b      	uxth	r3, r3
 800ae42:	3b01      	subs	r3, #1
 800ae44:	b29a      	uxth	r2, r3
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ae4e:	f7fc f9fd 	bl	800724c <HAL_GetTick>
 800ae52:	4602      	mov	r2, r0
 800ae54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae56:	1ad3      	subs	r3, r2, r3
 800ae58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d807      	bhi.n	800ae6e <HAL_SPI_TransmitReceive+0x1d8>
 800ae5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae64:	d003      	beq.n	800ae6e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ae66:	2303      	movs	r3, #3
 800ae68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ae6c:	e0a7      	b.n	800afbe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d1a6      	bne.n	800adc6 <HAL_SPI_TransmitReceive+0x130>
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae7c:	b29b      	uxth	r3, r3
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d1a1      	bne.n	800adc6 <HAL_SPI_TransmitReceive+0x130>
 800ae82:	e07c      	b.n	800af7e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d002      	beq.n	800ae92 <HAL_SPI_TransmitReceive+0x1fc>
 800ae8c:	8b7b      	ldrh	r3, [r7, #26]
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d16b      	bne.n	800af6a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	330c      	adds	r3, #12
 800ae9c:	7812      	ldrb	r2, [r2, #0]
 800ae9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aea4:	1c5a      	adds	r2, r3, #1
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	3b01      	subs	r3, #1
 800aeb2:	b29a      	uxth	r2, r3
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aeb8:	e057      	b.n	800af6a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	689b      	ldr	r3, [r3, #8]
 800aec0:	f003 0302 	and.w	r3, r3, #2
 800aec4:	2b02      	cmp	r3, #2
 800aec6:	d11c      	bne.n	800af02 <HAL_SPI_TransmitReceive+0x26c>
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aecc:	b29b      	uxth	r3, r3
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d017      	beq.n	800af02 <HAL_SPI_TransmitReceive+0x26c>
 800aed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	d114      	bne.n	800af02 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	330c      	adds	r3, #12
 800aee2:	7812      	ldrb	r2, [r2, #0]
 800aee4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeea:	1c5a      	adds	r2, r3, #1
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	3b01      	subs	r3, #1
 800aef8:	b29a      	uxth	r2, r3
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aefe:	2300      	movs	r3, #0
 800af00:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	689b      	ldr	r3, [r3, #8]
 800af08:	f003 0301 	and.w	r3, r3, #1
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d119      	bne.n	800af44 <HAL_SPI_TransmitReceive+0x2ae>
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af14:	b29b      	uxth	r3, r3
 800af16:	2b00      	cmp	r3, #0
 800af18:	d014      	beq.n	800af44 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	68da      	ldr	r2, [r3, #12]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af24:	b2d2      	uxtb	r2, r2
 800af26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af2c:	1c5a      	adds	r2, r3, #1
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af36:	b29b      	uxth	r3, r3
 800af38:	3b01      	subs	r3, #1
 800af3a:	b29a      	uxth	r2, r3
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800af40:	2301      	movs	r3, #1
 800af42:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800af44:	f7fc f982 	bl	800724c <HAL_GetTick>
 800af48:	4602      	mov	r2, r0
 800af4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4c:	1ad3      	subs	r3, r2, r3
 800af4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af50:	429a      	cmp	r2, r3
 800af52:	d803      	bhi.n	800af5c <HAL_SPI_TransmitReceive+0x2c6>
 800af54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af5a:	d102      	bne.n	800af62 <HAL_SPI_TransmitReceive+0x2cc>
 800af5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d103      	bne.n	800af6a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800af62:	2303      	movs	r3, #3
 800af64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800af68:	e029      	b.n	800afbe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800af6e:	b29b      	uxth	r3, r3
 800af70:	2b00      	cmp	r3, #0
 800af72:	d1a2      	bne.n	800aeba <HAL_SPI_TransmitReceive+0x224>
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af78:	b29b      	uxth	r3, r3
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d19d      	bne.n	800aeba <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800af7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800af82:	68f8      	ldr	r0, [r7, #12]
 800af84:	f000 fc28 	bl	800b7d8 <SPI_EndRxTxTransaction>
 800af88:	4603      	mov	r3, r0
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d006      	beq.n	800af9c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800af8e:	2301      	movs	r3, #1
 800af90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2220      	movs	r2, #32
 800af98:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800af9a:	e010      	b.n	800afbe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	689b      	ldr	r3, [r3, #8]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d10b      	bne.n	800afbc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800afa4:	2300      	movs	r3, #0
 800afa6:	617b      	str	r3, [r7, #20]
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	68db      	ldr	r3, [r3, #12]
 800afae:	617b      	str	r3, [r7, #20]
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	617b      	str	r3, [r7, #20]
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	e000      	b.n	800afbe <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800afbc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2201      	movs	r2, #1
 800afc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2200      	movs	r2, #0
 800afca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800afce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3730      	adds	r7, #48	; 0x30
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
	...

0800afdc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b086      	sub	sp, #24
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	60f8      	str	r0, [r7, #12]
 800afe4:	60b9      	str	r1, [r7, #8]
 800afe6:	4613      	mov	r3, r2
 800afe8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800afea:	2300      	movs	r3, #0
 800afec:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	d101      	bne.n	800affc <HAL_SPI_Transmit_DMA+0x20>
 800aff8:	2302      	movs	r3, #2
 800affa:	e09b      	b.n	800b134 <HAL_SPI_Transmit_DMA+0x158>
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2201      	movs	r2, #1
 800b000:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b00a:	b2db      	uxtb	r3, r3
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d002      	beq.n	800b016 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800b010:	2302      	movs	r3, #2
 800b012:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b014:	e089      	b.n	800b12a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d002      	beq.n	800b022 <HAL_SPI_Transmit_DMA+0x46>
 800b01c:	88fb      	ldrh	r3, [r7, #6]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d102      	bne.n	800b028 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800b022:	2301      	movs	r3, #1
 800b024:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b026:	e080      	b.n	800b12a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	2203      	movs	r2, #3
 800b02c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2200      	movs	r2, #0
 800b034:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	68ba      	ldr	r2, [r7, #8]
 800b03a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	88fa      	ldrh	r2, [r7, #6]
 800b040:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	88fa      	ldrh	r2, [r7, #6]
 800b046:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2200      	movs	r2, #0
 800b04c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	2200      	movs	r2, #0
 800b052:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2200      	movs	r2, #0
 800b058:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2200      	movs	r2, #0
 800b05e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2200      	movs	r2, #0
 800b064:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	689b      	ldr	r3, [r3, #8]
 800b06a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b06e:	d10f      	bne.n	800b090 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	681a      	ldr	r2, [r3, #0]
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b07e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	681a      	ldr	r2, [r3, #0]
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b08e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b094:	4a29      	ldr	r2, [pc, #164]	; (800b13c <HAL_SPI_Transmit_DMA+0x160>)
 800b096:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b09c:	4a28      	ldr	r2, [pc, #160]	; (800b140 <HAL_SPI_Transmit_DMA+0x164>)
 800b09e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0a4:	4a27      	ldr	r2, [pc, #156]	; (800b144 <HAL_SPI_Transmit_DMA+0x168>)
 800b0a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	330c      	adds	r3, #12
 800b0c0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b0c6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b0c8:	f7fd fb20 	bl	800870c <HAL_DMA_Start_IT>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d00c      	beq.n	800b0ec <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0d6:	f043 0210 	orr.w	r2, r3, #16
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800b0ea:	e01e      	b.n	800b12a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0f6:	2b40      	cmp	r3, #64	; 0x40
 800b0f8:	d007      	beq.n	800b10a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	681a      	ldr	r2, [r3, #0]
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b108:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	685a      	ldr	r2, [r3, #4]
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f042 0220 	orr.w	r2, r2, #32
 800b118:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	685a      	ldr	r2, [r3, #4]
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f042 0202 	orr.w	r2, r2, #2
 800b128:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	2200      	movs	r2, #0
 800b12e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b132:	7dfb      	ldrb	r3, [r7, #23]
}
 800b134:	4618      	mov	r0, r3
 800b136:	3718      	adds	r7, #24
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}
 800b13c:	0800b569 	.word	0x0800b569
 800b140:	0800b389 	.word	0x0800b389
 800b144:	0800b5bd 	.word	0x0800b5bd

0800b148 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b086      	sub	sp, #24
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	607a      	str	r2, [r7, #4]
 800b154:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b156:	2300      	movs	r3, #0
 800b158:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b160:	2b01      	cmp	r3, #1
 800b162:	d101      	bne.n	800b168 <HAL_SPI_TransmitReceive_DMA+0x20>
 800b164:	2302      	movs	r3, #2
 800b166:	e0e3      	b.n	800b330 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2201      	movs	r2, #1
 800b16c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b176:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800b17e:	7dbb      	ldrb	r3, [r7, #22]
 800b180:	2b01      	cmp	r3, #1
 800b182:	d00d      	beq.n	800b1a0 <HAL_SPI_TransmitReceive_DMA+0x58>
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b18a:	d106      	bne.n	800b19a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	689b      	ldr	r3, [r3, #8]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d102      	bne.n	800b19a <HAL_SPI_TransmitReceive_DMA+0x52>
 800b194:	7dbb      	ldrb	r3, [r7, #22]
 800b196:	2b04      	cmp	r3, #4
 800b198:	d002      	beq.n	800b1a0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800b19a:	2302      	movs	r3, #2
 800b19c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b19e:	e0c2      	b.n	800b326 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d005      	beq.n	800b1b2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d002      	beq.n	800b1b2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800b1ac:	887b      	ldrh	r3, [r7, #2]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d102      	bne.n	800b1b8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b1b6:	e0b6      	b.n	800b326 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	2b04      	cmp	r3, #4
 800b1c2:	d003      	beq.n	800b1cc <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2205      	movs	r2, #5
 800b1c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	68ba      	ldr	r2, [r7, #8]
 800b1d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	887a      	ldrh	r2, [r7, #2]
 800b1dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	887a      	ldrh	r2, [r7, #2]
 800b1e2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	687a      	ldr	r2, [r7, #4]
 800b1e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	887a      	ldrh	r2, [r7, #2]
 800b1ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	887a      	ldrh	r2, [r7, #2]
 800b1f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2200      	movs	r2, #0
 800b200:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b208:	b2db      	uxtb	r3, r3
 800b20a:	2b04      	cmp	r3, #4
 800b20c:	d108      	bne.n	800b220 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b212:	4a49      	ldr	r2, [pc, #292]	; (800b338 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800b214:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b21a:	4a48      	ldr	r2, [pc, #288]	; (800b33c <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800b21c:	63da      	str	r2, [r3, #60]	; 0x3c
 800b21e:	e007      	b.n	800b230 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b224:	4a46      	ldr	r2, [pc, #280]	; (800b340 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800b226:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b22c:	4a45      	ldr	r2, [pc, #276]	; (800b344 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800b22e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b234:	4a44      	ldr	r2, [pc, #272]	; (800b348 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800b236:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b23c:	2200      	movs	r2, #0
 800b23e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	330c      	adds	r3, #12
 800b24a:	4619      	mov	r1, r3
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b250:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b256:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800b258:	f7fd fa58 	bl	800870c <HAL_DMA_Start_IT>
 800b25c:	4603      	mov	r3, r0
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d00c      	beq.n	800b27c <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b266:	f043 0210 	orr.w	r2, r3, #16
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800b26e:	2301      	movs	r3, #1
 800b270:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2201      	movs	r2, #1
 800b276:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800b27a:	e054      	b.n	800b326 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	685a      	ldr	r2, [r3, #4]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f042 0201 	orr.w	r2, r2, #1
 800b28a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b290:	2200      	movs	r2, #0
 800b292:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b298:	2200      	movs	r2, #0
 800b29a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	330c      	adds	r3, #12
 800b2bc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b2c2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b2c4:	f7fd fa22 	bl	800870c <HAL_DMA_Start_IT>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d00c      	beq.n	800b2e8 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2d2:	f043 0210 	orr.w	r2, r3, #16
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800b2da:	2301      	movs	r3, #1
 800b2dc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2201      	movs	r2, #1
 800b2e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800b2e6:	e01e      	b.n	800b326 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2f2:	2b40      	cmp	r3, #64	; 0x40
 800b2f4:	d007      	beq.n	800b306 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	681a      	ldr	r2, [r3, #0]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b304:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	685a      	ldr	r2, [r3, #4]
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f042 0220 	orr.w	r2, r2, #32
 800b314:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	685a      	ldr	r2, [r3, #4]
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f042 0202 	orr.w	r2, r2, #2
 800b324:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2200      	movs	r2, #0
 800b32a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b32e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b330:	4618      	mov	r0, r3
 800b332:	3718      	adds	r7, #24
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}
 800b338:	0800b585 	.word	0x0800b585
 800b33c:	0800b431 	.word	0x0800b431
 800b340:	0800b5a1 	.word	0x0800b5a1
 800b344:	0800b4d9 	.word	0x0800b4d9
 800b348:	0800b5bd 	.word	0x0800b5bd

0800b34c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b083      	sub	sp, #12
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800b354:	bf00      	nop
 800b356:	370c      	adds	r7, #12
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr

0800b360 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b360:	b480      	push	{r7}
 800b362:	b083      	sub	sp, #12
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800b368:	bf00      	nop
 800b36a:	370c      	adds	r7, #12
 800b36c:	46bd      	mov	sp, r7
 800b36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b372:	4770      	bx	lr

0800b374 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800b37c:	bf00      	nop
 800b37e:	370c      	adds	r7, #12
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b086      	sub	sp, #24
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b394:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b396:	f7fb ff59 	bl	800724c <HAL_GetTick>
 800b39a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3aa:	d03b      	beq.n	800b424 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	685a      	ldr	r2, [r3, #4]
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f022 0220 	bic.w	r2, r2, #32
 800b3ba:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	685a      	ldr	r2, [r3, #4]
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f022 0202 	bic.w	r2, r2, #2
 800b3ca:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b3cc:	693a      	ldr	r2, [r7, #16]
 800b3ce:	2164      	movs	r1, #100	; 0x64
 800b3d0:	6978      	ldr	r0, [r7, #20]
 800b3d2:	f000 fa01 	bl	800b7d8 <SPI_EndRxTxTransaction>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d005      	beq.n	800b3e8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3e0:	f043 0220 	orr.w	r2, r3, #32
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	689b      	ldr	r3, [r3, #8]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d10a      	bne.n	800b406 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	60fb      	str	r3, [r7, #12]
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	68db      	ldr	r3, [r3, #12]
 800b3fa:	60fb      	str	r3, [r7, #12]
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	689b      	ldr	r3, [r3, #8]
 800b402:	60fb      	str	r3, [r7, #12]
 800b404:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	2200      	movs	r2, #0
 800b40a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	2201      	movs	r2, #1
 800b410:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d003      	beq.n	800b424 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b41c:	6978      	ldr	r0, [r7, #20]
 800b41e:	f7fb fa2d 	bl	800687c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b422:	e002      	b.n	800b42a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800b424:	6978      	ldr	r0, [r7, #20]
 800b426:	f7fb fa43 	bl	80068b0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b42a:	3718      	adds	r7, #24
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b084      	sub	sp, #16
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b43c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b43e:	f7fb ff05 	bl	800724c <HAL_GetTick>
 800b442:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b44e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b452:	d03b      	beq.n	800b4cc <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	685a      	ldr	r2, [r3, #4]
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f022 0220 	bic.w	r2, r2, #32
 800b462:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	689b      	ldr	r3, [r3, #8]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d10d      	bne.n	800b488 <SPI_DMAReceiveCplt+0x58>
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b474:	d108      	bne.n	800b488 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	685a      	ldr	r2, [r3, #4]
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f022 0203 	bic.w	r2, r2, #3
 800b484:	605a      	str	r2, [r3, #4]
 800b486:	e007      	b.n	800b498 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	685a      	ldr	r2, [r3, #4]
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f022 0201 	bic.w	r2, r2, #1
 800b496:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b498:	68ba      	ldr	r2, [r7, #8]
 800b49a:	2164      	movs	r1, #100	; 0x64
 800b49c:	68f8      	ldr	r0, [r7, #12]
 800b49e:	f000 f935 	bl	800b70c <SPI_EndRxTransaction>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d002      	beq.n	800b4ae <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2220      	movs	r2, #32
 800b4ac:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d003      	beq.n	800b4cc <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b4c4:	68f8      	ldr	r0, [r7, #12]
 800b4c6:	f7fb f9d9 	bl	800687c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b4ca:	e002      	b.n	800b4d2 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800b4cc:	68f8      	ldr	r0, [r7, #12]
 800b4ce:	f7ff ff3d 	bl	800b34c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b4d2:	3710      	adds	r7, #16
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b084      	sub	sp, #16
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4e4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b4e6:	f7fb feb1 	bl	800724c <HAL_GetTick>
 800b4ea:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4fa:	d02f      	beq.n	800b55c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	685a      	ldr	r2, [r3, #4]
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f022 0220 	bic.w	r2, r2, #32
 800b50a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b50c:	68ba      	ldr	r2, [r7, #8]
 800b50e:	2164      	movs	r1, #100	; 0x64
 800b510:	68f8      	ldr	r0, [r7, #12]
 800b512:	f000 f961 	bl	800b7d8 <SPI_EndRxTxTransaction>
 800b516:	4603      	mov	r3, r0
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d005      	beq.n	800b528 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b520:	f043 0220 	orr.w	r2, r3, #32
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	685a      	ldr	r2, [r3, #4]
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f022 0203 	bic.w	r2, r2, #3
 800b536:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2200      	movs	r2, #0
 800b53c:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2200      	movs	r2, #0
 800b542:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2201      	movs	r2, #1
 800b548:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b550:	2b00      	cmp	r3, #0
 800b552:	d003      	beq.n	800b55c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b554:	68f8      	ldr	r0, [r7, #12]
 800b556:	f7fb f991 	bl	800687c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b55a:	e002      	b.n	800b562 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800b55c:	68f8      	ldr	r0, [r7, #12]
 800b55e:	f7fb f971 	bl	8006844 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b562:	3710      	adds	r7, #16
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b574:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800b576:	68f8      	ldr	r0, [r7, #12]
 800b578:	f7ff fef2 	bl	800b360 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b57c:	bf00      	nop
 800b57e:	3710      	adds	r7, #16
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b084      	sub	sp, #16
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b590:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800b592:	68f8      	ldr	r0, [r7, #12]
 800b594:	f7ff feee 	bl	800b374 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b598:	bf00      	nop
 800b59a:	3710      	adds	r7, #16
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ac:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800b5ae:	68f8      	ldr	r0, [r7, #12]
 800b5b0:	f7fb f932 	bl	8006818 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b5b4:	bf00      	nop
 800b5b6:	3710      	adds	r7, #16
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b084      	sub	sp, #16
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	685a      	ldr	r2, [r3, #4]
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f022 0203 	bic.w	r2, r2, #3
 800b5d8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5de:	f043 0210 	orr.w	r2, r3, #16
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2201      	movs	r2, #1
 800b5ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b5ee:	68f8      	ldr	r0, [r7, #12]
 800b5f0:	f7fb f944 	bl	800687c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b5f4:	bf00      	nop
 800b5f6:	3710      	adds	r7, #16
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}

0800b5fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b088      	sub	sp, #32
 800b600:	af00      	add	r7, sp, #0
 800b602:	60f8      	str	r0, [r7, #12]
 800b604:	60b9      	str	r1, [r7, #8]
 800b606:	603b      	str	r3, [r7, #0]
 800b608:	4613      	mov	r3, r2
 800b60a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b60c:	f7fb fe1e 	bl	800724c <HAL_GetTick>
 800b610:	4602      	mov	r2, r0
 800b612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b614:	1a9b      	subs	r3, r3, r2
 800b616:	683a      	ldr	r2, [r7, #0]
 800b618:	4413      	add	r3, r2
 800b61a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b61c:	f7fb fe16 	bl	800724c <HAL_GetTick>
 800b620:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b622:	4b39      	ldr	r3, [pc, #228]	; (800b708 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	015b      	lsls	r3, r3, #5
 800b628:	0d1b      	lsrs	r3, r3, #20
 800b62a:	69fa      	ldr	r2, [r7, #28]
 800b62c:	fb02 f303 	mul.w	r3, r2, r3
 800b630:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b632:	e054      	b.n	800b6de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b63a:	d050      	beq.n	800b6de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b63c:	f7fb fe06 	bl	800724c <HAL_GetTick>
 800b640:	4602      	mov	r2, r0
 800b642:	69bb      	ldr	r3, [r7, #24]
 800b644:	1ad3      	subs	r3, r2, r3
 800b646:	69fa      	ldr	r2, [r7, #28]
 800b648:	429a      	cmp	r2, r3
 800b64a:	d902      	bls.n	800b652 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b64c:	69fb      	ldr	r3, [r7, #28]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d13d      	bne.n	800b6ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	685a      	ldr	r2, [r3, #4]
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b660:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	685b      	ldr	r3, [r3, #4]
 800b666:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b66a:	d111      	bne.n	800b690 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	689b      	ldr	r3, [r3, #8]
 800b670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b674:	d004      	beq.n	800b680 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	689b      	ldr	r3, [r3, #8]
 800b67a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b67e:	d107      	bne.n	800b690 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b68e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b698:	d10f      	bne.n	800b6ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	681a      	ldr	r2, [r3, #0]
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b6a8:	601a      	str	r2, [r3, #0]
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	681a      	ldr	r2, [r3, #0]
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b6b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2201      	movs	r2, #1
 800b6be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b6ca:	2303      	movs	r3, #3
 800b6cc:	e017      	b.n	800b6fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d101      	bne.n	800b6d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	3b01      	subs	r3, #1
 800b6dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	689a      	ldr	r2, [r3, #8]
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	4013      	ands	r3, r2
 800b6e8:	68ba      	ldr	r2, [r7, #8]
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	bf0c      	ite	eq
 800b6ee:	2301      	moveq	r3, #1
 800b6f0:	2300      	movne	r3, #0
 800b6f2:	b2db      	uxtb	r3, r3
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	79fb      	ldrb	r3, [r7, #7]
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d19b      	bne.n	800b634 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b6fc:	2300      	movs	r3, #0
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3720      	adds	r7, #32
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop
 800b708:	20008f7c 	.word	0x20008f7c

0800b70c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b086      	sub	sp, #24
 800b710:	af02      	add	r7, sp, #8
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	60b9      	str	r1, [r7, #8]
 800b716:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	685b      	ldr	r3, [r3, #4]
 800b71c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b720:	d111      	bne.n	800b746 <SPI_EndRxTransaction+0x3a>
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	689b      	ldr	r3, [r3, #8]
 800b726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b72a:	d004      	beq.n	800b736 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	689b      	ldr	r3, [r3, #8]
 800b730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b734:	d107      	bne.n	800b746 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b744:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b74e:	d12a      	bne.n	800b7a6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	689b      	ldr	r3, [r3, #8]
 800b754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b758:	d012      	beq.n	800b780 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	9300      	str	r3, [sp, #0]
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	2200      	movs	r2, #0
 800b762:	2180      	movs	r1, #128	; 0x80
 800b764:	68f8      	ldr	r0, [r7, #12]
 800b766:	f7ff ff49 	bl	800b5fc <SPI_WaitFlagStateUntilTimeout>
 800b76a:	4603      	mov	r3, r0
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d02d      	beq.n	800b7cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b774:	f043 0220 	orr.w	r2, r3, #32
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b77c:	2303      	movs	r3, #3
 800b77e:	e026      	b.n	800b7ce <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	9300      	str	r3, [sp, #0]
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	2200      	movs	r2, #0
 800b788:	2101      	movs	r1, #1
 800b78a:	68f8      	ldr	r0, [r7, #12]
 800b78c:	f7ff ff36 	bl	800b5fc <SPI_WaitFlagStateUntilTimeout>
 800b790:	4603      	mov	r3, r0
 800b792:	2b00      	cmp	r3, #0
 800b794:	d01a      	beq.n	800b7cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b79a:	f043 0220 	orr.w	r2, r3, #32
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b7a2:	2303      	movs	r3, #3
 800b7a4:	e013      	b.n	800b7ce <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	9300      	str	r3, [sp, #0]
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	2101      	movs	r1, #1
 800b7b0:	68f8      	ldr	r0, [r7, #12]
 800b7b2:	f7ff ff23 	bl	800b5fc <SPI_WaitFlagStateUntilTimeout>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d007      	beq.n	800b7cc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7c0:	f043 0220 	orr.w	r2, r3, #32
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b7c8:	2303      	movs	r3, #3
 800b7ca:	e000      	b.n	800b7ce <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800b7cc:	2300      	movs	r3, #0
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3710      	adds	r7, #16
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
	...

0800b7d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b088      	sub	sp, #32
 800b7dc:	af02      	add	r7, sp, #8
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	60b9      	str	r1, [r7, #8]
 800b7e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b7e4:	4b1b      	ldr	r3, [pc, #108]	; (800b854 <SPI_EndRxTxTransaction+0x7c>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4a1b      	ldr	r2, [pc, #108]	; (800b858 <SPI_EndRxTxTransaction+0x80>)
 800b7ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b7ee:	0d5b      	lsrs	r3, r3, #21
 800b7f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b7f4:	fb02 f303 	mul.w	r3, r2, r3
 800b7f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b802:	d112      	bne.n	800b82a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	9300      	str	r3, [sp, #0]
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	2200      	movs	r2, #0
 800b80c:	2180      	movs	r1, #128	; 0x80
 800b80e:	68f8      	ldr	r0, [r7, #12]
 800b810:	f7ff fef4 	bl	800b5fc <SPI_WaitFlagStateUntilTimeout>
 800b814:	4603      	mov	r3, r0
 800b816:	2b00      	cmp	r3, #0
 800b818:	d016      	beq.n	800b848 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b81e:	f043 0220 	orr.w	r2, r3, #32
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b826:	2303      	movs	r3, #3
 800b828:	e00f      	b.n	800b84a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d00a      	beq.n	800b846 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	3b01      	subs	r3, #1
 800b834:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b840:	2b80      	cmp	r3, #128	; 0x80
 800b842:	d0f2      	beq.n	800b82a <SPI_EndRxTxTransaction+0x52>
 800b844:	e000      	b.n	800b848 <SPI_EndRxTxTransaction+0x70>
        break;
 800b846:	bf00      	nop
  }

  return HAL_OK;
 800b848:	2300      	movs	r3, #0
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3718      	adds	r7, #24
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}
 800b852:	bf00      	nop
 800b854:	20008f7c 	.word	0x20008f7c
 800b858:	165e9f81 	.word	0x165e9f81

0800b85c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b082      	sub	sp, #8
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d101      	bne.n	800b86e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b86a:	2301      	movs	r3, #1
 800b86c:	e041      	b.n	800b8f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b874:	b2db      	uxtb	r3, r3
 800b876:	2b00      	cmp	r3, #0
 800b878:	d106      	bne.n	800b888 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2200      	movs	r2, #0
 800b87e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f7fb fafe 	bl	8006e84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2202      	movs	r2, #2
 800b88c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681a      	ldr	r2, [r3, #0]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	3304      	adds	r3, #4
 800b898:	4619      	mov	r1, r3
 800b89a:	4610      	mov	r0, r2
 800b89c:	f000 fe38 	bl	800c510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2201      	movs	r2, #1
 800b8dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b8f0:	2300      	movs	r3, #0
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3708      	adds	r7, #8
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
	...

0800b8fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b085      	sub	sp, #20
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b90a:	b2db      	uxtb	r3, r3
 800b90c:	2b01      	cmp	r3, #1
 800b90e:	d001      	beq.n	800b914 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b910:	2301      	movs	r3, #1
 800b912:	e03c      	b.n	800b98e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2202      	movs	r2, #2
 800b918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4a1e      	ldr	r2, [pc, #120]	; (800b99c <HAL_TIM_Base_Start+0xa0>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d018      	beq.n	800b958 <HAL_TIM_Base_Start+0x5c>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b92e:	d013      	beq.n	800b958 <HAL_TIM_Base_Start+0x5c>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a1a      	ldr	r2, [pc, #104]	; (800b9a0 <HAL_TIM_Base_Start+0xa4>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d00e      	beq.n	800b958 <HAL_TIM_Base_Start+0x5c>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4a19      	ldr	r2, [pc, #100]	; (800b9a4 <HAL_TIM_Base_Start+0xa8>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d009      	beq.n	800b958 <HAL_TIM_Base_Start+0x5c>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	4a17      	ldr	r2, [pc, #92]	; (800b9a8 <HAL_TIM_Base_Start+0xac>)
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d004      	beq.n	800b958 <HAL_TIM_Base_Start+0x5c>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	4a16      	ldr	r2, [pc, #88]	; (800b9ac <HAL_TIM_Base_Start+0xb0>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d111      	bne.n	800b97c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	689b      	ldr	r3, [r3, #8]
 800b95e:	f003 0307 	and.w	r3, r3, #7
 800b962:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	2b06      	cmp	r3, #6
 800b968:	d010      	beq.n	800b98c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f042 0201 	orr.w	r2, r2, #1
 800b978:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b97a:	e007      	b.n	800b98c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f042 0201 	orr.w	r2, r2, #1
 800b98a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b98c:	2300      	movs	r3, #0
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3714      	adds	r7, #20
 800b992:	46bd      	mov	sp, r7
 800b994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b998:	4770      	bx	lr
 800b99a:	bf00      	nop
 800b99c:	40010000 	.word	0x40010000
 800b9a0:	40000400 	.word	0x40000400
 800b9a4:	40000800 	.word	0x40000800
 800b9a8:	40000c00 	.word	0x40000c00
 800b9ac:	40014000 	.word	0x40014000

0800b9b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b085      	sub	sp, #20
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9be:	b2db      	uxtb	r3, r3
 800b9c0:	2b01      	cmp	r3, #1
 800b9c2:	d001      	beq.n	800b9c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	e044      	b.n	800ba52 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2202      	movs	r2, #2
 800b9cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	68da      	ldr	r2, [r3, #12]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f042 0201 	orr.w	r2, r2, #1
 800b9de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4a1e      	ldr	r2, [pc, #120]	; (800ba60 <HAL_TIM_Base_Start_IT+0xb0>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d018      	beq.n	800ba1c <HAL_TIM_Base_Start_IT+0x6c>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9f2:	d013      	beq.n	800ba1c <HAL_TIM_Base_Start_IT+0x6c>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	4a1a      	ldr	r2, [pc, #104]	; (800ba64 <HAL_TIM_Base_Start_IT+0xb4>)
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d00e      	beq.n	800ba1c <HAL_TIM_Base_Start_IT+0x6c>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4a19      	ldr	r2, [pc, #100]	; (800ba68 <HAL_TIM_Base_Start_IT+0xb8>)
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d009      	beq.n	800ba1c <HAL_TIM_Base_Start_IT+0x6c>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	4a17      	ldr	r2, [pc, #92]	; (800ba6c <HAL_TIM_Base_Start_IT+0xbc>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d004      	beq.n	800ba1c <HAL_TIM_Base_Start_IT+0x6c>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	4a16      	ldr	r2, [pc, #88]	; (800ba70 <HAL_TIM_Base_Start_IT+0xc0>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d111      	bne.n	800ba40 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	689b      	ldr	r3, [r3, #8]
 800ba22:	f003 0307 	and.w	r3, r3, #7
 800ba26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2b06      	cmp	r3, #6
 800ba2c:	d010      	beq.n	800ba50 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	681a      	ldr	r2, [r3, #0]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f042 0201 	orr.w	r2, r2, #1
 800ba3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba3e:	e007      	b.n	800ba50 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	681a      	ldr	r2, [r3, #0]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f042 0201 	orr.w	r2, r2, #1
 800ba4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ba50:	2300      	movs	r3, #0
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3714      	adds	r7, #20
 800ba56:	46bd      	mov	sp, r7
 800ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5c:	4770      	bx	lr
 800ba5e:	bf00      	nop
 800ba60:	40010000 	.word	0x40010000
 800ba64:	40000400 	.word	0x40000400
 800ba68:	40000800 	.word	0x40000800
 800ba6c:	40000c00 	.word	0x40000c00
 800ba70:	40014000 	.word	0x40014000

0800ba74 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ba74:	b480      	push	{r7}
 800ba76:	b083      	sub	sp, #12
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	68da      	ldr	r2, [r3, #12]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f022 0201 	bic.w	r2, r2, #1
 800ba8a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	6a1a      	ldr	r2, [r3, #32]
 800ba92:	f241 1311 	movw	r3, #4369	; 0x1111
 800ba96:	4013      	ands	r3, r2
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d10f      	bne.n	800babc <HAL_TIM_Base_Stop_IT+0x48>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	6a1a      	ldr	r2, [r3, #32]
 800baa2:	f240 4344 	movw	r3, #1092	; 0x444
 800baa6:	4013      	ands	r3, r2
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d107      	bne.n	800babc <HAL_TIM_Base_Stop_IT+0x48>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	681a      	ldr	r2, [r3, #0]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f022 0201 	bic.w	r2, r2, #1
 800baba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2201      	movs	r2, #1
 800bac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bac4:	2300      	movs	r3, #0
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	370c      	adds	r7, #12
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr

0800bad2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b082      	sub	sp, #8
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d101      	bne.n	800bae4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800bae0:	2301      	movs	r3, #1
 800bae2:	e041      	b.n	800bb68 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800baea:	b2db      	uxtb	r3, r3
 800baec:	2b00      	cmp	r3, #0
 800baee:	d106      	bne.n	800bafe <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2200      	movs	r2, #0
 800baf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f000 f839 	bl	800bb70 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2202      	movs	r2, #2
 800bb02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	3304      	adds	r3, #4
 800bb0e:	4619      	mov	r1, r3
 800bb10:	4610      	mov	r0, r2
 800bb12:	f000 fcfd 	bl	800c510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2201      	movs	r2, #1
 800bb1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2201      	movs	r2, #1
 800bb22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2201      	movs	r2, #1
 800bb2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2201      	movs	r2, #1
 800bb32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2201      	movs	r2, #1
 800bb3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2201      	movs	r2, #1
 800bb42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2201      	movs	r2, #1
 800bb4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2201      	movs	r2, #1
 800bb52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2201      	movs	r2, #1
 800bb5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2201      	movs	r2, #1
 800bb62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bb66:	2300      	movs	r3, #0
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3708      	adds	r7, #8
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b083      	sub	sp, #12
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800bb78:	bf00      	nop
 800bb7a:	370c      	adds	r7, #12
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr

0800bb84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b082      	sub	sp, #8
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d101      	bne.n	800bb96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bb92:	2301      	movs	r3, #1
 800bb94:	e041      	b.n	800bc1a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d106      	bne.n	800bbb0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2200      	movs	r2, #0
 800bba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 f839 	bl	800bc22 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2202      	movs	r2, #2
 800bbb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681a      	ldr	r2, [r3, #0]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	3304      	adds	r3, #4
 800bbc0:	4619      	mov	r1, r3
 800bbc2:	4610      	mov	r0, r2
 800bbc4:	f000 fca4 	bl	800c510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2201      	movs	r2, #1
 800bbcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2201      	movs	r2, #1
 800bbdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2201      	movs	r2, #1
 800bbe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2201      	movs	r2, #1
 800bbec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2201      	movs	r2, #1
 800bc04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2201      	movs	r2, #1
 800bc14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bc18:	2300      	movs	r3, #0
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3708      	adds	r7, #8
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}

0800bc22 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bc22:	b480      	push	{r7}
 800bc24:	b083      	sub	sp, #12
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bc2a:	bf00      	nop
 800bc2c:	370c      	adds	r7, #12
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc34:	4770      	bx	lr
	...

0800bc38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b084      	sub	sp, #16
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
 800bc40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d109      	bne.n	800bc5c <HAL_TIM_PWM_Start+0x24>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bc4e:	b2db      	uxtb	r3, r3
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	bf14      	ite	ne
 800bc54:	2301      	movne	r3, #1
 800bc56:	2300      	moveq	r3, #0
 800bc58:	b2db      	uxtb	r3, r3
 800bc5a:	e022      	b.n	800bca2 <HAL_TIM_PWM_Start+0x6a>
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	2b04      	cmp	r3, #4
 800bc60:	d109      	bne.n	800bc76 <HAL_TIM_PWM_Start+0x3e>
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bc68:	b2db      	uxtb	r3, r3
 800bc6a:	2b01      	cmp	r3, #1
 800bc6c:	bf14      	ite	ne
 800bc6e:	2301      	movne	r3, #1
 800bc70:	2300      	moveq	r3, #0
 800bc72:	b2db      	uxtb	r3, r3
 800bc74:	e015      	b.n	800bca2 <HAL_TIM_PWM_Start+0x6a>
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	2b08      	cmp	r3, #8
 800bc7a:	d109      	bne.n	800bc90 <HAL_TIM_PWM_Start+0x58>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bc82:	b2db      	uxtb	r3, r3
 800bc84:	2b01      	cmp	r3, #1
 800bc86:	bf14      	ite	ne
 800bc88:	2301      	movne	r3, #1
 800bc8a:	2300      	moveq	r3, #0
 800bc8c:	b2db      	uxtb	r3, r3
 800bc8e:	e008      	b.n	800bca2 <HAL_TIM_PWM_Start+0x6a>
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	bf14      	ite	ne
 800bc9c:	2301      	movne	r3, #1
 800bc9e:	2300      	moveq	r3, #0
 800bca0:	b2db      	uxtb	r3, r3
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d001      	beq.n	800bcaa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800bca6:	2301      	movs	r3, #1
 800bca8:	e068      	b.n	800bd7c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d104      	bne.n	800bcba <HAL_TIM_PWM_Start+0x82>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2202      	movs	r2, #2
 800bcb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bcb8:	e013      	b.n	800bce2 <HAL_TIM_PWM_Start+0xaa>
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	2b04      	cmp	r3, #4
 800bcbe:	d104      	bne.n	800bcca <HAL_TIM_PWM_Start+0x92>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2202      	movs	r2, #2
 800bcc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bcc8:	e00b      	b.n	800bce2 <HAL_TIM_PWM_Start+0xaa>
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	2b08      	cmp	r3, #8
 800bcce:	d104      	bne.n	800bcda <HAL_TIM_PWM_Start+0xa2>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2202      	movs	r2, #2
 800bcd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bcd8:	e003      	b.n	800bce2 <HAL_TIM_PWM_Start+0xaa>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2202      	movs	r2, #2
 800bcde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	2201      	movs	r2, #1
 800bce8:	6839      	ldr	r1, [r7, #0]
 800bcea:	4618      	mov	r0, r3
 800bcec:	f000 feb6 	bl	800ca5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	4a23      	ldr	r2, [pc, #140]	; (800bd84 <HAL_TIM_PWM_Start+0x14c>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d107      	bne.n	800bd0a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bd08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	4a1d      	ldr	r2, [pc, #116]	; (800bd84 <HAL_TIM_PWM_Start+0x14c>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d018      	beq.n	800bd46 <HAL_TIM_PWM_Start+0x10e>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd1c:	d013      	beq.n	800bd46 <HAL_TIM_PWM_Start+0x10e>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	4a19      	ldr	r2, [pc, #100]	; (800bd88 <HAL_TIM_PWM_Start+0x150>)
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d00e      	beq.n	800bd46 <HAL_TIM_PWM_Start+0x10e>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	4a17      	ldr	r2, [pc, #92]	; (800bd8c <HAL_TIM_PWM_Start+0x154>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d009      	beq.n	800bd46 <HAL_TIM_PWM_Start+0x10e>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4a16      	ldr	r2, [pc, #88]	; (800bd90 <HAL_TIM_PWM_Start+0x158>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d004      	beq.n	800bd46 <HAL_TIM_PWM_Start+0x10e>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4a14      	ldr	r2, [pc, #80]	; (800bd94 <HAL_TIM_PWM_Start+0x15c>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d111      	bne.n	800bd6a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	689b      	ldr	r3, [r3, #8]
 800bd4c:	f003 0307 	and.w	r3, r3, #7
 800bd50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2b06      	cmp	r3, #6
 800bd56:	d010      	beq.n	800bd7a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	681a      	ldr	r2, [r3, #0]
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f042 0201 	orr.w	r2, r2, #1
 800bd66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd68:	e007      	b.n	800bd7a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	681a      	ldr	r2, [r3, #0]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f042 0201 	orr.w	r2, r2, #1
 800bd78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bd7a:	2300      	movs	r3, #0
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3710      	adds	r7, #16
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	40010000 	.word	0x40010000
 800bd88:	40000400 	.word	0x40000400
 800bd8c:	40000800 	.word	0x40000800
 800bd90:	40000c00 	.word	0x40000c00
 800bd94:	40014000 	.word	0x40014000

0800bd98 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b086      	sub	sp, #24
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d101      	bne.n	800bdac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bda8:	2301      	movs	r3, #1
 800bdaa:	e097      	b.n	800bedc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bdb2:	b2db      	uxtb	r3, r3
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d106      	bne.n	800bdc6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f7fa ffe3 	bl	8006d8c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2202      	movs	r2, #2
 800bdca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	689b      	ldr	r3, [r3, #8]
 800bdd4:	687a      	ldr	r2, [r7, #4]
 800bdd6:	6812      	ldr	r2, [r2, #0]
 800bdd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bddc:	f023 0307 	bic.w	r3, r3, #7
 800bde0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681a      	ldr	r2, [r3, #0]
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	3304      	adds	r3, #4
 800bdea:	4619      	mov	r1, r3
 800bdec:	4610      	mov	r0, r2
 800bdee:	f000 fb8f 	bl	800c510 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	689b      	ldr	r3, [r3, #8]
 800bdf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	699b      	ldr	r3, [r3, #24]
 800be00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	6a1b      	ldr	r3, [r3, #32]
 800be08:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	697a      	ldr	r2, [r7, #20]
 800be10:	4313      	orrs	r3, r2
 800be12:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be1a:	f023 0303 	bic.w	r3, r3, #3
 800be1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	689a      	ldr	r2, [r3, #8]
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	699b      	ldr	r3, [r3, #24]
 800be28:	021b      	lsls	r3, r3, #8
 800be2a:	4313      	orrs	r3, r2
 800be2c:	693a      	ldr	r2, [r7, #16]
 800be2e:	4313      	orrs	r3, r2
 800be30:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800be38:	f023 030c 	bic.w	r3, r3, #12
 800be3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800be44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800be48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	68da      	ldr	r2, [r3, #12]
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	69db      	ldr	r3, [r3, #28]
 800be52:	021b      	lsls	r3, r3, #8
 800be54:	4313      	orrs	r3, r2
 800be56:	693a      	ldr	r2, [r7, #16]
 800be58:	4313      	orrs	r3, r2
 800be5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	691b      	ldr	r3, [r3, #16]
 800be60:	011a      	lsls	r2, r3, #4
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	6a1b      	ldr	r3, [r3, #32]
 800be66:	031b      	lsls	r3, r3, #12
 800be68:	4313      	orrs	r3, r2
 800be6a:	693a      	ldr	r2, [r7, #16]
 800be6c:	4313      	orrs	r3, r2
 800be6e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800be76:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800be7e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	685a      	ldr	r2, [r3, #4]
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	695b      	ldr	r3, [r3, #20]
 800be88:	011b      	lsls	r3, r3, #4
 800be8a:	4313      	orrs	r3, r2
 800be8c:	68fa      	ldr	r2, [r7, #12]
 800be8e:	4313      	orrs	r3, r2
 800be90:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	697a      	ldr	r2, [r7, #20]
 800be98:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	693a      	ldr	r2, [r7, #16]
 800bea0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	68fa      	ldr	r2, [r7, #12]
 800bea8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2201      	movs	r2, #1
 800beae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2201      	movs	r2, #1
 800beb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2201      	movs	r2, #1
 800bebe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2201      	movs	r2, #1
 800bec6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2201      	movs	r2, #1
 800bece:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2201      	movs	r2, #1
 800bed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800beda:	2300      	movs	r3, #0
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3718      	adds	r7, #24
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b082      	sub	sp, #8
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	691b      	ldr	r3, [r3, #16]
 800bef2:	f003 0302 	and.w	r3, r3, #2
 800bef6:	2b02      	cmp	r3, #2
 800bef8:	d122      	bne.n	800bf40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	68db      	ldr	r3, [r3, #12]
 800bf00:	f003 0302 	and.w	r3, r3, #2
 800bf04:	2b02      	cmp	r3, #2
 800bf06:	d11b      	bne.n	800bf40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f06f 0202 	mvn.w	r2, #2
 800bf10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2201      	movs	r2, #1
 800bf16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	699b      	ldr	r3, [r3, #24]
 800bf1e:	f003 0303 	and.w	r3, r3, #3
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d003      	beq.n	800bf2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 fad3 	bl	800c4d2 <HAL_TIM_IC_CaptureCallback>
 800bf2c:	e005      	b.n	800bf3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f000 fac5 	bl	800c4be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f000 fad6 	bl	800c4e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	691b      	ldr	r3, [r3, #16]
 800bf46:	f003 0304 	and.w	r3, r3, #4
 800bf4a:	2b04      	cmp	r3, #4
 800bf4c:	d122      	bne.n	800bf94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	68db      	ldr	r3, [r3, #12]
 800bf54:	f003 0304 	and.w	r3, r3, #4
 800bf58:	2b04      	cmp	r3, #4
 800bf5a:	d11b      	bne.n	800bf94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f06f 0204 	mvn.w	r2, #4
 800bf64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2202      	movs	r2, #2
 800bf6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	699b      	ldr	r3, [r3, #24]
 800bf72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d003      	beq.n	800bf82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f000 faa9 	bl	800c4d2 <HAL_TIM_IC_CaptureCallback>
 800bf80:	e005      	b.n	800bf8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f000 fa9b 	bl	800c4be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f000 faac 	bl	800c4e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2200      	movs	r2, #0
 800bf92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	691b      	ldr	r3, [r3, #16]
 800bf9a:	f003 0308 	and.w	r3, r3, #8
 800bf9e:	2b08      	cmp	r3, #8
 800bfa0:	d122      	bne.n	800bfe8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	68db      	ldr	r3, [r3, #12]
 800bfa8:	f003 0308 	and.w	r3, r3, #8
 800bfac:	2b08      	cmp	r3, #8
 800bfae:	d11b      	bne.n	800bfe8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f06f 0208 	mvn.w	r2, #8
 800bfb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2204      	movs	r2, #4
 800bfbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	69db      	ldr	r3, [r3, #28]
 800bfc6:	f003 0303 	and.w	r3, r3, #3
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d003      	beq.n	800bfd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f000 fa7f 	bl	800c4d2 <HAL_TIM_IC_CaptureCallback>
 800bfd4:	e005      	b.n	800bfe2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f000 fa71 	bl	800c4be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f000 fa82 	bl	800c4e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	691b      	ldr	r3, [r3, #16]
 800bfee:	f003 0310 	and.w	r3, r3, #16
 800bff2:	2b10      	cmp	r3, #16
 800bff4:	d122      	bne.n	800c03c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	68db      	ldr	r3, [r3, #12]
 800bffc:	f003 0310 	and.w	r3, r3, #16
 800c000:	2b10      	cmp	r3, #16
 800c002:	d11b      	bne.n	800c03c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f06f 0210 	mvn.w	r2, #16
 800c00c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2208      	movs	r2, #8
 800c012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	69db      	ldr	r3, [r3, #28]
 800c01a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d003      	beq.n	800c02a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f000 fa55 	bl	800c4d2 <HAL_TIM_IC_CaptureCallback>
 800c028:	e005      	b.n	800c036 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f000 fa47 	bl	800c4be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f000 fa58 	bl	800c4e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2200      	movs	r2, #0
 800c03a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	691b      	ldr	r3, [r3, #16]
 800c042:	f003 0301 	and.w	r3, r3, #1
 800c046:	2b01      	cmp	r3, #1
 800c048:	d10e      	bne.n	800c068 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	68db      	ldr	r3, [r3, #12]
 800c050:	f003 0301 	and.w	r3, r3, #1
 800c054:	2b01      	cmp	r3, #1
 800c056:	d107      	bne.n	800c068 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f06f 0201 	mvn.w	r2, #1
 800c060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f7f5 fbd2 	bl	800180c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	691b      	ldr	r3, [r3, #16]
 800c06e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c072:	2b80      	cmp	r3, #128	; 0x80
 800c074:	d10e      	bne.n	800c094 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	68db      	ldr	r3, [r3, #12]
 800c07c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c080:	2b80      	cmp	r3, #128	; 0x80
 800c082:	d107      	bne.n	800c094 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c08c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f000 fd82 	bl	800cb98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	691b      	ldr	r3, [r3, #16]
 800c09a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c09e:	2b40      	cmp	r3, #64	; 0x40
 800c0a0:	d10e      	bne.n	800c0c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	68db      	ldr	r3, [r3, #12]
 800c0a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0ac:	2b40      	cmp	r3, #64	; 0x40
 800c0ae:	d107      	bne.n	800c0c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c0b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f000 fa1d 	bl	800c4fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	691b      	ldr	r3, [r3, #16]
 800c0c6:	f003 0320 	and.w	r3, r3, #32
 800c0ca:	2b20      	cmp	r3, #32
 800c0cc:	d10e      	bne.n	800c0ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	68db      	ldr	r3, [r3, #12]
 800c0d4:	f003 0320 	and.w	r3, r3, #32
 800c0d8:	2b20      	cmp	r3, #32
 800c0da:	d107      	bne.n	800c0ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f06f 0220 	mvn.w	r2, #32
 800c0e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f000 fd4c 	bl	800cb84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c0ec:	bf00      	nop
 800c0ee:	3708      	adds	r7, #8
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b086      	sub	sp, #24
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	60f8      	str	r0, [r7, #12]
 800c0fc:	60b9      	str	r1, [r7, #8]
 800c0fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c100:	2300      	movs	r3, #0
 800c102:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c10a:	2b01      	cmp	r3, #1
 800c10c:	d101      	bne.n	800c112 <HAL_TIM_OC_ConfigChannel+0x1e>
 800c10e:	2302      	movs	r3, #2
 800c110:	e048      	b.n	800c1a4 <HAL_TIM_OC_ConfigChannel+0xb0>
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	2201      	movs	r2, #1
 800c116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2b0c      	cmp	r3, #12
 800c11e:	d839      	bhi.n	800c194 <HAL_TIM_OC_ConfigChannel+0xa0>
 800c120:	a201      	add	r2, pc, #4	; (adr r2, 800c128 <HAL_TIM_OC_ConfigChannel+0x34>)
 800c122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c126:	bf00      	nop
 800c128:	0800c15d 	.word	0x0800c15d
 800c12c:	0800c195 	.word	0x0800c195
 800c130:	0800c195 	.word	0x0800c195
 800c134:	0800c195 	.word	0x0800c195
 800c138:	0800c16b 	.word	0x0800c16b
 800c13c:	0800c195 	.word	0x0800c195
 800c140:	0800c195 	.word	0x0800c195
 800c144:	0800c195 	.word	0x0800c195
 800c148:	0800c179 	.word	0x0800c179
 800c14c:	0800c195 	.word	0x0800c195
 800c150:	0800c195 	.word	0x0800c195
 800c154:	0800c195 	.word	0x0800c195
 800c158:	0800c187 	.word	0x0800c187
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	68b9      	ldr	r1, [r7, #8]
 800c162:	4618      	mov	r0, r3
 800c164:	f000 fa54 	bl	800c610 <TIM_OC1_SetConfig>
      break;
 800c168:	e017      	b.n	800c19a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	68b9      	ldr	r1, [r7, #8]
 800c170:	4618      	mov	r0, r3
 800c172:	f000 fab3 	bl	800c6dc <TIM_OC2_SetConfig>
      break;
 800c176:	e010      	b.n	800c19a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	68b9      	ldr	r1, [r7, #8]
 800c17e:	4618      	mov	r0, r3
 800c180:	f000 fb18 	bl	800c7b4 <TIM_OC3_SetConfig>
      break;
 800c184:	e009      	b.n	800c19a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	68b9      	ldr	r1, [r7, #8]
 800c18c:	4618      	mov	r0, r3
 800c18e:	f000 fb7b 	bl	800c888 <TIM_OC4_SetConfig>
      break;
 800c192:	e002      	b.n	800c19a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800c194:	2301      	movs	r3, #1
 800c196:	75fb      	strb	r3, [r7, #23]
      break;
 800c198:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2200      	movs	r2, #0
 800c19e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c1a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3718      	adds	r7, #24
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}

0800c1ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b086      	sub	sp, #24
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	60f8      	str	r0, [r7, #12]
 800c1b4:	60b9      	str	r1, [r7, #8]
 800c1b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c1c2:	2b01      	cmp	r3, #1
 800c1c4:	d101      	bne.n	800c1ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c1c6:	2302      	movs	r3, #2
 800c1c8:	e0ae      	b.n	800c328 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	2201      	movs	r2, #1
 800c1ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2b0c      	cmp	r3, #12
 800c1d6:	f200 809f 	bhi.w	800c318 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c1da:	a201      	add	r2, pc, #4	; (adr r2, 800c1e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1e0:	0800c215 	.word	0x0800c215
 800c1e4:	0800c319 	.word	0x0800c319
 800c1e8:	0800c319 	.word	0x0800c319
 800c1ec:	0800c319 	.word	0x0800c319
 800c1f0:	0800c255 	.word	0x0800c255
 800c1f4:	0800c319 	.word	0x0800c319
 800c1f8:	0800c319 	.word	0x0800c319
 800c1fc:	0800c319 	.word	0x0800c319
 800c200:	0800c297 	.word	0x0800c297
 800c204:	0800c319 	.word	0x0800c319
 800c208:	0800c319 	.word	0x0800c319
 800c20c:	0800c319 	.word	0x0800c319
 800c210:	0800c2d7 	.word	0x0800c2d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	68b9      	ldr	r1, [r7, #8]
 800c21a:	4618      	mov	r0, r3
 800c21c:	f000 f9f8 	bl	800c610 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	699a      	ldr	r2, [r3, #24]
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f042 0208 	orr.w	r2, r2, #8
 800c22e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	699a      	ldr	r2, [r3, #24]
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f022 0204 	bic.w	r2, r2, #4
 800c23e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	6999      	ldr	r1, [r3, #24]
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	691a      	ldr	r2, [r3, #16]
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	430a      	orrs	r2, r1
 800c250:	619a      	str	r2, [r3, #24]
      break;
 800c252:	e064      	b.n	800c31e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	68b9      	ldr	r1, [r7, #8]
 800c25a:	4618      	mov	r0, r3
 800c25c:	f000 fa3e 	bl	800c6dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	699a      	ldr	r2, [r3, #24]
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c26e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	699a      	ldr	r2, [r3, #24]
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c27e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	6999      	ldr	r1, [r3, #24]
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	691b      	ldr	r3, [r3, #16]
 800c28a:	021a      	lsls	r2, r3, #8
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	430a      	orrs	r2, r1
 800c292:	619a      	str	r2, [r3, #24]
      break;
 800c294:	e043      	b.n	800c31e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	68b9      	ldr	r1, [r7, #8]
 800c29c:	4618      	mov	r0, r3
 800c29e:	f000 fa89 	bl	800c7b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	69da      	ldr	r2, [r3, #28]
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f042 0208 	orr.w	r2, r2, #8
 800c2b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	69da      	ldr	r2, [r3, #28]
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f022 0204 	bic.w	r2, r2, #4
 800c2c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	69d9      	ldr	r1, [r3, #28]
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	691a      	ldr	r2, [r3, #16]
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	430a      	orrs	r2, r1
 800c2d2:	61da      	str	r2, [r3, #28]
      break;
 800c2d4:	e023      	b.n	800c31e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	68b9      	ldr	r1, [r7, #8]
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f000 fad3 	bl	800c888 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	69da      	ldr	r2, [r3, #28]
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c2f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	69da      	ldr	r2, [r3, #28]
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c300:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	69d9      	ldr	r1, [r3, #28]
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	691b      	ldr	r3, [r3, #16]
 800c30c:	021a      	lsls	r2, r3, #8
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	430a      	orrs	r2, r1
 800c314:	61da      	str	r2, [r3, #28]
      break;
 800c316:	e002      	b.n	800c31e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c318:	2301      	movs	r3, #1
 800c31a:	75fb      	strb	r3, [r7, #23]
      break;
 800c31c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	2200      	movs	r2, #0
 800c322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c326:	7dfb      	ldrb	r3, [r7, #23]
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3718      	adds	r7, #24
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}

0800c330 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b084      	sub	sp, #16
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
 800c338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c33a:	2300      	movs	r3, #0
 800c33c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c344:	2b01      	cmp	r3, #1
 800c346:	d101      	bne.n	800c34c <HAL_TIM_ConfigClockSource+0x1c>
 800c348:	2302      	movs	r3, #2
 800c34a:	e0b4      	b.n	800c4b6 <HAL_TIM_ConfigClockSource+0x186>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2201      	movs	r2, #1
 800c350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2202      	movs	r2, #2
 800c358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	689b      	ldr	r3, [r3, #8]
 800c362:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c36a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c372:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	68ba      	ldr	r2, [r7, #8]
 800c37a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c384:	d03e      	beq.n	800c404 <HAL_TIM_ConfigClockSource+0xd4>
 800c386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c38a:	f200 8087 	bhi.w	800c49c <HAL_TIM_ConfigClockSource+0x16c>
 800c38e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c392:	f000 8086 	beq.w	800c4a2 <HAL_TIM_ConfigClockSource+0x172>
 800c396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c39a:	d87f      	bhi.n	800c49c <HAL_TIM_ConfigClockSource+0x16c>
 800c39c:	2b70      	cmp	r3, #112	; 0x70
 800c39e:	d01a      	beq.n	800c3d6 <HAL_TIM_ConfigClockSource+0xa6>
 800c3a0:	2b70      	cmp	r3, #112	; 0x70
 800c3a2:	d87b      	bhi.n	800c49c <HAL_TIM_ConfigClockSource+0x16c>
 800c3a4:	2b60      	cmp	r3, #96	; 0x60
 800c3a6:	d050      	beq.n	800c44a <HAL_TIM_ConfigClockSource+0x11a>
 800c3a8:	2b60      	cmp	r3, #96	; 0x60
 800c3aa:	d877      	bhi.n	800c49c <HAL_TIM_ConfigClockSource+0x16c>
 800c3ac:	2b50      	cmp	r3, #80	; 0x50
 800c3ae:	d03c      	beq.n	800c42a <HAL_TIM_ConfigClockSource+0xfa>
 800c3b0:	2b50      	cmp	r3, #80	; 0x50
 800c3b2:	d873      	bhi.n	800c49c <HAL_TIM_ConfigClockSource+0x16c>
 800c3b4:	2b40      	cmp	r3, #64	; 0x40
 800c3b6:	d058      	beq.n	800c46a <HAL_TIM_ConfigClockSource+0x13a>
 800c3b8:	2b40      	cmp	r3, #64	; 0x40
 800c3ba:	d86f      	bhi.n	800c49c <HAL_TIM_ConfigClockSource+0x16c>
 800c3bc:	2b30      	cmp	r3, #48	; 0x30
 800c3be:	d064      	beq.n	800c48a <HAL_TIM_ConfigClockSource+0x15a>
 800c3c0:	2b30      	cmp	r3, #48	; 0x30
 800c3c2:	d86b      	bhi.n	800c49c <HAL_TIM_ConfigClockSource+0x16c>
 800c3c4:	2b20      	cmp	r3, #32
 800c3c6:	d060      	beq.n	800c48a <HAL_TIM_ConfigClockSource+0x15a>
 800c3c8:	2b20      	cmp	r3, #32
 800c3ca:	d867      	bhi.n	800c49c <HAL_TIM_ConfigClockSource+0x16c>
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d05c      	beq.n	800c48a <HAL_TIM_ConfigClockSource+0x15a>
 800c3d0:	2b10      	cmp	r3, #16
 800c3d2:	d05a      	beq.n	800c48a <HAL_TIM_ConfigClockSource+0x15a>
 800c3d4:	e062      	b.n	800c49c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6818      	ldr	r0, [r3, #0]
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	6899      	ldr	r1, [r3, #8]
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	685a      	ldr	r2, [r3, #4]
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	68db      	ldr	r3, [r3, #12]
 800c3e6:	f000 fb19 	bl	800ca1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	689b      	ldr	r3, [r3, #8]
 800c3f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c3f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	68ba      	ldr	r2, [r7, #8]
 800c400:	609a      	str	r2, [r3, #8]
      break;
 800c402:	e04f      	b.n	800c4a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6818      	ldr	r0, [r3, #0]
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	6899      	ldr	r1, [r3, #8]
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	685a      	ldr	r2, [r3, #4]
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	68db      	ldr	r3, [r3, #12]
 800c414:	f000 fb02 	bl	800ca1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	689a      	ldr	r2, [r3, #8]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c426:	609a      	str	r2, [r3, #8]
      break;
 800c428:	e03c      	b.n	800c4a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6818      	ldr	r0, [r3, #0]
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	6859      	ldr	r1, [r3, #4]
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	68db      	ldr	r3, [r3, #12]
 800c436:	461a      	mov	r2, r3
 800c438:	f000 fa76 	bl	800c928 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	2150      	movs	r1, #80	; 0x50
 800c442:	4618      	mov	r0, r3
 800c444:	f000 facf 	bl	800c9e6 <TIM_ITRx_SetConfig>
      break;
 800c448:	e02c      	b.n	800c4a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6818      	ldr	r0, [r3, #0]
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	6859      	ldr	r1, [r3, #4]
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	68db      	ldr	r3, [r3, #12]
 800c456:	461a      	mov	r2, r3
 800c458:	f000 fa95 	bl	800c986 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	2160      	movs	r1, #96	; 0x60
 800c462:	4618      	mov	r0, r3
 800c464:	f000 fabf 	bl	800c9e6 <TIM_ITRx_SetConfig>
      break;
 800c468:	e01c      	b.n	800c4a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6818      	ldr	r0, [r3, #0]
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	6859      	ldr	r1, [r3, #4]
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	68db      	ldr	r3, [r3, #12]
 800c476:	461a      	mov	r2, r3
 800c478:	f000 fa56 	bl	800c928 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	2140      	movs	r1, #64	; 0x40
 800c482:	4618      	mov	r0, r3
 800c484:	f000 faaf 	bl	800c9e6 <TIM_ITRx_SetConfig>
      break;
 800c488:	e00c      	b.n	800c4a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681a      	ldr	r2, [r3, #0]
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	4619      	mov	r1, r3
 800c494:	4610      	mov	r0, r2
 800c496:	f000 faa6 	bl	800c9e6 <TIM_ITRx_SetConfig>
      break;
 800c49a:	e003      	b.n	800c4a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c49c:	2301      	movs	r3, #1
 800c49e:	73fb      	strb	r3, [r7, #15]
      break;
 800c4a0:	e000      	b.n	800c4a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c4a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c4b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3710      	adds	r7, #16
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}

0800c4be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c4be:	b480      	push	{r7}
 800c4c0:	b083      	sub	sp, #12
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c4c6:	bf00      	nop
 800c4c8:	370c      	adds	r7, #12
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d0:	4770      	bx	lr

0800c4d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c4d2:	b480      	push	{r7}
 800c4d4:	b083      	sub	sp, #12
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c4da:	bf00      	nop
 800c4dc:	370c      	adds	r7, #12
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e4:	4770      	bx	lr

0800c4e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c4e6:	b480      	push	{r7}
 800c4e8:	b083      	sub	sp, #12
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c4ee:	bf00      	nop
 800c4f0:	370c      	adds	r7, #12
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f8:	4770      	bx	lr

0800c4fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c4fa:	b480      	push	{r7}
 800c4fc:	b083      	sub	sp, #12
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c502:	bf00      	nop
 800c504:	370c      	adds	r7, #12
 800c506:	46bd      	mov	sp, r7
 800c508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50c:	4770      	bx	lr
	...

0800c510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c510:	b480      	push	{r7}
 800c512:	b085      	sub	sp, #20
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	4a34      	ldr	r2, [pc, #208]	; (800c5f4 <TIM_Base_SetConfig+0xe4>)
 800c524:	4293      	cmp	r3, r2
 800c526:	d00f      	beq.n	800c548 <TIM_Base_SetConfig+0x38>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c52e:	d00b      	beq.n	800c548 <TIM_Base_SetConfig+0x38>
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	4a31      	ldr	r2, [pc, #196]	; (800c5f8 <TIM_Base_SetConfig+0xe8>)
 800c534:	4293      	cmp	r3, r2
 800c536:	d007      	beq.n	800c548 <TIM_Base_SetConfig+0x38>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	4a30      	ldr	r2, [pc, #192]	; (800c5fc <TIM_Base_SetConfig+0xec>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d003      	beq.n	800c548 <TIM_Base_SetConfig+0x38>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	4a2f      	ldr	r2, [pc, #188]	; (800c600 <TIM_Base_SetConfig+0xf0>)
 800c544:	4293      	cmp	r3, r2
 800c546:	d108      	bne.n	800c55a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c54e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	685b      	ldr	r3, [r3, #4]
 800c554:	68fa      	ldr	r2, [r7, #12]
 800c556:	4313      	orrs	r3, r2
 800c558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	4a25      	ldr	r2, [pc, #148]	; (800c5f4 <TIM_Base_SetConfig+0xe4>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d01b      	beq.n	800c59a <TIM_Base_SetConfig+0x8a>
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c568:	d017      	beq.n	800c59a <TIM_Base_SetConfig+0x8a>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	4a22      	ldr	r2, [pc, #136]	; (800c5f8 <TIM_Base_SetConfig+0xe8>)
 800c56e:	4293      	cmp	r3, r2
 800c570:	d013      	beq.n	800c59a <TIM_Base_SetConfig+0x8a>
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	4a21      	ldr	r2, [pc, #132]	; (800c5fc <TIM_Base_SetConfig+0xec>)
 800c576:	4293      	cmp	r3, r2
 800c578:	d00f      	beq.n	800c59a <TIM_Base_SetConfig+0x8a>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	4a20      	ldr	r2, [pc, #128]	; (800c600 <TIM_Base_SetConfig+0xf0>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d00b      	beq.n	800c59a <TIM_Base_SetConfig+0x8a>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	4a1f      	ldr	r2, [pc, #124]	; (800c604 <TIM_Base_SetConfig+0xf4>)
 800c586:	4293      	cmp	r3, r2
 800c588:	d007      	beq.n	800c59a <TIM_Base_SetConfig+0x8a>
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	4a1e      	ldr	r2, [pc, #120]	; (800c608 <TIM_Base_SetConfig+0xf8>)
 800c58e:	4293      	cmp	r3, r2
 800c590:	d003      	beq.n	800c59a <TIM_Base_SetConfig+0x8a>
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	4a1d      	ldr	r2, [pc, #116]	; (800c60c <TIM_Base_SetConfig+0xfc>)
 800c596:	4293      	cmp	r3, r2
 800c598:	d108      	bne.n	800c5ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c5a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	68db      	ldr	r3, [r3, #12]
 800c5a6:	68fa      	ldr	r2, [r7, #12]
 800c5a8:	4313      	orrs	r3, r2
 800c5aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	695b      	ldr	r3, [r3, #20]
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	68fa      	ldr	r2, [r7, #12]
 800c5be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	689a      	ldr	r2, [r3, #8]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	681a      	ldr	r2, [r3, #0]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	4a08      	ldr	r2, [pc, #32]	; (800c5f4 <TIM_Base_SetConfig+0xe4>)
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d103      	bne.n	800c5e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	691a      	ldr	r2, [r3, #16]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	615a      	str	r2, [r3, #20]
}
 800c5e6:	bf00      	nop
 800c5e8:	3714      	adds	r7, #20
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f0:	4770      	bx	lr
 800c5f2:	bf00      	nop
 800c5f4:	40010000 	.word	0x40010000
 800c5f8:	40000400 	.word	0x40000400
 800c5fc:	40000800 	.word	0x40000800
 800c600:	40000c00 	.word	0x40000c00
 800c604:	40014000 	.word	0x40014000
 800c608:	40014400 	.word	0x40014400
 800c60c:	40014800 	.word	0x40014800

0800c610 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c610:	b480      	push	{r7}
 800c612:	b087      	sub	sp, #28
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6a1b      	ldr	r3, [r3, #32]
 800c61e:	f023 0201 	bic.w	r2, r3, #1
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6a1b      	ldr	r3, [r3, #32]
 800c62a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	685b      	ldr	r3, [r3, #4]
 800c630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	699b      	ldr	r3, [r3, #24]
 800c636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c63e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	f023 0303 	bic.w	r3, r3, #3
 800c646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	68fa      	ldr	r2, [r7, #12]
 800c64e:	4313      	orrs	r3, r2
 800c650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	f023 0302 	bic.w	r3, r3, #2
 800c658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	689b      	ldr	r3, [r3, #8]
 800c65e:	697a      	ldr	r2, [r7, #20]
 800c660:	4313      	orrs	r3, r2
 800c662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	4a1c      	ldr	r2, [pc, #112]	; (800c6d8 <TIM_OC1_SetConfig+0xc8>)
 800c668:	4293      	cmp	r3, r2
 800c66a:	d10c      	bne.n	800c686 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	f023 0308 	bic.w	r3, r3, #8
 800c672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	68db      	ldr	r3, [r3, #12]
 800c678:	697a      	ldr	r2, [r7, #20]
 800c67a:	4313      	orrs	r3, r2
 800c67c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	f023 0304 	bic.w	r3, r3, #4
 800c684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	4a13      	ldr	r2, [pc, #76]	; (800c6d8 <TIM_OC1_SetConfig+0xc8>)
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d111      	bne.n	800c6b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c694:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c69c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	695b      	ldr	r3, [r3, #20]
 800c6a2:	693a      	ldr	r2, [r7, #16]
 800c6a4:	4313      	orrs	r3, r2
 800c6a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	699b      	ldr	r3, [r3, #24]
 800c6ac:	693a      	ldr	r2, [r7, #16]
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	693a      	ldr	r2, [r7, #16]
 800c6b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	68fa      	ldr	r2, [r7, #12]
 800c6bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	685a      	ldr	r2, [r3, #4]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	697a      	ldr	r2, [r7, #20]
 800c6ca:	621a      	str	r2, [r3, #32]
}
 800c6cc:	bf00      	nop
 800c6ce:	371c      	adds	r7, #28
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr
 800c6d8:	40010000 	.word	0x40010000

0800c6dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b087      	sub	sp, #28
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6a1b      	ldr	r3, [r3, #32]
 800c6ea:	f023 0210 	bic.w	r2, r3, #16
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6a1b      	ldr	r3, [r3, #32]
 800c6f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	685b      	ldr	r3, [r3, #4]
 800c6fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	699b      	ldr	r3, [r3, #24]
 800c702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c70a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	021b      	lsls	r3, r3, #8
 800c71a:	68fa      	ldr	r2, [r7, #12]
 800c71c:	4313      	orrs	r3, r2
 800c71e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	f023 0320 	bic.w	r3, r3, #32
 800c726:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	689b      	ldr	r3, [r3, #8]
 800c72c:	011b      	lsls	r3, r3, #4
 800c72e:	697a      	ldr	r2, [r7, #20]
 800c730:	4313      	orrs	r3, r2
 800c732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	4a1e      	ldr	r2, [pc, #120]	; (800c7b0 <TIM_OC2_SetConfig+0xd4>)
 800c738:	4293      	cmp	r3, r2
 800c73a:	d10d      	bne.n	800c758 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	68db      	ldr	r3, [r3, #12]
 800c748:	011b      	lsls	r3, r3, #4
 800c74a:	697a      	ldr	r2, [r7, #20]
 800c74c:	4313      	orrs	r3, r2
 800c74e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c756:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	4a15      	ldr	r2, [pc, #84]	; (800c7b0 <TIM_OC2_SetConfig+0xd4>)
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d113      	bne.n	800c788 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c766:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c768:	693b      	ldr	r3, [r7, #16]
 800c76a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c76e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	695b      	ldr	r3, [r3, #20]
 800c774:	009b      	lsls	r3, r3, #2
 800c776:	693a      	ldr	r2, [r7, #16]
 800c778:	4313      	orrs	r3, r2
 800c77a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	699b      	ldr	r3, [r3, #24]
 800c780:	009b      	lsls	r3, r3, #2
 800c782:	693a      	ldr	r2, [r7, #16]
 800c784:	4313      	orrs	r3, r2
 800c786:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	693a      	ldr	r2, [r7, #16]
 800c78c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	68fa      	ldr	r2, [r7, #12]
 800c792:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	685a      	ldr	r2, [r3, #4]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	697a      	ldr	r2, [r7, #20]
 800c7a0:	621a      	str	r2, [r3, #32]
}
 800c7a2:	bf00      	nop
 800c7a4:	371c      	adds	r7, #28
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ac:	4770      	bx	lr
 800c7ae:	bf00      	nop
 800c7b0:	40010000 	.word	0x40010000

0800c7b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b087      	sub	sp, #28
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6a1b      	ldr	r3, [r3, #32]
 800c7c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6a1b      	ldr	r3, [r3, #32]
 800c7ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	685b      	ldr	r3, [r3, #4]
 800c7d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	69db      	ldr	r3, [r3, #28]
 800c7da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	f023 0303 	bic.w	r3, r3, #3
 800c7ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	68fa      	ldr	r2, [r7, #12]
 800c7f2:	4313      	orrs	r3, r2
 800c7f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c7f6:	697b      	ldr	r3, [r7, #20]
 800c7f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c7fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	689b      	ldr	r3, [r3, #8]
 800c802:	021b      	lsls	r3, r3, #8
 800c804:	697a      	ldr	r2, [r7, #20]
 800c806:	4313      	orrs	r3, r2
 800c808:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	4a1d      	ldr	r2, [pc, #116]	; (800c884 <TIM_OC3_SetConfig+0xd0>)
 800c80e:	4293      	cmp	r3, r2
 800c810:	d10d      	bne.n	800c82e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c818:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	68db      	ldr	r3, [r3, #12]
 800c81e:	021b      	lsls	r3, r3, #8
 800c820:	697a      	ldr	r2, [r7, #20]
 800c822:	4313      	orrs	r3, r2
 800c824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c82c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	4a14      	ldr	r2, [pc, #80]	; (800c884 <TIM_OC3_SetConfig+0xd0>)
 800c832:	4293      	cmp	r3, r2
 800c834:	d113      	bne.n	800c85e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c83c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c844:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	695b      	ldr	r3, [r3, #20]
 800c84a:	011b      	lsls	r3, r3, #4
 800c84c:	693a      	ldr	r2, [r7, #16]
 800c84e:	4313      	orrs	r3, r2
 800c850:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	699b      	ldr	r3, [r3, #24]
 800c856:	011b      	lsls	r3, r3, #4
 800c858:	693a      	ldr	r2, [r7, #16]
 800c85a:	4313      	orrs	r3, r2
 800c85c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	693a      	ldr	r2, [r7, #16]
 800c862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	68fa      	ldr	r2, [r7, #12]
 800c868:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	685a      	ldr	r2, [r3, #4]
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	697a      	ldr	r2, [r7, #20]
 800c876:	621a      	str	r2, [r3, #32]
}
 800c878:	bf00      	nop
 800c87a:	371c      	adds	r7, #28
 800c87c:	46bd      	mov	sp, r7
 800c87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c882:	4770      	bx	lr
 800c884:	40010000 	.word	0x40010000

0800c888 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c888:	b480      	push	{r7}
 800c88a:	b087      	sub	sp, #28
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
 800c890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6a1b      	ldr	r3, [r3, #32]
 800c896:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6a1b      	ldr	r3, [r3, #32]
 800c8a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	685b      	ldr	r3, [r3, #4]
 800c8a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	69db      	ldr	r3, [r3, #28]
 800c8ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c8b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c8be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	021b      	lsls	r3, r3, #8
 800c8c6:	68fa      	ldr	r2, [r7, #12]
 800c8c8:	4313      	orrs	r3, r2
 800c8ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c8d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	689b      	ldr	r3, [r3, #8]
 800c8d8:	031b      	lsls	r3, r3, #12
 800c8da:	693a      	ldr	r2, [r7, #16]
 800c8dc:	4313      	orrs	r3, r2
 800c8de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	4a10      	ldr	r2, [pc, #64]	; (800c924 <TIM_OC4_SetConfig+0x9c>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d109      	bne.n	800c8fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c8ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	695b      	ldr	r3, [r3, #20]
 800c8f4:	019b      	lsls	r3, r3, #6
 800c8f6:	697a      	ldr	r2, [r7, #20]
 800c8f8:	4313      	orrs	r3, r2
 800c8fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	697a      	ldr	r2, [r7, #20]
 800c900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	68fa      	ldr	r2, [r7, #12]
 800c906:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	685a      	ldr	r2, [r3, #4]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	693a      	ldr	r2, [r7, #16]
 800c914:	621a      	str	r2, [r3, #32]
}
 800c916:	bf00      	nop
 800c918:	371c      	adds	r7, #28
 800c91a:	46bd      	mov	sp, r7
 800c91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c920:	4770      	bx	lr
 800c922:	bf00      	nop
 800c924:	40010000 	.word	0x40010000

0800c928 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c928:	b480      	push	{r7}
 800c92a:	b087      	sub	sp, #28
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	60f8      	str	r0, [r7, #12]
 800c930:	60b9      	str	r1, [r7, #8]
 800c932:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	6a1b      	ldr	r3, [r3, #32]
 800c938:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	6a1b      	ldr	r3, [r3, #32]
 800c93e:	f023 0201 	bic.w	r2, r3, #1
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	699b      	ldr	r3, [r3, #24]
 800c94a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	011b      	lsls	r3, r3, #4
 800c958:	693a      	ldr	r2, [r7, #16]
 800c95a:	4313      	orrs	r3, r2
 800c95c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	f023 030a 	bic.w	r3, r3, #10
 800c964:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c966:	697a      	ldr	r2, [r7, #20]
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	4313      	orrs	r3, r2
 800c96c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	693a      	ldr	r2, [r7, #16]
 800c972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	697a      	ldr	r2, [r7, #20]
 800c978:	621a      	str	r2, [r3, #32]
}
 800c97a:	bf00      	nop
 800c97c:	371c      	adds	r7, #28
 800c97e:	46bd      	mov	sp, r7
 800c980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c984:	4770      	bx	lr

0800c986 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c986:	b480      	push	{r7}
 800c988:	b087      	sub	sp, #28
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	60f8      	str	r0, [r7, #12]
 800c98e:	60b9      	str	r1, [r7, #8]
 800c990:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	6a1b      	ldr	r3, [r3, #32]
 800c996:	f023 0210 	bic.w	r2, r3, #16
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	699b      	ldr	r3, [r3, #24]
 800c9a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	6a1b      	ldr	r3, [r3, #32]
 800c9a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c9b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	031b      	lsls	r3, r3, #12
 800c9b6:	697a      	ldr	r2, [r7, #20]
 800c9b8:	4313      	orrs	r3, r2
 800c9ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c9c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	011b      	lsls	r3, r3, #4
 800c9c8:	693a      	ldr	r2, [r7, #16]
 800c9ca:	4313      	orrs	r3, r2
 800c9cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	697a      	ldr	r2, [r7, #20]
 800c9d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	693a      	ldr	r2, [r7, #16]
 800c9d8:	621a      	str	r2, [r3, #32]
}
 800c9da:	bf00      	nop
 800c9dc:	371c      	adds	r7, #28
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e4:	4770      	bx	lr

0800c9e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c9e6:	b480      	push	{r7}
 800c9e8:	b085      	sub	sp, #20
 800c9ea:	af00      	add	r7, sp, #0
 800c9ec:	6078      	str	r0, [r7, #4]
 800c9ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	689b      	ldr	r3, [r3, #8]
 800c9f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c9fe:	683a      	ldr	r2, [r7, #0]
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	4313      	orrs	r3, r2
 800ca04:	f043 0307 	orr.w	r3, r3, #7
 800ca08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	68fa      	ldr	r2, [r7, #12]
 800ca0e:	609a      	str	r2, [r3, #8]
}
 800ca10:	bf00      	nop
 800ca12:	3714      	adds	r7, #20
 800ca14:	46bd      	mov	sp, r7
 800ca16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1a:	4770      	bx	lr

0800ca1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b087      	sub	sp, #28
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	60f8      	str	r0, [r7, #12]
 800ca24:	60b9      	str	r1, [r7, #8]
 800ca26:	607a      	str	r2, [r7, #4]
 800ca28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	689b      	ldr	r3, [r3, #8]
 800ca2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ca36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	021a      	lsls	r2, r3, #8
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	431a      	orrs	r2, r3
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	4313      	orrs	r3, r2
 800ca44:	697a      	ldr	r2, [r7, #20]
 800ca46:	4313      	orrs	r3, r2
 800ca48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	697a      	ldr	r2, [r7, #20]
 800ca4e:	609a      	str	r2, [r3, #8]
}
 800ca50:	bf00      	nop
 800ca52:	371c      	adds	r7, #28
 800ca54:	46bd      	mov	sp, r7
 800ca56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5a:	4770      	bx	lr

0800ca5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	b087      	sub	sp, #28
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	60f8      	str	r0, [r7, #12]
 800ca64:	60b9      	str	r1, [r7, #8]
 800ca66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	f003 031f 	and.w	r3, r3, #31
 800ca6e:	2201      	movs	r2, #1
 800ca70:	fa02 f303 	lsl.w	r3, r2, r3
 800ca74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	6a1a      	ldr	r2, [r3, #32]
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	43db      	mvns	r3, r3
 800ca7e:	401a      	ands	r2, r3
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	6a1a      	ldr	r2, [r3, #32]
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	f003 031f 	and.w	r3, r3, #31
 800ca8e:	6879      	ldr	r1, [r7, #4]
 800ca90:	fa01 f303 	lsl.w	r3, r1, r3
 800ca94:	431a      	orrs	r2, r3
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	621a      	str	r2, [r3, #32]
}
 800ca9a:	bf00      	nop
 800ca9c:	371c      	adds	r7, #28
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa4:	4770      	bx	lr
	...

0800caa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800caa8:	b480      	push	{r7}
 800caaa:	b085      	sub	sp, #20
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cab8:	2b01      	cmp	r3, #1
 800caba:	d101      	bne.n	800cac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cabc:	2302      	movs	r3, #2
 800cabe:	e050      	b.n	800cb62 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2201      	movs	r2, #1
 800cac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2202      	movs	r2, #2
 800cacc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	685b      	ldr	r3, [r3, #4]
 800cad6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	689b      	ldr	r3, [r3, #8]
 800cade:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cae6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	68fa      	ldr	r2, [r7, #12]
 800caee:	4313      	orrs	r3, r2
 800caf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	68fa      	ldr	r2, [r7, #12]
 800caf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	4a1c      	ldr	r2, [pc, #112]	; (800cb70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800cb00:	4293      	cmp	r3, r2
 800cb02:	d018      	beq.n	800cb36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb0c:	d013      	beq.n	800cb36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	4a18      	ldr	r2, [pc, #96]	; (800cb74 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800cb14:	4293      	cmp	r3, r2
 800cb16:	d00e      	beq.n	800cb36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	4a16      	ldr	r2, [pc, #88]	; (800cb78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d009      	beq.n	800cb36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	4a15      	ldr	r2, [pc, #84]	; (800cb7c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	d004      	beq.n	800cb36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	4a13      	ldr	r2, [pc, #76]	; (800cb80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d10c      	bne.n	800cb50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	68ba      	ldr	r2, [r7, #8]
 800cb44:	4313      	orrs	r3, r2
 800cb46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	68ba      	ldr	r2, [r7, #8]
 800cb4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2201      	movs	r2, #1
 800cb54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb60:	2300      	movs	r3, #0
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3714      	adds	r7, #20
 800cb66:	46bd      	mov	sp, r7
 800cb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6c:	4770      	bx	lr
 800cb6e:	bf00      	nop
 800cb70:	40010000 	.word	0x40010000
 800cb74:	40000400 	.word	0x40000400
 800cb78:	40000800 	.word	0x40000800
 800cb7c:	40000c00 	.word	0x40000c00
 800cb80:	40014000 	.word	0x40014000

0800cb84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cb84:	b480      	push	{r7}
 800cb86:	b083      	sub	sp, #12
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cb8c:	bf00      	nop
 800cb8e:	370c      	adds	r7, #12
 800cb90:	46bd      	mov	sp, r7
 800cb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb96:	4770      	bx	lr

0800cb98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b083      	sub	sp, #12
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cba0:	bf00      	nop
 800cba2:	370c      	adds	r7, #12
 800cba4:	46bd      	mov	sp, r7
 800cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbaa:	4770      	bx	lr

0800cbac <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b082      	sub	sp, #8
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d101      	bne.n	800cbbe <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800cbba:	2301      	movs	r3, #1
 800cbbc:	e047      	b.n	800cc4e <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cbc4:	b2db      	uxtb	r3, r3
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d106      	bne.n	800cbd8 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2200      	movs	r2, #0
 800cbce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f7fa f9d6 	bl	8006f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2224      	movs	r2, #36	; 0x24
 800cbdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	68da      	ldr	r2, [r3, #12]
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cbee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f000 f931 	bl	800ce58 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	691a      	ldr	r2, [r3, #16]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cc04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	695a      	ldr	r2, [r3, #20]
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800cc14:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	695a      	ldr	r2, [r3, #20]
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f042 0208 	orr.w	r2, r2, #8
 800cc24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	68da      	ldr	r2, [r3, #12]
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cc34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2220      	movs	r2, #32
 800cc40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2220      	movs	r2, #32
 800cc48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800cc4c:	2300      	movs	r3, #0
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3708      	adds	r7, #8
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}

0800cc56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cc56:	b580      	push	{r7, lr}
 800cc58:	b08a      	sub	sp, #40	; 0x28
 800cc5a:	af02      	add	r7, sp, #8
 800cc5c:	60f8      	str	r0, [r7, #12]
 800cc5e:	60b9      	str	r1, [r7, #8]
 800cc60:	603b      	str	r3, [r7, #0]
 800cc62:	4613      	mov	r3, r2
 800cc64:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cc66:	2300      	movs	r3, #0
 800cc68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc70:	b2db      	uxtb	r3, r3
 800cc72:	2b20      	cmp	r3, #32
 800cc74:	d17c      	bne.n	800cd70 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d002      	beq.n	800cc82 <HAL_UART_Transmit+0x2c>
 800cc7c:	88fb      	ldrh	r3, [r7, #6]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d101      	bne.n	800cc86 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800cc82:	2301      	movs	r3, #1
 800cc84:	e075      	b.n	800cd72 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc8c:	2b01      	cmp	r3, #1
 800cc8e:	d101      	bne.n	800cc94 <HAL_UART_Transmit+0x3e>
 800cc90:	2302      	movs	r3, #2
 800cc92:	e06e      	b.n	800cd72 <HAL_UART_Transmit+0x11c>
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	2201      	movs	r2, #1
 800cc98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	2221      	movs	r2, #33	; 0x21
 800cca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ccaa:	f7fa facf 	bl	800724c <HAL_GetTick>
 800ccae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	88fa      	ldrh	r2, [r7, #6]
 800ccb4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	88fa      	ldrh	r2, [r7, #6]
 800ccba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	689b      	ldr	r3, [r3, #8]
 800ccc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccc4:	d108      	bne.n	800ccd8 <HAL_UART_Transmit+0x82>
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	691b      	ldr	r3, [r3, #16]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d104      	bne.n	800ccd8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	61bb      	str	r3, [r7, #24]
 800ccd6:	e003      	b.n	800cce0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	2200      	movs	r2, #0
 800cce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800cce8:	e02a      	b.n	800cd40 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	9300      	str	r3, [sp, #0]
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	2180      	movs	r1, #128	; 0x80
 800ccf4:	68f8      	ldr	r0, [r7, #12]
 800ccf6:	f000 f840 	bl	800cd7a <UART_WaitOnFlagUntilTimeout>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d001      	beq.n	800cd04 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800cd00:	2303      	movs	r3, #3
 800cd02:	e036      	b.n	800cd72 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800cd04:	69fb      	ldr	r3, [r7, #28]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d10b      	bne.n	800cd22 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cd0a:	69bb      	ldr	r3, [r7, #24]
 800cd0c:	881b      	ldrh	r3, [r3, #0]
 800cd0e:	461a      	mov	r2, r3
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cd18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800cd1a:	69bb      	ldr	r3, [r7, #24]
 800cd1c:	3302      	adds	r3, #2
 800cd1e:	61bb      	str	r3, [r7, #24]
 800cd20:	e007      	b.n	800cd32 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800cd22:	69fb      	ldr	r3, [r7, #28]
 800cd24:	781a      	ldrb	r2, [r3, #0]
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800cd2c:	69fb      	ldr	r3, [r7, #28]
 800cd2e:	3301      	adds	r3, #1
 800cd30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cd36:	b29b      	uxth	r3, r3
 800cd38:	3b01      	subs	r3, #1
 800cd3a:	b29a      	uxth	r2, r3
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cd44:	b29b      	uxth	r3, r3
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d1cf      	bne.n	800ccea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	9300      	str	r3, [sp, #0]
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	2200      	movs	r2, #0
 800cd52:	2140      	movs	r1, #64	; 0x40
 800cd54:	68f8      	ldr	r0, [r7, #12]
 800cd56:	f000 f810 	bl	800cd7a <UART_WaitOnFlagUntilTimeout>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d001      	beq.n	800cd64 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800cd60:	2303      	movs	r3, #3
 800cd62:	e006      	b.n	800cd72 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	2220      	movs	r2, #32
 800cd68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	e000      	b.n	800cd72 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800cd70:	2302      	movs	r3, #2
  }
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	3720      	adds	r7, #32
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}

0800cd7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800cd7a:	b580      	push	{r7, lr}
 800cd7c:	b090      	sub	sp, #64	; 0x40
 800cd7e:	af00      	add	r7, sp, #0
 800cd80:	60f8      	str	r0, [r7, #12]
 800cd82:	60b9      	str	r1, [r7, #8]
 800cd84:	603b      	str	r3, [r7, #0]
 800cd86:	4613      	mov	r3, r2
 800cd88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd8a:	e050      	b.n	800ce2e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd92:	d04c      	beq.n	800ce2e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800cd94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d007      	beq.n	800cdaa <UART_WaitOnFlagUntilTimeout+0x30>
 800cd9a:	f7fa fa57 	bl	800724c <HAL_GetTick>
 800cd9e:	4602      	mov	r2, r0
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	1ad3      	subs	r3, r2, r3
 800cda4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cda6:	429a      	cmp	r2, r3
 800cda8:	d241      	bcs.n	800ce2e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	330c      	adds	r3, #12
 800cdb0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb4:	e853 3f00 	ldrex	r3, [r3]
 800cdb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdbc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cdc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	330c      	adds	r3, #12
 800cdc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cdca:	637a      	str	r2, [r7, #52]	; 0x34
 800cdcc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cdd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cdd2:	e841 2300 	strex	r3, r2, [r1]
 800cdd6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cdd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d1e5      	bne.n	800cdaa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	3314      	adds	r3, #20
 800cde4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	e853 3f00 	ldrex	r3, [r3]
 800cdec:	613b      	str	r3, [r7, #16]
   return(result);
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	f023 0301 	bic.w	r3, r3, #1
 800cdf4:	63bb      	str	r3, [r7, #56]	; 0x38
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	3314      	adds	r3, #20
 800cdfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdfe:	623a      	str	r2, [r7, #32]
 800ce00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce02:	69f9      	ldr	r1, [r7, #28]
 800ce04:	6a3a      	ldr	r2, [r7, #32]
 800ce06:	e841 2300 	strex	r3, r2, [r1]
 800ce0a:	61bb      	str	r3, [r7, #24]
   return(result);
 800ce0c:	69bb      	ldr	r3, [r7, #24]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d1e5      	bne.n	800cdde <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	2220      	movs	r2, #32
 800ce16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	2220      	movs	r2, #32
 800ce1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	2200      	movs	r2, #0
 800ce26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ce2a:	2303      	movs	r3, #3
 800ce2c:	e00f      	b.n	800ce4e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	681a      	ldr	r2, [r3, #0]
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	4013      	ands	r3, r2
 800ce38:	68ba      	ldr	r2, [r7, #8]
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	bf0c      	ite	eq
 800ce3e:	2301      	moveq	r3, #1
 800ce40:	2300      	movne	r3, #0
 800ce42:	b2db      	uxtb	r3, r3
 800ce44:	461a      	mov	r2, r3
 800ce46:	79fb      	ldrb	r3, [r7, #7]
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d09f      	beq.n	800cd8c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ce4c:	2300      	movs	r3, #0
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3740      	adds	r7, #64	; 0x40
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}
	...

0800ce58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ce58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ce5c:	b0c0      	sub	sp, #256	; 0x100
 800ce5e:	af00      	add	r7, sp, #0
 800ce60:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ce64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	691b      	ldr	r3, [r3, #16]
 800ce6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ce70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce74:	68d9      	ldr	r1, [r3, #12]
 800ce76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce7a:	681a      	ldr	r2, [r3, #0]
 800ce7c:	ea40 0301 	orr.w	r3, r0, r1
 800ce80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ce82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce86:	689a      	ldr	r2, [r3, #8]
 800ce88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce8c:	691b      	ldr	r3, [r3, #16]
 800ce8e:	431a      	orrs	r2, r3
 800ce90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce94:	695b      	ldr	r3, [r3, #20]
 800ce96:	431a      	orrs	r2, r3
 800ce98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce9c:	69db      	ldr	r3, [r3, #28]
 800ce9e:	4313      	orrs	r3, r2
 800cea0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800cea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	68db      	ldr	r3, [r3, #12]
 800ceac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ceb0:	f021 010c 	bic.w	r1, r1, #12
 800ceb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ceb8:	681a      	ldr	r2, [r3, #0]
 800ceba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cebe:	430b      	orrs	r3, r1
 800cec0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	695b      	ldr	r3, [r3, #20]
 800ceca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800cece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ced2:	6999      	ldr	r1, [r3, #24]
 800ced4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ced8:	681a      	ldr	r2, [r3, #0]
 800ceda:	ea40 0301 	orr.w	r3, r0, r1
 800cede:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cee4:	681a      	ldr	r2, [r3, #0]
 800cee6:	4b8f      	ldr	r3, [pc, #572]	; (800d124 <UART_SetConfig+0x2cc>)
 800cee8:	429a      	cmp	r2, r3
 800ceea:	d005      	beq.n	800cef8 <UART_SetConfig+0xa0>
 800ceec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cef0:	681a      	ldr	r2, [r3, #0]
 800cef2:	4b8d      	ldr	r3, [pc, #564]	; (800d128 <UART_SetConfig+0x2d0>)
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d104      	bne.n	800cf02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cef8:	f7fd fcf4 	bl	800a8e4 <HAL_RCC_GetPCLK2Freq>
 800cefc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800cf00:	e003      	b.n	800cf0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cf02:	f7fd fcdb 	bl	800a8bc <HAL_RCC_GetPCLK1Freq>
 800cf06:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cf0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf0e:	69db      	ldr	r3, [r3, #28]
 800cf10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf14:	f040 810c 	bne.w	800d130 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cf18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cf22:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800cf26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800cf2a:	4622      	mov	r2, r4
 800cf2c:	462b      	mov	r3, r5
 800cf2e:	1891      	adds	r1, r2, r2
 800cf30:	65b9      	str	r1, [r7, #88]	; 0x58
 800cf32:	415b      	adcs	r3, r3
 800cf34:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cf36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800cf3a:	4621      	mov	r1, r4
 800cf3c:	eb12 0801 	adds.w	r8, r2, r1
 800cf40:	4629      	mov	r1, r5
 800cf42:	eb43 0901 	adc.w	r9, r3, r1
 800cf46:	f04f 0200 	mov.w	r2, #0
 800cf4a:	f04f 0300 	mov.w	r3, #0
 800cf4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cf52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cf56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cf5a:	4690      	mov	r8, r2
 800cf5c:	4699      	mov	r9, r3
 800cf5e:	4623      	mov	r3, r4
 800cf60:	eb18 0303 	adds.w	r3, r8, r3
 800cf64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cf68:	462b      	mov	r3, r5
 800cf6a:	eb49 0303 	adc.w	r3, r9, r3
 800cf6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cf72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf76:	685b      	ldr	r3, [r3, #4]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cf7e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800cf82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800cf86:	460b      	mov	r3, r1
 800cf88:	18db      	adds	r3, r3, r3
 800cf8a:	653b      	str	r3, [r7, #80]	; 0x50
 800cf8c:	4613      	mov	r3, r2
 800cf8e:	eb42 0303 	adc.w	r3, r2, r3
 800cf92:	657b      	str	r3, [r7, #84]	; 0x54
 800cf94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800cf98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800cf9c:	f7f3 fc7a 	bl	8000894 <__aeabi_uldivmod>
 800cfa0:	4602      	mov	r2, r0
 800cfa2:	460b      	mov	r3, r1
 800cfa4:	4b61      	ldr	r3, [pc, #388]	; (800d12c <UART_SetConfig+0x2d4>)
 800cfa6:	fba3 2302 	umull	r2, r3, r3, r2
 800cfaa:	095b      	lsrs	r3, r3, #5
 800cfac:	011c      	lsls	r4, r3, #4
 800cfae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cfb8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800cfbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800cfc0:	4642      	mov	r2, r8
 800cfc2:	464b      	mov	r3, r9
 800cfc4:	1891      	adds	r1, r2, r2
 800cfc6:	64b9      	str	r1, [r7, #72]	; 0x48
 800cfc8:	415b      	adcs	r3, r3
 800cfca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cfcc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cfd0:	4641      	mov	r1, r8
 800cfd2:	eb12 0a01 	adds.w	sl, r2, r1
 800cfd6:	4649      	mov	r1, r9
 800cfd8:	eb43 0b01 	adc.w	fp, r3, r1
 800cfdc:	f04f 0200 	mov.w	r2, #0
 800cfe0:	f04f 0300 	mov.w	r3, #0
 800cfe4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cfe8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cfec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cff0:	4692      	mov	sl, r2
 800cff2:	469b      	mov	fp, r3
 800cff4:	4643      	mov	r3, r8
 800cff6:	eb1a 0303 	adds.w	r3, sl, r3
 800cffa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cffe:	464b      	mov	r3, r9
 800d000:	eb4b 0303 	adc.w	r3, fp, r3
 800d004:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d00c:	685b      	ldr	r3, [r3, #4]
 800d00e:	2200      	movs	r2, #0
 800d010:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d014:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800d018:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d01c:	460b      	mov	r3, r1
 800d01e:	18db      	adds	r3, r3, r3
 800d020:	643b      	str	r3, [r7, #64]	; 0x40
 800d022:	4613      	mov	r3, r2
 800d024:	eb42 0303 	adc.w	r3, r2, r3
 800d028:	647b      	str	r3, [r7, #68]	; 0x44
 800d02a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d02e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d032:	f7f3 fc2f 	bl	8000894 <__aeabi_uldivmod>
 800d036:	4602      	mov	r2, r0
 800d038:	460b      	mov	r3, r1
 800d03a:	4611      	mov	r1, r2
 800d03c:	4b3b      	ldr	r3, [pc, #236]	; (800d12c <UART_SetConfig+0x2d4>)
 800d03e:	fba3 2301 	umull	r2, r3, r3, r1
 800d042:	095b      	lsrs	r3, r3, #5
 800d044:	2264      	movs	r2, #100	; 0x64
 800d046:	fb02 f303 	mul.w	r3, r2, r3
 800d04a:	1acb      	subs	r3, r1, r3
 800d04c:	00db      	lsls	r3, r3, #3
 800d04e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800d052:	4b36      	ldr	r3, [pc, #216]	; (800d12c <UART_SetConfig+0x2d4>)
 800d054:	fba3 2302 	umull	r2, r3, r3, r2
 800d058:	095b      	lsrs	r3, r3, #5
 800d05a:	005b      	lsls	r3, r3, #1
 800d05c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d060:	441c      	add	r4, r3
 800d062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d066:	2200      	movs	r2, #0
 800d068:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d06c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d070:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800d074:	4642      	mov	r2, r8
 800d076:	464b      	mov	r3, r9
 800d078:	1891      	adds	r1, r2, r2
 800d07a:	63b9      	str	r1, [r7, #56]	; 0x38
 800d07c:	415b      	adcs	r3, r3
 800d07e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d080:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d084:	4641      	mov	r1, r8
 800d086:	1851      	adds	r1, r2, r1
 800d088:	6339      	str	r1, [r7, #48]	; 0x30
 800d08a:	4649      	mov	r1, r9
 800d08c:	414b      	adcs	r3, r1
 800d08e:	637b      	str	r3, [r7, #52]	; 0x34
 800d090:	f04f 0200 	mov.w	r2, #0
 800d094:	f04f 0300 	mov.w	r3, #0
 800d098:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800d09c:	4659      	mov	r1, fp
 800d09e:	00cb      	lsls	r3, r1, #3
 800d0a0:	4651      	mov	r1, sl
 800d0a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d0a6:	4651      	mov	r1, sl
 800d0a8:	00ca      	lsls	r2, r1, #3
 800d0aa:	4610      	mov	r0, r2
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	4642      	mov	r2, r8
 800d0b2:	189b      	adds	r3, r3, r2
 800d0b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d0b8:	464b      	mov	r3, r9
 800d0ba:	460a      	mov	r2, r1
 800d0bc:	eb42 0303 	adc.w	r3, r2, r3
 800d0c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d0c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0c8:	685b      	ldr	r3, [r3, #4]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d0d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d0d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d0d8:	460b      	mov	r3, r1
 800d0da:	18db      	adds	r3, r3, r3
 800d0dc:	62bb      	str	r3, [r7, #40]	; 0x28
 800d0de:	4613      	mov	r3, r2
 800d0e0:	eb42 0303 	adc.w	r3, r2, r3
 800d0e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d0e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d0ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800d0ee:	f7f3 fbd1 	bl	8000894 <__aeabi_uldivmod>
 800d0f2:	4602      	mov	r2, r0
 800d0f4:	460b      	mov	r3, r1
 800d0f6:	4b0d      	ldr	r3, [pc, #52]	; (800d12c <UART_SetConfig+0x2d4>)
 800d0f8:	fba3 1302 	umull	r1, r3, r3, r2
 800d0fc:	095b      	lsrs	r3, r3, #5
 800d0fe:	2164      	movs	r1, #100	; 0x64
 800d100:	fb01 f303 	mul.w	r3, r1, r3
 800d104:	1ad3      	subs	r3, r2, r3
 800d106:	00db      	lsls	r3, r3, #3
 800d108:	3332      	adds	r3, #50	; 0x32
 800d10a:	4a08      	ldr	r2, [pc, #32]	; (800d12c <UART_SetConfig+0x2d4>)
 800d10c:	fba2 2303 	umull	r2, r3, r2, r3
 800d110:	095b      	lsrs	r3, r3, #5
 800d112:	f003 0207 	and.w	r2, r3, #7
 800d116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	4422      	add	r2, r4
 800d11e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d120:	e105      	b.n	800d32e <UART_SetConfig+0x4d6>
 800d122:	bf00      	nop
 800d124:	40011000 	.word	0x40011000
 800d128:	40011400 	.word	0x40011400
 800d12c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d130:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d134:	2200      	movs	r2, #0
 800d136:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d13a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d13e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800d142:	4642      	mov	r2, r8
 800d144:	464b      	mov	r3, r9
 800d146:	1891      	adds	r1, r2, r2
 800d148:	6239      	str	r1, [r7, #32]
 800d14a:	415b      	adcs	r3, r3
 800d14c:	627b      	str	r3, [r7, #36]	; 0x24
 800d14e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d152:	4641      	mov	r1, r8
 800d154:	1854      	adds	r4, r2, r1
 800d156:	4649      	mov	r1, r9
 800d158:	eb43 0501 	adc.w	r5, r3, r1
 800d15c:	f04f 0200 	mov.w	r2, #0
 800d160:	f04f 0300 	mov.w	r3, #0
 800d164:	00eb      	lsls	r3, r5, #3
 800d166:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d16a:	00e2      	lsls	r2, r4, #3
 800d16c:	4614      	mov	r4, r2
 800d16e:	461d      	mov	r5, r3
 800d170:	4643      	mov	r3, r8
 800d172:	18e3      	adds	r3, r4, r3
 800d174:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d178:	464b      	mov	r3, r9
 800d17a:	eb45 0303 	adc.w	r3, r5, r3
 800d17e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d186:	685b      	ldr	r3, [r3, #4]
 800d188:	2200      	movs	r2, #0
 800d18a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d18e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d192:	f04f 0200 	mov.w	r2, #0
 800d196:	f04f 0300 	mov.w	r3, #0
 800d19a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d19e:	4629      	mov	r1, r5
 800d1a0:	008b      	lsls	r3, r1, #2
 800d1a2:	4621      	mov	r1, r4
 800d1a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d1a8:	4621      	mov	r1, r4
 800d1aa:	008a      	lsls	r2, r1, #2
 800d1ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800d1b0:	f7f3 fb70 	bl	8000894 <__aeabi_uldivmod>
 800d1b4:	4602      	mov	r2, r0
 800d1b6:	460b      	mov	r3, r1
 800d1b8:	4b60      	ldr	r3, [pc, #384]	; (800d33c <UART_SetConfig+0x4e4>)
 800d1ba:	fba3 2302 	umull	r2, r3, r3, r2
 800d1be:	095b      	lsrs	r3, r3, #5
 800d1c0:	011c      	lsls	r4, r3, #4
 800d1c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d1cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d1d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d1d4:	4642      	mov	r2, r8
 800d1d6:	464b      	mov	r3, r9
 800d1d8:	1891      	adds	r1, r2, r2
 800d1da:	61b9      	str	r1, [r7, #24]
 800d1dc:	415b      	adcs	r3, r3
 800d1de:	61fb      	str	r3, [r7, #28]
 800d1e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d1e4:	4641      	mov	r1, r8
 800d1e6:	1851      	adds	r1, r2, r1
 800d1e8:	6139      	str	r1, [r7, #16]
 800d1ea:	4649      	mov	r1, r9
 800d1ec:	414b      	adcs	r3, r1
 800d1ee:	617b      	str	r3, [r7, #20]
 800d1f0:	f04f 0200 	mov.w	r2, #0
 800d1f4:	f04f 0300 	mov.w	r3, #0
 800d1f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d1fc:	4659      	mov	r1, fp
 800d1fe:	00cb      	lsls	r3, r1, #3
 800d200:	4651      	mov	r1, sl
 800d202:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d206:	4651      	mov	r1, sl
 800d208:	00ca      	lsls	r2, r1, #3
 800d20a:	4610      	mov	r0, r2
 800d20c:	4619      	mov	r1, r3
 800d20e:	4603      	mov	r3, r0
 800d210:	4642      	mov	r2, r8
 800d212:	189b      	adds	r3, r3, r2
 800d214:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d218:	464b      	mov	r3, r9
 800d21a:	460a      	mov	r2, r1
 800d21c:	eb42 0303 	adc.w	r3, r2, r3
 800d220:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d228:	685b      	ldr	r3, [r3, #4]
 800d22a:	2200      	movs	r2, #0
 800d22c:	67bb      	str	r3, [r7, #120]	; 0x78
 800d22e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d230:	f04f 0200 	mov.w	r2, #0
 800d234:	f04f 0300 	mov.w	r3, #0
 800d238:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d23c:	4649      	mov	r1, r9
 800d23e:	008b      	lsls	r3, r1, #2
 800d240:	4641      	mov	r1, r8
 800d242:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d246:	4641      	mov	r1, r8
 800d248:	008a      	lsls	r2, r1, #2
 800d24a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d24e:	f7f3 fb21 	bl	8000894 <__aeabi_uldivmod>
 800d252:	4602      	mov	r2, r0
 800d254:	460b      	mov	r3, r1
 800d256:	4b39      	ldr	r3, [pc, #228]	; (800d33c <UART_SetConfig+0x4e4>)
 800d258:	fba3 1302 	umull	r1, r3, r3, r2
 800d25c:	095b      	lsrs	r3, r3, #5
 800d25e:	2164      	movs	r1, #100	; 0x64
 800d260:	fb01 f303 	mul.w	r3, r1, r3
 800d264:	1ad3      	subs	r3, r2, r3
 800d266:	011b      	lsls	r3, r3, #4
 800d268:	3332      	adds	r3, #50	; 0x32
 800d26a:	4a34      	ldr	r2, [pc, #208]	; (800d33c <UART_SetConfig+0x4e4>)
 800d26c:	fba2 2303 	umull	r2, r3, r2, r3
 800d270:	095b      	lsrs	r3, r3, #5
 800d272:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d276:	441c      	add	r4, r3
 800d278:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d27c:	2200      	movs	r2, #0
 800d27e:	673b      	str	r3, [r7, #112]	; 0x70
 800d280:	677a      	str	r2, [r7, #116]	; 0x74
 800d282:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d286:	4642      	mov	r2, r8
 800d288:	464b      	mov	r3, r9
 800d28a:	1891      	adds	r1, r2, r2
 800d28c:	60b9      	str	r1, [r7, #8]
 800d28e:	415b      	adcs	r3, r3
 800d290:	60fb      	str	r3, [r7, #12]
 800d292:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d296:	4641      	mov	r1, r8
 800d298:	1851      	adds	r1, r2, r1
 800d29a:	6039      	str	r1, [r7, #0]
 800d29c:	4649      	mov	r1, r9
 800d29e:	414b      	adcs	r3, r1
 800d2a0:	607b      	str	r3, [r7, #4]
 800d2a2:	f04f 0200 	mov.w	r2, #0
 800d2a6:	f04f 0300 	mov.w	r3, #0
 800d2aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d2ae:	4659      	mov	r1, fp
 800d2b0:	00cb      	lsls	r3, r1, #3
 800d2b2:	4651      	mov	r1, sl
 800d2b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d2b8:	4651      	mov	r1, sl
 800d2ba:	00ca      	lsls	r2, r1, #3
 800d2bc:	4610      	mov	r0, r2
 800d2be:	4619      	mov	r1, r3
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	4642      	mov	r2, r8
 800d2c4:	189b      	adds	r3, r3, r2
 800d2c6:	66bb      	str	r3, [r7, #104]	; 0x68
 800d2c8:	464b      	mov	r3, r9
 800d2ca:	460a      	mov	r2, r1
 800d2cc:	eb42 0303 	adc.w	r3, r2, r3
 800d2d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d2d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d2d6:	685b      	ldr	r3, [r3, #4]
 800d2d8:	2200      	movs	r2, #0
 800d2da:	663b      	str	r3, [r7, #96]	; 0x60
 800d2dc:	667a      	str	r2, [r7, #100]	; 0x64
 800d2de:	f04f 0200 	mov.w	r2, #0
 800d2e2:	f04f 0300 	mov.w	r3, #0
 800d2e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d2ea:	4649      	mov	r1, r9
 800d2ec:	008b      	lsls	r3, r1, #2
 800d2ee:	4641      	mov	r1, r8
 800d2f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d2f4:	4641      	mov	r1, r8
 800d2f6:	008a      	lsls	r2, r1, #2
 800d2f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d2fc:	f7f3 faca 	bl	8000894 <__aeabi_uldivmod>
 800d300:	4602      	mov	r2, r0
 800d302:	460b      	mov	r3, r1
 800d304:	4b0d      	ldr	r3, [pc, #52]	; (800d33c <UART_SetConfig+0x4e4>)
 800d306:	fba3 1302 	umull	r1, r3, r3, r2
 800d30a:	095b      	lsrs	r3, r3, #5
 800d30c:	2164      	movs	r1, #100	; 0x64
 800d30e:	fb01 f303 	mul.w	r3, r1, r3
 800d312:	1ad3      	subs	r3, r2, r3
 800d314:	011b      	lsls	r3, r3, #4
 800d316:	3332      	adds	r3, #50	; 0x32
 800d318:	4a08      	ldr	r2, [pc, #32]	; (800d33c <UART_SetConfig+0x4e4>)
 800d31a:	fba2 2303 	umull	r2, r3, r2, r3
 800d31e:	095b      	lsrs	r3, r3, #5
 800d320:	f003 020f 	and.w	r2, r3, #15
 800d324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	4422      	add	r2, r4
 800d32c:	609a      	str	r2, [r3, #8]
}
 800d32e:	bf00      	nop
 800d330:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d334:	46bd      	mov	sp, r7
 800d336:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d33a:	bf00      	nop
 800d33c:	51eb851f 	.word	0x51eb851f

0800d340 <arm_sin_f32>:
 800d340:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800d3bc <arm_sin_f32+0x7c>
 800d344:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d348:	ee20 7a07 	vmul.f32	s14, s0, s14
 800d34c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d350:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800d354:	d42c      	bmi.n	800d3b0 <arm_sin_f32+0x70>
 800d356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d35a:	eddf 6a19 	vldr	s13, [pc, #100]	; 800d3c0 <arm_sin_f32+0x80>
 800d35e:	4a19      	ldr	r2, [pc, #100]	; (800d3c4 <arm_sin_f32+0x84>)
 800d360:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d364:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d368:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d36c:	eef4 7ae6 	vcmpe.f32	s15, s13
 800d370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d374:	bfa8      	it	ge
 800d376:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 800d37a:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800d37e:	ee17 3a10 	vmov	r3, s14
 800d382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d386:	ee07 3a10 	vmov	s14, r3
 800d38a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800d38e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800d392:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d396:	edd1 6a01 	vldr	s13, [r1, #4]
 800d39a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d39e:	ed91 0a00 	vldr	s0, [r1]
 800d3a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d3a6:	ee27 0a00 	vmul.f32	s0, s14, s0
 800d3aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d3ae:	4770      	bx	lr
 800d3b0:	ee17 3a90 	vmov	r3, s15
 800d3b4:	3b01      	subs	r3, #1
 800d3b6:	ee07 3a90 	vmov	s15, r3
 800d3ba:	e7cc      	b.n	800d356 <arm_sin_f32+0x16>
 800d3bc:	3e22f983 	.word	0x3e22f983
 800d3c0:	44000000 	.word	0x44000000
 800d3c4:	0800f3a8 	.word	0x0800f3a8

0800d3c8 <atoi>:
 800d3c8:	220a      	movs	r2, #10
 800d3ca:	2100      	movs	r1, #0
 800d3cc:	f000 b8d6 	b.w	800d57c <strtol>

0800d3d0 <__errno>:
 800d3d0:	4b01      	ldr	r3, [pc, #4]	; (800d3d8 <__errno+0x8>)
 800d3d2:	6818      	ldr	r0, [r3, #0]
 800d3d4:	4770      	bx	lr
 800d3d6:	bf00      	nop
 800d3d8:	20008f88 	.word	0x20008f88

0800d3dc <__libc_init_array>:
 800d3dc:	b570      	push	{r4, r5, r6, lr}
 800d3de:	4d0d      	ldr	r5, [pc, #52]	; (800d414 <__libc_init_array+0x38>)
 800d3e0:	4c0d      	ldr	r4, [pc, #52]	; (800d418 <__libc_init_array+0x3c>)
 800d3e2:	1b64      	subs	r4, r4, r5
 800d3e4:	10a4      	asrs	r4, r4, #2
 800d3e6:	2600      	movs	r6, #0
 800d3e8:	42a6      	cmp	r6, r4
 800d3ea:	d109      	bne.n	800d400 <__libc_init_array+0x24>
 800d3ec:	4d0b      	ldr	r5, [pc, #44]	; (800d41c <__libc_init_array+0x40>)
 800d3ee:	4c0c      	ldr	r4, [pc, #48]	; (800d420 <__libc_init_array+0x44>)
 800d3f0:	f000 f8ce 	bl	800d590 <_init>
 800d3f4:	1b64      	subs	r4, r4, r5
 800d3f6:	10a4      	asrs	r4, r4, #2
 800d3f8:	2600      	movs	r6, #0
 800d3fa:	42a6      	cmp	r6, r4
 800d3fc:	d105      	bne.n	800d40a <__libc_init_array+0x2e>
 800d3fe:	bd70      	pop	{r4, r5, r6, pc}
 800d400:	f855 3b04 	ldr.w	r3, [r5], #4
 800d404:	4798      	blx	r3
 800d406:	3601      	adds	r6, #1
 800d408:	e7ee      	b.n	800d3e8 <__libc_init_array+0xc>
 800d40a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d40e:	4798      	blx	r3
 800d410:	3601      	adds	r6, #1
 800d412:	e7f2      	b.n	800d3fa <__libc_init_array+0x1e>
 800d414:	0800fcb8 	.word	0x0800fcb8
 800d418:	0800fcb8 	.word	0x0800fcb8
 800d41c:	0800fcb8 	.word	0x0800fcb8
 800d420:	0800fcbc 	.word	0x0800fcbc

0800d424 <memcpy>:
 800d424:	440a      	add	r2, r1
 800d426:	4291      	cmp	r1, r2
 800d428:	f100 33ff 	add.w	r3, r0, #4294967295
 800d42c:	d100      	bne.n	800d430 <memcpy+0xc>
 800d42e:	4770      	bx	lr
 800d430:	b510      	push	{r4, lr}
 800d432:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d436:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d43a:	4291      	cmp	r1, r2
 800d43c:	d1f9      	bne.n	800d432 <memcpy+0xe>
 800d43e:	bd10      	pop	{r4, pc}

0800d440 <memset>:
 800d440:	4402      	add	r2, r0
 800d442:	4603      	mov	r3, r0
 800d444:	4293      	cmp	r3, r2
 800d446:	d100      	bne.n	800d44a <memset+0xa>
 800d448:	4770      	bx	lr
 800d44a:	f803 1b01 	strb.w	r1, [r3], #1
 800d44e:	e7f9      	b.n	800d444 <memset+0x4>

0800d450 <strncmp>:
 800d450:	b510      	push	{r4, lr}
 800d452:	b17a      	cbz	r2, 800d474 <strncmp+0x24>
 800d454:	4603      	mov	r3, r0
 800d456:	3901      	subs	r1, #1
 800d458:	1884      	adds	r4, r0, r2
 800d45a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d45e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d462:	4290      	cmp	r0, r2
 800d464:	d101      	bne.n	800d46a <strncmp+0x1a>
 800d466:	42a3      	cmp	r3, r4
 800d468:	d101      	bne.n	800d46e <strncmp+0x1e>
 800d46a:	1a80      	subs	r0, r0, r2
 800d46c:	bd10      	pop	{r4, pc}
 800d46e:	2800      	cmp	r0, #0
 800d470:	d1f3      	bne.n	800d45a <strncmp+0xa>
 800d472:	e7fa      	b.n	800d46a <strncmp+0x1a>
 800d474:	4610      	mov	r0, r2
 800d476:	e7f9      	b.n	800d46c <strncmp+0x1c>

0800d478 <_strtol_l.constprop.0>:
 800d478:	2b01      	cmp	r3, #1
 800d47a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d47e:	d001      	beq.n	800d484 <_strtol_l.constprop.0+0xc>
 800d480:	2b24      	cmp	r3, #36	; 0x24
 800d482:	d906      	bls.n	800d492 <_strtol_l.constprop.0+0x1a>
 800d484:	f7ff ffa4 	bl	800d3d0 <__errno>
 800d488:	2316      	movs	r3, #22
 800d48a:	6003      	str	r3, [r0, #0]
 800d48c:	2000      	movs	r0, #0
 800d48e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d492:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d578 <_strtol_l.constprop.0+0x100>
 800d496:	460d      	mov	r5, r1
 800d498:	462e      	mov	r6, r5
 800d49a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d49e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d4a2:	f017 0708 	ands.w	r7, r7, #8
 800d4a6:	d1f7      	bne.n	800d498 <_strtol_l.constprop.0+0x20>
 800d4a8:	2c2d      	cmp	r4, #45	; 0x2d
 800d4aa:	d132      	bne.n	800d512 <_strtol_l.constprop.0+0x9a>
 800d4ac:	782c      	ldrb	r4, [r5, #0]
 800d4ae:	2701      	movs	r7, #1
 800d4b0:	1cb5      	adds	r5, r6, #2
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d05b      	beq.n	800d56e <_strtol_l.constprop.0+0xf6>
 800d4b6:	2b10      	cmp	r3, #16
 800d4b8:	d109      	bne.n	800d4ce <_strtol_l.constprop.0+0x56>
 800d4ba:	2c30      	cmp	r4, #48	; 0x30
 800d4bc:	d107      	bne.n	800d4ce <_strtol_l.constprop.0+0x56>
 800d4be:	782c      	ldrb	r4, [r5, #0]
 800d4c0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d4c4:	2c58      	cmp	r4, #88	; 0x58
 800d4c6:	d14d      	bne.n	800d564 <_strtol_l.constprop.0+0xec>
 800d4c8:	786c      	ldrb	r4, [r5, #1]
 800d4ca:	2310      	movs	r3, #16
 800d4cc:	3502      	adds	r5, #2
 800d4ce:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d4d2:	f108 38ff 	add.w	r8, r8, #4294967295
 800d4d6:	f04f 0c00 	mov.w	ip, #0
 800d4da:	fbb8 f9f3 	udiv	r9, r8, r3
 800d4de:	4666      	mov	r6, ip
 800d4e0:	fb03 8a19 	mls	sl, r3, r9, r8
 800d4e4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d4e8:	f1be 0f09 	cmp.w	lr, #9
 800d4ec:	d816      	bhi.n	800d51c <_strtol_l.constprop.0+0xa4>
 800d4ee:	4674      	mov	r4, lr
 800d4f0:	42a3      	cmp	r3, r4
 800d4f2:	dd24      	ble.n	800d53e <_strtol_l.constprop.0+0xc6>
 800d4f4:	f1bc 0f00 	cmp.w	ip, #0
 800d4f8:	db1e      	blt.n	800d538 <_strtol_l.constprop.0+0xc0>
 800d4fa:	45b1      	cmp	r9, r6
 800d4fc:	d31c      	bcc.n	800d538 <_strtol_l.constprop.0+0xc0>
 800d4fe:	d101      	bne.n	800d504 <_strtol_l.constprop.0+0x8c>
 800d500:	45a2      	cmp	sl, r4
 800d502:	db19      	blt.n	800d538 <_strtol_l.constprop.0+0xc0>
 800d504:	fb06 4603 	mla	r6, r6, r3, r4
 800d508:	f04f 0c01 	mov.w	ip, #1
 800d50c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d510:	e7e8      	b.n	800d4e4 <_strtol_l.constprop.0+0x6c>
 800d512:	2c2b      	cmp	r4, #43	; 0x2b
 800d514:	bf04      	itt	eq
 800d516:	782c      	ldrbeq	r4, [r5, #0]
 800d518:	1cb5      	addeq	r5, r6, #2
 800d51a:	e7ca      	b.n	800d4b2 <_strtol_l.constprop.0+0x3a>
 800d51c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d520:	f1be 0f19 	cmp.w	lr, #25
 800d524:	d801      	bhi.n	800d52a <_strtol_l.constprop.0+0xb2>
 800d526:	3c37      	subs	r4, #55	; 0x37
 800d528:	e7e2      	b.n	800d4f0 <_strtol_l.constprop.0+0x78>
 800d52a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d52e:	f1be 0f19 	cmp.w	lr, #25
 800d532:	d804      	bhi.n	800d53e <_strtol_l.constprop.0+0xc6>
 800d534:	3c57      	subs	r4, #87	; 0x57
 800d536:	e7db      	b.n	800d4f0 <_strtol_l.constprop.0+0x78>
 800d538:	f04f 3cff 	mov.w	ip, #4294967295
 800d53c:	e7e6      	b.n	800d50c <_strtol_l.constprop.0+0x94>
 800d53e:	f1bc 0f00 	cmp.w	ip, #0
 800d542:	da05      	bge.n	800d550 <_strtol_l.constprop.0+0xd8>
 800d544:	2322      	movs	r3, #34	; 0x22
 800d546:	6003      	str	r3, [r0, #0]
 800d548:	4646      	mov	r6, r8
 800d54a:	b942      	cbnz	r2, 800d55e <_strtol_l.constprop.0+0xe6>
 800d54c:	4630      	mov	r0, r6
 800d54e:	e79e      	b.n	800d48e <_strtol_l.constprop.0+0x16>
 800d550:	b107      	cbz	r7, 800d554 <_strtol_l.constprop.0+0xdc>
 800d552:	4276      	negs	r6, r6
 800d554:	2a00      	cmp	r2, #0
 800d556:	d0f9      	beq.n	800d54c <_strtol_l.constprop.0+0xd4>
 800d558:	f1bc 0f00 	cmp.w	ip, #0
 800d55c:	d000      	beq.n	800d560 <_strtol_l.constprop.0+0xe8>
 800d55e:	1e69      	subs	r1, r5, #1
 800d560:	6011      	str	r1, [r2, #0]
 800d562:	e7f3      	b.n	800d54c <_strtol_l.constprop.0+0xd4>
 800d564:	2430      	movs	r4, #48	; 0x30
 800d566:	2b00      	cmp	r3, #0
 800d568:	d1b1      	bne.n	800d4ce <_strtol_l.constprop.0+0x56>
 800d56a:	2308      	movs	r3, #8
 800d56c:	e7af      	b.n	800d4ce <_strtol_l.constprop.0+0x56>
 800d56e:	2c30      	cmp	r4, #48	; 0x30
 800d570:	d0a5      	beq.n	800d4be <_strtol_l.constprop.0+0x46>
 800d572:	230a      	movs	r3, #10
 800d574:	e7ab      	b.n	800d4ce <_strtol_l.constprop.0+0x56>
 800d576:	bf00      	nop
 800d578:	0800fbad 	.word	0x0800fbad

0800d57c <strtol>:
 800d57c:	4613      	mov	r3, r2
 800d57e:	460a      	mov	r2, r1
 800d580:	4601      	mov	r1, r0
 800d582:	4802      	ldr	r0, [pc, #8]	; (800d58c <strtol+0x10>)
 800d584:	6800      	ldr	r0, [r0, #0]
 800d586:	f7ff bf77 	b.w	800d478 <_strtol_l.constprop.0>
 800d58a:	bf00      	nop
 800d58c:	20008f88 	.word	0x20008f88

0800d590 <_init>:
 800d590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d592:	bf00      	nop
 800d594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d596:	bc08      	pop	{r3}
 800d598:	469e      	mov	lr, r3
 800d59a:	4770      	bx	lr

0800d59c <_fini>:
 800d59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d59e:	bf00      	nop
 800d5a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5a2:	bc08      	pop	{r3}
 800d5a4:	469e      	mov	lr, r3
 800d5a6:	4770      	bx	lr
