
newseqen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000916c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015c0  0800930c  0800930c  0001930c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8cc  0800a8cc  00020758  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8cc  0800a8cc  0001a8cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8d4  0800a8d4  00020758  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8d4  0800a8d4  0001a8d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8d8  0800a8d8  0001a8d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000758  20000000  0800a8dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024ec  20000758  0800b034  00020758  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002c44  0800b034  00022c44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020758  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013450  00000000  00000000  00020788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000252a  00000000  00000000  00033bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  00036108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001020  00000000  00000000  00037240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a69  00000000  00000000  00038260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001415b  00000000  00000000  00050cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e4ef  00000000  00000000  00064e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  00103313  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051e8  00000000  00000000  001033d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000d8  00000000  00000000  001085bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000758 	.word	0x20000758
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080092f4 	.word	0x080092f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000075c 	.word	0x2000075c
 80001dc:	080092f4 	.word	0x080092f4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2f>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000854:	bf24      	itt	cs
 8000856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800085a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800085e:	d90d      	bls.n	800087c <__aeabi_d2f+0x30>
 8000860:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800086c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000874:	bf08      	it	eq
 8000876:	f020 0001 	biceq.w	r0, r0, #1
 800087a:	4770      	bx	lr
 800087c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000880:	d121      	bne.n	80008c6 <__aeabi_d2f+0x7a>
 8000882:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000886:	bfbc      	itt	lt
 8000888:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800088c:	4770      	bxlt	lr
 800088e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000892:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000896:	f1c2 0218 	rsb	r2, r2, #24
 800089a:	f1c2 0c20 	rsb	ip, r2, #32
 800089e:	fa10 f30c 	lsls.w	r3, r0, ip
 80008a2:	fa20 f002 	lsr.w	r0, r0, r2
 80008a6:	bf18      	it	ne
 80008a8:	f040 0001 	orrne.w	r0, r0, #1
 80008ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b8:	ea40 000c 	orr.w	r0, r0, ip
 80008bc:	fa23 f302 	lsr.w	r3, r3, r2
 80008c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008c4:	e7cc      	b.n	8000860 <__aeabi_d2f+0x14>
 80008c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ca:	d107      	bne.n	80008dc <__aeabi_d2f+0x90>
 80008cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d0:	bf1e      	ittt	ne
 80008d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008da:	4770      	bxne	lr
 80008dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000900:	f000 b974 	b.w	8000bec <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9d08      	ldr	r5, [sp, #32]
 8000922:	4604      	mov	r4, r0
 8000924:	468e      	mov	lr, r1
 8000926:	2b00      	cmp	r3, #0
 8000928:	d14d      	bne.n	80009c6 <__udivmoddi4+0xaa>
 800092a:	428a      	cmp	r2, r1
 800092c:	4694      	mov	ip, r2
 800092e:	d969      	bls.n	8000a04 <__udivmoddi4+0xe8>
 8000930:	fab2 f282 	clz	r2, r2
 8000934:	b152      	cbz	r2, 800094c <__udivmoddi4+0x30>
 8000936:	fa01 f302 	lsl.w	r3, r1, r2
 800093a:	f1c2 0120 	rsb	r1, r2, #32
 800093e:	fa20 f101 	lsr.w	r1, r0, r1
 8000942:	fa0c fc02 	lsl.w	ip, ip, r2
 8000946:	ea41 0e03 	orr.w	lr, r1, r3
 800094a:	4094      	lsls	r4, r2
 800094c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000950:	0c21      	lsrs	r1, r4, #16
 8000952:	fbbe f6f8 	udiv	r6, lr, r8
 8000956:	fa1f f78c 	uxth.w	r7, ip
 800095a:	fb08 e316 	mls	r3, r8, r6, lr
 800095e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000962:	fb06 f107 	mul.w	r1, r6, r7
 8000966:	4299      	cmp	r1, r3
 8000968:	d90a      	bls.n	8000980 <__udivmoddi4+0x64>
 800096a:	eb1c 0303 	adds.w	r3, ip, r3
 800096e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000972:	f080 811f 	bcs.w	8000bb4 <__udivmoddi4+0x298>
 8000976:	4299      	cmp	r1, r3
 8000978:	f240 811c 	bls.w	8000bb4 <__udivmoddi4+0x298>
 800097c:	3e02      	subs	r6, #2
 800097e:	4463      	add	r3, ip
 8000980:	1a5b      	subs	r3, r3, r1
 8000982:	b2a4      	uxth	r4, r4
 8000984:	fbb3 f0f8 	udiv	r0, r3, r8
 8000988:	fb08 3310 	mls	r3, r8, r0, r3
 800098c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000990:	fb00 f707 	mul.w	r7, r0, r7
 8000994:	42a7      	cmp	r7, r4
 8000996:	d90a      	bls.n	80009ae <__udivmoddi4+0x92>
 8000998:	eb1c 0404 	adds.w	r4, ip, r4
 800099c:	f100 33ff 	add.w	r3, r0, #4294967295
 80009a0:	f080 810a 	bcs.w	8000bb8 <__udivmoddi4+0x29c>
 80009a4:	42a7      	cmp	r7, r4
 80009a6:	f240 8107 	bls.w	8000bb8 <__udivmoddi4+0x29c>
 80009aa:	4464      	add	r4, ip
 80009ac:	3802      	subs	r0, #2
 80009ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009b2:	1be4      	subs	r4, r4, r7
 80009b4:	2600      	movs	r6, #0
 80009b6:	b11d      	cbz	r5, 80009c0 <__udivmoddi4+0xa4>
 80009b8:	40d4      	lsrs	r4, r2
 80009ba:	2300      	movs	r3, #0
 80009bc:	e9c5 4300 	strd	r4, r3, [r5]
 80009c0:	4631      	mov	r1, r6
 80009c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c6:	428b      	cmp	r3, r1
 80009c8:	d909      	bls.n	80009de <__udivmoddi4+0xc2>
 80009ca:	2d00      	cmp	r5, #0
 80009cc:	f000 80ef 	beq.w	8000bae <__udivmoddi4+0x292>
 80009d0:	2600      	movs	r6, #0
 80009d2:	e9c5 0100 	strd	r0, r1, [r5]
 80009d6:	4630      	mov	r0, r6
 80009d8:	4631      	mov	r1, r6
 80009da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009de:	fab3 f683 	clz	r6, r3
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d14a      	bne.n	8000a7c <__udivmoddi4+0x160>
 80009e6:	428b      	cmp	r3, r1
 80009e8:	d302      	bcc.n	80009f0 <__udivmoddi4+0xd4>
 80009ea:	4282      	cmp	r2, r0
 80009ec:	f200 80f9 	bhi.w	8000be2 <__udivmoddi4+0x2c6>
 80009f0:	1a84      	subs	r4, r0, r2
 80009f2:	eb61 0303 	sbc.w	r3, r1, r3
 80009f6:	2001      	movs	r0, #1
 80009f8:	469e      	mov	lr, r3
 80009fa:	2d00      	cmp	r5, #0
 80009fc:	d0e0      	beq.n	80009c0 <__udivmoddi4+0xa4>
 80009fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a02:	e7dd      	b.n	80009c0 <__udivmoddi4+0xa4>
 8000a04:	b902      	cbnz	r2, 8000a08 <__udivmoddi4+0xec>
 8000a06:	deff      	udf	#255	; 0xff
 8000a08:	fab2 f282 	clz	r2, r2
 8000a0c:	2a00      	cmp	r2, #0
 8000a0e:	f040 8092 	bne.w	8000b36 <__udivmoddi4+0x21a>
 8000a12:	eba1 010c 	sub.w	r1, r1, ip
 8000a16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a1a:	fa1f fe8c 	uxth.w	lr, ip
 8000a1e:	2601      	movs	r6, #1
 8000a20:	0c20      	lsrs	r0, r4, #16
 8000a22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a26:	fb07 1113 	mls	r1, r7, r3, r1
 8000a2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a2e:	fb0e f003 	mul.w	r0, lr, r3
 8000a32:	4288      	cmp	r0, r1
 8000a34:	d908      	bls.n	8000a48 <__udivmoddi4+0x12c>
 8000a36:	eb1c 0101 	adds.w	r1, ip, r1
 8000a3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a3e:	d202      	bcs.n	8000a46 <__udivmoddi4+0x12a>
 8000a40:	4288      	cmp	r0, r1
 8000a42:	f200 80cb 	bhi.w	8000bdc <__udivmoddi4+0x2c0>
 8000a46:	4643      	mov	r3, r8
 8000a48:	1a09      	subs	r1, r1, r0
 8000a4a:	b2a4      	uxth	r4, r4
 8000a4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a50:	fb07 1110 	mls	r1, r7, r0, r1
 8000a54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a58:	fb0e fe00 	mul.w	lr, lr, r0
 8000a5c:	45a6      	cmp	lr, r4
 8000a5e:	d908      	bls.n	8000a72 <__udivmoddi4+0x156>
 8000a60:	eb1c 0404 	adds.w	r4, ip, r4
 8000a64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a68:	d202      	bcs.n	8000a70 <__udivmoddi4+0x154>
 8000a6a:	45a6      	cmp	lr, r4
 8000a6c:	f200 80bb 	bhi.w	8000be6 <__udivmoddi4+0x2ca>
 8000a70:	4608      	mov	r0, r1
 8000a72:	eba4 040e 	sub.w	r4, r4, lr
 8000a76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a7a:	e79c      	b.n	80009b6 <__udivmoddi4+0x9a>
 8000a7c:	f1c6 0720 	rsb	r7, r6, #32
 8000a80:	40b3      	lsls	r3, r6
 8000a82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a92:	431c      	orrs	r4, r3
 8000a94:	40f9      	lsrs	r1, r7
 8000a96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000aa2:	0c20      	lsrs	r0, r4, #16
 8000aa4:	fa1f fe8c 	uxth.w	lr, ip
 8000aa8:	fb09 1118 	mls	r1, r9, r8, r1
 8000aac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ab0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ab4:	4288      	cmp	r0, r1
 8000ab6:	fa02 f206 	lsl.w	r2, r2, r6
 8000aba:	d90b      	bls.n	8000ad4 <__udivmoddi4+0x1b8>
 8000abc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ac0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ac4:	f080 8088 	bcs.w	8000bd8 <__udivmoddi4+0x2bc>
 8000ac8:	4288      	cmp	r0, r1
 8000aca:	f240 8085 	bls.w	8000bd8 <__udivmoddi4+0x2bc>
 8000ace:	f1a8 0802 	sub.w	r8, r8, #2
 8000ad2:	4461      	add	r1, ip
 8000ad4:	1a09      	subs	r1, r1, r0
 8000ad6:	b2a4      	uxth	r4, r4
 8000ad8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000adc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ae0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ae4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ae8:	458e      	cmp	lr, r1
 8000aea:	d908      	bls.n	8000afe <__udivmoddi4+0x1e2>
 8000aec:	eb1c 0101 	adds.w	r1, ip, r1
 8000af0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000af4:	d26c      	bcs.n	8000bd0 <__udivmoddi4+0x2b4>
 8000af6:	458e      	cmp	lr, r1
 8000af8:	d96a      	bls.n	8000bd0 <__udivmoddi4+0x2b4>
 8000afa:	3802      	subs	r0, #2
 8000afc:	4461      	add	r1, ip
 8000afe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b02:	fba0 9402 	umull	r9, r4, r0, r2
 8000b06:	eba1 010e 	sub.w	r1, r1, lr
 8000b0a:	42a1      	cmp	r1, r4
 8000b0c:	46c8      	mov	r8, r9
 8000b0e:	46a6      	mov	lr, r4
 8000b10:	d356      	bcc.n	8000bc0 <__udivmoddi4+0x2a4>
 8000b12:	d053      	beq.n	8000bbc <__udivmoddi4+0x2a0>
 8000b14:	b15d      	cbz	r5, 8000b2e <__udivmoddi4+0x212>
 8000b16:	ebb3 0208 	subs.w	r2, r3, r8
 8000b1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b22:	fa22 f306 	lsr.w	r3, r2, r6
 8000b26:	40f1      	lsrs	r1, r6
 8000b28:	431f      	orrs	r7, r3
 8000b2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b2e:	2600      	movs	r6, #0
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	f1c2 0320 	rsb	r3, r2, #32
 8000b3a:	40d8      	lsrs	r0, r3
 8000b3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b40:	fa21 f303 	lsr.w	r3, r1, r3
 8000b44:	4091      	lsls	r1, r2
 8000b46:	4301      	orrs	r1, r0
 8000b48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b4c:	fa1f fe8c 	uxth.w	lr, ip
 8000b50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b54:	fb07 3610 	mls	r6, r7, r0, r3
 8000b58:	0c0b      	lsrs	r3, r1, #16
 8000b5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b62:	429e      	cmp	r6, r3
 8000b64:	fa04 f402 	lsl.w	r4, r4, r2
 8000b68:	d908      	bls.n	8000b7c <__udivmoddi4+0x260>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b72:	d22f      	bcs.n	8000bd4 <__udivmoddi4+0x2b8>
 8000b74:	429e      	cmp	r6, r3
 8000b76:	d92d      	bls.n	8000bd4 <__udivmoddi4+0x2b8>
 8000b78:	3802      	subs	r0, #2
 8000b7a:	4463      	add	r3, ip
 8000b7c:	1b9b      	subs	r3, r3, r6
 8000b7e:	b289      	uxth	r1, r1
 8000b80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b84:	fb07 3316 	mls	r3, r7, r6, r3
 8000b88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b90:	428b      	cmp	r3, r1
 8000b92:	d908      	bls.n	8000ba6 <__udivmoddi4+0x28a>
 8000b94:	eb1c 0101 	adds.w	r1, ip, r1
 8000b98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b9c:	d216      	bcs.n	8000bcc <__udivmoddi4+0x2b0>
 8000b9e:	428b      	cmp	r3, r1
 8000ba0:	d914      	bls.n	8000bcc <__udivmoddi4+0x2b0>
 8000ba2:	3e02      	subs	r6, #2
 8000ba4:	4461      	add	r1, ip
 8000ba6:	1ac9      	subs	r1, r1, r3
 8000ba8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bac:	e738      	b.n	8000a20 <__udivmoddi4+0x104>
 8000bae:	462e      	mov	r6, r5
 8000bb0:	4628      	mov	r0, r5
 8000bb2:	e705      	b.n	80009c0 <__udivmoddi4+0xa4>
 8000bb4:	4606      	mov	r6, r0
 8000bb6:	e6e3      	b.n	8000980 <__udivmoddi4+0x64>
 8000bb8:	4618      	mov	r0, r3
 8000bba:	e6f8      	b.n	80009ae <__udivmoddi4+0x92>
 8000bbc:	454b      	cmp	r3, r9
 8000bbe:	d2a9      	bcs.n	8000b14 <__udivmoddi4+0x1f8>
 8000bc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000bc4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000bc8:	3801      	subs	r0, #1
 8000bca:	e7a3      	b.n	8000b14 <__udivmoddi4+0x1f8>
 8000bcc:	4646      	mov	r6, r8
 8000bce:	e7ea      	b.n	8000ba6 <__udivmoddi4+0x28a>
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	e794      	b.n	8000afe <__udivmoddi4+0x1e2>
 8000bd4:	4640      	mov	r0, r8
 8000bd6:	e7d1      	b.n	8000b7c <__udivmoddi4+0x260>
 8000bd8:	46d0      	mov	r8, sl
 8000bda:	e77b      	b.n	8000ad4 <__udivmoddi4+0x1b8>
 8000bdc:	3b02      	subs	r3, #2
 8000bde:	4461      	add	r1, ip
 8000be0:	e732      	b.n	8000a48 <__udivmoddi4+0x12c>
 8000be2:	4630      	mov	r0, r6
 8000be4:	e709      	b.n	80009fa <__udivmoddi4+0xde>
 8000be6:	4464      	add	r4, ip
 8000be8:	3802      	subs	r0, #2
 8000bea:	e742      	b.n	8000a72 <__udivmoddi4+0x156>

08000bec <__aeabi_idiv0>:
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000bf8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bfc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d013      	beq.n	8000c30 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000c08:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c0c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000c10:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d00b      	beq.n	8000c30 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000c18:	e000      	b.n	8000c1c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000c1a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000c1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d0f9      	beq.n	8000c1a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c26:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000c30:	687b      	ldr	r3, [r7, #4]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <_write>:
uint16_t enc2_lut[180];   // lut to skip cells ,filled in on main
uint16_t feedback_line[17]={'F','o','o','d','b','a','c','k','g','_' ,'k',64, 278, 279, 280,64}; // this is variable , last display line for info
uint16_t feedback_pointer;  // pointer for feedback item start position , maybe bit search for less menu data ,dunno

int _write(int file, char *ptr, int len)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b086      	sub	sp, #24
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	60f8      	str	r0, [r7, #12]
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	e009      	b.n	8000c64 <_write+0x26>
	{
	   ITM_SendChar( *ptr++ );
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	1c5a      	adds	r2, r3, #1
 8000c54:	60ba      	str	r2, [r7, #8]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ffc9 	bl	8000bf0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	3301      	adds	r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	dbf1      	blt.n	8000c50 <_write+0x12>
	}

	return len;
 8000c6c:	687b      	ldr	r3, [r7, #4]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <SPI_command>:
void SPI_command(void){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
// pins are all good , SPI is always the problem!!!
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 8000c7e:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <SPI_command+0x68>)
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d128      	bne.n	8000cd8 <SPI_command+0x60>
 8000c86:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <SPI_command+0x6c>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d124      	bne.n	8000cd8 <SPI_command+0x60>

uint8_t spi_store[5];

	//clk_pin=(i&1)^1;
		//bsrr_long=0;
		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <SPI_command+0x70>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	0a1b      	lsrs	r3, r3, #8
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d003      	beq.n	8000ca2 <SPI_command+0x2a>
 8000c9a:	4b14      	ldr	r3, [pc, #80]	; (8000cec <SPI_command+0x74>)
 8000c9c:	22f8      	movs	r2, #248	; 0xf8
 8000c9e:	701a      	strb	r2, [r3, #0]
 8000ca0:	e002      	b.n	8000ca8 <SPI_command+0x30>
 8000ca2:	4b12      	ldr	r3, [pc, #72]	; (8000cec <SPI_command+0x74>)
 8000ca4:	22fa      	movs	r2, #250	; 0xfa
 8000ca6:	701a      	strb	r2, [r3, #0]
/*		bsrr_long=spi_byte<<16; // top byte for command 24-16, then 2 bytes of data 16-0
		spi_hold=(spi_hold&255);
		bsrr_long=bsrr_long+((spi_hold>>4)<<12); // 4 bits to top
		bsrr_long=bsrr_long+((spi_hold&15)<<4);	// 4 bits to top
*/
	spi_store[0]=spi_byte&255;
 8000ca8:	4b10      	ldr	r3, [pc, #64]	; (8000cec <SPI_command+0x74>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	703b      	strb	r3, [r7, #0]
	spi_store[1]=((spi_hold>>4)<<4)&255;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <SPI_command+0x70>)
 8000cb0:	881b      	ldrh	r3, [r3, #0]
 8000cb2:	091b      	lsrs	r3, r3, #4
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	011b      	lsls	r3, r3, #4
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	707b      	strb	r3, [r7, #1]
	spi_store[2]=((spi_hold&15)<<4)&255;
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <SPI_command+0x70>)
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	011b      	lsls	r3, r3, #4
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	70bb      	strb	r3, [r7, #2]

// send this to spi for now
		HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3, 100);  // working good
 8000cc6:	4639      	mov	r1, r7
 8000cc8:	2364      	movs	r3, #100	; 0x64
 8000cca:	2203      	movs	r2, #3
 8000ccc:	4808      	ldr	r0, [pc, #32]	; (8000cf0 <SPI_command+0x78>)
 8000cce:	f006 f842 	bl	8006d56 <HAL_SPI_Transmit>


//HAL_Delay(10);
	spi_enable=1; }
 8000cd2:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <SPI_command+0x68>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	801a      	strh	r2, [r3, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20001cfa 	.word	0x20001cfa
 8000ce4:	20001d00 	.word	0x20001d00
 8000ce8:	20001cfe 	.word	0x20001cfe
 8000cec:	20001cfc 	.word	0x20001cfc
 8000cf0:	20002afc 	.word	0x20002afc

08000cf4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)    // unreliable

{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]

	sample_point=sample_point & 1023;// this is 1
 8000cfc:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d0a:	801a      	strh	r2, [r3, #0]
	play_hold=play_sample[sample_point]; // this is 2
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d0e:	881b      	ldrh	r3, [r3, #0]
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	461a      	mov	r2, r3
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000d16:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000d1c:	801a      	strh	r2, [r3, #0]

		if(TIM3==htim->Instance)			// nothing here is consistent
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a0d      	ldr	r2, [pc, #52]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d10b      	bne.n	8000d40 <HAL_TIM_PeriodElapsedCallback+0x4c>
{


TIM3->CCR3=play_hold ;  // keep readin sample storage
 8000d28:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000d30:	63da      	str	r2, [r3, #60]	; 0x3c


//if (bs_count==255
	//	)  { bs_count=0; menu_store=(menuSelect>>2); } else bs_count++; // menu select, higher count just spills over  159 chamge to 128 2*64
//}
sample_point++; //this needs to be here or too fast and wrong sample rate
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	3301      	adds	r3, #1
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d3e:	801a      	strh	r2, [r3, #0]

}

}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	20001442 	.word	0x20001442
 8000d50:	20000c40 	.word	0x20000c40
 8000d54:	20001444 	.word	0x20001444
 8000d58:	40000400 	.word	0x40000400

08000d5c <analoginputloopb>:
						}  // get value this this on e is blank
		//HAL_ADC_Stop(&hadc1);
//for (i=0;i<3;i++){ adc_values[i]= (adc_values[i]>>8) &15; } // reduce value to 4 bit
}
*/
void analoginputloopb(void){  //works fine still
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0


	//menuSelect = (7 - (adc_values[0] >>2))<<1;		//x *16  main menu select
	//menuSelect = (15 - (adc_values[0] >>1));		//x *7  main menu select
	//menuSelectX=(31 - adc_values[1])>>1;  // Y select inside page
	menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 8000d62:	4b80      	ldr	r3, [pc, #512]	; (8000f64 <analoginputloopb+0x208>)
 8000d64:	889b      	ldrh	r3, [r3, #4]
 8000d66:	091b      	lsrs	r3, r3, #4
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	4b7e      	ldr	r3, [pc, #504]	; (8000f68 <analoginputloopb+0x20c>)
 8000d6e:	701a      	strb	r2, [r3, #0]
		menuSelectX=cursor_menu[2]&15;  // Y select inside page
 8000d70:	4b7c      	ldr	r3, [pc, #496]	; (8000f64 <analoginputloopb+0x208>)
 8000d72:	889b      	ldrh	r3, [r3, #4]
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	f003 030f 	and.w	r3, r3, #15
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	4b7b      	ldr	r3, [pc, #492]	; (8000f6c <analoginputloopb+0x210>)
 8000d7e:	701a      	strb	r2, [r3, #0]
	//	counterVarB = menuSelectX + menuSelect; // select mem page 10*8  and location pointer  77
//		if (adc_values[1]>15)	menu_holder=disp_lut [(menuSelect)	+1] [31-adc_values[1]]; // change back to 0-15
//	else menu_holder=disp_lut [(menuSelect)	] [15-adc_values[1]];  // grab disp lut value for pointer if valid then write for now

		//menu_holder=disp_lut [(menuSelect)	] [(15-adc_values[1])];   // value from disp lut
		menu_holder=disp_lut [menuSelect] [menuSelectX];   // value from disp lut
 8000d80:	4b79      	ldr	r3, [pc, #484]	; (8000f68 <analoginputloopb+0x20c>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	4b79      	ldr	r3, [pc, #484]	; (8000f6c <analoginputloopb+0x210>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4a78      	ldr	r2, [pc, #480]	; (8000f70 <analoginputloopb+0x214>)
 8000d8e:	0103      	lsls	r3, r0, #4
 8000d90:	440b      	add	r3, r1
 8000d92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d96:	80fb      	strh	r3, [r7, #6]
		cursor_menu[1]=0;
 8000d98:	4b72      	ldr	r3, [pc, #456]	; (8000f64 <analoginputloopb+0x208>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	805a      	strh	r2, [r3, #2]
		//cursor_menu[2]=cursor_lookup[enc2_dir];
		// cursor_menu[2]=cursor_lookup[enc2_dir]; //needed for correct line sequence ,obsolete
		cursor_menu[2]=enc2_dir;
 8000d9e:	4b75      	ldr	r3, [pc, #468]	; (8000f74 <analoginputloopb+0x218>)
 8000da0:	881a      	ldrh	r2, [r3, #0]
 8000da2:	4b70      	ldr	r3, [pc, #448]	; (8000f64 <analoginputloopb+0x208>)
 8000da4:	809a      	strh	r2, [r3, #4]

		//cursor_menu[2]=(16-adc_values[1]);



		if (menu_holder>127)	counterVarB=menu_holder-128; //  points to actual potvalues location from dsip_lut when value is higher than 127 , works ok problem with menu display
 8000da6:	88fb      	ldrh	r3, [r7, #6]
 8000da8:	2b7f      	cmp	r3, #127	; 0x7f
 8000daa:	d904      	bls.n	8000db6 <analoginputloopb+0x5a>
 8000dac:	88fb      	ldrh	r3, [r7, #6]
 8000dae:	3b80      	subs	r3, #128	; 0x80
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	4b71      	ldr	r3, [pc, #452]	; (8000f78 <analoginputloopb+0x21c>)
 8000db4:	801a      	strh	r2, [r3, #0]
		if (menu_holder>511)	counterVarB=menu_holder-384;		// text pointer , max potvalue address is 142 , fix second page issue later
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dbc:	d305      	bcc.n	8000dca <analoginputloopb+0x6e>
 8000dbe:	88fb      	ldrh	r3, [r7, #6]
 8000dc0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	4b6c      	ldr	r3, [pc, #432]	; (8000f78 <analoginputloopb+0x21c>)
 8000dc8:	801a      	strh	r2, [r3, #0]


		enc_dir=potSource[counterVarB];
 8000dca:	4b6b      	ldr	r3, [pc, #428]	; (8000f78 <analoginputloopb+0x21c>)
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4b6a      	ldr	r3, [pc, #424]	; (8000f7c <analoginputloopb+0x220>)
 8000dd2:	5c9b      	ldrb	r3, [r3, r2]
 8000dd4:	b21a      	sxth	r2, r3
 8000dd6:	4b6a      	ldr	r3, [pc, #424]	; (8000f80 <analoginputloopb+0x224>)
 8000dd8:	801a      	strh	r2, [r3, #0]


	enc_temp=(TIM2->CNT)>>1;  // read counter tim2 ,divider ok
 8000dda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de0:	085b      	lsrs	r3, r3, #1
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	4b67      	ldr	r3, [pc, #412]	; (8000f84 <analoginputloopb+0x228>)
 8000de6:	801a      	strh	r2, [r3, #0]
	enc2_temp=(TIM4->CNT)>>1;  // read counter tim4
 8000de8:	4b67      	ldr	r3, [pc, #412]	; (8000f88 <analoginputloopb+0x22c>)
 8000dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dec:	085b      	lsrs	r3, r3, #1
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	4b66      	ldr	r3, [pc, #408]	; (8000f8c <analoginputloopb+0x230>)
 8000df2:	801a      	strh	r2, [r3, #0]
	enc2_temp=enc2_temp&127; // fix overflow ? , dont need a lot because of skip
 8000df4:	4b65      	ldr	r3, [pc, #404]	; (8000f8c <analoginputloopb+0x230>)
 8000df6:	881b      	ldrh	r3, [r3, #0]
 8000df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	4b63      	ldr	r3, [pc, #396]	; (8000f8c <analoginputloopb+0x230>)
 8000e00:	801a      	strh	r2, [r3, #0]

	if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-(disp_multi[enc2_dir>>4]);   // start settle timer , will do 2 times per turn always, wire opposite
 8000e02:	4b60      	ldr	r3, [pc, #384]	; (8000f84 <analoginputloopb+0x228>)
 8000e04:	881a      	ldrh	r2, [r3, #0]
 8000e06:	4b62      	ldr	r3, [pc, #392]	; (8000f90 <analoginputloopb+0x234>)
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d910      	bls.n	8000e30 <analoginputloopb+0xd4>
 8000e0e:	4b5c      	ldr	r3, [pc, #368]	; (8000f80 <analoginputloopb+0x224>)
 8000e10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	4b57      	ldr	r3, [pc, #348]	; (8000f74 <analoginputloopb+0x218>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	091b      	lsrs	r3, r3, #4
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4b5c      	ldr	r3, [pc, #368]	; (8000f94 <analoginputloopb+0x238>)
 8000e22:	5c5b      	ldrb	r3, [r3, r1]
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	b21a      	sxth	r2, r3
 8000e2c:	4b54      	ldr	r3, [pc, #336]	; (8000f80 <analoginputloopb+0x224>)
 8000e2e:	801a      	strh	r2, [r3, #0]
	if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+(disp_multi[enc2_dir>>4]);   // start settle timer , will do 2 times per turn always, wire opposite , step multiplier
 8000e30:	4b54      	ldr	r3, [pc, #336]	; (8000f84 <analoginputloopb+0x228>)
 8000e32:	881a      	ldrh	r2, [r3, #0]
 8000e34:	4b56      	ldr	r3, [pc, #344]	; (8000f90 <analoginputloopb+0x234>)
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d210      	bcs.n	8000e5e <analoginputloopb+0x102>
 8000e3c:	4b4d      	ldr	r3, [pc, #308]	; (8000f74 <analoginputloopb+0x218>)
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	091b      	lsrs	r3, r3, #4
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b53      	ldr	r3, [pc, #332]	; (8000f94 <analoginputloopb+0x238>)
 8000e48:	5c9b      	ldrb	r3, [r3, r2]
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	4b4c      	ldr	r3, [pc, #304]	; (8000f80 <analoginputloopb+0x224>)
 8000e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	4413      	add	r3, r2
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	b21a      	sxth	r2, r3
 8000e5a:	4b49      	ldr	r3, [pc, #292]	; (8000f80 <analoginputloopb+0x224>)
 8000e5c:	801a      	strh	r2, [r3, #0]
	//if (enc_temp<enc_tempB)	 enc_dir++;

  enc2_temp=enc2_lut[enc2_temp];  // force alternative values for skip  , seems to work ok , disable temporarily
 8000e5e:	4b4b      	ldr	r3, [pc, #300]	; (8000f8c <analoginputloopb+0x230>)
 8000e60:	881b      	ldrh	r3, [r3, #0]
 8000e62:	461a      	mov	r2, r3
 8000e64:	4b4c      	ldr	r3, [pc, #304]	; (8000f98 <analoginputloopb+0x23c>)
 8000e66:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000e6a:	4b48      	ldr	r3, [pc, #288]	; (8000f8c <analoginputloopb+0x230>)
 8000e6c:	801a      	strh	r2, [r3, #0]
  if (enc2_temp>383) enc2_temp=383;  //mem overflow somewhere
 8000e6e:	4b47      	ldr	r3, [pc, #284]	; (8000f8c <analoginputloopb+0x230>)
 8000e70:	881b      	ldrh	r3, [r3, #0]
 8000e72:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000e76:	d303      	bcc.n	8000e80 <analoginputloopb+0x124>
 8000e78:	4b44      	ldr	r3, [pc, #272]	; (8000f8c <analoginputloopb+0x230>)
 8000e7a:	f240 127f 	movw	r2, #383	; 0x17f
 8000e7e:	801a      	strh	r2, [r3, #0]
	if (enc_dir>160) enc_dir=160;
 8000e80:	4b3f      	ldr	r3, [pc, #252]	; (8000f80 <analoginputloopb+0x224>)
 8000e82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e86:	2ba0      	cmp	r3, #160	; 0xa0
 8000e88:	dd02      	ble.n	8000e90 <analoginputloopb+0x134>
 8000e8a:	4b3d      	ldr	r3, [pc, #244]	; (8000f80 <analoginputloopb+0x224>)
 8000e8c:	22a0      	movs	r2, #160	; 0xa0
 8000e8e:	801a      	strh	r2, [r3, #0]
			if (enc_dir<0) enc_dir=0;
 8000e90:	4b3b      	ldr	r3, [pc, #236]	; (8000f80 <analoginputloopb+0x224>)
 8000e92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	da02      	bge.n	8000ea0 <analoginputloopb+0x144>
 8000e9a:	4b39      	ldr	r3, [pc, #228]	; (8000f80 <analoginputloopb+0x224>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	801a      	strh	r2, [r3, #0]
			//if (enc2_temp<16) enc_dir=(enc_dir<<2) & 127; // faster for notes on first row

			potSource[counterVarB]=enc_dir;       // enter data into potsource
 8000ea0:	4b37      	ldr	r3, [pc, #220]	; (8000f80 <analoginputloopb+0x224>)
 8000ea2:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000ea6:	4b34      	ldr	r3, [pc, #208]	; (8000f78 <analoginputloopb+0x21c>)
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	b2c9      	uxtb	r1, r1
 8000eae:	4b33      	ldr	r3, [pc, #204]	; (8000f7c <analoginputloopb+0x220>)
 8000eb0:	5499      	strb	r1, [r3, r2]
					enc_dir=0;
 8000eb2:	4b33      	ldr	r3, [pc, #204]	; (8000f80 <analoginputloopb+0x224>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	801a      	strh	r2, [r3, #0]
			enc_tempB=enc_temp;
 8000eb8:	4b32      	ldr	r3, [pc, #200]	; (8000f84 <analoginputloopb+0x228>)
 8000eba:	881a      	ldrh	r2, [r3, #0]
 8000ebc:	4b34      	ldr	r3, [pc, #208]	; (8000f90 <analoginputloopb+0x234>)
 8000ebe:	801a      	strh	r2, [r3, #0]
			//if (enc2_dir>383) enc2_dir=383;

			//if  (enc2_temp>enc2_tempB)	 enc2_dir++;   // start settle timer , will do 2 times per turn always
			//if (enc2_temp<enc2_tempB)	 enc2_dir--;
			enc2_dir=enc2_temp; //temp to try source data
 8000ec0:	4b32      	ldr	r3, [pc, #200]	; (8000f8c <analoginputloopb+0x230>)
 8000ec2:	881a      	ldrh	r2, [r3, #0]
 8000ec4:	4b2b      	ldr	r3, [pc, #172]	; (8000f74 <analoginputloopb+0x218>)
 8000ec6:	801a      	strh	r2, [r3, #0]
		//	if (enc2_dir>127) menu_page[1]=127; else if (enc2_dir>255)   menu_page[1]=255;				else menu_page[1]=0;
		//	menu_page[1]= (enc2_dir >>7) <<7;

			menu_page[1]=enc2_dir&384;
 8000ec8:	4b2a      	ldr	r3, [pc, #168]	; (8000f74 <analoginputloopb+0x218>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	4b32      	ldr	r3, [pc, #200]	; (8000f9c <analoginputloopb+0x240>)
 8000ed4:	805a      	strh	r2, [r3, #2]


			//if (enc2_dir>255) {menu_page[1]=0;display_fill();}

					if ((enc2_temp>127) && (enc2_tempB<=127)) display_fill();    // need to optimize
 8000ed6:	4b2d      	ldr	r3, [pc, #180]	; (8000f8c <analoginputloopb+0x230>)
 8000ed8:	881b      	ldrh	r3, [r3, #0]
 8000eda:	2b7f      	cmp	r3, #127	; 0x7f
 8000edc:	d905      	bls.n	8000eea <analoginputloopb+0x18e>
 8000ede:	4b30      	ldr	r3, [pc, #192]	; (8000fa0 <analoginputloopb+0x244>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	2b7f      	cmp	r3, #127	; 0x7f
 8000ee4:	d801      	bhi.n	8000eea <analoginputloopb+0x18e>
 8000ee6:	f000 fa07 	bl	80012f8 <display_fill>
					if ((enc2_temp<=127) && (enc2_tempB>127)) display_fill();
 8000eea:	4b28      	ldr	r3, [pc, #160]	; (8000f8c <analoginputloopb+0x230>)
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	2b7f      	cmp	r3, #127	; 0x7f
 8000ef0:	d805      	bhi.n	8000efe <analoginputloopb+0x1a2>
 8000ef2:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <analoginputloopb+0x244>)
 8000ef4:	881b      	ldrh	r3, [r3, #0]
 8000ef6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ef8:	d901      	bls.n	8000efe <analoginputloopb+0x1a2>
 8000efa:	f000 f9fd 	bl	80012f8 <display_fill>
					if ((enc2_temp>255) && (enc2_tempB<=255)) display_fill();
 8000efe:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <analoginputloopb+0x230>)
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	2bff      	cmp	r3, #255	; 0xff
 8000f04:	d905      	bls.n	8000f12 <analoginputloopb+0x1b6>
 8000f06:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <analoginputloopb+0x244>)
 8000f08:	881b      	ldrh	r3, [r3, #0]
 8000f0a:	2bff      	cmp	r3, #255	; 0xff
 8000f0c:	d801      	bhi.n	8000f12 <analoginputloopb+0x1b6>
 8000f0e:	f000 f9f3 	bl	80012f8 <display_fill>
					if ((enc2_temp<=255) && (enc2_tempB>255)) display_fill();
 8000f12:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <analoginputloopb+0x230>)
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	2bff      	cmp	r3, #255	; 0xff
 8000f18:	d805      	bhi.n	8000f26 <analoginputloopb+0x1ca>
 8000f1a:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <analoginputloopb+0x244>)
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	2bff      	cmp	r3, #255	; 0xff
 8000f20:	d901      	bls.n	8000f26 <analoginputloopb+0x1ca>
 8000f22:	f000 f9e9 	bl	80012f8 <display_fill>
					if ((enc2_temp>383) && (enc2_tempB<=383)) display_fill();
 8000f26:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <analoginputloopb+0x230>)
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000f2e:	d306      	bcc.n	8000f3e <analoginputloopb+0x1e2>
 8000f30:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <analoginputloopb+0x244>)
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000f38:	d201      	bcs.n	8000f3e <analoginputloopb+0x1e2>
 8000f3a:	f000 f9dd 	bl	80012f8 <display_fill>
					//if ((enc2_temp<=383) && (enc2_tempB>383)) display_fill();
					//if ((enc2_temp<127) && (enc2_tempB>384)) display_fill();
					//if ((enc2_temp<=511) && (enc2_tempB<127)) display_fill();


					enc2_tempB=enc2_temp; // to effective as counter not getting reset
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <analoginputloopb+0x230>)
 8000f40:	881a      	ldrh	r2, [r3, #0]
 8000f42:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <analoginputloopb+0x244>)
 8000f44:	801a      	strh	r2, [r3, #0]


potValues[counterVarB]=(potSource[counterVarB]>>4) & 15 ;  // reduce values for now ,use original for others , slow count
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <analoginputloopb+0x21c>)
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <analoginputloopb+0x220>)
 8000f4e:	5c9b      	ldrb	r3, [r3, r2]
 8000f50:	4a09      	ldr	r2, [pc, #36]	; (8000f78 <analoginputloopb+0x21c>)
 8000f52:	8812      	ldrh	r2, [r2, #0]
 8000f54:	091b      	lsrs	r3, r3, #4
 8000f56:	b2d9      	uxtb	r1, r3
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <analoginputloopb+0x248>)
 8000f5a:	5499      	strb	r1, [r3, r2]

//potValues[counterVarB]=potSource[counterVarB] & 15 ;  // reduce values for now ,use original for others



}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20001d04 	.word	0x20001d04
 8000f68:	20000be4 	.word	0x20000be4
 8000f6c:	20000be5 	.word	0x20000be5
 8000f70:	0800966c 	.word	0x0800966c
 8000f74:	20001cf2 	.word	0x20001cf2
 8000f78:	20000be6 	.word	0x20000be6
 8000f7c:	20000a64 	.word	0x20000a64
 8000f80:	20001cf4 	.word	0x20001cf4
 8000f84:	20001cea 	.word	0x20001cea
 8000f88:	40000800 	.word	0x40000800
 8000f8c:	20001cee 	.word	0x20001cee
 8000f90:	20001cec 	.word	0x20001cec
 8000f94:	200006c4 	.word	0x200006c4
 8000f98:	20000774 	.word	0x20000774
 8000f9c:	20001d14 	.word	0x20001d14
 8000fa0:	20001cf0 	.word	0x20001cf0
 8000fa4:	200008e4 	.word	0x200008e4

08000fa8 <display_init>:
void display_init(void){
 8000fa8:	b5b0      	push	{r4, r5, r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0
	//uint8_t sp2_command=0xf8+(0<<1);


		 // uint16_t disp[]={  304,304,304,270,257,268,384,258,51,51,52,53,54,55,56,57,58,0};  // normal characters
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd
 8000fae:	4b64      	ldr	r3, [pc, #400]	; (8001140 <display_init+0x198>)
 8000fb0:	1d3c      	adds	r4, r7, #4
 8000fb2:	461d      	mov	r5, r3
 8000fb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fbc:	682b      	ldr	r3, [r5, #0]
 8000fbe:	8023      	strh	r3, [r4, #0]
		  if (spi_send==0){         // sets data byte
 8000fc0:	4b60      	ldr	r3, [pc, #384]	; (8001144 <display_init+0x19c>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f040 80b6 	bne.w	8001136 <display_init+0x18e>

/*if ((enc2_dir>63) && (menu_page[2]==0))  {init=4;menu_page[2]=1;}  //restart page draw for second page , might need home pos init
if  ((init==76) && (menu_page[2]==1)) menu_page[2]=2; //after drawing second page and finish
if ((enc2_dir<63) && (menu_page[2]==2))  {init=4;menu_page[2]=0;}
*/
switch(init){     //Remember every line advances +char on display ,,all this is mostly unneeded
 8000fca:	4b5f      	ldr	r3, [pc, #380]	; (8001148 <display_init+0x1a0>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	3b4d      	subs	r3, #77	; 0x4d
 8000fd0:	2b07      	cmp	r3, #7
 8000fd2:	d879      	bhi.n	80010c8 <display_init+0x120>
 8000fd4:	a201      	add	r2, pc, #4	; (adr r2, 8000fdc <display_init+0x34>)
 8000fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fda:	bf00      	nop
 8000fdc:	08000ffd 	.word	0x08000ffd
 8000fe0:	0800102d 	.word	0x0800102d
 8000fe4:	08001035 	.word	0x08001035
 8000fe8:	08001051 	.word	0x08001051
 8000fec:	08001065 	.word	0x08001065
 8000ff0:	08001073 	.word	0x08001073
 8000ff4:	08001087 	.word	0x08001087
 8000ff8:	0800109b 	.word	0x0800109b

case 77: spi_hold=384+(init_b>>1);init=init+((init_b&1)*2);break; // no delay ,jump to either blink sets
 8000ffc:	4b53      	ldr	r3, [pc, #332]	; (800114c <display_init+0x1a4>)
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	085b      	lsrs	r3, r3, #1
 8001002:	b29b      	uxth	r3, r3
 8001004:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001008:	b29a      	uxth	r2, r3
 800100a:	4b51      	ldr	r3, [pc, #324]	; (8001150 <display_init+0x1a8>)
 800100c:	801a      	strh	r2, [r3, #0]
 800100e:	4b4f      	ldr	r3, [pc, #316]	; (800114c <display_init+0x1a4>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	b2db      	uxtb	r3, r3
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b4a      	ldr	r3, [pc, #296]	; (8001148 <display_init+0x1a0>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	4413      	add	r3, r2
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4b48      	ldr	r3, [pc, #288]	; (8001148 <display_init+0x1a0>)
 8001028:	701a      	strb	r2, [r3, #0]
 800102a:	e05f      	b.n	80010ec <display_init+0x144>

case 78: spi_hold=10;break; //write one set then jump
 800102c:	4b48      	ldr	r3, [pc, #288]	; (8001150 <display_init+0x1a8>)
 800102e:	220a      	movs	r2, #10
 8001030:	801a      	strh	r2, [r3, #0]
 8001032:	e05b      	b.n	80010ec <display_init+0x144>
case 79: spi_hold=spell[(init_b&62)+1];init=81;break;
 8001034:	4b45      	ldr	r3, [pc, #276]	; (800114c <display_init+0x1a4>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800103c:	3301      	adds	r3, #1
 800103e:	4a45      	ldr	r2, [pc, #276]	; (8001154 <display_init+0x1ac>)
 8001040:	5cd3      	ldrb	r3, [r2, r3]
 8001042:	b29a      	uxth	r2, r3
 8001044:	4b42      	ldr	r3, [pc, #264]	; (8001150 <display_init+0x1a8>)
 8001046:	801a      	strh	r2, [r3, #0]
 8001048:	4b3f      	ldr	r3, [pc, #252]	; (8001148 <display_init+0x1a0>)
 800104a:	2251      	movs	r2, #81	; 0x51
 800104c:	701a      	strb	r2, [r3, #0]
 800104e:	e04d      	b.n	80010ec <display_init+0x144>
case 80: spi_hold=spell[init_b&62];break; // or write other set then jump
 8001050:	4b3e      	ldr	r3, [pc, #248]	; (800114c <display_init+0x1a4>)
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001058:	4a3e      	ldr	r2, [pc, #248]	; (8001154 <display_init+0x1ac>)
 800105a:	5cd3      	ldrb	r3, [r2, r3]
 800105c:	b29a      	uxth	r2, r3
 800105e:	4b3c      	ldr	r3, [pc, #240]	; (8001150 <display_init+0x1a8>)
 8001060:	801a      	strh	r2, [r3, #0]
 8001062:	e043      	b.n	80010ec <display_init+0x144>
case 81: spi_hold=10;init=81;break;
 8001064:	4b3a      	ldr	r3, [pc, #232]	; (8001150 <display_init+0x1a8>)
 8001066:	220a      	movs	r2, #10
 8001068:	801a      	strh	r2, [r3, #0]
 800106a:	4b37      	ldr	r3, [pc, #220]	; (8001148 <display_init+0x1a0>)
 800106c:	2251      	movs	r2, #81	; 0x51
 800106e:	701a      	strb	r2, [r3, #0]
 8001070:	e03c      	b.n	80010ec <display_init+0x144>


case 82: spi_hold=384+(init_b>>1);break;  // finish writes
 8001072:	4b36      	ldr	r3, [pc, #216]	; (800114c <display_init+0x1a4>)
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	085b      	lsrs	r3, r3, #1
 8001078:	b29b      	uxth	r3, r3
 800107a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800107e:	b29a      	uxth	r2, r3
 8001080:	4b33      	ldr	r3, [pc, #204]	; (8001150 <display_init+0x1a8>)
 8001082:	801a      	strh	r2, [r3, #0]
 8001084:	e032      	b.n	80010ec <display_init+0x144>
case 83: spi_hold=spell[init_b&62];break;
 8001086:	4b31      	ldr	r3, [pc, #196]	; (800114c <display_init+0x1a4>)
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800108e:	4a31      	ldr	r2, [pc, #196]	; (8001154 <display_init+0x1ac>)
 8001090:	5cd3      	ldrb	r3, [r2, r3]
 8001092:	b29a      	uxth	r2, r3
 8001094:	4b2e      	ldr	r3, [pc, #184]	; (8001150 <display_init+0x1a8>)
 8001096:	801a      	strh	r2, [r3, #0]
 8001098:	e028      	b.n	80010ec <display_init+0x144>
case 84 : spi_hold=spell[(init_b&62)+1];init_b=cursor_menu[2]&63;displayBuffer ();init=76; break; //update cursor and displaybuffer
 800109a:	4b2c      	ldr	r3, [pc, #176]	; (800114c <display_init+0x1a4>)
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80010a2:	3301      	adds	r3, #1
 80010a4:	4a2b      	ldr	r2, [pc, #172]	; (8001154 <display_init+0x1ac>)
 80010a6:	5cd3      	ldrb	r3, [r2, r3]
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	4b29      	ldr	r3, [pc, #164]	; (8001150 <display_init+0x1a8>)
 80010ac:	801a      	strh	r2, [r3, #0]
 80010ae:	4b2a      	ldr	r3, [pc, #168]	; (8001158 <display_init+0x1b0>)
 80010b0:	889b      	ldrh	r3, [r3, #4]
 80010b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	4b24      	ldr	r3, [pc, #144]	; (800114c <display_init+0x1a4>)
 80010ba:	801a      	strh	r2, [r3, #0]
 80010bc:	f000 f948 	bl	8001350 <displayBuffer>
 80010c0:	4b21      	ldr	r3, [pc, #132]	; (8001148 <display_init+0x1a0>)
 80010c2:	224c      	movs	r2, #76	; 0x4c
 80010c4:	701a      	strb	r2, [r3, #0]
 80010c6:	e011      	b.n	80010ec <display_init+0x144>
default : init_b=init-6;displayBuffer ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 80010c8:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <display_init+0x1a0>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	3b06      	subs	r3, #6
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	4b1e      	ldr	r3, [pc, #120]	; (800114c <display_init+0x1a4>)
 80010d4:	801a      	strh	r2, [r3, #0]
 80010d6:	f000 f93b 	bl	8001350 <displayBuffer>
 80010da:	4b1c      	ldr	r3, [pc, #112]	; (800114c <display_init+0x1a4>)
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	461a      	mov	r2, r3
 80010e0:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <display_init+0x1ac>)
 80010e2:	5c9b      	ldrb	r3, [r3, r2]
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <display_init+0x1a8>)
 80010e8:	801a      	strh	r2, [r3, #0]
 80010ea:	bf00      	nop
}


if (init<6)	{HAL_Delay(30);spi_hold=disp[init] ;  init_b=cursor_menu[2]; } //delay needs to go
 80010ec:	4b16      	ldr	r3, [pc, #88]	; (8001148 <display_init+0x1a0>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b05      	cmp	r3, #5
 80010f2:	d80f      	bhi.n	8001114 <display_init+0x16c>
 80010f4:	201e      	movs	r0, #30
 80010f6:	f002 fde7 	bl	8003cc8 <HAL_Delay>
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <display_init+0x1a0>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	3328      	adds	r3, #40	; 0x28
 8001102:	443b      	add	r3, r7
 8001104:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <display_init+0x1a8>)
 800110a:	801a      	strh	r2, [r3, #0]
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <display_init+0x1b0>)
 800110e:	889a      	ldrh	r2, [r3, #4]
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <display_init+0x1a4>)
 8001112:	801a      	strh	r2, [r3, #0]

init++;   // after 6 it quits the rest is not needed
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <display_init+0x1a0>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	3301      	adds	r3, #1
 800111a:	b2da      	uxtb	r2, r3
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <display_init+0x1a0>)
 800111e:	701a      	strb	r2, [r3, #0]
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <display_init+0x19c>)
 8001122:	2201      	movs	r2, #1
 8001124:	701a      	strb	r2, [r3, #0]
 8001126:	f7ff fda7 	bl	8000c78 <SPI_command>
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <display_init+0x19c>)
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <display_init+0x1b4>)
 8001132:	2200      	movs	r2, #0
 8001134:	801a      	strh	r2, [r3, #0]
		  //if ((bsrr_counter==49) && (spi_send==2)) {bsrr_counter=0; spi_send=0;}
		  if (bsrr_counter==49)  {bsrr_counter=0; spi_send=0;}
		 }
*/

}
 8001136:	bf00      	nop
 8001138:	3728      	adds	r7, #40	; 0x28
 800113a:	46bd      	mov	sp, r7
 800113c:	bdb0      	pop	{r4, r5, r7, pc}
 800113e:	bf00      	nop
 8001140:	08009580 	.word	0x08009580
 8001144:	20001d00 	.word	0x20001d00
 8001148:	20001d01 	.word	0x20001d01
 800114c:	20001d02 	.word	0x20001d02
 8001150:	20001cfe 	.word	0x20001cfe
 8001154:	2000010c 	.word	0x2000010c
 8001158:	20001d04 	.word	0x20001d04
 800115c:	20001cfa 	.word	0x20001cfa

08001160 <display_update>:



}

void display_update(void){				//spi display updater code , all gfx , works pretty ok n doesn't need to be running always 18x 128 ,constant scanning
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0

	uint8_t spi_store[5];

switch (gfx_skip) { // 1-17  one row
 8001166:	4b5d      	ldr	r3, [pc, #372]	; (80012dc <display_update+0x17c>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b03      	cmp	r3, #3
 800116c:	d035      	beq.n	80011da <display_update+0x7a>
 800116e:	2b03      	cmp	r3, #3
 8001170:	dc3d      	bgt.n	80011ee <display_update+0x8e>
 8001172:	2b01      	cmp	r3, #1
 8001174:	d002      	beq.n	800117c <display_update+0x1c>
 8001176:	2b02      	cmp	r3, #2
 8001178:	d020      	beq.n	80011bc <display_update+0x5c>
 800117a:	e038      	b.n	80011ee <display_update+0x8e>


case 1 : {spi_hold=((gfx_counter[0])&31)+384;gfx_counter[4]=(gfx_counter[0]>>5);  gfx_counter[0]=(gfx_counter[0]+1)&63 ;gfx_skip++;break ;}  // count up positions
 800117c:	4b58      	ldr	r3, [pc, #352]	; (80012e0 <display_update+0x180>)
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	f003 031f 	and.w	r3, r3, #31
 8001184:	b29b      	uxth	r3, r3
 8001186:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800118a:	b29a      	uxth	r2, r3
 800118c:	4b55      	ldr	r3, [pc, #340]	; (80012e4 <display_update+0x184>)
 800118e:	801a      	strh	r2, [r3, #0]
 8001190:	4b53      	ldr	r3, [pc, #332]	; (80012e0 <display_update+0x180>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	095b      	lsrs	r3, r3, #5
 8001196:	b29a      	uxth	r2, r3
 8001198:	4b51      	ldr	r3, [pc, #324]	; (80012e0 <display_update+0x180>)
 800119a:	811a      	strh	r2, [r3, #8]
 800119c:	4b50      	ldr	r3, [pc, #320]	; (80012e0 <display_update+0x180>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	3301      	adds	r3, #1
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	4b4d      	ldr	r3, [pc, #308]	; (80012e0 <display_update+0x180>)
 80011ac:	801a      	strh	r2, [r3, #0]
 80011ae:	4b4b      	ldr	r3, [pc, #300]	; (80012dc <display_update+0x17c>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	3301      	adds	r3, #1
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4b49      	ldr	r3, [pc, #292]	; (80012dc <display_update+0x17c>)
 80011b8:	701a      	strb	r2, [r3, #0]
 80011ba:	e028      	b.n	800120e <display_update+0xae>
case 2  : {	spi_hold=384+(gfx_counter[4]*8);gfx_skip++;break ;  }
 80011bc:	4b48      	ldr	r3, [pc, #288]	; (80012e0 <display_update+0x180>)
 80011be:	891b      	ldrh	r3, [r3, #8]
 80011c0:	3330      	adds	r3, #48	; 0x30
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	4b46      	ldr	r3, [pc, #280]	; (80012e4 <display_update+0x184>)
 80011ca:	801a      	strh	r2, [r3, #0]
 80011cc:	4b43      	ldr	r3, [pc, #268]	; (80012dc <display_update+0x17c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	3301      	adds	r3, #1
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	4b41      	ldr	r3, [pc, #260]	; (80012dc <display_update+0x17c>)
 80011d6:	701a      	strb	r2, [r3, #0]
 80011d8:	e019      	b.n	800120e <display_update+0xae>
case 3   : gfx_counter[3]=0; gfx_skip++;break;
 80011da:	4b41      	ldr	r3, [pc, #260]	; (80012e0 <display_update+0x180>)
 80011dc:	2200      	movs	r2, #0
 80011de:	80da      	strh	r2, [r3, #6]
 80011e0:	4b3e      	ldr	r3, [pc, #248]	; (80012dc <display_update+0x17c>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	3301      	adds	r3, #1
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	4b3c      	ldr	r3, [pc, #240]	; (80012dc <display_update+0x17c>)
 80011ea:	701a      	strb	r2, [r3, #0]
 80011ec:	e00f      	b.n	800120e <display_update+0xae>
//case 18 : gfx_counter[2]=(gfx_counter[2]+1) &63; gfx_counter[3]=0;gfx_skip=1;break;  //not ideal
default :  gfx_counter[3]=(gfx_counter[3]+1)&15;gfx_skip++;break;
 80011ee:	4b3c      	ldr	r3, [pc, #240]	; (80012e0 <display_update+0x180>)
 80011f0:	88db      	ldrh	r3, [r3, #6]
 80011f2:	3301      	adds	r3, #1
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	4b38      	ldr	r3, [pc, #224]	; (80012e0 <display_update+0x180>)
 80011fe:	80da      	strh	r2, [r3, #6]
 8001200:	4b36      	ldr	r3, [pc, #216]	; (80012dc <display_update+0x17c>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	3301      	adds	r3, #1
 8001206:	b2da      	uxtb	r2, r3
 8001208:	4b34      	ldr	r3, [pc, #208]	; (80012dc <display_update+0x17c>)
 800120a:	701a      	strb	r2, [r3, #0]
 800120c:	bf00      	nop

}


if ((gfx_skip==2) || (gfx_skip==3) || (gfx_skip==1)) spi_hold=spi_hold; else spi_hold=gfx_ram[gfx_counter[2]] [gfx_counter[3]] ; // write command or data
 800120e:	4b33      	ldr	r3, [pc, #204]	; (80012dc <display_update+0x17c>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b02      	cmp	r3, #2
 8001214:	d007      	beq.n	8001226 <display_update+0xc6>
 8001216:	4b31      	ldr	r3, [pc, #196]	; (80012dc <display_update+0x17c>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b03      	cmp	r3, #3
 800121c:	d003      	beq.n	8001226 <display_update+0xc6>
 800121e:	4b2f      	ldr	r3, [pc, #188]	; (80012dc <display_update+0x17c>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d104      	bne.n	8001230 <display_update+0xd0>
 8001226:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <display_update+0x184>)
 8001228:	881a      	ldrh	r2, [r3, #0]
 800122a:	4b2e      	ldr	r3, [pc, #184]	; (80012e4 <display_update+0x184>)
 800122c:	801a      	strh	r2, [r3, #0]
 800122e:	e00d      	b.n	800124c <display_update+0xec>
 8001230:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <display_update+0x180>)
 8001232:	889b      	ldrh	r3, [r3, #4]
 8001234:	4618      	mov	r0, r3
 8001236:	4b2a      	ldr	r3, [pc, #168]	; (80012e0 <display_update+0x180>)
 8001238:	88db      	ldrh	r3, [r3, #6]
 800123a:	4619      	mov	r1, r3
 800123c:	4a2a      	ldr	r2, [pc, #168]	; (80012e8 <display_update+0x188>)
 800123e:	0103      	lsls	r3, r0, #4
 8001240:	4413      	add	r3, r2
 8001242:	440b      	add	r3, r1
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	b29a      	uxth	r2, r3
 8001248:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <display_update+0x184>)
 800124a:	801a      	strh	r2, [r3, #0]

if (gfx_skip==19)  {gfx_counter[2]=(gfx_counter[2]+1) &63; gfx_counter[3]=0;gfx_skip=1;}   // fixed last doubled char
 800124c:	4b23      	ldr	r3, [pc, #140]	; (80012dc <display_update+0x17c>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b13      	cmp	r3, #19
 8001252:	d10e      	bne.n	8001272 <display_update+0x112>
 8001254:	4b22      	ldr	r3, [pc, #136]	; (80012e0 <display_update+0x180>)
 8001256:	889b      	ldrh	r3, [r3, #4]
 8001258:	3301      	adds	r3, #1
 800125a:	b29b      	uxth	r3, r3
 800125c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001260:	b29a      	uxth	r2, r3
 8001262:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <display_update+0x180>)
 8001264:	809a      	strh	r2, [r3, #4]
 8001266:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <display_update+0x180>)
 8001268:	2200      	movs	r2, #0
 800126a:	80da      	strh	r2, [r3, #6]
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <display_update+0x17c>)
 800126e:	2201      	movs	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]

		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8001272:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <display_update+0x184>)
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	0a1b      	lsrs	r3, r3, #8
 8001278:	b29b      	uxth	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <display_update+0x126>
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <display_update+0x18c>)
 8001280:	22f8      	movs	r2, #248	; 0xf8
 8001282:	701a      	strb	r2, [r3, #0]
 8001284:	e002      	b.n	800128c <display_update+0x12c>
 8001286:	4b19      	ldr	r3, [pc, #100]	; (80012ec <display_update+0x18c>)
 8001288:	22fa      	movs	r2, #250	; 0xfa
 800128a:	701a      	strb	r2, [r3, #0]

		spi_store[0]=spi_byte&255;
 800128c:	4b17      	ldr	r3, [pc, #92]	; (80012ec <display_update+0x18c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	703b      	strb	r3, [r7, #0]
		spi_store[1]=((spi_hold>>4)<<4)&255;
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <display_update+0x184>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	091b      	lsrs	r3, r3, #4
 8001298:	b29b      	uxth	r3, r3
 800129a:	011b      	lsls	r3, r3, #4
 800129c:	b2db      	uxtb	r3, r3
 800129e:	707b      	strb	r3, [r7, #1]
		spi_store[2]=((spi_hold&15)<<4)&255;
 80012a0:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <display_update+0x184>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	011b      	lsls	r3, r3, #4
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	70bb      	strb	r3, [r7, #2]

	// send this to spi for now
			HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3, 100);  // working good ,blocking
 80012aa:	4639      	mov	r1, r7
 80012ac:	2364      	movs	r3, #100	; 0x64
 80012ae:	2203      	movs	r2, #3
 80012b0:	480f      	ldr	r0, [pc, #60]	; (80012f0 <display_update+0x190>)
 80012b2:	f005 fd50 	bl	8006d56 <HAL_SPI_Transmit>


disp_end=gfx_skip+gfx_counter[2]+gfx_counter[3];			// vsynch for displaybuffer
 80012b6:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <display_update+0x180>)
 80012b8:	889b      	ldrh	r3, [r3, #4]
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	4b07      	ldr	r3, [pc, #28]	; (80012dc <display_update+0x17c>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	4413      	add	r3, r2
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <display_update+0x180>)
 80012c6:	88db      	ldrh	r3, [r3, #6]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	4413      	add	r3, r2
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <display_update+0x194>)
 80012d0:	701a      	strb	r2, [r3, #0]


}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200006c0 	.word	0x200006c0
 80012e0:	200025ec 	.word	0x200025ec
 80012e4:	20001cfe 	.word	0x20001cfe
 80012e8:	200021b4 	.word	0x200021b4
 80012ec:	20001cfc 	.word	0x20001cfc
 80012f0:	20002afc 	.word	0x20002afc
 80012f4:	200025fa 	.word	0x200025fa

080012f8 <display_fill>:
void display_fill(void)  {     // full update of gfx memory
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
loop_counter3=1;
 80012fc:	4b10      	ldr	r3, [pc, #64]	; (8001340 <display_fill+0x48>)
 80012fe:	2201      	movs	r2, #1
 8001300:	701a      	strb	r2, [r3, #0]
for (n=0;n<2048;n++)	{ //fills up gfx ram or not
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <display_fill+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	801a      	strh	r2, [r3, #0]
 8001308:	e011      	b.n	800132e <display_fill+0x36>

enc2_dir=(n>>4)+menu_page[1]; 												// 0-128         +      0,127,255,
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <display_fill+0x4c>)
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	091b      	lsrs	r3, r3, #4
 8001310:	b29a      	uxth	r2, r3
 8001312:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <display_fill+0x50>)
 8001314:	885b      	ldrh	r3, [r3, #2]
 8001316:	4413      	add	r3, r2
 8001318:	b29a      	uxth	r2, r3
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <display_fill+0x54>)
 800131c:	801a      	strh	r2, [r3, #0]

displayBuffer();
 800131e:	f000 f817 	bl	8001350 <displayBuffer>
for (n=0;n<2048;n++)	{ //fills up gfx ram or not
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <display_fill+0x4c>)
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	3301      	adds	r3, #1
 8001328:	b29a      	uxth	r2, r3
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <display_fill+0x4c>)
 800132c:	801a      	strh	r2, [r3, #0]
 800132e:	4b05      	ldr	r3, [pc, #20]	; (8001344 <display_fill+0x4c>)
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001336:	d3e8      	bcc.n	800130a <display_fill+0x12>
}
//enc2_dir=menu_page[1];  // end clean
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200025fb 	.word	0x200025fb
 8001344:	20000c1a 	.word	0x20000c1a
 8001348:	20001d14 	.word	0x20001d14
 800134c:	20001cf2 	.word	0x20001cf2

08001350 <displayBuffer>:



void displayBuffer (void){        //  in a constant state of flux
 8001350:	b4b0      	push	{r4, r5, r7}
 8001352:	b089      	sub	sp, #36	; 0x24
 8001354:	af00      	add	r7, sp, #0

	if (disp_stepper==0) init_b=enc2_dir; else init_b=111+disp_stepper;  // fetch values for last line or cursor
 8001356:	4b39      	ldr	r3, [pc, #228]	; (800143c <displayBuffer+0xec>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d104      	bne.n	8001368 <displayBuffer+0x18>
 800135e:	4b38      	ldr	r3, [pc, #224]	; (8001440 <displayBuffer+0xf0>)
 8001360:	881a      	ldrh	r2, [r3, #0]
 8001362:	4b38      	ldr	r3, [pc, #224]	; (8001444 <displayBuffer+0xf4>)
 8001364:	801a      	strh	r2, [r3, #0]
 8001366:	e006      	b.n	8001376 <displayBuffer+0x26>
 8001368:	4b34      	ldr	r3, [pc, #208]	; (800143c <displayBuffer+0xec>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	b29b      	uxth	r3, r3
 800136e:	336f      	adds	r3, #111	; 0x6f
 8001370:	b29a      	uxth	r2, r3
 8001372:	4b34      	ldr	r3, [pc, #208]	; (8001444 <displayBuffer+0xf4>)
 8001374:	801a      	strh	r2, [r3, #0]

	uint8_t d_count;
uint16_t init_x=((init_b>>4)<<3);    // normal x8 , try other 64 x16
 8001376:	4b33      	ldr	r3, [pc, #204]	; (8001444 <displayBuffer+0xf4>)
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	091b      	lsrs	r3, r3, #4
 800137c:	b29b      	uxth	r3, r3
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	83bb      	strh	r3, [r7, #28]
uint8_t init_x2=init_x&63;  // 0-64  character address in gfx
 8001382:	8bbb      	ldrh	r3, [r7, #28]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800138a:	76fb      	strb	r3, [r7, #27]
uint8_t init_y=init_b&15;
 800138c:	4b2d      	ldr	r3, [pc, #180]	; (8001444 <displayBuffer+0xf4>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	76bb      	strb	r3, [r7, #26]
uint16_t store_x;
uint8_t lfotarget_menu[20]={0,40,16,8,40,40,48,56,64,72,0,0,0,0,0,0,0,0,0,0};  // keep lfo target list here for now *8
 8001398:	4b2b      	ldr	r3, [pc, #172]	; (8001448 <displayBuffer+0xf8>)
 800139a:	1d3c      	adds	r4, r7, #4
 800139c:	461d      	mov	r5, r3
 800139e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a2:	682b      	ldr	r3, [r5, #0]
 80013a4:	6023      	str	r3, [r4, #0]
// just to point the lfo number



//if (enc2_dir<128){
	if (disp_stepper==0) { store_c= disp_lut [init_b>>4]  [init_y] ; feedback_pointer=((enc2_dir>>4)<<3)&127; feedback_line[10]=((enc2_dir&15)>>1)+48;  // pointer and data , runs at every character drawn at cursor
 80013a6:	4b25      	ldr	r3, [pc, #148]	; (800143c <displayBuffer+0xec>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d17a      	bne.n	80014a4 <displayBuffer+0x154>
 80013ae:	4b25      	ldr	r3, [pc, #148]	; (8001444 <displayBuffer+0xf4>)
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	091b      	lsrs	r3, r3, #4
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	461a      	mov	r2, r3
 80013b8:	7ebb      	ldrb	r3, [r7, #26]
 80013ba:	4924      	ldr	r1, [pc, #144]	; (800144c <displayBuffer+0xfc>)
 80013bc:	0112      	lsls	r2, r2, #4
 80013be:	4413      	add	r3, r2
 80013c0:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80013c4:	4b22      	ldr	r3, [pc, #136]	; (8001450 <displayBuffer+0x100>)
 80013c6:	801a      	strh	r2, [r3, #0]
 80013c8:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <displayBuffer+0xf0>)
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	091b      	lsrs	r3, r3, #4
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013d8:	b29a      	uxth	r2, r3
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <displayBuffer+0x104>)
 80013dc:	801a      	strh	r2, [r3, #0]
 80013de:	4b18      	ldr	r3, [pc, #96]	; (8001440 <displayBuffer+0xf0>)
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	105b      	asrs	r3, r3, #1
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	3330      	adds	r3, #48	; 0x30
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	4b19      	ldr	r3, [pc, #100]	; (8001458 <displayBuffer+0x108>)
 80013f2:	829a      	strh	r2, [r3, #20]


	menulength = sizeof(menu_items) / sizeof(menu_items[feedback_pointer]);  // get length of data on location
 80013f4:	4b19      	ldr	r3, [pc, #100]	; (800145c <displayBuffer+0x10c>)
 80013f6:	2235      	movs	r2, #53	; 0x35
 80013f8:	701a      	strb	r2, [r3, #0]

	for (i = 0; i < 56; i++)
 80013fa:	4b19      	ldr	r3, [pc, #100]	; (8001460 <displayBuffer+0x110>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	801a      	strh	r2, [r3, #0]
 8001400:	e014      	b.n	800142c <displayBuffer+0xdc>
		{ if (menu_loc[i]==store_c){menu_locA=i;break;}    // gets disp_lut number that points in menu_items
 8001402:	4b17      	ldr	r3, [pc, #92]	; (8001460 <displayBuffer+0x110>)
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	4b16      	ldr	r3, [pc, #88]	; (8001464 <displayBuffer+0x114>)
 800140a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <displayBuffer+0x100>)
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	429a      	cmp	r2, r3
 8001414:	d104      	bne.n	8001420 <displayBuffer+0xd0>
 8001416:	4b12      	ldr	r3, [pc, #72]	; (8001460 <displayBuffer+0x110>)
 8001418:	881a      	ldrh	r2, [r3, #0]
 800141a:	4b13      	ldr	r3, [pc, #76]	; (8001468 <displayBuffer+0x118>)
 800141c:	801a      	strh	r2, [r3, #0]
 800141e:	e009      	b.n	8001434 <displayBuffer+0xe4>
	for (i = 0; i < 56; i++)
 8001420:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <displayBuffer+0x110>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	3301      	adds	r3, #1
 8001426:	b29a      	uxth	r2, r3
 8001428:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <displayBuffer+0x110>)
 800142a:	801a      	strh	r2, [r3, #0]
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <displayBuffer+0x110>)
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	2b37      	cmp	r3, #55	; 0x37
 8001432:	d9e6      	bls.n	8001402 <displayBuffer+0xb2>

		}

	for (i = 0; i < menulength; i++)
 8001434:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <displayBuffer+0x110>)
 8001436:	2200      	movs	r2, #0
 8001438:	801a      	strh	r2, [r3, #0]
 800143a:	e02c      	b.n	8001496 <displayBuffer+0x146>
 800143c:	200006e5 	.word	0x200006e5
 8001440:	20001cf2 	.word	0x20001cf2
 8001444:	20001d02 	.word	0x20001d02
 8001448:	080095a4 	.word	0x080095a4
 800144c:	0800966c 	.word	0x0800966c
 8001450:	20000c18 	.word	0x20000c18
 8001454:	200008dc 	.word	0x200008dc
 8001458:	20000000 	.word	0x20000000
 800145c:	200008e0 	.word	0x200008e0
 8001460:	20000c3c 	.word	0x20000c3c
 8001464:	08009a6c 	.word	0x08009a6c
 8001468:	200008de 	.word	0x200008de
	{ menulist_hold[i+1]=menu_items[menu_locA] [i];
 800146c:	4b84      	ldr	r3, [pc, #528]	; (8001680 <displayBuffer+0x330>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	4b84      	ldr	r3, [pc, #528]	; (8001684 <displayBuffer+0x334>)
 8001474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001478:	4a83      	ldr	r2, [pc, #524]	; (8001688 <displayBuffer+0x338>)
 800147a:	8812      	ldrh	r2, [r2, #0]
 800147c:	441a      	add	r2, r3
 800147e:	4b82      	ldr	r3, [pc, #520]	; (8001688 <displayBuffer+0x338>)
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	3301      	adds	r3, #1
 8001484:	7811      	ldrb	r1, [r2, #0]
 8001486:	4a81      	ldr	r2, [pc, #516]	; (800168c <displayBuffer+0x33c>)
 8001488:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < menulength; i++)
 800148a:	4b7f      	ldr	r3, [pc, #508]	; (8001688 <displayBuffer+0x338>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	3301      	adds	r3, #1
 8001490:	b29a      	uxth	r2, r3
 8001492:	4b7d      	ldr	r3, [pc, #500]	; (8001688 <displayBuffer+0x338>)
 8001494:	801a      	strh	r2, [r3, #0]
 8001496:	4b7e      	ldr	r3, [pc, #504]	; (8001690 <displayBuffer+0x340>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	b29a      	uxth	r2, r3
 800149c:	4b7a      	ldr	r3, [pc, #488]	; (8001688 <displayBuffer+0x338>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d8e3      	bhi.n	800146c <displayBuffer+0x11c>

	}   // grab item , this works but slower

	}

	if  ((disp_stepper<11) && (disp_stepper))   {      // 0-9 chars of line 8 , overhead is ok
 80014a4:	4b7b      	ldr	r3, [pc, #492]	; (8001694 <displayBuffer+0x344>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b0a      	cmp	r3, #10
 80014aa:	d817      	bhi.n	80014dc <displayBuffer+0x18c>
 80014ac:	4b79      	ldr	r3, [pc, #484]	; (8001694 <displayBuffer+0x344>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d013      	beq.n	80014dc <displayBuffer+0x18c>

//{	feedback_line[disp_stepper]=menuList[disp_stepper+feedback_pointer];  // feedback data info standard , per character 0-16

		feedback_line[disp_stepper]=menulist_hold[disp_stepper];  // feedback data modified 0-16
 80014b4:	4b77      	ldr	r3, [pc, #476]	; (8001694 <displayBuffer+0x344>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b74      	ldr	r3, [pc, #464]	; (800168c <displayBuffer+0x33c>)
 80014bc:	5c99      	ldrb	r1, [r3, r2]
 80014be:	4b75      	ldr	r3, [pc, #468]	; (8001694 <displayBuffer+0x344>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	461a      	mov	r2, r3
 80014c4:	b289      	uxth	r1, r1
 80014c6:	4b74      	ldr	r3, [pc, #464]	; (8001698 <displayBuffer+0x348>)
 80014c8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

store_c=feedback_line[disp_stepper];//gets potvalues pointer from menus or feedback line , per character
 80014cc:	4b71      	ldr	r3, [pc, #452]	; (8001694 <displayBuffer+0x344>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b71      	ldr	r3, [pc, #452]	; (8001698 <displayBuffer+0x348>)
 80014d4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80014d8:	4b70      	ldr	r3, [pc, #448]	; (800169c <displayBuffer+0x34c>)
 80014da:	801a      	strh	r2, [r3, #0]
	}

if (disp_stepper>10) store_c=feedback_line[disp_stepper];  /// just the lcd out  values at end of line 8
 80014dc:	4b6d      	ldr	r3, [pc, #436]	; (8001694 <displayBuffer+0x344>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b0a      	cmp	r3, #10
 80014e2:	d907      	bls.n	80014f4 <displayBuffer+0x1a4>
 80014e4:	4b6b      	ldr	r3, [pc, #428]	; (8001694 <displayBuffer+0x344>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b6b      	ldr	r3, [pc, #428]	; (8001698 <displayBuffer+0x348>)
 80014ec:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80014f0:	4b6a      	ldr	r3, [pc, #424]	; (800169c <displayBuffer+0x34c>)
 80014f2:	801a      	strh	r2, [r3, #0]


	// all this can be simplified
	 if (store_c==64) store_c=47;  //EMPTY SPACE
 80014f4:	4b69      	ldr	r3, [pc, #420]	; (800169c <displayBuffer+0x34c>)
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	2b40      	cmp	r3, #64	; 0x40
 80014fa:	d102      	bne.n	8001502 <displayBuffer+0x1b2>
 80014fc:	4b67      	ldr	r3, [pc, #412]	; (800169c <displayBuffer+0x34c>)
 80014fe:	222f      	movs	r2, #47	; 0x2f
 8001500:	801a      	strh	r2, [r3, #0]
	if ((store_c>127)&& (store_c<255))  {lcd_out3=potSource[store_c-128] ;     store_c= potValues[store_c&127]+48;															}		// NORMAL POTVALUES 0-127
 8001502:	4b66      	ldr	r3, [pc, #408]	; (800169c <displayBuffer+0x34c>)
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	2b7f      	cmp	r3, #127	; 0x7f
 8001508:	d916      	bls.n	8001538 <displayBuffer+0x1e8>
 800150a:	4b64      	ldr	r3, [pc, #400]	; (800169c <displayBuffer+0x34c>)
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	2bfe      	cmp	r3, #254	; 0xfe
 8001510:	d812      	bhi.n	8001538 <displayBuffer+0x1e8>
 8001512:	4b62      	ldr	r3, [pc, #392]	; (800169c <displayBuffer+0x34c>)
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	3b80      	subs	r3, #128	; 0x80
 8001518:	4a61      	ldr	r2, [pc, #388]	; (80016a0 <displayBuffer+0x350>)
 800151a:	5cd3      	ldrb	r3, [r2, r3]
 800151c:	b29a      	uxth	r2, r3
 800151e:	4b61      	ldr	r3, [pc, #388]	; (80016a4 <displayBuffer+0x354>)
 8001520:	801a      	strh	r2, [r3, #0]
 8001522:	4b5e      	ldr	r3, [pc, #376]	; (800169c <displayBuffer+0x34c>)
 8001524:	881b      	ldrh	r3, [r3, #0]
 8001526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800152a:	4a5f      	ldr	r2, [pc, #380]	; (80016a8 <displayBuffer+0x358>)
 800152c:	5cd3      	ldrb	r3, [r2, r3]
 800152e:	b29b      	uxth	r3, r3
 8001530:	3330      	adds	r3, #48	; 0x30
 8001532:	b29a      	uxth	r2, r3
 8001534:	4b59      	ldr	r3, [pc, #356]	; (800169c <displayBuffer+0x34c>)
 8001536:	801a      	strh	r2, [r3, #0]
	if ((store_c>254)	&& (store_c<384)) 											{lcd_out3=potSource[store_c-128] ;store_c= potValues[store_c-128]+48;}  // POTVALUES 128+
 8001538:	4b58      	ldr	r3, [pc, #352]	; (800169c <displayBuffer+0x34c>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	2bfe      	cmp	r3, #254	; 0xfe
 800153e:	d916      	bls.n	800156e <displayBuffer+0x21e>
 8001540:	4b56      	ldr	r3, [pc, #344]	; (800169c <displayBuffer+0x34c>)
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8001548:	d211      	bcs.n	800156e <displayBuffer+0x21e>
 800154a:	4b54      	ldr	r3, [pc, #336]	; (800169c <displayBuffer+0x34c>)
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	3b80      	subs	r3, #128	; 0x80
 8001550:	4a53      	ldr	r2, [pc, #332]	; (80016a0 <displayBuffer+0x350>)
 8001552:	5cd3      	ldrb	r3, [r2, r3]
 8001554:	b29a      	uxth	r2, r3
 8001556:	4b53      	ldr	r3, [pc, #332]	; (80016a4 <displayBuffer+0x354>)
 8001558:	801a      	strh	r2, [r3, #0]
 800155a:	4b50      	ldr	r3, [pc, #320]	; (800169c <displayBuffer+0x34c>)
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	3b80      	subs	r3, #128	; 0x80
 8001560:	4a51      	ldr	r2, [pc, #324]	; (80016a8 <displayBuffer+0x358>)
 8001562:	5cd3      	ldrb	r3, [r2, r3]
 8001564:	b29b      	uxth	r3, r3
 8001566:	3330      	adds	r3, #48	; 0x30
 8001568:	b29a      	uxth	r2, r3
 800156a:	4b4c      	ldr	r3, [pc, #304]	; (800169c <displayBuffer+0x34c>)
 800156c:	801a      	strh	r2, [r3, #0]
//	if ((store_c>127)	&& (store_c<384)) 	{store_c= potValues[store_c&127]+48;}		// NORMAL POTVALUES
	if (store_c>511)		{store_c=store_c&127;			store_c= menuList2		[     (lfotarget_menu[   ((store_c>>3))  ])	+(store_c&7)]						; } // VARIABLE MENU ITEMS CHAR LUT
 800156e:	4b4b      	ldr	r3, [pc, #300]	; (800169c <displayBuffer+0x34c>)
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001576:	d319      	bcc.n	80015ac <displayBuffer+0x25c>
 8001578:	4b48      	ldr	r3, [pc, #288]	; (800169c <displayBuffer+0x34c>)
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001580:	b29a      	uxth	r2, r3
 8001582:	4b46      	ldr	r3, [pc, #280]	; (800169c <displayBuffer+0x34c>)
 8001584:	801a      	strh	r2, [r3, #0]
 8001586:	4b45      	ldr	r3, [pc, #276]	; (800169c <displayBuffer+0x34c>)
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	08db      	lsrs	r3, r3, #3
 800158c:	b29b      	uxth	r3, r3
 800158e:	3320      	adds	r3, #32
 8001590:	443b      	add	r3, r7
 8001592:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001596:	461a      	mov	r2, r3
 8001598:	4b40      	ldr	r3, [pc, #256]	; (800169c <displayBuffer+0x34c>)
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	4413      	add	r3, r2
 80015a2:	4a42      	ldr	r2, [pc, #264]	; (80016ac <displayBuffer+0x35c>)
 80015a4:	5cd3      	ldrb	r3, [r2, r3]
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	4b3c      	ldr	r3, [pc, #240]	; (800169c <displayBuffer+0x34c>)
 80015aa:	801a      	strh	r2, [r3, #0]

	store_c=store_c-47; store_c = store_c &127;	  // spell no longer ?, store_c changes		STARTS FROM 0
 80015ac:	4b3b      	ldr	r3, [pc, #236]	; (800169c <displayBuffer+0x34c>)
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	3b2f      	subs	r3, #47	; 0x2f
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	4b39      	ldr	r3, [pc, #228]	; (800169c <displayBuffer+0x34c>)
 80015b6:	801a      	strh	r2, [r3, #0]
 80015b8:	4b38      	ldr	r3, [pc, #224]	; (800169c <displayBuffer+0x34c>)
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	4b36      	ldr	r3, [pc, #216]	; (800169c <displayBuffer+0x34c>)
 80015c4:	801a      	strh	r2, [r3, #0]

store_x=(store_c*8);  // i line characters , might shrink it and use extr for other  visuals
 80015c6:	4b35      	ldr	r3, [pc, #212]	; (800169c <displayBuffer+0x34c>)
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	833b      	strh	r3, [r7, #24]


if (( !loop_counter3) && (disp_stepper==0))     // blinker for cursor character only  , might just flip the whole last line from prev tables then its x4 faster
 80015ce:	4b38      	ldr	r3, [pc, #224]	; (80016b0 <displayBuffer+0x360>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d11f      	bne.n	8001616 <displayBuffer+0x2c6>
 80015d6:	4b2f      	ldr	r3, [pc, #188]	; (8001694 <displayBuffer+0x344>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d11b      	bne.n	8001616 <displayBuffer+0x2c6>
	for (d_count=0;d_count<7;d_count++){
 80015de:	2300      	movs	r3, #0
 80015e0:	77fb      	strb	r3, [r7, #31]
 80015e2:	e014      	b.n	800160e <displayBuffer+0x2be>
						gfx_ram[d_count+init_x2] [init_y] = gfx_char[d_count+store_x]^127; //write character to ram ,should be elsewhere , blank is correct
 80015e4:	7ffa      	ldrb	r2, [r7, #31]
 80015e6:	8b3b      	ldrh	r3, [r7, #24]
 80015e8:	4413      	add	r3, r2
 80015ea:	4a32      	ldr	r2, [pc, #200]	; (80016b4 <displayBuffer+0x364>)
 80015ec:	5cd1      	ldrb	r1, [r2, r3]
 80015ee:	7ffa      	ldrb	r2, [r7, #31]
 80015f0:	7efb      	ldrb	r3, [r7, #27]
 80015f2:	441a      	add	r2, r3
 80015f4:	7ebb      	ldrb	r3, [r7, #26]
 80015f6:	f081 017f 	eor.w	r1, r1, #127	; 0x7f
 80015fa:	b2c8      	uxtb	r0, r1
 80015fc:	492e      	ldr	r1, [pc, #184]	; (80016b8 <displayBuffer+0x368>)
 80015fe:	0112      	lsls	r2, r2, #4
 8001600:	440a      	add	r2, r1
 8001602:	4413      	add	r3, r2
 8001604:	4602      	mov	r2, r0
 8001606:	701a      	strb	r2, [r3, #0]
	for (d_count=0;d_count<7;d_count++){
 8001608:	7ffb      	ldrb	r3, [r7, #31]
 800160a:	3301      	adds	r3, #1
 800160c:	77fb      	strb	r3, [r7, #31]
 800160e:	7ffb      	ldrb	r3, [r7, #31]
 8001610:	2b06      	cmp	r3, #6
 8001612:	d9e7      	bls.n	80015e4 <displayBuffer+0x294>
if (( !loop_counter3) && (disp_stepper==0))     // blinker for cursor character only  , might just flip the whole last line from prev tables then its x4 faster
 8001614:	e017      	b.n	8001646 <displayBuffer+0x2f6>
	}
else for (d_count=0;d_count<7;d_count++){
 8001616:	2300      	movs	r3, #0
 8001618:	77fb      	strb	r3, [r7, #31]
 800161a:	e011      	b.n	8001640 <displayBuffer+0x2f0>
	gfx_ram[d_count+init_x2] [init_y] = gfx_char[d_count+store_x]; //write character to ram ,should be elsewhere , seems affected by later stufff
 800161c:	7ffa      	ldrb	r2, [r7, #31]
 800161e:	8b3b      	ldrh	r3, [r7, #24]
 8001620:	18d1      	adds	r1, r2, r3
 8001622:	7ffa      	ldrb	r2, [r7, #31]
 8001624:	7efb      	ldrb	r3, [r7, #27]
 8001626:	441a      	add	r2, r3
 8001628:	7ebb      	ldrb	r3, [r7, #26]
 800162a:	4822      	ldr	r0, [pc, #136]	; (80016b4 <displayBuffer+0x364>)
 800162c:	5c40      	ldrb	r0, [r0, r1]
 800162e:	4922      	ldr	r1, [pc, #136]	; (80016b8 <displayBuffer+0x368>)
 8001630:	0112      	lsls	r2, r2, #4
 8001632:	440a      	add	r2, r1
 8001634:	4413      	add	r3, r2
 8001636:	4602      	mov	r2, r0
 8001638:	701a      	strb	r2, [r3, #0]
else for (d_count=0;d_count<7;d_count++){
 800163a:	7ffb      	ldrb	r3, [r7, #31]
 800163c:	3301      	adds	r3, #1
 800163e:	77fb      	strb	r3, [r7, #31]
 8001640:	7ffb      	ldrb	r3, [r7, #31]
 8001642:	2b06      	cmp	r3, #6
 8001644:	d9ea      	bls.n	800161c <displayBuffer+0x2cc>





gfx_ram[7+init_x2] [init_y] = 0; // last line is blank between rows or whatever
 8001646:	7efb      	ldrb	r3, [r7, #27]
 8001648:	1dda      	adds	r2, r3, #7
 800164a:	7ebb      	ldrb	r3, [r7, #26]
 800164c:	491a      	ldr	r1, [pc, #104]	; (80016b8 <displayBuffer+0x368>)
 800164e:	0112      	lsls	r2, r2, #4
 8001650:	440a      	add	r2, r1
 8001652:	4413      	add	r3, r2
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]



if (disp_stepper==15) disp_stepper=0; else disp_stepper++;				// count to 16
 8001658:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <displayBuffer+0x344>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b0f      	cmp	r3, #15
 800165e:	d103      	bne.n	8001668 <displayBuffer+0x318>
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <displayBuffer+0x344>)
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]

}
 8001666:	e005      	b.n	8001674 <displayBuffer+0x324>
if (disp_stepper==15) disp_stepper=0; else disp_stepper++;				// count to 16
 8001668:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <displayBuffer+0x344>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	3301      	adds	r3, #1
 800166e:	b2da      	uxtb	r2, r3
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <displayBuffer+0x344>)
 8001672:	701a      	strb	r2, [r3, #0]
}
 8001674:	bf00      	nop
 8001676:	3724      	adds	r7, #36	; 0x24
 8001678:	46bd      	mov	sp, r7
 800167a:	bcb0      	pop	{r4, r5, r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	200008de 	.word	0x200008de
 8001684:	20000024 	.word	0x20000024
 8001688:	20000c3c 	.word	0x20000c3c
 800168c:	200000f8 	.word	0x200000f8
 8001690:	200008e0 	.word	0x200008e0
 8001694:	200006e5 	.word	0x200006e5
 8001698:	20000000 	.word	0x20000000
 800169c:	20000c18 	.word	0x20000c18
 80016a0:	20000a64 	.word	0x20000a64
 80016a4:	200025f8 	.word	0x200025f8
 80016a8:	200008e4 	.word	0x200008e4
 80016ac:	08009ad8 	.word	0x08009ad8
 80016b0:	200025fb 	.word	0x200025fb
 80016b4:	200002c0 	.word	0x200002c0
 80016b8:	200021b4 	.word	0x200021b4
 80016bc:	00000000 	.word	0x00000000

080016c0 <sampling>:


void sampling(void){						// 18 ms of data
 80016c0:	b5b0      	push	{r4, r5, r7, lr}
 80016c2:	f5ad 5d85 	sub.w	sp, sp, #4256	; 0x10a0
 80016c6:	af00      	add	r7, sp, #0
uint8_t mask_i;
uint8_t mask_k;
uint8_t adsr_mult[5];
//adc_read();
//uint16_t isr_tempo=isrMask; // get tempo value
sample_pointB=sample_pointD;
 80016c8:	4ba5      	ldr	r3, [pc, #660]	; (8001960 <sampling+0x2a0>)
 80016ca:	881a      	ldrh	r2, [r3, #0]
 80016cc:	4ba5      	ldr	r3, [pc, #660]	; (8001964 <sampling+0x2a4>)
 80016ce:	801a      	strh	r2, [r3, #0]
unsigned short tempo_start=0;  // enabled when i=isrMask;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80016d6:	f102 021c 	add.w	r2, r2, #28
 80016da:	8013      	strh	r3, [r2, #0]
static unsigned short tempo_end=0;   // last count before note start
uint16_t i_total;
uint16_t tempo_mod=tempo_lut[potSource[109]];  // set tempo,speed from lut 40-200bpm  ,changed to 4x for note lenght
 80016dc:	4ba2      	ldr	r3, [pc, #648]	; (8001968 <sampling+0x2a8>)
 80016de:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 80016e2:	461a      	mov	r2, r3
 80016e4:	4ba1      	ldr	r3, [pc, #644]	; (800196c <sampling+0x2ac>)
 80016e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80016ea:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80016ee:	f102 020e 	add.w	r2, r2, #14
 80016f2:	8013      	strh	r3, [r2, #0]

uint8_t l;			// 35.002khz(0.02857ms) sample, 1 sample is temp count (16x=0.00045712) , *16=1 note ,at 300 (437bpm),(1/(0.00002857*tempo count*16)=1beat in s
float freq_temp;	// (1/(bpm/60)) /0.00045712=tempo count ie 1093.8 for 120bpm
float freq2_temp;
float freq_adder;
float tempo_sync=16384/((tempo_mod*16)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80
 80016f4:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80016f8:	f103 030e 	add.w	r3, r3, #14
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	da00      	bge.n	8001704 <sampling+0x44>
 8001702:	331f      	adds	r3, #31
 8001704:	115b      	asrs	r3, r3, #5
 8001706:	461a      	mov	r2, r3
 8001708:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800170c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001710:	ee07 3a90 	vmov	s15, r3
 8001714:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001718:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800171c:	f103 0308 	add.w	r3, r3, #8
 8001720:	edc3 7a00 	vstr	s15, [r3]
tempo_sync=tempo_sync/80;  // bit weird her , this is adsr !
 8001724:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001728:	f103 0308 	add.w	r3, r3, #8
 800172c:	ed93 7a00 	vldr	s14, [r3]
 8001730:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8001970 <sampling+0x2b0>
 8001734:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001738:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800173c:	f103 0308 	add.w	r3, r3, #8
 8001740:	edc3 7a00 	vstr	s15, [r3]

uint32_t  note_toggler[17]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //records note position on 0-512   using a bit
 8001744:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001748:	f103 0304 	add.w	r3, r3, #4
 800174c:	2244      	movs	r2, #68	; 0x44
 800174e:	2100      	movs	r1, #0
 8001750:	4618      	mov	r0, r3
 8001752:	f006 fe39 	bl	80083c8 <memset>
for (i=0;i<16;i++) {  note_toggler[i]=0; }
 8001756:	4b87      	ldr	r3, [pc, #540]	; (8001974 <sampling+0x2b4>)
 8001758:	2200      	movs	r2, #0
 800175a:	801a      	strh	r2, [r3, #0]
 800175c:	e00e      	b.n	800177c <sampling+0xbc>
 800175e:	4b85      	ldr	r3, [pc, #532]	; (8001974 <sampling+0x2b4>)
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8001768:	443b      	add	r3, r7
 800176a:	2200      	movs	r2, #0
 800176c:	f843 2c7c 	str.w	r2, [r3, #-124]
 8001770:	4b80      	ldr	r3, [pc, #512]	; (8001974 <sampling+0x2b4>)
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	3301      	adds	r3, #1
 8001776:	b29a      	uxth	r2, r3
 8001778:	4b7e      	ldr	r3, [pc, #504]	; (8001974 <sampling+0x2b4>)
 800177a:	801a      	strh	r2, [r3, #0]
 800177c:	4b7d      	ldr	r3, [pc, #500]	; (8001974 <sampling+0x2b4>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	2b0f      	cmp	r3, #15
 8001782:	d9ec      	bls.n	800175e <sampling+0x9e>
	//potSource[150]=(freq_point[0])*100; //0-2

//float lcd_out2;

lcd_out3=menu_page[1]; // still goes to 15
 8001784:	4b7c      	ldr	r3, [pc, #496]	; (8001978 <sampling+0x2b8>)
 8001786:	885a      	ldrh	r2, [r3, #2]
 8001788:	4b7c      	ldr	r3, [pc, #496]	; (800197c <sampling+0x2bc>)
 800178a:	801a      	strh	r2, [r3, #0]

//lcd_out3=adc_values[0]+adc_values[1]+adc_values[2]; // 3 digit read out , works ok,, [2] works but thats it
//lcd_out3=lcd_out3+180;
potSource[150]=(lcd_out3/100)*16;  // still works
 800178c:	4b7b      	ldr	r3, [pc, #492]	; (800197c <sampling+0x2bc>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	4a7b      	ldr	r2, [pc, #492]	; (8001980 <sampling+0x2c0>)
 8001792:	fba2 2303 	umull	r2, r3, r2, r3
 8001796:	095b      	lsrs	r3, r3, #5
 8001798:	b29b      	uxth	r3, r3
 800179a:	b2db      	uxtb	r3, r3
 800179c:	011b      	lsls	r3, r3, #4
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	4b71      	ldr	r3, [pc, #452]	; (8001968 <sampling+0x2a8>)
 80017a2:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
potSource[151]=((lcd_out3 %100)/10)*16;		 // 0-160 to 0-10
 80017a6:	4b75      	ldr	r3, [pc, #468]	; (800197c <sampling+0x2bc>)
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	4a75      	ldr	r2, [pc, #468]	; (8001980 <sampling+0x2c0>)
 80017ac:	fba2 1203 	umull	r1, r2, r2, r3
 80017b0:	0952      	lsrs	r2, r2, #5
 80017b2:	2164      	movs	r1, #100	; 0x64
 80017b4:	fb01 f202 	mul.w	r2, r1, r2
 80017b8:	1a9b      	subs	r3, r3, r2
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	4a71      	ldr	r2, [pc, #452]	; (8001984 <sampling+0x2c4>)
 80017be:	fba2 2303 	umull	r2, r3, r2, r3
 80017c2:	08db      	lsrs	r3, r3, #3
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	011b      	lsls	r3, r3, #4
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	4b66      	ldr	r3, [pc, #408]	; (8001968 <sampling+0x2a8>)
 80017ce:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
potSource[152]=(lcd_out3%10)*16;
 80017d2:	4b6a      	ldr	r3, [pc, #424]	; (800197c <sampling+0x2bc>)
 80017d4:	881a      	ldrh	r2, [r3, #0]
 80017d6:	4b6b      	ldr	r3, [pc, #428]	; (8001984 <sampling+0x2c4>)
 80017d8:	fba3 1302 	umull	r1, r3, r3, r2
 80017dc:	08d9      	lsrs	r1, r3, #3
 80017de:	460b      	mov	r3, r1
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	440b      	add	r3, r1
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	4b5d      	ldr	r3, [pc, #372]	; (8001968 <sampling+0x2a8>)
 80017f2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98


unsigned short  sine_zero;  // zero cross
note_holdA=0;
 80017f6:	4b64      	ldr	r3, [pc, #400]	; (8001988 <sampling+0x2c8>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]
//printf ("crap \n");
//printf("%d|",adc_values[0] );printf("%d|",adc_values[1] );printf("%d|",adc_values[2] );printf("%d|\n",adc_values[3] );
uint8_t note_patterns[8]={1,4,2,2,1,4,2,1,4,2,1,4,4};   // creating beats
 80017fc:	4a63      	ldr	r2, [pc, #396]	; (800198c <sampling+0x2cc>)
 80017fe:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001802:	f103 031c 	add.w	r3, r3, #28
 8001806:	e892 0003 	ldmia.w	r2, {r0, r1}
 800180a:	e883 0003 	stmia.w	r3, {r0, r1}
uint8_t note_lenght=5-note_patterns[seq_pos&7] ; // note length modifier , higher faster
 800180e:	4b60      	ldr	r3, [pc, #384]	; (8001990 <sampling+0x2d0>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 800181a:	443b      	add	r3, r7
 800181c:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 8001820:	f1c3 0305 	rsb	r3, r3, #5
 8001824:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001828:	f102 0207 	add.w	r2, r2, #7
 800182c:	7013      	strb	r3, [r2, #0]
//tempo_mod=tempo_mod-63+(lfo_out[1]>>7);
//if (tempo_mod<450) tempo_mod=((tempo_mod-200)>>1) +200; // more res lower
uint8_t note_plain;
int8_t ring_mod=0;
 800182e:	2300      	movs	r3, #0
 8001830:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001834:	f102 0206 	add.w	r2, r2, #6
 8001838:	7013      	strb	r3, [r2, #0]
//sample_Accu2=0;
//printf (adc_values[0]," ",adc_values[1]," ",adc_values[2]," ","crap \n");
// some good phasin and delays here
uint8_t cross_fade[2];
uint8_t fader[17]={0,1,5,11,19,28,39,51,64,76,88,99,108,116,122,126,127}; // sine curve for cross fade
 800183a:	4b56      	ldr	r3, [pc, #344]	; (8001994 <sampling+0x2d4>)
 800183c:	f507 5480 	add.w	r4, r7, #4096	; 0x1000
 8001840:	f104 0404 	add.w	r4, r4, #4
 8001844:	461d      	mov	r5, r3
 8001846:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001848:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800184a:	682b      	ldr	r3, [r5, #0]
 800184c:	7023      	strb	r3, [r4, #0]
//adc_values[2]=adc_values[1];   // this temp until pot 3 is fixed
if(adc_values[2]&16)     	{cross_fade[1]=127-fader[adc_values[2]&15]; cross_fade[2]=127;}  else {cross_fade[2]=fader[adc_values[2]&15]; cross_fade[1]=127;} //calculate crossfader
 800184e:	4b52      	ldr	r3, [pc, #328]	; (8001998 <sampling+0x2d8>)
 8001850:	889b      	ldrh	r3, [r3, #4]
 8001852:	f003 0310 	and.w	r3, r3, #16
 8001856:	2b00      	cmp	r3, #0
 8001858:	d017      	beq.n	800188a <sampling+0x1ca>
 800185a:	4b4f      	ldr	r3, [pc, #316]	; (8001998 <sampling+0x2d8>)
 800185c:	889b      	ldrh	r3, [r3, #4]
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8001866:	443b      	add	r3, r7
 8001868:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 800186c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001870:	b2db      	uxtb	r3, r3
 8001872:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001876:	f102 0219 	add.w	r2, r2, #25
 800187a:	7013      	strb	r3, [r2, #0]
 800187c:	237f      	movs	r3, #127	; 0x7f
 800187e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001882:	f102 021a 	add.w	r2, r2, #26
 8001886:	7013      	strb	r3, [r2, #0]
 8001888:	e013      	b.n	80018b2 <sampling+0x1f2>
 800188a:	4b43      	ldr	r3, [pc, #268]	; (8001998 <sampling+0x2d8>)
 800188c:	889b      	ldrh	r3, [r3, #4]
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8001896:	443b      	add	r3, r7
 8001898:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 800189c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80018a0:	f102 021a 	add.w	r2, r2, #26
 80018a4:	7013      	strb	r3, [r2, #0]
 80018a6:	237f      	movs	r3, #127	; 0x7f
 80018a8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80018ac:	f102 0219 	add.w	r2, r2, #25
 80018b0:	7013      	strb	r3, [r2, #0]

// doing lfo calc here as it is slow only for now
////////////////////adsr/////////////////////////////////////////
if	 (adsr_temp==0) {		adsr_att=(161-potSource[20] ) *0.02 ; // for now all of them from this only , speed , 0-16  // rarely read
 80018b2:	4b3a      	ldr	r3, [pc, #232]	; (800199c <sampling+0x2dc>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d146      	bne.n	8001948 <sampling+0x288>
 80018ba:	4b2b      	ldr	r3, [pc, #172]	; (8001968 <sampling+0x2a8>)
 80018bc:	7d1b      	ldrb	r3, [r3, #20]
 80018be:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7fe ff58 	bl	8000778 <__aeabi_i2d>
 80018c8:	a321      	add	r3, pc, #132	; (adr r3, 8001950 <sampling+0x290>)
 80018ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ce:	f7fe fcd7 	bl	8000280 <__aeabi_dmul>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	4610      	mov	r0, r2
 80018d8:	4619      	mov	r1, r3
 80018da:	f7fe ffb7 	bl	800084c <__aeabi_d2f>
 80018de:	4603      	mov	r3, r0
 80018e0:	4a2f      	ldr	r2, [pc, #188]	; (80019a0 <sampling+0x2e0>)
 80018e2:	6013      	str	r3, [r2, #0]
as_sustain=((161-potSource[21])*0.01);  // length and level this is ok is running 1/16 ish				as_attack=as_attack-as_sustain;
 80018e4:	4b20      	ldr	r3, [pc, #128]	; (8001968 <sampling+0x2a8>)
 80018e6:	7d5b      	ldrb	r3, [r3, #21]
 80018e8:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7fe ff43 	bl	8000778 <__aeabi_i2d>
 80018f2:	a319      	add	r3, pc, #100	; (adr r3, 8001958 <sampling+0x298>)
 80018f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f8:	f7fe fcc2 	bl	8000280 <__aeabi_dmul>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4610      	mov	r0, r2
 8001902:	4619      	mov	r1, r3
 8001904:	f7fe ffa2 	bl	800084c <__aeabi_d2f>
 8001908:	4603      	mov	r3, r0
 800190a:	4a26      	ldr	r2, [pc, #152]	; (80019a4 <sampling+0x2e4>)
 800190c:	6013      	str	r3, [r2, #0]
adsr_att=adsr_att*adsr_att;
 800190e:	4b24      	ldr	r3, [pc, #144]	; (80019a0 <sampling+0x2e0>)
 8001910:	ed93 7a00 	vldr	s14, [r3]
 8001914:	4b22      	ldr	r3, [pc, #136]	; (80019a0 <sampling+0x2e0>)
 8001916:	edd3 7a00 	vldr	s15, [r3]
 800191a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800191e:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <sampling+0x2e0>)
 8001920:	edc3 7a00 	vstr	s15, [r3]
as_sustain=as_sustain*as_sustain;
 8001924:	4b1f      	ldr	r3, [pc, #124]	; (80019a4 <sampling+0x2e4>)
 8001926:	ed93 7a00 	vldr	s14, [r3]
 800192a:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <sampling+0x2e4>)
 800192c:	edd3 7a00 	vldr	s15, [r3]
 8001930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001934:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <sampling+0x2e4>)
 8001936:	edc3 7a00 	vstr	s15, [r3]

adsr_temp=1;
 800193a:	4b18      	ldr	r3, [pc, #96]	; (800199c <sampling+0x2dc>)
 800193c:	2201      	movs	r2, #1
 800193e:	701a      	strb	r2, [r3, #0]
as_attack=0;
 8001940:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <sampling+0x2e8>)
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
}

float lut_temp;

for (i=0;i<256;i++) {
 8001948:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <sampling+0x2b4>)
 800194a:	2200      	movs	r2, #0
 800194c:	801a      	strh	r2, [r3, #0]
 800194e:	e0fe      	b.n	8001b4e <sampling+0x48e>
 8001950:	47ae147b 	.word	0x47ae147b
 8001954:	3f947ae1 	.word	0x3f947ae1
 8001958:	47ae147b 	.word	0x47ae147b
 800195c:	3f847ae1 	.word	0x3f847ae1
 8001960:	20001446 	.word	0x20001446
 8001964:	20000c3a 	.word	0x20000c3a
 8001968:	20000a64 	.word	0x20000a64
 800196c:	20002070 	.word	0x20002070
 8001970:	42a00000 	.word	0x42a00000
 8001974:	20000c3c 	.word	0x20000c3c
 8001978:	20001d14 	.word	0x20001d14
 800197c:	200025f8 	.word	0x200025f8
 8001980:	51eb851f 	.word	0x51eb851f
 8001984:	cccccccd 	.word	0xcccccccd
 8001988:	20001caf 	.word	0x20001caf
 800198c:	080095b8 	.word	0x080095b8
 8001990:	20000c14 	.word	0x20000c14
 8001994:	080095c0 	.word	0x080095c0
 8001998:	200002b4 	.word	0x200002b4
 800199c:	20001c88 	.word	0x20001c88
 80019a0:	200025e8 	.word	0x200025e8
 80019a4:	200025e4 	.word	0x200025e4
 80019a8:	200025e0 	.word	0x200025e0

	if     (as_attack<1000)    																		{as_attack=as_attack+adsr_att;					lut_temp=as_attack; } //0-1000
 80019ac:	4b8e      	ldr	r3, [pc, #568]	; (8001be8 <sampling+0x528>)
 80019ae:	edd3 7a00 	vldr	s15, [r3]
 80019b2:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8001bec <sampling+0x52c>
 80019b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019be:	d511      	bpl.n	80019e4 <sampling+0x324>
 80019c0:	4b89      	ldr	r3, [pc, #548]	; (8001be8 <sampling+0x528>)
 80019c2:	ed93 7a00 	vldr	s14, [r3]
 80019c6:	4b8a      	ldr	r3, [pc, #552]	; (8001bf0 <sampling+0x530>)
 80019c8:	edd3 7a00 	vldr	s15, [r3]
 80019cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d0:	4b85      	ldr	r3, [pc, #532]	; (8001be8 <sampling+0x528>)
 80019d2:	edc3 7a00 	vstr	s15, [r3]
 80019d6:	4b84      	ldr	r3, [pc, #528]	; (8001be8 <sampling+0x528>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80019de:	f102 0214 	add.w	r2, r2, #20
 80019e2:	6013      	str	r3, [r2, #0]
	 if  ((as_attack<1500)  && (as_attack>999))  										{as_attack=as_attack+adsr_att;					lut_temp=1500-(as_attack-500);  }  // 1000-500
 80019e4:	4b80      	ldr	r3, [pc, #512]	; (8001be8 <sampling+0x528>)
 80019e6:	edd3 7a00 	vldr	s15, [r3]
 80019ea:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8001bf4 <sampling+0x534>
 80019ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f6:	d525      	bpl.n	8001a44 <sampling+0x384>
 80019f8:	4b7b      	ldr	r3, [pc, #492]	; (8001be8 <sampling+0x528>)
 80019fa:	edd3 7a00 	vldr	s15, [r3]
 80019fe:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8001bf8 <sampling+0x538>
 8001a02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0a:	dd1b      	ble.n	8001a44 <sampling+0x384>
 8001a0c:	4b76      	ldr	r3, [pc, #472]	; (8001be8 <sampling+0x528>)
 8001a0e:	ed93 7a00 	vldr	s14, [r3]
 8001a12:	4b77      	ldr	r3, [pc, #476]	; (8001bf0 <sampling+0x530>)
 8001a14:	edd3 7a00 	vldr	s15, [r3]
 8001a18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a1c:	4b72      	ldr	r3, [pc, #456]	; (8001be8 <sampling+0x528>)
 8001a1e:	edc3 7a00 	vstr	s15, [r3]
 8001a22:	4b71      	ldr	r3, [pc, #452]	; (8001be8 <sampling+0x528>)
 8001a24:	edd3 7a00 	vldr	s15, [r3]
 8001a28:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8001bfc <sampling+0x53c>
 8001a2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a30:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8001bf4 <sampling+0x534>
 8001a34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a38:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001a3c:	f103 0314 	add.w	r3, r3, #20
 8001a40:	edc3 7a00 	vstr	s15, [r3]
	 if ((as_attack>1499)   && 		(as_attack<2000)) 																{		lut_temp=500; 	as_attack=as_attack+as_sustain;}
 8001a44:	4b68      	ldr	r3, [pc, #416]	; (8001be8 <sampling+0x528>)
 8001a46:	edd3 7a00 	vldr	s15, [r3]
 8001a4a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001c00 <sampling+0x540>
 8001a4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a56:	dd1a      	ble.n	8001a8e <sampling+0x3ce>
 8001a58:	4b63      	ldr	r3, [pc, #396]	; (8001be8 <sampling+0x528>)
 8001a5a:	edd3 7a00 	vldr	s15, [r3]
 8001a5e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001c04 <sampling+0x544>
 8001a62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6a:	d510      	bpl.n	8001a8e <sampling+0x3ce>
 8001a6c:	4b66      	ldr	r3, [pc, #408]	; (8001c08 <sampling+0x548>)
 8001a6e:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001a72:	f102 0214 	add.w	r2, r2, #20
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	4b5b      	ldr	r3, [pc, #364]	; (8001be8 <sampling+0x528>)
 8001a7a:	ed93 7a00 	vldr	s14, [r3]
 8001a7e:	4b63      	ldr	r3, [pc, #396]	; (8001c0c <sampling+0x54c>)
 8001a80:	edd3 7a00 	vldr	s15, [r3]
 8001a84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a88:	4b57      	ldr	r3, [pc, #348]	; (8001be8 <sampling+0x528>)
 8001a8a:	edc3 7a00 	vstr	s15, [r3]
	if ((as_attack>1999)  &&  (as_attack<2500)	)																							{as_attack=as_attack+as_sustain	;	lut_temp=2500-as_attack; } //500-0;
 8001a8e:	4b56      	ldr	r3, [pc, #344]	; (8001be8 <sampling+0x528>)
 8001a90:	edd3 7a00 	vldr	s15, [r3]
 8001a94:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001c10 <sampling+0x550>
 8001a98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa0:	dd21      	ble.n	8001ae6 <sampling+0x426>
 8001aa2:	4b51      	ldr	r3, [pc, #324]	; (8001be8 <sampling+0x528>)
 8001aa4:	edd3 7a00 	vldr	s15, [r3]
 8001aa8:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001c14 <sampling+0x554>
 8001aac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab4:	d517      	bpl.n	8001ae6 <sampling+0x426>
 8001ab6:	4b4c      	ldr	r3, [pc, #304]	; (8001be8 <sampling+0x528>)
 8001ab8:	ed93 7a00 	vldr	s14, [r3]
 8001abc:	4b53      	ldr	r3, [pc, #332]	; (8001c0c <sampling+0x54c>)
 8001abe:	edd3 7a00 	vldr	s15, [r3]
 8001ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac6:	4b48      	ldr	r3, [pc, #288]	; (8001be8 <sampling+0x528>)
 8001ac8:	edc3 7a00 	vstr	s15, [r3]
 8001acc:	4b46      	ldr	r3, [pc, #280]	; (8001be8 <sampling+0x528>)
 8001ace:	edd3 7a00 	vldr	s15, [r3]
 8001ad2:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8001c14 <sampling+0x554>
 8001ad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ada:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001ade:	f103 0314 	add.w	r3, r3, #20
 8001ae2:	edc3 7a00 	vstr	s15, [r3]
	if (as_attack>3000)   																																			{lut_temp=1; as_attack=4000; }     // THE END
 8001ae6:	4b40      	ldr	r3, [pc, #256]	; (8001be8 <sampling+0x528>)
 8001ae8:	edd3 7a00 	vldr	s15, [r3]
 8001aec:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001c18 <sampling+0x558>
 8001af0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af8:	dd09      	ble.n	8001b0e <sampling+0x44e>
 8001afa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001afe:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001b02:	f102 0214 	add.w	r2, r2, #20
 8001b06:	6013      	str	r3, [r2, #0]
 8001b08:	4b37      	ldr	r3, [pc, #220]	; (8001be8 <sampling+0x528>)
 8001b0a:	4a44      	ldr	r2, [pc, #272]	; (8001c1c <sampling+0x55c>)
 8001b0c:	601a      	str	r2, [r3, #0]

adsr_lut[i]= lut_temp*0.001;
 8001b0e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001b12:	f103 0314 	add.w	r3, r3, #20
 8001b16:	6818      	ldr	r0, [r3, #0]
 8001b18:	f7fe fe40 	bl	800079c <__aeabi_f2d>
 8001b1c:	a330      	add	r3, pc, #192	; (adr r3, 8001be0 <sampling+0x520>)
 8001b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b22:	f7fe fbad 	bl	8000280 <__aeabi_dmul>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	493d      	ldr	r1, [pc, #244]	; (8001c20 <sampling+0x560>)
 8001b2c:	8809      	ldrh	r1, [r1, #0]
 8001b2e:	460c      	mov	r4, r1
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	f7fe fe8a 	bl	800084c <__aeabi_d2f>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	493a      	ldr	r1, [pc, #232]	; (8001c24 <sampling+0x564>)
 8001b3c:	00a3      	lsls	r3, r4, #2
 8001b3e:	440b      	add	r3, r1
 8001b40:	601a      	str	r2, [r3, #0]
for (i=0;i<256;i++) {
 8001b42:	4b37      	ldr	r3, [pc, #220]	; (8001c20 <sampling+0x560>)
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	3301      	adds	r3, #1
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	4b35      	ldr	r3, [pc, #212]	; (8001c20 <sampling+0x560>)
 8001b4c:	801a      	strh	r2, [r3, #0]
 8001b4e:	4b34      	ldr	r3, [pc, #208]	; (8001c20 <sampling+0x560>)
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	2bff      	cmp	r3, #255	; 0xff
 8001b54:	f67f af2a 	bls.w	80019ac <sampling+0x2ec>
}


///////////////////////////////////////////////////////////////

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8001b58:	4b31      	ldr	r3, [pc, #196]	; (8001c20 <sampling+0x560>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	801a      	strh	r2, [r3, #0]
 8001b5e:	e357      	b.n	8002210 <sampling+0xb50>

	i_total=i+sample_pointB;
 8001b60:	4b2f      	ldr	r3, [pc, #188]	; (8001c20 <sampling+0x560>)
 8001b62:	881a      	ldrh	r2, [r3, #0]
 8001b64:	4b30      	ldr	r3, [pc, #192]	; (8001c28 <sampling+0x568>)
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	4413      	add	r3, r2
 8001b6a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001b6e:	f102 021e 	add.w	r2, r2, #30
 8001b72:	8013      	strh	r3, [r2, #0]
	i_frac=i>>6;
 8001b74:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <sampling+0x560>)
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	099b      	lsrs	r3, r3, #6
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	4b2b      	ldr	r3, [pc, #172]	; (8001c2c <sampling+0x56c>)
 8001b80:	701a      	strb	r2, [r3, #0]
	note_plain=potValues[seq_pos & 7 ];
 8001b82:	4b2b      	ldr	r3, [pc, #172]	; (8001c30 <sampling+0x570>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	4a2a      	ldr	r2, [pc, #168]	; (8001c34 <sampling+0x574>)
 8001b8c:	5cd3      	ldrb	r3, [r2, r3]
 8001b8e:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001b92:	f102 021b 	add.w	r2, r2, #27
 8001b96:	7013      	strb	r3, [r2, #0]
potValues[i&255]=potSource[i&255]>>4; //just to update values
 8001b98:	4b21      	ldr	r3, [pc, #132]	; (8001c20 <sampling+0x560>)
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	4a26      	ldr	r2, [pc, #152]	; (8001c38 <sampling+0x578>)
 8001ba0:	5cd2      	ldrb	r2, [r2, r3]
 8001ba2:	4b1f      	ldr	r3, [pc, #124]	; (8001c20 <sampling+0x560>)
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	0912      	lsrs	r2, r2, #4
 8001baa:	b2d1      	uxtb	r1, r2
 8001bac:	4a21      	ldr	r2, [pc, #132]	; (8001c34 <sampling+0x574>)
 8001bae:	54d1      	strb	r1, [r2, r3]
	if (tempo_count>=tempo_mod) { next_isr=(next_isr+1)& 4095;tempo_count=0;  }  else {tempo_count++; }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 8001bb0:	4b22      	ldr	r3, [pc, #136]	; (8001c3c <sampling+0x57c>)
 8001bb2:	881b      	ldrh	r3, [r3, #0]
 8001bb4:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001bb8:	f102 020e 	add.w	r2, r2, #14
 8001bbc:	8812      	ldrh	r2, [r2, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d840      	bhi.n	8001c44 <sampling+0x584>
 8001bc2:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <sampling+0x580>)
 8001bc4:	881b      	ldrh	r3, [r3, #0]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <sampling+0x580>)
 8001bd2:	801a      	strh	r2, [r3, #0]
 8001bd4:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <sampling+0x57c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	801a      	strh	r2, [r3, #0]
 8001bda:	e039      	b.n	8001c50 <sampling+0x590>
 8001bdc:	f3af 8000 	nop.w
 8001be0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001be4:	3f50624d 	.word	0x3f50624d
 8001be8:	200025e0 	.word	0x200025e0
 8001bec:	447a0000 	.word	0x447a0000
 8001bf0:	200025e8 	.word	0x200025e8
 8001bf4:	44bb8000 	.word	0x44bb8000
 8001bf8:	4479c000 	.word	0x4479c000
 8001bfc:	43fa0000 	.word	0x43fa0000
 8001c00:	44bb6000 	.word	0x44bb6000
 8001c04:	44fa0000 	.word	0x44fa0000
 8001c08:	43fa0000 	.word	0x43fa0000
 8001c0c:	200025e4 	.word	0x200025e4
 8001c10:	44f9e000 	.word	0x44f9e000
 8001c14:	451c4000 	.word	0x451c4000
 8001c18:	453b8000 	.word	0x453b8000
 8001c1c:	457a0000 	.word	0x457a0000
 8001c20:	20000c3c 	.word	0x20000c3c
 8001c24:	20001888 	.word	0x20001888
 8001c28:	20000c3a 	.word	0x20000c3a
 8001c2c:	20001e14 	.word	0x20001e14
 8001c30:	20000c14 	.word	0x20000c14
 8001c34:	200008e4 	.word	0x200008e4
 8001c38:	20000a64 	.word	0x20000a64
 8001c3c:	20001cf6 	.word	0x20001cf6
 8001c40:	20001ca2 	.word	0x20001ca2
 8001c44:	4b7d      	ldr	r3, [pc, #500]	; (8001e3c <sampling+0x77c>)
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	4b7b      	ldr	r3, [pc, #492]	; (8001e3c <sampling+0x77c>)
 8001c4e:	801a      	strh	r2, [r3, #0]
// tempo_count is about 1000-400
	tempo_start=0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001c56:	f102 021c 	add.w	r2, r2, #28
 8001c5a:	8013      	strh	r3, [r2, #0]
	if ((next_isr>>4) != (seq_pos)) { 					// next note step 140ms
 8001c5c:	4b78      	ldr	r3, [pc, #480]	; (8001e40 <sampling+0x780>)
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	091b      	lsrs	r3, r3, #4
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	4b77      	ldr	r3, [pc, #476]	; (8001e44 <sampling+0x784>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d00c      	beq.n	8001c88 <sampling+0x5c8>
		seq_pos=(next_isr>>4); // seq pos =256 max , isr = 1/16 of a note, note lenght is 1-4
 8001c6e:	4b74      	ldr	r3, [pc, #464]	; (8001e40 <sampling+0x780>)
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	091b      	lsrs	r3, r3, #4
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	4b72      	ldr	r3, [pc, #456]	; (8001e44 <sampling+0x784>)
 8001c7a:	701a      	strb	r2, [r3, #0]
		tempo_start=1;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001c82:	f102 021c 	add.w	r2, r2, #28
 8001c86:	8013      	strh	r3, [r2, #0]
// record note triggers or seq_changes position ,NEEDS TO BE OFF FOR NOTE 0
}


	if(tempo_start  )    // Calculates only on note change, gotta change seq_pos somehow  , only activates when change in seq pos
 8001c88:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001c8c:	f103 031c 	add.w	r3, r3, #28
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f000 812f 	beq.w	8001ef6 <sampling+0x836>
	{
	//printf("\n");//	ITM_SendChar( 65 );   //  Send ASCII code 65 = ’A’
	//printf("%d" ,note_channel[10]);


		potValues[32]=(adc_values[0]>>2)&15; //assigned pots to start of loopers 0-16,works
 8001c98:	4b6b      	ldr	r3, [pc, #428]	; (8001e48 <sampling+0x788>)
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	089b      	lsrs	r3, r3, #2
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	4b68      	ldr	r3, [pc, #416]	; (8001e4c <sampling+0x78c>)
 8001caa:	f883 2020 	strb.w	r2, [r3, #32]
		potValues[33]=(adc_values[1]>>2)&15;
 8001cae:	4b66      	ldr	r3, [pc, #408]	; (8001e48 <sampling+0x788>)
 8001cb0:	885b      	ldrh	r3, [r3, #2]
 8001cb2:	089b      	lsrs	r3, r3, #2
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	f003 030f 	and.w	r3, r3, #15
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4b63      	ldr	r3, [pc, #396]	; (8001e4c <sampling+0x78c>)
 8001cc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21


		seq_loop[2]=((potValues[32]+(seq_pos&7))&15); // calc  8 note loop positions sets looping point in sequence
 8001cc4:	4b61      	ldr	r3, [pc, #388]	; (8001e4c <sampling+0x78c>)
 8001cc6:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001cca:	4b5e      	ldr	r3, [pc, #376]	; (8001e44 <sampling+0x784>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	f003 030f 	and.w	r3, r3, #15
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	4b5c      	ldr	r3, [pc, #368]	; (8001e50 <sampling+0x790>)
 8001ce0:	709a      	strb	r2, [r3, #2]

		//seq_loop[3]=(potValues[33]+(( seq_pos&31 ) >>2)) & 15;  // quater speed
			seq_loop[3]=((potValues[33]+(seq_pos&15))&15); //sets looping point in sequence this is full 16 note
 8001ce2:	4b5a      	ldr	r3, [pc, #360]	; (8001e4c <sampling+0x78c>)
 8001ce4:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001ce8:	4b56      	ldr	r3, [pc, #344]	; (8001e44 <sampling+0x784>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	4413      	add	r3, r2
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	f003 030f 	and.w	r3, r3, #15
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	4b56      	ldr	r3, [pc, #344]	; (8001e50 <sampling+0x790>)
 8001cf8:	70da      	strb	r2, [r3, #3]

			seq_loop[4]=((potValues[32]+(seq_pos&7))&15);
 8001cfa:	4b54      	ldr	r3, [pc, #336]	; (8001e4c <sampling+0x78c>)
 8001cfc:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001d00:	4b50      	ldr	r3, [pc, #320]	; (8001e44 <sampling+0x784>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	4b4e      	ldr	r3, [pc, #312]	; (8001e50 <sampling+0x790>)
 8001d16:	711a      	strb	r2, [r3, #4]

		//seq_loop[4]=((potValues[32]+((seq_pos&15)>>1))&15); // half speed

		note_channel[2]=potValues[80+seq_loop[2]]+potValues[72];  //loop 8 notes from pos and x times
 8001d18:	4b4d      	ldr	r3, [pc, #308]	; (8001e50 <sampling+0x790>)
 8001d1a:	789b      	ldrb	r3, [r3, #2]
 8001d1c:	3350      	adds	r3, #80	; 0x50
 8001d1e:	4a4b      	ldr	r2, [pc, #300]	; (8001e4c <sampling+0x78c>)
 8001d20:	5cd3      	ldrb	r3, [r2, r3]
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	4b49      	ldr	r3, [pc, #292]	; (8001e4c <sampling+0x78c>)
 8001d26:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	4b48      	ldr	r3, [pc, #288]	; (8001e54 <sampling+0x794>)
 8001d32:	809a      	strh	r2, [r3, #4]
		note_channel[3]=potValues[seq_loop[3]];  //loop 8 notes from pos and x times ,might disable normal adsr completely
 8001d34:	4b46      	ldr	r3, [pc, #280]	; (8001e50 <sampling+0x790>)
 8001d36:	78db      	ldrb	r3, [r3, #3]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4b44      	ldr	r3, [pc, #272]	; (8001e4c <sampling+0x78c>)
 8001d3c:	5c9b      	ldrb	r3, [r3, r2]
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	4b44      	ldr	r3, [pc, #272]	; (8001e54 <sampling+0x794>)
 8001d42:	80da      	strh	r2, [r3, #6]
	if (note_channel[3]) 		{note_channel[3]=note_channel[3]+potValues[73];	adsr_retrigger[3]=1; note_toggler[i>>5]=1<<(i&31   )   ; } // stay at zero for off
 8001d44:	4b43      	ldr	r3, [pc, #268]	; (8001e54 <sampling+0x794>)
 8001d46:	88db      	ldrh	r3, [r3, #6]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01c      	beq.n	8001d86 <sampling+0x6c6>
 8001d4c:	4b41      	ldr	r3, [pc, #260]	; (8001e54 <sampling+0x794>)
 8001d4e:	88da      	ldrh	r2, [r3, #6]
 8001d50:	4b3e      	ldr	r3, [pc, #248]	; (8001e4c <sampling+0x78c>)
 8001d52:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	4413      	add	r3, r2
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	4b3d      	ldr	r3, [pc, #244]	; (8001e54 <sampling+0x794>)
 8001d5e:	80da      	strh	r2, [r3, #6]
 8001d60:	4b3d      	ldr	r3, [pc, #244]	; (8001e58 <sampling+0x798>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	80da      	strh	r2, [r3, #6]
 8001d66:	4b3d      	ldr	r3, [pc, #244]	; (8001e5c <sampling+0x79c>)
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	f003 031f 	and.w	r3, r3, #31
 8001d6e:	2201      	movs	r2, #1
 8001d70:	409a      	lsls	r2, r3
 8001d72:	4b3a      	ldr	r3, [pc, #232]	; (8001e5c <sampling+0x79c>)
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	095b      	lsrs	r3, r3, #5
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8001d80:	443b      	add	r3, r7
 8001d82:	f843 2c7c 	str.w	r2, [r3, #-124]
	//note_channel[3]=(note_channel[3]-4)+(lfo_out[2]>>11);

	//if (((seq_pos&7)==0) && (adsr_toggle[6]==2))		{adsr_retrigger[6]=1; } else adsr_retrigger[6]=0; // delete


	note_channel[5]=potValues[80+(seq_pos&15)];  // sample
 8001d86:	4b2f      	ldr	r3, [pc, #188]	; (8001e44 <sampling+0x784>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	3350      	adds	r3, #80	; 0x50
 8001d90:	4a2e      	ldr	r2, [pc, #184]	; (8001e4c <sampling+0x78c>)
 8001d92:	5cd3      	ldrb	r3, [r2, r3]
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	4b2f      	ldr	r3, [pc, #188]	; (8001e54 <sampling+0x794>)
 8001d98:	815a      	strh	r2, [r3, #10]


	if ((note_channel[5]) && (adsr_toggle[5]==2)) {note_holdB=note_channel[5]; one_shot=0;}  // grab note when on ,one shot also , also delete
 8001d9a:	4b2e      	ldr	r3, [pc, #184]	; (8001e54 <sampling+0x794>)
 8001d9c:	895b      	ldrh	r3, [r3, #10]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00b      	beq.n	8001dba <sampling+0x6fa>
 8001da2:	4b2f      	ldr	r3, [pc, #188]	; (8001e60 <sampling+0x7a0>)
 8001da4:	795b      	ldrb	r3, [r3, #5]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d107      	bne.n	8001dba <sampling+0x6fa>
 8001daa:	4b2a      	ldr	r3, [pc, #168]	; (8001e54 <sampling+0x794>)
 8001dac:	895b      	ldrh	r3, [r3, #10]
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	4b2c      	ldr	r3, [pc, #176]	; (8001e64 <sampling+0x7a4>)
 8001db2:	701a      	strb	r2, [r3, #0]
 8001db4:	4b2c      	ldr	r3, [pc, #176]	; (8001e68 <sampling+0x7a8>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]


	note_holdB=potValues[80+seq_loop[2]]+(potValues[74]);  //
 8001dba:	4b25      	ldr	r3, [pc, #148]	; (8001e50 <sampling+0x790>)
 8001dbc:	789b      	ldrb	r3, [r3, #2]
 8001dbe:	3350      	adds	r3, #80	; 0x50
 8001dc0:	4a22      	ldr	r2, [pc, #136]	; (8001e4c <sampling+0x78c>)
 8001dc2:	5cd2      	ldrb	r2, [r2, r3]
 8001dc4:	4b21      	ldr	r3, [pc, #132]	; (8001e4c <sampling+0x78c>)
 8001dc6:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8001dca:	4413      	add	r3, r2
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4b25      	ldr	r3, [pc, #148]	; (8001e64 <sampling+0x7a4>)
 8001dd0:	701a      	strb	r2, [r3, #0]

	note_holdB=(note_holdB-4)+(lfo_out[2][i_frac]>>11);  //no go with float
 8001dd2:	4b26      	ldr	r3, [pc, #152]	; (8001e6c <sampling+0x7ac>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	4a26      	ldr	r2, [pc, #152]	; (8001e70 <sampling+0x7b0>)
 8001dd8:	3314      	adds	r3, #20
 8001dda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001dde:	0adb      	lsrs	r3, r3, #11
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	4b1f      	ldr	r3, [pc, #124]	; (8001e64 <sampling+0x7a4>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	4413      	add	r3, r2
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	3b04      	subs	r3, #4
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	4b1c      	ldr	r3, [pc, #112]	; (8001e64 <sampling+0x7a4>)
 8001df2:	701a      	strb	r2, [r3, #0]



	note_holdB=MajorNote[note_holdB];
 8001df4:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <sampling+0x7a4>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <sampling+0x7b4>)
 8001dfc:	5c9a      	ldrb	r2, [r3, r2]
 8001dfe:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <sampling+0x7a4>)
 8001e00:	701a      	strb	r2, [r3, #0]

	sine_adder=sine_lut[note_holdB];	//sets freq ,1.0594  * 16536 =17518  ,
 8001e02:	4b18      	ldr	r3, [pc, #96]	; (8001e64 <sampling+0x7a4>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	461a      	mov	r2, r3
 8001e08:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <sampling+0x7b8>)
 8001e0a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001e0e:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <sampling+0x7bc>)
 8001e10:	801a      	strh	r2, [r3, #0]
	sine_adder= (sine_adder*1200)>>10;  // modify different sample size , just need single cycle length and thats it
 8001e12:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <sampling+0x7bc>)
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001e1c:	fb02 f303 	mul.w	r3, r2, r3
 8001e20:	129b      	asrs	r3, r3, #10
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <sampling+0x7bc>)
 8001e26:	801a      	strh	r2, [r3, #0]
		mask_result =0;
 8001e28:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <sampling+0x7c0>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	801a      	strh	r2, [r3, #0]
		sample_Accu[3]=0; // reset to 0 mani sample hold
		sample_Accu[4]=0; // reset to 0 mani sample hold
		sample_Accu[5]=0; // reset to 0 mani sample hold
*/

		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001e34:	f102 021f 	add.w	r2, r2, #31
 8001e38:	7013      	strb	r3, [r2, #0]
 8001e3a:	e055      	b.n	8001ee8 <sampling+0x828>
 8001e3c:	20001cf6 	.word	0x20001cf6
 8001e40:	20001ca2 	.word	0x20001ca2
 8001e44:	20000c14 	.word	0x20000c14
 8001e48:	200002b4 	.word	0x200002b4
 8001e4c:	200008e4 	.word	0x200008e4
 8001e50:	20001d1c 	.word	0x20001d1c
 8001e54:	20001448 	.word	0x20001448
 8001e58:	20001c8c 	.word	0x20001c8c
 8001e5c:	20000c3c 	.word	0x20000c3c
 8001e60:	20001ca4 	.word	0x20001ca4
 8001e64:	20001cb0 	.word	0x20001cb0
 8001e68:	20001ce8 	.word	0x20001ce8
 8001e6c:	20001e14 	.word	0x20001e14
 8001e70:	20001fa8 	.word	0x20001fa8
 8001e74:	080095ec 	.word	0x080095ec
 8001e78:	20000250 	.word	0x20000250
 8001e7c:	20000c16 	.word	0x20000c16
 8001e80:	20001486 	.word	0x20001486

		if (note_channel[mask_i]) {tune_Accu=sample_Noteadd[MajorNote[note_channel[mask_i]]];   note_tuned[mask_i]=(tune_Accu);       } // relies on note channel clear , not good , clear not channel straight after
 8001e84:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001e88:	f103 031f 	add.w	r3, r3, #31
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	4a60      	ldr	r2, [pc, #384]	; (8002010 <sampling+0x950>)
 8001e90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d01c      	beq.n	8001ed2 <sampling+0x812>
 8001e98:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001e9c:	f103 031f 	add.w	r3, r3, #31
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	4a5b      	ldr	r2, [pc, #364]	; (8002010 <sampling+0x950>)
 8001ea4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4b5a      	ldr	r3, [pc, #360]	; (8002014 <sampling+0x954>)
 8001eac:	5c9b      	ldrb	r3, [r3, r2]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	4b59      	ldr	r3, [pc, #356]	; (8002018 <sampling+0x958>)
 8001eb2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4b58      	ldr	r3, [pc, #352]	; (800201c <sampling+0x95c>)
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	4b57      	ldr	r3, [pc, #348]	; (800201c <sampling+0x95c>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001ec4:	f103 031f 	add.w	r3, r3, #31
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	b291      	uxth	r1, r2
 8001ecc:	4a54      	ldr	r2, [pc, #336]	; (8002020 <sampling+0x960>)
 8001ece:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8001ed2:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001ed6:	f103 031f 	add.w	r3, r3, #31
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	3301      	adds	r3, #1
 8001ede:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001ee2:	f102 021f 	add.w	r2, r2, #31
 8001ee6:	7013      	strb	r3, [r2, #0]
 8001ee8:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001eec:	f103 031f 	add.w	r3, r3, #31
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d9c6      	bls.n	8001e84 <sampling+0x7c4>

  // calc freq 1/isr or 1/16 per note ,need for pitch bend and so on , change depending on decay

// lfo section

	if ((i&63)==0) {   // calculate lfo maybe 8 times for now , seems to fill up
 8001ef6:	4b4b      	ldr	r3, [pc, #300]	; (8002024 <sampling+0x964>)
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f040 8180 	bne.w	8002204 <sampling+0xb44>
freq_temp=0;
 8001f04:	f04f 0300 	mov.w	r3, #0
 8001f08:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001f0c:	f102 0214 	add.w	r2, r2, #20
 8001f10:	6013      	str	r3, [r2, #0]
freq2_temp=0;
 8001f12:	f04f 0300 	mov.w	r3, #0
 8001f16:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001f1a:	f102 0210 	add.w	r2, r2, #16
 8001f1e:	6013      	str	r3, [r2, #0]

//uint8_t i_frac2=(i_frac+7)&7;  //previous value can change shape  , not  bad effect

		for (l=0;l<10;l++){   //current lfo setup , messy
 8001f20:	2300      	movs	r3, #0
 8001f22:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001f26:	f102 021b 	add.w	r2, r2, #27
 8001f2a:	7013      	strb	r3, [r2, #0]
 8001f2c:	e128      	b.n	8002180 <sampling+0xac0>

			freq_temp=potSource[130+l];
 8001f2e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001f32:	f103 031b 	add.w	r3, r3, #27
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	3382      	adds	r3, #130	; 0x82
 8001f3a:	4a3b      	ldr	r2, [pc, #236]	; (8002028 <sampling+0x968>)
 8001f3c:	5cd3      	ldrb	r3, [r2, r3]
 8001f3e:	ee07 3a90 	vmov	s15, r3
 8001f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f46:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001f4a:	f103 0314 	add.w	r3, r3, #20
 8001f4e:	edc3 7a00 	vstr	s15, [r3]
			freq2_temp=freq_temp*tempo_sync ; //correction to one note per cycle ,fixed , maybe loose this
 8001f52:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001f56:	f103 0314 	add.w	r3, r3, #20
 8001f5a:	ed93 7a00 	vldr	s14, [r3]
 8001f5e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001f62:	f103 0308 	add.w	r3, r3, #8
 8001f66:	edd3 7a00 	vldr	s15, [r3]
 8001f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f6e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001f72:	f103 0310 	add.w	r3, r3, #16
 8001f76:	edc3 7a00 	vstr	s15, [r3]

			freq_temp=lfo_accu[l][i_frac]+ freq2_temp;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar
 8001f7a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001f7e:	f103 031b 	add.w	r3, r3, #27
 8001f82:	781a      	ldrb	r2, [r3, #0]
 8001f84:	4b29      	ldr	r3, [pc, #164]	; (800202c <sampling+0x96c>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	4929      	ldr	r1, [pc, #164]	; (8002030 <sampling+0x970>)
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	4403      	add	r3, r0
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	edd3 7a00 	vldr	s15, [r3]
 8001f9e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001fa2:	f103 0310 	add.w	r3, r3, #16
 8001fa6:	ed93 7a00 	vldr	s14, [r3]
 8001faa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fae:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001fb2:	f103 0314 	add.w	r3, r3, #20
 8001fb6:	edc3 7a00 	vstr	s15, [r3]


//			if ((tempo_count<50) && ((next_isr&15)==15)) freq_temp=0;   // trying retrigger
		if (freq_temp>16384) lfo_accu[l][i_frac]=freq_temp-16384; else lfo_accu[l][i_frac]=freq_temp; // write back value
 8001fba:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001fbe:	f103 0314 	add.w	r3, r3, #20
 8001fc2:	edd3 7a00 	vldr	s15, [r3]
 8001fc6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002034 <sampling+0x974>
 8001fca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd2:	dd31      	ble.n	8002038 <sampling+0x978>
 8001fd4:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001fd8:	f103 031b 	add.w	r3, r3, #27
 8001fdc:	781a      	ldrb	r2, [r3, #0]
 8001fde:	4b13      	ldr	r3, [pc, #76]	; (800202c <sampling+0x96c>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001fe8:	f103 0314 	add.w	r3, r3, #20
 8001fec:	edd3 7a00 	vldr	s15, [r3]
 8001ff0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002034 <sampling+0x974>
 8001ff4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ff8:	490d      	ldr	r1, [pc, #52]	; (8002030 <sampling+0x970>)
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	4403      	add	r3, r0
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	440b      	add	r3, r1
 8002008:	edc3 7a00 	vstr	s15, [r3]
 800200c:	e02a      	b.n	8002064 <sampling+0x9a4>
 800200e:	bf00      	nop
 8002010:	20001448 	.word	0x20001448
 8002014:	080095ec 	.word	0x080095ec
 8002018:	08009608 	.word	0x08009608
 800201c:	20000c10 	.word	0x20000c10
 8002020:	20000bf8 	.word	0x20000bf8
 8002024:	20000c3c 	.word	0x20000c3c
 8002028:	20000a64 	.word	0x20000a64
 800202c:	20001e14 	.word	0x20001e14
 8002030:	20001e18 	.word	0x20001e18
 8002034:	46800000 	.word	0x46800000
 8002038:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800203c:	f103 031b 	add.w	r3, r3, #27
 8002040:	781a      	ldrb	r2, [r3, #0]
 8002042:	4b7d      	ldr	r3, [pc, #500]	; (8002238 <sampling+0xb78>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	497c      	ldr	r1, [pc, #496]	; (800223c <sampling+0xb7c>)
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	4403      	add	r3, r0
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	440b      	add	r3, r1
 8002058:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800205c:	f102 0214 	add.w	r2, r2, #20
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	601a      	str	r2, [r3, #0]
		freq_temp=lfo_accu[l][i_frac]; // 0-255 limit + above zero
 8002064:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002068:	f103 031b 	add.w	r3, r3, #27
 800206c:	781a      	ldrb	r2, [r3, #0]
 800206e:	4b72      	ldr	r3, [pc, #456]	; (8002238 <sampling+0xb78>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	4971      	ldr	r1, [pc, #452]	; (800223c <sampling+0xb7c>)
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4403      	add	r3, r0
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800208a:	f102 0214 	add.w	r2, r2, #20
 800208e:	6013      	str	r3, [r2, #0]
		freq_temp=freq_temp*0.000383495;  // 0-255 , chang this for depth
 8002090:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002094:	f103 0314 	add.w	r3, r3, #20
 8002098:	6818      	ldr	r0, [r3, #0]
 800209a:	f7fe fb7f 	bl	800079c <__aeabi_f2d>
 800209e:	a362      	add	r3, pc, #392	; (adr r3, 8002228 <sampling+0xb68>)
 80020a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a4:	f7fe f8ec 	bl	8000280 <__aeabi_dmul>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	4610      	mov	r0, r2
 80020ae:	4619      	mov	r1, r3
 80020b0:	f7fe fbcc 	bl	800084c <__aeabi_d2f>
 80020b4:	4603      	mov	r3, r0
 80020b6:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80020ba:	f102 0214 	add.w	r2, r2, #20
 80020be:	6013      	str	r3, [r2, #0]
		freq2_temp =arm_sin_f32(freq_temp); // seems to be working ok till here , not doing right here now
 80020c0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80020c4:	f103 0314 	add.w	r3, r3, #20
 80020c8:	6818      	ldr	r0, [r3, #0]
 80020ca:	f7fe fb67 	bl	800079c <__aeabi_f2d>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	ec43 2b10 	vmov	d0, r2, r3
 80020d6:	f006 f909 	bl	80082ec <arm_sin_f32>
 80020da:	ee07 0a90 	vmov	s15, r0
 80020de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020e2:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80020e6:	f103 0310 	add.w	r3, r3, #16
 80020ea:	edc3 7a00 	vstr	s15, [r3]
		freq_temp=freq2_temp*potSource[140+l]*51;   // not working  proper something with angles i think
 80020ee:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80020f2:	f103 031b 	add.w	r3, r3, #27
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	338c      	adds	r3, #140	; 0x8c
 80020fa:	4a51      	ldr	r2, [pc, #324]	; (8002240 <sampling+0xb80>)
 80020fc:	5cd3      	ldrb	r3, [r2, r3]
 80020fe:	ee07 3a90 	vmov	s15, r3
 8002102:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002106:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800210a:	f103 0310 	add.w	r3, r3, #16
 800210e:	edd3 7a00 	vldr	s15, [r3]
 8002112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002116:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8002244 <sampling+0xb84>
 800211a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800211e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002122:	f103 0314 	add.w	r3, r3, #20
 8002126:	edc3 7a00 	vstr	s15, [r3]

		lfo_out[l] [i_frac]=freq_temp+8195; // ok now
 800212a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800212e:	f103 0314 	add.w	r3, r3, #20
 8002132:	edd3 7a00 	vldr	s15, [r3]
 8002136:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002248 <sampling+0xb88>
 800213a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800213e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002142:	f103 031b 	add.w	r3, r3, #27
 8002146:	781a      	ldrb	r2, [r3, #0]
 8002148:	4b3b      	ldr	r3, [pc, #236]	; (8002238 <sampling+0xb78>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	461c      	mov	r4, r3
 800214e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002152:	ee17 3a90 	vmov	r3, s15
 8002156:	b298      	uxth	r0, r3
 8002158:	493c      	ldr	r1, [pc, #240]	; (800224c <sampling+0xb8c>)
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	4423      	add	r3, r4
 8002164:	4602      	mov	r2, r0
 8002166:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (l=0;l<10;l++){   //current lfo setup , messy
 800216a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800216e:	f103 031b 	add.w	r3, r3, #27
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	3301      	adds	r3, #1
 8002176:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800217a:	f102 021b 	add.w	r2, r2, #27
 800217e:	7013      	strb	r3, [r2, #0]
 8002180:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002184:	f103 031b 	add.w	r3, r3, #27
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b09      	cmp	r3, #9
 800218c:	f67f aecf 	bls.w	8001f2e <sampling+0x86e>

		} // lfo gen : 0=f1 , 1=tempo,2=pitch


			freq_pointer[0] [i_frac]=lfo_out [0][i_frac]*0.00006435; // problem was selecting accu instead of out , good now
 8002190:	4b29      	ldr	r3, [pc, #164]	; (8002238 <sampling+0xb78>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	461a      	mov	r2, r3
 8002196:	4b2d      	ldr	r3, [pc, #180]	; (800224c <sampling+0xb8c>)
 8002198:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe faeb 	bl	8000778 <__aeabi_i2d>
 80021a2:	a323      	add	r3, pc, #140	; (adr r3, 8002230 <sampling+0xb70>)
 80021a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a8:	f7fe f86a 	bl	8000280 <__aeabi_dmul>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	4921      	ldr	r1, [pc, #132]	; (8002238 <sampling+0xb78>)
 80021b2:	7809      	ldrb	r1, [r1, #0]
 80021b4:	460c      	mov	r4, r1
 80021b6:	4610      	mov	r0, r2
 80021b8:	4619      	mov	r1, r3
 80021ba:	f7fe fb47 	bl	800084c <__aeabi_d2f>
 80021be:	4602      	mov	r2, r0
 80021c0:	4923      	ldr	r1, [pc, #140]	; (8002250 <sampling+0xb90>)
 80021c2:	00a3      	lsls	r3, r4, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	601a      	str	r2, [r3, #0]
		freq_pointer[2] [i_frac] =lfo_out [3][i_frac]*0.00006435;; // filter lfos
 80021c8:	4b1b      	ldr	r3, [pc, #108]	; (8002238 <sampling+0xb78>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	4a1f      	ldr	r2, [pc, #124]	; (800224c <sampling+0xb8c>)
 80021ce:	331e      	adds	r3, #30
 80021d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe facf 	bl	8000778 <__aeabi_i2d>
 80021da:	a315      	add	r3, pc, #84	; (adr r3, 8002230 <sampling+0xb70>)
 80021dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e0:	f7fe f84e 	bl	8000280 <__aeabi_dmul>
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	4913      	ldr	r1, [pc, #76]	; (8002238 <sampling+0xb78>)
 80021ea:	7809      	ldrb	r1, [r1, #0]
 80021ec:	460c      	mov	r4, r1
 80021ee:	4610      	mov	r0, r2
 80021f0:	4619      	mov	r1, r3
 80021f2:	f7fe fb2b 	bl	800084c <__aeabi_d2f>
 80021f6:	4602      	mov	r2, r0
 80021f8:	4915      	ldr	r1, [pc, #84]	; (8002250 <sampling+0xb90>)
 80021fa:	f104 0312 	add.w	r3, r4, #18
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	601a      	str	r2, [r3, #0]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002204:	4b13      	ldr	r3, [pc, #76]	; (8002254 <sampling+0xb94>)
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	3301      	adds	r3, #1
 800220a:	b29a      	uxth	r2, r3
 800220c:	4b11      	ldr	r3, [pc, #68]	; (8002254 <sampling+0xb94>)
 800220e:	801a      	strh	r2, [r3, #0]
 8002210:	4b10      	ldr	r3, [pc, #64]	; (8002254 <sampling+0xb94>)
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002218:	f4ff aca2 	bcc.w	8001b60 <sampling+0x4a0>
// filter loop
int32_t play_holder1[512];    // data banks
int32_t play_holder2[512];


for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 800221c:	4b0d      	ldr	r3, [pc, #52]	; (8002254 <sampling+0xb94>)
 800221e:	2200      	movs	r2, #0
 8002220:	801a      	strh	r2, [r3, #0]
 8002222:	e0f7      	b.n	8002414 <sampling+0xd54>
 8002224:	f3af 8000 	nop.w
 8002228:	7bb1a72c 	.word	0x7bb1a72c
 800222c:	3f3921fa 	.word	0x3f3921fa
 8002230:	94fd52a7 	.word	0x94fd52a7
 8002234:	3f10de74 	.word	0x3f10de74
 8002238:	20001e14 	.word	0x20001e14
 800223c:	20001e18 	.word	0x20001e18
 8002240:	20000a64 	.word	0x20000a64
 8002244:	424c0000 	.word	0x424c0000
 8002248:	46000c00 	.word	0x46000c00
 800224c:	20001fa8 	.word	0x20001fa8
 8002250:	20001d84 	.word	0x20001d84
 8002254:	20000c3c 	.word	0x20000c3c
	i_total=i+sample_pointB;
 8002258:	4b7a      	ldr	r3, [pc, #488]	; (8002444 <sampling+0xd84>)
 800225a:	881a      	ldrh	r2, [r3, #0]
 800225c:	4b7a      	ldr	r3, [pc, #488]	; (8002448 <sampling+0xd88>)
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	4413      	add	r3, r2
 8002262:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002266:	f102 021e 	add.w	r2, r2, #30
 800226a:	8013      	strh	r3, [r2, #0]
	i_frac=(i>>6);
 800226c:	4b75      	ldr	r3, [pc, #468]	; (8002444 <sampling+0xd84>)
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	099b      	lsrs	r3, r3, #6
 8002272:	b29b      	uxth	r3, r3
 8002274:	b2da      	uxtb	r2, r3
 8002276:	4b75      	ldr	r3, [pc, #468]	; (800244c <sampling+0xd8c>)
 8002278:	701a      	strb	r2, [r3, #0]
// every step   1,110,928   >>20  ,per note
// New oscillators , sync, trigger input , waveshape ,zero cross
	sample_accus[0] = sample_accus[0] + note_tuned[0]; //careful with signed bit shift,better compare
 800227a:	4b75      	ldr	r3, [pc, #468]	; (8002450 <sampling+0xd90>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a75      	ldr	r2, [pc, #468]	; (8002454 <sampling+0xd94>)
 8002280:	8812      	ldrh	r2, [r2, #0]
 8002282:	4413      	add	r3, r2
 8002284:	4a72      	ldr	r2, [pc, #456]	; (8002450 <sampling+0xd90>)
 8002286:	6013      	str	r3, [r2, #0]

	if (sample_accus[0]>524287) sample_accus[0] =-sample_accus[0] ; // faster >  than &  ,strange
 8002288:	4b71      	ldr	r3, [pc, #452]	; (8002450 <sampling+0xd90>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002290:	db04      	blt.n	800229c <sampling+0xbdc>
 8002292:	4b6f      	ldr	r3, [pc, #444]	; (8002450 <sampling+0xd90>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	425b      	negs	r3, r3
 8002298:	4a6d      	ldr	r2, [pc, #436]	; (8002450 <sampling+0xd90>)
 800229a:	6013      	str	r3, [r2, #0]



	sample_accus[1] = sample_accus[1] + note_tuned[1];  // normal adder full volume
 800229c:	4b6c      	ldr	r3, [pc, #432]	; (8002450 <sampling+0xd90>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	4a6c      	ldr	r2, [pc, #432]	; (8002454 <sampling+0xd94>)
 80022a2:	8852      	ldrh	r2, [r2, #2]
 80022a4:	4413      	add	r3, r2
 80022a6:	4a6a      	ldr	r2, [pc, #424]	; (8002450 <sampling+0xd90>)
 80022a8:	6053      	str	r3, [r2, #4]
		//	if (!(note_channel[0]))   sample_accus[1] =0;  // turn off with vel now , maybe use mask
			if (sample_accus[1]>524287) sample_accus[1] =-sample_accus[1] ; // faster >  than &  ,strange
 80022aa:	4b69      	ldr	r3, [pc, #420]	; (8002450 <sampling+0xd90>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80022b2:	db04      	blt.n	80022be <sampling+0xbfe>
 80022b4:	4b66      	ldr	r3, [pc, #408]	; (8002450 <sampling+0xd90>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	425b      	negs	r3, r3
 80022ba:	4a65      	ldr	r2, [pc, #404]	; (8002450 <sampling+0xd90>)
 80022bc:	6053      	str	r3, [r2, #4]

			sample_accus[2] = sample_accus[2] + note_tuned[2];
 80022be:	4b64      	ldr	r3, [pc, #400]	; (8002450 <sampling+0xd90>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	4a64      	ldr	r2, [pc, #400]	; (8002454 <sampling+0xd94>)
 80022c4:	8892      	ldrh	r2, [r2, #4]
 80022c6:	4413      	add	r3, r2
 80022c8:	4a61      	ldr	r2, [pc, #388]	; (8002450 <sampling+0xd90>)
 80022ca:	6093      	str	r3, [r2, #8]
			//		if (!(note_channel[0]))   sample_accus[2] =0;  // turn off with vel now , maybe use mask
					if (sample_accus[2]>524287) sample_accus[2] =-sample_accus[2] ; // faster >  than &  ,strange
 80022cc:	4b60      	ldr	r3, [pc, #384]	; (8002450 <sampling+0xd90>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80022d4:	db04      	blt.n	80022e0 <sampling+0xc20>
 80022d6:	4b5e      	ldr	r3, [pc, #376]	; (8002450 <sampling+0xd90>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	425b      	negs	r3, r3
 80022dc:	4a5c      	ldr	r2, [pc, #368]	; (8002450 <sampling+0xd90>)
 80022de:	6093      	str	r3, [r2, #8]

					sample_accus[3] = sample_accus[3] + note_tuned[3]; // bouncing somewhere
 80022e0:	4b5b      	ldr	r3, [pc, #364]	; (8002450 <sampling+0xd90>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	4a5b      	ldr	r2, [pc, #364]	; (8002454 <sampling+0xd94>)
 80022e6:	88d2      	ldrh	r2, [r2, #6]
 80022e8:	4413      	add	r3, r2
 80022ea:	4a59      	ldr	r2, [pc, #356]	; (8002450 <sampling+0xd90>)
 80022ec:	60d3      	str	r3, [r2, #12]
					//sample_accus[3] = sample_accus[3] +4000;
					//	if (!(note_channel[0]))   sample_accus[3] =0;  // turn off with vel now , maybe use mask
							if (sample_accus[3]>524287) sample_accus[3] =-sample_accus[3] ; // faster >  than &  ,strange
 80022ee:	4b58      	ldr	r3, [pc, #352]	; (8002450 <sampling+0xd90>)
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80022f6:	db04      	blt.n	8002302 <sampling+0xc42>
 80022f8:	4b55      	ldr	r3, [pc, #340]	; (8002450 <sampling+0xd90>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	425b      	negs	r3, r3
 80022fe:	4a54      	ldr	r2, [pc, #336]	; (8002450 <sampling+0xd90>)
 8002300:	60d3      	str	r3, [r2, #12]

							sample_accus[4] = sample_accus[4] + note_tuned[4];
 8002302:	4b53      	ldr	r3, [pc, #332]	; (8002450 <sampling+0xd90>)
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	4a53      	ldr	r2, [pc, #332]	; (8002454 <sampling+0xd94>)
 8002308:	8912      	ldrh	r2, [r2, #8]
 800230a:	4413      	add	r3, r2
 800230c:	4a50      	ldr	r2, [pc, #320]	; (8002450 <sampling+0xd90>)
 800230e:	6113      	str	r3, [r2, #16]
								//	if (!(note_channel[4]))   sample_accus[4] =0;  // turn off with vel now , maybe use mask
									if (sample_accus[4]>524287) sample_accus[4] =-sample_accus[4] ; // faster >  than &  ,strange
 8002310:	4b4f      	ldr	r3, [pc, #316]	; (8002450 <sampling+0xd90>)
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002318:	db04      	blt.n	8002324 <sampling+0xc64>
 800231a:	4b4d      	ldr	r3, [pc, #308]	; (8002450 <sampling+0xd90>)
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	425b      	negs	r3, r3
 8002320:	4a4b      	ldr	r2, [pc, #300]	; (8002450 <sampling+0xd90>)
 8002322:	6113      	str	r3, [r2, #16]

									sample_Accu[2] = 0;sample_Accu[0] =0;sample_Accu[3] =0; //all zeroed
 8002324:	4b4c      	ldr	r3, [pc, #304]	; (8002458 <sampling+0xd98>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
 800232a:	4b4b      	ldr	r3, [pc, #300]	; (8002458 <sampling+0xd98>)
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	4b49      	ldr	r3, [pc, #292]	; (8002458 <sampling+0xd98>)
 8002332:	2200      	movs	r2, #0
 8002334:	60da      	str	r2, [r3, #12]
									//if (sample_accus[2]<0) sample_Accu[2]=+sample_accus[2]; else sample_Accu[2]=sample_accus[2]; // convert to triangle ?
									sample_Accu[0]=sample_accus[2]>>7; // needs cut a bit
 8002336:	4b46      	ldr	r3, [pc, #280]	; (8002450 <sampling+0xd90>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	11db      	asrs	r3, r3, #7
 800233c:	4a46      	ldr	r2, [pc, #280]	; (8002458 <sampling+0xd98>)
 800233e:	6013      	str	r3, [r2, #0]

							sample_Accu[0] = ((sine_out+sample_Accu[0])*cross_fade[1]);   // sine input
 8002340:	4b45      	ldr	r3, [pc, #276]	; (8002458 <sampling+0xd98>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	4b45      	ldr	r3, [pc, #276]	; (800245c <sampling+0xd9c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4413      	add	r3, r2
 800234a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800234e:	f102 0219 	add.w	r2, r2, #25
 8002352:	7812      	ldrb	r2, [r2, #0]
 8002354:	fb02 f303 	mul.w	r3, r2, r3
 8002358:	4a3f      	ldr	r2, [pc, #252]	; (8002458 <sampling+0xd98>)
 800235a:	6013      	str	r3, [r2, #0]

									//if (sample_accus[3]<0) sample_Accu[3]=+sample_accus[3]; else sample_Accu[3]=sample_accus[3]; // convert to triangle
									sample_Accu[3]=sample_accus[3];
 800235c:	4b3c      	ldr	r3, [pc, #240]	; (8002450 <sampling+0xd90>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	4a3d      	ldr	r2, [pc, #244]	; (8002458 <sampling+0xd98>)
 8002362:	60d3      	str	r3, [r2, #12]
									sample_Accu[2] = (sample_Accu[3]*cross_fade[2]);			//27b, 2 out f2  might do a crossfade here using pot 3
 8002364:	4b3c      	ldr	r3, [pc, #240]	; (8002458 <sampling+0xd98>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800236c:	f102 021a 	add.w	r2, r2, #26
 8002370:	7812      	ldrb	r2, [r2, #0]
 8002372:	fb02 f303 	mul.w	r3, r2, r3
 8002376:	4a38      	ldr	r2, [pc, #224]	; (8002458 <sampling+0xd98>)
 8002378:	6093      	str	r3, [r2, #8]
									//	sample_Accu[5] = sample_Accu[4]+ (sample_accus[4]*4);			// drum and envelope

	//	sample_Accu=sample_Accu-(1<<21);


if (sine_counterB==0) 	sine_temp2=sine_adder;
 800237a:	4b39      	ldr	r3, [pc, #228]	; (8002460 <sampling+0xda0>)
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d103      	bne.n	800238a <sampling+0xcca>
 8002382:	4b38      	ldr	r3, [pc, #224]	; (8002464 <sampling+0xda4>)
 8002384:	881a      	ldrh	r2, [r3, #0]
 8002386:	4b38      	ldr	r3, [pc, #224]	; (8002468 <sampling+0xda8>)
 8002388:	801a      	strh	r2, [r3, #0]

	sine_counterB=sine_counterB+sine_temp2 ;  // sine up counter per cycle , however sine adder nees to wait
 800238a:	4b35      	ldr	r3, [pc, #212]	; (8002460 <sampling+0xda0>)
 800238c:	881a      	ldrh	r2, [r3, #0]
 800238e:	4b36      	ldr	r3, [pc, #216]	; (8002468 <sampling+0xda8>)
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	4413      	add	r3, r2
 8002394:	b29a      	uxth	r2, r3
 8002396:	4b32      	ldr	r3, [pc, #200]	; (8002460 <sampling+0xda0>)
 8002398:	801a      	strh	r2, [r3, #0]
	if (sine_counterB>>7) sine_zero=0; else sine_zero=1;
 800239a:	4b31      	ldr	r3, [pc, #196]	; (8002460 <sampling+0xda0>)
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	09db      	lsrs	r3, r3, #7
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d006      	beq.n	80023b4 <sampling+0xcf4>
 80023a6:	2300      	movs	r3, #0
 80023a8:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80023ac:	f102 021c 	add.w	r2, r2, #28
 80023b0:	8013      	strh	r3, [r2, #0]
 80023b2:	e005      	b.n	80023c0 <sampling+0xd00>
 80023b4:	2301      	movs	r3, #1
 80023b6:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80023ba:	f102 021c 	add.w	r2, r2, #28
 80023be:	8013      	strh	r3, [r2, #0]

if (sine_counterB>(sine_length<<5)) sine_counterB=0; //fixed for now
 80023c0:	4b27      	ldr	r3, [pc, #156]	; (8002460 <sampling+0xda0>)
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	461a      	mov	r2, r3
 80023c6:	4b29      	ldr	r3, [pc, #164]	; (800246c <sampling+0xdac>)
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	015b      	lsls	r3, r3, #5
 80023cc:	429a      	cmp	r2, r3
 80023ce:	dd02      	ble.n	80023d6 <sampling+0xd16>
 80023d0:	4b23      	ldr	r3, [pc, #140]	; (8002460 <sampling+0xda0>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	801a      	strh	r2, [r3, #0]
sine_count(); // calc sine
 80023d6:	f000 fa7b 	bl	80028d0 <sine_count>
play_holder1[i]=sample_Accu[0];  // write to bank
 80023da:	4b1a      	ldr	r3, [pc, #104]	; (8002444 <sampling+0xd84>)
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	4619      	mov	r1, r3
 80023e0:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <sampling+0xd98>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80023e8:	f6a3 039c 	subw	r3, r3, #2204	; 0x89c
 80023ec:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
play_holder2[i]=sample_Accu[2];
 80023f0:	4b14      	ldr	r3, [pc, #80]	; (8002444 <sampling+0xd84>)
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	4b18      	ldr	r3, [pc, #96]	; (8002458 <sampling+0xd98>)
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80023fe:	4619      	mov	r1, r3
 8002400:	0083      	lsls	r3, r0, #2
 8002402:	440b      	add	r3, r1
 8002404:	f843 2c9c 	str.w	r2, [r3, #-156]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002408:	4b0e      	ldr	r3, [pc, #56]	; (8002444 <sampling+0xd84>)
 800240a:	881b      	ldrh	r3, [r3, #0]
 800240c:	3301      	adds	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <sampling+0xd84>)
 8002412:	801a      	strh	r2, [r3, #0]
 8002414:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <sampling+0xd84>)
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800241c:	f4ff af1c 	bcc.w	8002258 <sampling+0xb98>


} // end of osc , doing some sound

HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go
 8002420:	4813      	ldr	r0, [pc, #76]	; (8002470 <sampling+0xdb0>)
 8002422:	f001 fe5d 	bl	80040e0 <HAL_ADC_Stop_DMA>
HAL_ADC_Start_DMA(&hadc1, adc_source, 512); //dma start ,needs this and adc start ,set sampling time
 8002426:	f44f 7200 	mov.w	r2, #512	; 0x200
 800242a:	4912      	ldr	r1, [pc, #72]	; (8002474 <sampling+0xdb4>)
 800242c:	4810      	ldr	r0, [pc, #64]	; (8002470 <sampling+0xdb0>)
 800242e:	f001 fd67 	bl	8003f00 <HAL_ADC_Start_DMA>

int32_t filter_Accu;


int32_t feedback_out=filter_out[3];
 8002432:	4b11      	ldr	r3, [pc, #68]	; (8002478 <sampling+0xdb8>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800243a:	6013      	str	r3, [r2, #0]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out
 800243c:	4b01      	ldr	r3, [pc, #4]	; (8002444 <sampling+0xd84>)
 800243e:	2200      	movs	r2, #0
 8002440:	801a      	strh	r2, [r3, #0]
 8002442:	e22f      	b.n	80028a4 <sampling+0x11e4>
 8002444:	20000c3c 	.word	0x20000c3c
 8002448:	20000c3a 	.word	0x20000c3a
 800244c:	20001e14 	.word	0x20001e14
 8002450:	20001cd0 	.word	0x20001cd0
 8002454:	20000bf8 	.word	0x20000bf8
 8002458:	20000c1c 	.word	0x20000c1c
 800245c:	20000bf0 	.word	0x20000bf0
 8002460:	20000bee 	.word	0x20000bee
 8002464:	20000c16 	.word	0x20000c16
 8002468:	20000bf4 	.word	0x20000bf4
 800246c:	2000024e 	.word	0x2000024e
 8002470:	20002a00 	.word	0x20002a00
 8002474:	20001488 	.word	0x20001488
 8002478:	20001cb4 	.word	0x20001cb4
	i_total=i+sample_pointB;
 800247c:	4b36      	ldr	r3, [pc, #216]	; (8002558 <sampling+0xe98>)
 800247e:	881a      	ldrh	r2, [r3, #0]
 8002480:	4b36      	ldr	r3, [pc, #216]	; (800255c <sampling+0xe9c>)
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	4413      	add	r3, r2
 8002486:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800248a:	f102 021e 	add.w	r2, r2, #30
 800248e:	8013      	strh	r3, [r2, #0]
i_frac=(i>>6);
 8002490:	4b31      	ldr	r3, [pc, #196]	; (8002558 <sampling+0xe98>)
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	099b      	lsrs	r3, r3, #6
 8002496:	b29b      	uxth	r3, r3
 8002498:	b2da      	uxtb	r2, r3
 800249a:	4b31      	ldr	r3, [pc, #196]	; (8002560 <sampling+0xea0>)
 800249c:	701a      	strb	r2, [r3, #0]

// filter 1
if (		(note_toggler[i>>5]	)==(1<<(i&31)	)) 				{adsr_temp =0;  trigger_counter++; trigger_counter=trigger_counter&1023  ;}
 800249e:	4b2e      	ldr	r3, [pc, #184]	; (8002558 <sampling+0xe98>)
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 80024ac:	443b      	add	r3, r7
 80024ae:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80024b2:	4a29      	ldr	r2, [pc, #164]	; (8002558 <sampling+0xe98>)
 80024b4:	8812      	ldrh	r2, [r2, #0]
 80024b6:	f002 021f 	and.w	r2, r2, #31
 80024ba:	2101      	movs	r1, #1
 80024bc:	fa01 f202 	lsl.w	r2, r1, r2
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d10f      	bne.n	80024e4 <sampling+0xe24>
 80024c4:	4b27      	ldr	r3, [pc, #156]	; (8002564 <sampling+0xea4>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	701a      	strb	r2, [r3, #0]
 80024ca:	4b27      	ldr	r3, [pc, #156]	; (8002568 <sampling+0xea8>)
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	3301      	adds	r3, #1
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	4b25      	ldr	r3, [pc, #148]	; (8002568 <sampling+0xea8>)
 80024d4:	801a      	strh	r2, [r3, #0]
 80024d6:	4b24      	ldr	r3, [pc, #144]	; (8002568 <sampling+0xea8>)
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024de:	b29a      	uxth	r2, r3
 80024e0:	4b21      	ldr	r3, [pc, #132]	; (8002568 <sampling+0xea8>)
 80024e2:	801a      	strh	r2, [r3, #0]

//if (feedback_out>0xFFFF) feedback_out=0xFFFF; else if (feedback_out<-65535) feedback_out=-65535;  // limiter to 16 bits
sample_Accu[1]=input_holder[i];
 80024e4:	4b1c      	ldr	r3, [pc, #112]	; (8002558 <sampling+0xe98>)
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	461a      	mov	r2, r3
 80024ea:	4b20      	ldr	r3, [pc, #128]	; (800256c <sampling+0xeac>)
 80024ec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80024f0:	461a      	mov	r2, r3
 80024f2:	4b1f      	ldr	r3, [pc, #124]	; (8002570 <sampling+0xeb0>)
 80024f4:	605a      	str	r2, [r3, #4]

sample_Accu[1]=(sample_Accu[1]-1020)<<15; // shit to correct level
 80024f6:	4b1e      	ldr	r3, [pc, #120]	; (8002570 <sampling+0xeb0>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80024fe:	03db      	lsls	r3, r3, #15
 8002500:	4a1b      	ldr	r2, [pc, #108]	; (8002570 <sampling+0xeb0>)
 8002502:	6053      	str	r3, [r2, #4]
//sample_Accu[1]=sample_Accu[1]-60000;
//sample_Accu[1]=play_holder1[i];  // sine input

freq_point[0]=freq_pointer[0] [i_frac];; // load up coeffs
 8002504:	4b16      	ldr	r3, [pc, #88]	; (8002560 <sampling+0xea0>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	4a1a      	ldr	r2, [pc, #104]	; (8002574 <sampling+0xeb4>)
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a19      	ldr	r2, [pc, #100]	; (8002578 <sampling+0xeb8>)
 8002512:	6013      	str	r3, [r2, #0]
//freq_point[1]=freq_pointer[1] [i_frac];
freq_point[2]=freq_pointer[2] [i_frac];  // ok , array was too short
 8002514:	4b12      	ldr	r3, [pc, #72]	; (8002560 <sampling+0xea0>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	4a16      	ldr	r2, [pc, #88]	; (8002574 <sampling+0xeb4>)
 800251a:	3312      	adds	r3, #18
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a15      	ldr	r2, [pc, #84]	; (8002578 <sampling+0xeb8>)
 8002524:	6093      	str	r3, [r2, #8]
//freq_point[3]=freq_pointer[3] [i_frac];
//freq_point[0]=0.5;  //was ok with this
	//	freq_point[2]=0.5;


adsr_level[3] = adsr_lut	[i>>1];
 8002526:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <sampling+0xe98>)
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	085b      	lsrs	r3, r3, #1
 800252c:	b29b      	uxth	r3, r3
 800252e:	4a13      	ldr	r2, [pc, #76]	; (800257c <sampling+0xebc>)
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a12      	ldr	r2, [pc, #72]	; (8002580 <sampling+0xec0>)
 8002538:	60d3      	str	r3, [r2, #12]


if (freq_point[0]>1) freq_point[0]=1; else if (freq_point[0]<0) freq_point[0]=0;// just in case
 800253a:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <sampling+0xeb8>)
 800253c:	edd3 7a00 	vldr	s15, [r3]
 8002540:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002544:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254c:	dd1a      	ble.n	8002584 <sampling+0xec4>
 800254e:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <sampling+0xeb8>)
 8002550:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	e021      	b.n	800259c <sampling+0xedc>
 8002558:	20000c3c 	.word	0x20000c3c
 800255c:	20000c3a 	.word	0x20000c3a
 8002560:	20001e14 	.word	0x20001e14
 8002564:	20001c88 	.word	0x20001c88
 8002568:	20001e16 	.word	0x20001e16
 800256c:	20002600 	.word	0x20002600
 8002570:	20000c1c 	.word	0x20000c1c
 8002574:	20001d84 	.word	0x20001d84
 8002578:	20001d74 	.word	0x20001d74
 800257c:	20001888 	.word	0x20001888
 8002580:	200025b4 	.word	0x200025b4
 8002584:	4bae      	ldr	r3, [pc, #696]	; (8002840 <sampling+0x1180>)
 8002586:	edd3 7a00 	vldr	s15, [r3]
 800258a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800258e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002592:	d503      	bpl.n	800259c <sampling+0xedc>
 8002594:	4baa      	ldr	r3, [pc, #680]	; (8002840 <sampling+0x1180>)
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
		//freq_point[0]=0.50;
		freq_point[1]=1-freq_point[0];
 800259c:	4ba8      	ldr	r3, [pc, #672]	; (8002840 <sampling+0x1180>)
 800259e:	edd3 7a00 	vldr	s15, [r3]
 80025a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025aa:	4ba5      	ldr	r3, [pc, #660]	; (8002840 <sampling+0x1180>)
 80025ac:	edc3 7a01 	vstr	s15, [r3, #4]
		filter_accus[1]=sample_Accu[1];
 80025b0:	4ba4      	ldr	r3, [pc, #656]	; (8002844 <sampling+0x1184>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	ee07 3a90 	vmov	s15, r3
 80025b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025bc:	4ba2      	ldr	r3, [pc, #648]	; (8002848 <sampling+0x1188>)
 80025be:	edc3 7a01 	vstr	s15, [r3, #4]
	//	filter_accus[1]=sample_Accu[1]+((filter_hold[0])*0.5); // saw
	//	filter_accus[1]=	filter_accus[1]*adsr_level[3][i_frac];
		filter_accus[1]=	filter_accus[1]*adsr_level[3];
 80025c2:	4ba1      	ldr	r3, [pc, #644]	; (8002848 <sampling+0x1188>)
 80025c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80025c8:	4ba0      	ldr	r3, [pc, #640]	; (800284c <sampling+0x118c>)
 80025ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80025ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025d2:	4b9d      	ldr	r3, [pc, #628]	; (8002848 <sampling+0x1188>)
 80025d4:	edc3 7a01 	vstr	s15, [r3, #4]

		filter_accus[2]=(filter_accus[1]*freq_point[0])+(filter_accus[2]*freq_point[1]);					// maybe allow bandpass insted of lpf
 80025d8:	4b9b      	ldr	r3, [pc, #620]	; (8002848 <sampling+0x1188>)
 80025da:	ed93 7a01 	vldr	s14, [r3, #4]
 80025de:	4b98      	ldr	r3, [pc, #608]	; (8002840 <sampling+0x1180>)
 80025e0:	edd3 7a00 	vldr	s15, [r3]
 80025e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025e8:	4b97      	ldr	r3, [pc, #604]	; (8002848 <sampling+0x1188>)
 80025ea:	edd3 6a02 	vldr	s13, [r3, #8]
 80025ee:	4b94      	ldr	r3, [pc, #592]	; (8002840 <sampling+0x1180>)
 80025f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80025f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025fc:	4b92      	ldr	r3, [pc, #584]	; (8002848 <sampling+0x1188>)
 80025fe:	edc3 7a02 	vstr	s15, [r3, #8]
		filter_accus[3]=(filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]);
 8002602:	4b91      	ldr	r3, [pc, #580]	; (8002848 <sampling+0x1188>)
 8002604:	ed93 7a02 	vldr	s14, [r3, #8]
 8002608:	4b8d      	ldr	r3, [pc, #564]	; (8002840 <sampling+0x1180>)
 800260a:	edd3 7a00 	vldr	s15, [r3]
 800260e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002612:	4b8d      	ldr	r3, [pc, #564]	; (8002848 <sampling+0x1188>)
 8002614:	edd3 6a03 	vldr	s13, [r3, #12]
 8002618:	4b89      	ldr	r3, [pc, #548]	; (8002840 <sampling+0x1180>)
 800261a:	edd3 7a01 	vldr	s15, [r3, #4]
 800261e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002622:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002626:	4b88      	ldr	r3, [pc, #544]	; (8002848 <sampling+0x1188>)
 8002628:	edc3 7a03 	vstr	s15, [r3, #12]
		filter_accus[4]=(filter_accus[3]*freq_point[0])+(filter_accus[4]*freq_point[1]);
 800262c:	4b86      	ldr	r3, [pc, #536]	; (8002848 <sampling+0x1188>)
 800262e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002632:	4b83      	ldr	r3, [pc, #524]	; (8002840 <sampling+0x1180>)
 8002634:	edd3 7a00 	vldr	s15, [r3]
 8002638:	ee27 7a27 	vmul.f32	s14, s14, s15
 800263c:	4b82      	ldr	r3, [pc, #520]	; (8002848 <sampling+0x1188>)
 800263e:	edd3 6a04 	vldr	s13, [r3, #16]
 8002642:	4b7f      	ldr	r3, [pc, #508]	; (8002840 <sampling+0x1180>)
 8002644:	edd3 7a01 	vldr	s15, [r3, #4]
 8002648:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800264c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002650:	4b7d      	ldr	r3, [pc, #500]	; (8002848 <sampling+0x1188>)
 8002652:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[5]=(filter_accus[4]*freq_point[0])+(filter_accus[5]*freq_point[1]);
 8002656:	4b7c      	ldr	r3, [pc, #496]	; (8002848 <sampling+0x1188>)
 8002658:	ed93 7a04 	vldr	s14, [r3, #16]
 800265c:	4b78      	ldr	r3, [pc, #480]	; (8002840 <sampling+0x1180>)
 800265e:	edd3 7a00 	vldr	s15, [r3]
 8002662:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002666:	4b78      	ldr	r3, [pc, #480]	; (8002848 <sampling+0x1188>)
 8002668:	edd3 6a05 	vldr	s13, [r3, #20]
 800266c:	4b74      	ldr	r3, [pc, #464]	; (8002840 <sampling+0x1180>)
 800266e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002672:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800267a:	4b73      	ldr	r3, [pc, #460]	; (8002848 <sampling+0x1188>)
 800267c:	edc3 7a05 	vstr	s15, [r3, #20]
		filter_hold[0]=(filter_accus[5]+filter_accus[11])*0.5; //half sample , nice
 8002680:	4b71      	ldr	r3, [pc, #452]	; (8002848 <sampling+0x1188>)
 8002682:	ed93 7a05 	vldr	s14, [r3, #20]
 8002686:	4b70      	ldr	r3, [pc, #448]	; (8002848 <sampling+0x1188>)
 8002688:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800268c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002690:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002694:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002698:	4b6d      	ldr	r3, [pc, #436]	; (8002850 <sampling+0x1190>)
 800269a:	edc3 7a00 	vstr	s15, [r3]
		sample_Accu[0] =filter_accus[5]; // out
 800269e:	4b6a      	ldr	r3, [pc, #424]	; (8002848 <sampling+0x1188>)
 80026a0:	edd3 7a05 	vldr	s15, [r3, #20]
 80026a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026a8:	ee17 2a90 	vmov	r2, s15
 80026ac:	4b65      	ldr	r3, [pc, #404]	; (8002844 <sampling+0x1184>)
 80026ae:	601a      	str	r2, [r3, #0]
		filter_accus[11]=filter_accus[5]; //write back new value
 80026b0:	4b65      	ldr	r3, [pc, #404]	; (8002848 <sampling+0x1188>)
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	4a64      	ldr	r2, [pc, #400]	; (8002848 <sampling+0x1188>)
 80026b6:	62d3      	str	r3, [r2, #44]	; 0x2c

		//filter 2
		//sample_Accu[3]=play_holder2[i] >>5; // sine


				if (freq_point[2]>1) freq_point[2]=1;
 80026b8:	4b61      	ldr	r3, [pc, #388]	; (8002840 <sampling+0x1180>)
 80026ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80026be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ca:	dd03      	ble.n	80026d4 <sampling+0x1014>
 80026cc:	4b5c      	ldr	r3, [pc, #368]	; (8002840 <sampling+0x1180>)
 80026ce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80026d2:	609a      	str	r2, [r3, #8]

				freq_point[3]=1-freq_point[2];
 80026d4:	4b5a      	ldr	r3, [pc, #360]	; (8002840 <sampling+0x1180>)
 80026d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80026da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026e2:	4b57      	ldr	r3, [pc, #348]	; (8002840 <sampling+0x1180>)
 80026e4:	edc3 7a03 	vstr	s15, [r3, #12]
				filter_accus[6]=sample_Accu[3];
 80026e8:	4b56      	ldr	r3, [pc, #344]	; (8002844 <sampling+0x1184>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	ee07 3a90 	vmov	s15, r3
 80026f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026f4:	4b54      	ldr	r3, [pc, #336]	; (8002848 <sampling+0x1188>)
 80026f6:	edc3 7a06 	vstr	s15, [r3, #24]
				filter_accus[6]= filter_accus[6]*adsr_level[3]; // add adsr envelope
 80026fa:	4b53      	ldr	r3, [pc, #332]	; (8002848 <sampling+0x1188>)
 80026fc:	ed93 7a06 	vldr	s14, [r3, #24]
 8002700:	4b52      	ldr	r3, [pc, #328]	; (800284c <sampling+0x118c>)
 8002702:	edd3 7a03 	vldr	s15, [r3, #12]
 8002706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800270a:	4b4f      	ldr	r3, [pc, #316]	; (8002848 <sampling+0x1188>)
 800270c:	edc3 7a06 	vstr	s15, [r3, #24]

				filter_accus[7]=(filter_accus[6]*freq_point[2])+(filter_accus[7]*freq_point[3]);
 8002710:	4b4d      	ldr	r3, [pc, #308]	; (8002848 <sampling+0x1188>)
 8002712:	ed93 7a06 	vldr	s14, [r3, #24]
 8002716:	4b4a      	ldr	r3, [pc, #296]	; (8002840 <sampling+0x1180>)
 8002718:	edd3 7a02 	vldr	s15, [r3, #8]
 800271c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002720:	4b49      	ldr	r3, [pc, #292]	; (8002848 <sampling+0x1188>)
 8002722:	edd3 6a07 	vldr	s13, [r3, #28]
 8002726:	4b46      	ldr	r3, [pc, #280]	; (8002840 <sampling+0x1180>)
 8002728:	edd3 7a03 	vldr	s15, [r3, #12]
 800272c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002734:	4b44      	ldr	r3, [pc, #272]	; (8002848 <sampling+0x1188>)
 8002736:	edc3 7a07 	vstr	s15, [r3, #28]
				filter_accus[8]=(filter_accus[7]*freq_point[2])+(filter_accus[8]*freq_point[3]);
 800273a:	4b43      	ldr	r3, [pc, #268]	; (8002848 <sampling+0x1188>)
 800273c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002740:	4b3f      	ldr	r3, [pc, #252]	; (8002840 <sampling+0x1180>)
 8002742:	edd3 7a02 	vldr	s15, [r3, #8]
 8002746:	ee27 7a27 	vmul.f32	s14, s14, s15
 800274a:	4b3f      	ldr	r3, [pc, #252]	; (8002848 <sampling+0x1188>)
 800274c:	edd3 6a08 	vldr	s13, [r3, #32]
 8002750:	4b3b      	ldr	r3, [pc, #236]	; (8002840 <sampling+0x1180>)
 8002752:	edd3 7a03 	vldr	s15, [r3, #12]
 8002756:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800275a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800275e:	4b3a      	ldr	r3, [pc, #232]	; (8002848 <sampling+0x1188>)
 8002760:	edc3 7a08 	vstr	s15, [r3, #32]
				filter_accus[9]=(filter_accus[8]*freq_point[2])+(filter_accus[9]*freq_point[3]);
 8002764:	4b38      	ldr	r3, [pc, #224]	; (8002848 <sampling+0x1188>)
 8002766:	ed93 7a08 	vldr	s14, [r3, #32]
 800276a:	4b35      	ldr	r3, [pc, #212]	; (8002840 <sampling+0x1180>)
 800276c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002770:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002774:	4b34      	ldr	r3, [pc, #208]	; (8002848 <sampling+0x1188>)
 8002776:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800277a:	4b31      	ldr	r3, [pc, #196]	; (8002840 <sampling+0x1180>)
 800277c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002780:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002788:	4b2f      	ldr	r3, [pc, #188]	; (8002848 <sampling+0x1188>)
 800278a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				filter_accus[10]=(filter_accus[9]*freq_point[2])+(filter_accus[10]*freq_point[3]);
 800278e:	4b2e      	ldr	r3, [pc, #184]	; (8002848 <sampling+0x1188>)
 8002790:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002794:	4b2a      	ldr	r3, [pc, #168]	; (8002840 <sampling+0x1180>)
 8002796:	edd3 7a02 	vldr	s15, [r3, #8]
 800279a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800279e:	4b2a      	ldr	r3, [pc, #168]	; (8002848 <sampling+0x1188>)
 80027a0:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80027a4:	4b26      	ldr	r3, [pc, #152]	; (8002840 <sampling+0x1180>)
 80027a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80027aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b2:	4b25      	ldr	r3, [pc, #148]	; (8002848 <sampling+0x1188>)
 80027b4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				filter_hold[1]=(filter_accus[10]+filter_accus[12])*0.5; //half sample
 80027b8:	4b23      	ldr	r3, [pc, #140]	; (8002848 <sampling+0x1188>)
 80027ba:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80027be:	4b22      	ldr	r3, [pc, #136]	; (8002848 <sampling+0x1188>)
 80027c0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80027c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027c8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80027cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027d0:	4b1f      	ldr	r3, [pc, #124]	; (8002850 <sampling+0x1190>)
 80027d2:	edc3 7a01 	vstr	s15, [r3, #4]
				sample_Accu[2] =filter_accus[10]; //out
 80027d6:	4b1c      	ldr	r3, [pc, #112]	; (8002848 <sampling+0x1188>)
 80027d8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80027dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027e0:	ee17 2a90 	vmov	r2, s15
 80027e4:	4b17      	ldr	r3, [pc, #92]	; (8002844 <sampling+0x1184>)
 80027e6:	609a      	str	r2, [r3, #8]
				filter_accus[12]=filter_accus[10]; //write back new value
 80027e8:	4b17      	ldr	r3, [pc, #92]	; (8002848 <sampling+0x1188>)
 80027ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ec:	4a16      	ldr	r2, [pc, #88]	; (8002848 <sampling+0x1188>)
 80027ee:	6313      	str	r3, [r2, #48]	; 0x30


filter_Accu=0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80027f6:	f102 0210 	add.w	r2, r2, #16
 80027fa:	6013      	str	r3, [r2, #0]
//filter_Accu=(sample_Accu[0]+sample_Accu[2])>>8; //filter + drum out


//filter_Accu=(sample_Accu[1]+sample_Accu[3])>>8; //filter + drum out ,clean out
 filter_Accu=sample_Accu[1]>>8;
 80027fc:	4b11      	ldr	r3, [pc, #68]	; (8002844 <sampling+0x1184>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	121b      	asrs	r3, r3, #8
 8002802:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002806:	f102 0210 	add.w	r2, r2, #16
 800280a:	6013      	str	r3, [r2, #0]
//filter_Accu=(sample_Accu[1]>>7)+(sample_Accu[3]>>8); //filter + drum out
 if (one_shot!=199)   one_shot++;  //play one attack then stop
 800280c:	4b11      	ldr	r3, [pc, #68]	; (8002854 <sampling+0x1194>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2bc7      	cmp	r3, #199	; 0xc7
 8002812:	d005      	beq.n	8002820 <sampling+0x1160>
 8002814:	4b0f      	ldr	r3, [pc, #60]	; (8002854 <sampling+0x1194>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	3301      	adds	r3, #1
 800281a:	b2da      	uxtb	r2, r3
 800281c:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <sampling+0x1194>)
 800281e:	701a      	strb	r2, [r3, #0]

 if (filter_Accu>0xFFFF) filter_Accu=0xFFFF; else if (filter_Accu<-65535) filter_Accu=-65535;  // limiter to 16 bits
 8002820:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002824:	f103 0310 	add.w	r3, r3, #16
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800282e:	db13      	blt.n	8002858 <sampling+0x1198>
 8002830:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002834:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002838:	f102 0210 	add.w	r2, r2, #16
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	e019      	b.n	8002874 <sampling+0x11b4>
 8002840:	20001d74 	.word	0x20001d74
 8002844:	20000c1c 	.word	0x20000c1c
 8002848:	20001d24 	.word	0x20001d24
 800284c:	200025b4 	.word	0x200025b4
 8002850:	20001d60 	.word	0x20001d60
 8002854:	20001ce8 	.word	0x20001ce8
 8002858:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800285c:	f103 0310 	add.w	r3, r3, #16
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002866:	dc05      	bgt.n	8002874 <sampling+0x11b4>
 8002868:	4b15      	ldr	r3, [pc, #84]	; (80028c0 <sampling+0x1200>)
 800286a:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800286e:	f102 0210 	add.w	r2, r2, #16
 8002872:	6013      	str	r3, [r2, #0]


 play_sample[i_total]=(filter_Accu>>6)+1023;   // final output disable for now
 8002874:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002878:	f103 0310 	add.w	r3, r3, #16
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	119b      	asrs	r3, r3, #6
 8002880:	b29a      	uxth	r2, r3
 8002882:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002886:	f103 031e 	add.w	r3, r3, #30
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8002890:	b291      	uxth	r1, r2
 8002892:	4a0c      	ldr	r2, [pc, #48]	; (80028c4 <sampling+0x1204>)
 8002894:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <sampling+0x1208>)
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	3301      	adds	r3, #1
 800289e:	b29a      	uxth	r2, r3
 80028a0:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <sampling+0x1208>)
 80028a2:	801a      	strh	r2, [r3, #0]
 80028a4:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <sampling+0x1208>)
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028ac:	f4ff ade6 	bcc.w	800247c <sampling+0xdbc>
 //play_sample[i_total]=(input_holder[i]);  // works good

} // end of filer


bank_write=0;
 80028b0:	4b06      	ldr	r3, [pc, #24]	; (80028cc <sampling+0x120c>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	801a      	strh	r2, [r3, #0]
}
 80028b6:	bf00      	nop
 80028b8:	f507 5785 	add.w	r7, r7, #4256	; 0x10a0
 80028bc:	46bd      	mov	sp, r7
 80028be:	bdb0      	pop	{r4, r5, r7, pc}
 80028c0:	ffff0001 	.word	0xffff0001
 80028c4:	20000c40 	.word	0x20000c40
 80028c8:	20000c3c 	.word	0x20000c3c
 80028cc:	200002be 	.word	0x200002be

080028d0 <sine_count>:
mask_result=mask_tempB &1;


}

void sine_count(void) {         // sine_out is the output 9  bit  , works
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
int32_t sine_tempA;
int32_t sine_tempB;
int8_t sine_frac;


sine_counter=(sine_counterB>>5);  // up countr controlled by counter
 80028d6:	4b2f      	ldr	r3, [pc, #188]	; (8002994 <sine_count+0xc4>)
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	095b      	lsrs	r3, r3, #5
 80028dc:	b29a      	uxth	r2, r3
 80028de:	4b2e      	ldr	r3, [pc, #184]	; (8002998 <sine_count+0xc8>)
 80028e0:	801a      	strh	r2, [r3, #0]
sine_frac=sine_counterB & 31;  // grab last 5 bits, actual position for linear interpol,fractional
 80028e2:	4b2c      	ldr	r3, [pc, #176]	; (8002994 <sine_count+0xc4>)
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	b25b      	sxtb	r3, r3
 80028e8:	f003 031f 	and.w	r3, r3, #31
 80028ec:	73fb      	strb	r3, [r7, #15]

	if (sine_counter>sine_length) sine_counter = sine_length;		// seems to be faster than using a for loop to calculate both values
 80028ee:	4b2a      	ldr	r3, [pc, #168]	; (8002998 <sine_count+0xc8>)
 80028f0:	881a      	ldrh	r2, [r3, #0]
 80028f2:	4b2a      	ldr	r3, [pc, #168]	; (800299c <sine_count+0xcc>)
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d903      	bls.n	8002902 <sine_count+0x32>
 80028fa:	4b28      	ldr	r3, [pc, #160]	; (800299c <sine_count+0xcc>)
 80028fc:	881a      	ldrh	r2, [r3, #0]
 80028fe:	4b26      	ldr	r3, [pc, #152]	; (8002998 <sine_count+0xc8>)
 8002900:	801a      	strh	r2, [r3, #0]

	sine_out = sine_block[sine_counter];  // 0- 40000
 8002902:	4b25      	ldr	r3, [pc, #148]	; (8002998 <sine_count+0xc8>)
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	461a      	mov	r2, r3
 8002908:	4b25      	ldr	r3, [pc, #148]	; (80029a0 <sine_count+0xd0>)
 800290a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800290e:	461a      	mov	r2, r3
 8002910:	4b24      	ldr	r3, [pc, #144]	; (80029a4 <sine_count+0xd4>)
 8002912:	601a      	str	r2, [r3, #0]
	sine_tempA=sine_out; // grab first value , needs to be always plus
 8002914:	4b23      	ldr	r3, [pc, #140]	; (80029a4 <sine_count+0xd4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	60bb      	str	r3, [r7, #8]
	sine_tempA=sine_tempA-20000; //convert to signed
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 8002920:	3b20      	subs	r3, #32
 8002922:	60bb      	str	r3, [r7, #8]

	sine_counter++;
 8002924:	4b1c      	ldr	r3, [pc, #112]	; (8002998 <sine_count+0xc8>)
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	3301      	adds	r3, #1
 800292a:	b29a      	uxth	r2, r3
 800292c:	4b1a      	ldr	r3, [pc, #104]	; (8002998 <sine_count+0xc8>)
 800292e:	801a      	strh	r2, [r3, #0]
	if (sine_counter>=sine_length)  sine_counter=0; // set to sample length
 8002930:	4b19      	ldr	r3, [pc, #100]	; (8002998 <sine_count+0xc8>)
 8002932:	881a      	ldrh	r2, [r3, #0]
 8002934:	4b19      	ldr	r3, [pc, #100]	; (800299c <sine_count+0xcc>)
 8002936:	881b      	ldrh	r3, [r3, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d302      	bcc.n	8002942 <sine_count+0x72>
 800293c:	4b16      	ldr	r3, [pc, #88]	; (8002998 <sine_count+0xc8>)
 800293e:	2200      	movs	r2, #0
 8002940:	801a      	strh	r2, [r3, #0]

			sine_out = sine_block[sine_counter];  // grab second value
 8002942:	4b15      	ldr	r3, [pc, #84]	; (8002998 <sine_count+0xc8>)
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	461a      	mov	r2, r3
 8002948:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <sine_count+0xd0>)
 800294a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800294e:	461a      	mov	r2, r3
 8002950:	4b14      	ldr	r3, [pc, #80]	; (80029a4 <sine_count+0xd4>)
 8002952:	601a      	str	r2, [r3, #0]

		sine_tempB=sine_out; // grab first value
 8002954:	4b13      	ldr	r3, [pc, #76]	; (80029a4 <sine_count+0xd4>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	607b      	str	r3, [r7, #4]
			sine_tempB=sine_tempB-20000;  // convert to signed and +256 to -256
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 8002960:	3b20      	subs	r3, #32
 8002962:	607b      	str	r3, [r7, #4]

			sine_tempB=	sine_tempB-sine_tempA;   // calculate fraction then add
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	607b      	str	r3, [r7, #4]
			sine_tempB=sine_tempB>>5; // div 32 or 32 upsample
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	115b      	asrs	r3, r3, #5
 8002970:	607b      	str	r3, [r7, #4]

			sine_tempB=sine_tempB*sine_frac; // mult by steps , can overshoot !!
 8002972:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	fb02 f303 	mul.w	r3, r2, r3
 800297c:	607b      	str	r3, [r7, #4]

			sine_out=(sine_tempA+sine_tempB);   // add back to start value
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4413      	add	r3, r2
 8002984:	4a07      	ldr	r2, [pc, #28]	; (80029a4 <sine_count+0xd4>)
 8002986:	6013      	str	r3, [r2, #0]
			//sine_tempA=sine_tempA; //needs

			//sine_out=sine_tempA;


}
 8002988:	bf00      	nop
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	20000bee 	.word	0x20000bee
 8002998:	20000bec 	.word	0x20000bec
 800299c:	2000024e 	.word	0x2000024e
 80029a0:	08009b5c 	.word	0x08009b5c
 80029a4:	20000bf0 	.word	0x20000bf0

080029a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b0aa      	sub	sp, #168	; 0xa8
 80029ac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029ae:	f001 f919 	bl	8003be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029b2:	f000 faf3 	bl	8002f9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029b6:	f000 fd4f 	bl	8003458 <MX_GPIO_Init>
  MX_DMA_Init();
 80029ba:	f000 fd2d 	bl	8003418 <MX_DMA_Init>
  MX_ADC1_Init();
 80029be:	f000 fb57 	bl	8003070 <MX_ADC1_Init>
  MX_SPI2_Init();
 80029c2:	f000 fbd5 	bl	8003170 <MX_SPI2_Init>
  MX_TIM3_Init();
 80029c6:	f000 fc5d 	bl	8003284 <MX_TIM3_Init>
  MX_TIM4_Init();
 80029ca:	f000 fcd1 	bl	8003370 <MX_TIM4_Init>
  MX_I2C2_Init();
 80029ce:	f000 fba1 	bl	8003114 <MX_I2C2_Init>
  MX_TIM2_Init();
 80029d2:	f000 fc03 	bl	80031dc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  const volatile uint8_t *userConfig=(const volatile uint8_t *)0x0800D2F0;
 80029d6:	4b9e      	ldr	r3, [pc, #632]	; (8002c50 <main+0x2a8>)
 80029d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90



//LL_SPI_Enable(SPI2);

  HAL_SPI_Init(&hspi2); // write to register hspi2
 80029dc:	489d      	ldr	r0, [pc, #628]	; (8002c54 <main+0x2ac>)
 80029de:	f004 f931 	bl	8006c44 <HAL_SPI_Init>
  // lcd_init(); // keep this late or have issues
//HAL_TIM_Base_Start_IT(&htim1);  // This needs to work for irq   ,disbling tim1 made loop a lot faster
//TIM1->CCER=0;
HAL_TIM_Base_Start_IT(&htim3);  // This needs to work for irq
 80029e2:	489d      	ldr	r0, [pc, #628]	; (8002c58 <main+0x2b0>)
 80029e4:	f004 fc68 	bl	80072b8 <HAL_TIM_Base_Start_IT>
TIM3->CCER=0;
 80029e8:	4b9c      	ldr	r3, [pc, #624]	; (8002c5c <main+0x2b4>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	621a      	str	r2, [r3, #32]
HAL_TIM_Base_Start(&htim2);
 80029ee:	489c      	ldr	r0, [pc, #624]	; (8002c60 <main+0x2b8>)
 80029f0:	f004 fc08 	bl	8007204 <HAL_TIM_Base_Start>
HAL_TIM_Base_Start(&htim4);
 80029f4:	489b      	ldr	r0, [pc, #620]	; (8002c64 <main+0x2bc>)
 80029f6:	f004 fc05 	bl	8007204 <HAL_TIM_Base_Start>
//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  // they both work fine together
HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 80029fa:	2108      	movs	r1, #8
 80029fc:	4896      	ldr	r0, [pc, #600]	; (8002c58 <main+0x2b0>)
 80029fe:	f004 fd17 	bl	8007430 <HAL_TIM_PWM_Start>
//HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,pData, 63);
TIM2->CNT=32000;
 8002a02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a06:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002a0a:	625a      	str	r2, [r3, #36]	; 0x24
HAL_ADC_Start(&hadc1);
 8002a0c:	4896      	ldr	r0, [pc, #600]	; (8002c68 <main+0x2c0>)
 8002a0e:	f001 f9c3 	bl	8003d98 <HAL_ADC_Start>
HAL_ADC_Start_DMA(&hadc1, adc_source, 512); //dma start ,needs this and adc start ,set sampling time to very long or it will fail
 8002a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a16:	4995      	ldr	r1, [pc, #596]	; (8002c6c <main+0x2c4>)
 8002a18:	4893      	ldr	r0, [pc, #588]	; (8002c68 <main+0x2c0>)
 8002a1a:	f001 fa71 	bl	8003f00 <HAL_ADC_Start_DMA>


HAL_I2C_MspInit(&hi2c2);
 8002a1e:	4894      	ldr	r0, [pc, #592]	; (8002c70 <main+0x2c8>)
 8002a20:	f000 fe5a 	bl	80036d8 <HAL_I2C_MspInit>
} // reads stored values for potvalues
*/

uint8_t potSource2[65];
uint8_t potSource3[65];
HAL_I2C_Mem_Read(&hi2c2, 160, (1<<6), 2,&potSource, 64,1000);		// all good
 8002a24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a28:	9302      	str	r3, [sp, #8]
 8002a2a:	2340      	movs	r3, #64	; 0x40
 8002a2c:	9301      	str	r3, [sp, #4]
 8002a2e:	4b91      	ldr	r3, [pc, #580]	; (8002c74 <main+0x2cc>)
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	2302      	movs	r3, #2
 8002a34:	2240      	movs	r2, #64	; 0x40
 8002a36:	21a0      	movs	r1, #160	; 0xa0
 8002a38:	488d      	ldr	r0, [pc, #564]	; (8002c70 <main+0x2c8>)
 8002a3a:	f002 ff3d 	bl	80058b8 <HAL_I2C_Mem_Read>
HAL_I2C_Mem_Read(&hi2c2, 160, (2<<6), 2,&potSource2,64,1000);
 8002a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a42:	9302      	str	r3, [sp, #8]
 8002a44:	2340      	movs	r3, #64	; 0x40
 8002a46:	9301      	str	r3, [sp, #4]
 8002a48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	2302      	movs	r3, #2
 8002a50:	2280      	movs	r2, #128	; 0x80
 8002a52:	21a0      	movs	r1, #160	; 0xa0
 8002a54:	4886      	ldr	r0, [pc, #536]	; (8002c70 <main+0x2c8>)
 8002a56:	f002 ff2f 	bl	80058b8 <HAL_I2C_Mem_Read>
HAL_I2C_Mem_Read(&hi2c2, 160, (3<<6), 2,&potSource3,64,1000);
 8002a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a5e:	9302      	str	r3, [sp, #8]
 8002a60:	2340      	movs	r3, #64	; 0x40
 8002a62:	9301      	str	r3, [sp, #4]
 8002a64:	1d3b      	adds	r3, r7, #4
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	2302      	movs	r3, #2
 8002a6a:	22c0      	movs	r2, #192	; 0xc0
 8002a6c:	21a0      	movs	r1, #160	; 0xa0
 8002a6e:	4880      	ldr	r0, [pc, #512]	; (8002c70 <main+0x2c8>)
 8002a70:	f002 ff22 	bl	80058b8 <HAL_I2C_Mem_Read>

for(i=0;i<1024;i++){
 8002a74:	4b80      	ldr	r3, [pc, #512]	; (8002c78 <main+0x2d0>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	801a      	strh	r2, [r3, #0]
 8002a7a:	e024      	b.n	8002ac6 <main+0x11e>
//	gfx_ram[i]=gfx_char[((i>>5)&7)+((i>>8)<<3)]; // test input fill  8*128 v+h just normal characters
	gfx_ram[i&63] [i>>6]  =gfx_char[8+(i&7)+(((i>>3)*8)&63)];
 8002a7c:	4b7e      	ldr	r3, [pc, #504]	; (8002c78 <main+0x2d0>)
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	f103 0208 	add.w	r2, r3, #8
 8002a88:	4b7b      	ldr	r3, [pc, #492]	; (8002c78 <main+0x2d0>)
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	08db      	lsrs	r3, r3, #3
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a96:	441a      	add	r2, r3
 8002a98:	4b77      	ldr	r3, [pc, #476]	; (8002c78 <main+0x2d0>)
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aa0:	4975      	ldr	r1, [pc, #468]	; (8002c78 <main+0x2d0>)
 8002aa2:	8809      	ldrh	r1, [r1, #0]
 8002aa4:	0989      	lsrs	r1, r1, #6
 8002aa6:	b289      	uxth	r1, r1
 8002aa8:	4608      	mov	r0, r1
 8002aaa:	4974      	ldr	r1, [pc, #464]	; (8002c7c <main+0x2d4>)
 8002aac:	5c89      	ldrb	r1, [r1, r2]
 8002aae:	4a74      	ldr	r2, [pc, #464]	; (8002c80 <main+0x2d8>)
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	4413      	add	r3, r2
 8002ab4:	4403      	add	r3, r0
 8002ab6:	460a      	mov	r2, r1
 8002ab8:	701a      	strb	r2, [r3, #0]
for(i=0;i<1024;i++){
 8002aba:	4b6f      	ldr	r3, [pc, #444]	; (8002c78 <main+0x2d0>)
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	4b6d      	ldr	r3, [pc, #436]	; (8002c78 <main+0x2d0>)
 8002ac4:	801a      	strh	r2, [r3, #0]
 8002ac6:	4b6c      	ldr	r3, [pc, #432]	; (8002c78 <main+0x2d0>)
 8002ac8:	881b      	ldrh	r3, [r3, #0]
 8002aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ace:	d3d5      	bcc.n	8002a7c <main+0xd4>
//gfx_ram[i&63] [i>>6]  =250;
}

for(i=0;i<64;i++){
 8002ad0:	4b69      	ldr	r3, [pc, #420]	; (8002c78 <main+0x2d0>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	801a      	strh	r2, [r3, #0]
 8002ad6:	e011      	b.n	8002afc <main+0x154>
	potSource[i+64]=potSource2[i];  //load up from eeprom
 8002ad8:	4b67      	ldr	r3, [pc, #412]	; (8002c78 <main+0x2d0>)
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	461a      	mov	r2, r3
 8002ade:	4b66      	ldr	r3, [pc, #408]	; (8002c78 <main+0x2d0>)
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	3340      	adds	r3, #64	; 0x40
 8002ae4:	3298      	adds	r2, #152	; 0x98
 8002ae6:	443a      	add	r2, r7
 8002ae8:	f812 1c50 	ldrb.w	r1, [r2, #-80]
 8002aec:	4a61      	ldr	r2, [pc, #388]	; (8002c74 <main+0x2cc>)
 8002aee:	54d1      	strb	r1, [r2, r3]
for(i=0;i<64;i++){
 8002af0:	4b61      	ldr	r3, [pc, #388]	; (8002c78 <main+0x2d0>)
 8002af2:	881b      	ldrh	r3, [r3, #0]
 8002af4:	3301      	adds	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	4b5f      	ldr	r3, [pc, #380]	; (8002c78 <main+0x2d0>)
 8002afa:	801a      	strh	r2, [r3, #0]
 8002afc:	4b5e      	ldr	r3, [pc, #376]	; (8002c78 <main+0x2d0>)
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	2b3f      	cmp	r3, #63	; 0x3f
 8002b02:	d9e9      	bls.n	8002ad8 <main+0x130>
}

for(i=0;i<64;i++){
 8002b04:	4b5c      	ldr	r3, [pc, #368]	; (8002c78 <main+0x2d0>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	801a      	strh	r2, [r3, #0]
 8002b0a:	e011      	b.n	8002b30 <main+0x188>
	potSource[i+128]=potSource3[i];
 8002b0c:	4b5a      	ldr	r3, [pc, #360]	; (8002c78 <main+0x2d0>)
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	4b59      	ldr	r3, [pc, #356]	; (8002c78 <main+0x2d0>)
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	3380      	adds	r3, #128	; 0x80
 8002b18:	3298      	adds	r2, #152	; 0x98
 8002b1a:	443a      	add	r2, r7
 8002b1c:	f812 1c94 	ldrb.w	r1, [r2, #-148]
 8002b20:	4a54      	ldr	r2, [pc, #336]	; (8002c74 <main+0x2cc>)
 8002b22:	54d1      	strb	r1, [r2, r3]
for(i=0;i<64;i++){
 8002b24:	4b54      	ldr	r3, [pc, #336]	; (8002c78 <main+0x2d0>)
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	4b52      	ldr	r3, [pc, #328]	; (8002c78 <main+0x2d0>)
 8002b2e:	801a      	strh	r2, [r3, #0]
 8002b30:	4b51      	ldr	r3, [pc, #324]	; (8002c78 <main+0x2d0>)
 8002b32:	881b      	ldrh	r3, [r3, #0]
 8002b34:	2b3f      	cmp	r3, #63	; 0x3f
 8002b36:	d9e9      	bls.n	8002b0c <main+0x164>
}

for(i=0;i<180;i++){
 8002b38:	4b4f      	ldr	r3, [pc, #316]	; (8002c78 <main+0x2d0>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	801a      	strh	r2, [r3, #0]
 8002b3e:	e010      	b.n	8002b62 <main+0x1ba>
	potValues[i]=potSource[i]>>4;
 8002b40:	4b4d      	ldr	r3, [pc, #308]	; (8002c78 <main+0x2d0>)
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	461a      	mov	r2, r3
 8002b46:	4b4b      	ldr	r3, [pc, #300]	; (8002c74 <main+0x2cc>)
 8002b48:	5c9b      	ldrb	r3, [r3, r2]
 8002b4a:	4a4b      	ldr	r2, [pc, #300]	; (8002c78 <main+0x2d0>)
 8002b4c:	8812      	ldrh	r2, [r2, #0]
 8002b4e:	091b      	lsrs	r3, r3, #4
 8002b50:	b2d9      	uxtb	r1, r3
 8002b52:	4b4c      	ldr	r3, [pc, #304]	; (8002c84 <main+0x2dc>)
 8002b54:	5499      	strb	r1, [r3, r2]
for(i=0;i<180;i++){
 8002b56:	4b48      	ldr	r3, [pc, #288]	; (8002c78 <main+0x2d0>)
 8002b58:	881b      	ldrh	r3, [r3, #0]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	4b46      	ldr	r3, [pc, #280]	; (8002c78 <main+0x2d0>)
 8002b60:	801a      	strh	r2, [r3, #0]
 8002b62:	4b45      	ldr	r3, [pc, #276]	; (8002c78 <main+0x2d0>)
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	2bb3      	cmp	r3, #179	; 0xb3
 8002b68:	d9ea      	bls.n	8002b40 <main+0x198>
}

float tempo_hold;  // calculate tempo look up
for (i=0;i<161;i++) {
 8002b6a:	4b43      	ldr	r3, [pc, #268]	; (8002c78 <main+0x2d0>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	801a      	strh	r2, [r3, #0]
 8002b70:	e040      	b.n	8002bf4 <main+0x24c>

tempo_hold=(i+180)*0.0166666666;
 8002b72:	4b41      	ldr	r3, [pc, #260]	; (8002c78 <main+0x2d0>)
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	33b4      	adds	r3, #180	; 0xb4
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fd fdfd 	bl	8000778 <__aeabi_i2d>
 8002b7e:	a330      	add	r3, pc, #192	; (adr r3, 8002c40 <main+0x298>)
 8002b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b84:	f7fd fb7c 	bl	8000280 <__aeabi_dmul>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	4619      	mov	r1, r3
 8002b90:	f7fd fe5c 	bl	800084c <__aeabi_d2f>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

tempo_hold=	1/tempo_hold;
 8002b9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b9e:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002ba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ba6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
//tempo_hold=	tempo_hold*2187.6*4;      // change for the sake of note length
tempo_hold=	tempo_hold*2187.6*1;      // change for the sake of note length
 8002baa:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002bae:	f7fd fdf5 	bl	800079c <__aeabi_f2d>
 8002bb2:	a325      	add	r3, pc, #148	; (adr r3, 8002c48 <main+0x2a0>)
 8002bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb8:	f7fd fb62 	bl	8000280 <__aeabi_dmul>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4610      	mov	r0, r2
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	f7fd fe42 	bl	800084c <__aeabi_d2f>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
tempo_lut[i]=tempo_hold;
 8002bce:	4b2a      	ldr	r3, [pc, #168]	; (8002c78 <main+0x2d0>)
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002bd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bdc:	ee17 3a90 	vmov	r3, s15
 8002be0:	b299      	uxth	r1, r3
 8002be2:	4b29      	ldr	r3, [pc, #164]	; (8002c88 <main+0x2e0>)
 8002be4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
for (i=0;i<161;i++) {
 8002be8:	4b23      	ldr	r3, [pc, #140]	; (8002c78 <main+0x2d0>)
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	3301      	adds	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	4b21      	ldr	r3, [pc, #132]	; (8002c78 <main+0x2d0>)
 8002bf2:	801a      	strh	r2, [r3, #0]
 8002bf4:	4b20      	ldr	r3, [pc, #128]	; (8002c78 <main+0x2d0>)
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	2ba0      	cmp	r3, #160	; 0xa0
 8002bfa:	d9ba      	bls.n	8002b72 <main+0x1ca>
}
isrMask=571; // def tempo 571=180bpm , 20 ms /isrcount
 8002bfc:	4b23      	ldr	r3, [pc, #140]	; (8002c8c <main+0x2e4>)
 8002bfe:	f240 223b 	movw	r2, #571	; 0x23b
 8002c02:	801a      	strh	r2, [r3, #0]

noteTiming=24;
 8002c04:	4b22      	ldr	r3, [pc, #136]	; (8002c90 <main+0x2e8>)
 8002c06:	2218      	movs	r2, #24
 8002c08:	701a      	strb	r2, [r3, #0]
for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8002c0a:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <main+0x2d0>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	801a      	strh	r2, [r3, #0]
 8002c10:	e00b      	b.n	8002c2a <main+0x282>
	spell[i]=67;
 8002c12:	4b19      	ldr	r3, [pc, #100]	; (8002c78 <main+0x2d0>)
 8002c14:	881b      	ldrh	r3, [r3, #0]
 8002c16:	461a      	mov	r2, r3
 8002c18:	4b1e      	ldr	r3, [pc, #120]	; (8002c94 <main+0x2ec>)
 8002c1a:	2143      	movs	r1, #67	; 0x43
 8002c1c:	5499      	strb	r1, [r3, r2]
for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8002c1e:	4b16      	ldr	r3, [pc, #88]	; (8002c78 <main+0x2d0>)
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	3301      	adds	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	4b14      	ldr	r3, [pc, #80]	; (8002c78 <main+0x2d0>)
 8002c28:	801a      	strh	r2, [r3, #0]
 8002c2a:	4b13      	ldr	r3, [pc, #76]	; (8002c78 <main+0x2d0>)
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002c32:	d3ee      	bcc.n	8002c12 <main+0x26a>

}

display_fill();
 8002c34:	f7fe fb60 	bl	80012f8 <display_fill>
// build display, enc_lut2, works good

for (i=0;i<512;i++)	{gfx_char[i]=gfx_char[i];
 8002c38:	4b0f      	ldr	r3, [pc, #60]	; (8002c78 <main+0x2d0>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	801a      	strh	r2, [r3, #0]
 8002c3e:	e03b      	b.n	8002cb8 <main+0x310>
 8002c40:	0febdd13 	.word	0x0febdd13
 8002c44:	3f911111 	.word	0x3f911111
 8002c48:	33333333 	.word	0x33333333
 8002c4c:	40a11733 	.word	0x40a11733
 8002c50:	0800d2f0 	.word	0x0800d2f0
 8002c54:	20002afc 	.word	0x20002afc
 8002c58:	20002b9c 	.word	0x20002b9c
 8002c5c:	40000400 	.word	0x40000400
 8002c60:	20002b54 	.word	0x20002b54
 8002c64:	20002be4 	.word	0x20002be4
 8002c68:	20002a00 	.word	0x20002a00
 8002c6c:	20001488 	.word	0x20001488
 8002c70:	20002aa8 	.word	0x20002aa8
 8002c74:	20000a64 	.word	0x20000a64
 8002c78:	20000c3c 	.word	0x20000c3c
 8002c7c:	200002c0 	.word	0x200002c0
 8002c80:	200021b4 	.word	0x200021b4
 8002c84:	200008e4 	.word	0x200008e4
 8002c88:	20002070 	.word	0x20002070
 8002c8c:	20000bea 	.word	0x20000bea
 8002c90:	20000be3 	.word	0x20000be3
 8002c94:	2000010c 	.word	0x2000010c
 8002c98:	4b79      	ldr	r3, [pc, #484]	; (8002e80 <main+0x4d8>)
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4b78      	ldr	r3, [pc, #480]	; (8002e80 <main+0x4d8>)
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	4b77      	ldr	r3, [pc, #476]	; (8002e84 <main+0x4dc>)
 8002ca6:	5c59      	ldrb	r1, [r3, r1]
 8002ca8:	4b76      	ldr	r3, [pc, #472]	; (8002e84 <main+0x4dc>)
 8002caa:	5499      	strb	r1, [r3, r2]
 8002cac:	4b74      	ldr	r3, [pc, #464]	; (8002e80 <main+0x4d8>)
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	4b72      	ldr	r3, [pc, #456]	; (8002e80 <main+0x4d8>)
 8002cb6:	801a      	strh	r2, [r3, #0]
 8002cb8:	4b71      	ldr	r3, [pc, #452]	; (8002e80 <main+0x4d8>)
 8002cba:	881b      	ldrh	r3, [r3, #0]
 8002cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cc0:	d3ea      	bcc.n	8002c98 <main+0x2f0>

}    //font replace



uint16_t lut_temp2=0;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
uint16_t lut_temp3=0;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
for  (i=0;i<390;i++){					// get a few more pages
 8002cce:	4b6c      	ldr	r3, [pc, #432]	; (8002e80 <main+0x4d8>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	801a      	strh	r2, [r3, #0]
 8002cd4:	e027      	b.n	8002d26 <main+0x37e>

	if (disp_lut [i>>4] [i&15] <95) lut_temp2=lut_temp2+1;    // skip space or characters
 8002cd6:	4b6a      	ldr	r3, [pc, #424]	; (8002e80 <main+0x4d8>)
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	091b      	lsrs	r3, r3, #4
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	461a      	mov	r2, r3
 8002ce0:	4b67      	ldr	r3, [pc, #412]	; (8002e80 <main+0x4d8>)
 8002ce2:	881b      	ldrh	r3, [r3, #0]
 8002ce4:	f003 030f 	and.w	r3, r3, #15
 8002ce8:	4967      	ldr	r1, [pc, #412]	; (8002e88 <main+0x4e0>)
 8002cea:	0112      	lsls	r2, r2, #4
 8002cec:	4413      	add	r3, r2
 8002cee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002cf2:	2b5e      	cmp	r3, #94	; 0x5e
 8002cf4:	d805      	bhi.n	8002d02 <main+0x35a>
 8002cf6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8002d00:	e00b      	b.n	8002d1a <main+0x372>

	else {enc2_lut[lut_temp3] =i;  lut_temp3++;}     // goes to 511
 8002d02:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8002d06:	4a5e      	ldr	r2, [pc, #376]	; (8002e80 <main+0x4d8>)
 8002d08:	8811      	ldrh	r1, [r2, #0]
 8002d0a:	4a60      	ldr	r2, [pc, #384]	; (8002e8c <main+0x4e4>)
 8002d0c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002d10:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8002d14:	3301      	adds	r3, #1
 8002d16:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
for  (i=0;i<390;i++){					// get a few more pages
 8002d1a:	4b59      	ldr	r3, [pc, #356]	; (8002e80 <main+0x4d8>)
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	4b57      	ldr	r3, [pc, #348]	; (8002e80 <main+0x4d8>)
 8002d24:	801a      	strh	r2, [r3, #0]
 8002d26:	4b56      	ldr	r3, [pc, #344]	; (8002e80 <main+0x4d8>)
 8002d28:	881b      	ldrh	r3, [r3, #0]
 8002d2a:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 8002d2e:	d3d2      	bcc.n	8002cd6 <main+0x32e>
}


menuSelect=0;
 8002d30:	4b57      	ldr	r3, [pc, #348]	; (8002e90 <main+0x4e8>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	701a      	strb	r2, [r3, #0]
// fill up sample
firstbarLoop=0;
 8002d36:	4b57      	ldr	r3, [pc, #348]	; (8002e94 <main+0x4ec>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	701a      	strb	r2, [r3, #0]
printf("Hello everybody");
 8002d3c:	4856      	ldr	r0, [pc, #344]	; (8002e98 <main+0x4f0>)
 8002d3e:	f005 fb4b 	bl	80083d8 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_counter++ ;
 8002d42:	4b56      	ldr	r3, [pc, #344]	; (8002e9c <main+0x4f4>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	3301      	adds	r3, #1
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	4b54      	ldr	r3, [pc, #336]	; (8002e9c <main+0x4f4>)
 8002d4c:	701a      	strb	r2, [r3, #0]
	  loop_counter2++;//
 8002d4e:	4b54      	ldr	r3, [pc, #336]	; (8002ea0 <main+0x4f8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	3301      	adds	r3, #1
 8002d54:	4a52      	ldr	r2, [pc, #328]	; (8002ea0 <main+0x4f8>)
 8002d56:	6013      	str	r3, [r2, #0]

	  // if (menu_page<320) lcd_feedback();  //curious no issues with lcd without this  , maybe spell writing
if 	((loop_counter2&7)==6)      {analoginputloopb();} // this is ok , plenty quick
 8002d58:	4b51      	ldr	r3, [pc, #324]	; (8002ea0 <main+0x4f8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	2b06      	cmp	r3, #6
 8002d62:	d101      	bne.n	8002d68 <main+0x3c0>
 8002d64:	f7fd fffa 	bl	8000d5c <analoginputloopb>
if (loop_counter2==9096) {    //   4096=1min=32bytes so 4mins per 128 bank or 15 writes/hour
 8002d68:	4b4d      	ldr	r3, [pc, #308]	; (8002ea0 <main+0x4f8>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f242 3288 	movw	r2, #9096	; 0x2388
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d137      	bne.n	8002de4 <main+0x43c>

	mem_buf=potSource[mem_count];
 8002d74:	4b4b      	ldr	r3, [pc, #300]	; (8002ea4 <main+0x4fc>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4b4b      	ldr	r3, [pc, #300]	; (8002ea8 <main+0x500>)
 8002d7c:	5c9a      	ldrb	r2, [r3, r2]
 8002d7e:	4b4b      	ldr	r3, [pc, #300]	; (8002eac <main+0x504>)
 8002d80:	701a      	strb	r2, [r3, #0]
	// read values from stored
	HAL_I2C_Mem_Write(&hi2c2, 160, ((1+(mem_count>>6))<<6)+(mem_count&63), 2, &mem_buf, 1, 1000);  // "&hi2c2"  actual register address
 8002d82:	4b48      	ldr	r3, [pc, #288]	; (8002ea4 <main+0x4fc>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	099b      	lsrs	r3, r3, #6
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	019b      	lsls	r3, r3, #6
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	4b43      	ldr	r3, [pc, #268]	; (8002ea4 <main+0x4fc>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	4413      	add	r3, r2
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002da8:	9302      	str	r3, [sp, #8]
 8002daa:	2301      	movs	r3, #1
 8002dac:	9301      	str	r3, [sp, #4]
 8002dae:	4b3f      	ldr	r3, [pc, #252]	; (8002eac <main+0x504>)
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	2302      	movs	r3, #2
 8002db4:	21a0      	movs	r1, #160	; 0xa0
 8002db6:	483e      	ldr	r0, [pc, #248]	; (8002eb0 <main+0x508>)
 8002db8:	f002 fc84 	bl	80056c4 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8002dbc:	2005      	movs	r0, #5
 8002dbe:	f000 ff83 	bl	8003cc8 <HAL_Delay>
	if (mem_count==255) mem_count=0; else mem_count++;  // write to first
 8002dc2:	4b38      	ldr	r3, [pc, #224]	; (8002ea4 <main+0x4fc>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2bff      	cmp	r3, #255	; 0xff
 8002dc8:	d103      	bne.n	8002dd2 <main+0x42a>
 8002dca:	4b36      	ldr	r3, [pc, #216]	; (8002ea4 <main+0x4fc>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	701a      	strb	r2, [r3, #0]
 8002dd0:	e005      	b.n	8002dde <main+0x436>
 8002dd2:	4b34      	ldr	r3, [pc, #208]	; (8002ea4 <main+0x4fc>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	4b32      	ldr	r3, [pc, #200]	; (8002ea4 <main+0x4fc>)
 8002ddc:	701a      	strb	r2, [r3, #0]
	loop_counter2=0; //reset
 8002dde:	4b30      	ldr	r3, [pc, #192]	; (8002ea0 <main+0x4f8>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]

}


	  if (disp_end==1)	 {  // displaybuffer after each full screen update on spi
 8002de4:	4b33      	ldr	r3, [pc, #204]	; (8002eb4 <main+0x50c>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d12a      	bne.n	8002e42 <main+0x49a>

		  { if (loop_counter3)  enc2_tempc=enc2_dir; else enc2_dir=enc2_tempc; }    //hold enc till finished , this to clean up characters for now ,works ok
 8002dec:	4b32      	ldr	r3, [pc, #200]	; (8002eb8 <main+0x510>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d004      	beq.n	8002dfe <main+0x456>
 8002df4:	4b31      	ldr	r3, [pc, #196]	; (8002ebc <main+0x514>)
 8002df6:	881a      	ldrh	r2, [r3, #0]
 8002df8:	4b31      	ldr	r3, [pc, #196]	; (8002ec0 <main+0x518>)
 8002dfa:	801a      	strh	r2, [r3, #0]
 8002dfc:	e003      	b.n	8002e06 <main+0x45e>
 8002dfe:	4b30      	ldr	r3, [pc, #192]	; (8002ec0 <main+0x518>)
 8002e00:	881a      	ldrh	r2, [r3, #0]
 8002e02:	4b2e      	ldr	r3, [pc, #184]	; (8002ebc <main+0x514>)
 8002e04:	801a      	strh	r2, [r3, #0]
		  loop_counter3=!loop_counter3;  //blinker flips on each full page refresh
 8002e06:	4b2c      	ldr	r3, [pc, #176]	; (8002eb8 <main+0x510>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	bf0c      	ite	eq
 8002e0e:	2301      	moveq	r3, #1
 8002e10:	2300      	movne	r3, #0
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	461a      	mov	r2, r3
 8002e16:	4b28      	ldr	r3, [pc, #160]	; (8002eb8 <main+0x510>)
 8002e18:	701a      	strb	r2, [r3, #0]

		  for (i=0;i<16;i++) {   displayBuffer();}
 8002e1a:	4b19      	ldr	r3, [pc, #100]	; (8002e80 <main+0x4d8>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	801a      	strh	r2, [r3, #0]
 8002e20:	e007      	b.n	8002e32 <main+0x48a>
 8002e22:	f7fe fa95 	bl	8001350 <displayBuffer>
 8002e26:	4b16      	ldr	r3, [pc, #88]	; (8002e80 <main+0x4d8>)
 8002e28:	881b      	ldrh	r3, [r3, #0]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	4b14      	ldr	r3, [pc, #80]	; (8002e80 <main+0x4d8>)
 8002e30:	801a      	strh	r2, [r3, #0]
 8002e32:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <main+0x4d8>)
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	2b0f      	cmp	r3, #15
 8002e38:	d9f3      	bls.n	8002e22 <main+0x47a>
		  enc2_dir=enc2_tempc;
 8002e3a:	4b21      	ldr	r3, [pc, #132]	; (8002ec0 <main+0x518>)
 8002e3c:	881a      	ldrh	r2, [r3, #0]
 8002e3e:	4b1f      	ldr	r3, [pc, #124]	; (8002ebc <main+0x514>)
 8002e40:	801a      	strh	r2, [r3, #0]

	  }


	  if (init<6)				// after 6 its done for good
 8002e42:	4b20      	ldr	r3, [pc, #128]	; (8002ec4 <main+0x51c>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b05      	cmp	r3, #5
 8002e48:	d810      	bhi.n	8002e6c <main+0x4c4>
{
	  for (i=0;i<6;i++) {display_init();}  //1-2ms ?  change length if flickering ,maybe initial data
 8002e4a:	4b0d      	ldr	r3, [pc, #52]	; (8002e80 <main+0x4d8>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	801a      	strh	r2, [r3, #0]
 8002e50:	e007      	b.n	8002e62 <main+0x4ba>
 8002e52:	f7fe f8a9 	bl	8000fa8 <display_init>
 8002e56:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <main+0x4d8>)
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <main+0x4d8>)
 8002e60:	801a      	strh	r2, [r3, #0]
 8002e62:	4b07      	ldr	r3, [pc, #28]	; (8002e80 <main+0x4d8>)
 8002e64:	881b      	ldrh	r3, [r3, #0]
 8002e66:	2b05      	cmp	r3, #5
 8002e68:	d9f3      	bls.n	8002e52 <main+0x4aa>
 8002e6a:	e001      	b.n	8002e70 <main+0x4c8>
} else {display_update(); }  // send spi line data every loop cycle , self contained, single 8pixel line 18*256steps
 8002e6c:	f7fe f978 	bl	8001160 <display_update>

	  ///////////////////////////////////////////////////////////////////////////////

	  if (loop_counter & 255)	{ // grab adc readings + 3ms , 32 step
 8002e70:	4b0a      	ldr	r3, [pc, #40]	; (8002e9c <main+0x4f4>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d041      	beq.n	8002efc <main+0x554>
	  	for (i=0;i<4;i++) {
 8002e78:	4b01      	ldr	r3, [pc, #4]	; (8002e80 <main+0x4d8>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	801a      	strh	r2, [r3, #0]
 8002e7e:	e036      	b.n	8002eee <main+0x546>
 8002e80:	20000c3c 	.word	0x20000c3c
 8002e84:	200002c0 	.word	0x200002c0
 8002e88:	0800966c 	.word	0x0800966c
 8002e8c:	20000774 	.word	0x20000774
 8002e90:	20000be4 	.word	0x20000be4
 8002e94:	20000be8 	.word	0x20000be8
 8002e98:	080095dc 	.word	0x080095dc
 8002e9c:	20000c38 	.word	0x20000c38
 8002ea0:	20001d0c 	.word	0x20001d0c
 8002ea4:	20001d0a 	.word	0x20001d0a
 8002ea8:	20000a64 	.word	0x20000a64
 8002eac:	20001d10 	.word	0x20001d10
 8002eb0:	20002aa8 	.word	0x20002aa8
 8002eb4:	200025fa 	.word	0x200025fa
 8002eb8:	200025fb 	.word	0x200025fb
 8002ebc:	20001cf2 	.word	0x20001cf2
 8002ec0:	200025fc 	.word	0x200025fc
 8002ec4:	20001d01 	.word	0x20001d01

	  adc_values[i]= (adc_source[i])>>3 ;
 8002ec8:	4b29      	ldr	r3, [pc, #164]	; (8002f70 <main+0x5c8>)
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	4b29      	ldr	r3, [pc, #164]	; (8002f74 <main+0x5cc>)
 8002ed0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002ed4:	4a26      	ldr	r2, [pc, #152]	; (8002f70 <main+0x5c8>)
 8002ed6:	8812      	ldrh	r2, [r2, #0]
 8002ed8:	08db      	lsrs	r3, r3, #3
 8002eda:	b299      	uxth	r1, r3
 8002edc:	4b26      	ldr	r3, [pc, #152]	; (8002f78 <main+0x5d0>)
 8002ede:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  	for (i=0;i<4;i++) {
 8002ee2:	4b23      	ldr	r3, [pc, #140]	; (8002f70 <main+0x5c8>)
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	4b21      	ldr	r3, [pc, #132]	; (8002f70 <main+0x5c8>)
 8002eec:	801a      	strh	r2, [r3, #0]
 8002eee:	4b20      	ldr	r3, [pc, #128]	; (8002f70 <main+0x5c8>)
 8002ef0:	881b      	ldrh	r3, [r3, #0]
 8002ef2:	2b03      	cmp	r3, #3
 8002ef4:	d9e8      	bls.n	8002ec8 <main+0x520>
	  	}
	  //	adc_read();
	  //	input_holder[input_count]=adc_source[3];  // get audio input
	  //	input_count++;
	//  	if (input_count>511) input_count=0;
	  	loop_counter=0;
 8002ef6:	4b21      	ldr	r3, [pc, #132]	; (8002f7c <main+0x5d4>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	701a      	strb	r2, [r3, #0]
	  }

	  if ((seq_pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 8002efc:	4b20      	ldr	r3, [pc, #128]	; (8002f80 <main+0x5d8>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b07      	cmp	r3, #7
 8002f02:	d106      	bne.n	8002f12 <main+0x56a>
 8002f04:	4b1f      	ldr	r3, [pc, #124]	; (8002f84 <main+0x5dc>)
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d102      	bne.n	8002f12 <main+0x56a>
 8002f0c:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <main+0x5dc>)
 8002f0e:	2201      	movs	r2, #1
 8002f10:	801a      	strh	r2, [r3, #0]
	   if (promValue<64) promValue=promValue+1 ; else promValue=0;  // fetch eeprom   nogo
	  	  if ((promValues[promValue] ) !=(potValues[promValue]))  EEPROM.write(promValue,(potValues[promValue]));   //  not too happy can totally kill speed  will have to put elsewhere
	  	  promValues[promValue] =potValues[promValue];
	  	   */

	  	     HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,(seq_pos & 1)); // easy skip ?
 8002f12:	4b1b      	ldr	r3, [pc, #108]	; (8002f80 <main+0x5d8>)
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f22:	4819      	ldr	r0, [pc, #100]	; (8002f88 <main+0x5e0>)
 8002f24:	f002 fa70 	bl	8005408 <HAL_GPIO_WritePin>
	  	    // very inconsistent

	  if (sample_point>511) sample_pointD=0; // loop when zero cross , good but limited, works ok
 8002f28:	4b18      	ldr	r3, [pc, #96]	; (8002f8c <main+0x5e4>)
 8002f2a:	881b      	ldrh	r3, [r3, #0]
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f32:	d302      	bcc.n	8002f3a <main+0x592>
 8002f34:	4b16      	ldr	r3, [pc, #88]	; (8002f90 <main+0x5e8>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	801a      	strh	r2, [r3, #0]
	  if (sample_point<511)  sample_pointD=512;
 8002f3a:	4b14      	ldr	r3, [pc, #80]	; (8002f8c <main+0x5e4>)
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8002f44:	d803      	bhi.n	8002f4e <main+0x5a6>
 8002f46:	4b12      	ldr	r3, [pc, #72]	; (8002f90 <main+0x5e8>)
 8002f48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f4c:	801a      	strh	r2, [r3, #0]


	  if (sample_pointB!=sample_pointD) bank_write=1; // set start of buffer ,grab , works ok
 8002f4e:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <main+0x5ec>)
 8002f50:	881a      	ldrh	r2, [r3, #0]
 8002f52:	4b0f      	ldr	r3, [pc, #60]	; (8002f90 <main+0x5e8>)
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d002      	beq.n	8002f60 <main+0x5b8>
 8002f5a:	4b0f      	ldr	r3, [pc, #60]	; (8002f98 <main+0x5f0>)
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	801a      	strh	r2, [r3, #0]
	  if (bank_write){
 8002f60:	4b0d      	ldr	r3, [pc, #52]	; (8002f98 <main+0x5f0>)
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f43f aeec 	beq.w	8002d42 <main+0x39a>

	  	sampling();
 8002f6a:	f7fe fba9 	bl	80016c0 <sampling>
	  loop_counter++ ;
 8002f6e:	e6e8      	b.n	8002d42 <main+0x39a>
 8002f70:	20000c3c 	.word	0x20000c3c
 8002f74:	20001488 	.word	0x20001488
 8002f78:	200002b4 	.word	0x200002b4
 8002f7c:	20000c38 	.word	0x20000c38
 8002f80:	20000c14 	.word	0x20000c14
 8002f84:	20001cf8 	.word	0x20001cf8
 8002f88:	40020800 	.word	0x40020800
 8002f8c:	20001442 	.word	0x20001442
 8002f90:	20001446 	.word	0x20001446
 8002f94:	20000c3a 	.word	0x20000c3a
 8002f98:	200002be 	.word	0x200002be

08002f9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b094      	sub	sp, #80	; 0x50
 8002fa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fa2:	f107 0320 	add.w	r3, r7, #32
 8002fa6:	2230      	movs	r2, #48	; 0x30
 8002fa8:	2100      	movs	r1, #0
 8002faa:	4618      	mov	r0, r3
 8002fac:	f005 fa0c 	bl	80083c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fb0:	f107 030c 	add.w	r3, r7, #12
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	605a      	str	r2, [r3, #4]
 8002fba:	609a      	str	r2, [r3, #8]
 8002fbc:	60da      	str	r2, [r3, #12]
 8002fbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	4b28      	ldr	r3, [pc, #160]	; (8003068 <SystemClock_Config+0xcc>)
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	4a27      	ldr	r2, [pc, #156]	; (8003068 <SystemClock_Config+0xcc>)
 8002fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fce:	6413      	str	r3, [r2, #64]	; 0x40
 8002fd0:	4b25      	ldr	r3, [pc, #148]	; (8003068 <SystemClock_Config+0xcc>)
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd8:	60bb      	str	r3, [r7, #8]
 8002fda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fdc:	2300      	movs	r3, #0
 8002fde:	607b      	str	r3, [r7, #4]
 8002fe0:	4b22      	ldr	r3, [pc, #136]	; (800306c <SystemClock_Config+0xd0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a21      	ldr	r2, [pc, #132]	; (800306c <SystemClock_Config+0xd0>)
 8002fe6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	4b1f      	ldr	r3, [pc, #124]	; (800306c <SystemClock_Config+0xd0>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ff4:	607b      	str	r3, [r7, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003000:	2310      	movs	r3, #16
 8003002:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003004:	2302      	movs	r3, #2
 8003006:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003008:	2300      	movs	r3, #0
 800300a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800300c:	2308      	movs	r3, #8
 800300e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003010:	2364      	movs	r3, #100	; 0x64
 8003012:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003014:	2302      	movs	r3, #2
 8003016:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003018:	2304      	movs	r3, #4
 800301a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800301c:	f107 0320 	add.w	r3, r7, #32
 8003020:	4618      	mov	r0, r3
 8003022:	f003 f9cb 	bl	80063bc <HAL_RCC_OscConfig>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800302c:	f000 fa92 	bl	8003554 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003030:	230f      	movs	r3, #15
 8003032:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003034:	2302      	movs	r3, #2
 8003036:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800303c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003040:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003046:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003048:	f107 030c 	add.w	r3, r7, #12
 800304c:	2103      	movs	r1, #3
 800304e:	4618      	mov	r0, r3
 8003050:	f003 fc2c 	bl	80068ac <HAL_RCC_ClockConfig>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800305a:	f000 fa7b 	bl	8003554 <Error_Handler>
  }
}
 800305e:	bf00      	nop
 8003060:	3750      	adds	r7, #80	; 0x50
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40023800 	.word	0x40023800
 800306c:	40007000 	.word	0x40007000

08003070 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003076:	463b      	mov	r3, r7
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	605a      	str	r2, [r3, #4]
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003082:	4b21      	ldr	r3, [pc, #132]	; (8003108 <MX_ADC1_Init+0x98>)
 8003084:	4a21      	ldr	r2, [pc, #132]	; (800310c <MX_ADC1_Init+0x9c>)
 8003086:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8003088:	4b1f      	ldr	r3, [pc, #124]	; (8003108 <MX_ADC1_Init+0x98>)
 800308a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800308e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003090:	4b1d      	ldr	r3, [pc, #116]	; (8003108 <MX_ADC1_Init+0x98>)
 8003092:	2200      	movs	r2, #0
 8003094:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003096:	4b1c      	ldr	r3, [pc, #112]	; (8003108 <MX_ADC1_Init+0x98>)
 8003098:	2200      	movs	r2, #0
 800309a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800309c:	4b1a      	ldr	r3, [pc, #104]	; (8003108 <MX_ADC1_Init+0x98>)
 800309e:	2201      	movs	r2, #1
 80030a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80030a2:	4b19      	ldr	r3, [pc, #100]	; (8003108 <MX_ADC1_Init+0x98>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80030aa:	4b17      	ldr	r3, [pc, #92]	; (8003108 <MX_ADC1_Init+0x98>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80030b0:	4b15      	ldr	r3, [pc, #84]	; (8003108 <MX_ADC1_Init+0x98>)
 80030b2:	4a17      	ldr	r2, [pc, #92]	; (8003110 <MX_ADC1_Init+0xa0>)
 80030b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80030b6:	4b14      	ldr	r3, [pc, #80]	; (8003108 <MX_ADC1_Init+0x98>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80030bc:	4b12      	ldr	r3, [pc, #72]	; (8003108 <MX_ADC1_Init+0x98>)
 80030be:	2201      	movs	r2, #1
 80030c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80030c2:	4b11      	ldr	r3, [pc, #68]	; (8003108 <MX_ADC1_Init+0x98>)
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80030ca:	4b0f      	ldr	r3, [pc, #60]	; (8003108 <MX_ADC1_Init+0x98>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80030d0:	480d      	ldr	r0, [pc, #52]	; (8003108 <MX_ADC1_Init+0x98>)
 80030d2:	f000 fe1d 	bl	8003d10 <HAL_ADC_Init>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80030dc:	f000 fa3a 	bl	8003554 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80030e0:	2309      	movs	r3, #9
 80030e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80030e4:	2301      	movs	r3, #1
 80030e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80030e8:	2306      	movs	r3, #6
 80030ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030ec:	463b      	mov	r3, r7
 80030ee:	4619      	mov	r1, r3
 80030f0:	4805      	ldr	r0, [pc, #20]	; (8003108 <MX_ADC1_Init+0x98>)
 80030f2:	f001 f863 	bl	80041bc <HAL_ADC_ConfigChannel>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80030fc:	f000 fa2a 	bl	8003554 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003100:	bf00      	nop
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	20002a00 	.word	0x20002a00
 800310c:	40012000 	.word	0x40012000
 8003110:	0f000001 	.word	0x0f000001

08003114 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003118:	4b12      	ldr	r3, [pc, #72]	; (8003164 <MX_I2C2_Init+0x50>)
 800311a:	4a13      	ldr	r2, [pc, #76]	; (8003168 <MX_I2C2_Init+0x54>)
 800311c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800311e:	4b11      	ldr	r3, [pc, #68]	; (8003164 <MX_I2C2_Init+0x50>)
 8003120:	4a12      	ldr	r2, [pc, #72]	; (800316c <MX_I2C2_Init+0x58>)
 8003122:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003124:	4b0f      	ldr	r3, [pc, #60]	; (8003164 <MX_I2C2_Init+0x50>)
 8003126:	2200      	movs	r2, #0
 8003128:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800312a:	4b0e      	ldr	r3, [pc, #56]	; (8003164 <MX_I2C2_Init+0x50>)
 800312c:	2200      	movs	r2, #0
 800312e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003130:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <MX_I2C2_Init+0x50>)
 8003132:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003136:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003138:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <MX_I2C2_Init+0x50>)
 800313a:	2200      	movs	r2, #0
 800313c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800313e:	4b09      	ldr	r3, [pc, #36]	; (8003164 <MX_I2C2_Init+0x50>)
 8003140:	2200      	movs	r2, #0
 8003142:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003144:	4b07      	ldr	r3, [pc, #28]	; (8003164 <MX_I2C2_Init+0x50>)
 8003146:	2200      	movs	r2, #0
 8003148:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800314a:	4b06      	ldr	r3, [pc, #24]	; (8003164 <MX_I2C2_Init+0x50>)
 800314c:	2200      	movs	r2, #0
 800314e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003150:	4804      	ldr	r0, [pc, #16]	; (8003164 <MX_I2C2_Init+0x50>)
 8003152:	f002 f973 	bl	800543c <HAL_I2C_Init>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800315c:	f000 f9fa 	bl	8003554 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003160:	bf00      	nop
 8003162:	bd80      	pop	{r7, pc}
 8003164:	20002aa8 	.word	0x20002aa8
 8003168:	40005800 	.word	0x40005800
 800316c:	00061a80 	.word	0x00061a80

08003170 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003174:	4b17      	ldr	r3, [pc, #92]	; (80031d4 <MX_SPI2_Init+0x64>)
 8003176:	4a18      	ldr	r2, [pc, #96]	; (80031d8 <MX_SPI2_Init+0x68>)
 8003178:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800317a:	4b16      	ldr	r3, [pc, #88]	; (80031d4 <MX_SPI2_Init+0x64>)
 800317c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003180:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003182:	4b14      	ldr	r3, [pc, #80]	; (80031d4 <MX_SPI2_Init+0x64>)
 8003184:	2200      	movs	r2, #0
 8003186:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003188:	4b12      	ldr	r3, [pc, #72]	; (80031d4 <MX_SPI2_Init+0x64>)
 800318a:	2200      	movs	r2, #0
 800318c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800318e:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <MX_SPI2_Init+0x64>)
 8003190:	2200      	movs	r2, #0
 8003192:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003194:	4b0f      	ldr	r3, [pc, #60]	; (80031d4 <MX_SPI2_Init+0x64>)
 8003196:	2200      	movs	r2, #0
 8003198:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800319a:	4b0e      	ldr	r3, [pc, #56]	; (80031d4 <MX_SPI2_Init+0x64>)
 800319c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031a0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80031a2:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <MX_SPI2_Init+0x64>)
 80031a4:	2230      	movs	r2, #48	; 0x30
 80031a6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031a8:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <MX_SPI2_Init+0x64>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80031ae:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <MX_SPI2_Init+0x64>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031b4:	4b07      	ldr	r3, [pc, #28]	; (80031d4 <MX_SPI2_Init+0x64>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80031ba:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <MX_SPI2_Init+0x64>)
 80031bc:	220a      	movs	r2, #10
 80031be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80031c0:	4804      	ldr	r0, [pc, #16]	; (80031d4 <MX_SPI2_Init+0x64>)
 80031c2:	f003 fd3f 	bl	8006c44 <HAL_SPI_Init>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80031cc:	f000 f9c2 	bl	8003554 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80031d0:	bf00      	nop
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	20002afc 	.word	0x20002afc
 80031d8:	40003800 	.word	0x40003800

080031dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08c      	sub	sp, #48	; 0x30
 80031e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80031e2:	f107 030c 	add.w	r3, r7, #12
 80031e6:	2224      	movs	r2, #36	; 0x24
 80031e8:	2100      	movs	r1, #0
 80031ea:	4618      	mov	r0, r3
 80031ec:	f005 f8ec 	bl	80083c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031f0:	1d3b      	adds	r3, r7, #4
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80031f8:	4b21      	ldr	r3, [pc, #132]	; (8003280 <MX_TIM2_Init+0xa4>)
 80031fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003200:	4b1f      	ldr	r3, [pc, #124]	; (8003280 <MX_TIM2_Init+0xa4>)
 8003202:	2200      	movs	r2, #0
 8003204:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003206:	4b1e      	ldr	r3, [pc, #120]	; (8003280 <MX_TIM2_Init+0xa4>)
 8003208:	2200      	movs	r2, #0
 800320a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800320c:	4b1c      	ldr	r3, [pc, #112]	; (8003280 <MX_TIM2_Init+0xa4>)
 800320e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003212:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8003214:	4b1a      	ldr	r3, [pc, #104]	; (8003280 <MX_TIM2_Init+0xa4>)
 8003216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800321a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800321c:	4b18      	ldr	r3, [pc, #96]	; (8003280 <MX_TIM2_Init+0xa4>)
 800321e:	2200      	movs	r2, #0
 8003220:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003222:	2301      	movs	r3, #1
 8003224:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003226:	2302      	movs	r3, #2
 8003228:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800322a:	2301      	movs	r3, #1
 800322c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800322e:	2300      	movs	r3, #0
 8003230:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8003232:	2302      	movs	r3, #2
 8003234:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003236:	2302      	movs	r3, #2
 8003238:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800323a:	2301      	movs	r3, #1
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800323e:	2300      	movs	r3, #0
 8003240:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8003242:	2302      	movs	r3, #2
 8003244:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003246:	f107 030c 	add.w	r3, r7, #12
 800324a:	4619      	mov	r1, r3
 800324c:	480c      	ldr	r0, [pc, #48]	; (8003280 <MX_TIM2_Init+0xa4>)
 800324e:	f004 f99f 	bl	8007590 <HAL_TIM_Encoder_Init>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003258:	f000 f97c 	bl	8003554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800325c:	2300      	movs	r3, #0
 800325e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003260:	2300      	movs	r3, #0
 8003262:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003264:	1d3b      	adds	r3, r7, #4
 8003266:	4619      	mov	r1, r3
 8003268:	4805      	ldr	r0, [pc, #20]	; (8003280 <MX_TIM2_Init+0xa4>)
 800326a:	f004 ffbd 	bl	80081e8 <HAL_TIMEx_MasterConfigSynchronization>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003274:	f000 f96e 	bl	8003554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003278:	bf00      	nop
 800327a:	3730      	adds	r7, #48	; 0x30
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	20002b54 	.word	0x20002b54

08003284 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08e      	sub	sp, #56	; 0x38
 8003288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800328a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	605a      	str	r2, [r3, #4]
 8003294:	609a      	str	r2, [r3, #8]
 8003296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003298:	f107 0320 	add.w	r3, r7, #32
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032a2:	1d3b      	adds	r3, r7, #4
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	605a      	str	r2, [r3, #4]
 80032aa:	609a      	str	r2, [r3, #8]
 80032ac:	60da      	str	r2, [r3, #12]
 80032ae:	611a      	str	r2, [r3, #16]
 80032b0:	615a      	str	r2, [r3, #20]
 80032b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80032b4:	4b2c      	ldr	r3, [pc, #176]	; (8003368 <MX_TIM3_Init+0xe4>)
 80032b6:	4a2d      	ldr	r2, [pc, #180]	; (800336c <MX_TIM3_Init+0xe8>)
 80032b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80032ba:	4b2b      	ldr	r3, [pc, #172]	; (8003368 <MX_TIM3_Init+0xe4>)
 80032bc:	2200      	movs	r2, #0
 80032be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032c0:	4b29      	ldr	r3, [pc, #164]	; (8003368 <MX_TIM3_Init+0xe4>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2544;
 80032c6:	4b28      	ldr	r3, [pc, #160]	; (8003368 <MX_TIM3_Init+0xe4>)
 80032c8:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 80032cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032ce:	4b26      	ldr	r3, [pc, #152]	; (8003368 <MX_TIM3_Init+0xe4>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80032d4:	4b24      	ldr	r3, [pc, #144]	; (8003368 <MX_TIM3_Init+0xe4>)
 80032d6:	2280      	movs	r2, #128	; 0x80
 80032d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80032da:	4823      	ldr	r0, [pc, #140]	; (8003368 <MX_TIM3_Init+0xe4>)
 80032dc:	f003 ff42 	bl	8007164 <HAL_TIM_Base_Init>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80032e6:	f000 f935 	bl	8003554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80032f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032f4:	4619      	mov	r1, r3
 80032f6:	481c      	ldr	r0, [pc, #112]	; (8003368 <MX_TIM3_Init+0xe4>)
 80032f8:	f004 fbba 	bl	8007a70 <HAL_TIM_ConfigClockSource>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003302:	f000 f927 	bl	8003554 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003306:	4818      	ldr	r0, [pc, #96]	; (8003368 <MX_TIM3_Init+0xe4>)
 8003308:	f004 f838 	bl	800737c <HAL_TIM_PWM_Init>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003312:	f000 f91f 	bl	8003554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003316:	2300      	movs	r3, #0
 8003318:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800331a:	2300      	movs	r3, #0
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800331e:	f107 0320 	add.w	r3, r7, #32
 8003322:	4619      	mov	r1, r3
 8003324:	4810      	ldr	r0, [pc, #64]	; (8003368 <MX_TIM3_Init+0xe4>)
 8003326:	f004 ff5f 	bl	80081e8 <HAL_TIMEx_MasterConfigSynchronization>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003330:	f000 f910 	bl	8003554 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003334:	2370      	movs	r3, #112	; 0x70
 8003336:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003338:	2300      	movs	r3, #0
 800333a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800333c:	2300      	movs	r3, #0
 800333e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003344:	1d3b      	adds	r3, r7, #4
 8003346:	2208      	movs	r2, #8
 8003348:	4619      	mov	r1, r3
 800334a:	4807      	ldr	r0, [pc, #28]	; (8003368 <MX_TIM3_Init+0xe4>)
 800334c:	f004 face 	bl	80078ec <HAL_TIM_PWM_ConfigChannel>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003356:	f000 f8fd 	bl	8003554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800335a:	4803      	ldr	r0, [pc, #12]	; (8003368 <MX_TIM3_Init+0xe4>)
 800335c:	f000 fb02 	bl	8003964 <HAL_TIM_MspPostInit>

}
 8003360:	bf00      	nop
 8003362:	3738      	adds	r7, #56	; 0x38
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	20002b9c 	.word	0x20002b9c
 800336c:	40000400 	.word	0x40000400

08003370 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b08c      	sub	sp, #48	; 0x30
 8003374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003376:	f107 030c 	add.w	r3, r7, #12
 800337a:	2224      	movs	r2, #36	; 0x24
 800337c:	2100      	movs	r1, #0
 800337e:	4618      	mov	r0, r3
 8003380:	f005 f822 	bl	80083c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003384:	1d3b      	adds	r3, r7, #4
 8003386:	2200      	movs	r2, #0
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800338c:	4b20      	ldr	r3, [pc, #128]	; (8003410 <MX_TIM4_Init+0xa0>)
 800338e:	4a21      	ldr	r2, [pc, #132]	; (8003414 <MX_TIM4_Init+0xa4>)
 8003390:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003392:	4b1f      	ldr	r3, [pc, #124]	; (8003410 <MX_TIM4_Init+0xa0>)
 8003394:	2200      	movs	r2, #0
 8003396:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003398:	4b1d      	ldr	r3, [pc, #116]	; (8003410 <MX_TIM4_Init+0xa0>)
 800339a:	2200      	movs	r2, #0
 800339c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800339e:	4b1c      	ldr	r3, [pc, #112]	; (8003410 <MX_TIM4_Init+0xa0>)
 80033a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033a4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033a6:	4b1a      	ldr	r3, [pc, #104]	; (8003410 <MX_TIM4_Init+0xa0>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033ac:	4b18      	ldr	r3, [pc, #96]	; (8003410 <MX_TIM4_Init+0xa0>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80033b2:	2301      	movs	r3, #1
 80033b4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80033b6:	2302      	movs	r3, #2
 80033b8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80033ba:	2301      	movs	r3, #1
 80033bc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80033be:	2300      	movs	r3, #0
 80033c0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 80033c2:	2302      	movs	r3, #2
 80033c4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80033c6:	2302      	movs	r3, #2
 80033c8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80033ca:	2301      	movs	r3, #1
 80033cc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80033ce:	2300      	movs	r3, #0
 80033d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 80033d2:	2302      	movs	r3, #2
 80033d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80033d6:	f107 030c 	add.w	r3, r7, #12
 80033da:	4619      	mov	r1, r3
 80033dc:	480c      	ldr	r0, [pc, #48]	; (8003410 <MX_TIM4_Init+0xa0>)
 80033de:	f004 f8d7 	bl	8007590 <HAL_TIM_Encoder_Init>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80033e8:	f000 f8b4 	bl	8003554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033ec:	2300      	movs	r3, #0
 80033ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033f0:	2300      	movs	r3, #0
 80033f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80033f4:	1d3b      	adds	r3, r7, #4
 80033f6:	4619      	mov	r1, r3
 80033f8:	4805      	ldr	r0, [pc, #20]	; (8003410 <MX_TIM4_Init+0xa0>)
 80033fa:	f004 fef5 	bl	80081e8 <HAL_TIMEx_MasterConfigSynchronization>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003404:	f000 f8a6 	bl	8003554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003408:	bf00      	nop
 800340a:	3730      	adds	r7, #48	; 0x30
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	20002be4 	.word	0x20002be4
 8003414:	40000800 	.word	0x40000800

08003418 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800341e:	2300      	movs	r3, #0
 8003420:	607b      	str	r3, [r7, #4]
 8003422:	4b0c      	ldr	r3, [pc, #48]	; (8003454 <MX_DMA_Init+0x3c>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	4a0b      	ldr	r2, [pc, #44]	; (8003454 <MX_DMA_Init+0x3c>)
 8003428:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800342c:	6313      	str	r3, [r2, #48]	; 0x30
 800342e:	4b09      	ldr	r3, [pc, #36]	; (8003454 <MX_DMA_Init+0x3c>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003436:	607b      	str	r3, [r7, #4]
 8003438:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800343a:	2200      	movs	r2, #0
 800343c:	2100      	movs	r1, #0
 800343e:	203c      	movs	r0, #60	; 0x3c
 8003440:	f001 fa47 	bl	80048d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8003444:	203c      	movs	r0, #60	; 0x3c
 8003446:	f001 fa60 	bl	800490a <HAL_NVIC_EnableIRQ>

}
 800344a:	bf00      	nop
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40023800 	.word	0x40023800

08003458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b088      	sub	sp, #32
 800345c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800345e:	f107 030c 	add.w	r3, r7, #12
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	605a      	str	r2, [r3, #4]
 8003468:	609a      	str	r2, [r3, #8]
 800346a:	60da      	str	r2, [r3, #12]
 800346c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800346e:	2300      	movs	r3, #0
 8003470:	60bb      	str	r3, [r7, #8]
 8003472:	4b20      	ldr	r3, [pc, #128]	; (80034f4 <MX_GPIO_Init+0x9c>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	4a1f      	ldr	r2, [pc, #124]	; (80034f4 <MX_GPIO_Init+0x9c>)
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	6313      	str	r3, [r2, #48]	; 0x30
 800347e:	4b1d      	ldr	r3, [pc, #116]	; (80034f4 <MX_GPIO_Init+0x9c>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	60bb      	str	r3, [r7, #8]
 8003488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	607b      	str	r3, [r7, #4]
 800348e:	4b19      	ldr	r3, [pc, #100]	; (80034f4 <MX_GPIO_Init+0x9c>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	4a18      	ldr	r2, [pc, #96]	; (80034f4 <MX_GPIO_Init+0x9c>)
 8003494:	f043 0302 	orr.w	r3, r3, #2
 8003498:	6313      	str	r3, [r2, #48]	; 0x30
 800349a:	4b16      	ldr	r3, [pc, #88]	; (80034f4 <MX_GPIO_Init+0x9c>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	607b      	str	r3, [r7, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	603b      	str	r3, [r7, #0]
 80034aa:	4b12      	ldr	r3, [pc, #72]	; (80034f4 <MX_GPIO_Init+0x9c>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	4a11      	ldr	r2, [pc, #68]	; (80034f4 <MX_GPIO_Init+0x9c>)
 80034b0:	f043 0304 	orr.w	r3, r3, #4
 80034b4:	6313      	str	r3, [r2, #48]	; 0x30
 80034b6:	4b0f      	ldr	r3, [pc, #60]	; (80034f4 <MX_GPIO_Init+0x9c>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	f003 0304 	and.w	r3, r3, #4
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80034c2:	2200      	movs	r2, #0
 80034c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034c8:	480b      	ldr	r0, [pc, #44]	; (80034f8 <MX_GPIO_Init+0xa0>)
 80034ca:	f001 ff9d 	bl	8005408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80034ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034d4:	2301      	movs	r3, #1
 80034d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034dc:	2300      	movs	r3, #0
 80034de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80034e0:	f107 030c 	add.w	r3, r7, #12
 80034e4:	4619      	mov	r1, r3
 80034e6:	4804      	ldr	r0, [pc, #16]	; (80034f8 <MX_GPIO_Init+0xa0>)
 80034e8:	f001 fe0a 	bl	8005100 <HAL_GPIO_Init>

}
 80034ec:	bf00      	nop
 80034ee:	3720      	adds	r7, #32
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40023800 	.word	0x40023800
 80034f8:	40020800 	.word	0x40020800

080034fc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)   // get data after conversion
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
	for (i=0;i<512;i++)
 8003504:	4b10      	ldr	r3, [pc, #64]	; (8003548 <HAL_ADC_ConvCpltCallback+0x4c>)
 8003506:	2200      	movs	r2, #0
 8003508:	801a      	strh	r2, [r3, #0]
 800350a:	e011      	b.n	8003530 <HAL_ADC_ConvCpltCallback+0x34>
	{input_holder[i] = adc_source[i];
 800350c:	4b0e      	ldr	r3, [pc, #56]	; (8003548 <HAL_ADC_ConvCpltCallback+0x4c>)
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	4619      	mov	r1, r3
 8003512:	4b0d      	ldr	r3, [pc, #52]	; (8003548 <HAL_ADC_ConvCpltCallback+0x4c>)
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	461a      	mov	r2, r3
 8003518:	4b0c      	ldr	r3, [pc, #48]	; (800354c <HAL_ADC_ConvCpltCallback+0x50>)
 800351a:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 800351e:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <HAL_ADC_ConvCpltCallback+0x54>)
 8003520:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (i=0;i<512;i++)
 8003524:	4b08      	ldr	r3, [pc, #32]	; (8003548 <HAL_ADC_ConvCpltCallback+0x4c>)
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	3301      	adds	r3, #1
 800352a:	b29a      	uxth	r2, r3
 800352c:	4b06      	ldr	r3, [pc, #24]	; (8003548 <HAL_ADC_ConvCpltCallback+0x4c>)
 800352e:	801a      	strh	r2, [r3, #0]
 8003530:	4b05      	ldr	r3, [pc, #20]	; (8003548 <HAL_ADC_ConvCpltCallback+0x4c>)
 8003532:	881b      	ldrh	r3, [r3, #0]
 8003534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003538:	d3e8      	bcc.n	800350c <HAL_ADC_ConvCpltCallback+0x10>

	}
}
 800353a:	bf00      	nop
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	20000c3c 	.word	0x20000c3c
 800354c:	20001488 	.word	0x20001488
 8003550:	20002600 	.word	0x20002600

08003554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003558:	b672      	cpsid	i
}
 800355a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800355c:	e7fe      	b.n	800355c <Error_Handler+0x8>
	...

08003560 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003566:	2300      	movs	r3, #0
 8003568:	607b      	str	r3, [r7, #4]
 800356a:	4b10      	ldr	r3, [pc, #64]	; (80035ac <HAL_MspInit+0x4c>)
 800356c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356e:	4a0f      	ldr	r2, [pc, #60]	; (80035ac <HAL_MspInit+0x4c>)
 8003570:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003574:	6453      	str	r3, [r2, #68]	; 0x44
 8003576:	4b0d      	ldr	r3, [pc, #52]	; (80035ac <HAL_MspInit+0x4c>)
 8003578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800357e:	607b      	str	r3, [r7, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003582:	2300      	movs	r3, #0
 8003584:	603b      	str	r3, [r7, #0]
 8003586:	4b09      	ldr	r3, [pc, #36]	; (80035ac <HAL_MspInit+0x4c>)
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	4a08      	ldr	r2, [pc, #32]	; (80035ac <HAL_MspInit+0x4c>)
 800358c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003590:	6413      	str	r3, [r2, #64]	; 0x40
 8003592:	4b06      	ldr	r3, [pc, #24]	; (80035ac <HAL_MspInit+0x4c>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359a:	603b      	str	r3, [r7, #0]
 800359c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	40023800 	.word	0x40023800

080035b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b08a      	sub	sp, #40	; 0x28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b8:	f107 0314 	add.w	r3, r7, #20
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	605a      	str	r2, [r3, #4]
 80035c2:	609a      	str	r2, [r3, #8]
 80035c4:	60da      	str	r2, [r3, #12]
 80035c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a3c      	ldr	r2, [pc, #240]	; (80036c0 <HAL_ADC_MspInit+0x110>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d171      	bne.n	80036b6 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80035d2:	2300      	movs	r3, #0
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	4b3b      	ldr	r3, [pc, #236]	; (80036c4 <HAL_ADC_MspInit+0x114>)
 80035d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035da:	4a3a      	ldr	r2, [pc, #232]	; (80036c4 <HAL_ADC_MspInit+0x114>)
 80035dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e0:	6453      	str	r3, [r2, #68]	; 0x44
 80035e2:	4b38      	ldr	r3, [pc, #224]	; (80036c4 <HAL_ADC_MspInit+0x114>)
 80035e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ea:	613b      	str	r3, [r7, #16]
 80035ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	4b34      	ldr	r3, [pc, #208]	; (80036c4 <HAL_ADC_MspInit+0x114>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	4a33      	ldr	r2, [pc, #204]	; (80036c4 <HAL_ADC_MspInit+0x114>)
 80035f8:	f043 0301 	orr.w	r3, r3, #1
 80035fc:	6313      	str	r3, [r2, #48]	; 0x30
 80035fe:	4b31      	ldr	r3, [pc, #196]	; (80036c4 <HAL_ADC_MspInit+0x114>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800360a:	2300      	movs	r3, #0
 800360c:	60bb      	str	r3, [r7, #8]
 800360e:	4b2d      	ldr	r3, [pc, #180]	; (80036c4 <HAL_ADC_MspInit+0x114>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	4a2c      	ldr	r2, [pc, #176]	; (80036c4 <HAL_ADC_MspInit+0x114>)
 8003614:	f043 0302 	orr.w	r3, r3, #2
 8003618:	6313      	str	r3, [r2, #48]	; 0x30
 800361a:	4b2a      	ldr	r3, [pc, #168]	; (80036c4 <HAL_ADC_MspInit+0x114>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	60bb      	str	r3, [r7, #8]
 8003624:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA5     ------> ADC1_IN5
    PB1     ------> ADC1_IN9
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4;
 8003626:	2378      	movs	r3, #120	; 0x78
 8003628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800362a:	2303      	movs	r3, #3
 800362c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362e:	2300      	movs	r3, #0
 8003630:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003632:	f107 0314 	add.w	r3, r7, #20
 8003636:	4619      	mov	r1, r3
 8003638:	4823      	ldr	r0, [pc, #140]	; (80036c8 <HAL_ADC_MspInit+0x118>)
 800363a:	f001 fd61 	bl	8005100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800363e:	2302      	movs	r3, #2
 8003640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003642:	2303      	movs	r3, #3
 8003644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003646:	2300      	movs	r3, #0
 8003648:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800364a:	f107 0314 	add.w	r3, r7, #20
 800364e:	4619      	mov	r1, r3
 8003650:	481e      	ldr	r0, [pc, #120]	; (80036cc <HAL_ADC_MspInit+0x11c>)
 8003652:	f001 fd55 	bl	8005100 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8003656:	4b1e      	ldr	r3, [pc, #120]	; (80036d0 <HAL_ADC_MspInit+0x120>)
 8003658:	4a1e      	ldr	r2, [pc, #120]	; (80036d4 <HAL_ADC_MspInit+0x124>)
 800365a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800365c:	4b1c      	ldr	r3, [pc, #112]	; (80036d0 <HAL_ADC_MspInit+0x120>)
 800365e:	2200      	movs	r2, #0
 8003660:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003662:	4b1b      	ldr	r3, [pc, #108]	; (80036d0 <HAL_ADC_MspInit+0x120>)
 8003664:	2200      	movs	r2, #0
 8003666:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003668:	4b19      	ldr	r3, [pc, #100]	; (80036d0 <HAL_ADC_MspInit+0x120>)
 800366a:	2200      	movs	r2, #0
 800366c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800366e:	4b18      	ldr	r3, [pc, #96]	; (80036d0 <HAL_ADC_MspInit+0x120>)
 8003670:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003674:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003676:	4b16      	ldr	r3, [pc, #88]	; (80036d0 <HAL_ADC_MspInit+0x120>)
 8003678:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800367c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800367e:	4b14      	ldr	r3, [pc, #80]	; (80036d0 <HAL_ADC_MspInit+0x120>)
 8003680:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003684:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003686:	4b12      	ldr	r3, [pc, #72]	; (80036d0 <HAL_ADC_MspInit+0x120>)
 8003688:	f44f 7280 	mov.w	r2, #256	; 0x100
 800368c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800368e:	4b10      	ldr	r3, [pc, #64]	; (80036d0 <HAL_ADC_MspInit+0x120>)
 8003690:	2200      	movs	r2, #0
 8003692:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003694:	4b0e      	ldr	r3, [pc, #56]	; (80036d0 <HAL_ADC_MspInit+0x120>)
 8003696:	2200      	movs	r2, #0
 8003698:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800369a:	480d      	ldr	r0, [pc, #52]	; (80036d0 <HAL_ADC_MspInit+0x120>)
 800369c:	f001 f950 	bl	8004940 <HAL_DMA_Init>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80036a6:	f7ff ff55 	bl	8003554 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a08      	ldr	r2, [pc, #32]	; (80036d0 <HAL_ADC_MspInit+0x120>)
 80036ae:	639a      	str	r2, [r3, #56]	; 0x38
 80036b0:	4a07      	ldr	r2, [pc, #28]	; (80036d0 <HAL_ADC_MspInit+0x120>)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80036b6:	bf00      	nop
 80036b8:	3728      	adds	r7, #40	; 0x28
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40012000 	.word	0x40012000
 80036c4:	40023800 	.word	0x40023800
 80036c8:	40020000 	.word	0x40020000
 80036cc:	40020400 	.word	0x40020400
 80036d0:	20002a48 	.word	0x20002a48
 80036d4:	40026470 	.word	0x40026470

080036d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08a      	sub	sp, #40	; 0x28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e0:	f107 0314 	add.w	r3, r7, #20
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	605a      	str	r2, [r3, #4]
 80036ea:	609a      	str	r2, [r3, #8]
 80036ec:	60da      	str	r2, [r3, #12]
 80036ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a22      	ldr	r2, [pc, #136]	; (8003780 <HAL_I2C_MspInit+0xa8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d13d      	bne.n	8003776 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036fa:	2300      	movs	r3, #0
 80036fc:	613b      	str	r3, [r7, #16]
 80036fe:	4b21      	ldr	r3, [pc, #132]	; (8003784 <HAL_I2C_MspInit+0xac>)
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	4a20      	ldr	r2, [pc, #128]	; (8003784 <HAL_I2C_MspInit+0xac>)
 8003704:	f043 0302 	orr.w	r3, r3, #2
 8003708:	6313      	str	r3, [r2, #48]	; 0x30
 800370a:	4b1e      	ldr	r3, [pc, #120]	; (8003784 <HAL_I2C_MspInit+0xac>)
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	613b      	str	r3, [r7, #16]
 8003714:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB9     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003716:	f44f 7300 	mov.w	r3, #512	; 0x200
 800371a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800371c:	2312      	movs	r3, #18
 800371e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003720:	2300      	movs	r3, #0
 8003722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003724:	2303      	movs	r3, #3
 8003726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8003728:	2309      	movs	r3, #9
 800372a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800372c:	f107 0314 	add.w	r3, r7, #20
 8003730:	4619      	mov	r1, r3
 8003732:	4815      	ldr	r0, [pc, #84]	; (8003788 <HAL_I2C_MspInit+0xb0>)
 8003734:	f001 fce4 	bl	8005100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003738:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800373c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800373e:	2312      	movs	r3, #18
 8003740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003742:	2300      	movs	r3, #0
 8003744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003746:	2303      	movs	r3, #3
 8003748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800374a:	2304      	movs	r3, #4
 800374c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800374e:	f107 0314 	add.w	r3, r7, #20
 8003752:	4619      	mov	r1, r3
 8003754:	480c      	ldr	r0, [pc, #48]	; (8003788 <HAL_I2C_MspInit+0xb0>)
 8003756:	f001 fcd3 	bl	8005100 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800375a:	2300      	movs	r3, #0
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	4b09      	ldr	r3, [pc, #36]	; (8003784 <HAL_I2C_MspInit+0xac>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	4a08      	ldr	r2, [pc, #32]	; (8003784 <HAL_I2C_MspInit+0xac>)
 8003764:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003768:	6413      	str	r3, [r2, #64]	; 0x40
 800376a:	4b06      	ldr	r3, [pc, #24]	; (8003784 <HAL_I2C_MspInit+0xac>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003776:	bf00      	nop
 8003778:	3728      	adds	r7, #40	; 0x28
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40005800 	.word	0x40005800
 8003784:	40023800 	.word	0x40023800
 8003788:	40020400 	.word	0x40020400

0800378c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b08a      	sub	sp, #40	; 0x28
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003794:	f107 0314 	add.w	r3, r7, #20
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	605a      	str	r2, [r3, #4]
 800379e:	609a      	str	r2, [r3, #8]
 80037a0:	60da      	str	r2, [r3, #12]
 80037a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a19      	ldr	r2, [pc, #100]	; (8003810 <HAL_SPI_MspInit+0x84>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d12c      	bne.n	8003808 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80037ae:	2300      	movs	r3, #0
 80037b0:	613b      	str	r3, [r7, #16]
 80037b2:	4b18      	ldr	r3, [pc, #96]	; (8003814 <HAL_SPI_MspInit+0x88>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	4a17      	ldr	r2, [pc, #92]	; (8003814 <HAL_SPI_MspInit+0x88>)
 80037b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037bc:	6413      	str	r3, [r2, #64]	; 0x40
 80037be:	4b15      	ldr	r3, [pc, #84]	; (8003814 <HAL_SPI_MspInit+0x88>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037c6:	613b      	str	r3, [r7, #16]
 80037c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ca:	2300      	movs	r3, #0
 80037cc:	60fb      	str	r3, [r7, #12]
 80037ce:	4b11      	ldr	r3, [pc, #68]	; (8003814 <HAL_SPI_MspInit+0x88>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	4a10      	ldr	r2, [pc, #64]	; (8003814 <HAL_SPI_MspInit+0x88>)
 80037d4:	f043 0302 	orr.w	r3, r3, #2
 80037d8:	6313      	str	r3, [r2, #48]	; 0x30
 80037da:	4b0e      	ldr	r3, [pc, #56]	; (8003814 <HAL_SPI_MspInit+0x88>)
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB15     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 80037e6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80037ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ec:	2302      	movs	r3, #2
 80037ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f0:	2300      	movs	r3, #0
 80037f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037f4:	2303      	movs	r3, #3
 80037f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80037f8:	2305      	movs	r3, #5
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037fc:	f107 0314 	add.w	r3, r7, #20
 8003800:	4619      	mov	r1, r3
 8003802:	4805      	ldr	r0, [pc, #20]	; (8003818 <HAL_SPI_MspInit+0x8c>)
 8003804:	f001 fc7c 	bl	8005100 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003808:	bf00      	nop
 800380a:	3728      	adds	r7, #40	; 0x28
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40003800 	.word	0x40003800
 8003814:	40023800 	.word	0x40023800
 8003818:	40020400 	.word	0x40020400

0800381c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b08c      	sub	sp, #48	; 0x30
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003824:	f107 031c 	add.w	r3, r7, #28
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	605a      	str	r2, [r3, #4]
 800382e:	609a      	str	r2, [r3, #8]
 8003830:	60da      	str	r2, [r3, #12]
 8003832:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800383c:	d12d      	bne.n	800389a <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800383e:	2300      	movs	r3, #0
 8003840:	61bb      	str	r3, [r7, #24]
 8003842:	4b30      	ldr	r3, [pc, #192]	; (8003904 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	4a2f      	ldr	r2, [pc, #188]	; (8003904 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003848:	f043 0301 	orr.w	r3, r3, #1
 800384c:	6413      	str	r3, [r2, #64]	; 0x40
 800384e:	4b2d      	ldr	r3, [pc, #180]	; (8003904 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	61bb      	str	r3, [r7, #24]
 8003858:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800385a:	2300      	movs	r3, #0
 800385c:	617b      	str	r3, [r7, #20]
 800385e:	4b29      	ldr	r3, [pc, #164]	; (8003904 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	4a28      	ldr	r2, [pc, #160]	; (8003904 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	6313      	str	r3, [r2, #48]	; 0x30
 800386a:	4b26      	ldr	r3, [pc, #152]	; (8003904 <HAL_TIM_Encoder_MspInit+0xe8>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 8003876:	f248 0302 	movw	r3, #32770	; 0x8002
 800387a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800387c:	2302      	movs	r3, #2
 800387e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003880:	2301      	movs	r3, #1
 8003882:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003884:	2300      	movs	r3, #0
 8003886:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003888:	2301      	movs	r3, #1
 800388a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800388c:	f107 031c 	add.w	r3, r7, #28
 8003890:	4619      	mov	r1, r3
 8003892:	481d      	ldr	r0, [pc, #116]	; (8003908 <HAL_TIM_Encoder_MspInit+0xec>)
 8003894:	f001 fc34 	bl	8005100 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003898:	e030      	b.n	80038fc <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a1b      	ldr	r2, [pc, #108]	; (800390c <HAL_TIM_Encoder_MspInit+0xf0>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d12b      	bne.n	80038fc <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80038a4:	2300      	movs	r3, #0
 80038a6:	613b      	str	r3, [r7, #16]
 80038a8:	4b16      	ldr	r3, [pc, #88]	; (8003904 <HAL_TIM_Encoder_MspInit+0xe8>)
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	4a15      	ldr	r2, [pc, #84]	; (8003904 <HAL_TIM_Encoder_MspInit+0xe8>)
 80038ae:	f043 0304 	orr.w	r3, r3, #4
 80038b2:	6413      	str	r3, [r2, #64]	; 0x40
 80038b4:	4b13      	ldr	r3, [pc, #76]	; (8003904 <HAL_TIM_Encoder_MspInit+0xe8>)
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	613b      	str	r3, [r7, #16]
 80038be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038c0:	2300      	movs	r3, #0
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <HAL_TIM_Encoder_MspInit+0xe8>)
 80038c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c8:	4a0e      	ldr	r2, [pc, #56]	; (8003904 <HAL_TIM_Encoder_MspInit+0xe8>)
 80038ca:	f043 0302 	orr.w	r3, r3, #2
 80038ce:	6313      	str	r3, [r2, #48]	; 0x30
 80038d0:	4b0c      	ldr	r3, [pc, #48]	; (8003904 <HAL_TIM_Encoder_MspInit+0xe8>)
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	60fb      	str	r3, [r7, #12]
 80038da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80038dc:	23c0      	movs	r3, #192	; 0xc0
 80038de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e0:	2302      	movs	r3, #2
 80038e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038e4:	2301      	movs	r3, #1
 80038e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038e8:	2300      	movs	r3, #0
 80038ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80038ec:	2302      	movs	r3, #2
 80038ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038f0:	f107 031c 	add.w	r3, r7, #28
 80038f4:	4619      	mov	r1, r3
 80038f6:	4806      	ldr	r0, [pc, #24]	; (8003910 <HAL_TIM_Encoder_MspInit+0xf4>)
 80038f8:	f001 fc02 	bl	8005100 <HAL_GPIO_Init>
}
 80038fc:	bf00      	nop
 80038fe:	3730      	adds	r7, #48	; 0x30
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40023800 	.word	0x40023800
 8003908:	40020000 	.word	0x40020000
 800390c:	40000800 	.word	0x40000800
 8003910:	40020400 	.word	0x40020400

08003914 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a0e      	ldr	r2, [pc, #56]	; (800395c <HAL_TIM_Base_MspInit+0x48>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d115      	bne.n	8003952 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	4b0d      	ldr	r3, [pc, #52]	; (8003960 <HAL_TIM_Base_MspInit+0x4c>)
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	4a0c      	ldr	r2, [pc, #48]	; (8003960 <HAL_TIM_Base_MspInit+0x4c>)
 8003930:	f043 0302 	orr.w	r3, r3, #2
 8003934:	6413      	str	r3, [r2, #64]	; 0x40
 8003936:	4b0a      	ldr	r3, [pc, #40]	; (8003960 <HAL_TIM_Base_MspInit+0x4c>)
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003942:	2200      	movs	r2, #0
 8003944:	2100      	movs	r1, #0
 8003946:	201d      	movs	r0, #29
 8003948:	f000 ffc3 	bl	80048d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800394c:	201d      	movs	r0, #29
 800394e:	f000 ffdc 	bl	800490a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003952:	bf00      	nop
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40000400 	.word	0x40000400
 8003960:	40023800 	.word	0x40023800

08003964 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b088      	sub	sp, #32
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800396c:	f107 030c 	add.w	r3, r7, #12
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	605a      	str	r2, [r3, #4]
 8003976:	609a      	str	r2, [r3, #8]
 8003978:	60da      	str	r2, [r3, #12]
 800397a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a12      	ldr	r2, [pc, #72]	; (80039cc <HAL_TIM_MspPostInit+0x68>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d11d      	bne.n	80039c2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003986:	2300      	movs	r3, #0
 8003988:	60bb      	str	r3, [r7, #8]
 800398a:	4b11      	ldr	r3, [pc, #68]	; (80039d0 <HAL_TIM_MspPostInit+0x6c>)
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	4a10      	ldr	r2, [pc, #64]	; (80039d0 <HAL_TIM_MspPostInit+0x6c>)
 8003990:	f043 0302 	orr.w	r3, r3, #2
 8003994:	6313      	str	r3, [r2, #48]	; 0x30
 8003996:	4b0e      	ldr	r3, [pc, #56]	; (80039d0 <HAL_TIM_MspPostInit+0x6c>)
 8003998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	60bb      	str	r3, [r7, #8]
 80039a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80039a2:	2301      	movs	r3, #1
 80039a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a6:	2302      	movs	r3, #2
 80039a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ae:	2300      	movs	r3, #0
 80039b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80039b2:	2302      	movs	r3, #2
 80039b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039b6:	f107 030c 	add.w	r3, r7, #12
 80039ba:	4619      	mov	r1, r3
 80039bc:	4805      	ldr	r0, [pc, #20]	; (80039d4 <HAL_TIM_MspPostInit+0x70>)
 80039be:	f001 fb9f 	bl	8005100 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80039c2:	bf00      	nop
 80039c4:	3720      	adds	r7, #32
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40000400 	.word	0x40000400
 80039d0:	40023800 	.word	0x40023800
 80039d4:	40020400 	.word	0x40020400

080039d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039dc:	e7fe      	b.n	80039dc <NMI_Handler+0x4>

080039de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039de:	b480      	push	{r7}
 80039e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039e2:	e7fe      	b.n	80039e2 <HardFault_Handler+0x4>

080039e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039e8:	e7fe      	b.n	80039e8 <MemManage_Handler+0x4>

080039ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039ea:	b480      	push	{r7}
 80039ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039ee:	e7fe      	b.n	80039ee <BusFault_Handler+0x4>

080039f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039f4:	e7fe      	b.n	80039f4 <UsageFault_Handler+0x4>

080039f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039f6:	b480      	push	{r7}
 80039f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039fa:	bf00      	nop
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a08:	bf00      	nop
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a12:	b480      	push	{r7}
 8003a14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a16:	bf00      	nop
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a24:	f000 f930 	bl	8003c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a28:	bf00      	nop
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003a30:	4802      	ldr	r0, [pc, #8]	; (8003a3c <TIM3_IRQHandler+0x10>)
 8003a32:	f003 fe53 	bl	80076dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003a36:	bf00      	nop
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	20002b9c 	.word	0x20002b9c

08003a40 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a44:	4802      	ldr	r0, [pc, #8]	; (8003a50 <DMA2_Stream4_IRQHandler+0x10>)
 8003a46:	f001 f8f1 	bl	8004c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003a4a:	bf00      	nop
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	20002a48 	.word	0x20002a48

08003a54 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a60:	2300      	movs	r3, #0
 8003a62:	617b      	str	r3, [r7, #20]
 8003a64:	e00a      	b.n	8003a7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003a66:	f3af 8000 	nop.w
 8003a6a:	4601      	mov	r1, r0
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	60ba      	str	r2, [r7, #8]
 8003a72:	b2ca      	uxtb	r2, r1
 8003a74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	dbf0      	blt.n	8003a66 <_read+0x12>
	}

return len;
 8003a84:	687b      	ldr	r3, [r7, #4]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <_close>:
	}
	return len;
}

int _close(int file)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b083      	sub	sp, #12
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
	return -1;
 8003a96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ab6:	605a      	str	r2, [r3, #4]
	return 0;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <_isatty>:

int _isatty(int file)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
	return 1;
 8003ace:	2301      	movs	r3, #1
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
	return 0;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
	...

08003af8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b00:	4a14      	ldr	r2, [pc, #80]	; (8003b54 <_sbrk+0x5c>)
 8003b02:	4b15      	ldr	r3, [pc, #84]	; (8003b58 <_sbrk+0x60>)
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b0c:	4b13      	ldr	r3, [pc, #76]	; (8003b5c <_sbrk+0x64>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d102      	bne.n	8003b1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b14:	4b11      	ldr	r3, [pc, #68]	; (8003b5c <_sbrk+0x64>)
 8003b16:	4a12      	ldr	r2, [pc, #72]	; (8003b60 <_sbrk+0x68>)
 8003b18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b1a:	4b10      	ldr	r3, [pc, #64]	; (8003b5c <_sbrk+0x64>)
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4413      	add	r3, r2
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d207      	bcs.n	8003b38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b28:	f004 fc24 	bl	8008374 <__errno>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	220c      	movs	r2, #12
 8003b30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b32:	f04f 33ff 	mov.w	r3, #4294967295
 8003b36:	e009      	b.n	8003b4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b38:	4b08      	ldr	r3, [pc, #32]	; (8003b5c <_sbrk+0x64>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b3e:	4b07      	ldr	r3, [pc, #28]	; (8003b5c <_sbrk+0x64>)
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4413      	add	r3, r2
 8003b46:	4a05      	ldr	r2, [pc, #20]	; (8003b5c <_sbrk+0x64>)
 8003b48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3718      	adds	r7, #24
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	20020000 	.word	0x20020000
 8003b58:	00000400 	.word	0x00000400
 8003b5c:	20002c2c 	.word	0x20002c2c
 8003b60:	20002c48 	.word	0x20002c48

08003b64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b68:	4b08      	ldr	r3, [pc, #32]	; (8003b8c <SystemInit+0x28>)
 8003b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6e:	4a07      	ldr	r2, [pc, #28]	; (8003b8c <SystemInit+0x28>)
 8003b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b78:	4b04      	ldr	r3, [pc, #16]	; (8003b8c <SystemInit+0x28>)
 8003b7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b7e:	609a      	str	r2, [r3, #8]
#endif
}
 8003b80:	bf00      	nop
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	e000ed00 	.word	0xe000ed00

08003b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bc8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003b94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003b96:	e003      	b.n	8003ba0 <LoopCopyDataInit>

08003b98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003b98:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003b9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003b9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003b9e:	3104      	adds	r1, #4

08003ba0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003ba0:	480b      	ldr	r0, [pc, #44]	; (8003bd0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003ba2:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003ba4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003ba6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003ba8:	d3f6      	bcc.n	8003b98 <CopyDataInit>
  ldr  r2, =_sbss
 8003baa:	4a0b      	ldr	r2, [pc, #44]	; (8003bd8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003bac:	e002      	b.n	8003bb4 <LoopFillZerobss>

08003bae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003bae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003bb0:	f842 3b04 	str.w	r3, [r2], #4

08003bb4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003bb4:	4b09      	ldr	r3, [pc, #36]	; (8003bdc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003bb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003bb8:	d3f9      	bcc.n	8003bae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003bba:	f7ff ffd3 	bl	8003b64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bbe:	f004 fbdf 	bl	8008380 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bc2:	f7fe fef1 	bl	80029a8 <main>
  bx  lr    
 8003bc6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003bc8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003bcc:	0800a8dc 	.word	0x0800a8dc
  ldr  r0, =_sdata
 8003bd0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003bd4:	20000758 	.word	0x20000758
  ldr  r2, =_sbss
 8003bd8:	20000758 	.word	0x20000758
  ldr  r3, = _ebss
 8003bdc:	20002c44 	.word	0x20002c44

08003be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003be0:	e7fe      	b.n	8003be0 <ADC_IRQHandler>
	...

08003be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003be8:	4b0e      	ldr	r3, [pc, #56]	; (8003c24 <HAL_Init+0x40>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a0d      	ldr	r2, [pc, #52]	; (8003c24 <HAL_Init+0x40>)
 8003bee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003bf4:	4b0b      	ldr	r3, [pc, #44]	; (8003c24 <HAL_Init+0x40>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a0a      	ldr	r2, [pc, #40]	; (8003c24 <HAL_Init+0x40>)
 8003bfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c00:	4b08      	ldr	r3, [pc, #32]	; (8003c24 <HAL_Init+0x40>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a07      	ldr	r2, [pc, #28]	; (8003c24 <HAL_Init+0x40>)
 8003c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c0c:	2003      	movs	r0, #3
 8003c0e:	f000 fe55 	bl	80048bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c12:	2000      	movs	r0, #0
 8003c14:	f000 f808 	bl	8003c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c18:	f7ff fca2 	bl	8003560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40023c00 	.word	0x40023c00

08003c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c30:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <HAL_InitTick+0x54>)
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	4b12      	ldr	r3, [pc, #72]	; (8003c80 <HAL_InitTick+0x58>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	4619      	mov	r1, r3
 8003c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 fe6d 	bl	8004926 <HAL_SYSTICK_Config>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e00e      	b.n	8003c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b0f      	cmp	r3, #15
 8003c5a:	d80a      	bhi.n	8003c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	6879      	ldr	r1, [r7, #4]
 8003c60:	f04f 30ff 	mov.w	r0, #4294967295
 8003c64:	f000 fe35 	bl	80048d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c68:	4a06      	ldr	r2, [pc, #24]	; (8003c84 <HAL_InitTick+0x5c>)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	e000      	b.n	8003c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	200006e8 	.word	0x200006e8
 8003c80:	200006f0 	.word	0x200006f0
 8003c84:	200006ec 	.word	0x200006ec

08003c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c8c:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <HAL_IncTick+0x20>)
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	461a      	mov	r2, r3
 8003c92:	4b06      	ldr	r3, [pc, #24]	; (8003cac <HAL_IncTick+0x24>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4413      	add	r3, r2
 8003c98:	4a04      	ldr	r2, [pc, #16]	; (8003cac <HAL_IncTick+0x24>)
 8003c9a:	6013      	str	r3, [r2, #0]
}
 8003c9c:	bf00      	nop
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	200006f0 	.word	0x200006f0
 8003cac:	20002c30 	.word	0x20002c30

08003cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8003cb4:	4b03      	ldr	r3, [pc, #12]	; (8003cc4 <HAL_GetTick+0x14>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	20002c30 	.word	0x20002c30

08003cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cd0:	f7ff ffee 	bl	8003cb0 <HAL_GetTick>
 8003cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce0:	d005      	beq.n	8003cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ce2:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <HAL_Delay+0x44>)
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4413      	add	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003cee:	bf00      	nop
 8003cf0:	f7ff ffde 	bl	8003cb0 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d8f7      	bhi.n	8003cf0 <HAL_Delay+0x28>
  {
  }
}
 8003d00:	bf00      	nop
 8003d02:	bf00      	nop
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	200006f0 	.word	0x200006f0

08003d10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e033      	b.n	8003d8e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d109      	bne.n	8003d42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7ff fc3e 	bl	80035b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	f003 0310 	and.w	r3, r3, #16
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d118      	bne.n	8003d80 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d56:	f023 0302 	bic.w	r3, r3, #2
 8003d5a:	f043 0202 	orr.w	r2, r3, #2
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 fb5c 	bl	8004420 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	f023 0303 	bic.w	r3, r3, #3
 8003d76:	f043 0201 	orr.w	r2, r3, #1
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	641a      	str	r2, [r3, #64]	; 0x40
 8003d7e:	e001      	b.n	8003d84 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d101      	bne.n	8003db2 <HAL_ADC_Start+0x1a>
 8003dae:	2302      	movs	r3, #2
 8003db0:	e097      	b.n	8003ee2 <HAL_ADC_Start+0x14a>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d018      	beq.n	8003dfa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0201 	orr.w	r2, r2, #1
 8003dd6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003dd8:	4b45      	ldr	r3, [pc, #276]	; (8003ef0 <HAL_ADC_Start+0x158>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a45      	ldr	r2, [pc, #276]	; (8003ef4 <HAL_ADC_Start+0x15c>)
 8003dde:	fba2 2303 	umull	r2, r3, r2, r3
 8003de2:	0c9a      	lsrs	r2, r3, #18
 8003de4:	4613      	mov	r3, r2
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	4413      	add	r3, r2
 8003dea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003dec:	e002      	b.n	8003df4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	3b01      	subs	r3, #1
 8003df2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1f9      	bne.n	8003dee <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d15f      	bne.n	8003ec8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e10:	f023 0301 	bic.w	r3, r3, #1
 8003e14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d007      	beq.n	8003e3a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e32:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e46:	d106      	bne.n	8003e56 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4c:	f023 0206 	bic.w	r2, r3, #6
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	645a      	str	r2, [r3, #68]	; 0x44
 8003e54:	e002      	b.n	8003e5c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e64:	4b24      	ldr	r3, [pc, #144]	; (8003ef8 <HAL_ADC_Start+0x160>)
 8003e66:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003e70:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f003 031f 	and.w	r3, r3, #31
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10f      	bne.n	8003e9e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d129      	bne.n	8003ee0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689a      	ldr	r2, [r3, #8]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e9a:	609a      	str	r2, [r3, #8]
 8003e9c:	e020      	b.n	8003ee0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a16      	ldr	r2, [pc, #88]	; (8003efc <HAL_ADC_Start+0x164>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d11b      	bne.n	8003ee0 <HAL_ADC_Start+0x148>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d114      	bne.n	8003ee0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ec4:	609a      	str	r2, [r3, #8]
 8003ec6:	e00b      	b.n	8003ee0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ecc:	f043 0210 	orr.w	r2, r3, #16
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed8:	f043 0201 	orr.w	r2, r3, #1
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	200006e8 	.word	0x200006e8
 8003ef4:	431bde83 	.word	0x431bde83
 8003ef8:	40012300 	.word	0x40012300
 8003efc:	40012000 	.word	0x40012000

08003f00 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d101      	bne.n	8003f1e <HAL_ADC_Start_DMA+0x1e>
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	e0ce      	b.n	80040bc <HAL_ADC_Start_DMA+0x1bc>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d018      	beq.n	8003f66 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0201 	orr.w	r2, r2, #1
 8003f42:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003f44:	4b5f      	ldr	r3, [pc, #380]	; (80040c4 <HAL_ADC_Start_DMA+0x1c4>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a5f      	ldr	r2, [pc, #380]	; (80040c8 <HAL_ADC_Start_DMA+0x1c8>)
 8003f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4e:	0c9a      	lsrs	r2, r3, #18
 8003f50:	4613      	mov	r3, r2
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	4413      	add	r3, r2
 8003f56:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003f58:	e002      	b.n	8003f60 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f9      	bne.n	8003f5a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f74:	d107      	bne.n	8003f86 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f84:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	f040 8086 	bne.w	80040a2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003f9e:	f023 0301 	bic.w	r3, r3, #1
 8003fa2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d007      	beq.n	8003fc8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003fc0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd4:	d106      	bne.n	8003fe4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fda:	f023 0206 	bic.w	r2, r3, #6
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	645a      	str	r2, [r3, #68]	; 0x44
 8003fe2:	e002      	b.n	8003fea <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ff2:	4b36      	ldr	r3, [pc, #216]	; (80040cc <HAL_ADC_Start_DMA+0x1cc>)
 8003ff4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffa:	4a35      	ldr	r2, [pc, #212]	; (80040d0 <HAL_ADC_Start_DMA+0x1d0>)
 8003ffc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004002:	4a34      	ldr	r2, [pc, #208]	; (80040d4 <HAL_ADC_Start_DMA+0x1d4>)
 8004004:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400a:	4a33      	ldr	r2, [pc, #204]	; (80040d8 <HAL_ADC_Start_DMA+0x1d8>)
 800400c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004016:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004026:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689a      	ldr	r2, [r3, #8]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004036:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	334c      	adds	r3, #76	; 0x4c
 8004042:	4619      	mov	r1, r3
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f000 fd28 	bl	8004a9c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f003 031f 	and.w	r3, r3, #31
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10f      	bne.n	8004078 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d129      	bne.n	80040ba <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004074:	609a      	str	r2, [r3, #8]
 8004076:	e020      	b.n	80040ba <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a17      	ldr	r2, [pc, #92]	; (80040dc <HAL_ADC_Start_DMA+0x1dc>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d11b      	bne.n	80040ba <HAL_ADC_Start_DMA+0x1ba>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d114      	bne.n	80040ba <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689a      	ldr	r2, [r3, #8]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800409e:	609a      	str	r2, [r3, #8]
 80040a0:	e00b      	b.n	80040ba <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	f043 0210 	orr.w	r2, r3, #16
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b2:	f043 0201 	orr.w	r2, r3, #1
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	200006e8 	.word	0x200006e8
 80040c8:	431bde83 	.word	0x431bde83
 80040cc:	40012300 	.word	0x40012300
 80040d0:	08004619 	.word	0x08004619
 80040d4:	080046d3 	.word	0x080046d3
 80040d8:	080046ef 	.word	0x080046ef
 80040dc:	40012000 	.word	0x40012000

080040e0 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040e8:	2300      	movs	r3, #0
 80040ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d101      	bne.n	80040fa <HAL_ADC_Stop_DMA+0x1a>
 80040f6:	2302      	movs	r3, #2
 80040f8:	e048      	b.n	800418c <HAL_ADC_Stop_DMA+0xac>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0201 	bic.w	r2, r2, #1
 8004110:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	d130      	bne.n	8004182 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689a      	ldr	r2, [r3, #8]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800412e:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004134:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d10f      	bne.n	800415e <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fd02 	bl	8004b4c <HAL_DMA_Abort>
 8004148:	4603      	mov	r3, r0
 800414a:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800414c:	7bfb      	ldrb	r3, [r7, #15]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d005      	beq.n	800415e <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800416c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004176:	f023 0301 	bic.w	r3, r3, #1
 800417a:	f043 0201 	orr.w	r2, r3, #1
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800418a:	7bfb      	ldrb	r3, [r7, #15]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d101      	bne.n	80041d8 <HAL_ADC_ConfigChannel+0x1c>
 80041d4:	2302      	movs	r3, #2
 80041d6:	e113      	b.n	8004400 <HAL_ADC_ConfigChannel+0x244>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b09      	cmp	r3, #9
 80041e6:	d925      	bls.n	8004234 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68d9      	ldr	r1, [r3, #12]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	461a      	mov	r2, r3
 80041f6:	4613      	mov	r3, r2
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	4413      	add	r3, r2
 80041fc:	3b1e      	subs	r3, #30
 80041fe:	2207      	movs	r2, #7
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	43da      	mvns	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	400a      	ands	r2, r1
 800420c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68d9      	ldr	r1, [r3, #12]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	b29b      	uxth	r3, r3
 800421e:	4618      	mov	r0, r3
 8004220:	4603      	mov	r3, r0
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	4403      	add	r3, r0
 8004226:	3b1e      	subs	r3, #30
 8004228:	409a      	lsls	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	60da      	str	r2, [r3, #12]
 8004232:	e022      	b.n	800427a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	6919      	ldr	r1, [r3, #16]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	b29b      	uxth	r3, r3
 8004240:	461a      	mov	r2, r3
 8004242:	4613      	mov	r3, r2
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	4413      	add	r3, r2
 8004248:	2207      	movs	r2, #7
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	43da      	mvns	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	400a      	ands	r2, r1
 8004256:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6919      	ldr	r1, [r3, #16]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	689a      	ldr	r2, [r3, #8]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	b29b      	uxth	r3, r3
 8004268:	4618      	mov	r0, r3
 800426a:	4603      	mov	r3, r0
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	4403      	add	r3, r0
 8004270:	409a      	lsls	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b06      	cmp	r3, #6
 8004280:	d824      	bhi.n	80042cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	4613      	mov	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	3b05      	subs	r3, #5
 8004294:	221f      	movs	r2, #31
 8004296:	fa02 f303 	lsl.w	r3, r2, r3
 800429a:	43da      	mvns	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	400a      	ands	r2, r1
 80042a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	4618      	mov	r0, r3
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	4613      	mov	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4413      	add	r3, r2
 80042bc:	3b05      	subs	r3, #5
 80042be:	fa00 f203 	lsl.w	r2, r0, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	635a      	str	r2, [r3, #52]	; 0x34
 80042ca:	e04c      	b.n	8004366 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	2b0c      	cmp	r3, #12
 80042d2:	d824      	bhi.n	800431e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	4613      	mov	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	3b23      	subs	r3, #35	; 0x23
 80042e6:	221f      	movs	r2, #31
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	43da      	mvns	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	400a      	ands	r2, r1
 80042f4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	b29b      	uxth	r3, r3
 8004302:	4618      	mov	r0, r3
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	4613      	mov	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	3b23      	subs	r3, #35	; 0x23
 8004310:	fa00 f203 	lsl.w	r2, r0, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	631a      	str	r2, [r3, #48]	; 0x30
 800431c:	e023      	b.n	8004366 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	4613      	mov	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	3b41      	subs	r3, #65	; 0x41
 8004330:	221f      	movs	r2, #31
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	43da      	mvns	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	400a      	ands	r2, r1
 800433e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	b29b      	uxth	r3, r3
 800434c:	4618      	mov	r0, r3
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	4613      	mov	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4413      	add	r3, r2
 8004358:	3b41      	subs	r3, #65	; 0x41
 800435a:	fa00 f203 	lsl.w	r2, r0, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004366:	4b29      	ldr	r3, [pc, #164]	; (800440c <HAL_ADC_ConfigChannel+0x250>)
 8004368:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a28      	ldr	r2, [pc, #160]	; (8004410 <HAL_ADC_ConfigChannel+0x254>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d10f      	bne.n	8004394 <HAL_ADC_ConfigChannel+0x1d8>
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b12      	cmp	r3, #18
 800437a:	d10b      	bne.n	8004394 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a1d      	ldr	r2, [pc, #116]	; (8004410 <HAL_ADC_ConfigChannel+0x254>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d12b      	bne.n	80043f6 <HAL_ADC_ConfigChannel+0x23a>
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a1c      	ldr	r2, [pc, #112]	; (8004414 <HAL_ADC_ConfigChannel+0x258>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d003      	beq.n	80043b0 <HAL_ADC_ConfigChannel+0x1f4>
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b11      	cmp	r3, #17
 80043ae:	d122      	bne.n	80043f6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a11      	ldr	r2, [pc, #68]	; (8004414 <HAL_ADC_ConfigChannel+0x258>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d111      	bne.n	80043f6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80043d2:	4b11      	ldr	r3, [pc, #68]	; (8004418 <HAL_ADC_ConfigChannel+0x25c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a11      	ldr	r2, [pc, #68]	; (800441c <HAL_ADC_ConfigChannel+0x260>)
 80043d8:	fba2 2303 	umull	r2, r3, r2, r3
 80043dc:	0c9a      	lsrs	r2, r3, #18
 80043de:	4613      	mov	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80043e8:	e002      	b.n	80043f0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	3b01      	subs	r3, #1
 80043ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1f9      	bne.n	80043ea <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	40012300 	.word	0x40012300
 8004410:	40012000 	.word	0x40012000
 8004414:	10000012 	.word	0x10000012
 8004418:	200006e8 	.word	0x200006e8
 800441c:	431bde83 	.word	0x431bde83

08004420 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004428:	4b79      	ldr	r3, [pc, #484]	; (8004610 <ADC_Init+0x1f0>)
 800442a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	431a      	orrs	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004454:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6859      	ldr	r1, [r3, #4]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	021a      	lsls	r2, r3, #8
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004478:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6859      	ldr	r1, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689a      	ldr	r2, [r3, #8]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800449a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6899      	ldr	r1, [r3, #8]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b2:	4a58      	ldr	r2, [pc, #352]	; (8004614 <ADC_Init+0x1f4>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d022      	beq.n	80044fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689a      	ldr	r2, [r3, #8]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80044c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6899      	ldr	r1, [r3, #8]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80044e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6899      	ldr	r1, [r3, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	609a      	str	r2, [r3, #8]
 80044fc:	e00f      	b.n	800451e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800450c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800451c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0202 	bic.w	r2, r2, #2
 800452c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6899      	ldr	r1, [r3, #8]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	7e1b      	ldrb	r3, [r3, #24]
 8004538:	005a      	lsls	r2, r3, #1
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d01b      	beq.n	8004584 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800455a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800456a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6859      	ldr	r1, [r3, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	3b01      	subs	r3, #1
 8004578:	035a      	lsls	r2, r3, #13
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	605a      	str	r2, [r3, #4]
 8004582:	e007      	b.n	8004594 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004592:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80045a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	3b01      	subs	r3, #1
 80045b0:	051a      	lsls	r2, r3, #20
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80045c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6899      	ldr	r1, [r3, #8]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80045d6:	025a      	lsls	r2, r3, #9
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689a      	ldr	r2, [r3, #8]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6899      	ldr	r1, [r3, #8]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	029a      	lsls	r2, r3, #10
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	609a      	str	r2, [r3, #8]
}
 8004604:	bf00      	nop
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	40012300 	.word	0x40012300
 8004614:	0f000001 	.word	0x0f000001

08004618 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004624:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800462e:	2b00      	cmp	r3, #0
 8004630:	d13c      	bne.n	80046ac <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d12b      	bne.n	80046a4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004650:	2b00      	cmp	r3, #0
 8004652:	d127      	bne.n	80046a4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800465e:	2b00      	cmp	r3, #0
 8004660:	d006      	beq.n	8004670 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800466c:	2b00      	cmp	r3, #0
 800466e:	d119      	bne.n	80046a4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0220 	bic.w	r2, r2, #32
 800467e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d105      	bne.n	80046a4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469c:	f043 0201 	orr.w	r2, r3, #1
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f7fe ff29 	bl	80034fc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80046aa:	e00e      	b.n	80046ca <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	f003 0310 	and.w	r3, r3, #16
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d003      	beq.n	80046c0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f7ff fd75 	bl	80041a8 <HAL_ADC_ErrorCallback>
}
 80046be:	e004      	b.n	80046ca <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	4798      	blx	r3
}
 80046ca:	bf00      	nop
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b084      	sub	sp, #16
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046de:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f7ff fd57 	bl	8004194 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046e6:	bf00      	nop
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b084      	sub	sp, #16
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2240      	movs	r2, #64	; 0x40
 8004700:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004706:	f043 0204 	orr.w	r2, r3, #4
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f7ff fd4a 	bl	80041a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004714:	bf00      	nop
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <__NVIC_SetPriorityGrouping>:
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f003 0307 	and.w	r3, r3, #7
 800472a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800472c:	4b0c      	ldr	r3, [pc, #48]	; (8004760 <__NVIC_SetPriorityGrouping+0x44>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004738:	4013      	ands	r3, r2
 800473a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004744:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800474c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800474e:	4a04      	ldr	r2, [pc, #16]	; (8004760 <__NVIC_SetPriorityGrouping+0x44>)
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	60d3      	str	r3, [r2, #12]
}
 8004754:	bf00      	nop
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr
 8004760:	e000ed00 	.word	0xe000ed00

08004764 <__NVIC_GetPriorityGrouping>:
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004768:	4b04      	ldr	r3, [pc, #16]	; (800477c <__NVIC_GetPriorityGrouping+0x18>)
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	0a1b      	lsrs	r3, r3, #8
 800476e:	f003 0307 	and.w	r3, r3, #7
}
 8004772:	4618      	mov	r0, r3
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	e000ed00 	.word	0xe000ed00

08004780 <__NVIC_EnableIRQ>:
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	4603      	mov	r3, r0
 8004788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800478a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800478e:	2b00      	cmp	r3, #0
 8004790:	db0b      	blt.n	80047aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004792:	79fb      	ldrb	r3, [r7, #7]
 8004794:	f003 021f 	and.w	r2, r3, #31
 8004798:	4907      	ldr	r1, [pc, #28]	; (80047b8 <__NVIC_EnableIRQ+0x38>)
 800479a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800479e:	095b      	lsrs	r3, r3, #5
 80047a0:	2001      	movs	r0, #1
 80047a2:	fa00 f202 	lsl.w	r2, r0, r2
 80047a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80047aa:	bf00      	nop
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	e000e100 	.word	0xe000e100

080047bc <__NVIC_SetPriority>:
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	4603      	mov	r3, r0
 80047c4:	6039      	str	r1, [r7, #0]
 80047c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	db0a      	blt.n	80047e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	490c      	ldr	r1, [pc, #48]	; (8004808 <__NVIC_SetPriority+0x4c>)
 80047d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047da:	0112      	lsls	r2, r2, #4
 80047dc:	b2d2      	uxtb	r2, r2
 80047de:	440b      	add	r3, r1
 80047e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80047e4:	e00a      	b.n	80047fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	4908      	ldr	r1, [pc, #32]	; (800480c <__NVIC_SetPriority+0x50>)
 80047ec:	79fb      	ldrb	r3, [r7, #7]
 80047ee:	f003 030f 	and.w	r3, r3, #15
 80047f2:	3b04      	subs	r3, #4
 80047f4:	0112      	lsls	r2, r2, #4
 80047f6:	b2d2      	uxtb	r2, r2
 80047f8:	440b      	add	r3, r1
 80047fa:	761a      	strb	r2, [r3, #24]
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	e000e100 	.word	0xe000e100
 800480c:	e000ed00 	.word	0xe000ed00

08004810 <NVIC_EncodePriority>:
{
 8004810:	b480      	push	{r7}
 8004812:	b089      	sub	sp, #36	; 0x24
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	f1c3 0307 	rsb	r3, r3, #7
 800482a:	2b04      	cmp	r3, #4
 800482c:	bf28      	it	cs
 800482e:	2304      	movcs	r3, #4
 8004830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	3304      	adds	r3, #4
 8004836:	2b06      	cmp	r3, #6
 8004838:	d902      	bls.n	8004840 <NVIC_EncodePriority+0x30>
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	3b03      	subs	r3, #3
 800483e:	e000      	b.n	8004842 <NVIC_EncodePriority+0x32>
 8004840:	2300      	movs	r3, #0
 8004842:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004844:	f04f 32ff 	mov.w	r2, #4294967295
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	fa02 f303 	lsl.w	r3, r2, r3
 800484e:	43da      	mvns	r2, r3
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	401a      	ands	r2, r3
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004858:	f04f 31ff 	mov.w	r1, #4294967295
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	fa01 f303 	lsl.w	r3, r1, r3
 8004862:	43d9      	mvns	r1, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004868:	4313      	orrs	r3, r2
}
 800486a:	4618      	mov	r0, r3
 800486c:	3724      	adds	r7, #36	; 0x24
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
	...

08004878 <SysTick_Config>:
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3b01      	subs	r3, #1
 8004884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004888:	d301      	bcc.n	800488e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800488a:	2301      	movs	r3, #1
 800488c:	e00f      	b.n	80048ae <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800488e:	4a0a      	ldr	r2, [pc, #40]	; (80048b8 <SysTick_Config+0x40>)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	3b01      	subs	r3, #1
 8004894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004896:	210f      	movs	r1, #15
 8004898:	f04f 30ff 	mov.w	r0, #4294967295
 800489c:	f7ff ff8e 	bl	80047bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048a0:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <SysTick_Config+0x40>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048a6:	4b04      	ldr	r3, [pc, #16]	; (80048b8 <SysTick_Config+0x40>)
 80048a8:	2207      	movs	r2, #7
 80048aa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	e000e010 	.word	0xe000e010

080048bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7ff ff29 	bl	800471c <__NVIC_SetPriorityGrouping>
}
 80048ca:	bf00      	nop
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b086      	sub	sp, #24
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	4603      	mov	r3, r0
 80048da:	60b9      	str	r1, [r7, #8]
 80048dc:	607a      	str	r2, [r7, #4]
 80048de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048e0:	2300      	movs	r3, #0
 80048e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048e4:	f7ff ff3e 	bl	8004764 <__NVIC_GetPriorityGrouping>
 80048e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	68b9      	ldr	r1, [r7, #8]
 80048ee:	6978      	ldr	r0, [r7, #20]
 80048f0:	f7ff ff8e 	bl	8004810 <NVIC_EncodePriority>
 80048f4:	4602      	mov	r2, r0
 80048f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048fa:	4611      	mov	r1, r2
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7ff ff5d 	bl	80047bc <__NVIC_SetPriority>
}
 8004902:	bf00      	nop
 8004904:	3718      	adds	r7, #24
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b082      	sub	sp, #8
 800490e:	af00      	add	r7, sp, #0
 8004910:	4603      	mov	r3, r0
 8004912:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004918:	4618      	mov	r0, r3
 800491a:	f7ff ff31 	bl	8004780 <__NVIC_EnableIRQ>
}
 800491e:	bf00      	nop
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b082      	sub	sp, #8
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7ff ffa2 	bl	8004878 <SysTick_Config>
 8004934:	4603      	mov	r3, r0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
	...

08004940 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004948:	2300      	movs	r3, #0
 800494a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800494c:	f7ff f9b0 	bl	8003cb0 <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e099      	b.n	8004a90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 0201 	bic.w	r2, r2, #1
 800497a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800497c:	e00f      	b.n	800499e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800497e:	f7ff f997 	bl	8003cb0 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b05      	cmp	r3, #5
 800498a:	d908      	bls.n	800499e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2220      	movs	r2, #32
 8004990:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2203      	movs	r2, #3
 8004996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e078      	b.n	8004a90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1e8      	bne.n	800497e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	4b38      	ldr	r3, [pc, #224]	; (8004a98 <HAL_DMA_Init+0x158>)
 80049b8:	4013      	ands	r3, r2
 80049ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	2b04      	cmp	r3, #4
 80049f6:	d107      	bne.n	8004a08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a00:	4313      	orrs	r3, r2
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f023 0307 	bic.w	r3, r3, #7
 8004a1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	d117      	bne.n	8004a62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00e      	beq.n	8004a62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 fadf 	bl	8005008 <DMA_CheckFifoParam>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d008      	beq.n	8004a62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2240      	movs	r2, #64	; 0x40
 8004a54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e016      	b.n	8004a90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 fa96 	bl	8004f9c <DMA_CalcBaseAndBitshift>
 8004a70:	4603      	mov	r3, r0
 8004a72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a78:	223f      	movs	r2, #63	; 0x3f
 8004a7a:	409a      	lsls	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3718      	adds	r7, #24
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	f010803f 	.word	0xf010803f

08004a9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
 8004aa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d101      	bne.n	8004ac2 <HAL_DMA_Start_IT+0x26>
 8004abe:	2302      	movs	r3, #2
 8004ac0:	e040      	b.n	8004b44 <HAL_DMA_Start_IT+0xa8>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d12f      	bne.n	8004b36 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2202      	movs	r2, #2
 8004ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	68b9      	ldr	r1, [r7, #8]
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 fa28 	bl	8004f40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af4:	223f      	movs	r2, #63	; 0x3f
 8004af6:	409a      	lsls	r2, r3
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f042 0216 	orr.w	r2, r2, #22
 8004b0a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d007      	beq.n	8004b24 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0208 	orr.w	r2, r2, #8
 8004b22:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0201 	orr.w	r2, r2, #1
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	e005      	b.n	8004b42 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004b3e:	2302      	movs	r3, #2
 8004b40:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b58:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004b5a:	f7ff f8a9 	bl	8003cb0 <HAL_GetTick>
 8004b5e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d008      	beq.n	8004b7e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2280      	movs	r2, #128	; 0x80
 8004b70:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e052      	b.n	8004c24 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 0216 	bic.w	r2, r2, #22
 8004b8c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695a      	ldr	r2, [r3, #20]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b9c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d103      	bne.n	8004bae <HAL_DMA_Abort+0x62>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d007      	beq.n	8004bbe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 0208 	bic.w	r2, r2, #8
 8004bbc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 0201 	bic.w	r2, r2, #1
 8004bcc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bce:	e013      	b.n	8004bf8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bd0:	f7ff f86e 	bl	8003cb0 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b05      	cmp	r3, #5
 8004bdc:	d90c      	bls.n	8004bf8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2220      	movs	r2, #32
 8004be2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2203      	movs	r2, #3
 8004be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e015      	b.n	8004c24 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1e4      	bne.n	8004bd0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c0a:	223f      	movs	r2, #63	; 0x3f
 8004c0c:	409a      	lsls	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c38:	4b8e      	ldr	r3, [pc, #568]	; (8004e74 <HAL_DMA_IRQHandler+0x248>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a8e      	ldr	r2, [pc, #568]	; (8004e78 <HAL_DMA_IRQHandler+0x24c>)
 8004c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c42:	0a9b      	lsrs	r3, r3, #10
 8004c44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c56:	2208      	movs	r2, #8
 8004c58:	409a      	lsls	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d01a      	beq.n	8004c98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d013      	beq.n	8004c98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0204 	bic.w	r2, r2, #4
 8004c7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c84:	2208      	movs	r2, #8
 8004c86:	409a      	lsls	r2, r3
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c90:	f043 0201 	orr.w	r2, r3, #1
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	409a      	lsls	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d012      	beq.n	8004cce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00b      	beq.n	8004cce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cba:	2201      	movs	r2, #1
 8004cbc:	409a      	lsls	r2, r3
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc6:	f043 0202 	orr.w	r2, r3, #2
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cd2:	2204      	movs	r2, #4
 8004cd4:	409a      	lsls	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d012      	beq.n	8004d04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00b      	beq.n	8004d04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf0:	2204      	movs	r2, #4
 8004cf2:	409a      	lsls	r2, r3
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfc:	f043 0204 	orr.w	r2, r3, #4
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d08:	2210      	movs	r2, #16
 8004d0a:	409a      	lsls	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d043      	beq.n	8004d9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0308 	and.w	r3, r3, #8
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d03c      	beq.n	8004d9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d26:	2210      	movs	r2, #16
 8004d28:	409a      	lsls	r2, r3
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d018      	beq.n	8004d6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d108      	bne.n	8004d5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d024      	beq.n	8004d9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	4798      	blx	r3
 8004d5a:	e01f      	b.n	8004d9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d01b      	beq.n	8004d9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	4798      	blx	r3
 8004d6c:	e016      	b.n	8004d9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d107      	bne.n	8004d8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0208 	bic.w	r2, r2, #8
 8004d8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da0:	2220      	movs	r2, #32
 8004da2:	409a      	lsls	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	4013      	ands	r3, r2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 808f 	beq.w	8004ecc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0310 	and.w	r3, r3, #16
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 8087 	beq.w	8004ecc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	409a      	lsls	r2, r3
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b05      	cmp	r3, #5
 8004dd4:	d136      	bne.n	8004e44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 0216 	bic.w	r2, r2, #22
 8004de4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	695a      	ldr	r2, [r3, #20]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004df4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d103      	bne.n	8004e06 <HAL_DMA_IRQHandler+0x1da>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d007      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0208 	bic.w	r2, r2, #8
 8004e14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e1a:	223f      	movs	r2, #63	; 0x3f
 8004e1c:	409a      	lsls	r2, r3
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d07e      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	4798      	blx	r3
        }
        return;
 8004e42:	e079      	b.n	8004f38 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d01d      	beq.n	8004e8e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10d      	bne.n	8004e7c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d031      	beq.n	8004ecc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	4798      	blx	r3
 8004e70:	e02c      	b.n	8004ecc <HAL_DMA_IRQHandler+0x2a0>
 8004e72:	bf00      	nop
 8004e74:	200006e8 	.word	0x200006e8
 8004e78:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d023      	beq.n	8004ecc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	4798      	blx	r3
 8004e8c:	e01e      	b.n	8004ecc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10f      	bne.n	8004ebc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0210 	bic.w	r2, r2, #16
 8004eaa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d003      	beq.n	8004ecc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d032      	beq.n	8004f3a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d022      	beq.n	8004f26 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2205      	movs	r2, #5
 8004ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 0201 	bic.w	r2, r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	3301      	adds	r3, #1
 8004efc:	60bb      	str	r3, [r7, #8]
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d307      	bcc.n	8004f14 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1f2      	bne.n	8004ef8 <HAL_DMA_IRQHandler+0x2cc>
 8004f12:	e000      	b.n	8004f16 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004f14:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d005      	beq.n	8004f3a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	4798      	blx	r3
 8004f36:	e000      	b.n	8004f3a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004f38:	bf00      	nop
    }
  }
}
 8004f3a:	3718      	adds	r7, #24
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	2b40      	cmp	r3, #64	; 0x40
 8004f6c:	d108      	bne.n	8004f80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004f7e:	e007      	b.n	8004f90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	60da      	str	r2, [r3, #12]
}
 8004f90:	bf00      	nop
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	3b10      	subs	r3, #16
 8004fac:	4a14      	ldr	r2, [pc, #80]	; (8005000 <DMA_CalcBaseAndBitshift+0x64>)
 8004fae:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb2:	091b      	lsrs	r3, r3, #4
 8004fb4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004fb6:	4a13      	ldr	r2, [pc, #76]	; (8005004 <DMA_CalcBaseAndBitshift+0x68>)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	4413      	add	r3, r2
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b03      	cmp	r3, #3
 8004fc8:	d909      	bls.n	8004fde <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004fd2:	f023 0303 	bic.w	r3, r3, #3
 8004fd6:	1d1a      	adds	r2, r3, #4
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	659a      	str	r2, [r3, #88]	; 0x58
 8004fdc:	e007      	b.n	8004fee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004fe6:	f023 0303 	bic.w	r3, r3, #3
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	aaaaaaab 	.word	0xaaaaaaab
 8005004:	0800a028 	.word	0x0800a028

08005008 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005010:	2300      	movs	r3, #0
 8005012:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005018:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d11f      	bne.n	8005062 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	2b03      	cmp	r3, #3
 8005026:	d856      	bhi.n	80050d6 <DMA_CheckFifoParam+0xce>
 8005028:	a201      	add	r2, pc, #4	; (adr r2, 8005030 <DMA_CheckFifoParam+0x28>)
 800502a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502e:	bf00      	nop
 8005030:	08005041 	.word	0x08005041
 8005034:	08005053 	.word	0x08005053
 8005038:	08005041 	.word	0x08005041
 800503c:	080050d7 	.word	0x080050d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005044:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d046      	beq.n	80050da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005050:	e043      	b.n	80050da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005056:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800505a:	d140      	bne.n	80050de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005060:	e03d      	b.n	80050de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800506a:	d121      	bne.n	80050b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	2b03      	cmp	r3, #3
 8005070:	d837      	bhi.n	80050e2 <DMA_CheckFifoParam+0xda>
 8005072:	a201      	add	r2, pc, #4	; (adr r2, 8005078 <DMA_CheckFifoParam+0x70>)
 8005074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005078:	08005089 	.word	0x08005089
 800507c:	0800508f 	.word	0x0800508f
 8005080:	08005089 	.word	0x08005089
 8005084:	080050a1 	.word	0x080050a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	73fb      	strb	r3, [r7, #15]
      break;
 800508c:	e030      	b.n	80050f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005092:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d025      	beq.n	80050e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800509e:	e022      	b.n	80050e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050a8:	d11f      	bne.n	80050ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80050ae:	e01c      	b.n	80050ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d903      	bls.n	80050be <DMA_CheckFifoParam+0xb6>
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2b03      	cmp	r3, #3
 80050ba:	d003      	beq.n	80050c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80050bc:	e018      	b.n	80050f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	73fb      	strb	r3, [r7, #15]
      break;
 80050c2:	e015      	b.n	80050f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00e      	beq.n	80050ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	73fb      	strb	r3, [r7, #15]
      break;
 80050d4:	e00b      	b.n	80050ee <DMA_CheckFifoParam+0xe6>
      break;
 80050d6:	bf00      	nop
 80050d8:	e00a      	b.n	80050f0 <DMA_CheckFifoParam+0xe8>
      break;
 80050da:	bf00      	nop
 80050dc:	e008      	b.n	80050f0 <DMA_CheckFifoParam+0xe8>
      break;
 80050de:	bf00      	nop
 80050e0:	e006      	b.n	80050f0 <DMA_CheckFifoParam+0xe8>
      break;
 80050e2:	bf00      	nop
 80050e4:	e004      	b.n	80050f0 <DMA_CheckFifoParam+0xe8>
      break;
 80050e6:	bf00      	nop
 80050e8:	e002      	b.n	80050f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80050ea:	bf00      	nop
 80050ec:	e000      	b.n	80050f0 <DMA_CheckFifoParam+0xe8>
      break;
 80050ee:	bf00      	nop
    }
  } 
  
  return status; 
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop

08005100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005100:	b480      	push	{r7}
 8005102:	b089      	sub	sp, #36	; 0x24
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800510a:	2300      	movs	r3, #0
 800510c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800510e:	2300      	movs	r3, #0
 8005110:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005112:	2300      	movs	r3, #0
 8005114:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005116:	2300      	movs	r3, #0
 8005118:	61fb      	str	r3, [r7, #28]
 800511a:	e159      	b.n	80053d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800511c:	2201      	movs	r2, #1
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	fa02 f303 	lsl.w	r3, r2, r3
 8005124:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	4013      	ands	r3, r2
 800512e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	429a      	cmp	r2, r3
 8005136:	f040 8148 	bne.w	80053ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	2b01      	cmp	r3, #1
 8005144:	d005      	beq.n	8005152 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800514e:	2b02      	cmp	r3, #2
 8005150:	d130      	bne.n	80051b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	2203      	movs	r2, #3
 800515e:	fa02 f303 	lsl.w	r3, r2, r3
 8005162:	43db      	mvns	r3, r3
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	4013      	ands	r3, r2
 8005168:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	fa02 f303 	lsl.w	r3, r2, r3
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	4313      	orrs	r3, r2
 800517a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005188:	2201      	movs	r2, #1
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	fa02 f303 	lsl.w	r3, r2, r3
 8005190:	43db      	mvns	r3, r3
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	4013      	ands	r3, r2
 8005196:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	091b      	lsrs	r3, r3, #4
 800519e:	f003 0201 	and.w	r2, r3, #1
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	fa02 f303 	lsl.w	r3, r2, r3
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f003 0303 	and.w	r3, r3, #3
 80051bc:	2b03      	cmp	r3, #3
 80051be:	d017      	beq.n	80051f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	2203      	movs	r2, #3
 80051cc:	fa02 f303 	lsl.w	r3, r2, r3
 80051d0:	43db      	mvns	r3, r3
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	4013      	ands	r3, r2
 80051d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	689a      	ldr	r2, [r3, #8]
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f003 0303 	and.w	r3, r3, #3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d123      	bne.n	8005244 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	08da      	lsrs	r2, r3, #3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3208      	adds	r2, #8
 8005204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005208:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	f003 0307 	and.w	r3, r3, #7
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	220f      	movs	r2, #15
 8005214:	fa02 f303 	lsl.w	r3, r2, r3
 8005218:	43db      	mvns	r3, r3
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	4013      	ands	r3, r2
 800521e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	691a      	ldr	r2, [r3, #16]
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	fa02 f303 	lsl.w	r3, r2, r3
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	4313      	orrs	r3, r2
 8005234:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	08da      	lsrs	r2, r3, #3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	3208      	adds	r2, #8
 800523e:	69b9      	ldr	r1, [r7, #24]
 8005240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	2203      	movs	r2, #3
 8005250:	fa02 f303 	lsl.w	r3, r2, r3
 8005254:	43db      	mvns	r3, r3
 8005256:	69ba      	ldr	r2, [r7, #24]
 8005258:	4013      	ands	r3, r2
 800525a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f003 0203 	and.w	r2, r3, #3
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	fa02 f303 	lsl.w	r3, r2, r3
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	4313      	orrs	r3, r2
 8005270:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 80a2 	beq.w	80053ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005286:	2300      	movs	r3, #0
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	4b57      	ldr	r3, [pc, #348]	; (80053e8 <HAL_GPIO_Init+0x2e8>)
 800528c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528e:	4a56      	ldr	r2, [pc, #344]	; (80053e8 <HAL_GPIO_Init+0x2e8>)
 8005290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005294:	6453      	str	r3, [r2, #68]	; 0x44
 8005296:	4b54      	ldr	r3, [pc, #336]	; (80053e8 <HAL_GPIO_Init+0x2e8>)
 8005298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800529e:	60fb      	str	r3, [r7, #12]
 80052a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052a2:	4a52      	ldr	r2, [pc, #328]	; (80053ec <HAL_GPIO_Init+0x2ec>)
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	089b      	lsrs	r3, r3, #2
 80052a8:	3302      	adds	r3, #2
 80052aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	220f      	movs	r2, #15
 80052ba:	fa02 f303 	lsl.w	r3, r2, r3
 80052be:	43db      	mvns	r3, r3
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	4013      	ands	r3, r2
 80052c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a49      	ldr	r2, [pc, #292]	; (80053f0 <HAL_GPIO_Init+0x2f0>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d019      	beq.n	8005302 <HAL_GPIO_Init+0x202>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a48      	ldr	r2, [pc, #288]	; (80053f4 <HAL_GPIO_Init+0x2f4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d013      	beq.n	80052fe <HAL_GPIO_Init+0x1fe>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a47      	ldr	r2, [pc, #284]	; (80053f8 <HAL_GPIO_Init+0x2f8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00d      	beq.n	80052fa <HAL_GPIO_Init+0x1fa>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a46      	ldr	r2, [pc, #280]	; (80053fc <HAL_GPIO_Init+0x2fc>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d007      	beq.n	80052f6 <HAL_GPIO_Init+0x1f6>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a45      	ldr	r2, [pc, #276]	; (8005400 <HAL_GPIO_Init+0x300>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d101      	bne.n	80052f2 <HAL_GPIO_Init+0x1f2>
 80052ee:	2304      	movs	r3, #4
 80052f0:	e008      	b.n	8005304 <HAL_GPIO_Init+0x204>
 80052f2:	2307      	movs	r3, #7
 80052f4:	e006      	b.n	8005304 <HAL_GPIO_Init+0x204>
 80052f6:	2303      	movs	r3, #3
 80052f8:	e004      	b.n	8005304 <HAL_GPIO_Init+0x204>
 80052fa:	2302      	movs	r3, #2
 80052fc:	e002      	b.n	8005304 <HAL_GPIO_Init+0x204>
 80052fe:	2301      	movs	r3, #1
 8005300:	e000      	b.n	8005304 <HAL_GPIO_Init+0x204>
 8005302:	2300      	movs	r3, #0
 8005304:	69fa      	ldr	r2, [r7, #28]
 8005306:	f002 0203 	and.w	r2, r2, #3
 800530a:	0092      	lsls	r2, r2, #2
 800530c:	4093      	lsls	r3, r2
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	4313      	orrs	r3, r2
 8005312:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005314:	4935      	ldr	r1, [pc, #212]	; (80053ec <HAL_GPIO_Init+0x2ec>)
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	089b      	lsrs	r3, r3, #2
 800531a:	3302      	adds	r3, #2
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005322:	4b38      	ldr	r3, [pc, #224]	; (8005404 <HAL_GPIO_Init+0x304>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	43db      	mvns	r3, r3
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	4013      	ands	r3, r2
 8005330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	4313      	orrs	r3, r2
 8005344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005346:	4a2f      	ldr	r2, [pc, #188]	; (8005404 <HAL_GPIO_Init+0x304>)
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800534c:	4b2d      	ldr	r3, [pc, #180]	; (8005404 <HAL_GPIO_Init+0x304>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	43db      	mvns	r3, r3
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	4013      	ands	r3, r2
 800535a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	4313      	orrs	r3, r2
 800536e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005370:	4a24      	ldr	r2, [pc, #144]	; (8005404 <HAL_GPIO_Init+0x304>)
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005376:	4b23      	ldr	r3, [pc, #140]	; (8005404 <HAL_GPIO_Init+0x304>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	43db      	mvns	r3, r3
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	4013      	ands	r3, r2
 8005384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	4313      	orrs	r3, r2
 8005398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800539a:	4a1a      	ldr	r2, [pc, #104]	; (8005404 <HAL_GPIO_Init+0x304>)
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053a0:	4b18      	ldr	r3, [pc, #96]	; (8005404 <HAL_GPIO_Init+0x304>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	43db      	mvns	r3, r3
 80053aa:	69ba      	ldr	r2, [r7, #24]
 80053ac:	4013      	ands	r3, r2
 80053ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053c4:	4a0f      	ldr	r2, [pc, #60]	; (8005404 <HAL_GPIO_Init+0x304>)
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	3301      	adds	r3, #1
 80053ce:	61fb      	str	r3, [r7, #28]
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	2b0f      	cmp	r3, #15
 80053d4:	f67f aea2 	bls.w	800511c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053d8:	bf00      	nop
 80053da:	bf00      	nop
 80053dc:	3724      	adds	r7, #36	; 0x24
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	40023800 	.word	0x40023800
 80053ec:	40013800 	.word	0x40013800
 80053f0:	40020000 	.word	0x40020000
 80053f4:	40020400 	.word	0x40020400
 80053f8:	40020800 	.word	0x40020800
 80053fc:	40020c00 	.word	0x40020c00
 8005400:	40021000 	.word	0x40021000
 8005404:	40013c00 	.word	0x40013c00

08005408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	460b      	mov	r3, r1
 8005412:	807b      	strh	r3, [r7, #2]
 8005414:	4613      	mov	r3, r2
 8005416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005418:	787b      	ldrb	r3, [r7, #1]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800541e:	887a      	ldrh	r2, [r7, #2]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005424:	e003      	b.n	800542e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005426:	887b      	ldrh	r3, [r7, #2]
 8005428:	041a      	lsls	r2, r3, #16
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	619a      	str	r2, [r3, #24]
}
 800542e:	bf00      	nop
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
	...

0800543c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e12b      	b.n	80056a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d106      	bne.n	8005468 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7fe f938 	bl	80036d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2224      	movs	r2, #36	; 0x24
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f022 0201 	bic.w	r2, r2, #1
 800547e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800548e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800549e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80054a0:	f001 fbbc 	bl	8006c1c <HAL_RCC_GetPCLK1Freq>
 80054a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	4a81      	ldr	r2, [pc, #516]	; (80056b0 <HAL_I2C_Init+0x274>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d807      	bhi.n	80054c0 <HAL_I2C_Init+0x84>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4a80      	ldr	r2, [pc, #512]	; (80056b4 <HAL_I2C_Init+0x278>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	bf94      	ite	ls
 80054b8:	2301      	movls	r3, #1
 80054ba:	2300      	movhi	r3, #0
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	e006      	b.n	80054ce <HAL_I2C_Init+0x92>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4a7d      	ldr	r2, [pc, #500]	; (80056b8 <HAL_I2C_Init+0x27c>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	bf94      	ite	ls
 80054c8:	2301      	movls	r3, #1
 80054ca:	2300      	movhi	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e0e7      	b.n	80056a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	4a78      	ldr	r2, [pc, #480]	; (80056bc <HAL_I2C_Init+0x280>)
 80054da:	fba2 2303 	umull	r2, r3, r2, r3
 80054de:	0c9b      	lsrs	r3, r3, #18
 80054e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	4a6a      	ldr	r2, [pc, #424]	; (80056b0 <HAL_I2C_Init+0x274>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d802      	bhi.n	8005510 <HAL_I2C_Init+0xd4>
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	3301      	adds	r3, #1
 800550e:	e009      	b.n	8005524 <HAL_I2C_Init+0xe8>
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005516:	fb02 f303 	mul.w	r3, r2, r3
 800551a:	4a69      	ldr	r2, [pc, #420]	; (80056c0 <HAL_I2C_Init+0x284>)
 800551c:	fba2 2303 	umull	r2, r3, r2, r3
 8005520:	099b      	lsrs	r3, r3, #6
 8005522:	3301      	adds	r3, #1
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	6812      	ldr	r2, [r2, #0]
 8005528:	430b      	orrs	r3, r1
 800552a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005536:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	495c      	ldr	r1, [pc, #368]	; (80056b0 <HAL_I2C_Init+0x274>)
 8005540:	428b      	cmp	r3, r1
 8005542:	d819      	bhi.n	8005578 <HAL_I2C_Init+0x13c>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	1e59      	subs	r1, r3, #1
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005552:	1c59      	adds	r1, r3, #1
 8005554:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005558:	400b      	ands	r3, r1
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <HAL_I2C_Init+0x138>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	1e59      	subs	r1, r3, #1
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	fbb1 f3f3 	udiv	r3, r1, r3
 800556c:	3301      	adds	r3, #1
 800556e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005572:	e051      	b.n	8005618 <HAL_I2C_Init+0x1dc>
 8005574:	2304      	movs	r3, #4
 8005576:	e04f      	b.n	8005618 <HAL_I2C_Init+0x1dc>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d111      	bne.n	80055a4 <HAL_I2C_Init+0x168>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	1e58      	subs	r0, r3, #1
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6859      	ldr	r1, [r3, #4]
 8005588:	460b      	mov	r3, r1
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	440b      	add	r3, r1
 800558e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005592:	3301      	adds	r3, #1
 8005594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005598:	2b00      	cmp	r3, #0
 800559a:	bf0c      	ite	eq
 800559c:	2301      	moveq	r3, #1
 800559e:	2300      	movne	r3, #0
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	e012      	b.n	80055ca <HAL_I2C_Init+0x18e>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	1e58      	subs	r0, r3, #1
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6859      	ldr	r1, [r3, #4]
 80055ac:	460b      	mov	r3, r1
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	440b      	add	r3, r1
 80055b2:	0099      	lsls	r1, r3, #2
 80055b4:	440b      	add	r3, r1
 80055b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80055ba:	3301      	adds	r3, #1
 80055bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	bf0c      	ite	eq
 80055c4:	2301      	moveq	r3, #1
 80055c6:	2300      	movne	r3, #0
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <HAL_I2C_Init+0x196>
 80055ce:	2301      	movs	r3, #1
 80055d0:	e022      	b.n	8005618 <HAL_I2C_Init+0x1dc>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10e      	bne.n	80055f8 <HAL_I2C_Init+0x1bc>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	1e58      	subs	r0, r3, #1
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6859      	ldr	r1, [r3, #4]
 80055e2:	460b      	mov	r3, r1
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	440b      	add	r3, r1
 80055e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80055ec:	3301      	adds	r3, #1
 80055ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055f6:	e00f      	b.n	8005618 <HAL_I2C_Init+0x1dc>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	1e58      	subs	r0, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6859      	ldr	r1, [r3, #4]
 8005600:	460b      	mov	r3, r1
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	440b      	add	r3, r1
 8005606:	0099      	lsls	r1, r3, #2
 8005608:	440b      	add	r3, r1
 800560a:	fbb0 f3f3 	udiv	r3, r0, r3
 800560e:	3301      	adds	r3, #1
 8005610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005614:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005618:	6879      	ldr	r1, [r7, #4]
 800561a:	6809      	ldr	r1, [r1, #0]
 800561c:	4313      	orrs	r3, r2
 800561e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	69da      	ldr	r2, [r3, #28]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	431a      	orrs	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005646:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	6911      	ldr	r1, [r2, #16]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	68d2      	ldr	r2, [r2, #12]
 8005652:	4311      	orrs	r1, r2
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	6812      	ldr	r2, [r2, #0]
 8005658:	430b      	orrs	r3, r1
 800565a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	695a      	ldr	r2, [r3, #20]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	431a      	orrs	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	430a      	orrs	r2, r1
 8005676:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f042 0201 	orr.w	r2, r2, #1
 8005686:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2220      	movs	r2, #32
 8005692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	000186a0 	.word	0x000186a0
 80056b4:	001e847f 	.word	0x001e847f
 80056b8:	003d08ff 	.word	0x003d08ff
 80056bc:	431bde83 	.word	0x431bde83
 80056c0:	10624dd3 	.word	0x10624dd3

080056c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b088      	sub	sp, #32
 80056c8:	af02      	add	r7, sp, #8
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	4608      	mov	r0, r1
 80056ce:	4611      	mov	r1, r2
 80056d0:	461a      	mov	r2, r3
 80056d2:	4603      	mov	r3, r0
 80056d4:	817b      	strh	r3, [r7, #10]
 80056d6:	460b      	mov	r3, r1
 80056d8:	813b      	strh	r3, [r7, #8]
 80056da:	4613      	mov	r3, r2
 80056dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056de:	f7fe fae7 	bl	8003cb0 <HAL_GetTick>
 80056e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b20      	cmp	r3, #32
 80056ee:	f040 80d9 	bne.w	80058a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	2319      	movs	r3, #25
 80056f8:	2201      	movs	r2, #1
 80056fa:	496d      	ldr	r1, [pc, #436]	; (80058b0 <HAL_I2C_Mem_Write+0x1ec>)
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f000 fc7f 	bl	8006000 <I2C_WaitOnFlagUntilTimeout>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005708:	2302      	movs	r3, #2
 800570a:	e0cc      	b.n	80058a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005712:	2b01      	cmp	r3, #1
 8005714:	d101      	bne.n	800571a <HAL_I2C_Mem_Write+0x56>
 8005716:	2302      	movs	r3, #2
 8005718:	e0c5      	b.n	80058a6 <HAL_I2C_Mem_Write+0x1e2>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b01      	cmp	r3, #1
 800572e:	d007      	beq.n	8005740 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f042 0201 	orr.w	r2, r2, #1
 800573e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800574e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2221      	movs	r2, #33	; 0x21
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2240      	movs	r2, #64	; 0x40
 800575c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6a3a      	ldr	r2, [r7, #32]
 800576a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005770:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005776:	b29a      	uxth	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4a4d      	ldr	r2, [pc, #308]	; (80058b4 <HAL_I2C_Mem_Write+0x1f0>)
 8005780:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005782:	88f8      	ldrh	r0, [r7, #6]
 8005784:	893a      	ldrh	r2, [r7, #8]
 8005786:	8979      	ldrh	r1, [r7, #10]
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	9301      	str	r3, [sp, #4]
 800578c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578e:	9300      	str	r3, [sp, #0]
 8005790:	4603      	mov	r3, r0
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f000 fab6 	bl	8005d04 <I2C_RequestMemoryWrite>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d052      	beq.n	8005844 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e081      	b.n	80058a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 fd00 	bl	80061ac <I2C_WaitOnTXEFlagUntilTimeout>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00d      	beq.n	80057ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	2b04      	cmp	r3, #4
 80057b8:	d107      	bne.n	80057ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e06b      	b.n	80058a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	781a      	ldrb	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	1c5a      	adds	r2, r3, #1
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057e8:	3b01      	subs	r3, #1
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	3b01      	subs	r3, #1
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	2b04      	cmp	r3, #4
 800580a:	d11b      	bne.n	8005844 <HAL_I2C_Mem_Write+0x180>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005810:	2b00      	cmp	r3, #0
 8005812:	d017      	beq.n	8005844 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005818:	781a      	ldrb	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800582e:	3b01      	subs	r3, #1
 8005830:	b29a      	uxth	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800583a:	b29b      	uxth	r3, r3
 800583c:	3b01      	subs	r3, #1
 800583e:	b29a      	uxth	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1aa      	bne.n	80057a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f000 fcec 	bl	800622e <I2C_WaitOnBTFFlagUntilTimeout>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00d      	beq.n	8005878 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005860:	2b04      	cmp	r3, #4
 8005862:	d107      	bne.n	8005874 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005872:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e016      	b.n	80058a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005886:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2220      	movs	r2, #32
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80058a0:	2300      	movs	r3, #0
 80058a2:	e000      	b.n	80058a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80058a4:	2302      	movs	r3, #2
  }
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	00100002 	.word	0x00100002
 80058b4:	ffff0000 	.word	0xffff0000

080058b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b08c      	sub	sp, #48	; 0x30
 80058bc:	af02      	add	r7, sp, #8
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	4608      	mov	r0, r1
 80058c2:	4611      	mov	r1, r2
 80058c4:	461a      	mov	r2, r3
 80058c6:	4603      	mov	r3, r0
 80058c8:	817b      	strh	r3, [r7, #10]
 80058ca:	460b      	mov	r3, r1
 80058cc:	813b      	strh	r3, [r7, #8]
 80058ce:	4613      	mov	r3, r2
 80058d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80058d2:	f7fe f9ed 	bl	8003cb0 <HAL_GetTick>
 80058d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b20      	cmp	r3, #32
 80058e2:	f040 8208 	bne.w	8005cf6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	2319      	movs	r3, #25
 80058ec:	2201      	movs	r2, #1
 80058ee:	497b      	ldr	r1, [pc, #492]	; (8005adc <HAL_I2C_Mem_Read+0x224>)
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f000 fb85 	bl	8006000 <I2C_WaitOnFlagUntilTimeout>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80058fc:	2302      	movs	r3, #2
 80058fe:	e1fb      	b.n	8005cf8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005906:	2b01      	cmp	r3, #1
 8005908:	d101      	bne.n	800590e <HAL_I2C_Mem_Read+0x56>
 800590a:	2302      	movs	r3, #2
 800590c:	e1f4      	b.n	8005cf8 <HAL_I2C_Mem_Read+0x440>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b01      	cmp	r3, #1
 8005922:	d007      	beq.n	8005934 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f042 0201 	orr.w	r2, r2, #1
 8005932:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005942:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2222      	movs	r2, #34	; 0x22
 8005948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2240      	movs	r2, #64	; 0x40
 8005950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800595e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005964:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800596a:	b29a      	uxth	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4a5b      	ldr	r2, [pc, #364]	; (8005ae0 <HAL_I2C_Mem_Read+0x228>)
 8005974:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005976:	88f8      	ldrh	r0, [r7, #6]
 8005978:	893a      	ldrh	r2, [r7, #8]
 800597a:	8979      	ldrh	r1, [r7, #10]
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	9301      	str	r3, [sp, #4]
 8005980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	4603      	mov	r3, r0
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f000 fa52 	bl	8005e30 <I2C_RequestMemoryRead>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e1b0      	b.n	8005cf8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800599a:	2b00      	cmp	r3, #0
 800599c:	d113      	bne.n	80059c6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800599e:	2300      	movs	r3, #0
 80059a0:	623b      	str	r3, [r7, #32]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	623b      	str	r3, [r7, #32]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	623b      	str	r3, [r7, #32]
 80059b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	e184      	b.n	8005cd0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d11b      	bne.n	8005a06 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059de:	2300      	movs	r3, #0
 80059e0:	61fb      	str	r3, [r7, #28]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	61fb      	str	r3, [r7, #28]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	61fb      	str	r3, [r7, #28]
 80059f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	e164      	b.n	8005cd0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d11b      	bne.n	8005a46 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a1c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a2e:	2300      	movs	r3, #0
 8005a30:	61bb      	str	r3, [r7, #24]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	61bb      	str	r3, [r7, #24]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	61bb      	str	r3, [r7, #24]
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	e144      	b.n	8005cd0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a46:	2300      	movs	r3, #0
 8005a48:	617b      	str	r3, [r7, #20]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	617b      	str	r3, [r7, #20]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	617b      	str	r3, [r7, #20]
 8005a5a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005a5c:	e138      	b.n	8005cd0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a62:	2b03      	cmp	r3, #3
 8005a64:	f200 80f1 	bhi.w	8005c4a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d123      	bne.n	8005ab8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f000 fc1b 	bl	80062b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d001      	beq.n	8005a84 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e139      	b.n	8005cf8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	691a      	ldr	r2, [r3, #16]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8e:	b2d2      	uxtb	r2, r2
 8005a90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a96:	1c5a      	adds	r2, r3, #1
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ab6:	e10b      	b.n	8005cd0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d14e      	bne.n	8005b5e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	4906      	ldr	r1, [pc, #24]	; (8005ae4 <HAL_I2C_Mem_Read+0x22c>)
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f000 fa98 	bl	8006000 <I2C_WaitOnFlagUntilTimeout>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d008      	beq.n	8005ae8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e10e      	b.n	8005cf8 <HAL_I2C_Mem_Read+0x440>
 8005ada:	bf00      	nop
 8005adc:	00100002 	.word	0x00100002
 8005ae0:	ffff0000 	.word	0xffff0000
 8005ae4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005af6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	691a      	ldr	r2, [r3, #16]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b02:	b2d2      	uxtb	r2, r2
 8005b04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0a:	1c5a      	adds	r2, r3, #1
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b14:	3b01      	subs	r3, #1
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	3b01      	subs	r3, #1
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	691a      	ldr	r2, [r3, #16]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b34:	b2d2      	uxtb	r2, r2
 8005b36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3c:	1c5a      	adds	r2, r3, #1
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b46:	3b01      	subs	r3, #1
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	3b01      	subs	r3, #1
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b5c:	e0b8      	b.n	8005cd0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b64:	2200      	movs	r2, #0
 8005b66:	4966      	ldr	r1, [pc, #408]	; (8005d00 <HAL_I2C_Mem_Read+0x448>)
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f000 fa49 	bl	8006000 <I2C_WaitOnFlagUntilTimeout>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d001      	beq.n	8005b78 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e0bf      	b.n	8005cf8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	691a      	ldr	r2, [r3, #16]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	b2d2      	uxtb	r2, r2
 8005b94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	1c5a      	adds	r2, r3, #1
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	494f      	ldr	r1, [pc, #316]	; (8005d00 <HAL_I2C_Mem_Read+0x448>)
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 fa1b 	bl	8006000 <I2C_WaitOnFlagUntilTimeout>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e091      	b.n	8005cf8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005be2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	691a      	ldr	r2, [r3, #16]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	b2d2      	uxtb	r2, r2
 8005bf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf6:	1c5a      	adds	r2, r3, #1
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c00:	3b01      	subs	r3, #1
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	691a      	ldr	r2, [r3, #16]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c20:	b2d2      	uxtb	r2, r2
 8005c22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c28:	1c5a      	adds	r2, r3, #1
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	3b01      	subs	r3, #1
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c48:	e042      	b.n	8005cd0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f000 fb2e 	bl	80062b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e04c      	b.n	8005cf8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	691a      	ldr	r2, [r3, #16]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	b2d2      	uxtb	r2, r2
 8005c6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	1c5a      	adds	r2, r3, #1
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	f003 0304 	and.w	r3, r3, #4
 8005c9a:	2b04      	cmp	r3, #4
 8005c9c:	d118      	bne.n	8005cd0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	691a      	ldr	r2, [r3, #16]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	b2d2      	uxtb	r2, r2
 8005caa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	1c5a      	adds	r2, r3, #1
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f47f aec2 	bne.w	8005a5e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	e000      	b.n	8005cf8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005cf6:	2302      	movs	r3, #2
  }
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3728      	adds	r7, #40	; 0x28
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	00010004 	.word	0x00010004

08005d04 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b088      	sub	sp, #32
 8005d08:	af02      	add	r7, sp, #8
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	4608      	mov	r0, r1
 8005d0e:	4611      	mov	r1, r2
 8005d10:	461a      	mov	r2, r3
 8005d12:	4603      	mov	r3, r0
 8005d14:	817b      	strh	r3, [r7, #10]
 8005d16:	460b      	mov	r3, r1
 8005d18:	813b      	strh	r3, [r7, #8]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f000 f960 	bl	8006000 <I2C_WaitOnFlagUntilTimeout>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00d      	beq.n	8005d62 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d54:	d103      	bne.n	8005d5e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e05f      	b.n	8005e22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d62:	897b      	ldrh	r3, [r7, #10]
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	461a      	mov	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	6a3a      	ldr	r2, [r7, #32]
 8005d76:	492d      	ldr	r1, [pc, #180]	; (8005e2c <I2C_RequestMemoryWrite+0x128>)
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 f998 	bl	80060ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e04c      	b.n	8005e22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d88:	2300      	movs	r3, #0
 8005d8a:	617b      	str	r3, [r7, #20]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	617b      	str	r3, [r7, #20]
 8005d9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005da0:	6a39      	ldr	r1, [r7, #32]
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f000 fa02 	bl	80061ac <I2C_WaitOnTXEFlagUntilTimeout>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00d      	beq.n	8005dca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db2:	2b04      	cmp	r3, #4
 8005db4:	d107      	bne.n	8005dc6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dc4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e02b      	b.n	8005e22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005dca:	88fb      	ldrh	r3, [r7, #6]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d105      	bne.n	8005ddc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005dd0:	893b      	ldrh	r3, [r7, #8]
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	611a      	str	r2, [r3, #16]
 8005dda:	e021      	b.n	8005e20 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ddc:	893b      	ldrh	r3, [r7, #8]
 8005dde:	0a1b      	lsrs	r3, r3, #8
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dec:	6a39      	ldr	r1, [r7, #32]
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f000 f9dc 	bl	80061ac <I2C_WaitOnTXEFlagUntilTimeout>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00d      	beq.n	8005e16 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d107      	bne.n	8005e12 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e005      	b.n	8005e22 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e16:	893b      	ldrh	r3, [r7, #8]
 8005e18:	b2da      	uxtb	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3718      	adds	r7, #24
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	00010002 	.word	0x00010002

08005e30 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b088      	sub	sp, #32
 8005e34:	af02      	add	r7, sp, #8
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	4608      	mov	r0, r1
 8005e3a:	4611      	mov	r1, r2
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	4603      	mov	r3, r0
 8005e40:	817b      	strh	r3, [r7, #10]
 8005e42:	460b      	mov	r3, r1
 8005e44:	813b      	strh	r3, [r7, #8]
 8005e46:	4613      	mov	r3, r2
 8005e48:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e58:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	6a3b      	ldr	r3, [r7, #32]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f000 f8c2 	bl	8006000 <I2C_WaitOnFlagUntilTimeout>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00d      	beq.n	8005e9e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e90:	d103      	bne.n	8005e9a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e0aa      	b.n	8005ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e9e:	897b      	ldrh	r3, [r7, #10]
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005eac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb0:	6a3a      	ldr	r2, [r7, #32]
 8005eb2:	4952      	ldr	r1, [pc, #328]	; (8005ffc <I2C_RequestMemoryRead+0x1cc>)
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f000 f8fa 	bl	80060ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d001      	beq.n	8005ec4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e097      	b.n	8005ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	617b      	str	r3, [r7, #20]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	617b      	str	r3, [r7, #20]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	617b      	str	r3, [r7, #20]
 8005ed8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005edc:	6a39      	ldr	r1, [r7, #32]
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f000 f964 	bl	80061ac <I2C_WaitOnTXEFlagUntilTimeout>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00d      	beq.n	8005f06 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eee:	2b04      	cmp	r3, #4
 8005ef0:	d107      	bne.n	8005f02 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e076      	b.n	8005ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f06:	88fb      	ldrh	r3, [r7, #6]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d105      	bne.n	8005f18 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f0c:	893b      	ldrh	r3, [r7, #8]
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	611a      	str	r2, [r3, #16]
 8005f16:	e021      	b.n	8005f5c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f18:	893b      	ldrh	r3, [r7, #8]
 8005f1a:	0a1b      	lsrs	r3, r3, #8
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	b2da      	uxtb	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f28:	6a39      	ldr	r1, [r7, #32]
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f000 f93e 	bl	80061ac <I2C_WaitOnTXEFlagUntilTimeout>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00d      	beq.n	8005f52 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	2b04      	cmp	r3, #4
 8005f3c:	d107      	bne.n	8005f4e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e050      	b.n	8005ff4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f52:	893b      	ldrh	r3, [r7, #8]
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f5e:	6a39      	ldr	r1, [r7, #32]
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f000 f923 	bl	80061ac <I2C_WaitOnTXEFlagUntilTimeout>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00d      	beq.n	8005f88 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f70:	2b04      	cmp	r3, #4
 8005f72:	d107      	bne.n	8005f84 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f82:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e035      	b.n	8005ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f96:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f000 f82b 	bl	8006000 <I2C_WaitOnFlagUntilTimeout>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00d      	beq.n	8005fcc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fbe:	d103      	bne.n	8005fc8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e013      	b.n	8005ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005fcc:	897b      	ldrh	r3, [r7, #10]
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	f043 0301 	orr.w	r3, r3, #1
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	6a3a      	ldr	r2, [r7, #32]
 8005fe0:	4906      	ldr	r1, [pc, #24]	; (8005ffc <I2C_RequestMemoryRead+0x1cc>)
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f000 f863 	bl	80060ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d001      	beq.n	8005ff2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e000      	b.n	8005ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3718      	adds	r7, #24
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	00010002 	.word	0x00010002

08006000 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	603b      	str	r3, [r7, #0]
 800600c:	4613      	mov	r3, r2
 800600e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006010:	e025      	b.n	800605e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006018:	d021      	beq.n	800605e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800601a:	f7fd fe49 	bl	8003cb0 <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	429a      	cmp	r2, r3
 8006028:	d302      	bcc.n	8006030 <I2C_WaitOnFlagUntilTimeout+0x30>
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d116      	bne.n	800605e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2220      	movs	r2, #32
 800603a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604a:	f043 0220 	orr.w	r2, r3, #32
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e023      	b.n	80060a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	0c1b      	lsrs	r3, r3, #16
 8006062:	b2db      	uxtb	r3, r3
 8006064:	2b01      	cmp	r3, #1
 8006066:	d10d      	bne.n	8006084 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	43da      	mvns	r2, r3
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	4013      	ands	r3, r2
 8006074:	b29b      	uxth	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	bf0c      	ite	eq
 800607a:	2301      	moveq	r3, #1
 800607c:	2300      	movne	r3, #0
 800607e:	b2db      	uxtb	r3, r3
 8006080:	461a      	mov	r2, r3
 8006082:	e00c      	b.n	800609e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	43da      	mvns	r2, r3
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	4013      	ands	r3, r2
 8006090:	b29b      	uxth	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	bf0c      	ite	eq
 8006096:	2301      	moveq	r3, #1
 8006098:	2300      	movne	r3, #0
 800609a:	b2db      	uxtb	r3, r3
 800609c:	461a      	mov	r2, r3
 800609e:	79fb      	ldrb	r3, [r7, #7]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d0b6      	beq.n	8006012 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b084      	sub	sp, #16
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	60f8      	str	r0, [r7, #12]
 80060b6:	60b9      	str	r1, [r7, #8]
 80060b8:	607a      	str	r2, [r7, #4]
 80060ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060bc:	e051      	b.n	8006162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060cc:	d123      	bne.n	8006116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2220      	movs	r2, #32
 80060f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006102:	f043 0204 	orr.w	r2, r3, #4
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e046      	b.n	80061a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611c:	d021      	beq.n	8006162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800611e:	f7fd fdc7 	bl	8003cb0 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	429a      	cmp	r2, r3
 800612c:	d302      	bcc.n	8006134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d116      	bne.n	8006162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2220      	movs	r2, #32
 800613e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614e:	f043 0220 	orr.w	r2, r3, #32
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e020      	b.n	80061a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	0c1b      	lsrs	r3, r3, #16
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b01      	cmp	r3, #1
 800616a:	d10c      	bne.n	8006186 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	43da      	mvns	r2, r3
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	4013      	ands	r3, r2
 8006178:	b29b      	uxth	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	bf14      	ite	ne
 800617e:	2301      	movne	r3, #1
 8006180:	2300      	moveq	r3, #0
 8006182:	b2db      	uxtb	r3, r3
 8006184:	e00b      	b.n	800619e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	43da      	mvns	r2, r3
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	4013      	ands	r3, r2
 8006192:	b29b      	uxth	r3, r3
 8006194:	2b00      	cmp	r3, #0
 8006196:	bf14      	ite	ne
 8006198:	2301      	movne	r3, #1
 800619a:	2300      	moveq	r3, #0
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d18d      	bne.n	80060be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061b8:	e02d      	b.n	8006216 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 f8ce 	bl	800635c <I2C_IsAcknowledgeFailed>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e02d      	b.n	8006226 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d0:	d021      	beq.n	8006216 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061d2:	f7fd fd6d 	bl	8003cb0 <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d302      	bcc.n	80061e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d116      	bne.n	8006216 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2220      	movs	r2, #32
 80061f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006202:	f043 0220 	orr.w	r2, r3, #32
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e007      	b.n	8006226 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	695b      	ldr	r3, [r3, #20]
 800621c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006220:	2b80      	cmp	r3, #128	; 0x80
 8006222:	d1ca      	bne.n	80061ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b084      	sub	sp, #16
 8006232:	af00      	add	r7, sp, #0
 8006234:	60f8      	str	r0, [r7, #12]
 8006236:	60b9      	str	r1, [r7, #8]
 8006238:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800623a:	e02d      	b.n	8006298 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 f88d 	bl	800635c <I2C_IsAcknowledgeFailed>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e02d      	b.n	80062a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006252:	d021      	beq.n	8006298 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006254:	f7fd fd2c 	bl	8003cb0 <HAL_GetTick>
 8006258:	4602      	mov	r2, r0
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	429a      	cmp	r2, r3
 8006262:	d302      	bcc.n	800626a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d116      	bne.n	8006298 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2220      	movs	r2, #32
 8006274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006284:	f043 0220 	orr.w	r2, r3, #32
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e007      	b.n	80062a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	f003 0304 	and.w	r3, r3, #4
 80062a2:	2b04      	cmp	r3, #4
 80062a4:	d1ca      	bne.n	800623c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3710      	adds	r7, #16
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062bc:	e042      	b.n	8006344 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	f003 0310 	and.w	r3, r3, #16
 80062c8:	2b10      	cmp	r3, #16
 80062ca:	d119      	bne.n	8006300 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f06f 0210 	mvn.w	r2, #16
 80062d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2220      	movs	r2, #32
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e029      	b.n	8006354 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006300:	f7fd fcd6 	bl	8003cb0 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	429a      	cmp	r2, r3
 800630e:	d302      	bcc.n	8006316 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d116      	bne.n	8006344 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2220      	movs	r2, #32
 8006320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006330:	f043 0220 	orr.w	r2, r3, #32
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e007      	b.n	8006354 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634e:	2b40      	cmp	r3, #64	; 0x40
 8006350:	d1b5      	bne.n	80062be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800636e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006372:	d11b      	bne.n	80063ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800637c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2220      	movs	r2, #32
 8006388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006398:	f043 0204 	orr.w	r2, r3, #4
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e000      	b.n	80063ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
	...

080063bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e267      	b.n	800689e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d075      	beq.n	80064c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063da:	4b88      	ldr	r3, [pc, #544]	; (80065fc <HAL_RCC_OscConfig+0x240>)
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f003 030c 	and.w	r3, r3, #12
 80063e2:	2b04      	cmp	r3, #4
 80063e4:	d00c      	beq.n	8006400 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063e6:	4b85      	ldr	r3, [pc, #532]	; (80065fc <HAL_RCC_OscConfig+0x240>)
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063ee:	2b08      	cmp	r3, #8
 80063f0:	d112      	bne.n	8006418 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063f2:	4b82      	ldr	r3, [pc, #520]	; (80065fc <HAL_RCC_OscConfig+0x240>)
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063fe:	d10b      	bne.n	8006418 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006400:	4b7e      	ldr	r3, [pc, #504]	; (80065fc <HAL_RCC_OscConfig+0x240>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d05b      	beq.n	80064c4 <HAL_RCC_OscConfig+0x108>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d157      	bne.n	80064c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e242      	b.n	800689e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006420:	d106      	bne.n	8006430 <HAL_RCC_OscConfig+0x74>
 8006422:	4b76      	ldr	r3, [pc, #472]	; (80065fc <HAL_RCC_OscConfig+0x240>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a75      	ldr	r2, [pc, #468]	; (80065fc <HAL_RCC_OscConfig+0x240>)
 8006428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800642c:	6013      	str	r3, [r2, #0]
 800642e:	e01d      	b.n	800646c <HAL_RCC_OscConfig+0xb0>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006438:	d10c      	bne.n	8006454 <HAL_RCC_OscConfig+0x98>
 800643a:	4b70      	ldr	r3, [pc, #448]	; (80065fc <HAL_RCC_OscConfig+0x240>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a6f      	ldr	r2, [pc, #444]	; (80065fc <HAL_RCC_OscConfig+0x240>)
 8006440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006444:	6013      	str	r3, [r2, #0]
 8006446:	4b6d      	ldr	r3, [pc, #436]	; (80065fc <HAL_RCC_OscConfig+0x240>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a6c      	ldr	r2, [pc, #432]	; (80065fc <HAL_RCC_OscConfig+0x240>)
 800644c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006450:	6013      	str	r3, [r2, #0]
 8006452:	e00b      	b.n	800646c <HAL_RCC_OscConfig+0xb0>
 8006454:	4b69      	ldr	r3, [pc, #420]	; (80065fc <HAL_RCC_OscConfig+0x240>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a68      	ldr	r2, [pc, #416]	; (80065fc <HAL_RCC_OscConfig+0x240>)
 800645a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800645e:	6013      	str	r3, [r2, #0]
 8006460:	4b66      	ldr	r3, [pc, #408]	; (80065fc <HAL_RCC_OscConfig+0x240>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a65      	ldr	r2, [pc, #404]	; (80065fc <HAL_RCC_OscConfig+0x240>)
 8006466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800646a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d013      	beq.n	800649c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006474:	f7fd fc1c 	bl	8003cb0 <HAL_GetTick>
 8006478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800647a:	e008      	b.n	800648e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800647c:	f7fd fc18 	bl	8003cb0 <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	2b64      	cmp	r3, #100	; 0x64
 8006488:	d901      	bls.n	800648e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e207      	b.n	800689e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800648e:	4b5b      	ldr	r3, [pc, #364]	; (80065fc <HAL_RCC_OscConfig+0x240>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006496:	2b00      	cmp	r3, #0
 8006498:	d0f0      	beq.n	800647c <HAL_RCC_OscConfig+0xc0>
 800649a:	e014      	b.n	80064c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800649c:	f7fd fc08 	bl	8003cb0 <HAL_GetTick>
 80064a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064a2:	e008      	b.n	80064b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064a4:	f7fd fc04 	bl	8003cb0 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	2b64      	cmp	r3, #100	; 0x64
 80064b0:	d901      	bls.n	80064b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e1f3      	b.n	800689e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064b6:	4b51      	ldr	r3, [pc, #324]	; (80065fc <HAL_RCC_OscConfig+0x240>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1f0      	bne.n	80064a4 <HAL_RCC_OscConfig+0xe8>
 80064c2:	e000      	b.n	80064c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d063      	beq.n	800659a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064d2:	4b4a      	ldr	r3, [pc, #296]	; (80065fc <HAL_RCC_OscConfig+0x240>)
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f003 030c 	and.w	r3, r3, #12
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00b      	beq.n	80064f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064de:	4b47      	ldr	r3, [pc, #284]	; (80065fc <HAL_RCC_OscConfig+0x240>)
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064e6:	2b08      	cmp	r3, #8
 80064e8:	d11c      	bne.n	8006524 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064ea:	4b44      	ldr	r3, [pc, #272]	; (80065fc <HAL_RCC_OscConfig+0x240>)
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d116      	bne.n	8006524 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064f6:	4b41      	ldr	r3, [pc, #260]	; (80065fc <HAL_RCC_OscConfig+0x240>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0302 	and.w	r3, r3, #2
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d005      	beq.n	800650e <HAL_RCC_OscConfig+0x152>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d001      	beq.n	800650e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e1c7      	b.n	800689e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800650e:	4b3b      	ldr	r3, [pc, #236]	; (80065fc <HAL_RCC_OscConfig+0x240>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	00db      	lsls	r3, r3, #3
 800651c:	4937      	ldr	r1, [pc, #220]	; (80065fc <HAL_RCC_OscConfig+0x240>)
 800651e:	4313      	orrs	r3, r2
 8006520:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006522:	e03a      	b.n	800659a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d020      	beq.n	800656e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800652c:	4b34      	ldr	r3, [pc, #208]	; (8006600 <HAL_RCC_OscConfig+0x244>)
 800652e:	2201      	movs	r2, #1
 8006530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006532:	f7fd fbbd 	bl	8003cb0 <HAL_GetTick>
 8006536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006538:	e008      	b.n	800654c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800653a:	f7fd fbb9 	bl	8003cb0 <HAL_GetTick>
 800653e:	4602      	mov	r2, r0
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	2b02      	cmp	r3, #2
 8006546:	d901      	bls.n	800654c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e1a8      	b.n	800689e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800654c:	4b2b      	ldr	r3, [pc, #172]	; (80065fc <HAL_RCC_OscConfig+0x240>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0302 	and.w	r3, r3, #2
 8006554:	2b00      	cmp	r3, #0
 8006556:	d0f0      	beq.n	800653a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006558:	4b28      	ldr	r3, [pc, #160]	; (80065fc <HAL_RCC_OscConfig+0x240>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	00db      	lsls	r3, r3, #3
 8006566:	4925      	ldr	r1, [pc, #148]	; (80065fc <HAL_RCC_OscConfig+0x240>)
 8006568:	4313      	orrs	r3, r2
 800656a:	600b      	str	r3, [r1, #0]
 800656c:	e015      	b.n	800659a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800656e:	4b24      	ldr	r3, [pc, #144]	; (8006600 <HAL_RCC_OscConfig+0x244>)
 8006570:	2200      	movs	r2, #0
 8006572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006574:	f7fd fb9c 	bl	8003cb0 <HAL_GetTick>
 8006578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800657a:	e008      	b.n	800658e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800657c:	f7fd fb98 	bl	8003cb0 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	2b02      	cmp	r3, #2
 8006588:	d901      	bls.n	800658e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e187      	b.n	800689e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800658e:	4b1b      	ldr	r3, [pc, #108]	; (80065fc <HAL_RCC_OscConfig+0x240>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0302 	and.w	r3, r3, #2
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1f0      	bne.n	800657c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0308 	and.w	r3, r3, #8
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d036      	beq.n	8006614 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d016      	beq.n	80065dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065ae:	4b15      	ldr	r3, [pc, #84]	; (8006604 <HAL_RCC_OscConfig+0x248>)
 80065b0:	2201      	movs	r2, #1
 80065b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065b4:	f7fd fb7c 	bl	8003cb0 <HAL_GetTick>
 80065b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065ba:	e008      	b.n	80065ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065bc:	f7fd fb78 	bl	8003cb0 <HAL_GetTick>
 80065c0:	4602      	mov	r2, r0
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d901      	bls.n	80065ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e167      	b.n	800689e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065ce:	4b0b      	ldr	r3, [pc, #44]	; (80065fc <HAL_RCC_OscConfig+0x240>)
 80065d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d0f0      	beq.n	80065bc <HAL_RCC_OscConfig+0x200>
 80065da:	e01b      	b.n	8006614 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065dc:	4b09      	ldr	r3, [pc, #36]	; (8006604 <HAL_RCC_OscConfig+0x248>)
 80065de:	2200      	movs	r2, #0
 80065e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065e2:	f7fd fb65 	bl	8003cb0 <HAL_GetTick>
 80065e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065e8:	e00e      	b.n	8006608 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065ea:	f7fd fb61 	bl	8003cb0 <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d907      	bls.n	8006608 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e150      	b.n	800689e <HAL_RCC_OscConfig+0x4e2>
 80065fc:	40023800 	.word	0x40023800
 8006600:	42470000 	.word	0x42470000
 8006604:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006608:	4b88      	ldr	r3, [pc, #544]	; (800682c <HAL_RCC_OscConfig+0x470>)
 800660a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800660c:	f003 0302 	and.w	r3, r3, #2
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1ea      	bne.n	80065ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0304 	and.w	r3, r3, #4
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 8097 	beq.w	8006750 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006622:	2300      	movs	r3, #0
 8006624:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006626:	4b81      	ldr	r3, [pc, #516]	; (800682c <HAL_RCC_OscConfig+0x470>)
 8006628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10f      	bne.n	8006652 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006632:	2300      	movs	r3, #0
 8006634:	60bb      	str	r3, [r7, #8]
 8006636:	4b7d      	ldr	r3, [pc, #500]	; (800682c <HAL_RCC_OscConfig+0x470>)
 8006638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663a:	4a7c      	ldr	r2, [pc, #496]	; (800682c <HAL_RCC_OscConfig+0x470>)
 800663c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006640:	6413      	str	r3, [r2, #64]	; 0x40
 8006642:	4b7a      	ldr	r3, [pc, #488]	; (800682c <HAL_RCC_OscConfig+0x470>)
 8006644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800664a:	60bb      	str	r3, [r7, #8]
 800664c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800664e:	2301      	movs	r3, #1
 8006650:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006652:	4b77      	ldr	r3, [pc, #476]	; (8006830 <HAL_RCC_OscConfig+0x474>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800665a:	2b00      	cmp	r3, #0
 800665c:	d118      	bne.n	8006690 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800665e:	4b74      	ldr	r3, [pc, #464]	; (8006830 <HAL_RCC_OscConfig+0x474>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a73      	ldr	r2, [pc, #460]	; (8006830 <HAL_RCC_OscConfig+0x474>)
 8006664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800666a:	f7fd fb21 	bl	8003cb0 <HAL_GetTick>
 800666e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006670:	e008      	b.n	8006684 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006672:	f7fd fb1d 	bl	8003cb0 <HAL_GetTick>
 8006676:	4602      	mov	r2, r0
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	2b02      	cmp	r3, #2
 800667e:	d901      	bls.n	8006684 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e10c      	b.n	800689e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006684:	4b6a      	ldr	r3, [pc, #424]	; (8006830 <HAL_RCC_OscConfig+0x474>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800668c:	2b00      	cmp	r3, #0
 800668e:	d0f0      	beq.n	8006672 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d106      	bne.n	80066a6 <HAL_RCC_OscConfig+0x2ea>
 8006698:	4b64      	ldr	r3, [pc, #400]	; (800682c <HAL_RCC_OscConfig+0x470>)
 800669a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800669c:	4a63      	ldr	r2, [pc, #396]	; (800682c <HAL_RCC_OscConfig+0x470>)
 800669e:	f043 0301 	orr.w	r3, r3, #1
 80066a2:	6713      	str	r3, [r2, #112]	; 0x70
 80066a4:	e01c      	b.n	80066e0 <HAL_RCC_OscConfig+0x324>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	2b05      	cmp	r3, #5
 80066ac:	d10c      	bne.n	80066c8 <HAL_RCC_OscConfig+0x30c>
 80066ae:	4b5f      	ldr	r3, [pc, #380]	; (800682c <HAL_RCC_OscConfig+0x470>)
 80066b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b2:	4a5e      	ldr	r2, [pc, #376]	; (800682c <HAL_RCC_OscConfig+0x470>)
 80066b4:	f043 0304 	orr.w	r3, r3, #4
 80066b8:	6713      	str	r3, [r2, #112]	; 0x70
 80066ba:	4b5c      	ldr	r3, [pc, #368]	; (800682c <HAL_RCC_OscConfig+0x470>)
 80066bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066be:	4a5b      	ldr	r2, [pc, #364]	; (800682c <HAL_RCC_OscConfig+0x470>)
 80066c0:	f043 0301 	orr.w	r3, r3, #1
 80066c4:	6713      	str	r3, [r2, #112]	; 0x70
 80066c6:	e00b      	b.n	80066e0 <HAL_RCC_OscConfig+0x324>
 80066c8:	4b58      	ldr	r3, [pc, #352]	; (800682c <HAL_RCC_OscConfig+0x470>)
 80066ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066cc:	4a57      	ldr	r2, [pc, #348]	; (800682c <HAL_RCC_OscConfig+0x470>)
 80066ce:	f023 0301 	bic.w	r3, r3, #1
 80066d2:	6713      	str	r3, [r2, #112]	; 0x70
 80066d4:	4b55      	ldr	r3, [pc, #340]	; (800682c <HAL_RCC_OscConfig+0x470>)
 80066d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d8:	4a54      	ldr	r2, [pc, #336]	; (800682c <HAL_RCC_OscConfig+0x470>)
 80066da:	f023 0304 	bic.w	r3, r3, #4
 80066de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d015      	beq.n	8006714 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066e8:	f7fd fae2 	bl	8003cb0 <HAL_GetTick>
 80066ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066ee:	e00a      	b.n	8006706 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066f0:	f7fd fade 	bl	8003cb0 <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80066fe:	4293      	cmp	r3, r2
 8006700:	d901      	bls.n	8006706 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e0cb      	b.n	800689e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006706:	4b49      	ldr	r3, [pc, #292]	; (800682c <HAL_RCC_OscConfig+0x470>)
 8006708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800670a:	f003 0302 	and.w	r3, r3, #2
 800670e:	2b00      	cmp	r3, #0
 8006710:	d0ee      	beq.n	80066f0 <HAL_RCC_OscConfig+0x334>
 8006712:	e014      	b.n	800673e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006714:	f7fd facc 	bl	8003cb0 <HAL_GetTick>
 8006718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800671a:	e00a      	b.n	8006732 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800671c:	f7fd fac8 	bl	8003cb0 <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	f241 3288 	movw	r2, #5000	; 0x1388
 800672a:	4293      	cmp	r3, r2
 800672c:	d901      	bls.n	8006732 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e0b5      	b.n	800689e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006732:	4b3e      	ldr	r3, [pc, #248]	; (800682c <HAL_RCC_OscConfig+0x470>)
 8006734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006736:	f003 0302 	and.w	r3, r3, #2
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1ee      	bne.n	800671c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800673e:	7dfb      	ldrb	r3, [r7, #23]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d105      	bne.n	8006750 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006744:	4b39      	ldr	r3, [pc, #228]	; (800682c <HAL_RCC_OscConfig+0x470>)
 8006746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006748:	4a38      	ldr	r2, [pc, #224]	; (800682c <HAL_RCC_OscConfig+0x470>)
 800674a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800674e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 80a1 	beq.w	800689c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800675a:	4b34      	ldr	r3, [pc, #208]	; (800682c <HAL_RCC_OscConfig+0x470>)
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f003 030c 	and.w	r3, r3, #12
 8006762:	2b08      	cmp	r3, #8
 8006764:	d05c      	beq.n	8006820 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	2b02      	cmp	r3, #2
 800676c:	d141      	bne.n	80067f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800676e:	4b31      	ldr	r3, [pc, #196]	; (8006834 <HAL_RCC_OscConfig+0x478>)
 8006770:	2200      	movs	r2, #0
 8006772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006774:	f7fd fa9c 	bl	8003cb0 <HAL_GetTick>
 8006778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800677a:	e008      	b.n	800678e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800677c:	f7fd fa98 	bl	8003cb0 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	2b02      	cmp	r3, #2
 8006788:	d901      	bls.n	800678e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e087      	b.n	800689e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800678e:	4b27      	ldr	r3, [pc, #156]	; (800682c <HAL_RCC_OscConfig+0x470>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1f0      	bne.n	800677c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	69da      	ldr	r2, [r3, #28]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	431a      	orrs	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a8:	019b      	lsls	r3, r3, #6
 80067aa:	431a      	orrs	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b0:	085b      	lsrs	r3, r3, #1
 80067b2:	3b01      	subs	r3, #1
 80067b4:	041b      	lsls	r3, r3, #16
 80067b6:	431a      	orrs	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067bc:	061b      	lsls	r3, r3, #24
 80067be:	491b      	ldr	r1, [pc, #108]	; (800682c <HAL_RCC_OscConfig+0x470>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067c4:	4b1b      	ldr	r3, [pc, #108]	; (8006834 <HAL_RCC_OscConfig+0x478>)
 80067c6:	2201      	movs	r2, #1
 80067c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ca:	f7fd fa71 	bl	8003cb0 <HAL_GetTick>
 80067ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067d0:	e008      	b.n	80067e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067d2:	f7fd fa6d 	bl	8003cb0 <HAL_GetTick>
 80067d6:	4602      	mov	r2, r0
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d901      	bls.n	80067e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e05c      	b.n	800689e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067e4:	4b11      	ldr	r3, [pc, #68]	; (800682c <HAL_RCC_OscConfig+0x470>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d0f0      	beq.n	80067d2 <HAL_RCC_OscConfig+0x416>
 80067f0:	e054      	b.n	800689c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067f2:	4b10      	ldr	r3, [pc, #64]	; (8006834 <HAL_RCC_OscConfig+0x478>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067f8:	f7fd fa5a 	bl	8003cb0 <HAL_GetTick>
 80067fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067fe:	e008      	b.n	8006812 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006800:	f7fd fa56 	bl	8003cb0 <HAL_GetTick>
 8006804:	4602      	mov	r2, r0
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	2b02      	cmp	r3, #2
 800680c:	d901      	bls.n	8006812 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e045      	b.n	800689e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006812:	4b06      	ldr	r3, [pc, #24]	; (800682c <HAL_RCC_OscConfig+0x470>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1f0      	bne.n	8006800 <HAL_RCC_OscConfig+0x444>
 800681e:	e03d      	b.n	800689c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d107      	bne.n	8006838 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e038      	b.n	800689e <HAL_RCC_OscConfig+0x4e2>
 800682c:	40023800 	.word	0x40023800
 8006830:	40007000 	.word	0x40007000
 8006834:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006838:	4b1b      	ldr	r3, [pc, #108]	; (80068a8 <HAL_RCC_OscConfig+0x4ec>)
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d028      	beq.n	8006898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006850:	429a      	cmp	r2, r3
 8006852:	d121      	bne.n	8006898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800685e:	429a      	cmp	r2, r3
 8006860:	d11a      	bne.n	8006898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006868:	4013      	ands	r3, r2
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800686e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006870:	4293      	cmp	r3, r2
 8006872:	d111      	bne.n	8006898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687e:	085b      	lsrs	r3, r3, #1
 8006880:	3b01      	subs	r3, #1
 8006882:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006884:	429a      	cmp	r2, r3
 8006886:	d107      	bne.n	8006898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006892:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006894:	429a      	cmp	r2, r3
 8006896:	d001      	beq.n	800689c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e000      	b.n	800689e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3718      	adds	r7, #24
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	40023800 	.word	0x40023800

080068ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e0cc      	b.n	8006a5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068c0:	4b68      	ldr	r3, [pc, #416]	; (8006a64 <HAL_RCC_ClockConfig+0x1b8>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0307 	and.w	r3, r3, #7
 80068c8:	683a      	ldr	r2, [r7, #0]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d90c      	bls.n	80068e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ce:	4b65      	ldr	r3, [pc, #404]	; (8006a64 <HAL_RCC_ClockConfig+0x1b8>)
 80068d0:	683a      	ldr	r2, [r7, #0]
 80068d2:	b2d2      	uxtb	r2, r2
 80068d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068d6:	4b63      	ldr	r3, [pc, #396]	; (8006a64 <HAL_RCC_ClockConfig+0x1b8>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0307 	and.w	r3, r3, #7
 80068de:	683a      	ldr	r2, [r7, #0]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d001      	beq.n	80068e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e0b8      	b.n	8006a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d020      	beq.n	8006936 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0304 	and.w	r3, r3, #4
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d005      	beq.n	800690c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006900:	4b59      	ldr	r3, [pc, #356]	; (8006a68 <HAL_RCC_ClockConfig+0x1bc>)
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	4a58      	ldr	r2, [pc, #352]	; (8006a68 <HAL_RCC_ClockConfig+0x1bc>)
 8006906:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800690a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0308 	and.w	r3, r3, #8
 8006914:	2b00      	cmp	r3, #0
 8006916:	d005      	beq.n	8006924 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006918:	4b53      	ldr	r3, [pc, #332]	; (8006a68 <HAL_RCC_ClockConfig+0x1bc>)
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	4a52      	ldr	r2, [pc, #328]	; (8006a68 <HAL_RCC_ClockConfig+0x1bc>)
 800691e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006922:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006924:	4b50      	ldr	r3, [pc, #320]	; (8006a68 <HAL_RCC_ClockConfig+0x1bc>)
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	494d      	ldr	r1, [pc, #308]	; (8006a68 <HAL_RCC_ClockConfig+0x1bc>)
 8006932:	4313      	orrs	r3, r2
 8006934:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b00      	cmp	r3, #0
 8006940:	d044      	beq.n	80069cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d107      	bne.n	800695a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800694a:	4b47      	ldr	r3, [pc, #284]	; (8006a68 <HAL_RCC_ClockConfig+0x1bc>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d119      	bne.n	800698a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e07f      	b.n	8006a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	2b02      	cmp	r3, #2
 8006960:	d003      	beq.n	800696a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006966:	2b03      	cmp	r3, #3
 8006968:	d107      	bne.n	800697a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800696a:	4b3f      	ldr	r3, [pc, #252]	; (8006a68 <HAL_RCC_ClockConfig+0x1bc>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d109      	bne.n	800698a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e06f      	b.n	8006a5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800697a:	4b3b      	ldr	r3, [pc, #236]	; (8006a68 <HAL_RCC_ClockConfig+0x1bc>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0302 	and.w	r3, r3, #2
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e067      	b.n	8006a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800698a:	4b37      	ldr	r3, [pc, #220]	; (8006a68 <HAL_RCC_ClockConfig+0x1bc>)
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f023 0203 	bic.w	r2, r3, #3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	4934      	ldr	r1, [pc, #208]	; (8006a68 <HAL_RCC_ClockConfig+0x1bc>)
 8006998:	4313      	orrs	r3, r2
 800699a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800699c:	f7fd f988 	bl	8003cb0 <HAL_GetTick>
 80069a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069a2:	e00a      	b.n	80069ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069a4:	f7fd f984 	bl	8003cb0 <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d901      	bls.n	80069ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e04f      	b.n	8006a5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069ba:	4b2b      	ldr	r3, [pc, #172]	; (8006a68 <HAL_RCC_ClockConfig+0x1bc>)
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f003 020c 	and.w	r2, r3, #12
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d1eb      	bne.n	80069a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069cc:	4b25      	ldr	r3, [pc, #148]	; (8006a64 <HAL_RCC_ClockConfig+0x1b8>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0307 	and.w	r3, r3, #7
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d20c      	bcs.n	80069f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069da:	4b22      	ldr	r3, [pc, #136]	; (8006a64 <HAL_RCC_ClockConfig+0x1b8>)
 80069dc:	683a      	ldr	r2, [r7, #0]
 80069de:	b2d2      	uxtb	r2, r2
 80069e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069e2:	4b20      	ldr	r3, [pc, #128]	; (8006a64 <HAL_RCC_ClockConfig+0x1b8>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0307 	and.w	r3, r3, #7
 80069ea:	683a      	ldr	r2, [r7, #0]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d001      	beq.n	80069f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e032      	b.n	8006a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0304 	and.w	r3, r3, #4
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d008      	beq.n	8006a12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a00:	4b19      	ldr	r3, [pc, #100]	; (8006a68 <HAL_RCC_ClockConfig+0x1bc>)
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	4916      	ldr	r1, [pc, #88]	; (8006a68 <HAL_RCC_ClockConfig+0x1bc>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0308 	and.w	r3, r3, #8
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d009      	beq.n	8006a32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a1e:	4b12      	ldr	r3, [pc, #72]	; (8006a68 <HAL_RCC_ClockConfig+0x1bc>)
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	00db      	lsls	r3, r3, #3
 8006a2c:	490e      	ldr	r1, [pc, #56]	; (8006a68 <HAL_RCC_ClockConfig+0x1bc>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a32:	f000 f821 	bl	8006a78 <HAL_RCC_GetSysClockFreq>
 8006a36:	4602      	mov	r2, r0
 8006a38:	4b0b      	ldr	r3, [pc, #44]	; (8006a68 <HAL_RCC_ClockConfig+0x1bc>)
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	091b      	lsrs	r3, r3, #4
 8006a3e:	f003 030f 	and.w	r3, r3, #15
 8006a42:	490a      	ldr	r1, [pc, #40]	; (8006a6c <HAL_RCC_ClockConfig+0x1c0>)
 8006a44:	5ccb      	ldrb	r3, [r1, r3]
 8006a46:	fa22 f303 	lsr.w	r3, r2, r3
 8006a4a:	4a09      	ldr	r2, [pc, #36]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 8006a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a4e:	4b09      	ldr	r3, [pc, #36]	; (8006a74 <HAL_RCC_ClockConfig+0x1c8>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7fd f8e8 	bl	8003c28 <HAL_InitTick>

  return HAL_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	40023c00 	.word	0x40023c00
 8006a68:	40023800 	.word	0x40023800
 8006a6c:	0800a010 	.word	0x0800a010
 8006a70:	200006e8 	.word	0x200006e8
 8006a74:	200006ec 	.word	0x200006ec

08006a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a7c:	b090      	sub	sp, #64	; 0x40
 8006a7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006a80:	2300      	movs	r3, #0
 8006a82:	637b      	str	r3, [r7, #52]	; 0x34
 8006a84:	2300      	movs	r3, #0
 8006a86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a88:	2300      	movs	r3, #0
 8006a8a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a90:	4b59      	ldr	r3, [pc, #356]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f003 030c 	and.w	r3, r3, #12
 8006a98:	2b08      	cmp	r3, #8
 8006a9a:	d00d      	beq.n	8006ab8 <HAL_RCC_GetSysClockFreq+0x40>
 8006a9c:	2b08      	cmp	r3, #8
 8006a9e:	f200 80a1 	bhi.w	8006be4 <HAL_RCC_GetSysClockFreq+0x16c>
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d002      	beq.n	8006aac <HAL_RCC_GetSysClockFreq+0x34>
 8006aa6:	2b04      	cmp	r3, #4
 8006aa8:	d003      	beq.n	8006ab2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006aaa:	e09b      	b.n	8006be4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006aac:	4b53      	ldr	r3, [pc, #332]	; (8006bfc <HAL_RCC_GetSysClockFreq+0x184>)
 8006aae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006ab0:	e09b      	b.n	8006bea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ab2:	4b53      	ldr	r3, [pc, #332]	; (8006c00 <HAL_RCC_GetSysClockFreq+0x188>)
 8006ab4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006ab6:	e098      	b.n	8006bea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ab8:	4b4f      	ldr	r3, [pc, #316]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ac0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ac2:	4b4d      	ldr	r3, [pc, #308]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d028      	beq.n	8006b20 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ace:	4b4a      	ldr	r3, [pc, #296]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	099b      	lsrs	r3, r3, #6
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	623b      	str	r3, [r7, #32]
 8006ad8:	627a      	str	r2, [r7, #36]	; 0x24
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	4b47      	ldr	r3, [pc, #284]	; (8006c00 <HAL_RCC_GetSysClockFreq+0x188>)
 8006ae4:	fb03 f201 	mul.w	r2, r3, r1
 8006ae8:	2300      	movs	r3, #0
 8006aea:	fb00 f303 	mul.w	r3, r0, r3
 8006aee:	4413      	add	r3, r2
 8006af0:	4a43      	ldr	r2, [pc, #268]	; (8006c00 <HAL_RCC_GetSysClockFreq+0x188>)
 8006af2:	fba0 1202 	umull	r1, r2, r0, r2
 8006af6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006af8:	460a      	mov	r2, r1
 8006afa:	62ba      	str	r2, [r7, #40]	; 0x28
 8006afc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006afe:	4413      	add	r3, r2
 8006b00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b04:	2200      	movs	r2, #0
 8006b06:	61bb      	str	r3, [r7, #24]
 8006b08:	61fa      	str	r2, [r7, #28]
 8006b0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006b12:	f7f9 feeb 	bl	80008ec <__aeabi_uldivmod>
 8006b16:	4602      	mov	r2, r0
 8006b18:	460b      	mov	r3, r1
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b1e:	e053      	b.n	8006bc8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b20:	4b35      	ldr	r3, [pc, #212]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	099b      	lsrs	r3, r3, #6
 8006b26:	2200      	movs	r2, #0
 8006b28:	613b      	str	r3, [r7, #16]
 8006b2a:	617a      	str	r2, [r7, #20]
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006b32:	f04f 0b00 	mov.w	fp, #0
 8006b36:	4652      	mov	r2, sl
 8006b38:	465b      	mov	r3, fp
 8006b3a:	f04f 0000 	mov.w	r0, #0
 8006b3e:	f04f 0100 	mov.w	r1, #0
 8006b42:	0159      	lsls	r1, r3, #5
 8006b44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b48:	0150      	lsls	r0, r2, #5
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	ebb2 080a 	subs.w	r8, r2, sl
 8006b52:	eb63 090b 	sbc.w	r9, r3, fp
 8006b56:	f04f 0200 	mov.w	r2, #0
 8006b5a:	f04f 0300 	mov.w	r3, #0
 8006b5e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006b62:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006b66:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006b6a:	ebb2 0408 	subs.w	r4, r2, r8
 8006b6e:	eb63 0509 	sbc.w	r5, r3, r9
 8006b72:	f04f 0200 	mov.w	r2, #0
 8006b76:	f04f 0300 	mov.w	r3, #0
 8006b7a:	00eb      	lsls	r3, r5, #3
 8006b7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b80:	00e2      	lsls	r2, r4, #3
 8006b82:	4614      	mov	r4, r2
 8006b84:	461d      	mov	r5, r3
 8006b86:	eb14 030a 	adds.w	r3, r4, sl
 8006b8a:	603b      	str	r3, [r7, #0]
 8006b8c:	eb45 030b 	adc.w	r3, r5, fp
 8006b90:	607b      	str	r3, [r7, #4]
 8006b92:	f04f 0200 	mov.w	r2, #0
 8006b96:	f04f 0300 	mov.w	r3, #0
 8006b9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b9e:	4629      	mov	r1, r5
 8006ba0:	028b      	lsls	r3, r1, #10
 8006ba2:	4621      	mov	r1, r4
 8006ba4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ba8:	4621      	mov	r1, r4
 8006baa:	028a      	lsls	r2, r1, #10
 8006bac:	4610      	mov	r0, r2
 8006bae:	4619      	mov	r1, r3
 8006bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	60bb      	str	r3, [r7, #8]
 8006bb6:	60fa      	str	r2, [r7, #12]
 8006bb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006bbc:	f7f9 fe96 	bl	80008ec <__aeabi_uldivmod>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006bc8:	4b0b      	ldr	r3, [pc, #44]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	0c1b      	lsrs	r3, r3, #16
 8006bce:	f003 0303 	and.w	r3, r3, #3
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	005b      	lsls	r3, r3, #1
 8006bd6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006bd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006be0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006be2:	e002      	b.n	8006bea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006be4:	4b05      	ldr	r3, [pc, #20]	; (8006bfc <HAL_RCC_GetSysClockFreq+0x184>)
 8006be6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006be8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3740      	adds	r7, #64	; 0x40
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bf6:	bf00      	nop
 8006bf8:	40023800 	.word	0x40023800
 8006bfc:	00f42400 	.word	0x00f42400
 8006c00:	017d7840 	.word	0x017d7840

08006c04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c04:	b480      	push	{r7}
 8006c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c08:	4b03      	ldr	r3, [pc, #12]	; (8006c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	200006e8 	.word	0x200006e8

08006c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c20:	f7ff fff0 	bl	8006c04 <HAL_RCC_GetHCLKFreq>
 8006c24:	4602      	mov	r2, r0
 8006c26:	4b05      	ldr	r3, [pc, #20]	; (8006c3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	0a9b      	lsrs	r3, r3, #10
 8006c2c:	f003 0307 	and.w	r3, r3, #7
 8006c30:	4903      	ldr	r1, [pc, #12]	; (8006c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c32:	5ccb      	ldrb	r3, [r1, r3]
 8006c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	40023800 	.word	0x40023800
 8006c40:	0800a020 	.word	0x0800a020

08006c44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e07b      	b.n	8006d4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d108      	bne.n	8006c70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c66:	d009      	beq.n	8006c7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	61da      	str	r2, [r3, #28]
 8006c6e:	e005      	b.n	8006c7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d106      	bne.n	8006c9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7fc fd78 	bl	800378c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cb2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006cc4:	431a      	orrs	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	f003 0302 	and.w	r3, r3, #2
 8006cd8:	431a      	orrs	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	f003 0301 	and.w	r3, r3, #1
 8006ce2:	431a      	orrs	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cec:	431a      	orrs	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	69db      	ldr	r3, [r3, #28]
 8006cf2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cf6:	431a      	orrs	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a1b      	ldr	r3, [r3, #32]
 8006cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d00:	ea42 0103 	orr.w	r1, r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	430a      	orrs	r2, r1
 8006d12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	0c1b      	lsrs	r3, r3, #16
 8006d1a:	f003 0104 	and.w	r1, r3, #4
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d22:	f003 0210 	and.w	r2, r3, #16
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	430a      	orrs	r2, r1
 8006d2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	69da      	ldr	r2, [r3, #28]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b088      	sub	sp, #32
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	60f8      	str	r0, [r7, #12]
 8006d5e:	60b9      	str	r1, [r7, #8]
 8006d60:	603b      	str	r3, [r7, #0]
 8006d62:	4613      	mov	r3, r2
 8006d64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d66:	2300      	movs	r3, #0
 8006d68:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d101      	bne.n	8006d78 <HAL_SPI_Transmit+0x22>
 8006d74:	2302      	movs	r3, #2
 8006d76:	e126      	b.n	8006fc6 <HAL_SPI_Transmit+0x270>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d80:	f7fc ff96 	bl	8003cb0 <HAL_GetTick>
 8006d84:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006d86:	88fb      	ldrh	r3, [r7, #6]
 8006d88:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d002      	beq.n	8006d9c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006d96:	2302      	movs	r3, #2
 8006d98:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d9a:	e10b      	b.n	8006fb4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d002      	beq.n	8006da8 <HAL_SPI_Transmit+0x52>
 8006da2:	88fb      	ldrh	r3, [r7, #6]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d102      	bne.n	8006dae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006dac:	e102      	b.n	8006fb4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2203      	movs	r2, #3
 8006db2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	68ba      	ldr	r2, [r7, #8]
 8006dc0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	88fa      	ldrh	r2, [r7, #6]
 8006dc6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	88fa      	ldrh	r2, [r7, #6]
 8006dcc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2200      	movs	r2, #0
 8006dea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006df4:	d10f      	bne.n	8006e16 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e20:	2b40      	cmp	r3, #64	; 0x40
 8006e22:	d007      	beq.n	8006e34 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e3c:	d14b      	bne.n	8006ed6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d002      	beq.n	8006e4c <HAL_SPI_Transmit+0xf6>
 8006e46:	8afb      	ldrh	r3, [r7, #22]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d13e      	bne.n	8006eca <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e50:	881a      	ldrh	r2, [r3, #0]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5c:	1c9a      	adds	r2, r3, #2
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e70:	e02b      	b.n	8006eca <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f003 0302 	and.w	r3, r3, #2
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d112      	bne.n	8006ea6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e84:	881a      	ldrh	r2, [r3, #0]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e90:	1c9a      	adds	r2, r3, #2
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	86da      	strh	r2, [r3, #54]	; 0x36
 8006ea4:	e011      	b.n	8006eca <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ea6:	f7fc ff03 	bl	8003cb0 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d803      	bhi.n	8006ebe <HAL_SPI_Transmit+0x168>
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ebc:	d102      	bne.n	8006ec4 <HAL_SPI_Transmit+0x16e>
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d102      	bne.n	8006eca <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006ec8:	e074      	b.n	8006fb4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1ce      	bne.n	8006e72 <HAL_SPI_Transmit+0x11c>
 8006ed4:	e04c      	b.n	8006f70 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d002      	beq.n	8006ee4 <HAL_SPI_Transmit+0x18e>
 8006ede:	8afb      	ldrh	r3, [r7, #22]
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d140      	bne.n	8006f66 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	330c      	adds	r3, #12
 8006eee:	7812      	ldrb	r2, [r2, #0]
 8006ef0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef6:	1c5a      	adds	r2, r3, #1
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	3b01      	subs	r3, #1
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006f0a:	e02c      	b.n	8006f66 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	f003 0302 	and.w	r3, r3, #2
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d113      	bne.n	8006f42 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	330c      	adds	r3, #12
 8006f24:	7812      	ldrb	r2, [r2, #0]
 8006f26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2c:	1c5a      	adds	r2, r3, #1
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006f40:	e011      	b.n	8006f66 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f42:	f7fc feb5 	bl	8003cb0 <HAL_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	683a      	ldr	r2, [r7, #0]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d803      	bhi.n	8006f5a <HAL_SPI_Transmit+0x204>
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f58:	d102      	bne.n	8006f60 <HAL_SPI_Transmit+0x20a>
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d102      	bne.n	8006f66 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006f64:	e026      	b.n	8006fb4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1cd      	bne.n	8006f0c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f70:	69ba      	ldr	r2, [r7, #24]
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f000 f8b3 	bl	80070e0 <SPI_EndRxTxTransaction>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d002      	beq.n	8006f86 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2220      	movs	r2, #32
 8006f84:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10a      	bne.n	8006fa4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f8e:	2300      	movs	r3, #0
 8006f90:	613b      	str	r3, [r7, #16]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	613b      	str	r3, [r7, #16]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	613b      	str	r3, [r7, #16]
 8006fa2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d002      	beq.n	8006fb2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	77fb      	strb	r3, [r7, #31]
 8006fb0:	e000      	b.n	8006fb4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006fb2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006fc4:	7ffb      	ldrb	r3, [r7, #31]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3720      	adds	r7, #32
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
	...

08006fd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b088      	sub	sp, #32
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	603b      	str	r3, [r7, #0]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006fe0:	f7fc fe66 	bl	8003cb0 <HAL_GetTick>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe8:	1a9b      	subs	r3, r3, r2
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	4413      	add	r3, r2
 8006fee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ff0:	f7fc fe5e 	bl	8003cb0 <HAL_GetTick>
 8006ff4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ff6:	4b39      	ldr	r3, [pc, #228]	; (80070dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	015b      	lsls	r3, r3, #5
 8006ffc:	0d1b      	lsrs	r3, r3, #20
 8006ffe:	69fa      	ldr	r2, [r7, #28]
 8007000:	fb02 f303 	mul.w	r3, r2, r3
 8007004:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007006:	e054      	b.n	80070b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700e:	d050      	beq.n	80070b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007010:	f7fc fe4e 	bl	8003cb0 <HAL_GetTick>
 8007014:	4602      	mov	r2, r0
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	69fa      	ldr	r2, [r7, #28]
 800701c:	429a      	cmp	r2, r3
 800701e:	d902      	bls.n	8007026 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d13d      	bne.n	80070a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007034:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800703e:	d111      	bne.n	8007064 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007048:	d004      	beq.n	8007054 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007052:	d107      	bne.n	8007064 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007062:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800706c:	d10f      	bne.n	800708e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800707c:	601a      	str	r2, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800708c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e017      	b.n	80070d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d101      	bne.n	80070ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80070a8:	2300      	movs	r3, #0
 80070aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	3b01      	subs	r3, #1
 80070b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	689a      	ldr	r2, [r3, #8]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	4013      	ands	r3, r2
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	429a      	cmp	r2, r3
 80070c0:	bf0c      	ite	eq
 80070c2:	2301      	moveq	r3, #1
 80070c4:	2300      	movne	r3, #0
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	461a      	mov	r2, r3
 80070ca:	79fb      	ldrb	r3, [r7, #7]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d19b      	bne.n	8007008 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3720      	adds	r7, #32
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	200006e8 	.word	0x200006e8

080070e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b088      	sub	sp, #32
 80070e4:	af02      	add	r7, sp, #8
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80070ec:	4b1b      	ldr	r3, [pc, #108]	; (800715c <SPI_EndRxTxTransaction+0x7c>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a1b      	ldr	r2, [pc, #108]	; (8007160 <SPI_EndRxTxTransaction+0x80>)
 80070f2:	fba2 2303 	umull	r2, r3, r2, r3
 80070f6:	0d5b      	lsrs	r3, r3, #21
 80070f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80070fc:	fb02 f303 	mul.w	r3, r2, r3
 8007100:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800710a:	d112      	bne.n	8007132 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	9300      	str	r3, [sp, #0]
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	2200      	movs	r2, #0
 8007114:	2180      	movs	r1, #128	; 0x80
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f7ff ff5a 	bl	8006fd0 <SPI_WaitFlagStateUntilTimeout>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d016      	beq.n	8007150 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007126:	f043 0220 	orr.w	r2, r3, #32
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e00f      	b.n	8007152 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00a      	beq.n	800714e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	3b01      	subs	r3, #1
 800713c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007148:	2b80      	cmp	r3, #128	; 0x80
 800714a:	d0f2      	beq.n	8007132 <SPI_EndRxTxTransaction+0x52>
 800714c:	e000      	b.n	8007150 <SPI_EndRxTxTransaction+0x70>
        break;
 800714e:	bf00      	nop
  }

  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3718      	adds	r7, #24
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	200006e8 	.word	0x200006e8
 8007160:	165e9f81 	.word	0x165e9f81

08007164 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e041      	b.n	80071fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b00      	cmp	r3, #0
 8007180:	d106      	bne.n	8007190 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7fc fbc2 	bl	8003914 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2202      	movs	r2, #2
 8007194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	3304      	adds	r3, #4
 80071a0:	4619      	mov	r1, r3
 80071a2:	4610      	mov	r0, r2
 80071a4:	f000 fd54 	bl	8007c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
	...

08007204 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b01      	cmp	r3, #1
 8007216:	d001      	beq.n	800721c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e03c      	b.n	8007296 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2202      	movs	r2, #2
 8007220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a1e      	ldr	r2, [pc, #120]	; (80072a4 <HAL_TIM_Base_Start+0xa0>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d018      	beq.n	8007260 <HAL_TIM_Base_Start+0x5c>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007236:	d013      	beq.n	8007260 <HAL_TIM_Base_Start+0x5c>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a1a      	ldr	r2, [pc, #104]	; (80072a8 <HAL_TIM_Base_Start+0xa4>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d00e      	beq.n	8007260 <HAL_TIM_Base_Start+0x5c>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a19      	ldr	r2, [pc, #100]	; (80072ac <HAL_TIM_Base_Start+0xa8>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d009      	beq.n	8007260 <HAL_TIM_Base_Start+0x5c>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a17      	ldr	r2, [pc, #92]	; (80072b0 <HAL_TIM_Base_Start+0xac>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d004      	beq.n	8007260 <HAL_TIM_Base_Start+0x5c>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a16      	ldr	r2, [pc, #88]	; (80072b4 <HAL_TIM_Base_Start+0xb0>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d111      	bne.n	8007284 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f003 0307 	and.w	r3, r3, #7
 800726a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2b06      	cmp	r3, #6
 8007270:	d010      	beq.n	8007294 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f042 0201 	orr.w	r2, r2, #1
 8007280:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007282:	e007      	b.n	8007294 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f042 0201 	orr.w	r2, r2, #1
 8007292:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3714      	adds	r7, #20
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	40010000 	.word	0x40010000
 80072a8:	40000400 	.word	0x40000400
 80072ac:	40000800 	.word	0x40000800
 80072b0:	40000c00 	.word	0x40000c00
 80072b4:	40014000 	.word	0x40014000

080072b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d001      	beq.n	80072d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e044      	b.n	800735a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2202      	movs	r2, #2
 80072d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68da      	ldr	r2, [r3, #12]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f042 0201 	orr.w	r2, r2, #1
 80072e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a1e      	ldr	r2, [pc, #120]	; (8007368 <HAL_TIM_Base_Start_IT+0xb0>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d018      	beq.n	8007324 <HAL_TIM_Base_Start_IT+0x6c>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072fa:	d013      	beq.n	8007324 <HAL_TIM_Base_Start_IT+0x6c>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a1a      	ldr	r2, [pc, #104]	; (800736c <HAL_TIM_Base_Start_IT+0xb4>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d00e      	beq.n	8007324 <HAL_TIM_Base_Start_IT+0x6c>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a19      	ldr	r2, [pc, #100]	; (8007370 <HAL_TIM_Base_Start_IT+0xb8>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d009      	beq.n	8007324 <HAL_TIM_Base_Start_IT+0x6c>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a17      	ldr	r2, [pc, #92]	; (8007374 <HAL_TIM_Base_Start_IT+0xbc>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d004      	beq.n	8007324 <HAL_TIM_Base_Start_IT+0x6c>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a16      	ldr	r2, [pc, #88]	; (8007378 <HAL_TIM_Base_Start_IT+0xc0>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d111      	bne.n	8007348 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	f003 0307 	and.w	r3, r3, #7
 800732e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2b06      	cmp	r3, #6
 8007334:	d010      	beq.n	8007358 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f042 0201 	orr.w	r2, r2, #1
 8007344:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007346:	e007      	b.n	8007358 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f042 0201 	orr.w	r2, r2, #1
 8007356:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3714      	adds	r7, #20
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	40010000 	.word	0x40010000
 800736c:	40000400 	.word	0x40000400
 8007370:	40000800 	.word	0x40000800
 8007374:	40000c00 	.word	0x40000c00
 8007378:	40014000 	.word	0x40014000

0800737c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d101      	bne.n	800738e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e041      	b.n	8007412 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d106      	bne.n	80073a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f839 	bl	800741a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2202      	movs	r2, #2
 80073ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	3304      	adds	r3, #4
 80073b8:	4619      	mov	r1, r3
 80073ba:	4610      	mov	r0, r2
 80073bc:	f000 fc48 	bl	8007c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3708      	adds	r7, #8
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800741a:	b480      	push	{r7}
 800741c:	b083      	sub	sp, #12
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007422:	bf00      	nop
 8007424:	370c      	adds	r7, #12
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
	...

08007430 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d109      	bne.n	8007454 <HAL_TIM_PWM_Start+0x24>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007446:	b2db      	uxtb	r3, r3
 8007448:	2b01      	cmp	r3, #1
 800744a:	bf14      	ite	ne
 800744c:	2301      	movne	r3, #1
 800744e:	2300      	moveq	r3, #0
 8007450:	b2db      	uxtb	r3, r3
 8007452:	e022      	b.n	800749a <HAL_TIM_PWM_Start+0x6a>
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	2b04      	cmp	r3, #4
 8007458:	d109      	bne.n	800746e <HAL_TIM_PWM_Start+0x3e>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b01      	cmp	r3, #1
 8007464:	bf14      	ite	ne
 8007466:	2301      	movne	r3, #1
 8007468:	2300      	moveq	r3, #0
 800746a:	b2db      	uxtb	r3, r3
 800746c:	e015      	b.n	800749a <HAL_TIM_PWM_Start+0x6a>
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	2b08      	cmp	r3, #8
 8007472:	d109      	bne.n	8007488 <HAL_TIM_PWM_Start+0x58>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800747a:	b2db      	uxtb	r3, r3
 800747c:	2b01      	cmp	r3, #1
 800747e:	bf14      	ite	ne
 8007480:	2301      	movne	r3, #1
 8007482:	2300      	moveq	r3, #0
 8007484:	b2db      	uxtb	r3, r3
 8007486:	e008      	b.n	800749a <HAL_TIM_PWM_Start+0x6a>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800748e:	b2db      	uxtb	r3, r3
 8007490:	2b01      	cmp	r3, #1
 8007492:	bf14      	ite	ne
 8007494:	2301      	movne	r3, #1
 8007496:	2300      	moveq	r3, #0
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d001      	beq.n	80074a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e068      	b.n	8007574 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d104      	bne.n	80074b2 <HAL_TIM_PWM_Start+0x82>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2202      	movs	r2, #2
 80074ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074b0:	e013      	b.n	80074da <HAL_TIM_PWM_Start+0xaa>
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2b04      	cmp	r3, #4
 80074b6:	d104      	bne.n	80074c2 <HAL_TIM_PWM_Start+0x92>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2202      	movs	r2, #2
 80074bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074c0:	e00b      	b.n	80074da <HAL_TIM_PWM_Start+0xaa>
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	2b08      	cmp	r3, #8
 80074c6:	d104      	bne.n	80074d2 <HAL_TIM_PWM_Start+0xa2>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2202      	movs	r2, #2
 80074cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074d0:	e003      	b.n	80074da <HAL_TIM_PWM_Start+0xaa>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2202      	movs	r2, #2
 80074d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2201      	movs	r2, #1
 80074e0:	6839      	ldr	r1, [r7, #0]
 80074e2:	4618      	mov	r0, r3
 80074e4:	f000 fe5a 	bl	800819c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a23      	ldr	r2, [pc, #140]	; (800757c <HAL_TIM_PWM_Start+0x14c>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d107      	bne.n	8007502 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007500:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a1d      	ldr	r2, [pc, #116]	; (800757c <HAL_TIM_PWM_Start+0x14c>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d018      	beq.n	800753e <HAL_TIM_PWM_Start+0x10e>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007514:	d013      	beq.n	800753e <HAL_TIM_PWM_Start+0x10e>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a19      	ldr	r2, [pc, #100]	; (8007580 <HAL_TIM_PWM_Start+0x150>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d00e      	beq.n	800753e <HAL_TIM_PWM_Start+0x10e>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a17      	ldr	r2, [pc, #92]	; (8007584 <HAL_TIM_PWM_Start+0x154>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d009      	beq.n	800753e <HAL_TIM_PWM_Start+0x10e>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a16      	ldr	r2, [pc, #88]	; (8007588 <HAL_TIM_PWM_Start+0x158>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d004      	beq.n	800753e <HAL_TIM_PWM_Start+0x10e>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a14      	ldr	r2, [pc, #80]	; (800758c <HAL_TIM_PWM_Start+0x15c>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d111      	bne.n	8007562 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	f003 0307 	and.w	r3, r3, #7
 8007548:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2b06      	cmp	r3, #6
 800754e:	d010      	beq.n	8007572 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f042 0201 	orr.w	r2, r2, #1
 800755e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007560:	e007      	b.n	8007572 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f042 0201 	orr.w	r2, r2, #1
 8007570:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}
 800757c:	40010000 	.word	0x40010000
 8007580:	40000400 	.word	0x40000400
 8007584:	40000800 	.word	0x40000800
 8007588:	40000c00 	.word	0x40000c00
 800758c:	40014000 	.word	0x40014000

08007590 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b086      	sub	sp, #24
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d101      	bne.n	80075a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e097      	b.n	80076d4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d106      	bne.n	80075be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f7fc f92f 	bl	800381c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2202      	movs	r2, #2
 80075c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	6812      	ldr	r2, [r2, #0]
 80075d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075d4:	f023 0307 	bic.w	r3, r3, #7
 80075d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	3304      	adds	r3, #4
 80075e2:	4619      	mov	r1, r3
 80075e4:	4610      	mov	r0, r2
 80075e6:	f000 fb33 	bl	8007c50 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	6a1b      	ldr	r3, [r3, #32]
 8007600:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	4313      	orrs	r3, r2
 800760a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007612:	f023 0303 	bic.w	r3, r3, #3
 8007616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	689a      	ldr	r2, [r3, #8]
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	021b      	lsls	r3, r3, #8
 8007622:	4313      	orrs	r3, r2
 8007624:	693a      	ldr	r2, [r7, #16]
 8007626:	4313      	orrs	r3, r2
 8007628:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007630:	f023 030c 	bic.w	r3, r3, #12
 8007634:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800763c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007640:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	68da      	ldr	r2, [r3, #12]
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	69db      	ldr	r3, [r3, #28]
 800764a:	021b      	lsls	r3, r3, #8
 800764c:	4313      	orrs	r3, r2
 800764e:	693a      	ldr	r2, [r7, #16]
 8007650:	4313      	orrs	r3, r2
 8007652:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	011a      	lsls	r2, r3, #4
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	031b      	lsls	r3, r3, #12
 8007660:	4313      	orrs	r3, r2
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	4313      	orrs	r3, r2
 8007666:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800766e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007676:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	685a      	ldr	r2, [r3, #4]
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	695b      	ldr	r3, [r3, #20]
 8007680:	011b      	lsls	r3, r3, #4
 8007682:	4313      	orrs	r3, r2
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	4313      	orrs	r3, r2
 8007688:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	693a      	ldr	r2, [r7, #16]
 8007698:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2201      	movs	r2, #1
 80076b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3718      	adds	r7, #24
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	f003 0302 	and.w	r3, r3, #2
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d122      	bne.n	8007738 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	f003 0302 	and.w	r3, r3, #2
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d11b      	bne.n	8007738 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f06f 0202 	mvn.w	r2, #2
 8007708:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2201      	movs	r2, #1
 800770e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	699b      	ldr	r3, [r3, #24]
 8007716:	f003 0303 	and.w	r3, r3, #3
 800771a:	2b00      	cmp	r3, #0
 800771c:	d003      	beq.n	8007726 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 fa77 	bl	8007c12 <HAL_TIM_IC_CaptureCallback>
 8007724:	e005      	b.n	8007732 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 fa69 	bl	8007bfe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fa7a 	bl	8007c26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	f003 0304 	and.w	r3, r3, #4
 8007742:	2b04      	cmp	r3, #4
 8007744:	d122      	bne.n	800778c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	f003 0304 	and.w	r3, r3, #4
 8007750:	2b04      	cmp	r3, #4
 8007752:	d11b      	bne.n	800778c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f06f 0204 	mvn.w	r2, #4
 800775c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2202      	movs	r2, #2
 8007762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800776e:	2b00      	cmp	r3, #0
 8007770:	d003      	beq.n	800777a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 fa4d 	bl	8007c12 <HAL_TIM_IC_CaptureCallback>
 8007778:	e005      	b.n	8007786 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fa3f 	bl	8007bfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fa50 	bl	8007c26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	f003 0308 	and.w	r3, r3, #8
 8007796:	2b08      	cmp	r3, #8
 8007798:	d122      	bne.n	80077e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	f003 0308 	and.w	r3, r3, #8
 80077a4:	2b08      	cmp	r3, #8
 80077a6:	d11b      	bne.n	80077e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f06f 0208 	mvn.w	r2, #8
 80077b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2204      	movs	r2, #4
 80077b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	69db      	ldr	r3, [r3, #28]
 80077be:	f003 0303 	and.w	r3, r3, #3
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d003      	beq.n	80077ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 fa23 	bl	8007c12 <HAL_TIM_IC_CaptureCallback>
 80077cc:	e005      	b.n	80077da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fa15 	bl	8007bfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 fa26 	bl	8007c26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	f003 0310 	and.w	r3, r3, #16
 80077ea:	2b10      	cmp	r3, #16
 80077ec:	d122      	bne.n	8007834 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	f003 0310 	and.w	r3, r3, #16
 80077f8:	2b10      	cmp	r3, #16
 80077fa:	d11b      	bne.n	8007834 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f06f 0210 	mvn.w	r2, #16
 8007804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2208      	movs	r2, #8
 800780a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	69db      	ldr	r3, [r3, #28]
 8007812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007816:	2b00      	cmp	r3, #0
 8007818:	d003      	beq.n	8007822 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 f9f9 	bl	8007c12 <HAL_TIM_IC_CaptureCallback>
 8007820:	e005      	b.n	800782e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f9eb 	bl	8007bfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 f9fc 	bl	8007c26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	f003 0301 	and.w	r3, r3, #1
 800783e:	2b01      	cmp	r3, #1
 8007840:	d10e      	bne.n	8007860 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	f003 0301 	and.w	r3, r3, #1
 800784c:	2b01      	cmp	r3, #1
 800784e:	d107      	bne.n	8007860 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f06f 0201 	mvn.w	r2, #1
 8007858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7f9 fa4a 	bl	8000cf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800786a:	2b80      	cmp	r3, #128	; 0x80
 800786c:	d10e      	bne.n	800788c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007878:	2b80      	cmp	r3, #128	; 0x80
 800787a:	d107      	bne.n	800788c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fd26 	bl	80082d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007896:	2b40      	cmp	r3, #64	; 0x40
 8007898:	d10e      	bne.n	80078b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078a4:	2b40      	cmp	r3, #64	; 0x40
 80078a6:	d107      	bne.n	80078b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80078b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f9c1 	bl	8007c3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	f003 0320 	and.w	r3, r3, #32
 80078c2:	2b20      	cmp	r3, #32
 80078c4:	d10e      	bne.n	80078e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	f003 0320 	and.w	r3, r3, #32
 80078d0:	2b20      	cmp	r3, #32
 80078d2:	d107      	bne.n	80078e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f06f 0220 	mvn.w	r2, #32
 80078dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 fcf0 	bl	80082c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078e4:	bf00      	nop
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b086      	sub	sp, #24
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078f8:	2300      	movs	r3, #0
 80078fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007902:	2b01      	cmp	r3, #1
 8007904:	d101      	bne.n	800790a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007906:	2302      	movs	r3, #2
 8007908:	e0ae      	b.n	8007a68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2b0c      	cmp	r3, #12
 8007916:	f200 809f 	bhi.w	8007a58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800791a:	a201      	add	r2, pc, #4	; (adr r2, 8007920 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800791c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007920:	08007955 	.word	0x08007955
 8007924:	08007a59 	.word	0x08007a59
 8007928:	08007a59 	.word	0x08007a59
 800792c:	08007a59 	.word	0x08007a59
 8007930:	08007995 	.word	0x08007995
 8007934:	08007a59 	.word	0x08007a59
 8007938:	08007a59 	.word	0x08007a59
 800793c:	08007a59 	.word	0x08007a59
 8007940:	080079d7 	.word	0x080079d7
 8007944:	08007a59 	.word	0x08007a59
 8007948:	08007a59 	.word	0x08007a59
 800794c:	08007a59 	.word	0x08007a59
 8007950:	08007a17 	.word	0x08007a17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	68b9      	ldr	r1, [r7, #8]
 800795a:	4618      	mov	r0, r3
 800795c:	f000 f9f8 	bl	8007d50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	699a      	ldr	r2, [r3, #24]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f042 0208 	orr.w	r2, r2, #8
 800796e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	699a      	ldr	r2, [r3, #24]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f022 0204 	bic.w	r2, r2, #4
 800797e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6999      	ldr	r1, [r3, #24]
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	691a      	ldr	r2, [r3, #16]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	430a      	orrs	r2, r1
 8007990:	619a      	str	r2, [r3, #24]
      break;
 8007992:	e064      	b.n	8007a5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68b9      	ldr	r1, [r7, #8]
 800799a:	4618      	mov	r0, r3
 800799c:	f000 fa3e 	bl	8007e1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	699a      	ldr	r2, [r3, #24]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	699a      	ldr	r2, [r3, #24]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	6999      	ldr	r1, [r3, #24]
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	021a      	lsls	r2, r3, #8
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	430a      	orrs	r2, r1
 80079d2:	619a      	str	r2, [r3, #24]
      break;
 80079d4:	e043      	b.n	8007a5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68b9      	ldr	r1, [r7, #8]
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 fa89 	bl	8007ef4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	69da      	ldr	r2, [r3, #28]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f042 0208 	orr.w	r2, r2, #8
 80079f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	69da      	ldr	r2, [r3, #28]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f022 0204 	bic.w	r2, r2, #4
 8007a00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	69d9      	ldr	r1, [r3, #28]
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	691a      	ldr	r2, [r3, #16]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	430a      	orrs	r2, r1
 8007a12:	61da      	str	r2, [r3, #28]
      break;
 8007a14:	e023      	b.n	8007a5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68b9      	ldr	r1, [r7, #8]
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f000 fad3 	bl	8007fc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	69da      	ldr	r2, [r3, #28]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	69da      	ldr	r2, [r3, #28]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	69d9      	ldr	r1, [r3, #28]
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	021a      	lsls	r2, r3, #8
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	430a      	orrs	r2, r1
 8007a54:	61da      	str	r2, [r3, #28]
      break;
 8007a56:	e002      	b.n	8007a5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3718      	adds	r7, #24
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d101      	bne.n	8007a8c <HAL_TIM_ConfigClockSource+0x1c>
 8007a88:	2302      	movs	r3, #2
 8007a8a:	e0b4      	b.n	8007bf6 <HAL_TIM_ConfigClockSource+0x186>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2202      	movs	r2, #2
 8007a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007aaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ab2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ac4:	d03e      	beq.n	8007b44 <HAL_TIM_ConfigClockSource+0xd4>
 8007ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aca:	f200 8087 	bhi.w	8007bdc <HAL_TIM_ConfigClockSource+0x16c>
 8007ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ad2:	f000 8086 	beq.w	8007be2 <HAL_TIM_ConfigClockSource+0x172>
 8007ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ada:	d87f      	bhi.n	8007bdc <HAL_TIM_ConfigClockSource+0x16c>
 8007adc:	2b70      	cmp	r3, #112	; 0x70
 8007ade:	d01a      	beq.n	8007b16 <HAL_TIM_ConfigClockSource+0xa6>
 8007ae0:	2b70      	cmp	r3, #112	; 0x70
 8007ae2:	d87b      	bhi.n	8007bdc <HAL_TIM_ConfigClockSource+0x16c>
 8007ae4:	2b60      	cmp	r3, #96	; 0x60
 8007ae6:	d050      	beq.n	8007b8a <HAL_TIM_ConfigClockSource+0x11a>
 8007ae8:	2b60      	cmp	r3, #96	; 0x60
 8007aea:	d877      	bhi.n	8007bdc <HAL_TIM_ConfigClockSource+0x16c>
 8007aec:	2b50      	cmp	r3, #80	; 0x50
 8007aee:	d03c      	beq.n	8007b6a <HAL_TIM_ConfigClockSource+0xfa>
 8007af0:	2b50      	cmp	r3, #80	; 0x50
 8007af2:	d873      	bhi.n	8007bdc <HAL_TIM_ConfigClockSource+0x16c>
 8007af4:	2b40      	cmp	r3, #64	; 0x40
 8007af6:	d058      	beq.n	8007baa <HAL_TIM_ConfigClockSource+0x13a>
 8007af8:	2b40      	cmp	r3, #64	; 0x40
 8007afa:	d86f      	bhi.n	8007bdc <HAL_TIM_ConfigClockSource+0x16c>
 8007afc:	2b30      	cmp	r3, #48	; 0x30
 8007afe:	d064      	beq.n	8007bca <HAL_TIM_ConfigClockSource+0x15a>
 8007b00:	2b30      	cmp	r3, #48	; 0x30
 8007b02:	d86b      	bhi.n	8007bdc <HAL_TIM_ConfigClockSource+0x16c>
 8007b04:	2b20      	cmp	r3, #32
 8007b06:	d060      	beq.n	8007bca <HAL_TIM_ConfigClockSource+0x15a>
 8007b08:	2b20      	cmp	r3, #32
 8007b0a:	d867      	bhi.n	8007bdc <HAL_TIM_ConfigClockSource+0x16c>
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d05c      	beq.n	8007bca <HAL_TIM_ConfigClockSource+0x15a>
 8007b10:	2b10      	cmp	r3, #16
 8007b12:	d05a      	beq.n	8007bca <HAL_TIM_ConfigClockSource+0x15a>
 8007b14:	e062      	b.n	8007bdc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6818      	ldr	r0, [r3, #0]
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	6899      	ldr	r1, [r3, #8]
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	685a      	ldr	r2, [r3, #4]
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	f000 fb19 	bl	800815c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007b38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	609a      	str	r2, [r3, #8]
      break;
 8007b42:	e04f      	b.n	8007be4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6818      	ldr	r0, [r3, #0]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	6899      	ldr	r1, [r3, #8]
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	685a      	ldr	r2, [r3, #4]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	f000 fb02 	bl	800815c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	689a      	ldr	r2, [r3, #8]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b66:	609a      	str	r2, [r3, #8]
      break;
 8007b68:	e03c      	b.n	8007be4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6818      	ldr	r0, [r3, #0]
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	6859      	ldr	r1, [r3, #4]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	461a      	mov	r2, r3
 8007b78:	f000 fa76 	bl	8008068 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2150      	movs	r1, #80	; 0x50
 8007b82:	4618      	mov	r0, r3
 8007b84:	f000 facf 	bl	8008126 <TIM_ITRx_SetConfig>
      break;
 8007b88:	e02c      	b.n	8007be4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6818      	ldr	r0, [r3, #0]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	6859      	ldr	r1, [r3, #4]
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	461a      	mov	r2, r3
 8007b98:	f000 fa95 	bl	80080c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2160      	movs	r1, #96	; 0x60
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f000 fabf 	bl	8008126 <TIM_ITRx_SetConfig>
      break;
 8007ba8:	e01c      	b.n	8007be4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6818      	ldr	r0, [r3, #0]
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	6859      	ldr	r1, [r3, #4]
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	f000 fa56 	bl	8008068 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2140      	movs	r1, #64	; 0x40
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f000 faaf 	bl	8008126 <TIM_ITRx_SetConfig>
      break;
 8007bc8:	e00c      	b.n	8007be4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	4610      	mov	r0, r2
 8007bd6:	f000 faa6 	bl	8008126 <TIM_ITRx_SetConfig>
      break;
 8007bda:	e003      	b.n	8007be4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	73fb      	strb	r3, [r7, #15]
      break;
 8007be0:	e000      	b.n	8007be4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007be2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b083      	sub	sp, #12
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c06:	bf00      	nop
 8007c08:	370c      	adds	r7, #12
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr

08007c12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c12:	b480      	push	{r7}
 8007c14:	b083      	sub	sp, #12
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c1a:	bf00      	nop
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b083      	sub	sp, #12
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c2e:	bf00      	nop
 8007c30:	370c      	adds	r7, #12
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr

08007c3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b083      	sub	sp, #12
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c42:	bf00      	nop
 8007c44:	370c      	adds	r7, #12
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr
	...

08007c50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a34      	ldr	r2, [pc, #208]	; (8007d34 <TIM_Base_SetConfig+0xe4>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d00f      	beq.n	8007c88 <TIM_Base_SetConfig+0x38>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c6e:	d00b      	beq.n	8007c88 <TIM_Base_SetConfig+0x38>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	4a31      	ldr	r2, [pc, #196]	; (8007d38 <TIM_Base_SetConfig+0xe8>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d007      	beq.n	8007c88 <TIM_Base_SetConfig+0x38>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4a30      	ldr	r2, [pc, #192]	; (8007d3c <TIM_Base_SetConfig+0xec>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d003      	beq.n	8007c88 <TIM_Base_SetConfig+0x38>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4a2f      	ldr	r2, [pc, #188]	; (8007d40 <TIM_Base_SetConfig+0xf0>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d108      	bne.n	8007c9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a25      	ldr	r2, [pc, #148]	; (8007d34 <TIM_Base_SetConfig+0xe4>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d01b      	beq.n	8007cda <TIM_Base_SetConfig+0x8a>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ca8:	d017      	beq.n	8007cda <TIM_Base_SetConfig+0x8a>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a22      	ldr	r2, [pc, #136]	; (8007d38 <TIM_Base_SetConfig+0xe8>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d013      	beq.n	8007cda <TIM_Base_SetConfig+0x8a>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a21      	ldr	r2, [pc, #132]	; (8007d3c <TIM_Base_SetConfig+0xec>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d00f      	beq.n	8007cda <TIM_Base_SetConfig+0x8a>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a20      	ldr	r2, [pc, #128]	; (8007d40 <TIM_Base_SetConfig+0xf0>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d00b      	beq.n	8007cda <TIM_Base_SetConfig+0x8a>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4a1f      	ldr	r2, [pc, #124]	; (8007d44 <TIM_Base_SetConfig+0xf4>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d007      	beq.n	8007cda <TIM_Base_SetConfig+0x8a>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a1e      	ldr	r2, [pc, #120]	; (8007d48 <TIM_Base_SetConfig+0xf8>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d003      	beq.n	8007cda <TIM_Base_SetConfig+0x8a>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a1d      	ldr	r2, [pc, #116]	; (8007d4c <TIM_Base_SetConfig+0xfc>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d108      	bne.n	8007cec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	68fa      	ldr	r2, [r7, #12]
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	689a      	ldr	r2, [r3, #8]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a08      	ldr	r2, [pc, #32]	; (8007d34 <TIM_Base_SetConfig+0xe4>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d103      	bne.n	8007d20 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	691a      	ldr	r2, [r3, #16]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	615a      	str	r2, [r3, #20]
}
 8007d26:	bf00      	nop
 8007d28:	3714      	adds	r7, #20
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	40010000 	.word	0x40010000
 8007d38:	40000400 	.word	0x40000400
 8007d3c:	40000800 	.word	0x40000800
 8007d40:	40000c00 	.word	0x40000c00
 8007d44:	40014000 	.word	0x40014000
 8007d48:	40014400 	.word	0x40014400
 8007d4c:	40014800 	.word	0x40014800

08007d50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b087      	sub	sp, #28
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a1b      	ldr	r3, [r3, #32]
 8007d5e:	f023 0201 	bic.w	r2, r3, #1
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f023 0303 	bic.w	r3, r3, #3
 8007d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	f023 0302 	bic.w	r3, r3, #2
 8007d98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	697a      	ldr	r2, [r7, #20]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4a1c      	ldr	r2, [pc, #112]	; (8007e18 <TIM_OC1_SetConfig+0xc8>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d10c      	bne.n	8007dc6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	f023 0308 	bic.w	r3, r3, #8
 8007db2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	f023 0304 	bic.w	r3, r3, #4
 8007dc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a13      	ldr	r2, [pc, #76]	; (8007e18 <TIM_OC1_SetConfig+0xc8>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d111      	bne.n	8007df2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	693a      	ldr	r2, [r7, #16]
 8007de4:	4313      	orrs	r3, r2
 8007de6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	699b      	ldr	r3, [r3, #24]
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	693a      	ldr	r2, [r7, #16]
 8007df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	685a      	ldr	r2, [r3, #4]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	621a      	str	r2, [r3, #32]
}
 8007e0c:	bf00      	nop
 8007e0e:	371c      	adds	r7, #28
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr
 8007e18:	40010000 	.word	0x40010000

08007e1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b087      	sub	sp, #28
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a1b      	ldr	r3, [r3, #32]
 8007e2a:	f023 0210 	bic.w	r2, r3, #16
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	021b      	lsls	r3, r3, #8
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	f023 0320 	bic.w	r3, r3, #32
 8007e66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	011b      	lsls	r3, r3, #4
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4a1e      	ldr	r2, [pc, #120]	; (8007ef0 <TIM_OC2_SetConfig+0xd4>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d10d      	bne.n	8007e98 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	011b      	lsls	r3, r3, #4
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a15      	ldr	r2, [pc, #84]	; (8007ef0 <TIM_OC2_SetConfig+0xd4>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d113      	bne.n	8007ec8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ea6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007eae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	695b      	ldr	r3, [r3, #20]
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	693a      	ldr	r2, [r7, #16]
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	693a      	ldr	r2, [r7, #16]
 8007ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	685a      	ldr	r2, [r3, #4]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	621a      	str	r2, [r3, #32]
}
 8007ee2:	bf00      	nop
 8007ee4:	371c      	adds	r7, #28
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	40010000 	.word	0x40010000

08007ef4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b087      	sub	sp, #28
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6a1b      	ldr	r3, [r3, #32]
 8007f02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a1b      	ldr	r3, [r3, #32]
 8007f0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	69db      	ldr	r3, [r3, #28]
 8007f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f023 0303 	bic.w	r3, r3, #3
 8007f2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	021b      	lsls	r3, r3, #8
 8007f44:	697a      	ldr	r2, [r7, #20]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a1d      	ldr	r2, [pc, #116]	; (8007fc4 <TIM_OC3_SetConfig+0xd0>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d10d      	bne.n	8007f6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	021b      	lsls	r3, r3, #8
 8007f60:	697a      	ldr	r2, [r7, #20]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a14      	ldr	r2, [pc, #80]	; (8007fc4 <TIM_OC3_SetConfig+0xd0>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d113      	bne.n	8007f9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	695b      	ldr	r3, [r3, #20]
 8007f8a:	011b      	lsls	r3, r3, #4
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	699b      	ldr	r3, [r3, #24]
 8007f96:	011b      	lsls	r3, r3, #4
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	693a      	ldr	r2, [r7, #16]
 8007fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	685a      	ldr	r2, [r3, #4]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	697a      	ldr	r2, [r7, #20]
 8007fb6:	621a      	str	r2, [r3, #32]
}
 8007fb8:	bf00      	nop
 8007fba:	371c      	adds	r7, #28
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr
 8007fc4:	40010000 	.word	0x40010000

08007fc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b087      	sub	sp, #28
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6a1b      	ldr	r3, [r3, #32]
 8007fd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a1b      	ldr	r3, [r3, #32]
 8007fe2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	69db      	ldr	r3, [r3, #28]
 8007fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ffe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	021b      	lsls	r3, r3, #8
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	4313      	orrs	r3, r2
 800800a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008012:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	031b      	lsls	r3, r3, #12
 800801a:	693a      	ldr	r2, [r7, #16]
 800801c:	4313      	orrs	r3, r2
 800801e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	4a10      	ldr	r2, [pc, #64]	; (8008064 <TIM_OC4_SetConfig+0x9c>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d109      	bne.n	800803c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800802e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	695b      	ldr	r3, [r3, #20]
 8008034:	019b      	lsls	r3, r3, #6
 8008036:	697a      	ldr	r2, [r7, #20]
 8008038:	4313      	orrs	r3, r2
 800803a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	697a      	ldr	r2, [r7, #20]
 8008040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	68fa      	ldr	r2, [r7, #12]
 8008046:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	685a      	ldr	r2, [r3, #4]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	621a      	str	r2, [r3, #32]
}
 8008056:	bf00      	nop
 8008058:	371c      	adds	r7, #28
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	40010000 	.word	0x40010000

08008068 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008068:	b480      	push	{r7}
 800806a:	b087      	sub	sp, #28
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6a1b      	ldr	r3, [r3, #32]
 8008078:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6a1b      	ldr	r3, [r3, #32]
 800807e:	f023 0201 	bic.w	r2, r3, #1
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	699b      	ldr	r3, [r3, #24]
 800808a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	011b      	lsls	r3, r3, #4
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	4313      	orrs	r3, r2
 800809c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	f023 030a 	bic.w	r3, r3, #10
 80080a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080a6:	697a      	ldr	r2, [r7, #20]
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	693a      	ldr	r2, [r7, #16]
 80080b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	697a      	ldr	r2, [r7, #20]
 80080b8:	621a      	str	r2, [r3, #32]
}
 80080ba:	bf00      	nop
 80080bc:	371c      	adds	r7, #28
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr

080080c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080c6:	b480      	push	{r7}
 80080c8:	b087      	sub	sp, #28
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	60f8      	str	r0, [r7, #12]
 80080ce:	60b9      	str	r1, [r7, #8]
 80080d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6a1b      	ldr	r3, [r3, #32]
 80080d6:	f023 0210 	bic.w	r2, r3, #16
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	699b      	ldr	r3, [r3, #24]
 80080e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6a1b      	ldr	r3, [r3, #32]
 80080e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	031b      	lsls	r3, r3, #12
 80080f6:	697a      	ldr	r2, [r7, #20]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008102:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	011b      	lsls	r3, r3, #4
 8008108:	693a      	ldr	r2, [r7, #16]
 800810a:	4313      	orrs	r3, r2
 800810c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	697a      	ldr	r2, [r7, #20]
 8008112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	693a      	ldr	r2, [r7, #16]
 8008118:	621a      	str	r2, [r3, #32]
}
 800811a:	bf00      	nop
 800811c:	371c      	adds	r7, #28
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr

08008126 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008126:	b480      	push	{r7}
 8008128:	b085      	sub	sp, #20
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
 800812e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800813c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800813e:	683a      	ldr	r2, [r7, #0]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	4313      	orrs	r3, r2
 8008144:	f043 0307 	orr.w	r3, r3, #7
 8008148:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	68fa      	ldr	r2, [r7, #12]
 800814e:	609a      	str	r2, [r3, #8]
}
 8008150:	bf00      	nop
 8008152:	3714      	adds	r7, #20
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800815c:	b480      	push	{r7}
 800815e:	b087      	sub	sp, #28
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	607a      	str	r2, [r7, #4]
 8008168:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008176:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	021a      	lsls	r2, r3, #8
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	431a      	orrs	r2, r3
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	4313      	orrs	r3, r2
 8008184:	697a      	ldr	r2, [r7, #20]
 8008186:	4313      	orrs	r3, r2
 8008188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	697a      	ldr	r2, [r7, #20]
 800818e:	609a      	str	r2, [r3, #8]
}
 8008190:	bf00      	nop
 8008192:	371c      	adds	r7, #28
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800819c:	b480      	push	{r7}
 800819e:	b087      	sub	sp, #28
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	f003 031f 	and.w	r3, r3, #31
 80081ae:	2201      	movs	r2, #1
 80081b0:	fa02 f303 	lsl.w	r3, r2, r3
 80081b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	6a1a      	ldr	r2, [r3, #32]
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	43db      	mvns	r3, r3
 80081be:	401a      	ands	r2, r3
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6a1a      	ldr	r2, [r3, #32]
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	f003 031f 	and.w	r3, r3, #31
 80081ce:	6879      	ldr	r1, [r7, #4]
 80081d0:	fa01 f303 	lsl.w	r3, r1, r3
 80081d4:	431a      	orrs	r2, r3
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	621a      	str	r2, [r3, #32]
}
 80081da:	bf00      	nop
 80081dc:	371c      	adds	r7, #28
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr
	...

080081e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d101      	bne.n	8008200 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081fc:	2302      	movs	r3, #2
 80081fe:	e050      	b.n	80082a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2202      	movs	r2, #2
 800820c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008226:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68fa      	ldr	r2, [r7, #12]
 800822e:	4313      	orrs	r3, r2
 8008230:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a1c      	ldr	r2, [pc, #112]	; (80082b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d018      	beq.n	8008276 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800824c:	d013      	beq.n	8008276 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a18      	ldr	r2, [pc, #96]	; (80082b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d00e      	beq.n	8008276 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a16      	ldr	r2, [pc, #88]	; (80082b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d009      	beq.n	8008276 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a15      	ldr	r2, [pc, #84]	; (80082bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d004      	beq.n	8008276 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a13      	ldr	r2, [pc, #76]	; (80082c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d10c      	bne.n	8008290 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800827c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	68ba      	ldr	r2, [r7, #8]
 8008284:	4313      	orrs	r3, r2
 8008286:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3714      	adds	r7, #20
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	40010000 	.word	0x40010000
 80082b4:	40000400 	.word	0x40000400
 80082b8:	40000800 	.word	0x40000800
 80082bc:	40000c00 	.word	0x40000c00
 80082c0:	40014000 	.word	0x40014000

080082c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082cc:	bf00      	nop
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <arm_sin_f32>:
 80082ec:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8008368 <arm_sin_f32+0x7c>
 80082f0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80082f4:	ee20 7a07 	vmul.f32	s14, s0, s14
 80082f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082fc:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8008300:	d42c      	bmi.n	800835c <arm_sin_f32+0x70>
 8008302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008306:	eddf 6a19 	vldr	s13, [pc, #100]	; 800836c <arm_sin_f32+0x80>
 800830a:	4a19      	ldr	r2, [pc, #100]	; (8008370 <arm_sin_f32+0x84>)
 800830c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008310:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008314:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008318:	eef4 7ae6 	vcmpe.f32	s15, s13
 800831c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008320:	bfa8      	it	ge
 8008322:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 8008326:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800832a:	ee17 3a10 	vmov	r3, s14
 800832e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008332:	ee07 3a10 	vmov	s14, r3
 8008336:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800833a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800833e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008342:	edd1 6a01 	vldr	s13, [r1, #4]
 8008346:	ee30 7a67 	vsub.f32	s14, s0, s15
 800834a:	ed91 0a00 	vldr	s0, [r1]
 800834e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008352:	ee27 0a00 	vmul.f32	s0, s14, s0
 8008356:	ee30 0a27 	vadd.f32	s0, s0, s15
 800835a:	4770      	bx	lr
 800835c:	ee17 3a90 	vmov	r3, s15
 8008360:	3b01      	subs	r3, #1
 8008362:	ee07 3a90 	vmov	s15, r3
 8008366:	e7cc      	b.n	8008302 <arm_sin_f32+0x16>
 8008368:	3e22f983 	.word	0x3e22f983
 800836c:	44000000 	.word	0x44000000
 8008370:	0800a030 	.word	0x0800a030

08008374 <__errno>:
 8008374:	4b01      	ldr	r3, [pc, #4]	; (800837c <__errno+0x8>)
 8008376:	6818      	ldr	r0, [r3, #0]
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	200006f4 	.word	0x200006f4

08008380 <__libc_init_array>:
 8008380:	b570      	push	{r4, r5, r6, lr}
 8008382:	4d0d      	ldr	r5, [pc, #52]	; (80083b8 <__libc_init_array+0x38>)
 8008384:	4c0d      	ldr	r4, [pc, #52]	; (80083bc <__libc_init_array+0x3c>)
 8008386:	1b64      	subs	r4, r4, r5
 8008388:	10a4      	asrs	r4, r4, #2
 800838a:	2600      	movs	r6, #0
 800838c:	42a6      	cmp	r6, r4
 800838e:	d109      	bne.n	80083a4 <__libc_init_array+0x24>
 8008390:	4d0b      	ldr	r5, [pc, #44]	; (80083c0 <__libc_init_array+0x40>)
 8008392:	4c0c      	ldr	r4, [pc, #48]	; (80083c4 <__libc_init_array+0x44>)
 8008394:	f000 ffae 	bl	80092f4 <_init>
 8008398:	1b64      	subs	r4, r4, r5
 800839a:	10a4      	asrs	r4, r4, #2
 800839c:	2600      	movs	r6, #0
 800839e:	42a6      	cmp	r6, r4
 80083a0:	d105      	bne.n	80083ae <__libc_init_array+0x2e>
 80083a2:	bd70      	pop	{r4, r5, r6, pc}
 80083a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80083a8:	4798      	blx	r3
 80083aa:	3601      	adds	r6, #1
 80083ac:	e7ee      	b.n	800838c <__libc_init_array+0xc>
 80083ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80083b2:	4798      	blx	r3
 80083b4:	3601      	adds	r6, #1
 80083b6:	e7f2      	b.n	800839e <__libc_init_array+0x1e>
 80083b8:	0800a8d4 	.word	0x0800a8d4
 80083bc:	0800a8d4 	.word	0x0800a8d4
 80083c0:	0800a8d4 	.word	0x0800a8d4
 80083c4:	0800a8d8 	.word	0x0800a8d8

080083c8 <memset>:
 80083c8:	4402      	add	r2, r0
 80083ca:	4603      	mov	r3, r0
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d100      	bne.n	80083d2 <memset+0xa>
 80083d0:	4770      	bx	lr
 80083d2:	f803 1b01 	strb.w	r1, [r3], #1
 80083d6:	e7f9      	b.n	80083cc <memset+0x4>

080083d8 <iprintf>:
 80083d8:	b40f      	push	{r0, r1, r2, r3}
 80083da:	4b0a      	ldr	r3, [pc, #40]	; (8008404 <iprintf+0x2c>)
 80083dc:	b513      	push	{r0, r1, r4, lr}
 80083de:	681c      	ldr	r4, [r3, #0]
 80083e0:	b124      	cbz	r4, 80083ec <iprintf+0x14>
 80083e2:	69a3      	ldr	r3, [r4, #24]
 80083e4:	b913      	cbnz	r3, 80083ec <iprintf+0x14>
 80083e6:	4620      	mov	r0, r4
 80083e8:	f000 f866 	bl	80084b8 <__sinit>
 80083ec:	ab05      	add	r3, sp, #20
 80083ee:	9a04      	ldr	r2, [sp, #16]
 80083f0:	68a1      	ldr	r1, [r4, #8]
 80083f2:	9301      	str	r3, [sp, #4]
 80083f4:	4620      	mov	r0, r4
 80083f6:	f000 f9bd 	bl	8008774 <_vfiprintf_r>
 80083fa:	b002      	add	sp, #8
 80083fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008400:	b004      	add	sp, #16
 8008402:	4770      	bx	lr
 8008404:	200006f4 	.word	0x200006f4

08008408 <std>:
 8008408:	2300      	movs	r3, #0
 800840a:	b510      	push	{r4, lr}
 800840c:	4604      	mov	r4, r0
 800840e:	e9c0 3300 	strd	r3, r3, [r0]
 8008412:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008416:	6083      	str	r3, [r0, #8]
 8008418:	8181      	strh	r1, [r0, #12]
 800841a:	6643      	str	r3, [r0, #100]	; 0x64
 800841c:	81c2      	strh	r2, [r0, #14]
 800841e:	6183      	str	r3, [r0, #24]
 8008420:	4619      	mov	r1, r3
 8008422:	2208      	movs	r2, #8
 8008424:	305c      	adds	r0, #92	; 0x5c
 8008426:	f7ff ffcf 	bl	80083c8 <memset>
 800842a:	4b05      	ldr	r3, [pc, #20]	; (8008440 <std+0x38>)
 800842c:	6263      	str	r3, [r4, #36]	; 0x24
 800842e:	4b05      	ldr	r3, [pc, #20]	; (8008444 <std+0x3c>)
 8008430:	62a3      	str	r3, [r4, #40]	; 0x28
 8008432:	4b05      	ldr	r3, [pc, #20]	; (8008448 <std+0x40>)
 8008434:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008436:	4b05      	ldr	r3, [pc, #20]	; (800844c <std+0x44>)
 8008438:	6224      	str	r4, [r4, #32]
 800843a:	6323      	str	r3, [r4, #48]	; 0x30
 800843c:	bd10      	pop	{r4, pc}
 800843e:	bf00      	nop
 8008440:	08008d1d 	.word	0x08008d1d
 8008444:	08008d3f 	.word	0x08008d3f
 8008448:	08008d77 	.word	0x08008d77
 800844c:	08008d9b 	.word	0x08008d9b

08008450 <_cleanup_r>:
 8008450:	4901      	ldr	r1, [pc, #4]	; (8008458 <_cleanup_r+0x8>)
 8008452:	f000 b8af 	b.w	80085b4 <_fwalk_reent>
 8008456:	bf00      	nop
 8008458:	08009075 	.word	0x08009075

0800845c <__sfmoreglue>:
 800845c:	b570      	push	{r4, r5, r6, lr}
 800845e:	2268      	movs	r2, #104	; 0x68
 8008460:	1e4d      	subs	r5, r1, #1
 8008462:	4355      	muls	r5, r2
 8008464:	460e      	mov	r6, r1
 8008466:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800846a:	f000 f8e5 	bl	8008638 <_malloc_r>
 800846e:	4604      	mov	r4, r0
 8008470:	b140      	cbz	r0, 8008484 <__sfmoreglue+0x28>
 8008472:	2100      	movs	r1, #0
 8008474:	e9c0 1600 	strd	r1, r6, [r0]
 8008478:	300c      	adds	r0, #12
 800847a:	60a0      	str	r0, [r4, #8]
 800847c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008480:	f7ff ffa2 	bl	80083c8 <memset>
 8008484:	4620      	mov	r0, r4
 8008486:	bd70      	pop	{r4, r5, r6, pc}

08008488 <__sfp_lock_acquire>:
 8008488:	4801      	ldr	r0, [pc, #4]	; (8008490 <__sfp_lock_acquire+0x8>)
 800848a:	f000 b8b3 	b.w	80085f4 <__retarget_lock_acquire_recursive>
 800848e:	bf00      	nop
 8008490:	20002c35 	.word	0x20002c35

08008494 <__sfp_lock_release>:
 8008494:	4801      	ldr	r0, [pc, #4]	; (800849c <__sfp_lock_release+0x8>)
 8008496:	f000 b8ae 	b.w	80085f6 <__retarget_lock_release_recursive>
 800849a:	bf00      	nop
 800849c:	20002c35 	.word	0x20002c35

080084a0 <__sinit_lock_acquire>:
 80084a0:	4801      	ldr	r0, [pc, #4]	; (80084a8 <__sinit_lock_acquire+0x8>)
 80084a2:	f000 b8a7 	b.w	80085f4 <__retarget_lock_acquire_recursive>
 80084a6:	bf00      	nop
 80084a8:	20002c36 	.word	0x20002c36

080084ac <__sinit_lock_release>:
 80084ac:	4801      	ldr	r0, [pc, #4]	; (80084b4 <__sinit_lock_release+0x8>)
 80084ae:	f000 b8a2 	b.w	80085f6 <__retarget_lock_release_recursive>
 80084b2:	bf00      	nop
 80084b4:	20002c36 	.word	0x20002c36

080084b8 <__sinit>:
 80084b8:	b510      	push	{r4, lr}
 80084ba:	4604      	mov	r4, r0
 80084bc:	f7ff fff0 	bl	80084a0 <__sinit_lock_acquire>
 80084c0:	69a3      	ldr	r3, [r4, #24]
 80084c2:	b11b      	cbz	r3, 80084cc <__sinit+0x14>
 80084c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084c8:	f7ff bff0 	b.w	80084ac <__sinit_lock_release>
 80084cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80084d0:	6523      	str	r3, [r4, #80]	; 0x50
 80084d2:	4b13      	ldr	r3, [pc, #76]	; (8008520 <__sinit+0x68>)
 80084d4:	4a13      	ldr	r2, [pc, #76]	; (8008524 <__sinit+0x6c>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80084da:	42a3      	cmp	r3, r4
 80084dc:	bf04      	itt	eq
 80084de:	2301      	moveq	r3, #1
 80084e0:	61a3      	streq	r3, [r4, #24]
 80084e2:	4620      	mov	r0, r4
 80084e4:	f000 f820 	bl	8008528 <__sfp>
 80084e8:	6060      	str	r0, [r4, #4]
 80084ea:	4620      	mov	r0, r4
 80084ec:	f000 f81c 	bl	8008528 <__sfp>
 80084f0:	60a0      	str	r0, [r4, #8]
 80084f2:	4620      	mov	r0, r4
 80084f4:	f000 f818 	bl	8008528 <__sfp>
 80084f8:	2200      	movs	r2, #0
 80084fa:	60e0      	str	r0, [r4, #12]
 80084fc:	2104      	movs	r1, #4
 80084fe:	6860      	ldr	r0, [r4, #4]
 8008500:	f7ff ff82 	bl	8008408 <std>
 8008504:	68a0      	ldr	r0, [r4, #8]
 8008506:	2201      	movs	r2, #1
 8008508:	2109      	movs	r1, #9
 800850a:	f7ff ff7d 	bl	8008408 <std>
 800850e:	68e0      	ldr	r0, [r4, #12]
 8008510:	2202      	movs	r2, #2
 8008512:	2112      	movs	r1, #18
 8008514:	f7ff ff78 	bl	8008408 <std>
 8008518:	2301      	movs	r3, #1
 800851a:	61a3      	str	r3, [r4, #24]
 800851c:	e7d2      	b.n	80084c4 <__sinit+0xc>
 800851e:	bf00      	nop
 8008520:	0800a834 	.word	0x0800a834
 8008524:	08008451 	.word	0x08008451

08008528 <__sfp>:
 8008528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800852a:	4607      	mov	r7, r0
 800852c:	f7ff ffac 	bl	8008488 <__sfp_lock_acquire>
 8008530:	4b1e      	ldr	r3, [pc, #120]	; (80085ac <__sfp+0x84>)
 8008532:	681e      	ldr	r6, [r3, #0]
 8008534:	69b3      	ldr	r3, [r6, #24]
 8008536:	b913      	cbnz	r3, 800853e <__sfp+0x16>
 8008538:	4630      	mov	r0, r6
 800853a:	f7ff ffbd 	bl	80084b8 <__sinit>
 800853e:	3648      	adds	r6, #72	; 0x48
 8008540:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008544:	3b01      	subs	r3, #1
 8008546:	d503      	bpl.n	8008550 <__sfp+0x28>
 8008548:	6833      	ldr	r3, [r6, #0]
 800854a:	b30b      	cbz	r3, 8008590 <__sfp+0x68>
 800854c:	6836      	ldr	r6, [r6, #0]
 800854e:	e7f7      	b.n	8008540 <__sfp+0x18>
 8008550:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008554:	b9d5      	cbnz	r5, 800858c <__sfp+0x64>
 8008556:	4b16      	ldr	r3, [pc, #88]	; (80085b0 <__sfp+0x88>)
 8008558:	60e3      	str	r3, [r4, #12]
 800855a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800855e:	6665      	str	r5, [r4, #100]	; 0x64
 8008560:	f000 f847 	bl	80085f2 <__retarget_lock_init_recursive>
 8008564:	f7ff ff96 	bl	8008494 <__sfp_lock_release>
 8008568:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800856c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008570:	6025      	str	r5, [r4, #0]
 8008572:	61a5      	str	r5, [r4, #24]
 8008574:	2208      	movs	r2, #8
 8008576:	4629      	mov	r1, r5
 8008578:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800857c:	f7ff ff24 	bl	80083c8 <memset>
 8008580:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008584:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008588:	4620      	mov	r0, r4
 800858a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800858c:	3468      	adds	r4, #104	; 0x68
 800858e:	e7d9      	b.n	8008544 <__sfp+0x1c>
 8008590:	2104      	movs	r1, #4
 8008592:	4638      	mov	r0, r7
 8008594:	f7ff ff62 	bl	800845c <__sfmoreglue>
 8008598:	4604      	mov	r4, r0
 800859a:	6030      	str	r0, [r6, #0]
 800859c:	2800      	cmp	r0, #0
 800859e:	d1d5      	bne.n	800854c <__sfp+0x24>
 80085a0:	f7ff ff78 	bl	8008494 <__sfp_lock_release>
 80085a4:	230c      	movs	r3, #12
 80085a6:	603b      	str	r3, [r7, #0]
 80085a8:	e7ee      	b.n	8008588 <__sfp+0x60>
 80085aa:	bf00      	nop
 80085ac:	0800a834 	.word	0x0800a834
 80085b0:	ffff0001 	.word	0xffff0001

080085b4 <_fwalk_reent>:
 80085b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085b8:	4606      	mov	r6, r0
 80085ba:	4688      	mov	r8, r1
 80085bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80085c0:	2700      	movs	r7, #0
 80085c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085c6:	f1b9 0901 	subs.w	r9, r9, #1
 80085ca:	d505      	bpl.n	80085d8 <_fwalk_reent+0x24>
 80085cc:	6824      	ldr	r4, [r4, #0]
 80085ce:	2c00      	cmp	r4, #0
 80085d0:	d1f7      	bne.n	80085c2 <_fwalk_reent+0xe>
 80085d2:	4638      	mov	r0, r7
 80085d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085d8:	89ab      	ldrh	r3, [r5, #12]
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d907      	bls.n	80085ee <_fwalk_reent+0x3a>
 80085de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085e2:	3301      	adds	r3, #1
 80085e4:	d003      	beq.n	80085ee <_fwalk_reent+0x3a>
 80085e6:	4629      	mov	r1, r5
 80085e8:	4630      	mov	r0, r6
 80085ea:	47c0      	blx	r8
 80085ec:	4307      	orrs	r7, r0
 80085ee:	3568      	adds	r5, #104	; 0x68
 80085f0:	e7e9      	b.n	80085c6 <_fwalk_reent+0x12>

080085f2 <__retarget_lock_init_recursive>:
 80085f2:	4770      	bx	lr

080085f4 <__retarget_lock_acquire_recursive>:
 80085f4:	4770      	bx	lr

080085f6 <__retarget_lock_release_recursive>:
 80085f6:	4770      	bx	lr

080085f8 <sbrk_aligned>:
 80085f8:	b570      	push	{r4, r5, r6, lr}
 80085fa:	4e0e      	ldr	r6, [pc, #56]	; (8008634 <sbrk_aligned+0x3c>)
 80085fc:	460c      	mov	r4, r1
 80085fe:	6831      	ldr	r1, [r6, #0]
 8008600:	4605      	mov	r5, r0
 8008602:	b911      	cbnz	r1, 800860a <sbrk_aligned+0x12>
 8008604:	f000 fb7a 	bl	8008cfc <_sbrk_r>
 8008608:	6030      	str	r0, [r6, #0]
 800860a:	4621      	mov	r1, r4
 800860c:	4628      	mov	r0, r5
 800860e:	f000 fb75 	bl	8008cfc <_sbrk_r>
 8008612:	1c43      	adds	r3, r0, #1
 8008614:	d00a      	beq.n	800862c <sbrk_aligned+0x34>
 8008616:	1cc4      	adds	r4, r0, #3
 8008618:	f024 0403 	bic.w	r4, r4, #3
 800861c:	42a0      	cmp	r0, r4
 800861e:	d007      	beq.n	8008630 <sbrk_aligned+0x38>
 8008620:	1a21      	subs	r1, r4, r0
 8008622:	4628      	mov	r0, r5
 8008624:	f000 fb6a 	bl	8008cfc <_sbrk_r>
 8008628:	3001      	adds	r0, #1
 800862a:	d101      	bne.n	8008630 <sbrk_aligned+0x38>
 800862c:	f04f 34ff 	mov.w	r4, #4294967295
 8008630:	4620      	mov	r0, r4
 8008632:	bd70      	pop	{r4, r5, r6, pc}
 8008634:	20002c3c 	.word	0x20002c3c

08008638 <_malloc_r>:
 8008638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800863c:	1ccd      	adds	r5, r1, #3
 800863e:	f025 0503 	bic.w	r5, r5, #3
 8008642:	3508      	adds	r5, #8
 8008644:	2d0c      	cmp	r5, #12
 8008646:	bf38      	it	cc
 8008648:	250c      	movcc	r5, #12
 800864a:	2d00      	cmp	r5, #0
 800864c:	4607      	mov	r7, r0
 800864e:	db01      	blt.n	8008654 <_malloc_r+0x1c>
 8008650:	42a9      	cmp	r1, r5
 8008652:	d905      	bls.n	8008660 <_malloc_r+0x28>
 8008654:	230c      	movs	r3, #12
 8008656:	603b      	str	r3, [r7, #0]
 8008658:	2600      	movs	r6, #0
 800865a:	4630      	mov	r0, r6
 800865c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008660:	4e2e      	ldr	r6, [pc, #184]	; (800871c <_malloc_r+0xe4>)
 8008662:	f000 fdbb 	bl	80091dc <__malloc_lock>
 8008666:	6833      	ldr	r3, [r6, #0]
 8008668:	461c      	mov	r4, r3
 800866a:	bb34      	cbnz	r4, 80086ba <_malloc_r+0x82>
 800866c:	4629      	mov	r1, r5
 800866e:	4638      	mov	r0, r7
 8008670:	f7ff ffc2 	bl	80085f8 <sbrk_aligned>
 8008674:	1c43      	adds	r3, r0, #1
 8008676:	4604      	mov	r4, r0
 8008678:	d14d      	bne.n	8008716 <_malloc_r+0xde>
 800867a:	6834      	ldr	r4, [r6, #0]
 800867c:	4626      	mov	r6, r4
 800867e:	2e00      	cmp	r6, #0
 8008680:	d140      	bne.n	8008704 <_malloc_r+0xcc>
 8008682:	6823      	ldr	r3, [r4, #0]
 8008684:	4631      	mov	r1, r6
 8008686:	4638      	mov	r0, r7
 8008688:	eb04 0803 	add.w	r8, r4, r3
 800868c:	f000 fb36 	bl	8008cfc <_sbrk_r>
 8008690:	4580      	cmp	r8, r0
 8008692:	d13a      	bne.n	800870a <_malloc_r+0xd2>
 8008694:	6821      	ldr	r1, [r4, #0]
 8008696:	3503      	adds	r5, #3
 8008698:	1a6d      	subs	r5, r5, r1
 800869a:	f025 0503 	bic.w	r5, r5, #3
 800869e:	3508      	adds	r5, #8
 80086a0:	2d0c      	cmp	r5, #12
 80086a2:	bf38      	it	cc
 80086a4:	250c      	movcc	r5, #12
 80086a6:	4629      	mov	r1, r5
 80086a8:	4638      	mov	r0, r7
 80086aa:	f7ff ffa5 	bl	80085f8 <sbrk_aligned>
 80086ae:	3001      	adds	r0, #1
 80086b0:	d02b      	beq.n	800870a <_malloc_r+0xd2>
 80086b2:	6823      	ldr	r3, [r4, #0]
 80086b4:	442b      	add	r3, r5
 80086b6:	6023      	str	r3, [r4, #0]
 80086b8:	e00e      	b.n	80086d8 <_malloc_r+0xa0>
 80086ba:	6822      	ldr	r2, [r4, #0]
 80086bc:	1b52      	subs	r2, r2, r5
 80086be:	d41e      	bmi.n	80086fe <_malloc_r+0xc6>
 80086c0:	2a0b      	cmp	r2, #11
 80086c2:	d916      	bls.n	80086f2 <_malloc_r+0xba>
 80086c4:	1961      	adds	r1, r4, r5
 80086c6:	42a3      	cmp	r3, r4
 80086c8:	6025      	str	r5, [r4, #0]
 80086ca:	bf18      	it	ne
 80086cc:	6059      	strne	r1, [r3, #4]
 80086ce:	6863      	ldr	r3, [r4, #4]
 80086d0:	bf08      	it	eq
 80086d2:	6031      	streq	r1, [r6, #0]
 80086d4:	5162      	str	r2, [r4, r5]
 80086d6:	604b      	str	r3, [r1, #4]
 80086d8:	4638      	mov	r0, r7
 80086da:	f104 060b 	add.w	r6, r4, #11
 80086de:	f000 fd83 	bl	80091e8 <__malloc_unlock>
 80086e2:	f026 0607 	bic.w	r6, r6, #7
 80086e6:	1d23      	adds	r3, r4, #4
 80086e8:	1af2      	subs	r2, r6, r3
 80086ea:	d0b6      	beq.n	800865a <_malloc_r+0x22>
 80086ec:	1b9b      	subs	r3, r3, r6
 80086ee:	50a3      	str	r3, [r4, r2]
 80086f0:	e7b3      	b.n	800865a <_malloc_r+0x22>
 80086f2:	6862      	ldr	r2, [r4, #4]
 80086f4:	42a3      	cmp	r3, r4
 80086f6:	bf0c      	ite	eq
 80086f8:	6032      	streq	r2, [r6, #0]
 80086fa:	605a      	strne	r2, [r3, #4]
 80086fc:	e7ec      	b.n	80086d8 <_malloc_r+0xa0>
 80086fe:	4623      	mov	r3, r4
 8008700:	6864      	ldr	r4, [r4, #4]
 8008702:	e7b2      	b.n	800866a <_malloc_r+0x32>
 8008704:	4634      	mov	r4, r6
 8008706:	6876      	ldr	r6, [r6, #4]
 8008708:	e7b9      	b.n	800867e <_malloc_r+0x46>
 800870a:	230c      	movs	r3, #12
 800870c:	603b      	str	r3, [r7, #0]
 800870e:	4638      	mov	r0, r7
 8008710:	f000 fd6a 	bl	80091e8 <__malloc_unlock>
 8008714:	e7a1      	b.n	800865a <_malloc_r+0x22>
 8008716:	6025      	str	r5, [r4, #0]
 8008718:	e7de      	b.n	80086d8 <_malloc_r+0xa0>
 800871a:	bf00      	nop
 800871c:	20002c38 	.word	0x20002c38

08008720 <__sfputc_r>:
 8008720:	6893      	ldr	r3, [r2, #8]
 8008722:	3b01      	subs	r3, #1
 8008724:	2b00      	cmp	r3, #0
 8008726:	b410      	push	{r4}
 8008728:	6093      	str	r3, [r2, #8]
 800872a:	da08      	bge.n	800873e <__sfputc_r+0x1e>
 800872c:	6994      	ldr	r4, [r2, #24]
 800872e:	42a3      	cmp	r3, r4
 8008730:	db01      	blt.n	8008736 <__sfputc_r+0x16>
 8008732:	290a      	cmp	r1, #10
 8008734:	d103      	bne.n	800873e <__sfputc_r+0x1e>
 8008736:	f85d 4b04 	ldr.w	r4, [sp], #4
 800873a:	f000 bb33 	b.w	8008da4 <__swbuf_r>
 800873e:	6813      	ldr	r3, [r2, #0]
 8008740:	1c58      	adds	r0, r3, #1
 8008742:	6010      	str	r0, [r2, #0]
 8008744:	7019      	strb	r1, [r3, #0]
 8008746:	4608      	mov	r0, r1
 8008748:	f85d 4b04 	ldr.w	r4, [sp], #4
 800874c:	4770      	bx	lr

0800874e <__sfputs_r>:
 800874e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008750:	4606      	mov	r6, r0
 8008752:	460f      	mov	r7, r1
 8008754:	4614      	mov	r4, r2
 8008756:	18d5      	adds	r5, r2, r3
 8008758:	42ac      	cmp	r4, r5
 800875a:	d101      	bne.n	8008760 <__sfputs_r+0x12>
 800875c:	2000      	movs	r0, #0
 800875e:	e007      	b.n	8008770 <__sfputs_r+0x22>
 8008760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008764:	463a      	mov	r2, r7
 8008766:	4630      	mov	r0, r6
 8008768:	f7ff ffda 	bl	8008720 <__sfputc_r>
 800876c:	1c43      	adds	r3, r0, #1
 800876e:	d1f3      	bne.n	8008758 <__sfputs_r+0xa>
 8008770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008774 <_vfiprintf_r>:
 8008774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008778:	460d      	mov	r5, r1
 800877a:	b09d      	sub	sp, #116	; 0x74
 800877c:	4614      	mov	r4, r2
 800877e:	4698      	mov	r8, r3
 8008780:	4606      	mov	r6, r0
 8008782:	b118      	cbz	r0, 800878c <_vfiprintf_r+0x18>
 8008784:	6983      	ldr	r3, [r0, #24]
 8008786:	b90b      	cbnz	r3, 800878c <_vfiprintf_r+0x18>
 8008788:	f7ff fe96 	bl	80084b8 <__sinit>
 800878c:	4b89      	ldr	r3, [pc, #548]	; (80089b4 <_vfiprintf_r+0x240>)
 800878e:	429d      	cmp	r5, r3
 8008790:	d11b      	bne.n	80087ca <_vfiprintf_r+0x56>
 8008792:	6875      	ldr	r5, [r6, #4]
 8008794:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008796:	07d9      	lsls	r1, r3, #31
 8008798:	d405      	bmi.n	80087a6 <_vfiprintf_r+0x32>
 800879a:	89ab      	ldrh	r3, [r5, #12]
 800879c:	059a      	lsls	r2, r3, #22
 800879e:	d402      	bmi.n	80087a6 <_vfiprintf_r+0x32>
 80087a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087a2:	f7ff ff27 	bl	80085f4 <__retarget_lock_acquire_recursive>
 80087a6:	89ab      	ldrh	r3, [r5, #12]
 80087a8:	071b      	lsls	r3, r3, #28
 80087aa:	d501      	bpl.n	80087b0 <_vfiprintf_r+0x3c>
 80087ac:	692b      	ldr	r3, [r5, #16]
 80087ae:	b9eb      	cbnz	r3, 80087ec <_vfiprintf_r+0x78>
 80087b0:	4629      	mov	r1, r5
 80087b2:	4630      	mov	r0, r6
 80087b4:	f000 fb5a 	bl	8008e6c <__swsetup_r>
 80087b8:	b1c0      	cbz	r0, 80087ec <_vfiprintf_r+0x78>
 80087ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087bc:	07dc      	lsls	r4, r3, #31
 80087be:	d50e      	bpl.n	80087de <_vfiprintf_r+0x6a>
 80087c0:	f04f 30ff 	mov.w	r0, #4294967295
 80087c4:	b01d      	add	sp, #116	; 0x74
 80087c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ca:	4b7b      	ldr	r3, [pc, #492]	; (80089b8 <_vfiprintf_r+0x244>)
 80087cc:	429d      	cmp	r5, r3
 80087ce:	d101      	bne.n	80087d4 <_vfiprintf_r+0x60>
 80087d0:	68b5      	ldr	r5, [r6, #8]
 80087d2:	e7df      	b.n	8008794 <_vfiprintf_r+0x20>
 80087d4:	4b79      	ldr	r3, [pc, #484]	; (80089bc <_vfiprintf_r+0x248>)
 80087d6:	429d      	cmp	r5, r3
 80087d8:	bf08      	it	eq
 80087da:	68f5      	ldreq	r5, [r6, #12]
 80087dc:	e7da      	b.n	8008794 <_vfiprintf_r+0x20>
 80087de:	89ab      	ldrh	r3, [r5, #12]
 80087e0:	0598      	lsls	r0, r3, #22
 80087e2:	d4ed      	bmi.n	80087c0 <_vfiprintf_r+0x4c>
 80087e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087e6:	f7ff ff06 	bl	80085f6 <__retarget_lock_release_recursive>
 80087ea:	e7e9      	b.n	80087c0 <_vfiprintf_r+0x4c>
 80087ec:	2300      	movs	r3, #0
 80087ee:	9309      	str	r3, [sp, #36]	; 0x24
 80087f0:	2320      	movs	r3, #32
 80087f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80087fa:	2330      	movs	r3, #48	; 0x30
 80087fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80089c0 <_vfiprintf_r+0x24c>
 8008800:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008804:	f04f 0901 	mov.w	r9, #1
 8008808:	4623      	mov	r3, r4
 800880a:	469a      	mov	sl, r3
 800880c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008810:	b10a      	cbz	r2, 8008816 <_vfiprintf_r+0xa2>
 8008812:	2a25      	cmp	r2, #37	; 0x25
 8008814:	d1f9      	bne.n	800880a <_vfiprintf_r+0x96>
 8008816:	ebba 0b04 	subs.w	fp, sl, r4
 800881a:	d00b      	beq.n	8008834 <_vfiprintf_r+0xc0>
 800881c:	465b      	mov	r3, fp
 800881e:	4622      	mov	r2, r4
 8008820:	4629      	mov	r1, r5
 8008822:	4630      	mov	r0, r6
 8008824:	f7ff ff93 	bl	800874e <__sfputs_r>
 8008828:	3001      	adds	r0, #1
 800882a:	f000 80aa 	beq.w	8008982 <_vfiprintf_r+0x20e>
 800882e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008830:	445a      	add	r2, fp
 8008832:	9209      	str	r2, [sp, #36]	; 0x24
 8008834:	f89a 3000 	ldrb.w	r3, [sl]
 8008838:	2b00      	cmp	r3, #0
 800883a:	f000 80a2 	beq.w	8008982 <_vfiprintf_r+0x20e>
 800883e:	2300      	movs	r3, #0
 8008840:	f04f 32ff 	mov.w	r2, #4294967295
 8008844:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008848:	f10a 0a01 	add.w	sl, sl, #1
 800884c:	9304      	str	r3, [sp, #16]
 800884e:	9307      	str	r3, [sp, #28]
 8008850:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008854:	931a      	str	r3, [sp, #104]	; 0x68
 8008856:	4654      	mov	r4, sl
 8008858:	2205      	movs	r2, #5
 800885a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800885e:	4858      	ldr	r0, [pc, #352]	; (80089c0 <_vfiprintf_r+0x24c>)
 8008860:	f7f7 fcbe 	bl	80001e0 <memchr>
 8008864:	9a04      	ldr	r2, [sp, #16]
 8008866:	b9d8      	cbnz	r0, 80088a0 <_vfiprintf_r+0x12c>
 8008868:	06d1      	lsls	r1, r2, #27
 800886a:	bf44      	itt	mi
 800886c:	2320      	movmi	r3, #32
 800886e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008872:	0713      	lsls	r3, r2, #28
 8008874:	bf44      	itt	mi
 8008876:	232b      	movmi	r3, #43	; 0x2b
 8008878:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800887c:	f89a 3000 	ldrb.w	r3, [sl]
 8008880:	2b2a      	cmp	r3, #42	; 0x2a
 8008882:	d015      	beq.n	80088b0 <_vfiprintf_r+0x13c>
 8008884:	9a07      	ldr	r2, [sp, #28]
 8008886:	4654      	mov	r4, sl
 8008888:	2000      	movs	r0, #0
 800888a:	f04f 0c0a 	mov.w	ip, #10
 800888e:	4621      	mov	r1, r4
 8008890:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008894:	3b30      	subs	r3, #48	; 0x30
 8008896:	2b09      	cmp	r3, #9
 8008898:	d94e      	bls.n	8008938 <_vfiprintf_r+0x1c4>
 800889a:	b1b0      	cbz	r0, 80088ca <_vfiprintf_r+0x156>
 800889c:	9207      	str	r2, [sp, #28]
 800889e:	e014      	b.n	80088ca <_vfiprintf_r+0x156>
 80088a0:	eba0 0308 	sub.w	r3, r0, r8
 80088a4:	fa09 f303 	lsl.w	r3, r9, r3
 80088a8:	4313      	orrs	r3, r2
 80088aa:	9304      	str	r3, [sp, #16]
 80088ac:	46a2      	mov	sl, r4
 80088ae:	e7d2      	b.n	8008856 <_vfiprintf_r+0xe2>
 80088b0:	9b03      	ldr	r3, [sp, #12]
 80088b2:	1d19      	adds	r1, r3, #4
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	9103      	str	r1, [sp, #12]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	bfbb      	ittet	lt
 80088bc:	425b      	neglt	r3, r3
 80088be:	f042 0202 	orrlt.w	r2, r2, #2
 80088c2:	9307      	strge	r3, [sp, #28]
 80088c4:	9307      	strlt	r3, [sp, #28]
 80088c6:	bfb8      	it	lt
 80088c8:	9204      	strlt	r2, [sp, #16]
 80088ca:	7823      	ldrb	r3, [r4, #0]
 80088cc:	2b2e      	cmp	r3, #46	; 0x2e
 80088ce:	d10c      	bne.n	80088ea <_vfiprintf_r+0x176>
 80088d0:	7863      	ldrb	r3, [r4, #1]
 80088d2:	2b2a      	cmp	r3, #42	; 0x2a
 80088d4:	d135      	bne.n	8008942 <_vfiprintf_r+0x1ce>
 80088d6:	9b03      	ldr	r3, [sp, #12]
 80088d8:	1d1a      	adds	r2, r3, #4
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	9203      	str	r2, [sp, #12]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	bfb8      	it	lt
 80088e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80088e6:	3402      	adds	r4, #2
 80088e8:	9305      	str	r3, [sp, #20]
 80088ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80089d0 <_vfiprintf_r+0x25c>
 80088ee:	7821      	ldrb	r1, [r4, #0]
 80088f0:	2203      	movs	r2, #3
 80088f2:	4650      	mov	r0, sl
 80088f4:	f7f7 fc74 	bl	80001e0 <memchr>
 80088f8:	b140      	cbz	r0, 800890c <_vfiprintf_r+0x198>
 80088fa:	2340      	movs	r3, #64	; 0x40
 80088fc:	eba0 000a 	sub.w	r0, r0, sl
 8008900:	fa03 f000 	lsl.w	r0, r3, r0
 8008904:	9b04      	ldr	r3, [sp, #16]
 8008906:	4303      	orrs	r3, r0
 8008908:	3401      	adds	r4, #1
 800890a:	9304      	str	r3, [sp, #16]
 800890c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008910:	482c      	ldr	r0, [pc, #176]	; (80089c4 <_vfiprintf_r+0x250>)
 8008912:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008916:	2206      	movs	r2, #6
 8008918:	f7f7 fc62 	bl	80001e0 <memchr>
 800891c:	2800      	cmp	r0, #0
 800891e:	d03f      	beq.n	80089a0 <_vfiprintf_r+0x22c>
 8008920:	4b29      	ldr	r3, [pc, #164]	; (80089c8 <_vfiprintf_r+0x254>)
 8008922:	bb1b      	cbnz	r3, 800896c <_vfiprintf_r+0x1f8>
 8008924:	9b03      	ldr	r3, [sp, #12]
 8008926:	3307      	adds	r3, #7
 8008928:	f023 0307 	bic.w	r3, r3, #7
 800892c:	3308      	adds	r3, #8
 800892e:	9303      	str	r3, [sp, #12]
 8008930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008932:	443b      	add	r3, r7
 8008934:	9309      	str	r3, [sp, #36]	; 0x24
 8008936:	e767      	b.n	8008808 <_vfiprintf_r+0x94>
 8008938:	fb0c 3202 	mla	r2, ip, r2, r3
 800893c:	460c      	mov	r4, r1
 800893e:	2001      	movs	r0, #1
 8008940:	e7a5      	b.n	800888e <_vfiprintf_r+0x11a>
 8008942:	2300      	movs	r3, #0
 8008944:	3401      	adds	r4, #1
 8008946:	9305      	str	r3, [sp, #20]
 8008948:	4619      	mov	r1, r3
 800894a:	f04f 0c0a 	mov.w	ip, #10
 800894e:	4620      	mov	r0, r4
 8008950:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008954:	3a30      	subs	r2, #48	; 0x30
 8008956:	2a09      	cmp	r2, #9
 8008958:	d903      	bls.n	8008962 <_vfiprintf_r+0x1ee>
 800895a:	2b00      	cmp	r3, #0
 800895c:	d0c5      	beq.n	80088ea <_vfiprintf_r+0x176>
 800895e:	9105      	str	r1, [sp, #20]
 8008960:	e7c3      	b.n	80088ea <_vfiprintf_r+0x176>
 8008962:	fb0c 2101 	mla	r1, ip, r1, r2
 8008966:	4604      	mov	r4, r0
 8008968:	2301      	movs	r3, #1
 800896a:	e7f0      	b.n	800894e <_vfiprintf_r+0x1da>
 800896c:	ab03      	add	r3, sp, #12
 800896e:	9300      	str	r3, [sp, #0]
 8008970:	462a      	mov	r2, r5
 8008972:	4b16      	ldr	r3, [pc, #88]	; (80089cc <_vfiprintf_r+0x258>)
 8008974:	a904      	add	r1, sp, #16
 8008976:	4630      	mov	r0, r6
 8008978:	f3af 8000 	nop.w
 800897c:	4607      	mov	r7, r0
 800897e:	1c78      	adds	r0, r7, #1
 8008980:	d1d6      	bne.n	8008930 <_vfiprintf_r+0x1bc>
 8008982:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008984:	07d9      	lsls	r1, r3, #31
 8008986:	d405      	bmi.n	8008994 <_vfiprintf_r+0x220>
 8008988:	89ab      	ldrh	r3, [r5, #12]
 800898a:	059a      	lsls	r2, r3, #22
 800898c:	d402      	bmi.n	8008994 <_vfiprintf_r+0x220>
 800898e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008990:	f7ff fe31 	bl	80085f6 <__retarget_lock_release_recursive>
 8008994:	89ab      	ldrh	r3, [r5, #12]
 8008996:	065b      	lsls	r3, r3, #25
 8008998:	f53f af12 	bmi.w	80087c0 <_vfiprintf_r+0x4c>
 800899c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800899e:	e711      	b.n	80087c4 <_vfiprintf_r+0x50>
 80089a0:	ab03      	add	r3, sp, #12
 80089a2:	9300      	str	r3, [sp, #0]
 80089a4:	462a      	mov	r2, r5
 80089a6:	4b09      	ldr	r3, [pc, #36]	; (80089cc <_vfiprintf_r+0x258>)
 80089a8:	a904      	add	r1, sp, #16
 80089aa:	4630      	mov	r0, r6
 80089ac:	f000 f880 	bl	8008ab0 <_printf_i>
 80089b0:	e7e4      	b.n	800897c <_vfiprintf_r+0x208>
 80089b2:	bf00      	nop
 80089b4:	0800a858 	.word	0x0800a858
 80089b8:	0800a878 	.word	0x0800a878
 80089bc:	0800a838 	.word	0x0800a838
 80089c0:	0800a898 	.word	0x0800a898
 80089c4:	0800a8a2 	.word	0x0800a8a2
 80089c8:	00000000 	.word	0x00000000
 80089cc:	0800874f 	.word	0x0800874f
 80089d0:	0800a89e 	.word	0x0800a89e

080089d4 <_printf_common>:
 80089d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089d8:	4616      	mov	r6, r2
 80089da:	4699      	mov	r9, r3
 80089dc:	688a      	ldr	r2, [r1, #8]
 80089de:	690b      	ldr	r3, [r1, #16]
 80089e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089e4:	4293      	cmp	r3, r2
 80089e6:	bfb8      	it	lt
 80089e8:	4613      	movlt	r3, r2
 80089ea:	6033      	str	r3, [r6, #0]
 80089ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089f0:	4607      	mov	r7, r0
 80089f2:	460c      	mov	r4, r1
 80089f4:	b10a      	cbz	r2, 80089fa <_printf_common+0x26>
 80089f6:	3301      	adds	r3, #1
 80089f8:	6033      	str	r3, [r6, #0]
 80089fa:	6823      	ldr	r3, [r4, #0]
 80089fc:	0699      	lsls	r1, r3, #26
 80089fe:	bf42      	ittt	mi
 8008a00:	6833      	ldrmi	r3, [r6, #0]
 8008a02:	3302      	addmi	r3, #2
 8008a04:	6033      	strmi	r3, [r6, #0]
 8008a06:	6825      	ldr	r5, [r4, #0]
 8008a08:	f015 0506 	ands.w	r5, r5, #6
 8008a0c:	d106      	bne.n	8008a1c <_printf_common+0x48>
 8008a0e:	f104 0a19 	add.w	sl, r4, #25
 8008a12:	68e3      	ldr	r3, [r4, #12]
 8008a14:	6832      	ldr	r2, [r6, #0]
 8008a16:	1a9b      	subs	r3, r3, r2
 8008a18:	42ab      	cmp	r3, r5
 8008a1a:	dc26      	bgt.n	8008a6a <_printf_common+0x96>
 8008a1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a20:	1e13      	subs	r3, r2, #0
 8008a22:	6822      	ldr	r2, [r4, #0]
 8008a24:	bf18      	it	ne
 8008a26:	2301      	movne	r3, #1
 8008a28:	0692      	lsls	r2, r2, #26
 8008a2a:	d42b      	bmi.n	8008a84 <_printf_common+0xb0>
 8008a2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a30:	4649      	mov	r1, r9
 8008a32:	4638      	mov	r0, r7
 8008a34:	47c0      	blx	r8
 8008a36:	3001      	adds	r0, #1
 8008a38:	d01e      	beq.n	8008a78 <_printf_common+0xa4>
 8008a3a:	6823      	ldr	r3, [r4, #0]
 8008a3c:	68e5      	ldr	r5, [r4, #12]
 8008a3e:	6832      	ldr	r2, [r6, #0]
 8008a40:	f003 0306 	and.w	r3, r3, #6
 8008a44:	2b04      	cmp	r3, #4
 8008a46:	bf08      	it	eq
 8008a48:	1aad      	subeq	r5, r5, r2
 8008a4a:	68a3      	ldr	r3, [r4, #8]
 8008a4c:	6922      	ldr	r2, [r4, #16]
 8008a4e:	bf0c      	ite	eq
 8008a50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a54:	2500      	movne	r5, #0
 8008a56:	4293      	cmp	r3, r2
 8008a58:	bfc4      	itt	gt
 8008a5a:	1a9b      	subgt	r3, r3, r2
 8008a5c:	18ed      	addgt	r5, r5, r3
 8008a5e:	2600      	movs	r6, #0
 8008a60:	341a      	adds	r4, #26
 8008a62:	42b5      	cmp	r5, r6
 8008a64:	d11a      	bne.n	8008a9c <_printf_common+0xc8>
 8008a66:	2000      	movs	r0, #0
 8008a68:	e008      	b.n	8008a7c <_printf_common+0xa8>
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	4652      	mov	r2, sl
 8008a6e:	4649      	mov	r1, r9
 8008a70:	4638      	mov	r0, r7
 8008a72:	47c0      	blx	r8
 8008a74:	3001      	adds	r0, #1
 8008a76:	d103      	bne.n	8008a80 <_printf_common+0xac>
 8008a78:	f04f 30ff 	mov.w	r0, #4294967295
 8008a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a80:	3501      	adds	r5, #1
 8008a82:	e7c6      	b.n	8008a12 <_printf_common+0x3e>
 8008a84:	18e1      	adds	r1, r4, r3
 8008a86:	1c5a      	adds	r2, r3, #1
 8008a88:	2030      	movs	r0, #48	; 0x30
 8008a8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a8e:	4422      	add	r2, r4
 8008a90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a98:	3302      	adds	r3, #2
 8008a9a:	e7c7      	b.n	8008a2c <_printf_common+0x58>
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	4622      	mov	r2, r4
 8008aa0:	4649      	mov	r1, r9
 8008aa2:	4638      	mov	r0, r7
 8008aa4:	47c0      	blx	r8
 8008aa6:	3001      	adds	r0, #1
 8008aa8:	d0e6      	beq.n	8008a78 <_printf_common+0xa4>
 8008aaa:	3601      	adds	r6, #1
 8008aac:	e7d9      	b.n	8008a62 <_printf_common+0x8e>
	...

08008ab0 <_printf_i>:
 8008ab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ab4:	7e0f      	ldrb	r7, [r1, #24]
 8008ab6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ab8:	2f78      	cmp	r7, #120	; 0x78
 8008aba:	4691      	mov	r9, r2
 8008abc:	4680      	mov	r8, r0
 8008abe:	460c      	mov	r4, r1
 8008ac0:	469a      	mov	sl, r3
 8008ac2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008ac6:	d807      	bhi.n	8008ad8 <_printf_i+0x28>
 8008ac8:	2f62      	cmp	r7, #98	; 0x62
 8008aca:	d80a      	bhi.n	8008ae2 <_printf_i+0x32>
 8008acc:	2f00      	cmp	r7, #0
 8008ace:	f000 80d8 	beq.w	8008c82 <_printf_i+0x1d2>
 8008ad2:	2f58      	cmp	r7, #88	; 0x58
 8008ad4:	f000 80a3 	beq.w	8008c1e <_printf_i+0x16e>
 8008ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008adc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ae0:	e03a      	b.n	8008b58 <_printf_i+0xa8>
 8008ae2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ae6:	2b15      	cmp	r3, #21
 8008ae8:	d8f6      	bhi.n	8008ad8 <_printf_i+0x28>
 8008aea:	a101      	add	r1, pc, #4	; (adr r1, 8008af0 <_printf_i+0x40>)
 8008aec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008af0:	08008b49 	.word	0x08008b49
 8008af4:	08008b5d 	.word	0x08008b5d
 8008af8:	08008ad9 	.word	0x08008ad9
 8008afc:	08008ad9 	.word	0x08008ad9
 8008b00:	08008ad9 	.word	0x08008ad9
 8008b04:	08008ad9 	.word	0x08008ad9
 8008b08:	08008b5d 	.word	0x08008b5d
 8008b0c:	08008ad9 	.word	0x08008ad9
 8008b10:	08008ad9 	.word	0x08008ad9
 8008b14:	08008ad9 	.word	0x08008ad9
 8008b18:	08008ad9 	.word	0x08008ad9
 8008b1c:	08008c69 	.word	0x08008c69
 8008b20:	08008b8d 	.word	0x08008b8d
 8008b24:	08008c4b 	.word	0x08008c4b
 8008b28:	08008ad9 	.word	0x08008ad9
 8008b2c:	08008ad9 	.word	0x08008ad9
 8008b30:	08008c8b 	.word	0x08008c8b
 8008b34:	08008ad9 	.word	0x08008ad9
 8008b38:	08008b8d 	.word	0x08008b8d
 8008b3c:	08008ad9 	.word	0x08008ad9
 8008b40:	08008ad9 	.word	0x08008ad9
 8008b44:	08008c53 	.word	0x08008c53
 8008b48:	682b      	ldr	r3, [r5, #0]
 8008b4a:	1d1a      	adds	r2, r3, #4
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	602a      	str	r2, [r5, #0]
 8008b50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b58:	2301      	movs	r3, #1
 8008b5a:	e0a3      	b.n	8008ca4 <_printf_i+0x1f4>
 8008b5c:	6820      	ldr	r0, [r4, #0]
 8008b5e:	6829      	ldr	r1, [r5, #0]
 8008b60:	0606      	lsls	r6, r0, #24
 8008b62:	f101 0304 	add.w	r3, r1, #4
 8008b66:	d50a      	bpl.n	8008b7e <_printf_i+0xce>
 8008b68:	680e      	ldr	r6, [r1, #0]
 8008b6a:	602b      	str	r3, [r5, #0]
 8008b6c:	2e00      	cmp	r6, #0
 8008b6e:	da03      	bge.n	8008b78 <_printf_i+0xc8>
 8008b70:	232d      	movs	r3, #45	; 0x2d
 8008b72:	4276      	negs	r6, r6
 8008b74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b78:	485e      	ldr	r0, [pc, #376]	; (8008cf4 <_printf_i+0x244>)
 8008b7a:	230a      	movs	r3, #10
 8008b7c:	e019      	b.n	8008bb2 <_printf_i+0x102>
 8008b7e:	680e      	ldr	r6, [r1, #0]
 8008b80:	602b      	str	r3, [r5, #0]
 8008b82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b86:	bf18      	it	ne
 8008b88:	b236      	sxthne	r6, r6
 8008b8a:	e7ef      	b.n	8008b6c <_printf_i+0xbc>
 8008b8c:	682b      	ldr	r3, [r5, #0]
 8008b8e:	6820      	ldr	r0, [r4, #0]
 8008b90:	1d19      	adds	r1, r3, #4
 8008b92:	6029      	str	r1, [r5, #0]
 8008b94:	0601      	lsls	r1, r0, #24
 8008b96:	d501      	bpl.n	8008b9c <_printf_i+0xec>
 8008b98:	681e      	ldr	r6, [r3, #0]
 8008b9a:	e002      	b.n	8008ba2 <_printf_i+0xf2>
 8008b9c:	0646      	lsls	r6, r0, #25
 8008b9e:	d5fb      	bpl.n	8008b98 <_printf_i+0xe8>
 8008ba0:	881e      	ldrh	r6, [r3, #0]
 8008ba2:	4854      	ldr	r0, [pc, #336]	; (8008cf4 <_printf_i+0x244>)
 8008ba4:	2f6f      	cmp	r7, #111	; 0x6f
 8008ba6:	bf0c      	ite	eq
 8008ba8:	2308      	moveq	r3, #8
 8008baa:	230a      	movne	r3, #10
 8008bac:	2100      	movs	r1, #0
 8008bae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008bb2:	6865      	ldr	r5, [r4, #4]
 8008bb4:	60a5      	str	r5, [r4, #8]
 8008bb6:	2d00      	cmp	r5, #0
 8008bb8:	bfa2      	ittt	ge
 8008bba:	6821      	ldrge	r1, [r4, #0]
 8008bbc:	f021 0104 	bicge.w	r1, r1, #4
 8008bc0:	6021      	strge	r1, [r4, #0]
 8008bc2:	b90e      	cbnz	r6, 8008bc8 <_printf_i+0x118>
 8008bc4:	2d00      	cmp	r5, #0
 8008bc6:	d04d      	beq.n	8008c64 <_printf_i+0x1b4>
 8008bc8:	4615      	mov	r5, r2
 8008bca:	fbb6 f1f3 	udiv	r1, r6, r3
 8008bce:	fb03 6711 	mls	r7, r3, r1, r6
 8008bd2:	5dc7      	ldrb	r7, [r0, r7]
 8008bd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008bd8:	4637      	mov	r7, r6
 8008bda:	42bb      	cmp	r3, r7
 8008bdc:	460e      	mov	r6, r1
 8008bde:	d9f4      	bls.n	8008bca <_printf_i+0x11a>
 8008be0:	2b08      	cmp	r3, #8
 8008be2:	d10b      	bne.n	8008bfc <_printf_i+0x14c>
 8008be4:	6823      	ldr	r3, [r4, #0]
 8008be6:	07de      	lsls	r6, r3, #31
 8008be8:	d508      	bpl.n	8008bfc <_printf_i+0x14c>
 8008bea:	6923      	ldr	r3, [r4, #16]
 8008bec:	6861      	ldr	r1, [r4, #4]
 8008bee:	4299      	cmp	r1, r3
 8008bf0:	bfde      	ittt	le
 8008bf2:	2330      	movle	r3, #48	; 0x30
 8008bf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008bf8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008bfc:	1b52      	subs	r2, r2, r5
 8008bfe:	6122      	str	r2, [r4, #16]
 8008c00:	f8cd a000 	str.w	sl, [sp]
 8008c04:	464b      	mov	r3, r9
 8008c06:	aa03      	add	r2, sp, #12
 8008c08:	4621      	mov	r1, r4
 8008c0a:	4640      	mov	r0, r8
 8008c0c:	f7ff fee2 	bl	80089d4 <_printf_common>
 8008c10:	3001      	adds	r0, #1
 8008c12:	d14c      	bne.n	8008cae <_printf_i+0x1fe>
 8008c14:	f04f 30ff 	mov.w	r0, #4294967295
 8008c18:	b004      	add	sp, #16
 8008c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c1e:	4835      	ldr	r0, [pc, #212]	; (8008cf4 <_printf_i+0x244>)
 8008c20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008c24:	6829      	ldr	r1, [r5, #0]
 8008c26:	6823      	ldr	r3, [r4, #0]
 8008c28:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c2c:	6029      	str	r1, [r5, #0]
 8008c2e:	061d      	lsls	r5, r3, #24
 8008c30:	d514      	bpl.n	8008c5c <_printf_i+0x1ac>
 8008c32:	07df      	lsls	r7, r3, #31
 8008c34:	bf44      	itt	mi
 8008c36:	f043 0320 	orrmi.w	r3, r3, #32
 8008c3a:	6023      	strmi	r3, [r4, #0]
 8008c3c:	b91e      	cbnz	r6, 8008c46 <_printf_i+0x196>
 8008c3e:	6823      	ldr	r3, [r4, #0]
 8008c40:	f023 0320 	bic.w	r3, r3, #32
 8008c44:	6023      	str	r3, [r4, #0]
 8008c46:	2310      	movs	r3, #16
 8008c48:	e7b0      	b.n	8008bac <_printf_i+0xfc>
 8008c4a:	6823      	ldr	r3, [r4, #0]
 8008c4c:	f043 0320 	orr.w	r3, r3, #32
 8008c50:	6023      	str	r3, [r4, #0]
 8008c52:	2378      	movs	r3, #120	; 0x78
 8008c54:	4828      	ldr	r0, [pc, #160]	; (8008cf8 <_printf_i+0x248>)
 8008c56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c5a:	e7e3      	b.n	8008c24 <_printf_i+0x174>
 8008c5c:	0659      	lsls	r1, r3, #25
 8008c5e:	bf48      	it	mi
 8008c60:	b2b6      	uxthmi	r6, r6
 8008c62:	e7e6      	b.n	8008c32 <_printf_i+0x182>
 8008c64:	4615      	mov	r5, r2
 8008c66:	e7bb      	b.n	8008be0 <_printf_i+0x130>
 8008c68:	682b      	ldr	r3, [r5, #0]
 8008c6a:	6826      	ldr	r6, [r4, #0]
 8008c6c:	6961      	ldr	r1, [r4, #20]
 8008c6e:	1d18      	adds	r0, r3, #4
 8008c70:	6028      	str	r0, [r5, #0]
 8008c72:	0635      	lsls	r5, r6, #24
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	d501      	bpl.n	8008c7c <_printf_i+0x1cc>
 8008c78:	6019      	str	r1, [r3, #0]
 8008c7a:	e002      	b.n	8008c82 <_printf_i+0x1d2>
 8008c7c:	0670      	lsls	r0, r6, #25
 8008c7e:	d5fb      	bpl.n	8008c78 <_printf_i+0x1c8>
 8008c80:	8019      	strh	r1, [r3, #0]
 8008c82:	2300      	movs	r3, #0
 8008c84:	6123      	str	r3, [r4, #16]
 8008c86:	4615      	mov	r5, r2
 8008c88:	e7ba      	b.n	8008c00 <_printf_i+0x150>
 8008c8a:	682b      	ldr	r3, [r5, #0]
 8008c8c:	1d1a      	adds	r2, r3, #4
 8008c8e:	602a      	str	r2, [r5, #0]
 8008c90:	681d      	ldr	r5, [r3, #0]
 8008c92:	6862      	ldr	r2, [r4, #4]
 8008c94:	2100      	movs	r1, #0
 8008c96:	4628      	mov	r0, r5
 8008c98:	f7f7 faa2 	bl	80001e0 <memchr>
 8008c9c:	b108      	cbz	r0, 8008ca2 <_printf_i+0x1f2>
 8008c9e:	1b40      	subs	r0, r0, r5
 8008ca0:	6060      	str	r0, [r4, #4]
 8008ca2:	6863      	ldr	r3, [r4, #4]
 8008ca4:	6123      	str	r3, [r4, #16]
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cac:	e7a8      	b.n	8008c00 <_printf_i+0x150>
 8008cae:	6923      	ldr	r3, [r4, #16]
 8008cb0:	462a      	mov	r2, r5
 8008cb2:	4649      	mov	r1, r9
 8008cb4:	4640      	mov	r0, r8
 8008cb6:	47d0      	blx	sl
 8008cb8:	3001      	adds	r0, #1
 8008cba:	d0ab      	beq.n	8008c14 <_printf_i+0x164>
 8008cbc:	6823      	ldr	r3, [r4, #0]
 8008cbe:	079b      	lsls	r3, r3, #30
 8008cc0:	d413      	bmi.n	8008cea <_printf_i+0x23a>
 8008cc2:	68e0      	ldr	r0, [r4, #12]
 8008cc4:	9b03      	ldr	r3, [sp, #12]
 8008cc6:	4298      	cmp	r0, r3
 8008cc8:	bfb8      	it	lt
 8008cca:	4618      	movlt	r0, r3
 8008ccc:	e7a4      	b.n	8008c18 <_printf_i+0x168>
 8008cce:	2301      	movs	r3, #1
 8008cd0:	4632      	mov	r2, r6
 8008cd2:	4649      	mov	r1, r9
 8008cd4:	4640      	mov	r0, r8
 8008cd6:	47d0      	blx	sl
 8008cd8:	3001      	adds	r0, #1
 8008cda:	d09b      	beq.n	8008c14 <_printf_i+0x164>
 8008cdc:	3501      	adds	r5, #1
 8008cde:	68e3      	ldr	r3, [r4, #12]
 8008ce0:	9903      	ldr	r1, [sp, #12]
 8008ce2:	1a5b      	subs	r3, r3, r1
 8008ce4:	42ab      	cmp	r3, r5
 8008ce6:	dcf2      	bgt.n	8008cce <_printf_i+0x21e>
 8008ce8:	e7eb      	b.n	8008cc2 <_printf_i+0x212>
 8008cea:	2500      	movs	r5, #0
 8008cec:	f104 0619 	add.w	r6, r4, #25
 8008cf0:	e7f5      	b.n	8008cde <_printf_i+0x22e>
 8008cf2:	bf00      	nop
 8008cf4:	0800a8a9 	.word	0x0800a8a9
 8008cf8:	0800a8ba 	.word	0x0800a8ba

08008cfc <_sbrk_r>:
 8008cfc:	b538      	push	{r3, r4, r5, lr}
 8008cfe:	4d06      	ldr	r5, [pc, #24]	; (8008d18 <_sbrk_r+0x1c>)
 8008d00:	2300      	movs	r3, #0
 8008d02:	4604      	mov	r4, r0
 8008d04:	4608      	mov	r0, r1
 8008d06:	602b      	str	r3, [r5, #0]
 8008d08:	f7fa fef6 	bl	8003af8 <_sbrk>
 8008d0c:	1c43      	adds	r3, r0, #1
 8008d0e:	d102      	bne.n	8008d16 <_sbrk_r+0x1a>
 8008d10:	682b      	ldr	r3, [r5, #0]
 8008d12:	b103      	cbz	r3, 8008d16 <_sbrk_r+0x1a>
 8008d14:	6023      	str	r3, [r4, #0]
 8008d16:	bd38      	pop	{r3, r4, r5, pc}
 8008d18:	20002c40 	.word	0x20002c40

08008d1c <__sread>:
 8008d1c:	b510      	push	{r4, lr}
 8008d1e:	460c      	mov	r4, r1
 8008d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d24:	f000 fab2 	bl	800928c <_read_r>
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	bfab      	itete	ge
 8008d2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d2e:	89a3      	ldrhlt	r3, [r4, #12]
 8008d30:	181b      	addge	r3, r3, r0
 8008d32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d36:	bfac      	ite	ge
 8008d38:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d3a:	81a3      	strhlt	r3, [r4, #12]
 8008d3c:	bd10      	pop	{r4, pc}

08008d3e <__swrite>:
 8008d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d42:	461f      	mov	r7, r3
 8008d44:	898b      	ldrh	r3, [r1, #12]
 8008d46:	05db      	lsls	r3, r3, #23
 8008d48:	4605      	mov	r5, r0
 8008d4a:	460c      	mov	r4, r1
 8008d4c:	4616      	mov	r6, r2
 8008d4e:	d505      	bpl.n	8008d5c <__swrite+0x1e>
 8008d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d54:	2302      	movs	r3, #2
 8008d56:	2200      	movs	r2, #0
 8008d58:	f000 f9c8 	bl	80090ec <_lseek_r>
 8008d5c:	89a3      	ldrh	r3, [r4, #12]
 8008d5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d66:	81a3      	strh	r3, [r4, #12]
 8008d68:	4632      	mov	r2, r6
 8008d6a:	463b      	mov	r3, r7
 8008d6c:	4628      	mov	r0, r5
 8008d6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d72:	f000 b869 	b.w	8008e48 <_write_r>

08008d76 <__sseek>:
 8008d76:	b510      	push	{r4, lr}
 8008d78:	460c      	mov	r4, r1
 8008d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d7e:	f000 f9b5 	bl	80090ec <_lseek_r>
 8008d82:	1c43      	adds	r3, r0, #1
 8008d84:	89a3      	ldrh	r3, [r4, #12]
 8008d86:	bf15      	itete	ne
 8008d88:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d92:	81a3      	strheq	r3, [r4, #12]
 8008d94:	bf18      	it	ne
 8008d96:	81a3      	strhne	r3, [r4, #12]
 8008d98:	bd10      	pop	{r4, pc}

08008d9a <__sclose>:
 8008d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d9e:	f000 b8d3 	b.w	8008f48 <_close_r>
	...

08008da4 <__swbuf_r>:
 8008da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008da6:	460e      	mov	r6, r1
 8008da8:	4614      	mov	r4, r2
 8008daa:	4605      	mov	r5, r0
 8008dac:	b118      	cbz	r0, 8008db6 <__swbuf_r+0x12>
 8008dae:	6983      	ldr	r3, [r0, #24]
 8008db0:	b90b      	cbnz	r3, 8008db6 <__swbuf_r+0x12>
 8008db2:	f7ff fb81 	bl	80084b8 <__sinit>
 8008db6:	4b21      	ldr	r3, [pc, #132]	; (8008e3c <__swbuf_r+0x98>)
 8008db8:	429c      	cmp	r4, r3
 8008dba:	d12b      	bne.n	8008e14 <__swbuf_r+0x70>
 8008dbc:	686c      	ldr	r4, [r5, #4]
 8008dbe:	69a3      	ldr	r3, [r4, #24]
 8008dc0:	60a3      	str	r3, [r4, #8]
 8008dc2:	89a3      	ldrh	r3, [r4, #12]
 8008dc4:	071a      	lsls	r2, r3, #28
 8008dc6:	d52f      	bpl.n	8008e28 <__swbuf_r+0x84>
 8008dc8:	6923      	ldr	r3, [r4, #16]
 8008dca:	b36b      	cbz	r3, 8008e28 <__swbuf_r+0x84>
 8008dcc:	6923      	ldr	r3, [r4, #16]
 8008dce:	6820      	ldr	r0, [r4, #0]
 8008dd0:	1ac0      	subs	r0, r0, r3
 8008dd2:	6963      	ldr	r3, [r4, #20]
 8008dd4:	b2f6      	uxtb	r6, r6
 8008dd6:	4283      	cmp	r3, r0
 8008dd8:	4637      	mov	r7, r6
 8008dda:	dc04      	bgt.n	8008de6 <__swbuf_r+0x42>
 8008ddc:	4621      	mov	r1, r4
 8008dde:	4628      	mov	r0, r5
 8008de0:	f000 f948 	bl	8009074 <_fflush_r>
 8008de4:	bb30      	cbnz	r0, 8008e34 <__swbuf_r+0x90>
 8008de6:	68a3      	ldr	r3, [r4, #8]
 8008de8:	3b01      	subs	r3, #1
 8008dea:	60a3      	str	r3, [r4, #8]
 8008dec:	6823      	ldr	r3, [r4, #0]
 8008dee:	1c5a      	adds	r2, r3, #1
 8008df0:	6022      	str	r2, [r4, #0]
 8008df2:	701e      	strb	r6, [r3, #0]
 8008df4:	6963      	ldr	r3, [r4, #20]
 8008df6:	3001      	adds	r0, #1
 8008df8:	4283      	cmp	r3, r0
 8008dfa:	d004      	beq.n	8008e06 <__swbuf_r+0x62>
 8008dfc:	89a3      	ldrh	r3, [r4, #12]
 8008dfe:	07db      	lsls	r3, r3, #31
 8008e00:	d506      	bpl.n	8008e10 <__swbuf_r+0x6c>
 8008e02:	2e0a      	cmp	r6, #10
 8008e04:	d104      	bne.n	8008e10 <__swbuf_r+0x6c>
 8008e06:	4621      	mov	r1, r4
 8008e08:	4628      	mov	r0, r5
 8008e0a:	f000 f933 	bl	8009074 <_fflush_r>
 8008e0e:	b988      	cbnz	r0, 8008e34 <__swbuf_r+0x90>
 8008e10:	4638      	mov	r0, r7
 8008e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e14:	4b0a      	ldr	r3, [pc, #40]	; (8008e40 <__swbuf_r+0x9c>)
 8008e16:	429c      	cmp	r4, r3
 8008e18:	d101      	bne.n	8008e1e <__swbuf_r+0x7a>
 8008e1a:	68ac      	ldr	r4, [r5, #8]
 8008e1c:	e7cf      	b.n	8008dbe <__swbuf_r+0x1a>
 8008e1e:	4b09      	ldr	r3, [pc, #36]	; (8008e44 <__swbuf_r+0xa0>)
 8008e20:	429c      	cmp	r4, r3
 8008e22:	bf08      	it	eq
 8008e24:	68ec      	ldreq	r4, [r5, #12]
 8008e26:	e7ca      	b.n	8008dbe <__swbuf_r+0x1a>
 8008e28:	4621      	mov	r1, r4
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	f000 f81e 	bl	8008e6c <__swsetup_r>
 8008e30:	2800      	cmp	r0, #0
 8008e32:	d0cb      	beq.n	8008dcc <__swbuf_r+0x28>
 8008e34:	f04f 37ff 	mov.w	r7, #4294967295
 8008e38:	e7ea      	b.n	8008e10 <__swbuf_r+0x6c>
 8008e3a:	bf00      	nop
 8008e3c:	0800a858 	.word	0x0800a858
 8008e40:	0800a878 	.word	0x0800a878
 8008e44:	0800a838 	.word	0x0800a838

08008e48 <_write_r>:
 8008e48:	b538      	push	{r3, r4, r5, lr}
 8008e4a:	4d07      	ldr	r5, [pc, #28]	; (8008e68 <_write_r+0x20>)
 8008e4c:	4604      	mov	r4, r0
 8008e4e:	4608      	mov	r0, r1
 8008e50:	4611      	mov	r1, r2
 8008e52:	2200      	movs	r2, #0
 8008e54:	602a      	str	r2, [r5, #0]
 8008e56:	461a      	mov	r2, r3
 8008e58:	f7f7 fef1 	bl	8000c3e <_write>
 8008e5c:	1c43      	adds	r3, r0, #1
 8008e5e:	d102      	bne.n	8008e66 <_write_r+0x1e>
 8008e60:	682b      	ldr	r3, [r5, #0]
 8008e62:	b103      	cbz	r3, 8008e66 <_write_r+0x1e>
 8008e64:	6023      	str	r3, [r4, #0]
 8008e66:	bd38      	pop	{r3, r4, r5, pc}
 8008e68:	20002c40 	.word	0x20002c40

08008e6c <__swsetup_r>:
 8008e6c:	4b32      	ldr	r3, [pc, #200]	; (8008f38 <__swsetup_r+0xcc>)
 8008e6e:	b570      	push	{r4, r5, r6, lr}
 8008e70:	681d      	ldr	r5, [r3, #0]
 8008e72:	4606      	mov	r6, r0
 8008e74:	460c      	mov	r4, r1
 8008e76:	b125      	cbz	r5, 8008e82 <__swsetup_r+0x16>
 8008e78:	69ab      	ldr	r3, [r5, #24]
 8008e7a:	b913      	cbnz	r3, 8008e82 <__swsetup_r+0x16>
 8008e7c:	4628      	mov	r0, r5
 8008e7e:	f7ff fb1b 	bl	80084b8 <__sinit>
 8008e82:	4b2e      	ldr	r3, [pc, #184]	; (8008f3c <__swsetup_r+0xd0>)
 8008e84:	429c      	cmp	r4, r3
 8008e86:	d10f      	bne.n	8008ea8 <__swsetup_r+0x3c>
 8008e88:	686c      	ldr	r4, [r5, #4]
 8008e8a:	89a3      	ldrh	r3, [r4, #12]
 8008e8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e90:	0719      	lsls	r1, r3, #28
 8008e92:	d42c      	bmi.n	8008eee <__swsetup_r+0x82>
 8008e94:	06dd      	lsls	r5, r3, #27
 8008e96:	d411      	bmi.n	8008ebc <__swsetup_r+0x50>
 8008e98:	2309      	movs	r3, #9
 8008e9a:	6033      	str	r3, [r6, #0]
 8008e9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ea0:	81a3      	strh	r3, [r4, #12]
 8008ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea6:	e03e      	b.n	8008f26 <__swsetup_r+0xba>
 8008ea8:	4b25      	ldr	r3, [pc, #148]	; (8008f40 <__swsetup_r+0xd4>)
 8008eaa:	429c      	cmp	r4, r3
 8008eac:	d101      	bne.n	8008eb2 <__swsetup_r+0x46>
 8008eae:	68ac      	ldr	r4, [r5, #8]
 8008eb0:	e7eb      	b.n	8008e8a <__swsetup_r+0x1e>
 8008eb2:	4b24      	ldr	r3, [pc, #144]	; (8008f44 <__swsetup_r+0xd8>)
 8008eb4:	429c      	cmp	r4, r3
 8008eb6:	bf08      	it	eq
 8008eb8:	68ec      	ldreq	r4, [r5, #12]
 8008eba:	e7e6      	b.n	8008e8a <__swsetup_r+0x1e>
 8008ebc:	0758      	lsls	r0, r3, #29
 8008ebe:	d512      	bpl.n	8008ee6 <__swsetup_r+0x7a>
 8008ec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ec2:	b141      	cbz	r1, 8008ed6 <__swsetup_r+0x6a>
 8008ec4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ec8:	4299      	cmp	r1, r3
 8008eca:	d002      	beq.n	8008ed2 <__swsetup_r+0x66>
 8008ecc:	4630      	mov	r0, r6
 8008ece:	f000 f991 	bl	80091f4 <_free_r>
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	6363      	str	r3, [r4, #52]	; 0x34
 8008ed6:	89a3      	ldrh	r3, [r4, #12]
 8008ed8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008edc:	81a3      	strh	r3, [r4, #12]
 8008ede:	2300      	movs	r3, #0
 8008ee0:	6063      	str	r3, [r4, #4]
 8008ee2:	6923      	ldr	r3, [r4, #16]
 8008ee4:	6023      	str	r3, [r4, #0]
 8008ee6:	89a3      	ldrh	r3, [r4, #12]
 8008ee8:	f043 0308 	orr.w	r3, r3, #8
 8008eec:	81a3      	strh	r3, [r4, #12]
 8008eee:	6923      	ldr	r3, [r4, #16]
 8008ef0:	b94b      	cbnz	r3, 8008f06 <__swsetup_r+0x9a>
 8008ef2:	89a3      	ldrh	r3, [r4, #12]
 8008ef4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008efc:	d003      	beq.n	8008f06 <__swsetup_r+0x9a>
 8008efe:	4621      	mov	r1, r4
 8008f00:	4630      	mov	r0, r6
 8008f02:	f000 f92b 	bl	800915c <__smakebuf_r>
 8008f06:	89a0      	ldrh	r0, [r4, #12]
 8008f08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f0c:	f010 0301 	ands.w	r3, r0, #1
 8008f10:	d00a      	beq.n	8008f28 <__swsetup_r+0xbc>
 8008f12:	2300      	movs	r3, #0
 8008f14:	60a3      	str	r3, [r4, #8]
 8008f16:	6963      	ldr	r3, [r4, #20]
 8008f18:	425b      	negs	r3, r3
 8008f1a:	61a3      	str	r3, [r4, #24]
 8008f1c:	6923      	ldr	r3, [r4, #16]
 8008f1e:	b943      	cbnz	r3, 8008f32 <__swsetup_r+0xc6>
 8008f20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f24:	d1ba      	bne.n	8008e9c <__swsetup_r+0x30>
 8008f26:	bd70      	pop	{r4, r5, r6, pc}
 8008f28:	0781      	lsls	r1, r0, #30
 8008f2a:	bf58      	it	pl
 8008f2c:	6963      	ldrpl	r3, [r4, #20]
 8008f2e:	60a3      	str	r3, [r4, #8]
 8008f30:	e7f4      	b.n	8008f1c <__swsetup_r+0xb0>
 8008f32:	2000      	movs	r0, #0
 8008f34:	e7f7      	b.n	8008f26 <__swsetup_r+0xba>
 8008f36:	bf00      	nop
 8008f38:	200006f4 	.word	0x200006f4
 8008f3c:	0800a858 	.word	0x0800a858
 8008f40:	0800a878 	.word	0x0800a878
 8008f44:	0800a838 	.word	0x0800a838

08008f48 <_close_r>:
 8008f48:	b538      	push	{r3, r4, r5, lr}
 8008f4a:	4d06      	ldr	r5, [pc, #24]	; (8008f64 <_close_r+0x1c>)
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	4604      	mov	r4, r0
 8008f50:	4608      	mov	r0, r1
 8008f52:	602b      	str	r3, [r5, #0]
 8008f54:	f7fa fd9b 	bl	8003a8e <_close>
 8008f58:	1c43      	adds	r3, r0, #1
 8008f5a:	d102      	bne.n	8008f62 <_close_r+0x1a>
 8008f5c:	682b      	ldr	r3, [r5, #0]
 8008f5e:	b103      	cbz	r3, 8008f62 <_close_r+0x1a>
 8008f60:	6023      	str	r3, [r4, #0]
 8008f62:	bd38      	pop	{r3, r4, r5, pc}
 8008f64:	20002c40 	.word	0x20002c40

08008f68 <__sflush_r>:
 8008f68:	898a      	ldrh	r2, [r1, #12]
 8008f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f6e:	4605      	mov	r5, r0
 8008f70:	0710      	lsls	r0, r2, #28
 8008f72:	460c      	mov	r4, r1
 8008f74:	d458      	bmi.n	8009028 <__sflush_r+0xc0>
 8008f76:	684b      	ldr	r3, [r1, #4]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	dc05      	bgt.n	8008f88 <__sflush_r+0x20>
 8008f7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	dc02      	bgt.n	8008f88 <__sflush_r+0x20>
 8008f82:	2000      	movs	r0, #0
 8008f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f8a:	2e00      	cmp	r6, #0
 8008f8c:	d0f9      	beq.n	8008f82 <__sflush_r+0x1a>
 8008f8e:	2300      	movs	r3, #0
 8008f90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f94:	682f      	ldr	r7, [r5, #0]
 8008f96:	602b      	str	r3, [r5, #0]
 8008f98:	d032      	beq.n	8009000 <__sflush_r+0x98>
 8008f9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f9c:	89a3      	ldrh	r3, [r4, #12]
 8008f9e:	075a      	lsls	r2, r3, #29
 8008fa0:	d505      	bpl.n	8008fae <__sflush_r+0x46>
 8008fa2:	6863      	ldr	r3, [r4, #4]
 8008fa4:	1ac0      	subs	r0, r0, r3
 8008fa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008fa8:	b10b      	cbz	r3, 8008fae <__sflush_r+0x46>
 8008faa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008fac:	1ac0      	subs	r0, r0, r3
 8008fae:	2300      	movs	r3, #0
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fb4:	6a21      	ldr	r1, [r4, #32]
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	47b0      	blx	r6
 8008fba:	1c43      	adds	r3, r0, #1
 8008fbc:	89a3      	ldrh	r3, [r4, #12]
 8008fbe:	d106      	bne.n	8008fce <__sflush_r+0x66>
 8008fc0:	6829      	ldr	r1, [r5, #0]
 8008fc2:	291d      	cmp	r1, #29
 8008fc4:	d82c      	bhi.n	8009020 <__sflush_r+0xb8>
 8008fc6:	4a2a      	ldr	r2, [pc, #168]	; (8009070 <__sflush_r+0x108>)
 8008fc8:	40ca      	lsrs	r2, r1
 8008fca:	07d6      	lsls	r6, r2, #31
 8008fcc:	d528      	bpl.n	8009020 <__sflush_r+0xb8>
 8008fce:	2200      	movs	r2, #0
 8008fd0:	6062      	str	r2, [r4, #4]
 8008fd2:	04d9      	lsls	r1, r3, #19
 8008fd4:	6922      	ldr	r2, [r4, #16]
 8008fd6:	6022      	str	r2, [r4, #0]
 8008fd8:	d504      	bpl.n	8008fe4 <__sflush_r+0x7c>
 8008fda:	1c42      	adds	r2, r0, #1
 8008fdc:	d101      	bne.n	8008fe2 <__sflush_r+0x7a>
 8008fde:	682b      	ldr	r3, [r5, #0]
 8008fe0:	b903      	cbnz	r3, 8008fe4 <__sflush_r+0x7c>
 8008fe2:	6560      	str	r0, [r4, #84]	; 0x54
 8008fe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fe6:	602f      	str	r7, [r5, #0]
 8008fe8:	2900      	cmp	r1, #0
 8008fea:	d0ca      	beq.n	8008f82 <__sflush_r+0x1a>
 8008fec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ff0:	4299      	cmp	r1, r3
 8008ff2:	d002      	beq.n	8008ffa <__sflush_r+0x92>
 8008ff4:	4628      	mov	r0, r5
 8008ff6:	f000 f8fd 	bl	80091f4 <_free_r>
 8008ffa:	2000      	movs	r0, #0
 8008ffc:	6360      	str	r0, [r4, #52]	; 0x34
 8008ffe:	e7c1      	b.n	8008f84 <__sflush_r+0x1c>
 8009000:	6a21      	ldr	r1, [r4, #32]
 8009002:	2301      	movs	r3, #1
 8009004:	4628      	mov	r0, r5
 8009006:	47b0      	blx	r6
 8009008:	1c41      	adds	r1, r0, #1
 800900a:	d1c7      	bne.n	8008f9c <__sflush_r+0x34>
 800900c:	682b      	ldr	r3, [r5, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d0c4      	beq.n	8008f9c <__sflush_r+0x34>
 8009012:	2b1d      	cmp	r3, #29
 8009014:	d001      	beq.n	800901a <__sflush_r+0xb2>
 8009016:	2b16      	cmp	r3, #22
 8009018:	d101      	bne.n	800901e <__sflush_r+0xb6>
 800901a:	602f      	str	r7, [r5, #0]
 800901c:	e7b1      	b.n	8008f82 <__sflush_r+0x1a>
 800901e:	89a3      	ldrh	r3, [r4, #12]
 8009020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009024:	81a3      	strh	r3, [r4, #12]
 8009026:	e7ad      	b.n	8008f84 <__sflush_r+0x1c>
 8009028:	690f      	ldr	r7, [r1, #16]
 800902a:	2f00      	cmp	r7, #0
 800902c:	d0a9      	beq.n	8008f82 <__sflush_r+0x1a>
 800902e:	0793      	lsls	r3, r2, #30
 8009030:	680e      	ldr	r6, [r1, #0]
 8009032:	bf08      	it	eq
 8009034:	694b      	ldreq	r3, [r1, #20]
 8009036:	600f      	str	r7, [r1, #0]
 8009038:	bf18      	it	ne
 800903a:	2300      	movne	r3, #0
 800903c:	eba6 0807 	sub.w	r8, r6, r7
 8009040:	608b      	str	r3, [r1, #8]
 8009042:	f1b8 0f00 	cmp.w	r8, #0
 8009046:	dd9c      	ble.n	8008f82 <__sflush_r+0x1a>
 8009048:	6a21      	ldr	r1, [r4, #32]
 800904a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800904c:	4643      	mov	r3, r8
 800904e:	463a      	mov	r2, r7
 8009050:	4628      	mov	r0, r5
 8009052:	47b0      	blx	r6
 8009054:	2800      	cmp	r0, #0
 8009056:	dc06      	bgt.n	8009066 <__sflush_r+0xfe>
 8009058:	89a3      	ldrh	r3, [r4, #12]
 800905a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800905e:	81a3      	strh	r3, [r4, #12]
 8009060:	f04f 30ff 	mov.w	r0, #4294967295
 8009064:	e78e      	b.n	8008f84 <__sflush_r+0x1c>
 8009066:	4407      	add	r7, r0
 8009068:	eba8 0800 	sub.w	r8, r8, r0
 800906c:	e7e9      	b.n	8009042 <__sflush_r+0xda>
 800906e:	bf00      	nop
 8009070:	20400001 	.word	0x20400001

08009074 <_fflush_r>:
 8009074:	b538      	push	{r3, r4, r5, lr}
 8009076:	690b      	ldr	r3, [r1, #16]
 8009078:	4605      	mov	r5, r0
 800907a:	460c      	mov	r4, r1
 800907c:	b913      	cbnz	r3, 8009084 <_fflush_r+0x10>
 800907e:	2500      	movs	r5, #0
 8009080:	4628      	mov	r0, r5
 8009082:	bd38      	pop	{r3, r4, r5, pc}
 8009084:	b118      	cbz	r0, 800908e <_fflush_r+0x1a>
 8009086:	6983      	ldr	r3, [r0, #24]
 8009088:	b90b      	cbnz	r3, 800908e <_fflush_r+0x1a>
 800908a:	f7ff fa15 	bl	80084b8 <__sinit>
 800908e:	4b14      	ldr	r3, [pc, #80]	; (80090e0 <_fflush_r+0x6c>)
 8009090:	429c      	cmp	r4, r3
 8009092:	d11b      	bne.n	80090cc <_fflush_r+0x58>
 8009094:	686c      	ldr	r4, [r5, #4]
 8009096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d0ef      	beq.n	800907e <_fflush_r+0xa>
 800909e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80090a0:	07d0      	lsls	r0, r2, #31
 80090a2:	d404      	bmi.n	80090ae <_fflush_r+0x3a>
 80090a4:	0599      	lsls	r1, r3, #22
 80090a6:	d402      	bmi.n	80090ae <_fflush_r+0x3a>
 80090a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090aa:	f7ff faa3 	bl	80085f4 <__retarget_lock_acquire_recursive>
 80090ae:	4628      	mov	r0, r5
 80090b0:	4621      	mov	r1, r4
 80090b2:	f7ff ff59 	bl	8008f68 <__sflush_r>
 80090b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090b8:	07da      	lsls	r2, r3, #31
 80090ba:	4605      	mov	r5, r0
 80090bc:	d4e0      	bmi.n	8009080 <_fflush_r+0xc>
 80090be:	89a3      	ldrh	r3, [r4, #12]
 80090c0:	059b      	lsls	r3, r3, #22
 80090c2:	d4dd      	bmi.n	8009080 <_fflush_r+0xc>
 80090c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090c6:	f7ff fa96 	bl	80085f6 <__retarget_lock_release_recursive>
 80090ca:	e7d9      	b.n	8009080 <_fflush_r+0xc>
 80090cc:	4b05      	ldr	r3, [pc, #20]	; (80090e4 <_fflush_r+0x70>)
 80090ce:	429c      	cmp	r4, r3
 80090d0:	d101      	bne.n	80090d6 <_fflush_r+0x62>
 80090d2:	68ac      	ldr	r4, [r5, #8]
 80090d4:	e7df      	b.n	8009096 <_fflush_r+0x22>
 80090d6:	4b04      	ldr	r3, [pc, #16]	; (80090e8 <_fflush_r+0x74>)
 80090d8:	429c      	cmp	r4, r3
 80090da:	bf08      	it	eq
 80090dc:	68ec      	ldreq	r4, [r5, #12]
 80090de:	e7da      	b.n	8009096 <_fflush_r+0x22>
 80090e0:	0800a858 	.word	0x0800a858
 80090e4:	0800a878 	.word	0x0800a878
 80090e8:	0800a838 	.word	0x0800a838

080090ec <_lseek_r>:
 80090ec:	b538      	push	{r3, r4, r5, lr}
 80090ee:	4d07      	ldr	r5, [pc, #28]	; (800910c <_lseek_r+0x20>)
 80090f0:	4604      	mov	r4, r0
 80090f2:	4608      	mov	r0, r1
 80090f4:	4611      	mov	r1, r2
 80090f6:	2200      	movs	r2, #0
 80090f8:	602a      	str	r2, [r5, #0]
 80090fa:	461a      	mov	r2, r3
 80090fc:	f7fa fcee 	bl	8003adc <_lseek>
 8009100:	1c43      	adds	r3, r0, #1
 8009102:	d102      	bne.n	800910a <_lseek_r+0x1e>
 8009104:	682b      	ldr	r3, [r5, #0]
 8009106:	b103      	cbz	r3, 800910a <_lseek_r+0x1e>
 8009108:	6023      	str	r3, [r4, #0]
 800910a:	bd38      	pop	{r3, r4, r5, pc}
 800910c:	20002c40 	.word	0x20002c40

08009110 <__swhatbuf_r>:
 8009110:	b570      	push	{r4, r5, r6, lr}
 8009112:	460e      	mov	r6, r1
 8009114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009118:	2900      	cmp	r1, #0
 800911a:	b096      	sub	sp, #88	; 0x58
 800911c:	4614      	mov	r4, r2
 800911e:	461d      	mov	r5, r3
 8009120:	da08      	bge.n	8009134 <__swhatbuf_r+0x24>
 8009122:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	602a      	str	r2, [r5, #0]
 800912a:	061a      	lsls	r2, r3, #24
 800912c:	d410      	bmi.n	8009150 <__swhatbuf_r+0x40>
 800912e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009132:	e00e      	b.n	8009152 <__swhatbuf_r+0x42>
 8009134:	466a      	mov	r2, sp
 8009136:	f000 f8bb 	bl	80092b0 <_fstat_r>
 800913a:	2800      	cmp	r0, #0
 800913c:	dbf1      	blt.n	8009122 <__swhatbuf_r+0x12>
 800913e:	9a01      	ldr	r2, [sp, #4]
 8009140:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009144:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009148:	425a      	negs	r2, r3
 800914a:	415a      	adcs	r2, r3
 800914c:	602a      	str	r2, [r5, #0]
 800914e:	e7ee      	b.n	800912e <__swhatbuf_r+0x1e>
 8009150:	2340      	movs	r3, #64	; 0x40
 8009152:	2000      	movs	r0, #0
 8009154:	6023      	str	r3, [r4, #0]
 8009156:	b016      	add	sp, #88	; 0x58
 8009158:	bd70      	pop	{r4, r5, r6, pc}
	...

0800915c <__smakebuf_r>:
 800915c:	898b      	ldrh	r3, [r1, #12]
 800915e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009160:	079d      	lsls	r5, r3, #30
 8009162:	4606      	mov	r6, r0
 8009164:	460c      	mov	r4, r1
 8009166:	d507      	bpl.n	8009178 <__smakebuf_r+0x1c>
 8009168:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800916c:	6023      	str	r3, [r4, #0]
 800916e:	6123      	str	r3, [r4, #16]
 8009170:	2301      	movs	r3, #1
 8009172:	6163      	str	r3, [r4, #20]
 8009174:	b002      	add	sp, #8
 8009176:	bd70      	pop	{r4, r5, r6, pc}
 8009178:	ab01      	add	r3, sp, #4
 800917a:	466a      	mov	r2, sp
 800917c:	f7ff ffc8 	bl	8009110 <__swhatbuf_r>
 8009180:	9900      	ldr	r1, [sp, #0]
 8009182:	4605      	mov	r5, r0
 8009184:	4630      	mov	r0, r6
 8009186:	f7ff fa57 	bl	8008638 <_malloc_r>
 800918a:	b948      	cbnz	r0, 80091a0 <__smakebuf_r+0x44>
 800918c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009190:	059a      	lsls	r2, r3, #22
 8009192:	d4ef      	bmi.n	8009174 <__smakebuf_r+0x18>
 8009194:	f023 0303 	bic.w	r3, r3, #3
 8009198:	f043 0302 	orr.w	r3, r3, #2
 800919c:	81a3      	strh	r3, [r4, #12]
 800919e:	e7e3      	b.n	8009168 <__smakebuf_r+0xc>
 80091a0:	4b0d      	ldr	r3, [pc, #52]	; (80091d8 <__smakebuf_r+0x7c>)
 80091a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80091a4:	89a3      	ldrh	r3, [r4, #12]
 80091a6:	6020      	str	r0, [r4, #0]
 80091a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091ac:	81a3      	strh	r3, [r4, #12]
 80091ae:	9b00      	ldr	r3, [sp, #0]
 80091b0:	6163      	str	r3, [r4, #20]
 80091b2:	9b01      	ldr	r3, [sp, #4]
 80091b4:	6120      	str	r0, [r4, #16]
 80091b6:	b15b      	cbz	r3, 80091d0 <__smakebuf_r+0x74>
 80091b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091bc:	4630      	mov	r0, r6
 80091be:	f000 f889 	bl	80092d4 <_isatty_r>
 80091c2:	b128      	cbz	r0, 80091d0 <__smakebuf_r+0x74>
 80091c4:	89a3      	ldrh	r3, [r4, #12]
 80091c6:	f023 0303 	bic.w	r3, r3, #3
 80091ca:	f043 0301 	orr.w	r3, r3, #1
 80091ce:	81a3      	strh	r3, [r4, #12]
 80091d0:	89a0      	ldrh	r0, [r4, #12]
 80091d2:	4305      	orrs	r5, r0
 80091d4:	81a5      	strh	r5, [r4, #12]
 80091d6:	e7cd      	b.n	8009174 <__smakebuf_r+0x18>
 80091d8:	08008451 	.word	0x08008451

080091dc <__malloc_lock>:
 80091dc:	4801      	ldr	r0, [pc, #4]	; (80091e4 <__malloc_lock+0x8>)
 80091de:	f7ff ba09 	b.w	80085f4 <__retarget_lock_acquire_recursive>
 80091e2:	bf00      	nop
 80091e4:	20002c34 	.word	0x20002c34

080091e8 <__malloc_unlock>:
 80091e8:	4801      	ldr	r0, [pc, #4]	; (80091f0 <__malloc_unlock+0x8>)
 80091ea:	f7ff ba04 	b.w	80085f6 <__retarget_lock_release_recursive>
 80091ee:	bf00      	nop
 80091f0:	20002c34 	.word	0x20002c34

080091f4 <_free_r>:
 80091f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091f6:	2900      	cmp	r1, #0
 80091f8:	d044      	beq.n	8009284 <_free_r+0x90>
 80091fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091fe:	9001      	str	r0, [sp, #4]
 8009200:	2b00      	cmp	r3, #0
 8009202:	f1a1 0404 	sub.w	r4, r1, #4
 8009206:	bfb8      	it	lt
 8009208:	18e4      	addlt	r4, r4, r3
 800920a:	f7ff ffe7 	bl	80091dc <__malloc_lock>
 800920e:	4a1e      	ldr	r2, [pc, #120]	; (8009288 <_free_r+0x94>)
 8009210:	9801      	ldr	r0, [sp, #4]
 8009212:	6813      	ldr	r3, [r2, #0]
 8009214:	b933      	cbnz	r3, 8009224 <_free_r+0x30>
 8009216:	6063      	str	r3, [r4, #4]
 8009218:	6014      	str	r4, [r2, #0]
 800921a:	b003      	add	sp, #12
 800921c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009220:	f7ff bfe2 	b.w	80091e8 <__malloc_unlock>
 8009224:	42a3      	cmp	r3, r4
 8009226:	d908      	bls.n	800923a <_free_r+0x46>
 8009228:	6825      	ldr	r5, [r4, #0]
 800922a:	1961      	adds	r1, r4, r5
 800922c:	428b      	cmp	r3, r1
 800922e:	bf01      	itttt	eq
 8009230:	6819      	ldreq	r1, [r3, #0]
 8009232:	685b      	ldreq	r3, [r3, #4]
 8009234:	1949      	addeq	r1, r1, r5
 8009236:	6021      	streq	r1, [r4, #0]
 8009238:	e7ed      	b.n	8009216 <_free_r+0x22>
 800923a:	461a      	mov	r2, r3
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	b10b      	cbz	r3, 8009244 <_free_r+0x50>
 8009240:	42a3      	cmp	r3, r4
 8009242:	d9fa      	bls.n	800923a <_free_r+0x46>
 8009244:	6811      	ldr	r1, [r2, #0]
 8009246:	1855      	adds	r5, r2, r1
 8009248:	42a5      	cmp	r5, r4
 800924a:	d10b      	bne.n	8009264 <_free_r+0x70>
 800924c:	6824      	ldr	r4, [r4, #0]
 800924e:	4421      	add	r1, r4
 8009250:	1854      	adds	r4, r2, r1
 8009252:	42a3      	cmp	r3, r4
 8009254:	6011      	str	r1, [r2, #0]
 8009256:	d1e0      	bne.n	800921a <_free_r+0x26>
 8009258:	681c      	ldr	r4, [r3, #0]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	6053      	str	r3, [r2, #4]
 800925e:	4421      	add	r1, r4
 8009260:	6011      	str	r1, [r2, #0]
 8009262:	e7da      	b.n	800921a <_free_r+0x26>
 8009264:	d902      	bls.n	800926c <_free_r+0x78>
 8009266:	230c      	movs	r3, #12
 8009268:	6003      	str	r3, [r0, #0]
 800926a:	e7d6      	b.n	800921a <_free_r+0x26>
 800926c:	6825      	ldr	r5, [r4, #0]
 800926e:	1961      	adds	r1, r4, r5
 8009270:	428b      	cmp	r3, r1
 8009272:	bf04      	itt	eq
 8009274:	6819      	ldreq	r1, [r3, #0]
 8009276:	685b      	ldreq	r3, [r3, #4]
 8009278:	6063      	str	r3, [r4, #4]
 800927a:	bf04      	itt	eq
 800927c:	1949      	addeq	r1, r1, r5
 800927e:	6021      	streq	r1, [r4, #0]
 8009280:	6054      	str	r4, [r2, #4]
 8009282:	e7ca      	b.n	800921a <_free_r+0x26>
 8009284:	b003      	add	sp, #12
 8009286:	bd30      	pop	{r4, r5, pc}
 8009288:	20002c38 	.word	0x20002c38

0800928c <_read_r>:
 800928c:	b538      	push	{r3, r4, r5, lr}
 800928e:	4d07      	ldr	r5, [pc, #28]	; (80092ac <_read_r+0x20>)
 8009290:	4604      	mov	r4, r0
 8009292:	4608      	mov	r0, r1
 8009294:	4611      	mov	r1, r2
 8009296:	2200      	movs	r2, #0
 8009298:	602a      	str	r2, [r5, #0]
 800929a:	461a      	mov	r2, r3
 800929c:	f7fa fbda 	bl	8003a54 <_read>
 80092a0:	1c43      	adds	r3, r0, #1
 80092a2:	d102      	bne.n	80092aa <_read_r+0x1e>
 80092a4:	682b      	ldr	r3, [r5, #0]
 80092a6:	b103      	cbz	r3, 80092aa <_read_r+0x1e>
 80092a8:	6023      	str	r3, [r4, #0]
 80092aa:	bd38      	pop	{r3, r4, r5, pc}
 80092ac:	20002c40 	.word	0x20002c40

080092b0 <_fstat_r>:
 80092b0:	b538      	push	{r3, r4, r5, lr}
 80092b2:	4d07      	ldr	r5, [pc, #28]	; (80092d0 <_fstat_r+0x20>)
 80092b4:	2300      	movs	r3, #0
 80092b6:	4604      	mov	r4, r0
 80092b8:	4608      	mov	r0, r1
 80092ba:	4611      	mov	r1, r2
 80092bc:	602b      	str	r3, [r5, #0]
 80092be:	f7fa fbf2 	bl	8003aa6 <_fstat>
 80092c2:	1c43      	adds	r3, r0, #1
 80092c4:	d102      	bne.n	80092cc <_fstat_r+0x1c>
 80092c6:	682b      	ldr	r3, [r5, #0]
 80092c8:	b103      	cbz	r3, 80092cc <_fstat_r+0x1c>
 80092ca:	6023      	str	r3, [r4, #0]
 80092cc:	bd38      	pop	{r3, r4, r5, pc}
 80092ce:	bf00      	nop
 80092d0:	20002c40 	.word	0x20002c40

080092d4 <_isatty_r>:
 80092d4:	b538      	push	{r3, r4, r5, lr}
 80092d6:	4d06      	ldr	r5, [pc, #24]	; (80092f0 <_isatty_r+0x1c>)
 80092d8:	2300      	movs	r3, #0
 80092da:	4604      	mov	r4, r0
 80092dc:	4608      	mov	r0, r1
 80092de:	602b      	str	r3, [r5, #0]
 80092e0:	f7fa fbf1 	bl	8003ac6 <_isatty>
 80092e4:	1c43      	adds	r3, r0, #1
 80092e6:	d102      	bne.n	80092ee <_isatty_r+0x1a>
 80092e8:	682b      	ldr	r3, [r5, #0]
 80092ea:	b103      	cbz	r3, 80092ee <_isatty_r+0x1a>
 80092ec:	6023      	str	r3, [r4, #0]
 80092ee:	bd38      	pop	{r3, r4, r5, pc}
 80092f0:	20002c40 	.word	0x20002c40

080092f4 <_init>:
 80092f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092f6:	bf00      	nop
 80092f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092fa:	bc08      	pop	{r3}
 80092fc:	469e      	mov	lr, r3
 80092fe:	4770      	bx	lr

08009300 <_fini>:
 8009300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009302:	bf00      	nop
 8009304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009306:	bc08      	pop	{r3}
 8009308:	469e      	mov	lr, r3
 800930a:	4770      	bx	lr
