
newseqen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0a4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ca8  0800b23c  0800b23c  0001b23c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cee4  0800cee4  00020434  2**0
                  CONTENTS
  4 .ARM          00000008  0800cee4  0800cee4  0001cee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ceec  0800ceec  00020434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ceec  0800ceec  0001ceec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cef0  0800cef0  0001cef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000434  20000000  0800cef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006e78  20000434  0800d328  00020434  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200072ac  0800d328  000272ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001737f  00000000  00000000  00020464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027dd  00000000  00000000  000377e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  00039fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001290  00000000  00000000  0003b338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d81  00000000  00000000  0003c5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000181ef  00000000  00000000  00055349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a13e6  00000000  00000000  0006d538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  0010e91e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055d0  00000000  00000000  0010e9e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000d8  00000000  00000000  00113fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000434 	.word	0x20000434
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800b224 	.word	0x0800b224

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000438 	.word	0x20000438
 80001d4:	0800b224 	.word	0x0800b224

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_dmul>:
 80001e8:	b570      	push	{r4, r5, r6, lr}
 80001ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001f6:	bf1d      	ittte	ne
 80001f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001fc:	ea94 0f0c 	teqne	r4, ip
 8000200:	ea95 0f0c 	teqne	r5, ip
 8000204:	f000 f8de 	bleq	80003c4 <__aeabi_dmul+0x1dc>
 8000208:	442c      	add	r4, r5
 800020a:	ea81 0603 	eor.w	r6, r1, r3
 800020e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000212:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000216:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021a:	bf18      	it	ne
 800021c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000228:	d038      	beq.n	800029c <__aeabi_dmul+0xb4>
 800022a:	fba0 ce02 	umull	ip, lr, r0, r2
 800022e:	f04f 0500 	mov.w	r5, #0
 8000232:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000236:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800023a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800023e:	f04f 0600 	mov.w	r6, #0
 8000242:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000246:	f09c 0f00 	teq	ip, #0
 800024a:	bf18      	it	ne
 800024c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000250:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000254:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000258:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800025c:	d204      	bcs.n	8000268 <__aeabi_dmul+0x80>
 800025e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000262:	416d      	adcs	r5, r5
 8000264:	eb46 0606 	adc.w	r6, r6, r6
 8000268:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800026c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000270:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000274:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000278:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800027c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000280:	bf88      	it	hi
 8000282:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000286:	d81e      	bhi.n	80002c6 <__aeabi_dmul+0xde>
 8000288:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a0:	ea46 0101 	orr.w	r1, r6, r1
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	ea81 0103 	eor.w	r1, r1, r3
 80002ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b0:	bfc2      	ittt	gt
 80002b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	popgt	{r4, r5, r6, pc}
 80002bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c0:	f04f 0e00 	mov.w	lr, #0
 80002c4:	3c01      	subs	r4, #1
 80002c6:	f300 80ab 	bgt.w	8000420 <__aeabi_dmul+0x238>
 80002ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ce:	bfde      	ittt	le
 80002d0:	2000      	movle	r0, #0
 80002d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002d6:	bd70      	pople	{r4, r5, r6, pc}
 80002d8:	f1c4 0400 	rsb	r4, r4, #0
 80002dc:	3c20      	subs	r4, #32
 80002de:	da35      	bge.n	800034c <__aeabi_dmul+0x164>
 80002e0:	340c      	adds	r4, #12
 80002e2:	dc1b      	bgt.n	800031c <__aeabi_dmul+0x134>
 80002e4:	f104 0414 	add.w	r4, r4, #20
 80002e8:	f1c4 0520 	rsb	r5, r4, #32
 80002ec:	fa00 f305 	lsl.w	r3, r0, r5
 80002f0:	fa20 f004 	lsr.w	r0, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea40 0002 	orr.w	r0, r0, r2
 80002fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000300:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000304:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000308:	fa21 f604 	lsr.w	r6, r1, r4
 800030c:	eb42 0106 	adc.w	r1, r2, r6
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f1c4 040c 	rsb	r4, r4, #12
 8000320:	f1c4 0520 	rsb	r5, r4, #32
 8000324:	fa00 f304 	lsl.w	r3, r0, r4
 8000328:	fa20 f005 	lsr.w	r0, r0, r5
 800032c:	fa01 f204 	lsl.w	r2, r1, r4
 8000330:	ea40 0002 	orr.w	r0, r0, r2
 8000334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000338:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 0520 	rsb	r5, r4, #32
 8000350:	fa00 f205 	lsl.w	r2, r0, r5
 8000354:	ea4e 0e02 	orr.w	lr, lr, r2
 8000358:	fa20 f304 	lsr.w	r3, r0, r4
 800035c:	fa01 f205 	lsl.w	r2, r1, r5
 8000360:	ea43 0302 	orr.w	r3, r3, r2
 8000364:	fa21 f004 	lsr.w	r0, r1, r4
 8000368:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800036c:	fa21 f204 	lsr.w	r2, r1, r4
 8000370:	ea20 0002 	bic.w	r0, r0, r2
 8000374:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800037c:	bf08      	it	eq
 800037e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f094 0f00 	teq	r4, #0
 8000388:	d10f      	bne.n	80003aa <__aeabi_dmul+0x1c2>
 800038a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800038e:	0040      	lsls	r0, r0, #1
 8000390:	eb41 0101 	adc.w	r1, r1, r1
 8000394:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3c01      	subeq	r4, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1a6>
 800039e:	ea41 0106 	orr.w	r1, r1, r6
 80003a2:	f095 0f00 	teq	r5, #0
 80003a6:	bf18      	it	ne
 80003a8:	4770      	bxne	lr
 80003aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ae:	0052      	lsls	r2, r2, #1
 80003b0:	eb43 0303 	adc.w	r3, r3, r3
 80003b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3d01      	subeq	r5, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1c6>
 80003be:	ea43 0306 	orr.w	r3, r3, r6
 80003c2:	4770      	bx	lr
 80003c4:	ea94 0f0c 	teq	r4, ip
 80003c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003cc:	bf18      	it	ne
 80003ce:	ea95 0f0c 	teqne	r5, ip
 80003d2:	d00c      	beq.n	80003ee <__aeabi_dmul+0x206>
 80003d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d8:	bf18      	it	ne
 80003da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003de:	d1d1      	bne.n	8000384 <__aeabi_dmul+0x19c>
 80003e0:	ea81 0103 	eor.w	r1, r1, r3
 80003e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd70      	pop	{r4, r5, r6, pc}
 80003ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f2:	bf06      	itte	eq
 80003f4:	4610      	moveq	r0, r2
 80003f6:	4619      	moveq	r1, r3
 80003f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fc:	d019      	beq.n	8000432 <__aeabi_dmul+0x24a>
 80003fe:	ea94 0f0c 	teq	r4, ip
 8000402:	d102      	bne.n	800040a <__aeabi_dmul+0x222>
 8000404:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000408:	d113      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800040a:	ea95 0f0c 	teq	r5, ip
 800040e:	d105      	bne.n	800041c <__aeabi_dmul+0x234>
 8000410:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000414:	bf1c      	itt	ne
 8000416:	4610      	movne	r0, r2
 8000418:	4619      	movne	r1, r3
 800041a:	d10a      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800041c:	ea81 0103 	eor.w	r1, r1, r3
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd70      	pop	{r4, r5, r6, pc}
 8000432:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000436:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800043a:	bd70      	pop	{r4, r5, r6, pc}

0800043c <__aeabi_drsub>:
 800043c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000440:	e002      	b.n	8000448 <__adddf3>
 8000442:	bf00      	nop

08000444 <__aeabi_dsub>:
 8000444:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000448 <__adddf3>:
 8000448:	b530      	push	{r4, r5, lr}
 800044a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800044e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	bf1f      	itttt	ne
 800045e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000462:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000466:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800046e:	f000 80e2 	beq.w	8000636 <__adddf3+0x1ee>
 8000472:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000476:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047a:	bfb8      	it	lt
 800047c:	426d      	neglt	r5, r5
 800047e:	dd0c      	ble.n	800049a <__adddf3+0x52>
 8000480:	442c      	add	r4, r5
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	ea82 0000 	eor.w	r0, r2, r0
 800048e:	ea83 0101 	eor.w	r1, r3, r1
 8000492:	ea80 0202 	eor.w	r2, r0, r2
 8000496:	ea81 0303 	eor.w	r3, r1, r3
 800049a:	2d36      	cmp	r5, #54	; 0x36
 800049c:	bf88      	it	hi
 800049e:	bd30      	pophi	{r4, r5, pc}
 80004a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x70>
 80004b2:	4240      	negs	r0, r0
 80004b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c4:	d002      	beq.n	80004cc <__adddf3+0x84>
 80004c6:	4252      	negs	r2, r2
 80004c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004cc:	ea94 0f05 	teq	r4, r5
 80004d0:	f000 80a7 	beq.w	8000622 <__adddf3+0x1da>
 80004d4:	f1a4 0401 	sub.w	r4, r4, #1
 80004d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004dc:	db0d      	blt.n	80004fa <__adddf3+0xb2>
 80004de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e2:	fa22 f205 	lsr.w	r2, r2, r5
 80004e6:	1880      	adds	r0, r0, r2
 80004e8:	f141 0100 	adc.w	r1, r1, #0
 80004ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f0:	1880      	adds	r0, r0, r2
 80004f2:	fa43 f305 	asr.w	r3, r3, r5
 80004f6:	4159      	adcs	r1, r3
 80004f8:	e00e      	b.n	8000518 <__adddf3+0xd0>
 80004fa:	f1a5 0520 	sub.w	r5, r5, #32
 80004fe:	f10e 0e20 	add.w	lr, lr, #32
 8000502:	2a01      	cmp	r2, #1
 8000504:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000508:	bf28      	it	cs
 800050a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	d507      	bpl.n	800052e <__adddf3+0xe6>
 800051e:	f04f 0e00 	mov.w	lr, #0
 8000522:	f1dc 0c00 	rsbs	ip, ip, #0
 8000526:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052a:	eb6e 0101 	sbc.w	r1, lr, r1
 800052e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000532:	d31b      	bcc.n	800056c <__adddf3+0x124>
 8000534:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000538:	d30c      	bcc.n	8000554 <__adddf3+0x10c>
 800053a:	0849      	lsrs	r1, r1, #1
 800053c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000540:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000544:	f104 0401 	add.w	r4, r4, #1
 8000548:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800054c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000550:	f080 809a 	bcs.w	8000688 <__adddf3+0x240>
 8000554:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000558:	bf08      	it	eq
 800055a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800055e:	f150 0000 	adcs.w	r0, r0, #0
 8000562:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000566:	ea41 0105 	orr.w	r1, r1, r5
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000570:	4140      	adcs	r0, r0
 8000572:	eb41 0101 	adc.w	r1, r1, r1
 8000576:	3c01      	subs	r4, #1
 8000578:	bf28      	it	cs
 800057a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800057e:	d2e9      	bcs.n	8000554 <__adddf3+0x10c>
 8000580:	f091 0f00 	teq	r1, #0
 8000584:	bf04      	itt	eq
 8000586:	4601      	moveq	r1, r0
 8000588:	2000      	moveq	r0, #0
 800058a:	fab1 f381 	clz	r3, r1
 800058e:	bf08      	it	eq
 8000590:	3320      	addeq	r3, #32
 8000592:	f1a3 030b 	sub.w	r3, r3, #11
 8000596:	f1b3 0220 	subs.w	r2, r3, #32
 800059a:	da0c      	bge.n	80005b6 <__adddf3+0x16e>
 800059c:	320c      	adds	r2, #12
 800059e:	dd08      	ble.n	80005b2 <__adddf3+0x16a>
 80005a0:	f102 0c14 	add.w	ip, r2, #20
 80005a4:	f1c2 020c 	rsb	r2, r2, #12
 80005a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ac:	fa21 f102 	lsr.w	r1, r1, r2
 80005b0:	e00c      	b.n	80005cc <__adddf3+0x184>
 80005b2:	f102 0214 	add.w	r2, r2, #20
 80005b6:	bfd8      	it	le
 80005b8:	f1c2 0c20 	rsble	ip, r2, #32
 80005bc:	fa01 f102 	lsl.w	r1, r1, r2
 80005c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c4:	bfdc      	itt	le
 80005c6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ca:	4090      	lslle	r0, r2
 80005cc:	1ae4      	subs	r4, r4, r3
 80005ce:	bfa2      	ittt	ge
 80005d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d4:	4329      	orrge	r1, r5
 80005d6:	bd30      	popge	{r4, r5, pc}
 80005d8:	ea6f 0404 	mvn.w	r4, r4
 80005dc:	3c1f      	subs	r4, #31
 80005de:	da1c      	bge.n	800061a <__adddf3+0x1d2>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc0e      	bgt.n	8000602 <__adddf3+0x1ba>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0220 	rsb	r2, r4, #32
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f302 	lsl.w	r3, r1, r2
 80005f4:	ea40 0003 	orr.w	r0, r0, r3
 80005f8:	fa21 f304 	lsr.w	r3, r1, r4
 80005fc:	ea45 0103 	orr.w	r1, r5, r3
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f1c4 040c 	rsb	r4, r4, #12
 8000606:	f1c4 0220 	rsb	r2, r4, #32
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 f304 	lsl.w	r3, r1, r4
 8000612:	ea40 0003 	orr.w	r0, r0, r3
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	fa21 f004 	lsr.w	r0, r1, r4
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f094 0f00 	teq	r4, #0
 8000626:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800062a:	bf06      	itte	eq
 800062c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000630:	3401      	addeq	r4, #1
 8000632:	3d01      	subne	r5, #1
 8000634:	e74e      	b.n	80004d4 <__adddf3+0x8c>
 8000636:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063a:	bf18      	it	ne
 800063c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000640:	d029      	beq.n	8000696 <__adddf3+0x24e>
 8000642:	ea94 0f05 	teq	r4, r5
 8000646:	bf08      	it	eq
 8000648:	ea90 0f02 	teqeq	r0, r2
 800064c:	d005      	beq.n	800065a <__adddf3+0x212>
 800064e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000652:	bf04      	itt	eq
 8000654:	4619      	moveq	r1, r3
 8000656:	4610      	moveq	r0, r2
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	ea91 0f03 	teq	r1, r3
 800065e:	bf1e      	ittt	ne
 8000660:	2100      	movne	r1, #0
 8000662:	2000      	movne	r0, #0
 8000664:	bd30      	popne	{r4, r5, pc}
 8000666:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066a:	d105      	bne.n	8000678 <__adddf3+0x230>
 800066c:	0040      	lsls	r0, r0, #1
 800066e:	4149      	adcs	r1, r1
 8000670:	bf28      	it	cs
 8000672:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd30      	pop	{r4, r5, pc}
 8000678:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800067c:	bf3c      	itt	cc
 800067e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000682:	bd30      	popcc	{r4, r5, pc}
 8000684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000688:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800068c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000690:	f04f 0000 	mov.w	r0, #0
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069a:	bf1a      	itte	ne
 800069c:	4619      	movne	r1, r3
 800069e:	4610      	movne	r0, r2
 80006a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a4:	bf1c      	itt	ne
 80006a6:	460b      	movne	r3, r1
 80006a8:	4602      	movne	r2, r0
 80006aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ae:	bf06      	itte	eq
 80006b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b4:	ea91 0f03 	teqeq	r1, r3
 80006b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	bf00      	nop

080006c0 <__aeabi_ui2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f04f 0500 	mov.w	r5, #0
 80006d8:	f04f 0100 	mov.w	r1, #0
 80006dc:	e750      	b.n	8000580 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_i2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f8:	bf48      	it	mi
 80006fa:	4240      	negmi	r0, r0
 80006fc:	f04f 0100 	mov.w	r1, #0
 8000700:	e73e      	b.n	8000580 <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_f2d>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000712:	bf1f      	itttt	ne
 8000714:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000718:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800071c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000720:	4770      	bxne	lr
 8000722:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000726:	bf08      	it	eq
 8000728:	4770      	bxeq	lr
 800072a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800072e:	bf04      	itt	eq
 8000730:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000734:	4770      	bxeq	lr
 8000736:	b530      	push	{r4, r5, lr}
 8000738:	f44f 7460 	mov.w	r4, #896	; 0x380
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	e71c      	b.n	8000580 <__adddf3+0x138>
 8000746:	bf00      	nop

08000748 <__aeabi_ul2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f04f 0500 	mov.w	r5, #0
 8000756:	e00a      	b.n	800076e <__aeabi_l2d+0x16>

08000758 <__aeabi_l2d>:
 8000758:	ea50 0201 	orrs.w	r2, r0, r1
 800075c:	bf08      	it	eq
 800075e:	4770      	bxeq	lr
 8000760:	b530      	push	{r4, r5, lr}
 8000762:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000766:	d502      	bpl.n	800076e <__aeabi_l2d+0x16>
 8000768:	4240      	negs	r0, r0
 800076a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800076e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000772:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000776:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077a:	f43f aed8 	beq.w	800052e <__adddf3+0xe6>
 800077e:	f04f 0203 	mov.w	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000796:	f1c2 0320 	rsb	r3, r2, #32
 800079a:	fa00 fc03 	lsl.w	ip, r0, r3
 800079e:	fa20 f002 	lsr.w	r0, r0, r2
 80007a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007a6:	ea40 000e 	orr.w	r0, r0, lr
 80007aa:	fa21 f102 	lsr.w	r1, r1, r2
 80007ae:	4414      	add	r4, r2
 80007b0:	e6bd      	b.n	800052e <__adddf3+0xe6>
 80007b2:	bf00      	nop

080007b4 <__aeabi_d2f>:
 80007b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007bc:	bf24      	itt	cs
 80007be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007c6:	d90d      	bls.n	80007e4 <__aeabi_d2f+0x30>
 80007c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007dc:	bf08      	it	eq
 80007de:	f020 0001 	biceq.w	r0, r0, #1
 80007e2:	4770      	bx	lr
 80007e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007e8:	d121      	bne.n	800082e <__aeabi_d2f+0x7a>
 80007ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ee:	bfbc      	itt	lt
 80007f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007f4:	4770      	bxlt	lr
 80007f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007fe:	f1c2 0218 	rsb	r2, r2, #24
 8000802:	f1c2 0c20 	rsb	ip, r2, #32
 8000806:	fa10 f30c 	lsls.w	r3, r0, ip
 800080a:	fa20 f002 	lsr.w	r0, r0, r2
 800080e:	bf18      	it	ne
 8000810:	f040 0001 	orrne.w	r0, r0, #1
 8000814:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000818:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800081c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000820:	ea40 000c 	orr.w	r0, r0, ip
 8000824:	fa23 f302 	lsr.w	r3, r3, r2
 8000828:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800082c:	e7cc      	b.n	80007c8 <__aeabi_d2f+0x14>
 800082e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000832:	d107      	bne.n	8000844 <__aeabi_d2f+0x90>
 8000834:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000838:	bf1e      	ittt	ne
 800083a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800083e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000842:	4770      	bxne	lr
 8000844:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000848:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800084c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b974 	b.w	8000b54 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468e      	mov	lr, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	d14d      	bne.n	800092e <__udivmoddi4+0xaa>
 8000892:	428a      	cmp	r2, r1
 8000894:	4694      	mov	ip, r2
 8000896:	d969      	bls.n	800096c <__udivmoddi4+0xe8>
 8000898:	fab2 f282 	clz	r2, r2
 800089c:	b152      	cbz	r2, 80008b4 <__udivmoddi4+0x30>
 800089e:	fa01 f302 	lsl.w	r3, r1, r2
 80008a2:	f1c2 0120 	rsb	r1, r2, #32
 80008a6:	fa20 f101 	lsr.w	r1, r0, r1
 80008aa:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ae:	ea41 0e03 	orr.w	lr, r1, r3
 80008b2:	4094      	lsls	r4, r2
 80008b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008b8:	0c21      	lsrs	r1, r4, #16
 80008ba:	fbbe f6f8 	udiv	r6, lr, r8
 80008be:	fa1f f78c 	uxth.w	r7, ip
 80008c2:	fb08 e316 	mls	r3, r8, r6, lr
 80008c6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008ca:	fb06 f107 	mul.w	r1, r6, r7
 80008ce:	4299      	cmp	r1, r3
 80008d0:	d90a      	bls.n	80008e8 <__udivmoddi4+0x64>
 80008d2:	eb1c 0303 	adds.w	r3, ip, r3
 80008d6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008da:	f080 811f 	bcs.w	8000b1c <__udivmoddi4+0x298>
 80008de:	4299      	cmp	r1, r3
 80008e0:	f240 811c 	bls.w	8000b1c <__udivmoddi4+0x298>
 80008e4:	3e02      	subs	r6, #2
 80008e6:	4463      	add	r3, ip
 80008e8:	1a5b      	subs	r3, r3, r1
 80008ea:	b2a4      	uxth	r4, r4
 80008ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80008f0:	fb08 3310 	mls	r3, r8, r0, r3
 80008f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f8:	fb00 f707 	mul.w	r7, r0, r7
 80008fc:	42a7      	cmp	r7, r4
 80008fe:	d90a      	bls.n	8000916 <__udivmoddi4+0x92>
 8000900:	eb1c 0404 	adds.w	r4, ip, r4
 8000904:	f100 33ff 	add.w	r3, r0, #4294967295
 8000908:	f080 810a 	bcs.w	8000b20 <__udivmoddi4+0x29c>
 800090c:	42a7      	cmp	r7, r4
 800090e:	f240 8107 	bls.w	8000b20 <__udivmoddi4+0x29c>
 8000912:	4464      	add	r4, ip
 8000914:	3802      	subs	r0, #2
 8000916:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800091a:	1be4      	subs	r4, r4, r7
 800091c:	2600      	movs	r6, #0
 800091e:	b11d      	cbz	r5, 8000928 <__udivmoddi4+0xa4>
 8000920:	40d4      	lsrs	r4, r2
 8000922:	2300      	movs	r3, #0
 8000924:	e9c5 4300 	strd	r4, r3, [r5]
 8000928:	4631      	mov	r1, r6
 800092a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092e:	428b      	cmp	r3, r1
 8000930:	d909      	bls.n	8000946 <__udivmoddi4+0xc2>
 8000932:	2d00      	cmp	r5, #0
 8000934:	f000 80ef 	beq.w	8000b16 <__udivmoddi4+0x292>
 8000938:	2600      	movs	r6, #0
 800093a:	e9c5 0100 	strd	r0, r1, [r5]
 800093e:	4630      	mov	r0, r6
 8000940:	4631      	mov	r1, r6
 8000942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000946:	fab3 f683 	clz	r6, r3
 800094a:	2e00      	cmp	r6, #0
 800094c:	d14a      	bne.n	80009e4 <__udivmoddi4+0x160>
 800094e:	428b      	cmp	r3, r1
 8000950:	d302      	bcc.n	8000958 <__udivmoddi4+0xd4>
 8000952:	4282      	cmp	r2, r0
 8000954:	f200 80f9 	bhi.w	8000b4a <__udivmoddi4+0x2c6>
 8000958:	1a84      	subs	r4, r0, r2
 800095a:	eb61 0303 	sbc.w	r3, r1, r3
 800095e:	2001      	movs	r0, #1
 8000960:	469e      	mov	lr, r3
 8000962:	2d00      	cmp	r5, #0
 8000964:	d0e0      	beq.n	8000928 <__udivmoddi4+0xa4>
 8000966:	e9c5 4e00 	strd	r4, lr, [r5]
 800096a:	e7dd      	b.n	8000928 <__udivmoddi4+0xa4>
 800096c:	b902      	cbnz	r2, 8000970 <__udivmoddi4+0xec>
 800096e:	deff      	udf	#255	; 0xff
 8000970:	fab2 f282 	clz	r2, r2
 8000974:	2a00      	cmp	r2, #0
 8000976:	f040 8092 	bne.w	8000a9e <__udivmoddi4+0x21a>
 800097a:	eba1 010c 	sub.w	r1, r1, ip
 800097e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000982:	fa1f fe8c 	uxth.w	lr, ip
 8000986:	2601      	movs	r6, #1
 8000988:	0c20      	lsrs	r0, r4, #16
 800098a:	fbb1 f3f7 	udiv	r3, r1, r7
 800098e:	fb07 1113 	mls	r1, r7, r3, r1
 8000992:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000996:	fb0e f003 	mul.w	r0, lr, r3
 800099a:	4288      	cmp	r0, r1
 800099c:	d908      	bls.n	80009b0 <__udivmoddi4+0x12c>
 800099e:	eb1c 0101 	adds.w	r1, ip, r1
 80009a2:	f103 38ff 	add.w	r8, r3, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0x12a>
 80009a8:	4288      	cmp	r0, r1
 80009aa:	f200 80cb 	bhi.w	8000b44 <__udivmoddi4+0x2c0>
 80009ae:	4643      	mov	r3, r8
 80009b0:	1a09      	subs	r1, r1, r0
 80009b2:	b2a4      	uxth	r4, r4
 80009b4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009b8:	fb07 1110 	mls	r1, r7, r0, r1
 80009bc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009c0:	fb0e fe00 	mul.w	lr, lr, r0
 80009c4:	45a6      	cmp	lr, r4
 80009c6:	d908      	bls.n	80009da <__udivmoddi4+0x156>
 80009c8:	eb1c 0404 	adds.w	r4, ip, r4
 80009cc:	f100 31ff 	add.w	r1, r0, #4294967295
 80009d0:	d202      	bcs.n	80009d8 <__udivmoddi4+0x154>
 80009d2:	45a6      	cmp	lr, r4
 80009d4:	f200 80bb 	bhi.w	8000b4e <__udivmoddi4+0x2ca>
 80009d8:	4608      	mov	r0, r1
 80009da:	eba4 040e 	sub.w	r4, r4, lr
 80009de:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009e2:	e79c      	b.n	800091e <__udivmoddi4+0x9a>
 80009e4:	f1c6 0720 	rsb	r7, r6, #32
 80009e8:	40b3      	lsls	r3, r6
 80009ea:	fa22 fc07 	lsr.w	ip, r2, r7
 80009ee:	ea4c 0c03 	orr.w	ip, ip, r3
 80009f2:	fa20 f407 	lsr.w	r4, r0, r7
 80009f6:	fa01 f306 	lsl.w	r3, r1, r6
 80009fa:	431c      	orrs	r4, r3
 80009fc:	40f9      	lsrs	r1, r7
 80009fe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a02:	fa00 f306 	lsl.w	r3, r0, r6
 8000a06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a0a:	0c20      	lsrs	r0, r4, #16
 8000a0c:	fa1f fe8c 	uxth.w	lr, ip
 8000a10:	fb09 1118 	mls	r1, r9, r8, r1
 8000a14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a18:	fb08 f00e 	mul.w	r0, r8, lr
 8000a1c:	4288      	cmp	r0, r1
 8000a1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a22:	d90b      	bls.n	8000a3c <__udivmoddi4+0x1b8>
 8000a24:	eb1c 0101 	adds.w	r1, ip, r1
 8000a28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a2c:	f080 8088 	bcs.w	8000b40 <__udivmoddi4+0x2bc>
 8000a30:	4288      	cmp	r0, r1
 8000a32:	f240 8085 	bls.w	8000b40 <__udivmoddi4+0x2bc>
 8000a36:	f1a8 0802 	sub.w	r8, r8, #2
 8000a3a:	4461      	add	r1, ip
 8000a3c:	1a09      	subs	r1, r1, r0
 8000a3e:	b2a4      	uxth	r4, r4
 8000a40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a44:	fb09 1110 	mls	r1, r9, r0, r1
 8000a48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a50:	458e      	cmp	lr, r1
 8000a52:	d908      	bls.n	8000a66 <__udivmoddi4+0x1e2>
 8000a54:	eb1c 0101 	adds.w	r1, ip, r1
 8000a58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a5c:	d26c      	bcs.n	8000b38 <__udivmoddi4+0x2b4>
 8000a5e:	458e      	cmp	lr, r1
 8000a60:	d96a      	bls.n	8000b38 <__udivmoddi4+0x2b4>
 8000a62:	3802      	subs	r0, #2
 8000a64:	4461      	add	r1, ip
 8000a66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a6e:	eba1 010e 	sub.w	r1, r1, lr
 8000a72:	42a1      	cmp	r1, r4
 8000a74:	46c8      	mov	r8, r9
 8000a76:	46a6      	mov	lr, r4
 8000a78:	d356      	bcc.n	8000b28 <__udivmoddi4+0x2a4>
 8000a7a:	d053      	beq.n	8000b24 <__udivmoddi4+0x2a0>
 8000a7c:	b15d      	cbz	r5, 8000a96 <__udivmoddi4+0x212>
 8000a7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a82:	eb61 010e 	sbc.w	r1, r1, lr
 8000a86:	fa01 f707 	lsl.w	r7, r1, r7
 8000a8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a8e:	40f1      	lsrs	r1, r6
 8000a90:	431f      	orrs	r7, r3
 8000a92:	e9c5 7100 	strd	r7, r1, [r5]
 8000a96:	2600      	movs	r6, #0
 8000a98:	4631      	mov	r1, r6
 8000a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9e:	f1c2 0320 	rsb	r3, r2, #32
 8000aa2:	40d8      	lsrs	r0, r3
 8000aa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000aac:	4091      	lsls	r1, r2
 8000aae:	4301      	orrs	r1, r0
 8000ab0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab4:	fa1f fe8c 	uxth.w	lr, ip
 8000ab8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000abc:	fb07 3610 	mls	r6, r7, r0, r3
 8000ac0:	0c0b      	lsrs	r3, r1, #16
 8000ac2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ac6:	fb00 f60e 	mul.w	r6, r0, lr
 8000aca:	429e      	cmp	r6, r3
 8000acc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ad0:	d908      	bls.n	8000ae4 <__udivmoddi4+0x260>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ada:	d22f      	bcs.n	8000b3c <__udivmoddi4+0x2b8>
 8000adc:	429e      	cmp	r6, r3
 8000ade:	d92d      	bls.n	8000b3c <__udivmoddi4+0x2b8>
 8000ae0:	3802      	subs	r0, #2
 8000ae2:	4463      	add	r3, ip
 8000ae4:	1b9b      	subs	r3, r3, r6
 8000ae6:	b289      	uxth	r1, r1
 8000ae8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000aec:	fb07 3316 	mls	r3, r7, r6, r3
 8000af0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000af4:	fb06 f30e 	mul.w	r3, r6, lr
 8000af8:	428b      	cmp	r3, r1
 8000afa:	d908      	bls.n	8000b0e <__udivmoddi4+0x28a>
 8000afc:	eb1c 0101 	adds.w	r1, ip, r1
 8000b00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b04:	d216      	bcs.n	8000b34 <__udivmoddi4+0x2b0>
 8000b06:	428b      	cmp	r3, r1
 8000b08:	d914      	bls.n	8000b34 <__udivmoddi4+0x2b0>
 8000b0a:	3e02      	subs	r6, #2
 8000b0c:	4461      	add	r1, ip
 8000b0e:	1ac9      	subs	r1, r1, r3
 8000b10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b14:	e738      	b.n	8000988 <__udivmoddi4+0x104>
 8000b16:	462e      	mov	r6, r5
 8000b18:	4628      	mov	r0, r5
 8000b1a:	e705      	b.n	8000928 <__udivmoddi4+0xa4>
 8000b1c:	4606      	mov	r6, r0
 8000b1e:	e6e3      	b.n	80008e8 <__udivmoddi4+0x64>
 8000b20:	4618      	mov	r0, r3
 8000b22:	e6f8      	b.n	8000916 <__udivmoddi4+0x92>
 8000b24:	454b      	cmp	r3, r9
 8000b26:	d2a9      	bcs.n	8000a7c <__udivmoddi4+0x1f8>
 8000b28:	ebb9 0802 	subs.w	r8, r9, r2
 8000b2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b30:	3801      	subs	r0, #1
 8000b32:	e7a3      	b.n	8000a7c <__udivmoddi4+0x1f8>
 8000b34:	4646      	mov	r6, r8
 8000b36:	e7ea      	b.n	8000b0e <__udivmoddi4+0x28a>
 8000b38:	4620      	mov	r0, r4
 8000b3a:	e794      	b.n	8000a66 <__udivmoddi4+0x1e2>
 8000b3c:	4640      	mov	r0, r8
 8000b3e:	e7d1      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b40:	46d0      	mov	r8, sl
 8000b42:	e77b      	b.n	8000a3c <__udivmoddi4+0x1b8>
 8000b44:	3b02      	subs	r3, #2
 8000b46:	4461      	add	r1, ip
 8000b48:	e732      	b.n	80009b0 <__udivmoddi4+0x12c>
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	e709      	b.n	8000962 <__udivmoddi4+0xde>
 8000b4e:	4464      	add	r4, ip
 8000b50:	3802      	subs	r0, #2
 8000b52:	e742      	b.n	80009da <__udivmoddi4+0x156>

08000b54 <__aeabi_idiv0>:
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <menu_vars>:
uint8_t*  menu_vars(char* menu_string,  uint8_t var_index   ){ // in comes name and index , out goes variable reference pointer
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	70fb      	strb	r3, [r7, #3]


	char menu_string2[8];
	var_index=var_index&15;    //set var index ie  LFO[1].rate
 8000b64:	78fb      	ldrb	r3, [r7, #3]
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	70fb      	strb	r3, [r7, #3]
	uint8_t menu_countr=0; //  menu vars
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	75fb      	strb	r3, [r7, #23]
	uint8_t *menu_vars_var1=NULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	613b      	str	r3, [r7, #16]

	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000b74:	4bb7      	ldr	r3, [pc, #732]	; (8000e54 <menu_vars+0x2fc>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	801a      	strh	r2, [r3, #0]
 8000b7a:	e01d      	b.n	8000bb8 <menu_vars+0x60>

		memcpy(menu_string2, menu_titles_final[i], 8);  // copy title list
 8000b7c:	4bb5      	ldr	r3, [pc, #724]	; (8000e54 <menu_vars+0x2fc>)
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4bb5      	ldr	r3, [pc, #724]	; (8000e58 <menu_vars+0x300>)
 8000b84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b88:	f107 0308 	add.w	r3, r7, #8
 8000b8c:	6810      	ldr	r0, [r2, #0]
 8000b8e:	6851      	ldr	r1, [r2, #4]
 8000b90:	c303      	stmia	r3!, {r0, r1}
		if ((strncmp(menu_string, menu_string2, 8)) == 0) {
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	2208      	movs	r2, #8
 8000b98:	4619      	mov	r1, r3
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f00a faa2 	bl	800b0e4 <strncmp>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d102      	bne.n	8000bac <menu_vars+0x54>
			menu_countr = i;
 8000ba6:	4bab      	ldr	r3, [pc, #684]	; (8000e54 <menu_vars+0x2fc>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000bac:	4ba9      	ldr	r3, [pc, #676]	; (8000e54 <menu_vars+0x2fc>)
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	4ba7      	ldr	r3, [pc, #668]	; (8000e54 <menu_vars+0x2fc>)
 8000bb6:	801a      	strh	r2, [r3, #0]
 8000bb8:	4ba6      	ldr	r3, [pc, #664]	; (8000e54 <menu_vars+0x2fc>)
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	2b2b      	cmp	r3, #43	; 0x2b
 8000bbe:	d9dd      	bls.n	8000b7c <menu_vars+0x24>

		}
	}
	menu_vars_ref=menu_countr ;
 8000bc0:	4aa6      	ldr	r2, [pc, #664]	; (8000e5c <menu_vars+0x304>)
 8000bc2:	7dfb      	ldrb	r3, [r7, #23]
 8000bc4:	7013      	strb	r3, [r2, #0]
	if (var_index>menu_vars_index_limit[menu_countr]) var_index=menu_vars_index_limit[menu_countr];   // make sure it stays right
 8000bc6:	7dfb      	ldrb	r3, [r7, #23]
 8000bc8:	4aa5      	ldr	r2, [pc, #660]	; (8000e60 <menu_vars+0x308>)
 8000bca:	5cd3      	ldrb	r3, [r2, r3]
 8000bcc:	78fa      	ldrb	r2, [r7, #3]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d903      	bls.n	8000bda <menu_vars+0x82>
 8000bd2:	7dfb      	ldrb	r3, [r7, #23]
 8000bd4:	4aa2      	ldr	r2, [pc, #648]	; (8000e60 <menu_vars+0x308>)
 8000bd6:	5cd3      	ldrb	r3, [r2, r3]
 8000bd8:	70fb      	strb	r3, [r7, #3]

	switch(menu_countr){
 8000bda:	7dfb      	ldrb	r3, [r7, #23]
 8000bdc:	2b2b      	cmp	r3, #43	; 0x2b
 8000bde:	f200 81d8 	bhi.w	8000f92 <menu_vars+0x43a>
 8000be2:	a201      	add	r2, pc, #4	; (adr r2, 8000be8 <menu_vars+0x90>)
 8000be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be8:	08000c99 	.word	0x08000c99
 8000bec:	08000c9f 	.word	0x08000c9f
 8000bf0:	08000cb1 	.word	0x08000cb1
 8000bf4:	08000cc5 	.word	0x08000cc5
 8000bf8:	08000cd9 	.word	0x08000cd9
 8000bfc:	08000ced 	.word	0x08000ced
 8000c00:	08000d01 	.word	0x08000d01
 8000c04:	08000d07 	.word	0x08000d07
 8000c08:	08000d19 	.word	0x08000d19
 8000c0c:	08000d2d 	.word	0x08000d2d
 8000c10:	08000d41 	.word	0x08000d41
 8000c14:	08000d55 	.word	0x08000d55
 8000c18:	08000d5b 	.word	0x08000d5b
 8000c1c:	08000d6d 	.word	0x08000d6d
 8000c20:	08000d81 	.word	0x08000d81
 8000c24:	08000d95 	.word	0x08000d95
 8000c28:	08000da9 	.word	0x08000da9
 8000c2c:	08000dbd 	.word	0x08000dbd
 8000c30:	08000dd1 	.word	0x08000dd1
 8000c34:	08000de5 	.word	0x08000de5
 8000c38:	08000df9 	.word	0x08000df9
 8000c3c:	08000e0d 	.word	0x08000e0d
 8000c40:	08000e13 	.word	0x08000e13
 8000c44:	08000e19 	.word	0x08000e19
 8000c48:	08000e1f 	.word	0x08000e1f
 8000c4c:	08000e2b 	.word	0x08000e2b
 8000c50:	08000e39 	.word	0x08000e39
 8000c54:	08000e47 	.word	0x08000e47
 8000c58:	08000e81 	.word	0x08000e81
 8000c5c:	08000e8f 	.word	0x08000e8f
 8000c60:	08000e9d 	.word	0x08000e9d
 8000c64:	08000eab 	.word	0x08000eab
 8000c68:	08000eb9 	.word	0x08000eb9
 8000c6c:	08000ec7 	.word	0x08000ec7
 8000c70:	08000ed5 	.word	0x08000ed5
 8000c74:	08000ee3 	.word	0x08000ee3
 8000c78:	08000ef7 	.word	0x08000ef7
 8000c7c:	08000f09 	.word	0x08000f09
 8000c80:	08000f1d 	.word	0x08000f1d
 8000c84:	08000f31 	.word	0x08000f31
 8000c88:	08000f45 	.word	0x08000f45
 8000c8c:	08000f57 	.word	0x08000f57
 8000c90:	08000f6b 	.word	0x08000f6b
 8000c94:	08000f7f 	.word	0x08000f7f
	case 0:     menu_vars_var1= NULL; break;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	e17c      	b.n	8000f98 <menu_vars+0x440>
	case 1:     menu_vars_var1= &LFO[var_index].rate   ; break;
 8000c9e:	78fa      	ldrb	r2, [r7, #3]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	011b      	lsls	r3, r3, #4
 8000ca4:	4413      	add	r3, r2
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	4a6e      	ldr	r2, [pc, #440]	; (8000e64 <menu_vars+0x30c>)
 8000caa:	4413      	add	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	e173      	b.n	8000f98 <menu_vars+0x440>
	case 2:     menu_vars_var1= &LFO[var_index].depth    ; break;
 8000cb0:	78fa      	ldrb	r2, [r7, #3]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	011b      	lsls	r3, r3, #4
 8000cb6:	4413      	add	r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	4a6a      	ldr	r2, [pc, #424]	; (8000e64 <menu_vars+0x30c>)
 8000cbc:	4413      	add	r3, r2
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	e169      	b.n	8000f98 <menu_vars+0x440>
	case 3:     menu_vars_var1= &LFO[var_index].delay    ; break;
 8000cc4:	78fa      	ldrb	r2, [r7, #3]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	011b      	lsls	r3, r3, #4
 8000cca:	4413      	add	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4a65      	ldr	r2, [pc, #404]	; (8000e64 <menu_vars+0x30c>)
 8000cd0:	4413      	add	r3, r2
 8000cd2:	3304      	adds	r3, #4
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	e15f      	b.n	8000f98 <menu_vars+0x440>
	case 4:     menu_vars_var1= &LFO[var_index].offset    ; break;
 8000cd8:	78fa      	ldrb	r2, [r7, #3]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	011b      	lsls	r3, r3, #4
 8000cde:	4413      	add	r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4a60      	ldr	r2, [pc, #384]	; (8000e64 <menu_vars+0x30c>)
 8000ce4:	4413      	add	r3, r2
 8000ce6:	3303      	adds	r3, #3
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	e155      	b.n	8000f98 <menu_vars+0x440>
	case 5:     menu_vars_var1= &patch[var_index].target    ; break;
 8000cec:	78fa      	ldrb	r2, [r7, #3]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	4413      	add	r3, r2
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	4a5c      	ldr	r2, [pc, #368]	; (8000e68 <menu_vars+0x310>)
 8000cf8:	4413      	add	r3, r2
 8000cfa:	3304      	adds	r3, #4
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	e14b      	b.n	8000f98 <menu_vars+0x440>
	case 6:     menu_vars_var1= NULL   ; break;
 8000d00:	2300      	movs	r3, #0
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	e148      	b.n	8000f98 <menu_vars+0x440>
	case 7:     menu_vars_var1= &ADSR[var_index].attack    ; break;
 8000d06:	78fb      	ldrb	r3, [r7, #3]
 8000d08:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d0c:	fb02 f303 	mul.w	r3, r2, r3
 8000d10:	4a56      	ldr	r2, [pc, #344]	; (8000e6c <menu_vars+0x314>)
 8000d12:	4413      	add	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	e13f      	b.n	8000f98 <menu_vars+0x440>
	case 8:     menu_vars_var1= &ADSR[var_index].decay    ; break;
 8000d18:	78fb      	ldrb	r3, [r7, #3]
 8000d1a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d1e:	fb02 f303 	mul.w	r3, r2, r3
 8000d22:	4a52      	ldr	r2, [pc, #328]	; (8000e6c <menu_vars+0x314>)
 8000d24:	4413      	add	r3, r2
 8000d26:	3301      	adds	r3, #1
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	e135      	b.n	8000f98 <menu_vars+0x440>
	case 9:     menu_vars_var1= &ADSR[var_index].sustain    ; break;
 8000d2c:	78fb      	ldrb	r3, [r7, #3]
 8000d2e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d32:	fb02 f303 	mul.w	r3, r2, r3
 8000d36:	4a4d      	ldr	r2, [pc, #308]	; (8000e6c <menu_vars+0x314>)
 8000d38:	4413      	add	r3, r2
 8000d3a:	3302      	adds	r3, #2
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	e12b      	b.n	8000f98 <menu_vars+0x440>
	case 10:     menu_vars_var1= &ADSR[var_index].release    ; break;
 8000d40:	78fb      	ldrb	r3, [r7, #3]
 8000d42:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d46:	fb02 f303 	mul.w	r3, r2, r3
 8000d4a:	4a48      	ldr	r2, [pc, #288]	; (8000e6c <menu_vars+0x314>)
 8000d4c:	4413      	add	r3, r2
 8000d4e:	3303      	adds	r3, #3
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	e121      	b.n	8000f98 <menu_vars+0x440>
	case 11:     menu_vars_var1= NULL  ; break;
 8000d54:	2300      	movs	r3, #0
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	e11e      	b.n	8000f98 <menu_vars+0x440>
	case 12:     menu_vars_var1= &note[var_index].osc    ; break;
 8000d5a:	78fa      	ldrb	r2, [r7, #3]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	00db      	lsls	r3, r3, #3
 8000d60:	1a9b      	subs	r3, r3, r2
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	4a42      	ldr	r2, [pc, #264]	; (8000e70 <menu_vars+0x318>)
 8000d66:	4413      	add	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	e115      	b.n	8000f98 <menu_vars+0x440>
	case 13:     menu_vars_var1= &note[var_index].osc2    ; break;
 8000d6c:	78fa      	ldrb	r2, [r7, #3]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	1a9b      	subs	r3, r3, r2
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	4a3e      	ldr	r2, [pc, #248]	; (8000e70 <menu_vars+0x318>)
 8000d78:	4413      	add	r3, r2
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	e10b      	b.n	8000f98 <menu_vars+0x440>
	case 14:     menu_vars_var1= &note[var_index].pitch    ; break;
 8000d80:	78fa      	ldrb	r2, [r7, #3]
 8000d82:	4613      	mov	r3, r2
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	1a9b      	subs	r3, r3, r2
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	4a39      	ldr	r2, [pc, #228]	; (8000e70 <menu_vars+0x318>)
 8000d8c:	4413      	add	r3, r2
 8000d8e:	3302      	adds	r3, #2
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	e101      	b.n	8000f98 <menu_vars+0x440>
	case 15:     menu_vars_var1= &note[var_index].duration    ; break;
 8000d94:	78fa      	ldrb	r2, [r7, #3]
 8000d96:	4613      	mov	r3, r2
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	1a9b      	subs	r3, r3, r2
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	4a34      	ldr	r2, [pc, #208]	; (8000e70 <menu_vars+0x318>)
 8000da0:	4413      	add	r3, r2
 8000da2:	3303      	adds	r3, #3
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	e0f7      	b.n	8000f98 <menu_vars+0x440>
	case 16:     menu_vars_var1= &note[var_index].position    ; break;
 8000da8:	78fa      	ldrb	r2, [r7, #3]
 8000daa:	4613      	mov	r3, r2
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	1a9b      	subs	r3, r3, r2
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	4a2f      	ldr	r2, [pc, #188]	; (8000e70 <menu_vars+0x318>)
 8000db4:	4413      	add	r3, r2
 8000db6:	3304      	adds	r3, #4
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	e0ed      	b.n	8000f98 <menu_vars+0x440>
	case 17:     menu_vars_var1= &note[var_index].transpose    ; break;
 8000dbc:	78fa      	ldrb	r2, [r7, #3]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	1a9b      	subs	r3, r3, r2
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	4a2a      	ldr	r2, [pc, #168]	; (8000e70 <menu_vars+0x318>)
 8000dc8:	4413      	add	r3, r2
 8000dca:	3305      	adds	r3, #5
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	e0e3      	b.n	8000f98 <menu_vars+0x440>
	case 18:     menu_vars_var1= &note[var_index].timeshift    ; break;
 8000dd0:	78fa      	ldrb	r2, [r7, #3]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	4a25      	ldr	r2, [pc, #148]	; (8000e70 <menu_vars+0x318>)
 8000ddc:	4413      	add	r3, r2
 8000dde:	3306      	adds	r3, #6
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	e0d9      	b.n	8000f98 <menu_vars+0x440>
	case 19:     menu_vars_var1= &note[var_index].velocity   ; break; // 16 bit
 8000de4:	78fa      	ldrb	r2, [r7, #3]
 8000de6:	4613      	mov	r3, r2
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	1a9b      	subs	r3, r3, r2
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	4a20      	ldr	r2, [pc, #128]	; (8000e70 <menu_vars+0x318>)
 8000df0:	4413      	add	r3, r2
 8000df2:	3307      	adds	r3, #7
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	e0cf      	b.n	8000f98 <menu_vars+0x440>
	case 20:     menu_vars_var1= &note[var_index].detune    ; break;
 8000df8:	78fa      	ldrb	r2, [r7, #3]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	1a9b      	subs	r3, r3, r2
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	3308      	adds	r3, #8
 8000e04:	4a1a      	ldr	r2, [pc, #104]	; (8000e70 <menu_vars+0x318>)
 8000e06:	4413      	add	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	e0c5      	b.n	8000f98 <menu_vars+0x440>
	case 21:     menu_vars_var1= NULL   ; break;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	e0c2      	b.n	8000f98 <menu_vars+0x440>
	case 22:     menu_vars_var1= &seq.pos    ; break;
 8000e12:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <menu_vars+0x31c>)
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	e0bf      	b.n	8000f98 <menu_vars+0x440>
	case 23:     menu_vars_var1= &seq.tempo    ; break;
 8000e18:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <menu_vars+0x320>)
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	e0bc      	b.n	8000f98 <menu_vars+0x440>
	case 24:     menu_vars_var1= &seq.notes1[var_index]   ; break;
 8000e1e:	78fb      	ldrb	r3, [r7, #3]
 8000e20:	4a14      	ldr	r2, [pc, #80]	; (8000e74 <menu_vars+0x31c>)
 8000e22:	4413      	add	r3, r2
 8000e24:	3302      	adds	r3, #2
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	e0b6      	b.n	8000f98 <menu_vars+0x440>
	case 25:     menu_vars_var1= &seq.notes2[var_index]   ; break;
 8000e2a:	78fb      	ldrb	r3, [r7, #3]
 8000e2c:	3310      	adds	r3, #16
 8000e2e:	4a11      	ldr	r2, [pc, #68]	; (8000e74 <menu_vars+0x31c>)
 8000e30:	4413      	add	r3, r2
 8000e32:	3303      	adds	r3, #3
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	e0af      	b.n	8000f98 <menu_vars+0x440>
	case 26:     menu_vars_var1= &seq.loop [var_index]    ; break;
 8000e38:	78fb      	ldrb	r3, [r7, #3]
 8000e3a:	3320      	adds	r3, #32
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <menu_vars+0x31c>)
 8000e3e:	4413      	add	r3, r2
 8000e40:	3304      	adds	r3, #4
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	e0a8      	b.n	8000f98 <menu_vars+0x440>
	case 27: 	menu_vars_var1=&filter[var_index].cutoff_1 ;break;
 8000e46:	78fb      	ldrb	r3, [r7, #3]
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	4a0c      	ldr	r2, [pc, #48]	; (8000e7c <menu_vars+0x324>)
 8000e4c:	4413      	add	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	e0a2      	b.n	8000f98 <menu_vars+0x440>
 8000e52:	bf00      	nop
 8000e54:	20000876 	.word	0x20000876
 8000e58:	20000270 	.word	0x20000270
 8000e5c:	20006995 	.word	0x20006995
 8000e60:	0800bc84 	.word	0x0800bc84
 8000e64:	2000341c 	.word	0x2000341c
 8000e68:	200041bc 	.word	0x200041bc
 8000e6c:	20003700 	.word	0x20003700
 8000e70:	200001b8 	.word	0x200001b8
 8000e74:	2000418c 	.word	0x2000418c
 8000e78:	2000418d 	.word	0x2000418d
 8000e7c:	20000244 	.word	0x20000244
	case 28: 	menu_vars_var1=&filter[var_index].cutoff_2 ;break;  // fine tune
 8000e80:	78fb      	ldrb	r3, [r7, #3]
 8000e82:	00db      	lsls	r3, r3, #3
 8000e84:	4a47      	ldr	r2, [pc, #284]	; (8000fa4 <menu_vars+0x44c>)
 8000e86:	4413      	add	r3, r2
 8000e88:	3301      	adds	r3, #1
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	e084      	b.n	8000f98 <menu_vars+0x440>
	case 29: 	menu_vars_var1=&filter[var_index].resonance ;break;
 8000e8e:	78fb      	ldrb	r3, [r7, #3]
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	4a44      	ldr	r2, [pc, #272]	; (8000fa4 <menu_vars+0x44c>)
 8000e94:	4413      	add	r3, r2
 8000e96:	3302      	adds	r3, #2
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	e07d      	b.n	8000f98 <menu_vars+0x440>
	case 30: 	menu_vars_var1=&filter[var_index].q_level  ;break;
 8000e9c:	78fb      	ldrb	r3, [r7, #3]
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	4a40      	ldr	r2, [pc, #256]	; (8000fa4 <menu_vars+0x44c>)
 8000ea2:	4413      	add	r3, r2
 8000ea4:	3303      	adds	r3, #3
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	e076      	b.n	8000f98 <menu_vars+0x440>
	case 31: 	menu_vars_var1=&filter[var_index].level;break;
 8000eaa:	78fb      	ldrb	r3, [r7, #3]
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	4a3d      	ldr	r2, [pc, #244]	; (8000fa4 <menu_vars+0x44c>)
 8000eb0:	4413      	add	r3, r2
 8000eb2:	3304      	adds	r3, #4
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	e06f      	b.n	8000f98 <menu_vars+0x440>
	case 32: 	menu_vars_var1=&filter[var_index].feedback ;break;
 8000eb8:	78fb      	ldrb	r3, [r7, #3]
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	4a39      	ldr	r2, [pc, #228]	; (8000fa4 <menu_vars+0x44c>)
 8000ebe:	4413      	add	r3, r2
 8000ec0:	3307      	adds	r3, #7
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	e068      	b.n	8000f98 <menu_vars+0x440>
	case 33: 	menu_vars_var1=&filter[var_index].out_mix ;break;
 8000ec6:	78fb      	ldrb	r3, [r7, #3]
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	4a36      	ldr	r2, [pc, #216]	; (8000fa4 <menu_vars+0x44c>)
 8000ecc:	4413      	add	r3, r2
 8000ece:	3306      	adds	r3, #6
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	e061      	b.n	8000f98 <menu_vars+0x440>
	case 34: 	menu_vars_var1=&filter[var_index].poles ;break;
 8000ed4:	78fb      	ldrb	r3, [r7, #3]
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	4a32      	ldr	r2, [pc, #200]	; (8000fa4 <menu_vars+0x44c>)
 8000eda:	4413      	add	r3, r2
 8000edc:	3305      	adds	r3, #5
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	e05a      	b.n	8000f98 <menu_vars+0x440>
	case 35:     menu_vars_var1= &patch[var_index].target_index    ; break;
 8000ee2:	78fa      	ldrb	r2, [r7, #3]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	4413      	add	r3, r2
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	4a2e      	ldr	r2, [pc, #184]	; (8000fa8 <menu_vars+0x450>)
 8000eee:	4413      	add	r3, r2
 8000ef0:	3305      	adds	r3, #5
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	e050      	b.n	8000f98 <menu_vars+0x440>
	case 36: 	menu_vars_var1=&patch[var_index].input1 ;break;
 8000ef6:	78fa      	ldrb	r2, [r7, #3]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4413      	add	r3, r2
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	4a29      	ldr	r2, [pc, #164]	; (8000fa8 <menu_vars+0x450>)
 8000f02:	4413      	add	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	e047      	b.n	8000f98 <menu_vars+0x440>
	case 37: 	menu_vars_var1=&patch[var_index].input2 ;break;
 8000f08:	78fa      	ldrb	r2, [r7, #3]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	4a25      	ldr	r2, [pc, #148]	; (8000fa8 <menu_vars+0x450>)
 8000f14:	4413      	add	r3, r2
 8000f16:	3301      	adds	r3, #1
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	e03d      	b.n	8000f98 <menu_vars+0x440>
	case 38: 	menu_vars_var1=&patch[var_index].in_mix ;break;
 8000f1c:	78fa      	ldrb	r2, [r7, #3]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	4413      	add	r3, r2
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	4a20      	ldr	r2, [pc, #128]	; (8000fa8 <menu_vars+0x450>)
 8000f28:	4413      	add	r3, r2
 8000f2a:	3302      	adds	r3, #2
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	e033      	b.n	8000f98 <menu_vars+0x440>
	case 39: 	menu_vars_var1=&patch[var_index].in_offset ;break;
 8000f30:	78fa      	ldrb	r2, [r7, #3]
 8000f32:	4613      	mov	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4413      	add	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	4a1b      	ldr	r2, [pc, #108]	; (8000fa8 <menu_vars+0x450>)
 8000f3c:	4413      	add	r3, r2
 8000f3e:	3303      	adds	r3, #3
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	e029      	b.n	8000f98 <menu_vars+0x440>
	case 40:     menu_vars_var1= &LFO_slave1[var_index].rate   ; break;
 8000f44:	78fa      	ldrb	r2, [r7, #3]
 8000f46:	4613      	mov	r3, r2
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	4413      	add	r3, r2
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	4a17      	ldr	r2, [pc, #92]	; (8000fac <menu_vars+0x454>)
 8000f50:	4413      	add	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	e020      	b.n	8000f98 <menu_vars+0x440>
	case 41:     menu_vars_var1= &LFO_slave1[var_index].depth    ; break;
 8000f56:	78fa      	ldrb	r2, [r7, #3]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	4413      	add	r3, r2
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	4a12      	ldr	r2, [pc, #72]	; (8000fac <menu_vars+0x454>)
 8000f62:	4413      	add	r3, r2
 8000f64:	3301      	adds	r3, #1
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	e016      	b.n	8000f98 <menu_vars+0x440>
	case 42:     menu_vars_var1= &LFO_slave1[var_index].delay    ; break;
 8000f6a:	78fa      	ldrb	r2, [r7, #3]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4413      	add	r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	4a0d      	ldr	r2, [pc, #52]	; (8000fac <menu_vars+0x454>)
 8000f76:	4413      	add	r3, r2
 8000f78:	3304      	adds	r3, #4
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	e00c      	b.n	8000f98 <menu_vars+0x440>
	case 43:     menu_vars_var1= &LFO_slave1[var_index].offset    ; break;
 8000f7e:	78fa      	ldrb	r2, [r7, #3]
 8000f80:	4613      	mov	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	4413      	add	r3, r2
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	4a08      	ldr	r2, [pc, #32]	; (8000fac <menu_vars+0x454>)
 8000f8a:	4413      	add	r3, r2
 8000f8c:	3303      	adds	r3, #3
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	e002      	b.n	8000f98 <menu_vars+0x440>
	default :		menu_vars_var1= NULL   ; break;
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	bf00      	nop

	}
    // copy back address  ,ok
	// return the result number for later reference
	//menu_vars_var= menu_vars_var1;
	return menu_vars_var1;
 8000f98:	693b      	ldr	r3, [r7, #16]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3718      	adds	r7, #24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000244 	.word	0x20000244
 8000fa8:	200041bc 	.word	0x200041bc
 8000fac:	200036c4 	.word	0x200036c4

08000fb0 <menu_parser>:



void menu_parser(void){          // parse out menus , shouldn't have to run (in theory) once filled ,only for feedback pointer maybe
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0


	char menu_string[8]="xxxxxxxx";   // incoming string holder (single)
 8000fb6:	4a6c      	ldr	r2, [pc, #432]	; (8001168 <menu_parser+0x1b8>)
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fc0:	e883 0003 	stmia.w	r3, {r0, r1}
	char menu_string2[8]="hhhhhhhh";
 8000fc4:	4a69      	ldr	r2, [pc, #420]	; (800116c <menu_parser+0x1bc>)
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fcc:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t string_counter=0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	75fb      	strb	r3, [r7, #23]

	uint16_t menu_searchsize=sizeof(default_menu)-8;   // this should fairly big always , leave gap at the end , atm 480
 8000fd4:	f240 53d6 	movw	r3, #1494	; 0x5d6
 8000fd8:	82bb      	strh	r3, [r7, #20]


	if (string_search>menu_searchsize) {                    //this is ok
 8000fda:	4b65      	ldr	r3, [pc, #404]	; (8001170 <menu_parser+0x1c0>)
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	8aba      	ldrh	r2, [r7, #20]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	f0c0 80bc 	bcc.w	800115e <menu_parser+0x1ae>
		return;    }    // check if bigger than search area
	//if (menu_counter>240)  return;
	memcpy(menu_string,default_menu+string_search,8);    //copy 8 strings created menu array
 8000fe6:	4b62      	ldr	r3, [pc, #392]	; (8001170 <menu_parser+0x1c0>)
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	4b61      	ldr	r3, [pc, #388]	; (8001174 <menu_parser+0x1c4>)
 8000fee:	441a      	add	r2, r3
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	6810      	ldr	r0, [r2, #0]
 8000ff6:	6851      	ldr	r1, [r2, #4]
 8000ff8:	c303      	stmia	r3!, {r0, r1}
	////////////////////////////
	for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	75fb      	strb	r3, [r7, #23]
 8000ffe:	e093      	b.n	8001128 <menu_parser+0x178>

		memcpy(menu_string2,menu_titles_final[string_counter],8);
 8001000:	7dfb      	ldrb	r3, [r7, #23]
 8001002:	4a5d      	ldr	r2, [pc, #372]	; (8001178 <menu_parser+0x1c8>)
 8001004:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	6810      	ldr	r0, [r2, #0]
 800100c:	6851      	ldr	r1, [r2, #4]
 800100e:	c303      	stmia	r3!, {r0, r1}
		if  ((strncmp(menu_string,menu_string2,8))==0) 								// compare and if true pass var,seq
 8001010:	1d39      	adds	r1, r7, #4
 8001012:	f107 030c 	add.w	r3, r7, #12
 8001016:	2208      	movs	r2, #8
 8001018:	4618      	mov	r0, r3
 800101a:	f00a f863 	bl	800b0e4 <strncmp>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d17e      	bne.n	8001122 <menu_parser+0x172>
		{

			if ((menu_counter>110 )&&(menu_counter<128 )) menu_counter=menu_counter+16;   // skip to second page
 8001024:	4b55      	ldr	r3, [pc, #340]	; (800117c <menu_parser+0x1cc>)
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	2b6e      	cmp	r3, #110	; 0x6e
 800102a:	d909      	bls.n	8001040 <menu_parser+0x90>
 800102c:	4b53      	ldr	r3, [pc, #332]	; (800117c <menu_parser+0x1cc>)
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	2b7f      	cmp	r3, #127	; 0x7f
 8001032:	d805      	bhi.n	8001040 <menu_parser+0x90>
 8001034:	4b51      	ldr	r3, [pc, #324]	; (800117c <menu_parser+0x1cc>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	3310      	adds	r3, #16
 800103a:	b29a      	uxth	r2, r3
 800103c:	4b4f      	ldr	r3, [pc, #316]	; (800117c <menu_parser+0x1cc>)
 800103e:	801a      	strh	r2, [r3, #0]
			if((menu_counter>237)&&(menu_counter<256 )) menu_counter=menu_counter+16; // skip
 8001040:	4b4e      	ldr	r3, [pc, #312]	; (800117c <menu_parser+0x1cc>)
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	2bed      	cmp	r3, #237	; 0xed
 8001046:	d909      	bls.n	800105c <menu_parser+0xac>
 8001048:	4b4c      	ldr	r3, [pc, #304]	; (800117c <menu_parser+0x1cc>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	2bff      	cmp	r3, #255	; 0xff
 800104e:	d805      	bhi.n	800105c <menu_parser+0xac>
 8001050:	4b4a      	ldr	r3, [pc, #296]	; (800117c <menu_parser+0x1cc>)
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	3310      	adds	r3, #16
 8001056:	b29a      	uxth	r2, r3
 8001058:	4b48      	ldr	r3, [pc, #288]	; (800117c <menu_parser+0x1cc>)
 800105a:	801a      	strh	r2, [r3, #0]
			if((menu_counter>365)&&(menu_counter<384 )) menu_counter=menu_counter+16; // skip
 800105c:	4b47      	ldr	r3, [pc, #284]	; (800117c <menu_parser+0x1cc>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
 8001064:	d30a      	bcc.n	800107c <menu_parser+0xcc>
 8001066:	4b45      	ldr	r3, [pc, #276]	; (800117c <menu_parser+0x1cc>)
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800106e:	d205      	bcs.n	800107c <menu_parser+0xcc>
 8001070:	4b42      	ldr	r3, [pc, #264]	; (800117c <menu_parser+0x1cc>)
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	3310      	adds	r3, #16
 8001076:	b29a      	uxth	r2, r3
 8001078:	4b40      	ldr	r3, [pc, #256]	; (800117c <menu_parser+0x1cc>)
 800107a:	801a      	strh	r2, [r3, #0]
			if((menu_counter>493)&&(menu_counter<512 )) menu_counter=menu_counter+16; // skip
 800107c:	4b3f      	ldr	r3, [pc, #252]	; (800117c <menu_parser+0x1cc>)
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 8001084:	d30a      	bcc.n	800109c <menu_parser+0xec>
 8001086:	4b3d      	ldr	r3, [pc, #244]	; (800117c <menu_parser+0x1cc>)
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800108e:	d205      	bcs.n	800109c <menu_parser+0xec>
 8001090:	4b3a      	ldr	r3, [pc, #232]	; (800117c <menu_parser+0x1cc>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	3310      	adds	r3, #16
 8001096:	b29a      	uxth	r2, r3
 8001098:	4b38      	ldr	r3, [pc, #224]	; (800117c <menu_parser+0x1cc>)
 800109a:	801a      	strh	r2, [r3, #0]
			if((menu_counter>621)&&(menu_counter<640 )) menu_counter=menu_counter+16; // skip
 800109c:	4b37      	ldr	r3, [pc, #220]	; (800117c <menu_parser+0x1cc>)
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	f240 226d 	movw	r2, #621	; 0x26d
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d90a      	bls.n	80010be <menu_parser+0x10e>
 80010a8:	4b34      	ldr	r3, [pc, #208]	; (800117c <menu_parser+0x1cc>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80010b0:	d205      	bcs.n	80010be <menu_parser+0x10e>
 80010b2:	4b32      	ldr	r3, [pc, #200]	; (800117c <menu_parser+0x1cc>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	3310      	adds	r3, #16
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	4b30      	ldr	r3, [pc, #192]	; (800117c <menu_parser+0x1cc>)
 80010bc:	801a      	strh	r2, [r3, #0]
			menu_title_lut[menu_title_count]=  (string_counter <<16)+(menu_counter&1023);   // search result  and disp lcd position counter
 80010be:	7dfb      	ldrb	r3, [r7, #23]
 80010c0:	041a      	lsls	r2, r3, #16
 80010c2:	4b2e      	ldr	r3, [pc, #184]	; (800117c <menu_parser+0x1cc>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010ca:	18d1      	adds	r1, r2, r3
 80010cc:	4b2c      	ldr	r3, [pc, #176]	; (8001180 <menu_parser+0x1d0>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b2c      	ldr	r3, [pc, #176]	; (8001184 <menu_parser+0x1d4>)
 80010d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			memcpy(menu_index_list+(menu_title_count*2),default_menu+string_search-2,2); // get array  index under ,LFO[1]  etc ,ok
 80010d8:	4b29      	ldr	r3, [pc, #164]	; (8001180 <menu_parser+0x1d0>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	461a      	mov	r2, r3
 80010e0:	4b29      	ldr	r3, [pc, #164]	; (8001188 <menu_parser+0x1d8>)
 80010e2:	18d0      	adds	r0, r2, r3
 80010e4:	4b22      	ldr	r3, [pc, #136]	; (8001170 <menu_parser+0x1c0>)
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	3b02      	subs	r3, #2
 80010ea:	4a22      	ldr	r2, [pc, #136]	; (8001174 <menu_parser+0x1c4>)
 80010ec:	4413      	add	r3, r2
 80010ee:	2202      	movs	r2, #2
 80010f0:	4619      	mov	r1, r3
 80010f2:	f009 ffe1 	bl	800b0b8 <memcpy>


			menu_title_count++;
 80010f6:	4b22      	ldr	r3, [pc, #136]	; (8001180 <menu_parser+0x1d0>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4b20      	ldr	r3, [pc, #128]	; (8001180 <menu_parser+0x1d0>)
 8001100:	701a      	strb	r2, [r3, #0]
			menu_counter++;
 8001102:	4b1e      	ldr	r3, [pc, #120]	; (800117c <menu_parser+0x1cc>)
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	3301      	adds	r3, #1
 8001108:	b29a      	uxth	r2, r3
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <menu_parser+0x1cc>)
 800110c:	801a      	strh	r2, [r3, #0]
			space_check=0;
 800110e:	4b1f      	ldr	r3, [pc, #124]	; (800118c <menu_parser+0x1dc>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
			string_search=string_search+8;     // advance search position
 8001114:	4b16      	ldr	r3, [pc, #88]	; (8001170 <menu_parser+0x1c0>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	3308      	adds	r3, #8
 800111a:	b29a      	uxth	r2, r3
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <menu_parser+0x1c0>)
 800111e:	801a      	strh	r2, [r3, #0]

			return;}
 8001120:	e01e      	b.n	8001160 <menu_parser+0x1b0>
	for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 8001122:	7dfb      	ldrb	r3, [r7, #23]
 8001124:	3301      	adds	r3, #1
 8001126:	75fb      	strb	r3, [r7, #23]
 8001128:	7dfb      	ldrb	r3, [r7, #23]
 800112a:	2b2b      	cmp	r3, #43	; 0x2b
 800112c:	f67f af68 	bls.w	8001000 <menu_parser+0x50>

	}

	if (space_check>1)  menu_counter++;   //this is ok
 8001130:	4b16      	ldr	r3, [pc, #88]	; (800118c <menu_parser+0x1dc>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d905      	bls.n	8001144 <menu_parser+0x194>
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <menu_parser+0x1cc>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	3301      	adds	r3, #1
 800113e:	b29a      	uxth	r2, r3
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <menu_parser+0x1cc>)
 8001142:	801a      	strh	r2, [r3, #0]
	space_check++;  // count empty spaces or fill characters
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <menu_parser+0x1dc>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	3301      	adds	r3, #1
 800114a:	b2da      	uxtb	r2, r3
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <menu_parser+0x1dc>)
 800114e:	701a      	strb	r2, [r3, #0]
	string_search++;
 8001150:	4b07      	ldr	r3, [pc, #28]	; (8001170 <menu_parser+0x1c0>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	3301      	adds	r3, #1
 8001156:	b29a      	uxth	r2, r3
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <menu_parser+0x1c0>)
 800115a:	801a      	strh	r2, [r3, #0]
	return;
 800115c:	e000      	b.n	8001160 <menu_parser+0x1b0>
		return;    }    // check if bigger than search area
 800115e:	bf00      	nop


}
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	0800b5b4 	.word	0x0800b5b4
 800116c:	0800b5bc 	.word	0x0800b5bc
 8001170:	2000434c 	.word	0x2000434c
 8001174:	0800b6a4 	.word	0x0800b6a4
 8001178:	20000270 	.word	0x20000270
 800117c:	2000434e 	.word	0x2000434e
 8001180:	20004351 	.word	0x20004351
 8001184:	20004354 	.word	0x20004354
 8001188:	20004754 	.word	0x20004754
 800118c:	20004350 	.word	0x20004350

08001190 <patch_target_parse>:
void patch_target_parse(void){    // records ptr for target options , works ok
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
uint8_t skip=0;
 8001196:	2300      	movs	r3, #0
 8001198:	73fb      	strb	r3, [r7, #15]
		for (n=0;n<10;n++){
 800119a:	4b91      	ldr	r3, [pc, #580]	; (80013e0 <patch_target_parse+0x250>)
 800119c:	2200      	movs	r2, #0
 800119e:	801a      	strh	r2, [r3, #0]
 80011a0:	e113      	b.n	80013ca <patch_target_parse+0x23a>

			uint16_t* output_hold;
			uint8_t input_hold=patch[n].input1;
 80011a2:	4b8f      	ldr	r3, [pc, #572]	; (80013e0 <patch_target_parse+0x250>)
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	4619      	mov	r1, r3
 80011a8:	4a8e      	ldr	r2, [pc, #568]	; (80013e4 <patch_target_parse+0x254>)
 80011aa:	460b      	mov	r3, r1
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	440b      	add	r3, r1
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	4413      	add	r3, r2
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	717b      	strb	r3, [r7, #5]

			if (patch[n].input1>=menu_lookup_count) patch[n].input1=0;    // limit
 80011b8:	4b89      	ldr	r3, [pc, #548]	; (80013e0 <patch_target_parse+0x250>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	4619      	mov	r1, r3
 80011be:	4a89      	ldr	r2, [pc, #548]	; (80013e4 <patch_target_parse+0x254>)
 80011c0:	460b      	mov	r3, r1
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	440b      	add	r3, r1
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	4413      	add	r3, r2
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b2b      	cmp	r3, #43	; 0x2b
 80011ce:	d90a      	bls.n	80011e6 <patch_target_parse+0x56>
 80011d0:	4b83      	ldr	r3, [pc, #524]	; (80013e0 <patch_target_parse+0x250>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	4619      	mov	r1, r3
 80011d6:	4a83      	ldr	r2, [pc, #524]	; (80013e4 <patch_target_parse+0x254>)
 80011d8:	460b      	mov	r3, r1
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	440b      	add	r3, r1
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	4413      	add	r3, r2
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]

			switch(input_hold&3){     // lfo now , can add adsr later
 80011e6:	797b      	ldrb	r3, [r7, #5]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	2b03      	cmp	r3, #3
 80011ee:	d842      	bhi.n	8001276 <patch_target_parse+0xe6>
 80011f0:	a201      	add	r2, pc, #4	; (adr r2, 80011f8 <patch_target_parse+0x68>)
 80011f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f6:	bf00      	nop
 80011f8:	08001209 	.word	0x08001209
 80011fc:	08001223 	.word	0x08001223
 8001200:	0800123f 	.word	0x0800123f
 8001204:	0800125b 	.word	0x0800125b

						case 0:   output_hold=&LFO[input_hold>>2].out[0];break;
 8001208:	797b      	ldrb	r3, [r7, #5]
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	b2db      	uxtb	r3, r3
 800120e:	461a      	mov	r2, r3
 8001210:	4613      	mov	r3, r2
 8001212:	011b      	lsls	r3, r3, #4
 8001214:	4413      	add	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4a73      	ldr	r2, [pc, #460]	; (80013e8 <patch_target_parse+0x258>)
 800121a:	4413      	add	r3, r2
 800121c:	3306      	adds	r3, #6
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	e029      	b.n	8001276 <patch_target_parse+0xe6>
						case 1:   output_hold=&LFO[input_hold>>2].out_saw[0];break;
 8001222:	797b      	ldrb	r3, [r7, #5]
 8001224:	089b      	lsrs	r3, r3, #2
 8001226:	b2db      	uxtb	r3, r3
 8001228:	461a      	mov	r2, r3
 800122a:	4613      	mov	r3, r2
 800122c:	011b      	lsls	r3, r3, #4
 800122e:	4413      	add	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	3318      	adds	r3, #24
 8001234:	4a6c      	ldr	r2, [pc, #432]	; (80013e8 <patch_target_parse+0x258>)
 8001236:	4413      	add	r3, r2
 8001238:	3302      	adds	r3, #2
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	e01b      	b.n	8001276 <patch_target_parse+0xe6>
						case 2:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
 800123e:	797b      	ldrb	r3, [r7, #5]
 8001240:	089b      	lsrs	r3, r3, #2
 8001242:	b2db      	uxtb	r3, r3
 8001244:	461a      	mov	r2, r3
 8001246:	4613      	mov	r3, r2
 8001248:	011b      	lsls	r3, r3, #4
 800124a:	4413      	add	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	3328      	adds	r3, #40	; 0x28
 8001250:	4a65      	ldr	r2, [pc, #404]	; (80013e8 <patch_target_parse+0x258>)
 8001252:	4413      	add	r3, r2
 8001254:	3306      	adds	r3, #6
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	e00d      	b.n	8001276 <patch_target_parse+0xe6>
						case 3:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
 800125a:	797b      	ldrb	r3, [r7, #5]
 800125c:	089b      	lsrs	r3, r3, #2
 800125e:	b2db      	uxtb	r3, r3
 8001260:	461a      	mov	r2, r3
 8001262:	4613      	mov	r3, r2
 8001264:	011b      	lsls	r3, r3, #4
 8001266:	4413      	add	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	3328      	adds	r3, #40	; 0x28
 800126c:	4a5e      	ldr	r2, [pc, #376]	; (80013e8 <patch_target_parse+0x258>)
 800126e:	4413      	add	r3, r2
 8001270:	3306      	adds	r3, #6
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	bf00      	nop
						}

			patch[n].in1_ptr=output_hold;   // sets input pointer to first sample , default is lfo[0].out [0]
 8001276:	4b5a      	ldr	r3, [pc, #360]	; (80013e0 <patch_target_parse+0x250>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	4619      	mov	r1, r3
 800127c:	4a59      	ldr	r2, [pc, #356]	; (80013e4 <patch_target_parse+0x254>)
 800127e:	460b      	mov	r3, r1
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	440b      	add	r3, r1
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	4413      	add	r3, r2
 8001288:	3320      	adds	r3, #32
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	601a      	str	r2, [r3, #0]


			if (patch[n].target) {  // test if above zero
 800128e:	4b54      	ldr	r3, [pc, #336]	; (80013e0 <patch_target_parse+0x250>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	4619      	mov	r1, r3
 8001294:	4a53      	ldr	r2, [pc, #332]	; (80013e4 <patch_target_parse+0x254>)
 8001296:	460b      	mov	r3, r1
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	440b      	add	r3, r1
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	4413      	add	r3, r2
 80012a0:	3304      	adds	r3, #4
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 808a 	beq.w	80013be <patch_target_parse+0x22e>


				uint8_t target_input=patch[n].target; // copy to avoid messed up pointer
 80012aa:	4b4d      	ldr	r3, [pc, #308]	; (80013e0 <patch_target_parse+0x250>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	4619      	mov	r1, r3
 80012b0:	4a4c      	ldr	r2, [pc, #304]	; (80013e4 <patch_target_parse+0x254>)
 80012b2:	460b      	mov	r3, r1
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	440b      	add	r3, r1
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	4413      	add	r3, r2
 80012bc:	3304      	adds	r3, #4
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	71fb      	strb	r3, [r7, #7]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	73fb      	strb	r3, [r7, #15]
 80012c6:	e00a      	b.n	80012de <patch_target_parse+0x14e>
					if (patch_skip_list[target_input]==1)  target_input++;
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	4a48      	ldr	r2, [pc, #288]	; (80013ec <patch_target_parse+0x25c>)
 80012cc:	5cd3      	ldrb	r3, [r2, r3]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d102      	bne.n	80012d8 <patch_target_parse+0x148>
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	3301      	adds	r3, #1
 80012d6:	71fb      	strb	r3, [r7, #7]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	3301      	adds	r3, #1
 80012dc:	73fb      	strb	r3, [r7, #15]
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	2b2b      	cmp	r3, #43	; 0x2b
 80012e2:	d9f1      	bls.n	80012c8 <patch_target_parse+0x138>

				}  // test against list
				if (target_input>(menu_lookup_count-1)) target_input=menu_lookup_count-1;
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	2b2b      	cmp	r3, #43	; 0x2b
 80012e8:	d901      	bls.n	80012ee <patch_target_parse+0x15e>
 80012ea:	232b      	movs	r3, #43	; 0x2b
 80012ec:	71fb      	strb	r3, [r7, #7]
				if (target_input!=35)  {     // make target index is not selected
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	2b23      	cmp	r3, #35	; 0x23
 80012f2:	d058      	beq.n	80013a6 <patch_target_parse+0x216>


			patch[n].target=target_input; // write back corrected value
 80012f4:	4b3a      	ldr	r3, [pc, #232]	; (80013e0 <patch_target_parse+0x250>)
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	4619      	mov	r1, r3
 80012fa:	4a3a      	ldr	r2, [pc, #232]	; (80013e4 <patch_target_parse+0x254>)
 80012fc:	460b      	mov	r3, r1
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	440b      	add	r3, r1
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	4413      	add	r3, r2
 8001306:	3304      	adds	r3, #4
 8001308:	79fa      	ldrb	r2, [r7, #7]
 800130a:	701a      	strb	r2, [r3, #0]

			uint8_t target_index=patch[n].target_index;
 800130c:	4b34      	ldr	r3, [pc, #208]	; (80013e0 <patch_target_parse+0x250>)
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	4619      	mov	r1, r3
 8001312:	4a34      	ldr	r2, [pc, #208]	; (80013e4 <patch_target_parse+0x254>)
 8001314:	460b      	mov	r3, r1
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	4413      	add	r3, r2
 800131e:	3305      	adds	r3, #5
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	71bb      	strb	r3, [r7, #6]

			if (target_index>menu_vars_index_limit[target_index]  )   // test limit
 8001324:	79bb      	ldrb	r3, [r7, #6]
 8001326:	4a32      	ldr	r2, [pc, #200]	; (80013f0 <patch_target_parse+0x260>)
 8001328:	5cd3      	ldrb	r3, [r2, r3]
 800132a:	79ba      	ldrb	r2, [r7, #6]
 800132c:	429a      	cmp	r2, r3
 800132e:	d903      	bls.n	8001338 <patch_target_parse+0x1a8>
			{	target_index=menu_vars_index_limit[target_index]; }
 8001330:	79bb      	ldrb	r3, [r7, #6]
 8001332:	4a2f      	ldr	r2, [pc, #188]	; (80013f0 <patch_target_parse+0x260>)
 8001334:	5cd3      	ldrb	r3, [r2, r3]
 8001336:	71bb      	strb	r3, [r7, #6]
			patch[n].target_index=target_index;
 8001338:	4b29      	ldr	r3, [pc, #164]	; (80013e0 <patch_target_parse+0x250>)
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	4619      	mov	r1, r3
 800133e:	4a29      	ldr	r2, [pc, #164]	; (80013e4 <patch_target_parse+0x254>)
 8001340:	460b      	mov	r3, r1
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	440b      	add	r3, r1
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	4413      	add	r3, r2
 800134a:	3305      	adds	r3, #5
 800134c:	79ba      	ldrb	r2, [r7, #6]
 800134e:	701a      	strb	r2, [r3, #0]
			uint8_t*  target_out_ptr= menu_vars(menu_titles_final[target_input] , target_index    );
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	4a28      	ldr	r2, [pc, #160]	; (80013f4 <patch_target_parse+0x264>)
 8001354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001358:	79ba      	ldrb	r2, [r7, #6]
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fbfb 	bl	8000b58 <menu_vars>
 8001362:	6038      	str	r0, [r7, #0]

			if (target_out_ptr)           {patch[n].out_ptr =target_out_ptr;     // write ptr
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d029      	beq.n	80013be <patch_target_parse+0x22e>
 800136a:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <patch_target_parse+0x250>)
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	4619      	mov	r1, r3
 8001370:	4a1c      	ldr	r2, [pc, #112]	; (80013e4 <patch_target_parse+0x254>)
 8001372:	460b      	mov	r3, r1
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	440b      	add	r3, r1
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	4413      	add	r3, r2
 800137c:	331c      	adds	r3, #28
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	601a      	str	r2, [r3, #0]
			patch[n].limiter=menu_vars_limiter[menu_vars_ref]; }
 8001382:	4b1d      	ldr	r3, [pc, #116]	; (80013f8 <patch_target_parse+0x268>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	461a      	mov	r2, r3
 8001388:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <patch_target_parse+0x250>)
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	4619      	mov	r1, r3
 800138e:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <patch_target_parse+0x26c>)
 8001390:	5c98      	ldrb	r0, [r3, r2]
 8001392:	4a14      	ldr	r2, [pc, #80]	; (80013e4 <patch_target_parse+0x254>)
 8001394:	460b      	mov	r3, r1
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	440b      	add	r3, r1
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	4413      	add	r3, r2
 800139e:	3324      	adds	r3, #36	; 0x24
 80013a0:	4602      	mov	r2, r0
 80013a2:	701a      	strb	r2, [r3, #0]
 80013a4:	e00b      	b.n	80013be <patch_target_parse+0x22e>
				}
				else patch[n].target=0;  // write back 0 if failed
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <patch_target_parse+0x250>)
 80013a8:	881b      	ldrh	r3, [r3, #0]
 80013aa:	4619      	mov	r1, r3
 80013ac:	4a0d      	ldr	r2, [pc, #52]	; (80013e4 <patch_target_parse+0x254>)
 80013ae:	460b      	mov	r3, r1
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	440b      	add	r3, r1
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	4413      	add	r3, r2
 80013b8:	3304      	adds	r3, #4
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]
		for (n=0;n<10;n++){
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <patch_target_parse+0x250>)
 80013c0:	881b      	ldrh	r3, [r3, #0]
 80013c2:	3301      	adds	r3, #1
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <patch_target_parse+0x250>)
 80013c8:	801a      	strh	r2, [r3, #0]
 80013ca:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <patch_target_parse+0x250>)
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	2b09      	cmp	r3, #9
 80013d0:	f67f aee7 	bls.w	80011a2 <patch_target_parse+0x12>


			}
		}

	}
 80013d4:	bf00      	nop
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000870 	.word	0x20000870
 80013e4:	200041bc 	.word	0x200041bc
 80013e8:	2000341c 	.word	0x2000341c
 80013ec:	0800bcdc 	.word	0x0800bcdc
 80013f0:	0800bc84 	.word	0x0800bc84
 80013f4:	20000270 	.word	0x20000270
 80013f8:	20006995 	.word	0x20006995
 80013fc:	0800bcb0 	.word	0x0800bcb0

08001400 <patch_target_replace>:


	}

}
void patch_target_replace(void){					// sttaight value replace  ,ok
 8001400:	b490      	push	{r4, r7}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
	uint8_t loop_position=sampling_position&7;    // 0-7 , this comes usually from 0-512 loop / 64
 8001406:	4b3f      	ldr	r3, [pc, #252]	; (8001504 <patch_target_replace+0x104>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	73bb      	strb	r3, [r7, #14]

	for (n=0;n<10;n++){
 8001410:	4b3d      	ldr	r3, [pc, #244]	; (8001508 <patch_target_replace+0x108>)
 8001412:	2200      	movs	r2, #0
 8001414:	801a      	strh	r2, [r3, #0]
 8001416:	e06b      	b.n	80014f0 <patch_target_replace+0xf0>



		if (patch[n].target) {         // check first for enable
 8001418:	4b3b      	ldr	r3, [pc, #236]	; (8001508 <patch_target_replace+0x108>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	4619      	mov	r1, r3
 800141e:	4a3b      	ldr	r2, [pc, #236]	; (800150c <patch_target_replace+0x10c>)
 8001420:	460b      	mov	r3, r1
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	440b      	add	r3, r1
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	4413      	add	r3, r2
 800142a:	3304      	adds	r3, #4
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d058      	beq.n	80014e4 <patch_target_replace+0xe4>

			patch[n].output[loop_position]=*(patch[n].in1_ptr+(loop_position));   //write output here
 8001432:	4b35      	ldr	r3, [pc, #212]	; (8001508 <patch_target_replace+0x108>)
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	4619      	mov	r1, r3
 8001438:	4a34      	ldr	r2, [pc, #208]	; (800150c <patch_target_replace+0x10c>)
 800143a:	460b      	mov	r3, r1
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	440b      	add	r3, r1
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	4413      	add	r3, r2
 8001444:	3320      	adds	r3, #32
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	7bbb      	ldrb	r3, [r7, #14]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4413      	add	r3, r2
 800144e:	4a2e      	ldr	r2, [pc, #184]	; (8001508 <patch_target_replace+0x108>)
 8001450:	8812      	ldrh	r2, [r2, #0]
 8001452:	4610      	mov	r0, r2
 8001454:	7bba      	ldrb	r2, [r7, #14]
 8001456:	881c      	ldrh	r4, [r3, #0]
 8001458:	492c      	ldr	r1, [pc, #176]	; (800150c <patch_target_replace+0x10c>)
 800145a:	4603      	mov	r3, r0
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4403      	add	r3, r0
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	440b      	add	r3, r1
 8001468:	4622      	mov	r2, r4
 800146a:	80da      	strh	r2, [r3, #6]


			uint8_t  *ptr_to_modify =patch[n].out_ptr;       // select address , not always 8 bit ,ok
 800146c:	4b26      	ldr	r3, [pc, #152]	; (8001508 <patch_target_replace+0x108>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	4619      	mov	r1, r3
 8001472:	4a26      	ldr	r2, [pc, #152]	; (800150c <patch_target_replace+0x10c>)
 8001474:	460b      	mov	r3, r1
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	4413      	add	r3, r2
 800147e:	331c      	adds	r3, #28
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	60bb      	str	r3, [r7, #8]
			uint16_t lfo_out_temp=  (patch[n].output [loop_position])>>8;  // 0-256,
 8001484:	4b20      	ldr	r3, [pc, #128]	; (8001508 <patch_target_replace+0x108>)
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	7bba      	ldrb	r2, [r7, #14]
 800148c:	491f      	ldr	r1, [pc, #124]	; (800150c <patch_target_replace+0x10c>)
 800148e:	4603      	mov	r3, r0
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4403      	add	r3, r0
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	440b      	add	r3, r1
 800149c:	88db      	ldrh	r3, [r3, #6]
 800149e:	0a1b      	lsrs	r3, r3, #8
 80014a0:	80fb      	strh	r3, [r7, #6]
			uint8_t lfo_mod1=ptr_to_modify; //ok
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	717b      	strb	r3, [r7, #5]

			uint8_t  var_replaced =  lfo_out_temp &255 ;   // grab lfo out *    data to be modfied
 80014a6:	88fb      	ldrh	r3, [r7, #6]
 80014a8:	73fb      	strb	r3, [r7, #15]

			if (var_replaced>patch[n].limiter) var_replaced=patch[n].limiter;  // limit lfo output
 80014aa:	4b17      	ldr	r3, [pc, #92]	; (8001508 <patch_target_replace+0x108>)
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	4619      	mov	r1, r3
 80014b0:	4a16      	ldr	r2, [pc, #88]	; (800150c <patch_target_replace+0x10c>)
 80014b2:	460b      	mov	r3, r1
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	440b      	add	r3, r1
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	4413      	add	r3, r2
 80014bc:	3324      	adds	r3, #36	; 0x24
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	7bfa      	ldrb	r2, [r7, #15]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d90b      	bls.n	80014de <patch_target_replace+0xde>
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <patch_target_replace+0x108>)
 80014c8:	881b      	ldrh	r3, [r3, #0]
 80014ca:	4619      	mov	r1, r3
 80014cc:	4a0f      	ldr	r2, [pc, #60]	; (800150c <patch_target_replace+0x10c>)
 80014ce:	460b      	mov	r3, r1
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	440b      	add	r3, r1
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	4413      	add	r3, r2
 80014d8:	3324      	adds	r3, #36	; 0x24
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	73fb      	strb	r3, [r7, #15]

			*ptr_to_modify =var_replaced;   // replace original value,ok
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	7bfa      	ldrb	r2, [r7, #15]
 80014e2:	701a      	strb	r2, [r3, #0]
	for (n=0;n<10;n++){
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <patch_target_replace+0x108>)
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	3301      	adds	r3, #1
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <patch_target_replace+0x108>)
 80014ee:	801a      	strh	r2, [r3, #0]
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <patch_target_replace+0x108>)
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	2b09      	cmp	r3, #9
 80014f6:	d98f      	bls.n	8001418 <patch_target_replace+0x18>
		}


	}

}
 80014f8:	bf00      	nop
 80014fa:	bf00      	nop
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc90      	pop	{r4, r7}
 8001502:	4770      	bx	lr
 8001504:	2000496c 	.word	0x2000496c
 8001508:	20000870 	.word	0x20000870
 800150c:	200041bc 	.word	0x200041bc

08001510 <SPI_command>:



void SPI_command(void){
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
// pins are all good , SPI is always the problem!!!
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <SPI_command+0x68>)
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d128      	bne.n	8001570 <SPI_command+0x60>
 800151e:	4b17      	ldr	r3, [pc, #92]	; (800157c <SPI_command+0x6c>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d124      	bne.n	8001570 <SPI_command+0x60>

uint8_t spi_store[5];

	//clk_pin=(i&1)^1;
		//bsrr_long=0;
		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8001526:	4b16      	ldr	r3, [pc, #88]	; (8001580 <SPI_command+0x70>)
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	0a1b      	lsrs	r3, r3, #8
 800152c:	b29b      	uxth	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <SPI_command+0x2a>
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <SPI_command+0x74>)
 8001534:	22f8      	movs	r2, #248	; 0xf8
 8001536:	701a      	strb	r2, [r3, #0]
 8001538:	e002      	b.n	8001540 <SPI_command+0x30>
 800153a:	4b12      	ldr	r3, [pc, #72]	; (8001584 <SPI_command+0x74>)
 800153c:	22fa      	movs	r2, #250	; 0xfa
 800153e:	701a      	strb	r2, [r3, #0]

	spi_store[0]=spi_byte&255;
 8001540:	4b10      	ldr	r3, [pc, #64]	; (8001584 <SPI_command+0x74>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	703b      	strb	r3, [r7, #0]
	spi_store[1]=((spi_hold>>4)<<4)&255;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <SPI_command+0x70>)
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	091b      	lsrs	r3, r3, #4
 800154c:	b29b      	uxth	r3, r3
 800154e:	011b      	lsls	r3, r3, #4
 8001550:	b2db      	uxtb	r3, r3
 8001552:	707b      	strb	r3, [r7, #1]
	spi_store[2]=((spi_hold&15)<<4)&255;
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <SPI_command+0x70>)
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	b2db      	uxtb	r3, r3
 800155c:	70bb      	strb	r3, [r7, #2]

// send this to spi for now
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3,3
 800155e:	4639      	mov	r1, r7
 8001560:	2303      	movs	r3, #3
 8001562:	2203      	movs	r2, #3
 8001564:	4808      	ldr	r0, [pc, #32]	; (8001588 <SPI_command+0x78>)
 8001566:	f007 fb88 	bl	8008c7a <HAL_SPI_Transmit>
			);  // working good


//HAL_Delay(10);
	spi_enable=1; }
 800156a:	4b03      	ldr	r3, [pc, #12]	; (8001578 <SPI_command+0x68>)
 800156c:	2201      	movs	r2, #1
 800156e:	801a      	strh	r2, [r3, #0]
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	200024ba 	.word	0x200024ba
 800157c:	200024c0 	.word	0x200024c0
 8001580:	200024be 	.word	0x200024be
 8001584:	200024bc 	.word	0x200024bc
 8001588:	200070f0 	.word	0x200070f0

0800158c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)    // unreliable

	{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
		time_proc++;
 8001594:	4b21      	ldr	r3, [pc, #132]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	3301      	adds	r3, #1
 800159a:	b29a      	uxth	r2, r3
 800159c:	4b1f      	ldr	r3, [pc, #124]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x90>)
 800159e:	801a      	strh	r2, [r3, #0]
//		if (sample_point==511) {bank_write=1; sample_pointD=0;  }
//		if (sample_point==1022) {bank_write=1; sample_pointD=512; }
//		sample_point=sample_point & 1023;// this is 1


		if(TIM3==htim->Instance)			// nothing here is consistent ?
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a1e      	ldr	r2, [pc, #120]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d131      	bne.n	800160e <HAL_TIM_PeriodElapsedCallback+0x82>
	{

			play_hold=play_sample[sample_point<<1]; // this is 2
 80015aa:	4b1e      	ldr	r3, [pc, #120]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4a1d      	ldr	r2, [pc, #116]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80015b4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80015b8:	4b1c      	ldr	r3, [pc, #112]	; (800162c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80015ba:	801a      	strh	r2, [r3, #0]
			play_hold2=play_sample[(sample_point<<1)+1];
 80015bc:	4b19      	ldr	r3, [pc, #100]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	3301      	adds	r3, #1
 80015c6:	4a18      	ldr	r2, [pc, #96]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80015c8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80015cc:	4b18      	ldr	r3, [pc, #96]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80015ce:	801a      	strh	r2, [r3, #0]
			if (sample_point>1022)    {bank_write=2;sample_point=0;} else sample_point++;
 80015d0:	4b14      	ldr	r3, [pc, #80]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80015da:	4293      	cmp	r3, r2
 80015dc:	d906      	bls.n	80015ec <HAL_TIM_PeriodElapsedCallback+0x60>
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80015e0:	2202      	movs	r2, #2
 80015e2:	801a      	strh	r2, [r3, #0]
 80015e4:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	801a      	strh	r2, [r3, #0]
 80015ea:	e006      	b.n	80015fa <HAL_TIM_PeriodElapsedCallback+0x6e>
 80015ec:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	3301      	adds	r3, #1
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80015f8:	801a      	strh	r2, [r3, #0]

	TIM3->CCR1=play_hold ;  // keep readin sample storage
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	b29a      	uxth	r2, r3
 8001600:	4b07      	ldr	r3, [pc, #28]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001602:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=play_hold2 ;   // load up counter on ch2
 8001604:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	b29a      	uxth	r2, r3
 800160a:	4b05      	ldr	r3, [pc, #20]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800160c:	639a      	str	r2, [r3, #56]	; 0x38



	}

	}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20003418 	.word	0x20003418
 8001620:	40000400 	.word	0x40000400
 8001624:	2000187c 	.word	0x2000187c
 8001628:	20000878 	.word	0x20000878
 800162c:	2000187e 	.word	0x2000187e
 8001630:	20001880 	.word	0x20001880
 8001634:	200001ae 	.word	0x200001ae

08001638 <analoginputloopb>:



void analoginputloopb(void){  //works ,getting obsolete
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0


	menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 800163e:	4b51      	ldr	r3, [pc, #324]	; (8001784 <analoginputloopb+0x14c>)
 8001640:	889b      	ldrh	r3, [r3, #4]
 8001642:	091b      	lsrs	r3, r3, #4
 8001644:	b29b      	uxth	r3, r3
 8001646:	b2da      	uxtb	r2, r3
 8001648:	4b4f      	ldr	r3, [pc, #316]	; (8001788 <analoginputloopb+0x150>)
 800164a:	701a      	strb	r2, [r3, #0]
		menuSelectX=cursor_menu[2]&15;  // Y select inside page
 800164c:	4b4d      	ldr	r3, [pc, #308]	; (8001784 <analoginputloopb+0x14c>)
 800164e:	889b      	ldrh	r3, [r3, #4]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	b2da      	uxtb	r2, r3
 8001658:	4b4c      	ldr	r3, [pc, #304]	; (800178c <analoginputloopb+0x154>)
 800165a:	701a      	strb	r2, [r3, #0]


		cursor_menu[1]=0;
 800165c:	4b49      	ldr	r3, [pc, #292]	; (8001784 <analoginputloopb+0x14c>)
 800165e:	2200      	movs	r2, #0
 8001660:	805a      	strh	r2, [r3, #2]

		cursor_menu[2]=enc2_dir;
 8001662:	4b4b      	ldr	r3, [pc, #300]	; (8001790 <analoginputloopb+0x158>)
 8001664:	881a      	ldrh	r2, [r3, #0]
 8001666:	4b47      	ldr	r3, [pc, #284]	; (8001784 <analoginputloopb+0x14c>)
 8001668:	809a      	strh	r2, [r3, #4]


	enc_temp=(TIM2->CNT)>>1;  // read counter tim2 ,divider ok
 800166a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800166e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001670:	085b      	lsrs	r3, r3, #1
 8001672:	b29a      	uxth	r2, r3
 8001674:	4b47      	ldr	r3, [pc, #284]	; (8001794 <analoginputloopb+0x15c>)
 8001676:	801a      	strh	r2, [r3, #0]
	enc2_store[enc2_store_count]=(TIM4->CNT)&255;  // read counter tim4, noisy
 8001678:	4b47      	ldr	r3, [pc, #284]	; (8001798 <analoginputloopb+0x160>)
 800167a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800167c:	4b47      	ldr	r3, [pc, #284]	; (800179c <analoginputloopb+0x164>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	b2c9      	uxtb	r1, r1
 8001684:	4b46      	ldr	r3, [pc, #280]	; (80017a0 <analoginputloopb+0x168>)
 8001686:	5499      	strb	r1, [r3, r2]
	uint16_t enc2_store2=0;
 8001688:	2300      	movs	r3, #0
 800168a:	80fb      	strh	r3, [r7, #6]
	uint16_t enc2_store3=0;
 800168c:	2300      	movs	r3, #0
 800168e:	80bb      	strh	r3, [r7, #4]
	if (enc2_store_count==3) enc2_store_count=0; else enc2_store_count++;
 8001690:	4b42      	ldr	r3, [pc, #264]	; (800179c <analoginputloopb+0x164>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b03      	cmp	r3, #3
 8001696:	d103      	bne.n	80016a0 <analoginputloopb+0x68>
 8001698:	4b40      	ldr	r3, [pc, #256]	; (800179c <analoginputloopb+0x164>)
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
 800169e:	e005      	b.n	80016ac <analoginputloopb+0x74>
 80016a0:	4b3e      	ldr	r3, [pc, #248]	; (800179c <analoginputloopb+0x164>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	3301      	adds	r3, #1
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	4b3c      	ldr	r3, [pc, #240]	; (800179c <analoginputloopb+0x164>)
 80016aa:	701a      	strb	r2, [r3, #0]

	enc2_store2=enc2_store[0]+enc2_store[1]+enc2_store[2]+enc2_store[3];     // average filter hopefully
 80016ac:	4b3c      	ldr	r3, [pc, #240]	; (80017a0 <analoginputloopb+0x168>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	4b3b      	ldr	r3, [pc, #236]	; (80017a0 <analoginputloopb+0x168>)
 80016b4:	785b      	ldrb	r3, [r3, #1]
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	4413      	add	r3, r2
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	4b38      	ldr	r3, [pc, #224]	; (80017a0 <analoginputloopb+0x168>)
 80016be:	789b      	ldrb	r3, [r3, #2]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	4413      	add	r3, r2
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	4b36      	ldr	r3, [pc, #216]	; (80017a0 <analoginputloopb+0x168>)
 80016c8:	78db      	ldrb	r3, [r3, #3]
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	4413      	add	r3, r2
 80016ce:	80fb      	strh	r3, [r7, #6]
	enc2_store3=enc2_store2>>3;
 80016d0:	88fb      	ldrh	r3, [r7, #6]
 80016d2:	08db      	lsrs	r3, r3, #3
 80016d4:	80bb      	strh	r3, [r7, #4]
	enc2_temp=enc2_store3;
 80016d6:	4a33      	ldr	r2, [pc, #204]	; (80017a4 <analoginputloopb+0x16c>)
 80016d8:	88bb      	ldrh	r3, [r7, #4]
 80016da:	8013      	strh	r3, [r2, #0]

	if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-1;
 80016dc:	4b2d      	ldr	r3, [pc, #180]	; (8001794 <analoginputloopb+0x15c>)
 80016de:	881a      	ldrh	r2, [r3, #0]
 80016e0:	4b31      	ldr	r3, [pc, #196]	; (80017a8 <analoginputloopb+0x170>)
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d908      	bls.n	80016fa <analoginputloopb+0xc2>
 80016e8:	4b30      	ldr	r3, [pc, #192]	; (80017ac <analoginputloopb+0x174>)
 80016ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	3b01      	subs	r3, #1
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	b21a      	sxth	r2, r3
 80016f6:	4b2d      	ldr	r3, [pc, #180]	; (80017ac <analoginputloopb+0x174>)
 80016f8:	801a      	strh	r2, [r3, #0]
	if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+1;
 80016fa:	4b26      	ldr	r3, [pc, #152]	; (8001794 <analoginputloopb+0x15c>)
 80016fc:	881a      	ldrh	r2, [r3, #0]
 80016fe:	4b2a      	ldr	r3, [pc, #168]	; (80017a8 <analoginputloopb+0x170>)
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d208      	bcs.n	8001718 <analoginputloopb+0xe0>
 8001706:	4b29      	ldr	r3, [pc, #164]	; (80017ac <analoginputloopb+0x174>)
 8001708:	f9b3 3000 	ldrsh.w	r3, [r3]
 800170c:	b29b      	uxth	r3, r3
 800170e:	3301      	adds	r3, #1
 8001710:	b29b      	uxth	r3, r3
 8001712:	b21a      	sxth	r2, r3
 8001714:	4b25      	ldr	r3, [pc, #148]	; (80017ac <analoginputloopb+0x174>)
 8001716:	801a      	strh	r2, [r3, #0]


  if (enc2_temp>511) enc2_temp=511;  //mem overflow somewhere
 8001718:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <analoginputloopb+0x16c>)
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001720:	d303      	bcc.n	800172a <analoginputloopb+0xf2>
 8001722:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <analoginputloopb+0x16c>)
 8001724:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001728:	801a      	strh	r2, [r3, #0]
	if (enc_dir>255) enc_dir=255;
 800172a:	4b20      	ldr	r3, [pc, #128]	; (80017ac <analoginputloopb+0x174>)
 800172c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001730:	2bff      	cmp	r3, #255	; 0xff
 8001732:	dd02      	ble.n	800173a <analoginputloopb+0x102>
 8001734:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <analoginputloopb+0x174>)
 8001736:	22ff      	movs	r2, #255	; 0xff
 8001738:	801a      	strh	r2, [r3, #0]
			if (enc_dir<0) enc_dir=0;
 800173a:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <analoginputloopb+0x174>)
 800173c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001740:	2b00      	cmp	r3, #0
 8001742:	da02      	bge.n	800174a <analoginputloopb+0x112>
 8001744:	4b19      	ldr	r3, [pc, #100]	; (80017ac <analoginputloopb+0x174>)
 8001746:	2200      	movs	r2, #0
 8001748:	801a      	strh	r2, [r3, #0]

			enc_tempB=enc_temp;
 800174a:	4b12      	ldr	r3, [pc, #72]	; (8001794 <analoginputloopb+0x15c>)
 800174c:	881a      	ldrh	r2, [r3, #0]
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <analoginputloopb+0x170>)
 8001750:	801a      	strh	r2, [r3, #0]

			enc2_dir=enc2_temp; //temp to try source data
 8001752:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <analoginputloopb+0x16c>)
 8001754:	881a      	ldrh	r2, [r3, #0]
 8001756:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <analoginputloopb+0x158>)
 8001758:	801a      	strh	r2, [r3, #0]


					enc2_tempB=enc2_temp; // to effective as counter not getting reset
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <analoginputloopb+0x16c>)
 800175c:	881a      	ldrh	r2, [r3, #0]
 800175e:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <analoginputloopb+0x178>)
 8001760:	801a      	strh	r2, [r3, #0]


potValues[counterVarB]=(potSource[counterVarB]>>4) & 15 ;  // reduce values for now ,use original for others , slow count
 8001762:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <analoginputloopb+0x17c>)
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	461a      	mov	r2, r3
 8001768:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <analoginputloopb+0x180>)
 800176a:	5c9b      	ldrb	r3, [r3, r2]
 800176c:	4a11      	ldr	r2, [pc, #68]	; (80017b4 <analoginputloopb+0x17c>)
 800176e:	8812      	ldrh	r2, [r2, #0]
 8001770:	091b      	lsrs	r3, r3, #4
 8001772:	b2d9      	uxtb	r1, r3
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <analoginputloopb+0x184>)
 8001776:	5499      	strb	r1, [r3, r2]


}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	200024c4 	.word	0x200024c4
 8001788:	20000868 	.word	0x20000868
 800178c:	20000869 	.word	0x20000869
 8001790:	200024b2 	.word	0x200024b2
 8001794:	200024aa 	.word	0x200024aa
 8001798:	40000800 	.word	0x40000800
 800179c:	20004969 	.word	0x20004969
 80017a0:	20004964 	.word	0x20004964
 80017a4:	200024ae 	.word	0x200024ae
 80017a8:	200024ac 	.word	0x200024ac
 80017ac:	200024b4 	.word	0x200024b4
 80017b0:	200024b0 	.word	0x200024b0
 80017b4:	2000086c 	.word	0x2000086c
 80017b8:	20000654 	.word	0x20000654
 80017bc:	20000454 	.word	0x20000454

080017c0 <display_init>:
void display_init(void){
 80017c0:	b5b0      	push	{r4, r5, r7, lr}
 80017c2:	b08a      	sub	sp, #40	; 0x28
 80017c4:	af00      	add	r7, sp, #0
	//uint8_t sp2_command=0xf8+(0<<1);
		 // uint16_t disp[]={  304,304,304,270,257,268,384,258,51,51,52,53,54,55,56,57,58,0};  // normal characters
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd 310 is extended instruction
 80017c6:	4b22      	ldr	r3, [pc, #136]	; (8001850 <display_init+0x90>)
 80017c8:	1d3c      	adds	r4, r7, #4
 80017ca:	461d      	mov	r5, r3
 80017cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017d4:	682b      	ldr	r3, [r5, #0]
 80017d6:	8023      	strh	r3, [r4, #0]
		  if (spi_send==0){         // sets data byte
 80017d8:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <display_init+0x94>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d132      	bne.n	8001846 <display_init+0x86>

switch(init){     //Remember every line advances +char on display ,,all this is mostly unneeded

default : init_b=init-6;displayBuffer2 ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 80017e0:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <display_init+0x98>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	3b06      	subs	r3, #6
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	4b1c      	ldr	r3, [pc, #112]	; (800185c <display_init+0x9c>)
 80017ec:	801a      	strh	r2, [r3, #0]
 80017ee:	f000 fbb9 	bl	8001f64 <displayBuffer2>
 80017f2:	4b1a      	ldr	r3, [pc, #104]	; (800185c <display_init+0x9c>)
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	4b19      	ldr	r3, [pc, #100]	; (8001860 <display_init+0xa0>)
 80017fa:	5c9b      	ldrb	r3, [r3, r2]
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	4b19      	ldr	r3, [pc, #100]	; (8001864 <display_init+0xa4>)
 8001800:	801a      	strh	r2, [r3, #0]
 8001802:	bf00      	nop
}


if (init<6)	{HAL_Delay(3);spi_hold=disp[init]  ; } //delay needs to go
 8001804:	4b14      	ldr	r3, [pc, #80]	; (8001858 <display_init+0x98>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b05      	cmp	r3, #5
 800180a:	d80b      	bhi.n	8001824 <display_init+0x64>
 800180c:	2003      	movs	r0, #3
 800180e:	f003 fe65 	bl	80054dc <HAL_Delay>
 8001812:	4b11      	ldr	r3, [pc, #68]	; (8001858 <display_init+0x98>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	3328      	adds	r3, #40	; 0x28
 800181a:	443b      	add	r3, r7
 800181c:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8001820:	4b10      	ldr	r3, [pc, #64]	; (8001864 <display_init+0xa4>)
 8001822:	801a      	strh	r2, [r3, #0]

init++;   // after 6 it quits the rest is not needed
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <display_init+0x98>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	3301      	adds	r3, #1
 800182a:	b2da      	uxtb	r2, r3
 800182c:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <display_init+0x98>)
 800182e:	701a      	strb	r2, [r3, #0]
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 8001830:	4b08      	ldr	r3, [pc, #32]	; (8001854 <display_init+0x94>)
 8001832:	2201      	movs	r2, #1
 8001834:	701a      	strb	r2, [r3, #0]
 8001836:	f7ff fe6b 	bl	8001510 <SPI_command>
 800183a:	4b06      	ldr	r3, [pc, #24]	; (8001854 <display_init+0x94>)
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
 8001840:	4b09      	ldr	r3, [pc, #36]	; (8001868 <display_init+0xa8>)
 8001842:	2200      	movs	r2, #0
 8001844:	801a      	strh	r2, [r3, #0]


		  }

		//  if (init==5) display_fill();
}
 8001846:	bf00      	nop
 8001848:	3728      	adds	r7, #40	; 0x28
 800184a:	46bd      	mov	sp, r7
 800184c:	bdb0      	pop	{r4, r5, r7, pc}
 800184e:	bf00      	nop
 8001850:	0800b5c4 	.word	0x0800b5c4
 8001854:	200024c0 	.word	0x200024c0
 8001858:	200024c1 	.word	0x200024c1
 800185c:	200024c2 	.word	0x200024c2
 8001860:	20000000 	.word	0x20000000
 8001864:	200024be 	.word	0x200024be
 8001868:	200024ba 	.word	0x200024ba

0800186c <gfx_send>:


void gfx_send(void){         // send spi to lcd from gfx ram
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0


			uint8_t spi_store[3];
			uint8_t spi_store2=0;
 8001872:	2300      	movs	r3, #0
 8001874:	71fb      	strb	r3, [r7, #7]
			uint8_t spi_store3=gfx_ram[gfx_send_counter];
 8001876:	4b24      	ldr	r3, [pc, #144]	; (8001908 <gfx_send+0x9c>)
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	461a      	mov	r2, r3
 800187c:	4b23      	ldr	r3, [pc, #140]	; (800190c <gfx_send+0xa0>)
 800187e:	5c9b      	ldrb	r3, [r3, r2]
 8001880:	71bb      	strb	r3, [r7, #6]
	if (gfx_send_counter2>1) {spi_store2=250;
 8001882:	4b23      	ldr	r3, [pc, #140]	; (8001910 <gfx_send+0xa4>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d902      	bls.n	8001890 <gfx_send+0x24>
 800188a:	23fa      	movs	r3, #250	; 0xfa
 800188c:	71fb      	strb	r3, [r7, #7]
 800188e:	e001      	b.n	8001894 <gfx_send+0x28>

			}

			else {spi_store2=248;    }//start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8001890:	23f8      	movs	r3, #248	; 0xf8
 8001892:	71fb      	strb	r3, [r7, #7]


					spi_store[0]=spi_store2;
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	703b      	strb	r3, [r7, #0]
					spi_store[1]=((spi_store3>>4)<<4);
 8001898:	79bb      	ldrb	r3, [r7, #6]
 800189a:	091b      	lsrs	r3, r3, #4
 800189c:	b2db      	uxtb	r3, r3
 800189e:	011b      	lsls	r3, r3, #4
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	707b      	strb	r3, [r7, #1]
					spi_store[2]=((spi_store3&15)<<4);
 80018a4:	79bb      	ldrb	r3, [r7, #6]
 80018a6:	011b      	lsls	r3, r3, #4
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	70bb      	strb	r3, [r7, #2]


						HAL_SPI_Transmit(&hspi2,spi_store,3,3);  // ok
 80018ac:	4639      	mov	r1, r7
 80018ae:	2303      	movs	r3, #3
 80018b0:	2203      	movs	r2, #3
 80018b2:	4818      	ldr	r0, [pc, #96]	; (8001914 <gfx_send+0xa8>)
 80018b4:	f007 f9e1 	bl	8008c7a <HAL_SPI_Transmit>
					if (gfx_send_counter2==17 ) { gfx_send_counter2=0;    } else gfx_send_counter2++; // check elsewhere if changing gfx_send_counter
 80018b8:	4b15      	ldr	r3, [pc, #84]	; (8001910 <gfx_send+0xa4>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b11      	cmp	r3, #17
 80018be:	d103      	bne.n	80018c8 <gfx_send+0x5c>
 80018c0:	4b13      	ldr	r3, [pc, #76]	; (8001910 <gfx_send+0xa4>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
 80018c6:	e005      	b.n	80018d4 <gfx_send+0x68>
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <gfx_send+0xa4>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	3301      	adds	r3, #1
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <gfx_send+0xa4>)
 80018d2:	701a      	strb	r2, [r3, #0]
			if (gfx_send_counter==1151 ) { gfx_send_counter=0; disp_end=1; gfx_send_counter2=0;    } else gfx_send_counter++; ;
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <gfx_send+0x9c>)
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	f240 427f 	movw	r2, #1151	; 0x47f
 80018dc:	4293      	cmp	r3, r2
 80018de:	d109      	bne.n	80018f4 <gfx_send+0x88>
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <gfx_send+0x9c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	801a      	strh	r2, [r3, #0]
 80018e6:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <gfx_send+0xac>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	701a      	strb	r2, [r3, #0]
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <gfx_send+0xa4>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]

		}
 80018f2:	e005      	b.n	8001900 <gfx_send+0x94>
			if (gfx_send_counter==1151 ) { gfx_send_counter=0; disp_end=1; gfx_send_counter2=0;    } else gfx_send_counter++; ;
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <gfx_send+0x9c>)
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	3301      	adds	r3, #1
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	4b02      	ldr	r3, [pc, #8]	; (8001908 <gfx_send+0x9c>)
 80018fe:	801a      	strh	r2, [r3, #0]
		}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20002fee 	.word	0x20002fee
 800190c:	20002b6c 	.word	0x20002b6c
 8001910:	20002ff0 	.word	0x20002ff0
 8001914:	200070f0 	.word	0x200070f0
 8001918:	20002ffe 	.word	0x20002ffe

0800191c <gfx_clear>:

void gfx_clear(void){     // simple gfx ram clear ,besides feedback
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0

	for (n=0;n<1152 ;n=n+18)    {
 8001920:	4b19      	ldr	r3, [pc, #100]	; (8001988 <gfx_clear+0x6c>)
 8001922:	2200      	movs	r2, #0
 8001924:	801a      	strh	r2, [r3, #0]
 8001926:	e01c      	b.n	8001962 <gfx_clear+0x46>
				for (i=2;i<18;i++){ gfx_ram[n+i] =0;
 8001928:	4b18      	ldr	r3, [pc, #96]	; (800198c <gfx_clear+0x70>)
 800192a:	2202      	movs	r2, #2
 800192c:	801a      	strh	r2, [r3, #0]
 800192e:	e00e      	b.n	800194e <gfx_clear+0x32>
 8001930:	4b15      	ldr	r3, [pc, #84]	; (8001988 <gfx_clear+0x6c>)
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	461a      	mov	r2, r3
 8001936:	4b15      	ldr	r3, [pc, #84]	; (800198c <gfx_clear+0x70>)
 8001938:	881b      	ldrh	r3, [r3, #0]
 800193a:	4413      	add	r3, r2
 800193c:	4a14      	ldr	r2, [pc, #80]	; (8001990 <gfx_clear+0x74>)
 800193e:	2100      	movs	r1, #0
 8001940:	54d1      	strb	r1, [r2, r3]
 8001942:	4b12      	ldr	r3, [pc, #72]	; (800198c <gfx_clear+0x70>)
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	3301      	adds	r3, #1
 8001948:	b29a      	uxth	r2, r3
 800194a:	4b10      	ldr	r3, [pc, #64]	; (800198c <gfx_clear+0x70>)
 800194c:	801a      	strh	r2, [r3, #0]
 800194e:	4b0f      	ldr	r3, [pc, #60]	; (800198c <gfx_clear+0x70>)
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	2b11      	cmp	r3, #17
 8001954:	d9ec      	bls.n	8001930 <gfx_clear+0x14>
	for (n=0;n<1152 ;n=n+18)    {
 8001956:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <gfx_clear+0x6c>)
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	3312      	adds	r3, #18
 800195c:	b29a      	uxth	r2, r3
 800195e:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <gfx_clear+0x6c>)
 8001960:	801a      	strh	r2, [r3, #0]
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <gfx_clear+0x6c>)
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800196a:	d3dd      	bcc.n	8001928 <gfx_clear+0xc>

				}  }
	 gfx_send_swap=0;  // disable line skip
 800196c:	4b09      	ldr	r3, [pc, #36]	; (8001994 <gfx_clear+0x78>)
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
	 gfx_send_counter=0;    //reset page
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <gfx_clear+0x7c>)
 8001974:	2200      	movs	r2, #0
 8001976:	801a      	strh	r2, [r3, #0]
	 disp_end=0;     //  should disable display process till one page
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <gfx_clear+0x80>)
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]

}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	20000870 	.word	0x20000870
 800198c:	20000876 	.word	0x20000876
 8001990:	20002b6c 	.word	0x20002b6c
 8001994:	20002ff2 	.word	0x20002ff2
 8001998:	20002fee 	.word	0x20002fee
 800199c:	20002ffe 	.word	0x20002ffe

080019a0 <display_clear>:

		 gfx_send();

	 }  }

void display_clear (void){ //  simple character clear on default menu3
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0

	uint16_t disp_counter=0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	80fb      	strh	r3, [r7, #6]
	for (disp_counter=0;disp_counter<default_menu3_size;disp_counter++){
 80019aa:	2300      	movs	r3, #0
 80019ac:	80fb      	strh	r3, [r7, #6]
 80019ae:	e006      	b.n	80019be <display_clear+0x1e>
		default_menu3[disp_counter]=47;
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	4a09      	ldr	r2, [pc, #36]	; (80019d8 <display_clear+0x38>)
 80019b4:	212f      	movs	r1, #47	; 0x2f
 80019b6:	54d1      	strb	r1, [r2, r3]
	for (disp_counter=0;disp_counter<default_menu3_size;disp_counter++){
 80019b8:	88fb      	ldrh	r3, [r7, #6]
 80019ba:	3301      	adds	r3, #1
 80019bc:	80fb      	strh	r3, [r7, #6]
 80019be:	4b07      	ldr	r3, [pc, #28]	; (80019dc <display_clear+0x3c>)
 80019c0:	881b      	ldrh	r3, [r3, #0]
 80019c2:	88fa      	ldrh	r2, [r7, #6]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d3f3      	bcc.n	80019b0 <display_clear+0x10>
	}


}
 80019c8:	bf00      	nop
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	20006b9c 	.word	0x20006b9c
 80019dc:	20004962 	.word	0x20004962

080019e0 <display_generate>:
void display_generate(void){    // display character generate, 1+1+16 chars
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0

	gfx_clear_flag=0;
 80019e4:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <display_generate+0x48>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]
	for (i=0;i<18;i++) {
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <display_generate+0x4c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	801a      	strh	r2, [r3, #0]
 80019f0:	e009      	b.n	8001a06 <display_generate+0x26>
	display_process();
 80019f2:	f000 f863 	bl	8001abc <display_process>
		  displayBuffer2();} // 5 cycles max for the lot or  0.2ms
 80019f6:	f000 fab5 	bl	8001f64 <displayBuffer2>
	for (i=0;i<18;i++) {
 80019fa:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <display_generate+0x4c>)
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	3301      	adds	r3, #1
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <display_generate+0x4c>)
 8001a04:	801a      	strh	r2, [r3, #0]
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <display_generate+0x4c>)
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	2b11      	cmp	r3, #17
 8001a0c:	d9f1      	bls.n	80019f2 <display_generate+0x12>
	 if(!gfx_clear_flag)   gfx_send_swap=1;   // enable line swapping
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <display_generate+0x48>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d102      	bne.n	8001a1c <display_generate+0x3c>
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <display_generate+0x50>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	701a      	strb	r2, [r3, #0]
	 disp_end=0;   ///reset till next full page
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <display_generate+0x54>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]

	//  if (!disp_stepper) break;

}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2000496e 	.word	0x2000496e
 8001a2c:	20000876 	.word	0x20000876
 8001a30:	20002ff2 	.word	0x20002ff2
 8001a34:	20002ffe 	.word	0x20002ffe

08001a38 <display_fill>:

void display_fill(void)  {     // full update of gfx memory, ok
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
loop_counter3=1;
 8001a3e:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <display_fill+0x6c>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	701a      	strb	r2, [r3, #0]
uint16_t fill_counter= 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	80fb      	strh	r3, [r7, #6]
uint16_t init_b1=init_b;
 8001a48:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <display_fill+0x70>)
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	80bb      	strh	r3, [r7, #4]
uint16_t init_bs=init_b&896;   // get msb
 8001a4e:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <display_fill+0x70>)
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8001a56:	807b      	strh	r3, [r7, #2]
fill_counter=fill_counter+init_bs; // add msb from init b
 8001a58:	88fa      	ldrh	r2, [r7, #6]
 8001a5a:	887b      	ldrh	r3, [r7, #2]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	80fb      	strh	r3, [r7, #6]

while ((fill_counter&896)==init_bs)   // skip when over a page something  127+
 8001a60:	e00a      	b.n	8001a78 <display_fill+0x40>
{
	init_b=fill_counter; // upcount
 8001a62:	4a11      	ldr	r2, [pc, #68]	; (8001aa8 <display_fill+0x70>)
 8001a64:	88fb      	ldrh	r3, [r7, #6]
 8001a66:	8013      	strh	r3, [r2, #0]

	disp_stepper=1;   // first character
 8001a68:	4b10      	ldr	r3, [pc, #64]	; (8001aac <display_fill+0x74>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	701a      	strb	r2, [r3, #0]
	displayBuffer2();	//read default menu
 8001a6e:	f000 fa79 	bl	8001f64 <displayBuffer2>
	fill_counter++;
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	3301      	adds	r3, #1
 8001a76:	80fb      	strh	r3, [r7, #6]
while ((fill_counter&896)==init_bs)   // skip when over a page something  127+
 8001a78:	88fb      	ldrh	r3, [r7, #6]
 8001a7a:	f403 7260 	and.w	r2, r3, #896	; 0x380
 8001a7e:	887b      	ldrh	r3, [r7, #2]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d0ee      	beq.n	8001a62 <display_fill+0x2a>
}
init_b=init_b1; // write back original value
 8001a84:	4a08      	ldr	r2, [pc, #32]	; (8001aa8 <display_fill+0x70>)
 8001a86:	88bb      	ldrh	r3, [r7, #4]
 8001a88:	8013      	strh	r3, [r2, #0]
gfx_send_swap=0;  // disable line skip
 8001a8a:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <display_fill+0x78>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]
	 gfx_send_counter=0;    //reset page
 8001a90:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <display_fill+0x7c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	801a      	strh	r2, [r3, #0]
	 disp_end=0;     //  should disable display process till one page
 8001a96:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <display_fill+0x80>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]


	}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20002fff 	.word	0x20002fff
 8001aa8:	200024c2 	.word	0x200024c2
 8001aac:	200001b2 	.word	0x200001b2
 8001ab0:	20002ff2 	.word	0x20002ff2
 8001ab4:	20002fee 	.word	0x20002fee
 8001ab8:	20002ffe 	.word	0x20002ffe

08001abc <display_process>:



void display_process(void){							// keep data processing here
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
uint16_t feedback_loc=(init_b&896)+107;
 8001ac2:	4b80      	ldr	r3, [pc, #512]	; (8001cc4 <display_process+0x208>)
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	336b      	adds	r3, #107	; 0x6b
 8001ace:	81bb      	strh	r3, [r7, #12]

	if ((enc2_tempC==enc2_dir) && (!enc2_add))  {
 8001ad0:	4b7d      	ldr	r3, [pc, #500]	; (8001cc8 <display_process+0x20c>)
 8001ad2:	f993 3000 	ldrsb.w	r3, [r3]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4b7c      	ldr	r3, [pc, #496]	; (8001ccc <display_process+0x210>)
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d112      	bne.n	8001b06 <display_process+0x4a>
 8001ae0:	4b7b      	ldr	r3, [pc, #492]	; (8001cd0 <display_process+0x214>)
 8001ae2:	f993 3000 	ldrsb.w	r3, [r3]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d10d      	bne.n	8001b06 <display_process+0x4a>
		if ((disp_stepper==5)&&(!target_display))  {enc2_add=2; 	disp_stepper=17;}   	 // wait till enc2_dir  hasn't changed ,jump and then change feedback
 8001aea:	4b7a      	ldr	r3, [pc, #488]	; (8001cd4 <display_process+0x218>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b05      	cmp	r3, #5
 8001af0:	d109      	bne.n	8001b06 <display_process+0x4a>
 8001af2:	4b79      	ldr	r3, [pc, #484]	; (8001cd8 <display_process+0x21c>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d105      	bne.n	8001b06 <display_process+0x4a>
 8001afa:	4b75      	ldr	r3, [pc, #468]	; (8001cd0 <display_process+0x214>)
 8001afc:	2202      	movs	r2, #2
 8001afe:	701a      	strb	r2, [r3, #0]
 8001b00:	4b74      	ldr	r3, [pc, #464]	; (8001cd4 <display_process+0x218>)
 8001b02:	2211      	movs	r2, #17
 8001b04:	701a      	strb	r2, [r3, #0]
			}

	if (disp_stepper>1)	init_b=feedback_loc+16+(disp_stepper);  // write lcd3
 8001b06:	4b73      	ldr	r3, [pc, #460]	; (8001cd4 <display_process+0x218>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d909      	bls.n	8001b22 <display_process+0x66>
 8001b0e:	4b71      	ldr	r3, [pc, #452]	; (8001cd4 <display_process+0x218>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	89bb      	ldrh	r3, [r7, #12]
 8001b16:	4413      	add	r3, r2
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	3310      	adds	r3, #16
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	4b69      	ldr	r3, [pc, #420]	; (8001cc4 <display_process+0x208>)
 8001b20:	801a      	strh	r2, [r3, #0]
	if (disp_stepper>4)	init_b=feedback_loc+(disp_stepper);  // write feedback line
 8001b22:	4b6c      	ldr	r3, [pc, #432]	; (8001cd4 <display_process+0x218>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	d907      	bls.n	8001b3a <display_process+0x7e>
 8001b2a:	4b6a      	ldr	r3, [pc, #424]	; (8001cd4 <display_process+0x218>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	89bb      	ldrh	r3, [r7, #12]
 8001b32:	4413      	add	r3, r2
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	4b63      	ldr	r3, [pc, #396]	; (8001cc4 <display_process+0x208>)
 8001b38:	801a      	strh	r2, [r3, #0]

	if ((lcd_temp!=enc_dir)  && (enc2_tempC==enc2_dir) )   {*menu_vars_var=enc_dir;   // enc2_dir =same enc_dir=changed
 8001b3a:	4b68      	ldr	r3, [pc, #416]	; (8001cdc <display_process+0x220>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4b67      	ldr	r3, [pc, #412]	; (8001ce0 <display_process+0x224>)
 8001b42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d014      	beq.n	8001b74 <display_process+0xb8>
 8001b4a:	4b5f      	ldr	r3, [pc, #380]	; (8001cc8 <display_process+0x20c>)
 8001b4c:	f993 3000 	ldrsb.w	r3, [r3]
 8001b50:	461a      	mov	r2, r3
 8001b52:	4b5e      	ldr	r3, [pc, #376]	; (8001ccc <display_process+0x210>)
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d10c      	bne.n	8001b74 <display_process+0xb8>
 8001b5a:	4b61      	ldr	r3, [pc, #388]	; (8001ce0 <display_process+0x224>)
 8001b5c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b60:	4b60      	ldr	r3, [pc, #384]	; (8001ce4 <display_process+0x228>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	701a      	strb	r2, [r3, #0]
	lcd_temp=enc_dir;  }
 8001b68:	4b5d      	ldr	r3, [pc, #372]	; (8001ce0 <display_process+0x224>)
 8001b6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	4b5a      	ldr	r3, [pc, #360]	; (8001cdc <display_process+0x220>)
 8001b72:	701a      	strb	r2, [r3, #0]



	if ((disp_stepper==0) && (enc2_tempC!=enc2_dir) && (!enc2_add))  {      // wait till loop end , ok
 8001b74:	4b57      	ldr	r3, [pc, #348]	; (8001cd4 <display_process+0x218>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f040 8082 	bne.w	8001c82 <display_process+0x1c6>
 8001b7e:	4b52      	ldr	r3, [pc, #328]	; (8001cc8 <display_process+0x20c>)
 8001b80:	f993 3000 	ldrsb.w	r3, [r3]
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b51      	ldr	r3, [pc, #324]	; (8001ccc <display_process+0x210>)
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d079      	beq.n	8001c82 <display_process+0x1c6>
 8001b8e:	4b50      	ldr	r3, [pc, #320]	; (8001cd0 <display_process+0x214>)
 8001b90:	f993 3000 	ldrsb.w	r3, [r3]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d174      	bne.n	8001c82 <display_process+0x1c6>

	if  (enc2_tempC<enc2_dir)	 enc2_add=1;   									// use this to set up or down count for variables , might change
 8001b98:	4b4b      	ldr	r3, [pc, #300]	; (8001cc8 <display_process+0x20c>)
 8001b9a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	4b4a      	ldr	r3, [pc, #296]	; (8001ccc <display_process+0x210>)
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	da02      	bge.n	8001bae <display_process+0xf2>
 8001ba8:	4b49      	ldr	r3, [pc, #292]	; (8001cd0 <display_process+0x214>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	701a      	strb	r2, [r3, #0]
		if  (enc2_tempC>enc2_dir)	 enc2_add=-1;    // slow but 1 step at a time
 8001bae:	4b46      	ldr	r3, [pc, #280]	; (8001cc8 <display_process+0x20c>)
 8001bb0:	f993 3000 	ldrsb.w	r3, [r3]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4b45      	ldr	r3, [pc, #276]	; (8001ccc <display_process+0x210>)
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	dd02      	ble.n	8001bc4 <display_process+0x108>
 8001bbe:	4b44      	ldr	r3, [pc, #272]	; (8001cd0 <display_process+0x214>)
 8001bc0:	22ff      	movs	r2, #255	; 0xff
 8001bc2:	701a      	strb	r2, [r3, #0]
		if  (enc2_tempC<enc2_dir)	 enc2_add=+(enc2_dir-enc2_tempC);   	//  fast but skips
 8001bc4:	4b40      	ldr	r3, [pc, #256]	; (8001cc8 <display_process+0x20c>)
 8001bc6:	f993 3000 	ldrsb.w	r3, [r3]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	4b3f      	ldr	r3, [pc, #252]	; (8001ccc <display_process+0x210>)
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	da0b      	bge.n	8001bec <display_process+0x130>
 8001bd4:	4b3d      	ldr	r3, [pc, #244]	; (8001ccc <display_process+0x210>)
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	4b3b      	ldr	r3, [pc, #236]	; (8001cc8 <display_process+0x20c>)
 8001bdc:	f993 3000 	ldrsb.w	r3, [r3]
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	b25a      	sxtb	r2, r3
 8001be8:	4b39      	ldr	r3, [pc, #228]	; (8001cd0 <display_process+0x214>)
 8001bea:	701a      	strb	r2, [r3, #0]

		if  (enc2_tempC>enc2_dir)	 enc2_add=-(enc2_tempC-enc2_dir);
 8001bec:	4b36      	ldr	r3, [pc, #216]	; (8001cc8 <display_process+0x20c>)
 8001bee:	f993 3000 	ldrsb.w	r3, [r3]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4b35      	ldr	r3, [pc, #212]	; (8001ccc <display_process+0x210>)
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	dd0b      	ble.n	8001c14 <display_process+0x158>
 8001bfc:	4b33      	ldr	r3, [pc, #204]	; (8001ccc <display_process+0x210>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	4b31      	ldr	r3, [pc, #196]	; (8001cc8 <display_process+0x20c>)
 8001c04:	f993 3000 	ldrsb.w	r3, [r3]
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	b25a      	sxtb	r2, r3
 8001c10:	4b2f      	ldr	r3, [pc, #188]	; (8001cd0 <display_process+0x214>)
 8001c12:	701a      	strb	r2, [r3, #0]


		enc2_tempC=enc2_dir;	   // loop back until change
 8001c14:	4b2d      	ldr	r3, [pc, #180]	; (8001ccc <display_process+0x210>)
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	b25a      	sxtb	r2, r3
 8001c1a:	4b2b      	ldr	r3, [pc, #172]	; (8001cc8 <display_process+0x20c>)
 8001c1c:	701a      	strb	r2, [r3, #0]
		if ((enc_out1>=0)  &&  (enc_out1<=menu_title_count))    {enc_out1=enc_out1+enc2_add;}   // count up or down within limits
 8001c1e:	4b32      	ldr	r3, [pc, #200]	; (8001ce8 <display_process+0x22c>)
 8001c20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	db14      	blt.n	8001c52 <display_process+0x196>
 8001c28:	4b2f      	ldr	r3, [pc, #188]	; (8001ce8 <display_process+0x22c>)
 8001c2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	4b2e      	ldr	r3, [pc, #184]	; (8001cec <display_process+0x230>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	dc0c      	bgt.n	8001c52 <display_process+0x196>
 8001c38:	4b25      	ldr	r3, [pc, #148]	; (8001cd0 <display_process+0x214>)
 8001c3a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	4b29      	ldr	r3, [pc, #164]	; (8001ce8 <display_process+0x22c>)
 8001c42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	4413      	add	r3, r2
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	b21a      	sxth	r2, r3
 8001c4e:	4b26      	ldr	r3, [pc, #152]	; (8001ce8 <display_process+0x22c>)
 8001c50:	801a      	strh	r2, [r3, #0]
		if (enc_out1<0)  {  enc_out1=menu_title_count; }
 8001c52:	4b25      	ldr	r3, [pc, #148]	; (8001ce8 <display_process+0x22c>)
 8001c54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	da04      	bge.n	8001c66 <display_process+0x1aa>
 8001c5c:	4b23      	ldr	r3, [pc, #140]	; (8001cec <display_process+0x230>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	b21a      	sxth	r2, r3
 8001c62:	4b21      	ldr	r3, [pc, #132]	; (8001ce8 <display_process+0x22c>)
 8001c64:	801a      	strh	r2, [r3, #0]
		if (enc_out1>menu_title_count) enc_out1=0;
 8001c66:	4b20      	ldr	r3, [pc, #128]	; (8001ce8 <display_process+0x22c>)
 8001c68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4b1f      	ldr	r3, [pc, #124]	; (8001cec <display_process+0x230>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	dd02      	ble.n	8001c7c <display_process+0x1c0>
 8001c76:	4b1c      	ldr	r3, [pc, #112]	; (8001ce8 <display_process+0x22c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	801a      	strh	r2, [r3, #0]
		enc2_add=2;
 8001c7c:	4b14      	ldr	r3, [pc, #80]	; (8001cd0 <display_process+0x214>)
 8001c7e:	2202      	movs	r2, #2
 8001c80:	701a      	strb	r2, [r3, #0]

	}


	if ((disp_stepper==0) && (enc2_add==2))			// skip if no input for enc2 , also maybe wait till enc2 stopped moving
 8001c82:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <display_process+0x218>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d170      	bne.n	8001d6c <display_process+0x2b0>
 8001c8a:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <display_process+0x214>)
 8001c8c:	f993 3000 	ldrsb.w	r3, [r3]
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d16b      	bne.n	8001d6c <display_process+0x2b0>
	{



	uint8_t crap_hold9=(menu_title_lut[enc_out1]>>16)&255;   // look up up menu_titles_final
 8001c94:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <display_process+0x22c>)
 8001c96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <display_process+0x234>)
 8001c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca2:	0c1b      	lsrs	r3, r3, #16
 8001ca4:	72fb      	strb	r3, [r7, #11]
	if (crap_hold9==5) target_display=1;   // check if LFO.target is on cursor , may use for other things
 8001ca6:	7afb      	ldrb	r3, [r7, #11]
 8001ca8:	2b05      	cmp	r3, #5
 8001caa:	d103      	bne.n	8001cb4 <display_process+0x1f8>
 8001cac:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <display_process+0x21c>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	701a      	strb	r2, [r3, #0]
 8001cb2:	e022      	b.n	8001cfa <display_process+0x23e>
	else if (crap_hold9==36) target_display=2;   else target_display=0;
 8001cb4:	7afb      	ldrb	r3, [r7, #11]
 8001cb6:	2b24      	cmp	r3, #36	; 0x24
 8001cb8:	d11c      	bne.n	8001cf4 <display_process+0x238>
 8001cba:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <display_process+0x21c>)
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	701a      	strb	r2, [r3, #0]
 8001cc0:	e01b      	b.n	8001cfa <display_process+0x23e>
 8001cc2:	bf00      	nop
 8001cc4:	200024c2 	.word	0x200024c2
 8001cc8:	200001b0 	.word	0x200001b0
 8001ccc:	200024b2 	.word	0x200024b2
 8001cd0:	200001b1 	.word	0x200001b1
 8001cd4:	200001b2 	.word	0x200001b2
 8001cd8:	2000496b 	.word	0x2000496b
 8001cdc:	2000496a 	.word	0x2000496a
 8001ce0:	200024b4 	.word	0x200024b4
 8001ce4:	20004954 	.word	0x20004954
 8001ce8:	20000264 	.word	0x20000264
 8001cec:	20004351 	.word	0x20004351
 8001cf0:	20004354 	.word	0x20004354
 8001cf4:	4b87      	ldr	r3, [pc, #540]	; (8001f14 <display_process+0x458>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]

	// fetch values for last line or cursor

	 memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+crap_hold9),8);   // copy feedback data for reading,ok
 8001cfa:	89bb      	ldrh	r3, [r7, #12]
 8001cfc:	3308      	adds	r3, #8
 8001cfe:	4a86      	ldr	r2, [pc, #536]	; (8001f18 <display_process+0x45c>)
 8001d00:	1898      	adds	r0, r3, r2
 8001d02:	7afb      	ldrb	r3, [r7, #11]
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4a85      	ldr	r2, [pc, #532]	; (8001f1c <display_process+0x460>)
 8001d08:	4413      	add	r3, r2
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2208      	movs	r2, #8
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f009 f9d2 	bl	800b0b8 <memcpy>
	 memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 8001d14:	7afb      	ldrb	r3, [r7, #11]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4a80      	ldr	r2, [pc, #512]	; (8001f1c <display_process+0x460>)
 8001d1a:	4413      	add	r3, r2
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	4b80      	ldr	r3, [pc, #512]	; (8001f20 <display_process+0x464>)
 8001d20:	6810      	ldr	r0, [r2, #0]
 8001d22:	6851      	ldr	r1, [r2, #4]
 8001d24:	c303      	stmia	r3!, {r0, r1}

	 char temp_char[]="  ";
 8001d26:	4a7f      	ldr	r2, [pc, #508]	; (8001f24 <display_process+0x468>)
 8001d28:	1d3b      	adds	r3, r7, #4
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	8019      	strh	r1, [r3, #0]
 8001d30:	3302      	adds	r3, #2
 8001d32:	0c12      	lsrs	r2, r2, #16
 8001d34:	701a      	strb	r2, [r3, #0]
	 memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 8001d36:	4b7c      	ldr	r3, [pc, #496]	; (8001f28 <display_process+0x46c>)
 8001d38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	461a      	mov	r2, r3
 8001d40:	4b7a      	ldr	r3, [pc, #488]	; (8001f2c <display_process+0x470>)
 8001d42:	4413      	add	r3, r2
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	80bb      	strh	r3, [r7, #4]
	 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 8001d4a:	1d3b      	adds	r3, r7, #4
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f009 f985 	bl	800b05c <atoi>
 8001d52:	4603      	mov	r3, r0
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4b76      	ldr	r3, [pc, #472]	; (8001f30 <display_process+0x474>)
 8001d58:	701a      	strb	r2, [r3, #0]


	 menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8001d5a:	4b75      	ldr	r3, [pc, #468]	; (8001f30 <display_process+0x474>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	486f      	ldr	r0, [pc, #444]	; (8001f20 <display_process+0x464>)
 8001d62:	f7fe fef9 	bl	8000b58 <menu_vars>
 8001d66:	4603      	mov	r3, r0
 8001d68:	4a72      	ldr	r2, [pc, #456]	; (8001f34 <display_process+0x478>)
 8001d6a:	6013      	str	r3, [r2, #0]

	    // grab value on ptr address , also write first char , ok

	}

	if ((disp_stepper==0) || (disp_stepper==1))   // repeat first character
 8001d6c:	4b72      	ldr	r3, [pc, #456]	; (8001f38 <display_process+0x47c>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <display_process+0x2c0>
 8001d74:	4b70      	ldr	r3, [pc, #448]	; (8001f38 <display_process+0x47c>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d14d      	bne.n	8001e18 <display_process+0x35c>
	{


		uint16_t init_holder=init_b;
 8001d7c:	4b6f      	ldr	r3, [pc, #444]	; (8001f3c <display_process+0x480>)
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	813b      	strh	r3, [r7, #8]

		init_b= menu_title_lut[enc_out1];    // this only grabs menu_title_count (&255)      , problem maybe here
 8001d82:	4b69      	ldr	r3, [pc, #420]	; (8001f28 <display_process+0x46c>)
 8001d84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4b6d      	ldr	r3, [pc, #436]	; (8001f40 <display_process+0x484>)
 8001d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	4b6a      	ldr	r3, [pc, #424]	; (8001f3c <display_process+0x480>)
 8001d94:	801a      	strh	r2, [r3, #0]
		//	if (init_b>(feedback_loc+3) ) init_b=init_b+16;// skip feedback line
		if ((init_b&896)!=(init_holder&896)) {display_fill(); gfx_clear_flag=1; } // detect x over , not perfect
 8001d96:	4b69      	ldr	r3, [pc, #420]	; (8001f3c <display_process+0x480>)
 8001d98:	881a      	ldrh	r2, [r3, #0]
 8001d9a:	893b      	ldrh	r3, [r7, #8]
 8001d9c:	4053      	eors	r3, r2
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d004      	beq.n	8001db2 <display_process+0x2f6>
 8001da8:	f7ff fe46 	bl	8001a38 <display_fill>
 8001dac:	4b65      	ldr	r3, [pc, #404]	; (8001f44 <display_process+0x488>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	701a      	strb	r2, [r3, #0]

		lcd_out3=*menu_vars_var;
 8001db2:	4b60      	ldr	r3, [pc, #384]	; (8001f34 <display_process+0x478>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	4b63      	ldr	r3, [pc, #396]	; (8001f48 <display_process+0x48c>)
 8001dbc:	801a      	strh	r2, [r3, #0]
		div_limit=lcd_out3;
 8001dbe:	4b62      	ldr	r3, [pc, #392]	; (8001f48 <display_process+0x48c>)
 8001dc0:	881b      	ldrh	r3, [r3, #0]
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	4b61      	ldr	r3, [pc, #388]	; (8001f4c <display_process+0x490>)
 8001dc6:	701a      	strb	r2, [r3, #0]
		if (lcd_out3>10)							div_limit= lcd_out3>>2;
 8001dc8:	4b5f      	ldr	r3, [pc, #380]	; (8001f48 <display_process+0x48c>)
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	2b0a      	cmp	r3, #10
 8001dce:	d906      	bls.n	8001dde <display_process+0x322>
 8001dd0:	4b5d      	ldr	r3, [pc, #372]	; (8001f48 <display_process+0x48c>)
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	089b      	lsrs	r3, r3, #2
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	4b5c      	ldr	r3, [pc, #368]	; (8001f4c <display_process+0x490>)
 8001ddc:	701a      	strb	r2, [r3, #0]
		if (lcd_out3>40)							div_limit= lcd_out3>>5;
 8001dde:	4b5a      	ldr	r3, [pc, #360]	; (8001f48 <display_process+0x48c>)
 8001de0:	881b      	ldrh	r3, [r3, #0]
 8001de2:	2b28      	cmp	r3, #40	; 0x28
 8001de4:	d906      	bls.n	8001df4 <display_process+0x338>
 8001de6:	4b58      	ldr	r3, [pc, #352]	; (8001f48 <display_process+0x48c>)
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	095b      	lsrs	r3, r3, #5
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	4b56      	ldr	r3, [pc, #344]	; (8001f4c <display_process+0x490>)
 8001df2:	701a      	strb	r2, [r3, #0]

		default_menu3[init_b]=div_limit+48; lcd_temp=lcd_out3; enc_dir=lcd_temp;       } // force enc_dir
 8001df4:	4b55      	ldr	r3, [pc, #340]	; (8001f4c <display_process+0x490>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4a50      	ldr	r2, [pc, #320]	; (8001f3c <display_process+0x480>)
 8001dfa:	8812      	ldrh	r2, [r2, #0]
 8001dfc:	3330      	adds	r3, #48	; 0x30
 8001dfe:	b2d9      	uxtb	r1, r3
 8001e00:	4b45      	ldr	r3, [pc, #276]	; (8001f18 <display_process+0x45c>)
 8001e02:	5499      	strb	r1, [r3, r2]
 8001e04:	4b50      	ldr	r3, [pc, #320]	; (8001f48 <display_process+0x48c>)
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	4b51      	ldr	r3, [pc, #324]	; (8001f50 <display_process+0x494>)
 8001e0c:	701a      	strb	r2, [r3, #0]
 8001e0e:	4b50      	ldr	r3, [pc, #320]	; (8001f50 <display_process+0x494>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	b21a      	sxth	r2, r3
 8001e14:	4b4f      	ldr	r3, [pc, #316]	; (8001f54 <display_process+0x498>)
 8001e16:	801a      	strh	r2, [r3, #0]

	if (disp_stepper>4) {default_menu3[feedback_loc+5]=menu_index_list[enc_out1<<1];   	default_menu3[feedback_loc+6]=menu_index_list[(enc_out1<<1)+1];}   // index display
 8001e18:	4b47      	ldr	r3, [pc, #284]	; (8001f38 <display_process+0x47c>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	d914      	bls.n	8001e4a <display_process+0x38e>
 8001e20:	4b41      	ldr	r3, [pc, #260]	; (8001f28 <display_process+0x46c>)
 8001e22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e26:	005a      	lsls	r2, r3, #1
 8001e28:	89bb      	ldrh	r3, [r7, #12]
 8001e2a:	3305      	adds	r3, #5
 8001e2c:	493f      	ldr	r1, [pc, #252]	; (8001f2c <display_process+0x470>)
 8001e2e:	5c89      	ldrb	r1, [r1, r2]
 8001e30:	4a39      	ldr	r2, [pc, #228]	; (8001f18 <display_process+0x45c>)
 8001e32:	54d1      	strb	r1, [r2, r3]
 8001e34:	4b3c      	ldr	r3, [pc, #240]	; (8001f28 <display_process+0x46c>)
 8001e36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	89bb      	ldrh	r3, [r7, #12]
 8001e40:	3306      	adds	r3, #6
 8001e42:	493a      	ldr	r1, [pc, #232]	; (8001f2c <display_process+0x470>)
 8001e44:	5c89      	ldrb	r1, [r1, r2]
 8001e46:	4a34      	ldr	r2, [pc, #208]	; (8001f18 <display_process+0x45c>)
 8001e48:	54d1      	strb	r1, [r2, r3]

	if ((target_display) &&   (disp_stepper>4))      // write LFO.target display , might use it for other things too
 8001e4a:	4b32      	ldr	r3, [pc, #200]	; (8001f14 <display_process+0x458>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d02e      	beq.n	8001eb0 <display_process+0x3f4>
 8001e52:	4b39      	ldr	r3, [pc, #228]	; (8001f38 <display_process+0x47c>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d92a      	bls.n	8001eb0 <display_process+0x3f4>
	{
		uint8_t target_tmp1=*menu_vars_var ;
 8001e5a:	4b36      	ldr	r3, [pc, #216]	; (8001f34 <display_process+0x478>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	73fb      	strb	r3, [r7, #15]
		if (target_tmp1>=menu_lookup_count) target_tmp1=0;    // check in case
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
 8001e64:	2b2b      	cmp	r3, #43	; 0x2b
 8001e66:	d901      	bls.n	8001e6c <display_process+0x3b0>
 8001e68:	2300      	movs	r3, #0
 8001e6a:	73fb      	strb	r3, [r7, #15]
		if (target_display==1) memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+target_tmp1),8);  // copy info for LFO
 8001e6c:	4b29      	ldr	r3, [pc, #164]	; (8001f14 <display_process+0x458>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d10c      	bne.n	8001e8e <display_process+0x3d2>
 8001e74:	89bb      	ldrh	r3, [r7, #12]
 8001e76:	3308      	adds	r3, #8
 8001e78:	4a27      	ldr	r2, [pc, #156]	; (8001f18 <display_process+0x45c>)
 8001e7a:	1898      	adds	r0, r3, r2
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4a26      	ldr	r2, [pc, #152]	; (8001f1c <display_process+0x460>)
 8001e82:	4413      	add	r3, r2
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2208      	movs	r2, #8
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f009 f915 	bl	800b0b8 <memcpy>
		if (target_display==2) memcpy(default_menu3+feedback_loc+8, *(patch_inputs+target_tmp1),8);  // Limited atm
 8001e8e:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <display_process+0x458>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d10c      	bne.n	8001eb0 <display_process+0x3f4>
 8001e96:	89bb      	ldrh	r3, [r7, #12]
 8001e98:	3308      	adds	r3, #8
 8001e9a:	4a1f      	ldr	r2, [pc, #124]	; (8001f18 <display_process+0x45c>)
 8001e9c:	1898      	adds	r0, r3, r2
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4a2d      	ldr	r2, [pc, #180]	; (8001f58 <display_process+0x49c>)
 8001ea4:	4413      	add	r3, r2
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2208      	movs	r2, #8
 8001eaa:	4619      	mov	r1, r3
 8001eac:	f009 f904 	bl	800b0b8 <memcpy>
		 		 	}

	if (disp_stepper==1)  gfx_send_cursor=(init_b>>4)&7 ;   //send cursor line
 8001eb0:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <display_process+0x47c>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d109      	bne.n	8001ecc <display_process+0x410>
 8001eb8:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <display_process+0x480>)
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	091b      	lsrs	r3, r3, #4
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	4b24      	ldr	r3, [pc, #144]	; (8001f5c <display_process+0x4a0>)
 8001eca:	701a      	strb	r2, [r3, #0]
	if (disp_stepper==2)  {
 8001ecc:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <display_process+0x47c>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d11a      	bne.n	8001f0a <display_process+0x44e>

		default_menu3[feedback_loc+18]=potSource[380]+48;
 8001ed4:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <display_process+0x4a4>)
 8001ed6:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
 8001eda:	89bb      	ldrh	r3, [r7, #12]
 8001edc:	3312      	adds	r3, #18
 8001ede:	3230      	adds	r2, #48	; 0x30
 8001ee0:	b2d1      	uxtb	r1, r2
 8001ee2:	4a0d      	ldr	r2, [pc, #52]	; (8001f18 <display_process+0x45c>)
 8001ee4:	54d1      	strb	r1, [r2, r3]
		default_menu3[feedback_loc+19]=potSource[381]+48; default_menu3[feedback_loc+20]=potSource[382]+48; }  // write this straight after start ,ok
 8001ee6:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <display_process+0x4a4>)
 8001ee8:	f893 217d 	ldrb.w	r2, [r3, #381]	; 0x17d
 8001eec:	89bb      	ldrh	r3, [r7, #12]
 8001eee:	3313      	adds	r3, #19
 8001ef0:	3230      	adds	r2, #48	; 0x30
 8001ef2:	b2d1      	uxtb	r1, r2
 8001ef4:	4a08      	ldr	r2, [pc, #32]	; (8001f18 <display_process+0x45c>)
 8001ef6:	54d1      	strb	r1, [r2, r3]
 8001ef8:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <display_process+0x4a4>)
 8001efa:	f893 217e 	ldrb.w	r2, [r3, #382]	; 0x17e
 8001efe:	89bb      	ldrh	r3, [r7, #12]
 8001f00:	3314      	adds	r3, #20
 8001f02:	3230      	adds	r2, #48	; 0x30
 8001f04:	b2d1      	uxtb	r1, r2
 8001f06:	4a04      	ldr	r2, [pc, #16]	; (8001f18 <display_process+0x45c>)
 8001f08:	54d1      	strb	r1, [r2, r3]


}   // end o void
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	2000496b 	.word	0x2000496b
 8001f18:	20006b9c 	.word	0x20006b9c
 8001f1c:	20000270 	.word	0x20000270
 8001f20:	20004958 	.word	0x20004958
 8001f24:	0800b5e8 	.word	0x0800b5e8
 8001f28:	20000264 	.word	0x20000264
 8001f2c:	20004754 	.word	0x20004754
 8001f30:	20004960 	.word	0x20004960
 8001f34:	20004954 	.word	0x20004954
 8001f38:	200001b2 	.word	0x200001b2
 8001f3c:	200024c2 	.word	0x200024c2
 8001f40:	20004354 	.word	0x20004354
 8001f44:	2000496e 	.word	0x2000496e
 8001f48:	20002ffc 	.word	0x20002ffc
 8001f4c:	20006996 	.word	0x20006996
 8001f50:	2000496a 	.word	0x2000496a
 8001f54:	200024b4 	.word	0x200024b4
 8001f58:	20000320 	.word	0x20000320
 8001f5c:	20002ff1 	.word	0x20002ff1
 8001f60:	20000654 	.word	0x20000654

08001f64 <displayBuffer2>:


void displayBuffer2 (void){       // use only writing characters  ,nothing more  , init_b for selecting location
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
														//when scrolling maybe use this only until  settled
														// start 2*8 bit then squeeze in 20*6 bit characters

	store_c= (default_menu3[init_b]-47)&127 ;    // grab char from mem
 8001f6a:	4b3d      	ldr	r3, [pc, #244]	; (8002060 <displayBuffer2+0xfc>)
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	4b3c      	ldr	r3, [pc, #240]	; (8002064 <displayBuffer2+0x100>)
 8001f72:	5c9b      	ldrb	r3, [r3, r2]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	3b2f      	subs	r3, #47	; 0x2f
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	4b39      	ldr	r3, [pc, #228]	; (8002068 <displayBuffer2+0x104>)
 8001f82:	801a      	strh	r2, [r3, #0]
	uint8_t init_bx=init_b&127;
 8001f84:	4b36      	ldr	r3, [pc, #216]	; (8002060 <displayBuffer2+0xfc>)
 8001f86:	881b      	ldrh	r3, [r3, #0]
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f8e:	71bb      	strb	r3, [r7, #6]

	uint8_t d_count;
uint8_t init_x=(init_bx & 15)+2 ;    // +2 important  2-17 hor char pos
 8001f90:	79bb      	ldrb	r3, [r7, #6]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	3302      	adds	r3, #2
 8001f9a:	717b      	strb	r3, [r7, #5]
uint8_t init_x2=(init_bx>>4)<<3 ;  // 0,8,16-64  vertical pos  gfx
 8001f9c:	79bb      	ldrb	r3, [r7, #6]
 8001f9e:	091b      	lsrs	r3, r3, #4
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	713b      	strb	r3, [r7, #4]
uint16_t init_y=((init_x2)*18)+init_x;   //   works ok  8  bit  0-1152
 8001fa6:	793b      	ldrb	r3, [r7, #4]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	461a      	mov	r2, r3
 8001fac:	00d2      	lsls	r2, r2, #3
 8001fae:	4413      	add	r3, r2
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	797b      	ldrb	r3, [r7, #5]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	4413      	add	r3, r2
 8001fba:	807b      	strh	r3, [r7, #2]
uint16_t store_x;

store_x=(store_c*8);  // i line characters , might shrink it and use extr for other  visuals , old code but keep for now
 8001fbc:	4b2a      	ldr	r3, [pc, #168]	; (8002068 <displayBuffer2+0x104>)
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	803b      	strh	r3, [r7, #0]


		if ( (disp_stepper==0))     // blinker for cursor character only  , might just flip the whole last line from prev tables then its x4 faster
 8001fc4:	4b29      	ldr	r3, [pc, #164]	; (800206c <displayBuffer2+0x108>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d11a      	bne.n	8002002 <displayBuffer2+0x9e>
			for (d_count=0;d_count<8;d_count++){
 8001fcc:	2300      	movs	r3, #0
 8001fce:	71fb      	strb	r3, [r7, #7]
 8001fd0:	e013      	b.n	8001ffa <displayBuffer2+0x96>

				gfx_ram[init_y+(d_count*18) ]= gfx_char[d_count+store_x]^127; //write character to ram ,should be elsewhere , blank is correct
 8001fd2:	79fa      	ldrb	r2, [r7, #7]
 8001fd4:	883b      	ldrh	r3, [r7, #0]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	4a25      	ldr	r2, [pc, #148]	; (8002070 <displayBuffer2+0x10c>)
 8001fda:	5cd1      	ldrb	r1, [r2, r3]
 8001fdc:	8878      	ldrh	r0, [r7, #2]
 8001fde:	79fa      	ldrb	r2, [r7, #7]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4403      	add	r3, r0
 8001fea:	f081 027f 	eor.w	r2, r1, #127	; 0x7f
 8001fee:	b2d1      	uxtb	r1, r2
 8001ff0:	4a20      	ldr	r2, [pc, #128]	; (8002074 <displayBuffer2+0x110>)
 8001ff2:	54d1      	strb	r1, [r2, r3]
			for (d_count=0;d_count<8;d_count++){
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	71fb      	strb	r3, [r7, #7]
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	2b07      	cmp	r3, #7
 8001ffe:	d9e8      	bls.n	8001fd2 <displayBuffer2+0x6e>
 8002000:	e016      	b.n	8002030 <displayBuffer2+0xcc>
			}

		else for (d_count=0;d_count<8;d_count++){
 8002002:	2300      	movs	r3, #0
 8002004:	71fb      	strb	r3, [r7, #7]
 8002006:	e010      	b.n	800202a <displayBuffer2+0xc6>
			gfx_ram[init_y+(d_count*18) ]= gfx_char[d_count+store_x]; //write character to ram ,should be elsewhere , seems affected by later stufff
 8002008:	79fa      	ldrb	r2, [r7, #7]
 800200a:	883b      	ldrh	r3, [r7, #0]
 800200c:	18d1      	adds	r1, r2, r3
 800200e:	8878      	ldrh	r0, [r7, #2]
 8002010:	79fa      	ldrb	r2, [r7, #7]
 8002012:	4613      	mov	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	4413      	add	r3, r2
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	4403      	add	r3, r0
 800201c:	4a14      	ldr	r2, [pc, #80]	; (8002070 <displayBuffer2+0x10c>)
 800201e:	5c51      	ldrb	r1, [r2, r1]
 8002020:	4a14      	ldr	r2, [pc, #80]	; (8002074 <displayBuffer2+0x110>)
 8002022:	54d1      	strb	r1, [r2, r3]
		else for (d_count=0;d_count<8;d_count++){
 8002024:	79fb      	ldrb	r3, [r7, #7]
 8002026:	3301      	adds	r3, #1
 8002028:	71fb      	strb	r3, [r7, #7]
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	2b07      	cmp	r3, #7
 800202e:	d9eb      	bls.n	8002008 <displayBuffer2+0xa4>
		}

if (disp_stepper==17) {disp_stepper=0;enc2_add=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8002030:	4b0e      	ldr	r3, [pc, #56]	; (800206c <displayBuffer2+0x108>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b11      	cmp	r3, #17
 8002036:	d106      	bne.n	8002046 <displayBuffer2+0xe2>
 8002038:	4b0c      	ldr	r3, [pc, #48]	; (800206c <displayBuffer2+0x108>)
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]
 800203e:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <displayBuffer2+0x114>)
 8002040:	2200      	movs	r2, #0
 8002042:	701a      	strb	r2, [r3, #0]


}    // displayBuffer2
 8002044:	e005      	b.n	8002052 <displayBuffer2+0xee>
if (disp_stepper==17) {disp_stepper=0;enc2_add=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <displayBuffer2+0x108>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	3301      	adds	r3, #1
 800204c:	b2da      	uxtb	r2, r3
 800204e:	4b07      	ldr	r3, [pc, #28]	; (800206c <displayBuffer2+0x108>)
 8002050:	701a      	strb	r2, [r3, #0]
}    // displayBuffer2
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	200024c2 	.word	0x200024c2
 8002064:	20006b9c 	.word	0x20006b9c
 8002068:	2000086e 	.word	0x2000086e
 800206c:	200001b2 	.word	0x200001b2
 8002070:	0800c1bc 	.word	0x0800c1bc
 8002074:	20002b6c 	.word	0x20002b6c
 8002078:	200001b1 	.word	0x200001b1

0800207c <note_reset>:


void note_reset (void){          // reset deafult values before modulation , in case it gets left  with no modulator
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0

	note[0].velocity=255;note[1].velocity=255;note[2].velocity=255;note[3].velocity=255;note[4].velocity=255;note[5].velocity=255;note[6].velocity=255
 8002080:	4b1c      	ldr	r3, [pc, #112]	; (80020f4 <note_reset+0x78>)
 8002082:	22ff      	movs	r2, #255	; 0xff
 8002084:	71da      	strb	r2, [r3, #7]
 8002086:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <note_reset+0x78>)
 8002088:	22ff      	movs	r2, #255	; 0xff
 800208a:	755a      	strb	r2, [r3, #21]
 800208c:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <note_reset+0x78>)
 800208e:	22ff      	movs	r2, #255	; 0xff
 8002090:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8002094:	4b17      	ldr	r3, [pc, #92]	; (80020f4 <note_reset+0x78>)
 8002096:	22ff      	movs	r2, #255	; 0xff
 8002098:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800209c:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <note_reset+0x78>)
 800209e:	22ff      	movs	r2, #255	; 0xff
 80020a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <note_reset+0x78>)
 80020a6:	22ff      	movs	r2, #255	; 0xff
 80020a8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80020ac:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <note_reset+0x78>)
 80020ae:	22ff      	movs	r2, #255	; 0xff
 80020b0:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
																;note[0].detune=127;note[1].detune=127;note[2].detune=127;note[3].detune=127;note[4].detune=127;
 80020b4:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <note_reset+0x78>)
 80020b6:	227f      	movs	r2, #127	; 0x7f
 80020b8:	721a      	strb	r2, [r3, #8]
 80020ba:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <note_reset+0x78>)
 80020bc:	227f      	movs	r2, #127	; 0x7f
 80020be:	759a      	strb	r2, [r3, #22]
 80020c0:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <note_reset+0x78>)
 80020c2:	227f      	movs	r2, #127	; 0x7f
 80020c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80020c8:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <note_reset+0x78>)
 80020ca:	227f      	movs	r2, #127	; 0x7f
 80020cc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <note_reset+0x78>)
 80020d2:	227f      	movs	r2, #127	; 0x7f
 80020d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	note[5].detune=127;note[6].detune=127;
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <note_reset+0x78>)
 80020da:	227f      	movs	r2, #127	; 0x7f
 80020dc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80020e0:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <note_reset+0x78>)
 80020e2:	227f      	movs	r2, #127	; 0x7f
 80020e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c


}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	200001b8 	.word	0x200001b8

080020f8 <sampling>:


return  output;

}
void sampling(void){						// 330 atm or 8.5ms
 80020f8:	b5b0      	push	{r4, r5, r7, lr}
 80020fa:	b0ce      	sub	sp, #312	; 0x138
 80020fc:	af00      	add	r7, sp, #0

//	if (time_proc>580) time_final=time_proc;

//time_proc=0;

	time_proc=0;
 80020fe:	4b7a      	ldr	r3, [pc, #488]	; (80022e8 <sampling+0x1f0>)
 8002100:	2200      	movs	r2, #0
 8002102:	801a      	strh	r2, [r3, #0]
	int32_t sample_accus[10] ={0,0,0,0,0,0,0,0,0,0};
 8002104:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002108:	2228      	movs	r2, #40	; 0x28
 800210a:	2100      	movs	r1, #0
 800210c:	4618      	mov	r0, r3
 800210e:	f008 ffe1 	bl	800b0d4 <memset>
uint8_t mask_i;
int32_t sample_Accu[10] ={0,0,0,0,0,0,0,0,0,0};   // accu for sample output or lookup
 8002112:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002116:	2228      	movs	r2, #40	; 0x28
 8002118:	2100      	movs	r1, #0
 800211a:	4618      	mov	r0, r3
 800211c:	f008 ffda 	bl	800b0d4 <memset>
uint16_t tuned_list[10];
if (bank_write==2)  {sample_pointD=512;}  else sample_pointD=0;
 8002120:	4b72      	ldr	r3, [pc, #456]	; (80022ec <sampling+0x1f4>)
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	2b02      	cmp	r3, #2
 8002126:	d104      	bne.n	8002132 <sampling+0x3a>
 8002128:	4b71      	ldr	r3, [pc, #452]	; (80022f0 <sampling+0x1f8>)
 800212a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800212e:	801a      	strh	r2, [r3, #0]
 8002130:	e002      	b.n	8002138 <sampling+0x40>
 8002132:	4b6f      	ldr	r3, [pc, #444]	; (80022f0 <sampling+0x1f8>)
 8002134:	2200      	movs	r2, #0
 8002136:	801a      	strh	r2, [r3, #0]

bank_write=0;
 8002138:	4b6c      	ldr	r3, [pc, #432]	; (80022ec <sampling+0x1f4>)
 800213a:	2200      	movs	r2, #0
 800213c:	801a      	strh	r2, [r3, #0]
memcpy(notes_joined,seq.notes1,16);
 800213e:	2210      	movs	r2, #16
 8002140:	496c      	ldr	r1, [pc, #432]	; (80022f4 <sampling+0x1fc>)
 8002142:	486d      	ldr	r0, [pc, #436]	; (80022f8 <sampling+0x200>)
 8002144:	f008 ffb8 	bl	800b0b8 <memcpy>
memcpy(notes_joined+16,seq.notes2,16);
 8002148:	4b6c      	ldr	r3, [pc, #432]	; (80022fc <sampling+0x204>)
 800214a:	2210      	movs	r2, #16
 800214c:	496c      	ldr	r1, [pc, #432]	; (8002300 <sampling+0x208>)
 800214e:	4618      	mov	r0, r3
 8002150:	f008 ffb2 	bl	800b0b8 <memcpy>
sample_pointB=sample_pointD;
 8002154:	4b66      	ldr	r3, [pc, #408]	; (80022f0 <sampling+0x1f8>)
 8002156:	881a      	ldrh	r2, [r3, #0]
 8002158:	4b6a      	ldr	r3, [pc, #424]	; (8002304 <sampling+0x20c>)
 800215a:	801a      	strh	r2, [r3, #0]
unsigned short tempo_start=0;  // enabled when i=isrMask;
 800215c:	2300      	movs	r3, #0
 800215e:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134

uint16_t i_total;
uint16_t tempo_mod=tempo_lut[seq.tempo];  // set tempo,speed from lut 40-200bpm  ,changed to 4x for note lenght
 8002162:	4b69      	ldr	r3, [pc, #420]	; (8002308 <sampling+0x210>)
 8002164:	785b      	ldrb	r3, [r3, #1]
 8002166:	461a      	mov	r2, r3
 8002168:	4b68      	ldr	r3, [pc, #416]	; (800230c <sampling+0x214>)
 800216a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800216e:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124

uint8_t l;			// 35.002khz(0.02857ms) sample, 1 sample is temp count (16x=0.00045712) , *16=1 note ,at 300 (437bpm),(1/(0.00002857*tempo count*16)=1beat in s

tempo_sync=16384/((tempo_mod*16)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80
 8002172:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8002176:	2b00      	cmp	r3, #0
 8002178:	da00      	bge.n	800217c <sampling+0x84>
 800217a:	331f      	adds	r3, #31
 800217c:	115b      	asrs	r3, r3, #5
 800217e:	461a      	mov	r2, r3
 8002180:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002184:	fb93 f3f2 	sdiv	r3, r3, r2
 8002188:	ee07 3a90 	vmov	s15, r3
 800218c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002190:	4b5f      	ldr	r3, [pc, #380]	; (8002310 <sampling+0x218>)
 8002192:	edc3 7a00 	vstr	s15, [r3]
tempo_sync=tempo_sync/80;  // bit weird her , this is adsr !
 8002196:	4b5e      	ldr	r3, [pc, #376]	; (8002310 <sampling+0x218>)
 8002198:	ed93 7a00 	vldr	s14, [r3]
 800219c:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8002314 <sampling+0x21c>
 80021a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021a4:	4b5a      	ldr	r3, [pc, #360]	; (8002310 <sampling+0x218>)
 80021a6:	edc3 7a00 	vstr	s15, [r3]

uint8_t looper_dat[8]={1,3,7,15};
 80021aa:	4a5b      	ldr	r2, [pc, #364]	; (8002318 <sampling+0x220>)
 80021ac:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80021b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021b4:	6018      	str	r0, [r3, #0]
 80021b6:	3304      	adds	r3, #4
 80021b8:	7019      	strb	r1, [r3, #0]
 80021ba:	f107 0391 	add.w	r3, r7, #145	; 0x91
 80021be:	2200      	movs	r2, #0
 80021c0:	801a      	strh	r2, [r3, #0]
 80021c2:	709a      	strb	r2, [r3, #2]
uint32_t lfo_tempo_hold;

if (tempo_mod_hold!=tempo_mod){					// lfo lut calculate only when changes tempo
 80021c4:	4b55      	ldr	r3, [pc, #340]	; (800231c <sampling+0x224>)
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	f8b7 2124 	ldrh.w	r2, [r7, #292]	; 0x124
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d036      	beq.n	800223e <sampling+0x146>

		float lfo_tempo_calc=((62831*4)/(tempo_mod)); // deafualt 1 note
 80021d0:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 80021d4:	4a52      	ldr	r2, [pc, #328]	; (8002320 <sampling+0x228>)
 80021d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80021da:	ee07 3a90 	vmov	s15, r3
 80021de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021e2:	edc7 7a48 	vstr	s15, [r7, #288]	; 0x120


						for (i=0;i<256;i++){								// 128 is 1 note
 80021e6:	4b4f      	ldr	r3, [pc, #316]	; (8002324 <sampling+0x22c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	801a      	strh	r2, [r3, #0]
 80021ec:	e023      	b.n	8002236 <sampling+0x13e>
	lfo_tempo_hold=(((i+1)*lfo_tempo_calc))/64;
 80021ee:	4b4d      	ldr	r3, [pc, #308]	; (8002324 <sampling+0x22c>)
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	3301      	adds	r3, #1
 80021f4:	ee07 3a90 	vmov	s15, r3
 80021f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021fc:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 8002200:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002204:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002328 <sampling+0x230>
 8002208:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800220c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002210:	ee17 3a90 	vmov	r3, s15
 8002214:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	lfo_tempo_lut[i]= lfo_tempo_hold;
 8002218:	4b42      	ldr	r3, [pc, #264]	; (8002324 <sampling+0x22c>)
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002222:	b299      	uxth	r1, r3
 8002224:	4b41      	ldr	r3, [pc, #260]	; (800232c <sampling+0x234>)
 8002226:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
						for (i=0;i<256;i++){								// 128 is 1 note
 800222a:	4b3e      	ldr	r3, [pc, #248]	; (8002324 <sampling+0x22c>)
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	3301      	adds	r3, #1
 8002230:	b29a      	uxth	r2, r3
 8002232:	4b3c      	ldr	r3, [pc, #240]	; (8002324 <sampling+0x22c>)
 8002234:	801a      	strh	r2, [r3, #0]
 8002236:	4b3b      	ldr	r3, [pc, #236]	; (8002324 <sampling+0x22c>)
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	2bff      	cmp	r3, #255	; 0xff
 800223c:	d9d7      	bls.n	80021ee <sampling+0xf6>

}}
tempo_mod_hold=tempo_mod;   // for lfo
 800223e:	4a37      	ldr	r2, [pc, #220]	; (800231c <sampling+0x224>)
 8002240:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8002244:	8013      	strh	r3, [r2, #0]

uint32_t  note_toggler[17]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //records note position on 0-512   using a bit
 8002246:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800224a:	2244      	movs	r2, #68	; 0x44
 800224c:	2100      	movs	r1, #0
 800224e:	4618      	mov	r0, r3
 8002250:	f008 ff40 	bl	800b0d4 <memset>
for (i=0;i<16;i++) {  note_toggler[i]=0; }
 8002254:	4b33      	ldr	r3, [pc, #204]	; (8002324 <sampling+0x22c>)
 8002256:	2200      	movs	r2, #0
 8002258:	801a      	strh	r2, [r3, #0]
 800225a:	e00e      	b.n	800227a <sampling+0x182>
 800225c:	4b31      	ldr	r3, [pc, #196]	; (8002324 <sampling+0x22c>)
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002266:	443b      	add	r3, r7
 8002268:	2200      	movs	r2, #0
 800226a:	f843 2cf0 	str.w	r2, [r3, #-240]
 800226e:	4b2d      	ldr	r3, [pc, #180]	; (8002324 <sampling+0x22c>)
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	3301      	adds	r3, #1
 8002274:	b29a      	uxth	r2, r3
 8002276:	4b2b      	ldr	r3, [pc, #172]	; (8002324 <sampling+0x22c>)
 8002278:	801a      	strh	r2, [r3, #0]
 800227a:	4b2a      	ldr	r3, [pc, #168]	; (8002324 <sampling+0x22c>)
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	2b0f      	cmp	r3, #15
 8002280:	d9ec      	bls.n	800225c <sampling+0x164>
	//potSource[150]=(freq_point[0])*100; //0-2

potSource[380]=(lcd_out3/100);  // still works   , potsource ref is located in feedback line var  ,was sendin x16 values
 8002282:	4b2b      	ldr	r3, [pc, #172]	; (8002330 <sampling+0x238>)
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	4a2b      	ldr	r2, [pc, #172]	; (8002334 <sampling+0x23c>)
 8002288:	fba2 2303 	umull	r2, r3, r2, r3
 800228c:	095b      	lsrs	r3, r3, #5
 800228e:	b29b      	uxth	r3, r3
 8002290:	b2da      	uxtb	r2, r3
 8002292:	4b29      	ldr	r3, [pc, #164]	; (8002338 <sampling+0x240>)
 8002294:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
potSource[381]=((lcd_out3 %100)/10);		 // 0-160 to 0-10
 8002298:	4b25      	ldr	r3, [pc, #148]	; (8002330 <sampling+0x238>)
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	4a25      	ldr	r2, [pc, #148]	; (8002334 <sampling+0x23c>)
 800229e:	fba2 1203 	umull	r1, r2, r2, r3
 80022a2:	0952      	lsrs	r2, r2, #5
 80022a4:	2164      	movs	r1, #100	; 0x64
 80022a6:	fb01 f202 	mul.w	r2, r1, r2
 80022aa:	1a9b      	subs	r3, r3, r2
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	4a23      	ldr	r2, [pc, #140]	; (800233c <sampling+0x244>)
 80022b0:	fba2 2303 	umull	r2, r3, r2, r3
 80022b4:	08db      	lsrs	r3, r3, #3
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	4b1f      	ldr	r3, [pc, #124]	; (8002338 <sampling+0x240>)
 80022bc:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
potSource[382]=(lcd_out3%10);
 80022c0:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <sampling+0x238>)
 80022c2:	881a      	ldrh	r2, [r3, #0]
 80022c4:	4b1d      	ldr	r3, [pc, #116]	; (800233c <sampling+0x244>)
 80022c6:	fba3 1302 	umull	r1, r3, r3, r2
 80022ca:	08d9      	lsrs	r1, r3, #3
 80022cc:	460b      	mov	r3, r1
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	4b17      	ldr	r3, [pc, #92]	; (8002338 <sampling+0x240>)
 80022dc:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
int32_t* osc_pointers[10];   // sample outs
uint8_t pars_counter;
  //setup pointers for osc options
 for (pars_counter=0;pars_counter<4;pars_counter++)	{   // fill up pointers and reload vars
 80022e0:	2300      	movs	r3, #0
 80022e2:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
 80022e6:	e0c6      	b.n	8002476 <sampling+0x37e>
 80022e8:	20003418 	.word	0x20003418
 80022ec:	200001ae 	.word	0x200001ae
 80022f0:	20001882 	.word	0x20001882
 80022f4:	2000418e 	.word	0x2000418e
 80022f8:	20006974 	.word	0x20006974
 80022fc:	20006984 	.word	0x20006984
 8002300:	2000419f 	.word	0x2000419f
 8002304:	20000874 	.word	0x20000874
 8002308:	2000418c 	.word	0x2000418c
 800230c:	20002768 	.word	0x20002768
 8002310:	20002ff4 	.word	0x20002ff4
 8002314:	42a00000 	.word	0x42a00000
 8002318:	0800b5ec 	.word	0x0800b5ec
 800231c:	20002b68 	.word	0x20002b68
 8002320:	0003d5bc 	.word	0x0003d5bc
 8002324:	20000876 	.word	0x20000876
 8002328:	42800000 	.word	0x42800000
 800232c:	20002968 	.word	0x20002968
 8002330:	20002ffc 	.word	0x20002ffc
 8002334:	51eb851f 	.word	0x51eb851f
 8002338:	20000654 	.word	0x20000654
 800233c:	cccccccd 	.word	0xcccccccd


		sample_accus[pars_counter]=sample_accus_hold[pars_counter];
 8002340:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 8002344:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8002348:	4983      	ldr	r1, [pc, #524]	; (8002558 <sampling+0x460>)
 800234a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002354:	443b      	add	r3, r7
 8002356:	f843 2c68 	str.w	r2, [r3, #-104]
	 if (note[pars_counter].osc==0) osc_pointers[pars_counter]=&sample_Accu[5];  // zero
 800235a:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 800235e:	497f      	ldr	r1, [pc, #508]	; (800255c <sampling+0x464>)
 8002360:	4613      	mov	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	1a9b      	subs	r3, r3, r2
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	440b      	add	r3, r1
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10a      	bne.n	8002386 <sampling+0x28e>
 8002370:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 8002374:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002378:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800237c:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002380:	3114      	adds	r1, #20
 8002382:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 	 	 	 if (note[pars_counter].osc==1) osc_pointers[pars_counter]=&sample_accus[pars_counter];   // saw
 8002386:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 800238a:	4974      	ldr	r1, [pc, #464]	; (800255c <sampling+0x464>)
 800238c:	4613      	mov	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	1a9b      	subs	r3, r3, r2
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	440b      	add	r3, r1
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d10d      	bne.n	80023b8 <sampling+0x2c0>
 800239c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80023a0:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 80023a4:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4419      	add	r1, r3
 80023ac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80023b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80023b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==2) osc_pointers[pars_counter]=&sample_Accu[pars_counter];		// tri
 80023b8:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 80023bc:	4967      	ldr	r1, [pc, #412]	; (800255c <sampling+0x464>)
 80023be:	4613      	mov	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	1a9b      	subs	r3, r3, r2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	440b      	add	r3, r1
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d10d      	bne.n	80023ea <sampling+0x2f2>
 80023ce:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80023d2:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 80023d6:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4419      	add	r1, r3
 80023de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80023e2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80023e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==3) osc_pointers[pars_counter]=&sample_Accu[pars_counter];   // sine
 80023ea:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 80023ee:	495b      	ldr	r1, [pc, #364]	; (800255c <sampling+0x464>)
 80023f0:	4613      	mov	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	440b      	add	r3, r1
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b03      	cmp	r3, #3
 80023fe:	d10d      	bne.n	800241c <sampling+0x324>
 8002400:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8002404:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 8002408:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4419      	add	r1, r3
 8002410:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002414:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc>3) osc_pointers[pars_counter]=&sample_Accu[5];   // sine
 800241c:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 8002420:	494e      	ldr	r1, [pc, #312]	; (800255c <sampling+0x464>)
 8002422:	4613      	mov	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	1a9b      	subs	r3, r3, r2
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	440b      	add	r3, r1
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b03      	cmp	r3, #3
 8002430:	d90a      	bls.n	8002448 <sampling+0x350>
 8002432:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 8002436:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800243a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800243e:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002442:	3114      	adds	r1, #20
 8002444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			tuned_list[pars_counter]=note[pars_counter].tuned;   // this needs to run here as well
 8002448:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 800244c:	f897 1133 	ldrb.w	r1, [r7, #307]	; 0x133
 8002450:	4842      	ldr	r0, [pc, #264]	; (800255c <sampling+0x464>)
 8002452:	4613      	mov	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	1a9b      	subs	r3, r3, r2
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	4403      	add	r3, r0
 800245c:	330c      	adds	r3, #12
 800245e:	881a      	ldrh	r2, [r3, #0]
 8002460:	004b      	lsls	r3, r1, #1
 8002462:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002466:	443b      	add	r3, r7
 8002468:	f823 2ca4 	strh.w	r2, [r3, #-164]
 for (pars_counter=0;pars_counter<4;pars_counter++)	{   // fill up pointers and reload vars
 800246c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8002470:	3301      	adds	r3, #1
 8002472:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
 8002476:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800247a:	2b03      	cmp	r3, #3
 800247c:	f67f af60 	bls.w	8002340 <sampling+0x248>

 }



note_holdA=0;
 8002480:	4b37      	ldr	r3, [pc, #220]	; (8002560 <sampling+0x468>)
 8002482:	2200      	movs	r2, #0
 8002484:	701a      	strb	r2, [r3, #0]

// some good phasin and delays here
uint8_t cross_fade[2]={0,0};
 8002486:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800248a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800248e:	2200      	movs	r2, #0
 8002490:	801a      	strh	r2, [r3, #0]
uint8_t fader[17]={0,1,5,11,19,28,39,51,64,76,88,99,108,116,122,126,127}; // sine curve for cross fade
 8002492:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002496:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800249a:	4a32      	ldr	r2, [pc, #200]	; (8002564 <sampling+0x46c>)
 800249c:	461c      	mov	r4, r3
 800249e:	4615      	mov	r5, r2
 80024a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024a4:	682b      	ldr	r3, [r5, #0]
 80024a6:	7023      	strb	r3, [r4, #0]
//adc_values[2]= 15; //force for now
//if(adc_values[2]&16)     	{cross_fade[1]=127-fader[adc_values[2]&15]; cross_fade[2]=127;}  else {cross_fade[2]=fader[adc_values[2]&15]; cross_fade[1]=127;} //calculate crossfader

// doing lfo calc here as it is slow only for now
////////////////////adsr/////////////////////////////////////////
if	 (ADSR[0].attack_trigger==0) {		adsr_att=(161-ADSR[0].attack ) *0.02 ; // for now all of them from this only , speed , 0-16  // rarely read
 80024a8:	4b2f      	ldr	r3, [pc, #188]	; (8002568 <sampling+0x470>)
 80024aa:	791b      	ldrb	r3, [r3, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d146      	bne.n	800253e <sampling+0x446>
 80024b0:	4b2d      	ldr	r3, [pc, #180]	; (8002568 <sampling+0x470>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe f911 	bl	80006e0 <__aeabi_i2d>
 80024be:	a322      	add	r3, pc, #136	; (adr r3, 8002548 <sampling+0x450>)
 80024c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c4:	f7fd fe90 	bl	80001e8 <__aeabi_dmul>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	4610      	mov	r0, r2
 80024ce:	4619      	mov	r1, r3
 80024d0:	f7fe f970 	bl	80007b4 <__aeabi_d2f>
 80024d4:	4603      	mov	r3, r0
 80024d6:	4a25      	ldr	r2, [pc, #148]	; (800256c <sampling+0x474>)
 80024d8:	6013      	str	r3, [r2, #0]
ADSR[0].sustain_data=((161-ADSR[0].decay)*0.01);  // length and level this is ok is running 1/16 ish				ADSR[0].attack_data=ADSR[0].attack_data-ADSR[0].sustain_data;
 80024da:	4b23      	ldr	r3, [pc, #140]	; (8002568 <sampling+0x470>)
 80024dc:	785b      	ldrb	r3, [r3, #1]
 80024de:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fe f8fc 	bl	80006e0 <__aeabi_i2d>
 80024e8:	a319      	add	r3, pc, #100	; (adr r3, 8002550 <sampling+0x458>)
 80024ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ee:	f7fd fe7b 	bl	80001e8 <__aeabi_dmul>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	4610      	mov	r0, r2
 80024f8:	4619      	mov	r1, r3
 80024fa:	f7fe f95b 	bl	80007b4 <__aeabi_d2f>
 80024fe:	4603      	mov	r3, r0
 8002500:	4a19      	ldr	r2, [pc, #100]	; (8002568 <sampling+0x470>)
 8002502:	6113      	str	r3, [r2, #16]
adsr_att=adsr_att*adsr_att;
 8002504:	4b19      	ldr	r3, [pc, #100]	; (800256c <sampling+0x474>)
 8002506:	ed93 7a00 	vldr	s14, [r3]
 800250a:	4b18      	ldr	r3, [pc, #96]	; (800256c <sampling+0x474>)
 800250c:	edd3 7a00 	vldr	s15, [r3]
 8002510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002514:	4b15      	ldr	r3, [pc, #84]	; (800256c <sampling+0x474>)
 8002516:	edc3 7a00 	vstr	s15, [r3]
ADSR[0].sustain_data=ADSR[0].sustain_data*ADSR[0].sustain_data;
 800251a:	4b13      	ldr	r3, [pc, #76]	; (8002568 <sampling+0x470>)
 800251c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002520:	4b11      	ldr	r3, [pc, #68]	; (8002568 <sampling+0x470>)
 8002522:	edd3 7a04 	vldr	s15, [r3, #16]
 8002526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800252a:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <sampling+0x470>)
 800252c:	edc3 7a04 	vstr	s15, [r3, #16]

ADSR[0].attack_trigger=1;
 8002530:	4b0d      	ldr	r3, [pc, #52]	; (8002568 <sampling+0x470>)
 8002532:	2201      	movs	r2, #1
 8002534:	711a      	strb	r2, [r3, #4]
ADSR[0].attack_data=0;
 8002536:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <sampling+0x470>)
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	609a      	str	r2, [r3, #8]
}

//float ADSR[0].buffer_temp;    // adsr

for (i=0;i<256;i++) {
 800253e:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <sampling+0x478>)
 8002540:	2200      	movs	r2, #0
 8002542:	801a      	strh	r2, [r3, #0]
 8002544:	e0d6      	b.n	80026f4 <sampling+0x5fc>
 8002546:	bf00      	nop
 8002548:	47ae147b 	.word	0x47ae147b
 800254c:	3f947ae1 	.word	0x3f947ae1
 8002550:	47ae147b 	.word	0x47ae147b
 8002554:	3f847ae1 	.word	0x3f847ae1
 8002558:	20002490 	.word	0x20002490
 800255c:	200001b8 	.word	0x200001b8
 8002560:	2000248e 	.word	0x2000248e
 8002564:	0800b5f4 	.word	0x0800b5f4
 8002568:	20003700 	.word	0x20003700
 800256c:	20002ff8 	.word	0x20002ff8
 8002570:	20000876 	.word	0x20000876

	if     (ADSR[0].attack_data<1000)    																		{ADSR[0].attack_data=ADSR[0].attack_data+adsr_att;					ADSR[0].buffer_temp=ADSR[0].attack_data; } //0-1000
 8002574:	4b8c      	ldr	r3, [pc, #560]	; (80027a8 <sampling+0x6b0>)
 8002576:	edd3 7a02 	vldr	s15, [r3, #8]
 800257a:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80027ac <sampling+0x6b4>
 800257e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002586:	d50e      	bpl.n	80025a6 <sampling+0x4ae>
 8002588:	4b87      	ldr	r3, [pc, #540]	; (80027a8 <sampling+0x6b0>)
 800258a:	ed93 7a02 	vldr	s14, [r3, #8]
 800258e:	4b88      	ldr	r3, [pc, #544]	; (80027b0 <sampling+0x6b8>)
 8002590:	edd3 7a00 	vldr	s15, [r3]
 8002594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002598:	4b83      	ldr	r3, [pc, #524]	; (80027a8 <sampling+0x6b0>)
 800259a:	edc3 7a02 	vstr	s15, [r3, #8]
 800259e:	4b82      	ldr	r3, [pc, #520]	; (80027a8 <sampling+0x6b0>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	4a81      	ldr	r2, [pc, #516]	; (80027a8 <sampling+0x6b0>)
 80025a4:	6193      	str	r3, [r2, #24]
	 if  ((ADSR[0].attack_data<1500)  && (ADSR[0].attack_data>999))  					{ADSR[0].attack_data=ADSR[0].attack_data+adsr_att;					ADSR[0].buffer_temp=1500-(ADSR[0].attack_data-500);  }  // 1000-500
 80025a6:	4b80      	ldr	r3, [pc, #512]	; (80027a8 <sampling+0x6b0>)
 80025a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80025ac:	ed9f 7a81 	vldr	s14, [pc, #516]	; 80027b4 <sampling+0x6bc>
 80025b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b8:	d522      	bpl.n	8002600 <sampling+0x508>
 80025ba:	4b7b      	ldr	r3, [pc, #492]	; (80027a8 <sampling+0x6b0>)
 80025bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80025c0:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80027b8 <sampling+0x6c0>
 80025c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025cc:	dd18      	ble.n	8002600 <sampling+0x508>
 80025ce:	4b76      	ldr	r3, [pc, #472]	; (80027a8 <sampling+0x6b0>)
 80025d0:	ed93 7a02 	vldr	s14, [r3, #8]
 80025d4:	4b76      	ldr	r3, [pc, #472]	; (80027b0 <sampling+0x6b8>)
 80025d6:	edd3 7a00 	vldr	s15, [r3]
 80025da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025de:	4b72      	ldr	r3, [pc, #456]	; (80027a8 <sampling+0x6b0>)
 80025e0:	edc3 7a02 	vstr	s15, [r3, #8]
 80025e4:	4b70      	ldr	r3, [pc, #448]	; (80027a8 <sampling+0x6b0>)
 80025e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80025ea:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80027bc <sampling+0x6c4>
 80025ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80025f2:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80027b4 <sampling+0x6bc>
 80025f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025fa:	4b6b      	ldr	r3, [pc, #428]	; (80027a8 <sampling+0x6b0>)
 80025fc:	edc3 7a06 	vstr	s15, [r3, #24]
	 if ((ADSR[0].attack_data>1499)   && 		(ADSR[0].attack_data<2000)) 			{		ADSR[0].buffer_temp=500; 	ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data;}
 8002600:	4b69      	ldr	r3, [pc, #420]	; (80027a8 <sampling+0x6b0>)
 8002602:	edd3 7a02 	vldr	s15, [r3, #8]
 8002606:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80027c0 <sampling+0x6c8>
 800260a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800260e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002612:	dd17      	ble.n	8002644 <sampling+0x54c>
 8002614:	4b64      	ldr	r3, [pc, #400]	; (80027a8 <sampling+0x6b0>)
 8002616:	edd3 7a02 	vldr	s15, [r3, #8]
 800261a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80027c4 <sampling+0x6cc>
 800261e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002626:	d50d      	bpl.n	8002644 <sampling+0x54c>
 8002628:	4b5f      	ldr	r3, [pc, #380]	; (80027a8 <sampling+0x6b0>)
 800262a:	4a67      	ldr	r2, [pc, #412]	; (80027c8 <sampling+0x6d0>)
 800262c:	619a      	str	r2, [r3, #24]
 800262e:	4b5e      	ldr	r3, [pc, #376]	; (80027a8 <sampling+0x6b0>)
 8002630:	ed93 7a02 	vldr	s14, [r3, #8]
 8002634:	4b5c      	ldr	r3, [pc, #368]	; (80027a8 <sampling+0x6b0>)
 8002636:	edd3 7a04 	vldr	s15, [r3, #16]
 800263a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800263e:	4b5a      	ldr	r3, [pc, #360]	; (80027a8 <sampling+0x6b0>)
 8002640:	edc3 7a02 	vstr	s15, [r3, #8]
	if ((ADSR[0].attack_data>1999)  &&  (ADSR[0].attack_data<2500)	)					{ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data	;	ADSR[0].buffer_temp=2500-ADSR[0].attack_data; } //500-0;
 8002644:	4b58      	ldr	r3, [pc, #352]	; (80027a8 <sampling+0x6b0>)
 8002646:	edd3 7a02 	vldr	s15, [r3, #8]
 800264a:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80027cc <sampling+0x6d4>
 800264e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002656:	dd1e      	ble.n	8002696 <sampling+0x59e>
 8002658:	4b53      	ldr	r3, [pc, #332]	; (80027a8 <sampling+0x6b0>)
 800265a:	edd3 7a02 	vldr	s15, [r3, #8]
 800265e:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80027d0 <sampling+0x6d8>
 8002662:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266a:	d514      	bpl.n	8002696 <sampling+0x59e>
 800266c:	4b4e      	ldr	r3, [pc, #312]	; (80027a8 <sampling+0x6b0>)
 800266e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002672:	4b4d      	ldr	r3, [pc, #308]	; (80027a8 <sampling+0x6b0>)
 8002674:	edd3 7a04 	vldr	s15, [r3, #16]
 8002678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800267c:	4b4a      	ldr	r3, [pc, #296]	; (80027a8 <sampling+0x6b0>)
 800267e:	edc3 7a02 	vstr	s15, [r3, #8]
 8002682:	4b49      	ldr	r3, [pc, #292]	; (80027a8 <sampling+0x6b0>)
 8002684:	edd3 7a02 	vldr	s15, [r3, #8]
 8002688:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80027d0 <sampling+0x6d8>
 800268c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002690:	4b45      	ldr	r3, [pc, #276]	; (80027a8 <sampling+0x6b0>)
 8002692:	edc3 7a06 	vstr	s15, [r3, #24]
	if (ADSR[0].attack_data>3000)   																			{ADSR[0].buffer_temp=1; ADSR[0].attack_data=4000; }     // THE END
 8002696:	4b44      	ldr	r3, [pc, #272]	; (80027a8 <sampling+0x6b0>)
 8002698:	edd3 7a02 	vldr	s15, [r3, #8]
 800269c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80027d4 <sampling+0x6dc>
 80026a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a8:	dd06      	ble.n	80026b8 <sampling+0x5c0>
 80026aa:	4b3f      	ldr	r3, [pc, #252]	; (80027a8 <sampling+0x6b0>)
 80026ac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80026b0:	619a      	str	r2, [r3, #24]
 80026b2:	4b3d      	ldr	r3, [pc, #244]	; (80027a8 <sampling+0x6b0>)
 80026b4:	4a48      	ldr	r2, [pc, #288]	; (80027d8 <sampling+0x6e0>)
 80026b6:	609a      	str	r2, [r3, #8]

adsr_lut[i]= ADSR[0].buffer_temp*0.001;
 80026b8:	4b3b      	ldr	r3, [pc, #236]	; (80027a8 <sampling+0x6b0>)
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fe f821 	bl	8000704 <__aeabi_f2d>
 80026c2:	a337      	add	r3, pc, #220	; (adr r3, 80027a0 <sampling+0x6a8>)
 80026c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c8:	f7fd fd8e 	bl	80001e8 <__aeabi_dmul>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	4942      	ldr	r1, [pc, #264]	; (80027dc <sampling+0x6e4>)
 80026d2:	8809      	ldrh	r1, [r1, #0]
 80026d4:	460c      	mov	r4, r1
 80026d6:	4610      	mov	r0, r2
 80026d8:	4619      	mov	r1, r3
 80026da:	f7fe f86b 	bl	80007b4 <__aeabi_d2f>
 80026de:	4602      	mov	r2, r0
 80026e0:	493f      	ldr	r1, [pc, #252]	; (80027e0 <sampling+0x6e8>)
 80026e2:	00a3      	lsls	r3, r4, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	601a      	str	r2, [r3, #0]
for (i=0;i<256;i++) {
 80026e8:	4b3c      	ldr	r3, [pc, #240]	; (80027dc <sampling+0x6e4>)
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	3301      	adds	r3, #1
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	4b3a      	ldr	r3, [pc, #232]	; (80027dc <sampling+0x6e4>)
 80026f2:	801a      	strh	r2, [r3, #0]
 80026f4:	4b39      	ldr	r3, [pc, #228]	; (80027dc <sampling+0x6e4>)
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	2bff      	cmp	r3, #255	; 0xff
 80026fa:	f67f af3b 	bls.w	8002574 <sampling+0x47c>
}

uint8_t seq_dat=(1<<(((adc_values[0]>>3))+1))-1;
 80026fe:	4b39      	ldr	r3, [pc, #228]	; (80027e4 <sampling+0x6ec>)
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	08db      	lsrs	r3, r3, #3
 8002704:	b29b      	uxth	r3, r3
 8002706:	3301      	adds	r3, #1
 8002708:	2201      	movs	r2, #1
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	b2db      	uxtb	r3, r3
 8002710:	3b01      	subs	r3, #1
 8002712:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
///////////////////////////////////////////////////////////////
uint8_t note_plain;

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002716:	4b31      	ldr	r3, [pc, #196]	; (80027dc <sampling+0x6e4>)
 8002718:	2200      	movs	r2, #0
 800271a:	801a      	strh	r2, [r3, #0]
 800271c:	e207      	b.n	8002b2e <sampling+0xa36>

	i_total=i+sample_pointB;
 800271e:	4b2f      	ldr	r3, [pc, #188]	; (80027dc <sampling+0x6e4>)
 8002720:	881a      	ldrh	r2, [r3, #0]
 8002722:	4b31      	ldr	r3, [pc, #196]	; (80027e8 <sampling+0x6f0>)
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	4413      	add	r3, r2
 8002728:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
	sampling_position=i>>6;   //   0-8 steps
 800272c:	4b2b      	ldr	r3, [pc, #172]	; (80027dc <sampling+0x6e4>)
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	099b      	lsrs	r3, r3, #6
 8002732:	b29b      	uxth	r3, r3
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4b2d      	ldr	r3, [pc, #180]	; (80027ec <sampling+0x6f4>)
 8002738:	701a      	strb	r2, [r3, #0]
	sampling_position_b=(sampling_position+7)&7;
 800273a:	4b2c      	ldr	r3, [pc, #176]	; (80027ec <sampling+0x6f4>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	3307      	adds	r3, #7
 8002740:	b2db      	uxtb	r3, r3
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	b2da      	uxtb	r2, r3
 8002748:	4b29      	ldr	r3, [pc, #164]	; (80027f0 <sampling+0x6f8>)
 800274a:	701a      	strb	r2, [r3, #0]
	note_plain=seq.notes1[seq.pos & 7 ];
 800274c:	4b29      	ldr	r3, [pc, #164]	; (80027f4 <sampling+0x6fc>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	4a27      	ldr	r2, [pc, #156]	; (80027f4 <sampling+0x6fc>)
 8002756:	4413      	add	r3, r2
 8002758:	789b      	ldrb	r3, [r3, #2]
 800275a:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
potValues[i&255]=potSource[i&255]>>4; //just to update values
 800275e:	4b1f      	ldr	r3, [pc, #124]	; (80027dc <sampling+0x6e4>)
 8002760:	881b      	ldrh	r3, [r3, #0]
 8002762:	b2db      	uxtb	r3, r3
 8002764:	4a24      	ldr	r2, [pc, #144]	; (80027f8 <sampling+0x700>)
 8002766:	5cd2      	ldrb	r2, [r2, r3]
 8002768:	4b1c      	ldr	r3, [pc, #112]	; (80027dc <sampling+0x6e4>)
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	0912      	lsrs	r2, r2, #4
 8002770:	b2d1      	uxtb	r1, r2
 8002772:	4a22      	ldr	r2, [pc, #136]	; (80027fc <sampling+0x704>)
 8002774:	54d1      	strb	r1, [r2, r3]
	if (tempo_count>=tempo_mod) { next_isr=(next_isr+1)& 4095;tempo_count=0;  }  else {tempo_count++; }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 8002776:	4b22      	ldr	r3, [pc, #136]	; (8002800 <sampling+0x708>)
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	f8b7 2124 	ldrh.w	r2, [r7, #292]	; 0x124
 800277e:	429a      	cmp	r2, r3
 8002780:	d842      	bhi.n	8002808 <sampling+0x710>
 8002782:	4b20      	ldr	r3, [pc, #128]	; (8002804 <sampling+0x70c>)
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	3301      	adds	r3, #1
 8002788:	b29b      	uxth	r3, r3
 800278a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800278e:	b29a      	uxth	r2, r3
 8002790:	4b1c      	ldr	r3, [pc, #112]	; (8002804 <sampling+0x70c>)
 8002792:	801a      	strh	r2, [r3, #0]
 8002794:	4b1a      	ldr	r3, [pc, #104]	; (8002800 <sampling+0x708>)
 8002796:	2200      	movs	r2, #0
 8002798:	801a      	strh	r2, [r3, #0]
 800279a:	e03b      	b.n	8002814 <sampling+0x71c>
 800279c:	f3af 8000 	nop.w
 80027a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80027a4:	3f50624d 	.word	0x3f50624d
 80027a8:	20003700 	.word	0x20003700
 80027ac:	447a0000 	.word	0x447a0000
 80027b0:	20002ff8 	.word	0x20002ff8
 80027b4:	44bb8000 	.word	0x44bb8000
 80027b8:	4479c000 	.word	0x4479c000
 80027bc:	43fa0000 	.word	0x43fa0000
 80027c0:	44bb6000 	.word	0x44bb6000
 80027c4:	44fa0000 	.word	0x44fa0000
 80027c8:	43fa0000 	.word	0x43fa0000
 80027cc:	44f9e000 	.word	0x44f9e000
 80027d0:	451c4000 	.word	0x451c4000
 80027d4:	453b8000 	.word	0x453b8000
 80027d8:	457a0000 	.word	0x457a0000
 80027dc:	20000876 	.word	0x20000876
 80027e0:	2000208c 	.word	0x2000208c
 80027e4:	200001a4 	.word	0x200001a4
 80027e8:	20000874 	.word	0x20000874
 80027ec:	2000496c 	.word	0x2000496c
 80027f0:	2000496d 	.word	0x2000496d
 80027f4:	2000418c 	.word	0x2000418c
 80027f8:	20000654 	.word	0x20000654
 80027fc:	20000454 	.word	0x20000454
 8002800:	200024b6 	.word	0x200024b6
 8002804:	2000248c 	.word	0x2000248c
 8002808:	4b8a      	ldr	r3, [pc, #552]	; (8002a34 <sampling+0x93c>)
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	3301      	adds	r3, #1
 800280e:	b29a      	uxth	r2, r3
 8002810:	4b88      	ldr	r3, [pc, #544]	; (8002a34 <sampling+0x93c>)
 8002812:	801a      	strh	r2, [r3, #0]
// tempo_count is about 1000-400
	tempo_start=0;
 8002814:	2300      	movs	r3, #0
 8002816:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
	if ((next_isr>>4) != (seq.pos)) { 					//     min 6400 cycles per seq.pos ,         next note step 140ms
 800281a:	4b87      	ldr	r3, [pc, #540]	; (8002a38 <sampling+0x940>)
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	091b      	lsrs	r3, r3, #4
 8002820:	b29a      	uxth	r2, r3
 8002822:	4b86      	ldr	r3, [pc, #536]	; (8002a3c <sampling+0x944>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	b29b      	uxth	r3, r3
 8002828:	429a      	cmp	r2, r3
 800282a:	d009      	beq.n	8002840 <sampling+0x748>
		seq.pos=(next_isr>>4); // seq pos =256 max , isr = 1/16 of a note, note lenght is 1-4
 800282c:	4b82      	ldr	r3, [pc, #520]	; (8002a38 <sampling+0x940>)
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	091b      	lsrs	r3, r3, #4
 8002832:	b29b      	uxth	r3, r3
 8002834:	b2da      	uxtb	r2, r3
 8002836:	4b81      	ldr	r3, [pc, #516]	; (8002a3c <sampling+0x944>)
 8002838:	701a      	strb	r2, [r3, #0]
		tempo_start=1;
 800283a:	2301      	movs	r3, #1
 800283c:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
// record note triggers or seq_changes position ,NEEDS TO BE OFF FOR NOTE 0
}


	if(tempo_start  )    // Calculates only on note change, gotta change seq.pos somehow  , only activates when change in seq pos ie once in ten bankwrites ,rare
 8002840:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 8164 	beq.w	8002b12 <sampling+0xa1a>
	{
		serial_tosend=1;
 800284a:	4b7d      	ldr	r3, [pc, #500]	; (8002a40 <sampling+0x948>)
 800284c:	2201      	movs	r2, #1
 800284e:	701a      	strb	r2, [r3, #0]
		note_reset();
 8002850:	f7ff fc14 	bl	800207c <note_reset>
		//note[1].timeshift=(adc_values[1])&31; //assigned pots to start of loopers 0-16,works

	//	note[2].timeshift=note[1].timeshift=note[3].timeshift=note[4].timeshift;
		uint8_t   loop_temp1[4];
		loop_temp1[0]=seq.pos&7;
 8002854:	4b79      	ldr	r3, [pc, #484]	; (8002a3c <sampling+0x944>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	b2da      	uxtb	r2, r3
 800285e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002862:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002866:	701a      	strb	r2, [r3, #0]
		loop_temp1[1]=adc_values[1]>>2;
 8002868:	4b76      	ldr	r3, [pc, #472]	; (8002a44 <sampling+0x94c>)
 800286a:	885b      	ldrh	r3, [r3, #2]
 800286c:	089b      	lsrs	r3, r3, #2
 800286e:	b29b      	uxth	r3, r3
 8002870:	b2da      	uxtb	r2, r3
 8002872:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002876:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800287a:	705a      	strb	r2, [r3, #1]
		loop_temp1[2]=adc_values[2]>>2;
 800287c:	4b71      	ldr	r3, [pc, #452]	; (8002a44 <sampling+0x94c>)
 800287e:	889b      	ldrh	r3, [r3, #4]
 8002880:	089b      	lsrs	r3, r3, #2
 8002882:	b29b      	uxth	r3, r3
 8002884:	b2da      	uxtb	r2, r3
 8002886:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800288a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800288e:	709a      	strb	r2, [r3, #2]
		loop_temp1[3]=adc_values[0]>>2;
 8002890:	4b6c      	ldr	r3, [pc, #432]	; (8002a44 <sampling+0x94c>)
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	089b      	lsrs	r3, r3, #2
 8002896:	b29b      	uxth	r3, r3
 8002898:	b2da      	uxtb	r2, r3
 800289a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800289e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80028a2:	70da      	strb	r2, [r3, #3]

		//loop_temp1=(seq.pos&seq_dat); // loop position and length


		seq.loop[0]=(note[0].timeshift+loop_temp1[0]+loop_temp1[1])&31;
 80028a4:	4b68      	ldr	r3, [pc, #416]	; (8002a48 <sampling+0x950>)
 80028a6:	799a      	ldrb	r2, [r3, #6]
 80028a8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80028ac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	4413      	add	r3, r2
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80028ba:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80028be:	785b      	ldrb	r3, [r3, #1]
 80028c0:	4413      	add	r3, r2
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	f003 031f 	and.w	r3, r3, #31
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	4b5c      	ldr	r3, [pc, #368]	; (8002a3c <sampling+0x944>)
 80028cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		seq.loop[1]=(note[1].timeshift+loop_temp1[0]+loop_temp1[2])&31;
 80028d0:	4b5d      	ldr	r3, [pc, #372]	; (8002a48 <sampling+0x950>)
 80028d2:	7d1a      	ldrb	r2, [r3, #20]
 80028d4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80028d8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	4413      	add	r3, r2
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80028e6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80028ea:	789b      	ldrb	r3, [r3, #2]
 80028ec:	4413      	add	r3, r2
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	f003 031f 	and.w	r3, r3, #31
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	4b51      	ldr	r3, [pc, #324]	; (8002a3c <sampling+0x944>)
 80028f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		seq.loop[2]=(note[2].timeshift+loop_temp1[0]+loop_temp1[3])&31; // this is really handy with sync to notes
 80028fc:	4b52      	ldr	r3, [pc, #328]	; (8002a48 <sampling+0x950>)
 80028fe:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002902:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002906:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	4413      	add	r3, r2
 800290e:	b2da      	uxtb	r2, r3
 8002910:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002914:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002918:	78db      	ldrb	r3, [r3, #3]
 800291a:	4413      	add	r3, r2
 800291c:	b2db      	uxtb	r3, r3
 800291e:	f003 031f 	and.w	r3, r3, #31
 8002922:	b2da      	uxtb	r2, r3
 8002924:	4b45      	ldr	r3, [pc, #276]	; (8002a3c <sampling+0x944>)
 8002926:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		seq.loop[3]=(note[3].timeshift+loop_temp1[0])&31;
 800292a:	4b47      	ldr	r3, [pc, #284]	; (8002a48 <sampling+0x950>)
 800292c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8002930:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002934:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	4413      	add	r3, r2
 800293c:	b2db      	uxtb	r3, r3
 800293e:	f003 031f 	and.w	r3, r3, #31
 8002942:	b2da      	uxtb	r2, r3
 8002944:	4b3d      	ldr	r3, [pc, #244]	; (8002a3c <sampling+0x944>)
 8002946:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		//seq.loop[5]=(note[5].timeshift+loop_temp1[0])&31;


			note[0].pitch=(notes_joined[seq.loop[0]])+(note[0].transpose);    // maybe join 1 and 2
 800294a:	4b3c      	ldr	r3, [pc, #240]	; (8002a3c <sampling+0x944>)
 800294c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002950:	461a      	mov	r2, r3
 8002952:	4b3e      	ldr	r3, [pc, #248]	; (8002a4c <sampling+0x954>)
 8002954:	5c9a      	ldrb	r2, [r3, r2]
 8002956:	4b3c      	ldr	r3, [pc, #240]	; (8002a48 <sampling+0x950>)
 8002958:	795b      	ldrb	r3, [r3, #5]
 800295a:	4413      	add	r3, r2
 800295c:	b2da      	uxtb	r2, r3
 800295e:	4b3a      	ldr	r3, [pc, #232]	; (8002a48 <sampling+0x950>)
 8002960:	709a      	strb	r2, [r3, #2]
			//note[0].pitch=note[1].pitch+(note[0].transpose); // just double
			note[1].pitch=(notes_joined[seq.loop[1]])+(note[1].transpose);  //loop 8 notes from pos and x times
 8002962:	4b36      	ldr	r3, [pc, #216]	; (8002a3c <sampling+0x944>)
 8002964:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002968:	461a      	mov	r2, r3
 800296a:	4b38      	ldr	r3, [pc, #224]	; (8002a4c <sampling+0x954>)
 800296c:	5c9a      	ldrb	r2, [r3, r2]
 800296e:	4b36      	ldr	r3, [pc, #216]	; (8002a48 <sampling+0x950>)
 8002970:	7cdb      	ldrb	r3, [r3, #19]
 8002972:	4413      	add	r3, r2
 8002974:	b2da      	uxtb	r2, r3
 8002976:	4b34      	ldr	r3, [pc, #208]	; (8002a48 <sampling+0x950>)
 8002978:	741a      	strb	r2, [r3, #16]
			note[2].pitch=(notes_joined[seq.loop[2]])+(note[2].transpose);  //loop 8 notes from pos and x times
 800297a:	4b30      	ldr	r3, [pc, #192]	; (8002a3c <sampling+0x944>)
 800297c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002980:	461a      	mov	r2, r3
 8002982:	4b32      	ldr	r3, [pc, #200]	; (8002a4c <sampling+0x954>)
 8002984:	5c9a      	ldrb	r2, [r3, r2]
 8002986:	4b30      	ldr	r3, [pc, #192]	; (8002a48 <sampling+0x950>)
 8002988:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800298c:	4413      	add	r3, r2
 800298e:	b2da      	uxtb	r2, r3
 8002990:	4b2d      	ldr	r3, [pc, #180]	; (8002a48 <sampling+0x950>)
 8002992:	779a      	strb	r2, [r3, #30]

		note[3].pitch=(notes_joined[seq.loop[3]])+(note[3].transpose); ;  //loop 8 notes from pos and x times ,might disable normal adsr completely
 8002994:	4b29      	ldr	r3, [pc, #164]	; (8002a3c <sampling+0x944>)
 8002996:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800299a:	461a      	mov	r2, r3
 800299c:	4b2b      	ldr	r3, [pc, #172]	; (8002a4c <sampling+0x954>)
 800299e:	5c9a      	ldrb	r2, [r3, r2]
 80029a0:	4b29      	ldr	r3, [pc, #164]	; (8002a48 <sampling+0x950>)
 80029a2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80029a6:	4413      	add	r3, r2
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	4b27      	ldr	r3, [pc, #156]	; (8002a48 <sampling+0x950>)
 80029ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
//	if (note[3].pitch) 		{note[3].pitch=note[3].pitch+(note[3].transpose>>4);	adsr_retrigger[3]=1; note_toggler[i>>5]=1<<(i&31   )   ; } // stay at zero for off

	note[3].pitch=(notes_joined[seq.loop[3]])+(note[3].transpose);  //
 80029b0:	4b22      	ldr	r3, [pc, #136]	; (8002a3c <sampling+0x944>)
 80029b2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80029b6:	461a      	mov	r2, r3
 80029b8:	4b24      	ldr	r3, [pc, #144]	; (8002a4c <sampling+0x954>)
 80029ba:	5c9a      	ldrb	r2, [r3, r2]
 80029bc:	4b22      	ldr	r3, [pc, #136]	; (8002a48 <sampling+0x950>)
 80029be:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80029c2:	4413      	add	r3, r2
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	4b20      	ldr	r3, [pc, #128]	; (8002a48 <sampling+0x950>)
 80029c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		patch_target_replace();
 80029cc:	f7fe fd18 	bl	8001400 <patch_target_replace>
		uint8_t detune_temp=0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132
		detune_temp=(note[3].pitch+(note[3].detune))&31    ;
 80029d6:	4b1c      	ldr	r3, [pc, #112]	; (8002a48 <sampling+0x950>)
 80029d8:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80029dc:	4b1a      	ldr	r3, [pc, #104]	; (8002a48 <sampling+0x950>)
 80029de:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80029e2:	4413      	add	r3, r2
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	f003 031f 	and.w	r3, r3, #31
 80029ea:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132
		if(detune_temp>27) detune_temp=27;
 80029ee:	f897 3132 	ldrb.w	r3, [r7, #306]	; 0x132
 80029f2:	2b1b      	cmp	r3, #27
 80029f4:	d902      	bls.n	80029fc <sampling+0x904>
 80029f6:	231b      	movs	r3, #27
 80029f8:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132
		   //this is for sine skip mask

	note[3].tuned=sine_lut[MajorNote[detune_temp]];	//sets freq ,1.0594  * 16536 =17518  ,
 80029fc:	f897 3132 	ldrb.w	r3, [r7, #306]	; 0x132
 8002a00:	4a13      	ldr	r2, [pc, #76]	; (8002a50 <sampling+0x958>)
 8002a02:	5cd3      	ldrb	r3, [r2, r3]
 8002a04:	461a      	mov	r2, r3
 8002a06:	4b13      	ldr	r3, [pc, #76]	; (8002a54 <sampling+0x95c>)
 8002a08:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002a0c:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <sampling+0x950>)
 8002a0e:	86da      	strh	r2, [r3, #54]	; 0x36
	note[3].tuned= (note[3].tuned*1200)>>10;  // modify different sample size , just need single cycle length and thats it
 8002a10:	4b0d      	ldr	r3, [pc, #52]	; (8002a48 <sampling+0x950>)
 8002a12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a14:	461a      	mov	r2, r3
 8002a16:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8002a1a:	fb02 f303 	mul.w	r3, r2, r3
 8002a1e:	129b      	asrs	r3, r3, #10
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <sampling+0x950>)
 8002a24:	86da      	strh	r2, [r3, #54]	; 0x36
		mask_result =0;
 8002a26:	4b0c      	ldr	r3, [pc, #48]	; (8002a58 <sampling+0x960>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	801a      	strh	r2, [r3, #0]

		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8002a32:	e06a      	b.n	8002b0a <sampling+0xa12>
 8002a34:	200024b6 	.word	0x200024b6
 8002a38:	2000248c 	.word	0x2000248c
 8002a3c:	2000418c 	.word	0x2000418c
 8002a40:	20006b99 	.word	0x20006b99
 8002a44:	200001a4 	.word	0x200001a4
 8002a48:	200001b8 	.word	0x200001b8
 8002a4c:	20006974 	.word	0x20006974
 8002a50:	0800b624 	.word	0x0800b624
 8002a54:	20000144 	.word	0x20000144
 8002a58:	20001884 	.word	0x20001884

	if (note[mask_i].pitch) {
 8002a5c:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8002a60:	4938      	ldr	r1, [pc, #224]	; (8002b44 <sampling+0xa4c>)
 8002a62:	4613      	mov	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	1a9b      	subs	r3, r3, r2
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	440b      	add	r3, r1
 8002a6c:	3302      	adds	r3, #2
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d045      	beq.n	8002b00 <sampling+0xa08>

	//	note[mask_i].pitch=(note[mask_i].pitch ;

		detune_temp=(note[mask_i].pitch+(note[mask_i].detune))&31    ;
 8002a74:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8002a78:	4932      	ldr	r1, [pc, #200]	; (8002b44 <sampling+0xa4c>)
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	1a9b      	subs	r3, r3, r2
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	440b      	add	r3, r1
 8002a84:	3302      	adds	r3, #2
 8002a86:	7819      	ldrb	r1, [r3, #0]
 8002a88:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8002a8c:	482d      	ldr	r0, [pc, #180]	; (8002b44 <sampling+0xa4c>)
 8002a8e:	4613      	mov	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	1a9b      	subs	r3, r3, r2
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	4403      	add	r3, r0
 8002a98:	3308      	adds	r3, #8
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	440b      	add	r3, r1
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	f003 031f 	and.w	r3, r3, #31
 8002aa4:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132
		if(detune_temp>27) detune_temp=27;
 8002aa8:	f897 3132 	ldrb.w	r3, [r7, #306]	; 0x132
 8002aac:	2b1b      	cmp	r3, #27
 8002aae:	d902      	bls.n	8002ab6 <sampling+0x9be>
 8002ab0:	231b      	movs	r3, #27
 8002ab2:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132
		note[mask_i].tuned=sample_Noteadd[MajorNote[detune_temp]];
 8002ab6:	f897 3132 	ldrb.w	r3, [r7, #306]	; 0x132
 8002aba:	4a23      	ldr	r2, [pc, #140]	; (8002b48 <sampling+0xa50>)
 8002abc:	5cd3      	ldrb	r3, [r2, r3]
 8002abe:	4619      	mov	r1, r3
 8002ac0:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8002ac4:	4b21      	ldr	r3, [pc, #132]	; (8002b4c <sampling+0xa54>)
 8002ac6:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8002aca:	491e      	ldr	r1, [pc, #120]	; (8002b44 <sampling+0xa4c>)
 8002acc:	4613      	mov	r3, r2
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	1a9b      	subs	r3, r3, r2
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	440b      	add	r3, r1
 8002ad6:	330c      	adds	r3, #12
 8002ad8:	4602      	mov	r2, r0
 8002ada:	801a      	strh	r2, [r3, #0]
		tuned_list[mask_i]=note[mask_i].tuned;
 8002adc:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8002ae0:	f897 1137 	ldrb.w	r1, [r7, #311]	; 0x137
 8002ae4:	4817      	ldr	r0, [pc, #92]	; (8002b44 <sampling+0xa4c>)
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	4403      	add	r3, r0
 8002af0:	330c      	adds	r3, #12
 8002af2:	881a      	ldrh	r2, [r3, #0]
 8002af4:	004b      	lsls	r3, r1, #1
 8002af6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002afa:	443b      	add	r3, r7
 8002afc:	f823 2ca4 	strh.w	r2, [r3, #-164]
		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8002b00:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8002b04:	3301      	adds	r3, #1
 8002b06:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8002b0a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d9a4      	bls.n	8002a5c <sampling+0x964>
		//note_tuned[3]=2751;
	} // end of note calcualte



	if ((i&63)==0)
 8002b12:	4b0f      	ldr	r3, [pc, #60]	; (8002b50 <sampling+0xa58>)
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <sampling+0xa2a>
	{

		LFO_source(); // calculate lfo maybe 8 times for now
 8002b1e:	f000 fdeb 	bl	80036f8 <LFO_source>
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002b22:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <sampling+0xa58>)
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	3301      	adds	r3, #1
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <sampling+0xa58>)
 8002b2c:	801a      	strh	r2, [r3, #0]
 8002b2e:	4b08      	ldr	r3, [pc, #32]	; (8002b50 <sampling+0xa58>)
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b36:	f4ff adf2 	bcc.w	800271e <sampling+0x626>
int32_t  sample_temp3;
int32_t  sample_temp4;
int32_t  sample_temp5;


for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002b3a:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <sampling+0xa58>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	801a      	strh	r2, [r3, #0]
 8002b40:	e193      	b.n	8002e6a <sampling+0xd72>
 8002b42:	bf00      	nop
 8002b44:	200001b8 	.word	0x200001b8
 8002b48:	0800b624 	.word	0x0800b624
 8002b4c:	0800b640 	.word	0x0800b640
 8002b50:	20000876 	.word	0x20000876
	i_total=i+sample_pointB;
 8002b54:	4bce      	ldr	r3, [pc, #824]	; (8002e90 <sampling+0xd98>)
 8002b56:	881a      	ldrh	r2, [r3, #0]
 8002b58:	4bce      	ldr	r3, [pc, #824]	; (8002e94 <sampling+0xd9c>)
 8002b5a:	881b      	ldrh	r3, [r3, #0]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
	sampling_position=(i>>6);
 8002b62:	4bcb      	ldr	r3, [pc, #812]	; (8002e90 <sampling+0xd98>)
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	099b      	lsrs	r3, r3, #6
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	4bca      	ldr	r3, [pc, #808]	; (8002e98 <sampling+0xda0>)
 8002b6e:	701a      	strb	r2, [r3, #0]

	if ((i&63)==0)	{  patch_target_replace();    // update values , not too bad
 8002b70:	4bc7      	ldr	r3, [pc, #796]	; (8002e90 <sampling+0xd98>)
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f040 8095 	bne.w	8002ca8 <sampling+0xbb0>
 8002b7e:	f7fe fc3f 	bl	8001400 <patch_target_replace>
float freq_temp=arm_sin_f32(filter[0].cutoff_1*0.01)    ;   // need this for useful filter
 8002b82:	4bc6      	ldr	r3, [pc, #792]	; (8002e9c <sampling+0xda4>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fd fdaa 	bl	80006e0 <__aeabi_i2d>
 8002b8c:	a3bc      	add	r3, pc, #752	; (adr r3, 8002e80 <sampling+0xd88>)
 8002b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b92:	f7fd fb29 	bl	80001e8 <__aeabi_dmul>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4610      	mov	r0, r2
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	f7fd fe09 	bl	80007b4 <__aeabi_d2f>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	ee00 3a10 	vmov	s0, r3
 8002ba8:	f008 fa14 	bl	800afd4 <arm_sin_f32>
 8002bac:	ed87 0a44 	vstr	s0, [r7, #272]	; 0x110
freq_pointer[0] [sampling_position]=1-freq_temp; // problem was selecting accu instead of out , good now
 8002bb0:	4bb9      	ldr	r3, [pc, #740]	; (8002e98 <sampling+0xda0>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002bb8:	edd7 7a44 	vldr	s15, [r7, #272]	; 0x110
 8002bbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bc0:	4ab7      	ldr	r2, [pc, #732]	; (8002ea0 <sampling+0xda8>)
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	edc3 7a00 	vstr	s15, [r3]
 freq_temp=arm_sin_f32(filter[1].cutoff_1*0.006)    ;
 8002bca:	4bb4      	ldr	r3, [pc, #720]	; (8002e9c <sampling+0xda4>)
 8002bcc:	7a1b      	ldrb	r3, [r3, #8]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fd fd86 	bl	80006e0 <__aeabi_i2d>
 8002bd4:	a3ac      	add	r3, pc, #688	; (adr r3, 8002e88 <sampling+0xd90>)
 8002bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bda:	f7fd fb05 	bl	80001e8 <__aeabi_dmul>
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	4610      	mov	r0, r2
 8002be4:	4619      	mov	r1, r3
 8002be6:	f7fd fde5 	bl	80007b4 <__aeabi_d2f>
 8002bea:	4603      	mov	r3, r0
 8002bec:	ee00 3a10 	vmov	s0, r3
 8002bf0:	f008 f9f0 	bl	800afd4 <arm_sin_f32>
 8002bf4:	ed87 0a44 	vstr	s0, [r7, #272]	; 0x110
freq_pointer[1] [sampling_position] =1-freq_temp ; // filter lfos
 8002bf8:	4ba7      	ldr	r3, [pc, #668]	; (8002e98 <sampling+0xda0>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c00:	edd7 7a44 	vldr	s15, [r7, #272]	; 0x110
 8002c04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c08:	4aa5      	ldr	r2, [pc, #660]	; (8002ea0 <sampling+0xda8>)
 8002c0a:	3309      	adds	r3, #9
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	edc3 7a00 	vstr	s15, [r3]
freq_temp=arm_sin_f32(filter[2].cutoff_1*0.006)    ;
 8002c14:	4ba1      	ldr	r3, [pc, #644]	; (8002e9c <sampling+0xda4>)
 8002c16:	7c1b      	ldrb	r3, [r3, #16]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fd fd61 	bl	80006e0 <__aeabi_i2d>
 8002c1e:	a39a      	add	r3, pc, #616	; (adr r3, 8002e88 <sampling+0xd90>)
 8002c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c24:	f7fd fae0 	bl	80001e8 <__aeabi_dmul>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	4619      	mov	r1, r3
 8002c30:	f7fd fdc0 	bl	80007b4 <__aeabi_d2f>
 8002c34:	4603      	mov	r3, r0
 8002c36:	ee00 3a10 	vmov	s0, r3
 8002c3a:	f008 f9cb 	bl	800afd4 <arm_sin_f32>
 8002c3e:	ed87 0a44 	vstr	s0, [r7, #272]	; 0x110
freq_pointer[2] [sampling_position] =1-freq_temp ; // filter lfos
 8002c42:	4b95      	ldr	r3, [pc, #596]	; (8002e98 <sampling+0xda0>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c4a:	edd7 7a44 	vldr	s15, [r7, #272]	; 0x110
 8002c4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c52:	4a93      	ldr	r2, [pc, #588]	; (8002ea0 <sampling+0xda8>)
 8002c54:	3312      	adds	r3, #18
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	edc3 7a00 	vstr	s15, [r3]
 freq_temp=arm_sin_f32(filter[3].cutoff_1*0.006)    ;
 8002c5e:	4b8f      	ldr	r3, [pc, #572]	; (8002e9c <sampling+0xda4>)
 8002c60:	7e1b      	ldrb	r3, [r3, #24]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fd fd3c 	bl	80006e0 <__aeabi_i2d>
 8002c68:	a387      	add	r3, pc, #540	; (adr r3, 8002e88 <sampling+0xd90>)
 8002c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6e:	f7fd fabb 	bl	80001e8 <__aeabi_dmul>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4610      	mov	r0, r2
 8002c78:	4619      	mov	r1, r3
 8002c7a:	f7fd fd9b 	bl	80007b4 <__aeabi_d2f>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	ee00 3a10 	vmov	s0, r3
 8002c84:	f008 f9a6 	bl	800afd4 <arm_sin_f32>
 8002c88:	ed87 0a44 	vstr	s0, [r7, #272]	; 0x110
freq_pointer[3] [sampling_position] =1-freq_temp ; // filter lfos
 8002c8c:	4b82      	ldr	r3, [pc, #520]	; (8002e98 <sampling+0xda0>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c94:	edd7 7a44 	vldr	s15, [r7, #272]	; 0x110
 8002c98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c9c:	4a80      	ldr	r2, [pc, #512]	; (8002ea0 <sampling+0xda8>)
 8002c9e:	331b      	adds	r3, #27
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	edc3 7a00 	vstr	s15, [r3]



	}

		sample_accus[0] = sample_accus[0] + tuned_list[0];  // normal adder full volume
 8002ca8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002cac:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		sample_accus[1] = sample_accus[1] + tuned_list[1];
 8002cb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002cba:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		sample_accus[2] = sample_accus[2] + tuned_list[2]; // bouncing somewhere
 8002cc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002cc8:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8002ccc:	4413      	add	r3, r2
 8002cce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		sample_accus[3] = sample_accus[3] + tuned_list[3];  // 7 cycles
 8002cd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cd6:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 8002cda:	4413      	add	r3, r2
 8002cdc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

	if (sample_accus[0]>524287) sample_accus[0] =-1048576+sample_accus[0] ; // faster >  than &  ,strange,  or is even worse
 8002ce0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002ce4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ce8:	db05      	blt.n	8002cf6 <sampling+0xbfe>
 8002cea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002cee:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8002cf2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	if (sample_accus[1]>524287) sample_accus[1] =-1048576+sample_accus[1] ; // faster >  than &  ,strange
 8002cf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002cfa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002cfe:	db05      	blt.n	8002d0c <sampling+0xc14>
 8002d00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d04:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8002d08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	if (sample_accus[2]>524287) sample_accus[2] =-1048576+sample_accus[2] ; //
 8002d0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d10:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d14:	db05      	blt.n	8002d22 <sampling+0xc2a>
 8002d16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d1a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8002d1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	if (sample_accus[3]>524287) sample_accus[3] =-1048576+sample_accus[3] ; //
 8002d22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d26:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d2a:	db05      	blt.n	8002d38 <sampling+0xc40>
 8002d2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d30:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8002d34:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc


	sample_Accu[0]=(abs(sample_accus[0])-262144)<<1;
 8002d38:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	bfb8      	it	lt
 8002d40:	425b      	neglt	r3, r3
 8002d42:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	sample_Accu[1]=(abs(sample_accus[1])-262144)<<1;
 8002d4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	bfb8      	it	lt
 8002d54:	425b      	neglt	r3, r3
 8002d56:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	sample_Accu[2]=(abs(sample_accus[2])-262144)<<1;
 8002d60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	bfb8      	it	lt
 8002d68:	425b      	neglt	r3, r3
 8002d6a:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	sample_Accu[3]=(abs(sample_accus[3])-262144)<<1;
 8002d74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	bfb8      	it	lt
 8002d7c:	425b      	neglt	r3, r3
 8002d7e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4



	 	 	 	 	 sample_temp1=(*osc_pointers[0])*note[0].velocity;// needs cut a bit  maybe some diff vol settings
 8002d88:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002d8c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a43      	ldr	r2, [pc, #268]	; (8002ea4 <sampling+0xdac>)
 8002d96:	79d2      	ldrb	r2, [r2, #7]
 8002d98:	fb02 f303 	mul.w	r3, r2, r3
 8002d9c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

					sample_temp2=(sample_temp1)>>2;
 8002da0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002da4:	109b      	asrs	r3, r3, #2
 8002da6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				    //sample_Accu[0] =(sample_accus[0]+sample_accus[1])>>8;

					sample_temp1=(*osc_pointers[1])*note[1].velocity; // needs cut a bit  ,default 20bit
 8002daa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002dae:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a3b      	ldr	r2, [pc, #236]	; (8002ea4 <sampling+0xdac>)
 8002db8:	7d52      	ldrb	r2, [r2, #21]
 8002dba:	fb02 f303 	mul.w	r3, r2, r3
 8002dbe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
					sample_temp3=sample_temp1>>2; // 20+8
 8002dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dc6:	109b      	asrs	r3, r3, #2
 8002dc8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
					//sample_Accu[1] =sample_accus[2]>>8;


					sample_temp1=(*osc_pointers[2])*note[2].velocity;      // needs some gain fine tune !
 8002dcc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002dd0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a32      	ldr	r2, [pc, #200]	; (8002ea4 <sampling+0xdac>)
 8002dda:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 8002dde:	fb02 f303 	mul.w	r3, r2, r3
 8002de2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
					sample_temp4 =sample_temp1>>2;    // 64 default 20+8
 8002de6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dea:	109b      	asrs	r3, r3, #2
 8002dec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100


					sample_Accu[3]=sine_count();
 8002df0:	f000 fc16 	bl	8003620 <sine_count>
 8002df4:	4603      	mov	r3, r0
 8002df6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
					//sample_Accu[2] =sample_accus[3]>>8;
					//sine_calc_select=0;
					 // calc sine   distortion out when hcagning note  ,, down to 36 cycles atm
					sample_temp1=(*osc_pointers[3])*	note[3].velocity;  // sine out is 16bit, add 4 then 16+8
 8002dfa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002dfe:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a27      	ldr	r2, [pc, #156]	; (8002ea4 <sampling+0xdac>)
 8002e08:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 8002e0c:	fb02 f303 	mul.w	r3, r2, r3
 8002e10:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
					sample_temp5 =sample_temp1>>2;
 8002e14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e18:	109b      	asrs	r3, r3, #2
 8002e1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
					//sample_Accu[3] =sine_out>>4;
	play_holder0[i]=sample_temp2;  // write to bank
 8002e1e:	4b1c      	ldr	r3, [pc, #112]	; (8002e90 <sampling+0xd98>)
 8002e20:	881b      	ldrh	r3, [r3, #0]
 8002e22:	4619      	mov	r1, r3
 8002e24:	4a20      	ldr	r2, [pc, #128]	; (8002ea8 <sampling+0xdb0>)
 8002e26:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002e2a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder1[i]=sample_temp3;
 8002e2e:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <sampling+0xd98>)
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	4619      	mov	r1, r3
 8002e34:	4a1d      	ldr	r2, [pc, #116]	; (8002eac <sampling+0xdb4>)
 8002e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e3a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder2[i]=sample_temp4;
 8002e3e:	4b14      	ldr	r3, [pc, #80]	; (8002e90 <sampling+0xd98>)
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	4619      	mov	r1, r3
 8002e44:	4a1a      	ldr	r2, [pc, #104]	; (8002eb0 <sampling+0xdb8>)
 8002e46:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002e4a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder3[i]=sample_temp5;
 8002e4e:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <sampling+0xd98>)
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	4619      	mov	r1, r3
 8002e54:	4a17      	ldr	r2, [pc, #92]	; (8002eb4 <sampling+0xdbc>)
 8002e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e5a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002e5e:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <sampling+0xd98>)
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	3301      	adds	r3, #1
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <sampling+0xd98>)
 8002e68:	801a      	strh	r2, [r3, #0]
 8002e6a:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <sampling+0xd98>)
 8002e6c:	881b      	ldrh	r3, [r3, #0]
 8002e6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e72:	f4ff ae6f 	bcc.w	8002b54 <sampling+0xa5c>
	} // end of osc , doing some sound

for (pars_counter=0;pars_counter<4;pars_counter++)	{   // save sample_accu data
 8002e76:	2300      	movs	r3, #0
 8002e78:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
 8002e7c:	e02e      	b.n	8002edc <sampling+0xde4>
 8002e7e:	bf00      	nop
 8002e80:	47ae147b 	.word	0x47ae147b
 8002e84:	3f847ae1 	.word	0x3f847ae1
 8002e88:	bc6a7efa 	.word	0xbc6a7efa
 8002e8c:	3f789374 	.word	0x3f789374
 8002e90:	20000876 	.word	0x20000876
 8002e94:	20000874 	.word	0x20000874
 8002e98:	2000496c 	.word	0x2000496c
 8002e9c:	20000244 	.word	0x20000244
 8002ea0:	20002544 	.word	0x20002544
 8002ea4:	200001b8 	.word	0x200001b8
 8002ea8:	20006170 	.word	0x20006170
 8002eac:	20004970 	.word	0x20004970
 8002eb0:	20005170 	.word	0x20005170
 8002eb4:	20005970 	.word	0x20005970

	sample_accus_hold[pars_counter]=sample_accus[pars_counter];
 8002eb8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8002ebc:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002ec6:	443b      	add	r3, r7
 8002ec8:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8002ecc:	4998      	ldr	r1, [pc, #608]	; (8003130 <sampling+0x1038>)
 8002ece:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
for (pars_counter=0;pars_counter<4;pars_counter++)	{   // save sample_accu data
 8002ed2:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
 8002edc:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d9e9      	bls.n	8002eb8 <sampling+0xdc0>
int32_t filter_Accu;
int32_t filter_Accu2;

//uint16_t* click=&input_holder[0];

uint16_t crap_hold=2000;
 8002ee4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002ee8:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118

				uint16_t crap_hold1=2000;
 8002eec:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002ef0:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
				uint16_t crap_hold2=2000;
 8002ef4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002ef8:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116

for (i=0;i<512;i++) // 15-20 tmr cycles (174)
 8002efc:	4b8d      	ldr	r3, [pc, #564]	; (8003134 <sampling+0x103c>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	801a      	strh	r2, [r3, #0]
 8002f02:	e030      	b.n	8002f66 <sampling+0xe6e>
			{
				crap_hold=((input_holder[i]*7)+crap_hold2)>>3;
 8002f04:	4b8b      	ldr	r3, [pc, #556]	; (8003134 <sampling+0x103c>)
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4b8b      	ldr	r3, [pc, #556]	; (8003138 <sampling+0x1040>)
 8002f0c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002f10:	461a      	mov	r2, r3
 8002f12:	4613      	mov	r3, r2
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	1a9a      	subs	r2, r3, r2
 8002f18:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8002f1c:	4413      	add	r3, r2
 8002f1e:	10db      	asrs	r3, r3, #3
 8002f20:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
					crap_hold1=((crap_hold*7)+crap_hold1)>>3;
 8002f24:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8002f28:	4613      	mov	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	1a9a      	subs	r2, r3, r2
 8002f2e:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8002f32:	4413      	add	r3, r2
 8002f34:	10db      	asrs	r3, r3, #3
 8002f36:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
					input_holder[i] =((crap_hold1*7)+crap_hold2)>>3;
 8002f3a:	f8b7 2126 	ldrh.w	r2, [r7, #294]	; 0x126
 8002f3e:	4613      	mov	r3, r2
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	1a9a      	subs	r2, r3, r2
 8002f44:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8002f48:	4413      	add	r3, r2
 8002f4a:	10d9      	asrs	r1, r3, #3
 8002f4c:	4b79      	ldr	r3, [pc, #484]	; (8003134 <sampling+0x103c>)
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	461a      	mov	r2, r3
 8002f52:	b289      	uxth	r1, r1
 8002f54:	4b78      	ldr	r3, [pc, #480]	; (8003138 <sampling+0x1040>)
 8002f56:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
for (i=0;i<512;i++) // 15-20 tmr cycles (174)
 8002f5a:	4b76      	ldr	r3, [pc, #472]	; (8003134 <sampling+0x103c>)
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	4b74      	ldr	r3, [pc, #464]	; (8003134 <sampling+0x103c>)
 8002f64:	801a      	strh	r2, [r3, #0]
 8002f66:	4b73      	ldr	r3, [pc, #460]	; (8003134 <sampling+0x103c>)
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f6e:	d3c9      	bcc.n	8002f04 <sampling+0xe0c>
}
*/



for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 8002f70:	4b70      	ldr	r3, [pc, #448]	; (8003134 <sampling+0x103c>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	801a      	strh	r2, [r3, #0]
 8002f76:	e323      	b.n	80035c0 <sampling+0x14c8>
	i_total=i+sample_pointB;
 8002f78:	4b6e      	ldr	r3, [pc, #440]	; (8003134 <sampling+0x103c>)
 8002f7a:	881a      	ldrh	r2, [r3, #0]
 8002f7c:	4b6f      	ldr	r3, [pc, #444]	; (800313c <sampling+0x1044>)
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	4413      	add	r3, r2
 8002f82:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114

sampling_position=(i>>6);
 8002f86:	4b6b      	ldr	r3, [pc, #428]	; (8003134 <sampling+0x103c>)
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	099b      	lsrs	r3, r3, #6
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	4b6b      	ldr	r3, [pc, #428]	; (8003140 <sampling+0x1048>)
 8002f92:	701a      	strb	r2, [r3, #0]
// filter 1
if (		(note_toggler[i>>5]	)==(1<<(i&31)	)) 				{ADSR[0].attack_trigger =0;  trigger_counter++; trigger_counter=trigger_counter&1023  ;}
 8002f94:	4b67      	ldr	r3, [pc, #412]	; (8003134 <sampling+0x103c>)
 8002f96:	881b      	ldrh	r3, [r3, #0]
 8002f98:	095b      	lsrs	r3, r3, #5
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002fa2:	443b      	add	r3, r7
 8002fa4:	f853 3cf0 	ldr.w	r3, [r3, #-240]
 8002fa8:	4a62      	ldr	r2, [pc, #392]	; (8003134 <sampling+0x103c>)
 8002faa:	8812      	ldrh	r2, [r2, #0]
 8002fac:	f002 021f 	and.w	r2, r2, #31
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d10f      	bne.n	8002fda <sampling+0xee2>
 8002fba:	4b62      	ldr	r3, [pc, #392]	; (8003144 <sampling+0x104c>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	711a      	strb	r2, [r3, #4]
 8002fc0:	4b61      	ldr	r3, [pc, #388]	; (8003148 <sampling+0x1050>)
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	4b5f      	ldr	r3, [pc, #380]	; (8003148 <sampling+0x1050>)
 8002fca:	801a      	strh	r2, [r3, #0]
 8002fcc:	4b5e      	ldr	r3, [pc, #376]	; (8003148 <sampling+0x1050>)
 8002fce:	881b      	ldrh	r3, [r3, #0]
 8002fd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	4b5c      	ldr	r3, [pc, #368]	; (8003148 <sampling+0x1050>)
 8002fd8:	801a      	strh	r2, [r3, #0]


sample_Accu[0]=play_holder0[i];  // sine input
 8002fda:	4b56      	ldr	r3, [pc, #344]	; (8003134 <sampling+0x103c>)
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	4b5a      	ldr	r3, [pc, #360]	; (800314c <sampling+0x1054>)
 8002fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fe6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
sample_Accu[1]=play_holder1[i] ; // saw
 8002fea:	4b52      	ldr	r3, [pc, #328]	; (8003134 <sampling+0x103c>)
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	4b57      	ldr	r3, [pc, #348]	; (8003150 <sampling+0x1058>)
 8002ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
sample_Accu[2]=play_holder2[i];  // sine input
 8002ffa:	4b4e      	ldr	r3, [pc, #312]	; (8003134 <sampling+0x103c>)
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	461a      	mov	r2, r3
 8003000:	4b54      	ldr	r3, [pc, #336]	; (8003154 <sampling+0x105c>)
 8003002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003006:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
sample_Accu[3]=play_holder3[i] ;
 800300a:	4b4a      	ldr	r3, [pc, #296]	; (8003134 <sampling+0x103c>)
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	4b51      	ldr	r3, [pc, #324]	; (8003158 <sampling+0x1060>)
 8003012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003016:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

// this section is about 100 tmr cycles
if ((i&63)==0){
 800301a:	4b46      	ldr	r3, [pc, #280]	; (8003134 <sampling+0x103c>)
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003022:	2b00      	cmp	r3, #0
 8003024:	f040 811e 	bne.w	8003264 <sampling+0x116c>
freq_point[0]=freq_pointer[0] [sampling_position];; // load up coeffs
 8003028:	4b45      	ldr	r3, [pc, #276]	; (8003140 <sampling+0x1048>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	4a4b      	ldr	r2, [pc, #300]	; (800315c <sampling+0x1064>)
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a4a      	ldr	r2, [pc, #296]	; (8003160 <sampling+0x1068>)
 8003036:	6013      	str	r3, [r2, #0]

freq_point[2]=freq_pointer[1] [sampling_position];  // ok , array was too short
 8003038:	4b41      	ldr	r3, [pc, #260]	; (8003140 <sampling+0x1048>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	4a47      	ldr	r2, [pc, #284]	; (800315c <sampling+0x1064>)
 800303e:	3309      	adds	r3, #9
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a46      	ldr	r2, [pc, #280]	; (8003160 <sampling+0x1068>)
 8003048:	6093      	str	r3, [r2, #8]
freq_point[4]=freq_pointer[2] [sampling_position];  // ok , array was too short
 800304a:	4b3d      	ldr	r3, [pc, #244]	; (8003140 <sampling+0x1048>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	4a43      	ldr	r2, [pc, #268]	; (800315c <sampling+0x1064>)
 8003050:	3312      	adds	r3, #18
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a41      	ldr	r2, [pc, #260]	; (8003160 <sampling+0x1068>)
 800305a:	6113      	str	r3, [r2, #16]
freq_point[6]=freq_pointer[3] [sampling_position];  // ok , array was too short
 800305c:	4b38      	ldr	r3, [pc, #224]	; (8003140 <sampling+0x1048>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	4a3e      	ldr	r2, [pc, #248]	; (800315c <sampling+0x1064>)
 8003062:	331b      	adds	r3, #27
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a3d      	ldr	r2, [pc, #244]	; (8003160 <sampling+0x1068>)
 800306c:	6193      	str	r3, [r2, #24]


if (freq_point[0]>1) freq_point[0]=1; else if (freq_point[0]<0) freq_point[0]=0;// just in case
 800306e:	4b3c      	ldr	r3, [pc, #240]	; (8003160 <sampling+0x1068>)
 8003070:	edd3 7a00 	vldr	s15, [r3]
 8003074:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003078:	eef4 7ac7 	vcmpe.f32	s15, s14
 800307c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003080:	dd04      	ble.n	800308c <sampling+0xf94>
 8003082:	4b37      	ldr	r3, [pc, #220]	; (8003160 <sampling+0x1068>)
 8003084:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	e00b      	b.n	80030a4 <sampling+0xfac>
 800308c:	4b34      	ldr	r3, [pc, #208]	; (8003160 <sampling+0x1068>)
 800308e:	edd3 7a00 	vldr	s15, [r3]
 8003092:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800309a:	d503      	bpl.n	80030a4 <sampling+0xfac>
 800309c:	4b30      	ldr	r3, [pc, #192]	; (8003160 <sampling+0x1068>)
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
if (freq_point[4]>1) freq_point[4]=1; else if (freq_point[4]<0) freq_point[4]=0;// just in case
 80030a4:	4b2e      	ldr	r3, [pc, #184]	; (8003160 <sampling+0x1068>)
 80030a6:	edd3 7a04 	vldr	s15, [r3, #16]
 80030aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80030ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b6:	dd04      	ble.n	80030c2 <sampling+0xfca>
 80030b8:	4b29      	ldr	r3, [pc, #164]	; (8003160 <sampling+0x1068>)
 80030ba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80030be:	611a      	str	r2, [r3, #16]
 80030c0:	e00b      	b.n	80030da <sampling+0xfe2>
 80030c2:	4b27      	ldr	r3, [pc, #156]	; (8003160 <sampling+0x1068>)
 80030c4:	edd3 7a04 	vldr	s15, [r3, #16]
 80030c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d0:	d503      	bpl.n	80030da <sampling+0xfe2>
 80030d2:	4b23      	ldr	r3, [pc, #140]	; (8003160 <sampling+0x1068>)
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	611a      	str	r2, [r3, #16]
if (freq_point[2]>1) freq_point[2]=1; else if (freq_point[2]<0) freq_point[2]=0;// just in case
 80030da:	4b21      	ldr	r3, [pc, #132]	; (8003160 <sampling+0x1068>)
 80030dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80030e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80030e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ec:	dd04      	ble.n	80030f8 <sampling+0x1000>
 80030ee:	4b1c      	ldr	r3, [pc, #112]	; (8003160 <sampling+0x1068>)
 80030f0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80030f4:	609a      	str	r2, [r3, #8]
 80030f6:	e00b      	b.n	8003110 <sampling+0x1018>
 80030f8:	4b19      	ldr	r3, [pc, #100]	; (8003160 <sampling+0x1068>)
 80030fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80030fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003106:	d503      	bpl.n	8003110 <sampling+0x1018>
 8003108:	4b15      	ldr	r3, [pc, #84]	; (8003160 <sampling+0x1068>)
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	609a      	str	r2, [r3, #8]
if (freq_point[6]>1) freq_point[6]=1; else if (freq_point[6]<0) freq_point[6]=0;// just in case
 8003110:	4b13      	ldr	r3, [pc, #76]	; (8003160 <sampling+0x1068>)
 8003112:	edd3 7a06 	vldr	s15, [r3, #24]
 8003116:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800311a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800311e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003122:	dd1f      	ble.n	8003164 <sampling+0x106c>
 8003124:	4b0e      	ldr	r3, [pc, #56]	; (8003160 <sampling+0x1068>)
 8003126:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800312a:	619a      	str	r2, [r3, #24]
 800312c:	e026      	b.n	800317c <sampling+0x1084>
 800312e:	bf00      	nop
 8003130:	20002490 	.word	0x20002490
 8003134:	20000876 	.word	0x20000876
 8003138:	20003000 	.word	0x20003000
 800313c:	20000874 	.word	0x20000874
 8003140:	2000496c 	.word	0x2000496c
 8003144:	20003700 	.word	0x20003700
 8003148:	200025d4 	.word	0x200025d4
 800314c:	20006170 	.word	0x20006170
 8003150:	20004970 	.word	0x20004970
 8003154:	20005170 	.word	0x20005170
 8003158:	20005970 	.word	0x20005970
 800315c:	20002544 	.word	0x20002544
 8003160:	20002524 	.word	0x20002524
 8003164:	4bcc      	ldr	r3, [pc, #816]	; (8003498 <sampling+0x13a0>)
 8003166:	edd3 7a06 	vldr	s15, [r3, #24]
 800316a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800316e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003172:	d503      	bpl.n	800317c <sampling+0x1084>
 8003174:	4bc8      	ldr	r3, [pc, #800]	; (8003498 <sampling+0x13a0>)
 8003176:	f04f 0200 	mov.w	r2, #0
 800317a:	619a      	str	r2, [r3, #24]

freq_point[1]=1-freq_point[0];
 800317c:	4bc6      	ldr	r3, [pc, #792]	; (8003498 <sampling+0x13a0>)
 800317e:	edd3 7a00 	vldr	s15, [r3]
 8003182:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003186:	ee77 7a67 	vsub.f32	s15, s14, s15
 800318a:	4bc3      	ldr	r3, [pc, #780]	; (8003498 <sampling+0x13a0>)
 800318c:	edc3 7a01 	vstr	s15, [r3, #4]
freq_point[3]=1-freq_point[2];
 8003190:	4bc1      	ldr	r3, [pc, #772]	; (8003498 <sampling+0x13a0>)
 8003192:	edd3 7a02 	vldr	s15, [r3, #8]
 8003196:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800319a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800319e:	4bbe      	ldr	r3, [pc, #760]	; (8003498 <sampling+0x13a0>)
 80031a0:	edc3 7a03 	vstr	s15, [r3, #12]
freq_point[5]=1-freq_point[4];
 80031a4:	4bbc      	ldr	r3, [pc, #752]	; (8003498 <sampling+0x13a0>)
 80031a6:	edd3 7a04 	vldr	s15, [r3, #16]
 80031aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031b2:	4bb9      	ldr	r3, [pc, #740]	; (8003498 <sampling+0x13a0>)
 80031b4:	edc3 7a05 	vstr	s15, [r3, #20]
freq_point[7]=1-freq_point[6];
 80031b8:	4bb7      	ldr	r3, [pc, #732]	; (8003498 <sampling+0x13a0>)
 80031ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80031be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031c6:	4bb4      	ldr	r3, [pc, #720]	; (8003498 <sampling+0x13a0>)
 80031c8:	edc3 7a07 	vstr	s15, [r3, #28]

filter_res[0]=freq_point[0]*0.2;
 80031cc:	4bb2      	ldr	r3, [pc, #712]	; (8003498 <sampling+0x13a0>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fd fa97 	bl	8000704 <__aeabi_f2d>
 80031d6:	a3ae      	add	r3, pc, #696	; (adr r3, 8003490 <sampling+0x1398>)
 80031d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031dc:	f7fd f804 	bl	80001e8 <__aeabi_dmul>
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	4610      	mov	r0, r2
 80031e6:	4619      	mov	r1, r3
 80031e8:	f7fd fae4 	bl	80007b4 <__aeabi_d2f>
 80031ec:	4603      	mov	r3, r0
 80031ee:	4aab      	ldr	r2, [pc, #684]	; (800349c <sampling+0x13a4>)
 80031f0:	6013      	str	r3, [r2, #0]
filter_res[1]=freq_point[1]*0.2;
 80031f2:	4ba9      	ldr	r3, [pc, #676]	; (8003498 <sampling+0x13a0>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fd fa84 	bl	8000704 <__aeabi_f2d>
 80031fc:	a3a4      	add	r3, pc, #656	; (adr r3, 8003490 <sampling+0x1398>)
 80031fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003202:	f7fc fff1 	bl	80001e8 <__aeabi_dmul>
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	4610      	mov	r0, r2
 800320c:	4619      	mov	r1, r3
 800320e:	f7fd fad1 	bl	80007b4 <__aeabi_d2f>
 8003212:	4603      	mov	r3, r0
 8003214:	4aa1      	ldr	r2, [pc, #644]	; (800349c <sampling+0x13a4>)
 8003216:	6053      	str	r3, [r2, #4]
filter_res[2]=freq_point[2]*0.2;
 8003218:	4b9f      	ldr	r3, [pc, #636]	; (8003498 <sampling+0x13a0>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	4618      	mov	r0, r3
 800321e:	f7fd fa71 	bl	8000704 <__aeabi_f2d>
 8003222:	a39b      	add	r3, pc, #620	; (adr r3, 8003490 <sampling+0x1398>)
 8003224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003228:	f7fc ffde 	bl	80001e8 <__aeabi_dmul>
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	4610      	mov	r0, r2
 8003232:	4619      	mov	r1, r3
 8003234:	f7fd fabe 	bl	80007b4 <__aeabi_d2f>
 8003238:	4603      	mov	r3, r0
 800323a:	4a98      	ldr	r2, [pc, #608]	; (800349c <sampling+0x13a4>)
 800323c:	6093      	str	r3, [r2, #8]
filter_res[3]=freq_point[3]*0.2;
 800323e:	4b96      	ldr	r3, [pc, #600]	; (8003498 <sampling+0x13a0>)
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	4618      	mov	r0, r3
 8003244:	f7fd fa5e 	bl	8000704 <__aeabi_f2d>
 8003248:	a391      	add	r3, pc, #580	; (adr r3, 8003490 <sampling+0x1398>)
 800324a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324e:	f7fc ffcb 	bl	80001e8 <__aeabi_dmul>
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	4610      	mov	r0, r2
 8003258:	4619      	mov	r1, r3
 800325a:	f7fd faab 	bl	80007b4 <__aeabi_d2f>
 800325e:	4603      	mov	r3, r0
 8003260:	4a8e      	ldr	r2, [pc, #568]	; (800349c <sampling+0x13a4>)
 8003262:	60d3      	str	r3, [r2, #12]
		//freq_point[0]=0.50;

   // vol lfo


		filter_accus[1]=sample_Accu[0]; // saw
 8003264:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003268:	ee07 3a90 	vmov	s15, r3
 800326c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003270:	4b8b      	ldr	r3, [pc, #556]	; (80034a0 <sampling+0x13a8>)
 8003272:	edc3 7a01 	vstr	s15, [r3, #4]
		filter_accus[1]=filter_accus[1]-(filter_accus[3]*filter_res[0]);
 8003276:	4b8a      	ldr	r3, [pc, #552]	; (80034a0 <sampling+0x13a8>)
 8003278:	ed93 7a01 	vldr	s14, [r3, #4]
 800327c:	4b88      	ldr	r3, [pc, #544]	; (80034a0 <sampling+0x13a8>)
 800327e:	edd3 6a03 	vldr	s13, [r3, #12]
 8003282:	4b86      	ldr	r3, [pc, #536]	; (800349c <sampling+0x13a4>)
 8003284:	edd3 7a00 	vldr	s15, [r3]
 8003288:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800328c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003290:	4b83      	ldr	r3, [pc, #524]	; (80034a0 <sampling+0x13a8>)
 8003292:	edc3 7a01 	vstr	s15, [r3, #4]

		filter_accus[2]=(filter_accus[1]*freq_point[0])+(filter_accus[2]*freq_point[1]);      //short=fast , adding makes it slower
 8003296:	4b82      	ldr	r3, [pc, #520]	; (80034a0 <sampling+0x13a8>)
 8003298:	ed93 7a01 	vldr	s14, [r3, #4]
 800329c:	4b7e      	ldr	r3, [pc, #504]	; (8003498 <sampling+0x13a0>)
 800329e:	edd3 7a00 	vldr	s15, [r3]
 80032a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032a6:	4b7e      	ldr	r3, [pc, #504]	; (80034a0 <sampling+0x13a8>)
 80032a8:	edd3 6a02 	vldr	s13, [r3, #8]
 80032ac:	4b7a      	ldr	r3, [pc, #488]	; (8003498 <sampling+0x13a0>)
 80032ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80032b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ba:	4b79      	ldr	r3, [pc, #484]	; (80034a0 <sampling+0x13a8>)
 80032bc:	edc3 7a02 	vstr	s15, [r3, #8]
		filter_accus[3]=(filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]);			// int32 after conversions is no quicker
 80032c0:	4b77      	ldr	r3, [pc, #476]	; (80034a0 <sampling+0x13a8>)
 80032c2:	ed93 7a02 	vldr	s14, [r3, #8]
 80032c6:	4b74      	ldr	r3, [pc, #464]	; (8003498 <sampling+0x13a0>)
 80032c8:	edd3 7a00 	vldr	s15, [r3]
 80032cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032d0:	4b73      	ldr	r3, [pc, #460]	; (80034a0 <sampling+0x13a8>)
 80032d2:	edd3 6a03 	vldr	s13, [r3, #12]
 80032d6:	4b70      	ldr	r3, [pc, #448]	; (8003498 <sampling+0x13a0>)
 80032d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80032dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032e4:	4b6e      	ldr	r3, [pc, #440]	; (80034a0 <sampling+0x13a8>)
 80032e6:	edc3 7a03 	vstr	s15, [r3, #12]
		sample_Accu[0]=filter_accus[3];
 80032ea:	4b6d      	ldr	r3, [pc, #436]	; (80034a0 <sampling+0x13a8>)
 80032ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80032f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032f4:	ee17 3a90 	vmov	r3, s15
 80032f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	//	sample_Accu[3]=play_holder2[i] >>5;
		filter_accus[4]=sample_Accu[1];
 80032fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003300:	ee07 3a90 	vmov	s15, r3
 8003304:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003308:	4b65      	ldr	r3, [pc, #404]	; (80034a0 <sampling+0x13a8>)
 800330a:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[4]=filter_accus[4]-(filter_accus[6]*filter_res[1]);
 800330e:	4b64      	ldr	r3, [pc, #400]	; (80034a0 <sampling+0x13a8>)
 8003310:	ed93 7a04 	vldr	s14, [r3, #16]
 8003314:	4b62      	ldr	r3, [pc, #392]	; (80034a0 <sampling+0x13a8>)
 8003316:	edd3 6a06 	vldr	s13, [r3, #24]
 800331a:	4b60      	ldr	r3, [pc, #384]	; (800349c <sampling+0x13a4>)
 800331c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003320:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003324:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003328:	4b5d      	ldr	r3, [pc, #372]	; (80034a0 <sampling+0x13a8>)
 800332a:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[5]=(filter_accus[4]*freq_point[2])+(filter_accus[5]*freq_point[3]);   // 30 cyles for 2 poles
 800332e:	4b5c      	ldr	r3, [pc, #368]	; (80034a0 <sampling+0x13a8>)
 8003330:	ed93 7a04 	vldr	s14, [r3, #16]
 8003334:	4b58      	ldr	r3, [pc, #352]	; (8003498 <sampling+0x13a0>)
 8003336:	edd3 7a02 	vldr	s15, [r3, #8]
 800333a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800333e:	4b58      	ldr	r3, [pc, #352]	; (80034a0 <sampling+0x13a8>)
 8003340:	edd3 6a05 	vldr	s13, [r3, #20]
 8003344:	4b54      	ldr	r3, [pc, #336]	; (8003498 <sampling+0x13a0>)
 8003346:	edd3 7a03 	vldr	s15, [r3, #12]
 800334a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800334e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003352:	4b53      	ldr	r3, [pc, #332]	; (80034a0 <sampling+0x13a8>)
 8003354:	edc3 7a05 	vstr	s15, [r3, #20]
		filter_accus[6]=(filter_accus[5]*freq_point[2])+(filter_accus[6]*freq_point[3]);
 8003358:	4b51      	ldr	r3, [pc, #324]	; (80034a0 <sampling+0x13a8>)
 800335a:	ed93 7a05 	vldr	s14, [r3, #20]
 800335e:	4b4e      	ldr	r3, [pc, #312]	; (8003498 <sampling+0x13a0>)
 8003360:	edd3 7a02 	vldr	s15, [r3, #8]
 8003364:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003368:	4b4d      	ldr	r3, [pc, #308]	; (80034a0 <sampling+0x13a8>)
 800336a:	edd3 6a06 	vldr	s13, [r3, #24]
 800336e:	4b4a      	ldr	r3, [pc, #296]	; (8003498 <sampling+0x13a0>)
 8003370:	edd3 7a03 	vldr	s15, [r3, #12]
 8003374:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800337c:	4b48      	ldr	r3, [pc, #288]	; (80034a0 <sampling+0x13a8>)
 800337e:	edc3 7a06 	vstr	s15, [r3, #24]
		sample_Accu[1]=filter_accus[6];
 8003382:	4b47      	ldr	r3, [pc, #284]	; (80034a0 <sampling+0x13a8>)
 8003384:	edd3 7a06 	vldr	s15, [r3, #24]
 8003388:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800338c:	ee17 3a90 	vmov	r3, s15
 8003390:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		filter_accus[7]=sample_Accu[2];
 8003394:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003398:	ee07 3a90 	vmov	s15, r3
 800339c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033a0:	4b3f      	ldr	r3, [pc, #252]	; (80034a0 <sampling+0x13a8>)
 80033a2:	edc3 7a07 	vstr	s15, [r3, #28]
		filter_accus[7]=filter_accus[7]-(filter_accus[9]*filter_res[2]);  // resonance
 80033a6:	4b3e      	ldr	r3, [pc, #248]	; (80034a0 <sampling+0x13a8>)
 80033a8:	ed93 7a07 	vldr	s14, [r3, #28]
 80033ac:	4b3c      	ldr	r3, [pc, #240]	; (80034a0 <sampling+0x13a8>)
 80033ae:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80033b2:	4b3a      	ldr	r3, [pc, #232]	; (800349c <sampling+0x13a4>)
 80033b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80033b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033c0:	4b37      	ldr	r3, [pc, #220]	; (80034a0 <sampling+0x13a8>)
 80033c2:	edc3 7a07 	vstr	s15, [r3, #28]
				filter_accus[8]=(filter_accus[7]*freq_point[4])+(filter_accus[8]*freq_point[5]);   // 30 cyles for 2 poles
 80033c6:	4b36      	ldr	r3, [pc, #216]	; (80034a0 <sampling+0x13a8>)
 80033c8:	ed93 7a07 	vldr	s14, [r3, #28]
 80033cc:	4b32      	ldr	r3, [pc, #200]	; (8003498 <sampling+0x13a0>)
 80033ce:	edd3 7a04 	vldr	s15, [r3, #16]
 80033d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033d6:	4b32      	ldr	r3, [pc, #200]	; (80034a0 <sampling+0x13a8>)
 80033d8:	edd3 6a08 	vldr	s13, [r3, #32]
 80033dc:	4b2e      	ldr	r3, [pc, #184]	; (8003498 <sampling+0x13a0>)
 80033de:	edd3 7a05 	vldr	s15, [r3, #20]
 80033e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ea:	4b2d      	ldr	r3, [pc, #180]	; (80034a0 <sampling+0x13a8>)
 80033ec:	edc3 7a08 	vstr	s15, [r3, #32]
				filter_accus[9]=(filter_accus[8]*freq_point[4])+(filter_accus[9]*freq_point[5]);
 80033f0:	4b2b      	ldr	r3, [pc, #172]	; (80034a0 <sampling+0x13a8>)
 80033f2:	ed93 7a08 	vldr	s14, [r3, #32]
 80033f6:	4b28      	ldr	r3, [pc, #160]	; (8003498 <sampling+0x13a0>)
 80033f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80033fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003400:	4b27      	ldr	r3, [pc, #156]	; (80034a0 <sampling+0x13a8>)
 8003402:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8003406:	4b24      	ldr	r3, [pc, #144]	; (8003498 <sampling+0x13a0>)
 8003408:	edd3 7a05 	vldr	s15, [r3, #20]
 800340c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003414:	4b22      	ldr	r3, [pc, #136]	; (80034a0 <sampling+0x13a8>)
 8003416:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				sample_Accu[2]=filter_accus[9];
 800341a:	4b21      	ldr	r3, [pc, #132]	; (80034a0 <sampling+0x13a8>)
 800341c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003420:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003424:	ee17 3a90 	vmov	r3, s15
 8003428:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

				filter_accus[10]=sample_Accu[3];
 800342c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003430:	ee07 3a90 	vmov	s15, r3
 8003434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003438:	4b19      	ldr	r3, [pc, #100]	; (80034a0 <sampling+0x13a8>)
 800343a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				filter_accus[10]=filter_accus[10]-(filter_accus[12]*filter_res[3]);
 800343e:	4b18      	ldr	r3, [pc, #96]	; (80034a0 <sampling+0x13a8>)
 8003440:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003444:	4b16      	ldr	r3, [pc, #88]	; (80034a0 <sampling+0x13a8>)
 8003446:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800344a:	4b14      	ldr	r3, [pc, #80]	; (800349c <sampling+0x13a4>)
 800344c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003450:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003454:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003458:	4b11      	ldr	r3, [pc, #68]	; (80034a0 <sampling+0x13a8>)
 800345a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
						filter_accus[11]=(filter_accus[10]*freq_point[6])+(filter_accus[11]*freq_point[7]);   // 30 cyles for 2 poles
 800345e:	4b10      	ldr	r3, [pc, #64]	; (80034a0 <sampling+0x13a8>)
 8003460:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003464:	4b0c      	ldr	r3, [pc, #48]	; (8003498 <sampling+0x13a0>)
 8003466:	edd3 7a06 	vldr	s15, [r3, #24]
 800346a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800346e:	4b0c      	ldr	r3, [pc, #48]	; (80034a0 <sampling+0x13a8>)
 8003470:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8003474:	4b08      	ldr	r3, [pc, #32]	; (8003498 <sampling+0x13a0>)
 8003476:	edd3 7a07 	vldr	s15, [r3, #28]
 800347a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800347e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003482:	4b07      	ldr	r3, [pc, #28]	; (80034a0 <sampling+0x13a8>)
 8003484:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 8003488:	e00c      	b.n	80034a4 <sampling+0x13ac>
 800348a:	bf00      	nop
 800348c:	f3af 8000 	nop.w
 8003490:	9999999a 	.word	0x9999999a
 8003494:	3fc99999 	.word	0x3fc99999
 8003498:	20002524 	.word	0x20002524
 800349c:	200024d4 	.word	0x200024d4
 80034a0:	200024e8 	.word	0x200024e8
						filter_accus[12]=(filter_accus[11]*freq_point[6])+(filter_accus[12]*freq_point[7]);
 80034a4:	4b53      	ldr	r3, [pc, #332]	; (80035f4 <sampling+0x14fc>)
 80034a6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80034aa:	4b53      	ldr	r3, [pc, #332]	; (80035f8 <sampling+0x1500>)
 80034ac:	edd3 7a06 	vldr	s15, [r3, #24]
 80034b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034b4:	4b4f      	ldr	r3, [pc, #316]	; (80035f4 <sampling+0x14fc>)
 80034b6:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80034ba:	4b4f      	ldr	r3, [pc, #316]	; (80035f8 <sampling+0x1500>)
 80034bc:	edd3 7a07 	vldr	s15, [r3, #28]
 80034c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034c8:	4b4a      	ldr	r3, [pc, #296]	; (80035f4 <sampling+0x14fc>)
 80034ca:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
						sample_Accu[3]=filter_accus[12];
 80034ce:	4b49      	ldr	r3, [pc, #292]	; (80035f4 <sampling+0x14fc>)
 80034d0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80034d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034d8:	ee17 3a90 	vmov	r3, s15
 80034dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	//	sample_Accu[0] =filter_accus[5]; // out
	//	filter_accus[11]=filter_accus[5]; //write back new value
		//sample_Accu[0] =sample_Accu[1];


filter_Accu=filter_Accu2=0;
 80034e0:	2300      	movs	r3, #0
 80034e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80034e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80034ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
filter_Accu=(sample_Accu[0]+sample_Accu[1])>>16;
 80034ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80034f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034f6:	4413      	add	r3, r2
 80034f8:	141b      	asrs	r3, r3, #16
 80034fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
filter_Accu2=(sample_Accu[2]+sample_Accu[3])>>16; //filter + drum out
 80034fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003502:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003506:	4413      	add	r3, r2
 8003508:	141b      	asrs	r3, r3, #16
 800350a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

 if (one_shot!=199)   one_shot++;  //play one attack then stop
 800350e:	4b3b      	ldr	r3, [pc, #236]	; (80035fc <sampling+0x1504>)
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2bc7      	cmp	r3, #199	; 0xc7
 8003514:	d005      	beq.n	8003522 <sampling+0x142a>
 8003516:	4b39      	ldr	r3, [pc, #228]	; (80035fc <sampling+0x1504>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	3301      	adds	r3, #1
 800351c:	b2da      	uxtb	r2, r3
 800351e:	4b37      	ldr	r3, [pc, #220]	; (80035fc <sampling+0x1504>)
 8003520:	701a      	strb	r2, [r3, #0]

 //if (filter_Accu>0xFFFF) {filter_Accu=0xFFFF;clipping++;} else if (filter_Accu<-65535) filter_Accu=-65535;  // limiter to 16 bits
 if (filter_Accu>0x3FF) {filter_Accu=0x3FF;clipping++;} else if (filter_Accu<-1023) filter_Accu=-1023;  // limiter to 11 bits
 8003522:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800352a:	db0a      	blt.n	8003542 <sampling+0x144a>
 800352c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003530:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003534:	4b32      	ldr	r3, [pc, #200]	; (8003600 <sampling+0x1508>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	3301      	adds	r3, #1
 800353a:	b2da      	uxtb	r2, r3
 800353c:	4b30      	ldr	r3, [pc, #192]	; (8003600 <sampling+0x1508>)
 800353e:	701a      	strb	r2, [r3, #0]
 8003540:	e007      	b.n	8003552 <sampling+0x145a>
 8003542:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003546:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 800354a:	dc02      	bgt.n	8003552 <sampling+0x145a>
 800354c:	4b2d      	ldr	r3, [pc, #180]	; (8003604 <sampling+0x150c>)
 800354e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 if (filter_Accu2>0x3FF) {filter_Accu2=0x3FF;clipping++;} else if (filter_Accu2<-1023) filter_Accu2=-1023;  // limiter to 11 bits
 8003552:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800355a:	db0a      	blt.n	8003572 <sampling+0x147a>
 800355c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003560:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003564:	4b26      	ldr	r3, [pc, #152]	; (8003600 <sampling+0x1508>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	3301      	adds	r3, #1
 800356a:	b2da      	uxtb	r2, r3
 800356c:	4b24      	ldr	r3, [pc, #144]	; (8003600 <sampling+0x1508>)
 800356e:	701a      	strb	r2, [r3, #0]
 8003570:	e007      	b.n	8003582 <sampling+0x148a>
 8003572:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003576:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 800357a:	dc02      	bgt.n	8003582 <sampling+0x148a>
 800357c:	4b21      	ldr	r3, [pc, #132]	; (8003604 <sampling+0x150c>)
 800357e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128



 play_sample[(i_total<<1)]=(filter_Accu)+1023;   // final output disable for now 2544
 8003582:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003586:	b29a      	uxth	r2, r3
 8003588:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8003592:	b291      	uxth	r1, r2
 8003594:	4a1c      	ldr	r2, [pc, #112]	; (8003608 <sampling+0x1510>)
 8003596:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 play_sample[(i_total<<1)+1]=(filter_Accu2)+1023;
 800359a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800359e:	b29a      	uxth	r2, r3
 80035a0:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	3301      	adds	r3, #1
 80035a8:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80035ac:	b291      	uxth	r1, r2
 80035ae:	4a16      	ldr	r2, [pc, #88]	; (8003608 <sampling+0x1510>)
 80035b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 80035b4:	4b15      	ldr	r3, [pc, #84]	; (800360c <sampling+0x1514>)
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	3301      	adds	r3, #1
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	4b13      	ldr	r3, [pc, #76]	; (800360c <sampling+0x1514>)
 80035be:	801a      	strh	r2, [r3, #0]
 80035c0:	4b12      	ldr	r3, [pc, #72]	; (800360c <sampling+0x1514>)
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035c8:	f4ff acd6 	bcc.w	8002f78 <sampling+0xe80>
} // end of filer


//time_final=time_proc;   // in samples

if (bank_write)   error_count++;  // if bank write is high it means too much stall here
 80035cc:	4b10      	ldr	r3, [pc, #64]	; (8003610 <sampling+0x1518>)
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <sampling+0x14e8>
 80035d4:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <sampling+0x151c>)
 80035d6:	881b      	ldrh	r3, [r3, #0]
 80035d8:	3301      	adds	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	4b0d      	ldr	r3, [pc, #52]	; (8003614 <sampling+0x151c>)
 80035de:	801a      	strh	r2, [r3, #0]
time_final[0]=time_proc;
 80035e0:	4b0d      	ldr	r3, [pc, #52]	; (8003618 <sampling+0x1520>)
 80035e2:	881a      	ldrh	r2, [r3, #0]
 80035e4:	4b0d      	ldr	r3, [pc, #52]	; (800361c <sampling+0x1524>)
 80035e6:	801a      	strh	r2, [r3, #0]


//bank_write=0;   /// total 320 sample time (39khz)
}
 80035e8:	bf00      	nop
 80035ea:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bdb0      	pop	{r4, r5, r7, pc}
 80035f2:	bf00      	nop
 80035f4:	200024e8 	.word	0x200024e8
 80035f8:	20002524 	.word	0x20002524
 80035fc:	200024a8 	.word	0x200024a8
 8003600:	20006970 	.word	0x20006970
 8003604:	fffffc01 	.word	0xfffffc01
 8003608:	20000878 	.word	0x20000878
 800360c:	20000876 	.word	0x20000876
 8003610:	200001ae 	.word	0x200001ae
 8003614:	2000341a 	.word	0x2000341a
 8003618:	20003418 	.word	0x20003418
 800361c:	20003414 	.word	0x20003414

08003620 <sine_count>:
mask_result=mask_tempB &1;


}

int32_t sine_count(void) {      // sine_out is the output 9  bit  , works
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
	uint8_t sine_zero;
	int32_t sine_tempA;
	int32_t sine_tempB;
	uint16_t sine_tuned=sine_counter[ 2 ];
 8003626:	4b30      	ldr	r3, [pc, #192]	; (80036e8 <sine_count+0xc8>)
 8003628:	889b      	ldrh	r3, [r3, #4]
 800362a:	81fb      	strh	r3, [r7, #14]
	uint16_t sine_counter_temp=sine_counter[ 0 ];
 800362c:	4b2e      	ldr	r3, [pc, #184]	; (80036e8 <sine_count+0xc8>)
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	81bb      	strh	r3, [r7, #12]
	uint16_t sine_counterB_temp=sine_counter[ 1];
 8003632:	4b2d      	ldr	r3, [pc, #180]	; (80036e8 <sine_count+0xc8>)
 8003634:	885b      	ldrh	r3, [r3, #2]
 8003636:	817b      	strh	r3, [r7, #10]

	if (sine_counterB_temp==0) 	sine_tuned=note[9].tuned;
 8003638:	897b      	ldrh	r3, [r7, #10]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d103      	bne.n	8003646 <sine_count+0x26>
 800363e:	4b2b      	ldr	r3, [pc, #172]	; (80036ec <sine_count+0xcc>)
 8003640:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8003644:	81fb      	strh	r3, [r7, #14]

			sine_counterB_temp=sine_counterB_temp+sine_tuned ;  // sine up counter per cycle , however sine adder needs to wait
 8003646:	897a      	ldrh	r2, [r7, #10]
 8003648:	89fb      	ldrh	r3, [r7, #14]
 800364a:	4413      	add	r3, r2
 800364c:	817b      	strh	r3, [r7, #10]
			if (sine_counterB_temp>>7) sine_zero=0; else sine_zero=1;
 800364e:	897b      	ldrh	r3, [r7, #10]
 8003650:	09db      	lsrs	r3, r3, #7
 8003652:	b29b      	uxth	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <sine_count+0x3e>
 8003658:	2300      	movs	r3, #0
 800365a:	727b      	strb	r3, [r7, #9]
 800365c:	e001      	b.n	8003662 <sine_count+0x42>
 800365e:	2301      	movs	r3, #1
 8003660:	727b      	strb	r3, [r7, #9]

		if (sine_counterB_temp>(sine_length<<5)) sine_counterB_temp=0; //fixed for now, last is 19200 then
 8003662:	897a      	ldrh	r2, [r7, #10]
 8003664:	4b22      	ldr	r3, [pc, #136]	; (80036f0 <sine_count+0xd0>)
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	015b      	lsls	r3, r3, #5
 800366a:	429a      	cmp	r2, r3
 800366c:	dd01      	ble.n	8003672 <sine_count+0x52>
 800366e:	2300      	movs	r3, #0
 8003670:	817b      	strh	r3, [r7, #10]
////////////////////////////////////////////
	sine_counter_temp=(sine_counterB_temp>>5);  // up countr controlled by counter
 8003672:	897b      	ldrh	r3, [r7, #10]
 8003674:	095b      	lsrs	r3, r3, #5
 8003676:	81bb      	strh	r3, [r7, #12]
		if (sine_counter_temp>sine_length) sine_counter_temp = sine_length;		// seems to be faster than using a for loop to calculate both values
 8003678:	4b1d      	ldr	r3, [pc, #116]	; (80036f0 <sine_count+0xd0>)
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	89ba      	ldrh	r2, [r7, #12]
 800367e:	429a      	cmp	r2, r3
 8003680:	d902      	bls.n	8003688 <sine_count+0x68>
 8003682:	4b1b      	ldr	r3, [pc, #108]	; (80036f0 <sine_count+0xd0>)
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	81bb      	strh	r3, [r7, #12]
		sine_tempA = sine_block[ sine_counter_temp];  // 0- 40000
 8003688:	89bb      	ldrh	r3, [r7, #12]
 800368a:	4a1a      	ldr	r2, [pc, #104]	; (80036f4 <sine_count+0xd4>)
 800368c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003690:	607b      	str	r3, [r7, #4]
	//	sine_tempA=sine_out; // grab first value , needs to be always plus
		sine_tempA=sine_tempA-20000; //convert to signed
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 8003698:	3b20      	subs	r3, #32
 800369a:	607b      	str	r3, [r7, #4]

		sine_counter_temp++;
 800369c:	89bb      	ldrh	r3, [r7, #12]
 800369e:	3301      	adds	r3, #1
 80036a0:	81bb      	strh	r3, [r7, #12]
		if (sine_counter_temp>=sine_length)  sine_counter_temp=0; // limit sin_counter to sample size  set to sample length
 80036a2:	4b13      	ldr	r3, [pc, #76]	; (80036f0 <sine_count+0xd0>)
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	89ba      	ldrh	r2, [r7, #12]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d301      	bcc.n	80036b0 <sine_count+0x90>
 80036ac:	2300      	movs	r3, #0
 80036ae:	81bb      	strh	r3, [r7, #12]
				sine_tempB=sine_block[sine_counter_temp]-20000;  // convert to signed and +256 to -256
 80036b0:	89bb      	ldrh	r3, [r7, #12]
 80036b2:	4a10      	ldr	r2, [pc, #64]	; (80036f4 <sine_count+0xd4>)
 80036b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036b8:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 80036bc:	3b20      	subs	r3, #32
 80036be:	603b      	str	r3, [r7, #0]
				sine_tempB=	((sine_tempB-sine_tempA)>>5)*(sine_counterB_temp & 31);   // calculate fraction then add
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	115b      	asrs	r3, r3, #5
 80036c8:	897a      	ldrh	r2, [r7, #10]
 80036ca:	f002 021f 	and.w	r2, r2, #31
 80036ce:	fb02 f303 	mul.w	r3, r2, r3
 80036d2:	603b      	str	r3, [r7, #0]
				return  (sine_tempA+sine_tempB)<<4;   // add back to start value -20k-20k  or about 16bit
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	4413      	add	r3, r2
 80036da:	011b      	lsls	r3, r3, #4
				 sine_counter[0]=sine_counter_temp;
				 sine_counter[1]=sine_counterB_temp;
				 sine_counter[2]=sine_tuned;
	}
 80036dc:	4618      	mov	r0, r3
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	20000854 	.word	0x20000854
 80036ec:	200001b8 	.word	0x200001b8
 80036f0:	20000142 	.word	0x20000142
 80036f4:	0800bd08 	.word	0x0800bd08

080036f8 <LFO_source>:


void LFO_source(void){     // lfo
 80036f8:	b590      	push	{r4, r7, lr}
 80036fa:	b08b      	sub	sp, #44	; 0x2c
 80036fc:	af00      	add	r7, sp, #0


float	freq_temp=0;
 80036fe:	f04f 0300 	mov.w	r3, #0
 8003702:	613b      	str	r3, [r7, #16]
float 	freq2_temp=0;
 8003704:	f04f 0300 	mov.w	r3, #0
 8003708:	627b      	str	r3, [r7, #36]	; 0x24
uint32_t 	freq_saw=0;
 800370a:	2300      	movs	r3, #0
 800370c:	623b      	str	r3, [r7, #32]
uint8_t lfo_c ;
float offset=0;
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	60fb      	str	r3, [r7, #12]
	uint32_t freq3_temp;
	uint32_t freq4_temp;
	int16_t  output_hold;
	int32_t freq_tri;

	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 8003714:	2300      	movs	r3, #0
 8003716:	77fb      	strb	r3, [r7, #31]
 8003718:	e140      	b.n	800399c <LFO_source+0x2a4>



	lfo_accu_temp=	lfo_accu[lfo_c][sampling_position_b];  // hold
 800371a:	7ffa      	ldrb	r2, [r7, #31]
 800371c:	4ba6      	ldr	r3, [pc, #664]	; (80039b8 <LFO_source+0x2c0>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	49a6      	ldr	r1, [pc, #664]	; (80039bc <LFO_source+0x2c4>)
 8003724:	4613      	mov	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	4403      	add	r3, r0
 800372e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003732:	61bb      	str	r3, [r7, #24]

	freq3_temp=lfo_tempo_lut[LFO[lfo_c].rate] ;  // rate. this needs a little log
 8003734:	7ffa      	ldrb	r2, [r7, #31]
 8003736:	49a2      	ldr	r1, [pc, #648]	; (80039c0 <LFO_source+0x2c8>)
 8003738:	4613      	mov	r3, r2
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	4413      	add	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	461a      	mov	r2, r3
 8003746:	4b9f      	ldr	r3, [pc, #636]	; (80039c4 <LFO_source+0x2cc>)
 8003748:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800374c:	60bb      	str	r3, [r7, #8]
		//freq4_temp=freq3_temp*freq3_temp;  // multiply  , dont more then 8000 really


			freq3_temp=lfo_accu_temp+ freq3_temp;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	4413      	add	r3, r2
 8003754:	60bb      	str	r3, [r7, #8]


///  counts from -16k to +16 k   @ + 0.03125      to   +400    *10    or 13 ms *8 (10 hz ? fastest  )
		if (freq3_temp>62831) lfo_accu_temp=0; else lfo_accu_temp=freq3_temp; // write back value  counts -16000 to +16000
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	f24f 526f 	movw	r2, #62831	; 0xf56f
 800375c:	4293      	cmp	r3, r2
 800375e:	d902      	bls.n	8003766 <LFO_source+0x6e>
 8003760:	2300      	movs	r3, #0
 8003762:	61bb      	str	r3, [r7, #24]
 8003764:	e001      	b.n	800376a <LFO_source+0x72>
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	61bb      	str	r3, [r7, #24]
		if(!seq.pos)  lfo_accu_temp=0;   // tempo sync, mediocre
 800376a:	4b97      	ldr	r3, [pc, #604]	; (80039c8 <LFO_source+0x2d0>)
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <LFO_source+0x7e>
 8003772:	2300      	movs	r3, #0
 8003774:	61bb      	str	r3, [r7, #24]
		lfo_accu[lfo_c][sampling_position]=lfo_accu_temp;
 8003776:	7ffa      	ldrb	r2, [r7, #31]
 8003778:	4b94      	ldr	r3, [pc, #592]	; (80039cc <LFO_source+0x2d4>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	498f      	ldr	r1, [pc, #572]	; (80039bc <LFO_source+0x2c4>)
 8003780:	4613      	mov	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	4403      	add	r3, r0
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		freq_temp=lfo_accu_temp;
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	ee07 3a90 	vmov	s15, r3
 8003796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800379a:	edc7 7a04 	vstr	s15, [r7, #16]
		freq2_temp=(freq_temp*0.0001);  //0-360
 800379e:	6938      	ldr	r0, [r7, #16]
 80037a0:	f7fc ffb0 	bl	8000704 <__aeabi_f2d>
 80037a4:	a382      	add	r3, pc, #520	; (adr r3, 80039b0 <LFO_source+0x2b8>)
 80037a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037aa:	f7fc fd1d 	bl	80001e8 <__aeabi_dmul>
 80037ae:	4602      	mov	r2, r0
 80037b0:	460b      	mov	r3, r1
 80037b2:	4610      	mov	r0, r2
 80037b4:	4619      	mov	r1, r3
 80037b6:	f7fc fffd 	bl	80007b4 <__aeabi_d2f>
 80037ba:	4603      	mov	r3, r0
 80037bc:	627b      	str	r3, [r7, #36]	; 0x24

		freq_temp =arm_sin_f32(freq2_temp); // seems ok   , cmsis is ok  RADIANS !!!!!
 80037be:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80037c2:	f007 fc07 	bl	800afd4 <arm_sin_f32>
 80037c6:	ed87 0a04 	vstr	s0, [r7, #16]
		freq2_temp=freq_temp*LFO[lfo_c].depth*204;
 80037ca:	7ffa      	ldrb	r2, [r7, #31]
 80037cc:	497c      	ldr	r1, [pc, #496]	; (80039c0 <LFO_source+0x2c8>)
 80037ce:	4613      	mov	r3, r2
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	4413      	add	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	3301      	adds	r3, #1
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	ee07 3a90 	vmov	s15, r3
 80037e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80037e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ec:	ed9f 7a78 	vldr	s14, [pc, #480]	; 80039d0 <LFO_source+0x2d8>
 80037f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037f4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		if (!LFO[lfo_c].offset)    LFO[lfo_c].offset=0;   // se
 80037f8:	7ffa      	ldrb	r2, [r7, #31]
 80037fa:	4971      	ldr	r1, [pc, #452]	; (80039c0 <LFO_source+0x2c8>)
 80037fc:	4613      	mov	r3, r2
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	4413      	add	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	3303      	adds	r3, #3
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d109      	bne.n	8003822 <LFO_source+0x12a>
 800380e:	7ffa      	ldrb	r2, [r7, #31]
 8003810:	496b      	ldr	r1, [pc, #428]	; (80039c0 <LFO_source+0x2c8>)
 8003812:	4613      	mov	r3, r2
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	4413      	add	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	3303      	adds	r3, #3
 800381e:	2200      	movs	r2, #0
 8003820:	701a      	strb	r2, [r3, #0]
 		offset=(LFO[lfo_c].offset<<8); //  limit now for finetuning
 8003822:	7ffa      	ldrb	r2, [r7, #31]
 8003824:	4966      	ldr	r1, [pc, #408]	; (80039c0 <LFO_source+0x2c8>)
 8003826:	4613      	mov	r3, r2
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	4413      	add	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	440b      	add	r3, r1
 8003830:	3303      	adds	r3, #3
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	021b      	lsls	r3, r3, #8
 8003836:	ee07 3a90 	vmov	s15, r3
 800383a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800383e:	edc7 7a03 	vstr	s15, [r7, #12]
			freq2_temp=(freq2_temp+offset);
 8003842:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003846:	edd7 7a03 	vldr	s15, [r7, #12]
 800384a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800384e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		if (freq2_temp>32767)  freq2_temp=32767;
 8003852:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003856:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80039d4 <LFO_source+0x2dc>
 800385a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800385e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003862:	dd01      	ble.n	8003868 <LFO_source+0x170>
 8003864:	4b5c      	ldr	r3, [pc, #368]	; (80039d8 <LFO_source+0x2e0>)
 8003866:	627b      	str	r3, [r7, #36]	; 0x24
		if (freq2_temp<-32767) {  freq2_temp=-32767; }  // clip to 13bit -/+ 8000
 8003868:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800386c:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80039dc <LFO_source+0x2e4>
 8003870:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003878:	d501      	bpl.n	800387e <LFO_source+0x186>
 800387a:	4b59      	ldr	r3, [pc, #356]	; (80039e0 <LFO_source+0x2e8>)
 800387c:	627b      	str	r3, [r7, #36]	; 0x24

						output_hold=freq2_temp;
 800387e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003882:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003886:	ee17 3a90 	vmov	r3, s15
 800388a:	80fb      	strh	r3, [r7, #6]
						if(lfo_accu_temp<32768)   freq_tri=lfo_accu_temp; else freq_tri=65535-lfo_accu_temp;    // 0-32767
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003892:	d202      	bcs.n	800389a <LFO_source+0x1a2>
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	e004      	b.n	80038a4 <LFO_source+0x1ac>
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80038a0:	33ff      	adds	r3, #255	; 0xff
 80038a2:	617b      	str	r3, [r7, #20]
					freq_saw=((lfo_accu_temp*LFO[lfo_c].depth)>>8)+offset;
 80038a4:	7ffa      	ldrb	r2, [r7, #31]
 80038a6:	4946      	ldr	r1, [pc, #280]	; (80039c0 <LFO_source+0x2c8>)
 80038a8:	4613      	mov	r3, r2
 80038aa:	011b      	lsls	r3, r3, #4
 80038ac:	4413      	add	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	3301      	adds	r3, #1
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	461a      	mov	r2, r3
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	fb02 f303 	mul.w	r3, r2, r3
 80038be:	0a1b      	lsrs	r3, r3, #8
 80038c0:	ee07 3a90 	vmov	s15, r3
 80038c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80038cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038d4:	ee17 3a90 	vmov	r3, s15
 80038d8:	623b      	str	r3, [r7, #32]
					if (freq_saw>65535)  freq_saw=65535;   // clip
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038e0:	d302      	bcc.n	80038e8 <LFO_source+0x1f0>
 80038e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038e6:	623b      	str	r3, [r7, #32]

					LFO[lfo_c].out[sampling_position]=output_hold+32767;
 80038e8:	88fb      	ldrh	r3, [r7, #6]
 80038ea:	7ffa      	ldrb	r2, [r7, #31]
 80038ec:	4937      	ldr	r1, [pc, #220]	; (80039cc <LFO_source+0x2d4>)
 80038ee:	7809      	ldrb	r1, [r1, #0]
 80038f0:	460c      	mov	r4, r1
 80038f2:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80038f6:	337f      	adds	r3, #127	; 0x7f
 80038f8:	b298      	uxth	r0, r3
 80038fa:	4931      	ldr	r1, [pc, #196]	; (80039c0 <LFO_source+0x2c8>)
 80038fc:	4613      	mov	r3, r2
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	4413      	add	r3, r2
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	4423      	add	r3, r4
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	440b      	add	r3, r1
 800390a:	4602      	mov	r2, r0
 800390c:	80da      	strh	r2, [r3, #6]
				   LFO[lfo_c].out_saw[sampling_position]=freq_saw;
 800390e:	7ffa      	ldrb	r2, [r7, #31]
 8003910:	4b2e      	ldr	r3, [pc, #184]	; (80039cc <LFO_source+0x2d4>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	461c      	mov	r4, r3
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	b298      	uxth	r0, r3
 800391a:	4929      	ldr	r1, [pc, #164]	; (80039c0 <LFO_source+0x2c8>)
 800391c:	4613      	mov	r3, r2
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	4413      	add	r3, r2
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	4423      	add	r3, r4
 8003926:	330c      	adds	r3, #12
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	440b      	add	r3, r1
 800392c:	4602      	mov	r2, r0
 800392e:	805a      	strh	r2, [r3, #2]

				   freq_tri=((freq_tri*LFO[lfo_c].depth)>>7)+offset;
 8003930:	7ffa      	ldrb	r2, [r7, #31]
 8003932:	4923      	ldr	r1, [pc, #140]	; (80039c0 <LFO_source+0x2c8>)
 8003934:	4613      	mov	r3, r2
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	4413      	add	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	3301      	adds	r3, #1
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	461a      	mov	r2, r3
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	fb02 f303 	mul.w	r3, r2, r3
 800394a:	11db      	asrs	r3, r3, #7
 800394c:	ee07 3a90 	vmov	s15, r3
 8003950:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003954:	edd7 7a03 	vldr	s15, [r7, #12]
 8003958:	ee77 7a27 	vadd.f32	s15, s14, s15
 800395c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003960:	ee17 3a90 	vmov	r3, s15
 8003964:	617b      	str	r3, [r7, #20]
				   if (freq_tri>65535)  freq_tri=65535;   // clip
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800396c:	db02      	blt.n	8003974 <LFO_source+0x27c>
 800396e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003972:	617b      	str	r3, [r7, #20]
				  LFO[lfo_c].out_tri[sampling_position]=freq_tri;
 8003974:	7ffa      	ldrb	r2, [r7, #31]
 8003976:	4b15      	ldr	r3, [pc, #84]	; (80039cc <LFO_source+0x2d4>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	461c      	mov	r4, r3
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	b298      	uxth	r0, r3
 8003980:	490f      	ldr	r1, [pc, #60]	; (80039c0 <LFO_source+0x2c8>)
 8003982:	4613      	mov	r3, r2
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	4413      	add	r3, r2
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	4423      	add	r3, r4
 800398c:	3314      	adds	r3, #20
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	440b      	add	r3, r1
 8003992:	4602      	mov	r2, r0
 8003994:	80da      	strh	r2, [r3, #6]
	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 8003996:	7ffb      	ldrb	r3, [r7, #31]
 8003998:	3301      	adds	r3, #1
 800399a:	77fb      	strb	r3, [r7, #31]
 800399c:	7ffb      	ldrb	r3, [r7, #31]
 800399e:	2b09      	cmp	r3, #9
 80039a0:	f67f aebb 	bls.w	800371a <LFO_source+0x22>

		} // lfo gen : 0=f1 , 1=tempo,2=pitch



	}
 80039a4:	bf00      	nop
 80039a6:	bf00      	nop
 80039a8:	372c      	adds	r7, #44	; 0x2c
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd90      	pop	{r4, r7, pc}
 80039ae:	bf00      	nop
 80039b0:	eb1c432d 	.word	0xeb1c432d
 80039b4:	3f1a36e2 	.word	0x3f1a36e2
 80039b8:	2000496d 	.word	0x2000496d
 80039bc:	200025d8 	.word	0x200025d8
 80039c0:	2000341c 	.word	0x2000341c
 80039c4:	20002968 	.word	0x20002968
 80039c8:	2000418c 	.word	0x2000418c
 80039cc:	2000496c 	.word	0x2000496c
 80039d0:	434c0000 	.word	0x434c0000
 80039d4:	46fffe00 	.word	0x46fffe00
 80039d8:	46fffe00 	.word	0x46fffe00
 80039dc:	c6fffe00 	.word	0xc6fffe00
 80039e0:	c6fffe00 	.word	0xc6fffe00

080039e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039e4:	b5b0      	push	{r4, r5, r7, lr}
 80039e6:	b0a4      	sub	sp, #144	; 0x90
 80039e8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039ea:	f001 fd05 	bl	80053f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039ee:	f000 fddf 	bl	80045b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039f2:	f001 f915 	bl	8004c20 <MX_GPIO_Init>
  MX_DMA_Init();
 80039f6:	f001 f8f3 	bl	8004be0 <MX_DMA_Init>
  MX_ADC1_Init();
 80039fa:	f000 fe43 	bl	8004684 <MX_ADC1_Init>
  MX_SPI2_Init();
 80039fe:	f000 ff3b 	bl	8004878 <MX_SPI2_Init>
  MX_TIM3_Init();
 8003a02:	f000 ffc3 	bl	800498c <MX_TIM3_Init>
  MX_TIM4_Init();
 8003a06:	f001 f843 	bl	8004a90 <MX_TIM4_Init>
  MX_I2C2_Init();
 8003a0a:	f000 fed1 	bl	80047b0 <MX_I2C2_Init>
  MX_TIM2_Init();
 8003a0e:	f000 ff69 	bl	80048e4 <MX_TIM2_Init>
  MX_SPI1_Init();
 8003a12:	f000 fefb 	bl	800480c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8003a16:	f001 f88f 	bl	8004b38 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8003a1a:	f001 f8b7 	bl	8004b8c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  const volatile uint8_t *userConfig=(const volatile uint8_t *)0x0800D2F0;
 8003a1e:	4ba5      	ldr	r3, [pc, #660]	; (8003cb4 <main+0x2d0>)
 8003a20:	677b      	str	r3, [r7, #116]	; 0x74



//LL_SPI_Enable(SPI2);

  HAL_SPI_Init(&hspi2); // write to register hspi2
 8003a22:	48a5      	ldr	r0, [pc, #660]	; (8003cb8 <main+0x2d4>)
 8003a24:	f005 f8a0 	bl	8008b68 <HAL_SPI_Init>
  HAL_SPI_Init(&hspi1); // write to register hspi2
 8003a28:	48a4      	ldr	r0, [pc, #656]	; (8003cbc <main+0x2d8>)
 8003a2a:	f005 f89d 	bl	8008b68 <HAL_SPI_Init>
  // lcd_init(); // keep this late or have issues
//HAL_TIM_Base_Start_IT(&htim1);  // This needs to work for irq   ,disbling tim1 made loop a lot faster
//TIM1->CCER=0;
HAL_TIM_Base_Start_IT(&htim3);  // This needs to work for irq
 8003a2e:	48a4      	ldr	r0, [pc, #656]	; (8003cc0 <main+0x2dc>)
 8003a30:	f005 feec 	bl	800980c <HAL_TIM_Base_Start_IT>
TIM3->CCER=0;
 8003a34:	4ba3      	ldr	r3, [pc, #652]	; (8003cc4 <main+0x2e0>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	621a      	str	r2, [r3, #32]
HAL_TIM_Base_Start(&htim2);
 8003a3a:	48a3      	ldr	r0, [pc, #652]	; (8003cc8 <main+0x2e4>)
 8003a3c:	f005 fe8c 	bl	8009758 <HAL_TIM_Base_Start>
HAL_TIM_Base_Start(&htim4);
 8003a40:	48a2      	ldr	r0, [pc, #648]	; (8003ccc <main+0x2e8>)
 8003a42:	f005 fe89 	bl	8009758 <HAL_TIM_Base_Start>
//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  // they both work fine together
HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8003a46:	2100      	movs	r1, #0
 8003a48:	489d      	ldr	r0, [pc, #628]	; (8003cc0 <main+0x2dc>)
 8003a4a:	f005 ff9b 	bl	8009984 <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8003a4e:	2104      	movs	r1, #4
 8003a50:	489b      	ldr	r0, [pc, #620]	; (8003cc0 <main+0x2dc>)
 8003a52:	f005 ff97 	bl	8009984 <HAL_TIM_PWM_Start>
//HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,pData, 63);
TIM2->CNT=32000;
 8003a56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a5a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8003a5e:	625a      	str	r2, [r3, #36]	; 0x24
HAL_ADC_Start(&hadc1);
 8003a60:	489b      	ldr	r0, [pc, #620]	; (8003cd0 <main+0x2ec>)
 8003a62:	f001 fda3 	bl	80055ac <HAL_ADC_Start>
HAL_ADC_Start_DMA(&hadc1, adc_source, 1024); //dma start ,needs this and adc start ,set sampling time to very long or it will fail
 8003a66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a6a:	499a      	ldr	r1, [pc, #616]	; (8003cd4 <main+0x2f0>)
 8003a6c:	4898      	ldr	r0, [pc, #608]	; (8003cd0 <main+0x2ec>)
 8003a6e:	f001 fedd 	bl	800582c <HAL_ADC_Start_DMA>
//HAL_DMA_Init(&hdma_spi2_tx);

HAL_I2C_MspInit(&hi2c2);
 8003a72:	4899      	ldr	r0, [pc, #612]	; (8003cd8 <main+0x2f4>)
 8003a74:	f001 fa0e 	bl	8004e94 <HAL_I2C_MspInit>
uint8_t send_spi1[5]={0x90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,};
 8003a78:	4a98      	ldr	r2, [pc, #608]	; (8003cdc <main+0x2f8>)
 8003a7a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003a7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a82:	6018      	str	r0, [r3, #0]
 8003a84:	3304      	adds	r3, #4
 8003a86:	7019      	strb	r1, [r3, #0]
HAL_SPI_Receive(&hspi1, return_spi1, 2, 1000);   // manuf return sif correct , 0xEF,0x17 which is correct, then repeats when more request

*/


HAL_Delay(5);
 8003a88:	2005      	movs	r0, #5
 8003a8a:	f001 fd27 	bl	80054dc <HAL_Delay>


send_spi1[0]=0x06; //enable write  , only lasts for single operation
 8003a8e:	2306      	movs	r3, #6
 8003a90:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8003a94:	2200      	movs	r2, #0
 8003a96:	2110      	movs	r1, #16
 8003a98:	4891      	ldr	r0, [pc, #580]	; (8003ce0 <main+0x2fc>)
 8003a9a:	f003 fc33 	bl	8007304 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8003a9e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	4884      	ldr	r0, [pc, #528]	; (8003cbc <main+0x2d8>)
 8003aaa:	f005 f8e6 	bl	8008c7a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8003aae:	2201      	movs	r2, #1
 8003ab0:	2110      	movs	r1, #16
 8003ab2:	488b      	ldr	r0, [pc, #556]	; (8003ce0 <main+0x2fc>)
 8003ab4:	f003 fc26 	bl	8007304 <HAL_GPIO_WritePin>
HAL_Delay(5);
 8003ab8:	2005      	movs	r0, #5
 8003aba:	f001 fd0f 	bl	80054dc <HAL_Delay>
send_spi1[0]=0x20; //sector erase
 8003abe:	2320      	movs	r3, #32
 8003ac0:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
send_spi1[1]=0; //24bit address msb
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
send_spi1[2]=0; //24bit address
 8003aca:	2300      	movs	r3, #0
 8003acc:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
send_spi1[3]=1; //24bit address lsb
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);         // enable for sector erase   , stays empty when enabled
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	2110      	movs	r1, #16
 8003ada:	4881      	ldr	r0, [pc, #516]	; (8003ce0 <main+0x2fc>)
 8003adc:	f003 fc12 	bl	8007304 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 4, 1000);   //erase sector ,works
 8003ae0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003ae4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ae8:	2204      	movs	r2, #4
 8003aea:	4874      	ldr	r0, [pc, #464]	; (8003cbc <main+0x2d8>)
 8003aec:	f005 f8c5 	bl	8008c7a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8003af0:	2201      	movs	r2, #1
 8003af2:	2110      	movs	r1, #16
 8003af4:	487a      	ldr	r0, [pc, #488]	; (8003ce0 <main+0x2fc>)
 8003af6:	f003 fc05 	bl	8007304 <HAL_GPIO_WritePin>


send_spi1[0]=0x05; //read status register  if writing
 8003afa:	2305      	movs	r3, #5
 8003afc:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
send_spi1[1]=0; //24bit address msb
 8003b00:	2300      	movs	r3, #0
 8003b02:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
status_reg[1]=1; // set busy on
 8003b06:	4b77      	ldr	r3, [pc, #476]	; (8003ce4 <main+0x300>)
 8003b08:	2201      	movs	r2, #1
 8003b0a:	705a      	strb	r2, [r3, #1]

while (status_reg[1]&1){								// check if write busy
 8003b0c:	e012      	b.n	8003b34 <main+0x150>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8003b0e:	2200      	movs	r2, #0
 8003b10:	2110      	movs	r1, #16
 8003b12:	4873      	ldr	r0, [pc, #460]	; (8003ce0 <main+0x2fc>)
 8003b14:	f003 fbf6 	bl	8007304 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, send_spi1, status_reg,2, 200);
 8003b18:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003b1c:	23c8      	movs	r3, #200	; 0xc8
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	2302      	movs	r3, #2
 8003b22:	4a70      	ldr	r2, [pc, #448]	; (8003ce4 <main+0x300>)
 8003b24:	4865      	ldr	r0, [pc, #404]	; (8003cbc <main+0x2d8>)
 8003b26:	f005 faf5 	bl	8009114 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	2110      	movs	r1, #16
 8003b2e:	486c      	ldr	r0, [pc, #432]	; (8003ce0 <main+0x2fc>)
 8003b30:	f003 fbe8 	bl	8007304 <HAL_GPIO_WritePin>
while (status_reg[1]&1){								// check if write busy
 8003b34:	4b6b      	ldr	r3, [pc, #428]	; (8003ce4 <main+0x300>)
 8003b36:	785b      	ldrb	r3, [r3, #1]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1e6      	bne.n	8003b0e <main+0x12a>
}

send_spi1[0]=0x06; //enable write again
 8003b40:	2306      	movs	r3, #6
 8003b42:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8003b46:	2200      	movs	r2, #0
 8003b48:	2110      	movs	r1, #16
 8003b4a:	4865      	ldr	r0, [pc, #404]	; (8003ce0 <main+0x2fc>)
 8003b4c:	f003 fbda 	bl	8007304 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8003b50:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003b54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b58:	2201      	movs	r2, #1
 8003b5a:	4858      	ldr	r0, [pc, #352]	; (8003cbc <main+0x2d8>)
 8003b5c:	f005 f88d 	bl	8008c7a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8003b60:	2201      	movs	r2, #1
 8003b62:	2110      	movs	r1, #16
 8003b64:	485e      	ldr	r0, [pc, #376]	; (8003ce0 <main+0x2fc>)
 8003b66:	f003 fbcd 	bl	8007304 <HAL_GPIO_WritePin>
HAL_Delay(5);
 8003b6a:	2005      	movs	r0, #5
 8003b6c:	f001 fcb6 	bl	80054dc <HAL_Delay>




//uint8_t temp_spi1[]={0x02,0,0,1,"H","E","L","L","O"," ","W","O","R","L","D",250,0,0} ; //page progrram ,24bit(address)  +1-255 byte data  (page)
uint8_t temp_spi1[]={0x02,0,0,1,128,129,130,131,132,133,134,135,136,137,138,250,0,0} ; //page progrram ,24bit(address)  +1-255 byte data  (page)
 8003b70:	4b5d      	ldr	r3, [pc, #372]	; (8003ce8 <main+0x304>)
 8003b72:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8003b76:	461d      	mov	r5, r3
 8003b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b7c:	682b      	ldr	r3, [r5, #0]
 8003b7e:	8023      	strh	r3, [r4, #0]
memcpy  (send_spi1,temp_spi1, 14);   // copy new array over old
 8003b80:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003b84:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003b88:	220e      	movs	r2, #14
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f007 fa94 	bl	800b0b8 <memcpy>

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8003b90:	2200      	movs	r2, #0
 8003b92:	2110      	movs	r1, #16
 8003b94:	4852      	ldr	r0, [pc, #328]	; (8003ce0 <main+0x2fc>)
 8003b96:	f003 fbb5 	bl	8007304 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 14, 1000);  //address,page program
 8003b9a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003b9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ba2:	220e      	movs	r2, #14
 8003ba4:	4845      	ldr	r0, [pc, #276]	; (8003cbc <main+0x2d8>)
 8003ba6:	f005 f868 	bl	8008c7a <HAL_SPI_Transmit>

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8003baa:	2201      	movs	r2, #1
 8003bac:	2110      	movs	r1, #16
 8003bae:	484c      	ldr	r0, [pc, #304]	; (8003ce0 <main+0x2fc>)
 8003bb0:	f003 fba8 	bl	8007304 <HAL_GPIO_WritePin>




HAL_Delay(25);
 8003bb4:	2019      	movs	r0, #25
 8003bb6:	f001 fc91 	bl	80054dc <HAL_Delay>
send_spi1[0]=0x04; //disable write
 8003bba:	2304      	movs	r3, #4
 8003bbc:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	2110      	movs	r1, #16
 8003bc4:	4846      	ldr	r0, [pc, #280]	; (8003ce0 <main+0x2fc>)
 8003bc6:	f003 fb9d 	bl	8007304 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8003bca:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	4839      	ldr	r0, [pc, #228]	; (8003cbc <main+0x2d8>)
 8003bd6:	f005 f850 	bl	8008c7a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8003bda:	2201      	movs	r2, #1
 8003bdc:	2110      	movs	r1, #16
 8003bde:	4840      	ldr	r0, [pc, #256]	; (8003ce0 <main+0x2fc>)
 8003be0:	f003 fb90 	bl	8007304 <HAL_GPIO_WritePin>

HAL_Delay(5);
 8003be4:	2005      	movs	r0, #5
 8003be6:	f001 fc79 	bl	80054dc <HAL_Delay>
memcpy  (send_spi1,return_spi1, 14);   // clear out
 8003bea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003bee:	220e      	movs	r2, #14
 8003bf0:	493e      	ldr	r1, [pc, #248]	; (8003cec <main+0x308>)
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f007 fa60 	bl	800b0b8 <memcpy>
send_spi1[0]=0x03; //read page 1
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
send_spi1[1]=0; //24bit address msb
 8003bfe:	2300      	movs	r3, #0
 8003c00:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
send_spi1[2]=0; //24bit address
 8003c04:	2300      	movs	r3, #0
 8003c06:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
send_spi1[3]=1; //24bit address lsb
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // when readin low till the end
 8003c10:	2200      	movs	r2, #0
 8003c12:	2110      	movs	r1, #16
 8003c14:	4832      	ldr	r0, [pc, #200]	; (8003ce0 <main+0x2fc>)
 8003c16:	f003 fb75 	bl	8007304 <HAL_GPIO_WritePin>

HAL_SPI_Transmit (&hspi1, send_spi1, 4, 100);
 8003c1a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003c1e:	2364      	movs	r3, #100	; 0x64
 8003c20:	2204      	movs	r2, #4
 8003c22:	4826      	ldr	r0, [pc, #152]	; (8003cbc <main+0x2d8>)
 8003c24:	f005 f829 	bl	8008c7a <HAL_SPI_Transmit>
HAL_SPI_Receive (&hspi1, return_spi1, 10, 100);   // works fine
 8003c28:	2364      	movs	r3, #100	; 0x64
 8003c2a:	220a      	movs	r2, #10
 8003c2c:	492f      	ldr	r1, [pc, #188]	; (8003cec <main+0x308>)
 8003c2e:	4823      	ldr	r0, [pc, #140]	; (8003cbc <main+0x2d8>)
 8003c30:	f005 f95f 	bl	8008ef2 <HAL_SPI_Receive>

//HAL_SPI_TransmitReceive(&hspi1, send_spi1, return_spi1,14, 100);  // better in case skip , 4 bytes is null then data , slow
//HAL_Delay(5);

//HAL_SPI_Receive(&hspi1, return_spi1, 12, 1000);  // reverse msb ?
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8003c34:	2201      	movs	r2, #1
 8003c36:	2110      	movs	r1, #16
 8003c38:	4829      	ldr	r0, [pc, #164]	; (8003ce0 <main+0x2fc>)
 8003c3a:	f003 fb63 	bl	8007304 <HAL_GPIO_WritePin>



HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8003c3e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c46:	2201      	movs	r2, #1
 8003c48:	481c      	ldr	r0, [pc, #112]	; (8003cbc <main+0x2d8>)
 8003c4a:	f005 f816 	bl	8008c7a <HAL_SPI_Transmit>


uint8_t potSource2[64]={0};    // { [0 ... 112] = 64 };
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	f107 0310 	add.w	r3, r7, #16
 8003c56:	223c      	movs	r2, #60	; 0x3c
 8003c58:	2100      	movs	r1, #0
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f007 fa3a 	bl	800b0d4 <memset>
uint16_t mem_count2=0;
 8003c60:	2300      	movs	r3, #0
 8003c62:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

HAL_I2C_Mem_Read (&hi2c2,160,64, 2 , potSource, 512,1000); //ok
 8003c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c6a:	9302      	str	r3, [sp, #8]
 8003c6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c70:	9301      	str	r3, [sp, #4]
 8003c72:	4b1f      	ldr	r3, [pc, #124]	; (8003cf0 <main+0x30c>)
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	2302      	movs	r3, #2
 8003c78:	2240      	movs	r2, #64	; 0x40
 8003c7a:	21a0      	movs	r1, #160	; 0xa0
 8003c7c:	4816      	ldr	r0, [pc, #88]	; (8003cd8 <main+0x2f4>)
 8003c7e:	f003 fd99 	bl	80077b4 <HAL_I2C_Mem_Read>





	uint16_t mem_counter=0;
 8003c82:	2300      	movs	r3, #0
 8003c84:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	memcpy(&seq,potSource,46 );  // load from potSource  ,, causes problems with memory ,NEEDS TO BE CONTINUOS OR  WILL  GET CORRUPT
 8003c88:	4a1a      	ldr	r2, [pc, #104]	; (8003cf4 <main+0x310>)
 8003c8a:	4b19      	ldr	r3, [pc, #100]	; (8003cf0 <main+0x30c>)
 8003c8c:	4614      	mov	r4, r2
 8003c8e:	461d      	mov	r5, r3
 8003c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c98:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003c9c:	c407      	stmia	r4!, {r0, r1, r2}
 8003c9e:	8023      	strh	r3, [r4, #0]
    memcpy(&note,potSource+156,160 );   // this works but keep checking for fragmentation
 8003ca0:	4b15      	ldr	r3, [pc, #84]	; (8003cf8 <main+0x314>)
 8003ca2:	22a0      	movs	r2, #160	; 0xa0
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4815      	ldr	r0, [pc, #84]	; (8003cfc <main+0x318>)
 8003ca8:	f007 fa06 	bl	800b0b8 <memcpy>

    for(mem_counter=0;mem_counter<10;mem_counter++){
 8003cac:	2300      	movs	r3, #0
 8003cae:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8003cb2:	e07f      	b.n	8003db4 <main+0x3d0>
 8003cb4:	0800d2f0 	.word	0x0800d2f0
 8003cb8:	200070f0 	.word	0x200070f0
 8003cbc:	20007098 	.word	0x20007098
 8003cc0:	20007190 	.word	0x20007190
 8003cc4:	40000400 	.word	0x40000400
 8003cc8:	20007148 	.word	0x20007148
 8003ccc:	200071d8 	.word	0x200071d8
 8003cd0:	20006f9c 	.word	0x20006f9c
 8003cd4:	20001888 	.word	0x20001888
 8003cd8:	20007044 	.word	0x20007044
 8003cdc:	0800b608 	.word	0x0800b608
 8003ce0:	40020000 	.word	0x40020000
 8003ce4:	200001b4 	.word	0x200001b4
 8003ce8:	0800b610 	.word	0x0800b610
 8003cec:	20003404 	.word	0x20003404
 8003cf0:	20000654 	.word	0x20000654
 8003cf4:	2000418c 	.word	0x2000418c
 8003cf8:	200006f0 	.word	0x200006f0
 8003cfc:	200001b8 	.word	0x200001b8

		memcpy(&LFO[mem_counter],potSource+46+(mem_counter*6),6 );  // + 60 ,ok here
 8003d00:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003d04:	4613      	mov	r3, r2
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	4413      	add	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4a97      	ldr	r2, [pc, #604]	; (8003f6c <main+0x588>)
 8003d0e:	1898      	adds	r0, r3, r2
 8003d10:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003d14:	4613      	mov	r3, r2
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	4413      	add	r3, r2
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	332e      	adds	r3, #46	; 0x2e
 8003d1e:	4a94      	ldr	r2, [pc, #592]	; (8003f70 <main+0x58c>)
 8003d20:	4413      	add	r3, r2
 8003d22:	2206      	movs	r2, #6
 8003d24:	4619      	mov	r1, r3
 8003d26:	f007 f9c7 	bl	800b0b8 <memcpy>

		memcpy(&ADSR[mem_counter],potSource+106+(mem_counter*5),5 );  // +50  ,
 8003d2a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8003d2e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8003d32:	fb02 f303 	mul.w	r3, r2, r3
 8003d36:	4a8f      	ldr	r2, [pc, #572]	; (8003f74 <main+0x590>)
 8003d38:	1898      	adds	r0, r3, r2
 8003d3a:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003d3e:	4613      	mov	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4413      	add	r3, r2
 8003d44:	336a      	adds	r3, #106	; 0x6a
 8003d46:	4a8a      	ldr	r2, [pc, #552]	; (8003f70 <main+0x58c>)
 8003d48:	4413      	add	r3, r2
 8003d4a:	2205      	movs	r2, #5
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	f007 f9b3 	bl	800b0b8 <memcpy>
		memcpy(&patch[mem_counter],potSource+316+(mem_counter*6),6 );
 8003d52:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003d56:	4613      	mov	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4413      	add	r3, r2
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	4a86      	ldr	r2, [pc, #536]	; (8003f78 <main+0x594>)
 8003d60:	1898      	adds	r0, r3, r2
 8003d62:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003d66:	4613      	mov	r3, r2
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	4413      	add	r3, r2
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8003d72:	4a7f      	ldr	r2, [pc, #508]	; (8003f70 <main+0x58c>)
 8003d74:	4413      	add	r3, r2
 8003d76:	2206      	movs	r2, #6
 8003d78:	4619      	mov	r1, r3
 8003d7a:	f007 f99d 	bl	800b0b8 <memcpy>
		memcpy(&LFO_slave1[mem_counter],potSource+376+(mem_counter*6),6 );  // + 60 ,ok here
 8003d7e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003d82:	4613      	mov	r3, r2
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	4413      	add	r3, r2
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	4a7c      	ldr	r2, [pc, #496]	; (8003f7c <main+0x598>)
 8003d8c:	1898      	adds	r0, r3, r2
 8003d8e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003d92:	4613      	mov	r3, r2
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	4413      	add	r3, r2
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003d9e:	4a74      	ldr	r2, [pc, #464]	; (8003f70 <main+0x58c>)
 8003da0:	4413      	add	r3, r2
 8003da2:	2206      	movs	r2, #6
 8003da4:	4619      	mov	r1, r3
 8003da6:	f007 f987 	bl	800b0b8 <memcpy>
    for(mem_counter=0;mem_counter<10;mem_counter++){
 8003daa:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8003dae:	3301      	adds	r3, #1
 8003db0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8003db4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8003db8:	2b09      	cmp	r3, #9
 8003dba:	d9a1      	bls.n	8003d00 <main+0x31c>

    }


	for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8003dbc:	4b70      	ldr	r3, [pc, #448]	; (8003f80 <main+0x59c>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	801a      	strh	r2, [r3, #0]
 8003dc2:	e057      	b.n	8003e74 <main+0x490>

	for 	(n=0;n<18;n++){					// this is ok
 8003dc4:	4b6f      	ldr	r3, [pc, #444]	; (8003f84 <main+0x5a0>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	801a      	strh	r2, [r3, #0]
 8003dca:	e049      	b.n	8003e60 <main+0x47c>
		if (n==0) gfx_ram[(i*18)+n] = 128+(i&31);   // half page
 8003dcc:	4b6d      	ldr	r3, [pc, #436]	; (8003f84 <main+0x5a0>)
 8003dce:	881b      	ldrh	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d114      	bne.n	8003dfe <main+0x41a>
 8003dd4:	4b6a      	ldr	r3, [pc, #424]	; (8003f80 <main+0x59c>)
 8003dd6:	881b      	ldrh	r3, [r3, #0]
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	f003 031f 	and.w	r3, r3, #31
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	4b67      	ldr	r3, [pc, #412]	; (8003f80 <main+0x59c>)
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	4619      	mov	r1, r3
 8003de6:	460b      	mov	r3, r1
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	440b      	add	r3, r1
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	4619      	mov	r1, r3
 8003df0:	4b64      	ldr	r3, [pc, #400]	; (8003f84 <main+0x5a0>)
 8003df2:	881b      	ldrh	r3, [r3, #0]
 8003df4:	440b      	add	r3, r1
 8003df6:	3a80      	subs	r2, #128	; 0x80
 8003df8:	b2d1      	uxtb	r1, r2
 8003dfa:	4a63      	ldr	r2, [pc, #396]	; (8003f88 <main+0x5a4>)
 8003dfc:	54d1      	strb	r1, [r2, r3]
		if (n==1) gfx_ram[(i*18)+n] = 128+((i>>5)*8);    // change x to 8
 8003dfe:	4b61      	ldr	r3, [pc, #388]	; (8003f84 <main+0x5a0>)
 8003e00:	881b      	ldrh	r3, [r3, #0]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d114      	bne.n	8003e30 <main+0x44c>
 8003e06:	4b5e      	ldr	r3, [pc, #376]	; (8003f80 <main+0x59c>)
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	095b      	lsrs	r3, r3, #5
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	3310      	adds	r3, #16
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	4b5b      	ldr	r3, [pc, #364]	; (8003f80 <main+0x59c>)
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	4619      	mov	r1, r3
 8003e18:	460b      	mov	r3, r1
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	440b      	add	r3, r1
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	4619      	mov	r1, r3
 8003e22:	4b58      	ldr	r3, [pc, #352]	; (8003f84 <main+0x5a0>)
 8003e24:	881b      	ldrh	r3, [r3, #0]
 8003e26:	440b      	add	r3, r1
 8003e28:	00d2      	lsls	r2, r2, #3
 8003e2a:	b2d1      	uxtb	r1, r2
 8003e2c:	4a56      	ldr	r2, [pc, #344]	; (8003f88 <main+0x5a4>)
 8003e2e:	54d1      	strb	r1, [r2, r3]
		if (n>1)  gfx_ram[(i*18)+n] = 255;
 8003e30:	4b54      	ldr	r3, [pc, #336]	; (8003f84 <main+0x5a0>)
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d90d      	bls.n	8003e54 <main+0x470>
 8003e38:	4b51      	ldr	r3, [pc, #324]	; (8003f80 <main+0x59c>)
 8003e3a:	881b      	ldrh	r3, [r3, #0]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	4613      	mov	r3, r2
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	4413      	add	r3, r2
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	461a      	mov	r2, r3
 8003e48:	4b4e      	ldr	r3, [pc, #312]	; (8003f84 <main+0x5a0>)
 8003e4a:	881b      	ldrh	r3, [r3, #0]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	4a4e      	ldr	r2, [pc, #312]	; (8003f88 <main+0x5a4>)
 8003e50:	21ff      	movs	r1, #255	; 0xff
 8003e52:	54d1      	strb	r1, [r2, r3]
	for 	(n=0;n<18;n++){					// this is ok
 8003e54:	4b4b      	ldr	r3, [pc, #300]	; (8003f84 <main+0x5a0>)
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	4b49      	ldr	r3, [pc, #292]	; (8003f84 <main+0x5a0>)
 8003e5e:	801a      	strh	r2, [r3, #0]
 8003e60:	4b48      	ldr	r3, [pc, #288]	; (8003f84 <main+0x5a0>)
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	2b11      	cmp	r3, #17
 8003e66:	d9b1      	bls.n	8003dcc <main+0x3e8>
	for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8003e68:	4b45      	ldr	r3, [pc, #276]	; (8003f80 <main+0x59c>)
 8003e6a:	881b      	ldrh	r3, [r3, #0]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	4b43      	ldr	r3, [pc, #268]	; (8003f80 <main+0x59c>)
 8003e72:	801a      	strh	r2, [r3, #0]
 8003e74:	4b42      	ldr	r3, [pc, #264]	; (8003f80 <main+0x59c>)
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	2b3f      	cmp	r3, #63	; 0x3f
 8003e7a:	d9a3      	bls.n	8003dc4 <main+0x3e0>

	}

	}
seq.pos=0;
 8003e7c:	4b43      	ldr	r3, [pc, #268]	; (8003f8c <main+0x5a8>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	701a      	strb	r2, [r3, #0]


uint32_t  tempo_hold=1;  // calculate tempo look up
 8003e82:	2301      	movs	r3, #1
 8003e84:	66fb      	str	r3, [r7, #108]	; 0x6c


  	for (i=1;i<256;i++) {     // change for 32khz   1-256 bpm
 8003e86:	4b3e      	ldr	r3, [pc, #248]	; (8003f80 <main+0x59c>)
 8003e88:	2201      	movs	r2, #1
 8003e8a:	801a      	strh	r2, [r3, #0]
 8003e8c:	e016      	b.n	8003ebc <main+0x4d8>
  		tempo_hold=i;
 8003e8e:	4b3c      	ldr	r3, [pc, #240]	; (8003f80 <main+0x59c>)
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	66fb      	str	r3, [r7, #108]	; 0x6c
  		tempo_hold=(60*seq_sample_rate)/(tempo_hold*16); //
 8003e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	4a3d      	ldr	r2, [pc, #244]	; (8003f90 <main+0x5ac>)
 8003e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9e:	66fb      	str	r3, [r7, #108]	; 0x6c

  	tempo_lut[i]=tempo_hold;
 8003ea0:	4b37      	ldr	r3, [pc, #220]	; (8003f80 <main+0x59c>)
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea8:	b299      	uxth	r1, r3
 8003eaa:	4b3a      	ldr	r3, [pc, #232]	; (8003f94 <main+0x5b0>)
 8003eac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  	for (i=1;i<256;i++) {     // change for 32khz   1-256 bpm
 8003eb0:	4b33      	ldr	r3, [pc, #204]	; (8003f80 <main+0x59c>)
 8003eb2:	881b      	ldrh	r3, [r3, #0]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	4b31      	ldr	r3, [pc, #196]	; (8003f80 <main+0x59c>)
 8003eba:	801a      	strh	r2, [r3, #0]
 8003ebc:	4b30      	ldr	r3, [pc, #192]	; (8003f80 <main+0x59c>)
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	2bff      	cmp	r3, #255	; 0xff
 8003ec2:	d9e4      	bls.n	8003e8e <main+0x4aa>
  	}

//isrMask=571; // def tempo 571=180bpm , 20 ms /isrcount

	noteTiming=24;
 8003ec4:	4b34      	ldr	r3, [pc, #208]	; (8003f98 <main+0x5b4>)
 8003ec6:	2218      	movs	r2, #24
 8003ec8:	701a      	strb	r2, [r3, #0]
	for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8003eca:	4b2d      	ldr	r3, [pc, #180]	; (8003f80 <main+0x59c>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	801a      	strh	r2, [r3, #0]
 8003ed0:	e00b      	b.n	8003eea <main+0x506>
		spell[i]=67;
 8003ed2:	4b2b      	ldr	r3, [pc, #172]	; (8003f80 <main+0x59c>)
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	4b30      	ldr	r3, [pc, #192]	; (8003f9c <main+0x5b8>)
 8003eda:	2143      	movs	r1, #67	; 0x43
 8003edc:	5499      	strb	r1, [r3, r2]
	for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8003ede:	4b28      	ldr	r3, [pc, #160]	; (8003f80 <main+0x59c>)
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	4b26      	ldr	r3, [pc, #152]	; (8003f80 <main+0x59c>)
 8003ee8:	801a      	strh	r2, [r3, #0]
 8003eea:	4b25      	ldr	r3, [pc, #148]	; (8003f80 <main+0x59c>)
 8003eec:	881b      	ldrh	r3, [r3, #0]
 8003eee:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003ef2:	d3ee      	bcc.n	8003ed2 <main+0x4ee>

	}

	gfx_clear();
 8003ef4:	f7fd fd12 	bl	800191c <gfx_clear>
uint16_t pars_counter;

for (pars_counter=0;pars_counter<600;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8003efe:	e006      	b.n	8003f0e <main+0x52a>

		menu_parser();  // run it closer to default_menu size ,times, if default_menu is corrupt gfx breaks pretty bad
 8003f00:	f7fd f856 	bl	8000fb0 <menu_parser>
for (pars_counter=0;pars_counter<600;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8003f04:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003f08:	3301      	adds	r3, #1
 8003f0a:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8003f0e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003f12:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003f16:	d3f3      	bcc.n	8003f00 <main+0x51c>

	}

for (pars_counter=0;pars_counter<512;pars_counter++)	  default_menu3[pars_counter>>1]=64;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8003f1e:	e00c      	b.n	8003f3a <main+0x556>
 8003f20:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003f24:	085b      	lsrs	r3, r3, #1
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	461a      	mov	r2, r3
 8003f2a:	4b1d      	ldr	r3, [pc, #116]	; (8003fa0 <main+0x5bc>)
 8003f2c:	2140      	movs	r1, #64	; 0x40
 8003f2e:	5499      	strb	r1, [r3, r2]
 8003f30:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003f34:	3301      	adds	r3, #1
 8003f36:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8003f3a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003f3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f42:	d3ed      	bcc.n	8003f20 <main+0x53c>





default_menu3_size = strlen(default_menu3);  // grab menu size , this is needed
 8003f44:	4816      	ldr	r0, [pc, #88]	; (8003fa0 <main+0x5bc>)
 8003f46:	f7fc f947 	bl	80001d8 <strlen>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	4b15      	ldr	r3, [pc, #84]	; (8003fa4 <main+0x5c0>)
 8003f50:	801a      	strh	r2, [r3, #0]
	menu_title_count--;  //count back one
 8003f52:	4b15      	ldr	r3, [pc, #84]	; (8003fa8 <main+0x5c4>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	4b13      	ldr	r3, [pc, #76]	; (8003fa8 <main+0x5c4>)
 8003f5c:	701a      	strb	r2, [r3, #0]
	display_clear ();
 8003f5e:	f7fd fd1f 	bl	80019a0 <display_clear>
	for (pars_counter=0;pars_counter<menu_title_count;pars_counter++)	default_menu3 [menu_title_lut[pars_counter]&1023]=48;
 8003f62:	2300      	movs	r3, #0
 8003f64:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8003f68:	e02f      	b.n	8003fca <main+0x5e6>
 8003f6a:	bf00      	nop
 8003f6c:	2000341c 	.word	0x2000341c
 8003f70:	20000654 	.word	0x20000654
 8003f74:	20003700 	.word	0x20003700
 8003f78:	200041bc 	.word	0x200041bc
 8003f7c:	200036c4 	.word	0x200036c4
 8003f80:	20000876 	.word	0x20000876
 8003f84:	20000870 	.word	0x20000870
 8003f88:	20002b6c 	.word	0x20002b6c
 8003f8c:	2000418c 	.word	0x2000418c
 8003f90:	001d4c00 	.word	0x001d4c00
 8003f94:	20002768 	.word	0x20002768
 8003f98:	20000450 	.word	0x20000450
 8003f9c:	20000000 	.word	0x20000000
 8003fa0:	20006b9c 	.word	0x20006b9c
 8003fa4:	20004962 	.word	0x20004962
 8003fa8:	20004351 	.word	0x20004351
 8003fac:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003fb0:	4aaf      	ldr	r2, [pc, #700]	; (8004270 <main+0x88c>)
 8003fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fba:	4aae      	ldr	r2, [pc, #696]	; (8004274 <main+0x890>)
 8003fbc:	2130      	movs	r1, #48	; 0x30
 8003fbe:	54d1      	strb	r1, [r2, r3]
 8003fc0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8003fca:	4bab      	ldr	r3, [pc, #684]	; (8004278 <main+0x894>)
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d3e9      	bcc.n	8003fac <main+0x5c8>

menuSelect=0;
 8003fd8:	4ba8      	ldr	r3, [pc, #672]	; (800427c <main+0x898>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	701a      	strb	r2, [r3, #0]
// fill up sample
firstbarLoop=0;
 8003fde:	4ba8      	ldr	r3, [pc, #672]	; (8004280 <main+0x89c>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	701a      	strb	r2, [r3, #0]
  while (1)																																																		//   while loop , random 20+ms freeze around 0.5 sec
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_counter++ ;
 8003fe4:	4ba7      	ldr	r3, [pc, #668]	; (8004284 <main+0x8a0>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	4ba5      	ldr	r3, [pc, #660]	; (8004284 <main+0x8a0>)
 8003fee:	701a      	strb	r2, [r3, #0]
	  loop_counter2++;// this pretty slow now thanks to gfx , no skips though
 8003ff0:	4ba5      	ldr	r3, [pc, #660]	; (8004288 <main+0x8a4>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	4aa4      	ldr	r2, [pc, #656]	; (8004288 <main+0x8a4>)
 8003ff8:	6013      	str	r3, [r2, #0]

	  // if (menu_page<320) lcd_feedback();  //curious no issues with lcd without this  , maybe spell writing

	  if 	((loop_counter2&7)==6)      {analoginputloopb();} // this is ok , plenty quick , no freeze here
 8003ffa:	4ba3      	ldr	r3, [pc, #652]	; (8004288 <main+0x8a4>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0307 	and.w	r3, r3, #7
 8004002:	2b06      	cmp	r3, #6
 8004004:	d101      	bne.n	800400a <main+0x626>
 8004006:	f7fd fb17 	bl	8001638 <analoginputloopb>


if (loop_counter2==4024) {    //   4096=1min=32bytes so 4mins per 128 bank or 15 writes/hour , no freeze here
 800400a:	4b9f      	ldr	r3, [pc, #636]	; (8004288 <main+0x8a4>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f640 72b8 	movw	r2, #4024	; 0xfb8
 8004012:	4293      	cmp	r3, r2
 8004014:	f040 80df 	bne.w	80041d6 <main+0x7f2>
	  if (mem_count>512) mem_count=0; else mem_count++; // write to first this was moved for no logical reason ?
 8004018:	4b9c      	ldr	r3, [pc, #624]	; (800428c <main+0x8a8>)
 800401a:	881b      	ldrh	r3, [r3, #0]
 800401c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004020:	d903      	bls.n	800402a <main+0x646>
 8004022:	4b9a      	ldr	r3, [pc, #616]	; (800428c <main+0x8a8>)
 8004024:	2200      	movs	r2, #0
 8004026:	801a      	strh	r2, [r3, #0]
 8004028:	e005      	b.n	8004036 <main+0x652>
 800402a:	4b98      	ldr	r3, [pc, #608]	; (800428c <main+0x8a8>)
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	3301      	adds	r3, #1
 8004030:	b29a      	uxth	r2, r3
 8004032:	4b96      	ldr	r3, [pc, #600]	; (800428c <main+0x8a8>)
 8004034:	801a      	strh	r2, [r3, #0]
	  patch_target_parse(); //
 8004036:	f7fd f8ab 	bl	8001190 <patch_target_parse>
	  uint16_t mem_count2=0;	// read values from stored
 800403a:	2300      	movs	r3, #0
 800403c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a


	memcpy(potSource,&seq,46); // about 35
 8004040:	4a93      	ldr	r2, [pc, #588]	; (8004290 <main+0x8ac>)
 8004042:	4b94      	ldr	r3, [pc, #592]	; (8004294 <main+0x8b0>)
 8004044:	4614      	mov	r4, r2
 8004046:	461d      	mov	r5, r3
 8004048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800404a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800404c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800404e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004050:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004054:	c407      	stmia	r4!, {r0, r1, r2}
 8004056:	8023      	strh	r3, [r4, #0]

	for(i=0;i<10;i++){
 8004058:	4b8f      	ldr	r3, [pc, #572]	; (8004298 <main+0x8b4>)
 800405a:	2200      	movs	r2, #0
 800405c:	801a      	strh	r2, [r3, #0]
 800405e:	e079      	b.n	8004154 <main+0x770>
		    memcpy(potSource+156+(i*14),&note[i],14 );  //grab note settings ,112 total , works
 8004060:	4b8d      	ldr	r3, [pc, #564]	; (8004298 <main+0x8b4>)
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	461a      	mov	r2, r3
 8004066:	4613      	mov	r3, r2
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	1a9b      	subs	r3, r3, r2
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	339c      	adds	r3, #156	; 0x9c
 8004070:	4a87      	ldr	r2, [pc, #540]	; (8004290 <main+0x8ac>)
 8004072:	1898      	adds	r0, r3, r2
 8004074:	4b88      	ldr	r3, [pc, #544]	; (8004298 <main+0x8b4>)
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	461a      	mov	r2, r3
 800407a:	4613      	mov	r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	1a9b      	subs	r3, r3, r2
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	4a86      	ldr	r2, [pc, #536]	; (800429c <main+0x8b8>)
 8004084:	4413      	add	r3, r2
 8004086:	220e      	movs	r2, #14
 8004088:	4619      	mov	r1, r3
 800408a:	f007 f815 	bl	800b0b8 <memcpy>

		memcpy(potSource+46+(i*6),&LFO[i],6 );  // + 60  ,ok
 800408e:	4b82      	ldr	r3, [pc, #520]	; (8004298 <main+0x8b4>)
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	461a      	mov	r2, r3
 8004094:	4613      	mov	r3, r2
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	4413      	add	r3, r2
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	332e      	adds	r3, #46	; 0x2e
 800409e:	4a7c      	ldr	r2, [pc, #496]	; (8004290 <main+0x8ac>)
 80040a0:	1898      	adds	r0, r3, r2
 80040a2:	4b7d      	ldr	r3, [pc, #500]	; (8004298 <main+0x8b4>)
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	4613      	mov	r3, r2
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	4413      	add	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4a7b      	ldr	r2, [pc, #492]	; (80042a0 <main+0x8bc>)
 80040b2:	4413      	add	r3, r2
 80040b4:	2206      	movs	r2, #6
 80040b6:	4619      	mov	r1, r3
 80040b8:	f006 fffe 	bl	800b0b8 <memcpy>
		memcpy(potSource+106+(i*5),&ADSR[i],5 );  // +50  ,
 80040bc:	4b76      	ldr	r3, [pc, #472]	; (8004298 <main+0x8b4>)
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	461a      	mov	r2, r3
 80040c2:	4613      	mov	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	336a      	adds	r3, #106	; 0x6a
 80040ca:	4a71      	ldr	r2, [pc, #452]	; (8004290 <main+0x8ac>)
 80040cc:	1898      	adds	r0, r3, r2
 80040ce:	4b72      	ldr	r3, [pc, #456]	; (8004298 <main+0x8b4>)
 80040d0:	881b      	ldrh	r3, [r3, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	f44f 7307 	mov.w	r3, #540	; 0x21c
 80040d8:	fb02 f303 	mul.w	r3, r2, r3
 80040dc:	4a71      	ldr	r2, [pc, #452]	; (80042a4 <main+0x8c0>)
 80040de:	4413      	add	r3, r2
 80040e0:	2205      	movs	r2, #5
 80040e2:	4619      	mov	r1, r3
 80040e4:	f006 ffe8 	bl	800b0b8 <memcpy>
		memcpy(potSource+316+(i*6),&patch[i],6 );
 80040e8:	4b6b      	ldr	r3, [pc, #428]	; (8004298 <main+0x8b4>)
 80040ea:	881b      	ldrh	r3, [r3, #0]
 80040ec:	461a      	mov	r2, r3
 80040ee:	4613      	mov	r3, r2
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	4413      	add	r3, r2
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80040fa:	4a65      	ldr	r2, [pc, #404]	; (8004290 <main+0x8ac>)
 80040fc:	1898      	adds	r0, r3, r2
 80040fe:	4b66      	ldr	r3, [pc, #408]	; (8004298 <main+0x8b4>)
 8004100:	881b      	ldrh	r3, [r3, #0]
 8004102:	461a      	mov	r2, r3
 8004104:	4613      	mov	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	4a66      	ldr	r2, [pc, #408]	; (80042a8 <main+0x8c4>)
 800410e:	4413      	add	r3, r2
 8004110:	2206      	movs	r2, #6
 8004112:	4619      	mov	r1, r3
 8004114:	f006 ffd0 	bl	800b0b8 <memcpy>
		memcpy(potSource+376+(i*6),&LFO_slave1[i],6 ); // ext llof settings
 8004118:	4b5f      	ldr	r3, [pc, #380]	; (8004298 <main+0x8b4>)
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	461a      	mov	r2, r3
 800411e:	4613      	mov	r3, r2
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	4413      	add	r3, r2
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800412a:	4a59      	ldr	r2, [pc, #356]	; (8004290 <main+0x8ac>)
 800412c:	1898      	adds	r0, r3, r2
 800412e:	4b5a      	ldr	r3, [pc, #360]	; (8004298 <main+0x8b4>)
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	4613      	mov	r3, r2
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	4413      	add	r3, r2
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	4a5b      	ldr	r2, [pc, #364]	; (80042ac <main+0x8c8>)
 800413e:	4413      	add	r3, r2
 8004140:	2206      	movs	r2, #6
 8004142:	4619      	mov	r1, r3
 8004144:	f006 ffb8 	bl	800b0b8 <memcpy>
	for(i=0;i<10;i++){
 8004148:	4b53      	ldr	r3, [pc, #332]	; (8004298 <main+0x8b4>)
 800414a:	881b      	ldrh	r3, [r3, #0]
 800414c:	3301      	adds	r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	4b51      	ldr	r3, [pc, #324]	; (8004298 <main+0x8b4>)
 8004152:	801a      	strh	r2, [r3, #0]
 8004154:	4b50      	ldr	r3, [pc, #320]	; (8004298 <main+0x8b4>)
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	2b09      	cmp	r3, #9
 800415a:	d981      	bls.n	8004060 <main+0x67c>

	}	// copy vars into potSource

	//HAL_UART_Transmit(&huart1,serial_send,4, 100);  //send serial again

	mem_count2=0;
 800415c:	2300      	movs	r3, #0
 800415e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

			// for patch write start at 2048 for now



				 mem_buf=potSource[mem_count];
 8004162:	4b4a      	ldr	r3, [pc, #296]	; (800428c <main+0x8a8>)
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	461a      	mov	r2, r3
 8004168:	4b49      	ldr	r3, [pc, #292]	; (8004290 <main+0x8ac>)
 800416a:	5c9a      	ldrb	r2, [r3, r2]
 800416c:	4b50      	ldr	r3, [pc, #320]	; (80042b0 <main+0x8cc>)
 800416e:	701a      	strb	r2, [r3, #0]
			//	 if (mem_buf>159) mem_buf=159;
				 mem_count2=((1+(mem_count>>6))<<6)+(mem_count&63);
 8004170:	4b46      	ldr	r3, [pc, #280]	; (800428c <main+0x8a8>)
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	099b      	lsrs	r3, r3, #6
 8004176:	b29b      	uxth	r3, r3
 8004178:	3301      	adds	r3, #1
 800417a:	b29b      	uxth	r3, r3
 800417c:	019b      	lsls	r3, r3, #6
 800417e:	b29a      	uxth	r2, r3
 8004180:	4b42      	ldr	r3, [pc, #264]	; (800428c <main+0x8a8>)
 8004182:	881b      	ldrh	r3, [r3, #0]
 8004184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004188:	b29b      	uxth	r3, r3
 800418a:	4413      	add	r3, r2
 800418c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
				 //mem_count2=mem_count2+2048;   // Relocate mem for patch

				 HAL_I2C_Mem_Read(&hi2c2, 160,mem_count2, 2,&mem_verify, 1,100);
 8004190:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8004194:	2364      	movs	r3, #100	; 0x64
 8004196:	9302      	str	r3, [sp, #8]
 8004198:	2301      	movs	r3, #1
 800419a:	9301      	str	r3, [sp, #4]
 800419c:	4b45      	ldr	r3, [pc, #276]	; (80042b4 <main+0x8d0>)
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	2302      	movs	r3, #2
 80041a2:	21a0      	movs	r1, #160	; 0xa0
 80041a4:	4844      	ldr	r0, [pc, #272]	; (80042b8 <main+0x8d4>)
 80041a6:	f003 fb05 	bl	80077b4 <HAL_I2C_Mem_Read>
				 if (mem_verify!=mem_buf) HAL_I2C_Mem_Write(&hi2c2, 160,mem_count2 , 2, &mem_buf, 1, 100);
 80041aa:	4b42      	ldr	r3, [pc, #264]	; (80042b4 <main+0x8d0>)
 80041ac:	781a      	ldrb	r2, [r3, #0]
 80041ae:	4b40      	ldr	r3, [pc, #256]	; (80042b0 <main+0x8cc>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d00c      	beq.n	80041d0 <main+0x7ec>
 80041b6:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 80041ba:	2364      	movs	r3, #100	; 0x64
 80041bc:	9302      	str	r3, [sp, #8]
 80041be:	2301      	movs	r3, #1
 80041c0:	9301      	str	r3, [sp, #4]
 80041c2:	4b3b      	ldr	r3, [pc, #236]	; (80042b0 <main+0x8cc>)
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	2302      	movs	r3, #2
 80041c8:	21a0      	movs	r1, #160	; 0xa0
 80041ca:	483b      	ldr	r0, [pc, #236]	; (80042b8 <main+0x8d4>)
 80041cc:	f003 f9f8 	bl	80075c0 <HAL_I2C_Mem_Write>



//if (mem_buf!=mem_verify)	 mem_errors++;  // check writes

loop_counter2=0; //reset
 80041d0:	4b2d      	ldr	r3, [pc, #180]	; (8004288 <main+0x8a4>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	601a      	str	r2, [r3, #0]

}


	if (serial_tosend){    // send on seq change
 80041d6:	4b39      	ldr	r3, [pc, #228]	; (80042bc <main+0x8d8>)
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f000 80bf 	beq.w	800435e <main+0x97a>

		  memcpy(serial_source,&seq,36); // copy bits
 80041e0:	2224      	movs	r2, #36	; 0x24
 80041e2:	492c      	ldr	r1, [pc, #176]	; (8004294 <main+0x8b0>)
 80041e4:	4836      	ldr	r0, [pc, #216]	; (80042c0 <main+0x8dc>)
 80041e6:	f006 ff67 	bl	800b0b8 <memcpy>

		  memcpy(serial_source+96,potSource+252,64 );  // 4 * 16
 80041ea:	4b36      	ldr	r3, [pc, #216]	; (80042c4 <main+0x8e0>)
 80041ec:	4936      	ldr	r1, [pc, #216]	; (80042c8 <main+0x8e4>)
 80041ee:	2240      	movs	r2, #64	; 0x40
 80041f0:	4618      	mov	r0, r3
 80041f2:	f006 ff61 	bl	800b0b8 <memcpy>
		  for(mem_counter=0;mem_counter<10;mem_counter++){
 80041f6:	2300      	movs	r3, #0
 80041f8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80041fc:	e032      	b.n	8004264 <main+0x880>
			  if (mem_counter<4)memcpy(serial_source+96+(mem_counter*7),&note[mem_counter+6],7 );
 80041fe:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8004202:	2b03      	cmp	r3, #3
 8004204:	d814      	bhi.n	8004230 <main+0x84c>
 8004206:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800420a:	4613      	mov	r3, r2
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	1a9b      	subs	r3, r3, r2
 8004210:	3360      	adds	r3, #96	; 0x60
 8004212:	4a2b      	ldr	r2, [pc, #172]	; (80042c0 <main+0x8dc>)
 8004214:	1898      	adds	r0, r3, r2
 8004216:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800421a:	1d9a      	adds	r2, r3, #6
 800421c:	4613      	mov	r3, r2
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	1a9b      	subs	r3, r3, r2
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	4a1d      	ldr	r2, [pc, #116]	; (800429c <main+0x8b8>)
 8004226:	4413      	add	r3, r2
 8004228:	2207      	movs	r2, #7
 800422a:	4619      	mov	r1, r3
 800422c:	f006 ff44 	bl	800b0b8 <memcpy>
						memcpy(serial_source+36+(mem_counter*6),&LFO_slave1[mem_counter],6 );  // insert lfo settings
 8004230:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8004234:	4613      	mov	r3, r2
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	4413      	add	r3, r2
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	3324      	adds	r3, #36	; 0x24
 800423e:	4a20      	ldr	r2, [pc, #128]	; (80042c0 <main+0x8dc>)
 8004240:	1898      	adds	r0, r3, r2
 8004242:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8004246:	4613      	mov	r3, r2
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	4413      	add	r3, r2
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	4a17      	ldr	r2, [pc, #92]	; (80042ac <main+0x8c8>)
 8004250:	4413      	add	r3, r2
 8004252:	2206      	movs	r2, #6
 8004254:	4619      	mov	r1, r3
 8004256:	f006 ff2f 	bl	800b0b8 <memcpy>
		  for(mem_counter=0;mem_counter<10;mem_counter++){
 800425a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800425e:	3301      	adds	r3, #1
 8004260:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8004264:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8004268:	2b09      	cmp	r3, #9
 800426a:	d9c8      	bls.n	80041fe <main+0x81a>
				  }

	while ((serial_source_temp[serial_up]==serial_source[serial_up]) &&(serial_up<161) )   {
 800426c:	e034      	b.n	80042d8 <main+0x8f4>
 800426e:	bf00      	nop
 8004270:	20004354 	.word	0x20004354
 8004274:	20006b9c 	.word	0x20006b9c
 8004278:	20004351 	.word	0x20004351
 800427c:	20000868 	.word	0x20000868
 8004280:	2000086a 	.word	0x2000086a
 8004284:	20000872 	.word	0x20000872
 8004288:	200024cc 	.word	0x200024cc
 800428c:	200024ca 	.word	0x200024ca
 8004290:	20000654 	.word	0x20000654
 8004294:	2000418c 	.word	0x2000418c
 8004298:	20000876 	.word	0x20000876
 800429c:	200001b8 	.word	0x200001b8
 80042a0:	2000341c 	.word	0x2000341c
 80042a4:	20003700 	.word	0x20003700
 80042a8:	200041bc 	.word	0x200041bc
 80042ac:	200036c4 	.word	0x200036c4
 80042b0:	200024d0 	.word	0x200024d0
 80042b4:	2000496f 	.word	0x2000496f
 80042b8:	20007044 	.word	0x20007044
 80042bc:	20006b99 	.word	0x20006b99
 80042c0:	20006998 	.word	0x20006998
 80042c4:	200069f8 	.word	0x200069f8
 80042c8:	20000750 	.word	0x20000750
		serial_up++;
 80042cc:	4b9a      	ldr	r3, [pc, #616]	; (8004538 <main+0xb54>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	3301      	adds	r3, #1
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	4b98      	ldr	r3, [pc, #608]	; (8004538 <main+0xb54>)
 80042d6:	701a      	strb	r2, [r3, #0]
	while ((serial_source_temp[serial_up]==serial_source[serial_up]) &&(serial_up<161) )   {
 80042d8:	4b97      	ldr	r3, [pc, #604]	; (8004538 <main+0xb54>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	461a      	mov	r2, r3
 80042de:	4b97      	ldr	r3, [pc, #604]	; (800453c <main+0xb58>)
 80042e0:	5c9a      	ldrb	r2, [r3, r2]
 80042e2:	4b95      	ldr	r3, [pc, #596]	; (8004538 <main+0xb54>)
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	4619      	mov	r1, r3
 80042e8:	4b95      	ldr	r3, [pc, #596]	; (8004540 <main+0xb5c>)
 80042ea:	5c5b      	ldrb	r3, [r3, r1]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d103      	bne.n	80042f8 <main+0x914>
 80042f0:	4b91      	ldr	r3, [pc, #580]	; (8004538 <main+0xb54>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2ba0      	cmp	r3, #160	; 0xa0
 80042f6:	d9e9      	bls.n	80042cc <main+0x8e8>
	}

		  serial_send[6]=0;
 80042f8:	4b92      	ldr	r3, [pc, #584]	; (8004544 <main+0xb60>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	719a      	strb	r2, [r3, #6]
		  serial_send[7]=seq.pos;  // chase
 80042fe:	4b92      	ldr	r3, [pc, #584]	; (8004548 <main+0xb64>)
 8004300:	781a      	ldrb	r2, [r3, #0]
 8004302:	4b90      	ldr	r3, [pc, #576]	; (8004544 <main+0xb60>)
 8004304:	71da      	strb	r2, [r3, #7]
		  serial_send[2]=serial_up;
 8004306:	4b8c      	ldr	r3, [pc, #560]	; (8004538 <main+0xb54>)
 8004308:	781a      	ldrb	r2, [r3, #0]
 800430a:	4b8e      	ldr	r3, [pc, #568]	; (8004544 <main+0xb60>)
 800430c:	709a      	strb	r2, [r3, #2]
			  serial_send[3]=serial_source[serial_up];
 800430e:	4b8a      	ldr	r3, [pc, #552]	; (8004538 <main+0xb54>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	4b8a      	ldr	r3, [pc, #552]	; (8004540 <main+0xb5c>)
 8004316:	5c9a      	ldrb	r2, [r3, r2]
 8004318:	4b8a      	ldr	r3, [pc, #552]	; (8004544 <main+0xb60>)
 800431a:	70da      	strb	r2, [r3, #3]
			 serial_source_temp[serial_up]=serial_source[serial_up];
 800431c:	4b86      	ldr	r3, [pc, #536]	; (8004538 <main+0xb54>)
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	4619      	mov	r1, r3
 8004322:	4b85      	ldr	r3, [pc, #532]	; (8004538 <main+0xb54>)
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	4b85      	ldr	r3, [pc, #532]	; (8004540 <main+0xb5c>)
 800432a:	5c59      	ldrb	r1, [r3, r1]
 800432c:	4b83      	ldr	r3, [pc, #524]	; (800453c <main+0xb58>)
 800432e:	5499      	strb	r1, [r3, r2]
			if (serial_up>161) serial_up=0; else serial_up++;
 8004330:	4b81      	ldr	r3, [pc, #516]	; (8004538 <main+0xb54>)
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2ba1      	cmp	r3, #161	; 0xa1
 8004336:	d903      	bls.n	8004340 <main+0x95c>
 8004338:	4b7f      	ldr	r3, [pc, #508]	; (8004538 <main+0xb54>)
 800433a:	2200      	movs	r2, #0
 800433c:	701a      	strb	r2, [r3, #0]
 800433e:	e005      	b.n	800434c <main+0x968>
 8004340:	4b7d      	ldr	r3, [pc, #500]	; (8004538 <main+0xb54>)
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	3301      	adds	r3, #1
 8004346:	b2da      	uxtb	r2, r3
 8004348:	4b7b      	ldr	r3, [pc, #492]	; (8004538 <main+0xb54>)
 800434a:	701a      	strb	r2, [r3, #0]

			HAL_UART_Transmit(&huart1,serial_send,8, 100);  //send serial
 800434c:	2364      	movs	r3, #100	; 0x64
 800434e:	2208      	movs	r2, #8
 8004350:	497c      	ldr	r1, [pc, #496]	; (8004544 <main+0xb60>)
 8004352:	487e      	ldr	r0, [pc, #504]	; (800454c <main+0xb68>)
 8004354:	f006 fac9 	bl	800a8ea <HAL_UART_Transmit>
		serial_tosend=0;
 8004358:	4b7d      	ldr	r3, [pc, #500]	; (8004550 <main+0xb6c>)
 800435a:	2200      	movs	r2, #0
 800435c:	701a      	strb	r2, [r3, #0]





if (disp_end==1)	  display_generate();      // run this after gfx draw page finish
 800435e:	4b7d      	ldr	r3, [pc, #500]	; (8004554 <main+0xb70>)
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d101      	bne.n	800436a <main+0x986>
 8004366:	f7fd fb3b 	bl	80019e0 <display_generate>




	  if (init<6)				// after 6 its done for good   // no freeze here
 800436a:	4b7b      	ldr	r3, [pc, #492]	; (8004558 <main+0xb74>)
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b05      	cmp	r3, #5
 8004370:	d80f      	bhi.n	8004392 <main+0x9ae>
{
	  for (i=0;i<6;i++) {display_init();}  //1-2ms ?  change length if flickering ,maybe initial data
 8004372:	4b7a      	ldr	r3, [pc, #488]	; (800455c <main+0xb78>)
 8004374:	2200      	movs	r2, #0
 8004376:	801a      	strh	r2, [r3, #0]
 8004378:	e007      	b.n	800438a <main+0x9a6>
 800437a:	f7fd fa21 	bl	80017c0 <display_init>
 800437e:	4b77      	ldr	r3, [pc, #476]	; (800455c <main+0xb78>)
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	3301      	adds	r3, #1
 8004384:	b29a      	uxth	r2, r3
 8004386:	4b75      	ldr	r3, [pc, #468]	; (800455c <main+0xb78>)
 8004388:	801a      	strh	r2, [r3, #0]
 800438a:	4b74      	ldr	r3, [pc, #464]	; (800455c <main+0xb78>)
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	2b05      	cmp	r3, #5
 8004390:	d9f3      	bls.n	800437a <main+0x996>
}

	  if (init > 5) {    //  around 3 cycles per single transmit  , plenty quick as is , spi lcd can really slow things down
 8004392:	4b71      	ldr	r3, [pc, #452]	; (8004558 <main+0xb74>)
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b05      	cmp	r3, #5
 8004398:	d92a      	bls.n	80043f0 <main+0xa0c>


		  if (gfx_send_swap==2) gfx_send_lines++;		// this is ok for now
 800439a:	4b71      	ldr	r3, [pc, #452]	; (8004560 <main+0xb7c>)
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d105      	bne.n	80043ae <main+0x9ca>
 80043a2:	4b70      	ldr	r3, [pc, #448]	; (8004564 <main+0xb80>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	3301      	adds	r3, #1
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	4b6e      	ldr	r3, [pc, #440]	; (8004564 <main+0xb80>)
 80043ac:	701a      	strb	r2, [r3, #0]
		  if (gfx_send_swap==1)  { gfx_send_counter=gfx_send_cursor*144; gfx_send_swap=2; } // jump to cursor pixel line
 80043ae:	4b6c      	ldr	r3, [pc, #432]	; (8004560 <main+0xb7c>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d10c      	bne.n	80043d0 <main+0x9ec>
 80043b6:	4b6c      	ldr	r3, [pc, #432]	; (8004568 <main+0xb84>)
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	461a      	mov	r2, r3
 80043be:	00d2      	lsls	r2, r2, #3
 80043c0:	4413      	add	r3, r2
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	4b69      	ldr	r3, [pc, #420]	; (800456c <main+0xb88>)
 80043c8:	801a      	strh	r2, [r3, #0]
 80043ca:	4b65      	ldr	r3, [pc, #404]	; (8004560 <main+0xb7c>)
 80043cc:	2202      	movs	r2, #2
 80043ce:	701a      	strb	r2, [r3, #0]
	      if (gfx_send_lines==144)   { gfx_send_lines=0; gfx_send_counter=1008; gfx_send_swap=0;}  // skip to last char line
 80043d0:	4b64      	ldr	r3, [pc, #400]	; (8004564 <main+0xb80>)
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b90      	cmp	r3, #144	; 0x90
 80043d6:	d109      	bne.n	80043ec <main+0xa08>
 80043d8:	4b62      	ldr	r3, [pc, #392]	; (8004564 <main+0xb80>)
 80043da:	2200      	movs	r2, #0
 80043dc:	701a      	strb	r2, [r3, #0]
 80043de:	4b63      	ldr	r3, [pc, #396]	; (800456c <main+0xb88>)
 80043e0:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80043e4:	801a      	strh	r2, [r3, #0]
 80043e6:	4b5e      	ldr	r3, [pc, #376]	; (8004560 <main+0xb7c>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	701a      	strb	r2, [r3, #0]
				gfx_send();    // don't loop this without using dma  , just makes things really slow
 80043ec:	f7fd fa3e 	bl	800186c <gfx_send>

	}


	  if (loop_counter == 255)	{ // grab adc readings + 3ms , 32 step  // no freeze
 80043f0:	4b5f      	ldr	r3, [pc, #380]	; (8004570 <main+0xb8c>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2bff      	cmp	r3, #255	; 0xff
 80043f6:	d13d      	bne.n	8004474 <main+0xa90>



		  //HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go

		  HAL_ADCEx_InjectedStart(&hadc1) ;  // start injected mode normal conversion
 80043f8:	485e      	ldr	r0, [pc, #376]	; (8004574 <main+0xb90>)
 80043fa:	f001 fe25 	bl	8006048 <HAL_ADCEx_InjectedStart>
		  uint16_t adc_temp1[4]={0,0,0,0};
 80043fe:	1d3b      	adds	r3, r7, #4
 8004400:	2200      	movs	r2, #0
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	605a      	str	r2, [r3, #4]

		  HAL_ADC_PollForConversion(&hadc1,1);  // works but  slow ,blocking very slow, set quick time out
 8004406:	2101      	movs	r1, #1
 8004408:	485a      	ldr	r0, [pc, #360]	; (8004574 <main+0xb90>)
 800440a:	f001 f983 	bl	8005714 <HAL_ADC_PollForConversion>

		  adc_temp1[0]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 800440e:	2101      	movs	r1, #1
 8004410:	4858      	ldr	r0, [pc, #352]	; (8004574 <main+0xb90>)
 8004412:	f001 ff2f 	bl	8006274 <HAL_ADCEx_InjectedGetValue>
 8004416:	4603      	mov	r3, r0
 8004418:	b29b      	uxth	r3, r3
 800441a:	80bb      	strh	r3, [r7, #4]
		  adc_temp1[1] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 800441c:	2102      	movs	r1, #2
 800441e:	4855      	ldr	r0, [pc, #340]	; (8004574 <main+0xb90>)
 8004420:	f001 ff28 	bl	8006274 <HAL_ADCEx_InjectedGetValue>
 8004424:	4603      	mov	r3, r0
 8004426:	b29b      	uxth	r3, r3
 8004428:	80fb      	strh	r3, [r7, #6]
		  adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 800442a:	2103      	movs	r1, #3
 800442c:	4851      	ldr	r0, [pc, #324]	; (8004574 <main+0xb90>)
 800442e:	f001 ff21 	bl	8006274 <HAL_ADCEx_InjectedGetValue>
 8004432:	4603      	mov	r3, r0
 8004434:	b29b      	uxth	r3, r3
 8004436:	813b      	strh	r3, [r7, #8]

		  //  adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
		  adc_values[0]=	31- ( adc_temp1[0]>>7);
 8004438:	88bb      	ldrh	r3, [r7, #4]
 800443a:	09db      	lsrs	r3, r3, #7
 800443c:	b29b      	uxth	r3, r3
 800443e:	f1c3 031f 	rsb	r3, r3, #31
 8004442:	b29a      	uxth	r2, r3
 8004444:	4b4c      	ldr	r3, [pc, #304]	; (8004578 <main+0xb94>)
 8004446:	801a      	strh	r2, [r3, #0]
		  adc_values[1]=	 31-( adc_temp1[1]>>7);
 8004448:	88fb      	ldrh	r3, [r7, #6]
 800444a:	09db      	lsrs	r3, r3, #7
 800444c:	b29b      	uxth	r3, r3
 800444e:	f1c3 031f 	rsb	r3, r3, #31
 8004452:	b29a      	uxth	r2, r3
 8004454:	4b48      	ldr	r3, [pc, #288]	; (8004578 <main+0xb94>)
 8004456:	805a      	strh	r2, [r3, #2]
		  adc_values[2]=	 31-( adc_temp1[2]>>7);
 8004458:	893b      	ldrh	r3, [r7, #8]
 800445a:	09db      	lsrs	r3, r3, #7
 800445c:	b29b      	uxth	r3, r3
 800445e:	f1c3 031f 	rsb	r3, r3, #31
 8004462:	b29a      	uxth	r2, r3
 8004464:	4b44      	ldr	r3, [pc, #272]	; (8004578 <main+0xb94>)
 8004466:	809a      	strh	r2, [r3, #4]
		  //  adc_values[2]=	  adc_temp1[2]>>7;
		  HAL_ADCEx_InjectedStop(&hadc1) ;
 8004468:	4842      	ldr	r0, [pc, #264]	; (8004574 <main+0xb90>)
 800446a:	f001 feb7 	bl	80061dc <HAL_ADCEx_InjectedStop>


		  //HAL_ADC_Start_DMA(&hadc1, adc_source, 512);


	  	loop_counter=0;
 800446e:	4b40      	ldr	r3, [pc, #256]	; (8004570 <main+0xb8c>)
 8004470:	2200      	movs	r2, #0
 8004472:	701a      	strb	r2, [r3, #0]
	  }

	  if ((seq.pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 8004474:	4b34      	ldr	r3, [pc, #208]	; (8004548 <main+0xb64>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b07      	cmp	r3, #7
 800447a:	d106      	bne.n	800448a <main+0xaa6>
 800447c:	4b3f      	ldr	r3, [pc, #252]	; (800457c <main+0xb98>)
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d102      	bne.n	800448a <main+0xaa6>
 8004484:	4b3d      	ldr	r3, [pc, #244]	; (800457c <main+0xb98>)
 8004486:	2201      	movs	r2, #1
 8004488:	801a      	strh	r2, [r3, #0]


	  	     HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,(seq.pos & 1)); // easy skip ?
 800448a:	4b2f      	ldr	r3, [pc, #188]	; (8004548 <main+0xb64>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	b2db      	uxtb	r3, r3
 8004494:	461a      	mov	r2, r3
 8004496:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800449a:	4839      	ldr	r0, [pc, #228]	; (8004580 <main+0xb9c>)
 800449c:	f002 ff32 	bl	8007304 <HAL_GPIO_WritePin>


	//  if (sample_pointB!=sample_pointD) bank_write=1; // set start of buffer ,grab , works ok

	  	//	adc_flag=0;
	  		if (adc_flag) {
 80044a0:	4b38      	ldr	r3, [pc, #224]	; (8004584 <main+0xba0>)
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d037      	beq.n	8004518 <main+0xb34>
	  		HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go
 80044a8:	4832      	ldr	r0, [pc, #200]	; (8004574 <main+0xb90>)
 80044aa:	f001 faaf 	bl	8005a0c <HAL_ADC_Stop_DMA>
	  		HAL_ADC_Start_DMA(&hadc1, adc_source, 1024); //dma start ,needs this and adc start ,set sampling time
 80044ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044b2:	4935      	ldr	r1, [pc, #212]	; (8004588 <main+0xba4>)
 80044b4:	482f      	ldr	r0, [pc, #188]	; (8004574 <main+0xb90>)
 80044b6:	f001 f9b9 	bl	800582c <HAL_ADC_Start_DMA>

	  			uint16_t* click=&adc_source[0];
 80044ba:	4b33      	ldr	r3, [pc, #204]	; (8004588 <main+0xba4>)
 80044bc:	67bb      	str	r3, [r7, #120]	; 0x78

	  			for (i=0;i<512;i++)
 80044be:	4b27      	ldr	r3, [pc, #156]	; (800455c <main+0xb78>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	801a      	strh	r2, [r3, #0]
 80044c4:	e023      	b.n	800450e <main+0xb2a>
	  			{

	  				uint16_t crap_hold=*click;
 80044c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

	  			uint16_t crap_hold1=*(++click);
 80044ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044d0:	3302      	adds	r3, #2
 80044d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80044d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044d6:	881b      	ldrh	r3, [r3, #0]
 80044d8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	  		click++;
 80044dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044de:	3302      	adds	r3, #2
 80044e0:	67bb      	str	r3, [r7, #120]	; 0x78

	  	//			uint16_t crap_hold=adc_source[i*2];

	  				 // 				uint16_t crap_hold1=adc_source[(i*2)+1];

	  				input_holder[i] = (crap_hold+crap_hold1 )>>1;
 80044e2:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 80044e6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80044ea:	4413      	add	r3, r2
 80044ec:	1059      	asrs	r1, r3, #1
 80044ee:	4b1b      	ldr	r3, [pc, #108]	; (800455c <main+0xb78>)
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	461a      	mov	r2, r3
 80044f4:	b289      	uxth	r1, r1
 80044f6:	4b25      	ldr	r3, [pc, #148]	; (800458c <main+0xba8>)
 80044f8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  				adc_flag=0;
 80044fc:	4b21      	ldr	r3, [pc, #132]	; (8004584 <main+0xba0>)
 80044fe:	2200      	movs	r2, #0
 8004500:	701a      	strb	r2, [r3, #0]
	  			for (i=0;i<512;i++)
 8004502:	4b16      	ldr	r3, [pc, #88]	; (800455c <main+0xb78>)
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	3301      	adds	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	4b14      	ldr	r3, [pc, #80]	; (800455c <main+0xb78>)
 800450c:	801a      	strh	r2, [r3, #0]
 800450e:	4b13      	ldr	r3, [pc, #76]	; (800455c <main+0xb78>)
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004516:	d3d6      	bcc.n	80044c6 <main+0xae2>
	  			}
	  		}
	  		if ((sample_point>512)&&( sample_pointD==512)) bank_write=1;
 8004518:	4b1d      	ldr	r3, [pc, #116]	; (8004590 <main+0xbac>)
 800451a:	881b      	ldrh	r3, [r3, #0]
 800451c:	b29b      	uxth	r3, r3
 800451e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004522:	d93d      	bls.n	80045a0 <main+0xbbc>
 8004524:	4b1b      	ldr	r3, [pc, #108]	; (8004594 <main+0xbb0>)
 8004526:	881b      	ldrh	r3, [r3, #0]
 8004528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800452c:	d138      	bne.n	80045a0 <main+0xbbc>
 800452e:	4b1a      	ldr	r3, [pc, #104]	; (8004598 <main+0xbb4>)
 8004530:	2201      	movs	r2, #1
 8004532:	801a      	strh	r2, [r3, #0]
	while  (bank_write)                         {							// wait for adc , priority
 8004534:	e034      	b.n	80045a0 <main+0xbbc>
 8004536:	bf00      	nop
 8004538:	20006b98 	.word	0x20006b98
 800453c:	20006a98 	.word	0x20006a98
 8004540:	20006998 	.word	0x20006998
 8004544:	20000268 	.word	0x20000268
 8004548:	2000418c 	.word	0x2000418c
 800454c:	20007220 	.word	0x20007220
 8004550:	20006b99 	.word	0x20006b99
 8004554:	20002ffe 	.word	0x20002ffe
 8004558:	200024c1 	.word	0x200024c1
 800455c:	20000876 	.word	0x20000876
 8004560:	20002ff2 	.word	0x20002ff2
 8004564:	20002ff3 	.word	0x20002ff3
 8004568:	20002ff1 	.word	0x20002ff1
 800456c:	20002fee 	.word	0x20002fee
 8004570:	20000872 	.word	0x20000872
 8004574:	20006f9c 	.word	0x20006f9c
 8004578:	200001a4 	.word	0x200001a4
 800457c:	200024b8 	.word	0x200024b8
 8004580:	40020800 	.word	0x40020800
 8004584:	20003400 	.word	0x20003400
 8004588:	20001888 	.word	0x20001888
 800458c:	20003000 	.word	0x20003000
 8004590:	2000187c 	.word	0x2000187c
 8004594:	20001882 	.word	0x20001882
 8004598:	200001ae 	.word	0x200001ae



		  //HAL_Delay(4);
	  		//sample_point=sample_point&768 ;
	  		sampling();
 800459c:	f7fd fdac 	bl	80020f8 <sampling>
	while  (bank_write)                         {							// wait for adc , priority
 80045a0:	4b02      	ldr	r3, [pc, #8]	; (80045ac <main+0xbc8>)
 80045a2:	881b      	ldrh	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1f9      	bne.n	800459c <main+0xbb8>
	  loop_counter++ ;
 80045a8:	e51c      	b.n	8003fe4 <main+0x600>
 80045aa:	bf00      	nop
 80045ac:	200001ae 	.word	0x200001ae

080045b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b094      	sub	sp, #80	; 0x50
 80045b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80045b6:	f107 0320 	add.w	r3, r7, #32
 80045ba:	2230      	movs	r2, #48	; 0x30
 80045bc:	2100      	movs	r1, #0
 80045be:	4618      	mov	r0, r3
 80045c0:	f006 fd88 	bl	800b0d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045c4:	f107 030c 	add.w	r3, r7, #12
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	605a      	str	r2, [r3, #4]
 80045ce:	609a      	str	r2, [r3, #8]
 80045d0:	60da      	str	r2, [r3, #12]
 80045d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80045d4:	2300      	movs	r3, #0
 80045d6:	60bb      	str	r3, [r7, #8]
 80045d8:	4b28      	ldr	r3, [pc, #160]	; (800467c <SystemClock_Config+0xcc>)
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	4a27      	ldr	r2, [pc, #156]	; (800467c <SystemClock_Config+0xcc>)
 80045de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e2:	6413      	str	r3, [r2, #64]	; 0x40
 80045e4:	4b25      	ldr	r3, [pc, #148]	; (800467c <SystemClock_Config+0xcc>)
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ec:	60bb      	str	r3, [r7, #8]
 80045ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80045f0:	2300      	movs	r3, #0
 80045f2:	607b      	str	r3, [r7, #4]
 80045f4:	4b22      	ldr	r3, [pc, #136]	; (8004680 <SystemClock_Config+0xd0>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a21      	ldr	r2, [pc, #132]	; (8004680 <SystemClock_Config+0xd0>)
 80045fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045fe:	6013      	str	r3, [r2, #0]
 8004600:	4b1f      	ldr	r3, [pc, #124]	; (8004680 <SystemClock_Config+0xd0>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004608:	607b      	str	r3, [r7, #4]
 800460a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800460c:	2302      	movs	r3, #2
 800460e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004610:	2301      	movs	r3, #1
 8004612:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004614:	2310      	movs	r3, #16
 8004616:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004618:	2302      	movs	r3, #2
 800461a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800461c:	2300      	movs	r3, #0
 800461e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004620:	2308      	movs	r3, #8
 8004622:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8004624:	2364      	movs	r3, #100	; 0x64
 8004626:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004628:	2302      	movs	r3, #2
 800462a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800462c:	2304      	movs	r3, #4
 800462e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004630:	f107 0320 	add.w	r3, r7, #32
 8004634:	4618      	mov	r0, r3
 8004636:	f003 fe3f 	bl	80082b8 <HAL_RCC_OscConfig>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004640:	f000 fb66 	bl	8004d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004644:	230f      	movs	r3, #15
 8004646:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004648:	2302      	movs	r3, #2
 800464a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800464c:	2300      	movs	r3, #0
 800464e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004654:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800465a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800465c:	f107 030c 	add.w	r3, r7, #12
 8004660:	2103      	movs	r1, #3
 8004662:	4618      	mov	r0, r3
 8004664:	f004 f8a0 	bl	80087a8 <HAL_RCC_ClockConfig>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800466e:	f000 fb4f 	bl	8004d10 <Error_Handler>
  }
}
 8004672:	bf00      	nop
 8004674:	3750      	adds	r7, #80	; 0x50
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	40023800 	.word	0x40023800
 8004680:	40007000 	.word	0x40007000

08004684 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08c      	sub	sp, #48	; 0x30
 8004688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800468a:	f107 0320 	add.w	r3, r7, #32
 800468e:	2200      	movs	r2, #0
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	605a      	str	r2, [r3, #4]
 8004694:	609a      	str	r2, [r3, #8]
 8004696:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8004698:	463b      	mov	r3, r7
 800469a:	2220      	movs	r2, #32
 800469c:	2100      	movs	r1, #0
 800469e:	4618      	mov	r0, r3
 80046a0:	f006 fd18 	bl	800b0d4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80046a4:	4b3e      	ldr	r3, [pc, #248]	; (80047a0 <MX_ADC1_Init+0x11c>)
 80046a6:	4a3f      	ldr	r2, [pc, #252]	; (80047a4 <MX_ADC1_Init+0x120>)
 80046a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80046aa:	4b3d      	ldr	r3, [pc, #244]	; (80047a0 <MX_ADC1_Init+0x11c>)
 80046ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80046b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80046b2:	4b3b      	ldr	r3, [pc, #236]	; (80047a0 <MX_ADC1_Init+0x11c>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80046b8:	4b39      	ldr	r3, [pc, #228]	; (80047a0 <MX_ADC1_Init+0x11c>)
 80046ba:	2201      	movs	r2, #1
 80046bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80046be:	4b38      	ldr	r3, [pc, #224]	; (80047a0 <MX_ADC1_Init+0x11c>)
 80046c0:	2201      	movs	r2, #1
 80046c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80046c4:	4b36      	ldr	r3, [pc, #216]	; (80047a0 <MX_ADC1_Init+0x11c>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80046cc:	4b34      	ldr	r3, [pc, #208]	; (80047a0 <MX_ADC1_Init+0x11c>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80046d2:	4b33      	ldr	r3, [pc, #204]	; (80047a0 <MX_ADC1_Init+0x11c>)
 80046d4:	4a34      	ldr	r2, [pc, #208]	; (80047a8 <MX_ADC1_Init+0x124>)
 80046d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80046d8:	4b31      	ldr	r3, [pc, #196]	; (80047a0 <MX_ADC1_Init+0x11c>)
 80046da:	2200      	movs	r2, #0
 80046dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80046de:	4b30      	ldr	r3, [pc, #192]	; (80047a0 <MX_ADC1_Init+0x11c>)
 80046e0:	2201      	movs	r2, #1
 80046e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80046e4:	4b2e      	ldr	r3, [pc, #184]	; (80047a0 <MX_ADC1_Init+0x11c>)
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80046ec:	4b2c      	ldr	r3, [pc, #176]	; (80047a0 <MX_ADC1_Init+0x11c>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80046f2:	482b      	ldr	r0, [pc, #172]	; (80047a0 <MX_ADC1_Init+0x11c>)
 80046f4:	f000 ff16 	bl	8005524 <HAL_ADC_Init>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 80046fe:	f000 fb07 	bl	8004d10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8004702:	2309      	movs	r3, #9
 8004704:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8004706:	2301      	movs	r3, #1
 8004708:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800470a:	2306      	movs	r3, #6
 800470c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800470e:	f107 0320 	add.w	r3, r7, #32
 8004712:	4619      	mov	r1, r3
 8004714:	4822      	ldr	r0, [pc, #136]	; (80047a0 <MX_ADC1_Init+0x11c>)
 8004716:	f001 f9e7 	bl	8005ae8 <HAL_ADC_ConfigChannel>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8004720:	f000 faf6 	bl	8004d10 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8004724:	2300      	movs	r3, #0
 8004726:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8004728:	2301      	movs	r3, #1
 800472a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 800472c:	2303      	movs	r3, #3
 800472e:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_56CYCLES;
 8004730:	2303      	movs	r3, #3
 8004732:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8004734:	2300      	movs	r3, #0
 8004736:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8004738:	4b1c      	ldr	r3, [pc, #112]	; (80047ac <MX_ADC1_Init+0x128>)
 800473a:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800473c:	2300      	movs	r3, #0
 800473e:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8004740:	2300      	movs	r3, #0
 8004742:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8004744:	2300      	movs	r3, #0
 8004746:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8004748:	463b      	mov	r3, r7
 800474a:	4619      	mov	r1, r3
 800474c:	4814      	ldr	r0, [pc, #80]	; (80047a0 <MX_ADC1_Init+0x11c>)
 800474e:	f001 fdc9 	bl	80062e4 <HAL_ADCEx_InjectedConfigChannel>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8004758:	f000 fada 	bl	8004d10 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 800475c:	2302      	movs	r3, #2
 800475e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8004760:	2302      	movs	r3, #2
 8004762:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8004764:	463b      	mov	r3, r7
 8004766:	4619      	mov	r1, r3
 8004768:	480d      	ldr	r0, [pc, #52]	; (80047a0 <MX_ADC1_Init+0x11c>)
 800476a:	f001 fdbb 	bl	80062e4 <HAL_ADCEx_InjectedConfigChannel>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8004774:	f000 facc 	bl	8004d10 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_8;
 8004778:	2308      	movs	r3, #8
 800477a:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 800477c:	2303      	movs	r3, #3
 800477e:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004780:	2300      	movs	r3, #0
 8004782:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8004784:	463b      	mov	r3, r7
 8004786:	4619      	mov	r1, r3
 8004788:	4805      	ldr	r0, [pc, #20]	; (80047a0 <MX_ADC1_Init+0x11c>)
 800478a:	f001 fdab 	bl	80062e4 <HAL_ADCEx_InjectedConfigChannel>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8004794:	f000 fabc 	bl	8004d10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004798:	bf00      	nop
 800479a:	3730      	adds	r7, #48	; 0x30
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	20006f9c 	.word	0x20006f9c
 80047a4:	40012000 	.word	0x40012000
 80047a8:	0f000001 	.word	0x0f000001
 80047ac:	000f0001 	.word	0x000f0001

080047b0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80047b4:	4b12      	ldr	r3, [pc, #72]	; (8004800 <MX_I2C2_Init+0x50>)
 80047b6:	4a13      	ldr	r2, [pc, #76]	; (8004804 <MX_I2C2_Init+0x54>)
 80047b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80047ba:	4b11      	ldr	r3, [pc, #68]	; (8004800 <MX_I2C2_Init+0x50>)
 80047bc:	4a12      	ldr	r2, [pc, #72]	; (8004808 <MX_I2C2_Init+0x58>)
 80047be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80047c0:	4b0f      	ldr	r3, [pc, #60]	; (8004800 <MX_I2C2_Init+0x50>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80047c6:	4b0e      	ldr	r3, [pc, #56]	; (8004800 <MX_I2C2_Init+0x50>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80047cc:	4b0c      	ldr	r3, [pc, #48]	; (8004800 <MX_I2C2_Init+0x50>)
 80047ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80047d2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80047d4:	4b0a      	ldr	r3, [pc, #40]	; (8004800 <MX_I2C2_Init+0x50>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80047da:	4b09      	ldr	r3, [pc, #36]	; (8004800 <MX_I2C2_Init+0x50>)
 80047dc:	2200      	movs	r2, #0
 80047de:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80047e0:	4b07      	ldr	r3, [pc, #28]	; (8004800 <MX_I2C2_Init+0x50>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80047e6:	4b06      	ldr	r3, [pc, #24]	; (8004800 <MX_I2C2_Init+0x50>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80047ec:	4804      	ldr	r0, [pc, #16]	; (8004800 <MX_I2C2_Init+0x50>)
 80047ee:	f002 fda3 	bl	8007338 <HAL_I2C_Init>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80047f8:	f000 fa8a 	bl	8004d10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80047fc:	bf00      	nop
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	20007044 	.word	0x20007044
 8004804:	40005800 	.word	0x40005800
 8004808:	000186a0 	.word	0x000186a0

0800480c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004810:	4b17      	ldr	r3, [pc, #92]	; (8004870 <MX_SPI1_Init+0x64>)
 8004812:	4a18      	ldr	r2, [pc, #96]	; (8004874 <MX_SPI1_Init+0x68>)
 8004814:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004816:	4b16      	ldr	r3, [pc, #88]	; (8004870 <MX_SPI1_Init+0x64>)
 8004818:	f44f 7282 	mov.w	r2, #260	; 0x104
 800481c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800481e:	4b14      	ldr	r3, [pc, #80]	; (8004870 <MX_SPI1_Init+0x64>)
 8004820:	2200      	movs	r2, #0
 8004822:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004824:	4b12      	ldr	r3, [pc, #72]	; (8004870 <MX_SPI1_Init+0x64>)
 8004826:	2200      	movs	r2, #0
 8004828:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800482a:	4b11      	ldr	r3, [pc, #68]	; (8004870 <MX_SPI1_Init+0x64>)
 800482c:	2200      	movs	r2, #0
 800482e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004830:	4b0f      	ldr	r3, [pc, #60]	; (8004870 <MX_SPI1_Init+0x64>)
 8004832:	2200      	movs	r2, #0
 8004834:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004836:	4b0e      	ldr	r3, [pc, #56]	; (8004870 <MX_SPI1_Init+0x64>)
 8004838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800483c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800483e:	4b0c      	ldr	r3, [pc, #48]	; (8004870 <MX_SPI1_Init+0x64>)
 8004840:	2208      	movs	r2, #8
 8004842:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004844:	4b0a      	ldr	r3, [pc, #40]	; (8004870 <MX_SPI1_Init+0x64>)
 8004846:	2200      	movs	r2, #0
 8004848:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800484a:	4b09      	ldr	r3, [pc, #36]	; (8004870 <MX_SPI1_Init+0x64>)
 800484c:	2200      	movs	r2, #0
 800484e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004850:	4b07      	ldr	r3, [pc, #28]	; (8004870 <MX_SPI1_Init+0x64>)
 8004852:	2200      	movs	r2, #0
 8004854:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004856:	4b06      	ldr	r3, [pc, #24]	; (8004870 <MX_SPI1_Init+0x64>)
 8004858:	220a      	movs	r2, #10
 800485a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800485c:	4804      	ldr	r0, [pc, #16]	; (8004870 <MX_SPI1_Init+0x64>)
 800485e:	f004 f983 	bl	8008b68 <HAL_SPI_Init>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004868:	f000 fa52 	bl	8004d10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800486c:	bf00      	nop
 800486e:	bd80      	pop	{r7, pc}
 8004870:	20007098 	.word	0x20007098
 8004874:	40013000 	.word	0x40013000

08004878 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800487c:	4b17      	ldr	r3, [pc, #92]	; (80048dc <MX_SPI2_Init+0x64>)
 800487e:	4a18      	ldr	r2, [pc, #96]	; (80048e0 <MX_SPI2_Init+0x68>)
 8004880:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004882:	4b16      	ldr	r3, [pc, #88]	; (80048dc <MX_SPI2_Init+0x64>)
 8004884:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004888:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800488a:	4b14      	ldr	r3, [pc, #80]	; (80048dc <MX_SPI2_Init+0x64>)
 800488c:	2200      	movs	r2, #0
 800488e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004890:	4b12      	ldr	r3, [pc, #72]	; (80048dc <MX_SPI2_Init+0x64>)
 8004892:	2200      	movs	r2, #0
 8004894:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004896:	4b11      	ldr	r3, [pc, #68]	; (80048dc <MX_SPI2_Init+0x64>)
 8004898:	2200      	movs	r2, #0
 800489a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800489c:	4b0f      	ldr	r3, [pc, #60]	; (80048dc <MX_SPI2_Init+0x64>)
 800489e:	2200      	movs	r2, #0
 80048a0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80048a2:	4b0e      	ldr	r3, [pc, #56]	; (80048dc <MX_SPI2_Init+0x64>)
 80048a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048a8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80048aa:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <MX_SPI2_Init+0x64>)
 80048ac:	2230      	movs	r2, #48	; 0x30
 80048ae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80048b0:	4b0a      	ldr	r3, [pc, #40]	; (80048dc <MX_SPI2_Init+0x64>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80048b6:	4b09      	ldr	r3, [pc, #36]	; (80048dc <MX_SPI2_Init+0x64>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048bc:	4b07      	ldr	r3, [pc, #28]	; (80048dc <MX_SPI2_Init+0x64>)
 80048be:	2200      	movs	r2, #0
 80048c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80048c2:	4b06      	ldr	r3, [pc, #24]	; (80048dc <MX_SPI2_Init+0x64>)
 80048c4:	220a      	movs	r2, #10
 80048c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80048c8:	4804      	ldr	r0, [pc, #16]	; (80048dc <MX_SPI2_Init+0x64>)
 80048ca:	f004 f94d 	bl	8008b68 <HAL_SPI_Init>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80048d4:	f000 fa1c 	bl	8004d10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80048d8:	bf00      	nop
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	200070f0 	.word	0x200070f0
 80048e0:	40003800 	.word	0x40003800

080048e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08c      	sub	sp, #48	; 0x30
 80048e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80048ea:	f107 030c 	add.w	r3, r7, #12
 80048ee:	2224      	movs	r2, #36	; 0x24
 80048f0:	2100      	movs	r1, #0
 80048f2:	4618      	mov	r0, r3
 80048f4:	f006 fbee 	bl	800b0d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048f8:	1d3b      	adds	r3, r7, #4
 80048fa:	2200      	movs	r2, #0
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004900:	4b21      	ldr	r3, [pc, #132]	; (8004988 <MX_TIM2_Init+0xa4>)
 8004902:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004906:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004908:	4b1f      	ldr	r3, [pc, #124]	; (8004988 <MX_TIM2_Init+0xa4>)
 800490a:	2200      	movs	r2, #0
 800490c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800490e:	4b1e      	ldr	r3, [pc, #120]	; (8004988 <MX_TIM2_Init+0xa4>)
 8004910:	2200      	movs	r2, #0
 8004912:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8004914:	4b1c      	ldr	r3, [pc, #112]	; (8004988 <MX_TIM2_Init+0xa4>)
 8004916:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800491a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800491c:	4b1a      	ldr	r3, [pc, #104]	; (8004988 <MX_TIM2_Init+0xa4>)
 800491e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004922:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004924:	4b18      	ldr	r3, [pc, #96]	; (8004988 <MX_TIM2_Init+0xa4>)
 8004926:	2200      	movs	r2, #0
 8004928:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800492a:	2301      	movs	r3, #1
 800492c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800492e:	2302      	movs	r3, #2
 8004930:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004932:	2301      	movs	r3, #1
 8004934:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004936:	2300      	movs	r3, #0
 8004938:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 800493a:	2302      	movs	r3, #2
 800493c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800493e:	2302      	movs	r3, #2
 8004940:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004942:	2301      	movs	r3, #1
 8004944:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004946:	2300      	movs	r3, #0
 8004948:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 800494a:	2302      	movs	r3, #2
 800494c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800494e:	f107 030c 	add.w	r3, r7, #12
 8004952:	4619      	mov	r1, r3
 8004954:	480c      	ldr	r0, [pc, #48]	; (8004988 <MX_TIM2_Init+0xa4>)
 8004956:	f005 f8c5 	bl	8009ae4 <HAL_TIM_Encoder_Init>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8004960:	f000 f9d6 	bl	8004d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004964:	2300      	movs	r3, #0
 8004966:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004968:	2300      	movs	r3, #0
 800496a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800496c:	1d3b      	adds	r3, r7, #4
 800496e:	4619      	mov	r1, r3
 8004970:	4805      	ldr	r0, [pc, #20]	; (8004988 <MX_TIM2_Init+0xa4>)
 8004972:	f005 fee3 	bl	800a73c <HAL_TIMEx_MasterConfigSynchronization>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800497c:	f000 f9c8 	bl	8004d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004980:	bf00      	nop
 8004982:	3730      	adds	r7, #48	; 0x30
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	20007148 	.word	0x20007148

0800498c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08e      	sub	sp, #56	; 0x38
 8004990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004992:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004996:	2200      	movs	r2, #0
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	605a      	str	r2, [r3, #4]
 800499c:	609a      	str	r2, [r3, #8]
 800499e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049a0:	f107 0320 	add.w	r3, r7, #32
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80049aa:	1d3b      	adds	r3, r7, #4
 80049ac:	2200      	movs	r2, #0
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	605a      	str	r2, [r3, #4]
 80049b2:	609a      	str	r2, [r3, #8]
 80049b4:	60da      	str	r2, [r3, #12]
 80049b6:	611a      	str	r2, [r3, #16]
 80049b8:	615a      	str	r2, [r3, #20]
 80049ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80049bc:	4b32      	ldr	r3, [pc, #200]	; (8004a88 <MX_TIM3_Init+0xfc>)
 80049be:	4a33      	ldr	r2, [pc, #204]	; (8004a8c <MX_TIM3_Init+0x100>)
 80049c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80049c2:	4b31      	ldr	r3, [pc, #196]	; (8004a88 <MX_TIM3_Init+0xfc>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049c8:	4b2f      	ldr	r3, [pc, #188]	; (8004a88 <MX_TIM3_Init+0xfc>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3124;
 80049ce:	4b2e      	ldr	r3, [pc, #184]	; (8004a88 <MX_TIM3_Init+0xfc>)
 80049d0:	f640 4234 	movw	r2, #3124	; 0xc34
 80049d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049d6:	4b2c      	ldr	r3, [pc, #176]	; (8004a88 <MX_TIM3_Init+0xfc>)
 80049d8:	2200      	movs	r2, #0
 80049da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80049dc:	4b2a      	ldr	r3, [pc, #168]	; (8004a88 <MX_TIM3_Init+0xfc>)
 80049de:	2280      	movs	r2, #128	; 0x80
 80049e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80049e2:	4829      	ldr	r0, [pc, #164]	; (8004a88 <MX_TIM3_Init+0xfc>)
 80049e4:	f004 fe68 	bl	80096b8 <HAL_TIM_Base_Init>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80049ee:	f000 f98f 	bl	8004d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80049f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049fc:	4619      	mov	r1, r3
 80049fe:	4822      	ldr	r0, [pc, #136]	; (8004a88 <MX_TIM3_Init+0xfc>)
 8004a00:	f005 fae0 	bl	8009fc4 <HAL_TIM_ConfigClockSource>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004a0a:	f000 f981 	bl	8004d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004a0e:	481e      	ldr	r0, [pc, #120]	; (8004a88 <MX_TIM3_Init+0xfc>)
 8004a10:	f004 ff5e 	bl	80098d0 <HAL_TIM_PWM_Init>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004a1a:	f000 f979 	bl	8004d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a22:	2300      	movs	r3, #0
 8004a24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004a26:	f107 0320 	add.w	r3, r7, #32
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	4816      	ldr	r0, [pc, #88]	; (8004a88 <MX_TIM3_Init+0xfc>)
 8004a2e:	f005 fe85 	bl	800a73c <HAL_TIMEx_MasterConfigSynchronization>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004a38:	f000 f96a 	bl	8004d10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a3c:	2360      	movs	r3, #96	; 0x60
 8004a3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004a40:	2300      	movs	r3, #0
 8004a42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a44:	2300      	movs	r3, #0
 8004a46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a4c:	1d3b      	adds	r3, r7, #4
 8004a4e:	2200      	movs	r2, #0
 8004a50:	4619      	mov	r1, r3
 8004a52:	480d      	ldr	r0, [pc, #52]	; (8004a88 <MX_TIM3_Init+0xfc>)
 8004a54:	f005 f9f4 	bl	8009e40 <HAL_TIM_PWM_ConfigChannel>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004a5e:	f000 f957 	bl	8004d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004a62:	1d3b      	adds	r3, r7, #4
 8004a64:	2204      	movs	r2, #4
 8004a66:	4619      	mov	r1, r3
 8004a68:	4807      	ldr	r0, [pc, #28]	; (8004a88 <MX_TIM3_Init+0xfc>)
 8004a6a:	f005 f9e9 	bl	8009e40 <HAL_TIM_PWM_ConfigChannel>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8004a74:	f000 f94c 	bl	8004d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004a78:	4803      	ldr	r0, [pc, #12]	; (8004a88 <MX_TIM3_Init+0xfc>)
 8004a7a:	f000 fb87 	bl	800518c <HAL_TIM_MspPostInit>

}
 8004a7e:	bf00      	nop
 8004a80:	3738      	adds	r7, #56	; 0x38
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20007190 	.word	0x20007190
 8004a8c:	40000400 	.word	0x40000400

08004a90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08c      	sub	sp, #48	; 0x30
 8004a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004a96:	f107 030c 	add.w	r3, r7, #12
 8004a9a:	2224      	movs	r2, #36	; 0x24
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f006 fb18 	bl	800b0d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004aa4:	1d3b      	adds	r3, r7, #4
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004aac:	4b20      	ldr	r3, [pc, #128]	; (8004b30 <MX_TIM4_Init+0xa0>)
 8004aae:	4a21      	ldr	r2, [pc, #132]	; (8004b34 <MX_TIM4_Init+0xa4>)
 8004ab0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004ab2:	4b1f      	ldr	r3, [pc, #124]	; (8004b30 <MX_TIM4_Init+0xa0>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ab8:	4b1d      	ldr	r3, [pc, #116]	; (8004b30 <MX_TIM4_Init+0xa0>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004abe:	4b1c      	ldr	r3, [pc, #112]	; (8004b30 <MX_TIM4_Init+0xa0>)
 8004ac0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ac4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ac6:	4b1a      	ldr	r3, [pc, #104]	; (8004b30 <MX_TIM4_Init+0xa0>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004acc:	4b18      	ldr	r3, [pc, #96]	; (8004b30 <MX_TIM4_Init+0xa0>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004ada:	2301      	movs	r3, #1
 8004adc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004aea:	2301      	movs	r3, #1
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004aee:	2300      	movs	r3, #0
 8004af0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8004af2:	2302      	movs	r3, #2
 8004af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004af6:	f107 030c 	add.w	r3, r7, #12
 8004afa:	4619      	mov	r1, r3
 8004afc:	480c      	ldr	r0, [pc, #48]	; (8004b30 <MX_TIM4_Init+0xa0>)
 8004afe:	f004 fff1 	bl	8009ae4 <HAL_TIM_Encoder_Init>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8004b08:	f000 f902 	bl	8004d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b10:	2300      	movs	r3, #0
 8004b12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004b14:	1d3b      	adds	r3, r7, #4
 8004b16:	4619      	mov	r1, r3
 8004b18:	4805      	ldr	r0, [pc, #20]	; (8004b30 <MX_TIM4_Init+0xa0>)
 8004b1a:	f005 fe0f 	bl	800a73c <HAL_TIMEx_MasterConfigSynchronization>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004b24:	f000 f8f4 	bl	8004d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004b28:	bf00      	nop
 8004b2a:	3730      	adds	r7, #48	; 0x30
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	200071d8 	.word	0x200071d8
 8004b34:	40000800 	.word	0x40000800

08004b38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004b3c:	4b11      	ldr	r3, [pc, #68]	; (8004b84 <MX_USART1_UART_Init+0x4c>)
 8004b3e:	4a12      	ldr	r2, [pc, #72]	; (8004b88 <MX_USART1_UART_Init+0x50>)
 8004b40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004b42:	4b10      	ldr	r3, [pc, #64]	; (8004b84 <MX_USART1_UART_Init+0x4c>)
 8004b44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004b48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004b4a:	4b0e      	ldr	r3, [pc, #56]	; (8004b84 <MX_USART1_UART_Init+0x4c>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004b50:	4b0c      	ldr	r3, [pc, #48]	; (8004b84 <MX_USART1_UART_Init+0x4c>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004b56:	4b0b      	ldr	r3, [pc, #44]	; (8004b84 <MX_USART1_UART_Init+0x4c>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8004b5c:	4b09      	ldr	r3, [pc, #36]	; (8004b84 <MX_USART1_UART_Init+0x4c>)
 8004b5e:	2208      	movs	r2, #8
 8004b60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b62:	4b08      	ldr	r3, [pc, #32]	; (8004b84 <MX_USART1_UART_Init+0x4c>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b68:	4b06      	ldr	r3, [pc, #24]	; (8004b84 <MX_USART1_UART_Init+0x4c>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8004b6e:	4805      	ldr	r0, [pc, #20]	; (8004b84 <MX_USART1_UART_Init+0x4c>)
 8004b70:	f005 fe66 	bl	800a840 <HAL_HalfDuplex_Init>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004b7a:	f000 f8c9 	bl	8004d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004b7e:	bf00      	nop
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	20007220 	.word	0x20007220
 8004b88:	40011000 	.word	0x40011000

08004b8c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004b90:	4b11      	ldr	r3, [pc, #68]	; (8004bd8 <MX_USART6_UART_Init+0x4c>)
 8004b92:	4a12      	ldr	r2, [pc, #72]	; (8004bdc <MX_USART6_UART_Init+0x50>)
 8004b94:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004b96:	4b10      	ldr	r3, [pc, #64]	; (8004bd8 <MX_USART6_UART_Init+0x4c>)
 8004b98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004b9c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004b9e:	4b0e      	ldr	r3, [pc, #56]	; (8004bd8 <MX_USART6_UART_Init+0x4c>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004ba4:	4b0c      	ldr	r3, [pc, #48]	; (8004bd8 <MX_USART6_UART_Init+0x4c>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004baa:	4b0b      	ldr	r3, [pc, #44]	; (8004bd8 <MX_USART6_UART_Init+0x4c>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004bb0:	4b09      	ldr	r3, [pc, #36]	; (8004bd8 <MX_USART6_UART_Init+0x4c>)
 8004bb2:	220c      	movs	r2, #12
 8004bb4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004bb6:	4b08      	ldr	r3, [pc, #32]	; (8004bd8 <MX_USART6_UART_Init+0x4c>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bbc:	4b06      	ldr	r3, [pc, #24]	; (8004bd8 <MX_USART6_UART_Init+0x4c>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 8004bc2:	4805      	ldr	r0, [pc, #20]	; (8004bd8 <MX_USART6_UART_Init+0x4c>)
 8004bc4:	f005 fe3c 	bl	800a840 <HAL_HalfDuplex_Init>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004bce:	f000 f89f 	bl	8004d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004bd2:	bf00      	nop
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20007264 	.word	0x20007264
 8004bdc:	40011400 	.word	0x40011400

08004be0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004be6:	2300      	movs	r3, #0
 8004be8:	607b      	str	r3, [r7, #4]
 8004bea:	4b0c      	ldr	r3, [pc, #48]	; (8004c1c <MX_DMA_Init+0x3c>)
 8004bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bee:	4a0b      	ldr	r2, [pc, #44]	; (8004c1c <MX_DMA_Init+0x3c>)
 8004bf0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8004bf6:	4b09      	ldr	r3, [pc, #36]	; (8004c1c <MX_DMA_Init+0x3c>)
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bfe:	607b      	str	r3, [r7, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8004c02:	2200      	movs	r2, #0
 8004c04:	2100      	movs	r1, #0
 8004c06:	203c      	movs	r0, #60	; 0x3c
 8004c08:	f001 fde1 	bl	80067ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8004c0c:	203c      	movs	r0, #60	; 0x3c
 8004c0e:	f001 fdfa 	bl	8006806 <HAL_NVIC_EnableIRQ>

}
 8004c12:	bf00      	nop
 8004c14:	3708      	adds	r7, #8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	40023800 	.word	0x40023800

08004c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b088      	sub	sp, #32
 8004c24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c26:	f107 030c 	add.w	r3, r7, #12
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	605a      	str	r2, [r3, #4]
 8004c30:	609a      	str	r2, [r3, #8]
 8004c32:	60da      	str	r2, [r3, #12]
 8004c34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c36:	2300      	movs	r3, #0
 8004c38:	60bb      	str	r3, [r7, #8]
 8004c3a:	4b2a      	ldr	r3, [pc, #168]	; (8004ce4 <MX_GPIO_Init+0xc4>)
 8004c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3e:	4a29      	ldr	r2, [pc, #164]	; (8004ce4 <MX_GPIO_Init+0xc4>)
 8004c40:	f043 0301 	orr.w	r3, r3, #1
 8004c44:	6313      	str	r3, [r2, #48]	; 0x30
 8004c46:	4b27      	ldr	r3, [pc, #156]	; (8004ce4 <MX_GPIO_Init+0xc4>)
 8004c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	60bb      	str	r3, [r7, #8]
 8004c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c52:	2300      	movs	r3, #0
 8004c54:	607b      	str	r3, [r7, #4]
 8004c56:	4b23      	ldr	r3, [pc, #140]	; (8004ce4 <MX_GPIO_Init+0xc4>)
 8004c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5a:	4a22      	ldr	r2, [pc, #136]	; (8004ce4 <MX_GPIO_Init+0xc4>)
 8004c5c:	f043 0302 	orr.w	r3, r3, #2
 8004c60:	6313      	str	r3, [r2, #48]	; 0x30
 8004c62:	4b20      	ldr	r3, [pc, #128]	; (8004ce4 <MX_GPIO_Init+0xc4>)
 8004c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	607b      	str	r3, [r7, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c6e:	2300      	movs	r3, #0
 8004c70:	603b      	str	r3, [r7, #0]
 8004c72:	4b1c      	ldr	r3, [pc, #112]	; (8004ce4 <MX_GPIO_Init+0xc4>)
 8004c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c76:	4a1b      	ldr	r2, [pc, #108]	; (8004ce4 <MX_GPIO_Init+0xc4>)
 8004c78:	f043 0304 	orr.w	r3, r3, #4
 8004c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c7e:	4b19      	ldr	r3, [pc, #100]	; (8004ce4 <MX_GPIO_Init+0xc4>)
 8004c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c82:	f003 0304 	and.w	r3, r3, #4
 8004c86:	603b      	str	r3, [r7, #0]
 8004c88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004c90:	4815      	ldr	r0, [pc, #84]	; (8004ce8 <MX_GPIO_Init+0xc8>)
 8004c92:	f002 fb37 	bl	8007304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8004c96:	2201      	movs	r2, #1
 8004c98:	2110      	movs	r1, #16
 8004c9a:	4814      	ldr	r0, [pc, #80]	; (8004cec <MX_GPIO_Init+0xcc>)
 8004c9c:	f002 fb32 	bl	8007304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8004ca0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ca4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004caa:	2300      	movs	r3, #0
 8004cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8004cb2:	f107 030c 	add.w	r3, r7, #12
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	480b      	ldr	r0, [pc, #44]	; (8004ce8 <MX_GPIO_Init+0xc8>)
 8004cba:	f002 f99f 	bl	8006ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 8004cbe:	2310      	movs	r3, #16
 8004cc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 8004cce:	f107 030c 	add.w	r3, r7, #12
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	4805      	ldr	r0, [pc, #20]	; (8004cec <MX_GPIO_Init+0xcc>)
 8004cd6:	f002 f991 	bl	8006ffc <HAL_GPIO_Init>

}
 8004cda:	bf00      	nop
 8004cdc:	3720      	adds	r7, #32
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	40023800 	.word	0x40023800
 8004ce8:	40020800 	.word	0x40020800
 8004cec:	40020000 	.word	0x40020000

08004cf0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)   // get data after conversion
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
adc_flag=1;
 8004cf8:	4b04      	ldr	r3, [pc, #16]	; (8004d0c <HAL_ADC_ConvCpltCallback+0x1c>)
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	701a      	strb	r2, [r3, #0]


}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	20003400 	.word	0x20003400

08004d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d14:	b672      	cpsid	i
}
 8004d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004d18:	e7fe      	b.n	8004d18 <Error_Handler+0x8>
	...

08004d1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d22:	2300      	movs	r3, #0
 8004d24:	607b      	str	r3, [r7, #4]
 8004d26:	4b10      	ldr	r3, [pc, #64]	; (8004d68 <HAL_MspInit+0x4c>)
 8004d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2a:	4a0f      	ldr	r2, [pc, #60]	; (8004d68 <HAL_MspInit+0x4c>)
 8004d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d30:	6453      	str	r3, [r2, #68]	; 0x44
 8004d32:	4b0d      	ldr	r3, [pc, #52]	; (8004d68 <HAL_MspInit+0x4c>)
 8004d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d3a:	607b      	str	r3, [r7, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d3e:	2300      	movs	r3, #0
 8004d40:	603b      	str	r3, [r7, #0]
 8004d42:	4b09      	ldr	r3, [pc, #36]	; (8004d68 <HAL_MspInit+0x4c>)
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	4a08      	ldr	r2, [pc, #32]	; (8004d68 <HAL_MspInit+0x4c>)
 8004d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d4e:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <HAL_MspInit+0x4c>)
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d56:	603b      	str	r3, [r7, #0]
 8004d58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	40023800 	.word	0x40023800

08004d6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08a      	sub	sp, #40	; 0x28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d74:	f107 0314 	add.w	r3, r7, #20
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	605a      	str	r2, [r3, #4]
 8004d7e:	609a      	str	r2, [r3, #8]
 8004d80:	60da      	str	r2, [r3, #12]
 8004d82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a3c      	ldr	r2, [pc, #240]	; (8004e7c <HAL_ADC_MspInit+0x110>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d171      	bne.n	8004e72 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004d8e:	2300      	movs	r3, #0
 8004d90:	613b      	str	r3, [r7, #16]
 8004d92:	4b3b      	ldr	r3, [pc, #236]	; (8004e80 <HAL_ADC_MspInit+0x114>)
 8004d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d96:	4a3a      	ldr	r2, [pc, #232]	; (8004e80 <HAL_ADC_MspInit+0x114>)
 8004d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8004d9e:	4b38      	ldr	r3, [pc, #224]	; (8004e80 <HAL_ADC_MspInit+0x114>)
 8004da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da6:	613b      	str	r3, [r7, #16]
 8004da8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004daa:	2300      	movs	r3, #0
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	4b34      	ldr	r3, [pc, #208]	; (8004e80 <HAL_ADC_MspInit+0x114>)
 8004db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db2:	4a33      	ldr	r2, [pc, #204]	; (8004e80 <HAL_ADC_MspInit+0x114>)
 8004db4:	f043 0301 	orr.w	r3, r3, #1
 8004db8:	6313      	str	r3, [r2, #48]	; 0x30
 8004dba:	4b31      	ldr	r3, [pc, #196]	; (8004e80 <HAL_ADC_MspInit+0x114>)
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60bb      	str	r3, [r7, #8]
 8004dca:	4b2d      	ldr	r3, [pc, #180]	; (8004e80 <HAL_ADC_MspInit+0x114>)
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dce:	4a2c      	ldr	r2, [pc, #176]	; (8004e80 <HAL_ADC_MspInit+0x114>)
 8004dd0:	f043 0302 	orr.w	r3, r3, #2
 8004dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8004dd6:	4b2a      	ldr	r3, [pc, #168]	; (8004e80 <HAL_ADC_MspInit+0x114>)
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	60bb      	str	r3, [r7, #8]
 8004de0:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA0-WKUP     ------> ADC1_IN0
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0;
 8004de2:	2305      	movs	r3, #5
 8004de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004de6:	2303      	movs	r3, #3
 8004de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dea:	2300      	movs	r3, #0
 8004dec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dee:	f107 0314 	add.w	r3, r7, #20
 8004df2:	4619      	mov	r1, r3
 8004df4:	4823      	ldr	r0, [pc, #140]	; (8004e84 <HAL_ADC_MspInit+0x118>)
 8004df6:	f002 f901 	bl	8006ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e02:	2300      	movs	r3, #0
 8004e04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e06:	f107 0314 	add.w	r3, r7, #20
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	481e      	ldr	r0, [pc, #120]	; (8004e88 <HAL_ADC_MspInit+0x11c>)
 8004e0e:	f002 f8f5 	bl	8006ffc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8004e12:	4b1e      	ldr	r3, [pc, #120]	; (8004e8c <HAL_ADC_MspInit+0x120>)
 8004e14:	4a1e      	ldr	r2, [pc, #120]	; (8004e90 <HAL_ADC_MspInit+0x124>)
 8004e16:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004e18:	4b1c      	ldr	r3, [pc, #112]	; (8004e8c <HAL_ADC_MspInit+0x120>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e1e:	4b1b      	ldr	r3, [pc, #108]	; (8004e8c <HAL_ADC_MspInit+0x120>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e24:	4b19      	ldr	r3, [pc, #100]	; (8004e8c <HAL_ADC_MspInit+0x120>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004e2a:	4b18      	ldr	r3, [pc, #96]	; (8004e8c <HAL_ADC_MspInit+0x120>)
 8004e2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e30:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004e32:	4b16      	ldr	r3, [pc, #88]	; (8004e8c <HAL_ADC_MspInit+0x120>)
 8004e34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e38:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004e3a:	4b14      	ldr	r3, [pc, #80]	; (8004e8c <HAL_ADC_MspInit+0x120>)
 8004e3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e40:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004e42:	4b12      	ldr	r3, [pc, #72]	; (8004e8c <HAL_ADC_MspInit+0x120>)
 8004e44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e48:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004e4a:	4b10      	ldr	r3, [pc, #64]	; (8004e8c <HAL_ADC_MspInit+0x120>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e50:	4b0e      	ldr	r3, [pc, #56]	; (8004e8c <HAL_ADC_MspInit+0x120>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004e56:	480d      	ldr	r0, [pc, #52]	; (8004e8c <HAL_ADC_MspInit+0x120>)
 8004e58:	f001 fcf0 	bl	800683c <HAL_DMA_Init>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8004e62:	f7ff ff55 	bl	8004d10 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a08      	ldr	r2, [pc, #32]	; (8004e8c <HAL_ADC_MspInit+0x120>)
 8004e6a:	639a      	str	r2, [r3, #56]	; 0x38
 8004e6c:	4a07      	ldr	r2, [pc, #28]	; (8004e8c <HAL_ADC_MspInit+0x120>)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004e72:	bf00      	nop
 8004e74:	3728      	adds	r7, #40	; 0x28
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	40012000 	.word	0x40012000
 8004e80:	40023800 	.word	0x40023800
 8004e84:	40020000 	.word	0x40020000
 8004e88:	40020400 	.word	0x40020400
 8004e8c:	20006fe4 	.word	0x20006fe4
 8004e90:	40026470 	.word	0x40026470

08004e94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b08a      	sub	sp, #40	; 0x28
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e9c:	f107 0314 	add.w	r3, r7, #20
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	605a      	str	r2, [r3, #4]
 8004ea6:	609a      	str	r2, [r3, #8]
 8004ea8:	60da      	str	r2, [r3, #12]
 8004eaa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a22      	ldr	r2, [pc, #136]	; (8004f3c <HAL_I2C_MspInit+0xa8>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d13d      	bne.n	8004f32 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	613b      	str	r3, [r7, #16]
 8004eba:	4b21      	ldr	r3, [pc, #132]	; (8004f40 <HAL_I2C_MspInit+0xac>)
 8004ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebe:	4a20      	ldr	r2, [pc, #128]	; (8004f40 <HAL_I2C_MspInit+0xac>)
 8004ec0:	f043 0302 	orr.w	r3, r3, #2
 8004ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ec6:	4b1e      	ldr	r3, [pc, #120]	; (8004f40 <HAL_I2C_MspInit+0xac>)
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	613b      	str	r3, [r7, #16]
 8004ed0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB9     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004ed2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ed8:	2312      	movs	r3, #18
 8004eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004edc:	2300      	movs	r3, #0
 8004ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8004ee4:	2309      	movs	r3, #9
 8004ee6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ee8:	f107 0314 	add.w	r3, r7, #20
 8004eec:	4619      	mov	r1, r3
 8004eee:	4815      	ldr	r0, [pc, #84]	; (8004f44 <HAL_I2C_MspInit+0xb0>)
 8004ef0:	f002 f884 	bl	8006ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004ef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004efa:	2312      	movs	r3, #18
 8004efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004efe:	2300      	movs	r3, #0
 8004f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f02:	2303      	movs	r3, #3
 8004f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004f06:	2304      	movs	r3, #4
 8004f08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f0a:	f107 0314 	add.w	r3, r7, #20
 8004f0e:	4619      	mov	r1, r3
 8004f10:	480c      	ldr	r0, [pc, #48]	; (8004f44 <HAL_I2C_MspInit+0xb0>)
 8004f12:	f002 f873 	bl	8006ffc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004f16:	2300      	movs	r3, #0
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	4b09      	ldr	r3, [pc, #36]	; (8004f40 <HAL_I2C_MspInit+0xac>)
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	4a08      	ldr	r2, [pc, #32]	; (8004f40 <HAL_I2C_MspInit+0xac>)
 8004f20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f24:	6413      	str	r3, [r2, #64]	; 0x40
 8004f26:	4b06      	ldr	r3, [pc, #24]	; (8004f40 <HAL_I2C_MspInit+0xac>)
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004f32:	bf00      	nop
 8004f34:	3728      	adds	r7, #40	; 0x28
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	40005800 	.word	0x40005800
 8004f40:	40023800 	.word	0x40023800
 8004f44:	40020400 	.word	0x40020400

08004f48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08c      	sub	sp, #48	; 0x30
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f50:	f107 031c 	add.w	r3, r7, #28
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	605a      	str	r2, [r3, #4]
 8004f5a:	609a      	str	r2, [r3, #8]
 8004f5c:	60da      	str	r2, [r3, #12]
 8004f5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a32      	ldr	r2, [pc, #200]	; (8005030 <HAL_SPI_MspInit+0xe8>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d12c      	bne.n	8004fc4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	61bb      	str	r3, [r7, #24]
 8004f6e:	4b31      	ldr	r3, [pc, #196]	; (8005034 <HAL_SPI_MspInit+0xec>)
 8004f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f72:	4a30      	ldr	r2, [pc, #192]	; (8005034 <HAL_SPI_MspInit+0xec>)
 8004f74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f78:	6453      	str	r3, [r2, #68]	; 0x44
 8004f7a:	4b2e      	ldr	r3, [pc, #184]	; (8005034 <HAL_SPI_MspInit+0xec>)
 8004f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f82:	61bb      	str	r3, [r7, #24]
 8004f84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f86:	2300      	movs	r3, #0
 8004f88:	617b      	str	r3, [r7, #20]
 8004f8a:	4b2a      	ldr	r3, [pc, #168]	; (8005034 <HAL_SPI_MspInit+0xec>)
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8e:	4a29      	ldr	r2, [pc, #164]	; (8005034 <HAL_SPI_MspInit+0xec>)
 8004f90:	f043 0301 	orr.w	r3, r3, #1
 8004f94:	6313      	str	r3, [r2, #48]	; 0x30
 8004f96:	4b27      	ldr	r3, [pc, #156]	; (8005034 <HAL_SPI_MspInit+0xec>)
 8004f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	617b      	str	r3, [r7, #20]
 8004fa0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 8004fa2:	23e0      	movs	r3, #224	; 0xe0
 8004fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004faa:	2300      	movs	r3, #0
 8004fac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004fb2:	2305      	movs	r3, #5
 8004fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fb6:	f107 031c 	add.w	r3, r7, #28
 8004fba:	4619      	mov	r1, r3
 8004fbc:	481e      	ldr	r0, [pc, #120]	; (8005038 <HAL_SPI_MspInit+0xf0>)
 8004fbe:	f002 f81d 	bl	8006ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004fc2:	e031      	b.n	8005028 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a1c      	ldr	r2, [pc, #112]	; (800503c <HAL_SPI_MspInit+0xf4>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d12c      	bne.n	8005028 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004fce:	2300      	movs	r3, #0
 8004fd0:	613b      	str	r3, [r7, #16]
 8004fd2:	4b18      	ldr	r3, [pc, #96]	; (8005034 <HAL_SPI_MspInit+0xec>)
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd6:	4a17      	ldr	r2, [pc, #92]	; (8005034 <HAL_SPI_MspInit+0xec>)
 8004fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8004fde:	4b15      	ldr	r3, [pc, #84]	; (8005034 <HAL_SPI_MspInit+0xec>)
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fe6:	613b      	str	r3, [r7, #16]
 8004fe8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fea:	2300      	movs	r3, #0
 8004fec:	60fb      	str	r3, [r7, #12]
 8004fee:	4b11      	ldr	r3, [pc, #68]	; (8005034 <HAL_SPI_MspInit+0xec>)
 8004ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff2:	4a10      	ldr	r2, [pc, #64]	; (8005034 <HAL_SPI_MspInit+0xec>)
 8004ff4:	f043 0302 	orr.w	r3, r3, #2
 8004ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8004ffa:	4b0e      	ldr	r3, [pc, #56]	; (8005034 <HAL_SPI_MspInit+0xec>)
 8004ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8005006:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800500a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800500c:	2302      	movs	r3, #2
 800500e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005010:	2300      	movs	r3, #0
 8005012:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005014:	2303      	movs	r3, #3
 8005016:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005018:	2305      	movs	r3, #5
 800501a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800501c:	f107 031c 	add.w	r3, r7, #28
 8005020:	4619      	mov	r1, r3
 8005022:	4807      	ldr	r0, [pc, #28]	; (8005040 <HAL_SPI_MspInit+0xf8>)
 8005024:	f001 ffea 	bl	8006ffc <HAL_GPIO_Init>
}
 8005028:	bf00      	nop
 800502a:	3730      	adds	r7, #48	; 0x30
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	40013000 	.word	0x40013000
 8005034:	40023800 	.word	0x40023800
 8005038:	40020000 	.word	0x40020000
 800503c:	40003800 	.word	0x40003800
 8005040:	40020400 	.word	0x40020400

08005044 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b08c      	sub	sp, #48	; 0x30
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800504c:	f107 031c 	add.w	r3, r7, #28
 8005050:	2200      	movs	r2, #0
 8005052:	601a      	str	r2, [r3, #0]
 8005054:	605a      	str	r2, [r3, #4]
 8005056:	609a      	str	r2, [r3, #8]
 8005058:	60da      	str	r2, [r3, #12]
 800505a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005064:	d12d      	bne.n	80050c2 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005066:	2300      	movs	r3, #0
 8005068:	61bb      	str	r3, [r7, #24]
 800506a:	4b30      	ldr	r3, [pc, #192]	; (800512c <HAL_TIM_Encoder_MspInit+0xe8>)
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	4a2f      	ldr	r2, [pc, #188]	; (800512c <HAL_TIM_Encoder_MspInit+0xe8>)
 8005070:	f043 0301 	orr.w	r3, r3, #1
 8005074:	6413      	str	r3, [r2, #64]	; 0x40
 8005076:	4b2d      	ldr	r3, [pc, #180]	; (800512c <HAL_TIM_Encoder_MspInit+0xe8>)
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	61bb      	str	r3, [r7, #24]
 8005080:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005082:	2300      	movs	r3, #0
 8005084:	617b      	str	r3, [r7, #20]
 8005086:	4b29      	ldr	r3, [pc, #164]	; (800512c <HAL_TIM_Encoder_MspInit+0xe8>)
 8005088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508a:	4a28      	ldr	r2, [pc, #160]	; (800512c <HAL_TIM_Encoder_MspInit+0xe8>)
 800508c:	f043 0301 	orr.w	r3, r3, #1
 8005090:	6313      	str	r3, [r2, #48]	; 0x30
 8005092:	4b26      	ldr	r3, [pc, #152]	; (800512c <HAL_TIM_Encoder_MspInit+0xe8>)
 8005094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	617b      	str	r3, [r7, #20]
 800509c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 800509e:	f248 0302 	movw	r3, #32770	; 0x8002
 80050a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a4:	2302      	movs	r3, #2
 80050a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80050a8:	2301      	movs	r3, #1
 80050aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050ac:	2300      	movs	r3, #0
 80050ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80050b0:	2301      	movs	r3, #1
 80050b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050b4:	f107 031c 	add.w	r3, r7, #28
 80050b8:	4619      	mov	r1, r3
 80050ba:	481d      	ldr	r0, [pc, #116]	; (8005130 <HAL_TIM_Encoder_MspInit+0xec>)
 80050bc:	f001 ff9e 	bl	8006ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80050c0:	e030      	b.n	8005124 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a1b      	ldr	r2, [pc, #108]	; (8005134 <HAL_TIM_Encoder_MspInit+0xf0>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d12b      	bne.n	8005124 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80050cc:	2300      	movs	r3, #0
 80050ce:	613b      	str	r3, [r7, #16]
 80050d0:	4b16      	ldr	r3, [pc, #88]	; (800512c <HAL_TIM_Encoder_MspInit+0xe8>)
 80050d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d4:	4a15      	ldr	r2, [pc, #84]	; (800512c <HAL_TIM_Encoder_MspInit+0xe8>)
 80050d6:	f043 0304 	orr.w	r3, r3, #4
 80050da:	6413      	str	r3, [r2, #64]	; 0x40
 80050dc:	4b13      	ldr	r3, [pc, #76]	; (800512c <HAL_TIM_Encoder_MspInit+0xe8>)
 80050de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e0:	f003 0304 	and.w	r3, r3, #4
 80050e4:	613b      	str	r3, [r7, #16]
 80050e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050e8:	2300      	movs	r3, #0
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	4b0f      	ldr	r3, [pc, #60]	; (800512c <HAL_TIM_Encoder_MspInit+0xe8>)
 80050ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f0:	4a0e      	ldr	r2, [pc, #56]	; (800512c <HAL_TIM_Encoder_MspInit+0xe8>)
 80050f2:	f043 0302 	orr.w	r3, r3, #2
 80050f6:	6313      	str	r3, [r2, #48]	; 0x30
 80050f8:	4b0c      	ldr	r3, [pc, #48]	; (800512c <HAL_TIM_Encoder_MspInit+0xe8>)
 80050fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	60fb      	str	r3, [r7, #12]
 8005102:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005104:	23c0      	movs	r3, #192	; 0xc0
 8005106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005108:	2302      	movs	r3, #2
 800510a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800510c:	2301      	movs	r3, #1
 800510e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005110:	2300      	movs	r3, #0
 8005112:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005114:	2302      	movs	r3, #2
 8005116:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005118:	f107 031c 	add.w	r3, r7, #28
 800511c:	4619      	mov	r1, r3
 800511e:	4806      	ldr	r0, [pc, #24]	; (8005138 <HAL_TIM_Encoder_MspInit+0xf4>)
 8005120:	f001 ff6c 	bl	8006ffc <HAL_GPIO_Init>
}
 8005124:	bf00      	nop
 8005126:	3730      	adds	r7, #48	; 0x30
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	40023800 	.word	0x40023800
 8005130:	40020000 	.word	0x40020000
 8005134:	40000800 	.word	0x40000800
 8005138:	40020400 	.word	0x40020400

0800513c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a0e      	ldr	r2, [pc, #56]	; (8005184 <HAL_TIM_Base_MspInit+0x48>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d115      	bne.n	800517a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800514e:	2300      	movs	r3, #0
 8005150:	60fb      	str	r3, [r7, #12]
 8005152:	4b0d      	ldr	r3, [pc, #52]	; (8005188 <HAL_TIM_Base_MspInit+0x4c>)
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	4a0c      	ldr	r2, [pc, #48]	; (8005188 <HAL_TIM_Base_MspInit+0x4c>)
 8005158:	f043 0302 	orr.w	r3, r3, #2
 800515c:	6413      	str	r3, [r2, #64]	; 0x40
 800515e:	4b0a      	ldr	r3, [pc, #40]	; (8005188 <HAL_TIM_Base_MspInit+0x4c>)
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	60fb      	str	r3, [r7, #12]
 8005168:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800516a:	2200      	movs	r2, #0
 800516c:	2100      	movs	r1, #0
 800516e:	201d      	movs	r0, #29
 8005170:	f001 fb2d 	bl	80067ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005174:	201d      	movs	r0, #29
 8005176:	f001 fb46 	bl	8006806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800517a:	bf00      	nop
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	40000400 	.word	0x40000400
 8005188:	40023800 	.word	0x40023800

0800518c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b088      	sub	sp, #32
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005194:	f107 030c 	add.w	r3, r7, #12
 8005198:	2200      	movs	r2, #0
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	605a      	str	r2, [r3, #4]
 800519e:	609a      	str	r2, [r3, #8]
 80051a0:	60da      	str	r2, [r3, #12]
 80051a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a12      	ldr	r2, [pc, #72]	; (80051f4 <HAL_TIM_MspPostInit+0x68>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d11d      	bne.n	80051ea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051ae:	2300      	movs	r3, #0
 80051b0:	60bb      	str	r3, [r7, #8]
 80051b2:	4b11      	ldr	r3, [pc, #68]	; (80051f8 <HAL_TIM_MspPostInit+0x6c>)
 80051b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b6:	4a10      	ldr	r2, [pc, #64]	; (80051f8 <HAL_TIM_MspPostInit+0x6c>)
 80051b8:	f043 0302 	orr.w	r3, r3, #2
 80051bc:	6313      	str	r3, [r2, #48]	; 0x30
 80051be:	4b0e      	ldr	r3, [pc, #56]	; (80051f8 <HAL_TIM_MspPostInit+0x6c>)
 80051c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	60bb      	str	r3, [r7, #8]
 80051c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80051ca:	2330      	movs	r3, #48	; 0x30
 80051cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051ce:	2302      	movs	r3, #2
 80051d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051d6:	2300      	movs	r3, #0
 80051d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80051da:	2302      	movs	r3, #2
 80051dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051de:	f107 030c 	add.w	r3, r7, #12
 80051e2:	4619      	mov	r1, r3
 80051e4:	4805      	ldr	r0, [pc, #20]	; (80051fc <HAL_TIM_MspPostInit+0x70>)
 80051e6:	f001 ff09 	bl	8006ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80051ea:	bf00      	nop
 80051ec:	3720      	adds	r7, #32
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	40000400 	.word	0x40000400
 80051f8:	40023800 	.word	0x40023800
 80051fc:	40020400 	.word	0x40020400

08005200 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b08c      	sub	sp, #48	; 0x30
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005208:	f107 031c 	add.w	r3, r7, #28
 800520c:	2200      	movs	r2, #0
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	605a      	str	r2, [r3, #4]
 8005212:	609a      	str	r2, [r3, #8]
 8005214:	60da      	str	r2, [r3, #12]
 8005216:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a33      	ldr	r2, [pc, #204]	; (80052ec <HAL_UART_MspInit+0xec>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d12d      	bne.n	800527e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005222:	2300      	movs	r3, #0
 8005224:	61bb      	str	r3, [r7, #24]
 8005226:	4b32      	ldr	r3, [pc, #200]	; (80052f0 <HAL_UART_MspInit+0xf0>)
 8005228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522a:	4a31      	ldr	r2, [pc, #196]	; (80052f0 <HAL_UART_MspInit+0xf0>)
 800522c:	f043 0310 	orr.w	r3, r3, #16
 8005230:	6453      	str	r3, [r2, #68]	; 0x44
 8005232:	4b2f      	ldr	r3, [pc, #188]	; (80052f0 <HAL_UART_MspInit+0xf0>)
 8005234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005236:	f003 0310 	and.w	r3, r3, #16
 800523a:	61bb      	str	r3, [r7, #24]
 800523c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800523e:	2300      	movs	r3, #0
 8005240:	617b      	str	r3, [r7, #20]
 8005242:	4b2b      	ldr	r3, [pc, #172]	; (80052f0 <HAL_UART_MspInit+0xf0>)
 8005244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005246:	4a2a      	ldr	r2, [pc, #168]	; (80052f0 <HAL_UART_MspInit+0xf0>)
 8005248:	f043 0301 	orr.w	r3, r3, #1
 800524c:	6313      	str	r3, [r2, #48]	; 0x30
 800524e:	4b28      	ldr	r3, [pc, #160]	; (80052f0 <HAL_UART_MspInit+0xf0>)
 8005250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800525a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800525e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005260:	2302      	movs	r3, #2
 8005262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005264:	2300      	movs	r3, #0
 8005266:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005268:	2300      	movs	r3, #0
 800526a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800526c:	2307      	movs	r3, #7
 800526e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005270:	f107 031c 	add.w	r3, r7, #28
 8005274:	4619      	mov	r1, r3
 8005276:	481f      	ldr	r0, [pc, #124]	; (80052f4 <HAL_UART_MspInit+0xf4>)
 8005278:	f001 fec0 	bl	8006ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800527c:	e031      	b.n	80052e2 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a1d      	ldr	r2, [pc, #116]	; (80052f8 <HAL_UART_MspInit+0xf8>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d12c      	bne.n	80052e2 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005288:	2300      	movs	r3, #0
 800528a:	613b      	str	r3, [r7, #16]
 800528c:	4b18      	ldr	r3, [pc, #96]	; (80052f0 <HAL_UART_MspInit+0xf0>)
 800528e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005290:	4a17      	ldr	r2, [pc, #92]	; (80052f0 <HAL_UART_MspInit+0xf0>)
 8005292:	f043 0320 	orr.w	r3, r3, #32
 8005296:	6453      	str	r3, [r2, #68]	; 0x44
 8005298:	4b15      	ldr	r3, [pc, #84]	; (80052f0 <HAL_UART_MspInit+0xf0>)
 800529a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529c:	f003 0320 	and.w	r3, r3, #32
 80052a0:	613b      	str	r3, [r7, #16]
 80052a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052a4:	2300      	movs	r3, #0
 80052a6:	60fb      	str	r3, [r7, #12]
 80052a8:	4b11      	ldr	r3, [pc, #68]	; (80052f0 <HAL_UART_MspInit+0xf0>)
 80052aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ac:	4a10      	ldr	r2, [pc, #64]	; (80052f0 <HAL_UART_MspInit+0xf0>)
 80052ae:	f043 0301 	orr.w	r3, r3, #1
 80052b2:	6313      	str	r3, [r2, #48]	; 0x30
 80052b4:	4b0e      	ldr	r3, [pc, #56]	; (80052f0 <HAL_UART_MspInit+0xf0>)
 80052b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	60fb      	str	r3, [r7, #12]
 80052be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80052c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80052c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052c6:	2302      	movs	r3, #2
 80052c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80052ca:	2301      	movs	r3, #1
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052ce:	2300      	movs	r3, #0
 80052d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80052d2:	2308      	movs	r3, #8
 80052d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052d6:	f107 031c 	add.w	r3, r7, #28
 80052da:	4619      	mov	r1, r3
 80052dc:	4805      	ldr	r0, [pc, #20]	; (80052f4 <HAL_UART_MspInit+0xf4>)
 80052de:	f001 fe8d 	bl	8006ffc <HAL_GPIO_Init>
}
 80052e2:	bf00      	nop
 80052e4:	3730      	adds	r7, #48	; 0x30
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	40011000 	.word	0x40011000
 80052f0:	40023800 	.word	0x40023800
 80052f4:	40020000 	.word	0x40020000
 80052f8:	40011400 	.word	0x40011400

080052fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80052fc:	b480      	push	{r7}
 80052fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005300:	e7fe      	b.n	8005300 <NMI_Handler+0x4>

08005302 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005302:	b480      	push	{r7}
 8005304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005306:	e7fe      	b.n	8005306 <HardFault_Handler+0x4>

08005308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800530c:	e7fe      	b.n	800530c <MemManage_Handler+0x4>

0800530e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800530e:	b480      	push	{r7}
 8005310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005312:	e7fe      	b.n	8005312 <BusFault_Handler+0x4>

08005314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005314:	b480      	push	{r7}
 8005316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005318:	e7fe      	b.n	8005318 <UsageFault_Handler+0x4>

0800531a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800531a:	b480      	push	{r7}
 800531c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800531e:	bf00      	nop
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800532c:	bf00      	nop
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005336:	b480      	push	{r7}
 8005338:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800533a:	bf00      	nop
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005348:	f000 f8a8 	bl	800549c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800534c:	bf00      	nop
 800534e:	bd80      	pop	{r7, pc}

08005350 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005354:	4802      	ldr	r0, [pc, #8]	; (8005360 <TIM3_IRQHandler+0x10>)
 8005356:	f004 fc6b 	bl	8009c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800535a:	bf00      	nop
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	20007190 	.word	0x20007190

08005364 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005368:	4802      	ldr	r0, [pc, #8]	; (8005374 <DMA2_Stream4_IRQHandler+0x10>)
 800536a:	f001 fbdd 	bl	8006b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800536e:	bf00      	nop
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20006fe4 	.word	0x20006fe4

08005378 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005378:	b480      	push	{r7}
 800537a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800537c:	4b08      	ldr	r3, [pc, #32]	; (80053a0 <SystemInit+0x28>)
 800537e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005382:	4a07      	ldr	r2, [pc, #28]	; (80053a0 <SystemInit+0x28>)
 8005384:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005388:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800538c:	4b04      	ldr	r3, [pc, #16]	; (80053a0 <SystemInit+0x28>)
 800538e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005392:	609a      	str	r2, [r3, #8]
#endif
}
 8005394:	bf00      	nop
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	e000ed00 	.word	0xe000ed00

080053a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80053a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80053dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80053a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80053aa:	e003      	b.n	80053b4 <LoopCopyDataInit>

080053ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80053ac:	4b0c      	ldr	r3, [pc, #48]	; (80053e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80053ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80053b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80053b2:	3104      	adds	r1, #4

080053b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80053b4:	480b      	ldr	r0, [pc, #44]	; (80053e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80053b6:	4b0c      	ldr	r3, [pc, #48]	; (80053e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80053b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80053ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80053bc:	d3f6      	bcc.n	80053ac <CopyDataInit>
  ldr  r2, =_sbss
 80053be:	4a0b      	ldr	r2, [pc, #44]	; (80053ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80053c0:	e002      	b.n	80053c8 <LoopFillZerobss>

080053c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80053c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80053c4:	f842 3b04 	str.w	r3, [r2], #4

080053c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80053c8:	4b09      	ldr	r3, [pc, #36]	; (80053f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80053ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80053cc:	d3f9      	bcc.n	80053c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80053ce:	f7ff ffd3 	bl	8005378 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80053d2:	f005 fe4d 	bl	800b070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80053d6:	f7fe fb05 	bl	80039e4 <main>
  bx  lr    
 80053da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80053dc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80053e0:	0800cef4 	.word	0x0800cef4
  ldr  r0, =_sdata
 80053e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80053e8:	20000434 	.word	0x20000434
  ldr  r2, =_sbss
 80053ec:	20000434 	.word	0x20000434
  ldr  r3, = _ebss
 80053f0:	200072ac 	.word	0x200072ac

080053f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80053f4:	e7fe      	b.n	80053f4 <ADC_IRQHandler>
	...

080053f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80053fc:	4b0e      	ldr	r3, [pc, #56]	; (8005438 <HAL_Init+0x40>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a0d      	ldr	r2, [pc, #52]	; (8005438 <HAL_Init+0x40>)
 8005402:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005406:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005408:	4b0b      	ldr	r3, [pc, #44]	; (8005438 <HAL_Init+0x40>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a0a      	ldr	r2, [pc, #40]	; (8005438 <HAL_Init+0x40>)
 800540e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005412:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005414:	4b08      	ldr	r3, [pc, #32]	; (8005438 <HAL_Init+0x40>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a07      	ldr	r2, [pc, #28]	; (8005438 <HAL_Init+0x40>)
 800541a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800541e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005420:	2003      	movs	r0, #3
 8005422:	f001 f9c9 	bl	80067b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005426:	2000      	movs	r0, #0
 8005428:	f000 f808 	bl	800543c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800542c:	f7ff fc76 	bl	8004d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	40023c00 	.word	0x40023c00

0800543c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005444:	4b12      	ldr	r3, [pc, #72]	; (8005490 <HAL_InitTick+0x54>)
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	4b12      	ldr	r3, [pc, #72]	; (8005494 <HAL_InitTick+0x58>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	4619      	mov	r1, r3
 800544e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005452:	fbb3 f3f1 	udiv	r3, r3, r1
 8005456:	fbb2 f3f3 	udiv	r3, r2, r3
 800545a:	4618      	mov	r0, r3
 800545c:	f001 f9e1 	bl	8006822 <HAL_SYSTICK_Config>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d001      	beq.n	800546a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e00e      	b.n	8005488 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2b0f      	cmp	r3, #15
 800546e:	d80a      	bhi.n	8005486 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005470:	2200      	movs	r2, #0
 8005472:	6879      	ldr	r1, [r7, #4]
 8005474:	f04f 30ff 	mov.w	r0, #4294967295
 8005478:	f001 f9a9 	bl	80067ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800547c:	4a06      	ldr	r2, [pc, #24]	; (8005498 <HAL_InitTick+0x5c>)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005482:	2300      	movs	r3, #0
 8005484:	e000      	b.n	8005488 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
}
 8005488:	4618      	mov	r0, r3
 800548a:	3708      	adds	r7, #8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	200003c4 	.word	0x200003c4
 8005494:	200003cc 	.word	0x200003cc
 8005498:	200003c8 	.word	0x200003c8

0800549c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800549c:	b480      	push	{r7}
 800549e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80054a0:	4b06      	ldr	r3, [pc, #24]	; (80054bc <HAL_IncTick+0x20>)
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	461a      	mov	r2, r3
 80054a6:	4b06      	ldr	r3, [pc, #24]	; (80054c0 <HAL_IncTick+0x24>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4413      	add	r3, r2
 80054ac:	4a04      	ldr	r2, [pc, #16]	; (80054c0 <HAL_IncTick+0x24>)
 80054ae:	6013      	str	r3, [r2, #0]
}
 80054b0:	bf00      	nop
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	200003cc 	.word	0x200003cc
 80054c0:	200072a8 	.word	0x200072a8

080054c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80054c4:	b480      	push	{r7}
 80054c6:	af00      	add	r7, sp, #0
  return uwTick;
 80054c8:	4b03      	ldr	r3, [pc, #12]	; (80054d8 <HAL_GetTick+0x14>)
 80054ca:	681b      	ldr	r3, [r3, #0]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	200072a8 	.word	0x200072a8

080054dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054e4:	f7ff ffee 	bl	80054c4 <HAL_GetTick>
 80054e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f4:	d005      	beq.n	8005502 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80054f6:	4b0a      	ldr	r3, [pc, #40]	; (8005520 <HAL_Delay+0x44>)
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	461a      	mov	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4413      	add	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005502:	bf00      	nop
 8005504:	f7ff ffde 	bl	80054c4 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	429a      	cmp	r2, r3
 8005512:	d8f7      	bhi.n	8005504 <HAL_Delay+0x28>
  {
  }
}
 8005514:	bf00      	nop
 8005516:	bf00      	nop
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	200003cc 	.word	0x200003cc

08005524 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800552c:	2300      	movs	r3, #0
 800552e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e033      	b.n	80055a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553e:	2b00      	cmp	r3, #0
 8005540:	d109      	bne.n	8005556 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7ff fc12 	bl	8004d6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555a:	f003 0310 	and.w	r3, r3, #16
 800555e:	2b00      	cmp	r3, #0
 8005560:	d118      	bne.n	8005594 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005566:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800556a:	f023 0302 	bic.w	r3, r3, #2
 800556e:	f043 0202 	orr.w	r2, r3, #2
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 fbe8 	bl	8005d4c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	f023 0303 	bic.w	r3, r3, #3
 800558a:	f043 0201 	orr.w	r2, r3, #1
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	641a      	str	r2, [r3, #64]	; 0x40
 8005592:	e001      	b.n	8005598 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80055a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
	...

080055ac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80055b4:	2300      	movs	r3, #0
 80055b6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d101      	bne.n	80055c6 <HAL_ADC_Start+0x1a>
 80055c2:	2302      	movs	r3, #2
 80055c4:	e097      	b.n	80056f6 <HAL_ADC_Start+0x14a>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d018      	beq.n	800560e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689a      	ldr	r2, [r3, #8]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f042 0201 	orr.w	r2, r2, #1
 80055ea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80055ec:	4b45      	ldr	r3, [pc, #276]	; (8005704 <HAL_ADC_Start+0x158>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a45      	ldr	r2, [pc, #276]	; (8005708 <HAL_ADC_Start+0x15c>)
 80055f2:	fba2 2303 	umull	r2, r3, r2, r3
 80055f6:	0c9a      	lsrs	r2, r3, #18
 80055f8:	4613      	mov	r3, r2
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	4413      	add	r3, r2
 80055fe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005600:	e002      	b.n	8005608 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	3b01      	subs	r3, #1
 8005606:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1f9      	bne.n	8005602 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	2b01      	cmp	r3, #1
 800561a:	d15f      	bne.n	80056dc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005620:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005624:	f023 0301 	bic.w	r3, r3, #1
 8005628:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800563a:	2b00      	cmp	r3, #0
 800563c:	d007      	beq.n	800564e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005642:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005646:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005652:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800565a:	d106      	bne.n	800566a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005660:	f023 0206 	bic.w	r2, r3, #6
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	645a      	str	r2, [r3, #68]	; 0x44
 8005668:	e002      	b.n	8005670 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005678:	4b24      	ldr	r3, [pc, #144]	; (800570c <HAL_ADC_Start+0x160>)
 800567a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005684:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f003 031f 	and.w	r3, r3, #31
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10f      	bne.n	80056b2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d129      	bne.n	80056f4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689a      	ldr	r2, [r3, #8]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80056ae:	609a      	str	r2, [r3, #8]
 80056b0:	e020      	b.n	80056f4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a16      	ldr	r2, [pc, #88]	; (8005710 <HAL_ADC_Start+0x164>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d11b      	bne.n	80056f4 <HAL_ADC_Start+0x148>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d114      	bne.n	80056f4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689a      	ldr	r2, [r3, #8]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80056d8:	609a      	str	r2, [r3, #8]
 80056da:	e00b      	b.n	80056f4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e0:	f043 0210 	orr.w	r2, r3, #16
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ec:	f043 0201 	orr.w	r2, r3, #1
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	200003c4 	.word	0x200003c4
 8005708:	431bde83 	.word	0x431bde83
 800570c:	40012300 	.word	0x40012300
 8005710:	40012000 	.word	0x40012000

08005714 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800571e:	2300      	movs	r3, #0
 8005720:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800572c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005730:	d113      	bne.n	800575a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800573c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005740:	d10b      	bne.n	800575a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	f043 0220 	orr.w	r2, r3, #32
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e063      	b.n	8005822 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800575a:	f7ff feb3 	bl	80054c4 <HAL_GetTick>
 800575e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005760:	e021      	b.n	80057a6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005768:	d01d      	beq.n	80057a6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d007      	beq.n	8005780 <HAL_ADC_PollForConversion+0x6c>
 8005770:	f7ff fea8 	bl	80054c4 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	429a      	cmp	r2, r3
 800577e:	d212      	bcs.n	80057a6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	2b02      	cmp	r3, #2
 800578c:	d00b      	beq.n	80057a6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005792:	f043 0204 	orr.w	r2, r3, #4
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e03d      	b.n	8005822 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0302 	and.w	r3, r3, #2
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d1d6      	bne.n	8005762 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f06f 0212 	mvn.w	r2, #18
 80057bc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d123      	bne.n	8005820 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d11f      	bne.n	8005820 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d006      	beq.n	80057fc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d111      	bne.n	8005820 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005800:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d105      	bne.n	8005820 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005818:	f043 0201 	orr.w	r2, r3, #1
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
	...

0800582c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b086      	sub	sp, #24
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005838:	2300      	movs	r3, #0
 800583a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005842:	2b01      	cmp	r3, #1
 8005844:	d101      	bne.n	800584a <HAL_ADC_Start_DMA+0x1e>
 8005846:	2302      	movs	r3, #2
 8005848:	e0ce      	b.n	80059e8 <HAL_ADC_Start_DMA+0x1bc>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b01      	cmp	r3, #1
 800585e:	d018      	beq.n	8005892 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	689a      	ldr	r2, [r3, #8]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f042 0201 	orr.w	r2, r2, #1
 800586e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005870:	4b5f      	ldr	r3, [pc, #380]	; (80059f0 <HAL_ADC_Start_DMA+0x1c4>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a5f      	ldr	r2, [pc, #380]	; (80059f4 <HAL_ADC_Start_DMA+0x1c8>)
 8005876:	fba2 2303 	umull	r2, r3, r2, r3
 800587a:	0c9a      	lsrs	r2, r3, #18
 800587c:	4613      	mov	r3, r2
 800587e:	005b      	lsls	r3, r3, #1
 8005880:	4413      	add	r3, r2
 8005882:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005884:	e002      	b.n	800588c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	3b01      	subs	r3, #1
 800588a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1f9      	bne.n	8005886 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800589c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058a0:	d107      	bne.n	80058b2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689a      	ldr	r2, [r3, #8]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b01      	cmp	r3, #1
 80058be:	f040 8086 	bne.w	80059ce <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80058ca:	f023 0301 	bic.w	r3, r3, #1
 80058ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d007      	beq.n	80058f4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80058ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005900:	d106      	bne.n	8005910 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005906:	f023 0206 	bic.w	r2, r3, #6
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	645a      	str	r2, [r3, #68]	; 0x44
 800590e:	e002      	b.n	8005916 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800591e:	4b36      	ldr	r3, [pc, #216]	; (80059f8 <HAL_ADC_Start_DMA+0x1cc>)
 8005920:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005926:	4a35      	ldr	r2, [pc, #212]	; (80059fc <HAL_ADC_Start_DMA+0x1d0>)
 8005928:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592e:	4a34      	ldr	r2, [pc, #208]	; (8005a00 <HAL_ADC_Start_DMA+0x1d4>)
 8005930:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005936:	4a33      	ldr	r2, [pc, #204]	; (8005a04 <HAL_ADC_Start_DMA+0x1d8>)
 8005938:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005942:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005952:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689a      	ldr	r2, [r3, #8]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005962:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	334c      	adds	r3, #76	; 0x4c
 800596e:	4619      	mov	r1, r3
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f001 f810 	bl	8006998 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f003 031f 	and.w	r3, r3, #31
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10f      	bne.n	80059a4 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d129      	bne.n	80059e6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80059a0:	609a      	str	r2, [r3, #8]
 80059a2:	e020      	b.n	80059e6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a17      	ldr	r2, [pc, #92]	; (8005a08 <HAL_ADC_Start_DMA+0x1dc>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d11b      	bne.n	80059e6 <HAL_ADC_Start_DMA+0x1ba>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d114      	bne.n	80059e6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689a      	ldr	r2, [r3, #8]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80059ca:	609a      	str	r2, [r3, #8]
 80059cc:	e00b      	b.n	80059e6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	f043 0210 	orr.w	r2, r3, #16
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059de:	f043 0201 	orr.w	r2, r3, #1
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3718      	adds	r7, #24
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	200003c4 	.word	0x200003c4
 80059f4:	431bde83 	.word	0x431bde83
 80059f8:	40012300 	.word	0x40012300
 80059fc:	08005f45 	.word	0x08005f45
 8005a00:	08005fff 	.word	0x08005fff
 8005a04:	0800601b 	.word	0x0800601b
 8005a08:	40012000 	.word	0x40012000

08005a0c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a14:	2300      	movs	r3, #0
 8005a16:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d101      	bne.n	8005a26 <HAL_ADC_Stop_DMA+0x1a>
 8005a22:	2302      	movs	r3, #2
 8005a24:	e048      	b.n	8005ab8 <HAL_ADC_Stop_DMA+0xac>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689a      	ldr	r2, [r3, #8]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f022 0201 	bic.w	r2, r2, #1
 8005a3c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f003 0301 	and.w	r3, r3, #1
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d130      	bne.n	8005aae <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689a      	ldr	r2, [r3, #8]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a5a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d10f      	bne.n	8005a8a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 ffea 	bl	8006a48 <HAL_DMA_Abort>
 8005a74:	4603      	mov	r3, r0
 8005a76:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8005a78:	7bfb      	ldrb	r3, [r7, #15]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d005      	beq.n	8005a8a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	685a      	ldr	r2, [r3, #4]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8005a98:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005aa2:	f023 0301 	bic.w	r3, r3, #1
 8005aa6:	f043 0201 	orr.w	r2, r3, #1
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005af2:	2300      	movs	r3, #0
 8005af4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d101      	bne.n	8005b04 <HAL_ADC_ConfigChannel+0x1c>
 8005b00:	2302      	movs	r3, #2
 8005b02:	e113      	b.n	8005d2c <HAL_ADC_ConfigChannel+0x244>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b09      	cmp	r3, #9
 8005b12:	d925      	bls.n	8005b60 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68d9      	ldr	r1, [r3, #12]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	461a      	mov	r2, r3
 8005b22:	4613      	mov	r3, r2
 8005b24:	005b      	lsls	r3, r3, #1
 8005b26:	4413      	add	r3, r2
 8005b28:	3b1e      	subs	r3, #30
 8005b2a:	2207      	movs	r2, #7
 8005b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b30:	43da      	mvns	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	400a      	ands	r2, r1
 8005b38:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68d9      	ldr	r1, [r3, #12]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	689a      	ldr	r2, [r3, #8]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	005b      	lsls	r3, r3, #1
 8005b50:	4403      	add	r3, r0
 8005b52:	3b1e      	subs	r3, #30
 8005b54:	409a      	lsls	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	60da      	str	r2, [r3, #12]
 8005b5e:	e022      	b.n	8005ba6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6919      	ldr	r1, [r3, #16]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	4613      	mov	r3, r2
 8005b70:	005b      	lsls	r3, r3, #1
 8005b72:	4413      	add	r3, r2
 8005b74:	2207      	movs	r2, #7
 8005b76:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7a:	43da      	mvns	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	400a      	ands	r2, r1
 8005b82:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	6919      	ldr	r1, [r3, #16]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	689a      	ldr	r2, [r3, #8]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	4618      	mov	r0, r3
 8005b96:	4603      	mov	r3, r0
 8005b98:	005b      	lsls	r3, r3, #1
 8005b9a:	4403      	add	r3, r0
 8005b9c:	409a      	lsls	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	2b06      	cmp	r3, #6
 8005bac:	d824      	bhi.n	8005bf8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	3b05      	subs	r3, #5
 8005bc0:	221f      	movs	r2, #31
 8005bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc6:	43da      	mvns	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	400a      	ands	r2, r1
 8005bce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	4618      	mov	r0, r3
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	685a      	ldr	r2, [r3, #4]
 8005be2:	4613      	mov	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4413      	add	r3, r2
 8005be8:	3b05      	subs	r3, #5
 8005bea:	fa00 f203 	lsl.w	r2, r0, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	635a      	str	r2, [r3, #52]	; 0x34
 8005bf6:	e04c      	b.n	8005c92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	2b0c      	cmp	r3, #12
 8005bfe:	d824      	bhi.n	8005c4a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	3b23      	subs	r3, #35	; 0x23
 8005c12:	221f      	movs	r2, #31
 8005c14:	fa02 f303 	lsl.w	r3, r2, r3
 8005c18:	43da      	mvns	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	400a      	ands	r2, r1
 8005c20:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	4618      	mov	r0, r3
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	4613      	mov	r3, r2
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	3b23      	subs	r3, #35	; 0x23
 8005c3c:	fa00 f203 	lsl.w	r2, r0, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	631a      	str	r2, [r3, #48]	; 0x30
 8005c48:	e023      	b.n	8005c92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	4613      	mov	r3, r2
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4413      	add	r3, r2
 8005c5a:	3b41      	subs	r3, #65	; 0x41
 8005c5c:	221f      	movs	r2, #31
 8005c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c62:	43da      	mvns	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	400a      	ands	r2, r1
 8005c6a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	4618      	mov	r0, r3
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	685a      	ldr	r2, [r3, #4]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	3b41      	subs	r3, #65	; 0x41
 8005c86:	fa00 f203 	lsl.w	r2, r0, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c92:	4b29      	ldr	r3, [pc, #164]	; (8005d38 <HAL_ADC_ConfigChannel+0x250>)
 8005c94:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a28      	ldr	r2, [pc, #160]	; (8005d3c <HAL_ADC_ConfigChannel+0x254>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d10f      	bne.n	8005cc0 <HAL_ADC_ConfigChannel+0x1d8>
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2b12      	cmp	r3, #18
 8005ca6:	d10b      	bne.n	8005cc0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a1d      	ldr	r2, [pc, #116]	; (8005d3c <HAL_ADC_ConfigChannel+0x254>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d12b      	bne.n	8005d22 <HAL_ADC_ConfigChannel+0x23a>
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a1c      	ldr	r2, [pc, #112]	; (8005d40 <HAL_ADC_ConfigChannel+0x258>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d003      	beq.n	8005cdc <HAL_ADC_ConfigChannel+0x1f4>
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2b11      	cmp	r3, #17
 8005cda:	d122      	bne.n	8005d22 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a11      	ldr	r2, [pc, #68]	; (8005d40 <HAL_ADC_ConfigChannel+0x258>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d111      	bne.n	8005d22 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005cfe:	4b11      	ldr	r3, [pc, #68]	; (8005d44 <HAL_ADC_ConfigChannel+0x25c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a11      	ldr	r2, [pc, #68]	; (8005d48 <HAL_ADC_ConfigChannel+0x260>)
 8005d04:	fba2 2303 	umull	r2, r3, r2, r3
 8005d08:	0c9a      	lsrs	r2, r3, #18
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005d14:	e002      	b.n	8005d1c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1f9      	bne.n	8005d16 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3714      	adds	r7, #20
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	40012300 	.word	0x40012300
 8005d3c:	40012000 	.word	0x40012000
 8005d40:	10000012 	.word	0x10000012
 8005d44:	200003c4 	.word	0x200003c4
 8005d48:	431bde83 	.word	0x431bde83

08005d4c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005d54:	4b79      	ldr	r3, [pc, #484]	; (8005f3c <ADC_Init+0x1f0>)
 8005d56:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6859      	ldr	r1, [r3, #4]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	021a      	lsls	r2, r3, #8
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005da4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	6859      	ldr	r1, [r3, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689a      	ldr	r2, [r3, #8]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	689a      	ldr	r2, [r3, #8]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6899      	ldr	r1, [r3, #8]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68da      	ldr	r2, [r3, #12]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dde:	4a58      	ldr	r2, [pc, #352]	; (8005f40 <ADC_Init+0x1f4>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d022      	beq.n	8005e2a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	689a      	ldr	r2, [r3, #8]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005df2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6899      	ldr	r1, [r3, #8]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	430a      	orrs	r2, r1
 8005e04:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689a      	ldr	r2, [r3, #8]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005e14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	6899      	ldr	r1, [r3, #8]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	609a      	str	r2, [r3, #8]
 8005e28:	e00f      	b.n	8005e4a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689a      	ldr	r2, [r3, #8]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005e38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	689a      	ldr	r2, [r3, #8]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005e48:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 0202 	bic.w	r2, r2, #2
 8005e58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6899      	ldr	r1, [r3, #8]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	7e1b      	ldrb	r3, [r3, #24]
 8005e64:	005a      	lsls	r2, r3, #1
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d01b      	beq.n	8005eb0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e86:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685a      	ldr	r2, [r3, #4]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005e96:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6859      	ldr	r1, [r3, #4]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	035a      	lsls	r2, r3, #13
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	605a      	str	r2, [r3, #4]
 8005eae:	e007      	b.n	8005ec0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ebe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005ece:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	3b01      	subs	r3, #1
 8005edc:	051a      	lsls	r2, r3, #20
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	689a      	ldr	r2, [r3, #8]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005ef4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	6899      	ldr	r1, [r3, #8]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f02:	025a      	lsls	r2, r3, #9
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689a      	ldr	r2, [r3, #8]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6899      	ldr	r1, [r3, #8]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	029a      	lsls	r2, r3, #10
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	609a      	str	r2, [r3, #8]
}
 8005f30:	bf00      	nop
 8005f32:	3714      	adds	r7, #20
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	40012300 	.word	0x40012300
 8005f40:	0f000001 	.word	0x0f000001

08005f44 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f50:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f56:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d13c      	bne.n	8005fd8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f62:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d12b      	bne.n	8005fd0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d127      	bne.n	8005fd0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f86:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d006      	beq.n	8005f9c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d119      	bne.n	8005fd0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 0220 	bic.w	r2, r2, #32
 8005faa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d105      	bne.n	8005fd0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc8:	f043 0201 	orr.w	r2, r3, #1
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f7fe fe8d 	bl	8004cf0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005fd6:	e00e      	b.n	8005ff6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fdc:	f003 0310 	and.w	r3, r3, #16
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d003      	beq.n	8005fec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f7ff fd75 	bl	8005ad4 <HAL_ADC_ErrorCallback>
}
 8005fea:	e004      	b.n	8005ff6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	4798      	blx	r3
}
 8005ff6:	bf00      	nop
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b084      	sub	sp, #16
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f7ff fd57 	bl	8005ac0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006012:	bf00      	nop
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b084      	sub	sp, #16
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006026:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2240      	movs	r2, #64	; 0x40
 800602c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006032:	f043 0204 	orr.w	r2, r3, #4
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f7ff fd4a 	bl	8005ad4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006040:	bf00      	nop
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006050:	2300      	movs	r3, #0
 8006052:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8006054:	2300      	movs	r3, #0
 8006056:	617b      	str	r3, [r7, #20]
 8006058:	2300      	movs	r3, #0
 800605a:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006062:	2b01      	cmp	r3, #1
 8006064:	d101      	bne.n	800606a <HAL_ADCEx_InjectedStart+0x22>
 8006066:	2302      	movs	r3, #2
 8006068:	e0aa      	b.n	80061c0 <HAL_ADCEx_InjectedStart+0x178>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	2b01      	cmp	r3, #1
 800607e:	d018      	beq.n	80060b2 <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689a      	ldr	r2, [r3, #8]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f042 0201 	orr.w	r2, r2, #1
 800608e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006090:	4b4e      	ldr	r3, [pc, #312]	; (80061cc <HAL_ADCEx_InjectedStart+0x184>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a4e      	ldr	r2, [pc, #312]	; (80061d0 <HAL_ADCEx_InjectedStart+0x188>)
 8006096:	fba2 2303 	umull	r2, r3, r2, r3
 800609a:	0c9a      	lsrs	r2, r3, #18
 800609c:	4613      	mov	r3, r2
 800609e:	005b      	lsls	r3, r3, #1
 80060a0:	4413      	add	r3, r2
 80060a2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80060a4:	e002      	b.n	80060ac <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	3b01      	subs	r3, #1
 80060aa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1f9      	bne.n	80060a6 <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d172      	bne.n	80061a6 <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80060c8:	f023 0301 	bic.w	r3, r3, #1
 80060cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d102      	bne.n	80060e6 <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f06f 0204 	mvn.w	r2, #4
 80060f6:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80060f8:	4b36      	ldr	r3, [pc, #216]	; (80061d4 <HAL_ADCEx_InjectedStart+0x18c>)
 80060fa:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	f003 031f 	and.w	r3, r3, #31
 8006104:	2b00      	cmp	r3, #0
 8006106:	d124      	bne.n	8006152 <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006112:	2b00      	cmp	r3, #0
 8006114:	bf0c      	ite	eq
 8006116:	2301      	moveq	r3, #1
 8006118:	2300      	movne	r3, #0
 800611a:	b2db      	uxtb	r3, r3
 800611c:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006128:	2b00      	cmp	r3, #0
 800612a:	bf0c      	ite	eq
 800612c:	2301      	moveq	r3, #1
 800612e:	2300      	movne	r3, #0
 8006130:	b2db      	uxtb	r3, r3
 8006132:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d041      	beq.n	80061be <HAL_ADCEx_InjectedStart+0x176>
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d03e      	beq.n	80061be <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	689a      	ldr	r2, [r3, #8]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800614e:	609a      	str	r2, [r3, #8]
 8006150:	e035      	b.n	80061be <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800615c:	2b00      	cmp	r3, #0
 800615e:	bf0c      	ite	eq
 8006160:	2301      	moveq	r3, #1
 8006162:	2300      	movne	r3, #0
 8006164:	b2db      	uxtb	r3, r3
 8006166:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006172:	2b00      	cmp	r3, #0
 8006174:	bf0c      	ite	eq
 8006176:	2301      	moveq	r3, #1
 8006178:	2300      	movne	r3, #0
 800617a:	b2db      	uxtb	r3, r3
 800617c:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a15      	ldr	r2, [pc, #84]	; (80061d8 <HAL_ADCEx_InjectedStart+0x190>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d11a      	bne.n	80061be <HAL_ADCEx_InjectedStart+0x176>
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d017      	beq.n	80061be <HAL_ADCEx_InjectedStart+0x176>
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d014      	beq.n	80061be <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689a      	ldr	r2, [r3, #8]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80061a2:	609a      	str	r2, [r3, #8]
 80061a4:	e00b      	b.n	80061be <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	f043 0210 	orr.w	r2, r3, #16
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b6:	f043 0201 	orr.w	r2, r3, #1
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	371c      	adds	r7, #28
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr
 80061cc:	200003c4 	.word	0x200003c4
 80061d0:	431bde83 	.word	0x431bde83
 80061d4:	40012300 	.word	0x40012300
 80061d8:	40012000 	.word	0x40012000

080061dc <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061e4:	2300      	movs	r3, #0
 80061e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d101      	bne.n	80061f6 <HAL_ADCEx_InjectedStop+0x1a>
 80061f2:	2302      	movs	r3, #2
 80061f4:	e037      	b.n	8006266 <HAL_ADCEx_InjectedStop+0x8a>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006206:	2b00      	cmp	r3, #0
 8006208:	d120      	bne.n	800624c <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8006214:	2b00      	cmp	r3, #0
 8006216:	d119      	bne.n	800624c <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	689a      	ldr	r2, [r3, #8]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 0201 	bic.w	r2, r2, #1
 8006226:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b00      	cmp	r3, #0
 8006234:	d112      	bne.n	800625c <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800623e:	f023 0301 	bic.w	r3, r3, #1
 8006242:	f043 0201 	orr.w	r2, r3, #1
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800624a:	e007      	b.n	800625c <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006250:	f043 0220 	orr.w	r2, r3, #32
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8006264:	7bfb      	ldrb	r3, [r7, #15]
}
 8006266:	4618      	mov	r0, r3
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
	...

08006274 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 800627e:	2300      	movs	r3, #0
 8006280:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f06f 0204 	mvn.w	r2, #4
 800628a:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	3b01      	subs	r3, #1
 8006290:	2b03      	cmp	r3, #3
 8006292:	d81f      	bhi.n	80062d4 <HAL_ADCEx_InjectedGetValue+0x60>
 8006294:	a201      	add	r2, pc, #4	; (adr r2, 800629c <HAL_ADCEx_InjectedGetValue+0x28>)
 8006296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629a:	bf00      	nop
 800629c:	080062cb 	.word	0x080062cb
 80062a0:	080062c1 	.word	0x080062c1
 80062a4:	080062b7 	.word	0x080062b7
 80062a8:	080062ad 	.word	0x080062ad
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062b2:	60fb      	str	r3, [r7, #12]
    }  
    break;
 80062b4:	e00f      	b.n	80062d6 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062bc:	60fb      	str	r3, [r7, #12]
    }  
    break;
 80062be:	e00a      	b.n	80062d6 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c6:	60fb      	str	r3, [r7, #12]
    }
    break;
 80062c8:	e005      	b.n	80062d6 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062d0:	60fb      	str	r3, [r7, #12]
    }
    break;
 80062d2:	e000      	b.n	80062d6 <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 80062d4:	bf00      	nop
  }
  return tmp;
 80062d6:	68fb      	ldr	r3, [r7, #12]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3714      	adds	r7, #20
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d101      	bne.n	80062fc <HAL_ADCEx_InjectedConfigChannel+0x18>
 80062f8:	2302      	movs	r3, #2
 80062fa:	e17e      	b.n	80065fa <HAL_ADCEx_InjectedConfigChannel+0x316>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2b09      	cmp	r3, #9
 800630a:	d925      	bls.n	8006358 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68d9      	ldr	r1, [r3, #12]
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	b29b      	uxth	r3, r3
 8006318:	461a      	mov	r2, r3
 800631a:	4613      	mov	r3, r2
 800631c:	005b      	lsls	r3, r3, #1
 800631e:	4413      	add	r3, r2
 8006320:	3b1e      	subs	r3, #30
 8006322:	2207      	movs	r2, #7
 8006324:	fa02 f303 	lsl.w	r3, r2, r3
 8006328:	43da      	mvns	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	400a      	ands	r2, r1
 8006330:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68d9      	ldr	r1, [r3, #12]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	689a      	ldr	r2, [r3, #8]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	b29b      	uxth	r3, r3
 8006342:	4618      	mov	r0, r3
 8006344:	4603      	mov	r3, r0
 8006346:	005b      	lsls	r3, r3, #1
 8006348:	4403      	add	r3, r0
 800634a:	3b1e      	subs	r3, #30
 800634c:	409a      	lsls	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	430a      	orrs	r2, r1
 8006354:	60da      	str	r2, [r3, #12]
 8006356:	e022      	b.n	800639e <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	6919      	ldr	r1, [r3, #16]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	b29b      	uxth	r3, r3
 8006364:	461a      	mov	r2, r3
 8006366:	4613      	mov	r3, r2
 8006368:	005b      	lsls	r3, r3, #1
 800636a:	4413      	add	r3, r2
 800636c:	2207      	movs	r2, #7
 800636e:	fa02 f303 	lsl.w	r3, r2, r3
 8006372:	43da      	mvns	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	400a      	ands	r2, r1
 800637a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6919      	ldr	r1, [r3, #16]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	689a      	ldr	r2, [r3, #8]
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	b29b      	uxth	r3, r3
 800638c:	4618      	mov	r0, r3
 800638e:	4603      	mov	r3, r0
 8006390:	005b      	lsls	r3, r3, #1
 8006392:	4403      	add	r3, r0
 8006394:	409a      	lsls	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	430a      	orrs	r2, r1
 800639c:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80063ac:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	3b01      	subs	r3, #1
 80063ba:	051a      	lsls	r2, r3, #20
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	430a      	orrs	r2, r1
 80063c2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	3303      	adds	r3, #3
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	461a      	mov	r2, r3
 80063e0:	4613      	mov	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	221f      	movs	r2, #31
 80063e8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ec:	43da      	mvns	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	400a      	ands	r2, r1
 80063f4:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	b29b      	uxth	r3, r3
 8006402:	4618      	mov	r0, r3
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	b2da      	uxtb	r2, r3
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	b2db      	uxtb	r3, r3
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	b2db      	uxtb	r3, r3
 8006414:	3303      	adds	r3, #3
 8006416:	b2db      	uxtb	r3, r3
 8006418:	461a      	mov	r2, r3
 800641a:	4613      	mov	r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4413      	add	r3, r2
 8006420:	fa00 f203 	lsl.w	r2, r0, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	430a      	orrs	r2, r1
 800642a:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	4a75      	ldr	r2, [pc, #468]	; (8006608 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d022      	beq.n	800647c <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	689a      	ldr	r2, [r3, #8]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8006444:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6899      	ldr	r1, [r3, #8]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	699a      	ldr	r2, [r3, #24]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	430a      	orrs	r2, r1
 8006456:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689a      	ldr	r2, [r3, #8]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006466:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6899      	ldr	r1, [r3, #8]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	69da      	ldr	r2, [r3, #28]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	430a      	orrs	r2, r1
 8006478:	609a      	str	r2, [r3, #8]
 800647a:	e00f      	b.n	800649c <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	689a      	ldr	r2, [r3, #8]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800648a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689a      	ldr	r2, [r3, #8]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800649a:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	7d5b      	ldrb	r3, [r3, #21]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d008      	beq.n	80064b6 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064b2:	605a      	str	r2, [r3, #4]
 80064b4:	e007      	b.n	80064c6 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064c4:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	7d1b      	ldrb	r3, [r3, #20]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d008      	beq.n	80064e0 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	685a      	ldr	r2, [r3, #4]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80064dc:	605a      	str	r2, [r3, #4]
 80064de:	e007      	b.n	80064f0 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80064ee:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	2b03      	cmp	r3, #3
 80064f6:	d02e      	beq.n	8006556 <HAL_ADCEx_InjectedConfigChannel+0x272>
 80064f8:	2b03      	cmp	r3, #3
 80064fa:	d840      	bhi.n	800657e <HAL_ADCEx_InjectedConfigChannel+0x29a>
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d002      	beq.n	8006506 <HAL_ADCEx_InjectedConfigChannel+0x222>
 8006500:	2b02      	cmp	r3, #2
 8006502:	d014      	beq.n	800652e <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8006504:	e03b      	b.n	800657e <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	695b      	ldr	r3, [r3, #20]
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	6812      	ldr	r2, [r2, #0]
 8006510:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006514:	f023 030f 	bic.w	r3, r3, #15
 8006518:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	6959      	ldr	r1, [r3, #20]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	68da      	ldr	r2, [r3, #12]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	430a      	orrs	r2, r1
 800652a:	615a      	str	r2, [r3, #20]
      break;
 800652c:	e03b      	b.n	80065a6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	6812      	ldr	r2, [r2, #0]
 8006538:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800653c:	f023 030f 	bic.w	r3, r3, #15
 8006540:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	6999      	ldr	r1, [r3, #24]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	68da      	ldr	r2, [r3, #12]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	430a      	orrs	r2, r1
 8006552:	619a      	str	r2, [r3, #24]
      break;
 8006554:	e027      	b.n	80065a6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	69db      	ldr	r3, [r3, #28]
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	6812      	ldr	r2, [r2, #0]
 8006560:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006564:	f023 030f 	bic.w	r3, r3, #15
 8006568:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	69d9      	ldr	r1, [r3, #28]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	68da      	ldr	r2, [r3, #12]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	430a      	orrs	r2, r1
 800657a:	61da      	str	r2, [r3, #28]
      break;
 800657c:	e013      	b.n	80065a6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	6a1b      	ldr	r3, [r3, #32]
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	6812      	ldr	r2, [r2, #0]
 8006588:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800658c:	f023 030f 	bic.w	r3, r3, #15
 8006590:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	6a19      	ldr	r1, [r3, #32]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	68da      	ldr	r2, [r3, #12]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	430a      	orrs	r2, r1
 80065a2:	621a      	str	r2, [r3, #32]
      break;
 80065a4:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80065a6:	4b19      	ldr	r3, [pc, #100]	; (800660c <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80065a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a18      	ldr	r2, [pc, #96]	; (8006610 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d109      	bne.n	80065c8 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2b12      	cmp	r3, #18
 80065ba:	d105      	bne.n	80065c8 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a10      	ldr	r2, [pc, #64]	; (8006610 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d10e      	bne.n	80065f0 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a0f      	ldr	r2, [pc, #60]	; (8006614 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d003      	beq.n	80065e4 <HAL_ADCEx_InjectedConfigChannel+0x300>
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2b11      	cmp	r3, #17
 80065e2:	d105      	bne.n	80065f0 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	000f0001 	.word	0x000f0001
 800660c:	40012300 	.word	0x40012300
 8006610:	40012000 	.word	0x40012000
 8006614:	10000012 	.word	0x10000012

08006618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f003 0307 	and.w	r3, r3, #7
 8006626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006628:	4b0c      	ldr	r3, [pc, #48]	; (800665c <__NVIC_SetPriorityGrouping+0x44>)
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006634:	4013      	ands	r3, r2
 8006636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800664a:	4a04      	ldr	r2, [pc, #16]	; (800665c <__NVIC_SetPriorityGrouping+0x44>)
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	60d3      	str	r3, [r2, #12]
}
 8006650:	bf00      	nop
 8006652:	3714      	adds	r7, #20
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr
 800665c:	e000ed00 	.word	0xe000ed00

08006660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006660:	b480      	push	{r7}
 8006662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006664:	4b04      	ldr	r3, [pc, #16]	; (8006678 <__NVIC_GetPriorityGrouping+0x18>)
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	0a1b      	lsrs	r3, r3, #8
 800666a:	f003 0307 	and.w	r3, r3, #7
}
 800666e:	4618      	mov	r0, r3
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr
 8006678:	e000ed00 	.word	0xe000ed00

0800667c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	4603      	mov	r3, r0
 8006684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800668a:	2b00      	cmp	r3, #0
 800668c:	db0b      	blt.n	80066a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800668e:	79fb      	ldrb	r3, [r7, #7]
 8006690:	f003 021f 	and.w	r2, r3, #31
 8006694:	4907      	ldr	r1, [pc, #28]	; (80066b4 <__NVIC_EnableIRQ+0x38>)
 8006696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800669a:	095b      	lsrs	r3, r3, #5
 800669c:	2001      	movs	r0, #1
 800669e:	fa00 f202 	lsl.w	r2, r0, r2
 80066a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80066a6:	bf00      	nop
 80066a8:	370c      	adds	r7, #12
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	e000e100 	.word	0xe000e100

080066b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	4603      	mov	r3, r0
 80066c0:	6039      	str	r1, [r7, #0]
 80066c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	db0a      	blt.n	80066e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	b2da      	uxtb	r2, r3
 80066d0:	490c      	ldr	r1, [pc, #48]	; (8006704 <__NVIC_SetPriority+0x4c>)
 80066d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066d6:	0112      	lsls	r2, r2, #4
 80066d8:	b2d2      	uxtb	r2, r2
 80066da:	440b      	add	r3, r1
 80066dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80066e0:	e00a      	b.n	80066f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	4908      	ldr	r1, [pc, #32]	; (8006708 <__NVIC_SetPriority+0x50>)
 80066e8:	79fb      	ldrb	r3, [r7, #7]
 80066ea:	f003 030f 	and.w	r3, r3, #15
 80066ee:	3b04      	subs	r3, #4
 80066f0:	0112      	lsls	r2, r2, #4
 80066f2:	b2d2      	uxtb	r2, r2
 80066f4:	440b      	add	r3, r1
 80066f6:	761a      	strb	r2, [r3, #24]
}
 80066f8:	bf00      	nop
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr
 8006704:	e000e100 	.word	0xe000e100
 8006708:	e000ed00 	.word	0xe000ed00

0800670c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800670c:	b480      	push	{r7}
 800670e:	b089      	sub	sp, #36	; 0x24
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f003 0307 	and.w	r3, r3, #7
 800671e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	f1c3 0307 	rsb	r3, r3, #7
 8006726:	2b04      	cmp	r3, #4
 8006728:	bf28      	it	cs
 800672a:	2304      	movcs	r3, #4
 800672c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	3304      	adds	r3, #4
 8006732:	2b06      	cmp	r3, #6
 8006734:	d902      	bls.n	800673c <NVIC_EncodePriority+0x30>
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	3b03      	subs	r3, #3
 800673a:	e000      	b.n	800673e <NVIC_EncodePriority+0x32>
 800673c:	2300      	movs	r3, #0
 800673e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006740:	f04f 32ff 	mov.w	r2, #4294967295
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	fa02 f303 	lsl.w	r3, r2, r3
 800674a:	43da      	mvns	r2, r3
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	401a      	ands	r2, r3
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006754:	f04f 31ff 	mov.w	r1, #4294967295
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	fa01 f303 	lsl.w	r3, r1, r3
 800675e:	43d9      	mvns	r1, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006764:	4313      	orrs	r3, r2
         );
}
 8006766:	4618      	mov	r0, r3
 8006768:	3724      	adds	r7, #36	; 0x24
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
	...

08006774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	3b01      	subs	r3, #1
 8006780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006784:	d301      	bcc.n	800678a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006786:	2301      	movs	r3, #1
 8006788:	e00f      	b.n	80067aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800678a:	4a0a      	ldr	r2, [pc, #40]	; (80067b4 <SysTick_Config+0x40>)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	3b01      	subs	r3, #1
 8006790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006792:	210f      	movs	r1, #15
 8006794:	f04f 30ff 	mov.w	r0, #4294967295
 8006798:	f7ff ff8e 	bl	80066b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800679c:	4b05      	ldr	r3, [pc, #20]	; (80067b4 <SysTick_Config+0x40>)
 800679e:	2200      	movs	r2, #0
 80067a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80067a2:	4b04      	ldr	r3, [pc, #16]	; (80067b4 <SysTick_Config+0x40>)
 80067a4:	2207      	movs	r2, #7
 80067a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3708      	adds	r7, #8
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	e000e010 	.word	0xe000e010

080067b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f7ff ff29 	bl	8006618 <__NVIC_SetPriorityGrouping>
}
 80067c6:	bf00      	nop
 80067c8:	3708      	adds	r7, #8
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b086      	sub	sp, #24
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	4603      	mov	r3, r0
 80067d6:	60b9      	str	r1, [r7, #8]
 80067d8:	607a      	str	r2, [r7, #4]
 80067da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80067dc:	2300      	movs	r3, #0
 80067de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80067e0:	f7ff ff3e 	bl	8006660 <__NVIC_GetPriorityGrouping>
 80067e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	68b9      	ldr	r1, [r7, #8]
 80067ea:	6978      	ldr	r0, [r7, #20]
 80067ec:	f7ff ff8e 	bl	800670c <NVIC_EncodePriority>
 80067f0:	4602      	mov	r2, r0
 80067f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067f6:	4611      	mov	r1, r2
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7ff ff5d 	bl	80066b8 <__NVIC_SetPriority>
}
 80067fe:	bf00      	nop
 8006800:	3718      	adds	r7, #24
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b082      	sub	sp, #8
 800680a:	af00      	add	r7, sp, #0
 800680c:	4603      	mov	r3, r0
 800680e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006814:	4618      	mov	r0, r3
 8006816:	f7ff ff31 	bl	800667c <__NVIC_EnableIRQ>
}
 800681a:	bf00      	nop
 800681c:	3708      	adds	r7, #8
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b082      	sub	sp, #8
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7ff ffa2 	bl	8006774 <SysTick_Config>
 8006830:	4603      	mov	r3, r0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3708      	adds	r7, #8
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
	...

0800683c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006844:	2300      	movs	r3, #0
 8006846:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006848:	f7fe fe3c 	bl	80054c4 <HAL_GetTick>
 800684c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e099      	b.n	800698c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f022 0201 	bic.w	r2, r2, #1
 8006876:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006878:	e00f      	b.n	800689a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800687a:	f7fe fe23 	bl	80054c4 <HAL_GetTick>
 800687e:	4602      	mov	r2, r0
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	2b05      	cmp	r3, #5
 8006886:	d908      	bls.n	800689a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2220      	movs	r2, #32
 800688c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2203      	movs	r2, #3
 8006892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e078      	b.n	800698c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1e8      	bne.n	800687a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80068b0:	697a      	ldr	r2, [r7, #20]
 80068b2:	4b38      	ldr	r3, [pc, #224]	; (8006994 <HAL_DMA_Init+0x158>)
 80068b4:	4013      	ands	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80068c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a1b      	ldr	r3, [r3, #32]
 80068e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f0:	2b04      	cmp	r3, #4
 80068f2:	d107      	bne.n	8006904 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fc:	4313      	orrs	r3, r2
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	4313      	orrs	r3, r2
 8006902:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	f023 0307 	bic.w	r3, r3, #7
 800691a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	4313      	orrs	r3, r2
 8006924:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692a:	2b04      	cmp	r3, #4
 800692c:	d117      	bne.n	800695e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	4313      	orrs	r3, r2
 8006936:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00e      	beq.n	800695e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 fadf 	bl	8006f04 <DMA_CheckFifoParam>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d008      	beq.n	800695e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2240      	movs	r2, #64	; 0x40
 8006950:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800695a:	2301      	movs	r3, #1
 800695c:	e016      	b.n	800698c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 fa96 	bl	8006e98 <DMA_CalcBaseAndBitshift>
 800696c:	4603      	mov	r3, r0
 800696e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006974:	223f      	movs	r2, #63	; 0x3f
 8006976:	409a      	lsls	r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2201      	movs	r2, #1
 8006986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3718      	adds	r7, #24
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	f010803f 	.word	0xf010803f

08006998 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
 80069a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069a6:	2300      	movs	r3, #0
 80069a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d101      	bne.n	80069be <HAL_DMA_Start_IT+0x26>
 80069ba:	2302      	movs	r3, #2
 80069bc:	e040      	b.n	8006a40 <HAL_DMA_Start_IT+0xa8>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d12f      	bne.n	8006a32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2202      	movs	r2, #2
 80069d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	68b9      	ldr	r1, [r7, #8]
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f000 fa28 	bl	8006e3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069f0:	223f      	movs	r2, #63	; 0x3f
 80069f2:	409a      	lsls	r2, r3
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f042 0216 	orr.w	r2, r2, #22
 8006a06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d007      	beq.n	8006a20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f042 0208 	orr.w	r2, r2, #8
 8006a1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f042 0201 	orr.w	r2, r2, #1
 8006a2e:	601a      	str	r2, [r3, #0]
 8006a30:	e005      	b.n	8006a3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006a3a:	2302      	movs	r3, #2
 8006a3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3718      	adds	r7, #24
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006a56:	f7fe fd35 	bl	80054c4 <HAL_GetTick>
 8006a5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d008      	beq.n	8006a7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2280      	movs	r2, #128	; 0x80
 8006a6c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e052      	b.n	8006b20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f022 0216 	bic.w	r2, r2, #22
 8006a88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	695a      	ldr	r2, [r3, #20]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d103      	bne.n	8006aaa <HAL_DMA_Abort+0x62>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d007      	beq.n	8006aba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f022 0208 	bic.w	r2, r2, #8
 8006ab8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f022 0201 	bic.w	r2, r2, #1
 8006ac8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006aca:	e013      	b.n	8006af4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006acc:	f7fe fcfa 	bl	80054c4 <HAL_GetTick>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	2b05      	cmp	r3, #5
 8006ad8:	d90c      	bls.n	8006af4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2220      	movs	r2, #32
 8006ade:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2203      	movs	r2, #3
 8006ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e015      	b.n	8006b20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1e4      	bne.n	8006acc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b06:	223f      	movs	r2, #63	; 0x3f
 8006b08:	409a      	lsls	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006b30:	2300      	movs	r3, #0
 8006b32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006b34:	4b8e      	ldr	r3, [pc, #568]	; (8006d70 <HAL_DMA_IRQHandler+0x248>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a8e      	ldr	r2, [pc, #568]	; (8006d74 <HAL_DMA_IRQHandler+0x24c>)
 8006b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b3e:	0a9b      	lsrs	r3, r3, #10
 8006b40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b52:	2208      	movs	r2, #8
 8006b54:	409a      	lsls	r2, r3
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	4013      	ands	r3, r2
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d01a      	beq.n	8006b94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0304 	and.w	r3, r3, #4
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d013      	beq.n	8006b94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f022 0204 	bic.w	r2, r2, #4
 8006b7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b80:	2208      	movs	r2, #8
 8006b82:	409a      	lsls	r2, r3
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b8c:	f043 0201 	orr.w	r2, r3, #1
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b98:	2201      	movs	r2, #1
 8006b9a:	409a      	lsls	r2, r3
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d012      	beq.n	8006bca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00b      	beq.n	8006bca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	409a      	lsls	r2, r3
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc2:	f043 0202 	orr.w	r2, r3, #2
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bce:	2204      	movs	r2, #4
 8006bd0:	409a      	lsls	r2, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d012      	beq.n	8006c00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0302 	and.w	r3, r3, #2
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00b      	beq.n	8006c00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bec:	2204      	movs	r2, #4
 8006bee:	409a      	lsls	r2, r3
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bf8:	f043 0204 	orr.w	r2, r3, #4
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c04:	2210      	movs	r2, #16
 8006c06:	409a      	lsls	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d043      	beq.n	8006c98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0308 	and.w	r3, r3, #8
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d03c      	beq.n	8006c98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c22:	2210      	movs	r2, #16
 8006c24:	409a      	lsls	r2, r3
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d018      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d108      	bne.n	8006c58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d024      	beq.n	8006c98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	4798      	blx	r3
 8006c56:	e01f      	b.n	8006c98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d01b      	beq.n	8006c98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	4798      	blx	r3
 8006c68:	e016      	b.n	8006c98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d107      	bne.n	8006c88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 0208 	bic.w	r2, r2, #8
 8006c86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d003      	beq.n	8006c98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	409a      	lsls	r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 808f 	beq.w	8006dc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0310 	and.w	r3, r3, #16
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f000 8087 	beq.w	8006dc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cbe:	2220      	movs	r2, #32
 8006cc0:	409a      	lsls	r2, r3
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	2b05      	cmp	r3, #5
 8006cd0:	d136      	bne.n	8006d40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f022 0216 	bic.w	r2, r2, #22
 8006ce0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	695a      	ldr	r2, [r3, #20]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cf0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d103      	bne.n	8006d02 <HAL_DMA_IRQHandler+0x1da>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d007      	beq.n	8006d12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f022 0208 	bic.w	r2, r2, #8
 8006d10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d16:	223f      	movs	r2, #63	; 0x3f
 8006d18:	409a      	lsls	r2, r3
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d07e      	beq.n	8006e34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	4798      	blx	r3
        }
        return;
 8006d3e:	e079      	b.n	8006e34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d01d      	beq.n	8006d8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10d      	bne.n	8006d78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d031      	beq.n	8006dc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	4798      	blx	r3
 8006d6c:	e02c      	b.n	8006dc8 <HAL_DMA_IRQHandler+0x2a0>
 8006d6e:	bf00      	nop
 8006d70:	200003c4 	.word	0x200003c4
 8006d74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d023      	beq.n	8006dc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	4798      	blx	r3
 8006d88:	e01e      	b.n	8006dc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10f      	bne.n	8006db8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f022 0210 	bic.w	r2, r2, #16
 8006da6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d003      	beq.n	8006dc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d032      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd4:	f003 0301 	and.w	r3, r3, #1
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d022      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2205      	movs	r2, #5
 8006de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f022 0201 	bic.w	r2, r2, #1
 8006df2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	3301      	adds	r3, #1
 8006df8:	60bb      	str	r3, [r7, #8]
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d307      	bcc.n	8006e10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0301 	and.w	r3, r3, #1
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1f2      	bne.n	8006df4 <HAL_DMA_IRQHandler+0x2cc>
 8006e0e:	e000      	b.n	8006e12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006e10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2201      	movs	r2, #1
 8006e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d005      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	4798      	blx	r3
 8006e32:	e000      	b.n	8006e36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006e34:	bf00      	nop
    }
  }
}
 8006e36:	3718      	adds	r7, #24
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
 8006e48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	2b40      	cmp	r3, #64	; 0x40
 8006e68:	d108      	bne.n	8006e7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68ba      	ldr	r2, [r7, #8]
 8006e78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006e7a:	e007      	b.n	8006e8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68ba      	ldr	r2, [r7, #8]
 8006e82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	60da      	str	r2, [r3, #12]
}
 8006e8c:	bf00      	nop
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	3b10      	subs	r3, #16
 8006ea8:	4a14      	ldr	r2, [pc, #80]	; (8006efc <DMA_CalcBaseAndBitshift+0x64>)
 8006eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8006eae:	091b      	lsrs	r3, r3, #4
 8006eb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006eb2:	4a13      	ldr	r2, [pc, #76]	; (8006f00 <DMA_CalcBaseAndBitshift+0x68>)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2b03      	cmp	r3, #3
 8006ec4:	d909      	bls.n	8006eda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006ece:	f023 0303 	bic.w	r3, r3, #3
 8006ed2:	1d1a      	adds	r2, r3, #4
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	659a      	str	r2, [r3, #88]	; 0x58
 8006ed8:	e007      	b.n	8006eea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006ee2:	f023 0303 	bic.w	r3, r3, #3
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3714      	adds	r7, #20
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	aaaaaaab 	.word	0xaaaaaaab
 8006f00:	0800c5d4 	.word	0x0800c5d4

08006f04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d11f      	bne.n	8006f5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	2b03      	cmp	r3, #3
 8006f22:	d856      	bhi.n	8006fd2 <DMA_CheckFifoParam+0xce>
 8006f24:	a201      	add	r2, pc, #4	; (adr r2, 8006f2c <DMA_CheckFifoParam+0x28>)
 8006f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2a:	bf00      	nop
 8006f2c:	08006f3d 	.word	0x08006f3d
 8006f30:	08006f4f 	.word	0x08006f4f
 8006f34:	08006f3d 	.word	0x08006f3d
 8006f38:	08006fd3 	.word	0x08006fd3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d046      	beq.n	8006fd6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f4c:	e043      	b.n	8006fd6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006f56:	d140      	bne.n	8006fda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f5c:	e03d      	b.n	8006fda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f66:	d121      	bne.n	8006fac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	2b03      	cmp	r3, #3
 8006f6c:	d837      	bhi.n	8006fde <DMA_CheckFifoParam+0xda>
 8006f6e:	a201      	add	r2, pc, #4	; (adr r2, 8006f74 <DMA_CheckFifoParam+0x70>)
 8006f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f74:	08006f85 	.word	0x08006f85
 8006f78:	08006f8b 	.word	0x08006f8b
 8006f7c:	08006f85 	.word	0x08006f85
 8006f80:	08006f9d 	.word	0x08006f9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	73fb      	strb	r3, [r7, #15]
      break;
 8006f88:	e030      	b.n	8006fec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d025      	beq.n	8006fe2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f9a:	e022      	b.n	8006fe2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006fa4:	d11f      	bne.n	8006fe6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006faa:	e01c      	b.n	8006fe6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d903      	bls.n	8006fba <DMA_CheckFifoParam+0xb6>
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	2b03      	cmp	r3, #3
 8006fb6:	d003      	beq.n	8006fc0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006fb8:	e018      	b.n	8006fec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	73fb      	strb	r3, [r7, #15]
      break;
 8006fbe:	e015      	b.n	8006fec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00e      	beq.n	8006fea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	73fb      	strb	r3, [r7, #15]
      break;
 8006fd0:	e00b      	b.n	8006fea <DMA_CheckFifoParam+0xe6>
      break;
 8006fd2:	bf00      	nop
 8006fd4:	e00a      	b.n	8006fec <DMA_CheckFifoParam+0xe8>
      break;
 8006fd6:	bf00      	nop
 8006fd8:	e008      	b.n	8006fec <DMA_CheckFifoParam+0xe8>
      break;
 8006fda:	bf00      	nop
 8006fdc:	e006      	b.n	8006fec <DMA_CheckFifoParam+0xe8>
      break;
 8006fde:	bf00      	nop
 8006fe0:	e004      	b.n	8006fec <DMA_CheckFifoParam+0xe8>
      break;
 8006fe2:	bf00      	nop
 8006fe4:	e002      	b.n	8006fec <DMA_CheckFifoParam+0xe8>
      break;   
 8006fe6:	bf00      	nop
 8006fe8:	e000      	b.n	8006fec <DMA_CheckFifoParam+0xe8>
      break;
 8006fea:	bf00      	nop
    }
  } 
  
  return status; 
 8006fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3714      	adds	r7, #20
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop

08006ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b089      	sub	sp, #36	; 0x24
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007006:	2300      	movs	r3, #0
 8007008:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800700a:	2300      	movs	r3, #0
 800700c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800700e:	2300      	movs	r3, #0
 8007010:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007012:	2300      	movs	r3, #0
 8007014:	61fb      	str	r3, [r7, #28]
 8007016:	e159      	b.n	80072cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007018:	2201      	movs	r2, #1
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	fa02 f303 	lsl.w	r3, r2, r3
 8007020:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	4013      	ands	r3, r2
 800702a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	429a      	cmp	r2, r3
 8007032:	f040 8148 	bne.w	80072c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	f003 0303 	and.w	r3, r3, #3
 800703e:	2b01      	cmp	r3, #1
 8007040:	d005      	beq.n	800704e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800704a:	2b02      	cmp	r3, #2
 800704c:	d130      	bne.n	80070b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	005b      	lsls	r3, r3, #1
 8007058:	2203      	movs	r2, #3
 800705a:	fa02 f303 	lsl.w	r3, r2, r3
 800705e:	43db      	mvns	r3, r3
 8007060:	69ba      	ldr	r2, [r7, #24]
 8007062:	4013      	ands	r3, r2
 8007064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	68da      	ldr	r2, [r3, #12]
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	005b      	lsls	r3, r3, #1
 800706e:	fa02 f303 	lsl.w	r3, r2, r3
 8007072:	69ba      	ldr	r2, [r7, #24]
 8007074:	4313      	orrs	r3, r2
 8007076:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	69ba      	ldr	r2, [r7, #24]
 800707c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007084:	2201      	movs	r2, #1
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	fa02 f303 	lsl.w	r3, r2, r3
 800708c:	43db      	mvns	r3, r3
 800708e:	69ba      	ldr	r2, [r7, #24]
 8007090:	4013      	ands	r3, r2
 8007092:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	091b      	lsrs	r3, r3, #4
 800709a:	f003 0201 	and.w	r2, r3, #1
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	fa02 f303 	lsl.w	r3, r2, r3
 80070a4:	69ba      	ldr	r2, [r7, #24]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	69ba      	ldr	r2, [r7, #24]
 80070ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	f003 0303 	and.w	r3, r3, #3
 80070b8:	2b03      	cmp	r3, #3
 80070ba:	d017      	beq.n	80070ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	005b      	lsls	r3, r3, #1
 80070c6:	2203      	movs	r2, #3
 80070c8:	fa02 f303 	lsl.w	r3, r2, r3
 80070cc:	43db      	mvns	r3, r3
 80070ce:	69ba      	ldr	r2, [r7, #24]
 80070d0:	4013      	ands	r3, r2
 80070d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	689a      	ldr	r2, [r3, #8]
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	005b      	lsls	r3, r3, #1
 80070dc:	fa02 f303 	lsl.w	r3, r2, r3
 80070e0:	69ba      	ldr	r2, [r7, #24]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	69ba      	ldr	r2, [r7, #24]
 80070ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	f003 0303 	and.w	r3, r3, #3
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d123      	bne.n	8007140 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	08da      	lsrs	r2, r3, #3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	3208      	adds	r2, #8
 8007100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007104:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	f003 0307 	and.w	r3, r3, #7
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	220f      	movs	r2, #15
 8007110:	fa02 f303 	lsl.w	r3, r2, r3
 8007114:	43db      	mvns	r3, r3
 8007116:	69ba      	ldr	r2, [r7, #24]
 8007118:	4013      	ands	r3, r2
 800711a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	691a      	ldr	r2, [r3, #16]
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	f003 0307 	and.w	r3, r3, #7
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	fa02 f303 	lsl.w	r3, r2, r3
 800712c:	69ba      	ldr	r2, [r7, #24]
 800712e:	4313      	orrs	r3, r2
 8007130:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	08da      	lsrs	r2, r3, #3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	3208      	adds	r2, #8
 800713a:	69b9      	ldr	r1, [r7, #24]
 800713c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	005b      	lsls	r3, r3, #1
 800714a:	2203      	movs	r2, #3
 800714c:	fa02 f303 	lsl.w	r3, r2, r3
 8007150:	43db      	mvns	r3, r3
 8007152:	69ba      	ldr	r2, [r7, #24]
 8007154:	4013      	ands	r3, r2
 8007156:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	f003 0203 	and.w	r2, r3, #3
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	005b      	lsls	r3, r3, #1
 8007164:	fa02 f303 	lsl.w	r3, r2, r3
 8007168:	69ba      	ldr	r2, [r7, #24]
 800716a:	4313      	orrs	r3, r2
 800716c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	69ba      	ldr	r2, [r7, #24]
 8007172:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800717c:	2b00      	cmp	r3, #0
 800717e:	f000 80a2 	beq.w	80072c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007182:	2300      	movs	r3, #0
 8007184:	60fb      	str	r3, [r7, #12]
 8007186:	4b57      	ldr	r3, [pc, #348]	; (80072e4 <HAL_GPIO_Init+0x2e8>)
 8007188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800718a:	4a56      	ldr	r2, [pc, #344]	; (80072e4 <HAL_GPIO_Init+0x2e8>)
 800718c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007190:	6453      	str	r3, [r2, #68]	; 0x44
 8007192:	4b54      	ldr	r3, [pc, #336]	; (80072e4 <HAL_GPIO_Init+0x2e8>)
 8007194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800719a:	60fb      	str	r3, [r7, #12]
 800719c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800719e:	4a52      	ldr	r2, [pc, #328]	; (80072e8 <HAL_GPIO_Init+0x2ec>)
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	089b      	lsrs	r3, r3, #2
 80071a4:	3302      	adds	r3, #2
 80071a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	f003 0303 	and.w	r3, r3, #3
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	220f      	movs	r2, #15
 80071b6:	fa02 f303 	lsl.w	r3, r2, r3
 80071ba:	43db      	mvns	r3, r3
 80071bc:	69ba      	ldr	r2, [r7, #24]
 80071be:	4013      	ands	r3, r2
 80071c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a49      	ldr	r2, [pc, #292]	; (80072ec <HAL_GPIO_Init+0x2f0>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d019      	beq.n	80071fe <HAL_GPIO_Init+0x202>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a48      	ldr	r2, [pc, #288]	; (80072f0 <HAL_GPIO_Init+0x2f4>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d013      	beq.n	80071fa <HAL_GPIO_Init+0x1fe>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a47      	ldr	r2, [pc, #284]	; (80072f4 <HAL_GPIO_Init+0x2f8>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d00d      	beq.n	80071f6 <HAL_GPIO_Init+0x1fa>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a46      	ldr	r2, [pc, #280]	; (80072f8 <HAL_GPIO_Init+0x2fc>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d007      	beq.n	80071f2 <HAL_GPIO_Init+0x1f6>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a45      	ldr	r2, [pc, #276]	; (80072fc <HAL_GPIO_Init+0x300>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d101      	bne.n	80071ee <HAL_GPIO_Init+0x1f2>
 80071ea:	2304      	movs	r3, #4
 80071ec:	e008      	b.n	8007200 <HAL_GPIO_Init+0x204>
 80071ee:	2307      	movs	r3, #7
 80071f0:	e006      	b.n	8007200 <HAL_GPIO_Init+0x204>
 80071f2:	2303      	movs	r3, #3
 80071f4:	e004      	b.n	8007200 <HAL_GPIO_Init+0x204>
 80071f6:	2302      	movs	r3, #2
 80071f8:	e002      	b.n	8007200 <HAL_GPIO_Init+0x204>
 80071fa:	2301      	movs	r3, #1
 80071fc:	e000      	b.n	8007200 <HAL_GPIO_Init+0x204>
 80071fe:	2300      	movs	r3, #0
 8007200:	69fa      	ldr	r2, [r7, #28]
 8007202:	f002 0203 	and.w	r2, r2, #3
 8007206:	0092      	lsls	r2, r2, #2
 8007208:	4093      	lsls	r3, r2
 800720a:	69ba      	ldr	r2, [r7, #24]
 800720c:	4313      	orrs	r3, r2
 800720e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007210:	4935      	ldr	r1, [pc, #212]	; (80072e8 <HAL_GPIO_Init+0x2ec>)
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	089b      	lsrs	r3, r3, #2
 8007216:	3302      	adds	r3, #2
 8007218:	69ba      	ldr	r2, [r7, #24]
 800721a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800721e:	4b38      	ldr	r3, [pc, #224]	; (8007300 <HAL_GPIO_Init+0x304>)
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	43db      	mvns	r3, r3
 8007228:	69ba      	ldr	r2, [r7, #24]
 800722a:	4013      	ands	r3, r2
 800722c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d003      	beq.n	8007242 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800723a:	69ba      	ldr	r2, [r7, #24]
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	4313      	orrs	r3, r2
 8007240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007242:	4a2f      	ldr	r2, [pc, #188]	; (8007300 <HAL_GPIO_Init+0x304>)
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007248:	4b2d      	ldr	r3, [pc, #180]	; (8007300 <HAL_GPIO_Init+0x304>)
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	43db      	mvns	r3, r3
 8007252:	69ba      	ldr	r2, [r7, #24]
 8007254:	4013      	ands	r3, r2
 8007256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007260:	2b00      	cmp	r3, #0
 8007262:	d003      	beq.n	800726c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007264:	69ba      	ldr	r2, [r7, #24]
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	4313      	orrs	r3, r2
 800726a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800726c:	4a24      	ldr	r2, [pc, #144]	; (8007300 <HAL_GPIO_Init+0x304>)
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007272:	4b23      	ldr	r3, [pc, #140]	; (8007300 <HAL_GPIO_Init+0x304>)
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	43db      	mvns	r3, r3
 800727c:	69ba      	ldr	r2, [r7, #24]
 800727e:	4013      	ands	r3, r2
 8007280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d003      	beq.n	8007296 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800728e:	69ba      	ldr	r2, [r7, #24]
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	4313      	orrs	r3, r2
 8007294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007296:	4a1a      	ldr	r2, [pc, #104]	; (8007300 <HAL_GPIO_Init+0x304>)
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800729c:	4b18      	ldr	r3, [pc, #96]	; (8007300 <HAL_GPIO_Init+0x304>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	43db      	mvns	r3, r3
 80072a6:	69ba      	ldr	r2, [r7, #24]
 80072a8:	4013      	ands	r3, r2
 80072aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d003      	beq.n	80072c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80072b8:	69ba      	ldr	r2, [r7, #24]
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	4313      	orrs	r3, r2
 80072be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80072c0:	4a0f      	ldr	r2, [pc, #60]	; (8007300 <HAL_GPIO_Init+0x304>)
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	3301      	adds	r3, #1
 80072ca:	61fb      	str	r3, [r7, #28]
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	2b0f      	cmp	r3, #15
 80072d0:	f67f aea2 	bls.w	8007018 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80072d4:	bf00      	nop
 80072d6:	bf00      	nop
 80072d8:	3724      	adds	r7, #36	; 0x24
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	40023800 	.word	0x40023800
 80072e8:	40013800 	.word	0x40013800
 80072ec:	40020000 	.word	0x40020000
 80072f0:	40020400 	.word	0x40020400
 80072f4:	40020800 	.word	0x40020800
 80072f8:	40020c00 	.word	0x40020c00
 80072fc:	40021000 	.word	0x40021000
 8007300:	40013c00 	.word	0x40013c00

08007304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	807b      	strh	r3, [r7, #2]
 8007310:	4613      	mov	r3, r2
 8007312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007314:	787b      	ldrb	r3, [r7, #1]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d003      	beq.n	8007322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800731a:	887a      	ldrh	r2, [r7, #2]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007320:	e003      	b.n	800732a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007322:	887b      	ldrh	r3, [r7, #2]
 8007324:	041a      	lsls	r2, r3, #16
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	619a      	str	r2, [r3, #24]
}
 800732a:	bf00      	nop
 800732c:	370c      	adds	r7, #12
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
	...

08007338 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d101      	bne.n	800734a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e12b      	b.n	80075a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b00      	cmp	r3, #0
 8007354:	d106      	bne.n	8007364 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f7fd fd98 	bl	8004e94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2224      	movs	r2, #36	; 0x24
 8007368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f022 0201 	bic.w	r2, r2, #1
 800737a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800738a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800739a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800739c:	f001 fbbc 	bl	8008b18 <HAL_RCC_GetPCLK1Freq>
 80073a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	4a81      	ldr	r2, [pc, #516]	; (80075ac <HAL_I2C_Init+0x274>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d807      	bhi.n	80073bc <HAL_I2C_Init+0x84>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	4a80      	ldr	r2, [pc, #512]	; (80075b0 <HAL_I2C_Init+0x278>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	bf94      	ite	ls
 80073b4:	2301      	movls	r3, #1
 80073b6:	2300      	movhi	r3, #0
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	e006      	b.n	80073ca <HAL_I2C_Init+0x92>
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	4a7d      	ldr	r2, [pc, #500]	; (80075b4 <HAL_I2C_Init+0x27c>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	bf94      	ite	ls
 80073c4:	2301      	movls	r3, #1
 80073c6:	2300      	movhi	r3, #0
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d001      	beq.n	80073d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e0e7      	b.n	80075a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	4a78      	ldr	r2, [pc, #480]	; (80075b8 <HAL_I2C_Init+0x280>)
 80073d6:	fba2 2303 	umull	r2, r3, r2, r3
 80073da:	0c9b      	lsrs	r3, r3, #18
 80073dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	430a      	orrs	r2, r1
 80073f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	6a1b      	ldr	r3, [r3, #32]
 80073f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	4a6a      	ldr	r2, [pc, #424]	; (80075ac <HAL_I2C_Init+0x274>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d802      	bhi.n	800740c <HAL_I2C_Init+0xd4>
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	3301      	adds	r3, #1
 800740a:	e009      	b.n	8007420 <HAL_I2C_Init+0xe8>
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007412:	fb02 f303 	mul.w	r3, r2, r3
 8007416:	4a69      	ldr	r2, [pc, #420]	; (80075bc <HAL_I2C_Init+0x284>)
 8007418:	fba2 2303 	umull	r2, r3, r2, r3
 800741c:	099b      	lsrs	r3, r3, #6
 800741e:	3301      	adds	r3, #1
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	6812      	ldr	r2, [r2, #0]
 8007424:	430b      	orrs	r3, r1
 8007426:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	69db      	ldr	r3, [r3, #28]
 800742e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007432:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	495c      	ldr	r1, [pc, #368]	; (80075ac <HAL_I2C_Init+0x274>)
 800743c:	428b      	cmp	r3, r1
 800743e:	d819      	bhi.n	8007474 <HAL_I2C_Init+0x13c>
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	1e59      	subs	r1, r3, #1
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	005b      	lsls	r3, r3, #1
 800744a:	fbb1 f3f3 	udiv	r3, r1, r3
 800744e:	1c59      	adds	r1, r3, #1
 8007450:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007454:	400b      	ands	r3, r1
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00a      	beq.n	8007470 <HAL_I2C_Init+0x138>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	1e59      	subs	r1, r3, #1
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	005b      	lsls	r3, r3, #1
 8007464:	fbb1 f3f3 	udiv	r3, r1, r3
 8007468:	3301      	adds	r3, #1
 800746a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800746e:	e051      	b.n	8007514 <HAL_I2C_Init+0x1dc>
 8007470:	2304      	movs	r3, #4
 8007472:	e04f      	b.n	8007514 <HAL_I2C_Init+0x1dc>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d111      	bne.n	80074a0 <HAL_I2C_Init+0x168>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	1e58      	subs	r0, r3, #1
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6859      	ldr	r1, [r3, #4]
 8007484:	460b      	mov	r3, r1
 8007486:	005b      	lsls	r3, r3, #1
 8007488:	440b      	add	r3, r1
 800748a:	fbb0 f3f3 	udiv	r3, r0, r3
 800748e:	3301      	adds	r3, #1
 8007490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007494:	2b00      	cmp	r3, #0
 8007496:	bf0c      	ite	eq
 8007498:	2301      	moveq	r3, #1
 800749a:	2300      	movne	r3, #0
 800749c:	b2db      	uxtb	r3, r3
 800749e:	e012      	b.n	80074c6 <HAL_I2C_Init+0x18e>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	1e58      	subs	r0, r3, #1
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6859      	ldr	r1, [r3, #4]
 80074a8:	460b      	mov	r3, r1
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	440b      	add	r3, r1
 80074ae:	0099      	lsls	r1, r3, #2
 80074b0:	440b      	add	r3, r1
 80074b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80074b6:	3301      	adds	r3, #1
 80074b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074bc:	2b00      	cmp	r3, #0
 80074be:	bf0c      	ite	eq
 80074c0:	2301      	moveq	r3, #1
 80074c2:	2300      	movne	r3, #0
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <HAL_I2C_Init+0x196>
 80074ca:	2301      	movs	r3, #1
 80074cc:	e022      	b.n	8007514 <HAL_I2C_Init+0x1dc>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10e      	bne.n	80074f4 <HAL_I2C_Init+0x1bc>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	1e58      	subs	r0, r3, #1
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6859      	ldr	r1, [r3, #4]
 80074de:	460b      	mov	r3, r1
 80074e0:	005b      	lsls	r3, r3, #1
 80074e2:	440b      	add	r3, r1
 80074e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80074e8:	3301      	adds	r3, #1
 80074ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074f2:	e00f      	b.n	8007514 <HAL_I2C_Init+0x1dc>
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	1e58      	subs	r0, r3, #1
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6859      	ldr	r1, [r3, #4]
 80074fc:	460b      	mov	r3, r1
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	440b      	add	r3, r1
 8007502:	0099      	lsls	r1, r3, #2
 8007504:	440b      	add	r3, r1
 8007506:	fbb0 f3f3 	udiv	r3, r0, r3
 800750a:	3301      	adds	r3, #1
 800750c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007510:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007514:	6879      	ldr	r1, [r7, #4]
 8007516:	6809      	ldr	r1, [r1, #0]
 8007518:	4313      	orrs	r3, r2
 800751a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	69da      	ldr	r2, [r3, #28]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	431a      	orrs	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	430a      	orrs	r2, r1
 8007536:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007542:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	6911      	ldr	r1, [r2, #16]
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	68d2      	ldr	r2, [r2, #12]
 800754e:	4311      	orrs	r1, r2
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	6812      	ldr	r2, [r2, #0]
 8007554:	430b      	orrs	r3, r1
 8007556:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	695a      	ldr	r2, [r3, #20]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	699b      	ldr	r3, [r3, #24]
 800756a:	431a      	orrs	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	430a      	orrs	r2, r1
 8007572:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f042 0201 	orr.w	r2, r2, #1
 8007582:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2220      	movs	r2, #32
 800758e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	000186a0 	.word	0x000186a0
 80075b0:	001e847f 	.word	0x001e847f
 80075b4:	003d08ff 	.word	0x003d08ff
 80075b8:	431bde83 	.word	0x431bde83
 80075bc:	10624dd3 	.word	0x10624dd3

080075c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b088      	sub	sp, #32
 80075c4:	af02      	add	r7, sp, #8
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	4608      	mov	r0, r1
 80075ca:	4611      	mov	r1, r2
 80075cc:	461a      	mov	r2, r3
 80075ce:	4603      	mov	r3, r0
 80075d0:	817b      	strh	r3, [r7, #10]
 80075d2:	460b      	mov	r3, r1
 80075d4:	813b      	strh	r3, [r7, #8]
 80075d6:	4613      	mov	r3, r2
 80075d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80075da:	f7fd ff73 	bl	80054c4 <HAL_GetTick>
 80075de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2b20      	cmp	r3, #32
 80075ea:	f040 80d9 	bne.w	80077a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	2319      	movs	r3, #25
 80075f4:	2201      	movs	r2, #1
 80075f6:	496d      	ldr	r1, [pc, #436]	; (80077ac <HAL_I2C_Mem_Write+0x1ec>)
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f000 fc7f 	bl	8007efc <I2C_WaitOnFlagUntilTimeout>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d001      	beq.n	8007608 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007604:	2302      	movs	r3, #2
 8007606:	e0cc      	b.n	80077a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800760e:	2b01      	cmp	r3, #1
 8007610:	d101      	bne.n	8007616 <HAL_I2C_Mem_Write+0x56>
 8007612:	2302      	movs	r3, #2
 8007614:	e0c5      	b.n	80077a2 <HAL_I2C_Mem_Write+0x1e2>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0301 	and.w	r3, r3, #1
 8007628:	2b01      	cmp	r3, #1
 800762a:	d007      	beq.n	800763c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f042 0201 	orr.w	r2, r2, #1
 800763a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800764a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2221      	movs	r2, #33	; 0x21
 8007650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2240      	movs	r2, #64	; 0x40
 8007658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2200      	movs	r2, #0
 8007660:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6a3a      	ldr	r2, [r7, #32]
 8007666:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800766c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007672:	b29a      	uxth	r2, r3
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	4a4d      	ldr	r2, [pc, #308]	; (80077b0 <HAL_I2C_Mem_Write+0x1f0>)
 800767c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800767e:	88f8      	ldrh	r0, [r7, #6]
 8007680:	893a      	ldrh	r2, [r7, #8]
 8007682:	8979      	ldrh	r1, [r7, #10]
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	9301      	str	r3, [sp, #4]
 8007688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768a:	9300      	str	r3, [sp, #0]
 800768c:	4603      	mov	r3, r0
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f000 fab6 	bl	8007c00 <I2C_RequestMemoryWrite>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d052      	beq.n	8007740 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e081      	b.n	80077a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800769e:	697a      	ldr	r2, [r7, #20]
 80076a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f000 fd00 	bl	80080a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00d      	beq.n	80076ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b2:	2b04      	cmp	r3, #4
 80076b4:	d107      	bne.n	80076c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e06b      	b.n	80077a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ce:	781a      	ldrb	r2, [r3, #0]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076da:	1c5a      	adds	r2, r3, #1
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076e4:	3b01      	subs	r3, #1
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	3b01      	subs	r3, #1
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	f003 0304 	and.w	r3, r3, #4
 8007704:	2b04      	cmp	r3, #4
 8007706:	d11b      	bne.n	8007740 <HAL_I2C_Mem_Write+0x180>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800770c:	2b00      	cmp	r3, #0
 800770e:	d017      	beq.n	8007740 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007714:	781a      	ldrb	r2, [r3, #0]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007720:	1c5a      	adds	r2, r3, #1
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800772a:	3b01      	subs	r3, #1
 800772c:	b29a      	uxth	r2, r3
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007736:	b29b      	uxth	r3, r3
 8007738:	3b01      	subs	r3, #1
 800773a:	b29a      	uxth	r2, r3
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007744:	2b00      	cmp	r3, #0
 8007746:	d1aa      	bne.n	800769e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007748:	697a      	ldr	r2, [r7, #20]
 800774a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f000 fcec 	bl	800812a <I2C_WaitOnBTFFlagUntilTimeout>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00d      	beq.n	8007774 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775c:	2b04      	cmp	r3, #4
 800775e:	d107      	bne.n	8007770 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800776e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e016      	b.n	80077a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007782:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2220      	movs	r2, #32
 8007788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800779c:	2300      	movs	r3, #0
 800779e:	e000      	b.n	80077a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80077a0:	2302      	movs	r3, #2
  }
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3718      	adds	r7, #24
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	00100002 	.word	0x00100002
 80077b0:	ffff0000 	.word	0xffff0000

080077b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b08c      	sub	sp, #48	; 0x30
 80077b8:	af02      	add	r7, sp, #8
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	4608      	mov	r0, r1
 80077be:	4611      	mov	r1, r2
 80077c0:	461a      	mov	r2, r3
 80077c2:	4603      	mov	r3, r0
 80077c4:	817b      	strh	r3, [r7, #10]
 80077c6:	460b      	mov	r3, r1
 80077c8:	813b      	strh	r3, [r7, #8]
 80077ca:	4613      	mov	r3, r2
 80077cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80077ce:	f7fd fe79 	bl	80054c4 <HAL_GetTick>
 80077d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	2b20      	cmp	r3, #32
 80077de:	f040 8208 	bne.w	8007bf2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80077e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e4:	9300      	str	r3, [sp, #0]
 80077e6:	2319      	movs	r3, #25
 80077e8:	2201      	movs	r2, #1
 80077ea:	497b      	ldr	r1, [pc, #492]	; (80079d8 <HAL_I2C_Mem_Read+0x224>)
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	f000 fb85 	bl	8007efc <I2C_WaitOnFlagUntilTimeout>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80077f8:	2302      	movs	r3, #2
 80077fa:	e1fb      	b.n	8007bf4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007802:	2b01      	cmp	r3, #1
 8007804:	d101      	bne.n	800780a <HAL_I2C_Mem_Read+0x56>
 8007806:	2302      	movs	r3, #2
 8007808:	e1f4      	b.n	8007bf4 <HAL_I2C_Mem_Read+0x440>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2201      	movs	r2, #1
 800780e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 0301 	and.w	r3, r3, #1
 800781c:	2b01      	cmp	r3, #1
 800781e:	d007      	beq.n	8007830 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f042 0201 	orr.w	r2, r2, #1
 800782e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800783e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2222      	movs	r2, #34	; 0x22
 8007844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2240      	movs	r2, #64	; 0x40
 800784c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2200      	movs	r2, #0
 8007854:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800785a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007860:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007866:	b29a      	uxth	r2, r3
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	4a5b      	ldr	r2, [pc, #364]	; (80079dc <HAL_I2C_Mem_Read+0x228>)
 8007870:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007872:	88f8      	ldrh	r0, [r7, #6]
 8007874:	893a      	ldrh	r2, [r7, #8]
 8007876:	8979      	ldrh	r1, [r7, #10]
 8007878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787a:	9301      	str	r3, [sp, #4]
 800787c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787e:	9300      	str	r3, [sp, #0]
 8007880:	4603      	mov	r3, r0
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f000 fa52 	bl	8007d2c <I2C_RequestMemoryRead>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d001      	beq.n	8007892 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e1b0      	b.n	8007bf4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007896:	2b00      	cmp	r3, #0
 8007898:	d113      	bne.n	80078c2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800789a:	2300      	movs	r3, #0
 800789c:	623b      	str	r3, [r7, #32]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	695b      	ldr	r3, [r3, #20]
 80078a4:	623b      	str	r3, [r7, #32]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	623b      	str	r3, [r7, #32]
 80078ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078be:	601a      	str	r2, [r3, #0]
 80078c0:	e184      	b.n	8007bcc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d11b      	bne.n	8007902 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078da:	2300      	movs	r3, #0
 80078dc:	61fb      	str	r3, [r7, #28]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	695b      	ldr	r3, [r3, #20]
 80078e4:	61fb      	str	r3, [r7, #28]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	699b      	ldr	r3, [r3, #24]
 80078ec:	61fb      	str	r3, [r7, #28]
 80078ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078fe:	601a      	str	r2, [r3, #0]
 8007900:	e164      	b.n	8007bcc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007906:	2b02      	cmp	r3, #2
 8007908:	d11b      	bne.n	8007942 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007918:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007928:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800792a:	2300      	movs	r3, #0
 800792c:	61bb      	str	r3, [r7, #24]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	695b      	ldr	r3, [r3, #20]
 8007934:	61bb      	str	r3, [r7, #24]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	699b      	ldr	r3, [r3, #24]
 800793c:	61bb      	str	r3, [r7, #24]
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	e144      	b.n	8007bcc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007942:	2300      	movs	r3, #0
 8007944:	617b      	str	r3, [r7, #20]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	695b      	ldr	r3, [r3, #20]
 800794c:	617b      	str	r3, [r7, #20]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	699b      	ldr	r3, [r3, #24]
 8007954:	617b      	str	r3, [r7, #20]
 8007956:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007958:	e138      	b.n	8007bcc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800795e:	2b03      	cmp	r3, #3
 8007960:	f200 80f1 	bhi.w	8007b46 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007968:	2b01      	cmp	r3, #1
 800796a:	d123      	bne.n	80079b4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800796c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800796e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f000 fc1b 	bl	80081ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d001      	beq.n	8007980 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	e139      	b.n	8007bf4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	691a      	ldr	r2, [r3, #16]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798a:	b2d2      	uxtb	r2, r2
 800798c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007992:	1c5a      	adds	r2, r3, #1
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800799c:	3b01      	subs	r3, #1
 800799e:	b29a      	uxth	r2, r3
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	3b01      	subs	r3, #1
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80079b2:	e10b      	b.n	8007bcc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d14e      	bne.n	8007a5a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	9300      	str	r3, [sp, #0]
 80079c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c2:	2200      	movs	r2, #0
 80079c4:	4906      	ldr	r1, [pc, #24]	; (80079e0 <HAL_I2C_Mem_Read+0x22c>)
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f000 fa98 	bl	8007efc <I2C_WaitOnFlagUntilTimeout>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d008      	beq.n	80079e4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e10e      	b.n	8007bf4 <HAL_I2C_Mem_Read+0x440>
 80079d6:	bf00      	nop
 80079d8:	00100002 	.word	0x00100002
 80079dc:	ffff0000 	.word	0xffff0000
 80079e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	691a      	ldr	r2, [r3, #16]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fe:	b2d2      	uxtb	r2, r2
 8007a00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a06:	1c5a      	adds	r2, r3, #1
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a10:	3b01      	subs	r3, #1
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	691a      	ldr	r2, [r3, #16]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a30:	b2d2      	uxtb	r2, r2
 8007a32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a38:	1c5a      	adds	r2, r3, #1
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a42:	3b01      	subs	r3, #1
 8007a44:	b29a      	uxth	r2, r3
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	3b01      	subs	r3, #1
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007a58:	e0b8      	b.n	8007bcc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5c:	9300      	str	r3, [sp, #0]
 8007a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a60:	2200      	movs	r2, #0
 8007a62:	4966      	ldr	r1, [pc, #408]	; (8007bfc <HAL_I2C_Mem_Read+0x448>)
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f000 fa49 	bl	8007efc <I2C_WaitOnFlagUntilTimeout>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d001      	beq.n	8007a74 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e0bf      	b.n	8007bf4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	691a      	ldr	r2, [r3, #16]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8e:	b2d2      	uxtb	r2, r2
 8007a90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a96:	1c5a      	adds	r2, r3, #1
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abc:	2200      	movs	r2, #0
 8007abe:	494f      	ldr	r1, [pc, #316]	; (8007bfc <HAL_I2C_Mem_Read+0x448>)
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f000 fa1b 	bl	8007efc <I2C_WaitOnFlagUntilTimeout>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d001      	beq.n	8007ad0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e091      	b.n	8007bf4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ade:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	691a      	ldr	r2, [r3, #16]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aea:	b2d2      	uxtb	r2, r2
 8007aec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af2:	1c5a      	adds	r2, r3, #1
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007afc:	3b01      	subs	r3, #1
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	691a      	ldr	r2, [r3, #16]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1c:	b2d2      	uxtb	r2, r2
 8007b1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b24:	1c5a      	adds	r2, r3, #1
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007b44:	e042      	b.n	8007bcc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f000 fb2e 	bl	80081ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d001      	beq.n	8007b5a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e04c      	b.n	8007bf4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	691a      	ldr	r2, [r3, #16]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b64:	b2d2      	uxtb	r2, r2
 8007b66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6c:	1c5a      	adds	r2, r3, #1
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b76:	3b01      	subs	r3, #1
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	3b01      	subs	r3, #1
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	695b      	ldr	r3, [r3, #20]
 8007b92:	f003 0304 	and.w	r3, r3, #4
 8007b96:	2b04      	cmp	r3, #4
 8007b98:	d118      	bne.n	8007bcc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	691a      	ldr	r2, [r3, #16]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba4:	b2d2      	uxtb	r2, r2
 8007ba6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bac:	1c5a      	adds	r2, r3, #1
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f47f aec2 	bne.w	800795a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2220      	movs	r2, #32
 8007bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	e000      	b.n	8007bf4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007bf2:	2302      	movs	r3, #2
  }
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3728      	adds	r7, #40	; 0x28
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	00010004 	.word	0x00010004

08007c00 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b088      	sub	sp, #32
 8007c04:	af02      	add	r7, sp, #8
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	4608      	mov	r0, r1
 8007c0a:	4611      	mov	r1, r2
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	4603      	mov	r3, r0
 8007c10:	817b      	strh	r3, [r7, #10]
 8007c12:	460b      	mov	r3, r1
 8007c14:	813b      	strh	r3, [r7, #8]
 8007c16:	4613      	mov	r3, r2
 8007c18:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2c:	9300      	str	r3, [sp, #0]
 8007c2e:	6a3b      	ldr	r3, [r7, #32]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f000 f960 	bl	8007efc <I2C_WaitOnFlagUntilTimeout>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00d      	beq.n	8007c5e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c50:	d103      	bne.n	8007c5a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	e05f      	b.n	8007d1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007c5e:	897b      	ldrh	r3, [r7, #10]
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	461a      	mov	r2, r3
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007c6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c70:	6a3a      	ldr	r2, [r7, #32]
 8007c72:	492d      	ldr	r1, [pc, #180]	; (8007d28 <I2C_RequestMemoryWrite+0x128>)
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f000 f998 	bl	8007faa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d001      	beq.n	8007c84 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	e04c      	b.n	8007d1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c84:	2300      	movs	r3, #0
 8007c86:	617b      	str	r3, [r7, #20]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	695b      	ldr	r3, [r3, #20]
 8007c8e:	617b      	str	r3, [r7, #20]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	617b      	str	r3, [r7, #20]
 8007c98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c9c:	6a39      	ldr	r1, [r7, #32]
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f000 fa02 	bl	80080a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00d      	beq.n	8007cc6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cae:	2b04      	cmp	r3, #4
 8007cb0:	d107      	bne.n	8007cc2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cc0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e02b      	b.n	8007d1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007cc6:	88fb      	ldrh	r3, [r7, #6]
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d105      	bne.n	8007cd8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007ccc:	893b      	ldrh	r3, [r7, #8]
 8007cce:	b2da      	uxtb	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	611a      	str	r2, [r3, #16]
 8007cd6:	e021      	b.n	8007d1c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007cd8:	893b      	ldrh	r3, [r7, #8]
 8007cda:	0a1b      	lsrs	r3, r3, #8
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	b2da      	uxtb	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ce8:	6a39      	ldr	r1, [r7, #32]
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f000 f9dc 	bl	80080a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d00d      	beq.n	8007d12 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cfa:	2b04      	cmp	r3, #4
 8007cfc:	d107      	bne.n	8007d0e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e005      	b.n	8007d1e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d12:	893b      	ldrh	r3, [r7, #8]
 8007d14:	b2da      	uxtb	r2, r3
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3718      	adds	r7, #24
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	00010002 	.word	0x00010002

08007d2c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b088      	sub	sp, #32
 8007d30:	af02      	add	r7, sp, #8
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	4608      	mov	r0, r1
 8007d36:	4611      	mov	r1, r2
 8007d38:	461a      	mov	r2, r3
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	817b      	strh	r3, [r7, #10]
 8007d3e:	460b      	mov	r3, r1
 8007d40:	813b      	strh	r3, [r7, #8]
 8007d42:	4613      	mov	r3, r2
 8007d44:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d54:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d68:	9300      	str	r3, [sp, #0]
 8007d6a:	6a3b      	ldr	r3, [r7, #32]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f000 f8c2 	bl	8007efc <I2C_WaitOnFlagUntilTimeout>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00d      	beq.n	8007d9a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d8c:	d103      	bne.n	8007d96 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e0aa      	b.n	8007ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d9a:	897b      	ldrh	r3, [r7, #10]
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	461a      	mov	r2, r3
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007da8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dac:	6a3a      	ldr	r2, [r7, #32]
 8007dae:	4952      	ldr	r1, [pc, #328]	; (8007ef8 <I2C_RequestMemoryRead+0x1cc>)
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f000 f8fa 	bl	8007faa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d001      	beq.n	8007dc0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e097      	b.n	8007ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	617b      	str	r3, [r7, #20]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	695b      	ldr	r3, [r3, #20]
 8007dca:	617b      	str	r3, [r7, #20]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	699b      	ldr	r3, [r3, #24]
 8007dd2:	617b      	str	r3, [r7, #20]
 8007dd4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dd8:	6a39      	ldr	r1, [r7, #32]
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f000 f964 	bl	80080a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00d      	beq.n	8007e02 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dea:	2b04      	cmp	r3, #4
 8007dec:	d107      	bne.n	8007dfe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dfc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e076      	b.n	8007ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007e02:	88fb      	ldrh	r3, [r7, #6]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d105      	bne.n	8007e14 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007e08:	893b      	ldrh	r3, [r7, #8]
 8007e0a:	b2da      	uxtb	r2, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	611a      	str	r2, [r3, #16]
 8007e12:	e021      	b.n	8007e58 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007e14:	893b      	ldrh	r3, [r7, #8]
 8007e16:	0a1b      	lsrs	r3, r3, #8
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	b2da      	uxtb	r2, r3
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e24:	6a39      	ldr	r1, [r7, #32]
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f000 f93e 	bl	80080a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00d      	beq.n	8007e4e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e36:	2b04      	cmp	r3, #4
 8007e38:	d107      	bne.n	8007e4a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e050      	b.n	8007ef0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007e4e:	893b      	ldrh	r3, [r7, #8]
 8007e50:	b2da      	uxtb	r2, r3
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e5a:	6a39      	ldr	r1, [r7, #32]
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 f923 	bl	80080a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00d      	beq.n	8007e84 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6c:	2b04      	cmp	r3, #4
 8007e6e:	d107      	bne.n	8007e80 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e7e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	e035      	b.n	8007ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e92:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	6a3b      	ldr	r3, [r7, #32]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f000 f82b 	bl	8007efc <I2C_WaitOnFlagUntilTimeout>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00d      	beq.n	8007ec8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eba:	d103      	bne.n	8007ec4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ec2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007ec4:	2303      	movs	r3, #3
 8007ec6:	e013      	b.n	8007ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007ec8:	897b      	ldrh	r3, [r7, #10]
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	f043 0301 	orr.w	r3, r3, #1
 8007ed0:	b2da      	uxtb	r2, r3
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eda:	6a3a      	ldr	r2, [r7, #32]
 8007edc:	4906      	ldr	r1, [pc, #24]	; (8007ef8 <I2C_RequestMemoryRead+0x1cc>)
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f000 f863 	bl	8007faa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d001      	beq.n	8007eee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e000      	b.n	8007ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3718      	adds	r7, #24
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	00010002 	.word	0x00010002

08007efc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	603b      	str	r3, [r7, #0]
 8007f08:	4613      	mov	r3, r2
 8007f0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f0c:	e025      	b.n	8007f5a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f14:	d021      	beq.n	8007f5a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f16:	f7fd fad5 	bl	80054c4 <HAL_GetTick>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	683a      	ldr	r2, [r7, #0]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d302      	bcc.n	8007f2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d116      	bne.n	8007f5a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2220      	movs	r2, #32
 8007f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f46:	f043 0220 	orr.w	r2, r3, #32
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e023      	b.n	8007fa2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	0c1b      	lsrs	r3, r3, #16
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d10d      	bne.n	8007f80 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	43da      	mvns	r2, r3
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	4013      	ands	r3, r2
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	bf0c      	ite	eq
 8007f76:	2301      	moveq	r3, #1
 8007f78:	2300      	movne	r3, #0
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	e00c      	b.n	8007f9a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	699b      	ldr	r3, [r3, #24]
 8007f86:	43da      	mvns	r2, r3
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	bf0c      	ite	eq
 8007f92:	2301      	moveq	r3, #1
 8007f94:	2300      	movne	r3, #0
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	461a      	mov	r2, r3
 8007f9a:	79fb      	ldrb	r3, [r7, #7]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d0b6      	beq.n	8007f0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b084      	sub	sp, #16
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	60f8      	str	r0, [r7, #12]
 8007fb2:	60b9      	str	r1, [r7, #8]
 8007fb4:	607a      	str	r2, [r7, #4]
 8007fb6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007fb8:	e051      	b.n	800805e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	695b      	ldr	r3, [r3, #20]
 8007fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fc8:	d123      	bne.n	8008012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fd8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007fe2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2220      	movs	r2, #32
 8007fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ffe:	f043 0204 	orr.w	r2, r3, #4
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e046      	b.n	80080a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008018:	d021      	beq.n	800805e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800801a:	f7fd fa53 	bl	80054c4 <HAL_GetTick>
 800801e:	4602      	mov	r2, r0
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	1ad3      	subs	r3, r2, r3
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	429a      	cmp	r2, r3
 8008028:	d302      	bcc.n	8008030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d116      	bne.n	800805e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2200      	movs	r2, #0
 8008034:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2220      	movs	r2, #32
 800803a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804a:	f043 0220 	orr.w	r2, r3, #32
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2200      	movs	r2, #0
 8008056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	e020      	b.n	80080a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	0c1b      	lsrs	r3, r3, #16
 8008062:	b2db      	uxtb	r3, r3
 8008064:	2b01      	cmp	r3, #1
 8008066:	d10c      	bne.n	8008082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	43da      	mvns	r2, r3
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	4013      	ands	r3, r2
 8008074:	b29b      	uxth	r3, r3
 8008076:	2b00      	cmp	r3, #0
 8008078:	bf14      	ite	ne
 800807a:	2301      	movne	r3, #1
 800807c:	2300      	moveq	r3, #0
 800807e:	b2db      	uxtb	r3, r3
 8008080:	e00b      	b.n	800809a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	699b      	ldr	r3, [r3, #24]
 8008088:	43da      	mvns	r2, r3
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	4013      	ands	r3, r2
 800808e:	b29b      	uxth	r3, r3
 8008090:	2b00      	cmp	r3, #0
 8008092:	bf14      	ite	ne
 8008094:	2301      	movne	r3, #1
 8008096:	2300      	moveq	r3, #0
 8008098:	b2db      	uxtb	r3, r3
 800809a:	2b00      	cmp	r3, #0
 800809c:	d18d      	bne.n	8007fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3710      	adds	r7, #16
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80080b4:	e02d      	b.n	8008112 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80080b6:	68f8      	ldr	r0, [r7, #12]
 80080b8:	f000 f8ce 	bl	8008258 <I2C_IsAcknowledgeFailed>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d001      	beq.n	80080c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e02d      	b.n	8008122 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080cc:	d021      	beq.n	8008112 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080ce:	f7fd f9f9 	bl	80054c4 <HAL_GetTick>
 80080d2:	4602      	mov	r2, r0
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	1ad3      	subs	r3, r2, r3
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d302      	bcc.n	80080e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d116      	bne.n	8008112 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2200      	movs	r2, #0
 80080e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2220      	movs	r2, #32
 80080ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080fe:	f043 0220 	orr.w	r2, r3, #32
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e007      	b.n	8008122 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	695b      	ldr	r3, [r3, #20]
 8008118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800811c:	2b80      	cmp	r3, #128	; 0x80
 800811e:	d1ca      	bne.n	80080b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b084      	sub	sp, #16
 800812e:	af00      	add	r7, sp, #0
 8008130:	60f8      	str	r0, [r7, #12]
 8008132:	60b9      	str	r1, [r7, #8]
 8008134:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008136:	e02d      	b.n	8008194 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f000 f88d 	bl	8008258 <I2C_IsAcknowledgeFailed>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d001      	beq.n	8008148 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	e02d      	b.n	80081a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800814e:	d021      	beq.n	8008194 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008150:	f7fd f9b8 	bl	80054c4 <HAL_GetTick>
 8008154:	4602      	mov	r2, r0
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	1ad3      	subs	r3, r2, r3
 800815a:	68ba      	ldr	r2, [r7, #8]
 800815c:	429a      	cmp	r2, r3
 800815e:	d302      	bcc.n	8008166 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d116      	bne.n	8008194 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2200      	movs	r2, #0
 800816a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2220      	movs	r2, #32
 8008170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008180:	f043 0220 	orr.w	r2, r3, #32
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2200      	movs	r2, #0
 800818c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	e007      	b.n	80081a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	695b      	ldr	r3, [r3, #20]
 800819a:	f003 0304 	and.w	r3, r3, #4
 800819e:	2b04      	cmp	r3, #4
 80081a0:	d1ca      	bne.n	8008138 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80081b8:	e042      	b.n	8008240 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	695b      	ldr	r3, [r3, #20]
 80081c0:	f003 0310 	and.w	r3, r3, #16
 80081c4:	2b10      	cmp	r3, #16
 80081c6:	d119      	bne.n	80081fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f06f 0210 	mvn.w	r2, #16
 80081d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2220      	movs	r2, #32
 80081dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	e029      	b.n	8008250 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081fc:	f7fd f962 	bl	80054c4 <HAL_GetTick>
 8008200:	4602      	mov	r2, r0
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	1ad3      	subs	r3, r2, r3
 8008206:	68ba      	ldr	r2, [r7, #8]
 8008208:	429a      	cmp	r2, r3
 800820a:	d302      	bcc.n	8008212 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d116      	bne.n	8008240 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2220      	movs	r2, #32
 800821c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2200      	movs	r2, #0
 8008224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822c:	f043 0220 	orr.w	r2, r3, #32
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	e007      	b.n	8008250 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800824a:	2b40      	cmp	r3, #64	; 0x40
 800824c:	d1b5      	bne.n	80081ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800824e:	2300      	movs	r3, #0
}
 8008250:	4618      	mov	r0, r3
 8008252:	3710      	adds	r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	695b      	ldr	r3, [r3, #20]
 8008266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800826a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800826e:	d11b      	bne.n	80082a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008278:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2220      	movs	r2, #32
 8008284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008294:	f043 0204 	orr.w	r2, r3, #4
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	e000      	b.n	80082aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	370c      	adds	r7, #12
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr
	...

080082b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b086      	sub	sp, #24
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d101      	bne.n	80082ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e267      	b.n	800879a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 0301 	and.w	r3, r3, #1
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d075      	beq.n	80083c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80082d6:	4b88      	ldr	r3, [pc, #544]	; (80084f8 <HAL_RCC_OscConfig+0x240>)
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	f003 030c 	and.w	r3, r3, #12
 80082de:	2b04      	cmp	r3, #4
 80082e0:	d00c      	beq.n	80082fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80082e2:	4b85      	ldr	r3, [pc, #532]	; (80084f8 <HAL_RCC_OscConfig+0x240>)
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80082ea:	2b08      	cmp	r3, #8
 80082ec:	d112      	bne.n	8008314 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80082ee:	4b82      	ldr	r3, [pc, #520]	; (80084f8 <HAL_RCC_OscConfig+0x240>)
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082fa:	d10b      	bne.n	8008314 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082fc:	4b7e      	ldr	r3, [pc, #504]	; (80084f8 <HAL_RCC_OscConfig+0x240>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008304:	2b00      	cmp	r3, #0
 8008306:	d05b      	beq.n	80083c0 <HAL_RCC_OscConfig+0x108>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d157      	bne.n	80083c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e242      	b.n	800879a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800831c:	d106      	bne.n	800832c <HAL_RCC_OscConfig+0x74>
 800831e:	4b76      	ldr	r3, [pc, #472]	; (80084f8 <HAL_RCC_OscConfig+0x240>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a75      	ldr	r2, [pc, #468]	; (80084f8 <HAL_RCC_OscConfig+0x240>)
 8008324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008328:	6013      	str	r3, [r2, #0]
 800832a:	e01d      	b.n	8008368 <HAL_RCC_OscConfig+0xb0>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008334:	d10c      	bne.n	8008350 <HAL_RCC_OscConfig+0x98>
 8008336:	4b70      	ldr	r3, [pc, #448]	; (80084f8 <HAL_RCC_OscConfig+0x240>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a6f      	ldr	r2, [pc, #444]	; (80084f8 <HAL_RCC_OscConfig+0x240>)
 800833c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008340:	6013      	str	r3, [r2, #0]
 8008342:	4b6d      	ldr	r3, [pc, #436]	; (80084f8 <HAL_RCC_OscConfig+0x240>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a6c      	ldr	r2, [pc, #432]	; (80084f8 <HAL_RCC_OscConfig+0x240>)
 8008348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800834c:	6013      	str	r3, [r2, #0]
 800834e:	e00b      	b.n	8008368 <HAL_RCC_OscConfig+0xb0>
 8008350:	4b69      	ldr	r3, [pc, #420]	; (80084f8 <HAL_RCC_OscConfig+0x240>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a68      	ldr	r2, [pc, #416]	; (80084f8 <HAL_RCC_OscConfig+0x240>)
 8008356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800835a:	6013      	str	r3, [r2, #0]
 800835c:	4b66      	ldr	r3, [pc, #408]	; (80084f8 <HAL_RCC_OscConfig+0x240>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a65      	ldr	r2, [pc, #404]	; (80084f8 <HAL_RCC_OscConfig+0x240>)
 8008362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d013      	beq.n	8008398 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008370:	f7fd f8a8 	bl	80054c4 <HAL_GetTick>
 8008374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008376:	e008      	b.n	800838a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008378:	f7fd f8a4 	bl	80054c4 <HAL_GetTick>
 800837c:	4602      	mov	r2, r0
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	2b64      	cmp	r3, #100	; 0x64
 8008384:	d901      	bls.n	800838a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008386:	2303      	movs	r3, #3
 8008388:	e207      	b.n	800879a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800838a:	4b5b      	ldr	r3, [pc, #364]	; (80084f8 <HAL_RCC_OscConfig+0x240>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008392:	2b00      	cmp	r3, #0
 8008394:	d0f0      	beq.n	8008378 <HAL_RCC_OscConfig+0xc0>
 8008396:	e014      	b.n	80083c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008398:	f7fd f894 	bl	80054c4 <HAL_GetTick>
 800839c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800839e:	e008      	b.n	80083b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80083a0:	f7fd f890 	bl	80054c4 <HAL_GetTick>
 80083a4:	4602      	mov	r2, r0
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	1ad3      	subs	r3, r2, r3
 80083aa:	2b64      	cmp	r3, #100	; 0x64
 80083ac:	d901      	bls.n	80083b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80083ae:	2303      	movs	r3, #3
 80083b0:	e1f3      	b.n	800879a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083b2:	4b51      	ldr	r3, [pc, #324]	; (80084f8 <HAL_RCC_OscConfig+0x240>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1f0      	bne.n	80083a0 <HAL_RCC_OscConfig+0xe8>
 80083be:	e000      	b.n	80083c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 0302 	and.w	r3, r3, #2
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d063      	beq.n	8008496 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80083ce:	4b4a      	ldr	r3, [pc, #296]	; (80084f8 <HAL_RCC_OscConfig+0x240>)
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	f003 030c 	and.w	r3, r3, #12
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00b      	beq.n	80083f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80083da:	4b47      	ldr	r3, [pc, #284]	; (80084f8 <HAL_RCC_OscConfig+0x240>)
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80083e2:	2b08      	cmp	r3, #8
 80083e4:	d11c      	bne.n	8008420 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80083e6:	4b44      	ldr	r3, [pc, #272]	; (80084f8 <HAL_RCC_OscConfig+0x240>)
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d116      	bne.n	8008420 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80083f2:	4b41      	ldr	r3, [pc, #260]	; (80084f8 <HAL_RCC_OscConfig+0x240>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 0302 	and.w	r3, r3, #2
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d005      	beq.n	800840a <HAL_RCC_OscConfig+0x152>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	2b01      	cmp	r3, #1
 8008404:	d001      	beq.n	800840a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e1c7      	b.n	800879a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800840a:	4b3b      	ldr	r3, [pc, #236]	; (80084f8 <HAL_RCC_OscConfig+0x240>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	00db      	lsls	r3, r3, #3
 8008418:	4937      	ldr	r1, [pc, #220]	; (80084f8 <HAL_RCC_OscConfig+0x240>)
 800841a:	4313      	orrs	r3, r2
 800841c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800841e:	e03a      	b.n	8008496 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d020      	beq.n	800846a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008428:	4b34      	ldr	r3, [pc, #208]	; (80084fc <HAL_RCC_OscConfig+0x244>)
 800842a:	2201      	movs	r2, #1
 800842c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800842e:	f7fd f849 	bl	80054c4 <HAL_GetTick>
 8008432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008434:	e008      	b.n	8008448 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008436:	f7fd f845 	bl	80054c4 <HAL_GetTick>
 800843a:	4602      	mov	r2, r0
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	2b02      	cmp	r3, #2
 8008442:	d901      	bls.n	8008448 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008444:	2303      	movs	r3, #3
 8008446:	e1a8      	b.n	800879a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008448:	4b2b      	ldr	r3, [pc, #172]	; (80084f8 <HAL_RCC_OscConfig+0x240>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 0302 	and.w	r3, r3, #2
 8008450:	2b00      	cmp	r3, #0
 8008452:	d0f0      	beq.n	8008436 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008454:	4b28      	ldr	r3, [pc, #160]	; (80084f8 <HAL_RCC_OscConfig+0x240>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	00db      	lsls	r3, r3, #3
 8008462:	4925      	ldr	r1, [pc, #148]	; (80084f8 <HAL_RCC_OscConfig+0x240>)
 8008464:	4313      	orrs	r3, r2
 8008466:	600b      	str	r3, [r1, #0]
 8008468:	e015      	b.n	8008496 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800846a:	4b24      	ldr	r3, [pc, #144]	; (80084fc <HAL_RCC_OscConfig+0x244>)
 800846c:	2200      	movs	r2, #0
 800846e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008470:	f7fd f828 	bl	80054c4 <HAL_GetTick>
 8008474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008476:	e008      	b.n	800848a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008478:	f7fd f824 	bl	80054c4 <HAL_GetTick>
 800847c:	4602      	mov	r2, r0
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	2b02      	cmp	r3, #2
 8008484:	d901      	bls.n	800848a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008486:	2303      	movs	r3, #3
 8008488:	e187      	b.n	800879a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800848a:	4b1b      	ldr	r3, [pc, #108]	; (80084f8 <HAL_RCC_OscConfig+0x240>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f003 0302 	and.w	r3, r3, #2
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1f0      	bne.n	8008478 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 0308 	and.w	r3, r3, #8
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d036      	beq.n	8008510 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	695b      	ldr	r3, [r3, #20]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d016      	beq.n	80084d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80084aa:	4b15      	ldr	r3, [pc, #84]	; (8008500 <HAL_RCC_OscConfig+0x248>)
 80084ac:	2201      	movs	r2, #1
 80084ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084b0:	f7fd f808 	bl	80054c4 <HAL_GetTick>
 80084b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084b6:	e008      	b.n	80084ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80084b8:	f7fd f804 	bl	80054c4 <HAL_GetTick>
 80084bc:	4602      	mov	r2, r0
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	d901      	bls.n	80084ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80084c6:	2303      	movs	r3, #3
 80084c8:	e167      	b.n	800879a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084ca:	4b0b      	ldr	r3, [pc, #44]	; (80084f8 <HAL_RCC_OscConfig+0x240>)
 80084cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084ce:	f003 0302 	and.w	r3, r3, #2
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d0f0      	beq.n	80084b8 <HAL_RCC_OscConfig+0x200>
 80084d6:	e01b      	b.n	8008510 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084d8:	4b09      	ldr	r3, [pc, #36]	; (8008500 <HAL_RCC_OscConfig+0x248>)
 80084da:	2200      	movs	r2, #0
 80084dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80084de:	f7fc fff1 	bl	80054c4 <HAL_GetTick>
 80084e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80084e4:	e00e      	b.n	8008504 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80084e6:	f7fc ffed 	bl	80054c4 <HAL_GetTick>
 80084ea:	4602      	mov	r2, r0
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	1ad3      	subs	r3, r2, r3
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d907      	bls.n	8008504 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80084f4:	2303      	movs	r3, #3
 80084f6:	e150      	b.n	800879a <HAL_RCC_OscConfig+0x4e2>
 80084f8:	40023800 	.word	0x40023800
 80084fc:	42470000 	.word	0x42470000
 8008500:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008504:	4b88      	ldr	r3, [pc, #544]	; (8008728 <HAL_RCC_OscConfig+0x470>)
 8008506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008508:	f003 0302 	and.w	r3, r3, #2
 800850c:	2b00      	cmp	r3, #0
 800850e:	d1ea      	bne.n	80084e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 0304 	and.w	r3, r3, #4
 8008518:	2b00      	cmp	r3, #0
 800851a:	f000 8097 	beq.w	800864c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800851e:	2300      	movs	r3, #0
 8008520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008522:	4b81      	ldr	r3, [pc, #516]	; (8008728 <HAL_RCC_OscConfig+0x470>)
 8008524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800852a:	2b00      	cmp	r3, #0
 800852c:	d10f      	bne.n	800854e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800852e:	2300      	movs	r3, #0
 8008530:	60bb      	str	r3, [r7, #8]
 8008532:	4b7d      	ldr	r3, [pc, #500]	; (8008728 <HAL_RCC_OscConfig+0x470>)
 8008534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008536:	4a7c      	ldr	r2, [pc, #496]	; (8008728 <HAL_RCC_OscConfig+0x470>)
 8008538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800853c:	6413      	str	r3, [r2, #64]	; 0x40
 800853e:	4b7a      	ldr	r3, [pc, #488]	; (8008728 <HAL_RCC_OscConfig+0x470>)
 8008540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008546:	60bb      	str	r3, [r7, #8]
 8008548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800854a:	2301      	movs	r3, #1
 800854c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800854e:	4b77      	ldr	r3, [pc, #476]	; (800872c <HAL_RCC_OscConfig+0x474>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008556:	2b00      	cmp	r3, #0
 8008558:	d118      	bne.n	800858c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800855a:	4b74      	ldr	r3, [pc, #464]	; (800872c <HAL_RCC_OscConfig+0x474>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a73      	ldr	r2, [pc, #460]	; (800872c <HAL_RCC_OscConfig+0x474>)
 8008560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008566:	f7fc ffad 	bl	80054c4 <HAL_GetTick>
 800856a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800856c:	e008      	b.n	8008580 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800856e:	f7fc ffa9 	bl	80054c4 <HAL_GetTick>
 8008572:	4602      	mov	r2, r0
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	2b02      	cmp	r3, #2
 800857a:	d901      	bls.n	8008580 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800857c:	2303      	movs	r3, #3
 800857e:	e10c      	b.n	800879a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008580:	4b6a      	ldr	r3, [pc, #424]	; (800872c <HAL_RCC_OscConfig+0x474>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008588:	2b00      	cmp	r3, #0
 800858a:	d0f0      	beq.n	800856e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	2b01      	cmp	r3, #1
 8008592:	d106      	bne.n	80085a2 <HAL_RCC_OscConfig+0x2ea>
 8008594:	4b64      	ldr	r3, [pc, #400]	; (8008728 <HAL_RCC_OscConfig+0x470>)
 8008596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008598:	4a63      	ldr	r2, [pc, #396]	; (8008728 <HAL_RCC_OscConfig+0x470>)
 800859a:	f043 0301 	orr.w	r3, r3, #1
 800859e:	6713      	str	r3, [r2, #112]	; 0x70
 80085a0:	e01c      	b.n	80085dc <HAL_RCC_OscConfig+0x324>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	2b05      	cmp	r3, #5
 80085a8:	d10c      	bne.n	80085c4 <HAL_RCC_OscConfig+0x30c>
 80085aa:	4b5f      	ldr	r3, [pc, #380]	; (8008728 <HAL_RCC_OscConfig+0x470>)
 80085ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ae:	4a5e      	ldr	r2, [pc, #376]	; (8008728 <HAL_RCC_OscConfig+0x470>)
 80085b0:	f043 0304 	orr.w	r3, r3, #4
 80085b4:	6713      	str	r3, [r2, #112]	; 0x70
 80085b6:	4b5c      	ldr	r3, [pc, #368]	; (8008728 <HAL_RCC_OscConfig+0x470>)
 80085b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ba:	4a5b      	ldr	r2, [pc, #364]	; (8008728 <HAL_RCC_OscConfig+0x470>)
 80085bc:	f043 0301 	orr.w	r3, r3, #1
 80085c0:	6713      	str	r3, [r2, #112]	; 0x70
 80085c2:	e00b      	b.n	80085dc <HAL_RCC_OscConfig+0x324>
 80085c4:	4b58      	ldr	r3, [pc, #352]	; (8008728 <HAL_RCC_OscConfig+0x470>)
 80085c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085c8:	4a57      	ldr	r2, [pc, #348]	; (8008728 <HAL_RCC_OscConfig+0x470>)
 80085ca:	f023 0301 	bic.w	r3, r3, #1
 80085ce:	6713      	str	r3, [r2, #112]	; 0x70
 80085d0:	4b55      	ldr	r3, [pc, #340]	; (8008728 <HAL_RCC_OscConfig+0x470>)
 80085d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085d4:	4a54      	ldr	r2, [pc, #336]	; (8008728 <HAL_RCC_OscConfig+0x470>)
 80085d6:	f023 0304 	bic.w	r3, r3, #4
 80085da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d015      	beq.n	8008610 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085e4:	f7fc ff6e 	bl	80054c4 <HAL_GetTick>
 80085e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085ea:	e00a      	b.n	8008602 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085ec:	f7fc ff6a 	bl	80054c4 <HAL_GetTick>
 80085f0:	4602      	mov	r2, r0
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	1ad3      	subs	r3, r2, r3
 80085f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d901      	bls.n	8008602 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80085fe:	2303      	movs	r3, #3
 8008600:	e0cb      	b.n	800879a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008602:	4b49      	ldr	r3, [pc, #292]	; (8008728 <HAL_RCC_OscConfig+0x470>)
 8008604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008606:	f003 0302 	and.w	r3, r3, #2
 800860a:	2b00      	cmp	r3, #0
 800860c:	d0ee      	beq.n	80085ec <HAL_RCC_OscConfig+0x334>
 800860e:	e014      	b.n	800863a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008610:	f7fc ff58 	bl	80054c4 <HAL_GetTick>
 8008614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008616:	e00a      	b.n	800862e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008618:	f7fc ff54 	bl	80054c4 <HAL_GetTick>
 800861c:	4602      	mov	r2, r0
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	f241 3288 	movw	r2, #5000	; 0x1388
 8008626:	4293      	cmp	r3, r2
 8008628:	d901      	bls.n	800862e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800862a:	2303      	movs	r3, #3
 800862c:	e0b5      	b.n	800879a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800862e:	4b3e      	ldr	r3, [pc, #248]	; (8008728 <HAL_RCC_OscConfig+0x470>)
 8008630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008632:	f003 0302 	and.w	r3, r3, #2
 8008636:	2b00      	cmp	r3, #0
 8008638:	d1ee      	bne.n	8008618 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800863a:	7dfb      	ldrb	r3, [r7, #23]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d105      	bne.n	800864c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008640:	4b39      	ldr	r3, [pc, #228]	; (8008728 <HAL_RCC_OscConfig+0x470>)
 8008642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008644:	4a38      	ldr	r2, [pc, #224]	; (8008728 <HAL_RCC_OscConfig+0x470>)
 8008646:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800864a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	699b      	ldr	r3, [r3, #24]
 8008650:	2b00      	cmp	r3, #0
 8008652:	f000 80a1 	beq.w	8008798 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008656:	4b34      	ldr	r3, [pc, #208]	; (8008728 <HAL_RCC_OscConfig+0x470>)
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	f003 030c 	and.w	r3, r3, #12
 800865e:	2b08      	cmp	r3, #8
 8008660:	d05c      	beq.n	800871c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	699b      	ldr	r3, [r3, #24]
 8008666:	2b02      	cmp	r3, #2
 8008668:	d141      	bne.n	80086ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800866a:	4b31      	ldr	r3, [pc, #196]	; (8008730 <HAL_RCC_OscConfig+0x478>)
 800866c:	2200      	movs	r2, #0
 800866e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008670:	f7fc ff28 	bl	80054c4 <HAL_GetTick>
 8008674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008676:	e008      	b.n	800868a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008678:	f7fc ff24 	bl	80054c4 <HAL_GetTick>
 800867c:	4602      	mov	r2, r0
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	1ad3      	subs	r3, r2, r3
 8008682:	2b02      	cmp	r3, #2
 8008684:	d901      	bls.n	800868a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008686:	2303      	movs	r3, #3
 8008688:	e087      	b.n	800879a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800868a:	4b27      	ldr	r3, [pc, #156]	; (8008728 <HAL_RCC_OscConfig+0x470>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008692:	2b00      	cmp	r3, #0
 8008694:	d1f0      	bne.n	8008678 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	69da      	ldr	r2, [r3, #28]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a1b      	ldr	r3, [r3, #32]
 800869e:	431a      	orrs	r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a4:	019b      	lsls	r3, r3, #6
 80086a6:	431a      	orrs	r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ac:	085b      	lsrs	r3, r3, #1
 80086ae:	3b01      	subs	r3, #1
 80086b0:	041b      	lsls	r3, r3, #16
 80086b2:	431a      	orrs	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b8:	061b      	lsls	r3, r3, #24
 80086ba:	491b      	ldr	r1, [pc, #108]	; (8008728 <HAL_RCC_OscConfig+0x470>)
 80086bc:	4313      	orrs	r3, r2
 80086be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80086c0:	4b1b      	ldr	r3, [pc, #108]	; (8008730 <HAL_RCC_OscConfig+0x478>)
 80086c2:	2201      	movs	r2, #1
 80086c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086c6:	f7fc fefd 	bl	80054c4 <HAL_GetTick>
 80086ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086cc:	e008      	b.n	80086e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086ce:	f7fc fef9 	bl	80054c4 <HAL_GetTick>
 80086d2:	4602      	mov	r2, r0
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	1ad3      	subs	r3, r2, r3
 80086d8:	2b02      	cmp	r3, #2
 80086da:	d901      	bls.n	80086e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80086dc:	2303      	movs	r3, #3
 80086de:	e05c      	b.n	800879a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086e0:	4b11      	ldr	r3, [pc, #68]	; (8008728 <HAL_RCC_OscConfig+0x470>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d0f0      	beq.n	80086ce <HAL_RCC_OscConfig+0x416>
 80086ec:	e054      	b.n	8008798 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086ee:	4b10      	ldr	r3, [pc, #64]	; (8008730 <HAL_RCC_OscConfig+0x478>)
 80086f0:	2200      	movs	r2, #0
 80086f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086f4:	f7fc fee6 	bl	80054c4 <HAL_GetTick>
 80086f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086fa:	e008      	b.n	800870e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086fc:	f7fc fee2 	bl	80054c4 <HAL_GetTick>
 8008700:	4602      	mov	r2, r0
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	2b02      	cmp	r3, #2
 8008708:	d901      	bls.n	800870e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800870a:	2303      	movs	r3, #3
 800870c:	e045      	b.n	800879a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800870e:	4b06      	ldr	r3, [pc, #24]	; (8008728 <HAL_RCC_OscConfig+0x470>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008716:	2b00      	cmp	r3, #0
 8008718:	d1f0      	bne.n	80086fc <HAL_RCC_OscConfig+0x444>
 800871a:	e03d      	b.n	8008798 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	699b      	ldr	r3, [r3, #24]
 8008720:	2b01      	cmp	r3, #1
 8008722:	d107      	bne.n	8008734 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	e038      	b.n	800879a <HAL_RCC_OscConfig+0x4e2>
 8008728:	40023800 	.word	0x40023800
 800872c:	40007000 	.word	0x40007000
 8008730:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008734:	4b1b      	ldr	r3, [pc, #108]	; (80087a4 <HAL_RCC_OscConfig+0x4ec>)
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	699b      	ldr	r3, [r3, #24]
 800873e:	2b01      	cmp	r3, #1
 8008740:	d028      	beq.n	8008794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800874c:	429a      	cmp	r2, r3
 800874e:	d121      	bne.n	8008794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800875a:	429a      	cmp	r2, r3
 800875c:	d11a      	bne.n	8008794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800875e:	68fa      	ldr	r2, [r7, #12]
 8008760:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008764:	4013      	ands	r3, r2
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800876a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800876c:	4293      	cmp	r3, r2
 800876e:	d111      	bne.n	8008794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800877a:	085b      	lsrs	r3, r3, #1
 800877c:	3b01      	subs	r3, #1
 800877e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008780:	429a      	cmp	r2, r3
 8008782:	d107      	bne.n	8008794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008790:	429a      	cmp	r2, r3
 8008792:	d001      	beq.n	8008798 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	e000      	b.n	800879a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3718      	adds	r7, #24
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	40023800 	.word	0x40023800

080087a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d101      	bne.n	80087bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e0cc      	b.n	8008956 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80087bc:	4b68      	ldr	r3, [pc, #416]	; (8008960 <HAL_RCC_ClockConfig+0x1b8>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f003 0307 	and.w	r3, r3, #7
 80087c4:	683a      	ldr	r2, [r7, #0]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d90c      	bls.n	80087e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087ca:	4b65      	ldr	r3, [pc, #404]	; (8008960 <HAL_RCC_ClockConfig+0x1b8>)
 80087cc:	683a      	ldr	r2, [r7, #0]
 80087ce:	b2d2      	uxtb	r2, r2
 80087d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80087d2:	4b63      	ldr	r3, [pc, #396]	; (8008960 <HAL_RCC_ClockConfig+0x1b8>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 0307 	and.w	r3, r3, #7
 80087da:	683a      	ldr	r2, [r7, #0]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d001      	beq.n	80087e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e0b8      	b.n	8008956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 0302 	and.w	r3, r3, #2
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d020      	beq.n	8008832 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 0304 	and.w	r3, r3, #4
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d005      	beq.n	8008808 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80087fc:	4b59      	ldr	r3, [pc, #356]	; (8008964 <HAL_RCC_ClockConfig+0x1bc>)
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	4a58      	ldr	r2, [pc, #352]	; (8008964 <HAL_RCC_ClockConfig+0x1bc>)
 8008802:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008806:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 0308 	and.w	r3, r3, #8
 8008810:	2b00      	cmp	r3, #0
 8008812:	d005      	beq.n	8008820 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008814:	4b53      	ldr	r3, [pc, #332]	; (8008964 <HAL_RCC_ClockConfig+0x1bc>)
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	4a52      	ldr	r2, [pc, #328]	; (8008964 <HAL_RCC_ClockConfig+0x1bc>)
 800881a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800881e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008820:	4b50      	ldr	r3, [pc, #320]	; (8008964 <HAL_RCC_ClockConfig+0x1bc>)
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	494d      	ldr	r1, [pc, #308]	; (8008964 <HAL_RCC_ClockConfig+0x1bc>)
 800882e:	4313      	orrs	r3, r2
 8008830:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 0301 	and.w	r3, r3, #1
 800883a:	2b00      	cmp	r3, #0
 800883c:	d044      	beq.n	80088c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	2b01      	cmp	r3, #1
 8008844:	d107      	bne.n	8008856 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008846:	4b47      	ldr	r3, [pc, #284]	; (8008964 <HAL_RCC_ClockConfig+0x1bc>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800884e:	2b00      	cmp	r3, #0
 8008850:	d119      	bne.n	8008886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	e07f      	b.n	8008956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	2b02      	cmp	r3, #2
 800885c:	d003      	beq.n	8008866 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008862:	2b03      	cmp	r3, #3
 8008864:	d107      	bne.n	8008876 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008866:	4b3f      	ldr	r3, [pc, #252]	; (8008964 <HAL_RCC_ClockConfig+0x1bc>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800886e:	2b00      	cmp	r3, #0
 8008870:	d109      	bne.n	8008886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	e06f      	b.n	8008956 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008876:	4b3b      	ldr	r3, [pc, #236]	; (8008964 <HAL_RCC_ClockConfig+0x1bc>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 0302 	and.w	r3, r3, #2
 800887e:	2b00      	cmp	r3, #0
 8008880:	d101      	bne.n	8008886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008882:	2301      	movs	r3, #1
 8008884:	e067      	b.n	8008956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008886:	4b37      	ldr	r3, [pc, #220]	; (8008964 <HAL_RCC_ClockConfig+0x1bc>)
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	f023 0203 	bic.w	r2, r3, #3
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	4934      	ldr	r1, [pc, #208]	; (8008964 <HAL_RCC_ClockConfig+0x1bc>)
 8008894:	4313      	orrs	r3, r2
 8008896:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008898:	f7fc fe14 	bl	80054c4 <HAL_GetTick>
 800889c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800889e:	e00a      	b.n	80088b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80088a0:	f7fc fe10 	bl	80054c4 <HAL_GetTick>
 80088a4:	4602      	mov	r2, r0
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	1ad3      	subs	r3, r2, r3
 80088aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d901      	bls.n	80088b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80088b2:	2303      	movs	r3, #3
 80088b4:	e04f      	b.n	8008956 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088b6:	4b2b      	ldr	r3, [pc, #172]	; (8008964 <HAL_RCC_ClockConfig+0x1bc>)
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	f003 020c 	and.w	r2, r3, #12
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d1eb      	bne.n	80088a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80088c8:	4b25      	ldr	r3, [pc, #148]	; (8008960 <HAL_RCC_ClockConfig+0x1b8>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 0307 	and.w	r3, r3, #7
 80088d0:	683a      	ldr	r2, [r7, #0]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d20c      	bcs.n	80088f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088d6:	4b22      	ldr	r3, [pc, #136]	; (8008960 <HAL_RCC_ClockConfig+0x1b8>)
 80088d8:	683a      	ldr	r2, [r7, #0]
 80088da:	b2d2      	uxtb	r2, r2
 80088dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088de:	4b20      	ldr	r3, [pc, #128]	; (8008960 <HAL_RCC_ClockConfig+0x1b8>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 0307 	and.w	r3, r3, #7
 80088e6:	683a      	ldr	r2, [r7, #0]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d001      	beq.n	80088f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e032      	b.n	8008956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 0304 	and.w	r3, r3, #4
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d008      	beq.n	800890e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80088fc:	4b19      	ldr	r3, [pc, #100]	; (8008964 <HAL_RCC_ClockConfig+0x1bc>)
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	4916      	ldr	r1, [pc, #88]	; (8008964 <HAL_RCC_ClockConfig+0x1bc>)
 800890a:	4313      	orrs	r3, r2
 800890c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f003 0308 	and.w	r3, r3, #8
 8008916:	2b00      	cmp	r3, #0
 8008918:	d009      	beq.n	800892e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800891a:	4b12      	ldr	r3, [pc, #72]	; (8008964 <HAL_RCC_ClockConfig+0x1bc>)
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	691b      	ldr	r3, [r3, #16]
 8008926:	00db      	lsls	r3, r3, #3
 8008928:	490e      	ldr	r1, [pc, #56]	; (8008964 <HAL_RCC_ClockConfig+0x1bc>)
 800892a:	4313      	orrs	r3, r2
 800892c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800892e:	f000 f821 	bl	8008974 <HAL_RCC_GetSysClockFreq>
 8008932:	4602      	mov	r2, r0
 8008934:	4b0b      	ldr	r3, [pc, #44]	; (8008964 <HAL_RCC_ClockConfig+0x1bc>)
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	091b      	lsrs	r3, r3, #4
 800893a:	f003 030f 	and.w	r3, r3, #15
 800893e:	490a      	ldr	r1, [pc, #40]	; (8008968 <HAL_RCC_ClockConfig+0x1c0>)
 8008940:	5ccb      	ldrb	r3, [r1, r3]
 8008942:	fa22 f303 	lsr.w	r3, r2, r3
 8008946:	4a09      	ldr	r2, [pc, #36]	; (800896c <HAL_RCC_ClockConfig+0x1c4>)
 8008948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800894a:	4b09      	ldr	r3, [pc, #36]	; (8008970 <HAL_RCC_ClockConfig+0x1c8>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4618      	mov	r0, r3
 8008950:	f7fc fd74 	bl	800543c <HAL_InitTick>

  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	40023c00 	.word	0x40023c00
 8008964:	40023800 	.word	0x40023800
 8008968:	0800c5bc 	.word	0x0800c5bc
 800896c:	200003c4 	.word	0x200003c4
 8008970:	200003c8 	.word	0x200003c8

08008974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008978:	b090      	sub	sp, #64	; 0x40
 800897a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800897c:	2300      	movs	r3, #0
 800897e:	637b      	str	r3, [r7, #52]	; 0x34
 8008980:	2300      	movs	r3, #0
 8008982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008984:	2300      	movs	r3, #0
 8008986:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008988:	2300      	movs	r3, #0
 800898a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800898c:	4b59      	ldr	r3, [pc, #356]	; (8008af4 <HAL_RCC_GetSysClockFreq+0x180>)
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	f003 030c 	and.w	r3, r3, #12
 8008994:	2b08      	cmp	r3, #8
 8008996:	d00d      	beq.n	80089b4 <HAL_RCC_GetSysClockFreq+0x40>
 8008998:	2b08      	cmp	r3, #8
 800899a:	f200 80a1 	bhi.w	8008ae0 <HAL_RCC_GetSysClockFreq+0x16c>
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d002      	beq.n	80089a8 <HAL_RCC_GetSysClockFreq+0x34>
 80089a2:	2b04      	cmp	r3, #4
 80089a4:	d003      	beq.n	80089ae <HAL_RCC_GetSysClockFreq+0x3a>
 80089a6:	e09b      	b.n	8008ae0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80089a8:	4b53      	ldr	r3, [pc, #332]	; (8008af8 <HAL_RCC_GetSysClockFreq+0x184>)
 80089aa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80089ac:	e09b      	b.n	8008ae6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80089ae:	4b53      	ldr	r3, [pc, #332]	; (8008afc <HAL_RCC_GetSysClockFreq+0x188>)
 80089b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80089b2:	e098      	b.n	8008ae6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80089b4:	4b4f      	ldr	r3, [pc, #316]	; (8008af4 <HAL_RCC_GetSysClockFreq+0x180>)
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089bc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80089be:	4b4d      	ldr	r3, [pc, #308]	; (8008af4 <HAL_RCC_GetSysClockFreq+0x180>)
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d028      	beq.n	8008a1c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80089ca:	4b4a      	ldr	r3, [pc, #296]	; (8008af4 <HAL_RCC_GetSysClockFreq+0x180>)
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	099b      	lsrs	r3, r3, #6
 80089d0:	2200      	movs	r2, #0
 80089d2:	623b      	str	r3, [r7, #32]
 80089d4:	627a      	str	r2, [r7, #36]	; 0x24
 80089d6:	6a3b      	ldr	r3, [r7, #32]
 80089d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80089dc:	2100      	movs	r1, #0
 80089de:	4b47      	ldr	r3, [pc, #284]	; (8008afc <HAL_RCC_GetSysClockFreq+0x188>)
 80089e0:	fb03 f201 	mul.w	r2, r3, r1
 80089e4:	2300      	movs	r3, #0
 80089e6:	fb00 f303 	mul.w	r3, r0, r3
 80089ea:	4413      	add	r3, r2
 80089ec:	4a43      	ldr	r2, [pc, #268]	; (8008afc <HAL_RCC_GetSysClockFreq+0x188>)
 80089ee:	fba0 1202 	umull	r1, r2, r0, r2
 80089f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80089f4:	460a      	mov	r2, r1
 80089f6:	62ba      	str	r2, [r7, #40]	; 0x28
 80089f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089fa:	4413      	add	r3, r2
 80089fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a00:	2200      	movs	r2, #0
 8008a02:	61bb      	str	r3, [r7, #24]
 8008a04:	61fa      	str	r2, [r7, #28]
 8008a06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008a0e:	f7f7 ff21 	bl	8000854 <__aeabi_uldivmod>
 8008a12:	4602      	mov	r2, r0
 8008a14:	460b      	mov	r3, r1
 8008a16:	4613      	mov	r3, r2
 8008a18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a1a:	e053      	b.n	8008ac4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a1c:	4b35      	ldr	r3, [pc, #212]	; (8008af4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	099b      	lsrs	r3, r3, #6
 8008a22:	2200      	movs	r2, #0
 8008a24:	613b      	str	r3, [r7, #16]
 8008a26:	617a      	str	r2, [r7, #20]
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008a2e:	f04f 0b00 	mov.w	fp, #0
 8008a32:	4652      	mov	r2, sl
 8008a34:	465b      	mov	r3, fp
 8008a36:	f04f 0000 	mov.w	r0, #0
 8008a3a:	f04f 0100 	mov.w	r1, #0
 8008a3e:	0159      	lsls	r1, r3, #5
 8008a40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008a44:	0150      	lsls	r0, r2, #5
 8008a46:	4602      	mov	r2, r0
 8008a48:	460b      	mov	r3, r1
 8008a4a:	ebb2 080a 	subs.w	r8, r2, sl
 8008a4e:	eb63 090b 	sbc.w	r9, r3, fp
 8008a52:	f04f 0200 	mov.w	r2, #0
 8008a56:	f04f 0300 	mov.w	r3, #0
 8008a5a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008a5e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008a62:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008a66:	ebb2 0408 	subs.w	r4, r2, r8
 8008a6a:	eb63 0509 	sbc.w	r5, r3, r9
 8008a6e:	f04f 0200 	mov.w	r2, #0
 8008a72:	f04f 0300 	mov.w	r3, #0
 8008a76:	00eb      	lsls	r3, r5, #3
 8008a78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a7c:	00e2      	lsls	r2, r4, #3
 8008a7e:	4614      	mov	r4, r2
 8008a80:	461d      	mov	r5, r3
 8008a82:	eb14 030a 	adds.w	r3, r4, sl
 8008a86:	603b      	str	r3, [r7, #0]
 8008a88:	eb45 030b 	adc.w	r3, r5, fp
 8008a8c:	607b      	str	r3, [r7, #4]
 8008a8e:	f04f 0200 	mov.w	r2, #0
 8008a92:	f04f 0300 	mov.w	r3, #0
 8008a96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008a9a:	4629      	mov	r1, r5
 8008a9c:	028b      	lsls	r3, r1, #10
 8008a9e:	4621      	mov	r1, r4
 8008aa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008aa4:	4621      	mov	r1, r4
 8008aa6:	028a      	lsls	r2, r1, #10
 8008aa8:	4610      	mov	r0, r2
 8008aaa:	4619      	mov	r1, r3
 8008aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aae:	2200      	movs	r2, #0
 8008ab0:	60bb      	str	r3, [r7, #8]
 8008ab2:	60fa      	str	r2, [r7, #12]
 8008ab4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ab8:	f7f7 fecc 	bl	8000854 <__aeabi_uldivmod>
 8008abc:	4602      	mov	r2, r0
 8008abe:	460b      	mov	r3, r1
 8008ac0:	4613      	mov	r3, r2
 8008ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008ac4:	4b0b      	ldr	r3, [pc, #44]	; (8008af4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	0c1b      	lsrs	r3, r3, #16
 8008aca:	f003 0303 	and.w	r3, r3, #3
 8008ace:	3301      	adds	r3, #1
 8008ad0:	005b      	lsls	r3, r3, #1
 8008ad2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8008ad4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008adc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008ade:	e002      	b.n	8008ae6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008ae0:	4b05      	ldr	r3, [pc, #20]	; (8008af8 <HAL_RCC_GetSysClockFreq+0x184>)
 8008ae2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008ae4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3740      	adds	r7, #64	; 0x40
 8008aec:	46bd      	mov	sp, r7
 8008aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008af2:	bf00      	nop
 8008af4:	40023800 	.word	0x40023800
 8008af8:	00f42400 	.word	0x00f42400
 8008afc:	017d7840 	.word	0x017d7840

08008b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b00:	b480      	push	{r7}
 8008b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b04:	4b03      	ldr	r3, [pc, #12]	; (8008b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8008b06:	681b      	ldr	r3, [r3, #0]
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	200003c4 	.word	0x200003c4

08008b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008b1c:	f7ff fff0 	bl	8008b00 <HAL_RCC_GetHCLKFreq>
 8008b20:	4602      	mov	r2, r0
 8008b22:	4b05      	ldr	r3, [pc, #20]	; (8008b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	0a9b      	lsrs	r3, r3, #10
 8008b28:	f003 0307 	and.w	r3, r3, #7
 8008b2c:	4903      	ldr	r1, [pc, #12]	; (8008b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b2e:	5ccb      	ldrb	r3, [r1, r3]
 8008b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	40023800 	.word	0x40023800
 8008b3c:	0800c5cc 	.word	0x0800c5cc

08008b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008b44:	f7ff ffdc 	bl	8008b00 <HAL_RCC_GetHCLKFreq>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	4b05      	ldr	r3, [pc, #20]	; (8008b60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	0b5b      	lsrs	r3, r3, #13
 8008b50:	f003 0307 	and.w	r3, r3, #7
 8008b54:	4903      	ldr	r1, [pc, #12]	; (8008b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b56:	5ccb      	ldrb	r3, [r1, r3]
 8008b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	40023800 	.word	0x40023800
 8008b64:	0800c5cc 	.word	0x0800c5cc

08008b68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d101      	bne.n	8008b7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	e07b      	b.n	8008c72 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d108      	bne.n	8008b94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b8a:	d009      	beq.n	8008ba0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	61da      	str	r2, [r3, #28]
 8008b92:	e005      	b.n	8008ba0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d106      	bne.n	8008bc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f7fc f9c4 	bl	8004f48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2202      	movs	r2, #2
 8008bc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bd6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008be8:	431a      	orrs	r2, r3
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bf2:	431a      	orrs	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	691b      	ldr	r3, [r3, #16]
 8008bf8:	f003 0302 	and.w	r3, r3, #2
 8008bfc:	431a      	orrs	r2, r3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	695b      	ldr	r3, [r3, #20]
 8008c02:	f003 0301 	and.w	r3, r3, #1
 8008c06:	431a      	orrs	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	699b      	ldr	r3, [r3, #24]
 8008c0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c10:	431a      	orrs	r2, r3
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	69db      	ldr	r3, [r3, #28]
 8008c16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c1a:	431a      	orrs	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a1b      	ldr	r3, [r3, #32]
 8008c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c24:	ea42 0103 	orr.w	r1, r2, r3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	430a      	orrs	r2, r1
 8008c36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	699b      	ldr	r3, [r3, #24]
 8008c3c:	0c1b      	lsrs	r3, r3, #16
 8008c3e:	f003 0104 	and.w	r1, r3, #4
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c46:	f003 0210 	and.w	r2, r3, #16
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	430a      	orrs	r2, r1
 8008c50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	69da      	ldr	r2, [r3, #28]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b088      	sub	sp, #32
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	60f8      	str	r0, [r7, #12]
 8008c82:	60b9      	str	r1, [r7, #8]
 8008c84:	603b      	str	r3, [r7, #0]
 8008c86:	4613      	mov	r3, r2
 8008c88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d101      	bne.n	8008c9c <HAL_SPI_Transmit+0x22>
 8008c98:	2302      	movs	r3, #2
 8008c9a:	e126      	b.n	8008eea <HAL_SPI_Transmit+0x270>
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ca4:	f7fc fc0e 	bl	80054c4 <HAL_GetTick>
 8008ca8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008caa:	88fb      	ldrh	r3, [r7, #6]
 8008cac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d002      	beq.n	8008cc0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008cba:	2302      	movs	r3, #2
 8008cbc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008cbe:	e10b      	b.n	8008ed8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d002      	beq.n	8008ccc <HAL_SPI_Transmit+0x52>
 8008cc6:	88fb      	ldrh	r3, [r7, #6]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d102      	bne.n	8008cd2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008cd0:	e102      	b.n	8008ed8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2203      	movs	r2, #3
 8008cd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	68ba      	ldr	r2, [r7, #8]
 8008ce4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	88fa      	ldrh	r2, [r7, #6]
 8008cea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	88fa      	ldrh	r2, [r7, #6]
 8008cf0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2200      	movs	r2, #0
 8008d02:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d18:	d10f      	bne.n	8008d3a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d44:	2b40      	cmp	r3, #64	; 0x40
 8008d46:	d007      	beq.n	8008d58 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d60:	d14b      	bne.n	8008dfa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d002      	beq.n	8008d70 <HAL_SPI_Transmit+0xf6>
 8008d6a:	8afb      	ldrh	r3, [r7, #22]
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d13e      	bne.n	8008dee <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d74:	881a      	ldrh	r2, [r3, #0]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d80:	1c9a      	adds	r2, r3, #2
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	3b01      	subs	r3, #1
 8008d8e:	b29a      	uxth	r2, r3
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008d94:	e02b      	b.n	8008dee <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	f003 0302 	and.w	r3, r3, #2
 8008da0:	2b02      	cmp	r3, #2
 8008da2:	d112      	bne.n	8008dca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da8:	881a      	ldrh	r2, [r3, #0]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db4:	1c9a      	adds	r2, r3, #2
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	b29a      	uxth	r2, r3
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	86da      	strh	r2, [r3, #54]	; 0x36
 8008dc8:	e011      	b.n	8008dee <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008dca:	f7fc fb7b 	bl	80054c4 <HAL_GetTick>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	69bb      	ldr	r3, [r7, #24]
 8008dd2:	1ad3      	subs	r3, r2, r3
 8008dd4:	683a      	ldr	r2, [r7, #0]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d803      	bhi.n	8008de2 <HAL_SPI_Transmit+0x168>
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008de0:	d102      	bne.n	8008de8 <HAL_SPI_Transmit+0x16e>
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d102      	bne.n	8008dee <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008de8:	2303      	movs	r3, #3
 8008dea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008dec:	e074      	b.n	8008ed8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d1ce      	bne.n	8008d96 <HAL_SPI_Transmit+0x11c>
 8008df8:	e04c      	b.n	8008e94 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d002      	beq.n	8008e08 <HAL_SPI_Transmit+0x18e>
 8008e02:	8afb      	ldrh	r3, [r7, #22]
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d140      	bne.n	8008e8a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	330c      	adds	r3, #12
 8008e12:	7812      	ldrb	r2, [r2, #0]
 8008e14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e1a:	1c5a      	adds	r2, r3, #1
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	3b01      	subs	r3, #1
 8008e28:	b29a      	uxth	r2, r3
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008e2e:	e02c      	b.n	8008e8a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	f003 0302 	and.w	r3, r3, #2
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	d113      	bne.n	8008e66 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	330c      	adds	r3, #12
 8008e48:	7812      	ldrb	r2, [r2, #0]
 8008e4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e50:	1c5a      	adds	r2, r3, #1
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	86da      	strh	r2, [r3, #54]	; 0x36
 8008e64:	e011      	b.n	8008e8a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e66:	f7fc fb2d 	bl	80054c4 <HAL_GetTick>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	1ad3      	subs	r3, r2, r3
 8008e70:	683a      	ldr	r2, [r7, #0]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d803      	bhi.n	8008e7e <HAL_SPI_Transmit+0x204>
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e7c:	d102      	bne.n	8008e84 <HAL_SPI_Transmit+0x20a>
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d102      	bne.n	8008e8a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008e84:	2303      	movs	r3, #3
 8008e86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008e88:	e026      	b.n	8008ed8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d1cd      	bne.n	8008e30 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008e94:	69ba      	ldr	r2, [r7, #24]
 8008e96:	6839      	ldr	r1, [r7, #0]
 8008e98:	68f8      	ldr	r0, [r7, #12]
 8008e9a:	f000 fbcb 	bl	8009634 <SPI_EndRxTxTransaction>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d002      	beq.n	8008eaa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2220      	movs	r2, #32
 8008ea8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10a      	bne.n	8008ec8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	613b      	str	r3, [r7, #16]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	613b      	str	r3, [r7, #16]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	613b      	str	r3, [r7, #16]
 8008ec6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d002      	beq.n	8008ed6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	77fb      	strb	r3, [r7, #31]
 8008ed4:	e000      	b.n	8008ed8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008ed6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2201      	movs	r2, #1
 8008edc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008ee8:	7ffb      	ldrb	r3, [r7, #31]
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3720      	adds	r7, #32
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b088      	sub	sp, #32
 8008ef6:	af02      	add	r7, sp, #8
 8008ef8:	60f8      	str	r0, [r7, #12]
 8008efa:	60b9      	str	r1, [r7, #8]
 8008efc:	603b      	str	r3, [r7, #0]
 8008efe:	4613      	mov	r3, r2
 8008f00:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008f02:	2300      	movs	r3, #0
 8008f04:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f0e:	d112      	bne.n	8008f36 <HAL_SPI_Receive+0x44>
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d10e      	bne.n	8008f36 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2204      	movs	r2, #4
 8008f1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008f20:	88fa      	ldrh	r2, [r7, #6]
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	9300      	str	r3, [sp, #0]
 8008f26:	4613      	mov	r3, r2
 8008f28:	68ba      	ldr	r2, [r7, #8]
 8008f2a:	68b9      	ldr	r1, [r7, #8]
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f000 f8f1 	bl	8009114 <HAL_SPI_TransmitReceive>
 8008f32:	4603      	mov	r3, r0
 8008f34:	e0ea      	b.n	800910c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d101      	bne.n	8008f44 <HAL_SPI_Receive+0x52>
 8008f40:	2302      	movs	r3, #2
 8008f42:	e0e3      	b.n	800910c <HAL_SPI_Receive+0x21a>
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2201      	movs	r2, #1
 8008f48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f4c:	f7fc faba 	bl	80054c4 <HAL_GetTick>
 8008f50:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d002      	beq.n	8008f64 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008f5e:	2302      	movs	r3, #2
 8008f60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008f62:	e0ca      	b.n	80090fa <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d002      	beq.n	8008f70 <HAL_SPI_Receive+0x7e>
 8008f6a:	88fb      	ldrh	r3, [r7, #6]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d102      	bne.n	8008f76 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008f70:	2301      	movs	r3, #1
 8008f72:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008f74:	e0c1      	b.n	80090fa <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2204      	movs	r2, #4
 8008f7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2200      	movs	r2, #0
 8008f82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	68ba      	ldr	r2, [r7, #8]
 8008f88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	88fa      	ldrh	r2, [r7, #6]
 8008f8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	88fa      	ldrh	r2, [r7, #6]
 8008f94:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2200      	movs	r2, #0
 8008fac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fbc:	d10f      	bne.n	8008fde <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fcc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008fdc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fe8:	2b40      	cmp	r3, #64	; 0x40
 8008fea:	d007      	beq.n	8008ffc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ffa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d162      	bne.n	80090ca <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009004:	e02e      	b.n	8009064 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	f003 0301 	and.w	r3, r3, #1
 8009010:	2b01      	cmp	r3, #1
 8009012:	d115      	bne.n	8009040 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f103 020c 	add.w	r2, r3, #12
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009020:	7812      	ldrb	r2, [r2, #0]
 8009022:	b2d2      	uxtb	r2, r2
 8009024:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800902a:	1c5a      	adds	r2, r3, #1
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009034:	b29b      	uxth	r3, r3
 8009036:	3b01      	subs	r3, #1
 8009038:	b29a      	uxth	r2, r3
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800903e:	e011      	b.n	8009064 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009040:	f7fc fa40 	bl	80054c4 <HAL_GetTick>
 8009044:	4602      	mov	r2, r0
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	1ad3      	subs	r3, r2, r3
 800904a:	683a      	ldr	r2, [r7, #0]
 800904c:	429a      	cmp	r2, r3
 800904e:	d803      	bhi.n	8009058 <HAL_SPI_Receive+0x166>
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009056:	d102      	bne.n	800905e <HAL_SPI_Receive+0x16c>
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d102      	bne.n	8009064 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800905e:	2303      	movs	r3, #3
 8009060:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009062:	e04a      	b.n	80090fa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009068:	b29b      	uxth	r3, r3
 800906a:	2b00      	cmp	r3, #0
 800906c:	d1cb      	bne.n	8009006 <HAL_SPI_Receive+0x114>
 800906e:	e031      	b.n	80090d4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	f003 0301 	and.w	r3, r3, #1
 800907a:	2b01      	cmp	r3, #1
 800907c:	d113      	bne.n	80090a6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	68da      	ldr	r2, [r3, #12]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009088:	b292      	uxth	r2, r2
 800908a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009090:	1c9a      	adds	r2, r3, #2
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800909a:	b29b      	uxth	r3, r3
 800909c:	3b01      	subs	r3, #1
 800909e:	b29a      	uxth	r2, r3
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80090a4:	e011      	b.n	80090ca <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090a6:	f7fc fa0d 	bl	80054c4 <HAL_GetTick>
 80090aa:	4602      	mov	r2, r0
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	1ad3      	subs	r3, r2, r3
 80090b0:	683a      	ldr	r2, [r7, #0]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d803      	bhi.n	80090be <HAL_SPI_Receive+0x1cc>
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090bc:	d102      	bne.n	80090c4 <HAL_SPI_Receive+0x1d2>
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d102      	bne.n	80090ca <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80090c4:	2303      	movs	r3, #3
 80090c6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80090c8:	e017      	b.n	80090fa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d1cd      	bne.n	8009070 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80090d4:	693a      	ldr	r2, [r7, #16]
 80090d6:	6839      	ldr	r1, [r7, #0]
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f000 fa45 	bl	8009568 <SPI_EndRxTransaction>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d002      	beq.n	80090ea <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2220      	movs	r2, #32
 80090e8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d002      	beq.n	80090f8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	75fb      	strb	r3, [r7, #23]
 80090f6:	e000      	b.n	80090fa <HAL_SPI_Receive+0x208>
  }

error :
 80090f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2201      	movs	r2, #1
 80090fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2200      	movs	r2, #0
 8009106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800910a:	7dfb      	ldrb	r3, [r7, #23]
}
 800910c:	4618      	mov	r0, r3
 800910e:	3718      	adds	r7, #24
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b08c      	sub	sp, #48	; 0x30
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]
 8009120:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009122:	2301      	movs	r3, #1
 8009124:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009126:	2300      	movs	r3, #0
 8009128:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009132:	2b01      	cmp	r3, #1
 8009134:	d101      	bne.n	800913a <HAL_SPI_TransmitReceive+0x26>
 8009136:	2302      	movs	r3, #2
 8009138:	e18a      	b.n	8009450 <HAL_SPI_TransmitReceive+0x33c>
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2201      	movs	r2, #1
 800913e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009142:	f7fc f9bf 	bl	80054c4 <HAL_GetTick>
 8009146:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800914e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009158:	887b      	ldrh	r3, [r7, #2]
 800915a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800915c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009160:	2b01      	cmp	r3, #1
 8009162:	d00f      	beq.n	8009184 <HAL_SPI_TransmitReceive+0x70>
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800916a:	d107      	bne.n	800917c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d103      	bne.n	800917c <HAL_SPI_TransmitReceive+0x68>
 8009174:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009178:	2b04      	cmp	r3, #4
 800917a:	d003      	beq.n	8009184 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800917c:	2302      	movs	r3, #2
 800917e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009182:	e15b      	b.n	800943c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d005      	beq.n	8009196 <HAL_SPI_TransmitReceive+0x82>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d002      	beq.n	8009196 <HAL_SPI_TransmitReceive+0x82>
 8009190:	887b      	ldrh	r3, [r7, #2]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d103      	bne.n	800919e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800919c:	e14e      	b.n	800943c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	2b04      	cmp	r3, #4
 80091a8:	d003      	beq.n	80091b2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2205      	movs	r2, #5
 80091ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2200      	movs	r2, #0
 80091b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	887a      	ldrh	r2, [r7, #2]
 80091c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	887a      	ldrh	r2, [r7, #2]
 80091c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	68ba      	ldr	r2, [r7, #8]
 80091ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	887a      	ldrh	r2, [r7, #2]
 80091d4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	887a      	ldrh	r2, [r7, #2]
 80091da:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2200      	movs	r2, #0
 80091e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2200      	movs	r2, #0
 80091e6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091f2:	2b40      	cmp	r3, #64	; 0x40
 80091f4:	d007      	beq.n	8009206 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009204:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800920e:	d178      	bne.n	8009302 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d002      	beq.n	800921e <HAL_SPI_TransmitReceive+0x10a>
 8009218:	8b7b      	ldrh	r3, [r7, #26]
 800921a:	2b01      	cmp	r3, #1
 800921c:	d166      	bne.n	80092ec <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009222:	881a      	ldrh	r2, [r3, #0]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800922e:	1c9a      	adds	r2, r3, #2
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009238:	b29b      	uxth	r3, r3
 800923a:	3b01      	subs	r3, #1
 800923c:	b29a      	uxth	r2, r3
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009242:	e053      	b.n	80092ec <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	f003 0302 	and.w	r3, r3, #2
 800924e:	2b02      	cmp	r3, #2
 8009250:	d11b      	bne.n	800928a <HAL_SPI_TransmitReceive+0x176>
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009256:	b29b      	uxth	r3, r3
 8009258:	2b00      	cmp	r3, #0
 800925a:	d016      	beq.n	800928a <HAL_SPI_TransmitReceive+0x176>
 800925c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800925e:	2b01      	cmp	r3, #1
 8009260:	d113      	bne.n	800928a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009266:	881a      	ldrh	r2, [r3, #0]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009272:	1c9a      	adds	r2, r3, #2
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800927c:	b29b      	uxth	r3, r3
 800927e:	3b01      	subs	r3, #1
 8009280:	b29a      	uxth	r2, r3
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009286:	2300      	movs	r3, #0
 8009288:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	f003 0301 	and.w	r3, r3, #1
 8009294:	2b01      	cmp	r3, #1
 8009296:	d119      	bne.n	80092cc <HAL_SPI_TransmitReceive+0x1b8>
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800929c:	b29b      	uxth	r3, r3
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d014      	beq.n	80092cc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	68da      	ldr	r2, [r3, #12]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ac:	b292      	uxth	r2, r2
 80092ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b4:	1c9a      	adds	r2, r3, #2
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092be:	b29b      	uxth	r3, r3
 80092c0:	3b01      	subs	r3, #1
 80092c2:	b29a      	uxth	r2, r3
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80092c8:	2301      	movs	r3, #1
 80092ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80092cc:	f7fc f8fa 	bl	80054c4 <HAL_GetTick>
 80092d0:	4602      	mov	r2, r0
 80092d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d4:	1ad3      	subs	r3, r2, r3
 80092d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092d8:	429a      	cmp	r2, r3
 80092da:	d807      	bhi.n	80092ec <HAL_SPI_TransmitReceive+0x1d8>
 80092dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e2:	d003      	beq.n	80092ec <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80092e4:	2303      	movs	r3, #3
 80092e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80092ea:	e0a7      	b.n	800943c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1a6      	bne.n	8009244 <HAL_SPI_TransmitReceive+0x130>
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d1a1      	bne.n	8009244 <HAL_SPI_TransmitReceive+0x130>
 8009300:	e07c      	b.n	80093fc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d002      	beq.n	8009310 <HAL_SPI_TransmitReceive+0x1fc>
 800930a:	8b7b      	ldrh	r3, [r7, #26]
 800930c:	2b01      	cmp	r3, #1
 800930e:	d16b      	bne.n	80093e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	330c      	adds	r3, #12
 800931a:	7812      	ldrb	r2, [r2, #0]
 800931c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009322:	1c5a      	adds	r2, r3, #1
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800932c:	b29b      	uxth	r3, r3
 800932e:	3b01      	subs	r3, #1
 8009330:	b29a      	uxth	r2, r3
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009336:	e057      	b.n	80093e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	f003 0302 	and.w	r3, r3, #2
 8009342:	2b02      	cmp	r3, #2
 8009344:	d11c      	bne.n	8009380 <HAL_SPI_TransmitReceive+0x26c>
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800934a:	b29b      	uxth	r3, r3
 800934c:	2b00      	cmp	r3, #0
 800934e:	d017      	beq.n	8009380 <HAL_SPI_TransmitReceive+0x26c>
 8009350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009352:	2b01      	cmp	r3, #1
 8009354:	d114      	bne.n	8009380 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	330c      	adds	r3, #12
 8009360:	7812      	ldrb	r2, [r2, #0]
 8009362:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009368:	1c5a      	adds	r2, r3, #1
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009372:	b29b      	uxth	r3, r3
 8009374:	3b01      	subs	r3, #1
 8009376:	b29a      	uxth	r2, r3
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800937c:	2300      	movs	r3, #0
 800937e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	f003 0301 	and.w	r3, r3, #1
 800938a:	2b01      	cmp	r3, #1
 800938c:	d119      	bne.n	80093c2 <HAL_SPI_TransmitReceive+0x2ae>
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009392:	b29b      	uxth	r3, r3
 8009394:	2b00      	cmp	r3, #0
 8009396:	d014      	beq.n	80093c2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	68da      	ldr	r2, [r3, #12]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a2:	b2d2      	uxtb	r2, r2
 80093a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093aa:	1c5a      	adds	r2, r3, #1
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	3b01      	subs	r3, #1
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80093be:	2301      	movs	r3, #1
 80093c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80093c2:	f7fc f87f 	bl	80054c4 <HAL_GetTick>
 80093c6:	4602      	mov	r2, r0
 80093c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ca:	1ad3      	subs	r3, r2, r3
 80093cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d803      	bhi.n	80093da <HAL_SPI_TransmitReceive+0x2c6>
 80093d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093d8:	d102      	bne.n	80093e0 <HAL_SPI_TransmitReceive+0x2cc>
 80093da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d103      	bne.n	80093e8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80093e0:	2303      	movs	r3, #3
 80093e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80093e6:	e029      	b.n	800943c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d1a2      	bne.n	8009338 <HAL_SPI_TransmitReceive+0x224>
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d19d      	bne.n	8009338 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80093fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f000 f917 	bl	8009634 <SPI_EndRxTxTransaction>
 8009406:	4603      	mov	r3, r0
 8009408:	2b00      	cmp	r3, #0
 800940a:	d006      	beq.n	800941a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800940c:	2301      	movs	r3, #1
 800940e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2220      	movs	r2, #32
 8009416:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009418:	e010      	b.n	800943c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d10b      	bne.n	800943a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009422:	2300      	movs	r3, #0
 8009424:	617b      	str	r3, [r7, #20]
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	617b      	str	r3, [r7, #20]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	617b      	str	r3, [r7, #20]
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	e000      	b.n	800943c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800943a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2201      	movs	r2, #1
 8009440:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2200      	movs	r2, #0
 8009448:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800944c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009450:	4618      	mov	r0, r3
 8009452:	3730      	adds	r7, #48	; 0x30
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b088      	sub	sp, #32
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	603b      	str	r3, [r7, #0]
 8009464:	4613      	mov	r3, r2
 8009466:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009468:	f7fc f82c 	bl	80054c4 <HAL_GetTick>
 800946c:	4602      	mov	r2, r0
 800946e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009470:	1a9b      	subs	r3, r3, r2
 8009472:	683a      	ldr	r2, [r7, #0]
 8009474:	4413      	add	r3, r2
 8009476:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009478:	f7fc f824 	bl	80054c4 <HAL_GetTick>
 800947c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800947e:	4b39      	ldr	r3, [pc, #228]	; (8009564 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	015b      	lsls	r3, r3, #5
 8009484:	0d1b      	lsrs	r3, r3, #20
 8009486:	69fa      	ldr	r2, [r7, #28]
 8009488:	fb02 f303 	mul.w	r3, r2, r3
 800948c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800948e:	e054      	b.n	800953a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009496:	d050      	beq.n	800953a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009498:	f7fc f814 	bl	80054c4 <HAL_GetTick>
 800949c:	4602      	mov	r2, r0
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	69fa      	ldr	r2, [r7, #28]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d902      	bls.n	80094ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80094a8:	69fb      	ldr	r3, [r7, #28]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d13d      	bne.n	800952a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	685a      	ldr	r2, [r3, #4]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80094bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094c6:	d111      	bne.n	80094ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094d0:	d004      	beq.n	80094dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094da:	d107      	bne.n	80094ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094f4:	d10f      	bne.n	8009516 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009504:	601a      	str	r2, [r3, #0]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009514:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2201      	movs	r2, #1
 800951a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2200      	movs	r2, #0
 8009522:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009526:	2303      	movs	r3, #3
 8009528:	e017      	b.n	800955a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d101      	bne.n	8009534 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009530:	2300      	movs	r3, #0
 8009532:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	3b01      	subs	r3, #1
 8009538:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	689a      	ldr	r2, [r3, #8]
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	4013      	ands	r3, r2
 8009544:	68ba      	ldr	r2, [r7, #8]
 8009546:	429a      	cmp	r2, r3
 8009548:	bf0c      	ite	eq
 800954a:	2301      	moveq	r3, #1
 800954c:	2300      	movne	r3, #0
 800954e:	b2db      	uxtb	r3, r3
 8009550:	461a      	mov	r2, r3
 8009552:	79fb      	ldrb	r3, [r7, #7]
 8009554:	429a      	cmp	r2, r3
 8009556:	d19b      	bne.n	8009490 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009558:	2300      	movs	r3, #0
}
 800955a:	4618      	mov	r0, r3
 800955c:	3720      	adds	r7, #32
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	200003c4 	.word	0x200003c4

08009568 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b086      	sub	sp, #24
 800956c:	af02      	add	r7, sp, #8
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	60b9      	str	r1, [r7, #8]
 8009572:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800957c:	d111      	bne.n	80095a2 <SPI_EndRxTransaction+0x3a>
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009586:	d004      	beq.n	8009592 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009590:	d107      	bne.n	80095a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095a0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095aa:	d12a      	bne.n	8009602 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095b4:	d012      	beq.n	80095dc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	9300      	str	r3, [sp, #0]
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	2200      	movs	r2, #0
 80095be:	2180      	movs	r1, #128	; 0x80
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	f7ff ff49 	bl	8009458 <SPI_WaitFlagStateUntilTimeout>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d02d      	beq.n	8009628 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095d0:	f043 0220 	orr.w	r2, r3, #32
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80095d8:	2303      	movs	r3, #3
 80095da:	e026      	b.n	800962a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	9300      	str	r3, [sp, #0]
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	2200      	movs	r2, #0
 80095e4:	2101      	movs	r1, #1
 80095e6:	68f8      	ldr	r0, [r7, #12]
 80095e8:	f7ff ff36 	bl	8009458 <SPI_WaitFlagStateUntilTimeout>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d01a      	beq.n	8009628 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095f6:	f043 0220 	orr.w	r2, r3, #32
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80095fe:	2303      	movs	r3, #3
 8009600:	e013      	b.n	800962a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	9300      	str	r3, [sp, #0]
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	2200      	movs	r2, #0
 800960a:	2101      	movs	r1, #1
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f7ff ff23 	bl	8009458 <SPI_WaitFlagStateUntilTimeout>
 8009612:	4603      	mov	r3, r0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d007      	beq.n	8009628 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800961c:	f043 0220 	orr.w	r2, r3, #32
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009624:	2303      	movs	r3, #3
 8009626:	e000      	b.n	800962a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009628:	2300      	movs	r3, #0
}
 800962a:	4618      	mov	r0, r3
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
	...

08009634 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b088      	sub	sp, #32
 8009638:	af02      	add	r7, sp, #8
 800963a:	60f8      	str	r0, [r7, #12]
 800963c:	60b9      	str	r1, [r7, #8]
 800963e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009640:	4b1b      	ldr	r3, [pc, #108]	; (80096b0 <SPI_EndRxTxTransaction+0x7c>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a1b      	ldr	r2, [pc, #108]	; (80096b4 <SPI_EndRxTxTransaction+0x80>)
 8009646:	fba2 2303 	umull	r2, r3, r2, r3
 800964a:	0d5b      	lsrs	r3, r3, #21
 800964c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009650:	fb02 f303 	mul.w	r3, r2, r3
 8009654:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800965e:	d112      	bne.n	8009686 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	9300      	str	r3, [sp, #0]
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	2200      	movs	r2, #0
 8009668:	2180      	movs	r1, #128	; 0x80
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	f7ff fef4 	bl	8009458 <SPI_WaitFlagStateUntilTimeout>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d016      	beq.n	80096a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800967a:	f043 0220 	orr.w	r2, r3, #32
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009682:	2303      	movs	r3, #3
 8009684:	e00f      	b.n	80096a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d00a      	beq.n	80096a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	3b01      	subs	r3, #1
 8009690:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800969c:	2b80      	cmp	r3, #128	; 0x80
 800969e:	d0f2      	beq.n	8009686 <SPI_EndRxTxTransaction+0x52>
 80096a0:	e000      	b.n	80096a4 <SPI_EndRxTxTransaction+0x70>
        break;
 80096a2:	bf00      	nop
  }

  return HAL_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3718      	adds	r7, #24
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	200003c4 	.word	0x200003c4
 80096b4:	165e9f81 	.word	0x165e9f81

080096b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d101      	bne.n	80096ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	e041      	b.n	800974e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d106      	bne.n	80096e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2200      	movs	r2, #0
 80096da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f7fb fd2c 	bl	800513c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2202      	movs	r2, #2
 80096e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	3304      	adds	r3, #4
 80096f4:	4619      	mov	r1, r3
 80096f6:	4610      	mov	r0, r2
 80096f8:	f000 fd54 	bl	800a1a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2201      	movs	r2, #1
 8009700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2201      	movs	r2, #1
 8009708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2201      	movs	r2, #1
 8009710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2201      	movs	r2, #1
 8009718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2201      	movs	r2, #1
 8009720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2201      	movs	r2, #1
 8009730:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2201      	movs	r2, #1
 8009738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2201      	movs	r2, #1
 8009740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2201      	movs	r2, #1
 8009748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800974c:	2300      	movs	r3, #0
}
 800974e:	4618      	mov	r0, r3
 8009750:	3708      	adds	r7, #8
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
	...

08009758 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009758:	b480      	push	{r7}
 800975a:	b085      	sub	sp, #20
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009766:	b2db      	uxtb	r3, r3
 8009768:	2b01      	cmp	r3, #1
 800976a:	d001      	beq.n	8009770 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	e03c      	b.n	80097ea <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2202      	movs	r2, #2
 8009774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a1e      	ldr	r2, [pc, #120]	; (80097f8 <HAL_TIM_Base_Start+0xa0>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d018      	beq.n	80097b4 <HAL_TIM_Base_Start+0x5c>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800978a:	d013      	beq.n	80097b4 <HAL_TIM_Base_Start+0x5c>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a1a      	ldr	r2, [pc, #104]	; (80097fc <HAL_TIM_Base_Start+0xa4>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d00e      	beq.n	80097b4 <HAL_TIM_Base_Start+0x5c>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a19      	ldr	r2, [pc, #100]	; (8009800 <HAL_TIM_Base_Start+0xa8>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d009      	beq.n	80097b4 <HAL_TIM_Base_Start+0x5c>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a17      	ldr	r2, [pc, #92]	; (8009804 <HAL_TIM_Base_Start+0xac>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d004      	beq.n	80097b4 <HAL_TIM_Base_Start+0x5c>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a16      	ldr	r2, [pc, #88]	; (8009808 <HAL_TIM_Base_Start+0xb0>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d111      	bne.n	80097d8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	f003 0307 	and.w	r3, r3, #7
 80097be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2b06      	cmp	r3, #6
 80097c4:	d010      	beq.n	80097e8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f042 0201 	orr.w	r2, r2, #1
 80097d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097d6:	e007      	b.n	80097e8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f042 0201 	orr.w	r2, r2, #1
 80097e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3714      	adds	r7, #20
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr
 80097f6:	bf00      	nop
 80097f8:	40010000 	.word	0x40010000
 80097fc:	40000400 	.word	0x40000400
 8009800:	40000800 	.word	0x40000800
 8009804:	40000c00 	.word	0x40000c00
 8009808:	40014000 	.word	0x40014000

0800980c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800980c:	b480      	push	{r7}
 800980e:	b085      	sub	sp, #20
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800981a:	b2db      	uxtb	r3, r3
 800981c:	2b01      	cmp	r3, #1
 800981e:	d001      	beq.n	8009824 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009820:	2301      	movs	r3, #1
 8009822:	e044      	b.n	80098ae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2202      	movs	r2, #2
 8009828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	68da      	ldr	r2, [r3, #12]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f042 0201 	orr.w	r2, r2, #1
 800983a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a1e      	ldr	r2, [pc, #120]	; (80098bc <HAL_TIM_Base_Start_IT+0xb0>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d018      	beq.n	8009878 <HAL_TIM_Base_Start_IT+0x6c>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800984e:	d013      	beq.n	8009878 <HAL_TIM_Base_Start_IT+0x6c>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a1a      	ldr	r2, [pc, #104]	; (80098c0 <HAL_TIM_Base_Start_IT+0xb4>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d00e      	beq.n	8009878 <HAL_TIM_Base_Start_IT+0x6c>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a19      	ldr	r2, [pc, #100]	; (80098c4 <HAL_TIM_Base_Start_IT+0xb8>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d009      	beq.n	8009878 <HAL_TIM_Base_Start_IT+0x6c>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a17      	ldr	r2, [pc, #92]	; (80098c8 <HAL_TIM_Base_Start_IT+0xbc>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d004      	beq.n	8009878 <HAL_TIM_Base_Start_IT+0x6c>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a16      	ldr	r2, [pc, #88]	; (80098cc <HAL_TIM_Base_Start_IT+0xc0>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d111      	bne.n	800989c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	f003 0307 	and.w	r3, r3, #7
 8009882:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2b06      	cmp	r3, #6
 8009888:	d010      	beq.n	80098ac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f042 0201 	orr.w	r2, r2, #1
 8009898:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800989a:	e007      	b.n	80098ac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f042 0201 	orr.w	r2, r2, #1
 80098aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80098ac:	2300      	movs	r3, #0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3714      	adds	r7, #20
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop
 80098bc:	40010000 	.word	0x40010000
 80098c0:	40000400 	.word	0x40000400
 80098c4:	40000800 	.word	0x40000800
 80098c8:	40000c00 	.word	0x40000c00
 80098cc:	40014000 	.word	0x40014000

080098d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d101      	bne.n	80098e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	e041      	b.n	8009966 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d106      	bne.n	80098fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 f839 	bl	800996e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2202      	movs	r2, #2
 8009900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	3304      	adds	r3, #4
 800990c:	4619      	mov	r1, r3
 800990e:	4610      	mov	r0, r2
 8009910:	f000 fc48 	bl	800a1a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2201      	movs	r2, #1
 8009918:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2201      	movs	r2, #1
 8009928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2201      	movs	r2, #1
 8009930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2201      	movs	r2, #1
 8009938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2201      	movs	r2, #1
 8009940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2201      	movs	r2, #1
 8009948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2201      	movs	r2, #1
 8009950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2201      	movs	r2, #1
 8009958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2201      	movs	r2, #1
 8009960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3708      	adds	r7, #8
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800996e:	b480      	push	{r7}
 8009970:	b083      	sub	sp, #12
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009976:	bf00      	nop
 8009978:	370c      	adds	r7, #12
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr
	...

08009984 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d109      	bne.n	80099a8 <HAL_TIM_PWM_Start+0x24>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800999a:	b2db      	uxtb	r3, r3
 800999c:	2b01      	cmp	r3, #1
 800999e:	bf14      	ite	ne
 80099a0:	2301      	movne	r3, #1
 80099a2:	2300      	moveq	r3, #0
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	e022      	b.n	80099ee <HAL_TIM_PWM_Start+0x6a>
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	2b04      	cmp	r3, #4
 80099ac:	d109      	bne.n	80099c2 <HAL_TIM_PWM_Start+0x3e>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	bf14      	ite	ne
 80099ba:	2301      	movne	r3, #1
 80099bc:	2300      	moveq	r3, #0
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	e015      	b.n	80099ee <HAL_TIM_PWM_Start+0x6a>
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	2b08      	cmp	r3, #8
 80099c6:	d109      	bne.n	80099dc <HAL_TIM_PWM_Start+0x58>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	bf14      	ite	ne
 80099d4:	2301      	movne	r3, #1
 80099d6:	2300      	moveq	r3, #0
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	e008      	b.n	80099ee <HAL_TIM_PWM_Start+0x6a>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	bf14      	ite	ne
 80099e8:	2301      	movne	r3, #1
 80099ea:	2300      	moveq	r3, #0
 80099ec:	b2db      	uxtb	r3, r3
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d001      	beq.n	80099f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80099f2:	2301      	movs	r3, #1
 80099f4:	e068      	b.n	8009ac8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d104      	bne.n	8009a06 <HAL_TIM_PWM_Start+0x82>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2202      	movs	r2, #2
 8009a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a04:	e013      	b.n	8009a2e <HAL_TIM_PWM_Start+0xaa>
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	2b04      	cmp	r3, #4
 8009a0a:	d104      	bne.n	8009a16 <HAL_TIM_PWM_Start+0x92>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2202      	movs	r2, #2
 8009a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a14:	e00b      	b.n	8009a2e <HAL_TIM_PWM_Start+0xaa>
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	2b08      	cmp	r3, #8
 8009a1a:	d104      	bne.n	8009a26 <HAL_TIM_PWM_Start+0xa2>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2202      	movs	r2, #2
 8009a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a24:	e003      	b.n	8009a2e <HAL_TIM_PWM_Start+0xaa>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2202      	movs	r2, #2
 8009a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	2201      	movs	r2, #1
 8009a34:	6839      	ldr	r1, [r7, #0]
 8009a36:	4618      	mov	r0, r3
 8009a38:	f000 fe5a 	bl	800a6f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a23      	ldr	r2, [pc, #140]	; (8009ad0 <HAL_TIM_PWM_Start+0x14c>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d107      	bne.n	8009a56 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009a54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a1d      	ldr	r2, [pc, #116]	; (8009ad0 <HAL_TIM_PWM_Start+0x14c>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d018      	beq.n	8009a92 <HAL_TIM_PWM_Start+0x10e>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a68:	d013      	beq.n	8009a92 <HAL_TIM_PWM_Start+0x10e>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a19      	ldr	r2, [pc, #100]	; (8009ad4 <HAL_TIM_PWM_Start+0x150>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d00e      	beq.n	8009a92 <HAL_TIM_PWM_Start+0x10e>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a17      	ldr	r2, [pc, #92]	; (8009ad8 <HAL_TIM_PWM_Start+0x154>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d009      	beq.n	8009a92 <HAL_TIM_PWM_Start+0x10e>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a16      	ldr	r2, [pc, #88]	; (8009adc <HAL_TIM_PWM_Start+0x158>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d004      	beq.n	8009a92 <HAL_TIM_PWM_Start+0x10e>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a14      	ldr	r2, [pc, #80]	; (8009ae0 <HAL_TIM_PWM_Start+0x15c>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d111      	bne.n	8009ab6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	f003 0307 	and.w	r3, r3, #7
 8009a9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2b06      	cmp	r3, #6
 8009aa2:	d010      	beq.n	8009ac6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f042 0201 	orr.w	r2, r2, #1
 8009ab2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ab4:	e007      	b.n	8009ac6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f042 0201 	orr.w	r2, r2, #1
 8009ac4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3710      	adds	r7, #16
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	40010000 	.word	0x40010000
 8009ad4:	40000400 	.word	0x40000400
 8009ad8:	40000800 	.word	0x40000800
 8009adc:	40000c00 	.word	0x40000c00
 8009ae0:	40014000 	.word	0x40014000

08009ae4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b086      	sub	sp, #24
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d101      	bne.n	8009af8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
 8009af6:	e097      	b.n	8009c28 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009afe:	b2db      	uxtb	r3, r3
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d106      	bne.n	8009b12 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f7fb fa99 	bl	8005044 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2202      	movs	r2, #2
 8009b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	6812      	ldr	r2, [r2, #0]
 8009b24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b28:	f023 0307 	bic.w	r3, r3, #7
 8009b2c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	3304      	adds	r3, #4
 8009b36:	4619      	mov	r1, r3
 8009b38:	4610      	mov	r0, r2
 8009b3a:	f000 fb33 	bl	800a1a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	699b      	ldr	r3, [r3, #24]
 8009b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	6a1b      	ldr	r3, [r3, #32]
 8009b54:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	697a      	ldr	r2, [r7, #20]
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b66:	f023 0303 	bic.w	r3, r3, #3
 8009b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	689a      	ldr	r2, [r3, #8]
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	699b      	ldr	r3, [r3, #24]
 8009b74:	021b      	lsls	r3, r3, #8
 8009b76:	4313      	orrs	r3, r2
 8009b78:	693a      	ldr	r2, [r7, #16]
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009b84:	f023 030c 	bic.w	r3, r3, #12
 8009b88:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009b90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	68da      	ldr	r2, [r3, #12]
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	69db      	ldr	r3, [r3, #28]
 8009b9e:	021b      	lsls	r3, r3, #8
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	693a      	ldr	r2, [r7, #16]
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	691b      	ldr	r3, [r3, #16]
 8009bac:	011a      	lsls	r2, r3, #4
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	6a1b      	ldr	r3, [r3, #32]
 8009bb2:	031b      	lsls	r3, r3, #12
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	693a      	ldr	r2, [r7, #16]
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009bc2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009bca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	685a      	ldr	r2, [r3, #4]
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	695b      	ldr	r3, [r3, #20]
 8009bd4:	011b      	lsls	r3, r3, #4
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	68fa      	ldr	r2, [r7, #12]
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	697a      	ldr	r2, [r7, #20]
 8009be4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	693a      	ldr	r2, [r7, #16]
 8009bec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2201      	movs	r2, #1
 8009c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2201      	movs	r2, #1
 8009c0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2201      	movs	r2, #1
 8009c12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2201      	movs	r2, #1
 8009c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c26:	2300      	movs	r3, #0
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3718      	adds	r7, #24
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b082      	sub	sp, #8
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	691b      	ldr	r3, [r3, #16]
 8009c3e:	f003 0302 	and.w	r3, r3, #2
 8009c42:	2b02      	cmp	r3, #2
 8009c44:	d122      	bne.n	8009c8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	f003 0302 	and.w	r3, r3, #2
 8009c50:	2b02      	cmp	r3, #2
 8009c52:	d11b      	bne.n	8009c8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f06f 0202 	mvn.w	r2, #2
 8009c5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2201      	movs	r2, #1
 8009c62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	699b      	ldr	r3, [r3, #24]
 8009c6a:	f003 0303 	and.w	r3, r3, #3
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d003      	beq.n	8009c7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 fa77 	bl	800a166 <HAL_TIM_IC_CaptureCallback>
 8009c78:	e005      	b.n	8009c86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 fa69 	bl	800a152 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 fa7a 	bl	800a17a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	691b      	ldr	r3, [r3, #16]
 8009c92:	f003 0304 	and.w	r3, r3, #4
 8009c96:	2b04      	cmp	r3, #4
 8009c98:	d122      	bne.n	8009ce0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	f003 0304 	and.w	r3, r3, #4
 8009ca4:	2b04      	cmp	r3, #4
 8009ca6:	d11b      	bne.n	8009ce0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f06f 0204 	mvn.w	r2, #4
 8009cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2202      	movs	r2, #2
 8009cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	699b      	ldr	r3, [r3, #24]
 8009cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d003      	beq.n	8009cce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 fa4d 	bl	800a166 <HAL_TIM_IC_CaptureCallback>
 8009ccc:	e005      	b.n	8009cda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 fa3f 	bl	800a152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 fa50 	bl	800a17a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	691b      	ldr	r3, [r3, #16]
 8009ce6:	f003 0308 	and.w	r3, r3, #8
 8009cea:	2b08      	cmp	r3, #8
 8009cec:	d122      	bne.n	8009d34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	68db      	ldr	r3, [r3, #12]
 8009cf4:	f003 0308 	and.w	r3, r3, #8
 8009cf8:	2b08      	cmp	r3, #8
 8009cfa:	d11b      	bne.n	8009d34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f06f 0208 	mvn.w	r2, #8
 8009d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2204      	movs	r2, #4
 8009d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	69db      	ldr	r3, [r3, #28]
 8009d12:	f003 0303 	and.w	r3, r3, #3
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d003      	beq.n	8009d22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 fa23 	bl	800a166 <HAL_TIM_IC_CaptureCallback>
 8009d20:	e005      	b.n	8009d2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 fa15 	bl	800a152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 fa26 	bl	800a17a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2200      	movs	r2, #0
 8009d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	691b      	ldr	r3, [r3, #16]
 8009d3a:	f003 0310 	and.w	r3, r3, #16
 8009d3e:	2b10      	cmp	r3, #16
 8009d40:	d122      	bne.n	8009d88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	f003 0310 	and.w	r3, r3, #16
 8009d4c:	2b10      	cmp	r3, #16
 8009d4e:	d11b      	bne.n	8009d88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f06f 0210 	mvn.w	r2, #16
 8009d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2208      	movs	r2, #8
 8009d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	69db      	ldr	r3, [r3, #28]
 8009d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d003      	beq.n	8009d76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 f9f9 	bl	800a166 <HAL_TIM_IC_CaptureCallback>
 8009d74:	e005      	b.n	8009d82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 f9eb 	bl	800a152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 f9fc 	bl	800a17a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2200      	movs	r2, #0
 8009d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	691b      	ldr	r3, [r3, #16]
 8009d8e:	f003 0301 	and.w	r3, r3, #1
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d10e      	bne.n	8009db4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	f003 0301 	and.w	r3, r3, #1
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d107      	bne.n	8009db4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f06f 0201 	mvn.w	r2, #1
 8009dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f7f7 fbec 	bl	800158c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	691b      	ldr	r3, [r3, #16]
 8009dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dbe:	2b80      	cmp	r3, #128	; 0x80
 8009dc0:	d10e      	bne.n	8009de0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dcc:	2b80      	cmp	r3, #128	; 0x80
 8009dce:	d107      	bne.n	8009de0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 fd26 	bl	800a82c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	691b      	ldr	r3, [r3, #16]
 8009de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dea:	2b40      	cmp	r3, #64	; 0x40
 8009dec:	d10e      	bne.n	8009e0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	68db      	ldr	r3, [r3, #12]
 8009df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009df8:	2b40      	cmp	r3, #64	; 0x40
 8009dfa:	d107      	bne.n	8009e0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 f9c1 	bl	800a18e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	691b      	ldr	r3, [r3, #16]
 8009e12:	f003 0320 	and.w	r3, r3, #32
 8009e16:	2b20      	cmp	r3, #32
 8009e18:	d10e      	bne.n	8009e38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	f003 0320 	and.w	r3, r3, #32
 8009e24:	2b20      	cmp	r3, #32
 8009e26:	d107      	bne.n	8009e38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f06f 0220 	mvn.w	r2, #32
 8009e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f000 fcf0 	bl	800a818 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e38:	bf00      	nop
 8009e3a:	3708      	adds	r7, #8
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b086      	sub	sp, #24
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d101      	bne.n	8009e5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009e5a:	2302      	movs	r3, #2
 8009e5c:	e0ae      	b.n	8009fbc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2201      	movs	r2, #1
 8009e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2b0c      	cmp	r3, #12
 8009e6a:	f200 809f 	bhi.w	8009fac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009e6e:	a201      	add	r2, pc, #4	; (adr r2, 8009e74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e74:	08009ea9 	.word	0x08009ea9
 8009e78:	08009fad 	.word	0x08009fad
 8009e7c:	08009fad 	.word	0x08009fad
 8009e80:	08009fad 	.word	0x08009fad
 8009e84:	08009ee9 	.word	0x08009ee9
 8009e88:	08009fad 	.word	0x08009fad
 8009e8c:	08009fad 	.word	0x08009fad
 8009e90:	08009fad 	.word	0x08009fad
 8009e94:	08009f2b 	.word	0x08009f2b
 8009e98:	08009fad 	.word	0x08009fad
 8009e9c:	08009fad 	.word	0x08009fad
 8009ea0:	08009fad 	.word	0x08009fad
 8009ea4:	08009f6b 	.word	0x08009f6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	68b9      	ldr	r1, [r7, #8]
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f000 f9f8 	bl	800a2a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	699a      	ldr	r2, [r3, #24]
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f042 0208 	orr.w	r2, r2, #8
 8009ec2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	699a      	ldr	r2, [r3, #24]
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f022 0204 	bic.w	r2, r2, #4
 8009ed2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	6999      	ldr	r1, [r3, #24]
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	691a      	ldr	r2, [r3, #16]
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	430a      	orrs	r2, r1
 8009ee4:	619a      	str	r2, [r3, #24]
      break;
 8009ee6:	e064      	b.n	8009fb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	68b9      	ldr	r1, [r7, #8]
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f000 fa3e 	bl	800a370 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	699a      	ldr	r2, [r3, #24]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	699a      	ldr	r2, [r3, #24]
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	6999      	ldr	r1, [r3, #24]
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	691b      	ldr	r3, [r3, #16]
 8009f1e:	021a      	lsls	r2, r3, #8
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	430a      	orrs	r2, r1
 8009f26:	619a      	str	r2, [r3, #24]
      break;
 8009f28:	e043      	b.n	8009fb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	68b9      	ldr	r1, [r7, #8]
 8009f30:	4618      	mov	r0, r3
 8009f32:	f000 fa89 	bl	800a448 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	69da      	ldr	r2, [r3, #28]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f042 0208 	orr.w	r2, r2, #8
 8009f44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	69da      	ldr	r2, [r3, #28]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f022 0204 	bic.w	r2, r2, #4
 8009f54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	69d9      	ldr	r1, [r3, #28]
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	691a      	ldr	r2, [r3, #16]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	430a      	orrs	r2, r1
 8009f66:	61da      	str	r2, [r3, #28]
      break;
 8009f68:	e023      	b.n	8009fb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	68b9      	ldr	r1, [r7, #8]
 8009f70:	4618      	mov	r0, r3
 8009f72:	f000 fad3 	bl	800a51c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	69da      	ldr	r2, [r3, #28]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	69da      	ldr	r2, [r3, #28]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	69d9      	ldr	r1, [r3, #28]
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	691b      	ldr	r3, [r3, #16]
 8009fa0:	021a      	lsls	r2, r3, #8
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	430a      	orrs	r2, r1
 8009fa8:	61da      	str	r2, [r3, #28]
      break;
 8009faa:	e002      	b.n	8009fb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	75fb      	strb	r3, [r7, #23]
      break;
 8009fb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3718      	adds	r7, #24
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d101      	bne.n	8009fe0 <HAL_TIM_ConfigClockSource+0x1c>
 8009fdc:	2302      	movs	r3, #2
 8009fde:	e0b4      	b.n	800a14a <HAL_TIM_ConfigClockSource+0x186>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2202      	movs	r2, #2
 8009fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	689b      	ldr	r3, [r3, #8]
 8009ff6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009ffe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a006:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	68ba      	ldr	r2, [r7, #8]
 800a00e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a018:	d03e      	beq.n	800a098 <HAL_TIM_ConfigClockSource+0xd4>
 800a01a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a01e:	f200 8087 	bhi.w	800a130 <HAL_TIM_ConfigClockSource+0x16c>
 800a022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a026:	f000 8086 	beq.w	800a136 <HAL_TIM_ConfigClockSource+0x172>
 800a02a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a02e:	d87f      	bhi.n	800a130 <HAL_TIM_ConfigClockSource+0x16c>
 800a030:	2b70      	cmp	r3, #112	; 0x70
 800a032:	d01a      	beq.n	800a06a <HAL_TIM_ConfigClockSource+0xa6>
 800a034:	2b70      	cmp	r3, #112	; 0x70
 800a036:	d87b      	bhi.n	800a130 <HAL_TIM_ConfigClockSource+0x16c>
 800a038:	2b60      	cmp	r3, #96	; 0x60
 800a03a:	d050      	beq.n	800a0de <HAL_TIM_ConfigClockSource+0x11a>
 800a03c:	2b60      	cmp	r3, #96	; 0x60
 800a03e:	d877      	bhi.n	800a130 <HAL_TIM_ConfigClockSource+0x16c>
 800a040:	2b50      	cmp	r3, #80	; 0x50
 800a042:	d03c      	beq.n	800a0be <HAL_TIM_ConfigClockSource+0xfa>
 800a044:	2b50      	cmp	r3, #80	; 0x50
 800a046:	d873      	bhi.n	800a130 <HAL_TIM_ConfigClockSource+0x16c>
 800a048:	2b40      	cmp	r3, #64	; 0x40
 800a04a:	d058      	beq.n	800a0fe <HAL_TIM_ConfigClockSource+0x13a>
 800a04c:	2b40      	cmp	r3, #64	; 0x40
 800a04e:	d86f      	bhi.n	800a130 <HAL_TIM_ConfigClockSource+0x16c>
 800a050:	2b30      	cmp	r3, #48	; 0x30
 800a052:	d064      	beq.n	800a11e <HAL_TIM_ConfigClockSource+0x15a>
 800a054:	2b30      	cmp	r3, #48	; 0x30
 800a056:	d86b      	bhi.n	800a130 <HAL_TIM_ConfigClockSource+0x16c>
 800a058:	2b20      	cmp	r3, #32
 800a05a:	d060      	beq.n	800a11e <HAL_TIM_ConfigClockSource+0x15a>
 800a05c:	2b20      	cmp	r3, #32
 800a05e:	d867      	bhi.n	800a130 <HAL_TIM_ConfigClockSource+0x16c>
 800a060:	2b00      	cmp	r3, #0
 800a062:	d05c      	beq.n	800a11e <HAL_TIM_ConfigClockSource+0x15a>
 800a064:	2b10      	cmp	r3, #16
 800a066:	d05a      	beq.n	800a11e <HAL_TIM_ConfigClockSource+0x15a>
 800a068:	e062      	b.n	800a130 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6818      	ldr	r0, [r3, #0]
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	6899      	ldr	r1, [r3, #8]
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	685a      	ldr	r2, [r3, #4]
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	f000 fb19 	bl	800a6b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a08c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	68ba      	ldr	r2, [r7, #8]
 800a094:	609a      	str	r2, [r3, #8]
      break;
 800a096:	e04f      	b.n	800a138 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6818      	ldr	r0, [r3, #0]
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	6899      	ldr	r1, [r3, #8]
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	685a      	ldr	r2, [r3, #4]
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	68db      	ldr	r3, [r3, #12]
 800a0a8:	f000 fb02 	bl	800a6b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	689a      	ldr	r2, [r3, #8]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a0ba:	609a      	str	r2, [r3, #8]
      break;
 800a0bc:	e03c      	b.n	800a138 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6818      	ldr	r0, [r3, #0]
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	6859      	ldr	r1, [r3, #4]
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	68db      	ldr	r3, [r3, #12]
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	f000 fa76 	bl	800a5bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2150      	movs	r1, #80	; 0x50
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f000 facf 	bl	800a67a <TIM_ITRx_SetConfig>
      break;
 800a0dc:	e02c      	b.n	800a138 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6818      	ldr	r0, [r3, #0]
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	6859      	ldr	r1, [r3, #4]
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	f000 fa95 	bl	800a61a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	2160      	movs	r1, #96	; 0x60
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f000 fabf 	bl	800a67a <TIM_ITRx_SetConfig>
      break;
 800a0fc:	e01c      	b.n	800a138 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6818      	ldr	r0, [r3, #0]
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	6859      	ldr	r1, [r3, #4]
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	461a      	mov	r2, r3
 800a10c:	f000 fa56 	bl	800a5bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2140      	movs	r1, #64	; 0x40
 800a116:	4618      	mov	r0, r3
 800a118:	f000 faaf 	bl	800a67a <TIM_ITRx_SetConfig>
      break;
 800a11c:	e00c      	b.n	800a138 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4619      	mov	r1, r3
 800a128:	4610      	mov	r0, r2
 800a12a:	f000 faa6 	bl	800a67a <TIM_ITRx_SetConfig>
      break;
 800a12e:	e003      	b.n	800a138 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	73fb      	strb	r3, [r7, #15]
      break;
 800a134:	e000      	b.n	800a138 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a136:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2200      	movs	r2, #0
 800a144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a148:	7bfb      	ldrb	r3, [r7, #15]
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3710      	adds	r7, #16
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}

0800a152 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a152:	b480      	push	{r7}
 800a154:	b083      	sub	sp, #12
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a15a:	bf00      	nop
 800a15c:	370c      	adds	r7, #12
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr

0800a166 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a166:	b480      	push	{r7}
 800a168:	b083      	sub	sp, #12
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a16e:	bf00      	nop
 800a170:	370c      	adds	r7, #12
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr

0800a17a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a17a:	b480      	push	{r7}
 800a17c:	b083      	sub	sp, #12
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a182:	bf00      	nop
 800a184:	370c      	adds	r7, #12
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr

0800a18e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a18e:	b480      	push	{r7}
 800a190:	b083      	sub	sp, #12
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a196:	bf00      	nop
 800a198:	370c      	adds	r7, #12
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr
	...

0800a1a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b085      	sub	sp, #20
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4a34      	ldr	r2, [pc, #208]	; (800a288 <TIM_Base_SetConfig+0xe4>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d00f      	beq.n	800a1dc <TIM_Base_SetConfig+0x38>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1c2:	d00b      	beq.n	800a1dc <TIM_Base_SetConfig+0x38>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	4a31      	ldr	r2, [pc, #196]	; (800a28c <TIM_Base_SetConfig+0xe8>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d007      	beq.n	800a1dc <TIM_Base_SetConfig+0x38>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	4a30      	ldr	r2, [pc, #192]	; (800a290 <TIM_Base_SetConfig+0xec>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d003      	beq.n	800a1dc <TIM_Base_SetConfig+0x38>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	4a2f      	ldr	r2, [pc, #188]	; (800a294 <TIM_Base_SetConfig+0xf0>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d108      	bne.n	800a1ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	68fa      	ldr	r2, [r7, #12]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	4a25      	ldr	r2, [pc, #148]	; (800a288 <TIM_Base_SetConfig+0xe4>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d01b      	beq.n	800a22e <TIM_Base_SetConfig+0x8a>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1fc:	d017      	beq.n	800a22e <TIM_Base_SetConfig+0x8a>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	4a22      	ldr	r2, [pc, #136]	; (800a28c <TIM_Base_SetConfig+0xe8>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d013      	beq.n	800a22e <TIM_Base_SetConfig+0x8a>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	4a21      	ldr	r2, [pc, #132]	; (800a290 <TIM_Base_SetConfig+0xec>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d00f      	beq.n	800a22e <TIM_Base_SetConfig+0x8a>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	4a20      	ldr	r2, [pc, #128]	; (800a294 <TIM_Base_SetConfig+0xf0>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d00b      	beq.n	800a22e <TIM_Base_SetConfig+0x8a>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	4a1f      	ldr	r2, [pc, #124]	; (800a298 <TIM_Base_SetConfig+0xf4>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d007      	beq.n	800a22e <TIM_Base_SetConfig+0x8a>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	4a1e      	ldr	r2, [pc, #120]	; (800a29c <TIM_Base_SetConfig+0xf8>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d003      	beq.n	800a22e <TIM_Base_SetConfig+0x8a>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	4a1d      	ldr	r2, [pc, #116]	; (800a2a0 <TIM_Base_SetConfig+0xfc>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d108      	bne.n	800a240 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a234:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	68fa      	ldr	r2, [r7, #12]
 800a23c:	4313      	orrs	r3, r2
 800a23e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	695b      	ldr	r3, [r3, #20]
 800a24a:	4313      	orrs	r3, r2
 800a24c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	68fa      	ldr	r2, [r7, #12]
 800a252:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	689a      	ldr	r2, [r3, #8]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	681a      	ldr	r2, [r3, #0]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	4a08      	ldr	r2, [pc, #32]	; (800a288 <TIM_Base_SetConfig+0xe4>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d103      	bne.n	800a274 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	691a      	ldr	r2, [r3, #16]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2201      	movs	r2, #1
 800a278:	615a      	str	r2, [r3, #20]
}
 800a27a:	bf00      	nop
 800a27c:	3714      	adds	r7, #20
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr
 800a286:	bf00      	nop
 800a288:	40010000 	.word	0x40010000
 800a28c:	40000400 	.word	0x40000400
 800a290:	40000800 	.word	0x40000800
 800a294:	40000c00 	.word	0x40000c00
 800a298:	40014000 	.word	0x40014000
 800a29c:	40014400 	.word	0x40014400
 800a2a0:	40014800 	.word	0x40014800

0800a2a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b087      	sub	sp, #28
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6a1b      	ldr	r3, [r3, #32]
 800a2b2:	f023 0201 	bic.w	r2, r3, #1
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6a1b      	ldr	r3, [r3, #32]
 800a2be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	699b      	ldr	r3, [r3, #24]
 800a2ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f023 0303 	bic.w	r3, r3, #3
 800a2da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	68fa      	ldr	r2, [r7, #12]
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	f023 0302 	bic.w	r3, r3, #2
 800a2ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	697a      	ldr	r2, [r7, #20]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	4a1c      	ldr	r2, [pc, #112]	; (800a36c <TIM_OC1_SetConfig+0xc8>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d10c      	bne.n	800a31a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	f023 0308 	bic.w	r3, r3, #8
 800a306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	68db      	ldr	r3, [r3, #12]
 800a30c:	697a      	ldr	r2, [r7, #20]
 800a30e:	4313      	orrs	r3, r2
 800a310:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	f023 0304 	bic.w	r3, r3, #4
 800a318:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	4a13      	ldr	r2, [pc, #76]	; (800a36c <TIM_OC1_SetConfig+0xc8>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d111      	bne.n	800a346 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	695b      	ldr	r3, [r3, #20]
 800a336:	693a      	ldr	r2, [r7, #16]
 800a338:	4313      	orrs	r3, r2
 800a33a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	699b      	ldr	r3, [r3, #24]
 800a340:	693a      	ldr	r2, [r7, #16]
 800a342:	4313      	orrs	r3, r2
 800a344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	693a      	ldr	r2, [r7, #16]
 800a34a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	68fa      	ldr	r2, [r7, #12]
 800a350:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	685a      	ldr	r2, [r3, #4]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	697a      	ldr	r2, [r7, #20]
 800a35e:	621a      	str	r2, [r3, #32]
}
 800a360:	bf00      	nop
 800a362:	371c      	adds	r7, #28
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr
 800a36c:	40010000 	.word	0x40010000

0800a370 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a370:	b480      	push	{r7}
 800a372:	b087      	sub	sp, #28
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6a1b      	ldr	r3, [r3, #32]
 800a37e:	f023 0210 	bic.w	r2, r3, #16
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6a1b      	ldr	r3, [r3, #32]
 800a38a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	699b      	ldr	r3, [r3, #24]
 800a396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a39e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	021b      	lsls	r3, r3, #8
 800a3ae:	68fa      	ldr	r2, [r7, #12]
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	f023 0320 	bic.w	r3, r3, #32
 800a3ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	011b      	lsls	r3, r3, #4
 800a3c2:	697a      	ldr	r2, [r7, #20]
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	4a1e      	ldr	r2, [pc, #120]	; (800a444 <TIM_OC2_SetConfig+0xd4>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d10d      	bne.n	800a3ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	68db      	ldr	r3, [r3, #12]
 800a3dc:	011b      	lsls	r3, r3, #4
 800a3de:	697a      	ldr	r2, [r7, #20]
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4a15      	ldr	r2, [pc, #84]	; (800a444 <TIM_OC2_SetConfig+0xd4>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d113      	bne.n	800a41c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a3fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a402:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	695b      	ldr	r3, [r3, #20]
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	693a      	ldr	r2, [r7, #16]
 800a40c:	4313      	orrs	r3, r2
 800a40e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	699b      	ldr	r3, [r3, #24]
 800a414:	009b      	lsls	r3, r3, #2
 800a416:	693a      	ldr	r2, [r7, #16]
 800a418:	4313      	orrs	r3, r2
 800a41a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	693a      	ldr	r2, [r7, #16]
 800a420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	68fa      	ldr	r2, [r7, #12]
 800a426:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	685a      	ldr	r2, [r3, #4]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	697a      	ldr	r2, [r7, #20]
 800a434:	621a      	str	r2, [r3, #32]
}
 800a436:	bf00      	nop
 800a438:	371c      	adds	r7, #28
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop
 800a444:	40010000 	.word	0x40010000

0800a448 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a448:	b480      	push	{r7}
 800a44a:	b087      	sub	sp, #28
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6a1b      	ldr	r3, [r3, #32]
 800a456:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a1b      	ldr	r3, [r3, #32]
 800a462:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	69db      	ldr	r3, [r3, #28]
 800a46e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f023 0303 	bic.w	r3, r3, #3
 800a47e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	68fa      	ldr	r2, [r7, #12]
 800a486:	4313      	orrs	r3, r2
 800a488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a490:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	689b      	ldr	r3, [r3, #8]
 800a496:	021b      	lsls	r3, r3, #8
 800a498:	697a      	ldr	r2, [r7, #20]
 800a49a:	4313      	orrs	r3, r2
 800a49c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	4a1d      	ldr	r2, [pc, #116]	; (800a518 <TIM_OC3_SetConfig+0xd0>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d10d      	bne.n	800a4c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a4ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	021b      	lsls	r3, r3, #8
 800a4b4:	697a      	ldr	r2, [r7, #20]
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a4c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	4a14      	ldr	r2, [pc, #80]	; (800a518 <TIM_OC3_SetConfig+0xd0>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d113      	bne.n	800a4f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a4d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	695b      	ldr	r3, [r3, #20]
 800a4de:	011b      	lsls	r3, r3, #4
 800a4e0:	693a      	ldr	r2, [r7, #16]
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	699b      	ldr	r3, [r3, #24]
 800a4ea:	011b      	lsls	r3, r3, #4
 800a4ec:	693a      	ldr	r2, [r7, #16]
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	693a      	ldr	r2, [r7, #16]
 800a4f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	68fa      	ldr	r2, [r7, #12]
 800a4fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	685a      	ldr	r2, [r3, #4]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	697a      	ldr	r2, [r7, #20]
 800a50a:	621a      	str	r2, [r3, #32]
}
 800a50c:	bf00      	nop
 800a50e:	371c      	adds	r7, #28
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr
 800a518:	40010000 	.word	0x40010000

0800a51c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b087      	sub	sp, #28
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a1b      	ldr	r3, [r3, #32]
 800a52a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6a1b      	ldr	r3, [r3, #32]
 800a536:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	69db      	ldr	r3, [r3, #28]
 800a542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a54a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a552:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	021b      	lsls	r3, r3, #8
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	4313      	orrs	r3, r2
 800a55e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a566:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	031b      	lsls	r3, r3, #12
 800a56e:	693a      	ldr	r2, [r7, #16]
 800a570:	4313      	orrs	r3, r2
 800a572:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	4a10      	ldr	r2, [pc, #64]	; (800a5b8 <TIM_OC4_SetConfig+0x9c>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d109      	bne.n	800a590 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a582:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	695b      	ldr	r3, [r3, #20]
 800a588:	019b      	lsls	r3, r3, #6
 800a58a:	697a      	ldr	r2, [r7, #20]
 800a58c:	4313      	orrs	r3, r2
 800a58e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	697a      	ldr	r2, [r7, #20]
 800a594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	685a      	ldr	r2, [r3, #4]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	693a      	ldr	r2, [r7, #16]
 800a5a8:	621a      	str	r2, [r3, #32]
}
 800a5aa:	bf00      	nop
 800a5ac:	371c      	adds	r7, #28
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr
 800a5b6:	bf00      	nop
 800a5b8:	40010000 	.word	0x40010000

0800a5bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b087      	sub	sp, #28
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	60b9      	str	r1, [r7, #8]
 800a5c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	6a1b      	ldr	r3, [r3, #32]
 800a5cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	6a1b      	ldr	r3, [r3, #32]
 800a5d2:	f023 0201 	bic.w	r2, r3, #1
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	699b      	ldr	r3, [r3, #24]
 800a5de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a5e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	011b      	lsls	r3, r3, #4
 800a5ec:	693a      	ldr	r2, [r7, #16]
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	f023 030a 	bic.w	r3, r3, #10
 800a5f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a5fa:	697a      	ldr	r2, [r7, #20]
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	4313      	orrs	r3, r2
 800a600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	693a      	ldr	r2, [r7, #16]
 800a606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	697a      	ldr	r2, [r7, #20]
 800a60c:	621a      	str	r2, [r3, #32]
}
 800a60e:	bf00      	nop
 800a610:	371c      	adds	r7, #28
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr

0800a61a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a61a:	b480      	push	{r7}
 800a61c:	b087      	sub	sp, #28
 800a61e:	af00      	add	r7, sp, #0
 800a620:	60f8      	str	r0, [r7, #12]
 800a622:	60b9      	str	r1, [r7, #8]
 800a624:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	6a1b      	ldr	r3, [r3, #32]
 800a62a:	f023 0210 	bic.w	r2, r3, #16
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	699b      	ldr	r3, [r3, #24]
 800a636:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	6a1b      	ldr	r3, [r3, #32]
 800a63c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a644:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	031b      	lsls	r3, r3, #12
 800a64a:	697a      	ldr	r2, [r7, #20]
 800a64c:	4313      	orrs	r3, r2
 800a64e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a656:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	011b      	lsls	r3, r3, #4
 800a65c:	693a      	ldr	r2, [r7, #16]
 800a65e:	4313      	orrs	r3, r2
 800a660:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	697a      	ldr	r2, [r7, #20]
 800a666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	693a      	ldr	r2, [r7, #16]
 800a66c:	621a      	str	r2, [r3, #32]
}
 800a66e:	bf00      	nop
 800a670:	371c      	adds	r7, #28
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr

0800a67a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a67a:	b480      	push	{r7}
 800a67c:	b085      	sub	sp, #20
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
 800a682:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a690:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a692:	683a      	ldr	r2, [r7, #0]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	4313      	orrs	r3, r2
 800a698:	f043 0307 	orr.w	r3, r3, #7
 800a69c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	68fa      	ldr	r2, [r7, #12]
 800a6a2:	609a      	str	r2, [r3, #8]
}
 800a6a4:	bf00      	nop
 800a6a6:	3714      	adds	r7, #20
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b087      	sub	sp, #28
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	607a      	str	r2, [r7, #4]
 800a6bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a6ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	021a      	lsls	r2, r3, #8
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	431a      	orrs	r2, r3
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	697a      	ldr	r2, [r7, #20]
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	697a      	ldr	r2, [r7, #20]
 800a6e2:	609a      	str	r2, [r3, #8]
}
 800a6e4:	bf00      	nop
 800a6e6:	371c      	adds	r7, #28
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b087      	sub	sp, #28
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	f003 031f 	and.w	r3, r3, #31
 800a702:	2201      	movs	r2, #1
 800a704:	fa02 f303 	lsl.w	r3, r2, r3
 800a708:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	6a1a      	ldr	r2, [r3, #32]
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	43db      	mvns	r3, r3
 800a712:	401a      	ands	r2, r3
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	6a1a      	ldr	r2, [r3, #32]
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	f003 031f 	and.w	r3, r3, #31
 800a722:	6879      	ldr	r1, [r7, #4]
 800a724:	fa01 f303 	lsl.w	r3, r1, r3
 800a728:	431a      	orrs	r2, r3
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	621a      	str	r2, [r3, #32]
}
 800a72e:	bf00      	nop
 800a730:	371c      	adds	r7, #28
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr
	...

0800a73c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b085      	sub	sp, #20
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d101      	bne.n	800a754 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a750:	2302      	movs	r3, #2
 800a752:	e050      	b.n	800a7f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2202      	movs	r2, #2
 800a760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a77a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	68fa      	ldr	r2, [r7, #12]
 800a782:	4313      	orrs	r3, r2
 800a784:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	68fa      	ldr	r2, [r7, #12]
 800a78c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4a1c      	ldr	r2, [pc, #112]	; (800a804 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d018      	beq.n	800a7ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7a0:	d013      	beq.n	800a7ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4a18      	ldr	r2, [pc, #96]	; (800a808 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d00e      	beq.n	800a7ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a16      	ldr	r2, [pc, #88]	; (800a80c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d009      	beq.n	800a7ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a15      	ldr	r2, [pc, #84]	; (800a810 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d004      	beq.n	800a7ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a13      	ldr	r2, [pc, #76]	; (800a814 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d10c      	bne.n	800a7e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	68ba      	ldr	r2, [r7, #8]
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	68ba      	ldr	r2, [r7, #8]
 800a7e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3714      	adds	r7, #20
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr
 800a802:	bf00      	nop
 800a804:	40010000 	.word	0x40010000
 800a808:	40000400 	.word	0x40000400
 800a80c:	40000800 	.word	0x40000800
 800a810:	40000c00 	.word	0x40000c00
 800a814:	40014000 	.word	0x40014000

0800a818 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a820:	bf00      	nop
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b083      	sub	sp, #12
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a834:	bf00      	nop
 800a836:	370c      	adds	r7, #12
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr

0800a840 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d101      	bne.n	800a852 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800a84e:	2301      	movs	r3, #1
 800a850:	e047      	b.n	800a8e2 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a858:	b2db      	uxtb	r3, r3
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d106      	bne.n	800a86c <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2200      	movs	r2, #0
 800a862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f7fa fcca 	bl	8005200 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2224      	movs	r2, #36	; 0x24
 800a870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	68da      	ldr	r2, [r3, #12]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a882:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 f931 	bl	800aaec <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	691a      	ldr	r2, [r3, #16]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a898:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	695a      	ldr	r2, [r3, #20]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800a8a8:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	695a      	ldr	r2, [r3, #20]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f042 0208 	orr.w	r2, r2, #8
 800a8b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	68da      	ldr	r2, [r3, #12]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a8c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2220      	movs	r2, #32
 800a8d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2220      	movs	r2, #32
 800a8dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a8e0:	2300      	movs	r3, #0
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3708      	adds	r7, #8
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}

0800a8ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a8ea:	b580      	push	{r7, lr}
 800a8ec:	b08a      	sub	sp, #40	; 0x28
 800a8ee:	af02      	add	r7, sp, #8
 800a8f0:	60f8      	str	r0, [r7, #12]
 800a8f2:	60b9      	str	r1, [r7, #8]
 800a8f4:	603b      	str	r3, [r7, #0]
 800a8f6:	4613      	mov	r3, r2
 800a8f8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a904:	b2db      	uxtb	r3, r3
 800a906:	2b20      	cmp	r3, #32
 800a908:	d17c      	bne.n	800aa04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d002      	beq.n	800a916 <HAL_UART_Transmit+0x2c>
 800a910:	88fb      	ldrh	r3, [r7, #6]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d101      	bne.n	800a91a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a916:	2301      	movs	r3, #1
 800a918:	e075      	b.n	800aa06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a920:	2b01      	cmp	r3, #1
 800a922:	d101      	bne.n	800a928 <HAL_UART_Transmit+0x3e>
 800a924:	2302      	movs	r3, #2
 800a926:	e06e      	b.n	800aa06 <HAL_UART_Transmit+0x11c>
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2201      	movs	r2, #1
 800a92c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2200      	movs	r2, #0
 800a934:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2221      	movs	r2, #33	; 0x21
 800a93a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a93e:	f7fa fdc1 	bl	80054c4 <HAL_GetTick>
 800a942:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	88fa      	ldrh	r2, [r7, #6]
 800a948:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	88fa      	ldrh	r2, [r7, #6]
 800a94e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a958:	d108      	bne.n	800a96c <HAL_UART_Transmit+0x82>
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	691b      	ldr	r3, [r3, #16]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d104      	bne.n	800a96c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a962:	2300      	movs	r3, #0
 800a964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	61bb      	str	r3, [r7, #24]
 800a96a:	e003      	b.n	800a974 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a970:	2300      	movs	r3, #0
 800a972:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2200      	movs	r2, #0
 800a978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a97c:	e02a      	b.n	800a9d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	9300      	str	r3, [sp, #0]
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	2200      	movs	r2, #0
 800a986:	2180      	movs	r1, #128	; 0x80
 800a988:	68f8      	ldr	r0, [r7, #12]
 800a98a:	f000 f840 	bl	800aa0e <UART_WaitOnFlagUntilTimeout>
 800a98e:	4603      	mov	r3, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d001      	beq.n	800a998 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a994:	2303      	movs	r3, #3
 800a996:	e036      	b.n	800aa06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a998:	69fb      	ldr	r3, [r7, #28]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d10b      	bne.n	800a9b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a99e:	69bb      	ldr	r3, [r7, #24]
 800a9a0:	881b      	ldrh	r3, [r3, #0]
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a9ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a9ae:	69bb      	ldr	r3, [r7, #24]
 800a9b0:	3302      	adds	r3, #2
 800a9b2:	61bb      	str	r3, [r7, #24]
 800a9b4:	e007      	b.n	800a9c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a9b6:	69fb      	ldr	r3, [r7, #28]
 800a9b8:	781a      	ldrb	r2, [r3, #0]
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a9c0:	69fb      	ldr	r3, [r7, #28]
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	3b01      	subs	r3, #1
 800a9ce:	b29a      	uxth	r2, r3
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d1cf      	bne.n	800a97e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	9300      	str	r3, [sp, #0]
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	2140      	movs	r1, #64	; 0x40
 800a9e8:	68f8      	ldr	r0, [r7, #12]
 800a9ea:	f000 f810 	bl	800aa0e <UART_WaitOnFlagUntilTimeout>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d001      	beq.n	800a9f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a9f4:	2303      	movs	r3, #3
 800a9f6:	e006      	b.n	800aa06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2220      	movs	r2, #32
 800a9fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800aa00:	2300      	movs	r3, #0
 800aa02:	e000      	b.n	800aa06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800aa04:	2302      	movs	r3, #2
  }
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3720      	adds	r7, #32
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}

0800aa0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800aa0e:	b580      	push	{r7, lr}
 800aa10:	b090      	sub	sp, #64	; 0x40
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	60f8      	str	r0, [r7, #12]
 800aa16:	60b9      	str	r1, [r7, #8]
 800aa18:	603b      	str	r3, [r7, #0]
 800aa1a:	4613      	mov	r3, r2
 800aa1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa1e:	e050      	b.n	800aac2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa26:	d04c      	beq.n	800aac2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800aa28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d007      	beq.n	800aa3e <UART_WaitOnFlagUntilTimeout+0x30>
 800aa2e:	f7fa fd49 	bl	80054c4 <HAL_GetTick>
 800aa32:	4602      	mov	r2, r0
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	1ad3      	subs	r3, r2, r3
 800aa38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d241      	bcs.n	800aac2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	330c      	adds	r3, #12
 800aa44:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa48:	e853 3f00 	ldrex	r3, [r3]
 800aa4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aa54:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	330c      	adds	r3, #12
 800aa5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aa5e:	637a      	str	r2, [r7, #52]	; 0x34
 800aa60:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa66:	e841 2300 	strex	r3, r2, [r1]
 800aa6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aa6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d1e5      	bne.n	800aa3e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	3314      	adds	r3, #20
 800aa78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	e853 3f00 	ldrex	r3, [r3]
 800aa80:	613b      	str	r3, [r7, #16]
   return(result);
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	f023 0301 	bic.w	r3, r3, #1
 800aa88:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	3314      	adds	r3, #20
 800aa90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa92:	623a      	str	r2, [r7, #32]
 800aa94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa96:	69f9      	ldr	r1, [r7, #28]
 800aa98:	6a3a      	ldr	r2, [r7, #32]
 800aa9a:	e841 2300 	strex	r3, r2, [r1]
 800aa9e:	61bb      	str	r3, [r7, #24]
   return(result);
 800aaa0:	69bb      	ldr	r3, [r7, #24]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d1e5      	bne.n	800aa72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2220      	movs	r2, #32
 800aaaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2220      	movs	r2, #32
 800aab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2200      	movs	r2, #0
 800aaba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800aabe:	2303      	movs	r3, #3
 800aac0:	e00f      	b.n	800aae2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	4013      	ands	r3, r2
 800aacc:	68ba      	ldr	r2, [r7, #8]
 800aace:	429a      	cmp	r2, r3
 800aad0:	bf0c      	ite	eq
 800aad2:	2301      	moveq	r3, #1
 800aad4:	2300      	movne	r3, #0
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	461a      	mov	r2, r3
 800aada:	79fb      	ldrb	r3, [r7, #7]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d09f      	beq.n	800aa20 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aae0:	2300      	movs	r3, #0
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3740      	adds	r7, #64	; 0x40
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
	...

0800aaec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aaec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aaf0:	b0c0      	sub	sp, #256	; 0x100
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aaf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	691b      	ldr	r3, [r3, #16]
 800ab00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ab04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab08:	68d9      	ldr	r1, [r3, #12]
 800ab0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	ea40 0301 	orr.w	r3, r0, r1
 800ab14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ab16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab1a:	689a      	ldr	r2, [r3, #8]
 800ab1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab20:	691b      	ldr	r3, [r3, #16]
 800ab22:	431a      	orrs	r2, r3
 800ab24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab28:	695b      	ldr	r3, [r3, #20]
 800ab2a:	431a      	orrs	r2, r3
 800ab2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab30:	69db      	ldr	r3, [r3, #28]
 800ab32:	4313      	orrs	r3, r2
 800ab34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ab38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ab44:	f021 010c 	bic.w	r1, r1, #12
 800ab48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab4c:	681a      	ldr	r2, [r3, #0]
 800ab4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ab52:	430b      	orrs	r3, r1
 800ab54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ab56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	695b      	ldr	r3, [r3, #20]
 800ab5e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ab62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab66:	6999      	ldr	r1, [r3, #24]
 800ab68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab6c:	681a      	ldr	r2, [r3, #0]
 800ab6e:	ea40 0301 	orr.w	r3, r0, r1
 800ab72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ab74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	4b8f      	ldr	r3, [pc, #572]	; (800adb8 <UART_SetConfig+0x2cc>)
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d005      	beq.n	800ab8c <UART_SetConfig+0xa0>
 800ab80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	4b8d      	ldr	r3, [pc, #564]	; (800adbc <UART_SetConfig+0x2d0>)
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d104      	bne.n	800ab96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ab8c:	f7fd ffd8 	bl	8008b40 <HAL_RCC_GetPCLK2Freq>
 800ab90:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ab94:	e003      	b.n	800ab9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ab96:	f7fd ffbf 	bl	8008b18 <HAL_RCC_GetPCLK1Freq>
 800ab9a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aba2:	69db      	ldr	r3, [r3, #28]
 800aba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aba8:	f040 810c 	bne.w	800adc4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800abac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800abb0:	2200      	movs	r2, #0
 800abb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800abb6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800abba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800abbe:	4622      	mov	r2, r4
 800abc0:	462b      	mov	r3, r5
 800abc2:	1891      	adds	r1, r2, r2
 800abc4:	65b9      	str	r1, [r7, #88]	; 0x58
 800abc6:	415b      	adcs	r3, r3
 800abc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800abca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800abce:	4621      	mov	r1, r4
 800abd0:	eb12 0801 	adds.w	r8, r2, r1
 800abd4:	4629      	mov	r1, r5
 800abd6:	eb43 0901 	adc.w	r9, r3, r1
 800abda:	f04f 0200 	mov.w	r2, #0
 800abde:	f04f 0300 	mov.w	r3, #0
 800abe2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800abe6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800abea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800abee:	4690      	mov	r8, r2
 800abf0:	4699      	mov	r9, r3
 800abf2:	4623      	mov	r3, r4
 800abf4:	eb18 0303 	adds.w	r3, r8, r3
 800abf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800abfc:	462b      	mov	r3, r5
 800abfe:	eb49 0303 	adc.w	r3, r9, r3
 800ac02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ac06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ac12:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ac16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ac1a:	460b      	mov	r3, r1
 800ac1c:	18db      	adds	r3, r3, r3
 800ac1e:	653b      	str	r3, [r7, #80]	; 0x50
 800ac20:	4613      	mov	r3, r2
 800ac22:	eb42 0303 	adc.w	r3, r2, r3
 800ac26:	657b      	str	r3, [r7, #84]	; 0x54
 800ac28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ac2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ac30:	f7f5 fe10 	bl	8000854 <__aeabi_uldivmod>
 800ac34:	4602      	mov	r2, r0
 800ac36:	460b      	mov	r3, r1
 800ac38:	4b61      	ldr	r3, [pc, #388]	; (800adc0 <UART_SetConfig+0x2d4>)
 800ac3a:	fba3 2302 	umull	r2, r3, r3, r2
 800ac3e:	095b      	lsrs	r3, r3, #5
 800ac40:	011c      	lsls	r4, r3, #4
 800ac42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac46:	2200      	movs	r2, #0
 800ac48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ac4c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ac50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ac54:	4642      	mov	r2, r8
 800ac56:	464b      	mov	r3, r9
 800ac58:	1891      	adds	r1, r2, r2
 800ac5a:	64b9      	str	r1, [r7, #72]	; 0x48
 800ac5c:	415b      	adcs	r3, r3
 800ac5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ac64:	4641      	mov	r1, r8
 800ac66:	eb12 0a01 	adds.w	sl, r2, r1
 800ac6a:	4649      	mov	r1, r9
 800ac6c:	eb43 0b01 	adc.w	fp, r3, r1
 800ac70:	f04f 0200 	mov.w	r2, #0
 800ac74:	f04f 0300 	mov.w	r3, #0
 800ac78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ac7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ac80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ac84:	4692      	mov	sl, r2
 800ac86:	469b      	mov	fp, r3
 800ac88:	4643      	mov	r3, r8
 800ac8a:	eb1a 0303 	adds.w	r3, sl, r3
 800ac8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ac92:	464b      	mov	r3, r9
 800ac94:	eb4b 0303 	adc.w	r3, fp, r3
 800ac98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ac9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	2200      	movs	r2, #0
 800aca4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aca8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800acac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800acb0:	460b      	mov	r3, r1
 800acb2:	18db      	adds	r3, r3, r3
 800acb4:	643b      	str	r3, [r7, #64]	; 0x40
 800acb6:	4613      	mov	r3, r2
 800acb8:	eb42 0303 	adc.w	r3, r2, r3
 800acbc:	647b      	str	r3, [r7, #68]	; 0x44
 800acbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800acc2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800acc6:	f7f5 fdc5 	bl	8000854 <__aeabi_uldivmod>
 800acca:	4602      	mov	r2, r0
 800accc:	460b      	mov	r3, r1
 800acce:	4611      	mov	r1, r2
 800acd0:	4b3b      	ldr	r3, [pc, #236]	; (800adc0 <UART_SetConfig+0x2d4>)
 800acd2:	fba3 2301 	umull	r2, r3, r3, r1
 800acd6:	095b      	lsrs	r3, r3, #5
 800acd8:	2264      	movs	r2, #100	; 0x64
 800acda:	fb02 f303 	mul.w	r3, r2, r3
 800acde:	1acb      	subs	r3, r1, r3
 800ace0:	00db      	lsls	r3, r3, #3
 800ace2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ace6:	4b36      	ldr	r3, [pc, #216]	; (800adc0 <UART_SetConfig+0x2d4>)
 800ace8:	fba3 2302 	umull	r2, r3, r3, r2
 800acec:	095b      	lsrs	r3, r3, #5
 800acee:	005b      	lsls	r3, r3, #1
 800acf0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800acf4:	441c      	add	r4, r3
 800acf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800acfa:	2200      	movs	r2, #0
 800acfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ad00:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ad04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ad08:	4642      	mov	r2, r8
 800ad0a:	464b      	mov	r3, r9
 800ad0c:	1891      	adds	r1, r2, r2
 800ad0e:	63b9      	str	r1, [r7, #56]	; 0x38
 800ad10:	415b      	adcs	r3, r3
 800ad12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ad18:	4641      	mov	r1, r8
 800ad1a:	1851      	adds	r1, r2, r1
 800ad1c:	6339      	str	r1, [r7, #48]	; 0x30
 800ad1e:	4649      	mov	r1, r9
 800ad20:	414b      	adcs	r3, r1
 800ad22:	637b      	str	r3, [r7, #52]	; 0x34
 800ad24:	f04f 0200 	mov.w	r2, #0
 800ad28:	f04f 0300 	mov.w	r3, #0
 800ad2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ad30:	4659      	mov	r1, fp
 800ad32:	00cb      	lsls	r3, r1, #3
 800ad34:	4651      	mov	r1, sl
 800ad36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ad3a:	4651      	mov	r1, sl
 800ad3c:	00ca      	lsls	r2, r1, #3
 800ad3e:	4610      	mov	r0, r2
 800ad40:	4619      	mov	r1, r3
 800ad42:	4603      	mov	r3, r0
 800ad44:	4642      	mov	r2, r8
 800ad46:	189b      	adds	r3, r3, r2
 800ad48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ad4c:	464b      	mov	r3, r9
 800ad4e:	460a      	mov	r2, r1
 800ad50:	eb42 0303 	adc.w	r3, r2, r3
 800ad54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ad58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad5c:	685b      	ldr	r3, [r3, #4]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ad64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ad68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	18db      	adds	r3, r3, r3
 800ad70:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad72:	4613      	mov	r3, r2
 800ad74:	eb42 0303 	adc.w	r3, r2, r3
 800ad78:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ad7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ad82:	f7f5 fd67 	bl	8000854 <__aeabi_uldivmod>
 800ad86:	4602      	mov	r2, r0
 800ad88:	460b      	mov	r3, r1
 800ad8a:	4b0d      	ldr	r3, [pc, #52]	; (800adc0 <UART_SetConfig+0x2d4>)
 800ad8c:	fba3 1302 	umull	r1, r3, r3, r2
 800ad90:	095b      	lsrs	r3, r3, #5
 800ad92:	2164      	movs	r1, #100	; 0x64
 800ad94:	fb01 f303 	mul.w	r3, r1, r3
 800ad98:	1ad3      	subs	r3, r2, r3
 800ad9a:	00db      	lsls	r3, r3, #3
 800ad9c:	3332      	adds	r3, #50	; 0x32
 800ad9e:	4a08      	ldr	r2, [pc, #32]	; (800adc0 <UART_SetConfig+0x2d4>)
 800ada0:	fba2 2303 	umull	r2, r3, r2, r3
 800ada4:	095b      	lsrs	r3, r3, #5
 800ada6:	f003 0207 	and.w	r2, r3, #7
 800adaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4422      	add	r2, r4
 800adb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800adb4:	e105      	b.n	800afc2 <UART_SetConfig+0x4d6>
 800adb6:	bf00      	nop
 800adb8:	40011000 	.word	0x40011000
 800adbc:	40011400 	.word	0x40011400
 800adc0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800adc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800adc8:	2200      	movs	r2, #0
 800adca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800adce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800add2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800add6:	4642      	mov	r2, r8
 800add8:	464b      	mov	r3, r9
 800adda:	1891      	adds	r1, r2, r2
 800addc:	6239      	str	r1, [r7, #32]
 800adde:	415b      	adcs	r3, r3
 800ade0:	627b      	str	r3, [r7, #36]	; 0x24
 800ade2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ade6:	4641      	mov	r1, r8
 800ade8:	1854      	adds	r4, r2, r1
 800adea:	4649      	mov	r1, r9
 800adec:	eb43 0501 	adc.w	r5, r3, r1
 800adf0:	f04f 0200 	mov.w	r2, #0
 800adf4:	f04f 0300 	mov.w	r3, #0
 800adf8:	00eb      	lsls	r3, r5, #3
 800adfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800adfe:	00e2      	lsls	r2, r4, #3
 800ae00:	4614      	mov	r4, r2
 800ae02:	461d      	mov	r5, r3
 800ae04:	4643      	mov	r3, r8
 800ae06:	18e3      	adds	r3, r4, r3
 800ae08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ae0c:	464b      	mov	r3, r9
 800ae0e:	eb45 0303 	adc.w	r3, r5, r3
 800ae12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ae16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ae22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ae26:	f04f 0200 	mov.w	r2, #0
 800ae2a:	f04f 0300 	mov.w	r3, #0
 800ae2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ae32:	4629      	mov	r1, r5
 800ae34:	008b      	lsls	r3, r1, #2
 800ae36:	4621      	mov	r1, r4
 800ae38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ae3c:	4621      	mov	r1, r4
 800ae3e:	008a      	lsls	r2, r1, #2
 800ae40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ae44:	f7f5 fd06 	bl	8000854 <__aeabi_uldivmod>
 800ae48:	4602      	mov	r2, r0
 800ae4a:	460b      	mov	r3, r1
 800ae4c:	4b60      	ldr	r3, [pc, #384]	; (800afd0 <UART_SetConfig+0x4e4>)
 800ae4e:	fba3 2302 	umull	r2, r3, r3, r2
 800ae52:	095b      	lsrs	r3, r3, #5
 800ae54:	011c      	lsls	r4, r3, #4
 800ae56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ae60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ae64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ae68:	4642      	mov	r2, r8
 800ae6a:	464b      	mov	r3, r9
 800ae6c:	1891      	adds	r1, r2, r2
 800ae6e:	61b9      	str	r1, [r7, #24]
 800ae70:	415b      	adcs	r3, r3
 800ae72:	61fb      	str	r3, [r7, #28]
 800ae74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ae78:	4641      	mov	r1, r8
 800ae7a:	1851      	adds	r1, r2, r1
 800ae7c:	6139      	str	r1, [r7, #16]
 800ae7e:	4649      	mov	r1, r9
 800ae80:	414b      	adcs	r3, r1
 800ae82:	617b      	str	r3, [r7, #20]
 800ae84:	f04f 0200 	mov.w	r2, #0
 800ae88:	f04f 0300 	mov.w	r3, #0
 800ae8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ae90:	4659      	mov	r1, fp
 800ae92:	00cb      	lsls	r3, r1, #3
 800ae94:	4651      	mov	r1, sl
 800ae96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ae9a:	4651      	mov	r1, sl
 800ae9c:	00ca      	lsls	r2, r1, #3
 800ae9e:	4610      	mov	r0, r2
 800aea0:	4619      	mov	r1, r3
 800aea2:	4603      	mov	r3, r0
 800aea4:	4642      	mov	r2, r8
 800aea6:	189b      	adds	r3, r3, r2
 800aea8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aeac:	464b      	mov	r3, r9
 800aeae:	460a      	mov	r2, r1
 800aeb0:	eb42 0303 	adc.w	r3, r2, r3
 800aeb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800aeb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	67bb      	str	r3, [r7, #120]	; 0x78
 800aec2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800aec4:	f04f 0200 	mov.w	r2, #0
 800aec8:	f04f 0300 	mov.w	r3, #0
 800aecc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800aed0:	4649      	mov	r1, r9
 800aed2:	008b      	lsls	r3, r1, #2
 800aed4:	4641      	mov	r1, r8
 800aed6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aeda:	4641      	mov	r1, r8
 800aedc:	008a      	lsls	r2, r1, #2
 800aede:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800aee2:	f7f5 fcb7 	bl	8000854 <__aeabi_uldivmod>
 800aee6:	4602      	mov	r2, r0
 800aee8:	460b      	mov	r3, r1
 800aeea:	4b39      	ldr	r3, [pc, #228]	; (800afd0 <UART_SetConfig+0x4e4>)
 800aeec:	fba3 1302 	umull	r1, r3, r3, r2
 800aef0:	095b      	lsrs	r3, r3, #5
 800aef2:	2164      	movs	r1, #100	; 0x64
 800aef4:	fb01 f303 	mul.w	r3, r1, r3
 800aef8:	1ad3      	subs	r3, r2, r3
 800aefa:	011b      	lsls	r3, r3, #4
 800aefc:	3332      	adds	r3, #50	; 0x32
 800aefe:	4a34      	ldr	r2, [pc, #208]	; (800afd0 <UART_SetConfig+0x4e4>)
 800af00:	fba2 2303 	umull	r2, r3, r2, r3
 800af04:	095b      	lsrs	r3, r3, #5
 800af06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af0a:	441c      	add	r4, r3
 800af0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af10:	2200      	movs	r2, #0
 800af12:	673b      	str	r3, [r7, #112]	; 0x70
 800af14:	677a      	str	r2, [r7, #116]	; 0x74
 800af16:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800af1a:	4642      	mov	r2, r8
 800af1c:	464b      	mov	r3, r9
 800af1e:	1891      	adds	r1, r2, r2
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	415b      	adcs	r3, r3
 800af24:	60fb      	str	r3, [r7, #12]
 800af26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800af2a:	4641      	mov	r1, r8
 800af2c:	1851      	adds	r1, r2, r1
 800af2e:	6039      	str	r1, [r7, #0]
 800af30:	4649      	mov	r1, r9
 800af32:	414b      	adcs	r3, r1
 800af34:	607b      	str	r3, [r7, #4]
 800af36:	f04f 0200 	mov.w	r2, #0
 800af3a:	f04f 0300 	mov.w	r3, #0
 800af3e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800af42:	4659      	mov	r1, fp
 800af44:	00cb      	lsls	r3, r1, #3
 800af46:	4651      	mov	r1, sl
 800af48:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800af4c:	4651      	mov	r1, sl
 800af4e:	00ca      	lsls	r2, r1, #3
 800af50:	4610      	mov	r0, r2
 800af52:	4619      	mov	r1, r3
 800af54:	4603      	mov	r3, r0
 800af56:	4642      	mov	r2, r8
 800af58:	189b      	adds	r3, r3, r2
 800af5a:	66bb      	str	r3, [r7, #104]	; 0x68
 800af5c:	464b      	mov	r3, r9
 800af5e:	460a      	mov	r2, r1
 800af60:	eb42 0303 	adc.w	r3, r2, r3
 800af64:	66fb      	str	r3, [r7, #108]	; 0x6c
 800af66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	2200      	movs	r2, #0
 800af6e:	663b      	str	r3, [r7, #96]	; 0x60
 800af70:	667a      	str	r2, [r7, #100]	; 0x64
 800af72:	f04f 0200 	mov.w	r2, #0
 800af76:	f04f 0300 	mov.w	r3, #0
 800af7a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800af7e:	4649      	mov	r1, r9
 800af80:	008b      	lsls	r3, r1, #2
 800af82:	4641      	mov	r1, r8
 800af84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800af88:	4641      	mov	r1, r8
 800af8a:	008a      	lsls	r2, r1, #2
 800af8c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800af90:	f7f5 fc60 	bl	8000854 <__aeabi_uldivmod>
 800af94:	4602      	mov	r2, r0
 800af96:	460b      	mov	r3, r1
 800af98:	4b0d      	ldr	r3, [pc, #52]	; (800afd0 <UART_SetConfig+0x4e4>)
 800af9a:	fba3 1302 	umull	r1, r3, r3, r2
 800af9e:	095b      	lsrs	r3, r3, #5
 800afa0:	2164      	movs	r1, #100	; 0x64
 800afa2:	fb01 f303 	mul.w	r3, r1, r3
 800afa6:	1ad3      	subs	r3, r2, r3
 800afa8:	011b      	lsls	r3, r3, #4
 800afaa:	3332      	adds	r3, #50	; 0x32
 800afac:	4a08      	ldr	r2, [pc, #32]	; (800afd0 <UART_SetConfig+0x4e4>)
 800afae:	fba2 2303 	umull	r2, r3, r2, r3
 800afb2:	095b      	lsrs	r3, r3, #5
 800afb4:	f003 020f 	and.w	r2, r3, #15
 800afb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	4422      	add	r2, r4
 800afc0:	609a      	str	r2, [r3, #8]
}
 800afc2:	bf00      	nop
 800afc4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800afc8:	46bd      	mov	sp, r7
 800afca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800afce:	bf00      	nop
 800afd0:	51eb851f 	.word	0x51eb851f

0800afd4 <arm_sin_f32>:
 800afd4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800b050 <arm_sin_f32+0x7c>
 800afd8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800afdc:	ee20 7a07 	vmul.f32	s14, s0, s14
 800afe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afe4:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800afe8:	d42c      	bmi.n	800b044 <arm_sin_f32+0x70>
 800afea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afee:	eddf 6a19 	vldr	s13, [pc, #100]	; 800b054 <arm_sin_f32+0x80>
 800aff2:	4a19      	ldr	r2, [pc, #100]	; (800b058 <arm_sin_f32+0x84>)
 800aff4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aff8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800affc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b000:	eef4 7ae6 	vcmpe.f32	s15, s13
 800b004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b008:	bfa8      	it	ge
 800b00a:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 800b00e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800b012:	ee17 3a10 	vmov	r3, s14
 800b016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b01a:	ee07 3a10 	vmov	s14, r3
 800b01e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800b022:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800b026:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b02a:	edd1 6a01 	vldr	s13, [r1, #4]
 800b02e:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b032:	ed91 0a00 	vldr	s0, [r1]
 800b036:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b03a:	ee27 0a00 	vmul.f32	s0, s14, s0
 800b03e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b042:	4770      	bx	lr
 800b044:	ee17 3a90 	vmov	r3, s15
 800b048:	3b01      	subs	r3, #1
 800b04a:	ee07 3a90 	vmov	s15, r3
 800b04e:	e7cc      	b.n	800afea <arm_sin_f32+0x16>
 800b050:	3e22f983 	.word	0x3e22f983
 800b054:	44000000 	.word	0x44000000
 800b058:	0800c5dc 	.word	0x0800c5dc

0800b05c <atoi>:
 800b05c:	220a      	movs	r2, #10
 800b05e:	2100      	movs	r1, #0
 800b060:	f000 b8d6 	b.w	800b210 <strtol>

0800b064 <__errno>:
 800b064:	4b01      	ldr	r3, [pc, #4]	; (800b06c <__errno+0x8>)
 800b066:	6818      	ldr	r0, [r3, #0]
 800b068:	4770      	bx	lr
 800b06a:	bf00      	nop
 800b06c:	200003d0 	.word	0x200003d0

0800b070 <__libc_init_array>:
 800b070:	b570      	push	{r4, r5, r6, lr}
 800b072:	4d0d      	ldr	r5, [pc, #52]	; (800b0a8 <__libc_init_array+0x38>)
 800b074:	4c0d      	ldr	r4, [pc, #52]	; (800b0ac <__libc_init_array+0x3c>)
 800b076:	1b64      	subs	r4, r4, r5
 800b078:	10a4      	asrs	r4, r4, #2
 800b07a:	2600      	movs	r6, #0
 800b07c:	42a6      	cmp	r6, r4
 800b07e:	d109      	bne.n	800b094 <__libc_init_array+0x24>
 800b080:	4d0b      	ldr	r5, [pc, #44]	; (800b0b0 <__libc_init_array+0x40>)
 800b082:	4c0c      	ldr	r4, [pc, #48]	; (800b0b4 <__libc_init_array+0x44>)
 800b084:	f000 f8ce 	bl	800b224 <_init>
 800b088:	1b64      	subs	r4, r4, r5
 800b08a:	10a4      	asrs	r4, r4, #2
 800b08c:	2600      	movs	r6, #0
 800b08e:	42a6      	cmp	r6, r4
 800b090:	d105      	bne.n	800b09e <__libc_init_array+0x2e>
 800b092:	bd70      	pop	{r4, r5, r6, pc}
 800b094:	f855 3b04 	ldr.w	r3, [r5], #4
 800b098:	4798      	blx	r3
 800b09a:	3601      	adds	r6, #1
 800b09c:	e7ee      	b.n	800b07c <__libc_init_array+0xc>
 800b09e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0a2:	4798      	blx	r3
 800b0a4:	3601      	adds	r6, #1
 800b0a6:	e7f2      	b.n	800b08e <__libc_init_array+0x1e>
 800b0a8:	0800ceec 	.word	0x0800ceec
 800b0ac:	0800ceec 	.word	0x0800ceec
 800b0b0:	0800ceec 	.word	0x0800ceec
 800b0b4:	0800cef0 	.word	0x0800cef0

0800b0b8 <memcpy>:
 800b0b8:	440a      	add	r2, r1
 800b0ba:	4291      	cmp	r1, r2
 800b0bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b0c0:	d100      	bne.n	800b0c4 <memcpy+0xc>
 800b0c2:	4770      	bx	lr
 800b0c4:	b510      	push	{r4, lr}
 800b0c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0ce:	4291      	cmp	r1, r2
 800b0d0:	d1f9      	bne.n	800b0c6 <memcpy+0xe>
 800b0d2:	bd10      	pop	{r4, pc}

0800b0d4 <memset>:
 800b0d4:	4402      	add	r2, r0
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d100      	bne.n	800b0de <memset+0xa>
 800b0dc:	4770      	bx	lr
 800b0de:	f803 1b01 	strb.w	r1, [r3], #1
 800b0e2:	e7f9      	b.n	800b0d8 <memset+0x4>

0800b0e4 <strncmp>:
 800b0e4:	b510      	push	{r4, lr}
 800b0e6:	b17a      	cbz	r2, 800b108 <strncmp+0x24>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	3901      	subs	r1, #1
 800b0ec:	1884      	adds	r4, r0, r2
 800b0ee:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b0f2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b0f6:	4290      	cmp	r0, r2
 800b0f8:	d101      	bne.n	800b0fe <strncmp+0x1a>
 800b0fa:	42a3      	cmp	r3, r4
 800b0fc:	d101      	bne.n	800b102 <strncmp+0x1e>
 800b0fe:	1a80      	subs	r0, r0, r2
 800b100:	bd10      	pop	{r4, pc}
 800b102:	2800      	cmp	r0, #0
 800b104:	d1f3      	bne.n	800b0ee <strncmp+0xa>
 800b106:	e7fa      	b.n	800b0fe <strncmp+0x1a>
 800b108:	4610      	mov	r0, r2
 800b10a:	e7f9      	b.n	800b100 <strncmp+0x1c>

0800b10c <_strtol_l.constprop.0>:
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b112:	d001      	beq.n	800b118 <_strtol_l.constprop.0+0xc>
 800b114:	2b24      	cmp	r3, #36	; 0x24
 800b116:	d906      	bls.n	800b126 <_strtol_l.constprop.0+0x1a>
 800b118:	f7ff ffa4 	bl	800b064 <__errno>
 800b11c:	2316      	movs	r3, #22
 800b11e:	6003      	str	r3, [r0, #0]
 800b120:	2000      	movs	r0, #0
 800b122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b126:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b20c <_strtol_l.constprop.0+0x100>
 800b12a:	460d      	mov	r5, r1
 800b12c:	462e      	mov	r6, r5
 800b12e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b132:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b136:	f017 0708 	ands.w	r7, r7, #8
 800b13a:	d1f7      	bne.n	800b12c <_strtol_l.constprop.0+0x20>
 800b13c:	2c2d      	cmp	r4, #45	; 0x2d
 800b13e:	d132      	bne.n	800b1a6 <_strtol_l.constprop.0+0x9a>
 800b140:	782c      	ldrb	r4, [r5, #0]
 800b142:	2701      	movs	r7, #1
 800b144:	1cb5      	adds	r5, r6, #2
 800b146:	2b00      	cmp	r3, #0
 800b148:	d05b      	beq.n	800b202 <_strtol_l.constprop.0+0xf6>
 800b14a:	2b10      	cmp	r3, #16
 800b14c:	d109      	bne.n	800b162 <_strtol_l.constprop.0+0x56>
 800b14e:	2c30      	cmp	r4, #48	; 0x30
 800b150:	d107      	bne.n	800b162 <_strtol_l.constprop.0+0x56>
 800b152:	782c      	ldrb	r4, [r5, #0]
 800b154:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b158:	2c58      	cmp	r4, #88	; 0x58
 800b15a:	d14d      	bne.n	800b1f8 <_strtol_l.constprop.0+0xec>
 800b15c:	786c      	ldrb	r4, [r5, #1]
 800b15e:	2310      	movs	r3, #16
 800b160:	3502      	adds	r5, #2
 800b162:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b166:	f108 38ff 	add.w	r8, r8, #4294967295
 800b16a:	f04f 0c00 	mov.w	ip, #0
 800b16e:	fbb8 f9f3 	udiv	r9, r8, r3
 800b172:	4666      	mov	r6, ip
 800b174:	fb03 8a19 	mls	sl, r3, r9, r8
 800b178:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b17c:	f1be 0f09 	cmp.w	lr, #9
 800b180:	d816      	bhi.n	800b1b0 <_strtol_l.constprop.0+0xa4>
 800b182:	4674      	mov	r4, lr
 800b184:	42a3      	cmp	r3, r4
 800b186:	dd24      	ble.n	800b1d2 <_strtol_l.constprop.0+0xc6>
 800b188:	f1bc 0f00 	cmp.w	ip, #0
 800b18c:	db1e      	blt.n	800b1cc <_strtol_l.constprop.0+0xc0>
 800b18e:	45b1      	cmp	r9, r6
 800b190:	d31c      	bcc.n	800b1cc <_strtol_l.constprop.0+0xc0>
 800b192:	d101      	bne.n	800b198 <_strtol_l.constprop.0+0x8c>
 800b194:	45a2      	cmp	sl, r4
 800b196:	db19      	blt.n	800b1cc <_strtol_l.constprop.0+0xc0>
 800b198:	fb06 4603 	mla	r6, r6, r3, r4
 800b19c:	f04f 0c01 	mov.w	ip, #1
 800b1a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b1a4:	e7e8      	b.n	800b178 <_strtol_l.constprop.0+0x6c>
 800b1a6:	2c2b      	cmp	r4, #43	; 0x2b
 800b1a8:	bf04      	itt	eq
 800b1aa:	782c      	ldrbeq	r4, [r5, #0]
 800b1ac:	1cb5      	addeq	r5, r6, #2
 800b1ae:	e7ca      	b.n	800b146 <_strtol_l.constprop.0+0x3a>
 800b1b0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b1b4:	f1be 0f19 	cmp.w	lr, #25
 800b1b8:	d801      	bhi.n	800b1be <_strtol_l.constprop.0+0xb2>
 800b1ba:	3c37      	subs	r4, #55	; 0x37
 800b1bc:	e7e2      	b.n	800b184 <_strtol_l.constprop.0+0x78>
 800b1be:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b1c2:	f1be 0f19 	cmp.w	lr, #25
 800b1c6:	d804      	bhi.n	800b1d2 <_strtol_l.constprop.0+0xc6>
 800b1c8:	3c57      	subs	r4, #87	; 0x57
 800b1ca:	e7db      	b.n	800b184 <_strtol_l.constprop.0+0x78>
 800b1cc:	f04f 3cff 	mov.w	ip, #4294967295
 800b1d0:	e7e6      	b.n	800b1a0 <_strtol_l.constprop.0+0x94>
 800b1d2:	f1bc 0f00 	cmp.w	ip, #0
 800b1d6:	da05      	bge.n	800b1e4 <_strtol_l.constprop.0+0xd8>
 800b1d8:	2322      	movs	r3, #34	; 0x22
 800b1da:	6003      	str	r3, [r0, #0]
 800b1dc:	4646      	mov	r6, r8
 800b1de:	b942      	cbnz	r2, 800b1f2 <_strtol_l.constprop.0+0xe6>
 800b1e0:	4630      	mov	r0, r6
 800b1e2:	e79e      	b.n	800b122 <_strtol_l.constprop.0+0x16>
 800b1e4:	b107      	cbz	r7, 800b1e8 <_strtol_l.constprop.0+0xdc>
 800b1e6:	4276      	negs	r6, r6
 800b1e8:	2a00      	cmp	r2, #0
 800b1ea:	d0f9      	beq.n	800b1e0 <_strtol_l.constprop.0+0xd4>
 800b1ec:	f1bc 0f00 	cmp.w	ip, #0
 800b1f0:	d000      	beq.n	800b1f4 <_strtol_l.constprop.0+0xe8>
 800b1f2:	1e69      	subs	r1, r5, #1
 800b1f4:	6011      	str	r1, [r2, #0]
 800b1f6:	e7f3      	b.n	800b1e0 <_strtol_l.constprop.0+0xd4>
 800b1f8:	2430      	movs	r4, #48	; 0x30
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d1b1      	bne.n	800b162 <_strtol_l.constprop.0+0x56>
 800b1fe:	2308      	movs	r3, #8
 800b200:	e7af      	b.n	800b162 <_strtol_l.constprop.0+0x56>
 800b202:	2c30      	cmp	r4, #48	; 0x30
 800b204:	d0a5      	beq.n	800b152 <_strtol_l.constprop.0+0x46>
 800b206:	230a      	movs	r3, #10
 800b208:	e7ab      	b.n	800b162 <_strtol_l.constprop.0+0x56>
 800b20a:	bf00      	nop
 800b20c:	0800cde1 	.word	0x0800cde1

0800b210 <strtol>:
 800b210:	4613      	mov	r3, r2
 800b212:	460a      	mov	r2, r1
 800b214:	4601      	mov	r1, r0
 800b216:	4802      	ldr	r0, [pc, #8]	; (800b220 <strtol+0x10>)
 800b218:	6800      	ldr	r0, [r0, #0]
 800b21a:	f7ff bf77 	b.w	800b10c <_strtol_l.constprop.0>
 800b21e:	bf00      	nop
 800b220:	200003d0 	.word	0x200003d0

0800b224 <_init>:
 800b224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b226:	bf00      	nop
 800b228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b22a:	bc08      	pop	{r3}
 800b22c:	469e      	mov	lr, r3
 800b22e:	4770      	bx	lr

0800b230 <_fini>:
 800b230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b232:	bf00      	nop
 800b234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b236:	bc08      	pop	{r3}
 800b238:	469e      	mov	lr, r3
 800b23a:	4770      	bx	lr
