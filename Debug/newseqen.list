
newseqen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4cc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000186c  0800b664  0800b664  0001b664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ced0  0800ced0  00020404  2**0
                  CONTENTS
  4 .ARM          00000008  0800ced0  0800ced0  0001ced0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ced8  0800ced8  00020404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ced8  0800ced8  0001ced8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cedc  0800cedc  0001cedc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000404  20000000  0800cee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000fec0  20000404  0800d2e4  00020404  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200102c4  0800d2e4  000302c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020404  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017676  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027f2  00000000  00000000  00037aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  0003a2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c0  00000000  00000000  0003b648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d99  00000000  00000000  0003c908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000185e3  00000000  00000000  000556a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a157e  00000000  00000000  0006dc84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  0010f202  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056a8  00000000  00000000  0010f2c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000d8  00000000  00000000  0011496c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000404 	.word	0x20000404
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800b64c 	.word	0x0800b64c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000408 	.word	0x20000408
 80001d4:	0800b64c 	.word	0x0800b64c

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_dmul>:
 80001e8:	b570      	push	{r4, r5, r6, lr}
 80001ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001f6:	bf1d      	ittte	ne
 80001f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001fc:	ea94 0f0c 	teqne	r4, ip
 8000200:	ea95 0f0c 	teqne	r5, ip
 8000204:	f000 f8de 	bleq	80003c4 <__aeabi_dmul+0x1dc>
 8000208:	442c      	add	r4, r5
 800020a:	ea81 0603 	eor.w	r6, r1, r3
 800020e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000212:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000216:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021a:	bf18      	it	ne
 800021c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000228:	d038      	beq.n	800029c <__aeabi_dmul+0xb4>
 800022a:	fba0 ce02 	umull	ip, lr, r0, r2
 800022e:	f04f 0500 	mov.w	r5, #0
 8000232:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000236:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800023a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800023e:	f04f 0600 	mov.w	r6, #0
 8000242:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000246:	f09c 0f00 	teq	ip, #0
 800024a:	bf18      	it	ne
 800024c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000250:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000254:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000258:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800025c:	d204      	bcs.n	8000268 <__aeabi_dmul+0x80>
 800025e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000262:	416d      	adcs	r5, r5
 8000264:	eb46 0606 	adc.w	r6, r6, r6
 8000268:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800026c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000270:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000274:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000278:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800027c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000280:	bf88      	it	hi
 8000282:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000286:	d81e      	bhi.n	80002c6 <__aeabi_dmul+0xde>
 8000288:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a0:	ea46 0101 	orr.w	r1, r6, r1
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	ea81 0103 	eor.w	r1, r1, r3
 80002ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b0:	bfc2      	ittt	gt
 80002b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	popgt	{r4, r5, r6, pc}
 80002bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c0:	f04f 0e00 	mov.w	lr, #0
 80002c4:	3c01      	subs	r4, #1
 80002c6:	f300 80ab 	bgt.w	8000420 <__aeabi_dmul+0x238>
 80002ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ce:	bfde      	ittt	le
 80002d0:	2000      	movle	r0, #0
 80002d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002d6:	bd70      	pople	{r4, r5, r6, pc}
 80002d8:	f1c4 0400 	rsb	r4, r4, #0
 80002dc:	3c20      	subs	r4, #32
 80002de:	da35      	bge.n	800034c <__aeabi_dmul+0x164>
 80002e0:	340c      	adds	r4, #12
 80002e2:	dc1b      	bgt.n	800031c <__aeabi_dmul+0x134>
 80002e4:	f104 0414 	add.w	r4, r4, #20
 80002e8:	f1c4 0520 	rsb	r5, r4, #32
 80002ec:	fa00 f305 	lsl.w	r3, r0, r5
 80002f0:	fa20 f004 	lsr.w	r0, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea40 0002 	orr.w	r0, r0, r2
 80002fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000300:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000304:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000308:	fa21 f604 	lsr.w	r6, r1, r4
 800030c:	eb42 0106 	adc.w	r1, r2, r6
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f1c4 040c 	rsb	r4, r4, #12
 8000320:	f1c4 0520 	rsb	r5, r4, #32
 8000324:	fa00 f304 	lsl.w	r3, r0, r4
 8000328:	fa20 f005 	lsr.w	r0, r0, r5
 800032c:	fa01 f204 	lsl.w	r2, r1, r4
 8000330:	ea40 0002 	orr.w	r0, r0, r2
 8000334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000338:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 0520 	rsb	r5, r4, #32
 8000350:	fa00 f205 	lsl.w	r2, r0, r5
 8000354:	ea4e 0e02 	orr.w	lr, lr, r2
 8000358:	fa20 f304 	lsr.w	r3, r0, r4
 800035c:	fa01 f205 	lsl.w	r2, r1, r5
 8000360:	ea43 0302 	orr.w	r3, r3, r2
 8000364:	fa21 f004 	lsr.w	r0, r1, r4
 8000368:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800036c:	fa21 f204 	lsr.w	r2, r1, r4
 8000370:	ea20 0002 	bic.w	r0, r0, r2
 8000374:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800037c:	bf08      	it	eq
 800037e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f094 0f00 	teq	r4, #0
 8000388:	d10f      	bne.n	80003aa <__aeabi_dmul+0x1c2>
 800038a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800038e:	0040      	lsls	r0, r0, #1
 8000390:	eb41 0101 	adc.w	r1, r1, r1
 8000394:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3c01      	subeq	r4, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1a6>
 800039e:	ea41 0106 	orr.w	r1, r1, r6
 80003a2:	f095 0f00 	teq	r5, #0
 80003a6:	bf18      	it	ne
 80003a8:	4770      	bxne	lr
 80003aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ae:	0052      	lsls	r2, r2, #1
 80003b0:	eb43 0303 	adc.w	r3, r3, r3
 80003b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3d01      	subeq	r5, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1c6>
 80003be:	ea43 0306 	orr.w	r3, r3, r6
 80003c2:	4770      	bx	lr
 80003c4:	ea94 0f0c 	teq	r4, ip
 80003c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003cc:	bf18      	it	ne
 80003ce:	ea95 0f0c 	teqne	r5, ip
 80003d2:	d00c      	beq.n	80003ee <__aeabi_dmul+0x206>
 80003d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d8:	bf18      	it	ne
 80003da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003de:	d1d1      	bne.n	8000384 <__aeabi_dmul+0x19c>
 80003e0:	ea81 0103 	eor.w	r1, r1, r3
 80003e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd70      	pop	{r4, r5, r6, pc}
 80003ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f2:	bf06      	itte	eq
 80003f4:	4610      	moveq	r0, r2
 80003f6:	4619      	moveq	r1, r3
 80003f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fc:	d019      	beq.n	8000432 <__aeabi_dmul+0x24a>
 80003fe:	ea94 0f0c 	teq	r4, ip
 8000402:	d102      	bne.n	800040a <__aeabi_dmul+0x222>
 8000404:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000408:	d113      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800040a:	ea95 0f0c 	teq	r5, ip
 800040e:	d105      	bne.n	800041c <__aeabi_dmul+0x234>
 8000410:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000414:	bf1c      	itt	ne
 8000416:	4610      	movne	r0, r2
 8000418:	4619      	movne	r1, r3
 800041a:	d10a      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800041c:	ea81 0103 	eor.w	r1, r1, r3
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd70      	pop	{r4, r5, r6, pc}
 8000432:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000436:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800043a:	bd70      	pop	{r4, r5, r6, pc}

0800043c <__aeabi_drsub>:
 800043c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000440:	e002      	b.n	8000448 <__adddf3>
 8000442:	bf00      	nop

08000444 <__aeabi_dsub>:
 8000444:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000448 <__adddf3>:
 8000448:	b530      	push	{r4, r5, lr}
 800044a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800044e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	bf1f      	itttt	ne
 800045e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000462:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000466:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800046e:	f000 80e2 	beq.w	8000636 <__adddf3+0x1ee>
 8000472:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000476:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047a:	bfb8      	it	lt
 800047c:	426d      	neglt	r5, r5
 800047e:	dd0c      	ble.n	800049a <__adddf3+0x52>
 8000480:	442c      	add	r4, r5
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	ea82 0000 	eor.w	r0, r2, r0
 800048e:	ea83 0101 	eor.w	r1, r3, r1
 8000492:	ea80 0202 	eor.w	r2, r0, r2
 8000496:	ea81 0303 	eor.w	r3, r1, r3
 800049a:	2d36      	cmp	r5, #54	; 0x36
 800049c:	bf88      	it	hi
 800049e:	bd30      	pophi	{r4, r5, pc}
 80004a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x70>
 80004b2:	4240      	negs	r0, r0
 80004b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c4:	d002      	beq.n	80004cc <__adddf3+0x84>
 80004c6:	4252      	negs	r2, r2
 80004c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004cc:	ea94 0f05 	teq	r4, r5
 80004d0:	f000 80a7 	beq.w	8000622 <__adddf3+0x1da>
 80004d4:	f1a4 0401 	sub.w	r4, r4, #1
 80004d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004dc:	db0d      	blt.n	80004fa <__adddf3+0xb2>
 80004de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e2:	fa22 f205 	lsr.w	r2, r2, r5
 80004e6:	1880      	adds	r0, r0, r2
 80004e8:	f141 0100 	adc.w	r1, r1, #0
 80004ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f0:	1880      	adds	r0, r0, r2
 80004f2:	fa43 f305 	asr.w	r3, r3, r5
 80004f6:	4159      	adcs	r1, r3
 80004f8:	e00e      	b.n	8000518 <__adddf3+0xd0>
 80004fa:	f1a5 0520 	sub.w	r5, r5, #32
 80004fe:	f10e 0e20 	add.w	lr, lr, #32
 8000502:	2a01      	cmp	r2, #1
 8000504:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000508:	bf28      	it	cs
 800050a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	d507      	bpl.n	800052e <__adddf3+0xe6>
 800051e:	f04f 0e00 	mov.w	lr, #0
 8000522:	f1dc 0c00 	rsbs	ip, ip, #0
 8000526:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052a:	eb6e 0101 	sbc.w	r1, lr, r1
 800052e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000532:	d31b      	bcc.n	800056c <__adddf3+0x124>
 8000534:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000538:	d30c      	bcc.n	8000554 <__adddf3+0x10c>
 800053a:	0849      	lsrs	r1, r1, #1
 800053c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000540:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000544:	f104 0401 	add.w	r4, r4, #1
 8000548:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800054c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000550:	f080 809a 	bcs.w	8000688 <__adddf3+0x240>
 8000554:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000558:	bf08      	it	eq
 800055a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800055e:	f150 0000 	adcs.w	r0, r0, #0
 8000562:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000566:	ea41 0105 	orr.w	r1, r1, r5
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000570:	4140      	adcs	r0, r0
 8000572:	eb41 0101 	adc.w	r1, r1, r1
 8000576:	3c01      	subs	r4, #1
 8000578:	bf28      	it	cs
 800057a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800057e:	d2e9      	bcs.n	8000554 <__adddf3+0x10c>
 8000580:	f091 0f00 	teq	r1, #0
 8000584:	bf04      	itt	eq
 8000586:	4601      	moveq	r1, r0
 8000588:	2000      	moveq	r0, #0
 800058a:	fab1 f381 	clz	r3, r1
 800058e:	bf08      	it	eq
 8000590:	3320      	addeq	r3, #32
 8000592:	f1a3 030b 	sub.w	r3, r3, #11
 8000596:	f1b3 0220 	subs.w	r2, r3, #32
 800059a:	da0c      	bge.n	80005b6 <__adddf3+0x16e>
 800059c:	320c      	adds	r2, #12
 800059e:	dd08      	ble.n	80005b2 <__adddf3+0x16a>
 80005a0:	f102 0c14 	add.w	ip, r2, #20
 80005a4:	f1c2 020c 	rsb	r2, r2, #12
 80005a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ac:	fa21 f102 	lsr.w	r1, r1, r2
 80005b0:	e00c      	b.n	80005cc <__adddf3+0x184>
 80005b2:	f102 0214 	add.w	r2, r2, #20
 80005b6:	bfd8      	it	le
 80005b8:	f1c2 0c20 	rsble	ip, r2, #32
 80005bc:	fa01 f102 	lsl.w	r1, r1, r2
 80005c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c4:	bfdc      	itt	le
 80005c6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ca:	4090      	lslle	r0, r2
 80005cc:	1ae4      	subs	r4, r4, r3
 80005ce:	bfa2      	ittt	ge
 80005d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d4:	4329      	orrge	r1, r5
 80005d6:	bd30      	popge	{r4, r5, pc}
 80005d8:	ea6f 0404 	mvn.w	r4, r4
 80005dc:	3c1f      	subs	r4, #31
 80005de:	da1c      	bge.n	800061a <__adddf3+0x1d2>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc0e      	bgt.n	8000602 <__adddf3+0x1ba>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0220 	rsb	r2, r4, #32
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f302 	lsl.w	r3, r1, r2
 80005f4:	ea40 0003 	orr.w	r0, r0, r3
 80005f8:	fa21 f304 	lsr.w	r3, r1, r4
 80005fc:	ea45 0103 	orr.w	r1, r5, r3
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f1c4 040c 	rsb	r4, r4, #12
 8000606:	f1c4 0220 	rsb	r2, r4, #32
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 f304 	lsl.w	r3, r1, r4
 8000612:	ea40 0003 	orr.w	r0, r0, r3
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	fa21 f004 	lsr.w	r0, r1, r4
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f094 0f00 	teq	r4, #0
 8000626:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800062a:	bf06      	itte	eq
 800062c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000630:	3401      	addeq	r4, #1
 8000632:	3d01      	subne	r5, #1
 8000634:	e74e      	b.n	80004d4 <__adddf3+0x8c>
 8000636:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063a:	bf18      	it	ne
 800063c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000640:	d029      	beq.n	8000696 <__adddf3+0x24e>
 8000642:	ea94 0f05 	teq	r4, r5
 8000646:	bf08      	it	eq
 8000648:	ea90 0f02 	teqeq	r0, r2
 800064c:	d005      	beq.n	800065a <__adddf3+0x212>
 800064e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000652:	bf04      	itt	eq
 8000654:	4619      	moveq	r1, r3
 8000656:	4610      	moveq	r0, r2
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	ea91 0f03 	teq	r1, r3
 800065e:	bf1e      	ittt	ne
 8000660:	2100      	movne	r1, #0
 8000662:	2000      	movne	r0, #0
 8000664:	bd30      	popne	{r4, r5, pc}
 8000666:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066a:	d105      	bne.n	8000678 <__adddf3+0x230>
 800066c:	0040      	lsls	r0, r0, #1
 800066e:	4149      	adcs	r1, r1
 8000670:	bf28      	it	cs
 8000672:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd30      	pop	{r4, r5, pc}
 8000678:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800067c:	bf3c      	itt	cc
 800067e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000682:	bd30      	popcc	{r4, r5, pc}
 8000684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000688:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800068c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000690:	f04f 0000 	mov.w	r0, #0
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069a:	bf1a      	itte	ne
 800069c:	4619      	movne	r1, r3
 800069e:	4610      	movne	r0, r2
 80006a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a4:	bf1c      	itt	ne
 80006a6:	460b      	movne	r3, r1
 80006a8:	4602      	movne	r2, r0
 80006aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ae:	bf06      	itte	eq
 80006b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b4:	ea91 0f03 	teqeq	r1, r3
 80006b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	bf00      	nop

080006c0 <__aeabi_ui2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f04f 0500 	mov.w	r5, #0
 80006d8:	f04f 0100 	mov.w	r1, #0
 80006dc:	e750      	b.n	8000580 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_i2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f8:	bf48      	it	mi
 80006fa:	4240      	negmi	r0, r0
 80006fc:	f04f 0100 	mov.w	r1, #0
 8000700:	e73e      	b.n	8000580 <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_f2d>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000712:	bf1f      	itttt	ne
 8000714:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000718:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800071c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000720:	4770      	bxne	lr
 8000722:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000726:	bf08      	it	eq
 8000728:	4770      	bxeq	lr
 800072a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800072e:	bf04      	itt	eq
 8000730:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000734:	4770      	bxeq	lr
 8000736:	b530      	push	{r4, r5, lr}
 8000738:	f44f 7460 	mov.w	r4, #896	; 0x380
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	e71c      	b.n	8000580 <__adddf3+0x138>
 8000746:	bf00      	nop

08000748 <__aeabi_ul2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f04f 0500 	mov.w	r5, #0
 8000756:	e00a      	b.n	800076e <__aeabi_l2d+0x16>

08000758 <__aeabi_l2d>:
 8000758:	ea50 0201 	orrs.w	r2, r0, r1
 800075c:	bf08      	it	eq
 800075e:	4770      	bxeq	lr
 8000760:	b530      	push	{r4, r5, lr}
 8000762:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000766:	d502      	bpl.n	800076e <__aeabi_l2d+0x16>
 8000768:	4240      	negs	r0, r0
 800076a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800076e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000772:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000776:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077a:	f43f aed8 	beq.w	800052e <__adddf3+0xe6>
 800077e:	f04f 0203 	mov.w	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000796:	f1c2 0320 	rsb	r3, r2, #32
 800079a:	fa00 fc03 	lsl.w	ip, r0, r3
 800079e:	fa20 f002 	lsr.w	r0, r0, r2
 80007a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007a6:	ea40 000e 	orr.w	r0, r0, lr
 80007aa:	fa21 f102 	lsr.w	r1, r1, r2
 80007ae:	4414      	add	r4, r2
 80007b0:	e6bd      	b.n	800052e <__adddf3+0xe6>
 80007b2:	bf00      	nop

080007b4 <__aeabi_d2f>:
 80007b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007bc:	bf24      	itt	cs
 80007be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007c6:	d90d      	bls.n	80007e4 <__aeabi_d2f+0x30>
 80007c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007dc:	bf08      	it	eq
 80007de:	f020 0001 	biceq.w	r0, r0, #1
 80007e2:	4770      	bx	lr
 80007e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007e8:	d121      	bne.n	800082e <__aeabi_d2f+0x7a>
 80007ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ee:	bfbc      	itt	lt
 80007f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007f4:	4770      	bxlt	lr
 80007f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007fe:	f1c2 0218 	rsb	r2, r2, #24
 8000802:	f1c2 0c20 	rsb	ip, r2, #32
 8000806:	fa10 f30c 	lsls.w	r3, r0, ip
 800080a:	fa20 f002 	lsr.w	r0, r0, r2
 800080e:	bf18      	it	ne
 8000810:	f040 0001 	orrne.w	r0, r0, #1
 8000814:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000818:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800081c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000820:	ea40 000c 	orr.w	r0, r0, ip
 8000824:	fa23 f302 	lsr.w	r3, r3, r2
 8000828:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800082c:	e7cc      	b.n	80007c8 <__aeabi_d2f+0x14>
 800082e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000832:	d107      	bne.n	8000844 <__aeabi_d2f+0x90>
 8000834:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000838:	bf1e      	ittt	ne
 800083a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800083e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000842:	4770      	bxne	lr
 8000844:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000848:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800084c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b974 	b.w	8000b54 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468e      	mov	lr, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	d14d      	bne.n	800092e <__udivmoddi4+0xaa>
 8000892:	428a      	cmp	r2, r1
 8000894:	4694      	mov	ip, r2
 8000896:	d969      	bls.n	800096c <__udivmoddi4+0xe8>
 8000898:	fab2 f282 	clz	r2, r2
 800089c:	b152      	cbz	r2, 80008b4 <__udivmoddi4+0x30>
 800089e:	fa01 f302 	lsl.w	r3, r1, r2
 80008a2:	f1c2 0120 	rsb	r1, r2, #32
 80008a6:	fa20 f101 	lsr.w	r1, r0, r1
 80008aa:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ae:	ea41 0e03 	orr.w	lr, r1, r3
 80008b2:	4094      	lsls	r4, r2
 80008b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008b8:	0c21      	lsrs	r1, r4, #16
 80008ba:	fbbe f6f8 	udiv	r6, lr, r8
 80008be:	fa1f f78c 	uxth.w	r7, ip
 80008c2:	fb08 e316 	mls	r3, r8, r6, lr
 80008c6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008ca:	fb06 f107 	mul.w	r1, r6, r7
 80008ce:	4299      	cmp	r1, r3
 80008d0:	d90a      	bls.n	80008e8 <__udivmoddi4+0x64>
 80008d2:	eb1c 0303 	adds.w	r3, ip, r3
 80008d6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008da:	f080 811f 	bcs.w	8000b1c <__udivmoddi4+0x298>
 80008de:	4299      	cmp	r1, r3
 80008e0:	f240 811c 	bls.w	8000b1c <__udivmoddi4+0x298>
 80008e4:	3e02      	subs	r6, #2
 80008e6:	4463      	add	r3, ip
 80008e8:	1a5b      	subs	r3, r3, r1
 80008ea:	b2a4      	uxth	r4, r4
 80008ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80008f0:	fb08 3310 	mls	r3, r8, r0, r3
 80008f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f8:	fb00 f707 	mul.w	r7, r0, r7
 80008fc:	42a7      	cmp	r7, r4
 80008fe:	d90a      	bls.n	8000916 <__udivmoddi4+0x92>
 8000900:	eb1c 0404 	adds.w	r4, ip, r4
 8000904:	f100 33ff 	add.w	r3, r0, #4294967295
 8000908:	f080 810a 	bcs.w	8000b20 <__udivmoddi4+0x29c>
 800090c:	42a7      	cmp	r7, r4
 800090e:	f240 8107 	bls.w	8000b20 <__udivmoddi4+0x29c>
 8000912:	4464      	add	r4, ip
 8000914:	3802      	subs	r0, #2
 8000916:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800091a:	1be4      	subs	r4, r4, r7
 800091c:	2600      	movs	r6, #0
 800091e:	b11d      	cbz	r5, 8000928 <__udivmoddi4+0xa4>
 8000920:	40d4      	lsrs	r4, r2
 8000922:	2300      	movs	r3, #0
 8000924:	e9c5 4300 	strd	r4, r3, [r5]
 8000928:	4631      	mov	r1, r6
 800092a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092e:	428b      	cmp	r3, r1
 8000930:	d909      	bls.n	8000946 <__udivmoddi4+0xc2>
 8000932:	2d00      	cmp	r5, #0
 8000934:	f000 80ef 	beq.w	8000b16 <__udivmoddi4+0x292>
 8000938:	2600      	movs	r6, #0
 800093a:	e9c5 0100 	strd	r0, r1, [r5]
 800093e:	4630      	mov	r0, r6
 8000940:	4631      	mov	r1, r6
 8000942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000946:	fab3 f683 	clz	r6, r3
 800094a:	2e00      	cmp	r6, #0
 800094c:	d14a      	bne.n	80009e4 <__udivmoddi4+0x160>
 800094e:	428b      	cmp	r3, r1
 8000950:	d302      	bcc.n	8000958 <__udivmoddi4+0xd4>
 8000952:	4282      	cmp	r2, r0
 8000954:	f200 80f9 	bhi.w	8000b4a <__udivmoddi4+0x2c6>
 8000958:	1a84      	subs	r4, r0, r2
 800095a:	eb61 0303 	sbc.w	r3, r1, r3
 800095e:	2001      	movs	r0, #1
 8000960:	469e      	mov	lr, r3
 8000962:	2d00      	cmp	r5, #0
 8000964:	d0e0      	beq.n	8000928 <__udivmoddi4+0xa4>
 8000966:	e9c5 4e00 	strd	r4, lr, [r5]
 800096a:	e7dd      	b.n	8000928 <__udivmoddi4+0xa4>
 800096c:	b902      	cbnz	r2, 8000970 <__udivmoddi4+0xec>
 800096e:	deff      	udf	#255	; 0xff
 8000970:	fab2 f282 	clz	r2, r2
 8000974:	2a00      	cmp	r2, #0
 8000976:	f040 8092 	bne.w	8000a9e <__udivmoddi4+0x21a>
 800097a:	eba1 010c 	sub.w	r1, r1, ip
 800097e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000982:	fa1f fe8c 	uxth.w	lr, ip
 8000986:	2601      	movs	r6, #1
 8000988:	0c20      	lsrs	r0, r4, #16
 800098a:	fbb1 f3f7 	udiv	r3, r1, r7
 800098e:	fb07 1113 	mls	r1, r7, r3, r1
 8000992:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000996:	fb0e f003 	mul.w	r0, lr, r3
 800099a:	4288      	cmp	r0, r1
 800099c:	d908      	bls.n	80009b0 <__udivmoddi4+0x12c>
 800099e:	eb1c 0101 	adds.w	r1, ip, r1
 80009a2:	f103 38ff 	add.w	r8, r3, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0x12a>
 80009a8:	4288      	cmp	r0, r1
 80009aa:	f200 80cb 	bhi.w	8000b44 <__udivmoddi4+0x2c0>
 80009ae:	4643      	mov	r3, r8
 80009b0:	1a09      	subs	r1, r1, r0
 80009b2:	b2a4      	uxth	r4, r4
 80009b4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009b8:	fb07 1110 	mls	r1, r7, r0, r1
 80009bc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009c0:	fb0e fe00 	mul.w	lr, lr, r0
 80009c4:	45a6      	cmp	lr, r4
 80009c6:	d908      	bls.n	80009da <__udivmoddi4+0x156>
 80009c8:	eb1c 0404 	adds.w	r4, ip, r4
 80009cc:	f100 31ff 	add.w	r1, r0, #4294967295
 80009d0:	d202      	bcs.n	80009d8 <__udivmoddi4+0x154>
 80009d2:	45a6      	cmp	lr, r4
 80009d4:	f200 80bb 	bhi.w	8000b4e <__udivmoddi4+0x2ca>
 80009d8:	4608      	mov	r0, r1
 80009da:	eba4 040e 	sub.w	r4, r4, lr
 80009de:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009e2:	e79c      	b.n	800091e <__udivmoddi4+0x9a>
 80009e4:	f1c6 0720 	rsb	r7, r6, #32
 80009e8:	40b3      	lsls	r3, r6
 80009ea:	fa22 fc07 	lsr.w	ip, r2, r7
 80009ee:	ea4c 0c03 	orr.w	ip, ip, r3
 80009f2:	fa20 f407 	lsr.w	r4, r0, r7
 80009f6:	fa01 f306 	lsl.w	r3, r1, r6
 80009fa:	431c      	orrs	r4, r3
 80009fc:	40f9      	lsrs	r1, r7
 80009fe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a02:	fa00 f306 	lsl.w	r3, r0, r6
 8000a06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a0a:	0c20      	lsrs	r0, r4, #16
 8000a0c:	fa1f fe8c 	uxth.w	lr, ip
 8000a10:	fb09 1118 	mls	r1, r9, r8, r1
 8000a14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a18:	fb08 f00e 	mul.w	r0, r8, lr
 8000a1c:	4288      	cmp	r0, r1
 8000a1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a22:	d90b      	bls.n	8000a3c <__udivmoddi4+0x1b8>
 8000a24:	eb1c 0101 	adds.w	r1, ip, r1
 8000a28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a2c:	f080 8088 	bcs.w	8000b40 <__udivmoddi4+0x2bc>
 8000a30:	4288      	cmp	r0, r1
 8000a32:	f240 8085 	bls.w	8000b40 <__udivmoddi4+0x2bc>
 8000a36:	f1a8 0802 	sub.w	r8, r8, #2
 8000a3a:	4461      	add	r1, ip
 8000a3c:	1a09      	subs	r1, r1, r0
 8000a3e:	b2a4      	uxth	r4, r4
 8000a40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a44:	fb09 1110 	mls	r1, r9, r0, r1
 8000a48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a50:	458e      	cmp	lr, r1
 8000a52:	d908      	bls.n	8000a66 <__udivmoddi4+0x1e2>
 8000a54:	eb1c 0101 	adds.w	r1, ip, r1
 8000a58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a5c:	d26c      	bcs.n	8000b38 <__udivmoddi4+0x2b4>
 8000a5e:	458e      	cmp	lr, r1
 8000a60:	d96a      	bls.n	8000b38 <__udivmoddi4+0x2b4>
 8000a62:	3802      	subs	r0, #2
 8000a64:	4461      	add	r1, ip
 8000a66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a6e:	eba1 010e 	sub.w	r1, r1, lr
 8000a72:	42a1      	cmp	r1, r4
 8000a74:	46c8      	mov	r8, r9
 8000a76:	46a6      	mov	lr, r4
 8000a78:	d356      	bcc.n	8000b28 <__udivmoddi4+0x2a4>
 8000a7a:	d053      	beq.n	8000b24 <__udivmoddi4+0x2a0>
 8000a7c:	b15d      	cbz	r5, 8000a96 <__udivmoddi4+0x212>
 8000a7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a82:	eb61 010e 	sbc.w	r1, r1, lr
 8000a86:	fa01 f707 	lsl.w	r7, r1, r7
 8000a8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a8e:	40f1      	lsrs	r1, r6
 8000a90:	431f      	orrs	r7, r3
 8000a92:	e9c5 7100 	strd	r7, r1, [r5]
 8000a96:	2600      	movs	r6, #0
 8000a98:	4631      	mov	r1, r6
 8000a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9e:	f1c2 0320 	rsb	r3, r2, #32
 8000aa2:	40d8      	lsrs	r0, r3
 8000aa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000aac:	4091      	lsls	r1, r2
 8000aae:	4301      	orrs	r1, r0
 8000ab0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab4:	fa1f fe8c 	uxth.w	lr, ip
 8000ab8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000abc:	fb07 3610 	mls	r6, r7, r0, r3
 8000ac0:	0c0b      	lsrs	r3, r1, #16
 8000ac2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ac6:	fb00 f60e 	mul.w	r6, r0, lr
 8000aca:	429e      	cmp	r6, r3
 8000acc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ad0:	d908      	bls.n	8000ae4 <__udivmoddi4+0x260>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ada:	d22f      	bcs.n	8000b3c <__udivmoddi4+0x2b8>
 8000adc:	429e      	cmp	r6, r3
 8000ade:	d92d      	bls.n	8000b3c <__udivmoddi4+0x2b8>
 8000ae0:	3802      	subs	r0, #2
 8000ae2:	4463      	add	r3, ip
 8000ae4:	1b9b      	subs	r3, r3, r6
 8000ae6:	b289      	uxth	r1, r1
 8000ae8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000aec:	fb07 3316 	mls	r3, r7, r6, r3
 8000af0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000af4:	fb06 f30e 	mul.w	r3, r6, lr
 8000af8:	428b      	cmp	r3, r1
 8000afa:	d908      	bls.n	8000b0e <__udivmoddi4+0x28a>
 8000afc:	eb1c 0101 	adds.w	r1, ip, r1
 8000b00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b04:	d216      	bcs.n	8000b34 <__udivmoddi4+0x2b0>
 8000b06:	428b      	cmp	r3, r1
 8000b08:	d914      	bls.n	8000b34 <__udivmoddi4+0x2b0>
 8000b0a:	3e02      	subs	r6, #2
 8000b0c:	4461      	add	r1, ip
 8000b0e:	1ac9      	subs	r1, r1, r3
 8000b10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b14:	e738      	b.n	8000988 <__udivmoddi4+0x104>
 8000b16:	462e      	mov	r6, r5
 8000b18:	4628      	mov	r0, r5
 8000b1a:	e705      	b.n	8000928 <__udivmoddi4+0xa4>
 8000b1c:	4606      	mov	r6, r0
 8000b1e:	e6e3      	b.n	80008e8 <__udivmoddi4+0x64>
 8000b20:	4618      	mov	r0, r3
 8000b22:	e6f8      	b.n	8000916 <__udivmoddi4+0x92>
 8000b24:	454b      	cmp	r3, r9
 8000b26:	d2a9      	bcs.n	8000a7c <__udivmoddi4+0x1f8>
 8000b28:	ebb9 0802 	subs.w	r8, r9, r2
 8000b2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b30:	3801      	subs	r0, #1
 8000b32:	e7a3      	b.n	8000a7c <__udivmoddi4+0x1f8>
 8000b34:	4646      	mov	r6, r8
 8000b36:	e7ea      	b.n	8000b0e <__udivmoddi4+0x28a>
 8000b38:	4620      	mov	r0, r4
 8000b3a:	e794      	b.n	8000a66 <__udivmoddi4+0x1e2>
 8000b3c:	4640      	mov	r0, r8
 8000b3e:	e7d1      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b40:	46d0      	mov	r8, sl
 8000b42:	e77b      	b.n	8000a3c <__udivmoddi4+0x1b8>
 8000b44:	3b02      	subs	r3, #2
 8000b46:	4461      	add	r1, ip
 8000b48:	e732      	b.n	80009b0 <__udivmoddi4+0x12c>
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	e709      	b.n	8000962 <__udivmoddi4+0xde>
 8000b4e:	4464      	add	r4, ip
 8000b50:	3802      	subs	r0, #2
 8000b52:	e742      	b.n	80009da <__udivmoddi4+0x156>

08000b54 <__aeabi_idiv0>:
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <menu_vars>:
uint8_t*  menu_vars(char* menu_string,  uint8_t var_index   ){ // in comes name and index , out goes variable reference pointer
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	70fb      	strb	r3, [r7, #3]


	char menu_string2[8];
	var_index=var_index&15;    //set var index ie  LFO[1].rate
 8000b64:	78fb      	ldrb	r3, [r7, #3]
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	70fb      	strb	r3, [r7, #3]
	uint8_t menu_countr=0; //  menu vars
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	75fb      	strb	r3, [r7, #23]
	uint8_t *menu_vars_var1=NULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	613b      	str	r3, [r7, #16]

	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000b74:	4bb8      	ldr	r3, [pc, #736]	; (8000e58 <menu_vars+0x300>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	801a      	strh	r2, [r3, #0]
 8000b7a:	e01d      	b.n	8000bb8 <menu_vars+0x60>

		memcpy(menu_string2, menu_titles_final[i], 8);  // copy title list
 8000b7c:	4bb6      	ldr	r3, [pc, #728]	; (8000e58 <menu_vars+0x300>)
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4bb6      	ldr	r3, [pc, #728]	; (8000e5c <menu_vars+0x304>)
 8000b84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b88:	f107 0308 	add.w	r3, r7, #8
 8000b8c:	6810      	ldr	r0, [r2, #0]
 8000b8e:	6851      	ldr	r1, [r2, #4]
 8000b90:	c303      	stmia	r3!, {r0, r1}
		if ((strncmp(menu_string, menu_string2, 8)) == 0) {
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	2208      	movs	r2, #8
 8000b98:	4619      	mov	r1, r3
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f00a fcb6 	bl	800b50c <strncmp>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d102      	bne.n	8000bac <menu_vars+0x54>
			menu_countr = i;
 8000ba6:	4bac      	ldr	r3, [pc, #688]	; (8000e58 <menu_vars+0x300>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000bac:	4baa      	ldr	r3, [pc, #680]	; (8000e58 <menu_vars+0x300>)
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	4ba8      	ldr	r3, [pc, #672]	; (8000e58 <menu_vars+0x300>)
 8000bb6:	801a      	strh	r2, [r3, #0]
 8000bb8:	4ba7      	ldr	r3, [pc, #668]	; (8000e58 <menu_vars+0x300>)
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	2b30      	cmp	r3, #48	; 0x30
 8000bbe:	d9dd      	bls.n	8000b7c <menu_vars+0x24>

		}
	}
	menu_vars_ref=menu_countr ;
 8000bc0:	4aa7      	ldr	r2, [pc, #668]	; (8000e60 <menu_vars+0x308>)
 8000bc2:	7dfb      	ldrb	r3, [r7, #23]
 8000bc4:	7013      	strb	r3, [r2, #0]
	if (var_index>menu_vars_index_limit[menu_countr]) var_index=menu_vars_index_limit[menu_countr];   // make sure it stays right
 8000bc6:	7dfb      	ldrb	r3, [r7, #23]
 8000bc8:	4aa6      	ldr	r2, [pc, #664]	; (8000e64 <menu_vars+0x30c>)
 8000bca:	5cd3      	ldrb	r3, [r2, r3]
 8000bcc:	78fa      	ldrb	r2, [r7, #3]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d903      	bls.n	8000bda <menu_vars+0x82>
 8000bd2:	7dfb      	ldrb	r3, [r7, #23]
 8000bd4:	4aa3      	ldr	r2, [pc, #652]	; (8000e64 <menu_vars+0x30c>)
 8000bd6:	5cd3      	ldrb	r3, [r2, r3]
 8000bd8:	70fb      	strb	r3, [r7, #3]

	switch(menu_countr){
 8000bda:	7dfb      	ldrb	r3, [r7, #23]
 8000bdc:	2b2f      	cmp	r3, #47	; 0x2f
 8000bde:	f200 81ea 	bhi.w	8000fb6 <menu_vars+0x45e>
 8000be2:	a201      	add	r2, pc, #4	; (adr r2, 8000be8 <menu_vars+0x90>)
 8000be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be8:	08000ca9 	.word	0x08000ca9
 8000bec:	08000caf 	.word	0x08000caf
 8000bf0:	08000cc1 	.word	0x08000cc1
 8000bf4:	08000cd5 	.word	0x08000cd5
 8000bf8:	08000ce9 	.word	0x08000ce9
 8000bfc:	08000cfd 	.word	0x08000cfd
 8000c00:	08000d11 	.word	0x08000d11
 8000c04:	08000d17 	.word	0x08000d17
 8000c08:	08000d29 	.word	0x08000d29
 8000c0c:	08000d3d 	.word	0x08000d3d
 8000c10:	08000d51 	.word	0x08000d51
 8000c14:	08000d65 	.word	0x08000d65
 8000c18:	08000d6b 	.word	0x08000d6b
 8000c1c:	08000d7d 	.word	0x08000d7d
 8000c20:	08000d91 	.word	0x08000d91
 8000c24:	08000da5 	.word	0x08000da5
 8000c28:	08000db9 	.word	0x08000db9
 8000c2c:	08000dcd 	.word	0x08000dcd
 8000c30:	08000de1 	.word	0x08000de1
 8000c34:	08000df5 	.word	0x08000df5
 8000c38:	08000e09 	.word	0x08000e09
 8000c3c:	08000e1d 	.word	0x08000e1d
 8000c40:	08000e23 	.word	0x08000e23
 8000c44:	08000e29 	.word	0x08000e29
 8000c48:	08000e2f 	.word	0x08000e2f
 8000c4c:	08000e3b 	.word	0x08000e3b
 8000c50:	08000e49 	.word	0x08000e49
 8000c54:	08000e81 	.word	0x08000e81
 8000c58:	08000e8d 	.word	0x08000e8d
 8000c5c:	08000e9b 	.word	0x08000e9b
 8000c60:	08000ea9 	.word	0x08000ea9
 8000c64:	08000eb7 	.word	0x08000eb7
 8000c68:	08000ec5 	.word	0x08000ec5
 8000c6c:	08000ed3 	.word	0x08000ed3
 8000c70:	08000ee1 	.word	0x08000ee1
 8000c74:	08000eef 	.word	0x08000eef
 8000c78:	08000f03 	.word	0x08000f03
 8000c7c:	08000f15 	.word	0x08000f15
 8000c80:	08000f29 	.word	0x08000f29
 8000c84:	08000f3d 	.word	0x08000f3d
 8000c88:	08000f51 	.word	0x08000f51
 8000c8c:	08000f63 	.word	0x08000f63
 8000c90:	08000f77 	.word	0x08000f77
 8000c94:	08000f8b 	.word	0x08000f8b
 8000c98:	08000f9f 	.word	0x08000f9f
 8000c9c:	08000fa5 	.word	0x08000fa5
 8000ca0:	08000fab 	.word	0x08000fab
 8000ca4:	08000fb1 	.word	0x08000fb1
	case 0:     menu_vars_var1= NULL; break;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	e186      	b.n	8000fbc <menu_vars+0x464>
	case 1:     menu_vars_var1= &LFO[var_index].rate   ; break;
 8000cae:	78fa      	ldrb	r2, [r7, #3]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	011b      	lsls	r3, r3, #4
 8000cb4:	4413      	add	r3, r2
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	4a6b      	ldr	r2, [pc, #428]	; (8000e68 <menu_vars+0x310>)
 8000cba:	4413      	add	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	e17d      	b.n	8000fbc <menu_vars+0x464>
	case 2:     menu_vars_var1= &LFO[var_index].depth    ; break;
 8000cc0:	78fa      	ldrb	r2, [r7, #3]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	011b      	lsls	r3, r3, #4
 8000cc6:	4413      	add	r3, r2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	4a67      	ldr	r2, [pc, #412]	; (8000e68 <menu_vars+0x310>)
 8000ccc:	4413      	add	r3, r2
 8000cce:	3301      	adds	r3, #1
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	e173      	b.n	8000fbc <menu_vars+0x464>
	case 3:     menu_vars_var1= &LFO[var_index].delay    ; break;
 8000cd4:	78fa      	ldrb	r2, [r7, #3]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	011b      	lsls	r3, r3, #4
 8000cda:	4413      	add	r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	4a62      	ldr	r2, [pc, #392]	; (8000e68 <menu_vars+0x310>)
 8000ce0:	4413      	add	r3, r2
 8000ce2:	3304      	adds	r3, #4
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	e169      	b.n	8000fbc <menu_vars+0x464>
	case 4:     menu_vars_var1= &LFO[var_index].offset    ; break;
 8000ce8:	78fa      	ldrb	r2, [r7, #3]
 8000cea:	4613      	mov	r3, r2
 8000cec:	011b      	lsls	r3, r3, #4
 8000cee:	4413      	add	r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	4a5d      	ldr	r2, [pc, #372]	; (8000e68 <menu_vars+0x310>)
 8000cf4:	4413      	add	r3, r2
 8000cf6:	3303      	adds	r3, #3
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	e15f      	b.n	8000fbc <menu_vars+0x464>
	case 5:     menu_vars_var1= &patch[var_index].target    ; break;
 8000cfc:	78fa      	ldrb	r2, [r7, #3]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	4413      	add	r3, r2
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	4a59      	ldr	r2, [pc, #356]	; (8000e6c <menu_vars+0x314>)
 8000d08:	4413      	add	r3, r2
 8000d0a:	3304      	adds	r3, #4
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	e155      	b.n	8000fbc <menu_vars+0x464>
	case 6:     menu_vars_var1= NULL   ; break;
 8000d10:	2300      	movs	r3, #0
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	e152      	b.n	8000fbc <menu_vars+0x464>
	case 7:     menu_vars_var1= &ADSR[var_index].attack    ; break;
 8000d16:	78fb      	ldrb	r3, [r7, #3]
 8000d18:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d1c:	fb02 f303 	mul.w	r3, r2, r3
 8000d20:	4a53      	ldr	r2, [pc, #332]	; (8000e70 <menu_vars+0x318>)
 8000d22:	4413      	add	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	e149      	b.n	8000fbc <menu_vars+0x464>
	case 8:     menu_vars_var1= &ADSR[var_index].decay    ; break;
 8000d28:	78fb      	ldrb	r3, [r7, #3]
 8000d2a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d2e:	fb02 f303 	mul.w	r3, r2, r3
 8000d32:	4a4f      	ldr	r2, [pc, #316]	; (8000e70 <menu_vars+0x318>)
 8000d34:	4413      	add	r3, r2
 8000d36:	3301      	adds	r3, #1
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	e13f      	b.n	8000fbc <menu_vars+0x464>
	case 9:     menu_vars_var1= &ADSR[var_index].sustain    ; break;
 8000d3c:	78fb      	ldrb	r3, [r7, #3]
 8000d3e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d42:	fb02 f303 	mul.w	r3, r2, r3
 8000d46:	4a4a      	ldr	r2, [pc, #296]	; (8000e70 <menu_vars+0x318>)
 8000d48:	4413      	add	r3, r2
 8000d4a:	3302      	adds	r3, #2
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	e135      	b.n	8000fbc <menu_vars+0x464>
	case 10:     menu_vars_var1= &ADSR[var_index].release    ; break;
 8000d50:	78fb      	ldrb	r3, [r7, #3]
 8000d52:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d56:	fb02 f303 	mul.w	r3, r2, r3
 8000d5a:	4a45      	ldr	r2, [pc, #276]	; (8000e70 <menu_vars+0x318>)
 8000d5c:	4413      	add	r3, r2
 8000d5e:	3303      	adds	r3, #3
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	e12b      	b.n	8000fbc <menu_vars+0x464>
	case 11:     menu_vars_var1= NULL  ; break;
 8000d64:	2300      	movs	r3, #0
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	e128      	b.n	8000fbc <menu_vars+0x464>
	case 12:     menu_vars_var1= &note[var_index].osc    ; break;
 8000d6a:	78fa      	ldrb	r2, [r7, #3]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	1a9b      	subs	r3, r3, r2
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	4a3f      	ldr	r2, [pc, #252]	; (8000e74 <menu_vars+0x31c>)
 8000d76:	4413      	add	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	e11f      	b.n	8000fbc <menu_vars+0x464>
	case 13:     menu_vars_var1= &note[var_index].osc2    ; break;
 8000d7c:	78fa      	ldrb	r2, [r7, #3]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	1a9b      	subs	r3, r3, r2
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	4a3b      	ldr	r2, [pc, #236]	; (8000e74 <menu_vars+0x31c>)
 8000d88:	4413      	add	r3, r2
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	e115      	b.n	8000fbc <menu_vars+0x464>
	case 14:     menu_vars_var1= &note[var_index].pitch    ; break;
 8000d90:	78fa      	ldrb	r2, [r7, #3]
 8000d92:	4613      	mov	r3, r2
 8000d94:	00db      	lsls	r3, r3, #3
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	4a36      	ldr	r2, [pc, #216]	; (8000e74 <menu_vars+0x31c>)
 8000d9c:	4413      	add	r3, r2
 8000d9e:	3302      	adds	r3, #2
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	e10b      	b.n	8000fbc <menu_vars+0x464>
	case 15:     menu_vars_var1= &note[var_index].duration    ; break;
 8000da4:	78fa      	ldrb	r2, [r7, #3]
 8000da6:	4613      	mov	r3, r2
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	1a9b      	subs	r3, r3, r2
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	4a31      	ldr	r2, [pc, #196]	; (8000e74 <menu_vars+0x31c>)
 8000db0:	4413      	add	r3, r2
 8000db2:	3303      	adds	r3, #3
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	e101      	b.n	8000fbc <menu_vars+0x464>
	case 16:     menu_vars_var1= &note[var_index].position    ; break;
 8000db8:	78fa      	ldrb	r2, [r7, #3]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	00db      	lsls	r3, r3, #3
 8000dbe:	1a9b      	subs	r3, r3, r2
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	4a2c      	ldr	r2, [pc, #176]	; (8000e74 <menu_vars+0x31c>)
 8000dc4:	4413      	add	r3, r2
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	e0f7      	b.n	8000fbc <menu_vars+0x464>
	case 17:     menu_vars_var1= &note[var_index].transpose    ; break;
 8000dcc:	78fa      	ldrb	r2, [r7, #3]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	1a9b      	subs	r3, r3, r2
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	4a27      	ldr	r2, [pc, #156]	; (8000e74 <menu_vars+0x31c>)
 8000dd8:	4413      	add	r3, r2
 8000dda:	3305      	adds	r3, #5
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	e0ed      	b.n	8000fbc <menu_vars+0x464>
	case 18:     menu_vars_var1= &note[var_index].timeshift    ; break;
 8000de0:	78fa      	ldrb	r2, [r7, #3]
 8000de2:	4613      	mov	r3, r2
 8000de4:	00db      	lsls	r3, r3, #3
 8000de6:	1a9b      	subs	r3, r3, r2
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	4a22      	ldr	r2, [pc, #136]	; (8000e74 <menu_vars+0x31c>)
 8000dec:	4413      	add	r3, r2
 8000dee:	3306      	adds	r3, #6
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	e0e3      	b.n	8000fbc <menu_vars+0x464>
	case 19:     menu_vars_var1= &note[var_index].velocity   ; break; // 16 bit
 8000df4:	78fa      	ldrb	r2, [r7, #3]
 8000df6:	4613      	mov	r3, r2
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	1a9b      	subs	r3, r3, r2
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	4a1d      	ldr	r2, [pc, #116]	; (8000e74 <menu_vars+0x31c>)
 8000e00:	4413      	add	r3, r2
 8000e02:	3307      	adds	r3, #7
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	e0d9      	b.n	8000fbc <menu_vars+0x464>
	case 20:     menu_vars_var1= &note[var_index].detune    ; break;
 8000e08:	78fa      	ldrb	r2, [r7, #3]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	1a9b      	subs	r3, r3, r2
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	3308      	adds	r3, #8
 8000e14:	4a17      	ldr	r2, [pc, #92]	; (8000e74 <menu_vars+0x31c>)
 8000e16:	4413      	add	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	e0cf      	b.n	8000fbc <menu_vars+0x464>
	case 21:     menu_vars_var1= NULL   ; break;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	e0cc      	b.n	8000fbc <menu_vars+0x464>
	case 22:     menu_vars_var1= &seq.pos    ; break;
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <menu_vars+0x320>)
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	e0c9      	b.n	8000fbc <menu_vars+0x464>
	case 23:     menu_vars_var1= &seq.tempo    ; break;
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <menu_vars+0x324>)
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	e0c6      	b.n	8000fbc <menu_vars+0x464>
	case 24:     menu_vars_var1= &seq.notes1[var_index]   ; break;
 8000e2e:	78fb      	ldrb	r3, [r7, #3]
 8000e30:	4a11      	ldr	r2, [pc, #68]	; (8000e78 <menu_vars+0x320>)
 8000e32:	4413      	add	r3, r2
 8000e34:	3302      	adds	r3, #2
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	e0c0      	b.n	8000fbc <menu_vars+0x464>
	case 25:     menu_vars_var1= &seq.notes2[var_index]   ; break;
 8000e3a:	78fb      	ldrb	r3, [r7, #3]
 8000e3c:	3310      	adds	r3, #16
 8000e3e:	4a0e      	ldr	r2, [pc, #56]	; (8000e78 <menu_vars+0x320>)
 8000e40:	4413      	add	r3, r2
 8000e42:	3303      	adds	r3, #3
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	e0b9      	b.n	8000fbc <menu_vars+0x464>
	case 26:     menu_vars_var1= &seq.loop [var_index]    ; break;
 8000e48:	78fb      	ldrb	r3, [r7, #3]
 8000e4a:	3320      	adds	r3, #32
 8000e4c:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <menu_vars+0x320>)
 8000e4e:	4413      	add	r3, r2
 8000e50:	3304      	adds	r3, #4
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	e0b2      	b.n	8000fbc <menu_vars+0x464>
 8000e56:	bf00      	nop
 8000e58:	20000892 	.word	0x20000892
 8000e5c:	2000022c 	.word	0x2000022c
 8000e60:	200079ad 	.word	0x200079ad
 8000e64:	0800c10c 	.word	0x0800c10c
 8000e68:	20004434 	.word	0x20004434
 8000e6c:	200051d4 	.word	0x200051d4
 8000e70:	20004718 	.word	0x20004718
 8000e74:	20000158 	.word	0x20000158
 8000e78:	200051a4 	.word	0x200051a4
 8000e7c:	200051a5 	.word	0x200051a5
	case 27: 	menu_vars_var1=&filter[var_index].cutoff_1 ;break;
 8000e80:	78fb      	ldrb	r3, [r7, #3]
 8000e82:	00db      	lsls	r3, r3, #3
 8000e84:	4a50      	ldr	r2, [pc, #320]	; (8000fc8 <menu_vars+0x470>)
 8000e86:	4413      	add	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	e097      	b.n	8000fbc <menu_vars+0x464>
	case 28: 	menu_vars_var1=&filter[var_index].cutoff_2 ;break;  // fine tune
 8000e8c:	78fb      	ldrb	r3, [r7, #3]
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	4a4d      	ldr	r2, [pc, #308]	; (8000fc8 <menu_vars+0x470>)
 8000e92:	4413      	add	r3, r2
 8000e94:	3301      	adds	r3, #1
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	e090      	b.n	8000fbc <menu_vars+0x464>
	case 29: 	menu_vars_var1=&filter[var_index].resonance ;break;
 8000e9a:	78fb      	ldrb	r3, [r7, #3]
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	4a4a      	ldr	r2, [pc, #296]	; (8000fc8 <menu_vars+0x470>)
 8000ea0:	4413      	add	r3, r2
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	e089      	b.n	8000fbc <menu_vars+0x464>
	case 30: 	menu_vars_var1=&filter[var_index].q_level  ;break;
 8000ea8:	78fb      	ldrb	r3, [r7, #3]
 8000eaa:	00db      	lsls	r3, r3, #3
 8000eac:	4a46      	ldr	r2, [pc, #280]	; (8000fc8 <menu_vars+0x470>)
 8000eae:	4413      	add	r3, r2
 8000eb0:	3303      	adds	r3, #3
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	e082      	b.n	8000fbc <menu_vars+0x464>
	case 31: 	menu_vars_var1=&filter[var_index].level;break;
 8000eb6:	78fb      	ldrb	r3, [r7, #3]
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	4a43      	ldr	r2, [pc, #268]	; (8000fc8 <menu_vars+0x470>)
 8000ebc:	4413      	add	r3, r2
 8000ebe:	3304      	adds	r3, #4
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	e07b      	b.n	8000fbc <menu_vars+0x464>
	case 32: 	menu_vars_var1=&filter[var_index].feedback ;break;
 8000ec4:	78fb      	ldrb	r3, [r7, #3]
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	4a3f      	ldr	r2, [pc, #252]	; (8000fc8 <menu_vars+0x470>)
 8000eca:	4413      	add	r3, r2
 8000ecc:	3307      	adds	r3, #7
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	e074      	b.n	8000fbc <menu_vars+0x464>
	case 33: 	menu_vars_var1=&filter[var_index].out_mix ;break;
 8000ed2:	78fb      	ldrb	r3, [r7, #3]
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	4a3c      	ldr	r2, [pc, #240]	; (8000fc8 <menu_vars+0x470>)
 8000ed8:	4413      	add	r3, r2
 8000eda:	3306      	adds	r3, #6
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	e06d      	b.n	8000fbc <menu_vars+0x464>
	case 34: 	menu_vars_var1=&filter[var_index].poles ;break;
 8000ee0:	78fb      	ldrb	r3, [r7, #3]
 8000ee2:	00db      	lsls	r3, r3, #3
 8000ee4:	4a38      	ldr	r2, [pc, #224]	; (8000fc8 <menu_vars+0x470>)
 8000ee6:	4413      	add	r3, r2
 8000ee8:	3305      	adds	r3, #5
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	e066      	b.n	8000fbc <menu_vars+0x464>
	case 35:     menu_vars_var1= &patch[var_index].target_index    ; break;
 8000eee:	78fa      	ldrb	r2, [r7, #3]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4413      	add	r3, r2
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	4a34      	ldr	r2, [pc, #208]	; (8000fcc <menu_vars+0x474>)
 8000efa:	4413      	add	r3, r2
 8000efc:	3305      	adds	r3, #5
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	e05c      	b.n	8000fbc <menu_vars+0x464>
	case 36: 	menu_vars_var1=&patch[var_index].input1 ;break;
 8000f02:	78fa      	ldrb	r2, [r7, #3]
 8000f04:	4613      	mov	r3, r2
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	4413      	add	r3, r2
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	4a2f      	ldr	r2, [pc, #188]	; (8000fcc <menu_vars+0x474>)
 8000f0e:	4413      	add	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	e053      	b.n	8000fbc <menu_vars+0x464>
	case 37: 	menu_vars_var1=&patch[var_index].input2 ;break;
 8000f14:	78fa      	ldrb	r2, [r7, #3]
 8000f16:	4613      	mov	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	4413      	add	r3, r2
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	4a2b      	ldr	r2, [pc, #172]	; (8000fcc <menu_vars+0x474>)
 8000f20:	4413      	add	r3, r2
 8000f22:	3301      	adds	r3, #1
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	e049      	b.n	8000fbc <menu_vars+0x464>
	case 38: 	menu_vars_var1=&patch[var_index].in_mix ;break;
 8000f28:	78fa      	ldrb	r2, [r7, #3]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	4413      	add	r3, r2
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	4a26      	ldr	r2, [pc, #152]	; (8000fcc <menu_vars+0x474>)
 8000f34:	4413      	add	r3, r2
 8000f36:	3302      	adds	r3, #2
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	e03f      	b.n	8000fbc <menu_vars+0x464>
	case 39: 	menu_vars_var1=&patch[var_index].in_offset ;break;
 8000f3c:	78fa      	ldrb	r2, [r7, #3]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4413      	add	r3, r2
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	4a21      	ldr	r2, [pc, #132]	; (8000fcc <menu_vars+0x474>)
 8000f48:	4413      	add	r3, r2
 8000f4a:	3303      	adds	r3, #3
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	e035      	b.n	8000fbc <menu_vars+0x464>
	case 40:     menu_vars_var1= &LFO_slave1[var_index].rate   ; break;
 8000f50:	78fa      	ldrb	r2, [r7, #3]
 8000f52:	4613      	mov	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4413      	add	r3, r2
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	4a1d      	ldr	r2, [pc, #116]	; (8000fd0 <menu_vars+0x478>)
 8000f5c:	4413      	add	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	e02c      	b.n	8000fbc <menu_vars+0x464>
	case 41:     menu_vars_var1= &LFO_slave1[var_index].depth    ; break;
 8000f62:	78fa      	ldrb	r2, [r7, #3]
 8000f64:	4613      	mov	r3, r2
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	4413      	add	r3, r2
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	4a18      	ldr	r2, [pc, #96]	; (8000fd0 <menu_vars+0x478>)
 8000f6e:	4413      	add	r3, r2
 8000f70:	3301      	adds	r3, #1
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	e022      	b.n	8000fbc <menu_vars+0x464>
	case 42:     menu_vars_var1= &LFO_slave1[var_index].delay    ; break;
 8000f76:	78fa      	ldrb	r2, [r7, #3]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	4a13      	ldr	r2, [pc, #76]	; (8000fd0 <menu_vars+0x478>)
 8000f82:	4413      	add	r3, r2
 8000f84:	3304      	adds	r3, #4
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	e018      	b.n	8000fbc <menu_vars+0x464>
	case 43:     menu_vars_var1= &LFO_slave1[var_index].offset    ; break;
 8000f8a:	78fa      	ldrb	r2, [r7, #3]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	4413      	add	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <menu_vars+0x478>)
 8000f96:	4413      	add	r3, r2
 8000f98:	3303      	adds	r3, #3
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	e00e      	b.n	8000fbc <menu_vars+0x464>
	case 44: 	menu_vars_var1=&sampler.start_MSB ;break;
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <menu_vars+0x47c>)
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	e00b      	b.n	8000fbc <menu_vars+0x464>
	case 45: 	menu_vars_var1=&sampler.start_LSB ;break;
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <menu_vars+0x480>)
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	e008      	b.n	8000fbc <menu_vars+0x464>
	case 46: 	menu_vars_var1=&sampler.end_MSB ;break;
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <menu_vars+0x484>)
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	e005      	b.n	8000fbc <menu_vars+0x464>
	case 47: 	menu_vars_var1=&sampler.end_LSB ;break;
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <menu_vars+0x488>)
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	e002      	b.n	8000fbc <menu_vars+0x464>


	default :		menu_vars_var1= NULL   ; break;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	bf00      	nop

	}
    // copy back address  ,ok
	// return the result number for later reference
	//menu_vars_var= menu_vars_var1;
	return menu_vars_var1;
 8000fbc:	693b      	ldr	r3, [r7, #16]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200001e4 	.word	0x200001e4
 8000fcc:	200051d4 	.word	0x200051d4
 8000fd0:	200046dc 	.word	0x200046dc
 8000fd4:	20000212 	.word	0x20000212
 8000fd8:	20000213 	.word	0x20000213
 8000fdc:	20000214 	.word	0x20000214
 8000fe0:	20000215 	.word	0x20000215

08000fe4 <menu_parser>:



void menu_parser(void){          // parse out menus , shouldn't have to run (in theory) once filled ,only for feedback pointer maybe
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0


	char menu_string[8]="xxxxxxxx";   // incoming string holder (single)
 8000fea:	4a6c      	ldr	r2, [pc, #432]	; (800119c <menu_parser+0x1b8>)
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ff4:	e883 0003 	stmia.w	r3, {r0, r1}
	char menu_string2[8]="hhhhhhhh";
 8000ff8:	4a69      	ldr	r2, [pc, #420]	; (80011a0 <menu_parser+0x1bc>)
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001000:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t string_counter=0;
 8001004:	2300      	movs	r3, #0
 8001006:	75fb      	strb	r3, [r7, #23]

	uint16_t menu_searchsize=sizeof(default_menu)-8;   // this should fairly big always , leave gap at the end , atm 480
 8001008:	f44f 63c1 	mov.w	r3, #1544	; 0x608
 800100c:	82bb      	strh	r3, [r7, #20]


	if (string_search>menu_searchsize) {                    //this is ok
 800100e:	4b65      	ldr	r3, [pc, #404]	; (80011a4 <menu_parser+0x1c0>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	8aba      	ldrh	r2, [r7, #20]
 8001014:	429a      	cmp	r2, r3
 8001016:	f0c0 80bc 	bcc.w	8001192 <menu_parser+0x1ae>
		return;    }    // check if bigger than search area
	//if (menu_counter>240)  return;
	memcpy(menu_string,default_menu+string_search,8);    //copy 8 strings created menu array
 800101a:	4b62      	ldr	r3, [pc, #392]	; (80011a4 <menu_parser+0x1c0>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	4b61      	ldr	r3, [pc, #388]	; (80011a8 <menu_parser+0x1c4>)
 8001022:	441a      	add	r2, r3
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	6810      	ldr	r0, [r2, #0]
 800102a:	6851      	ldr	r1, [r2, #4]
 800102c:	c303      	stmia	r3!, {r0, r1}
	////////////////////////////
	for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 800102e:	2300      	movs	r3, #0
 8001030:	75fb      	strb	r3, [r7, #23]
 8001032:	e093      	b.n	800115c <menu_parser+0x178>

		memcpy(menu_string2,menu_titles_final[string_counter],8);
 8001034:	7dfb      	ldrb	r3, [r7, #23]
 8001036:	4a5d      	ldr	r2, [pc, #372]	; (80011ac <menu_parser+0x1c8>)
 8001038:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	6810      	ldr	r0, [r2, #0]
 8001040:	6851      	ldr	r1, [r2, #4]
 8001042:	c303      	stmia	r3!, {r0, r1}
		if  ((strncmp(menu_string,menu_string2,8))==0) 								// compare and if true pass var,seq
 8001044:	1d39      	adds	r1, r7, #4
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	2208      	movs	r2, #8
 800104c:	4618      	mov	r0, r3
 800104e:	f00a fa5d 	bl	800b50c <strncmp>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d17e      	bne.n	8001156 <menu_parser+0x172>
		{

			if ((menu_counter>110 )&&(menu_counter<128 )) menu_counter=menu_counter+16;   // skip to second page
 8001058:	4b55      	ldr	r3, [pc, #340]	; (80011b0 <menu_parser+0x1cc>)
 800105a:	881b      	ldrh	r3, [r3, #0]
 800105c:	2b6e      	cmp	r3, #110	; 0x6e
 800105e:	d909      	bls.n	8001074 <menu_parser+0x90>
 8001060:	4b53      	ldr	r3, [pc, #332]	; (80011b0 <menu_parser+0x1cc>)
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	2b7f      	cmp	r3, #127	; 0x7f
 8001066:	d805      	bhi.n	8001074 <menu_parser+0x90>
 8001068:	4b51      	ldr	r3, [pc, #324]	; (80011b0 <menu_parser+0x1cc>)
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	3310      	adds	r3, #16
 800106e:	b29a      	uxth	r2, r3
 8001070:	4b4f      	ldr	r3, [pc, #316]	; (80011b0 <menu_parser+0x1cc>)
 8001072:	801a      	strh	r2, [r3, #0]
			if((menu_counter>237)&&(menu_counter<256 )) menu_counter=menu_counter+16; // skip
 8001074:	4b4e      	ldr	r3, [pc, #312]	; (80011b0 <menu_parser+0x1cc>)
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	2bed      	cmp	r3, #237	; 0xed
 800107a:	d909      	bls.n	8001090 <menu_parser+0xac>
 800107c:	4b4c      	ldr	r3, [pc, #304]	; (80011b0 <menu_parser+0x1cc>)
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	2bff      	cmp	r3, #255	; 0xff
 8001082:	d805      	bhi.n	8001090 <menu_parser+0xac>
 8001084:	4b4a      	ldr	r3, [pc, #296]	; (80011b0 <menu_parser+0x1cc>)
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	3310      	adds	r3, #16
 800108a:	b29a      	uxth	r2, r3
 800108c:	4b48      	ldr	r3, [pc, #288]	; (80011b0 <menu_parser+0x1cc>)
 800108e:	801a      	strh	r2, [r3, #0]
			if((menu_counter>365)&&(menu_counter<384 )) menu_counter=menu_counter+16; // skip
 8001090:	4b47      	ldr	r3, [pc, #284]	; (80011b0 <menu_parser+0x1cc>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
 8001098:	d30a      	bcc.n	80010b0 <menu_parser+0xcc>
 800109a:	4b45      	ldr	r3, [pc, #276]	; (80011b0 <menu_parser+0x1cc>)
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80010a2:	d205      	bcs.n	80010b0 <menu_parser+0xcc>
 80010a4:	4b42      	ldr	r3, [pc, #264]	; (80011b0 <menu_parser+0x1cc>)
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	3310      	adds	r3, #16
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	4b40      	ldr	r3, [pc, #256]	; (80011b0 <menu_parser+0x1cc>)
 80010ae:	801a      	strh	r2, [r3, #0]
			if((menu_counter>493)&&(menu_counter<512 )) menu_counter=menu_counter+16; // skip
 80010b0:	4b3f      	ldr	r3, [pc, #252]	; (80011b0 <menu_parser+0x1cc>)
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 80010b8:	d30a      	bcc.n	80010d0 <menu_parser+0xec>
 80010ba:	4b3d      	ldr	r3, [pc, #244]	; (80011b0 <menu_parser+0x1cc>)
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010c2:	d205      	bcs.n	80010d0 <menu_parser+0xec>
 80010c4:	4b3a      	ldr	r3, [pc, #232]	; (80011b0 <menu_parser+0x1cc>)
 80010c6:	881b      	ldrh	r3, [r3, #0]
 80010c8:	3310      	adds	r3, #16
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	4b38      	ldr	r3, [pc, #224]	; (80011b0 <menu_parser+0x1cc>)
 80010ce:	801a      	strh	r2, [r3, #0]
			if((menu_counter>621)&&(menu_counter<640 )) menu_counter=menu_counter+16; // skip
 80010d0:	4b37      	ldr	r3, [pc, #220]	; (80011b0 <menu_parser+0x1cc>)
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	f240 226d 	movw	r2, #621	; 0x26d
 80010d8:	4293      	cmp	r3, r2
 80010da:	d90a      	bls.n	80010f2 <menu_parser+0x10e>
 80010dc:	4b34      	ldr	r3, [pc, #208]	; (80011b0 <menu_parser+0x1cc>)
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80010e4:	d205      	bcs.n	80010f2 <menu_parser+0x10e>
 80010e6:	4b32      	ldr	r3, [pc, #200]	; (80011b0 <menu_parser+0x1cc>)
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	3310      	adds	r3, #16
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	4b30      	ldr	r3, [pc, #192]	; (80011b0 <menu_parser+0x1cc>)
 80010f0:	801a      	strh	r2, [r3, #0]
			menu_title_lut[menu_title_count]=  (string_counter <<16)+(menu_counter&1023);   // search result  and disp lcd position counter
 80010f2:	7dfb      	ldrb	r3, [r7, #23]
 80010f4:	041a      	lsls	r2, r3, #16
 80010f6:	4b2e      	ldr	r3, [pc, #184]	; (80011b0 <menu_parser+0x1cc>)
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010fe:	18d1      	adds	r1, r2, r3
 8001100:	4b2c      	ldr	r3, [pc, #176]	; (80011b4 <menu_parser+0x1d0>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	4b2c      	ldr	r3, [pc, #176]	; (80011b8 <menu_parser+0x1d4>)
 8001108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			memcpy(menu_index_list+(menu_title_count*2),default_menu+string_search-2,2); // get array  index under ,LFO[1]  etc ,ok
 800110c:	4b29      	ldr	r3, [pc, #164]	; (80011b4 <menu_parser+0x1d0>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	461a      	mov	r2, r3
 8001114:	4b29      	ldr	r3, [pc, #164]	; (80011bc <menu_parser+0x1d8>)
 8001116:	18d0      	adds	r0, r2, r3
 8001118:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <menu_parser+0x1c0>)
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	3b02      	subs	r3, #2
 800111e:	4a22      	ldr	r2, [pc, #136]	; (80011a8 <menu_parser+0x1c4>)
 8001120:	4413      	add	r3, r2
 8001122:	2202      	movs	r2, #2
 8001124:	4619      	mov	r1, r3
 8001126:	f00a f9db 	bl	800b4e0 <memcpy>


			menu_title_count++;
 800112a:	4b22      	ldr	r3, [pc, #136]	; (80011b4 <menu_parser+0x1d0>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	3301      	adds	r3, #1
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4b20      	ldr	r3, [pc, #128]	; (80011b4 <menu_parser+0x1d0>)
 8001134:	701a      	strb	r2, [r3, #0]
			menu_counter++;
 8001136:	4b1e      	ldr	r3, [pc, #120]	; (80011b0 <menu_parser+0x1cc>)
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	3301      	adds	r3, #1
 800113c:	b29a      	uxth	r2, r3
 800113e:	4b1c      	ldr	r3, [pc, #112]	; (80011b0 <menu_parser+0x1cc>)
 8001140:	801a      	strh	r2, [r3, #0]
			space_check=0;
 8001142:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <menu_parser+0x1dc>)
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
			string_search=string_search+8;     // advance search position
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <menu_parser+0x1c0>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	3308      	adds	r3, #8
 800114e:	b29a      	uxth	r2, r3
 8001150:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <menu_parser+0x1c0>)
 8001152:	801a      	strh	r2, [r3, #0]

			return;}
 8001154:	e01e      	b.n	8001194 <menu_parser+0x1b0>
	for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 8001156:	7dfb      	ldrb	r3, [r7, #23]
 8001158:	3301      	adds	r3, #1
 800115a:	75fb      	strb	r3, [r7, #23]
 800115c:	7dfb      	ldrb	r3, [r7, #23]
 800115e:	2b30      	cmp	r3, #48	; 0x30
 8001160:	f67f af68 	bls.w	8001034 <menu_parser+0x50>

	}

	if (space_check>1)  menu_counter++;   //this is ok
 8001164:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <menu_parser+0x1dc>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d905      	bls.n	8001178 <menu_parser+0x194>
 800116c:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <menu_parser+0x1cc>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	3301      	adds	r3, #1
 8001172:	b29a      	uxth	r2, r3
 8001174:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <menu_parser+0x1cc>)
 8001176:	801a      	strh	r2, [r3, #0]
	space_check++;  // count empty spaces or fill characters
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <menu_parser+0x1dc>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	b2da      	uxtb	r2, r3
 8001180:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <menu_parser+0x1dc>)
 8001182:	701a      	strb	r2, [r3, #0]
	string_search++;
 8001184:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <menu_parser+0x1c0>)
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	3301      	adds	r3, #1
 800118a:	b29a      	uxth	r2, r3
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <menu_parser+0x1c0>)
 800118e:	801a      	strh	r2, [r3, #0]
	return;
 8001190:	e000      	b.n	8001194 <menu_parser+0x1b0>
		return;    }    // check if bigger than search area
 8001192:	bf00      	nop


}
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	0800ba0c 	.word	0x0800ba0c
 80011a0:	0800ba14 	.word	0x0800ba14
 80011a4:	20005364 	.word	0x20005364
 80011a8:	0800bafc 	.word	0x0800bafc
 80011ac:	2000022c 	.word	0x2000022c
 80011b0:	20005366 	.word	0x20005366
 80011b4:	20005369 	.word	0x20005369
 80011b8:	2000536c 	.word	0x2000536c
 80011bc:	2000576c 	.word	0x2000576c
 80011c0:	20005368 	.word	0x20005368

080011c4 <patch_target_parse>:
void patch_target_parse(void){    // records ptr for target options , works ok
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
uint8_t skip=0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	73fb      	strb	r3, [r7, #15]
		for (n=0;n<10;n++){
 80011ce:	4b91      	ldr	r3, [pc, #580]	; (8001414 <patch_target_parse+0x250>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	801a      	strh	r2, [r3, #0]
 80011d4:	e113      	b.n	80013fe <patch_target_parse+0x23a>

			uint16_t* output_hold;
			uint8_t input_hold=patch[n].input1;
 80011d6:	4b8f      	ldr	r3, [pc, #572]	; (8001414 <patch_target_parse+0x250>)
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	4619      	mov	r1, r3
 80011dc:	4a8e      	ldr	r2, [pc, #568]	; (8001418 <patch_target_parse+0x254>)
 80011de:	460b      	mov	r3, r1
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	440b      	add	r3, r1
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	4413      	add	r3, r2
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	717b      	strb	r3, [r7, #5]

			if (patch[n].input1>=menu_lookup_count) patch[n].input1=0;    // limit
 80011ec:	4b89      	ldr	r3, [pc, #548]	; (8001414 <patch_target_parse+0x250>)
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	4619      	mov	r1, r3
 80011f2:	4a89      	ldr	r2, [pc, #548]	; (8001418 <patch_target_parse+0x254>)
 80011f4:	460b      	mov	r3, r1
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	440b      	add	r3, r1
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	4413      	add	r3, r2
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b30      	cmp	r3, #48	; 0x30
 8001202:	d90a      	bls.n	800121a <patch_target_parse+0x56>
 8001204:	4b83      	ldr	r3, [pc, #524]	; (8001414 <patch_target_parse+0x250>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	4619      	mov	r1, r3
 800120a:	4a83      	ldr	r2, [pc, #524]	; (8001418 <patch_target_parse+0x254>)
 800120c:	460b      	mov	r3, r1
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	440b      	add	r3, r1
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	4413      	add	r3, r2
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]

			switch(input_hold&3){     // lfo now , can add adsr later
 800121a:	797b      	ldrb	r3, [r7, #5]
 800121c:	f003 0303 	and.w	r3, r3, #3
 8001220:	2b03      	cmp	r3, #3
 8001222:	d842      	bhi.n	80012aa <patch_target_parse+0xe6>
 8001224:	a201      	add	r2, pc, #4	; (adr r2, 800122c <patch_target_parse+0x68>)
 8001226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800122a:	bf00      	nop
 800122c:	0800123d 	.word	0x0800123d
 8001230:	08001257 	.word	0x08001257
 8001234:	08001273 	.word	0x08001273
 8001238:	0800128f 	.word	0x0800128f

						case 0:   output_hold=&LFO[input_hold>>2].out[0];break;
 800123c:	797b      	ldrb	r3, [r7, #5]
 800123e:	089b      	lsrs	r3, r3, #2
 8001240:	b2db      	uxtb	r3, r3
 8001242:	461a      	mov	r2, r3
 8001244:	4613      	mov	r3, r2
 8001246:	011b      	lsls	r3, r3, #4
 8001248:	4413      	add	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4a73      	ldr	r2, [pc, #460]	; (800141c <patch_target_parse+0x258>)
 800124e:	4413      	add	r3, r2
 8001250:	3306      	adds	r3, #6
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	e029      	b.n	80012aa <patch_target_parse+0xe6>
						case 1:   output_hold=&LFO[input_hold>>2].out_saw[0];break;
 8001256:	797b      	ldrb	r3, [r7, #5]
 8001258:	089b      	lsrs	r3, r3, #2
 800125a:	b2db      	uxtb	r3, r3
 800125c:	461a      	mov	r2, r3
 800125e:	4613      	mov	r3, r2
 8001260:	011b      	lsls	r3, r3, #4
 8001262:	4413      	add	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	3318      	adds	r3, #24
 8001268:	4a6c      	ldr	r2, [pc, #432]	; (800141c <patch_target_parse+0x258>)
 800126a:	4413      	add	r3, r2
 800126c:	3302      	adds	r3, #2
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	e01b      	b.n	80012aa <patch_target_parse+0xe6>
						case 2:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
 8001272:	797b      	ldrb	r3, [r7, #5]
 8001274:	089b      	lsrs	r3, r3, #2
 8001276:	b2db      	uxtb	r3, r3
 8001278:	461a      	mov	r2, r3
 800127a:	4613      	mov	r3, r2
 800127c:	011b      	lsls	r3, r3, #4
 800127e:	4413      	add	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	3328      	adds	r3, #40	; 0x28
 8001284:	4a65      	ldr	r2, [pc, #404]	; (800141c <patch_target_parse+0x258>)
 8001286:	4413      	add	r3, r2
 8001288:	3306      	adds	r3, #6
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	e00d      	b.n	80012aa <patch_target_parse+0xe6>
						case 3:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
 800128e:	797b      	ldrb	r3, [r7, #5]
 8001290:	089b      	lsrs	r3, r3, #2
 8001292:	b2db      	uxtb	r3, r3
 8001294:	461a      	mov	r2, r3
 8001296:	4613      	mov	r3, r2
 8001298:	011b      	lsls	r3, r3, #4
 800129a:	4413      	add	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	3328      	adds	r3, #40	; 0x28
 80012a0:	4a5e      	ldr	r2, [pc, #376]	; (800141c <patch_target_parse+0x258>)
 80012a2:	4413      	add	r3, r2
 80012a4:	3306      	adds	r3, #6
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	bf00      	nop
						}

			patch[n].in1_ptr=output_hold;   // sets input pointer to first sample , default is lfo[0].out [0]
 80012aa:	4b5a      	ldr	r3, [pc, #360]	; (8001414 <patch_target_parse+0x250>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	4619      	mov	r1, r3
 80012b0:	4a59      	ldr	r2, [pc, #356]	; (8001418 <patch_target_parse+0x254>)
 80012b2:	460b      	mov	r3, r1
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	440b      	add	r3, r1
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	4413      	add	r3, r2
 80012bc:	3320      	adds	r3, #32
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	601a      	str	r2, [r3, #0]


			if (patch[n].target) {  // test if above zero
 80012c2:	4b54      	ldr	r3, [pc, #336]	; (8001414 <patch_target_parse+0x250>)
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	4619      	mov	r1, r3
 80012c8:	4a53      	ldr	r2, [pc, #332]	; (8001418 <patch_target_parse+0x254>)
 80012ca:	460b      	mov	r3, r1
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	440b      	add	r3, r1
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	4413      	add	r3, r2
 80012d4:	3304      	adds	r3, #4
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 808a 	beq.w	80013f2 <patch_target_parse+0x22e>


				uint8_t target_input=patch[n].target; // copy to avoid messed up pointer
 80012de:	4b4d      	ldr	r3, [pc, #308]	; (8001414 <patch_target_parse+0x250>)
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	4619      	mov	r1, r3
 80012e4:	4a4c      	ldr	r2, [pc, #304]	; (8001418 <patch_target_parse+0x254>)
 80012e6:	460b      	mov	r3, r1
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	440b      	add	r3, r1
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	4413      	add	r3, r2
 80012f0:	3304      	adds	r3, #4
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	71fb      	strb	r3, [r7, #7]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	73fb      	strb	r3, [r7, #15]
 80012fa:	e00a      	b.n	8001312 <patch_target_parse+0x14e>
					if (patch_skip_list[target_input]==1)  target_input++;
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	4a48      	ldr	r2, [pc, #288]	; (8001420 <patch_target_parse+0x25c>)
 8001300:	5cd3      	ldrb	r3, [r2, r3]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d102      	bne.n	800130c <patch_target_parse+0x148>
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	3301      	adds	r3, #1
 800130a:	71fb      	strb	r3, [r7, #7]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	3301      	adds	r3, #1
 8001310:	73fb      	strb	r3, [r7, #15]
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	2b30      	cmp	r3, #48	; 0x30
 8001316:	d9f1      	bls.n	80012fc <patch_target_parse+0x138>

				}  // test against list
				if (target_input>(menu_lookup_count-1)) target_input=menu_lookup_count-1;
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	2b30      	cmp	r3, #48	; 0x30
 800131c:	d901      	bls.n	8001322 <patch_target_parse+0x15e>
 800131e:	2330      	movs	r3, #48	; 0x30
 8001320:	71fb      	strb	r3, [r7, #7]
				if (target_input!=35)  {     // make target index is not selected
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	2b23      	cmp	r3, #35	; 0x23
 8001326:	d058      	beq.n	80013da <patch_target_parse+0x216>


			patch[n].target=target_input; // write back corrected value
 8001328:	4b3a      	ldr	r3, [pc, #232]	; (8001414 <patch_target_parse+0x250>)
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	4619      	mov	r1, r3
 800132e:	4a3a      	ldr	r2, [pc, #232]	; (8001418 <patch_target_parse+0x254>)
 8001330:	460b      	mov	r3, r1
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	440b      	add	r3, r1
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	4413      	add	r3, r2
 800133a:	3304      	adds	r3, #4
 800133c:	79fa      	ldrb	r2, [r7, #7]
 800133e:	701a      	strb	r2, [r3, #0]

			uint8_t target_index=patch[n].target_index;
 8001340:	4b34      	ldr	r3, [pc, #208]	; (8001414 <patch_target_parse+0x250>)
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	4619      	mov	r1, r3
 8001346:	4a34      	ldr	r2, [pc, #208]	; (8001418 <patch_target_parse+0x254>)
 8001348:	460b      	mov	r3, r1
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	440b      	add	r3, r1
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	4413      	add	r3, r2
 8001352:	3305      	adds	r3, #5
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	71bb      	strb	r3, [r7, #6]

			if (target_index>menu_vars_index_limit[target_index]  )   // test limit
 8001358:	79bb      	ldrb	r3, [r7, #6]
 800135a:	4a32      	ldr	r2, [pc, #200]	; (8001424 <patch_target_parse+0x260>)
 800135c:	5cd3      	ldrb	r3, [r2, r3]
 800135e:	79ba      	ldrb	r2, [r7, #6]
 8001360:	429a      	cmp	r2, r3
 8001362:	d903      	bls.n	800136c <patch_target_parse+0x1a8>
			{	target_index=menu_vars_index_limit[target_index]; }
 8001364:	79bb      	ldrb	r3, [r7, #6]
 8001366:	4a2f      	ldr	r2, [pc, #188]	; (8001424 <patch_target_parse+0x260>)
 8001368:	5cd3      	ldrb	r3, [r2, r3]
 800136a:	71bb      	strb	r3, [r7, #6]
			patch[n].target_index=target_index;
 800136c:	4b29      	ldr	r3, [pc, #164]	; (8001414 <patch_target_parse+0x250>)
 800136e:	881b      	ldrh	r3, [r3, #0]
 8001370:	4619      	mov	r1, r3
 8001372:	4a29      	ldr	r2, [pc, #164]	; (8001418 <patch_target_parse+0x254>)
 8001374:	460b      	mov	r3, r1
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	4413      	add	r3, r2
 800137e:	3305      	adds	r3, #5
 8001380:	79ba      	ldrb	r2, [r7, #6]
 8001382:	701a      	strb	r2, [r3, #0]
			uint8_t*  target_out_ptr= menu_vars(menu_titles_final[target_input] , target_index    );
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	4a28      	ldr	r2, [pc, #160]	; (8001428 <patch_target_parse+0x264>)
 8001388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138c:	79ba      	ldrb	r2, [r7, #6]
 800138e:	4611      	mov	r1, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fbe1 	bl	8000b58 <menu_vars>
 8001396:	6038      	str	r0, [r7, #0]

			if (target_out_ptr)           {patch[n].out_ptr =target_out_ptr;     // write ptr
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d029      	beq.n	80013f2 <patch_target_parse+0x22e>
 800139e:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <patch_target_parse+0x250>)
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	4619      	mov	r1, r3
 80013a4:	4a1c      	ldr	r2, [pc, #112]	; (8001418 <patch_target_parse+0x254>)
 80013a6:	460b      	mov	r3, r1
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	440b      	add	r3, r1
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	4413      	add	r3, r2
 80013b0:	331c      	adds	r3, #28
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	601a      	str	r2, [r3, #0]
			patch[n].limiter=menu_vars_limiter[menu_vars_ref]; }
 80013b6:	4b1d      	ldr	r3, [pc, #116]	; (800142c <patch_target_parse+0x268>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	461a      	mov	r2, r3
 80013bc:	4b15      	ldr	r3, [pc, #84]	; (8001414 <patch_target_parse+0x250>)
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	4619      	mov	r1, r3
 80013c2:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <patch_target_parse+0x26c>)
 80013c4:	5c98      	ldrb	r0, [r3, r2]
 80013c6:	4a14      	ldr	r2, [pc, #80]	; (8001418 <patch_target_parse+0x254>)
 80013c8:	460b      	mov	r3, r1
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	440b      	add	r3, r1
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	4413      	add	r3, r2
 80013d2:	3324      	adds	r3, #36	; 0x24
 80013d4:	4602      	mov	r2, r0
 80013d6:	701a      	strb	r2, [r3, #0]
 80013d8:	e00b      	b.n	80013f2 <patch_target_parse+0x22e>
				}
				else patch[n].target=0;  // write back 0 if failed
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <patch_target_parse+0x250>)
 80013dc:	881b      	ldrh	r3, [r3, #0]
 80013de:	4619      	mov	r1, r3
 80013e0:	4a0d      	ldr	r2, [pc, #52]	; (8001418 <patch_target_parse+0x254>)
 80013e2:	460b      	mov	r3, r1
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	440b      	add	r3, r1
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	4413      	add	r3, r2
 80013ec:	3304      	adds	r3, #4
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]
		for (n=0;n<10;n++){
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <patch_target_parse+0x250>)
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	3301      	adds	r3, #1
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <patch_target_parse+0x250>)
 80013fc:	801a      	strh	r2, [r3, #0]
 80013fe:	4b05      	ldr	r3, [pc, #20]	; (8001414 <patch_target_parse+0x250>)
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	2b09      	cmp	r3, #9
 8001404:	f67f aee7 	bls.w	80011d6 <patch_target_parse+0x12>


			}
		}

	}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	2000088c 	.word	0x2000088c
 8001418:	200051d4 	.word	0x200051d4
 800141c:	20004434 	.word	0x20004434
 8001420:	0800c174 	.word	0x0800c174
 8001424:	0800c10c 	.word	0x0800c10c
 8001428:	2000022c 	.word	0x2000022c
 800142c:	200079ad 	.word	0x200079ad
 8001430:	0800c140 	.word	0x0800c140

08001434 <patch_target_replace>:


	}

}
void patch_target_replace(void){					// sttaight value replace  ,ok
 8001434:	b490      	push	{r4, r7}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
	uint8_t loop_position=sampling_position&7;    // 0-7 , this comes usually from 0-512 loop / 64
 800143a:	4b3f      	ldr	r3, [pc, #252]	; (8001538 <patch_target_replace+0x104>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	73bb      	strb	r3, [r7, #14]

	for (n=0;n<10;n++){
 8001444:	4b3d      	ldr	r3, [pc, #244]	; (800153c <patch_target_replace+0x108>)
 8001446:	2200      	movs	r2, #0
 8001448:	801a      	strh	r2, [r3, #0]
 800144a:	e06b      	b.n	8001524 <patch_target_replace+0xf0>



		if (patch[n].target) {         // check first for enable
 800144c:	4b3b      	ldr	r3, [pc, #236]	; (800153c <patch_target_replace+0x108>)
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	4619      	mov	r1, r3
 8001452:	4a3b      	ldr	r2, [pc, #236]	; (8001540 <patch_target_replace+0x10c>)
 8001454:	460b      	mov	r3, r1
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	440b      	add	r3, r1
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	4413      	add	r3, r2
 800145e:	3304      	adds	r3, #4
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d058      	beq.n	8001518 <patch_target_replace+0xe4>

			patch[n].output[loop_position]=*(patch[n].in1_ptr+(loop_position));   //write output here
 8001466:	4b35      	ldr	r3, [pc, #212]	; (800153c <patch_target_replace+0x108>)
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	4619      	mov	r1, r3
 800146c:	4a34      	ldr	r2, [pc, #208]	; (8001540 <patch_target_replace+0x10c>)
 800146e:	460b      	mov	r3, r1
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	440b      	add	r3, r1
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	4413      	add	r3, r2
 8001478:	3320      	adds	r3, #32
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	7bbb      	ldrb	r3, [r7, #14]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	4413      	add	r3, r2
 8001482:	4a2e      	ldr	r2, [pc, #184]	; (800153c <patch_target_replace+0x108>)
 8001484:	8812      	ldrh	r2, [r2, #0]
 8001486:	4610      	mov	r0, r2
 8001488:	7bba      	ldrb	r2, [r7, #14]
 800148a:	881c      	ldrh	r4, [r3, #0]
 800148c:	492c      	ldr	r1, [pc, #176]	; (8001540 <patch_target_replace+0x10c>)
 800148e:	4603      	mov	r3, r0
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4403      	add	r3, r0
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	440b      	add	r3, r1
 800149c:	4622      	mov	r2, r4
 800149e:	80da      	strh	r2, [r3, #6]


			uint8_t  *ptr_to_modify =patch[n].out_ptr;       // select address , not always 8 bit ,ok
 80014a0:	4b26      	ldr	r3, [pc, #152]	; (800153c <patch_target_replace+0x108>)
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	4619      	mov	r1, r3
 80014a6:	4a26      	ldr	r2, [pc, #152]	; (8001540 <patch_target_replace+0x10c>)
 80014a8:	460b      	mov	r3, r1
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	440b      	add	r3, r1
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	4413      	add	r3, r2
 80014b2:	331c      	adds	r3, #28
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	60bb      	str	r3, [r7, #8]
			uint16_t lfo_out_temp=  (patch[n].output [loop_position])>>8;  // 0-256,
 80014b8:	4b20      	ldr	r3, [pc, #128]	; (800153c <patch_target_replace+0x108>)
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	7bba      	ldrb	r2, [r7, #14]
 80014c0:	491f      	ldr	r1, [pc, #124]	; (8001540 <patch_target_replace+0x10c>)
 80014c2:	4603      	mov	r3, r0
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4403      	add	r3, r0
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	440b      	add	r3, r1
 80014d0:	88db      	ldrh	r3, [r3, #6]
 80014d2:	0a1b      	lsrs	r3, r3, #8
 80014d4:	80fb      	strh	r3, [r7, #6]
			uint8_t lfo_mod1=ptr_to_modify; //ok
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	717b      	strb	r3, [r7, #5]

			uint8_t  var_replaced =  lfo_out_temp &255 ;   // grab lfo out *    data to be modfied
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	73fb      	strb	r3, [r7, #15]

			if (var_replaced>patch[n].limiter) var_replaced=patch[n].limiter;  // limit lfo output
 80014de:	4b17      	ldr	r3, [pc, #92]	; (800153c <patch_target_replace+0x108>)
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	4619      	mov	r1, r3
 80014e4:	4a16      	ldr	r2, [pc, #88]	; (8001540 <patch_target_replace+0x10c>)
 80014e6:	460b      	mov	r3, r1
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	440b      	add	r3, r1
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	4413      	add	r3, r2
 80014f0:	3324      	adds	r3, #36	; 0x24
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	7bfa      	ldrb	r2, [r7, #15]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d90b      	bls.n	8001512 <patch_target_replace+0xde>
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <patch_target_replace+0x108>)
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	4619      	mov	r1, r3
 8001500:	4a0f      	ldr	r2, [pc, #60]	; (8001540 <patch_target_replace+0x10c>)
 8001502:	460b      	mov	r3, r1
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	440b      	add	r3, r1
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	4413      	add	r3, r2
 800150c:	3324      	adds	r3, #36	; 0x24
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	73fb      	strb	r3, [r7, #15]

			*ptr_to_modify =var_replaced;   // replace original value,ok
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	7bfa      	ldrb	r2, [r7, #15]
 8001516:	701a      	strb	r2, [r3, #0]
	for (n=0;n<10;n++){
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <patch_target_replace+0x108>)
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	3301      	adds	r3, #1
 800151e:	b29a      	uxth	r2, r3
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <patch_target_replace+0x108>)
 8001522:	801a      	strh	r2, [r3, #0]
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <patch_target_replace+0x108>)
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	2b09      	cmp	r3, #9
 800152a:	d98f      	bls.n	800144c <patch_target_replace+0x18>
		}


	}

}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bc90      	pop	{r4, r7}
 8001536:	4770      	bx	lr
 8001538:	20005984 	.word	0x20005984
 800153c:	2000088c 	.word	0x2000088c
 8001540:	200051d4 	.word	0x200051d4

08001544 <SPI_command>:



void SPI_command(void){
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
// pins are all good , SPI is always the problem!!!
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 800154a:	4b18      	ldr	r3, [pc, #96]	; (80015ac <SPI_command+0x68>)
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d128      	bne.n	80015a4 <SPI_command+0x60>
 8001552:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <SPI_command+0x6c>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d124      	bne.n	80015a4 <SPI_command+0x60>

uint8_t spi_store[5];

	//clk_pin=(i&1)^1;
		//bsrr_long=0;
		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 800155a:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <SPI_command+0x70>)
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	0a1b      	lsrs	r3, r3, #8
 8001560:	b29b      	uxth	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <SPI_command+0x2a>
 8001566:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <SPI_command+0x74>)
 8001568:	22f8      	movs	r2, #248	; 0xf8
 800156a:	701a      	strb	r2, [r3, #0]
 800156c:	e002      	b.n	8001574 <SPI_command+0x30>
 800156e:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <SPI_command+0x74>)
 8001570:	22fa      	movs	r2, #250	; 0xfa
 8001572:	701a      	strb	r2, [r3, #0]

	spi_store[0]=spi_byte&255;
 8001574:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <SPI_command+0x74>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	703b      	strb	r3, [r7, #0]
	spi_store[1]=((spi_hold>>4)<<4)&255;
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <SPI_command+0x70>)
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	091b      	lsrs	r3, r3, #4
 8001580:	b29b      	uxth	r3, r3
 8001582:	011b      	lsls	r3, r3, #4
 8001584:	b2db      	uxtb	r3, r3
 8001586:	707b      	strb	r3, [r7, #1]
	spi_store[2]=((spi_hold&15)<<4)&255;
 8001588:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <SPI_command+0x70>)
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	011b      	lsls	r3, r3, #4
 800158e:	b2db      	uxtb	r3, r3
 8001590:	70bb      	strb	r3, [r7, #2]

// send this to spi for now
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3,3
 8001592:	4639      	mov	r1, r7
 8001594:	2303      	movs	r3, #3
 8001596:	2203      	movs	r2, #3
 8001598:	4808      	ldr	r0, [pc, #32]	; (80015bc <SPI_command+0x78>)
 800159a:	f007 fd82 	bl	80090a2 <HAL_SPI_Transmit>
			);  // working good


//HAL_Delay(10);
	spi_enable=1; }
 800159e:	4b03      	ldr	r3, [pc, #12]	; (80015ac <SPI_command+0x68>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	801a      	strh	r2, [r3, #0]
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200034d2 	.word	0x200034d2
 80015b0:	200034d8 	.word	0x200034d8
 80015b4:	200034d6 	.word	0x200034d6
 80015b8:	200034d4 	.word	0x200034d4
 80015bc:	20010108 	.word	0x20010108

080015c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)    // unreliable

	{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
		time_proc++;
 80015c8:	4b21      	ldr	r3, [pc, #132]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	3301      	adds	r3, #1
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	4b1f      	ldr	r3, [pc, #124]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80015d2:	801a      	strh	r2, [r3, #0]
//		if (sample_point==511) {bank_write=1; sample_pointD=0;  }
//		if (sample_point==1022) {bank_write=1; sample_pointD=512; }
//		sample_point=sample_point & 1023;// this is 1


		if(TIM3==htim->Instance)			// nothing here is consistent ?
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a1e      	ldr	r2, [pc, #120]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d131      	bne.n	8001642 <HAL_TIM_PeriodElapsedCallback+0x82>
	{

			play_hold=play_sample[sample_point<<1]; // this is 2
 80015de:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	4a1d      	ldr	r2, [pc, #116]	; (800165c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80015e8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80015ec:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80015ee:	801a      	strh	r2, [r3, #0]
			play_hold2=play_sample[(sample_point<<1)+1];
 80015f0:	4b19      	ldr	r3, [pc, #100]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	3301      	adds	r3, #1
 80015fa:	4a18      	ldr	r2, [pc, #96]	; (800165c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80015fc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001600:	4b18      	ldr	r3, [pc, #96]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001602:	801a      	strh	r2, [r3, #0]
			if (sample_point>1022)    {bank_write=2;sample_point=0;} else sample_point++;
 8001604:	4b14      	ldr	r3, [pc, #80]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	b29b      	uxth	r3, r3
 800160a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800160e:	4293      	cmp	r3, r2
 8001610:	d906      	bls.n	8001620 <HAL_TIM_PeriodElapsedCallback+0x60>
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001614:	2202      	movs	r2, #2
 8001616:	801a      	strh	r2, [r3, #0]
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800161a:	2200      	movs	r2, #0
 800161c:	801a      	strh	r2, [r3, #0]
 800161e:	e006      	b.n	800162e <HAL_TIM_PeriodElapsedCallback+0x6e>
 8001620:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	b29b      	uxth	r3, r3
 8001626:	3301      	adds	r3, #1
 8001628:	b29a      	uxth	r2, r3
 800162a:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800162c:	801a      	strh	r2, [r3, #0]

	TIM3->CCR1=play_hold ;  // keep readin sample storage
 800162e:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	b29a      	uxth	r2, r3
 8001634:	4b07      	ldr	r3, [pc, #28]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001636:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=play_hold2 ;   // load up counter on ch2
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	b29a      	uxth	r2, r3
 800163e:	4b05      	ldr	r3, [pc, #20]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001640:	639a      	str	r2, [r3, #56]	; 0x38



	}

	}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	20004430 	.word	0x20004430
 8001654:	40000400 	.word	0x40000400
 8001658:	20001898 	.word	0x20001898
 800165c:	20000894 	.word	0x20000894
 8001660:	2000189a 	.word	0x2000189a
 8001664:	2000189c 	.word	0x2000189c
 8001668:	2000014e 	.word	0x2000014e

0800166c <analoginputloopb>:



void analoginputloopb(void){  //works ,getting obsolete
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0


	menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 8001672:	4b51      	ldr	r3, [pc, #324]	; (80017b8 <analoginputloopb+0x14c>)
 8001674:	889b      	ldrh	r3, [r3, #4]
 8001676:	091b      	lsrs	r3, r3, #4
 8001678:	b29b      	uxth	r3, r3
 800167a:	b2da      	uxtb	r2, r3
 800167c:	4b4f      	ldr	r3, [pc, #316]	; (80017bc <analoginputloopb+0x150>)
 800167e:	701a      	strb	r2, [r3, #0]
		menuSelectX=cursor_menu[2]&15;  // Y select inside page
 8001680:	4b4d      	ldr	r3, [pc, #308]	; (80017b8 <analoginputloopb+0x14c>)
 8001682:	889b      	ldrh	r3, [r3, #4]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	b2da      	uxtb	r2, r3
 800168c:	4b4c      	ldr	r3, [pc, #304]	; (80017c0 <analoginputloopb+0x154>)
 800168e:	701a      	strb	r2, [r3, #0]


		cursor_menu[1]=0;
 8001690:	4b49      	ldr	r3, [pc, #292]	; (80017b8 <analoginputloopb+0x14c>)
 8001692:	2200      	movs	r2, #0
 8001694:	805a      	strh	r2, [r3, #2]

		cursor_menu[2]=enc2_dir;
 8001696:	4b4b      	ldr	r3, [pc, #300]	; (80017c4 <analoginputloopb+0x158>)
 8001698:	881a      	ldrh	r2, [r3, #0]
 800169a:	4b47      	ldr	r3, [pc, #284]	; (80017b8 <analoginputloopb+0x14c>)
 800169c:	809a      	strh	r2, [r3, #4]


	enc_temp=(TIM2->CNT)>>1;  // read counter tim2 ,divider ok
 800169e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a4:	085b      	lsrs	r3, r3, #1
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	4b47      	ldr	r3, [pc, #284]	; (80017c8 <analoginputloopb+0x15c>)
 80016aa:	801a      	strh	r2, [r3, #0]
	enc2_store[enc2_store_count]=(TIM4->CNT)&255;  // read counter tim4, noisy
 80016ac:	4b47      	ldr	r3, [pc, #284]	; (80017cc <analoginputloopb+0x160>)
 80016ae:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80016b0:	4b47      	ldr	r3, [pc, #284]	; (80017d0 <analoginputloopb+0x164>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	461a      	mov	r2, r3
 80016b6:	b2c9      	uxtb	r1, r1
 80016b8:	4b46      	ldr	r3, [pc, #280]	; (80017d4 <analoginputloopb+0x168>)
 80016ba:	5499      	strb	r1, [r3, r2]
	uint16_t enc2_store2=0;
 80016bc:	2300      	movs	r3, #0
 80016be:	80fb      	strh	r3, [r7, #6]
	uint16_t enc2_store3=0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	80bb      	strh	r3, [r7, #4]
	if (enc2_store_count==3) enc2_store_count=0; else enc2_store_count++;
 80016c4:	4b42      	ldr	r3, [pc, #264]	; (80017d0 <analoginputloopb+0x164>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b03      	cmp	r3, #3
 80016ca:	d103      	bne.n	80016d4 <analoginputloopb+0x68>
 80016cc:	4b40      	ldr	r3, [pc, #256]	; (80017d0 <analoginputloopb+0x164>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
 80016d2:	e005      	b.n	80016e0 <analoginputloopb+0x74>
 80016d4:	4b3e      	ldr	r3, [pc, #248]	; (80017d0 <analoginputloopb+0x164>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	3301      	adds	r3, #1
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	4b3c      	ldr	r3, [pc, #240]	; (80017d0 <analoginputloopb+0x164>)
 80016de:	701a      	strb	r2, [r3, #0]

	enc2_store2=enc2_store[0]+enc2_store[1]+enc2_store[2]+enc2_store[3];     // average filter hopefully
 80016e0:	4b3c      	ldr	r3, [pc, #240]	; (80017d4 <analoginputloopb+0x168>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	4b3b      	ldr	r3, [pc, #236]	; (80017d4 <analoginputloopb+0x168>)
 80016e8:	785b      	ldrb	r3, [r3, #1]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	4413      	add	r3, r2
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	4b38      	ldr	r3, [pc, #224]	; (80017d4 <analoginputloopb+0x168>)
 80016f2:	789b      	ldrb	r3, [r3, #2]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	4413      	add	r3, r2
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	4b36      	ldr	r3, [pc, #216]	; (80017d4 <analoginputloopb+0x168>)
 80016fc:	78db      	ldrb	r3, [r3, #3]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	4413      	add	r3, r2
 8001702:	80fb      	strh	r3, [r7, #6]
	enc2_store3=enc2_store2>>3;
 8001704:	88fb      	ldrh	r3, [r7, #6]
 8001706:	08db      	lsrs	r3, r3, #3
 8001708:	80bb      	strh	r3, [r7, #4]
	enc2_temp=enc2_store3;
 800170a:	4a33      	ldr	r2, [pc, #204]	; (80017d8 <analoginputloopb+0x16c>)
 800170c:	88bb      	ldrh	r3, [r7, #4]
 800170e:	8013      	strh	r3, [r2, #0]

	if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-1;
 8001710:	4b2d      	ldr	r3, [pc, #180]	; (80017c8 <analoginputloopb+0x15c>)
 8001712:	881a      	ldrh	r2, [r3, #0]
 8001714:	4b31      	ldr	r3, [pc, #196]	; (80017dc <analoginputloopb+0x170>)
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d908      	bls.n	800172e <analoginputloopb+0xc2>
 800171c:	4b30      	ldr	r3, [pc, #192]	; (80017e0 <analoginputloopb+0x174>)
 800171e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001722:	b29b      	uxth	r3, r3
 8001724:	3b01      	subs	r3, #1
 8001726:	b29b      	uxth	r3, r3
 8001728:	b21a      	sxth	r2, r3
 800172a:	4b2d      	ldr	r3, [pc, #180]	; (80017e0 <analoginputloopb+0x174>)
 800172c:	801a      	strh	r2, [r3, #0]
	if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+1;
 800172e:	4b26      	ldr	r3, [pc, #152]	; (80017c8 <analoginputloopb+0x15c>)
 8001730:	881a      	ldrh	r2, [r3, #0]
 8001732:	4b2a      	ldr	r3, [pc, #168]	; (80017dc <analoginputloopb+0x170>)
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	429a      	cmp	r2, r3
 8001738:	d208      	bcs.n	800174c <analoginputloopb+0xe0>
 800173a:	4b29      	ldr	r3, [pc, #164]	; (80017e0 <analoginputloopb+0x174>)
 800173c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001740:	b29b      	uxth	r3, r3
 8001742:	3301      	adds	r3, #1
 8001744:	b29b      	uxth	r3, r3
 8001746:	b21a      	sxth	r2, r3
 8001748:	4b25      	ldr	r3, [pc, #148]	; (80017e0 <analoginputloopb+0x174>)
 800174a:	801a      	strh	r2, [r3, #0]


  if (enc2_temp>511) enc2_temp=511;  //mem overflow somewhere
 800174c:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <analoginputloopb+0x16c>)
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001754:	d303      	bcc.n	800175e <analoginputloopb+0xf2>
 8001756:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <analoginputloopb+0x16c>)
 8001758:	f240 12ff 	movw	r2, #511	; 0x1ff
 800175c:	801a      	strh	r2, [r3, #0]
	if (enc_dir>255) enc_dir=255;
 800175e:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <analoginputloopb+0x174>)
 8001760:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001764:	2bff      	cmp	r3, #255	; 0xff
 8001766:	dd02      	ble.n	800176e <analoginputloopb+0x102>
 8001768:	4b1d      	ldr	r3, [pc, #116]	; (80017e0 <analoginputloopb+0x174>)
 800176a:	22ff      	movs	r2, #255	; 0xff
 800176c:	801a      	strh	r2, [r3, #0]
			if (enc_dir<0) enc_dir=0;
 800176e:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <analoginputloopb+0x174>)
 8001770:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001774:	2b00      	cmp	r3, #0
 8001776:	da02      	bge.n	800177e <analoginputloopb+0x112>
 8001778:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <analoginputloopb+0x174>)
 800177a:	2200      	movs	r2, #0
 800177c:	801a      	strh	r2, [r3, #0]

			enc_tempB=enc_temp;
 800177e:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <analoginputloopb+0x15c>)
 8001780:	881a      	ldrh	r2, [r3, #0]
 8001782:	4b16      	ldr	r3, [pc, #88]	; (80017dc <analoginputloopb+0x170>)
 8001784:	801a      	strh	r2, [r3, #0]

			enc2_dir=enc2_temp; //temp to try source data
 8001786:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <analoginputloopb+0x16c>)
 8001788:	881a      	ldrh	r2, [r3, #0]
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <analoginputloopb+0x158>)
 800178c:	801a      	strh	r2, [r3, #0]


					enc2_tempB=enc2_temp; // to effective as counter not getting reset
 800178e:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <analoginputloopb+0x16c>)
 8001790:	881a      	ldrh	r2, [r3, #0]
 8001792:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <analoginputloopb+0x178>)
 8001794:	801a      	strh	r2, [r3, #0]


potValues[counterVarB]=(potSource[counterVarB]>>4) & 15 ;  // reduce values for now ,use original for others , slow count
 8001796:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <analoginputloopb+0x17c>)
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <analoginputloopb+0x180>)
 800179e:	5c9b      	ldrb	r3, [r3, r2]
 80017a0:	4a11      	ldr	r2, [pc, #68]	; (80017e8 <analoginputloopb+0x17c>)
 80017a2:	8812      	ldrh	r2, [r2, #0]
 80017a4:	091b      	lsrs	r3, r3, #4
 80017a6:	b2d9      	uxtb	r1, r3
 80017a8:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <analoginputloopb+0x184>)
 80017aa:	5499      	strb	r1, [r3, r2]


}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	200034dc 	.word	0x200034dc
 80017bc:	20000884 	.word	0x20000884
 80017c0:	20000885 	.word	0x20000885
 80017c4:	200034ca 	.word	0x200034ca
 80017c8:	200034c2 	.word	0x200034c2
 80017cc:	40000800 	.word	0x40000800
 80017d0:	20005981 	.word	0x20005981
 80017d4:	2000597c 	.word	0x2000597c
 80017d8:	200034c6 	.word	0x200034c6
 80017dc:	200034c4 	.word	0x200034c4
 80017e0:	200034cc 	.word	0x200034cc
 80017e4:	200034c8 	.word	0x200034c8
 80017e8:	20000888 	.word	0x20000888
 80017ec:	20000624 	.word	0x20000624
 80017f0:	20000424 	.word	0x20000424

080017f4 <display_init>:
void display_init(void){
 80017f4:	b5b0      	push	{r4, r5, r7, lr}
 80017f6:	b08a      	sub	sp, #40	; 0x28
 80017f8:	af00      	add	r7, sp, #0
	//uint8_t sp2_command=0xf8+(0<<1);
		 // uint16_t disp[]={  304,304,304,270,257,268,384,258,51,51,52,53,54,55,56,57,58,0};  // normal characters
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd 310 is extended instruction
 80017fa:	4b22      	ldr	r3, [pc, #136]	; (8001884 <display_init+0x90>)
 80017fc:	1d3c      	adds	r4, r7, #4
 80017fe:	461d      	mov	r5, r3
 8001800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001804:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001808:	682b      	ldr	r3, [r5, #0]
 800180a:	8023      	strh	r3, [r4, #0]
		  if (spi_send==0){         // sets data byte
 800180c:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <display_init+0x94>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d132      	bne.n	800187a <display_init+0x86>

switch(init){     //Remember every line advances +char on display ,,all this is mostly unneeded

default : init_b=init-6;displayBuffer2 ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 8001814:	4b1d      	ldr	r3, [pc, #116]	; (800188c <display_init+0x98>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	b29b      	uxth	r3, r3
 800181a:	3b06      	subs	r3, #6
 800181c:	b29a      	uxth	r2, r3
 800181e:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <display_init+0x9c>)
 8001820:	801a      	strh	r2, [r3, #0]
 8001822:	f000 fbb9 	bl	8001f98 <displayBuffer2>
 8001826:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <display_init+0x9c>)
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	461a      	mov	r2, r3
 800182c:	4b19      	ldr	r3, [pc, #100]	; (8001894 <display_init+0xa0>)
 800182e:	5c9b      	ldrb	r3, [r3, r2]
 8001830:	b29a      	uxth	r2, r3
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <display_init+0xa4>)
 8001834:	801a      	strh	r2, [r3, #0]
 8001836:	bf00      	nop
}


if (init<6)	{HAL_Delay(3);spi_hold=disp[init]  ; } //delay needs to go
 8001838:	4b14      	ldr	r3, [pc, #80]	; (800188c <display_init+0x98>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b05      	cmp	r3, #5
 800183e:	d80b      	bhi.n	8001858 <display_init+0x64>
 8001840:	2003      	movs	r0, #3
 8001842:	f004 f851 	bl	80058e8 <HAL_Delay>
 8001846:	4b11      	ldr	r3, [pc, #68]	; (800188c <display_init+0x98>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	3328      	adds	r3, #40	; 0x28
 800184e:	443b      	add	r3, r7
 8001850:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8001854:	4b10      	ldr	r3, [pc, #64]	; (8001898 <display_init+0xa4>)
 8001856:	801a      	strh	r2, [r3, #0]

init++;   // after 6 it quits the rest is not needed
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <display_init+0x98>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	3301      	adds	r3, #1
 800185e:	b2da      	uxtb	r2, r3
 8001860:	4b0a      	ldr	r3, [pc, #40]	; (800188c <display_init+0x98>)
 8001862:	701a      	strb	r2, [r3, #0]
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <display_init+0x94>)
 8001866:	2201      	movs	r2, #1
 8001868:	701a      	strb	r2, [r3, #0]
 800186a:	f7ff fe6b 	bl	8001544 <SPI_command>
 800186e:	4b06      	ldr	r3, [pc, #24]	; (8001888 <display_init+0x94>)
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <display_init+0xa8>)
 8001876:	2200      	movs	r2, #0
 8001878:	801a      	strh	r2, [r3, #0]


		  }

		//  if (init==5) display_fill();
}
 800187a:	bf00      	nop
 800187c:	3728      	adds	r7, #40	; 0x28
 800187e:	46bd      	mov	sp, r7
 8001880:	bdb0      	pop	{r4, r5, r7, pc}
 8001882:	bf00      	nop
 8001884:	0800ba1c 	.word	0x0800ba1c
 8001888:	200034d8 	.word	0x200034d8
 800188c:	200034d9 	.word	0x200034d9
 8001890:	200034da 	.word	0x200034da
 8001894:	20000000 	.word	0x20000000
 8001898:	200034d6 	.word	0x200034d6
 800189c:	200034d2 	.word	0x200034d2

080018a0 <gfx_send>:


void gfx_send(void){         // send spi to lcd from gfx ram
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0


			uint8_t spi_store[3];
			uint8_t spi_store2=0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	71fb      	strb	r3, [r7, #7]
			uint8_t spi_store3=gfx_ram[gfx_send_counter];
 80018aa:	4b24      	ldr	r3, [pc, #144]	; (800193c <gfx_send+0x9c>)
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	461a      	mov	r2, r3
 80018b0:	4b23      	ldr	r3, [pc, #140]	; (8001940 <gfx_send+0xa0>)
 80018b2:	5c9b      	ldrb	r3, [r3, r2]
 80018b4:	71bb      	strb	r3, [r7, #6]
	if (gfx_send_counter2>1) {spi_store2=250;
 80018b6:	4b23      	ldr	r3, [pc, #140]	; (8001944 <gfx_send+0xa4>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d902      	bls.n	80018c4 <gfx_send+0x24>
 80018be:	23fa      	movs	r3, #250	; 0xfa
 80018c0:	71fb      	strb	r3, [r7, #7]
 80018c2:	e001      	b.n	80018c8 <gfx_send+0x28>

			}

			else {spi_store2=248;    }//start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 80018c4:	23f8      	movs	r3, #248	; 0xf8
 80018c6:	71fb      	strb	r3, [r7, #7]


					spi_store[0]=spi_store2;
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	703b      	strb	r3, [r7, #0]
					spi_store[1]=((spi_store3>>4)<<4);
 80018cc:	79bb      	ldrb	r3, [r7, #6]
 80018ce:	091b      	lsrs	r3, r3, #4
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	011b      	lsls	r3, r3, #4
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	707b      	strb	r3, [r7, #1]
					spi_store[2]=((spi_store3&15)<<4);
 80018d8:	79bb      	ldrb	r3, [r7, #6]
 80018da:	011b      	lsls	r3, r3, #4
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	70bb      	strb	r3, [r7, #2]


						HAL_SPI_Transmit(&hspi2,spi_store,3,3);  // ok
 80018e0:	4639      	mov	r1, r7
 80018e2:	2303      	movs	r3, #3
 80018e4:	2203      	movs	r2, #3
 80018e6:	4818      	ldr	r0, [pc, #96]	; (8001948 <gfx_send+0xa8>)
 80018e8:	f007 fbdb 	bl	80090a2 <HAL_SPI_Transmit>
					if (gfx_send_counter2==17 ) { gfx_send_counter2=0;    } else gfx_send_counter2++; // check elsewhere if changing gfx_send_counter
 80018ec:	4b15      	ldr	r3, [pc, #84]	; (8001944 <gfx_send+0xa4>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b11      	cmp	r3, #17
 80018f2:	d103      	bne.n	80018fc <gfx_send+0x5c>
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <gfx_send+0xa4>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]
 80018fa:	e005      	b.n	8001908 <gfx_send+0x68>
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <gfx_send+0xa4>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	3301      	adds	r3, #1
 8001902:	b2da      	uxtb	r2, r3
 8001904:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <gfx_send+0xa4>)
 8001906:	701a      	strb	r2, [r3, #0]
			if (gfx_send_counter==1151 ) { gfx_send_counter=0; disp_end=1; gfx_send_counter2=0;    } else gfx_send_counter++; ;
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <gfx_send+0x9c>)
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	f240 427f 	movw	r2, #1151	; 0x47f
 8001910:	4293      	cmp	r3, r2
 8001912:	d109      	bne.n	8001928 <gfx_send+0x88>
 8001914:	4b09      	ldr	r3, [pc, #36]	; (800193c <gfx_send+0x9c>)
 8001916:	2200      	movs	r2, #0
 8001918:	801a      	strh	r2, [r3, #0]
 800191a:	4b0c      	ldr	r3, [pc, #48]	; (800194c <gfx_send+0xac>)
 800191c:	2201      	movs	r2, #1
 800191e:	701a      	strb	r2, [r3, #0]
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <gfx_send+0xa4>)
 8001922:	2200      	movs	r2, #0
 8001924:	701a      	strb	r2, [r3, #0]

		}
 8001926:	e005      	b.n	8001934 <gfx_send+0x94>
			if (gfx_send_counter==1151 ) { gfx_send_counter=0; disp_end=1; gfx_send_counter2=0;    } else gfx_send_counter++; ;
 8001928:	4b04      	ldr	r3, [pc, #16]	; (800193c <gfx_send+0x9c>)
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	3301      	adds	r3, #1
 800192e:	b29a      	uxth	r2, r3
 8001930:	4b02      	ldr	r3, [pc, #8]	; (800193c <gfx_send+0x9c>)
 8001932:	801a      	strh	r2, [r3, #0]
		}
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20004006 	.word	0x20004006
 8001940:	20003b84 	.word	0x20003b84
 8001944:	20004008 	.word	0x20004008
 8001948:	20010108 	.word	0x20010108
 800194c:	20004016 	.word	0x20004016

08001950 <gfx_clear>:

void gfx_clear(void){     // simple gfx ram clear ,besides feedback
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0

	for (n=0;n<1152 ;n=n+18)    {
 8001954:	4b19      	ldr	r3, [pc, #100]	; (80019bc <gfx_clear+0x6c>)
 8001956:	2200      	movs	r2, #0
 8001958:	801a      	strh	r2, [r3, #0]
 800195a:	e01c      	b.n	8001996 <gfx_clear+0x46>
				for (i=2;i<18;i++){ gfx_ram[n+i] =0;
 800195c:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <gfx_clear+0x70>)
 800195e:	2202      	movs	r2, #2
 8001960:	801a      	strh	r2, [r3, #0]
 8001962:	e00e      	b.n	8001982 <gfx_clear+0x32>
 8001964:	4b15      	ldr	r3, [pc, #84]	; (80019bc <gfx_clear+0x6c>)
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <gfx_clear+0x70>)
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	4413      	add	r3, r2
 8001970:	4a14      	ldr	r2, [pc, #80]	; (80019c4 <gfx_clear+0x74>)
 8001972:	2100      	movs	r1, #0
 8001974:	54d1      	strb	r1, [r2, r3]
 8001976:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <gfx_clear+0x70>)
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	3301      	adds	r3, #1
 800197c:	b29a      	uxth	r2, r3
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <gfx_clear+0x70>)
 8001980:	801a      	strh	r2, [r3, #0]
 8001982:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <gfx_clear+0x70>)
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	2b11      	cmp	r3, #17
 8001988:	d9ec      	bls.n	8001964 <gfx_clear+0x14>
	for (n=0;n<1152 ;n=n+18)    {
 800198a:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <gfx_clear+0x6c>)
 800198c:	881b      	ldrh	r3, [r3, #0]
 800198e:	3312      	adds	r3, #18
 8001990:	b29a      	uxth	r2, r3
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <gfx_clear+0x6c>)
 8001994:	801a      	strh	r2, [r3, #0]
 8001996:	4b09      	ldr	r3, [pc, #36]	; (80019bc <gfx_clear+0x6c>)
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800199e:	d3dd      	bcc.n	800195c <gfx_clear+0xc>

				}  }
	 gfx_send_swap=0;  // disable line skip
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <gfx_clear+0x78>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
	 gfx_send_counter=0;    //reset page
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <gfx_clear+0x7c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	801a      	strh	r2, [r3, #0]
	 disp_end=0;     //  should disable display process till one page
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <gfx_clear+0x80>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]

}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	2000088c 	.word	0x2000088c
 80019c0:	20000892 	.word	0x20000892
 80019c4:	20003b84 	.word	0x20003b84
 80019c8:	2000400a 	.word	0x2000400a
 80019cc:	20004006 	.word	0x20004006
 80019d0:	20004016 	.word	0x20004016

080019d4 <display_clear>:

		 gfx_send();

	 }  }

void display_clear (void){ //  simple character clear on default menu3
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0

	uint16_t disp_counter=0;
 80019da:	2300      	movs	r3, #0
 80019dc:	80fb      	strh	r3, [r7, #6]
	for (disp_counter=0;disp_counter<default_menu3_size;disp_counter++){
 80019de:	2300      	movs	r3, #0
 80019e0:	80fb      	strh	r3, [r7, #6]
 80019e2:	e006      	b.n	80019f2 <display_clear+0x1e>
		default_menu3[disp_counter]=47;
 80019e4:	88fb      	ldrh	r3, [r7, #6]
 80019e6:	4a09      	ldr	r2, [pc, #36]	; (8001a0c <display_clear+0x38>)
 80019e8:	212f      	movs	r1, #47	; 0x2f
 80019ea:	54d1      	strb	r1, [r2, r3]
	for (disp_counter=0;disp_counter<default_menu3_size;disp_counter++){
 80019ec:	88fb      	ldrh	r3, [r7, #6]
 80019ee:	3301      	adds	r3, #1
 80019f0:	80fb      	strh	r3, [r7, #6]
 80019f2:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <display_clear+0x3c>)
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	88fa      	ldrh	r2, [r7, #6]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d3f3      	bcc.n	80019e4 <display_clear+0x10>
	}


}
 80019fc:	bf00      	nop
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	2000fbb4 	.word	0x2000fbb4
 8001a10:	2000597a 	.word	0x2000597a

08001a14 <display_generate>:
void display_generate(void){    // display character generate, 1+1+16 chars
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0

	gfx_clear_flag=0;
 8001a18:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <display_generate+0x48>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
	for (i=0;i<18;i++) {
 8001a1e:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <display_generate+0x4c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	801a      	strh	r2, [r3, #0]
 8001a24:	e009      	b.n	8001a3a <display_generate+0x26>
	display_process();
 8001a26:	f000 f863 	bl	8001af0 <display_process>
		  displayBuffer2();} // 5 cycles max for the lot or  0.2ms
 8001a2a:	f000 fab5 	bl	8001f98 <displayBuffer2>
	for (i=0;i<18;i++) {
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <display_generate+0x4c>)
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	3301      	adds	r3, #1
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <display_generate+0x4c>)
 8001a38:	801a      	strh	r2, [r3, #0]
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <display_generate+0x4c>)
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	2b11      	cmp	r3, #17
 8001a40:	d9f1      	bls.n	8001a26 <display_generate+0x12>
	 if(!gfx_clear_flag)   gfx_send_swap=1;   // enable line swapping
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <display_generate+0x48>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d102      	bne.n	8001a50 <display_generate+0x3c>
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <display_generate+0x50>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	701a      	strb	r2, [r3, #0]
	 disp_end=0;   ///reset till next full page
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <display_generate+0x54>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]

	//  if (!disp_stepper) break;

}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20005986 	.word	0x20005986
 8001a60:	20000892 	.word	0x20000892
 8001a64:	2000400a 	.word	0x2000400a
 8001a68:	20004016 	.word	0x20004016

08001a6c <display_fill>:

void display_fill(void)  {     // full update of gfx memory, ok
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
loop_counter3=1;
 8001a72:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <display_fill+0x6c>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	701a      	strb	r2, [r3, #0]
uint16_t fill_counter= 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	80fb      	strh	r3, [r7, #6]
uint16_t init_b1=init_b;
 8001a7c:	4b17      	ldr	r3, [pc, #92]	; (8001adc <display_fill+0x70>)
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	80bb      	strh	r3, [r7, #4]
uint16_t init_bs=init_b&896;   // get msb
 8001a82:	4b16      	ldr	r3, [pc, #88]	; (8001adc <display_fill+0x70>)
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8001a8a:	807b      	strh	r3, [r7, #2]
fill_counter=fill_counter+init_bs; // add msb from init b
 8001a8c:	88fa      	ldrh	r2, [r7, #6]
 8001a8e:	887b      	ldrh	r3, [r7, #2]
 8001a90:	4413      	add	r3, r2
 8001a92:	80fb      	strh	r3, [r7, #6]

while ((fill_counter&896)==init_bs)   // skip when over a page something  127+
 8001a94:	e00a      	b.n	8001aac <display_fill+0x40>
{
	init_b=fill_counter; // upcount
 8001a96:	4a11      	ldr	r2, [pc, #68]	; (8001adc <display_fill+0x70>)
 8001a98:	88fb      	ldrh	r3, [r7, #6]
 8001a9a:	8013      	strh	r3, [r2, #0]

	disp_stepper=1;   // first character
 8001a9c:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <display_fill+0x74>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	701a      	strb	r2, [r3, #0]
	displayBuffer2();	//read default menu
 8001aa2:	f000 fa79 	bl	8001f98 <displayBuffer2>
	fill_counter++;
 8001aa6:	88fb      	ldrh	r3, [r7, #6]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	80fb      	strh	r3, [r7, #6]
while ((fill_counter&896)==init_bs)   // skip when over a page something  127+
 8001aac:	88fb      	ldrh	r3, [r7, #6]
 8001aae:	f403 7260 	and.w	r2, r3, #896	; 0x380
 8001ab2:	887b      	ldrh	r3, [r7, #2]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d0ee      	beq.n	8001a96 <display_fill+0x2a>
}
init_b=init_b1; // write back original value
 8001ab8:	4a08      	ldr	r2, [pc, #32]	; (8001adc <display_fill+0x70>)
 8001aba:	88bb      	ldrh	r3, [r7, #4]
 8001abc:	8013      	strh	r3, [r2, #0]
gfx_send_swap=0;  // disable line skip
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <display_fill+0x78>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
	 gfx_send_counter=0;    //reset page
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <display_fill+0x7c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	801a      	strh	r2, [r3, #0]
	 disp_end=0;     //  should disable display process till one page
 8001aca:	4b08      	ldr	r3, [pc, #32]	; (8001aec <display_fill+0x80>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]


	}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20004017 	.word	0x20004017
 8001adc:	200034da 	.word	0x200034da
 8001ae0:	20000152 	.word	0x20000152
 8001ae4:	2000400a 	.word	0x2000400a
 8001ae8:	20004006 	.word	0x20004006
 8001aec:	20004016 	.word	0x20004016

08001af0 <display_process>:



void display_process(void){							// keep data processing here
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
uint16_t feedback_loc=(init_b&896)+107;
 8001af6:	4b80      	ldr	r3, [pc, #512]	; (8001cf8 <display_process+0x208>)
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	336b      	adds	r3, #107	; 0x6b
 8001b02:	81bb      	strh	r3, [r7, #12]

	if ((enc2_tempC==enc2_dir) && (!enc2_add))  {
 8001b04:	4b7d      	ldr	r3, [pc, #500]	; (8001cfc <display_process+0x20c>)
 8001b06:	f993 3000 	ldrsb.w	r3, [r3]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	4b7c      	ldr	r3, [pc, #496]	; (8001d00 <display_process+0x210>)
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d112      	bne.n	8001b3a <display_process+0x4a>
 8001b14:	4b7b      	ldr	r3, [pc, #492]	; (8001d04 <display_process+0x214>)
 8001b16:	f993 3000 	ldrsb.w	r3, [r3]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10d      	bne.n	8001b3a <display_process+0x4a>
		if ((disp_stepper==5)&&(!target_display))  {enc2_add=2; 	disp_stepper=17;}   	 // wait till enc2_dir  hasn't changed ,jump and then change feedback
 8001b1e:	4b7a      	ldr	r3, [pc, #488]	; (8001d08 <display_process+0x218>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b05      	cmp	r3, #5
 8001b24:	d109      	bne.n	8001b3a <display_process+0x4a>
 8001b26:	4b79      	ldr	r3, [pc, #484]	; (8001d0c <display_process+0x21c>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d105      	bne.n	8001b3a <display_process+0x4a>
 8001b2e:	4b75      	ldr	r3, [pc, #468]	; (8001d04 <display_process+0x214>)
 8001b30:	2202      	movs	r2, #2
 8001b32:	701a      	strb	r2, [r3, #0]
 8001b34:	4b74      	ldr	r3, [pc, #464]	; (8001d08 <display_process+0x218>)
 8001b36:	2211      	movs	r2, #17
 8001b38:	701a      	strb	r2, [r3, #0]
			}

	if (disp_stepper>1)	init_b=feedback_loc+16+(disp_stepper);  // write lcd3
 8001b3a:	4b73      	ldr	r3, [pc, #460]	; (8001d08 <display_process+0x218>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d909      	bls.n	8001b56 <display_process+0x66>
 8001b42:	4b71      	ldr	r3, [pc, #452]	; (8001d08 <display_process+0x218>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	89bb      	ldrh	r3, [r7, #12]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	3310      	adds	r3, #16
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	4b69      	ldr	r3, [pc, #420]	; (8001cf8 <display_process+0x208>)
 8001b54:	801a      	strh	r2, [r3, #0]
	if (disp_stepper>4)	init_b=feedback_loc+(disp_stepper);  // write feedback line
 8001b56:	4b6c      	ldr	r3, [pc, #432]	; (8001d08 <display_process+0x218>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	d907      	bls.n	8001b6e <display_process+0x7e>
 8001b5e:	4b6a      	ldr	r3, [pc, #424]	; (8001d08 <display_process+0x218>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	89bb      	ldrh	r3, [r7, #12]
 8001b66:	4413      	add	r3, r2
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	4b63      	ldr	r3, [pc, #396]	; (8001cf8 <display_process+0x208>)
 8001b6c:	801a      	strh	r2, [r3, #0]

	if ((lcd_temp!=enc_dir)  && (enc2_tempC==enc2_dir) )   {*menu_vars_var=enc_dir;   // enc2_dir =same enc_dir=changed
 8001b6e:	4b68      	ldr	r3, [pc, #416]	; (8001d10 <display_process+0x220>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	461a      	mov	r2, r3
 8001b74:	4b67      	ldr	r3, [pc, #412]	; (8001d14 <display_process+0x224>)
 8001b76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d014      	beq.n	8001ba8 <display_process+0xb8>
 8001b7e:	4b5f      	ldr	r3, [pc, #380]	; (8001cfc <display_process+0x20c>)
 8001b80:	f993 3000 	ldrsb.w	r3, [r3]
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b5e      	ldr	r3, [pc, #376]	; (8001d00 <display_process+0x210>)
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d10c      	bne.n	8001ba8 <display_process+0xb8>
 8001b8e:	4b61      	ldr	r3, [pc, #388]	; (8001d14 <display_process+0x224>)
 8001b90:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b94:	4b60      	ldr	r3, [pc, #384]	; (8001d18 <display_process+0x228>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	b2d2      	uxtb	r2, r2
 8001b9a:	701a      	strb	r2, [r3, #0]
	lcd_temp=enc_dir;  }
 8001b9c:	4b5d      	ldr	r3, [pc, #372]	; (8001d14 <display_process+0x224>)
 8001b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	4b5a      	ldr	r3, [pc, #360]	; (8001d10 <display_process+0x220>)
 8001ba6:	701a      	strb	r2, [r3, #0]



	if ((disp_stepper==0) && (enc2_tempC!=enc2_dir) && (!enc2_add))  {      // wait till loop end , ok
 8001ba8:	4b57      	ldr	r3, [pc, #348]	; (8001d08 <display_process+0x218>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f040 8082 	bne.w	8001cb6 <display_process+0x1c6>
 8001bb2:	4b52      	ldr	r3, [pc, #328]	; (8001cfc <display_process+0x20c>)
 8001bb4:	f993 3000 	ldrsb.w	r3, [r3]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b51      	ldr	r3, [pc, #324]	; (8001d00 <display_process+0x210>)
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d079      	beq.n	8001cb6 <display_process+0x1c6>
 8001bc2:	4b50      	ldr	r3, [pc, #320]	; (8001d04 <display_process+0x214>)
 8001bc4:	f993 3000 	ldrsb.w	r3, [r3]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d174      	bne.n	8001cb6 <display_process+0x1c6>

	if  (enc2_tempC<enc2_dir)	 enc2_add=1;   									// use this to set up or down count for variables , might change
 8001bcc:	4b4b      	ldr	r3, [pc, #300]	; (8001cfc <display_process+0x20c>)
 8001bce:	f993 3000 	ldrsb.w	r3, [r3]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	4b4a      	ldr	r3, [pc, #296]	; (8001d00 <display_process+0x210>)
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	da02      	bge.n	8001be2 <display_process+0xf2>
 8001bdc:	4b49      	ldr	r3, [pc, #292]	; (8001d04 <display_process+0x214>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	701a      	strb	r2, [r3, #0]
		if  (enc2_tempC>enc2_dir)	 enc2_add=-1;    // slow but 1 step at a time
 8001be2:	4b46      	ldr	r3, [pc, #280]	; (8001cfc <display_process+0x20c>)
 8001be4:	f993 3000 	ldrsb.w	r3, [r3]
 8001be8:	461a      	mov	r2, r3
 8001bea:	4b45      	ldr	r3, [pc, #276]	; (8001d00 <display_process+0x210>)
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	dd02      	ble.n	8001bf8 <display_process+0x108>
 8001bf2:	4b44      	ldr	r3, [pc, #272]	; (8001d04 <display_process+0x214>)
 8001bf4:	22ff      	movs	r2, #255	; 0xff
 8001bf6:	701a      	strb	r2, [r3, #0]
		if  (enc2_tempC<enc2_dir)	 enc2_add=+(enc2_dir-enc2_tempC);   	//  fast but skips
 8001bf8:	4b40      	ldr	r3, [pc, #256]	; (8001cfc <display_process+0x20c>)
 8001bfa:	f993 3000 	ldrsb.w	r3, [r3]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	4b3f      	ldr	r3, [pc, #252]	; (8001d00 <display_process+0x210>)
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	da0b      	bge.n	8001c20 <display_process+0x130>
 8001c08:	4b3d      	ldr	r3, [pc, #244]	; (8001d00 <display_process+0x210>)
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	4b3b      	ldr	r3, [pc, #236]	; (8001cfc <display_process+0x20c>)
 8001c10:	f993 3000 	ldrsb.w	r3, [r3]
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	b25a      	sxtb	r2, r3
 8001c1c:	4b39      	ldr	r3, [pc, #228]	; (8001d04 <display_process+0x214>)
 8001c1e:	701a      	strb	r2, [r3, #0]

		if  (enc2_tempC>enc2_dir)	 enc2_add=-(enc2_tempC-enc2_dir);
 8001c20:	4b36      	ldr	r3, [pc, #216]	; (8001cfc <display_process+0x20c>)
 8001c22:	f993 3000 	ldrsb.w	r3, [r3]
 8001c26:	461a      	mov	r2, r3
 8001c28:	4b35      	ldr	r3, [pc, #212]	; (8001d00 <display_process+0x210>)
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	dd0b      	ble.n	8001c48 <display_process+0x158>
 8001c30:	4b33      	ldr	r3, [pc, #204]	; (8001d00 <display_process+0x210>)
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	4b31      	ldr	r3, [pc, #196]	; (8001cfc <display_process+0x20c>)
 8001c38:	f993 3000 	ldrsb.w	r3, [r3]
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	b25a      	sxtb	r2, r3
 8001c44:	4b2f      	ldr	r3, [pc, #188]	; (8001d04 <display_process+0x214>)
 8001c46:	701a      	strb	r2, [r3, #0]


		enc2_tempC=enc2_dir;	   // loop back until change
 8001c48:	4b2d      	ldr	r3, [pc, #180]	; (8001d00 <display_process+0x210>)
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	b25a      	sxtb	r2, r3
 8001c4e:	4b2b      	ldr	r3, [pc, #172]	; (8001cfc <display_process+0x20c>)
 8001c50:	701a      	strb	r2, [r3, #0]
		if ((enc_out1>=0)  &&  (enc_out1<=menu_title_count))    {enc_out1=enc_out1+enc2_add;}   // count up or down within limits
 8001c52:	4b32      	ldr	r3, [pc, #200]	; (8001d1c <display_process+0x22c>)
 8001c54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	db14      	blt.n	8001c86 <display_process+0x196>
 8001c5c:	4b2f      	ldr	r3, [pc, #188]	; (8001d1c <display_process+0x22c>)
 8001c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c62:	461a      	mov	r2, r3
 8001c64:	4b2e      	ldr	r3, [pc, #184]	; (8001d20 <display_process+0x230>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	dc0c      	bgt.n	8001c86 <display_process+0x196>
 8001c6c:	4b25      	ldr	r3, [pc, #148]	; (8001d04 <display_process+0x214>)
 8001c6e:	f993 3000 	ldrsb.w	r3, [r3]
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	4b29      	ldr	r3, [pc, #164]	; (8001d1c <display_process+0x22c>)
 8001c76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	b21a      	sxth	r2, r3
 8001c82:	4b26      	ldr	r3, [pc, #152]	; (8001d1c <display_process+0x22c>)
 8001c84:	801a      	strh	r2, [r3, #0]
		if (enc_out1<0)  {  enc_out1=menu_title_count; }
 8001c86:	4b25      	ldr	r3, [pc, #148]	; (8001d1c <display_process+0x22c>)
 8001c88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	da04      	bge.n	8001c9a <display_process+0x1aa>
 8001c90:	4b23      	ldr	r3, [pc, #140]	; (8001d20 <display_process+0x230>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	b21a      	sxth	r2, r3
 8001c96:	4b21      	ldr	r3, [pc, #132]	; (8001d1c <display_process+0x22c>)
 8001c98:	801a      	strh	r2, [r3, #0]
		if (enc_out1>menu_title_count) enc_out1=0;
 8001c9a:	4b20      	ldr	r3, [pc, #128]	; (8001d1c <display_process+0x22c>)
 8001c9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <display_process+0x230>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	dd02      	ble.n	8001cb0 <display_process+0x1c0>
 8001caa:	4b1c      	ldr	r3, [pc, #112]	; (8001d1c <display_process+0x22c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	801a      	strh	r2, [r3, #0]
		enc2_add=2;
 8001cb0:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <display_process+0x214>)
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	701a      	strb	r2, [r3, #0]

	}


	if ((disp_stepper==0) && (enc2_add==2))			// skip if no input for enc2 , also maybe wait till enc2 stopped moving
 8001cb6:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <display_process+0x218>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d170      	bne.n	8001da0 <display_process+0x2b0>
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <display_process+0x214>)
 8001cc0:	f993 3000 	ldrsb.w	r3, [r3]
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d16b      	bne.n	8001da0 <display_process+0x2b0>
	{



	uint8_t crap_hold9=(menu_title_lut[enc_out1]>>16)&255;   // look up up menu_titles_final
 8001cc8:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <display_process+0x22c>)
 8001cca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <display_process+0x234>)
 8001cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd6:	0c1b      	lsrs	r3, r3, #16
 8001cd8:	72fb      	strb	r3, [r7, #11]
	if (crap_hold9==5) target_display=1;   // check if LFO.target is on cursor , may use for other things
 8001cda:	7afb      	ldrb	r3, [r7, #11]
 8001cdc:	2b05      	cmp	r3, #5
 8001cde:	d103      	bne.n	8001ce8 <display_process+0x1f8>
 8001ce0:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <display_process+0x21c>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	701a      	strb	r2, [r3, #0]
 8001ce6:	e022      	b.n	8001d2e <display_process+0x23e>
	else if (crap_hold9==36) target_display=2;   else target_display=0;
 8001ce8:	7afb      	ldrb	r3, [r7, #11]
 8001cea:	2b24      	cmp	r3, #36	; 0x24
 8001cec:	d11c      	bne.n	8001d28 <display_process+0x238>
 8001cee:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <display_process+0x21c>)
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	701a      	strb	r2, [r3, #0]
 8001cf4:	e01b      	b.n	8001d2e <display_process+0x23e>
 8001cf6:	bf00      	nop
 8001cf8:	200034da 	.word	0x200034da
 8001cfc:	20000150 	.word	0x20000150
 8001d00:	200034ca 	.word	0x200034ca
 8001d04:	20000151 	.word	0x20000151
 8001d08:	20000152 	.word	0x20000152
 8001d0c:	20005983 	.word	0x20005983
 8001d10:	20005982 	.word	0x20005982
 8001d14:	200034cc 	.word	0x200034cc
 8001d18:	2000596c 	.word	0x2000596c
 8001d1c:	20000220 	.word	0x20000220
 8001d20:	20005369 	.word	0x20005369
 8001d24:	2000536c 	.word	0x2000536c
 8001d28:	4b87      	ldr	r3, [pc, #540]	; (8001f48 <display_process+0x458>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	701a      	strb	r2, [r3, #0]

	// fetch values for last line or cursor

	 memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+crap_hold9),8);   // copy feedback data for reading,ok
 8001d2e:	89bb      	ldrh	r3, [r7, #12]
 8001d30:	3308      	adds	r3, #8
 8001d32:	4a86      	ldr	r2, [pc, #536]	; (8001f4c <display_process+0x45c>)
 8001d34:	1898      	adds	r0, r3, r2
 8001d36:	7afb      	ldrb	r3, [r7, #11]
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4a85      	ldr	r2, [pc, #532]	; (8001f50 <display_process+0x460>)
 8001d3c:	4413      	add	r3, r2
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2208      	movs	r2, #8
 8001d42:	4619      	mov	r1, r3
 8001d44:	f009 fbcc 	bl	800b4e0 <memcpy>
	 memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 8001d48:	7afb      	ldrb	r3, [r7, #11]
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4a80      	ldr	r2, [pc, #512]	; (8001f50 <display_process+0x460>)
 8001d4e:	4413      	add	r3, r2
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	4b80      	ldr	r3, [pc, #512]	; (8001f54 <display_process+0x464>)
 8001d54:	6810      	ldr	r0, [r2, #0]
 8001d56:	6851      	ldr	r1, [r2, #4]
 8001d58:	c303      	stmia	r3!, {r0, r1}

	 char temp_char[]="  ";
 8001d5a:	4a7f      	ldr	r2, [pc, #508]	; (8001f58 <display_process+0x468>)
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	4611      	mov	r1, r2
 8001d62:	8019      	strh	r1, [r3, #0]
 8001d64:	3302      	adds	r3, #2
 8001d66:	0c12      	lsrs	r2, r2, #16
 8001d68:	701a      	strb	r2, [r3, #0]
	 memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 8001d6a:	4b7c      	ldr	r3, [pc, #496]	; (8001f5c <display_process+0x46c>)
 8001d6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	461a      	mov	r2, r3
 8001d74:	4b7a      	ldr	r3, [pc, #488]	; (8001f60 <display_process+0x470>)
 8001d76:	4413      	add	r3, r2
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	80bb      	strh	r3, [r7, #4]
	 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 8001d7e:	1d3b      	adds	r3, r7, #4
 8001d80:	4618      	mov	r0, r3
 8001d82:	f009 fb7f 	bl	800b484 <atoi>
 8001d86:	4603      	mov	r3, r0
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	4b76      	ldr	r3, [pc, #472]	; (8001f64 <display_process+0x474>)
 8001d8c:	701a      	strb	r2, [r3, #0]


	 menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8001d8e:	4b75      	ldr	r3, [pc, #468]	; (8001f64 <display_process+0x474>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	4619      	mov	r1, r3
 8001d94:	486f      	ldr	r0, [pc, #444]	; (8001f54 <display_process+0x464>)
 8001d96:	f7fe fedf 	bl	8000b58 <menu_vars>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4a72      	ldr	r2, [pc, #456]	; (8001f68 <display_process+0x478>)
 8001d9e:	6013      	str	r3, [r2, #0]

	    // grab value on ptr address , also write first char , ok

	}

	if ((disp_stepper==0) || (disp_stepper==1))   // repeat first character
 8001da0:	4b72      	ldr	r3, [pc, #456]	; (8001f6c <display_process+0x47c>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <display_process+0x2c0>
 8001da8:	4b70      	ldr	r3, [pc, #448]	; (8001f6c <display_process+0x47c>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d14d      	bne.n	8001e4c <display_process+0x35c>
	{


		uint16_t init_holder=init_b;
 8001db0:	4b6f      	ldr	r3, [pc, #444]	; (8001f70 <display_process+0x480>)
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	813b      	strh	r3, [r7, #8]

		init_b= menu_title_lut[enc_out1];    // this only grabs menu_title_count (&255)      , problem maybe here
 8001db6:	4b69      	ldr	r3, [pc, #420]	; (8001f5c <display_process+0x46c>)
 8001db8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4b6d      	ldr	r3, [pc, #436]	; (8001f74 <display_process+0x484>)
 8001dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	4b6a      	ldr	r3, [pc, #424]	; (8001f70 <display_process+0x480>)
 8001dc8:	801a      	strh	r2, [r3, #0]
		//	if (init_b>(feedback_loc+3) ) init_b=init_b+16;// skip feedback line
		if ((init_b&896)!=(init_holder&896)) {display_fill(); gfx_clear_flag=1; } // detect x over , not perfect
 8001dca:	4b69      	ldr	r3, [pc, #420]	; (8001f70 <display_process+0x480>)
 8001dcc:	881a      	ldrh	r2, [r3, #0]
 8001dce:	893b      	ldrh	r3, [r7, #8]
 8001dd0:	4053      	eors	r3, r2
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d004      	beq.n	8001de6 <display_process+0x2f6>
 8001ddc:	f7ff fe46 	bl	8001a6c <display_fill>
 8001de0:	4b65      	ldr	r3, [pc, #404]	; (8001f78 <display_process+0x488>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	701a      	strb	r2, [r3, #0]

		lcd_out3=*menu_vars_var;
 8001de6:	4b60      	ldr	r3, [pc, #384]	; (8001f68 <display_process+0x478>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	4b63      	ldr	r3, [pc, #396]	; (8001f7c <display_process+0x48c>)
 8001df0:	801a      	strh	r2, [r3, #0]
		div_limit=lcd_out3;
 8001df2:	4b62      	ldr	r3, [pc, #392]	; (8001f7c <display_process+0x48c>)
 8001df4:	881b      	ldrh	r3, [r3, #0]
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	4b61      	ldr	r3, [pc, #388]	; (8001f80 <display_process+0x490>)
 8001dfa:	701a      	strb	r2, [r3, #0]
		if (lcd_out3>10)							div_limit= lcd_out3>>2;
 8001dfc:	4b5f      	ldr	r3, [pc, #380]	; (8001f7c <display_process+0x48c>)
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	2b0a      	cmp	r3, #10
 8001e02:	d906      	bls.n	8001e12 <display_process+0x322>
 8001e04:	4b5d      	ldr	r3, [pc, #372]	; (8001f7c <display_process+0x48c>)
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	089b      	lsrs	r3, r3, #2
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4b5c      	ldr	r3, [pc, #368]	; (8001f80 <display_process+0x490>)
 8001e10:	701a      	strb	r2, [r3, #0]
		if (lcd_out3>40)							div_limit= lcd_out3>>5;
 8001e12:	4b5a      	ldr	r3, [pc, #360]	; (8001f7c <display_process+0x48c>)
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	2b28      	cmp	r3, #40	; 0x28
 8001e18:	d906      	bls.n	8001e28 <display_process+0x338>
 8001e1a:	4b58      	ldr	r3, [pc, #352]	; (8001f7c <display_process+0x48c>)
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	095b      	lsrs	r3, r3, #5
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	4b56      	ldr	r3, [pc, #344]	; (8001f80 <display_process+0x490>)
 8001e26:	701a      	strb	r2, [r3, #0]

		default_menu3[init_b]=div_limit+48; lcd_temp=lcd_out3; enc_dir=lcd_temp;       } // force enc_dir
 8001e28:	4b55      	ldr	r3, [pc, #340]	; (8001f80 <display_process+0x490>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	4a50      	ldr	r2, [pc, #320]	; (8001f70 <display_process+0x480>)
 8001e2e:	8812      	ldrh	r2, [r2, #0]
 8001e30:	3330      	adds	r3, #48	; 0x30
 8001e32:	b2d9      	uxtb	r1, r3
 8001e34:	4b45      	ldr	r3, [pc, #276]	; (8001f4c <display_process+0x45c>)
 8001e36:	5499      	strb	r1, [r3, r2]
 8001e38:	4b50      	ldr	r3, [pc, #320]	; (8001f7c <display_process+0x48c>)
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	4b51      	ldr	r3, [pc, #324]	; (8001f84 <display_process+0x494>)
 8001e40:	701a      	strb	r2, [r3, #0]
 8001e42:	4b50      	ldr	r3, [pc, #320]	; (8001f84 <display_process+0x494>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	b21a      	sxth	r2, r3
 8001e48:	4b4f      	ldr	r3, [pc, #316]	; (8001f88 <display_process+0x498>)
 8001e4a:	801a      	strh	r2, [r3, #0]

	if (disp_stepper>4) {default_menu3[feedback_loc+5]=menu_index_list[enc_out1<<1];   	default_menu3[feedback_loc+6]=menu_index_list[(enc_out1<<1)+1];}   // index display
 8001e4c:	4b47      	ldr	r3, [pc, #284]	; (8001f6c <display_process+0x47c>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b04      	cmp	r3, #4
 8001e52:	d914      	bls.n	8001e7e <display_process+0x38e>
 8001e54:	4b41      	ldr	r3, [pc, #260]	; (8001f5c <display_process+0x46c>)
 8001e56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e5a:	005a      	lsls	r2, r3, #1
 8001e5c:	89bb      	ldrh	r3, [r7, #12]
 8001e5e:	3305      	adds	r3, #5
 8001e60:	493f      	ldr	r1, [pc, #252]	; (8001f60 <display_process+0x470>)
 8001e62:	5c89      	ldrb	r1, [r1, r2]
 8001e64:	4a39      	ldr	r2, [pc, #228]	; (8001f4c <display_process+0x45c>)
 8001e66:	54d1      	strb	r1, [r2, r3]
 8001e68:	4b3c      	ldr	r3, [pc, #240]	; (8001f5c <display_process+0x46c>)
 8001e6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	89bb      	ldrh	r3, [r7, #12]
 8001e74:	3306      	adds	r3, #6
 8001e76:	493a      	ldr	r1, [pc, #232]	; (8001f60 <display_process+0x470>)
 8001e78:	5c89      	ldrb	r1, [r1, r2]
 8001e7a:	4a34      	ldr	r2, [pc, #208]	; (8001f4c <display_process+0x45c>)
 8001e7c:	54d1      	strb	r1, [r2, r3]

	if ((target_display) &&   (disp_stepper>4))      // write LFO.target display , might use it for other things too
 8001e7e:	4b32      	ldr	r3, [pc, #200]	; (8001f48 <display_process+0x458>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d02e      	beq.n	8001ee4 <display_process+0x3f4>
 8001e86:	4b39      	ldr	r3, [pc, #228]	; (8001f6c <display_process+0x47c>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	d92a      	bls.n	8001ee4 <display_process+0x3f4>
	{
		uint8_t target_tmp1=*menu_vars_var ;
 8001e8e:	4b36      	ldr	r3, [pc, #216]	; (8001f68 <display_process+0x478>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	73fb      	strb	r3, [r7, #15]
		if (target_tmp1>=menu_lookup_count) target_tmp1=0;    // check in case
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	2b30      	cmp	r3, #48	; 0x30
 8001e9a:	d901      	bls.n	8001ea0 <display_process+0x3b0>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	73fb      	strb	r3, [r7, #15]
		if (target_display==1) memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+target_tmp1),8);  // copy info for LFO
 8001ea0:	4b29      	ldr	r3, [pc, #164]	; (8001f48 <display_process+0x458>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d10c      	bne.n	8001ec2 <display_process+0x3d2>
 8001ea8:	89bb      	ldrh	r3, [r7, #12]
 8001eaa:	3308      	adds	r3, #8
 8001eac:	4a27      	ldr	r2, [pc, #156]	; (8001f4c <display_process+0x45c>)
 8001eae:	1898      	adds	r0, r3, r2
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4a26      	ldr	r2, [pc, #152]	; (8001f50 <display_process+0x460>)
 8001eb6:	4413      	add	r3, r2
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2208      	movs	r2, #8
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f009 fb0f 	bl	800b4e0 <memcpy>
		if (target_display==2) memcpy(default_menu3+feedback_loc+8, *(patch_inputs+target_tmp1),8);  // Limited atm
 8001ec2:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <display_process+0x458>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d10c      	bne.n	8001ee4 <display_process+0x3f4>
 8001eca:	89bb      	ldrh	r3, [r7, #12]
 8001ecc:	3308      	adds	r3, #8
 8001ece:	4a1f      	ldr	r2, [pc, #124]	; (8001f4c <display_process+0x45c>)
 8001ed0:	1898      	adds	r0, r3, r2
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4a2d      	ldr	r2, [pc, #180]	; (8001f8c <display_process+0x49c>)
 8001ed8:	4413      	add	r3, r2
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2208      	movs	r2, #8
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f009 fafe 	bl	800b4e0 <memcpy>
		 		 	}

	if (disp_stepper==1)  gfx_send_cursor=(init_b>>4)&7 ;   //send cursor line
 8001ee4:	4b21      	ldr	r3, [pc, #132]	; (8001f6c <display_process+0x47c>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d109      	bne.n	8001f00 <display_process+0x410>
 8001eec:	4b20      	ldr	r3, [pc, #128]	; (8001f70 <display_process+0x480>)
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	091b      	lsrs	r3, r3, #4
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	4b24      	ldr	r3, [pc, #144]	; (8001f90 <display_process+0x4a0>)
 8001efe:	701a      	strb	r2, [r3, #0]
	if (disp_stepper==2)  {
 8001f00:	4b1a      	ldr	r3, [pc, #104]	; (8001f6c <display_process+0x47c>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d11a      	bne.n	8001f3e <display_process+0x44e>

		default_menu3[feedback_loc+18]=potSource[380]+48;
 8001f08:	4b22      	ldr	r3, [pc, #136]	; (8001f94 <display_process+0x4a4>)
 8001f0a:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
 8001f0e:	89bb      	ldrh	r3, [r7, #12]
 8001f10:	3312      	adds	r3, #18
 8001f12:	3230      	adds	r2, #48	; 0x30
 8001f14:	b2d1      	uxtb	r1, r2
 8001f16:	4a0d      	ldr	r2, [pc, #52]	; (8001f4c <display_process+0x45c>)
 8001f18:	54d1      	strb	r1, [r2, r3]
		default_menu3[feedback_loc+19]=potSource[381]+48; default_menu3[feedback_loc+20]=potSource[382]+48; }  // write this straight after start ,ok
 8001f1a:	4b1e      	ldr	r3, [pc, #120]	; (8001f94 <display_process+0x4a4>)
 8001f1c:	f893 217d 	ldrb.w	r2, [r3, #381]	; 0x17d
 8001f20:	89bb      	ldrh	r3, [r7, #12]
 8001f22:	3313      	adds	r3, #19
 8001f24:	3230      	adds	r2, #48	; 0x30
 8001f26:	b2d1      	uxtb	r1, r2
 8001f28:	4a08      	ldr	r2, [pc, #32]	; (8001f4c <display_process+0x45c>)
 8001f2a:	54d1      	strb	r1, [r2, r3]
 8001f2c:	4b19      	ldr	r3, [pc, #100]	; (8001f94 <display_process+0x4a4>)
 8001f2e:	f893 217e 	ldrb.w	r2, [r3, #382]	; 0x17e
 8001f32:	89bb      	ldrh	r3, [r7, #12]
 8001f34:	3314      	adds	r3, #20
 8001f36:	3230      	adds	r2, #48	; 0x30
 8001f38:	b2d1      	uxtb	r1, r2
 8001f3a:	4a04      	ldr	r2, [pc, #16]	; (8001f4c <display_process+0x45c>)
 8001f3c:	54d1      	strb	r1, [r2, r3]


}   // end o void
 8001f3e:	bf00      	nop
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20005983 	.word	0x20005983
 8001f4c:	2000fbb4 	.word	0x2000fbb4
 8001f50:	2000022c 	.word	0x2000022c
 8001f54:	20005970 	.word	0x20005970
 8001f58:	0800ba40 	.word	0x0800ba40
 8001f5c:	20000220 	.word	0x20000220
 8001f60:	2000576c 	.word	0x2000576c
 8001f64:	20005978 	.word	0x20005978
 8001f68:	2000596c 	.word	0x2000596c
 8001f6c:	20000152 	.word	0x20000152
 8001f70:	200034da 	.word	0x200034da
 8001f74:	2000536c 	.word	0x2000536c
 8001f78:	20005986 	.word	0x20005986
 8001f7c:	20004014 	.word	0x20004014
 8001f80:	200079ae 	.word	0x200079ae
 8001f84:	20005982 	.word	0x20005982
 8001f88:	200034cc 	.word	0x200034cc
 8001f8c:	200002f0 	.word	0x200002f0
 8001f90:	20004009 	.word	0x20004009
 8001f94:	20000624 	.word	0x20000624

08001f98 <displayBuffer2>:


void displayBuffer2 (void){       // use only writing characters  ,nothing more  , init_b for selecting location
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
														//when scrolling maybe use this only until  settled
														// start 2*8 bit then squeeze in 20*6 bit characters

	store_c= (default_menu3[init_b]-47)&127 ;    // grab char from mem
 8001f9e:	4b3d      	ldr	r3, [pc, #244]	; (8002094 <displayBuffer2+0xfc>)
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	4b3c      	ldr	r3, [pc, #240]	; (8002098 <displayBuffer2+0x100>)
 8001fa6:	5c9b      	ldrb	r3, [r3, r2]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	3b2f      	subs	r3, #47	; 0x2f
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	4b39      	ldr	r3, [pc, #228]	; (800209c <displayBuffer2+0x104>)
 8001fb6:	801a      	strh	r2, [r3, #0]
	uint8_t init_bx=init_b&127;
 8001fb8:	4b36      	ldr	r3, [pc, #216]	; (8002094 <displayBuffer2+0xfc>)
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fc2:	71bb      	strb	r3, [r7, #6]

	uint8_t d_count;
uint8_t init_x=(init_bx & 15)+2 ;    // +2 important  2-17 hor char pos
 8001fc4:	79bb      	ldrb	r3, [r7, #6]
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	3302      	adds	r3, #2
 8001fce:	717b      	strb	r3, [r7, #5]
uint8_t init_x2=(init_bx>>4)<<3 ;  // 0,8,16-64  vertical pos  gfx
 8001fd0:	79bb      	ldrb	r3, [r7, #6]
 8001fd2:	091b      	lsrs	r3, r3, #4
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	713b      	strb	r3, [r7, #4]
uint16_t init_y=((init_x2)*18)+init_x;   //   works ok  8  bit  0-1152
 8001fda:	793b      	ldrb	r3, [r7, #4]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	461a      	mov	r2, r3
 8001fe0:	00d2      	lsls	r2, r2, #3
 8001fe2:	4413      	add	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	797b      	ldrb	r3, [r7, #5]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	4413      	add	r3, r2
 8001fee:	807b      	strh	r3, [r7, #2]
uint16_t store_x;

store_x=(store_c*8);  // i line characters , might shrink it and use extr for other  visuals , old code but keep for now
 8001ff0:	4b2a      	ldr	r3, [pc, #168]	; (800209c <displayBuffer2+0x104>)
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	803b      	strh	r3, [r7, #0]


		if ( (disp_stepper==0))     // blinker for cursor character only  , might just flip the whole last line from prev tables then its x4 faster
 8001ff8:	4b29      	ldr	r3, [pc, #164]	; (80020a0 <displayBuffer2+0x108>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d11a      	bne.n	8002036 <displayBuffer2+0x9e>
			for (d_count=0;d_count<8;d_count++){
 8002000:	2300      	movs	r3, #0
 8002002:	71fb      	strb	r3, [r7, #7]
 8002004:	e013      	b.n	800202e <displayBuffer2+0x96>

				gfx_ram[init_y+(d_count*18) ]= gfx_char[d_count+store_x]^127; //write character to ram ,should be elsewhere , blank is correct
 8002006:	79fa      	ldrb	r2, [r7, #7]
 8002008:	883b      	ldrh	r3, [r7, #0]
 800200a:	4413      	add	r3, r2
 800200c:	4a25      	ldr	r2, [pc, #148]	; (80020a4 <displayBuffer2+0x10c>)
 800200e:	5cd1      	ldrb	r1, [r2, r3]
 8002010:	8878      	ldrh	r0, [r7, #2]
 8002012:	79fa      	ldrb	r2, [r7, #7]
 8002014:	4613      	mov	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4413      	add	r3, r2
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	4403      	add	r3, r0
 800201e:	f081 027f 	eor.w	r2, r1, #127	; 0x7f
 8002022:	b2d1      	uxtb	r1, r2
 8002024:	4a20      	ldr	r2, [pc, #128]	; (80020a8 <displayBuffer2+0x110>)
 8002026:	54d1      	strb	r1, [r2, r3]
			for (d_count=0;d_count<8;d_count++){
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	3301      	adds	r3, #1
 800202c:	71fb      	strb	r3, [r7, #7]
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	2b07      	cmp	r3, #7
 8002032:	d9e8      	bls.n	8002006 <displayBuffer2+0x6e>
 8002034:	e016      	b.n	8002064 <displayBuffer2+0xcc>
			}

		else for (d_count=0;d_count<8;d_count++){
 8002036:	2300      	movs	r3, #0
 8002038:	71fb      	strb	r3, [r7, #7]
 800203a:	e010      	b.n	800205e <displayBuffer2+0xc6>
			gfx_ram[init_y+(d_count*18) ]= gfx_char[d_count+store_x]; //write character to ram ,should be elsewhere , seems affected by later stufff
 800203c:	79fa      	ldrb	r2, [r7, #7]
 800203e:	883b      	ldrh	r3, [r7, #0]
 8002040:	18d1      	adds	r1, r2, r3
 8002042:	8878      	ldrh	r0, [r7, #2]
 8002044:	79fa      	ldrb	r2, [r7, #7]
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4413      	add	r3, r2
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	4403      	add	r3, r0
 8002050:	4a14      	ldr	r2, [pc, #80]	; (80020a4 <displayBuffer2+0x10c>)
 8002052:	5c51      	ldrb	r1, [r2, r1]
 8002054:	4a14      	ldr	r2, [pc, #80]	; (80020a8 <displayBuffer2+0x110>)
 8002056:	54d1      	strb	r1, [r2, r3]
		else for (d_count=0;d_count<8;d_count++){
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	3301      	adds	r3, #1
 800205c:	71fb      	strb	r3, [r7, #7]
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	2b07      	cmp	r3, #7
 8002062:	d9eb      	bls.n	800203c <displayBuffer2+0xa4>
		}

if (disp_stepper==17) {disp_stepper=0;enc2_add=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8002064:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <displayBuffer2+0x108>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b11      	cmp	r3, #17
 800206a:	d106      	bne.n	800207a <displayBuffer2+0xe2>
 800206c:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <displayBuffer2+0x108>)
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
 8002072:	4b0e      	ldr	r3, [pc, #56]	; (80020ac <displayBuffer2+0x114>)
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]


}    // displayBuffer2
 8002078:	e005      	b.n	8002086 <displayBuffer2+0xee>
if (disp_stepper==17) {disp_stepper=0;enc2_add=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 800207a:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <displayBuffer2+0x108>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	3301      	adds	r3, #1
 8002080:	b2da      	uxtb	r2, r3
 8002082:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <displayBuffer2+0x108>)
 8002084:	701a      	strb	r2, [r3, #0]
}    // displayBuffer2
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	200034da 	.word	0x200034da
 8002098:	2000fbb4 	.word	0x2000fbb4
 800209c:	2000088a 	.word	0x2000088a
 80020a0:	20000152 	.word	0x20000152
 80020a4:	0800c1a8 	.word	0x0800c1a8
 80020a8:	20003b84 	.word	0x20003b84
 80020ac:	20000151 	.word	0x20000151

080020b0 <note_reset>:


void note_reset (void){          // reset deafult values before modulation , in case it gets left  with no modulator
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0

	note[0].velocity=255;note[1].velocity=255;note[2].velocity=255;note[3].velocity=255;note[4].velocity=255;note[5].velocity=255;note[6].velocity=255
 80020b4:	4b1c      	ldr	r3, [pc, #112]	; (8002128 <note_reset+0x78>)
 80020b6:	22ff      	movs	r2, #255	; 0xff
 80020b8:	71da      	strb	r2, [r3, #7]
 80020ba:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <note_reset+0x78>)
 80020bc:	22ff      	movs	r2, #255	; 0xff
 80020be:	755a      	strb	r2, [r3, #21]
 80020c0:	4b19      	ldr	r3, [pc, #100]	; (8002128 <note_reset+0x78>)
 80020c2:	22ff      	movs	r2, #255	; 0xff
 80020c4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 80020c8:	4b17      	ldr	r3, [pc, #92]	; (8002128 <note_reset+0x78>)
 80020ca:	22ff      	movs	r2, #255	; 0xff
 80020cc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80020d0:	4b15      	ldr	r3, [pc, #84]	; (8002128 <note_reset+0x78>)
 80020d2:	22ff      	movs	r2, #255	; 0xff
 80020d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020d8:	4b13      	ldr	r3, [pc, #76]	; (8002128 <note_reset+0x78>)
 80020da:	22ff      	movs	r2, #255	; 0xff
 80020dc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80020e0:	4b11      	ldr	r3, [pc, #68]	; (8002128 <note_reset+0x78>)
 80020e2:	22ff      	movs	r2, #255	; 0xff
 80020e4:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
																;note[0].detune=127;note[1].detune=127;note[2].detune=127;note[3].detune=127;note[4].detune=127;
 80020e8:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <note_reset+0x78>)
 80020ea:	227f      	movs	r2, #127	; 0x7f
 80020ec:	721a      	strb	r2, [r3, #8]
 80020ee:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <note_reset+0x78>)
 80020f0:	227f      	movs	r2, #127	; 0x7f
 80020f2:	759a      	strb	r2, [r3, #22]
 80020f4:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <note_reset+0x78>)
 80020f6:	227f      	movs	r2, #127	; 0x7f
 80020f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80020fc:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <note_reset+0x78>)
 80020fe:	227f      	movs	r2, #127	; 0x7f
 8002100:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <note_reset+0x78>)
 8002106:	227f      	movs	r2, #127	; 0x7f
 8002108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	note[5].detune=127;note[6].detune=127;
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <note_reset+0x78>)
 800210e:	227f      	movs	r2, #127	; 0x7f
 8002110:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8002114:	4b04      	ldr	r3, [pc, #16]	; (8002128 <note_reset+0x78>)
 8002116:	227f      	movs	r2, #127	; 0x7f
 8002118:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c


}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	20000158 	.word	0x20000158

0800212c <sampler_ram_record>:


void sampler_ram_record(void) {
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0

memcpy(	&RAM[sampler.ram_pos], input_holder,sizeof(input_holder));
 8002130:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <sampler_ram_record+0x44>)
 8002132:	899b      	ldrh	r3, [r3, #12]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	4a0f      	ldr	r2, [pc, #60]	; (8002174 <sampler_ram_record+0x48>)
 8002138:	4413      	add	r3, r2
 800213a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800213e:	490e      	ldr	r1, [pc, #56]	; (8002178 <sampler_ram_record+0x4c>)
 8002140:	4618      	mov	r0, r3
 8002142:	f009 f9cd 	bl	800b4e0 <memcpy>
	sampler.ram_pos =sampler.ram_pos+512;
 8002146:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <sampler_ram_record+0x44>)
 8002148:	899b      	ldrh	r3, [r3, #12]
 800214a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800214e:	b29a      	uxth	r2, r3
 8002150:	4b07      	ldr	r3, [pc, #28]	; (8002170 <sampler_ram_record+0x44>)
 8002152:	819a      	strh	r2, [r3, #12]
if (sampler.ram_pos>16383) { sampler.ram_pos=0; sampler.record_enable=0; } // reset and stop record
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <sampler_ram_record+0x44>)
 8002156:	899b      	ldrh	r3, [r3, #12]
 8002158:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800215c:	d305      	bcc.n	800216a <sampler_ram_record+0x3e>
 800215e:	4b04      	ldr	r3, [pc, #16]	; (8002170 <sampler_ram_record+0x44>)
 8002160:	2200      	movs	r2, #0
 8002162:	819a      	strh	r2, [r3, #12]
 8002164:	4b02      	ldr	r3, [pc, #8]	; (8002170 <sampler_ram_record+0x44>)
 8002166:	2200      	movs	r2, #0
 8002168:	701a      	strb	r2, [r3, #0]
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000204 	.word	0x20000204
 8002174:	20007bb4 	.word	0x20007bb4
 8002178:	20004018 	.word	0x20004018
 800217c:	00000000 	.word	0x00000000

08002180 <sampling>:


return  output;

}
void sampling(void){						// 330 atm or 8.5ms
 8002180:	b5b0      	push	{r4, r5, r7, lr}
 8002182:	b0d4      	sub	sp, #336	; 0x150
 8002184:	af00      	add	r7, sp, #0

//	if (time_proc>580) time_final=time_proc;

//time_proc=0;

	time_proc=0;
 8002186:	4b7e      	ldr	r3, [pc, #504]	; (8002380 <sampling+0x200>)
 8002188:	2200      	movs	r2, #0
 800218a:	801a      	strh	r2, [r3, #0]
	int32_t sample_accus[10] ={0,0,0,0,0,0,0,0,0,0};
 800218c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002190:	2228      	movs	r2, #40	; 0x28
 8002192:	2100      	movs	r1, #0
 8002194:	4618      	mov	r0, r3
 8002196:	f009 f9b1 	bl	800b4fc <memset>
uint8_t mask_i;
int32_t sample_Accu[10] ={0,0,0,0,0,0,0,0,0,0};   // accu for sample output or lookup
 800219a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800219e:	2228      	movs	r2, #40	; 0x28
 80021a0:	2100      	movs	r1, #0
 80021a2:	4618      	mov	r0, r3
 80021a4:	f009 f9aa 	bl	800b4fc <memset>
uint16_t tuned_list[10];
int32_t sample_adc;
int32_t ram_temp;
if (bank_write==2)  {sample_pointD=512;}  else sample_pointD=0;
 80021a8:	4b76      	ldr	r3, [pc, #472]	; (8002384 <sampling+0x204>)
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d104      	bne.n	80021ba <sampling+0x3a>
 80021b0:	4b75      	ldr	r3, [pc, #468]	; (8002388 <sampling+0x208>)
 80021b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021b6:	801a      	strh	r2, [r3, #0]
 80021b8:	e002      	b.n	80021c0 <sampling+0x40>
 80021ba:	4b73      	ldr	r3, [pc, #460]	; (8002388 <sampling+0x208>)
 80021bc:	2200      	movs	r2, #0
 80021be:	801a      	strh	r2, [r3, #0]

bank_write=0;
 80021c0:	4b70      	ldr	r3, [pc, #448]	; (8002384 <sampling+0x204>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	801a      	strh	r2, [r3, #0]
memcpy(notes_joined,seq.notes1,16);
 80021c6:	2210      	movs	r2, #16
 80021c8:	4970      	ldr	r1, [pc, #448]	; (800238c <sampling+0x20c>)
 80021ca:	4871      	ldr	r0, [pc, #452]	; (8002390 <sampling+0x210>)
 80021cc:	f009 f988 	bl	800b4e0 <memcpy>
memcpy(notes_joined+16,seq.notes2,16);
 80021d0:	4b70      	ldr	r3, [pc, #448]	; (8002394 <sampling+0x214>)
 80021d2:	2210      	movs	r2, #16
 80021d4:	4970      	ldr	r1, [pc, #448]	; (8002398 <sampling+0x218>)
 80021d6:	4618      	mov	r0, r3
 80021d8:	f009 f982 	bl	800b4e0 <memcpy>
sample_pointB=sample_pointD;
 80021dc:	4b6a      	ldr	r3, [pc, #424]	; (8002388 <sampling+0x208>)
 80021de:	881a      	ldrh	r2, [r3, #0]
 80021e0:	4b6e      	ldr	r3, [pc, #440]	; (800239c <sampling+0x21c>)
 80021e2:	801a      	strh	r2, [r3, #0]
unsigned short tempo_start=0;  // enabled when i=isrMask;
 80021e4:	2300      	movs	r3, #0
 80021e6:	f8a7 314c 	strh.w	r3, [r7, #332]	; 0x14c

uint16_t i_total;
uint16_t tempo_mod=tempo_lut[seq.tempo];  // set tempo,speed from lut 40-200bpm  ,changed to 4x for note lenght
 80021ea:	4b6d      	ldr	r3, [pc, #436]	; (80023a0 <sampling+0x220>)
 80021ec:	785b      	ldrb	r3, [r3, #1]
 80021ee:	461a      	mov	r2, r3
 80021f0:	4b6c      	ldr	r3, [pc, #432]	; (80023a4 <sampling+0x224>)
 80021f2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80021f6:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e

uint8_t l;			// 35.002khz(0.02857ms) sample, 1 sample is temp count (16x=0.00045712) , *16=1 note ,at 300 (437bpm),(1/(0.00002857*tempo count*16)=1beat in s

tempo_sync=16384/((tempo_mod*16)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80
 80021fa:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 80021fe:	2b00      	cmp	r3, #0
 8002200:	da00      	bge.n	8002204 <sampling+0x84>
 8002202:	331f      	adds	r3, #31
 8002204:	115b      	asrs	r3, r3, #5
 8002206:	461a      	mov	r2, r3
 8002208:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800220c:	fb93 f3f2 	sdiv	r3, r3, r2
 8002210:	ee07 3a90 	vmov	s15, r3
 8002214:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002218:	4b63      	ldr	r3, [pc, #396]	; (80023a8 <sampling+0x228>)
 800221a:	edc3 7a00 	vstr	s15, [r3]
tempo_sync=tempo_sync/80;  // bit weird her , this is adsr !
 800221e:	4b62      	ldr	r3, [pc, #392]	; (80023a8 <sampling+0x228>)
 8002220:	ed93 7a00 	vldr	s14, [r3]
 8002224:	eddf 6a61 	vldr	s13, [pc, #388]	; 80023ac <sampling+0x22c>
 8002228:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800222c:	4b5e      	ldr	r3, [pc, #376]	; (80023a8 <sampling+0x228>)
 800222e:	edc3 7a00 	vstr	s15, [r3]

uint8_t looper_dat[8]={1,3,7,15};
 8002232:	4a5f      	ldr	r2, [pc, #380]	; (80023b0 <sampling+0x230>)
 8002234:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002238:	e892 0003 	ldmia.w	r2, {r0, r1}
 800223c:	6018      	str	r0, [r3, #0]
 800223e:	3304      	adds	r3, #4
 8002240:	7019      	strb	r1, [r3, #0]
 8002242:	f107 03a5 	add.w	r3, r7, #165	; 0xa5
 8002246:	2200      	movs	r2, #0
 8002248:	801a      	strh	r2, [r3, #0]
 800224a:	709a      	strb	r2, [r3, #2]
uint32_t lfo_tempo_hold;

if (tempo_mod_hold!=tempo_mod){					// lfo lut calculate only when changes tempo
 800224c:	4b59      	ldr	r3, [pc, #356]	; (80023b4 <sampling+0x234>)
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 8002254:	429a      	cmp	r2, r3
 8002256:	d036      	beq.n	80022c6 <sampling+0x146>

		float lfo_tempo_calc=((62831*4)/(tempo_mod)); // deafualt 1 note
 8002258:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 800225c:	4a56      	ldr	r2, [pc, #344]	; (80023b8 <sampling+0x238>)
 800225e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002262:	ee07 3a90 	vmov	s15, r3
 8002266:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800226a:	edc7 7a4e 	vstr	s15, [r7, #312]	; 0x138


						for (i=0;i<256;i++){								// 128 is 1 note
 800226e:	4b53      	ldr	r3, [pc, #332]	; (80023bc <sampling+0x23c>)
 8002270:	2200      	movs	r2, #0
 8002272:	801a      	strh	r2, [r3, #0]
 8002274:	e023      	b.n	80022be <sampling+0x13e>
	lfo_tempo_hold=(((i+1)*lfo_tempo_calc))/64;
 8002276:	4b51      	ldr	r3, [pc, #324]	; (80023bc <sampling+0x23c>)
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	3301      	adds	r3, #1
 800227c:	ee07 3a90 	vmov	s15, r3
 8002280:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002284:	edd7 7a4e 	vldr	s15, [r7, #312]	; 0x138
 8002288:	ee27 7a27 	vmul.f32	s14, s14, s15
 800228c:	eddf 6a4c 	vldr	s13, [pc, #304]	; 80023c0 <sampling+0x240>
 8002290:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002294:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002298:	ee17 3a90 	vmov	r3, s15
 800229c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	lfo_tempo_lut[i]= lfo_tempo_hold;
 80022a0:	4b46      	ldr	r3, [pc, #280]	; (80023bc <sampling+0x23c>)
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	461a      	mov	r2, r3
 80022a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80022aa:	b299      	uxth	r1, r3
 80022ac:	4b45      	ldr	r3, [pc, #276]	; (80023c4 <sampling+0x244>)
 80022ae:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
						for (i=0;i<256;i++){								// 128 is 1 note
 80022b2:	4b42      	ldr	r3, [pc, #264]	; (80023bc <sampling+0x23c>)
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	3301      	adds	r3, #1
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	4b40      	ldr	r3, [pc, #256]	; (80023bc <sampling+0x23c>)
 80022bc:	801a      	strh	r2, [r3, #0]
 80022be:	4b3f      	ldr	r3, [pc, #252]	; (80023bc <sampling+0x23c>)
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	2bff      	cmp	r3, #255	; 0xff
 80022c4:	d9d7      	bls.n	8002276 <sampling+0xf6>

}}
tempo_mod_hold=tempo_mod;   // for lfo
 80022c6:	4a3b      	ldr	r2, [pc, #236]	; (80023b4 <sampling+0x234>)
 80022c8:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 80022cc:	8013      	strh	r3, [r2, #0]

uint32_t  note_toggler[17]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //records note position on 0-512   using a bit
 80022ce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80022d2:	2244      	movs	r2, #68	; 0x44
 80022d4:	2100      	movs	r1, #0
 80022d6:	4618      	mov	r0, r3
 80022d8:	f009 f910 	bl	800b4fc <memset>
for (i=0;i<16;i++) {  note_toggler[i]=0; }
 80022dc:	4b37      	ldr	r3, [pc, #220]	; (80023bc <sampling+0x23c>)
 80022de:	2200      	movs	r2, #0
 80022e0:	801a      	strh	r2, [r3, #0]
 80022e2:	e00e      	b.n	8002302 <sampling+0x182>
 80022e4:	4b35      	ldr	r3, [pc, #212]	; (80023bc <sampling+0x23c>)
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80022ee:	443b      	add	r3, r7
 80022f0:	2200      	movs	r2, #0
 80022f2:	f843 2cf4 	str.w	r2, [r3, #-244]
 80022f6:	4b31      	ldr	r3, [pc, #196]	; (80023bc <sampling+0x23c>)
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	3301      	adds	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	4b2f      	ldr	r3, [pc, #188]	; (80023bc <sampling+0x23c>)
 8002300:	801a      	strh	r2, [r3, #0]
 8002302:	4b2e      	ldr	r3, [pc, #184]	; (80023bc <sampling+0x23c>)
 8002304:	881b      	ldrh	r3, [r3, #0]
 8002306:	2b0f      	cmp	r3, #15
 8002308:	d9ec      	bls.n	80022e4 <sampling+0x164>
	//potSource[150]=(freq_point[0])*100; //0-2

potSource[380]=(lcd_out3/100);  // still works   , potsource ref is located in feedback line var  ,was sendin x16 values
 800230a:	4b2f      	ldr	r3, [pc, #188]	; (80023c8 <sampling+0x248>)
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	4a2f      	ldr	r2, [pc, #188]	; (80023cc <sampling+0x24c>)
 8002310:	fba2 2303 	umull	r2, r3, r2, r3
 8002314:	095b      	lsrs	r3, r3, #5
 8002316:	b29b      	uxth	r3, r3
 8002318:	b2da      	uxtb	r2, r3
 800231a:	4b2d      	ldr	r3, [pc, #180]	; (80023d0 <sampling+0x250>)
 800231c:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
potSource[381]=((lcd_out3 %100)/10);		 // 0-160 to 0-10
 8002320:	4b29      	ldr	r3, [pc, #164]	; (80023c8 <sampling+0x248>)
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	4a29      	ldr	r2, [pc, #164]	; (80023cc <sampling+0x24c>)
 8002326:	fba2 1203 	umull	r1, r2, r2, r3
 800232a:	0952      	lsrs	r2, r2, #5
 800232c:	2164      	movs	r1, #100	; 0x64
 800232e:	fb01 f202 	mul.w	r2, r1, r2
 8002332:	1a9b      	subs	r3, r3, r2
 8002334:	b29b      	uxth	r3, r3
 8002336:	4a27      	ldr	r2, [pc, #156]	; (80023d4 <sampling+0x254>)
 8002338:	fba2 2303 	umull	r2, r3, r2, r3
 800233c:	08db      	lsrs	r3, r3, #3
 800233e:	b29b      	uxth	r3, r3
 8002340:	b2da      	uxtb	r2, r3
 8002342:	4b23      	ldr	r3, [pc, #140]	; (80023d0 <sampling+0x250>)
 8002344:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
potSource[382]=(lcd_out3%10);
 8002348:	4b1f      	ldr	r3, [pc, #124]	; (80023c8 <sampling+0x248>)
 800234a:	881a      	ldrh	r2, [r3, #0]
 800234c:	4b21      	ldr	r3, [pc, #132]	; (80023d4 <sampling+0x254>)
 800234e:	fba3 1302 	umull	r1, r3, r3, r2
 8002352:	08d9      	lsrs	r1, r3, #3
 8002354:	460b      	mov	r3, r1
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	b29b      	uxth	r3, r3
 8002360:	b2da      	uxtb	r2, r3
 8002362:	4b1b      	ldr	r3, [pc, #108]	; (80023d0 <sampling+0x250>)
 8002364:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
int32_t* osc_pointers[10];   // sample outs
uint8_t pars_counter;

if (sampler.ram_seq>15871)  sampler.ram_seq=0;  //else sampler.ram_seq=sampler.ram_seq+1024;
 8002368:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <sampling+0x258>)
 800236a:	8b1b      	ldrh	r3, [r3, #24]
 800236c:	f5b3 5f78 	cmp.w	r3, #15872	; 0x3e00
 8002370:	d302      	bcc.n	8002378 <sampling+0x1f8>
 8002372:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <sampling+0x258>)
 8002374:	2200      	movs	r2, #0
 8002376:	831a      	strh	r2, [r3, #24]
//setup pointers for osc options
 for (pars_counter=0;pars_counter<4;pars_counter++)	{   // fill up pointers and reload vars
 8002378:	2300      	movs	r3, #0
 800237a:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
 800237e:	e12b      	b.n	80025d8 <sampling+0x458>
 8002380:	20004430 	.word	0x20004430
 8002384:	2000014e 	.word	0x2000014e
 8002388:	2000189e 	.word	0x2000189e
 800238c:	200051a6 	.word	0x200051a6
 8002390:	2000798c 	.word	0x2000798c
 8002394:	2000799c 	.word	0x2000799c
 8002398:	200051b7 	.word	0x200051b7
 800239c:	20000890 	.word	0x20000890
 80023a0:	200051a4 	.word	0x200051a4
 80023a4:	20003780 	.word	0x20003780
 80023a8:	2000400c 	.word	0x2000400c
 80023ac:	42a00000 	.word	0x42a00000
 80023b0:	0800ba60 	.word	0x0800ba60
 80023b4:	20003b80 	.word	0x20003b80
 80023b8:	0003d5bc 	.word	0x0003d5bc
 80023bc:	20000892 	.word	0x20000892
 80023c0:	42800000 	.word	0x42800000
 80023c4:	20003980 	.word	0x20003980
 80023c8:	20004014 	.word	0x20004014
 80023cc:	51eb851f 	.word	0x51eb851f
 80023d0:	20000624 	.word	0x20000624
 80023d4:	cccccccd 	.word	0xcccccccd
 80023d8:	20000204 	.word	0x20000204


		sample_accus[pars_counter]=sample_accus_hold[pars_counter];
 80023dc:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 80023e0:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80023e4:	49b4      	ldr	r1, [pc, #720]	; (80026b8 <sampling+0x538>)
 80023e6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80023f0:	443b      	add	r3, r7
 80023f2:	f843 2c64 	str.w	r2, [r3, #-100]
	 if (note[pars_counter].osc==0) osc_pointers[pars_counter]=&sample_Accu[5];  // zero
 80023f6:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 80023fa:	49b0      	ldr	r1, [pc, #704]	; (80026bc <sampling+0x53c>)
 80023fc:	4613      	mov	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	440b      	add	r3, r1
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10a      	bne.n	8002422 <sampling+0x2a2>
 800240c:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8002410:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002414:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002418:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 800241c:	3114      	adds	r1, #20
 800241e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 	 	 	 if (note[pars_counter].osc==1) osc_pointers[pars_counter]=&sample_accus[pars_counter];   // saw
 8002422:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8002426:	49a5      	ldr	r1, [pc, #660]	; (80026bc <sampling+0x53c>)
 8002428:	4613      	mov	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	1a9b      	subs	r3, r3, r2
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	440b      	add	r3, r1
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d10d      	bne.n	8002454 <sampling+0x2d4>
 8002438:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 800243c:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8002440:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4419      	add	r1, r3
 8002448:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800244c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==2) osc_pointers[pars_counter]=&sample_Accu[pars_counter];		// tri
 8002454:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8002458:	4998      	ldr	r1, [pc, #608]	; (80026bc <sampling+0x53c>)
 800245a:	4613      	mov	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	1a9b      	subs	r3, r3, r2
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	440b      	add	r3, r1
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d10d      	bne.n	8002486 <sampling+0x306>
 800246a:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 800246e:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8002472:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4419      	add	r1, r3
 800247a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800247e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==3) { osc_pointers[pars_counter]=&sample_Accu[pars_counter+6];sampler.one_shot=sampler.one_shot | (1<<pars_counter);}   // sine
 8002486:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 800248a:	498c      	ldr	r1, [pc, #560]	; (80026bc <sampling+0x53c>)
 800248c:	4613      	mov	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	1a9b      	subs	r3, r3, r2
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	440b      	add	r3, r1
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b03      	cmp	r3, #3
 800249a:	d11c      	bne.n	80024d6 <sampling+0x356>
 800249c:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80024a0:	3306      	adds	r3, #6
 80024a2:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 80024a6:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4419      	add	r1, r3
 80024ae:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80024b2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80024b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80024ba:	4b81      	ldr	r3, [pc, #516]	; (80026c0 <sampling+0x540>)
 80024bc:	78db      	ldrb	r3, [r3, #3]
 80024be:	b25a      	sxtb	r2, r3
 80024c0:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80024c4:	2101      	movs	r1, #1
 80024c6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ca:	b25b      	sxtb	r3, r3
 80024cc:	4313      	orrs	r3, r2
 80024ce:	b25b      	sxtb	r3, r3
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	4b7b      	ldr	r3, [pc, #492]	; (80026c0 <sampling+0x540>)
 80024d4:	70da      	strb	r2, [r3, #3]
	 			if (note[pars_counter].osc==4) { osc_pointers[pars_counter]=&sample_Accu[pars_counter+6];sampler.one_shot=sampler.one_shot &  ~(1<<pars_counter);}  // looping sample
 80024d6:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 80024da:	4978      	ldr	r1, [pc, #480]	; (80026bc <sampling+0x53c>)
 80024dc:	4613      	mov	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	1a9b      	subs	r3, r3, r2
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	440b      	add	r3, r1
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d11e      	bne.n	800252a <sampling+0x3aa>
 80024ec:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80024f0:	3306      	adds	r3, #6
 80024f2:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 80024f6:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4419      	add	r1, r3
 80024fe:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002502:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002506:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800250a:	4b6d      	ldr	r3, [pc, #436]	; (80026c0 <sampling+0x540>)
 800250c:	78db      	ldrb	r3, [r3, #3]
 800250e:	b25a      	sxtb	r2, r3
 8002510:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8002514:	2101      	movs	r1, #1
 8002516:	fa01 f303 	lsl.w	r3, r1, r3
 800251a:	b25b      	sxtb	r3, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	b25b      	sxtb	r3, r3
 8002520:	4013      	ands	r3, r2
 8002522:	b25b      	sxtb	r3, r3
 8002524:	b2da      	uxtb	r2, r3
 8002526:	4b66      	ldr	r3, [pc, #408]	; (80026c0 <sampling+0x540>)
 8002528:	70da      	strb	r2, [r3, #3]
	 			if (note[pars_counter].osc==5) osc_pointers[pars_counter]=&sample_adc;   // sine
 800252a:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 800252e:	4963      	ldr	r1, [pc, #396]	; (80026bc <sampling+0x53c>)
 8002530:	4613      	mov	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	1a9b      	subs	r3, r3, r2
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	440b      	add	r3, r1
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b05      	cmp	r3, #5
 800253e:	d109      	bne.n	8002554 <sampling+0x3d4>
 8002540:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8002544:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002548:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800254c:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8002550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==6) osc_pointers[pars_counter]=&ram_temp ;   // sine
 8002554:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8002558:	4958      	ldr	r1, [pc, #352]	; (80026bc <sampling+0x53c>)
 800255a:	4613      	mov	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	1a9b      	subs	r3, r3, r2
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	440b      	add	r3, r1
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b06      	cmp	r3, #6
 8002568:	d109      	bne.n	800257e <sampling+0x3fe>
 800256a:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 800256e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002572:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002576:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800257a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc>6) osc_pointers[pars_counter]=&sample_Accu[5];  // zero
 800257e:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8002582:	494e      	ldr	r1, [pc, #312]	; (80026bc <sampling+0x53c>)
 8002584:	4613      	mov	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	440b      	add	r3, r1
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b06      	cmp	r3, #6
 8002592:	d90a      	bls.n	80025aa <sampling+0x42a>
 8002594:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8002598:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800259c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80025a0:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80025a4:	3114      	adds	r1, #20
 80025a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			tuned_list[pars_counter]=note[pars_counter].tuned;   // this needs to run here as well
 80025aa:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 80025ae:	f897 114b 	ldrb.w	r1, [r7, #331]	; 0x14b
 80025b2:	4842      	ldr	r0, [pc, #264]	; (80026bc <sampling+0x53c>)
 80025b4:	4613      	mov	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	1a9b      	subs	r3, r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4403      	add	r3, r0
 80025be:	330c      	adds	r3, #12
 80025c0:	881a      	ldrh	r2, [r3, #0]
 80025c2:	004b      	lsls	r3, r1, #1
 80025c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80025c8:	443b      	add	r3, r7
 80025ca:	f823 2ca0 	strh.w	r2, [r3, #-160]
 for (pars_counter=0;pars_counter<4;pars_counter++)	{   // fill up pointers and reload vars
 80025ce:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80025d2:	3301      	adds	r3, #1
 80025d4:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
 80025d8:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80025dc:	2b03      	cmp	r3, #3
 80025de:	f67f aefd 	bls.w	80023dc <sampling+0x25c>

 }

note_holdA=0;
 80025e2:	4b38      	ldr	r3, [pc, #224]	; (80026c4 <sampling+0x544>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	701a      	strb	r2, [r3, #0]

// some good phasin and delays here
uint8_t cross_fade[2]={0,0};
 80025e8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80025ec:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80025f0:	2200      	movs	r2, #0
 80025f2:	801a      	strh	r2, [r3, #0]
uint8_t fader[17]={0,1,5,11,19,28,39,51,64,76,88,99,108,116,122,126,127}; // sine curve for cross fade
 80025f4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80025f8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80025fc:	4a32      	ldr	r2, [pc, #200]	; (80026c8 <sampling+0x548>)
 80025fe:	461c      	mov	r4, r3
 8002600:	4615      	mov	r5, r2
 8002602:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002604:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002606:	682b      	ldr	r3, [r5, #0]
 8002608:	7023      	strb	r3, [r4, #0]
//adc_values[2]= 15; //force for now
//if(adc_values[2]&16)     	{cross_fade[1]=127-fader[adc_values[2]&15]; cross_fade[2]=127;}  else {cross_fade[2]=fader[adc_values[2]&15]; cross_fade[1]=127;} //calculate crossfader

// doing lfo calc here as it is slow only for now
////////////////////adsr/////////////////////////////////////////
if	 (ADSR[0].attack_trigger==0) {		adsr_att=(161-ADSR[0].attack ) *0.02 ; // for now all of them from this only , speed , 0-16  // rarely read
 800260a:	4b30      	ldr	r3, [pc, #192]	; (80026cc <sampling+0x54c>)
 800260c:	791b      	ldrb	r3, [r3, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d146      	bne.n	80026a0 <sampling+0x520>
 8002612:	4b2e      	ldr	r3, [pc, #184]	; (80026cc <sampling+0x54c>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe f860 	bl	80006e0 <__aeabi_i2d>
 8002620:	a321      	add	r3, pc, #132	; (adr r3, 80026a8 <sampling+0x528>)
 8002622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002626:	f7fd fddf 	bl	80001e8 <__aeabi_dmul>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	4610      	mov	r0, r2
 8002630:	4619      	mov	r1, r3
 8002632:	f7fe f8bf 	bl	80007b4 <__aeabi_d2f>
 8002636:	4603      	mov	r3, r0
 8002638:	4a25      	ldr	r2, [pc, #148]	; (80026d0 <sampling+0x550>)
 800263a:	6013      	str	r3, [r2, #0]
ADSR[0].sustain_data=((161-ADSR[0].decay)*0.01);  // length and level this is ok is running 1/16 ish				ADSR[0].attack_data=ADSR[0].attack_data-ADSR[0].sustain_data;
 800263c:	4b23      	ldr	r3, [pc, #140]	; (80026cc <sampling+0x54c>)
 800263e:	785b      	ldrb	r3, [r3, #1]
 8002640:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 8002644:	4618      	mov	r0, r3
 8002646:	f7fe f84b 	bl	80006e0 <__aeabi_i2d>
 800264a:	a319      	add	r3, pc, #100	; (adr r3, 80026b0 <sampling+0x530>)
 800264c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002650:	f7fd fdca 	bl	80001e8 <__aeabi_dmul>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	f7fe f8aa 	bl	80007b4 <__aeabi_d2f>
 8002660:	4603      	mov	r3, r0
 8002662:	4a1a      	ldr	r2, [pc, #104]	; (80026cc <sampling+0x54c>)
 8002664:	6113      	str	r3, [r2, #16]
adsr_att=adsr_att*adsr_att;
 8002666:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <sampling+0x550>)
 8002668:	ed93 7a00 	vldr	s14, [r3]
 800266c:	4b18      	ldr	r3, [pc, #96]	; (80026d0 <sampling+0x550>)
 800266e:	edd3 7a00 	vldr	s15, [r3]
 8002672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002676:	4b16      	ldr	r3, [pc, #88]	; (80026d0 <sampling+0x550>)
 8002678:	edc3 7a00 	vstr	s15, [r3]
ADSR[0].sustain_data=ADSR[0].sustain_data*ADSR[0].sustain_data;
 800267c:	4b13      	ldr	r3, [pc, #76]	; (80026cc <sampling+0x54c>)
 800267e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002682:	4b12      	ldr	r3, [pc, #72]	; (80026cc <sampling+0x54c>)
 8002684:	edd3 7a04 	vldr	s15, [r3, #16]
 8002688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800268c:	4b0f      	ldr	r3, [pc, #60]	; (80026cc <sampling+0x54c>)
 800268e:	edc3 7a04 	vstr	s15, [r3, #16]

ADSR[0].attack_trigger=1;
 8002692:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <sampling+0x54c>)
 8002694:	2201      	movs	r2, #1
 8002696:	711a      	strb	r2, [r3, #4]
ADSR[0].attack_data=0;
 8002698:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <sampling+0x54c>)
 800269a:	f04f 0200 	mov.w	r2, #0
 800269e:	609a      	str	r2, [r3, #8]
}

//float ADSR[0].buffer_temp;    // adsr

for (i=0;i<256;i++) {
 80026a0:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <sampling+0x554>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	801a      	strh	r2, [r3, #0]
 80026a6:	e0d7      	b.n	8002858 <sampling+0x6d8>
 80026a8:	47ae147b 	.word	0x47ae147b
 80026ac:	3f947ae1 	.word	0x3f947ae1
 80026b0:	47ae147b 	.word	0x47ae147b
 80026b4:	3f847ae1 	.word	0x3f847ae1
 80026b8:	200034a8 	.word	0x200034a8
 80026bc:	20000158 	.word	0x20000158
 80026c0:	20000204 	.word	0x20000204
 80026c4:	200034a6 	.word	0x200034a6
 80026c8:	0800ba68 	.word	0x0800ba68
 80026cc:	20004718 	.word	0x20004718
 80026d0:	20004010 	.word	0x20004010
 80026d4:	20000892 	.word	0x20000892

	if     (ADSR[0].attack_data<1000)    																		{ADSR[0].attack_data=ADSR[0].attack_data+adsr_att;					ADSR[0].buffer_temp=ADSR[0].attack_data; } //0-1000
 80026d8:	4b8b      	ldr	r3, [pc, #556]	; (8002908 <sampling+0x788>)
 80026da:	edd3 7a02 	vldr	s15, [r3, #8]
 80026de:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800290c <sampling+0x78c>
 80026e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ea:	d50e      	bpl.n	800270a <sampling+0x58a>
 80026ec:	4b86      	ldr	r3, [pc, #536]	; (8002908 <sampling+0x788>)
 80026ee:	ed93 7a02 	vldr	s14, [r3, #8]
 80026f2:	4b87      	ldr	r3, [pc, #540]	; (8002910 <sampling+0x790>)
 80026f4:	edd3 7a00 	vldr	s15, [r3]
 80026f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026fc:	4b82      	ldr	r3, [pc, #520]	; (8002908 <sampling+0x788>)
 80026fe:	edc3 7a02 	vstr	s15, [r3, #8]
 8002702:	4b81      	ldr	r3, [pc, #516]	; (8002908 <sampling+0x788>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	4a80      	ldr	r2, [pc, #512]	; (8002908 <sampling+0x788>)
 8002708:	6193      	str	r3, [r2, #24]
	 if  ((ADSR[0].attack_data<1500)  && (ADSR[0].attack_data>999))  					{ADSR[0].attack_data=ADSR[0].attack_data+adsr_att;					ADSR[0].buffer_temp=1500-(ADSR[0].attack_data-500);  }  // 1000-500
 800270a:	4b7f      	ldr	r3, [pc, #508]	; (8002908 <sampling+0x788>)
 800270c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002710:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8002914 <sampling+0x794>
 8002714:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271c:	d522      	bpl.n	8002764 <sampling+0x5e4>
 800271e:	4b7a      	ldr	r3, [pc, #488]	; (8002908 <sampling+0x788>)
 8002720:	edd3 7a02 	vldr	s15, [r3, #8]
 8002724:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8002918 <sampling+0x798>
 8002728:	eef4 7ac7 	vcmpe.f32	s15, s14
 800272c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002730:	dd18      	ble.n	8002764 <sampling+0x5e4>
 8002732:	4b75      	ldr	r3, [pc, #468]	; (8002908 <sampling+0x788>)
 8002734:	ed93 7a02 	vldr	s14, [r3, #8]
 8002738:	4b75      	ldr	r3, [pc, #468]	; (8002910 <sampling+0x790>)
 800273a:	edd3 7a00 	vldr	s15, [r3]
 800273e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002742:	4b71      	ldr	r3, [pc, #452]	; (8002908 <sampling+0x788>)
 8002744:	edc3 7a02 	vstr	s15, [r3, #8]
 8002748:	4b6f      	ldr	r3, [pc, #444]	; (8002908 <sampling+0x788>)
 800274a:	edd3 7a02 	vldr	s15, [r3, #8]
 800274e:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800291c <sampling+0x79c>
 8002752:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002756:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8002914 <sampling+0x794>
 800275a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800275e:	4b6a      	ldr	r3, [pc, #424]	; (8002908 <sampling+0x788>)
 8002760:	edc3 7a06 	vstr	s15, [r3, #24]
	 if ((ADSR[0].attack_data>1499)   && 		(ADSR[0].attack_data<2000)) 			{		ADSR[0].buffer_temp=500; 	ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data;}
 8002764:	4b68      	ldr	r3, [pc, #416]	; (8002908 <sampling+0x788>)
 8002766:	edd3 7a02 	vldr	s15, [r3, #8]
 800276a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8002920 <sampling+0x7a0>
 800276e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002776:	dd17      	ble.n	80027a8 <sampling+0x628>
 8002778:	4b63      	ldr	r3, [pc, #396]	; (8002908 <sampling+0x788>)
 800277a:	edd3 7a02 	vldr	s15, [r3, #8]
 800277e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002924 <sampling+0x7a4>
 8002782:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800278a:	d50d      	bpl.n	80027a8 <sampling+0x628>
 800278c:	4b5e      	ldr	r3, [pc, #376]	; (8002908 <sampling+0x788>)
 800278e:	4a66      	ldr	r2, [pc, #408]	; (8002928 <sampling+0x7a8>)
 8002790:	619a      	str	r2, [r3, #24]
 8002792:	4b5d      	ldr	r3, [pc, #372]	; (8002908 <sampling+0x788>)
 8002794:	ed93 7a02 	vldr	s14, [r3, #8]
 8002798:	4b5b      	ldr	r3, [pc, #364]	; (8002908 <sampling+0x788>)
 800279a:	edd3 7a04 	vldr	s15, [r3, #16]
 800279e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027a2:	4b59      	ldr	r3, [pc, #356]	; (8002908 <sampling+0x788>)
 80027a4:	edc3 7a02 	vstr	s15, [r3, #8]
	if ((ADSR[0].attack_data>1999)  &&  (ADSR[0].attack_data<2500)	)					{ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data	;	ADSR[0].buffer_temp=2500-ADSR[0].attack_data; } //500-0;
 80027a8:	4b57      	ldr	r3, [pc, #348]	; (8002908 <sampling+0x788>)
 80027aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80027ae:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800292c <sampling+0x7ac>
 80027b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ba:	dd1e      	ble.n	80027fa <sampling+0x67a>
 80027bc:	4b52      	ldr	r3, [pc, #328]	; (8002908 <sampling+0x788>)
 80027be:	edd3 7a02 	vldr	s15, [r3, #8]
 80027c2:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8002930 <sampling+0x7b0>
 80027c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ce:	d514      	bpl.n	80027fa <sampling+0x67a>
 80027d0:	4b4d      	ldr	r3, [pc, #308]	; (8002908 <sampling+0x788>)
 80027d2:	ed93 7a02 	vldr	s14, [r3, #8]
 80027d6:	4b4c      	ldr	r3, [pc, #304]	; (8002908 <sampling+0x788>)
 80027d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80027dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e0:	4b49      	ldr	r3, [pc, #292]	; (8002908 <sampling+0x788>)
 80027e2:	edc3 7a02 	vstr	s15, [r3, #8]
 80027e6:	4b48      	ldr	r3, [pc, #288]	; (8002908 <sampling+0x788>)
 80027e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80027ec:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8002930 <sampling+0x7b0>
 80027f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027f4:	4b44      	ldr	r3, [pc, #272]	; (8002908 <sampling+0x788>)
 80027f6:	edc3 7a06 	vstr	s15, [r3, #24]
	if (ADSR[0].attack_data>3000)   																			{ADSR[0].buffer_temp=1; ADSR[0].attack_data=4000; }     // THE END
 80027fa:	4b43      	ldr	r3, [pc, #268]	; (8002908 <sampling+0x788>)
 80027fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8002800:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8002934 <sampling+0x7b4>
 8002804:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800280c:	dd06      	ble.n	800281c <sampling+0x69c>
 800280e:	4b3e      	ldr	r3, [pc, #248]	; (8002908 <sampling+0x788>)
 8002810:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002814:	619a      	str	r2, [r3, #24]
 8002816:	4b3c      	ldr	r3, [pc, #240]	; (8002908 <sampling+0x788>)
 8002818:	4a47      	ldr	r2, [pc, #284]	; (8002938 <sampling+0x7b8>)
 800281a:	609a      	str	r2, [r3, #8]

adsr_lut[i]= ADSR[0].buffer_temp*0.001;
 800281c:	4b3a      	ldr	r3, [pc, #232]	; (8002908 <sampling+0x788>)
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	4618      	mov	r0, r3
 8002822:	f7fd ff6f 	bl	8000704 <__aeabi_f2d>
 8002826:	a336      	add	r3, pc, #216	; (adr r3, 8002900 <sampling+0x780>)
 8002828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282c:	f7fd fcdc 	bl	80001e8 <__aeabi_dmul>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4941      	ldr	r1, [pc, #260]	; (800293c <sampling+0x7bc>)
 8002836:	8809      	ldrh	r1, [r1, #0]
 8002838:	460c      	mov	r4, r1
 800283a:	4610      	mov	r0, r2
 800283c:	4619      	mov	r1, r3
 800283e:	f7fd ffb9 	bl	80007b4 <__aeabi_d2f>
 8002842:	4602      	mov	r2, r0
 8002844:	493e      	ldr	r1, [pc, #248]	; (8002940 <sampling+0x7c0>)
 8002846:	00a3      	lsls	r3, r4, #2
 8002848:	440b      	add	r3, r1
 800284a:	601a      	str	r2, [r3, #0]
for (i=0;i<256;i++) {
 800284c:	4b3b      	ldr	r3, [pc, #236]	; (800293c <sampling+0x7bc>)
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	3301      	adds	r3, #1
 8002852:	b29a      	uxth	r2, r3
 8002854:	4b39      	ldr	r3, [pc, #228]	; (800293c <sampling+0x7bc>)
 8002856:	801a      	strh	r2, [r3, #0]
 8002858:	4b38      	ldr	r3, [pc, #224]	; (800293c <sampling+0x7bc>)
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	2bff      	cmp	r3, #255	; 0xff
 800285e:	f67f af3b 	bls.w	80026d8 <sampling+0x558>
}

uint8_t seq_dat=(1<<(((adc_values[0]>>3))+1))-1;
 8002862:	4b38      	ldr	r3, [pc, #224]	; (8002944 <sampling+0x7c4>)
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	08db      	lsrs	r3, r3, #3
 8002868:	b29b      	uxth	r3, r3
 800286a:	3301      	adds	r3, #1
 800286c:	2201      	movs	r2, #1
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	b2db      	uxtb	r3, r3
 8002874:	3b01      	subs	r3, #1
 8002876:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
///////////////////////////////////////////////////////////////
uint8_t note_plain;

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 800287a:	4b30      	ldr	r3, [pc, #192]	; (800293c <sampling+0x7bc>)
 800287c:	2200      	movs	r2, #0
 800287e:	801a      	strh	r2, [r3, #0]
 8002880:	e1d8      	b.n	8002c34 <sampling+0xab4>

	i_total=i+sample_pointB;
 8002882:	4b2e      	ldr	r3, [pc, #184]	; (800293c <sampling+0x7bc>)
 8002884:	881a      	ldrh	r2, [r3, #0]
 8002886:	4b30      	ldr	r3, [pc, #192]	; (8002948 <sampling+0x7c8>)
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	4413      	add	r3, r2
 800288c:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
	sampling_position=i>>6;   //   0-8 steps
 8002890:	4b2a      	ldr	r3, [pc, #168]	; (800293c <sampling+0x7bc>)
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	099b      	lsrs	r3, r3, #6
 8002896:	b29b      	uxth	r3, r3
 8002898:	b2da      	uxtb	r2, r3
 800289a:	4b2c      	ldr	r3, [pc, #176]	; (800294c <sampling+0x7cc>)
 800289c:	701a      	strb	r2, [r3, #0]
	sampling_position_b=(sampling_position+7)&7;
 800289e:	4b2b      	ldr	r3, [pc, #172]	; (800294c <sampling+0x7cc>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	3307      	adds	r3, #7
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	4b28      	ldr	r3, [pc, #160]	; (8002950 <sampling+0x7d0>)
 80028ae:	701a      	strb	r2, [r3, #0]
	note_plain=seq.notes1[seq.pos & 7 ];
 80028b0:	4b28      	ldr	r3, [pc, #160]	; (8002954 <sampling+0x7d4>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	4a26      	ldr	r2, [pc, #152]	; (8002954 <sampling+0x7d4>)
 80028ba:	4413      	add	r3, r2
 80028bc:	789b      	ldrb	r3, [r3, #2]
 80028be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
potValues[i&255]=potSource[i&255]>>4; //just to update values
 80028c2:	4b1e      	ldr	r3, [pc, #120]	; (800293c <sampling+0x7bc>)
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	4a23      	ldr	r2, [pc, #140]	; (8002958 <sampling+0x7d8>)
 80028ca:	5cd2      	ldrb	r2, [r2, r3]
 80028cc:	4b1b      	ldr	r3, [pc, #108]	; (800293c <sampling+0x7bc>)
 80028ce:	881b      	ldrh	r3, [r3, #0]
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	0912      	lsrs	r2, r2, #4
 80028d4:	b2d1      	uxtb	r1, r2
 80028d6:	4a21      	ldr	r2, [pc, #132]	; (800295c <sampling+0x7dc>)
 80028d8:	54d1      	strb	r1, [r2, r3]
	if (tempo_count>=tempo_mod) { next_isr=(next_isr+1)& 4095;tempo_count=0;  }  else {tempo_count++; }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 80028da:	4b21      	ldr	r3, [pc, #132]	; (8002960 <sampling+0x7e0>)
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d840      	bhi.n	8002968 <sampling+0x7e8>
 80028e6:	4b1f      	ldr	r3, [pc, #124]	; (8002964 <sampling+0x7e4>)
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	3301      	adds	r3, #1
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	4b1b      	ldr	r3, [pc, #108]	; (8002964 <sampling+0x7e4>)
 80028f6:	801a      	strh	r2, [r3, #0]
 80028f8:	4b19      	ldr	r3, [pc, #100]	; (8002960 <sampling+0x7e0>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	801a      	strh	r2, [r3, #0]
 80028fe:	e039      	b.n	8002974 <sampling+0x7f4>
 8002900:	d2f1a9fc 	.word	0xd2f1a9fc
 8002904:	3f50624d 	.word	0x3f50624d
 8002908:	20004718 	.word	0x20004718
 800290c:	447a0000 	.word	0x447a0000
 8002910:	20004010 	.word	0x20004010
 8002914:	44bb8000 	.word	0x44bb8000
 8002918:	4479c000 	.word	0x4479c000
 800291c:	43fa0000 	.word	0x43fa0000
 8002920:	44bb6000 	.word	0x44bb6000
 8002924:	44fa0000 	.word	0x44fa0000
 8002928:	43fa0000 	.word	0x43fa0000
 800292c:	44f9e000 	.word	0x44f9e000
 8002930:	451c4000 	.word	0x451c4000
 8002934:	453b8000 	.word	0x453b8000
 8002938:	457a0000 	.word	0x457a0000
 800293c:	20000892 	.word	0x20000892
 8002940:	200030a4 	.word	0x200030a4
 8002944:	20000144 	.word	0x20000144
 8002948:	20000890 	.word	0x20000890
 800294c:	20005984 	.word	0x20005984
 8002950:	20005985 	.word	0x20005985
 8002954:	200051a4 	.word	0x200051a4
 8002958:	20000624 	.word	0x20000624
 800295c:	20000424 	.word	0x20000424
 8002960:	200034ce 	.word	0x200034ce
 8002964:	200034a4 	.word	0x200034a4
 8002968:	4b6f      	ldr	r3, [pc, #444]	; (8002b28 <sampling+0x9a8>)
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	3301      	adds	r3, #1
 800296e:	b29a      	uxth	r2, r3
 8002970:	4b6d      	ldr	r3, [pc, #436]	; (8002b28 <sampling+0x9a8>)
 8002972:	801a      	strh	r2, [r3, #0]
// tempo_count is about 1000-400
	tempo_start=0;
 8002974:	2300      	movs	r3, #0
 8002976:	f8a7 314c 	strh.w	r3, [r7, #332]	; 0x14c
	if ((next_isr>>4) != (seq.pos)) { 					//     min 6400 cycles per seq.pos ,         next note step 140ms
 800297a:	4b6c      	ldr	r3, [pc, #432]	; (8002b2c <sampling+0x9ac>)
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	091b      	lsrs	r3, r3, #4
 8002980:	b29a      	uxth	r2, r3
 8002982:	4b6b      	ldr	r3, [pc, #428]	; (8002b30 <sampling+0x9b0>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	b29b      	uxth	r3, r3
 8002988:	429a      	cmp	r2, r3
 800298a:	d009      	beq.n	80029a0 <sampling+0x820>
		seq.pos=(next_isr>>4); // seq pos =256 max , isr = 1/16 of a note, note lenght is 1-4
 800298c:	4b67      	ldr	r3, [pc, #412]	; (8002b2c <sampling+0x9ac>)
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	b29b      	uxth	r3, r3
 8002994:	b2da      	uxtb	r2, r3
 8002996:	4b66      	ldr	r3, [pc, #408]	; (8002b30 <sampling+0x9b0>)
 8002998:	701a      	strb	r2, [r3, #0]
		tempo_start=1;
 800299a:	2301      	movs	r3, #1
 800299c:	f8a7 314c 	strh.w	r3, [r7, #332]	; 0x14c
// record note triggers or seq_changes position ,NEEDS TO BE OFF FOR NOTE 0
}


	if(tempo_start  )    // Calculates only on note change, gotta change seq.pos somehow  , only activates when change in seq pos ie once in ten bankwrites ,rare
 80029a0:	f8b7 314c 	ldrh.w	r3, [r7, #332]	; 0x14c
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 8137 	beq.w	8002c18 <sampling+0xa98>
	{
		serial_tosend=1;
 80029aa:	4b62      	ldr	r3, [pc, #392]	; (8002b34 <sampling+0x9b4>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	701a      	strb	r2, [r3, #0]
		note_reset();
 80029b0:	f7ff fb7e 	bl	80020b0 <note_reset>
		//note[1].timeshift=(adc_values[1])&31; //assigned pots to start of loopers 0-16,works

	//	note[2].timeshift=note[1].timeshift=note[3].timeshift=note[4].timeshift;
		uint8_t   loop_temp1[4];
		loop_temp1[0]=seq.pos&7;
 80029b4:	4b5e      	ldr	r3, [pc, #376]	; (8002b30 <sampling+0x9b0>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80029c2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80029c6:	701a      	strb	r2, [r3, #0]
		loop_temp1[1]=adc_values[1]>>2;
 80029c8:	4b5b      	ldr	r3, [pc, #364]	; (8002b38 <sampling+0x9b8>)
 80029ca:	885b      	ldrh	r3, [r3, #2]
 80029cc:	089b      	lsrs	r3, r3, #2
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80029d6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80029da:	705a      	strb	r2, [r3, #1]
		loop_temp1[2]=adc_values[2]>>2;
 80029dc:	4b56      	ldr	r3, [pc, #344]	; (8002b38 <sampling+0x9b8>)
 80029de:	889b      	ldrh	r3, [r3, #4]
 80029e0:	089b      	lsrs	r3, r3, #2
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80029ea:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80029ee:	709a      	strb	r2, [r3, #2]
		loop_temp1[3]=adc_values[0]>>2;
 80029f0:	4b51      	ldr	r3, [pc, #324]	; (8002b38 <sampling+0x9b8>)
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	089b      	lsrs	r3, r3, #2
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80029fe:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a02:	70da      	strb	r2, [r3, #3]

		//loop_temp1=(seq.pos&seq_dat); // loop position and length


		seq.loop[0]=(note[0].timeshift+loop_temp1[0]+loop_temp1[1])&31;
 8002a04:	4b4d      	ldr	r3, [pc, #308]	; (8002b3c <sampling+0x9bc>)
 8002a06:	799a      	ldrb	r2, [r3, #6]
 8002a08:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002a0c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	4413      	add	r3, r2
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002a1a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a1e:	785b      	ldrb	r3, [r3, #1]
 8002a20:	4413      	add	r3, r2
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	f003 031f 	and.w	r3, r3, #31
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	4b41      	ldr	r3, [pc, #260]	; (8002b30 <sampling+0x9b0>)
 8002a2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		seq.loop[1]=(note[1].timeshift+loop_temp1[0]+loop_temp1[2])&31;
 8002a30:	4b42      	ldr	r3, [pc, #264]	; (8002b3c <sampling+0x9bc>)
 8002a32:	7d1a      	ldrb	r2, [r3, #20]
 8002a34:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002a38:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	4413      	add	r3, r2
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002a46:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a4a:	789b      	ldrb	r3, [r3, #2]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	f003 031f 	and.w	r3, r3, #31
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	4b36      	ldr	r3, [pc, #216]	; (8002b30 <sampling+0x9b0>)
 8002a58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		seq.loop[2]=(note[2].timeshift+loop_temp1[0])&31; // this is really handy with sync to notes
 8002a5c:	4b37      	ldr	r3, [pc, #220]	; (8002b3c <sampling+0x9bc>)
 8002a5e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002a62:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002a66:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	f003 031f 	and.w	r3, r3, #31
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	4b2e      	ldr	r3, [pc, #184]	; (8002b30 <sampling+0x9b0>)
 8002a78:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		seq.loop[3]=(note[3].timeshift+loop_temp1[0]+loop_temp1[3])&31;
 8002a7c:	4b2f      	ldr	r3, [pc, #188]	; (8002b3c <sampling+0x9bc>)
 8002a7e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8002a82:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002a86:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002a94:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a98:	78db      	ldrb	r3, [r3, #3]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	f003 031f 	and.w	r3, r3, #31
 8002aa2:	b2da      	uxtb	r2, r3
 8002aa4:	4b22      	ldr	r3, [pc, #136]	; (8002b30 <sampling+0x9b0>)
 8002aa6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		//seq.loop[5]=(note[5].timeshift+loop_temp1[0])&31;


			note[0].pitch=(notes_joined[seq.loop[0]])+(note[0].transpose);    // maybe join 1 and 2
 8002aaa:	4b21      	ldr	r3, [pc, #132]	; (8002b30 <sampling+0x9b0>)
 8002aac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	4b23      	ldr	r3, [pc, #140]	; (8002b40 <sampling+0x9c0>)
 8002ab4:	5c9a      	ldrb	r2, [r3, r2]
 8002ab6:	4b21      	ldr	r3, [pc, #132]	; (8002b3c <sampling+0x9bc>)
 8002ab8:	795b      	ldrb	r3, [r3, #5]
 8002aba:	4413      	add	r3, r2
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	4b1f      	ldr	r3, [pc, #124]	; (8002b3c <sampling+0x9bc>)
 8002ac0:	709a      	strb	r2, [r3, #2]
			//note[0].pitch=note[1].pitch+(note[0].transpose); // just double
			note[1].pitch=(notes_joined[seq.loop[1]])+(note[1].transpose);  //loop 8 notes from pos and x times
 8002ac2:	4b1b      	ldr	r3, [pc, #108]	; (8002b30 <sampling+0x9b0>)
 8002ac4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4b1d      	ldr	r3, [pc, #116]	; (8002b40 <sampling+0x9c0>)
 8002acc:	5c9a      	ldrb	r2, [r3, r2]
 8002ace:	4b1b      	ldr	r3, [pc, #108]	; (8002b3c <sampling+0x9bc>)
 8002ad0:	7cdb      	ldrb	r3, [r3, #19]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	4b19      	ldr	r3, [pc, #100]	; (8002b3c <sampling+0x9bc>)
 8002ad8:	741a      	strb	r2, [r3, #16]
			note[2].pitch=(notes_joined[seq.loop[2]])+(note[2].transpose);  //loop 8 notes from pos and x times
 8002ada:	4b15      	ldr	r3, [pc, #84]	; (8002b30 <sampling+0x9b0>)
 8002adc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4b17      	ldr	r3, [pc, #92]	; (8002b40 <sampling+0x9c0>)
 8002ae4:	5c9a      	ldrb	r2, [r3, r2]
 8002ae6:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <sampling+0x9bc>)
 8002ae8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002aec:	4413      	add	r3, r2
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <sampling+0x9bc>)
 8002af2:	779a      	strb	r2, [r3, #30]

		note[3].pitch=(notes_joined[seq.loop[3]])+(note[3].transpose); ;  //loop 8 notes from pos and x times ,might disable normal adsr completely
 8002af4:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <sampling+0x9b0>)
 8002af6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002afa:	461a      	mov	r2, r3
 8002afc:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <sampling+0x9c0>)
 8002afe:	5c9a      	ldrb	r2, [r3, r2]
 8002b00:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <sampling+0x9bc>)
 8002b02:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002b06:	4413      	add	r3, r2
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <sampling+0x9bc>)
 8002b0c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
//	if (note[3].pitch) 		{note[3].pitch=note[3].pitch+(note[3].transpose>>4);	adsr_retrigger[3]=1; note_toggler[i>>5]=1<<(i&31   )   ; } // stay at zero for off

//	note[3].pitch=(notes_joined[seq.loop[3]])+(note[3].transpose);  //
		patch_target_replace();
 8002b10:	f7fe fc90 	bl	8001434 <patch_target_replace>
		uint8_t detune_temp=0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
//		if(detune_temp>27) detune_temp=27;
		   //this is for sine skip mask

//	note[3].tuned=sine_lut[MajorNote[detune_temp]];	//sets freq ,1.0594  * 16536 =17518  ,
//	note[3].tuned= (note[3].tuned*1200)>>10;  // modify different sample size , just need single cycle length and thats it
		mask_result =0;
 8002b1a:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <sampling+0x9c4>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	801a      	strh	r2, [r3, #0]

		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8002b20:	2300      	movs	r3, #0
 8002b22:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
 8002b26:	e073      	b.n	8002c10 <sampling+0xa90>
 8002b28:	200034ce 	.word	0x200034ce
 8002b2c:	200034a4 	.word	0x200034a4
 8002b30:	200051a4 	.word	0x200051a4
 8002b34:	20007bb1 	.word	0x20007bb1
 8002b38:	20000144 	.word	0x20000144
 8002b3c:	20000158 	.word	0x20000158
 8002b40:	2000798c 	.word	0x2000798c
 8002b44:	200018a0 	.word	0x200018a0

if (note[mask_i].pitch) {
 8002b48:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 8002b4c:	4998      	ldr	r1, [pc, #608]	; (8002db0 <sampling+0xc30>)
 8002b4e:	4613      	mov	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	1a9b      	subs	r3, r3, r2
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	440b      	add	r3, r1
 8002b58:	3302      	adds	r3, #2
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d052      	beq.n	8002c06 <sampling+0xa86>

		//detune_temp=(note[mask_i].pitch+(note[mask_i].detune))&31    ;
		//if(detune_temp>27) detune_temp=27;


		note[mask_i].tuned=sample_Noteadd[MajorNote[note[mask_i].pitch]];
 8002b60:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 8002b64:	4992      	ldr	r1, [pc, #584]	; (8002db0 <sampling+0xc30>)
 8002b66:	4613      	mov	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	1a9b      	subs	r3, r3, r2
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	440b      	add	r3, r1
 8002b70:	3302      	adds	r3, #2
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	461a      	mov	r2, r3
 8002b76:	4b8f      	ldr	r3, [pc, #572]	; (8002db4 <sampling+0xc34>)
 8002b78:	5c9b      	ldrb	r3, [r3, r2]
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 8002b80:	4b8d      	ldr	r3, [pc, #564]	; (8002db8 <sampling+0xc38>)
 8002b82:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8002b86:	498a      	ldr	r1, [pc, #552]	; (8002db0 <sampling+0xc30>)
 8002b88:	4613      	mov	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	1a9b      	subs	r3, r3, r2
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	440b      	add	r3, r1
 8002b92:	330c      	adds	r3, #12
 8002b94:	4602      	mov	r2, r0
 8002b96:	801a      	strh	r2, [r3, #0]
		//tuned_list[mask_i]=note[mask_i].tuned;
		if (note[mask_i].osc>=3)  note[mask_i].tuned=note[mask_i].tuned>>1;
 8002b98:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 8002b9c:	4984      	ldr	r1, [pc, #528]	; (8002db0 <sampling+0xc30>)
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	1a9b      	subs	r3, r3, r2
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	440b      	add	r3, r1
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d916      	bls.n	8002bdc <sampling+0xa5c>
 8002bae:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 8002bb2:	497f      	ldr	r1, [pc, #508]	; (8002db0 <sampling+0xc30>)
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	440b      	add	r3, r1
 8002bbe:	330c      	adds	r3, #12
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 8002bc6:	085b      	lsrs	r3, r3, #1
 8002bc8:	b298      	uxth	r0, r3
 8002bca:	4979      	ldr	r1, [pc, #484]	; (8002db0 <sampling+0xc30>)
 8002bcc:	4613      	mov	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	1a9b      	subs	r3, r3, r2
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	440b      	add	r3, r1
 8002bd6:	330c      	adds	r3, #12
 8002bd8:	4602      	mov	r2, r0
 8002bda:	801a      	strh	r2, [r3, #0]
		if (sampler.one_shot &(1<<mask_i))  sine_counter[4+(mask_i*3)]=0;  // clear if one shto enabled
 8002bdc:	4b77      	ldr	r3, [pc, #476]	; (8002dbc <sampling+0xc3c>)
 8002bde:	78db      	ldrb	r3, [r3, #3]
 8002be0:	461a      	mov	r2, r3
 8002be2:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8002be6:	fa42 f303 	asr.w	r3, r2, r3
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d009      	beq.n	8002c06 <sampling+0xa86>
 8002bf2:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	4a70      	ldr	r2, [pc, #448]	; (8002dc0 <sampling+0xc40>)
 8002c00:	2100      	movs	r1, #0
 8002c02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8002c06:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
 8002c10:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d997      	bls.n	8002b48 <sampling+0x9c8>
		//note_tuned[3]=2751;
	} // end of note calcualte



	if ((i&63)==0)
 8002c18:	4b6a      	ldr	r3, [pc, #424]	; (8002dc4 <sampling+0xc44>)
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <sampling+0xaa8>
	{

		LFO_source(); // calculate lfo maybe 8 times for now
 8002c24:	f000 fec8 	bl	80039b8 <LFO_source>
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002c28:	4b66      	ldr	r3, [pc, #408]	; (8002dc4 <sampling+0xc44>)
 8002c2a:	881b      	ldrh	r3, [r3, #0]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	4b64      	ldr	r3, [pc, #400]	; (8002dc4 <sampling+0xc44>)
 8002c32:	801a      	strh	r2, [r3, #0]
 8002c34:	4b63      	ldr	r3, [pc, #396]	; (8002dc4 <sampling+0xc44>)
 8002c36:	881b      	ldrh	r3, [r3, #0]
 8002c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c3c:	f4ff ae21 	bcc.w	8002882 <sampling+0x702>
int32_t  sample_temp4;
int32_t  sample_temp5;


uint32_t*  sine_ptr_temp[5];
	sampler.start=(sampler.start_MSB<<8)+sampler.start_LSB;
 8002c40:	4b5e      	ldr	r3, [pc, #376]	; (8002dbc <sampling+0xc3c>)
 8002c42:	7b9b      	ldrb	r3, [r3, #14]
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	021b      	lsls	r3, r3, #8
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	4b5c      	ldr	r3, [pc, #368]	; (8002dbc <sampling+0xc3c>)
 8002c4c:	7bdb      	ldrb	r3, [r3, #15]
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	4413      	add	r3, r2
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	4b59      	ldr	r3, [pc, #356]	; (8002dbc <sampling+0xc3c>)
 8002c56:	80da      	strh	r2, [r3, #6]
	sampler.end=(sampler.end_MSB<<8)+sampler.end_LSB;
 8002c58:	4b58      	ldr	r3, [pc, #352]	; (8002dbc <sampling+0xc3c>)
 8002c5a:	7c1b      	ldrb	r3, [r3, #16]
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	021b      	lsls	r3, r3, #8
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	4b56      	ldr	r3, [pc, #344]	; (8002dbc <sampling+0xc3c>)
 8002c64:	7c5b      	ldrb	r3, [r3, #17]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	4413      	add	r3, r2
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	4b53      	ldr	r3, [pc, #332]	; (8002dbc <sampling+0xc3c>)
 8002c6e:	811a      	strh	r2, [r3, #8]

	if ((sampler.one_shot&1) && (sine_counter[4]>(sampler.end-1000)) && (note[0].osc==3))   note[0].tuned=0;   //stop at the end
 8002c70:	4b52      	ldr	r3, [pc, #328]	; (8002dbc <sampling+0xc3c>)
 8002c72:	78db      	ldrb	r3, [r3, #3]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00e      	beq.n	8002c9a <sampling+0xb1a>
 8002c7c:	4b50      	ldr	r3, [pc, #320]	; (8002dc0 <sampling+0xc40>)
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	4a4e      	ldr	r2, [pc, #312]	; (8002dbc <sampling+0xc3c>)
 8002c82:	8912      	ldrh	r2, [r2, #8]
 8002c84:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d906      	bls.n	8002c9a <sampling+0xb1a>
 8002c8c:	4b48      	ldr	r3, [pc, #288]	; (8002db0 <sampling+0xc30>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b03      	cmp	r3, #3
 8002c92:	d102      	bne.n	8002c9a <sampling+0xb1a>
 8002c94:	4b46      	ldr	r3, [pc, #280]	; (8002db0 <sampling+0xc30>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	819a      	strh	r2, [r3, #12]
	if ((sampler.one_shot&2) && (sine_counter[7]>(sampler.end-1000))&& (note[1].osc==3))    note[1].tuned=0;
 8002c9a:	4b48      	ldr	r3, [pc, #288]	; (8002dbc <sampling+0xc3c>)
 8002c9c:	78db      	ldrb	r3, [r3, #3]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00e      	beq.n	8002cc4 <sampling+0xb44>
 8002ca6:	4b46      	ldr	r3, [pc, #280]	; (8002dc0 <sampling+0xc40>)
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	4a44      	ldr	r2, [pc, #272]	; (8002dbc <sampling+0xc3c>)
 8002cac:	8912      	ldrh	r2, [r2, #8]
 8002cae:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d906      	bls.n	8002cc4 <sampling+0xb44>
 8002cb6:	4b3e      	ldr	r3, [pc, #248]	; (8002db0 <sampling+0xc30>)
 8002cb8:	7b9b      	ldrb	r3, [r3, #14]
 8002cba:	2b03      	cmp	r3, #3
 8002cbc:	d102      	bne.n	8002cc4 <sampling+0xb44>
 8002cbe:	4b3c      	ldr	r3, [pc, #240]	; (8002db0 <sampling+0xc30>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	835a      	strh	r2, [r3, #26]
	if ((sampler.one_shot&4) && (sine_counter[11]>(sampler.end-1000))&& (note[2].osc==3))    note[2].tuned=0;
 8002cc4:	4b3d      	ldr	r3, [pc, #244]	; (8002dbc <sampling+0xc3c>)
 8002cc6:	78db      	ldrb	r3, [r3, #3]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00e      	beq.n	8002cee <sampling+0xb6e>
 8002cd0:	4b3b      	ldr	r3, [pc, #236]	; (8002dc0 <sampling+0xc40>)
 8002cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd4:	4a39      	ldr	r2, [pc, #228]	; (8002dbc <sampling+0xc3c>)
 8002cd6:	8912      	ldrh	r2, [r2, #8]
 8002cd8:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d906      	bls.n	8002cee <sampling+0xb6e>
 8002ce0:	4b33      	ldr	r3, [pc, #204]	; (8002db0 <sampling+0xc30>)
 8002ce2:	7f1b      	ldrb	r3, [r3, #28]
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d102      	bne.n	8002cee <sampling+0xb6e>
 8002ce8:	4b31      	ldr	r3, [pc, #196]	; (8002db0 <sampling+0xc30>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	851a      	strh	r2, [r3, #40]	; 0x28
	if ((sampler.one_shot&8) && (sine_counter[14]>(sampler.end-1000))&& (note[3].osc==3))   note[3].tuned=0;
 8002cee:	4b33      	ldr	r3, [pc, #204]	; (8002dbc <sampling+0xc3c>)
 8002cf0:	78db      	ldrb	r3, [r3, #3]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00f      	beq.n	8002d1a <sampling+0xb9a>
 8002cfa:	4b31      	ldr	r3, [pc, #196]	; (8002dc0 <sampling+0xc40>)
 8002cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfe:	4a2f      	ldr	r2, [pc, #188]	; (8002dbc <sampling+0xc3c>)
 8002d00:	8912      	ldrh	r2, [r2, #8]
 8002d02:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d907      	bls.n	8002d1a <sampling+0xb9a>
 8002d0a:	4b29      	ldr	r3, [pc, #164]	; (8002db0 <sampling+0xc30>)
 8002d0c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d102      	bne.n	8002d1a <sampling+0xb9a>
 8002d14:	4b26      	ldr	r3, [pc, #152]	; (8002db0 <sampling+0xc30>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	86da      	strh	r2, [r3, #54]	; 0x36

	sine_ptr_temp[0]=&sine_counter[3];
 8002d1a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002d1e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002d22:	4a29      	ldr	r2, [pc, #164]	; (8002dc8 <sampling+0xc48>)
 8002d24:	601a      	str	r2, [r3, #0]
	sine_ptr_temp[1]=&sine_counter[6];
 8002d26:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002d2a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002d2e:	4a27      	ldr	r2, [pc, #156]	; (8002dcc <sampling+0xc4c>)
 8002d30:	605a      	str	r2, [r3, #4]
	sine_ptr_temp[2]=&sine_counter[9];
 8002d32:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002d36:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002d3a:	4a25      	ldr	r2, [pc, #148]	; (8002dd0 <sampling+0xc50>)
 8002d3c:	609a      	str	r2, [r3, #8]
	sine_ptr_temp[3]=&sine_counter[12];
 8002d3e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002d42:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002d46:	4a23      	ldr	r2, [pc, #140]	; (8002dd4 <sampling+0xc54>)
 8002d48:	60da      	str	r2, [r3, #12]


	if(sampler.start>sampler.end) sampler.start=0; //flip to 0  for now
 8002d4a:	4b1c      	ldr	r3, [pc, #112]	; (8002dbc <sampling+0xc3c>)
 8002d4c:	88da      	ldrh	r2, [r3, #6]
 8002d4e:	4b1b      	ldr	r3, [pc, #108]	; (8002dbc <sampling+0xc3c>)
 8002d50:	891b      	ldrh	r3, [r3, #8]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d902      	bls.n	8002d5c <sampling+0xbdc>
 8002d56:	4b19      	ldr	r3, [pc, #100]	; (8002dbc <sampling+0xc3c>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	80da      	strh	r2, [r3, #6]
	if (sampler.ram_seq<sampler.start)      sampler.ram_seq=sampler.start;
 8002d5c:	4b17      	ldr	r3, [pc, #92]	; (8002dbc <sampling+0xc3c>)
 8002d5e:	8b1a      	ldrh	r2, [r3, #24]
 8002d60:	4b16      	ldr	r3, [pc, #88]	; (8002dbc <sampling+0xc3c>)
 8002d62:	88db      	ldrh	r3, [r3, #6]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d203      	bcs.n	8002d70 <sampling+0xbf0>
 8002d68:	4b14      	ldr	r3, [pc, #80]	; (8002dbc <sampling+0xc3c>)
 8002d6a:	88da      	ldrh	r2, [r3, #6]
 8002d6c:	4b13      	ldr	r3, [pc, #76]	; (8002dbc <sampling+0xc3c>)
 8002d6e:	831a      	strh	r2, [r3, #24]
	if ((sampler.ram_seq+512)>sampler.end) sampler.ram_seq=sampler.start;
 8002d70:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <sampling+0xc3c>)
 8002d72:	8b1b      	ldrh	r3, [r3, #24]
 8002d74:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002d78:	4a10      	ldr	r2, [pc, #64]	; (8002dbc <sampling+0xc3c>)
 8002d7a:	8912      	ldrh	r2, [r2, #8]
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	db03      	blt.n	8002d88 <sampling+0xc08>
 8002d80:	4b0e      	ldr	r3, [pc, #56]	; (8002dbc <sampling+0xc3c>)
 8002d82:	88da      	ldrh	r2, [r3, #6]
 8002d84:	4b0d      	ldr	r3, [pc, #52]	; (8002dbc <sampling+0xc3c>)
 8002d86:	831a      	strh	r2, [r3, #24]

	sampler.length=sampler.end-sampler.start;
 8002d88:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <sampling+0xc3c>)
 8002d8a:	891a      	ldrh	r2, [r3, #8]
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <sampling+0xc3c>)
 8002d8e:	88db      	ldrh	r3, [r3, #6]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	4b09      	ldr	r3, [pc, #36]	; (8002dbc <sampling+0xc3c>)
 8002d96:	815a      	strh	r2, [r3, #10]
	sampler.start_ptr=&RAM[sampler.start];
 8002d98:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <sampling+0xc3c>)
 8002d9a:	88db      	ldrh	r3, [r3, #6]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	4a0e      	ldr	r2, [pc, #56]	; (8002dd8 <sampling+0xc58>)
 8002da0:	4413      	add	r3, r2
 8002da2:	4a06      	ldr	r2, [pc, #24]	; (8002dbc <sampling+0xc3c>)
 8002da4:	6153      	str	r3, [r2, #20]



for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002da6:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <sampling+0xc44>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	801a      	strh	r2, [r3, #0]
 8002dac:	e222      	b.n	80031f4 <sampling+0x1074>
 8002dae:	bf00      	nop
 8002db0:	20000158 	.word	0x20000158
 8002db4:	0800ba7c 	.word	0x0800ba7c
 8002db8:	0800ba98 	.word	0x0800ba98
 8002dbc:	20000204 	.word	0x20000204
 8002dc0:	20000824 	.word	0x20000824
 8002dc4:	20000892 	.word	0x20000892
 8002dc8:	20000830 	.word	0x20000830
 8002dcc:	2000083c 	.word	0x2000083c
 8002dd0:	20000848 	.word	0x20000848
 8002dd4:	20000854 	.word	0x20000854
 8002dd8:	20007bb4 	.word	0x20007bb4
	i_total=i+sample_pointB;
 8002ddc:	4bd6      	ldr	r3, [pc, #856]	; (8003138 <sampling+0xfb8>)
 8002dde:	881a      	ldrh	r2, [r3, #0]
 8002de0:	4bd6      	ldr	r3, [pc, #856]	; (800313c <sampling+0xfbc>)
 8002de2:	881b      	ldrh	r3, [r3, #0]
 8002de4:	4413      	add	r3, r2
 8002de6:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
	sampling_position=(i>>6);
 8002dea:	4bd3      	ldr	r3, [pc, #844]	; (8003138 <sampling+0xfb8>)
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	099b      	lsrs	r3, r3, #6
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	4bd2      	ldr	r3, [pc, #840]	; (8003140 <sampling+0xfc0>)
 8002df6:	701a      	strb	r2, [r3, #0]
	sample_adc=input_holder[i];
 8002df8:	4bcf      	ldr	r3, [pc, #828]	; (8003138 <sampling+0xfb8>)
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4bd1      	ldr	r3, [pc, #836]	; (8003144 <sampling+0xfc4>)
 8002e00:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002e04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	sample_adc=(sample_adc-2040)<<12;
 8002e08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e0c:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 8002e10:	031b      	lsls	r3, r3, #12
 8002e12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	ram_temp=((RAM[sampler.ram_seq])); // grab data
 8002e16:	4bcc      	ldr	r3, [pc, #816]	; (8003148 <sampling+0xfc8>)
 8002e18:	8b1b      	ldrh	r3, [r3, #24]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	4bcb      	ldr	r3, [pc, #812]	; (800314c <sampling+0xfcc>)
 8002e1e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002e22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	ram_temp=(ram_temp-2040)<<12;
 8002e26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e2a:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 8002e2e:	031b      	lsls	r3, r3, #12
 8002e30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	sampler.ram_seq++;
 8002e34:	4bc4      	ldr	r3, [pc, #784]	; (8003148 <sampling+0xfc8>)
 8002e36:	8b1b      	ldrh	r3, [r3, #24]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	4bc2      	ldr	r3, [pc, #776]	; (8003148 <sampling+0xfc8>)
 8002e3e:	831a      	strh	r2, [r3, #24]


	if ((i&63)==0)	{  patch_target_replace();    // update values , not too bad
 8002e40:	4bbd      	ldr	r3, [pc, #756]	; (8003138 <sampling+0xfb8>)
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f040 8095 	bne.w	8002f78 <sampling+0xdf8>
 8002e4e:	f7fe faf1 	bl	8001434 <patch_target_replace>
float freq_temp=arm_sin_f32(filter[0].cutoff_1*0.006159)    ;   // need this for useful filter
 8002e52:	4bbf      	ldr	r3, [pc, #764]	; (8003150 <sampling+0xfd0>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fd fc42 	bl	80006e0 <__aeabi_i2d>
 8002e5c:	a3b2      	add	r3, pc, #712	; (adr r3, 8003128 <sampling+0xfa8>)
 8002e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e62:	f7fd f9c1 	bl	80001e8 <__aeabi_dmul>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	f7fd fca1 	bl	80007b4 <__aeabi_d2f>
 8002e72:	4603      	mov	r3, r0
 8002e74:	ee00 3a10 	vmov	s0, r3
 8002e78:	f008 fac0 	bl	800b3fc <arm_sin_f32>
 8002e7c:	ed87 0a4b 	vstr	s0, [r7, #300]	; 0x12c
	freq_pointer[0] [sampling_position]=1-freq_temp; // problem was selecting accu instead of out , good now
 8002e80:	4baf      	ldr	r3, [pc, #700]	; (8003140 <sampling+0xfc0>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e88:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 8002e8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e90:	4ab0      	ldr	r2, [pc, #704]	; (8003154 <sampling+0xfd4>)
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	edc3 7a00 	vstr	s15, [r3]
	 freq_temp=arm_sin_f32(filter[1].cutoff_1*0.006)    ;
 8002e9a:	4bad      	ldr	r3, [pc, #692]	; (8003150 <sampling+0xfd0>)
 8002e9c:	7a1b      	ldrb	r3, [r3, #8]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fd fc1e 	bl	80006e0 <__aeabi_i2d>
 8002ea4:	a3a2      	add	r3, pc, #648	; (adr r3, 8003130 <sampling+0xfb0>)
 8002ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eaa:	f7fd f99d 	bl	80001e8 <__aeabi_dmul>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	f7fd fc7d 	bl	80007b4 <__aeabi_d2f>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	ee00 3a10 	vmov	s0, r3
 8002ec0:	f008 fa9c 	bl	800b3fc <arm_sin_f32>
 8002ec4:	ed87 0a4b 	vstr	s0, [r7, #300]	; 0x12c
	freq_pointer[1] [sampling_position] =1-freq_temp ; // filter lfos
 8002ec8:	4b9d      	ldr	r3, [pc, #628]	; (8003140 <sampling+0xfc0>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ed0:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 8002ed4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ed8:	4a9e      	ldr	r2, [pc, #632]	; (8003154 <sampling+0xfd4>)
 8002eda:	3309      	adds	r3, #9
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	edc3 7a00 	vstr	s15, [r3]
	freq_temp=arm_sin_f32(filter[2].cutoff_1*0.006)    ;
 8002ee4:	4b9a      	ldr	r3, [pc, #616]	; (8003150 <sampling+0xfd0>)
 8002ee6:	7c1b      	ldrb	r3, [r3, #16]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fd fbf9 	bl	80006e0 <__aeabi_i2d>
 8002eee:	a390      	add	r3, pc, #576	; (adr r3, 8003130 <sampling+0xfb0>)
 8002ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef4:	f7fd f978 	bl	80001e8 <__aeabi_dmul>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4610      	mov	r0, r2
 8002efe:	4619      	mov	r1, r3
 8002f00:	f7fd fc58 	bl	80007b4 <__aeabi_d2f>
 8002f04:	4603      	mov	r3, r0
 8002f06:	ee00 3a10 	vmov	s0, r3
 8002f0a:	f008 fa77 	bl	800b3fc <arm_sin_f32>
 8002f0e:	ed87 0a4b 	vstr	s0, [r7, #300]	; 0x12c
	freq_pointer[2] [sampling_position] =1-freq_temp ; // filter lfos
 8002f12:	4b8b      	ldr	r3, [pc, #556]	; (8003140 <sampling+0xfc0>)
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f1a:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 8002f1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f22:	4a8c      	ldr	r2, [pc, #560]	; (8003154 <sampling+0xfd4>)
 8002f24:	3312      	adds	r3, #18
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	edc3 7a00 	vstr	s15, [r3]
	 freq_temp=arm_sin_f32(filter[3].cutoff_1*0.006)    ;
 8002f2e:	4b88      	ldr	r3, [pc, #544]	; (8003150 <sampling+0xfd0>)
 8002f30:	7e1b      	ldrb	r3, [r3, #24]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fd fbd4 	bl	80006e0 <__aeabi_i2d>
 8002f38:	a37d      	add	r3, pc, #500	; (adr r3, 8003130 <sampling+0xfb0>)
 8002f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3e:	f7fd f953 	bl	80001e8 <__aeabi_dmul>
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	4610      	mov	r0, r2
 8002f48:	4619      	mov	r1, r3
 8002f4a:	f7fd fc33 	bl	80007b4 <__aeabi_d2f>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	ee00 3a10 	vmov	s0, r3
 8002f54:	f008 fa52 	bl	800b3fc <arm_sin_f32>
 8002f58:	ed87 0a4b 	vstr	s0, [r7, #300]	; 0x12c
	freq_pointer[3] [sampling_position] =1-freq_temp ; // filter lfos
 8002f5c:	4b78      	ldr	r3, [pc, #480]	; (8003140 <sampling+0xfc0>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f64:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 8002f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f6c:	4a79      	ldr	r2, [pc, #484]	; (8003154 <sampling+0xfd4>)
 8002f6e:	331b      	adds	r3, #27
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	edc3 7a00 	vstr	s15, [r3]

	}

		sample_accus[0] = sample_accus[0] + tuned_list[0];  // normal adder full volume
 8002f78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002f7c:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8002f80:	4413      	add	r3, r2
 8002f82:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		sample_accus[1] = sample_accus[1] + tuned_list[1];
 8002f86:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002f8a:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 8002f8e:	4413      	add	r3, r2
 8002f90:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
		sample_accus[2] = sample_accus[2] + tuned_list[2]; // bouncing somewhere
 8002f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f98:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		sample_accus[3] = sample_accus[3] + tuned_list[3];  // 7 cycles
 8002fa2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002fa6:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 8002faa:	4413      	add	r3, r2
 8002fac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	if (sample_accus[0]>524287) sample_accus[0] =-1048576+sample_accus[0] ; // faster >  than &  ,strange,  or is even worse
 8002fb0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002fb4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002fb8:	db05      	blt.n	8002fc6 <sampling+0xe46>
 8002fba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002fbe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8002fc2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	if (sample_accus[1]>524287) sample_accus[1] =-1048576+sample_accus[1] ; // faster >  than &  ,strange
 8002fc6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002fca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002fce:	db05      	blt.n	8002fdc <sampling+0xe5c>
 8002fd0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002fd4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8002fd8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	if (sample_accus[2]>524287) sample_accus[2] =-1048576+sample_accus[2] ; //
 8002fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002fe4:	db05      	blt.n	8002ff2 <sampling+0xe72>
 8002fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fea:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8002fee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	if (sample_accus[3]>524287) sample_accus[3] =-1048576+sample_accus[3] ; //
 8002ff2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ff6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ffa:	db05      	blt.n	8003008 <sampling+0xe88>
 8002ffc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003000:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8003004:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8


	sample_Accu[0]=(abs(sample_accus[0])-262144)<<1;
 8003008:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800300c:	2b00      	cmp	r3, #0
 800300e:	bfb8      	it	lt
 8003010:	425b      	neglt	r3, r3
 8003012:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	sample_Accu[1]=(abs(sample_accus[1])-262144)<<1;
 800301c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003020:	2b00      	cmp	r3, #0
 8003022:	bfb8      	it	lt
 8003024:	425b      	neglt	r3, r3
 8003026:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	sample_Accu[2]=(abs(sample_accus[2])-262144)<<1;
 8003030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003034:	2b00      	cmp	r3, #0
 8003036:	bfb8      	it	lt
 8003038:	425b      	neglt	r3, r3
 800303a:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	sample_Accu[3]=(abs(sample_accus[3])-262144)<<1;
 8003044:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003048:	2b00      	cmp	r3, #0
 800304a:	bfb8      	it	lt
 800304c:	425b      	neglt	r3, r3
 800304e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0


					sample_Accu[6]=sine_count2(0,sine_ptr_temp[0],sine_ptr_temp[0]);  // might unroll later
 8003058:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800305c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003060:	6819      	ldr	r1, [r3, #0]
 8003062:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8003066:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	461a      	mov	r2, r3
 800306e:	2000      	movs	r0, #0
 8003070:	f000 fc36 	bl	80038e0 <sine_count2>
 8003074:	4603      	mov	r3, r0
 8003076:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	 	 	 	 	 sample_temp1=(*osc_pointers[0])*note[0].velocity;// needs cut a bit  maybe some diff vol settings
 800307a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800307e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a34      	ldr	r2, [pc, #208]	; (8003158 <sampling+0xfd8>)
 8003088:	79d2      	ldrb	r2, [r2, #7]
 800308a:	fb02 f303 	mul.w	r3, r2, r3
 800308e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
					sample_temp2=(sample_temp1)>>2;
 8003092:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003096:	109b      	asrs	r3, r3, #2
 8003098:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
				    //sample_Accu[0] =(sample_accus[0]+sample_accus[1])>>8;
					sample_Accu[7]=sine_count2(1,sine_ptr_temp[1],sine_ptr_temp[1]);  // might unroll later // might unroll later
 800309c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80030a0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80030a4:	6859      	ldr	r1, [r3, #4]
 80030a6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80030aa:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	461a      	mov	r2, r3
 80030b2:	2001      	movs	r0, #1
 80030b4:	f000 fc14 	bl	80038e0 <sine_count2>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
					sample_temp1=(*osc_pointers[1])*note[1].velocity; // needs cut a bit  ,default 20bit
 80030be:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80030c2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a23      	ldr	r2, [pc, #140]	; (8003158 <sampling+0xfd8>)
 80030cc:	7d52      	ldrb	r2, [r2, #21]
 80030ce:	fb02 f303 	mul.w	r3, r2, r3
 80030d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
					sample_temp3=sample_temp1>>2; // 20+8
 80030d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80030da:	109b      	asrs	r3, r3, #2
 80030dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
					//sample_Accu[1] =sample_accus[2]>>8;

					sample_Accu[8]=sine_count2(2,sine_ptr_temp[2],sine_ptr_temp[2]);  // might unroll later // might unroll later
 80030e0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80030e4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80030e8:	6899      	ldr	r1, [r3, #8]
 80030ea:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80030ee:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	461a      	mov	r2, r3
 80030f6:	2002      	movs	r0, #2
 80030f8:	f000 fbf2 	bl	80038e0 <sine_count2>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
					sample_temp1=(*osc_pointers[2])*note[2].velocity;      // needs some gain fine tune !
 8003102:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8003106:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a12      	ldr	r2, [pc, #72]	; (8003158 <sampling+0xfd8>)
 8003110:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 8003114:	fb02 f303 	mul.w	r3, r2, r3
 8003118:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
					sample_temp4 =sample_temp1>>2;    // 64 default 20+8
 800311c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003120:	e01c      	b.n	800315c <sampling+0xfdc>
 8003122:	bf00      	nop
 8003124:	f3af 8000 	nop.w
 8003128:	f9378ee3 	.word	0xf9378ee3
 800312c:	3f793a2d 	.word	0x3f793a2d
 8003130:	bc6a7efa 	.word	0xbc6a7efa
 8003134:	3f789374 	.word	0x3f789374
 8003138:	20000892 	.word	0x20000892
 800313c:	20000890 	.word	0x20000890
 8003140:	20005984 	.word	0x20005984
 8003144:	20004018 	.word	0x20004018
 8003148:	20000204 	.word	0x20000204
 800314c:	20007bb4 	.word	0x20007bb4
 8003150:	200001e4 	.word	0x200001e4
 8003154:	2000355c 	.word	0x2000355c
 8003158:	20000158 	.word	0x20000158
 800315c:	109b      	asrs	r3, r3, #2
 800315e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c


					sample_Accu[9]=sine_count2(3,sine_ptr_temp[3],sine_ptr_temp[3]);  // might unroll later // might unroll later
 8003162:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8003166:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800316a:	68d9      	ldr	r1, [r3, #12]
 800316c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8003170:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	461a      	mov	r2, r3
 8003178:	2003      	movs	r0, #3
 800317a:	f000 fbb1 	bl	80038e0 <sine_count2>
 800317e:	4603      	mov	r3, r0
 8003180:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
					sample_temp1=(*osc_pointers[3])*	note[3].velocity;  // sine out is 16bit, add 4 then 16+8
 8003184:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8003188:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a98      	ldr	r2, [pc, #608]	; (80033f4 <sampling+0x1274>)
 8003192:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 8003196:	fb02 f303 	mul.w	r3, r2, r3
 800319a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
					sample_temp5 =sample_temp1>>2;
 800319e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80031a2:	109b      	asrs	r3, r3, #2
 80031a4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
					//sample_Accu[3] =sine_out>>4;
	play_holder0[i]=sample_temp2;  // write to bank
 80031a8:	4b93      	ldr	r3, [pc, #588]	; (80033f8 <sampling+0x1278>)
 80031aa:	881b      	ldrh	r3, [r3, #0]
 80031ac:	4619      	mov	r1, r3
 80031ae:	4a93      	ldr	r2, [pc, #588]	; (80033fc <sampling+0x127c>)
 80031b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80031b4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder1[i]=sample_temp3;
 80031b8:	4b8f      	ldr	r3, [pc, #572]	; (80033f8 <sampling+0x1278>)
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	4619      	mov	r1, r3
 80031be:	4a90      	ldr	r2, [pc, #576]	; (8003400 <sampling+0x1280>)
 80031c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80031c4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder2[i]=sample_temp4;
 80031c8:	4b8b      	ldr	r3, [pc, #556]	; (80033f8 <sampling+0x1278>)
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	4619      	mov	r1, r3
 80031ce:	4a8d      	ldr	r2, [pc, #564]	; (8003404 <sampling+0x1284>)
 80031d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031d4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder3[i]=sample_temp5;
 80031d8:	4b87      	ldr	r3, [pc, #540]	; (80033f8 <sampling+0x1278>)
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	4619      	mov	r1, r3
 80031de:	4a8a      	ldr	r2, [pc, #552]	; (8003408 <sampling+0x1288>)
 80031e0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80031e4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 80031e8:	4b83      	ldr	r3, [pc, #524]	; (80033f8 <sampling+0x1278>)
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	3301      	adds	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	4b81      	ldr	r3, [pc, #516]	; (80033f8 <sampling+0x1278>)
 80031f2:	801a      	strh	r2, [r3, #0]
 80031f4:	4b80      	ldr	r3, [pc, #512]	; (80033f8 <sampling+0x1278>)
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031fc:	f4ff adee 	bcc.w	8002ddc <sampling+0xc5c>
	} // end of osc , doing some sound

for (pars_counter=0;pars_counter<4;pars_counter++)	{   // save sample_accu data
 8003200:	2300      	movs	r3, #0
 8003202:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
 8003206:	e011      	b.n	800322c <sampling+0x10ac>

	sample_accus_hold[pars_counter]=sample_accus[pars_counter];
 8003208:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 800320c:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003216:	443b      	add	r3, r7
 8003218:	f853 3c64 	ldr.w	r3, [r3, #-100]
 800321c:	497b      	ldr	r1, [pc, #492]	; (800340c <sampling+0x128c>)
 800321e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
for (pars_counter=0;pars_counter<4;pars_counter++)	{   // save sample_accu data
 8003222:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8003226:	3301      	adds	r3, #1
 8003228:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
 800322c:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8003230:	2b03      	cmp	r3, #3
 8003232:	d9e9      	bls.n	8003208 <sampling+0x1088>
int32_t filter_Accu2;

//uint16_t* click=&input_holder[0];


for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 8003234:	4b70      	ldr	r3, [pc, #448]	; (80033f8 <sampling+0x1278>)
 8003236:	2200      	movs	r2, #0
 8003238:	801a      	strh	r2, [r3, #0]
 800323a:	e321      	b.n	8003880 <sampling+0x1700>
	i_total=i+sample_pointB;
 800323c:	4b6e      	ldr	r3, [pc, #440]	; (80033f8 <sampling+0x1278>)
 800323e:	881a      	ldrh	r2, [r3, #0]
 8003240:	4b73      	ldr	r3, [pc, #460]	; (8003410 <sampling+0x1290>)
 8003242:	881b      	ldrh	r3, [r3, #0]
 8003244:	4413      	add	r3, r2
 8003246:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130

sampling_position=(i>>6);
 800324a:	4b6b      	ldr	r3, [pc, #428]	; (80033f8 <sampling+0x1278>)
 800324c:	881b      	ldrh	r3, [r3, #0]
 800324e:	099b      	lsrs	r3, r3, #6
 8003250:	b29b      	uxth	r3, r3
 8003252:	b2da      	uxtb	r2, r3
 8003254:	4b6f      	ldr	r3, [pc, #444]	; (8003414 <sampling+0x1294>)
 8003256:	701a      	strb	r2, [r3, #0]
// filter 1
if (		(note_toggler[i>>5]	)==(1<<(i&31)	)) 				{ADSR[0].attack_trigger =0;  trigger_counter++; trigger_counter=trigger_counter&1023  ;}
 8003258:	4b67      	ldr	r3, [pc, #412]	; (80033f8 <sampling+0x1278>)
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	095b      	lsrs	r3, r3, #5
 800325e:	b29b      	uxth	r3, r3
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003266:	443b      	add	r3, r7
 8003268:	f853 3cf4 	ldr.w	r3, [r3, #-244]
 800326c:	4a62      	ldr	r2, [pc, #392]	; (80033f8 <sampling+0x1278>)
 800326e:	8812      	ldrh	r2, [r2, #0]
 8003270:	f002 021f 	and.w	r2, r2, #31
 8003274:	2101      	movs	r1, #1
 8003276:	fa01 f202 	lsl.w	r2, r1, r2
 800327a:	4293      	cmp	r3, r2
 800327c:	d10f      	bne.n	800329e <sampling+0x111e>
 800327e:	4b66      	ldr	r3, [pc, #408]	; (8003418 <sampling+0x1298>)
 8003280:	2200      	movs	r2, #0
 8003282:	711a      	strb	r2, [r3, #4]
 8003284:	4b65      	ldr	r3, [pc, #404]	; (800341c <sampling+0x129c>)
 8003286:	881b      	ldrh	r3, [r3, #0]
 8003288:	3301      	adds	r3, #1
 800328a:	b29a      	uxth	r2, r3
 800328c:	4b63      	ldr	r3, [pc, #396]	; (800341c <sampling+0x129c>)
 800328e:	801a      	strh	r2, [r3, #0]
 8003290:	4b62      	ldr	r3, [pc, #392]	; (800341c <sampling+0x129c>)
 8003292:	881b      	ldrh	r3, [r3, #0]
 8003294:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003298:	b29a      	uxth	r2, r3
 800329a:	4b60      	ldr	r3, [pc, #384]	; (800341c <sampling+0x129c>)
 800329c:	801a      	strh	r2, [r3, #0]


sample_Accu[0]=play_holder0[i];
 800329e:	4b56      	ldr	r3, [pc, #344]	; (80033f8 <sampling+0x1278>)
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	461a      	mov	r2, r3
 80032a4:	4b55      	ldr	r3, [pc, #340]	; (80033fc <sampling+0x127c>)
 80032a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
sample_Accu[1]=play_holder1[i] ; // saw
 80032ae:	4b52      	ldr	r3, [pc, #328]	; (80033f8 <sampling+0x1278>)
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	461a      	mov	r2, r3
 80032b4:	4b52      	ldr	r3, [pc, #328]	; (8003400 <sampling+0x1280>)
 80032b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
sample_Accu[2]=play_holder2[i];  // sine input
 80032be:	4b4e      	ldr	r3, [pc, #312]	; (80033f8 <sampling+0x1278>)
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	461a      	mov	r2, r3
 80032c4:	4b4f      	ldr	r3, [pc, #316]	; (8003404 <sampling+0x1284>)
 80032c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
sample_Accu[3]=play_holder3[i] ;
 80032ce:	4b4a      	ldr	r3, [pc, #296]	; (80033f8 <sampling+0x1278>)
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	4b4c      	ldr	r3, [pc, #304]	; (8003408 <sampling+0x1288>)
 80032d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

// this section is about 100 tmr cycles
if ((i&63)==0){
 80032de:	4b46      	ldr	r3, [pc, #280]	; (80033f8 <sampling+0x1278>)
 80032e0:	881b      	ldrh	r3, [r3, #0]
 80032e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f040 811e 	bne.w	8003528 <sampling+0x13a8>
freq_point[0]=freq_pointer[0] [sampling_position];; // load up coeffs
 80032ec:	4b49      	ldr	r3, [pc, #292]	; (8003414 <sampling+0x1294>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	4a4b      	ldr	r2, [pc, #300]	; (8003420 <sampling+0x12a0>)
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a4a      	ldr	r2, [pc, #296]	; (8003424 <sampling+0x12a4>)
 80032fa:	6013      	str	r3, [r2, #0]

freq_point[2]=freq_pointer[1] [sampling_position];  // ok , array was too short
 80032fc:	4b45      	ldr	r3, [pc, #276]	; (8003414 <sampling+0x1294>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	4a47      	ldr	r2, [pc, #284]	; (8003420 <sampling+0x12a0>)
 8003302:	3309      	adds	r3, #9
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a46      	ldr	r2, [pc, #280]	; (8003424 <sampling+0x12a4>)
 800330c:	6093      	str	r3, [r2, #8]
freq_point[4]=freq_pointer[2] [sampling_position];  // ok , array was too short
 800330e:	4b41      	ldr	r3, [pc, #260]	; (8003414 <sampling+0x1294>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	4a43      	ldr	r2, [pc, #268]	; (8003420 <sampling+0x12a0>)
 8003314:	3312      	adds	r3, #18
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a41      	ldr	r2, [pc, #260]	; (8003424 <sampling+0x12a4>)
 800331e:	6113      	str	r3, [r2, #16]
freq_point[6]=freq_pointer[3] [sampling_position];  // ok , array was too short
 8003320:	4b3c      	ldr	r3, [pc, #240]	; (8003414 <sampling+0x1294>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	4a3e      	ldr	r2, [pc, #248]	; (8003420 <sampling+0x12a0>)
 8003326:	331b      	adds	r3, #27
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a3d      	ldr	r2, [pc, #244]	; (8003424 <sampling+0x12a4>)
 8003330:	6193      	str	r3, [r2, #24]


if (freq_point[0]>1) freq_point[0]=1; else if (freq_point[0]<0) freq_point[0]=0;// just in case
 8003332:	4b3c      	ldr	r3, [pc, #240]	; (8003424 <sampling+0x12a4>)
 8003334:	edd3 7a00 	vldr	s15, [r3]
 8003338:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800333c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003344:	dd04      	ble.n	8003350 <sampling+0x11d0>
 8003346:	4b37      	ldr	r3, [pc, #220]	; (8003424 <sampling+0x12a4>)
 8003348:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	e00b      	b.n	8003368 <sampling+0x11e8>
 8003350:	4b34      	ldr	r3, [pc, #208]	; (8003424 <sampling+0x12a4>)
 8003352:	edd3 7a00 	vldr	s15, [r3]
 8003356:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800335a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800335e:	d503      	bpl.n	8003368 <sampling+0x11e8>
 8003360:	4b30      	ldr	r3, [pc, #192]	; (8003424 <sampling+0x12a4>)
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
if (freq_point[4]>1) freq_point[4]=1; else if (freq_point[4]<0) freq_point[4]=0;// just in case
 8003368:	4b2e      	ldr	r3, [pc, #184]	; (8003424 <sampling+0x12a4>)
 800336a:	edd3 7a04 	vldr	s15, [r3, #16]
 800336e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003372:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800337a:	dd04      	ble.n	8003386 <sampling+0x1206>
 800337c:	4b29      	ldr	r3, [pc, #164]	; (8003424 <sampling+0x12a4>)
 800337e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003382:	611a      	str	r2, [r3, #16]
 8003384:	e00b      	b.n	800339e <sampling+0x121e>
 8003386:	4b27      	ldr	r3, [pc, #156]	; (8003424 <sampling+0x12a4>)
 8003388:	edd3 7a04 	vldr	s15, [r3, #16]
 800338c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003394:	d503      	bpl.n	800339e <sampling+0x121e>
 8003396:	4b23      	ldr	r3, [pc, #140]	; (8003424 <sampling+0x12a4>)
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	611a      	str	r2, [r3, #16]
if (freq_point[2]>1) freq_point[2]=1; else if (freq_point[2]<0) freq_point[2]=0;// just in case
 800339e:	4b21      	ldr	r3, [pc, #132]	; (8003424 <sampling+0x12a4>)
 80033a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80033a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80033a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b0:	dd04      	ble.n	80033bc <sampling+0x123c>
 80033b2:	4b1c      	ldr	r3, [pc, #112]	; (8003424 <sampling+0x12a4>)
 80033b4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80033b8:	609a      	str	r2, [r3, #8]
 80033ba:	e00b      	b.n	80033d4 <sampling+0x1254>
 80033bc:	4b19      	ldr	r3, [pc, #100]	; (8003424 <sampling+0x12a4>)
 80033be:	edd3 7a02 	vldr	s15, [r3, #8]
 80033c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ca:	d503      	bpl.n	80033d4 <sampling+0x1254>
 80033cc:	4b15      	ldr	r3, [pc, #84]	; (8003424 <sampling+0x12a4>)
 80033ce:	f04f 0200 	mov.w	r2, #0
 80033d2:	609a      	str	r2, [r3, #8]
if (freq_point[6]>1) freq_point[6]=1; else if (freq_point[6]<0) freq_point[6]=0;// just in case
 80033d4:	4b13      	ldr	r3, [pc, #76]	; (8003424 <sampling+0x12a4>)
 80033d6:	edd3 7a06 	vldr	s15, [r3, #24]
 80033da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80033de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e6:	dd1f      	ble.n	8003428 <sampling+0x12a8>
 80033e8:	4b0e      	ldr	r3, [pc, #56]	; (8003424 <sampling+0x12a4>)
 80033ea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80033ee:	619a      	str	r2, [r3, #24]
 80033f0:	e026      	b.n	8003440 <sampling+0x12c0>
 80033f2:	bf00      	nop
 80033f4:	20000158 	.word	0x20000158
 80033f8:	20000892 	.word	0x20000892
 80033fc:	20007188 	.word	0x20007188
 8003400:	20005988 	.word	0x20005988
 8003404:	20006188 	.word	0x20006188
 8003408:	20006988 	.word	0x20006988
 800340c:	200034a8 	.word	0x200034a8
 8003410:	20000890 	.word	0x20000890
 8003414:	20005984 	.word	0x20005984
 8003418:	20004718 	.word	0x20004718
 800341c:	200035ec 	.word	0x200035ec
 8003420:	2000355c 	.word	0x2000355c
 8003424:	2000353c 	.word	0x2000353c
 8003428:	4bcb      	ldr	r3, [pc, #812]	; (8003758 <sampling+0x15d8>)
 800342a:	edd3 7a06 	vldr	s15, [r3, #24]
 800342e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003436:	d503      	bpl.n	8003440 <sampling+0x12c0>
 8003438:	4bc7      	ldr	r3, [pc, #796]	; (8003758 <sampling+0x15d8>)
 800343a:	f04f 0200 	mov.w	r2, #0
 800343e:	619a      	str	r2, [r3, #24]

freq_point[1]=1-freq_point[0];
 8003440:	4bc5      	ldr	r3, [pc, #788]	; (8003758 <sampling+0x15d8>)
 8003442:	edd3 7a00 	vldr	s15, [r3]
 8003446:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800344a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800344e:	4bc2      	ldr	r3, [pc, #776]	; (8003758 <sampling+0x15d8>)
 8003450:	edc3 7a01 	vstr	s15, [r3, #4]
freq_point[3]=1-freq_point[2];
 8003454:	4bc0      	ldr	r3, [pc, #768]	; (8003758 <sampling+0x15d8>)
 8003456:	edd3 7a02 	vldr	s15, [r3, #8]
 800345a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800345e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003462:	4bbd      	ldr	r3, [pc, #756]	; (8003758 <sampling+0x15d8>)
 8003464:	edc3 7a03 	vstr	s15, [r3, #12]
freq_point[5]=1-freq_point[4];
 8003468:	4bbb      	ldr	r3, [pc, #748]	; (8003758 <sampling+0x15d8>)
 800346a:	edd3 7a04 	vldr	s15, [r3, #16]
 800346e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003472:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003476:	4bb8      	ldr	r3, [pc, #736]	; (8003758 <sampling+0x15d8>)
 8003478:	edc3 7a05 	vstr	s15, [r3, #20]
freq_point[7]=1-freq_point[6];
 800347c:	4bb6      	ldr	r3, [pc, #728]	; (8003758 <sampling+0x15d8>)
 800347e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003482:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003486:	ee77 7a67 	vsub.f32	s15, s14, s15
 800348a:	4bb3      	ldr	r3, [pc, #716]	; (8003758 <sampling+0x15d8>)
 800348c:	edc3 7a07 	vstr	s15, [r3, #28]

filter_res[0]=freq_point[0]*0.2;
 8003490:	4bb1      	ldr	r3, [pc, #708]	; (8003758 <sampling+0x15d8>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f7fd f935 	bl	8000704 <__aeabi_f2d>
 800349a:	a3ad      	add	r3, pc, #692	; (adr r3, 8003750 <sampling+0x15d0>)
 800349c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a0:	f7fc fea2 	bl	80001e8 <__aeabi_dmul>
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4610      	mov	r0, r2
 80034aa:	4619      	mov	r1, r3
 80034ac:	f7fd f982 	bl	80007b4 <__aeabi_d2f>
 80034b0:	4603      	mov	r3, r0
 80034b2:	4aaa      	ldr	r2, [pc, #680]	; (800375c <sampling+0x15dc>)
 80034b4:	6013      	str	r3, [r2, #0]
filter_res[1]=freq_point[1]*0.2;
 80034b6:	4ba8      	ldr	r3, [pc, #672]	; (8003758 <sampling+0x15d8>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fd f922 	bl	8000704 <__aeabi_f2d>
 80034c0:	a3a3      	add	r3, pc, #652	; (adr r3, 8003750 <sampling+0x15d0>)
 80034c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c6:	f7fc fe8f 	bl	80001e8 <__aeabi_dmul>
 80034ca:	4602      	mov	r2, r0
 80034cc:	460b      	mov	r3, r1
 80034ce:	4610      	mov	r0, r2
 80034d0:	4619      	mov	r1, r3
 80034d2:	f7fd f96f 	bl	80007b4 <__aeabi_d2f>
 80034d6:	4603      	mov	r3, r0
 80034d8:	4aa0      	ldr	r2, [pc, #640]	; (800375c <sampling+0x15dc>)
 80034da:	6053      	str	r3, [r2, #4]
filter_res[2]=freq_point[2]*0.2;
 80034dc:	4b9e      	ldr	r3, [pc, #632]	; (8003758 <sampling+0x15d8>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fd f90f 	bl	8000704 <__aeabi_f2d>
 80034e6:	a39a      	add	r3, pc, #616	; (adr r3, 8003750 <sampling+0x15d0>)
 80034e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ec:	f7fc fe7c 	bl	80001e8 <__aeabi_dmul>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	4610      	mov	r0, r2
 80034f6:	4619      	mov	r1, r3
 80034f8:	f7fd f95c 	bl	80007b4 <__aeabi_d2f>
 80034fc:	4603      	mov	r3, r0
 80034fe:	4a97      	ldr	r2, [pc, #604]	; (800375c <sampling+0x15dc>)
 8003500:	6093      	str	r3, [r2, #8]
filter_res[3]=freq_point[3]*0.2;
 8003502:	4b95      	ldr	r3, [pc, #596]	; (8003758 <sampling+0x15d8>)
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	4618      	mov	r0, r3
 8003508:	f7fd f8fc 	bl	8000704 <__aeabi_f2d>
 800350c:	a390      	add	r3, pc, #576	; (adr r3, 8003750 <sampling+0x15d0>)
 800350e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003512:	f7fc fe69 	bl	80001e8 <__aeabi_dmul>
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	4610      	mov	r0, r2
 800351c:	4619      	mov	r1, r3
 800351e:	f7fd f949 	bl	80007b4 <__aeabi_d2f>
 8003522:	4603      	mov	r3, r0
 8003524:	4a8d      	ldr	r2, [pc, #564]	; (800375c <sampling+0x15dc>)
 8003526:	60d3      	str	r3, [r2, #12]
		//freq_point[0]=0.50;

   // vol lfo


		filter_accus[1]=sample_Accu[0]; // saw
 8003528:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800352c:	ee07 3a90 	vmov	s15, r3
 8003530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003534:	4b8a      	ldr	r3, [pc, #552]	; (8003760 <sampling+0x15e0>)
 8003536:	edc3 7a01 	vstr	s15, [r3, #4]
		filter_accus[1]=filter_accus[1]-(filter_accus[3]*filter_res[0]);
 800353a:	4b89      	ldr	r3, [pc, #548]	; (8003760 <sampling+0x15e0>)
 800353c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003540:	4b87      	ldr	r3, [pc, #540]	; (8003760 <sampling+0x15e0>)
 8003542:	edd3 6a03 	vldr	s13, [r3, #12]
 8003546:	4b85      	ldr	r3, [pc, #532]	; (800375c <sampling+0x15dc>)
 8003548:	edd3 7a00 	vldr	s15, [r3]
 800354c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003550:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003554:	4b82      	ldr	r3, [pc, #520]	; (8003760 <sampling+0x15e0>)
 8003556:	edc3 7a01 	vstr	s15, [r3, #4]

		filter_accus[2]=(filter_accus[1]*freq_point[0])+(filter_accus[2]*freq_point[1]);      //short=fast , adding makes it slower
 800355a:	4b81      	ldr	r3, [pc, #516]	; (8003760 <sampling+0x15e0>)
 800355c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003560:	4b7d      	ldr	r3, [pc, #500]	; (8003758 <sampling+0x15d8>)
 8003562:	edd3 7a00 	vldr	s15, [r3]
 8003566:	ee27 7a27 	vmul.f32	s14, s14, s15
 800356a:	4b7d      	ldr	r3, [pc, #500]	; (8003760 <sampling+0x15e0>)
 800356c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003570:	4b79      	ldr	r3, [pc, #484]	; (8003758 <sampling+0x15d8>)
 8003572:	edd3 7a01 	vldr	s15, [r3, #4]
 8003576:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800357a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800357e:	4b78      	ldr	r3, [pc, #480]	; (8003760 <sampling+0x15e0>)
 8003580:	edc3 7a02 	vstr	s15, [r3, #8]
		filter_accus[3]=(filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]);			// int32 after conversions is no quicker
 8003584:	4b76      	ldr	r3, [pc, #472]	; (8003760 <sampling+0x15e0>)
 8003586:	ed93 7a02 	vldr	s14, [r3, #8]
 800358a:	4b73      	ldr	r3, [pc, #460]	; (8003758 <sampling+0x15d8>)
 800358c:	edd3 7a00 	vldr	s15, [r3]
 8003590:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003594:	4b72      	ldr	r3, [pc, #456]	; (8003760 <sampling+0x15e0>)
 8003596:	edd3 6a03 	vldr	s13, [r3, #12]
 800359a:	4b6f      	ldr	r3, [pc, #444]	; (8003758 <sampling+0x15d8>)
 800359c:	edd3 7a01 	vldr	s15, [r3, #4]
 80035a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035a8:	4b6d      	ldr	r3, [pc, #436]	; (8003760 <sampling+0x15e0>)
 80035aa:	edc3 7a03 	vstr	s15, [r3, #12]
		sample_Accu[0]=filter_accus[3];
 80035ae:	4b6c      	ldr	r3, [pc, #432]	; (8003760 <sampling+0x15e0>)
 80035b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80035b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035b8:	ee17 3a90 	vmov	r3, s15
 80035bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	//	sample_Accu[3]=play_holder2[i] >>5;
		filter_accus[4]=sample_Accu[1];
 80035c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80035c4:	ee07 3a90 	vmov	s15, r3
 80035c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035cc:	4b64      	ldr	r3, [pc, #400]	; (8003760 <sampling+0x15e0>)
 80035ce:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[4]=filter_accus[4]-(filter_accus[6]*filter_res[1]);
 80035d2:	4b63      	ldr	r3, [pc, #396]	; (8003760 <sampling+0x15e0>)
 80035d4:	ed93 7a04 	vldr	s14, [r3, #16]
 80035d8:	4b61      	ldr	r3, [pc, #388]	; (8003760 <sampling+0x15e0>)
 80035da:	edd3 6a06 	vldr	s13, [r3, #24]
 80035de:	4b5f      	ldr	r3, [pc, #380]	; (800375c <sampling+0x15dc>)
 80035e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80035e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035ec:	4b5c      	ldr	r3, [pc, #368]	; (8003760 <sampling+0x15e0>)
 80035ee:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[5]=(filter_accus[4]*freq_point[2])+(filter_accus[5]*freq_point[3]);   // 30 cyles for 2 poles
 80035f2:	4b5b      	ldr	r3, [pc, #364]	; (8003760 <sampling+0x15e0>)
 80035f4:	ed93 7a04 	vldr	s14, [r3, #16]
 80035f8:	4b57      	ldr	r3, [pc, #348]	; (8003758 <sampling+0x15d8>)
 80035fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80035fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003602:	4b57      	ldr	r3, [pc, #348]	; (8003760 <sampling+0x15e0>)
 8003604:	edd3 6a05 	vldr	s13, [r3, #20]
 8003608:	4b53      	ldr	r3, [pc, #332]	; (8003758 <sampling+0x15d8>)
 800360a:	edd3 7a03 	vldr	s15, [r3, #12]
 800360e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003612:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003616:	4b52      	ldr	r3, [pc, #328]	; (8003760 <sampling+0x15e0>)
 8003618:	edc3 7a05 	vstr	s15, [r3, #20]
		filter_accus[6]=(filter_accus[5]*freq_point[2])+(filter_accus[6]*freq_point[3]);
 800361c:	4b50      	ldr	r3, [pc, #320]	; (8003760 <sampling+0x15e0>)
 800361e:	ed93 7a05 	vldr	s14, [r3, #20]
 8003622:	4b4d      	ldr	r3, [pc, #308]	; (8003758 <sampling+0x15d8>)
 8003624:	edd3 7a02 	vldr	s15, [r3, #8]
 8003628:	ee27 7a27 	vmul.f32	s14, s14, s15
 800362c:	4b4c      	ldr	r3, [pc, #304]	; (8003760 <sampling+0x15e0>)
 800362e:	edd3 6a06 	vldr	s13, [r3, #24]
 8003632:	4b49      	ldr	r3, [pc, #292]	; (8003758 <sampling+0x15d8>)
 8003634:	edd3 7a03 	vldr	s15, [r3, #12]
 8003638:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800363c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003640:	4b47      	ldr	r3, [pc, #284]	; (8003760 <sampling+0x15e0>)
 8003642:	edc3 7a06 	vstr	s15, [r3, #24]
		sample_Accu[1]=filter_accus[6];
 8003646:	4b46      	ldr	r3, [pc, #280]	; (8003760 <sampling+0x15e0>)
 8003648:	edd3 7a06 	vldr	s15, [r3, #24]
 800364c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003650:	ee17 3a90 	vmov	r3, s15
 8003654:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

		filter_accus[7]=sample_Accu[2];
 8003658:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800365c:	ee07 3a90 	vmov	s15, r3
 8003660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003664:	4b3e      	ldr	r3, [pc, #248]	; (8003760 <sampling+0x15e0>)
 8003666:	edc3 7a07 	vstr	s15, [r3, #28]
		filter_accus[7]=filter_accus[7]-(filter_accus[9]*filter_res[2]);  // resonance
 800366a:	4b3d      	ldr	r3, [pc, #244]	; (8003760 <sampling+0x15e0>)
 800366c:	ed93 7a07 	vldr	s14, [r3, #28]
 8003670:	4b3b      	ldr	r3, [pc, #236]	; (8003760 <sampling+0x15e0>)
 8003672:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8003676:	4b39      	ldr	r3, [pc, #228]	; (800375c <sampling+0x15dc>)
 8003678:	edd3 7a02 	vldr	s15, [r3, #8]
 800367c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003684:	4b36      	ldr	r3, [pc, #216]	; (8003760 <sampling+0x15e0>)
 8003686:	edc3 7a07 	vstr	s15, [r3, #28]
				filter_accus[8]=(filter_accus[7]*freq_point[4])+(filter_accus[8]*freq_point[5]);   // 30 cyles for 2 poles
 800368a:	4b35      	ldr	r3, [pc, #212]	; (8003760 <sampling+0x15e0>)
 800368c:	ed93 7a07 	vldr	s14, [r3, #28]
 8003690:	4b31      	ldr	r3, [pc, #196]	; (8003758 <sampling+0x15d8>)
 8003692:	edd3 7a04 	vldr	s15, [r3, #16]
 8003696:	ee27 7a27 	vmul.f32	s14, s14, s15
 800369a:	4b31      	ldr	r3, [pc, #196]	; (8003760 <sampling+0x15e0>)
 800369c:	edd3 6a08 	vldr	s13, [r3, #32]
 80036a0:	4b2d      	ldr	r3, [pc, #180]	; (8003758 <sampling+0x15d8>)
 80036a2:	edd3 7a05 	vldr	s15, [r3, #20]
 80036a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ae:	4b2c      	ldr	r3, [pc, #176]	; (8003760 <sampling+0x15e0>)
 80036b0:	edc3 7a08 	vstr	s15, [r3, #32]
				filter_accus[9]=(filter_accus[8]*freq_point[4])+(filter_accus[9]*freq_point[5]);
 80036b4:	4b2a      	ldr	r3, [pc, #168]	; (8003760 <sampling+0x15e0>)
 80036b6:	ed93 7a08 	vldr	s14, [r3, #32]
 80036ba:	4b27      	ldr	r3, [pc, #156]	; (8003758 <sampling+0x15d8>)
 80036bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80036c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036c4:	4b26      	ldr	r3, [pc, #152]	; (8003760 <sampling+0x15e0>)
 80036c6:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80036ca:	4b23      	ldr	r3, [pc, #140]	; (8003758 <sampling+0x15d8>)
 80036cc:	edd3 7a05 	vldr	s15, [r3, #20]
 80036d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d8:	4b21      	ldr	r3, [pc, #132]	; (8003760 <sampling+0x15e0>)
 80036da:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				sample_Accu[2]=filter_accus[9];
 80036de:	4b20      	ldr	r3, [pc, #128]	; (8003760 <sampling+0x15e0>)
 80036e0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80036e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036e8:	ee17 3a90 	vmov	r3, s15
 80036ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

				filter_accus[10]=sample_Accu[3];
 80036f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80036f4:	ee07 3a90 	vmov	s15, r3
 80036f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036fc:	4b18      	ldr	r3, [pc, #96]	; (8003760 <sampling+0x15e0>)
 80036fe:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				filter_accus[10]=filter_accus[10]-(filter_accus[12]*filter_res[3]);
 8003702:	4b17      	ldr	r3, [pc, #92]	; (8003760 <sampling+0x15e0>)
 8003704:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003708:	4b15      	ldr	r3, [pc, #84]	; (8003760 <sampling+0x15e0>)
 800370a:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800370e:	4b13      	ldr	r3, [pc, #76]	; (800375c <sampling+0x15dc>)
 8003710:	edd3 7a03 	vldr	s15, [r3, #12]
 8003714:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003718:	ee77 7a67 	vsub.f32	s15, s14, s15
 800371c:	4b10      	ldr	r3, [pc, #64]	; (8003760 <sampling+0x15e0>)
 800371e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
						filter_accus[11]=(filter_accus[10]*freq_point[6])+(filter_accus[11]*freq_point[7]);   // 30 cyles for 2 poles
 8003722:	4b0f      	ldr	r3, [pc, #60]	; (8003760 <sampling+0x15e0>)
 8003724:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003728:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <sampling+0x15d8>)
 800372a:	edd3 7a06 	vldr	s15, [r3, #24]
 800372e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003732:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <sampling+0x15e0>)
 8003734:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8003738:	4b07      	ldr	r3, [pc, #28]	; (8003758 <sampling+0x15d8>)
 800373a:	edd3 7a07 	vldr	s15, [r3, #28]
 800373e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003746:	4b06      	ldr	r3, [pc, #24]	; (8003760 <sampling+0x15e0>)
 8003748:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 800374c:	e00a      	b.n	8003764 <sampling+0x15e4>
 800374e:	bf00      	nop
 8003750:	9999999a 	.word	0x9999999a
 8003754:	3fc99999 	.word	0x3fc99999
 8003758:	2000353c 	.word	0x2000353c
 800375c:	200034ec 	.word	0x200034ec
 8003760:	20003500 	.word	0x20003500
						filter_accus[12]=(filter_accus[11]*freq_point[6])+(filter_accus[12]*freq_point[7]);
 8003764:	4b53      	ldr	r3, [pc, #332]	; (80038b4 <sampling+0x1734>)
 8003766:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800376a:	4b53      	ldr	r3, [pc, #332]	; (80038b8 <sampling+0x1738>)
 800376c:	edd3 7a06 	vldr	s15, [r3, #24]
 8003770:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003774:	4b4f      	ldr	r3, [pc, #316]	; (80038b4 <sampling+0x1734>)
 8003776:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800377a:	4b4f      	ldr	r3, [pc, #316]	; (80038b8 <sampling+0x1738>)
 800377c:	edd3 7a07 	vldr	s15, [r3, #28]
 8003780:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003788:	4b4a      	ldr	r3, [pc, #296]	; (80038b4 <sampling+0x1734>)
 800378a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
						sample_Accu[3]=filter_accus[12];
 800378e:	4b49      	ldr	r3, [pc, #292]	; (80038b4 <sampling+0x1734>)
 8003790:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003794:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003798:	ee17 3a90 	vmov	r3, s15
 800379c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	//	sample_Accu[0] =filter_accus[5]; // out
	//	filter_accus[11]=filter_accus[5]; //write back new value
		//sample_Accu[0] =sample_Accu[1];


filter_Accu=filter_Accu2=0;
 80037a0:	2300      	movs	r3, #0
 80037a2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80037a6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80037aa:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
filter_Accu=(sample_Accu[0]+sample_Accu[1])>>16;
 80037ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80037b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80037b6:	4413      	add	r3, r2
 80037b8:	141b      	asrs	r3, r3, #16
 80037ba:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
filter_Accu2=(sample_Accu[2]+sample_Accu[3])>>16; //filter + drum out
 80037be:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80037c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80037c6:	4413      	add	r3, r2
 80037c8:	141b      	asrs	r3, r3, #16
 80037ca:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

 if (one_shot!=199)   one_shot++;  //play one attack then stop
 80037ce:	4b3b      	ldr	r3, [pc, #236]	; (80038bc <sampling+0x173c>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2bc7      	cmp	r3, #199	; 0xc7
 80037d4:	d005      	beq.n	80037e2 <sampling+0x1662>
 80037d6:	4b39      	ldr	r3, [pc, #228]	; (80038bc <sampling+0x173c>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	3301      	adds	r3, #1
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	4b37      	ldr	r3, [pc, #220]	; (80038bc <sampling+0x173c>)
 80037e0:	701a      	strb	r2, [r3, #0]

 //if (filter_Accu>0xFFFF) {filter_Accu=0xFFFF;clipping++;} else if (filter_Accu<-65535) filter_Accu=-65535;  // limiter to 16 bits
 if (filter_Accu>0x3FF) {filter_Accu=0x3FF;clipping++;} else if (filter_Accu<-1023) filter_Accu=-1023;  // limiter to 11 bits
 80037e2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80037e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ea:	db0a      	blt.n	8003802 <sampling+0x1682>
 80037ec:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80037f0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80037f4:	4b32      	ldr	r3, [pc, #200]	; (80038c0 <sampling+0x1740>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	3301      	adds	r3, #1
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	4b30      	ldr	r3, [pc, #192]	; (80038c0 <sampling+0x1740>)
 80037fe:	701a      	strb	r2, [r3, #0]
 8003800:	e007      	b.n	8003812 <sampling+0x1692>
 8003802:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003806:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 800380a:	dc02      	bgt.n	8003812 <sampling+0x1692>
 800380c:	4b2d      	ldr	r3, [pc, #180]	; (80038c4 <sampling+0x1744>)
 800380e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 if (filter_Accu2>0x3FF) {filter_Accu2=0x3FF;clipping++;} else if (filter_Accu2<-1023) filter_Accu2=-1023;  // limiter to 11 bits
 8003812:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800381a:	db0a      	blt.n	8003832 <sampling+0x16b2>
 800381c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003820:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8003824:	4b26      	ldr	r3, [pc, #152]	; (80038c0 <sampling+0x1740>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	3301      	adds	r3, #1
 800382a:	b2da      	uxtb	r2, r3
 800382c:	4b24      	ldr	r3, [pc, #144]	; (80038c0 <sampling+0x1740>)
 800382e:	701a      	strb	r2, [r3, #0]
 8003830:	e007      	b.n	8003842 <sampling+0x16c2>
 8003832:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003836:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 800383a:	dc02      	bgt.n	8003842 <sampling+0x16c2>
 800383c:	4b21      	ldr	r3, [pc, #132]	; (80038c4 <sampling+0x1744>)
 800383e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140



 play_sample[(i_total<<1)]=(filter_Accu)+1023;   // final output disable for now 2544
 8003842:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003846:	b29a      	uxth	r2, r3
 8003848:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8003852:	b291      	uxth	r1, r2
 8003854:	4a1c      	ldr	r2, [pc, #112]	; (80038c8 <sampling+0x1748>)
 8003856:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 play_sample[(i_total<<1)+1]=(filter_Accu2)+1023;
 800385a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800385e:	b29a      	uxth	r2, r3
 8003860:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	3301      	adds	r3, #1
 8003868:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800386c:	b291      	uxth	r1, r2
 800386e:	4a16      	ldr	r2, [pc, #88]	; (80038c8 <sampling+0x1748>)
 8003870:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 8003874:	4b15      	ldr	r3, [pc, #84]	; (80038cc <sampling+0x174c>)
 8003876:	881b      	ldrh	r3, [r3, #0]
 8003878:	3301      	adds	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	4b13      	ldr	r3, [pc, #76]	; (80038cc <sampling+0x174c>)
 800387e:	801a      	strh	r2, [r3, #0]
 8003880:	4b12      	ldr	r3, [pc, #72]	; (80038cc <sampling+0x174c>)
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003888:	f4ff acd8 	bcc.w	800323c <sampling+0x10bc>
} // end of filer


//time_final=time_proc;   // in samples

if (bank_write)   error_count++;  // if bank write is high it means too much stall here
 800388c:	4b10      	ldr	r3, [pc, #64]	; (80038d0 <sampling+0x1750>)
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d005      	beq.n	80038a0 <sampling+0x1720>
 8003894:	4b0f      	ldr	r3, [pc, #60]	; (80038d4 <sampling+0x1754>)
 8003896:	881b      	ldrh	r3, [r3, #0]
 8003898:	3301      	adds	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	4b0d      	ldr	r3, [pc, #52]	; (80038d4 <sampling+0x1754>)
 800389e:	801a      	strh	r2, [r3, #0]
time_final[0]=time_proc;
 80038a0:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <sampling+0x1758>)
 80038a2:	881a      	ldrh	r2, [r3, #0]
 80038a4:	4b0d      	ldr	r3, [pc, #52]	; (80038dc <sampling+0x175c>)
 80038a6:	801a      	strh	r2, [r3, #0]


//bank_write=0;   /// total 320 sample time (39khz)
}
 80038a8:	bf00      	nop
 80038aa:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bdb0      	pop	{r4, r5, r7, pc}
 80038b2:	bf00      	nop
 80038b4:	20003500 	.word	0x20003500
 80038b8:	2000353c 	.word	0x2000353c
 80038bc:	200034c0 	.word	0x200034c0
 80038c0:	20007988 	.word	0x20007988
 80038c4:	fffffc01 	.word	0xfffffc01
 80038c8:	20000894 	.word	0x20000894
 80038cc:	20000892 	.word	0x20000892
 80038d0:	2000014e 	.word	0x2000014e
 80038d4:	20004432 	.word	0x20004432
 80038d8:	20004430 	.word	0x20004430
 80038dc:	2000442c 	.word	0x2000442c

080038e0 <sine_count2>:
				 sine_counter[2]=sine_tuned;
				 return  (sine_tempA+sine_tempB)<<4;   // add back to start value -20k-20k  or about 16bit
	}


int32_t sine_count2(uint8_t note_selected,  uint32_t* input_array, uint32_t* return_array ) {      // sine_out is the output 9  bit  , works
 80038e0:	b480      	push	{r7}
 80038e2:	b08b      	sub	sp, #44	; 0x2c
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	4603      	mov	r3, r0
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
 80038ec:	73fb      	strb	r3, [r7, #15]

	//note_selected=(note_selected*3)+3;
	//uint8_t sine_zero;
	int32_t sine_tempA;
	int32_t sine_tempB;
	uint16_t RAM_size_temp=sampler.length-2;
 80038ee:	4b30      	ldr	r3, [pc, #192]	; (80039b0 <sine_count2+0xd0>)
 80038f0:	895b      	ldrh	r3, [r3, #10]
 80038f2:	3b02      	subs	r3, #2
 80038f4:	83fb      	strh	r3, [r7, #30]

	uint32_t sine_counter_temp=*input_array;
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	61bb      	str	r3, [r7, #24]
	uint32_t sine_counterB_temp=*(input_array+1);
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t sine_tuned=*(input_array+2);
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	623b      	str	r3, [r7, #32]

	if (sine_counterB_temp==0) 	sine_tuned=note[note_selected].tuned;  // this needs to be fractional 20-30
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	2b00      	cmp	r3, #0
 800390c:	d109      	bne.n	8003922 <sine_count2+0x42>
 800390e:	7bfa      	ldrb	r2, [r7, #15]
 8003910:	4928      	ldr	r1, [pc, #160]	; (80039b4 <sine_count2+0xd4>)
 8003912:	4613      	mov	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	1a9b      	subs	r3, r3, r2
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	440b      	add	r3, r1
 800391c:	330c      	adds	r3, #12
 800391e:	881b      	ldrh	r3, [r3, #0]
 8003920:	623b      	str	r3, [r7, #32]
	sine_counterB_temp=sine_counterB_temp+sine_tuned ;  // sine up counter per cycle , however sine adder needs to wait
 8003922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	4413      	add	r3, r2
 8003928:	627b      	str	r3, [r7, #36]	; 0x24
	if (sine_counterB_temp>((RAM_size_temp)<<13)) sine_counterB_temp=0; //fixed for now, last is 19200 then
 800392a:	8bfb      	ldrh	r3, [r7, #30]
 800392c:	035b      	lsls	r3, r3, #13
 800392e:	461a      	mov	r2, r3
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	4293      	cmp	r3, r2
 8003934:	d901      	bls.n	800393a <sine_count2+0x5a>
 8003936:	2300      	movs	r3, #0
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
////////////////////////////////////////////
	sine_counter_temp=(sine_counterB_temp>>13);  // up countr controlled by counter
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	0b5b      	lsrs	r3, r3, #13
 800393e:	61bb      	str	r3, [r7, #24]
		sine_tempA=((*(sampler.start_ptr+sine_counter_temp))-2040)<<10;
 8003940:	4b1b      	ldr	r3, [pc, #108]	; (80039b0 <sine_count2+0xd0>)
 8003942:	695a      	ldr	r2, [r3, #20]
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	4413      	add	r3, r2
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 8003950:	029b      	lsls	r3, r3, #10
 8003952:	617b      	str	r3, [r7, #20]
		sine_counter_temp++;
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	3301      	adds	r3, #1
 8003958:	61bb      	str	r3, [r7, #24]
	//	if (sine_counter_temp>=RAM_size)  sine_counter_temp=0; // limit sin_counter to sample size  set to sample length
				sine_tempB=((*(sampler.start_ptr+sine_counter_temp))-2040)<<10;  // convert to signed and +256 to -256
 800395a:	4b15      	ldr	r3, [pc, #84]	; (80039b0 <sine_count2+0xd0>)
 800395c:	695a      	ldr	r2, [r3, #20]
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	4413      	add	r3, r2
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 800396a:	029b      	lsls	r3, r3, #10
 800396c:	613b      	str	r3, [r7, #16]

				sine_tempB=	((sine_tempB-sine_tempA)>>5)*(sine_counterB_temp & 31);   // calculate fraction then add (x/32 )  * (0-31)
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	115b      	asrs	r3, r3, #5
 8003976:	461a      	mov	r2, r3
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	f003 031f 	and.w	r3, r3, #31
 800397e:	fb02 f303 	mul.w	r3, r2, r3
 8003982:	613b      	str	r3, [r7, #16]
				//note_selected=(note_selected*3)+3;
				*return_array=sine_counter_temp;  // this needs fixing
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	601a      	str	r2, [r3, #0]
				*(return_array+1)=sine_counterB_temp;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	3304      	adds	r3, #4
 800398e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003990:	601a      	str	r2, [r3, #0]
				*(return_array+2)=sine_tuned;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3308      	adds	r3, #8
 8003996:	6a3a      	ldr	r2, [r7, #32]
 8003998:	601a      	str	r2, [r3, #0]
				 return  (sine_tempA+sine_tempB)<<1;   // add back to start value -20k-20k  or about 16bit
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	4413      	add	r3, r2
 80039a0:	005b      	lsls	r3, r3, #1

}
 80039a2:	4618      	mov	r0, r3
 80039a4:	372c      	adds	r7, #44	; 0x2c
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	20000204 	.word	0x20000204
 80039b4:	20000158 	.word	0x20000158

080039b8 <LFO_source>:



void LFO_source(void){     // lfo
 80039b8:	b590      	push	{r4, r7, lr}
 80039ba:	b08b      	sub	sp, #44	; 0x2c
 80039bc:	af00      	add	r7, sp, #0


float	freq_temp=0;
 80039be:	f04f 0300 	mov.w	r3, #0
 80039c2:	613b      	str	r3, [r7, #16]
float 	freq2_temp=0;
 80039c4:	f04f 0300 	mov.w	r3, #0
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
uint32_t 	freq_saw=0;
 80039ca:	2300      	movs	r3, #0
 80039cc:	623b      	str	r3, [r7, #32]
uint8_t lfo_c ;
float offset=0;
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	60fb      	str	r3, [r7, #12]
	uint32_t freq3_temp;
	uint32_t freq4_temp;
	int16_t  output_hold;
	int32_t freq_tri;

	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 80039d4:	2300      	movs	r3, #0
 80039d6:	77fb      	strb	r3, [r7, #31]
 80039d8:	e140      	b.n	8003c5c <LFO_source+0x2a4>

	lfo_accu_temp=	lfo_accu[lfo_c][sampling_position_b];  // hold
 80039da:	7ffa      	ldrb	r2, [r7, #31]
 80039dc:	4ba6      	ldr	r3, [pc, #664]	; (8003c78 <LFO_source+0x2c0>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	49a6      	ldr	r1, [pc, #664]	; (8003c7c <LFO_source+0x2c4>)
 80039e4:	4613      	mov	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	4403      	add	r3, r0
 80039ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039f2:	61bb      	str	r3, [r7, #24]

	freq3_temp=lfo_tempo_lut[LFO[lfo_c].rate] ;  // rate. this needs a little log
 80039f4:	7ffa      	ldrb	r2, [r7, #31]
 80039f6:	49a2      	ldr	r1, [pc, #648]	; (8003c80 <LFO_source+0x2c8>)
 80039f8:	4613      	mov	r3, r2
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	4413      	add	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	461a      	mov	r2, r3
 8003a06:	4b9f      	ldr	r3, [pc, #636]	; (8003c84 <LFO_source+0x2cc>)
 8003a08:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003a0c:	60bb      	str	r3, [r7, #8]
		//freq4_temp=freq3_temp*freq3_temp;  // multiply  , dont more then 8000 really


			freq3_temp=lfo_accu_temp+ freq3_temp;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	4413      	add	r3, r2
 8003a14:	60bb      	str	r3, [r7, #8]


///  counts from -16k to +16 k   @ + 0.03125      to   +400    *10    or 13 ms *8 (10 hz ? fastest  )
		if (freq3_temp>62831) lfo_accu_temp=0; else lfo_accu_temp=freq3_temp; // write back value  counts -16000 to +16000
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f24f 526f 	movw	r2, #62831	; 0xf56f
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d902      	bls.n	8003a26 <LFO_source+0x6e>
 8003a20:	2300      	movs	r3, #0
 8003a22:	61bb      	str	r3, [r7, #24]
 8003a24:	e001      	b.n	8003a2a <LFO_source+0x72>
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	61bb      	str	r3, [r7, #24]
		if(!seq.pos)  lfo_accu_temp=0;   // tempo sync, mediocre
 8003a2a:	4b97      	ldr	r3, [pc, #604]	; (8003c88 <LFO_source+0x2d0>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <LFO_source+0x7e>
 8003a32:	2300      	movs	r3, #0
 8003a34:	61bb      	str	r3, [r7, #24]
		lfo_accu[lfo_c][sampling_position]=lfo_accu_temp;
 8003a36:	7ffa      	ldrb	r2, [r7, #31]
 8003a38:	4b94      	ldr	r3, [pc, #592]	; (8003c8c <LFO_source+0x2d4>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	498f      	ldr	r1, [pc, #572]	; (8003c7c <LFO_source+0x2c4>)
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	4403      	add	r3, r0
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		freq_temp=lfo_accu_temp;
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	ee07 3a90 	vmov	s15, r3
 8003a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a5a:	edc7 7a04 	vstr	s15, [r7, #16]
		freq2_temp=(freq_temp*0.0001);  //0-360
 8003a5e:	6938      	ldr	r0, [r7, #16]
 8003a60:	f7fc fe50 	bl	8000704 <__aeabi_f2d>
 8003a64:	a382      	add	r3, pc, #520	; (adr r3, 8003c70 <LFO_source+0x2b8>)
 8003a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6a:	f7fc fbbd 	bl	80001e8 <__aeabi_dmul>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	4610      	mov	r0, r2
 8003a74:	4619      	mov	r1, r3
 8003a76:	f7fc fe9d 	bl	80007b4 <__aeabi_d2f>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24

		freq_temp =arm_sin_f32(freq2_temp); // seems ok   , cmsis is ok  RADIANS !!!!!
 8003a7e:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8003a82:	f007 fcbb 	bl	800b3fc <arm_sin_f32>
 8003a86:	ed87 0a04 	vstr	s0, [r7, #16]
		freq2_temp=freq_temp*LFO[lfo_c].depth*204;
 8003a8a:	7ffa      	ldrb	r2, [r7, #31]
 8003a8c:	497c      	ldr	r1, [pc, #496]	; (8003c80 <LFO_source+0x2c8>)
 8003a8e:	4613      	mov	r3, r2
 8003a90:	011b      	lsls	r3, r3, #4
 8003a92:	4413      	add	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	440b      	add	r3, r1
 8003a98:	3301      	adds	r3, #1
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	ee07 3a90 	vmov	s15, r3
 8003aa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003aa4:	edd7 7a04 	vldr	s15, [r7, #16]
 8003aa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aac:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8003c90 <LFO_source+0x2d8>
 8003ab0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ab4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		if (!LFO[lfo_c].offset)    LFO[lfo_c].offset=0;   // se
 8003ab8:	7ffa      	ldrb	r2, [r7, #31]
 8003aba:	4971      	ldr	r1, [pc, #452]	; (8003c80 <LFO_source+0x2c8>)
 8003abc:	4613      	mov	r3, r2
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	4413      	add	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	3303      	adds	r3, #3
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d109      	bne.n	8003ae2 <LFO_source+0x12a>
 8003ace:	7ffa      	ldrb	r2, [r7, #31]
 8003ad0:	496b      	ldr	r1, [pc, #428]	; (8003c80 <LFO_source+0x2c8>)
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	440b      	add	r3, r1
 8003adc:	3303      	adds	r3, #3
 8003ade:	2200      	movs	r2, #0
 8003ae0:	701a      	strb	r2, [r3, #0]
 		offset=(LFO[lfo_c].offset<<8); //  limit now for finetuning
 8003ae2:	7ffa      	ldrb	r2, [r7, #31]
 8003ae4:	4966      	ldr	r1, [pc, #408]	; (8003c80 <LFO_source+0x2c8>)
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	4413      	add	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	440b      	add	r3, r1
 8003af0:	3303      	adds	r3, #3
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	021b      	lsls	r3, r3, #8
 8003af6:	ee07 3a90 	vmov	s15, r3
 8003afa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003afe:	edc7 7a03 	vstr	s15, [r7, #12]
			freq2_temp=(freq2_temp+offset);
 8003b02:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003b06:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b0e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		if (freq2_temp>32767)  freq2_temp=32767;
 8003b12:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003b16:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8003c94 <LFO_source+0x2dc>
 8003b1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b22:	dd01      	ble.n	8003b28 <LFO_source+0x170>
 8003b24:	4b5c      	ldr	r3, [pc, #368]	; (8003c98 <LFO_source+0x2e0>)
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24
		if (freq2_temp<-32767) {  freq2_temp=-32767; }  // clip to 13bit -/+ 8000
 8003b28:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003b2c:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8003c9c <LFO_source+0x2e4>
 8003b30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b38:	d501      	bpl.n	8003b3e <LFO_source+0x186>
 8003b3a:	4b59      	ldr	r3, [pc, #356]	; (8003ca0 <LFO_source+0x2e8>)
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24

						output_hold=freq2_temp;
 8003b3e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003b42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b46:	ee17 3a90 	vmov	r3, s15
 8003b4a:	80fb      	strh	r3, [r7, #6]
						if(lfo_accu_temp<32768)   freq_tri=lfo_accu_temp; else freq_tri=65535-lfo_accu_temp;    // 0-32767
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b52:	d202      	bcs.n	8003b5a <LFO_source+0x1a2>
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	617b      	str	r3, [r7, #20]
 8003b58:	e004      	b.n	8003b64 <LFO_source+0x1ac>
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003b60:	33ff      	adds	r3, #255	; 0xff
 8003b62:	617b      	str	r3, [r7, #20]
					freq_saw=((lfo_accu_temp*LFO[lfo_c].depth)>>8)+offset;
 8003b64:	7ffa      	ldrb	r2, [r7, #31]
 8003b66:	4946      	ldr	r1, [pc, #280]	; (8003c80 <LFO_source+0x2c8>)
 8003b68:	4613      	mov	r3, r2
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	4413      	add	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	3301      	adds	r3, #1
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	fb02 f303 	mul.w	r3, r2, r3
 8003b7e:	0a1b      	lsrs	r3, r3, #8
 8003b80:	ee07 3a90 	vmov	s15, r3
 8003b84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b88:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b94:	ee17 3a90 	vmov	r3, s15
 8003b98:	623b      	str	r3, [r7, #32]
					if (freq_saw>65535)  freq_saw=65535;   // clip
 8003b9a:	6a3b      	ldr	r3, [r7, #32]
 8003b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba0:	d302      	bcc.n	8003ba8 <LFO_source+0x1f0>
 8003ba2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ba6:	623b      	str	r3, [r7, #32]

					LFO[lfo_c].out[sampling_position]=output_hold+32767;
 8003ba8:	88fb      	ldrh	r3, [r7, #6]
 8003baa:	7ffa      	ldrb	r2, [r7, #31]
 8003bac:	4937      	ldr	r1, [pc, #220]	; (8003c8c <LFO_source+0x2d4>)
 8003bae:	7809      	ldrb	r1, [r1, #0]
 8003bb0:	460c      	mov	r4, r1
 8003bb2:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8003bb6:	337f      	adds	r3, #127	; 0x7f
 8003bb8:	b298      	uxth	r0, r3
 8003bba:	4931      	ldr	r1, [pc, #196]	; (8003c80 <LFO_source+0x2c8>)
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	4413      	add	r3, r2
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	4423      	add	r3, r4
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	440b      	add	r3, r1
 8003bca:	4602      	mov	r2, r0
 8003bcc:	80da      	strh	r2, [r3, #6]
				   LFO[lfo_c].out_saw[sampling_position]=freq_saw;
 8003bce:	7ffa      	ldrb	r2, [r7, #31]
 8003bd0:	4b2e      	ldr	r3, [pc, #184]	; (8003c8c <LFO_source+0x2d4>)
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	461c      	mov	r4, r3
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	b298      	uxth	r0, r3
 8003bda:	4929      	ldr	r1, [pc, #164]	; (8003c80 <LFO_source+0x2c8>)
 8003bdc:	4613      	mov	r3, r2
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	4413      	add	r3, r2
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	4423      	add	r3, r4
 8003be6:	330c      	adds	r3, #12
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	440b      	add	r3, r1
 8003bec:	4602      	mov	r2, r0
 8003bee:	805a      	strh	r2, [r3, #2]

				   freq_tri=((freq_tri*LFO[lfo_c].depth)>>7)+offset;
 8003bf0:	7ffa      	ldrb	r2, [r7, #31]
 8003bf2:	4923      	ldr	r1, [pc, #140]	; (8003c80 <LFO_source+0x2c8>)
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	4413      	add	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	3301      	adds	r3, #1
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	461a      	mov	r2, r3
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	fb02 f303 	mul.w	r3, r2, r3
 8003c0a:	11db      	asrs	r3, r3, #7
 8003c0c:	ee07 3a90 	vmov	s15, r3
 8003c10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c14:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c20:	ee17 3a90 	vmov	r3, s15
 8003c24:	617b      	str	r3, [r7, #20]
				   if (freq_tri>65535)  freq_tri=65535;   // clip
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c2c:	db02      	blt.n	8003c34 <LFO_source+0x27c>
 8003c2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c32:	617b      	str	r3, [r7, #20]
				  LFO[lfo_c].out_tri[sampling_position]=freq_tri;
 8003c34:	7ffa      	ldrb	r2, [r7, #31]
 8003c36:	4b15      	ldr	r3, [pc, #84]	; (8003c8c <LFO_source+0x2d4>)
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	461c      	mov	r4, r3
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	b298      	uxth	r0, r3
 8003c40:	490f      	ldr	r1, [pc, #60]	; (8003c80 <LFO_source+0x2c8>)
 8003c42:	4613      	mov	r3, r2
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	4413      	add	r3, r2
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	4423      	add	r3, r4
 8003c4c:	3314      	adds	r3, #20
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	440b      	add	r3, r1
 8003c52:	4602      	mov	r2, r0
 8003c54:	80da      	strh	r2, [r3, #6]
	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 8003c56:	7ffb      	ldrb	r3, [r7, #31]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	77fb      	strb	r3, [r7, #31]
 8003c5c:	7ffb      	ldrb	r3, [r7, #31]
 8003c5e:	2b09      	cmp	r3, #9
 8003c60:	f67f aebb 	bls.w	80039da <LFO_source+0x22>

		} // lfo gen : 0=f1 , 1=tempo,2=pitch



	}
 8003c64:	bf00      	nop
 8003c66:	bf00      	nop
 8003c68:	372c      	adds	r7, #44	; 0x2c
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd90      	pop	{r4, r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	eb1c432d 	.word	0xeb1c432d
 8003c74:	3f1a36e2 	.word	0x3f1a36e2
 8003c78:	20005985 	.word	0x20005985
 8003c7c:	200035f0 	.word	0x200035f0
 8003c80:	20004434 	.word	0x20004434
 8003c84:	20003980 	.word	0x20003980
 8003c88:	200051a4 	.word	0x200051a4
 8003c8c:	20005984 	.word	0x20005984
 8003c90:	434c0000 	.word	0x434c0000
 8003c94:	46fffe00 	.word	0x46fffe00
 8003c98:	46fffe00 	.word	0x46fffe00
 8003c9c:	c6fffe00 	.word	0xc6fffe00
 8003ca0:	c6fffe00 	.word	0xc6fffe00

08003ca4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ca4:	b5b0      	push	{r4, r5, r7, lr}
 8003ca6:	b0a4      	sub	sp, #144	; 0x90
 8003ca8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003caa:	f001 fdab 	bl	8005804 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003cae:	f000 fe37 	bl	8004920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003cb2:	f001 f96d 	bl	8004f90 <MX_GPIO_Init>
  MX_DMA_Init();
 8003cb6:	f001 f94b 	bl	8004f50 <MX_DMA_Init>
  MX_ADC1_Init();
 8003cba:	f000 fe9b 	bl	80049f4 <MX_ADC1_Init>
  MX_SPI2_Init();
 8003cbe:	f000 ff93 	bl	8004be8 <MX_SPI2_Init>
  MX_TIM3_Init();
 8003cc2:	f001 f81b 	bl	8004cfc <MX_TIM3_Init>
  MX_TIM4_Init();
 8003cc6:	f001 f89b 	bl	8004e00 <MX_TIM4_Init>
  MX_I2C2_Init();
 8003cca:	f000 ff29 	bl	8004b20 <MX_I2C2_Init>
  MX_TIM2_Init();
 8003cce:	f000 ffc1 	bl	8004c54 <MX_TIM2_Init>
  MX_SPI1_Init();
 8003cd2:	f000 ff53 	bl	8004b7c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8003cd6:	f001 f8e7 	bl	8004ea8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8003cda:	f001 f90f 	bl	8004efc <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  const volatile uint8_t *userConfig=(const volatile uint8_t *)0x0800D2F0;
 8003cde:	4ba5      	ldr	r3, [pc, #660]	; (8003f74 <main+0x2d0>)
 8003ce0:	677b      	str	r3, [r7, #116]	; 0x74



//LL_SPI_Enable(SPI2);

  HAL_SPI_Init(&hspi2); // write to register hspi2
 8003ce2:	48a5      	ldr	r0, [pc, #660]	; (8003f78 <main+0x2d4>)
 8003ce4:	f005 f954 	bl	8008f90 <HAL_SPI_Init>
  HAL_SPI_Init(&hspi1); // write to register hspi2
 8003ce8:	48a4      	ldr	r0, [pc, #656]	; (8003f7c <main+0x2d8>)
 8003cea:	f005 f951 	bl	8008f90 <HAL_SPI_Init>
  // lcd_init(); // keep this late or have issues
//HAL_TIM_Base_Start_IT(&htim1);  // This needs to work for irq   ,disbling tim1 made loop a lot faster
//TIM1->CCER=0;
HAL_TIM_Base_Start_IT(&htim3);  // This needs to work for irq
 8003cee:	48a4      	ldr	r0, [pc, #656]	; (8003f80 <main+0x2dc>)
 8003cf0:	f005 ffa0 	bl	8009c34 <HAL_TIM_Base_Start_IT>
TIM3->CCER=0;
 8003cf4:	4ba3      	ldr	r3, [pc, #652]	; (8003f84 <main+0x2e0>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	621a      	str	r2, [r3, #32]
HAL_TIM_Base_Start(&htim2);
 8003cfa:	48a3      	ldr	r0, [pc, #652]	; (8003f88 <main+0x2e4>)
 8003cfc:	f005 ff40 	bl	8009b80 <HAL_TIM_Base_Start>
HAL_TIM_Base_Start(&htim4);
 8003d00:	48a2      	ldr	r0, [pc, #648]	; (8003f8c <main+0x2e8>)
 8003d02:	f005 ff3d 	bl	8009b80 <HAL_TIM_Base_Start>
//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  // they both work fine together
HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8003d06:	2100      	movs	r1, #0
 8003d08:	489d      	ldr	r0, [pc, #628]	; (8003f80 <main+0x2dc>)
 8003d0a:	f006 f84f 	bl	8009dac <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8003d0e:	2104      	movs	r1, #4
 8003d10:	489b      	ldr	r0, [pc, #620]	; (8003f80 <main+0x2dc>)
 8003d12:	f006 f84b 	bl	8009dac <HAL_TIM_PWM_Start>
//HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,pData, 63);
TIM2->CNT=32000;
 8003d16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d1a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8003d1e:	625a      	str	r2, [r3, #36]	; 0x24
HAL_ADC_Start(&hadc1);
 8003d20:	489b      	ldr	r0, [pc, #620]	; (8003f90 <main+0x2ec>)
 8003d22:	f001 fe49 	bl	80059b8 <HAL_ADC_Start>
HAL_ADC_Start_DMA(&hadc1, adc_source, 3072); //dma start ,needs this and adc start ,set sampling time to very long or it will fail
 8003d26:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8003d2a:	499a      	ldr	r1, [pc, #616]	; (8003f94 <main+0x2f0>)
 8003d2c:	4898      	ldr	r0, [pc, #608]	; (8003f90 <main+0x2ec>)
 8003d2e:	f001 ff83 	bl	8005c38 <HAL_ADC_Start_DMA>
//HAL_DMA_Init(&hdma_spi2_tx);

HAL_I2C_MspInit(&hi2c2);
 8003d32:	4899      	ldr	r0, [pc, #612]	; (8003f98 <main+0x2f4>)
 8003d34:	f001 faac 	bl	8005290 <HAL_I2C_MspInit>
uint8_t send_spi1[5]={0x90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,};
 8003d38:	4a98      	ldr	r2, [pc, #608]	; (8003f9c <main+0x2f8>)
 8003d3a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003d3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d42:	6018      	str	r0, [r3, #0]
 8003d44:	3304      	adds	r3, #4
 8003d46:	7019      	strb	r1, [r3, #0]
HAL_SPI_Receive(&hspi1, return_spi1, 2, 1000);   // manuf return sif correct , 0xEF,0x17 which is correct, then repeats when more request

*/


HAL_Delay(5);
 8003d48:	2005      	movs	r0, #5
 8003d4a:	f001 fdcd 	bl	80058e8 <HAL_Delay>

//               ----                  16Mbyte   flash   , w25q128   -----  16M (24bit) * 8bits   ( 1 page 256 bytes)
	send_spi1[0]=0x06; //enable write  , only lasts for single operation
 8003d4e:	2306      	movs	r3, #6
 8003d50:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8003d54:	2200      	movs	r2, #0
 8003d56:	2110      	movs	r1, #16
 8003d58:	4891      	ldr	r0, [pc, #580]	; (8003fa0 <main+0x2fc>)
 8003d5a:	f003 fccf 	bl	80076fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8003d5e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d66:	2201      	movs	r2, #1
 8003d68:	4884      	ldr	r0, [pc, #528]	; (8003f7c <main+0x2d8>)
 8003d6a:	f005 f99a 	bl	80090a2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8003d6e:	2201      	movs	r2, #1
 8003d70:	2110      	movs	r1, #16
 8003d72:	488b      	ldr	r0, [pc, #556]	; (8003fa0 <main+0x2fc>)
 8003d74:	f003 fcc2 	bl	80076fc <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8003d78:	2005      	movs	r0, #5
 8003d7a:	f001 fdb5 	bl	80058e8 <HAL_Delay>
	send_spi1[0]=0x20; //sector erase
 8003d7e:	2320      	movs	r3, #32
 8003d80:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	send_spi1[1]=0; //24bit address msb
 8003d84:	2300      	movs	r3, #0
 8003d86:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	send_spi1[2]=0; //24bit address
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	send_spi1[3]=1; //24bit address lsb
 8003d90:	2301      	movs	r3, #1
 8003d92:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);         // enable for sector erase   , stays empty when enabled
 8003d96:	2200      	movs	r2, #0
 8003d98:	2110      	movs	r1, #16
 8003d9a:	4881      	ldr	r0, [pc, #516]	; (8003fa0 <main+0x2fc>)
 8003d9c:	f003 fcae 	bl	80076fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, send_spi1, 4, 1000);   //erase sector ,works
 8003da0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003da4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003da8:	2204      	movs	r2, #4
 8003daa:	4874      	ldr	r0, [pc, #464]	; (8003f7c <main+0x2d8>)
 8003dac:	f005 f979 	bl	80090a2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8003db0:	2201      	movs	r2, #1
 8003db2:	2110      	movs	r1, #16
 8003db4:	487a      	ldr	r0, [pc, #488]	; (8003fa0 <main+0x2fc>)
 8003db6:	f003 fca1 	bl	80076fc <HAL_GPIO_WritePin>


	send_spi1[0]=0x05; //read status register  if writing
 8003dba:	2305      	movs	r3, #5
 8003dbc:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	send_spi1[1]=0; //24bit address msb
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	status_reg[1]=1; // set busy on
 8003dc6:	4b77      	ldr	r3, [pc, #476]	; (8003fa4 <main+0x300>)
 8003dc8:	2201      	movs	r2, #1
 8003dca:	705a      	strb	r2, [r3, #1]

	while (status_reg[1]&1){								// check if write busy
 8003dcc:	e012      	b.n	8003df4 <main+0x150>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8003dce:	2200      	movs	r2, #0
 8003dd0:	2110      	movs	r1, #16
 8003dd2:	4873      	ldr	r0, [pc, #460]	; (8003fa0 <main+0x2fc>)
 8003dd4:	f003 fc92 	bl	80076fc <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, send_spi1, status_reg,2, 200);
 8003dd8:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003ddc:	23c8      	movs	r3, #200	; 0xc8
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	2302      	movs	r3, #2
 8003de2:	4a70      	ldr	r2, [pc, #448]	; (8003fa4 <main+0x300>)
 8003de4:	4865      	ldr	r0, [pc, #404]	; (8003f7c <main+0x2d8>)
 8003de6:	f005 fba9 	bl	800953c <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8003dea:	2201      	movs	r2, #1
 8003dec:	2110      	movs	r1, #16
 8003dee:	486c      	ldr	r0, [pc, #432]	; (8003fa0 <main+0x2fc>)
 8003df0:	f003 fc84 	bl	80076fc <HAL_GPIO_WritePin>
	while (status_reg[1]&1){								// check if write busy
 8003df4:	4b6b      	ldr	r3, [pc, #428]	; (8003fa4 <main+0x300>)
 8003df6:	785b      	ldrb	r3, [r3, #1]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1e6      	bne.n	8003dce <main+0x12a>
	}

	send_spi1[0]=0x06; //enable write again
 8003e00:	2306      	movs	r3, #6
 8003e02:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8003e06:	2200      	movs	r2, #0
 8003e08:	2110      	movs	r1, #16
 8003e0a:	4865      	ldr	r0, [pc, #404]	; (8003fa0 <main+0x2fc>)
 8003e0c:	f003 fc76 	bl	80076fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8003e10:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003e14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e18:	2201      	movs	r2, #1
 8003e1a:	4858      	ldr	r0, [pc, #352]	; (8003f7c <main+0x2d8>)
 8003e1c:	f005 f941 	bl	80090a2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8003e20:	2201      	movs	r2, #1
 8003e22:	2110      	movs	r1, #16
 8003e24:	485e      	ldr	r0, [pc, #376]	; (8003fa0 <main+0x2fc>)
 8003e26:	f003 fc69 	bl	80076fc <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8003e2a:	2005      	movs	r0, #5
 8003e2c:	f001 fd5c 	bl	80058e8 <HAL_Delay>




	//uint8_t temp_spi1[]={0x02,0,0,1,"H","E","L","L","O"," ","W","O","R","L","D",250,0,0} ; //page program ,24bit(address)  +1-255 byte data  (page)
	uint8_t temp_spi1[]={0x02,0,0,1,128,129,130,131,132,133,134,135,136,137,138,250,0,0} ; //page program ,24bit(address)  +1-255 byte data  (page)
 8003e30:	4b5d      	ldr	r3, [pc, #372]	; (8003fa8 <main+0x304>)
 8003e32:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8003e36:	461d      	mov	r5, r3
 8003e38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e3c:	682b      	ldr	r3, [r5, #0]
 8003e3e:	8023      	strh	r3, [r4, #0]
	memcpy  (send_spi1,temp_spi1, 14);   // copy new array over old
 8003e40:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003e44:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003e48:	220e      	movs	r2, #14
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f007 fb48 	bl	800b4e0 <memcpy>

	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8003e50:	2200      	movs	r2, #0
 8003e52:	2110      	movs	r1, #16
 8003e54:	4852      	ldr	r0, [pc, #328]	; (8003fa0 <main+0x2fc>)
 8003e56:	f003 fc51 	bl	80076fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, send_spi1, 14, 1000);  //address,page program
 8003e5a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e62:	220e      	movs	r2, #14
 8003e64:	4845      	ldr	r0, [pc, #276]	; (8003f7c <main+0x2d8>)
 8003e66:	f005 f91c 	bl	80090a2 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	2110      	movs	r1, #16
 8003e6e:	484c      	ldr	r0, [pc, #304]	; (8003fa0 <main+0x2fc>)
 8003e70:	f003 fc44 	bl	80076fc <HAL_GPIO_WritePin>




	HAL_Delay(25);
 8003e74:	2019      	movs	r0, #25
 8003e76:	f001 fd37 	bl	80058e8 <HAL_Delay>
	send_spi1[0]=0x04; //disable write
 8003e7a:	2304      	movs	r3, #4
 8003e7c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8003e80:	2200      	movs	r2, #0
 8003e82:	2110      	movs	r1, #16
 8003e84:	4846      	ldr	r0, [pc, #280]	; (8003fa0 <main+0x2fc>)
 8003e86:	f003 fc39 	bl	80076fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8003e8a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e92:	2201      	movs	r2, #1
 8003e94:	4839      	ldr	r0, [pc, #228]	; (8003f7c <main+0x2d8>)
 8003e96:	f005 f904 	bl	80090a2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	2110      	movs	r1, #16
 8003e9e:	4840      	ldr	r0, [pc, #256]	; (8003fa0 <main+0x2fc>)
 8003ea0:	f003 fc2c 	bl	80076fc <HAL_GPIO_WritePin>

	HAL_Delay(5);
 8003ea4:	2005      	movs	r0, #5
 8003ea6:	f001 fd1f 	bl	80058e8 <HAL_Delay>
	memcpy  (send_spi1,return_spi1, 14);   // clear out
 8003eaa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003eae:	220e      	movs	r2, #14
 8003eb0:	493e      	ldr	r1, [pc, #248]	; (8003fac <main+0x308>)
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f007 fb14 	bl	800b4e0 <memcpy>
	send_spi1[0]=0x03; //read page 1
 8003eb8:	2303      	movs	r3, #3
 8003eba:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	send_spi1[1]=0; //24bit address msb
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	send_spi1[2]=0; //24bit address
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	send_spi1[3]=1; //24bit address lsb
 8003eca:	2301      	movs	r3, #1
 8003ecc:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // when readin low till the end
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2110      	movs	r1, #16
 8003ed4:	4832      	ldr	r0, [pc, #200]	; (8003fa0 <main+0x2fc>)
 8003ed6:	f003 fc11 	bl	80076fc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit (&hspi1, send_spi1, 4, 100);
 8003eda:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003ede:	2364      	movs	r3, #100	; 0x64
 8003ee0:	2204      	movs	r2, #4
 8003ee2:	4826      	ldr	r0, [pc, #152]	; (8003f7c <main+0x2d8>)
 8003ee4:	f005 f8dd 	bl	80090a2 <HAL_SPI_Transmit>
	HAL_SPI_Receive (&hspi1, return_spi1, 10, 100);   // works fine
 8003ee8:	2364      	movs	r3, #100	; 0x64
 8003eea:	220a      	movs	r2, #10
 8003eec:	492f      	ldr	r1, [pc, #188]	; (8003fac <main+0x308>)
 8003eee:	4823      	ldr	r0, [pc, #140]	; (8003f7c <main+0x2d8>)
 8003ef0:	f005 fa13 	bl	800931a <HAL_SPI_Receive>

	//HAL_SPI_TransmitReceive(&hspi1, send_spi1, return_spi1,14, 100);  // better in case skip , 4 bytes is null then data , slow
	//HAL_Delay(5);

	//HAL_SPI_Receive(&hspi1, return_spi1, 12, 1000);  // reverse msb ?
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	2110      	movs	r1, #16
 8003ef8:	4829      	ldr	r0, [pc, #164]	; (8003fa0 <main+0x2fc>)
 8003efa:	f003 fbff 	bl	80076fc <HAL_GPIO_WritePin>



	HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8003efe:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f06:	2201      	movs	r2, #1
 8003f08:	481c      	ldr	r0, [pc, #112]	; (8003f7c <main+0x2d8>)
 8003f0a:	f005 f8ca 	bl	80090a2 <HAL_SPI_Transmit>


uint8_t potSource2[64]={0};    // { [0 ... 112] = 64 };
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	f107 0310 	add.w	r3, r7, #16
 8003f16:	223c      	movs	r2, #60	; 0x3c
 8003f18:	2100      	movs	r1, #0
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f007 faee 	bl	800b4fc <memset>
uint16_t mem_count2=0;
 8003f20:	2300      	movs	r3, #0
 8003f22:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

HAL_I2C_Mem_Read (&hi2c2,160,64, 2 , potSource, 512,1000); //ok
 8003f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f2a:	9302      	str	r3, [sp, #8]
 8003f2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f30:	9301      	str	r3, [sp, #4]
 8003f32:	4b1f      	ldr	r3, [pc, #124]	; (8003fb0 <main+0x30c>)
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	2302      	movs	r3, #2
 8003f38:	2240      	movs	r2, #64	; 0x40
 8003f3a:	21a0      	movs	r1, #160	; 0xa0
 8003f3c:	4816      	ldr	r0, [pc, #88]	; (8003f98 <main+0x2f4>)
 8003f3e:	f003 fe4d 	bl	8007bdc <HAL_I2C_Mem_Read>





	uint16_t mem_counter=0;
 8003f42:	2300      	movs	r3, #0
 8003f44:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	memcpy(&seq,potSource,46 );  // load from potSource  ,, causes problems with memory ,NEEDS TO BE CONTINUOS OR  WILL  GET CORRUPT
 8003f48:	4a1a      	ldr	r2, [pc, #104]	; (8003fb4 <main+0x310>)
 8003f4a:	4b19      	ldr	r3, [pc, #100]	; (8003fb0 <main+0x30c>)
 8003f4c:	4614      	mov	r4, r2
 8003f4e:	461d      	mov	r5, r3
 8003f50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f58:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003f5c:	c407      	stmia	r4!, {r0, r1, r2}
 8003f5e:	8023      	strh	r3, [r4, #0]
    memcpy(&note,potSource+156,160 );   // this works but keep checking for fragmentation
 8003f60:	4b15      	ldr	r3, [pc, #84]	; (8003fb8 <main+0x314>)
 8003f62:	22a0      	movs	r2, #160	; 0xa0
 8003f64:	4619      	mov	r1, r3
 8003f66:	4815      	ldr	r0, [pc, #84]	; (8003fbc <main+0x318>)
 8003f68:	f007 faba 	bl	800b4e0 <memcpy>

    for(mem_counter=0;mem_counter<10;mem_counter++){
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8003f72:	e07f      	b.n	8004074 <main+0x3d0>
 8003f74:	0800d2f0 	.word	0x0800d2f0
 8003f78:	20010108 	.word	0x20010108
 8003f7c:	200100b0 	.word	0x200100b0
 8003f80:	200101a8 	.word	0x200101a8
 8003f84:	40000400 	.word	0x40000400
 8003f88:	20010160 	.word	0x20010160
 8003f8c:	200101f0 	.word	0x200101f0
 8003f90:	2000ffb4 	.word	0x2000ffb4
 8003f94:	200018a4 	.word	0x200018a4
 8003f98:	2001005c 	.word	0x2001005c
 8003f9c:	0800ba44 	.word	0x0800ba44
 8003fa0:	40020000 	.word	0x40020000
 8003fa4:	20000154 	.word	0x20000154
 8003fa8:	0800ba4c 	.word	0x0800ba4c
 8003fac:	2000441c 	.word	0x2000441c
 8003fb0:	20000624 	.word	0x20000624
 8003fb4:	200051a4 	.word	0x200051a4
 8003fb8:	200006c0 	.word	0x200006c0
 8003fbc:	20000158 	.word	0x20000158

		memcpy(&LFO[mem_counter],potSource+46+(mem_counter*6),6 );  // + 60 ,ok here
 8003fc0:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	4413      	add	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4aa9      	ldr	r2, [pc, #676]	; (8004274 <main+0x5d0>)
 8003fce:	1898      	adds	r0, r3, r2
 8003fd0:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	4413      	add	r3, r2
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	332e      	adds	r3, #46	; 0x2e
 8003fde:	4aa6      	ldr	r2, [pc, #664]	; (8004278 <main+0x5d4>)
 8003fe0:	4413      	add	r3, r2
 8003fe2:	2206      	movs	r2, #6
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	f007 fa7b 	bl	800b4e0 <memcpy>

		memcpy(&ADSR[mem_counter],potSource+106+(mem_counter*5),5 );  // +50  ,
 8003fea:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8003fee:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8003ff2:	fb02 f303 	mul.w	r3, r2, r3
 8003ff6:	4aa1      	ldr	r2, [pc, #644]	; (800427c <main+0x5d8>)
 8003ff8:	1898      	adds	r0, r3, r2
 8003ffa:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003ffe:	4613      	mov	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4413      	add	r3, r2
 8004004:	336a      	adds	r3, #106	; 0x6a
 8004006:	4a9c      	ldr	r2, [pc, #624]	; (8004278 <main+0x5d4>)
 8004008:	4413      	add	r3, r2
 800400a:	2205      	movs	r2, #5
 800400c:	4619      	mov	r1, r3
 800400e:	f007 fa67 	bl	800b4e0 <memcpy>
		memcpy(&patch[mem_counter],potSource+316+(mem_counter*6),6 );
 8004012:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8004016:	4613      	mov	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4413      	add	r3, r2
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	4a98      	ldr	r2, [pc, #608]	; (8004280 <main+0x5dc>)
 8004020:	1898      	adds	r0, r3, r2
 8004022:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8004026:	4613      	mov	r3, r2
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	4413      	add	r3, r2
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004032:	4a91      	ldr	r2, [pc, #580]	; (8004278 <main+0x5d4>)
 8004034:	4413      	add	r3, r2
 8004036:	2206      	movs	r2, #6
 8004038:	4619      	mov	r1, r3
 800403a:	f007 fa51 	bl	800b4e0 <memcpy>
		memcpy(&LFO_slave1[mem_counter],potSource+376+(mem_counter*6),6 );  // + 60 ,ok here
 800403e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8004042:	4613      	mov	r3, r2
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	4413      	add	r3, r2
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	4a8e      	ldr	r2, [pc, #568]	; (8004284 <main+0x5e0>)
 800404c:	1898      	adds	r0, r3, r2
 800404e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8004052:	4613      	mov	r3, r2
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	4413      	add	r3, r2
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800405e:	4a86      	ldr	r2, [pc, #536]	; (8004278 <main+0x5d4>)
 8004060:	4413      	add	r3, r2
 8004062:	2206      	movs	r2, #6
 8004064:	4619      	mov	r1, r3
 8004066:	f007 fa3b 	bl	800b4e0 <memcpy>
    for(mem_counter=0;mem_counter<10;mem_counter++){
 800406a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800406e:	3301      	adds	r3, #1
 8004070:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8004074:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8004078:	2b09      	cmp	r3, #9
 800407a:	d9a1      	bls.n	8003fc0 <main+0x31c>

    }


	for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 800407c:	4b82      	ldr	r3, [pc, #520]	; (8004288 <main+0x5e4>)
 800407e:	2200      	movs	r2, #0
 8004080:	801a      	strh	r2, [r3, #0]
 8004082:	e057      	b.n	8004134 <main+0x490>

	for 	(n=0;n<18;n++){					// this is ok
 8004084:	4b81      	ldr	r3, [pc, #516]	; (800428c <main+0x5e8>)
 8004086:	2200      	movs	r2, #0
 8004088:	801a      	strh	r2, [r3, #0]
 800408a:	e049      	b.n	8004120 <main+0x47c>
		if (n==0) gfx_ram[(i*18)+n] = 128+(i&31);   // half page
 800408c:	4b7f      	ldr	r3, [pc, #508]	; (800428c <main+0x5e8>)
 800408e:	881b      	ldrh	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d114      	bne.n	80040be <main+0x41a>
 8004094:	4b7c      	ldr	r3, [pc, #496]	; (8004288 <main+0x5e4>)
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	b2db      	uxtb	r3, r3
 800409a:	f003 031f 	and.w	r3, r3, #31
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	4b79      	ldr	r3, [pc, #484]	; (8004288 <main+0x5e4>)
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	4619      	mov	r1, r3
 80040a6:	460b      	mov	r3, r1
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	440b      	add	r3, r1
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	4619      	mov	r1, r3
 80040b0:	4b76      	ldr	r3, [pc, #472]	; (800428c <main+0x5e8>)
 80040b2:	881b      	ldrh	r3, [r3, #0]
 80040b4:	440b      	add	r3, r1
 80040b6:	3a80      	subs	r2, #128	; 0x80
 80040b8:	b2d1      	uxtb	r1, r2
 80040ba:	4a75      	ldr	r2, [pc, #468]	; (8004290 <main+0x5ec>)
 80040bc:	54d1      	strb	r1, [r2, r3]
		if (n==1) gfx_ram[(i*18)+n] = 128+((i>>5)*8);    // change x to 8
 80040be:	4b73      	ldr	r3, [pc, #460]	; (800428c <main+0x5e8>)
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d114      	bne.n	80040f0 <main+0x44c>
 80040c6:	4b70      	ldr	r3, [pc, #448]	; (8004288 <main+0x5e4>)
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	3310      	adds	r3, #16
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	4b6d      	ldr	r3, [pc, #436]	; (8004288 <main+0x5e4>)
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	4619      	mov	r1, r3
 80040d8:	460b      	mov	r3, r1
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	440b      	add	r3, r1
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	4619      	mov	r1, r3
 80040e2:	4b6a      	ldr	r3, [pc, #424]	; (800428c <main+0x5e8>)
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	440b      	add	r3, r1
 80040e8:	00d2      	lsls	r2, r2, #3
 80040ea:	b2d1      	uxtb	r1, r2
 80040ec:	4a68      	ldr	r2, [pc, #416]	; (8004290 <main+0x5ec>)
 80040ee:	54d1      	strb	r1, [r2, r3]
		if (n>1)  gfx_ram[(i*18)+n] = 255;
 80040f0:	4b66      	ldr	r3, [pc, #408]	; (800428c <main+0x5e8>)
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d90d      	bls.n	8004114 <main+0x470>
 80040f8:	4b63      	ldr	r3, [pc, #396]	; (8004288 <main+0x5e4>)
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	461a      	mov	r2, r3
 80040fe:	4613      	mov	r3, r2
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	4413      	add	r3, r2
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	461a      	mov	r2, r3
 8004108:	4b60      	ldr	r3, [pc, #384]	; (800428c <main+0x5e8>)
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	4413      	add	r3, r2
 800410e:	4a60      	ldr	r2, [pc, #384]	; (8004290 <main+0x5ec>)
 8004110:	21ff      	movs	r1, #255	; 0xff
 8004112:	54d1      	strb	r1, [r2, r3]
	for 	(n=0;n<18;n++){					// this is ok
 8004114:	4b5d      	ldr	r3, [pc, #372]	; (800428c <main+0x5e8>)
 8004116:	881b      	ldrh	r3, [r3, #0]
 8004118:	3301      	adds	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	4b5b      	ldr	r3, [pc, #364]	; (800428c <main+0x5e8>)
 800411e:	801a      	strh	r2, [r3, #0]
 8004120:	4b5a      	ldr	r3, [pc, #360]	; (800428c <main+0x5e8>)
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	2b11      	cmp	r3, #17
 8004126:	d9b1      	bls.n	800408c <main+0x3e8>
	for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8004128:	4b57      	ldr	r3, [pc, #348]	; (8004288 <main+0x5e4>)
 800412a:	881b      	ldrh	r3, [r3, #0]
 800412c:	3301      	adds	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	4b55      	ldr	r3, [pc, #340]	; (8004288 <main+0x5e4>)
 8004132:	801a      	strh	r2, [r3, #0]
 8004134:	4b54      	ldr	r3, [pc, #336]	; (8004288 <main+0x5e4>)
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	2b3f      	cmp	r3, #63	; 0x3f
 800413a:	d9a3      	bls.n	8004084 <main+0x3e0>

	}

	}
seq.pos=0;
 800413c:	4b55      	ldr	r3, [pc, #340]	; (8004294 <main+0x5f0>)
 800413e:	2200      	movs	r2, #0
 8004140:	701a      	strb	r2, [r3, #0]


uint32_t  tempo_hold=1;  // calculate tempo look up
 8004142:	2301      	movs	r3, #1
 8004144:	66fb      	str	r3, [r7, #108]	; 0x6c


  	for (i=1;i<256;i++) {     // change for 32khz   1-256 bpm
 8004146:	4b50      	ldr	r3, [pc, #320]	; (8004288 <main+0x5e4>)
 8004148:	2201      	movs	r2, #1
 800414a:	801a      	strh	r2, [r3, #0]
 800414c:	e016      	b.n	800417c <main+0x4d8>
  		tempo_hold=i;
 800414e:	4b4e      	ldr	r3, [pc, #312]	; (8004288 <main+0x5e4>)
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	66fb      	str	r3, [r7, #108]	; 0x6c
  		tempo_hold=(60*seq_sample_rate)/(tempo_hold*16); //
 8004154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004156:	011b      	lsls	r3, r3, #4
 8004158:	4a4f      	ldr	r2, [pc, #316]	; (8004298 <main+0x5f4>)
 800415a:	fbb2 f3f3 	udiv	r3, r2, r3
 800415e:	66fb      	str	r3, [r7, #108]	; 0x6c

  	tempo_lut[i]=tempo_hold;
 8004160:	4b49      	ldr	r3, [pc, #292]	; (8004288 <main+0x5e4>)
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	461a      	mov	r2, r3
 8004166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004168:	b299      	uxth	r1, r3
 800416a:	4b4c      	ldr	r3, [pc, #304]	; (800429c <main+0x5f8>)
 800416c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  	for (i=1;i<256;i++) {     // change for 32khz   1-256 bpm
 8004170:	4b45      	ldr	r3, [pc, #276]	; (8004288 <main+0x5e4>)
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	3301      	adds	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	4b43      	ldr	r3, [pc, #268]	; (8004288 <main+0x5e4>)
 800417a:	801a      	strh	r2, [r3, #0]
 800417c:	4b42      	ldr	r3, [pc, #264]	; (8004288 <main+0x5e4>)
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	2bff      	cmp	r3, #255	; 0xff
 8004182:	d9e4      	bls.n	800414e <main+0x4aa>
  	}

//isrMask=571; // def tempo 571=180bpm , 20 ms /isrcount

	noteTiming=24;
 8004184:	4b46      	ldr	r3, [pc, #280]	; (80042a0 <main+0x5fc>)
 8004186:	2218      	movs	r2, #24
 8004188:	701a      	strb	r2, [r3, #0]
	for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 800418a:	4b3f      	ldr	r3, [pc, #252]	; (8004288 <main+0x5e4>)
 800418c:	2200      	movs	r2, #0
 800418e:	801a      	strh	r2, [r3, #0]
 8004190:	e00b      	b.n	80041aa <main+0x506>
		spell[i]=67;
 8004192:	4b3d      	ldr	r3, [pc, #244]	; (8004288 <main+0x5e4>)
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	4b42      	ldr	r3, [pc, #264]	; (80042a4 <main+0x600>)
 800419a:	2143      	movs	r1, #67	; 0x43
 800419c:	5499      	strb	r1, [r3, r2]
	for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 800419e:	4b3a      	ldr	r3, [pc, #232]	; (8004288 <main+0x5e4>)
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	3301      	adds	r3, #1
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	4b38      	ldr	r3, [pc, #224]	; (8004288 <main+0x5e4>)
 80041a8:	801a      	strh	r2, [r3, #0]
 80041aa:	4b37      	ldr	r3, [pc, #220]	; (8004288 <main+0x5e4>)
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80041b2:	d3ee      	bcc.n	8004192 <main+0x4ee>

	}

	gfx_clear();
 80041b4:	f7fd fbcc 	bl	8001950 <gfx_clear>
uint16_t pars_counter;

for (pars_counter=0;pars_counter<600;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 80041b8:	2300      	movs	r3, #0
 80041ba:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80041be:	e006      	b.n	80041ce <main+0x52a>

		menu_parser();  // run it closer to default_menu size ,times, if default_menu is corrupt gfx breaks pretty bad
 80041c0:	f7fc ff10 	bl	8000fe4 <menu_parser>
for (pars_counter=0;pars_counter<600;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 80041c4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80041c8:	3301      	adds	r3, #1
 80041ca:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80041ce:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80041d2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80041d6:	d3f3      	bcc.n	80041c0 <main+0x51c>

	}
for (i=0;i<16384;i++) {     // change for 32khz   1-256 bpm
 80041d8:	4b2b      	ldr	r3, [pc, #172]	; (8004288 <main+0x5e4>)
 80041da:	2200      	movs	r2, #0
 80041dc:	801a      	strh	r2, [r3, #0]
 80041de:	e00c      	b.n	80041fa <main+0x556>
RAM[i]=0;
 80041e0:	4b29      	ldr	r3, [pc, #164]	; (8004288 <main+0x5e4>)
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	461a      	mov	r2, r3
 80041e6:	4b30      	ldr	r3, [pc, #192]	; (80042a8 <main+0x604>)
 80041e8:	2100      	movs	r1, #0
 80041ea:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
for (i=0;i<16384;i++) {     // change for 32khz   1-256 bpm
 80041ee:	4b26      	ldr	r3, [pc, #152]	; (8004288 <main+0x5e4>)
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	3301      	adds	r3, #1
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	4b24      	ldr	r3, [pc, #144]	; (8004288 <main+0x5e4>)
 80041f8:	801a      	strh	r2, [r3, #0]
 80041fa:	4b23      	ldr	r3, [pc, #140]	; (8004288 <main+0x5e4>)
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004202:	d3ed      	bcc.n	80041e0 <main+0x53c>
}
for (i=0;i<1024;i++) {     // change for 32khz   1-256 bpm
 8004204:	4b20      	ldr	r3, [pc, #128]	; (8004288 <main+0x5e4>)
 8004206:	2200      	movs	r2, #0
 8004208:	801a      	strh	r2, [r3, #0]
 800420a:	e005      	b.n	8004218 <main+0x574>
 800420c:	4b1e      	ldr	r3, [pc, #120]	; (8004288 <main+0x5e4>)
 800420e:	881b      	ldrh	r3, [r3, #0]
 8004210:	3301      	adds	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	4b1c      	ldr	r3, [pc, #112]	; (8004288 <main+0x5e4>)
 8004216:	801a      	strh	r2, [r3, #0]
 8004218:	4b1b      	ldr	r3, [pc, #108]	; (8004288 <main+0x5e4>)
 800421a:	881b      	ldrh	r3, [r3, #0]
 800421c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004220:	d3f4      	bcc.n	800420c <main+0x568>

}



	for (pars_counter=0;pars_counter<512;pars_counter++)	  default_menu3[pars_counter>>1]=64;
 8004222:	2300      	movs	r3, #0
 8004224:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8004228:	e00c      	b.n	8004244 <main+0x5a0>
 800422a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800422e:	085b      	lsrs	r3, r3, #1
 8004230:	b29b      	uxth	r3, r3
 8004232:	461a      	mov	r2, r3
 8004234:	4b1d      	ldr	r3, [pc, #116]	; (80042ac <main+0x608>)
 8004236:	2140      	movs	r1, #64	; 0x40
 8004238:	5499      	strb	r1, [r3, r2]
 800423a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800423e:	3301      	adds	r3, #1
 8004240:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8004244:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8004248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800424c:	d3ed      	bcc.n	800422a <main+0x586>

	default_menu3_size = strlen(default_menu3);  // grab menu size , this is needed
 800424e:	4817      	ldr	r0, [pc, #92]	; (80042ac <main+0x608>)
 8004250:	f7fb ffc2 	bl	80001d8 <strlen>
 8004254:	4603      	mov	r3, r0
 8004256:	b29a      	uxth	r2, r3
 8004258:	4b15      	ldr	r3, [pc, #84]	; (80042b0 <main+0x60c>)
 800425a:	801a      	strh	r2, [r3, #0]
		menu_title_count--;  //count back one
 800425c:	4b15      	ldr	r3, [pc, #84]	; (80042b4 <main+0x610>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	3b01      	subs	r3, #1
 8004262:	b2da      	uxtb	r2, r3
 8004264:	4b13      	ldr	r3, [pc, #76]	; (80042b4 <main+0x610>)
 8004266:	701a      	strb	r2, [r3, #0]
		display_clear ();
 8004268:	f7fd fbb4 	bl	80019d4 <display_clear>
		for (pars_counter=0;pars_counter<menu_title_count;pars_counter++)	default_menu3 [menu_title_lut[pars_counter]&1023]=48;
 800426c:	2300      	movs	r3, #0
 800426e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8004272:	e030      	b.n	80042d6 <main+0x632>
 8004274:	20004434 	.word	0x20004434
 8004278:	20000624 	.word	0x20000624
 800427c:	20004718 	.word	0x20004718
 8004280:	200051d4 	.word	0x200051d4
 8004284:	200046dc 	.word	0x200046dc
 8004288:	20000892 	.word	0x20000892
 800428c:	2000088c 	.word	0x2000088c
 8004290:	20003b84 	.word	0x20003b84
 8004294:	200051a4 	.word	0x200051a4
 8004298:	001d4c00 	.word	0x001d4c00
 800429c:	20003780 	.word	0x20003780
 80042a0:	20000420 	.word	0x20000420
 80042a4:	20000000 	.word	0x20000000
 80042a8:	20007bb4 	.word	0x20007bb4
 80042ac:	2000fbb4 	.word	0x2000fbb4
 80042b0:	2000597a 	.word	0x2000597a
 80042b4:	20005369 	.word	0x20005369
 80042b8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80042bc:	4aaf      	ldr	r2, [pc, #700]	; (800457c <main+0x8d8>)
 80042be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042c6:	4aae      	ldr	r2, [pc, #696]	; (8004580 <main+0x8dc>)
 80042c8:	2130      	movs	r1, #48	; 0x30
 80042ca:	54d1      	strb	r1, [r2, r3]
 80042cc:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80042d0:	3301      	adds	r3, #1
 80042d2:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80042d6:	4bab      	ldr	r3, [pc, #684]	; (8004584 <main+0x8e0>)
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	b29b      	uxth	r3, r3
 80042dc:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d3e9      	bcc.n	80042b8 <main+0x614>





	menuSelect=0;
 80042e4:	4ba8      	ldr	r3, [pc, #672]	; (8004588 <main+0x8e4>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	701a      	strb	r2, [r3, #0]
// fill up sample
firstbarLoop=0;
 80042ea:	4ba8      	ldr	r3, [pc, #672]	; (800458c <main+0x8e8>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	701a      	strb	r2, [r3, #0]
  while (1)																																																		//   while loop , random 20+ms freeze around 0.5 sec
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_counter++ ;
 80042f0:	4ba7      	ldr	r3, [pc, #668]	; (8004590 <main+0x8ec>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	3301      	adds	r3, #1
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	4ba5      	ldr	r3, [pc, #660]	; (8004590 <main+0x8ec>)
 80042fa:	701a      	strb	r2, [r3, #0]
	  loop_counter2++;// this pretty slow now thanks to gfx , no skips though
 80042fc:	4ba5      	ldr	r3, [pc, #660]	; (8004594 <main+0x8f0>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3301      	adds	r3, #1
 8004302:	4aa4      	ldr	r2, [pc, #656]	; (8004594 <main+0x8f0>)
 8004304:	6013      	str	r3, [r2, #0]

	  // if (menu_page<320) lcd_feedback();  //curious no issues with lcd without this  , maybe spell writing

	  if 	((loop_counter2&7)==6)      {analoginputloopb();} // this is ok , plenty quick , no freeze here
 8004306:	4ba3      	ldr	r3, [pc, #652]	; (8004594 <main+0x8f0>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	2b06      	cmp	r3, #6
 8004310:	d101      	bne.n	8004316 <main+0x672>
 8004312:	f7fd f9ab 	bl	800166c <analoginputloopb>


if (loop_counter2==4024) {    //   4096=1min=32bytes so 4mins per 128 bank or 15 writes/hour , no freeze here
 8004316:	4b9f      	ldr	r3, [pc, #636]	; (8004594 <main+0x8f0>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f640 72b8 	movw	r2, #4024	; 0xfb8
 800431e:	4293      	cmp	r3, r2
 8004320:	f040 80df 	bne.w	80044e2 <main+0x83e>
	  if (mem_count>512) mem_count=0; else mem_count++; // write to first this was moved for no logical reason ?
 8004324:	4b9c      	ldr	r3, [pc, #624]	; (8004598 <main+0x8f4>)
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800432c:	d903      	bls.n	8004336 <main+0x692>
 800432e:	4b9a      	ldr	r3, [pc, #616]	; (8004598 <main+0x8f4>)
 8004330:	2200      	movs	r2, #0
 8004332:	801a      	strh	r2, [r3, #0]
 8004334:	e005      	b.n	8004342 <main+0x69e>
 8004336:	4b98      	ldr	r3, [pc, #608]	; (8004598 <main+0x8f4>)
 8004338:	881b      	ldrh	r3, [r3, #0]
 800433a:	3301      	adds	r3, #1
 800433c:	b29a      	uxth	r2, r3
 800433e:	4b96      	ldr	r3, [pc, #600]	; (8004598 <main+0x8f4>)
 8004340:	801a      	strh	r2, [r3, #0]
	  patch_target_parse(); //
 8004342:	f7fc ff3f 	bl	80011c4 <patch_target_parse>
	  uint16_t mem_count2=0;	// read values from stored
 8004346:	2300      	movs	r3, #0
 8004348:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a


	memcpy(potSource,&seq,46); // about 35
 800434c:	4a93      	ldr	r2, [pc, #588]	; (800459c <main+0x8f8>)
 800434e:	4b94      	ldr	r3, [pc, #592]	; (80045a0 <main+0x8fc>)
 8004350:	4614      	mov	r4, r2
 8004352:	461d      	mov	r5, r3
 8004354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800435a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800435c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004360:	c407      	stmia	r4!, {r0, r1, r2}
 8004362:	8023      	strh	r3, [r4, #0]

	for(i=0;i<10;i++){
 8004364:	4b8f      	ldr	r3, [pc, #572]	; (80045a4 <main+0x900>)
 8004366:	2200      	movs	r2, #0
 8004368:	801a      	strh	r2, [r3, #0]
 800436a:	e079      	b.n	8004460 <main+0x7bc>
		    memcpy(potSource+156+(i*14),&note[i],14 );  //grab note settings ,112 total , works
 800436c:	4b8d      	ldr	r3, [pc, #564]	; (80045a4 <main+0x900>)
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	461a      	mov	r2, r3
 8004372:	4613      	mov	r3, r2
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	1a9b      	subs	r3, r3, r2
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	339c      	adds	r3, #156	; 0x9c
 800437c:	4a87      	ldr	r2, [pc, #540]	; (800459c <main+0x8f8>)
 800437e:	1898      	adds	r0, r3, r2
 8004380:	4b88      	ldr	r3, [pc, #544]	; (80045a4 <main+0x900>)
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	461a      	mov	r2, r3
 8004386:	4613      	mov	r3, r2
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	1a9b      	subs	r3, r3, r2
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	4a86      	ldr	r2, [pc, #536]	; (80045a8 <main+0x904>)
 8004390:	4413      	add	r3, r2
 8004392:	220e      	movs	r2, #14
 8004394:	4619      	mov	r1, r3
 8004396:	f007 f8a3 	bl	800b4e0 <memcpy>

		memcpy(potSource+46+(i*6),&LFO[i],6 );  // + 60  ,ok
 800439a:	4b82      	ldr	r3, [pc, #520]	; (80045a4 <main+0x900>)
 800439c:	881b      	ldrh	r3, [r3, #0]
 800439e:	461a      	mov	r2, r3
 80043a0:	4613      	mov	r3, r2
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	4413      	add	r3, r2
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	332e      	adds	r3, #46	; 0x2e
 80043aa:	4a7c      	ldr	r2, [pc, #496]	; (800459c <main+0x8f8>)
 80043ac:	1898      	adds	r0, r3, r2
 80043ae:	4b7d      	ldr	r3, [pc, #500]	; (80045a4 <main+0x900>)
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	461a      	mov	r2, r3
 80043b4:	4613      	mov	r3, r2
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	4413      	add	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4a7b      	ldr	r2, [pc, #492]	; (80045ac <main+0x908>)
 80043be:	4413      	add	r3, r2
 80043c0:	2206      	movs	r2, #6
 80043c2:	4619      	mov	r1, r3
 80043c4:	f007 f88c 	bl	800b4e0 <memcpy>
		memcpy(potSource+106+(i*5),&ADSR[i],5 );  // +50  ,
 80043c8:	4b76      	ldr	r3, [pc, #472]	; (80045a4 <main+0x900>)
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	461a      	mov	r2, r3
 80043ce:	4613      	mov	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	336a      	adds	r3, #106	; 0x6a
 80043d6:	4a71      	ldr	r2, [pc, #452]	; (800459c <main+0x8f8>)
 80043d8:	1898      	adds	r0, r3, r2
 80043da:	4b72      	ldr	r3, [pc, #456]	; (80045a4 <main+0x900>)
 80043dc:	881b      	ldrh	r3, [r3, #0]
 80043de:	461a      	mov	r2, r3
 80043e0:	f44f 7307 	mov.w	r3, #540	; 0x21c
 80043e4:	fb02 f303 	mul.w	r3, r2, r3
 80043e8:	4a71      	ldr	r2, [pc, #452]	; (80045b0 <main+0x90c>)
 80043ea:	4413      	add	r3, r2
 80043ec:	2205      	movs	r2, #5
 80043ee:	4619      	mov	r1, r3
 80043f0:	f007 f876 	bl	800b4e0 <memcpy>
		memcpy(potSource+316+(i*6),&patch[i],6 );
 80043f4:	4b6b      	ldr	r3, [pc, #428]	; (80045a4 <main+0x900>)
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	4613      	mov	r3, r2
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	4413      	add	r3, r2
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004406:	4a65      	ldr	r2, [pc, #404]	; (800459c <main+0x8f8>)
 8004408:	1898      	adds	r0, r3, r2
 800440a:	4b66      	ldr	r3, [pc, #408]	; (80045a4 <main+0x900>)
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	461a      	mov	r2, r3
 8004410:	4613      	mov	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	4a66      	ldr	r2, [pc, #408]	; (80045b4 <main+0x910>)
 800441a:	4413      	add	r3, r2
 800441c:	2206      	movs	r2, #6
 800441e:	4619      	mov	r1, r3
 8004420:	f007 f85e 	bl	800b4e0 <memcpy>
		memcpy(potSource+376+(i*6),&LFO_slave1[i],6 ); // ext llof settings
 8004424:	4b5f      	ldr	r3, [pc, #380]	; (80045a4 <main+0x900>)
 8004426:	881b      	ldrh	r3, [r3, #0]
 8004428:	461a      	mov	r2, r3
 800442a:	4613      	mov	r3, r2
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	4413      	add	r3, r2
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004436:	4a59      	ldr	r2, [pc, #356]	; (800459c <main+0x8f8>)
 8004438:	1898      	adds	r0, r3, r2
 800443a:	4b5a      	ldr	r3, [pc, #360]	; (80045a4 <main+0x900>)
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	461a      	mov	r2, r3
 8004440:	4613      	mov	r3, r2
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	4413      	add	r3, r2
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	4a5b      	ldr	r2, [pc, #364]	; (80045b8 <main+0x914>)
 800444a:	4413      	add	r3, r2
 800444c:	2206      	movs	r2, #6
 800444e:	4619      	mov	r1, r3
 8004450:	f007 f846 	bl	800b4e0 <memcpy>
	for(i=0;i<10;i++){
 8004454:	4b53      	ldr	r3, [pc, #332]	; (80045a4 <main+0x900>)
 8004456:	881b      	ldrh	r3, [r3, #0]
 8004458:	3301      	adds	r3, #1
 800445a:	b29a      	uxth	r2, r3
 800445c:	4b51      	ldr	r3, [pc, #324]	; (80045a4 <main+0x900>)
 800445e:	801a      	strh	r2, [r3, #0]
 8004460:	4b50      	ldr	r3, [pc, #320]	; (80045a4 <main+0x900>)
 8004462:	881b      	ldrh	r3, [r3, #0]
 8004464:	2b09      	cmp	r3, #9
 8004466:	d981      	bls.n	800436c <main+0x6c8>

	}	// copy vars into potSource

	//HAL_UART_Transmit(&huart1,serial_send,4, 100);  //send serial again

	mem_count2=0;
 8004468:	2300      	movs	r3, #0
 800446a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

			// for patch write start at 2048 for now



				 mem_buf=potSource[mem_count];
 800446e:	4b4a      	ldr	r3, [pc, #296]	; (8004598 <main+0x8f4>)
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	461a      	mov	r2, r3
 8004474:	4b49      	ldr	r3, [pc, #292]	; (800459c <main+0x8f8>)
 8004476:	5c9a      	ldrb	r2, [r3, r2]
 8004478:	4b50      	ldr	r3, [pc, #320]	; (80045bc <main+0x918>)
 800447a:	701a      	strb	r2, [r3, #0]
			//	 if (mem_buf>159) mem_buf=159;
				 mem_count2=((1+(mem_count>>6))<<6)+(mem_count&63);
 800447c:	4b46      	ldr	r3, [pc, #280]	; (8004598 <main+0x8f4>)
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	099b      	lsrs	r3, r3, #6
 8004482:	b29b      	uxth	r3, r3
 8004484:	3301      	adds	r3, #1
 8004486:	b29b      	uxth	r3, r3
 8004488:	019b      	lsls	r3, r3, #6
 800448a:	b29a      	uxth	r2, r3
 800448c:	4b42      	ldr	r3, [pc, #264]	; (8004598 <main+0x8f4>)
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004494:	b29b      	uxth	r3, r3
 8004496:	4413      	add	r3, r2
 8004498:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
				 //mem_count2=mem_count2+2048;   // Relocate mem for patch

				 HAL_I2C_Mem_Read(&hi2c2, 160,mem_count2, 2,&mem_verify, 1,100);
 800449c:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 80044a0:	2364      	movs	r3, #100	; 0x64
 80044a2:	9302      	str	r3, [sp, #8]
 80044a4:	2301      	movs	r3, #1
 80044a6:	9301      	str	r3, [sp, #4]
 80044a8:	4b45      	ldr	r3, [pc, #276]	; (80045c0 <main+0x91c>)
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	2302      	movs	r3, #2
 80044ae:	21a0      	movs	r1, #160	; 0xa0
 80044b0:	4844      	ldr	r0, [pc, #272]	; (80045c4 <main+0x920>)
 80044b2:	f003 fb93 	bl	8007bdc <HAL_I2C_Mem_Read>
				 if (mem_verify!=mem_buf) HAL_I2C_Mem_Write(&hi2c2, 160,mem_count2 , 2, &mem_buf, 1, 100);
 80044b6:	4b42      	ldr	r3, [pc, #264]	; (80045c0 <main+0x91c>)
 80044b8:	781a      	ldrb	r2, [r3, #0]
 80044ba:	4b40      	ldr	r3, [pc, #256]	; (80045bc <main+0x918>)
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d00c      	beq.n	80044dc <main+0x838>
 80044c2:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 80044c6:	2364      	movs	r3, #100	; 0x64
 80044c8:	9302      	str	r3, [sp, #8]
 80044ca:	2301      	movs	r3, #1
 80044cc:	9301      	str	r3, [sp, #4]
 80044ce:	4b3b      	ldr	r3, [pc, #236]	; (80045bc <main+0x918>)
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	2302      	movs	r3, #2
 80044d4:	21a0      	movs	r1, #160	; 0xa0
 80044d6:	483b      	ldr	r0, [pc, #236]	; (80045c4 <main+0x920>)
 80044d8:	f003 fa86 	bl	80079e8 <HAL_I2C_Mem_Write>



//if (mem_buf!=mem_verify)	 mem_errors++;  // check writes

loop_counter2=0; //reset
 80044dc:	4b2d      	ldr	r3, [pc, #180]	; (8004594 <main+0x8f0>)
 80044de:	2200      	movs	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]

}


	if (serial_tosend){    // send on seq change
 80044e2:	4b39      	ldr	r3, [pc, #228]	; (80045c8 <main+0x924>)
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 80bf 	beq.w	800466a <main+0x9c6>

		  memcpy(serial_source,&seq,36); // copy bits
 80044ec:	2224      	movs	r2, #36	; 0x24
 80044ee:	492c      	ldr	r1, [pc, #176]	; (80045a0 <main+0x8fc>)
 80044f0:	4836      	ldr	r0, [pc, #216]	; (80045cc <main+0x928>)
 80044f2:	f006 fff5 	bl	800b4e0 <memcpy>

		  memcpy(serial_source+96,potSource+252,64 );  // 4 * 16
 80044f6:	4b36      	ldr	r3, [pc, #216]	; (80045d0 <main+0x92c>)
 80044f8:	4936      	ldr	r1, [pc, #216]	; (80045d4 <main+0x930>)
 80044fa:	2240      	movs	r2, #64	; 0x40
 80044fc:	4618      	mov	r0, r3
 80044fe:	f006 ffef 	bl	800b4e0 <memcpy>
		  for(mem_counter=0;mem_counter<10;mem_counter++){
 8004502:	2300      	movs	r3, #0
 8004504:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8004508:	e032      	b.n	8004570 <main+0x8cc>
			  if (mem_counter<4)memcpy(serial_source+96+(mem_counter*7),&note[mem_counter+6],7 );
 800450a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800450e:	2b03      	cmp	r3, #3
 8004510:	d814      	bhi.n	800453c <main+0x898>
 8004512:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8004516:	4613      	mov	r3, r2
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	1a9b      	subs	r3, r3, r2
 800451c:	3360      	adds	r3, #96	; 0x60
 800451e:	4a2b      	ldr	r2, [pc, #172]	; (80045cc <main+0x928>)
 8004520:	1898      	adds	r0, r3, r2
 8004522:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8004526:	1d9a      	adds	r2, r3, #6
 8004528:	4613      	mov	r3, r2
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	1a9b      	subs	r3, r3, r2
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	4a1d      	ldr	r2, [pc, #116]	; (80045a8 <main+0x904>)
 8004532:	4413      	add	r3, r2
 8004534:	2207      	movs	r2, #7
 8004536:	4619      	mov	r1, r3
 8004538:	f006 ffd2 	bl	800b4e0 <memcpy>
						memcpy(serial_source+36+(mem_counter*6),&LFO_slave1[mem_counter],6 );  // insert lfo settings
 800453c:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8004540:	4613      	mov	r3, r2
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	4413      	add	r3, r2
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	3324      	adds	r3, #36	; 0x24
 800454a:	4a20      	ldr	r2, [pc, #128]	; (80045cc <main+0x928>)
 800454c:	1898      	adds	r0, r3, r2
 800454e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8004552:	4613      	mov	r3, r2
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	4413      	add	r3, r2
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	4a17      	ldr	r2, [pc, #92]	; (80045b8 <main+0x914>)
 800455c:	4413      	add	r3, r2
 800455e:	2206      	movs	r2, #6
 8004560:	4619      	mov	r1, r3
 8004562:	f006 ffbd 	bl	800b4e0 <memcpy>
		  for(mem_counter=0;mem_counter<10;mem_counter++){
 8004566:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800456a:	3301      	adds	r3, #1
 800456c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8004570:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8004574:	2b09      	cmp	r3, #9
 8004576:	d9c8      	bls.n	800450a <main+0x866>
				  }

	while ((serial_source_temp[serial_up]==serial_source[serial_up]) &&(serial_up<161) )   {
 8004578:	e034      	b.n	80045e4 <main+0x940>
 800457a:	bf00      	nop
 800457c:	2000536c 	.word	0x2000536c
 8004580:	2000fbb4 	.word	0x2000fbb4
 8004584:	20005369 	.word	0x20005369
 8004588:	20000884 	.word	0x20000884
 800458c:	20000886 	.word	0x20000886
 8004590:	2000088e 	.word	0x2000088e
 8004594:	200034e4 	.word	0x200034e4
 8004598:	200034e2 	.word	0x200034e2
 800459c:	20000624 	.word	0x20000624
 80045a0:	200051a4 	.word	0x200051a4
 80045a4:	20000892 	.word	0x20000892
 80045a8:	20000158 	.word	0x20000158
 80045ac:	20004434 	.word	0x20004434
 80045b0:	20004718 	.word	0x20004718
 80045b4:	200051d4 	.word	0x200051d4
 80045b8:	200046dc 	.word	0x200046dc
 80045bc:	200034e8 	.word	0x200034e8
 80045c0:	20005987 	.word	0x20005987
 80045c4:	2001005c 	.word	0x2001005c
 80045c8:	20007bb1 	.word	0x20007bb1
 80045cc:	200079b0 	.word	0x200079b0
 80045d0:	20007a10 	.word	0x20007a10
 80045d4:	20000720 	.word	0x20000720
		serial_up++;
 80045d8:	4b82      	ldr	r3, [pc, #520]	; (80047e4 <main+0xb40>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	3301      	adds	r3, #1
 80045de:	b2da      	uxtb	r2, r3
 80045e0:	4b80      	ldr	r3, [pc, #512]	; (80047e4 <main+0xb40>)
 80045e2:	701a      	strb	r2, [r3, #0]
	while ((serial_source_temp[serial_up]==serial_source[serial_up]) &&(serial_up<161) )   {
 80045e4:	4b7f      	ldr	r3, [pc, #508]	; (80047e4 <main+0xb40>)
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	461a      	mov	r2, r3
 80045ea:	4b7f      	ldr	r3, [pc, #508]	; (80047e8 <main+0xb44>)
 80045ec:	5c9a      	ldrb	r2, [r3, r2]
 80045ee:	4b7d      	ldr	r3, [pc, #500]	; (80047e4 <main+0xb40>)
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	4619      	mov	r1, r3
 80045f4:	4b7d      	ldr	r3, [pc, #500]	; (80047ec <main+0xb48>)
 80045f6:	5c5b      	ldrb	r3, [r3, r1]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d103      	bne.n	8004604 <main+0x960>
 80045fc:	4b79      	ldr	r3, [pc, #484]	; (80047e4 <main+0xb40>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2ba0      	cmp	r3, #160	; 0xa0
 8004602:	d9e9      	bls.n	80045d8 <main+0x934>
	}

		  serial_send[6]=0;
 8004604:	4b7a      	ldr	r3, [pc, #488]	; (80047f0 <main+0xb4c>)
 8004606:	2200      	movs	r2, #0
 8004608:	719a      	strb	r2, [r3, #6]
		  serial_send[7]=seq.pos;  // chase
 800460a:	4b7a      	ldr	r3, [pc, #488]	; (80047f4 <main+0xb50>)
 800460c:	781a      	ldrb	r2, [r3, #0]
 800460e:	4b78      	ldr	r3, [pc, #480]	; (80047f0 <main+0xb4c>)
 8004610:	71da      	strb	r2, [r3, #7]
		  serial_send[2]=serial_up;
 8004612:	4b74      	ldr	r3, [pc, #464]	; (80047e4 <main+0xb40>)
 8004614:	781a      	ldrb	r2, [r3, #0]
 8004616:	4b76      	ldr	r3, [pc, #472]	; (80047f0 <main+0xb4c>)
 8004618:	709a      	strb	r2, [r3, #2]
			  serial_send[3]=serial_source[serial_up];
 800461a:	4b72      	ldr	r3, [pc, #456]	; (80047e4 <main+0xb40>)
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	461a      	mov	r2, r3
 8004620:	4b72      	ldr	r3, [pc, #456]	; (80047ec <main+0xb48>)
 8004622:	5c9a      	ldrb	r2, [r3, r2]
 8004624:	4b72      	ldr	r3, [pc, #456]	; (80047f0 <main+0xb4c>)
 8004626:	70da      	strb	r2, [r3, #3]
			 serial_source_temp[serial_up]=serial_source[serial_up];
 8004628:	4b6e      	ldr	r3, [pc, #440]	; (80047e4 <main+0xb40>)
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	4619      	mov	r1, r3
 800462e:	4b6d      	ldr	r3, [pc, #436]	; (80047e4 <main+0xb40>)
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	461a      	mov	r2, r3
 8004634:	4b6d      	ldr	r3, [pc, #436]	; (80047ec <main+0xb48>)
 8004636:	5c59      	ldrb	r1, [r3, r1]
 8004638:	4b6b      	ldr	r3, [pc, #428]	; (80047e8 <main+0xb44>)
 800463a:	5499      	strb	r1, [r3, r2]
			if (serial_up>161) serial_up=0; else serial_up++;
 800463c:	4b69      	ldr	r3, [pc, #420]	; (80047e4 <main+0xb40>)
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	2ba1      	cmp	r3, #161	; 0xa1
 8004642:	d903      	bls.n	800464c <main+0x9a8>
 8004644:	4b67      	ldr	r3, [pc, #412]	; (80047e4 <main+0xb40>)
 8004646:	2200      	movs	r2, #0
 8004648:	701a      	strb	r2, [r3, #0]
 800464a:	e005      	b.n	8004658 <main+0x9b4>
 800464c:	4b65      	ldr	r3, [pc, #404]	; (80047e4 <main+0xb40>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	3301      	adds	r3, #1
 8004652:	b2da      	uxtb	r2, r3
 8004654:	4b63      	ldr	r3, [pc, #396]	; (80047e4 <main+0xb40>)
 8004656:	701a      	strb	r2, [r3, #0]

			HAL_UART_Transmit(&huart1,serial_send,8, 100);  //send serial
 8004658:	2364      	movs	r3, #100	; 0x64
 800465a:	2208      	movs	r2, #8
 800465c:	4964      	ldr	r1, [pc, #400]	; (80047f0 <main+0xb4c>)
 800465e:	4866      	ldr	r0, [pc, #408]	; (80047f8 <main+0xb54>)
 8004660:	f006 fb57 	bl	800ad12 <HAL_UART_Transmit>
		serial_tosend=0;
 8004664:	4b65      	ldr	r3, [pc, #404]	; (80047fc <main+0xb58>)
 8004666:	2200      	movs	r2, #0
 8004668:	701a      	strb	r2, [r3, #0]





if (disp_end==1)	  display_generate();      // run this after gfx draw page finish
 800466a:	4b65      	ldr	r3, [pc, #404]	; (8004800 <main+0xb5c>)
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d101      	bne.n	8004676 <main+0x9d2>
 8004672:	f7fd f9cf 	bl	8001a14 <display_generate>




	  if (init<6)				// after 6 its done for good   // no freeze here
 8004676:	4b63      	ldr	r3, [pc, #396]	; (8004804 <main+0xb60>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2b05      	cmp	r3, #5
 800467c:	d80f      	bhi.n	800469e <main+0x9fa>
{
	  for (i=0;i<6;i++) {display_init();}  //1-2ms ?  change length if flickering ,maybe initial data
 800467e:	4b62      	ldr	r3, [pc, #392]	; (8004808 <main+0xb64>)
 8004680:	2200      	movs	r2, #0
 8004682:	801a      	strh	r2, [r3, #0]
 8004684:	e007      	b.n	8004696 <main+0x9f2>
 8004686:	f7fd f8b5 	bl	80017f4 <display_init>
 800468a:	4b5f      	ldr	r3, [pc, #380]	; (8004808 <main+0xb64>)
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	3301      	adds	r3, #1
 8004690:	b29a      	uxth	r2, r3
 8004692:	4b5d      	ldr	r3, [pc, #372]	; (8004808 <main+0xb64>)
 8004694:	801a      	strh	r2, [r3, #0]
 8004696:	4b5c      	ldr	r3, [pc, #368]	; (8004808 <main+0xb64>)
 8004698:	881b      	ldrh	r3, [r3, #0]
 800469a:	2b05      	cmp	r3, #5
 800469c:	d9f3      	bls.n	8004686 <main+0x9e2>
}

	  if (init > 5) {    //  around 3 cycles per single transmit  , plenty quick as is , spi lcd can really slow things down
 800469e:	4b59      	ldr	r3, [pc, #356]	; (8004804 <main+0xb60>)
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	2b05      	cmp	r3, #5
 80046a4:	d92a      	bls.n	80046fc <main+0xa58>


		  if (gfx_send_swap==2) gfx_send_lines++;		// this is ok for now
 80046a6:	4b59      	ldr	r3, [pc, #356]	; (800480c <main+0xb68>)
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d105      	bne.n	80046ba <main+0xa16>
 80046ae:	4b58      	ldr	r3, [pc, #352]	; (8004810 <main+0xb6c>)
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	3301      	adds	r3, #1
 80046b4:	b2da      	uxtb	r2, r3
 80046b6:	4b56      	ldr	r3, [pc, #344]	; (8004810 <main+0xb6c>)
 80046b8:	701a      	strb	r2, [r3, #0]
		  if (gfx_send_swap==1)  { gfx_send_counter=gfx_send_cursor*144; gfx_send_swap=2; } // jump to cursor pixel line
 80046ba:	4b54      	ldr	r3, [pc, #336]	; (800480c <main+0xb68>)
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d10c      	bne.n	80046dc <main+0xa38>
 80046c2:	4b54      	ldr	r3, [pc, #336]	; (8004814 <main+0xb70>)
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	461a      	mov	r2, r3
 80046ca:	00d2      	lsls	r2, r2, #3
 80046cc:	4413      	add	r3, r2
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	4b51      	ldr	r3, [pc, #324]	; (8004818 <main+0xb74>)
 80046d4:	801a      	strh	r2, [r3, #0]
 80046d6:	4b4d      	ldr	r3, [pc, #308]	; (800480c <main+0xb68>)
 80046d8:	2202      	movs	r2, #2
 80046da:	701a      	strb	r2, [r3, #0]
	      if (gfx_send_lines==144)   { gfx_send_lines=0; gfx_send_counter=1008; gfx_send_swap=0;}  // skip to last char line
 80046dc:	4b4c      	ldr	r3, [pc, #304]	; (8004810 <main+0xb6c>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	2b90      	cmp	r3, #144	; 0x90
 80046e2:	d109      	bne.n	80046f8 <main+0xa54>
 80046e4:	4b4a      	ldr	r3, [pc, #296]	; (8004810 <main+0xb6c>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	701a      	strb	r2, [r3, #0]
 80046ea:	4b4b      	ldr	r3, [pc, #300]	; (8004818 <main+0xb74>)
 80046ec:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80046f0:	801a      	strh	r2, [r3, #0]
 80046f2:	4b46      	ldr	r3, [pc, #280]	; (800480c <main+0xb68>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	701a      	strb	r2, [r3, #0]
				gfx_send();    // don't loop this without using dma  , just makes things really slow
 80046f8:	f7fd f8d2 	bl	80018a0 <gfx_send>

	}


	  if (loop_counter2==2024){ // grab adc readings + 3ms , 32 step  // no freeze
 80046fc:	4b47      	ldr	r3, [pc, #284]	; (800481c <main+0xb78>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f5b3 6ffd 	cmp.w	r3, #2024	; 0x7e8
 8004704:	d13d      	bne.n	8004782 <main+0xade>



		  //HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go

		  HAL_ADCEx_InjectedStart(&hadc1) ;  // start injected mode normal conversion
 8004706:	4846      	ldr	r0, [pc, #280]	; (8004820 <main+0xb7c>)
 8004708:	f001 fe9a 	bl	8006440 <HAL_ADCEx_InjectedStart>
		  uint16_t adc_temp1[4]={0,0,0,0};
 800470c:	1d3b      	adds	r3, r7, #4
 800470e:	2200      	movs	r2, #0
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	605a      	str	r2, [r3, #4]

		  HAL_ADC_PollForConversion(&hadc1,1);  // works but  slow ,blocking very slow, set quick time out
 8004714:	2101      	movs	r1, #1
 8004716:	4842      	ldr	r0, [pc, #264]	; (8004820 <main+0xb7c>)
 8004718:	f001 fa02 	bl	8005b20 <HAL_ADC_PollForConversion>

		  adc_temp1[0]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 800471c:	2101      	movs	r1, #1
 800471e:	4840      	ldr	r0, [pc, #256]	; (8004820 <main+0xb7c>)
 8004720:	f001 ffa4 	bl	800666c <HAL_ADCEx_InjectedGetValue>
 8004724:	4603      	mov	r3, r0
 8004726:	b29b      	uxth	r3, r3
 8004728:	80bb      	strh	r3, [r7, #4]
		  adc_temp1[1] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 800472a:	2102      	movs	r1, #2
 800472c:	483c      	ldr	r0, [pc, #240]	; (8004820 <main+0xb7c>)
 800472e:	f001 ff9d 	bl	800666c <HAL_ADCEx_InjectedGetValue>
 8004732:	4603      	mov	r3, r0
 8004734:	b29b      	uxth	r3, r3
 8004736:	80fb      	strh	r3, [r7, #6]
		  adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8004738:	2103      	movs	r1, #3
 800473a:	4839      	ldr	r0, [pc, #228]	; (8004820 <main+0xb7c>)
 800473c:	f001 ff96 	bl	800666c <HAL_ADCEx_InjectedGetValue>
 8004740:	4603      	mov	r3, r0
 8004742:	b29b      	uxth	r3, r3
 8004744:	813b      	strh	r3, [r7, #8]
		  HAL_ADCEx_InjectedStop(&hadc1) ;
 8004746:	4836      	ldr	r0, [pc, #216]	; (8004820 <main+0xb7c>)
 8004748:	f001 ff44 	bl	80065d4 <HAL_ADCEx_InjectedStop>
		  //  adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
		  adc_values[0]=	31- ( adc_temp1[0]>>7);
 800474c:	88bb      	ldrh	r3, [r7, #4]
 800474e:	09db      	lsrs	r3, r3, #7
 8004750:	b29b      	uxth	r3, r3
 8004752:	f1c3 031f 	rsb	r3, r3, #31
 8004756:	b29a      	uxth	r2, r3
 8004758:	4b32      	ldr	r3, [pc, #200]	; (8004824 <main+0xb80>)
 800475a:	801a      	strh	r2, [r3, #0]
		  adc_values[1]=	 31-( adc_temp1[1]>>7);
 800475c:	88fb      	ldrh	r3, [r7, #6]
 800475e:	09db      	lsrs	r3, r3, #7
 8004760:	b29b      	uxth	r3, r3
 8004762:	f1c3 031f 	rsb	r3, r3, #31
 8004766:	b29a      	uxth	r2, r3
 8004768:	4b2e      	ldr	r3, [pc, #184]	; (8004824 <main+0xb80>)
 800476a:	805a      	strh	r2, [r3, #2]
		  adc_values[2]=	 31-( adc_temp1[2]>>7);
 800476c:	893b      	ldrh	r3, [r7, #8]
 800476e:	09db      	lsrs	r3, r3, #7
 8004770:	b29b      	uxth	r3, r3
 8004772:	f1c3 031f 	rsb	r3, r3, #31
 8004776:	b29a      	uxth	r2, r3
 8004778:	4b2a      	ldr	r3, [pc, #168]	; (8004824 <main+0xb80>)
 800477a:	809a      	strh	r2, [r3, #4]


		  //HAL_ADC_Start_DMA(&hadc1, adc_source, 512);


	  	loop_counter=0;
 800477c:	4b2a      	ldr	r3, [pc, #168]	; (8004828 <main+0xb84>)
 800477e:	2200      	movs	r2, #0
 8004780:	701a      	strb	r2, [r3, #0]
	  }

	  if ((seq.pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 8004782:	4b1c      	ldr	r3, [pc, #112]	; (80047f4 <main+0xb50>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	2b07      	cmp	r3, #7
 8004788:	d106      	bne.n	8004798 <main+0xaf4>
 800478a:	4b28      	ldr	r3, [pc, #160]	; (800482c <main+0xb88>)
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d102      	bne.n	8004798 <main+0xaf4>
 8004792:	4b26      	ldr	r3, [pc, #152]	; (800482c <main+0xb88>)
 8004794:	2201      	movs	r2, #1
 8004796:	801a      	strh	r2, [r3, #0]


	  	     HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,(seq.pos & 1)); // easy skip ?
 8004798:	4b16      	ldr	r3, [pc, #88]	; (80047f4 <main+0xb50>)
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	461a      	mov	r2, r3
 80047a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80047a8:	4821      	ldr	r0, [pc, #132]	; (8004830 <main+0xb8c>)
 80047aa:	f002 ffa7 	bl	80076fc <HAL_GPIO_WritePin>


	  	//	adc_flag=0;
	  		if (adc_flag) {     //  only for sending out  , poor quality
 80047ae:	4b21      	ldr	r3, [pc, #132]	; (8004834 <main+0xb90>)
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f000 808b 	beq.w	80048ce <main+0xc2a>


	  		uint16_t    adc_page=0; ;
 80047b8:	2300      	movs	r3, #0
 80047ba:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	  		if		(adc_flag==1)	  	{	adc_page=0;			}	//dma start ,needs this and adc start ,set sampling time
 80047be:	4b1d      	ldr	r3, [pc, #116]	; (8004834 <main+0xb90>)
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d102      	bne.n	80047cc <main+0xb28>
 80047c6:	2300      	movs	r3, #0
 80047c8:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	  		if		(adc_flag==2)	  	{	adc_page=1536;  }
 80047cc:	4b19      	ldr	r3, [pc, #100]	; (8004834 <main+0xb90>)
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d103      	bne.n	80047dc <main+0xb38>
 80047d4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80047d8:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a


	  		uint16_t    adc_convert_count;
	  		uint16_t    adc_convert_temp;
	  		for (i=0;i<512;i++){
 80047dc:	4b0a      	ldr	r3, [pc, #40]	; (8004808 <main+0xb64>)
 80047de:	2200      	movs	r2, #0
 80047e0:	801a      	strh	r2, [r3, #0]
 80047e2:	e05d      	b.n	80048a0 <main+0xbfc>
 80047e4:	20007bb0 	.word	0x20007bb0
 80047e8:	20007ab0 	.word	0x20007ab0
 80047ec:	200079b0 	.word	0x200079b0
 80047f0:	20000224 	.word	0x20000224
 80047f4:	200051a4 	.word	0x200051a4
 80047f8:	20010238 	.word	0x20010238
 80047fc:	20007bb1 	.word	0x20007bb1
 8004800:	20004016 	.word	0x20004016
 8004804:	200034d9 	.word	0x200034d9
 8004808:	20000892 	.word	0x20000892
 800480c:	2000400a 	.word	0x2000400a
 8004810:	2000400b 	.word	0x2000400b
 8004814:	20004009 	.word	0x20004009
 8004818:	20004006 	.word	0x20004006
 800481c:	200034e4 	.word	0x200034e4
 8004820:	2000ffb4 	.word	0x2000ffb4
 8004824:	20000144 	.word	0x20000144
 8004828:	2000088e 	.word	0x2000088e
 800482c:	200034d0 	.word	0x200034d0
 8004830:	40020800 	.word	0x40020800
 8004834:	20004418 	.word	0x20004418
	  			adc_convert_count=(i*3)+adc_page;
 8004838:	4b30      	ldr	r3, [pc, #192]	; (80048fc <main+0xc58>)
 800483a:	881b      	ldrh	r3, [r3, #0]
 800483c:	461a      	mov	r2, r3
 800483e:	0052      	lsls	r2, r2, #1
 8004840:	4413      	add	r3, r2
 8004842:	b29a      	uxth	r2, r3
 8004844:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8004848:	4413      	add	r3, r2
 800484a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

	  			adc_convert_temp=adc_source[adc_convert_count]+adc_source[adc_convert_count+1]+adc_source[adc_convert_count+2];
 800484e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8004852:	4a2b      	ldr	r2, [pc, #172]	; (8004900 <main+0xc5c>)
 8004854:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004858:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800485c:	3301      	adds	r3, #1
 800485e:	4928      	ldr	r1, [pc, #160]	; (8004900 <main+0xc5c>)
 8004860:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004864:	4413      	add	r3, r2
 8004866:	b29a      	uxth	r2, r3
 8004868:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800486c:	3302      	adds	r3, #2
 800486e:	4924      	ldr	r1, [pc, #144]	; (8004900 <main+0xc5c>)
 8004870:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004874:	4413      	add	r3, r2
 8004876:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	  			input_holder[i]=adc_convert_temp/3;
 800487a:	4b20      	ldr	r3, [pc, #128]	; (80048fc <main+0xc58>)
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	4619      	mov	r1, r3
 8004880:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004884:	4a1f      	ldr	r2, [pc, #124]	; (8004904 <main+0xc60>)
 8004886:	fba2 2303 	umull	r2, r3, r2, r3
 800488a:	085b      	lsrs	r3, r3, #1
 800488c:	b29a      	uxth	r2, r3
 800488e:	4b1e      	ldr	r3, [pc, #120]	; (8004908 <main+0xc64>)
 8004890:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	  		for (i=0;i<512;i++){
 8004894:	4b19      	ldr	r3, [pc, #100]	; (80048fc <main+0xc58>)
 8004896:	881b      	ldrh	r3, [r3, #0]
 8004898:	3301      	adds	r3, #1
 800489a:	b29a      	uxth	r2, r3
 800489c:	4b17      	ldr	r3, [pc, #92]	; (80048fc <main+0xc58>)
 800489e:	801a      	strh	r2, [r3, #0]
 80048a0:	4b16      	ldr	r3, [pc, #88]	; (80048fc <main+0xc58>)
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048a8:	d3c6      	bcc.n	8004838 <main+0xb94>
	  		//	input_holder[i]=adc_source[(i*3)+adc_page];

	  		}
	  		if (sampler.record_enable)  {sampler_ram_record(); sampler.start_MSB=0; sampler.start_LSB=0;sampler.end_MSB=63;}
 80048aa:	4b18      	ldr	r3, [pc, #96]	; (800490c <main+0xc68>)
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <main+0xc24>
 80048b2:	f7fd fc3b 	bl	800212c <sampler_ram_record>
 80048b6:	4b15      	ldr	r3, [pc, #84]	; (800490c <main+0xc68>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	739a      	strb	r2, [r3, #14]
 80048bc:	4b13      	ldr	r3, [pc, #76]	; (800490c <main+0xc68>)
 80048be:	2200      	movs	r2, #0
 80048c0:	73da      	strb	r2, [r3, #15]
 80048c2:	4b12      	ldr	r3, [pc, #72]	; (800490c <main+0xc68>)
 80048c4:	223f      	movs	r2, #63	; 0x3f
 80048c6:	741a      	strb	r2, [r3, #16]

	  			adc_flag=0;
 80048c8:	4b11      	ldr	r3, [pc, #68]	; (8004910 <main+0xc6c>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	701a      	strb	r2, [r3, #0]
	  		}


	  		if ((sample_point>512)&&( sample_pointD==512)) bank_write=1;
 80048ce:	4b11      	ldr	r3, [pc, #68]	; (8004914 <main+0xc70>)
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048d8:	d90a      	bls.n	80048f0 <main+0xc4c>
 80048da:	4b0f      	ldr	r3, [pc, #60]	; (8004918 <main+0xc74>)
 80048dc:	881b      	ldrh	r3, [r3, #0]
 80048de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048e2:	d105      	bne.n	80048f0 <main+0xc4c>
 80048e4:	4b0d      	ldr	r3, [pc, #52]	; (800491c <main+0xc78>)
 80048e6:	2201      	movs	r2, #1
 80048e8:	801a      	strh	r2, [r3, #0]
	while  (bank_write)                         {							// wait for adc , priority
 80048ea:	e001      	b.n	80048f0 <main+0xc4c>




		sampling();
 80048ec:	f7fd fc48 	bl	8002180 <sampling>
	while  (bank_write)                         {							// wait for adc , priority
 80048f0:	4b0a      	ldr	r3, [pc, #40]	; (800491c <main+0xc78>)
 80048f2:	881b      	ldrh	r3, [r3, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1f9      	bne.n	80048ec <main+0xc48>
	  loop_counter++ ;
 80048f8:	e4fa      	b.n	80042f0 <main+0x64c>
 80048fa:	bf00      	nop
 80048fc:	20000892 	.word	0x20000892
 8004900:	200018a4 	.word	0x200018a4
 8004904:	aaaaaaab 	.word	0xaaaaaaab
 8004908:	20004018 	.word	0x20004018
 800490c:	20000204 	.word	0x20000204
 8004910:	20004418 	.word	0x20004418
 8004914:	20001898 	.word	0x20001898
 8004918:	2000189e 	.word	0x2000189e
 800491c:	2000014e 	.word	0x2000014e

08004920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b094      	sub	sp, #80	; 0x50
 8004924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004926:	f107 0320 	add.w	r3, r7, #32
 800492a:	2230      	movs	r2, #48	; 0x30
 800492c:	2100      	movs	r1, #0
 800492e:	4618      	mov	r0, r3
 8004930:	f006 fde4 	bl	800b4fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004934:	f107 030c 	add.w	r3, r7, #12
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	605a      	str	r2, [r3, #4]
 800493e:	609a      	str	r2, [r3, #8]
 8004940:	60da      	str	r2, [r3, #12]
 8004942:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004944:	2300      	movs	r3, #0
 8004946:	60bb      	str	r3, [r7, #8]
 8004948:	4b28      	ldr	r3, [pc, #160]	; (80049ec <SystemClock_Config+0xcc>)
 800494a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494c:	4a27      	ldr	r2, [pc, #156]	; (80049ec <SystemClock_Config+0xcc>)
 800494e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004952:	6413      	str	r3, [r2, #64]	; 0x40
 8004954:	4b25      	ldr	r3, [pc, #148]	; (80049ec <SystemClock_Config+0xcc>)
 8004956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800495c:	60bb      	str	r3, [r7, #8]
 800495e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004960:	2300      	movs	r3, #0
 8004962:	607b      	str	r3, [r7, #4]
 8004964:	4b22      	ldr	r3, [pc, #136]	; (80049f0 <SystemClock_Config+0xd0>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a21      	ldr	r2, [pc, #132]	; (80049f0 <SystemClock_Config+0xd0>)
 800496a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	4b1f      	ldr	r3, [pc, #124]	; (80049f0 <SystemClock_Config+0xd0>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004978:	607b      	str	r3, [r7, #4]
 800497a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800497c:	2302      	movs	r3, #2
 800497e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004980:	2301      	movs	r3, #1
 8004982:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004984:	2310      	movs	r3, #16
 8004986:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004988:	2302      	movs	r3, #2
 800498a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800498c:	2300      	movs	r3, #0
 800498e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004990:	2308      	movs	r3, #8
 8004992:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8004994:	2364      	movs	r3, #100	; 0x64
 8004996:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004998:	2302      	movs	r3, #2
 800499a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800499c:	2304      	movs	r3, #4
 800499e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80049a0:	f107 0320 	add.w	r3, r7, #32
 80049a4:	4618      	mov	r0, r3
 80049a6:	f003 fe9b 	bl	80086e0 <HAL_RCC_OscConfig>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80049b0:	f000 fbac 	bl	800510c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80049b4:	230f      	movs	r3, #15
 80049b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80049b8:	2302      	movs	r3, #2
 80049ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80049bc:	2300      	movs	r3, #0
 80049be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80049c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80049c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80049cc:	f107 030c 	add.w	r3, r7, #12
 80049d0:	2103      	movs	r1, #3
 80049d2:	4618      	mov	r0, r3
 80049d4:	f004 f8fc 	bl	8008bd0 <HAL_RCC_ClockConfig>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80049de:	f000 fb95 	bl	800510c <Error_Handler>
  }
}
 80049e2:	bf00      	nop
 80049e4:	3750      	adds	r7, #80	; 0x50
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40023800 	.word	0x40023800
 80049f0:	40007000 	.word	0x40007000

080049f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b08c      	sub	sp, #48	; 0x30
 80049f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80049fa:	f107 0320 	add.w	r3, r7, #32
 80049fe:	2200      	movs	r2, #0
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	605a      	str	r2, [r3, #4]
 8004a04:	609a      	str	r2, [r3, #8]
 8004a06:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8004a08:	463b      	mov	r3, r7
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f006 fd74 	bl	800b4fc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004a14:	4b3e      	ldr	r3, [pc, #248]	; (8004b10 <MX_ADC1_Init+0x11c>)
 8004a16:	4a3f      	ldr	r2, [pc, #252]	; (8004b14 <MX_ADC1_Init+0x120>)
 8004a18:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004a1a:	4b3d      	ldr	r3, [pc, #244]	; (8004b10 <MX_ADC1_Init+0x11c>)
 8004a1c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004a20:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004a22:	4b3b      	ldr	r3, [pc, #236]	; (8004b10 <MX_ADC1_Init+0x11c>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004a28:	4b39      	ldr	r3, [pc, #228]	; (8004b10 <MX_ADC1_Init+0x11c>)
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004a2e:	4b38      	ldr	r3, [pc, #224]	; (8004b10 <MX_ADC1_Init+0x11c>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004a34:	4b36      	ldr	r3, [pc, #216]	; (8004b10 <MX_ADC1_Init+0x11c>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004a3c:	4b34      	ldr	r3, [pc, #208]	; (8004b10 <MX_ADC1_Init+0x11c>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004a42:	4b33      	ldr	r3, [pc, #204]	; (8004b10 <MX_ADC1_Init+0x11c>)
 8004a44:	4a34      	ldr	r2, [pc, #208]	; (8004b18 <MX_ADC1_Init+0x124>)
 8004a46:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004a48:	4b31      	ldr	r3, [pc, #196]	; (8004b10 <MX_ADC1_Init+0x11c>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004a4e:	4b30      	ldr	r3, [pc, #192]	; (8004b10 <MX_ADC1_Init+0x11c>)
 8004a50:	2201      	movs	r2, #1
 8004a52:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004a54:	4b2e      	ldr	r3, [pc, #184]	; (8004b10 <MX_ADC1_Init+0x11c>)
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004a5c:	4b2c      	ldr	r3, [pc, #176]	; (8004b10 <MX_ADC1_Init+0x11c>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004a62:	482b      	ldr	r0, [pc, #172]	; (8004b10 <MX_ADC1_Init+0x11c>)
 8004a64:	f000 ff64 	bl	8005930 <HAL_ADC_Init>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8004a6e:	f000 fb4d 	bl	800510c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8004a72:	2309      	movs	r3, #9
 8004a74:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8004a76:	2301      	movs	r3, #1
 8004a78:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8004a7a:	2305      	movs	r3, #5
 8004a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004a7e:	f107 0320 	add.w	r3, r7, #32
 8004a82:	4619      	mov	r1, r3
 8004a84:	4822      	ldr	r0, [pc, #136]	; (8004b10 <MX_ADC1_Init+0x11c>)
 8004a86:	f001 fa2b 	bl	8005ee0 <HAL_ADC_ConfigChannel>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d001      	beq.n	8004a94 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8004a90:	f000 fb3c 	bl	800510c <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8004a94:	2300      	movs	r3, #0
 8004a96:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_56CYCLES;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8004aa8:	4b1c      	ldr	r3, [pc, #112]	; (8004b1c <MX_ADC1_Init+0x128>)
 8004aaa:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8004aac:	2300      	movs	r3, #0
 8004aae:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8004ab8:	463b      	mov	r3, r7
 8004aba:	4619      	mov	r1, r3
 8004abc:	4814      	ldr	r0, [pc, #80]	; (8004b10 <MX_ADC1_Init+0x11c>)
 8004abe:	f001 fe0d 	bl	80066dc <HAL_ADCEx_InjectedConfigChannel>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8004ac8:	f000 fb20 	bl	800510c <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8004acc:	2302      	movs	r3, #2
 8004ace:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8004ad4:	463b      	mov	r3, r7
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	480d      	ldr	r0, [pc, #52]	; (8004b10 <MX_ADC1_Init+0x11c>)
 8004ada:	f001 fdff 	bl	80066dc <HAL_ADCEx_InjectedConfigChannel>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8004ae4:	f000 fb12 	bl	800510c <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_8;
 8004ae8:	2308      	movs	r3, #8
 8004aea:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 8004aec:	2303      	movs	r3, #3
 8004aee:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004af0:	2300      	movs	r3, #0
 8004af2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8004af4:	463b      	mov	r3, r7
 8004af6:	4619      	mov	r1, r3
 8004af8:	4805      	ldr	r0, [pc, #20]	; (8004b10 <MX_ADC1_Init+0x11c>)
 8004afa:	f001 fdef 	bl	80066dc <HAL_ADCEx_InjectedConfigChannel>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8004b04:	f000 fb02 	bl	800510c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004b08:	bf00      	nop
 8004b0a:	3730      	adds	r7, #48	; 0x30
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	2000ffb4 	.word	0x2000ffb4
 8004b14:	40012000 	.word	0x40012000
 8004b18:	0f000001 	.word	0x0f000001
 8004b1c:	000f0001 	.word	0x000f0001

08004b20 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004b24:	4b12      	ldr	r3, [pc, #72]	; (8004b70 <MX_I2C2_Init+0x50>)
 8004b26:	4a13      	ldr	r2, [pc, #76]	; (8004b74 <MX_I2C2_Init+0x54>)
 8004b28:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8004b2a:	4b11      	ldr	r3, [pc, #68]	; (8004b70 <MX_I2C2_Init+0x50>)
 8004b2c:	4a12      	ldr	r2, [pc, #72]	; (8004b78 <MX_I2C2_Init+0x58>)
 8004b2e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004b30:	4b0f      	ldr	r3, [pc, #60]	; (8004b70 <MX_I2C2_Init+0x50>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004b36:	4b0e      	ldr	r3, [pc, #56]	; (8004b70 <MX_I2C2_Init+0x50>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b3c:	4b0c      	ldr	r3, [pc, #48]	; (8004b70 <MX_I2C2_Init+0x50>)
 8004b3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004b42:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004b44:	4b0a      	ldr	r3, [pc, #40]	; (8004b70 <MX_I2C2_Init+0x50>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004b4a:	4b09      	ldr	r3, [pc, #36]	; (8004b70 <MX_I2C2_Init+0x50>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b50:	4b07      	ldr	r3, [pc, #28]	; (8004b70 <MX_I2C2_Init+0x50>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004b56:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <MX_I2C2_Init+0x50>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004b5c:	4804      	ldr	r0, [pc, #16]	; (8004b70 <MX_I2C2_Init+0x50>)
 8004b5e:	f002 fdff 	bl	8007760 <HAL_I2C_Init>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004b68:	f000 fad0 	bl	800510c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004b6c:	bf00      	nop
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	2001005c 	.word	0x2001005c
 8004b74:	40005800 	.word	0x40005800
 8004b78:	000186a0 	.word	0x000186a0

08004b7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004b80:	4b17      	ldr	r3, [pc, #92]	; (8004be0 <MX_SPI1_Init+0x64>)
 8004b82:	4a18      	ldr	r2, [pc, #96]	; (8004be4 <MX_SPI1_Init+0x68>)
 8004b84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004b86:	4b16      	ldr	r3, [pc, #88]	; (8004be0 <MX_SPI1_Init+0x64>)
 8004b88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004b8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004b8e:	4b14      	ldr	r3, [pc, #80]	; (8004be0 <MX_SPI1_Init+0x64>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004b94:	4b12      	ldr	r3, [pc, #72]	; (8004be0 <MX_SPI1_Init+0x64>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b9a:	4b11      	ldr	r3, [pc, #68]	; (8004be0 <MX_SPI1_Init+0x64>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004ba0:	4b0f      	ldr	r3, [pc, #60]	; (8004be0 <MX_SPI1_Init+0x64>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004ba6:	4b0e      	ldr	r3, [pc, #56]	; (8004be0 <MX_SPI1_Init+0x64>)
 8004ba8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004bae:	4b0c      	ldr	r3, [pc, #48]	; (8004be0 <MX_SPI1_Init+0x64>)
 8004bb0:	2208      	movs	r2, #8
 8004bb2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004bb4:	4b0a      	ldr	r3, [pc, #40]	; (8004be0 <MX_SPI1_Init+0x64>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004bba:	4b09      	ldr	r3, [pc, #36]	; (8004be0 <MX_SPI1_Init+0x64>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bc0:	4b07      	ldr	r3, [pc, #28]	; (8004be0 <MX_SPI1_Init+0x64>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004bc6:	4b06      	ldr	r3, [pc, #24]	; (8004be0 <MX_SPI1_Init+0x64>)
 8004bc8:	220a      	movs	r2, #10
 8004bca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004bcc:	4804      	ldr	r0, [pc, #16]	; (8004be0 <MX_SPI1_Init+0x64>)
 8004bce:	f004 f9df 	bl	8008f90 <HAL_SPI_Init>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004bd8:	f000 fa98 	bl	800510c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004bdc:	bf00      	nop
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	200100b0 	.word	0x200100b0
 8004be4:	40013000 	.word	0x40013000

08004be8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004bec:	4b17      	ldr	r3, [pc, #92]	; (8004c4c <MX_SPI2_Init+0x64>)
 8004bee:	4a18      	ldr	r2, [pc, #96]	; (8004c50 <MX_SPI2_Init+0x68>)
 8004bf0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004bf2:	4b16      	ldr	r3, [pc, #88]	; (8004c4c <MX_SPI2_Init+0x64>)
 8004bf4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004bf8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004bfa:	4b14      	ldr	r3, [pc, #80]	; (8004c4c <MX_SPI2_Init+0x64>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004c00:	4b12      	ldr	r3, [pc, #72]	; (8004c4c <MX_SPI2_Init+0x64>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c06:	4b11      	ldr	r3, [pc, #68]	; (8004c4c <MX_SPI2_Init+0x64>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004c0c:	4b0f      	ldr	r3, [pc, #60]	; (8004c4c <MX_SPI2_Init+0x64>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004c12:	4b0e      	ldr	r3, [pc, #56]	; (8004c4c <MX_SPI2_Init+0x64>)
 8004c14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c18:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004c1a:	4b0c      	ldr	r3, [pc, #48]	; (8004c4c <MX_SPI2_Init+0x64>)
 8004c1c:	2230      	movs	r2, #48	; 0x30
 8004c1e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004c20:	4b0a      	ldr	r3, [pc, #40]	; (8004c4c <MX_SPI2_Init+0x64>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004c26:	4b09      	ldr	r3, [pc, #36]	; (8004c4c <MX_SPI2_Init+0x64>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c2c:	4b07      	ldr	r3, [pc, #28]	; (8004c4c <MX_SPI2_Init+0x64>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004c32:	4b06      	ldr	r3, [pc, #24]	; (8004c4c <MX_SPI2_Init+0x64>)
 8004c34:	220a      	movs	r2, #10
 8004c36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004c38:	4804      	ldr	r0, [pc, #16]	; (8004c4c <MX_SPI2_Init+0x64>)
 8004c3a:	f004 f9a9 	bl	8008f90 <HAL_SPI_Init>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004c44:	f000 fa62 	bl	800510c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004c48:	bf00      	nop
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	20010108 	.word	0x20010108
 8004c50:	40003800 	.word	0x40003800

08004c54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b08c      	sub	sp, #48	; 0x30
 8004c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004c5a:	f107 030c 	add.w	r3, r7, #12
 8004c5e:	2224      	movs	r2, #36	; 0x24
 8004c60:	2100      	movs	r1, #0
 8004c62:	4618      	mov	r0, r3
 8004c64:	f006 fc4a 	bl	800b4fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c68:	1d3b      	adds	r3, r7, #4
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]
 8004c6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004c70:	4b21      	ldr	r3, [pc, #132]	; (8004cf8 <MX_TIM2_Init+0xa4>)
 8004c72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004c76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004c78:	4b1f      	ldr	r3, [pc, #124]	; (8004cf8 <MX_TIM2_Init+0xa4>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c7e:	4b1e      	ldr	r3, [pc, #120]	; (8004cf8 <MX_TIM2_Init+0xa4>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8004c84:	4b1c      	ldr	r3, [pc, #112]	; (8004cf8 <MX_TIM2_Init+0xa4>)
 8004c86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8004c8c:	4b1a      	ldr	r3, [pc, #104]	; (8004cf8 <MX_TIM2_Init+0xa4>)
 8004c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c94:	4b18      	ldr	r3, [pc, #96]	; (8004cf8 <MX_TIM2_Init+0xa4>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8004caa:	2302      	movs	r3, #2
 8004cac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8004cae:	2302      	movs	r3, #2
 8004cb0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8004cba:	2302      	movs	r3, #2
 8004cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004cbe:	f107 030c 	add.w	r3, r7, #12
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	480c      	ldr	r0, [pc, #48]	; (8004cf8 <MX_TIM2_Init+0xa4>)
 8004cc6:	f005 f921 	bl	8009f0c <HAL_TIM_Encoder_Init>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8004cd0:	f000 fa1c 	bl	800510c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004cdc:	1d3b      	adds	r3, r7, #4
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4805      	ldr	r0, [pc, #20]	; (8004cf8 <MX_TIM2_Init+0xa4>)
 8004ce2:	f005 ff3f 	bl	800ab64 <HAL_TIMEx_MasterConfigSynchronization>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d001      	beq.n	8004cf0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8004cec:	f000 fa0e 	bl	800510c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004cf0:	bf00      	nop
 8004cf2:	3730      	adds	r7, #48	; 0x30
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	20010160 	.word	0x20010160

08004cfc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b08e      	sub	sp, #56	; 0x38
 8004d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d06:	2200      	movs	r2, #0
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	605a      	str	r2, [r3, #4]
 8004d0c:	609a      	str	r2, [r3, #8]
 8004d0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d10:	f107 0320 	add.w	r3, r7, #32
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]
 8004d18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d1a:	1d3b      	adds	r3, r7, #4
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	601a      	str	r2, [r3, #0]
 8004d20:	605a      	str	r2, [r3, #4]
 8004d22:	609a      	str	r2, [r3, #8]
 8004d24:	60da      	str	r2, [r3, #12]
 8004d26:	611a      	str	r2, [r3, #16]
 8004d28:	615a      	str	r2, [r3, #20]
 8004d2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004d2c:	4b32      	ldr	r3, [pc, #200]	; (8004df8 <MX_TIM3_Init+0xfc>)
 8004d2e:	4a33      	ldr	r2, [pc, #204]	; (8004dfc <MX_TIM3_Init+0x100>)
 8004d30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004d32:	4b31      	ldr	r3, [pc, #196]	; (8004df8 <MX_TIM3_Init+0xfc>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d38:	4b2f      	ldr	r3, [pc, #188]	; (8004df8 <MX_TIM3_Init+0xfc>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3124;
 8004d3e:	4b2e      	ldr	r3, [pc, #184]	; (8004df8 <MX_TIM3_Init+0xfc>)
 8004d40:	f640 4234 	movw	r2, #3124	; 0xc34
 8004d44:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d46:	4b2c      	ldr	r3, [pc, #176]	; (8004df8 <MX_TIM3_Init+0xfc>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d4c:	4b2a      	ldr	r3, [pc, #168]	; (8004df8 <MX_TIM3_Init+0xfc>)
 8004d4e:	2280      	movs	r2, #128	; 0x80
 8004d50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004d52:	4829      	ldr	r0, [pc, #164]	; (8004df8 <MX_TIM3_Init+0xfc>)
 8004d54:	f004 fec4 	bl	8009ae0 <HAL_TIM_Base_Init>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004d5e:	f000 f9d5 	bl	800510c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d66:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004d68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	4822      	ldr	r0, [pc, #136]	; (8004df8 <MX_TIM3_Init+0xfc>)
 8004d70:	f005 fb3c 	bl	800a3ec <HAL_TIM_ConfigClockSource>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004d7a:	f000 f9c7 	bl	800510c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004d7e:	481e      	ldr	r0, [pc, #120]	; (8004df8 <MX_TIM3_Init+0xfc>)
 8004d80:	f004 ffba 	bl	8009cf8 <HAL_TIM_PWM_Init>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004d8a:	f000 f9bf 	bl	800510c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d92:	2300      	movs	r3, #0
 8004d94:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004d96:	f107 0320 	add.w	r3, r7, #32
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	4816      	ldr	r0, [pc, #88]	; (8004df8 <MX_TIM3_Init+0xfc>)
 8004d9e:	f005 fee1 	bl	800ab64 <HAL_TIMEx_MasterConfigSynchronization>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d001      	beq.n	8004dac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004da8:	f000 f9b0 	bl	800510c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004dac:	2360      	movs	r3, #96	; 0x60
 8004dae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004db0:	2300      	movs	r3, #0
 8004db2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004db4:	2300      	movs	r3, #0
 8004db6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004db8:	2300      	movs	r3, #0
 8004dba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004dbc:	1d3b      	adds	r3, r7, #4
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	480d      	ldr	r0, [pc, #52]	; (8004df8 <MX_TIM3_Init+0xfc>)
 8004dc4:	f005 fa50 	bl	800a268 <HAL_TIM_PWM_ConfigChannel>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004dce:	f000 f99d 	bl	800510c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004dd2:	1d3b      	adds	r3, r7, #4
 8004dd4:	2204      	movs	r2, #4
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4807      	ldr	r0, [pc, #28]	; (8004df8 <MX_TIM3_Init+0xfc>)
 8004dda:	f005 fa45 	bl	800a268 <HAL_TIM_PWM_ConfigChannel>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8004de4:	f000 f992 	bl	800510c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004de8:	4803      	ldr	r0, [pc, #12]	; (8004df8 <MX_TIM3_Init+0xfc>)
 8004dea:	f000 fbcd 	bl	8005588 <HAL_TIM_MspPostInit>

}
 8004dee:	bf00      	nop
 8004df0:	3738      	adds	r7, #56	; 0x38
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	200101a8 	.word	0x200101a8
 8004dfc:	40000400 	.word	0x40000400

08004e00 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08c      	sub	sp, #48	; 0x30
 8004e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004e06:	f107 030c 	add.w	r3, r7, #12
 8004e0a:	2224      	movs	r2, #36	; 0x24
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f006 fb74 	bl	800b4fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e14:	1d3b      	adds	r3, r7, #4
 8004e16:	2200      	movs	r2, #0
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004e1c:	4b20      	ldr	r3, [pc, #128]	; (8004ea0 <MX_TIM4_Init+0xa0>)
 8004e1e:	4a21      	ldr	r2, [pc, #132]	; (8004ea4 <MX_TIM4_Init+0xa4>)
 8004e20:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004e22:	4b1f      	ldr	r3, [pc, #124]	; (8004ea0 <MX_TIM4_Init+0xa0>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e28:	4b1d      	ldr	r3, [pc, #116]	; (8004ea0 <MX_TIM4_Init+0xa0>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004e2e:	4b1c      	ldr	r3, [pc, #112]	; (8004ea0 <MX_TIM4_Init+0xa0>)
 8004e30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e34:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e36:	4b1a      	ldr	r3, [pc, #104]	; (8004ea0 <MX_TIM4_Init+0xa0>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e3c:	4b18      	ldr	r3, [pc, #96]	; (8004ea0 <MX_TIM4_Init+0xa0>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004e42:	2301      	movs	r3, #1
 8004e44:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8004e46:	2302      	movs	r3, #2
 8004e48:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8004e52:	2302      	movs	r3, #2
 8004e54:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8004e56:	2302      	movs	r3, #2
 8004e58:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8004e62:	2302      	movs	r3, #2
 8004e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004e66:	f107 030c 	add.w	r3, r7, #12
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	480c      	ldr	r0, [pc, #48]	; (8004ea0 <MX_TIM4_Init+0xa0>)
 8004e6e:	f005 f84d 	bl	8009f0c <HAL_TIM_Encoder_Init>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8004e78:	f000 f948 	bl	800510c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e80:	2300      	movs	r3, #0
 8004e82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004e84:	1d3b      	adds	r3, r7, #4
 8004e86:	4619      	mov	r1, r3
 8004e88:	4805      	ldr	r0, [pc, #20]	; (8004ea0 <MX_TIM4_Init+0xa0>)
 8004e8a:	f005 fe6b 	bl	800ab64 <HAL_TIMEx_MasterConfigSynchronization>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004e94:	f000 f93a 	bl	800510c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004e98:	bf00      	nop
 8004e9a:	3730      	adds	r7, #48	; 0x30
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	200101f0 	.word	0x200101f0
 8004ea4:	40000800 	.word	0x40000800

08004ea8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004eac:	4b11      	ldr	r3, [pc, #68]	; (8004ef4 <MX_USART1_UART_Init+0x4c>)
 8004eae:	4a12      	ldr	r2, [pc, #72]	; (8004ef8 <MX_USART1_UART_Init+0x50>)
 8004eb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004eb2:	4b10      	ldr	r3, [pc, #64]	; (8004ef4 <MX_USART1_UART_Init+0x4c>)
 8004eb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004eb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004eba:	4b0e      	ldr	r3, [pc, #56]	; (8004ef4 <MX_USART1_UART_Init+0x4c>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004ec0:	4b0c      	ldr	r3, [pc, #48]	; (8004ef4 <MX_USART1_UART_Init+0x4c>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004ec6:	4b0b      	ldr	r3, [pc, #44]	; (8004ef4 <MX_USART1_UART_Init+0x4c>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8004ecc:	4b09      	ldr	r3, [pc, #36]	; (8004ef4 <MX_USART1_UART_Init+0x4c>)
 8004ece:	2208      	movs	r2, #8
 8004ed0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ed2:	4b08      	ldr	r3, [pc, #32]	; (8004ef4 <MX_USART1_UART_Init+0x4c>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ed8:	4b06      	ldr	r3, [pc, #24]	; (8004ef4 <MX_USART1_UART_Init+0x4c>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8004ede:	4805      	ldr	r0, [pc, #20]	; (8004ef4 <MX_USART1_UART_Init+0x4c>)
 8004ee0:	f005 fec2 	bl	800ac68 <HAL_HalfDuplex_Init>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004eea:	f000 f90f 	bl	800510c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004eee:	bf00      	nop
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20010238 	.word	0x20010238
 8004ef8:	40011000 	.word	0x40011000

08004efc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004f00:	4b11      	ldr	r3, [pc, #68]	; (8004f48 <MX_USART6_UART_Init+0x4c>)
 8004f02:	4a12      	ldr	r2, [pc, #72]	; (8004f4c <MX_USART6_UART_Init+0x50>)
 8004f04:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004f06:	4b10      	ldr	r3, [pc, #64]	; (8004f48 <MX_USART6_UART_Init+0x4c>)
 8004f08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004f0c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004f0e:	4b0e      	ldr	r3, [pc, #56]	; (8004f48 <MX_USART6_UART_Init+0x4c>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004f14:	4b0c      	ldr	r3, [pc, #48]	; (8004f48 <MX_USART6_UART_Init+0x4c>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004f1a:	4b0b      	ldr	r3, [pc, #44]	; (8004f48 <MX_USART6_UART_Init+0x4c>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004f20:	4b09      	ldr	r3, [pc, #36]	; (8004f48 <MX_USART6_UART_Init+0x4c>)
 8004f22:	220c      	movs	r2, #12
 8004f24:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f26:	4b08      	ldr	r3, [pc, #32]	; (8004f48 <MX_USART6_UART_Init+0x4c>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f2c:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <MX_USART6_UART_Init+0x4c>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 8004f32:	4805      	ldr	r0, [pc, #20]	; (8004f48 <MX_USART6_UART_Init+0x4c>)
 8004f34:	f005 fe98 	bl	800ac68 <HAL_HalfDuplex_Init>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004f3e:	f000 f8e5 	bl	800510c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004f42:	bf00      	nop
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	2001027c 	.word	0x2001027c
 8004f4c:	40011400 	.word	0x40011400

08004f50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004f56:	2300      	movs	r3, #0
 8004f58:	607b      	str	r3, [r7, #4]
 8004f5a:	4b0c      	ldr	r3, [pc, #48]	; (8004f8c <MX_DMA_Init+0x3c>)
 8004f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5e:	4a0b      	ldr	r2, [pc, #44]	; (8004f8c <MX_DMA_Init+0x3c>)
 8004f60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f64:	6313      	str	r3, [r2, #48]	; 0x30
 8004f66:	4b09      	ldr	r3, [pc, #36]	; (8004f8c <MX_DMA_Init+0x3c>)
 8004f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f6e:	607b      	str	r3, [r7, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8004f72:	2200      	movs	r2, #0
 8004f74:	2100      	movs	r1, #0
 8004f76:	203c      	movs	r0, #60	; 0x3c
 8004f78:	f001 fe25 	bl	8006bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8004f7c:	203c      	movs	r0, #60	; 0x3c
 8004f7e:	f001 fe3e 	bl	8006bfe <HAL_NVIC_EnableIRQ>

}
 8004f82:	bf00      	nop
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	40023800 	.word	0x40023800

08004f90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b088      	sub	sp, #32
 8004f94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f96:	f107 030c 	add.w	r3, r7, #12
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	601a      	str	r2, [r3, #0]
 8004f9e:	605a      	str	r2, [r3, #4]
 8004fa0:	609a      	str	r2, [r3, #8]
 8004fa2:	60da      	str	r2, [r3, #12]
 8004fa4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60bb      	str	r3, [r7, #8]
 8004faa:	4b35      	ldr	r3, [pc, #212]	; (8005080 <MX_GPIO_Init+0xf0>)
 8004fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fae:	4a34      	ldr	r2, [pc, #208]	; (8005080 <MX_GPIO_Init+0xf0>)
 8004fb0:	f043 0301 	orr.w	r3, r3, #1
 8004fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8004fb6:	4b32      	ldr	r3, [pc, #200]	; (8005080 <MX_GPIO_Init+0xf0>)
 8004fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	60bb      	str	r3, [r7, #8]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	607b      	str	r3, [r7, #4]
 8004fc6:	4b2e      	ldr	r3, [pc, #184]	; (8005080 <MX_GPIO_Init+0xf0>)
 8004fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fca:	4a2d      	ldr	r2, [pc, #180]	; (8005080 <MX_GPIO_Init+0xf0>)
 8004fcc:	f043 0302 	orr.w	r3, r3, #2
 8004fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8004fd2:	4b2b      	ldr	r3, [pc, #172]	; (8005080 <MX_GPIO_Init+0xf0>)
 8004fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	607b      	str	r3, [r7, #4]
 8004fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fde:	2300      	movs	r3, #0
 8004fe0:	603b      	str	r3, [r7, #0]
 8004fe2:	4b27      	ldr	r3, [pc, #156]	; (8005080 <MX_GPIO_Init+0xf0>)
 8004fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe6:	4a26      	ldr	r2, [pc, #152]	; (8005080 <MX_GPIO_Init+0xf0>)
 8004fe8:	f043 0304 	orr.w	r3, r3, #4
 8004fec:	6313      	str	r3, [r2, #48]	; 0x30
 8004fee:	4b24      	ldr	r3, [pc, #144]	; (8005080 <MX_GPIO_Init+0xf0>)
 8004ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff2:	f003 0304 	and.w	r3, r3, #4
 8004ff6:	603b      	str	r3, [r7, #0]
 8004ff8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005000:	4820      	ldr	r0, [pc, #128]	; (8005084 <MX_GPIO_Init+0xf4>)
 8005002:	f002 fb7b 	bl	80076fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8005006:	2201      	movs	r2, #1
 8005008:	2110      	movs	r1, #16
 800500a:	481f      	ldr	r0, [pc, #124]	; (8005088 <MX_GPIO_Init+0xf8>)
 800500c:	f002 fb76 	bl	80076fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8005010:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005014:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005016:	2301      	movs	r3, #1
 8005018:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800501a:	2300      	movs	r3, #0
 800501c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800501e:	2300      	movs	r3, #0
 8005020:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8005022:	f107 030c 	add.w	r3, r7, #12
 8005026:	4619      	mov	r1, r3
 8005028:	4816      	ldr	r0, [pc, #88]	; (8005084 <MX_GPIO_Init+0xf4>)
 800502a:	f002 f9e3 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : record_pin_Pin */
  GPIO_InitStruct.Pin = record_pin_Pin;
 800502e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005032:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005034:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8005038:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800503a:	2301      	movs	r3, #1
 800503c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(record_pin_GPIO_Port, &GPIO_InitStruct);
 800503e:	f107 030c 	add.w	r3, r7, #12
 8005042:	4619      	mov	r1, r3
 8005044:	4811      	ldr	r0, [pc, #68]	; (800508c <MX_GPIO_Init+0xfc>)
 8005046:	f002 f9d5 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 800504a:	2310      	movs	r3, #16
 800504c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800504e:	2301      	movs	r3, #1
 8005050:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005052:	2300      	movs	r3, #0
 8005054:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005056:	2303      	movs	r3, #3
 8005058:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 800505a:	f107 030c 	add.w	r3, r7, #12
 800505e:	4619      	mov	r1, r3
 8005060:	4809      	ldr	r0, [pc, #36]	; (8005088 <MX_GPIO_Init+0xf8>)
 8005062:	f002 f9c7 	bl	80073f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005066:	2200      	movs	r2, #0
 8005068:	2100      	movs	r1, #0
 800506a:	2028      	movs	r0, #40	; 0x28
 800506c:	f001 fdab 	bl	8006bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005070:	2028      	movs	r0, #40	; 0x28
 8005072:	f001 fdc4 	bl	8006bfe <HAL_NVIC_EnableIRQ>

}
 8005076:	bf00      	nop
 8005078:	3720      	adds	r7, #32
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	40023800 	.word	0x40023800
 8005084:	40020800 	.word	0x40020800
 8005088:	40020000 	.word	0x40020000
 800508c:	40020400 	.word	0x40020400

08005090 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */


	void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
		adc_flag=1;
 8005098:	4b04      	ldr	r3, [pc, #16]	; (80050ac <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 800509a:	2201      	movs	r2, #1
 800509c:	701a      	strb	r2, [r3, #0]

	}
 800509e:	bf00      	nop
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	20004418 	.word	0x20004418

080050b0 <HAL_ADC_ConvCpltCallback>:
	void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)   // get data after conversion
	{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
	adc_flag=2;
 80050b8:	4b07      	ldr	r3, [pc, #28]	; (80050d8 <HAL_ADC_ConvCpltCallback+0x28>)
 80050ba:	2202      	movs	r2, #2
 80050bc:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Stop_DMA(&hadc1); HAL_ADC_Start_DMA(&hadc1,& adc_source, 3072);
 80050be:	4807      	ldr	r0, [pc, #28]	; (80050dc <HAL_ADC_ConvCpltCallback+0x2c>)
 80050c0:	f000 feaa 	bl	8005e18 <HAL_ADC_Stop_DMA>
 80050c4:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80050c8:	4905      	ldr	r1, [pc, #20]	; (80050e0 <HAL_ADC_ConvCpltCallback+0x30>)
 80050ca:	4804      	ldr	r0, [pc, #16]	; (80050dc <HAL_ADC_ConvCpltCallback+0x2c>)
 80050cc:	f000 fdb4 	bl	8005c38 <HAL_ADC_Start_DMA>

	}
 80050d0:	bf00      	nop
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	20004418 	.word	0x20004418
 80050dc:	2000ffb4 	.word	0x2000ffb4
 80050e0:	200018a4 	.word	0x200018a4

080050e4 <HAL_GPIO_EXTI_Callback>:
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)   // when finished sending
	{
	    spi2_send_enable=1;
	}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	4603      	mov	r3, r0
 80050ec:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == record_pin_Pin) {
 80050ee:	88fb      	ldrh	r3, [r7, #6]
 80050f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f4:	d102      	bne.n	80050fc <HAL_GPIO_EXTI_Callback+0x18>
   sampler.record_enable=1;
 80050f6:	4b04      	ldr	r3, [pc, #16]	; (8005108 <HAL_GPIO_EXTI_Callback+0x24>)
 80050f8:	2201      	movs	r2, #1
 80050fa:	701a      	strb	r2, [r3, #0]
  }
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr
 8005108:	20000204 	.word	0x20000204

0800510c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005110:	b672      	cpsid	i
}
 8005112:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005114:	e7fe      	b.n	8005114 <Error_Handler+0x8>
	...

08005118 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800511e:	2300      	movs	r3, #0
 8005120:	607b      	str	r3, [r7, #4]
 8005122:	4b10      	ldr	r3, [pc, #64]	; (8005164 <HAL_MspInit+0x4c>)
 8005124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005126:	4a0f      	ldr	r2, [pc, #60]	; (8005164 <HAL_MspInit+0x4c>)
 8005128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800512c:	6453      	str	r3, [r2, #68]	; 0x44
 800512e:	4b0d      	ldr	r3, [pc, #52]	; (8005164 <HAL_MspInit+0x4c>)
 8005130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005136:	607b      	str	r3, [r7, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800513a:	2300      	movs	r3, #0
 800513c:	603b      	str	r3, [r7, #0]
 800513e:	4b09      	ldr	r3, [pc, #36]	; (8005164 <HAL_MspInit+0x4c>)
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	4a08      	ldr	r2, [pc, #32]	; (8005164 <HAL_MspInit+0x4c>)
 8005144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005148:	6413      	str	r3, [r2, #64]	; 0x40
 800514a:	4b06      	ldr	r3, [pc, #24]	; (8005164 <HAL_MspInit+0x4c>)
 800514c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005152:	603b      	str	r3, [r7, #0]
 8005154:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005156:	bf00      	nop
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	40023800 	.word	0x40023800

08005168 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b08a      	sub	sp, #40	; 0x28
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005170:	f107 0314 	add.w	r3, r7, #20
 8005174:	2200      	movs	r2, #0
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	605a      	str	r2, [r3, #4]
 800517a:	609a      	str	r2, [r3, #8]
 800517c:	60da      	str	r2, [r3, #12]
 800517e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a3c      	ldr	r2, [pc, #240]	; (8005278 <HAL_ADC_MspInit+0x110>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d171      	bne.n	800526e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800518a:	2300      	movs	r3, #0
 800518c:	613b      	str	r3, [r7, #16]
 800518e:	4b3b      	ldr	r3, [pc, #236]	; (800527c <HAL_ADC_MspInit+0x114>)
 8005190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005192:	4a3a      	ldr	r2, [pc, #232]	; (800527c <HAL_ADC_MspInit+0x114>)
 8005194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005198:	6453      	str	r3, [r2, #68]	; 0x44
 800519a:	4b38      	ldr	r3, [pc, #224]	; (800527c <HAL_ADC_MspInit+0x114>)
 800519c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800519e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a2:	613b      	str	r3, [r7, #16]
 80051a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051a6:	2300      	movs	r3, #0
 80051a8:	60fb      	str	r3, [r7, #12]
 80051aa:	4b34      	ldr	r3, [pc, #208]	; (800527c <HAL_ADC_MspInit+0x114>)
 80051ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ae:	4a33      	ldr	r2, [pc, #204]	; (800527c <HAL_ADC_MspInit+0x114>)
 80051b0:	f043 0301 	orr.w	r3, r3, #1
 80051b4:	6313      	str	r3, [r2, #48]	; 0x30
 80051b6:	4b31      	ldr	r3, [pc, #196]	; (800527c <HAL_ADC_MspInit+0x114>)
 80051b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051c2:	2300      	movs	r3, #0
 80051c4:	60bb      	str	r3, [r7, #8]
 80051c6:	4b2d      	ldr	r3, [pc, #180]	; (800527c <HAL_ADC_MspInit+0x114>)
 80051c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ca:	4a2c      	ldr	r2, [pc, #176]	; (800527c <HAL_ADC_MspInit+0x114>)
 80051cc:	f043 0302 	orr.w	r3, r3, #2
 80051d0:	6313      	str	r3, [r2, #48]	; 0x30
 80051d2:	4b2a      	ldr	r3, [pc, #168]	; (800527c <HAL_ADC_MspInit+0x114>)
 80051d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	60bb      	str	r3, [r7, #8]
 80051dc:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA0-WKUP     ------> ADC1_IN0
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0;
 80051de:	2305      	movs	r3, #5
 80051e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051e2:	2303      	movs	r3, #3
 80051e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051e6:	2300      	movs	r3, #0
 80051e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051ea:	f107 0314 	add.w	r3, r7, #20
 80051ee:	4619      	mov	r1, r3
 80051f0:	4823      	ldr	r0, [pc, #140]	; (8005280 <HAL_ADC_MspInit+0x118>)
 80051f2:	f002 f8ff 	bl	80073f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80051f6:	2303      	movs	r3, #3
 80051f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051fa:	2303      	movs	r3, #3
 80051fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051fe:	2300      	movs	r3, #0
 8005200:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005202:	f107 0314 	add.w	r3, r7, #20
 8005206:	4619      	mov	r1, r3
 8005208:	481e      	ldr	r0, [pc, #120]	; (8005284 <HAL_ADC_MspInit+0x11c>)
 800520a:	f002 f8f3 	bl	80073f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 800520e:	4b1e      	ldr	r3, [pc, #120]	; (8005288 <HAL_ADC_MspInit+0x120>)
 8005210:	4a1e      	ldr	r2, [pc, #120]	; (800528c <HAL_ADC_MspInit+0x124>)
 8005212:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005214:	4b1c      	ldr	r3, [pc, #112]	; (8005288 <HAL_ADC_MspInit+0x120>)
 8005216:	2200      	movs	r2, #0
 8005218:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800521a:	4b1b      	ldr	r3, [pc, #108]	; (8005288 <HAL_ADC_MspInit+0x120>)
 800521c:	2200      	movs	r2, #0
 800521e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005220:	4b19      	ldr	r3, [pc, #100]	; (8005288 <HAL_ADC_MspInit+0x120>)
 8005222:	2200      	movs	r2, #0
 8005224:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005226:	4b18      	ldr	r3, [pc, #96]	; (8005288 <HAL_ADC_MspInit+0x120>)
 8005228:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800522c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800522e:	4b16      	ldr	r3, [pc, #88]	; (8005288 <HAL_ADC_MspInit+0x120>)
 8005230:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005234:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005236:	4b14      	ldr	r3, [pc, #80]	; (8005288 <HAL_ADC_MspInit+0x120>)
 8005238:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800523c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800523e:	4b12      	ldr	r3, [pc, #72]	; (8005288 <HAL_ADC_MspInit+0x120>)
 8005240:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005244:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005246:	4b10      	ldr	r3, [pc, #64]	; (8005288 <HAL_ADC_MspInit+0x120>)
 8005248:	2200      	movs	r2, #0
 800524a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800524c:	4b0e      	ldr	r3, [pc, #56]	; (8005288 <HAL_ADC_MspInit+0x120>)
 800524e:	2200      	movs	r2, #0
 8005250:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005252:	480d      	ldr	r0, [pc, #52]	; (8005288 <HAL_ADC_MspInit+0x120>)
 8005254:	f001 fcee 	bl	8006c34 <HAL_DMA_Init>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800525e:	f7ff ff55 	bl	800510c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a08      	ldr	r2, [pc, #32]	; (8005288 <HAL_ADC_MspInit+0x120>)
 8005266:	639a      	str	r2, [r3, #56]	; 0x38
 8005268:	4a07      	ldr	r2, [pc, #28]	; (8005288 <HAL_ADC_MspInit+0x120>)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800526e:	bf00      	nop
 8005270:	3728      	adds	r7, #40	; 0x28
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	40012000 	.word	0x40012000
 800527c:	40023800 	.word	0x40023800
 8005280:	40020000 	.word	0x40020000
 8005284:	40020400 	.word	0x40020400
 8005288:	2000fffc 	.word	0x2000fffc
 800528c:	40026470 	.word	0x40026470

08005290 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b08a      	sub	sp, #40	; 0x28
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005298:	f107 0314 	add.w	r3, r7, #20
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	605a      	str	r2, [r3, #4]
 80052a2:	609a      	str	r2, [r3, #8]
 80052a4:	60da      	str	r2, [r3, #12]
 80052a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a22      	ldr	r2, [pc, #136]	; (8005338 <HAL_I2C_MspInit+0xa8>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d13d      	bne.n	800532e <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052b2:	2300      	movs	r3, #0
 80052b4:	613b      	str	r3, [r7, #16]
 80052b6:	4b21      	ldr	r3, [pc, #132]	; (800533c <HAL_I2C_MspInit+0xac>)
 80052b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ba:	4a20      	ldr	r2, [pc, #128]	; (800533c <HAL_I2C_MspInit+0xac>)
 80052bc:	f043 0302 	orr.w	r3, r3, #2
 80052c0:	6313      	str	r3, [r2, #48]	; 0x30
 80052c2:	4b1e      	ldr	r3, [pc, #120]	; (800533c <HAL_I2C_MspInit+0xac>)
 80052c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	613b      	str	r3, [r7, #16]
 80052cc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB9     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80052ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80052d4:	2312      	movs	r3, #18
 80052d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d8:	2300      	movs	r3, #0
 80052da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052dc:	2303      	movs	r3, #3
 80052de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80052e0:	2309      	movs	r3, #9
 80052e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052e4:	f107 0314 	add.w	r3, r7, #20
 80052e8:	4619      	mov	r1, r3
 80052ea:	4815      	ldr	r0, [pc, #84]	; (8005340 <HAL_I2C_MspInit+0xb0>)
 80052ec:	f002 f882 	bl	80073f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80052f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80052f6:	2312      	movs	r3, #18
 80052f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052fa:	2300      	movs	r3, #0
 80052fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052fe:	2303      	movs	r3, #3
 8005300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005302:	2304      	movs	r3, #4
 8005304:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005306:	f107 0314 	add.w	r3, r7, #20
 800530a:	4619      	mov	r1, r3
 800530c:	480c      	ldr	r0, [pc, #48]	; (8005340 <HAL_I2C_MspInit+0xb0>)
 800530e:	f002 f871 	bl	80073f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005312:	2300      	movs	r3, #0
 8005314:	60fb      	str	r3, [r7, #12]
 8005316:	4b09      	ldr	r3, [pc, #36]	; (800533c <HAL_I2C_MspInit+0xac>)
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	4a08      	ldr	r2, [pc, #32]	; (800533c <HAL_I2C_MspInit+0xac>)
 800531c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005320:	6413      	str	r3, [r2, #64]	; 0x40
 8005322:	4b06      	ldr	r3, [pc, #24]	; (800533c <HAL_I2C_MspInit+0xac>)
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800532e:	bf00      	nop
 8005330:	3728      	adds	r7, #40	; 0x28
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	40005800 	.word	0x40005800
 800533c:	40023800 	.word	0x40023800
 8005340:	40020400 	.word	0x40020400

08005344 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b08c      	sub	sp, #48	; 0x30
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800534c:	f107 031c 	add.w	r3, r7, #28
 8005350:	2200      	movs	r2, #0
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	605a      	str	r2, [r3, #4]
 8005356:	609a      	str	r2, [r3, #8]
 8005358:	60da      	str	r2, [r3, #12]
 800535a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a32      	ldr	r2, [pc, #200]	; (800542c <HAL_SPI_MspInit+0xe8>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d12c      	bne.n	80053c0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005366:	2300      	movs	r3, #0
 8005368:	61bb      	str	r3, [r7, #24]
 800536a:	4b31      	ldr	r3, [pc, #196]	; (8005430 <HAL_SPI_MspInit+0xec>)
 800536c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536e:	4a30      	ldr	r2, [pc, #192]	; (8005430 <HAL_SPI_MspInit+0xec>)
 8005370:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005374:	6453      	str	r3, [r2, #68]	; 0x44
 8005376:	4b2e      	ldr	r3, [pc, #184]	; (8005430 <HAL_SPI_MspInit+0xec>)
 8005378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800537e:	61bb      	str	r3, [r7, #24]
 8005380:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005382:	2300      	movs	r3, #0
 8005384:	617b      	str	r3, [r7, #20]
 8005386:	4b2a      	ldr	r3, [pc, #168]	; (8005430 <HAL_SPI_MspInit+0xec>)
 8005388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538a:	4a29      	ldr	r2, [pc, #164]	; (8005430 <HAL_SPI_MspInit+0xec>)
 800538c:	f043 0301 	orr.w	r3, r3, #1
 8005390:	6313      	str	r3, [r2, #48]	; 0x30
 8005392:	4b27      	ldr	r3, [pc, #156]	; (8005430 <HAL_SPI_MspInit+0xec>)
 8005394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 800539e:	23e0      	movs	r3, #224	; 0xe0
 80053a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053a2:	2302      	movs	r3, #2
 80053a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a6:	2300      	movs	r3, #0
 80053a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053aa:	2303      	movs	r3, #3
 80053ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80053ae:	2305      	movs	r3, #5
 80053b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053b2:	f107 031c 	add.w	r3, r7, #28
 80053b6:	4619      	mov	r1, r3
 80053b8:	481e      	ldr	r0, [pc, #120]	; (8005434 <HAL_SPI_MspInit+0xf0>)
 80053ba:	f002 f81b 	bl	80073f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80053be:	e031      	b.n	8005424 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a1c      	ldr	r2, [pc, #112]	; (8005438 <HAL_SPI_MspInit+0xf4>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d12c      	bne.n	8005424 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80053ca:	2300      	movs	r3, #0
 80053cc:	613b      	str	r3, [r7, #16]
 80053ce:	4b18      	ldr	r3, [pc, #96]	; (8005430 <HAL_SPI_MspInit+0xec>)
 80053d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d2:	4a17      	ldr	r2, [pc, #92]	; (8005430 <HAL_SPI_MspInit+0xec>)
 80053d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053d8:	6413      	str	r3, [r2, #64]	; 0x40
 80053da:	4b15      	ldr	r3, [pc, #84]	; (8005430 <HAL_SPI_MspInit+0xec>)
 80053dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053e2:	613b      	str	r3, [r7, #16]
 80053e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053e6:	2300      	movs	r3, #0
 80053e8:	60fb      	str	r3, [r7, #12]
 80053ea:	4b11      	ldr	r3, [pc, #68]	; (8005430 <HAL_SPI_MspInit+0xec>)
 80053ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ee:	4a10      	ldr	r2, [pc, #64]	; (8005430 <HAL_SPI_MspInit+0xec>)
 80053f0:	f043 0302 	orr.w	r3, r3, #2
 80053f4:	6313      	str	r3, [r2, #48]	; 0x30
 80053f6:	4b0e      	ldr	r3, [pc, #56]	; (8005430 <HAL_SPI_MspInit+0xec>)
 80053f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	60fb      	str	r3, [r7, #12]
 8005400:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8005402:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8005406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005408:	2302      	movs	r3, #2
 800540a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800540c:	2300      	movs	r3, #0
 800540e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005410:	2303      	movs	r3, #3
 8005412:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005414:	2305      	movs	r3, #5
 8005416:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005418:	f107 031c 	add.w	r3, r7, #28
 800541c:	4619      	mov	r1, r3
 800541e:	4807      	ldr	r0, [pc, #28]	; (800543c <HAL_SPI_MspInit+0xf8>)
 8005420:	f001 ffe8 	bl	80073f4 <HAL_GPIO_Init>
}
 8005424:	bf00      	nop
 8005426:	3730      	adds	r7, #48	; 0x30
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	40013000 	.word	0x40013000
 8005430:	40023800 	.word	0x40023800
 8005434:	40020000 	.word	0x40020000
 8005438:	40003800 	.word	0x40003800
 800543c:	40020400 	.word	0x40020400

08005440 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b08c      	sub	sp, #48	; 0x30
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005448:	f107 031c 	add.w	r3, r7, #28
 800544c:	2200      	movs	r2, #0
 800544e:	601a      	str	r2, [r3, #0]
 8005450:	605a      	str	r2, [r3, #4]
 8005452:	609a      	str	r2, [r3, #8]
 8005454:	60da      	str	r2, [r3, #12]
 8005456:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005460:	d12d      	bne.n	80054be <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005462:	2300      	movs	r3, #0
 8005464:	61bb      	str	r3, [r7, #24]
 8005466:	4b30      	ldr	r3, [pc, #192]	; (8005528 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546a:	4a2f      	ldr	r2, [pc, #188]	; (8005528 <HAL_TIM_Encoder_MspInit+0xe8>)
 800546c:	f043 0301 	orr.w	r3, r3, #1
 8005470:	6413      	str	r3, [r2, #64]	; 0x40
 8005472:	4b2d      	ldr	r3, [pc, #180]	; (8005528 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	61bb      	str	r3, [r7, #24]
 800547c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800547e:	2300      	movs	r3, #0
 8005480:	617b      	str	r3, [r7, #20]
 8005482:	4b29      	ldr	r3, [pc, #164]	; (8005528 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005486:	4a28      	ldr	r2, [pc, #160]	; (8005528 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005488:	f043 0301 	orr.w	r3, r3, #1
 800548c:	6313      	str	r3, [r2, #48]	; 0x30
 800548e:	4b26      	ldr	r3, [pc, #152]	; (8005528 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	617b      	str	r3, [r7, #20]
 8005498:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 800549a:	f248 0302 	movw	r3, #32770	; 0x8002
 800549e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054a0:	2302      	movs	r3, #2
 80054a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80054a4:	2301      	movs	r3, #1
 80054a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054a8:	2300      	movs	r3, #0
 80054aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80054ac:	2301      	movs	r3, #1
 80054ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054b0:	f107 031c 	add.w	r3, r7, #28
 80054b4:	4619      	mov	r1, r3
 80054b6:	481d      	ldr	r0, [pc, #116]	; (800552c <HAL_TIM_Encoder_MspInit+0xec>)
 80054b8:	f001 ff9c 	bl	80073f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80054bc:	e030      	b.n	8005520 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a1b      	ldr	r2, [pc, #108]	; (8005530 <HAL_TIM_Encoder_MspInit+0xf0>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d12b      	bne.n	8005520 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80054c8:	2300      	movs	r3, #0
 80054ca:	613b      	str	r3, [r7, #16]
 80054cc:	4b16      	ldr	r3, [pc, #88]	; (8005528 <HAL_TIM_Encoder_MspInit+0xe8>)
 80054ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d0:	4a15      	ldr	r2, [pc, #84]	; (8005528 <HAL_TIM_Encoder_MspInit+0xe8>)
 80054d2:	f043 0304 	orr.w	r3, r3, #4
 80054d6:	6413      	str	r3, [r2, #64]	; 0x40
 80054d8:	4b13      	ldr	r3, [pc, #76]	; (8005528 <HAL_TIM_Encoder_MspInit+0xe8>)
 80054da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054dc:	f003 0304 	and.w	r3, r3, #4
 80054e0:	613b      	str	r3, [r7, #16]
 80054e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054e4:	2300      	movs	r3, #0
 80054e6:	60fb      	str	r3, [r7, #12]
 80054e8:	4b0f      	ldr	r3, [pc, #60]	; (8005528 <HAL_TIM_Encoder_MspInit+0xe8>)
 80054ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ec:	4a0e      	ldr	r2, [pc, #56]	; (8005528 <HAL_TIM_Encoder_MspInit+0xe8>)
 80054ee:	f043 0302 	orr.w	r3, r3, #2
 80054f2:	6313      	str	r3, [r2, #48]	; 0x30
 80054f4:	4b0c      	ldr	r3, [pc, #48]	; (8005528 <HAL_TIM_Encoder_MspInit+0xe8>)
 80054f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	60fb      	str	r3, [r7, #12]
 80054fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005500:	23c0      	movs	r3, #192	; 0xc0
 8005502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005504:	2302      	movs	r3, #2
 8005506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005508:	2301      	movs	r3, #1
 800550a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800550c:	2300      	movs	r3, #0
 800550e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005510:	2302      	movs	r3, #2
 8005512:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005514:	f107 031c 	add.w	r3, r7, #28
 8005518:	4619      	mov	r1, r3
 800551a:	4806      	ldr	r0, [pc, #24]	; (8005534 <HAL_TIM_Encoder_MspInit+0xf4>)
 800551c:	f001 ff6a 	bl	80073f4 <HAL_GPIO_Init>
}
 8005520:	bf00      	nop
 8005522:	3730      	adds	r7, #48	; 0x30
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	40023800 	.word	0x40023800
 800552c:	40020000 	.word	0x40020000
 8005530:	40000800 	.word	0x40000800
 8005534:	40020400 	.word	0x40020400

08005538 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a0e      	ldr	r2, [pc, #56]	; (8005580 <HAL_TIM_Base_MspInit+0x48>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d115      	bne.n	8005576 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800554a:	2300      	movs	r3, #0
 800554c:	60fb      	str	r3, [r7, #12]
 800554e:	4b0d      	ldr	r3, [pc, #52]	; (8005584 <HAL_TIM_Base_MspInit+0x4c>)
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	4a0c      	ldr	r2, [pc, #48]	; (8005584 <HAL_TIM_Base_MspInit+0x4c>)
 8005554:	f043 0302 	orr.w	r3, r3, #2
 8005558:	6413      	str	r3, [r2, #64]	; 0x40
 800555a:	4b0a      	ldr	r3, [pc, #40]	; (8005584 <HAL_TIM_Base_MspInit+0x4c>)
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005566:	2200      	movs	r2, #0
 8005568:	2100      	movs	r1, #0
 800556a:	201d      	movs	r0, #29
 800556c:	f001 fb2b 	bl	8006bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005570:	201d      	movs	r0, #29
 8005572:	f001 fb44 	bl	8006bfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005576:	bf00      	nop
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	40000400 	.word	0x40000400
 8005584:	40023800 	.word	0x40023800

08005588 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b088      	sub	sp, #32
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005590:	f107 030c 	add.w	r3, r7, #12
 8005594:	2200      	movs	r2, #0
 8005596:	601a      	str	r2, [r3, #0]
 8005598:	605a      	str	r2, [r3, #4]
 800559a:	609a      	str	r2, [r3, #8]
 800559c:	60da      	str	r2, [r3, #12]
 800559e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a12      	ldr	r2, [pc, #72]	; (80055f0 <HAL_TIM_MspPostInit+0x68>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d11d      	bne.n	80055e6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055aa:	2300      	movs	r3, #0
 80055ac:	60bb      	str	r3, [r7, #8]
 80055ae:	4b11      	ldr	r3, [pc, #68]	; (80055f4 <HAL_TIM_MspPostInit+0x6c>)
 80055b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b2:	4a10      	ldr	r2, [pc, #64]	; (80055f4 <HAL_TIM_MspPostInit+0x6c>)
 80055b4:	f043 0302 	orr.w	r3, r3, #2
 80055b8:	6313      	str	r3, [r2, #48]	; 0x30
 80055ba:	4b0e      	ldr	r3, [pc, #56]	; (80055f4 <HAL_TIM_MspPostInit+0x6c>)
 80055bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	60bb      	str	r3, [r7, #8]
 80055c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80055c6:	2330      	movs	r3, #48	; 0x30
 80055c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ca:	2302      	movs	r3, #2
 80055cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ce:	2300      	movs	r3, #0
 80055d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055d2:	2300      	movs	r3, #0
 80055d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80055d6:	2302      	movs	r3, #2
 80055d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055da:	f107 030c 	add.w	r3, r7, #12
 80055de:	4619      	mov	r1, r3
 80055e0:	4805      	ldr	r0, [pc, #20]	; (80055f8 <HAL_TIM_MspPostInit+0x70>)
 80055e2:	f001 ff07 	bl	80073f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80055e6:	bf00      	nop
 80055e8:	3720      	adds	r7, #32
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	40000400 	.word	0x40000400
 80055f4:	40023800 	.word	0x40023800
 80055f8:	40020400 	.word	0x40020400

080055fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b08c      	sub	sp, #48	; 0x30
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005604:	f107 031c 	add.w	r3, r7, #28
 8005608:	2200      	movs	r2, #0
 800560a:	601a      	str	r2, [r3, #0]
 800560c:	605a      	str	r2, [r3, #4]
 800560e:	609a      	str	r2, [r3, #8]
 8005610:	60da      	str	r2, [r3, #12]
 8005612:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a33      	ldr	r2, [pc, #204]	; (80056e8 <HAL_UART_MspInit+0xec>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d12d      	bne.n	800567a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800561e:	2300      	movs	r3, #0
 8005620:	61bb      	str	r3, [r7, #24]
 8005622:	4b32      	ldr	r3, [pc, #200]	; (80056ec <HAL_UART_MspInit+0xf0>)
 8005624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005626:	4a31      	ldr	r2, [pc, #196]	; (80056ec <HAL_UART_MspInit+0xf0>)
 8005628:	f043 0310 	orr.w	r3, r3, #16
 800562c:	6453      	str	r3, [r2, #68]	; 0x44
 800562e:	4b2f      	ldr	r3, [pc, #188]	; (80056ec <HAL_UART_MspInit+0xf0>)
 8005630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005632:	f003 0310 	and.w	r3, r3, #16
 8005636:	61bb      	str	r3, [r7, #24]
 8005638:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800563a:	2300      	movs	r3, #0
 800563c:	617b      	str	r3, [r7, #20]
 800563e:	4b2b      	ldr	r3, [pc, #172]	; (80056ec <HAL_UART_MspInit+0xf0>)
 8005640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005642:	4a2a      	ldr	r2, [pc, #168]	; (80056ec <HAL_UART_MspInit+0xf0>)
 8005644:	f043 0301 	orr.w	r3, r3, #1
 8005648:	6313      	str	r3, [r2, #48]	; 0x30
 800564a:	4b28      	ldr	r3, [pc, #160]	; (80056ec <HAL_UART_MspInit+0xf0>)
 800564c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	617b      	str	r3, [r7, #20]
 8005654:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005656:	f44f 7300 	mov.w	r3, #512	; 0x200
 800565a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800565c:	2302      	movs	r3, #2
 800565e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005660:	2300      	movs	r3, #0
 8005662:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005664:	2300      	movs	r3, #0
 8005666:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005668:	2307      	movs	r3, #7
 800566a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800566c:	f107 031c 	add.w	r3, r7, #28
 8005670:	4619      	mov	r1, r3
 8005672:	481f      	ldr	r0, [pc, #124]	; (80056f0 <HAL_UART_MspInit+0xf4>)
 8005674:	f001 febe 	bl	80073f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005678:	e031      	b.n	80056de <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a1d      	ldr	r2, [pc, #116]	; (80056f4 <HAL_UART_MspInit+0xf8>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d12c      	bne.n	80056de <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005684:	2300      	movs	r3, #0
 8005686:	613b      	str	r3, [r7, #16]
 8005688:	4b18      	ldr	r3, [pc, #96]	; (80056ec <HAL_UART_MspInit+0xf0>)
 800568a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800568c:	4a17      	ldr	r2, [pc, #92]	; (80056ec <HAL_UART_MspInit+0xf0>)
 800568e:	f043 0320 	orr.w	r3, r3, #32
 8005692:	6453      	str	r3, [r2, #68]	; 0x44
 8005694:	4b15      	ldr	r3, [pc, #84]	; (80056ec <HAL_UART_MspInit+0xf0>)
 8005696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005698:	f003 0320 	and.w	r3, r3, #32
 800569c:	613b      	str	r3, [r7, #16]
 800569e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056a0:	2300      	movs	r3, #0
 80056a2:	60fb      	str	r3, [r7, #12]
 80056a4:	4b11      	ldr	r3, [pc, #68]	; (80056ec <HAL_UART_MspInit+0xf0>)
 80056a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a8:	4a10      	ldr	r2, [pc, #64]	; (80056ec <HAL_UART_MspInit+0xf0>)
 80056aa:	f043 0301 	orr.w	r3, r3, #1
 80056ae:	6313      	str	r3, [r2, #48]	; 0x30
 80056b0:	4b0e      	ldr	r3, [pc, #56]	; (80056ec <HAL_UART_MspInit+0xf0>)
 80056b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	60fb      	str	r3, [r7, #12]
 80056ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80056bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80056c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056c2:	2302      	movs	r3, #2
 80056c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80056c6:	2301      	movs	r3, #1
 80056c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056ca:	2300      	movs	r3, #0
 80056cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80056ce:	2308      	movs	r3, #8
 80056d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056d2:	f107 031c 	add.w	r3, r7, #28
 80056d6:	4619      	mov	r1, r3
 80056d8:	4805      	ldr	r0, [pc, #20]	; (80056f0 <HAL_UART_MspInit+0xf4>)
 80056da:	f001 fe8b 	bl	80073f4 <HAL_GPIO_Init>
}
 80056de:	bf00      	nop
 80056e0:	3730      	adds	r7, #48	; 0x30
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	40011000 	.word	0x40011000
 80056ec:	40023800 	.word	0x40023800
 80056f0:	40020000 	.word	0x40020000
 80056f4:	40011400 	.word	0x40011400

080056f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80056f8:	b480      	push	{r7}
 80056fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80056fc:	e7fe      	b.n	80056fc <NMI_Handler+0x4>

080056fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80056fe:	b480      	push	{r7}
 8005700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005702:	e7fe      	b.n	8005702 <HardFault_Handler+0x4>

08005704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005704:	b480      	push	{r7}
 8005706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005708:	e7fe      	b.n	8005708 <MemManage_Handler+0x4>

0800570a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800570a:	b480      	push	{r7}
 800570c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800570e:	e7fe      	b.n	800570e <BusFault_Handler+0x4>

08005710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005710:	b480      	push	{r7}
 8005712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005714:	e7fe      	b.n	8005714 <UsageFault_Handler+0x4>

08005716 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005716:	b480      	push	{r7}
 8005718:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800571a:	bf00      	nop
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005724:	b480      	push	{r7}
 8005726:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005728:	bf00      	nop
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005732:	b480      	push	{r7}
 8005734:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005736:	bf00      	nop
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005744:	f000 f8b0 	bl	80058a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005748:	bf00      	nop
 800574a:	bd80      	pop	{r7, pc}

0800574c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005750:	4802      	ldr	r0, [pc, #8]	; (800575c <TIM3_IRQHandler+0x10>)
 8005752:	f004 fc81 	bl	800a058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005756:	bf00      	nop
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	200101a8 	.word	0x200101a8

08005760 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(record_pin_Pin);
 8005764:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005768:	f001 ffe2 	bl	8007730 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800576c:	bf00      	nop
 800576e:	bd80      	pop	{r7, pc}

08005770 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005774:	4802      	ldr	r0, [pc, #8]	; (8005780 <DMA2_Stream4_IRQHandler+0x10>)
 8005776:	f001 fbd3 	bl	8006f20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800577a:	bf00      	nop
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	2000fffc 	.word	0x2000fffc

08005784 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005784:	b480      	push	{r7}
 8005786:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005788:	4b08      	ldr	r3, [pc, #32]	; (80057ac <SystemInit+0x28>)
 800578a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800578e:	4a07      	ldr	r2, [pc, #28]	; (80057ac <SystemInit+0x28>)
 8005790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005798:	4b04      	ldr	r3, [pc, #16]	; (80057ac <SystemInit+0x28>)
 800579a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800579e:	609a      	str	r2, [r3, #8]
#endif
}
 80057a0:	bf00      	nop
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	e000ed00 	.word	0xe000ed00

080057b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80057b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80057e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80057b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80057b6:	e003      	b.n	80057c0 <LoopCopyDataInit>

080057b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80057b8:	4b0c      	ldr	r3, [pc, #48]	; (80057ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80057ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80057bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80057be:	3104      	adds	r1, #4

080057c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80057c0:	480b      	ldr	r0, [pc, #44]	; (80057f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80057c2:	4b0c      	ldr	r3, [pc, #48]	; (80057f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80057c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80057c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80057c8:	d3f6      	bcc.n	80057b8 <CopyDataInit>
  ldr  r2, =_sbss
 80057ca:	4a0b      	ldr	r2, [pc, #44]	; (80057f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80057cc:	e002      	b.n	80057d4 <LoopFillZerobss>

080057ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80057ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80057d0:	f842 3b04 	str.w	r3, [r2], #4

080057d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80057d4:	4b09      	ldr	r3, [pc, #36]	; (80057fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80057d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80057d8:	d3f9      	bcc.n	80057ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80057da:	f7ff ffd3 	bl	8005784 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80057de:	f005 fe5b 	bl	800b498 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80057e2:	f7fe fa5f 	bl	8003ca4 <main>
  bx  lr    
 80057e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80057e8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80057ec:	0800cee0 	.word	0x0800cee0
  ldr  r0, =_sdata
 80057f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80057f4:	20000404 	.word	0x20000404
  ldr  r2, =_sbss
 80057f8:	20000404 	.word	0x20000404
  ldr  r3, = _ebss
 80057fc:	200102c4 	.word	0x200102c4

08005800 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005800:	e7fe      	b.n	8005800 <ADC_IRQHandler>
	...

08005804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005808:	4b0e      	ldr	r3, [pc, #56]	; (8005844 <HAL_Init+0x40>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a0d      	ldr	r2, [pc, #52]	; (8005844 <HAL_Init+0x40>)
 800580e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005812:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005814:	4b0b      	ldr	r3, [pc, #44]	; (8005844 <HAL_Init+0x40>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a0a      	ldr	r2, [pc, #40]	; (8005844 <HAL_Init+0x40>)
 800581a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800581e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005820:	4b08      	ldr	r3, [pc, #32]	; (8005844 <HAL_Init+0x40>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a07      	ldr	r2, [pc, #28]	; (8005844 <HAL_Init+0x40>)
 8005826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800582a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800582c:	2003      	movs	r0, #3
 800582e:	f001 f9bf 	bl	8006bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005832:	2000      	movs	r0, #0
 8005834:	f000 f808 	bl	8005848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005838:	f7ff fc6e 	bl	8005118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	40023c00 	.word	0x40023c00

08005848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005850:	4b12      	ldr	r3, [pc, #72]	; (800589c <HAL_InitTick+0x54>)
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	4b12      	ldr	r3, [pc, #72]	; (80058a0 <HAL_InitTick+0x58>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	4619      	mov	r1, r3
 800585a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800585e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005862:	fbb2 f3f3 	udiv	r3, r2, r3
 8005866:	4618      	mov	r0, r3
 8005868:	f001 f9d7 	bl	8006c1a <HAL_SYSTICK_Config>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e00e      	b.n	8005894 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b0f      	cmp	r3, #15
 800587a:	d80a      	bhi.n	8005892 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800587c:	2200      	movs	r2, #0
 800587e:	6879      	ldr	r1, [r7, #4]
 8005880:	f04f 30ff 	mov.w	r0, #4294967295
 8005884:	f001 f99f 	bl	8006bc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005888:	4a06      	ldr	r2, [pc, #24]	; (80058a4 <HAL_InitTick+0x5c>)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800588e:	2300      	movs	r3, #0
 8005890:	e000      	b.n	8005894 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
}
 8005894:	4618      	mov	r0, r3
 8005896:	3708      	adds	r7, #8
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	20000394 	.word	0x20000394
 80058a0:	2000039c 	.word	0x2000039c
 80058a4:	20000398 	.word	0x20000398

080058a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80058a8:	b480      	push	{r7}
 80058aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80058ac:	4b06      	ldr	r3, [pc, #24]	; (80058c8 <HAL_IncTick+0x20>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	461a      	mov	r2, r3
 80058b2:	4b06      	ldr	r3, [pc, #24]	; (80058cc <HAL_IncTick+0x24>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4413      	add	r3, r2
 80058b8:	4a04      	ldr	r2, [pc, #16]	; (80058cc <HAL_IncTick+0x24>)
 80058ba:	6013      	str	r3, [r2, #0]
}
 80058bc:	bf00      	nop
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	2000039c 	.word	0x2000039c
 80058cc:	200102c0 	.word	0x200102c0

080058d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80058d0:	b480      	push	{r7}
 80058d2:	af00      	add	r7, sp, #0
  return uwTick;
 80058d4:	4b03      	ldr	r3, [pc, #12]	; (80058e4 <HAL_GetTick+0x14>)
 80058d6:	681b      	ldr	r3, [r3, #0]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	200102c0 	.word	0x200102c0

080058e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80058f0:	f7ff ffee 	bl	80058d0 <HAL_GetTick>
 80058f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005900:	d005      	beq.n	800590e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005902:	4b0a      	ldr	r3, [pc, #40]	; (800592c <HAL_Delay+0x44>)
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	461a      	mov	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4413      	add	r3, r2
 800590c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800590e:	bf00      	nop
 8005910:	f7ff ffde 	bl	80058d0 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	429a      	cmp	r2, r3
 800591e:	d8f7      	bhi.n	8005910 <HAL_Delay+0x28>
  {
  }
}
 8005920:	bf00      	nop
 8005922:	bf00      	nop
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	2000039c 	.word	0x2000039c

08005930 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005938:	2300      	movs	r3, #0
 800593a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d101      	bne.n	8005946 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e033      	b.n	80059ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594a:	2b00      	cmp	r3, #0
 800594c:	d109      	bne.n	8005962 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f7ff fc0a 	bl	8005168 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005966:	f003 0310 	and.w	r3, r3, #16
 800596a:	2b00      	cmp	r3, #0
 800596c:	d118      	bne.n	80059a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005972:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005976:	f023 0302 	bic.w	r3, r3, #2
 800597a:	f043 0202 	orr.w	r2, r3, #2
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 fbde 	bl	8006144 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005992:	f023 0303 	bic.w	r3, r3, #3
 8005996:	f043 0201 	orr.w	r2, r3, #1
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	641a      	str	r2, [r3, #64]	; 0x40
 800599e:	e001      	b.n	80059a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
	...

080059b8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d101      	bne.n	80059d2 <HAL_ADC_Start+0x1a>
 80059ce:	2302      	movs	r3, #2
 80059d0:	e097      	b.n	8005b02 <HAL_ADC_Start+0x14a>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d018      	beq.n	8005a1a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689a      	ldr	r2, [r3, #8]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f042 0201 	orr.w	r2, r2, #1
 80059f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80059f8:	4b45      	ldr	r3, [pc, #276]	; (8005b10 <HAL_ADC_Start+0x158>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a45      	ldr	r2, [pc, #276]	; (8005b14 <HAL_ADC_Start+0x15c>)
 80059fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005a02:	0c9a      	lsrs	r2, r3, #18
 8005a04:	4613      	mov	r3, r2
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	4413      	add	r3, r2
 8005a0a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005a0c:	e002      	b.n	8005a14 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	3b01      	subs	r3, #1
 8005a12:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1f9      	bne.n	8005a0e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f003 0301 	and.w	r3, r3, #1
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d15f      	bne.n	8005ae8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005a30:	f023 0301 	bic.w	r3, r3, #1
 8005a34:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d007      	beq.n	8005a5a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005a52:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a66:	d106      	bne.n	8005a76 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6c:	f023 0206 	bic.w	r2, r3, #6
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	645a      	str	r2, [r3, #68]	; 0x44
 8005a74:	e002      	b.n	8005a7c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a84:	4b24      	ldr	r3, [pc, #144]	; (8005b18 <HAL_ADC_Start+0x160>)
 8005a86:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005a90:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f003 031f 	and.w	r3, r3, #31
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10f      	bne.n	8005abe <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d129      	bne.n	8005b00 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689a      	ldr	r2, [r3, #8]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005aba:	609a      	str	r2, [r3, #8]
 8005abc:	e020      	b.n	8005b00 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a16      	ldr	r2, [pc, #88]	; (8005b1c <HAL_ADC_Start+0x164>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d11b      	bne.n	8005b00 <HAL_ADC_Start+0x148>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d114      	bne.n	8005b00 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005ae4:	609a      	str	r2, [r3, #8]
 8005ae6:	e00b      	b.n	8005b00 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aec:	f043 0210 	orr.w	r2, r3, #16
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af8:	f043 0201 	orr.w	r2, r3, #1
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	20000394 	.word	0x20000394
 8005b14:	431bde83 	.word	0x431bde83
 8005b18:	40012300 	.word	0x40012300
 8005b1c:	40012000 	.word	0x40012000

08005b20 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b3c:	d113      	bne.n	8005b66 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005b48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b4c:	d10b      	bne.n	8005b66 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b52:	f043 0220 	orr.w	r2, r3, #32
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e063      	b.n	8005c2e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005b66:	f7ff feb3 	bl	80058d0 <HAL_GetTick>
 8005b6a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005b6c:	e021      	b.n	8005bb2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b74:	d01d      	beq.n	8005bb2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d007      	beq.n	8005b8c <HAL_ADC_PollForConversion+0x6c>
 8005b7c:	f7ff fea8 	bl	80058d0 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d212      	bcs.n	8005bb2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d00b      	beq.n	8005bb2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	f043 0204 	orr.w	r2, r3, #4
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e03d      	b.n	8005c2e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0302 	and.w	r3, r3, #2
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d1d6      	bne.n	8005b6e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f06f 0212 	mvn.w	r2, #18
 8005bc8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d123      	bne.n	8005c2c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d11f      	bne.n	8005c2c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d006      	beq.n	8005c08 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d111      	bne.n	8005c2c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d105      	bne.n	8005c2c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c24:	f043 0201 	orr.w	r2, r3, #1
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
	...

08005c38 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005c44:	2300      	movs	r3, #0
 8005c46:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d101      	bne.n	8005c56 <HAL_ADC_Start_DMA+0x1e>
 8005c52:	2302      	movs	r3, #2
 8005c54:	e0ce      	b.n	8005df4 <HAL_ADC_Start_DMA+0x1bc>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d018      	beq.n	8005c9e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689a      	ldr	r2, [r3, #8]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f042 0201 	orr.w	r2, r2, #1
 8005c7a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005c7c:	4b5f      	ldr	r3, [pc, #380]	; (8005dfc <HAL_ADC_Start_DMA+0x1c4>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a5f      	ldr	r2, [pc, #380]	; (8005e00 <HAL_ADC_Start_DMA+0x1c8>)
 8005c82:	fba2 2303 	umull	r2, r3, r2, r3
 8005c86:	0c9a      	lsrs	r2, r3, #18
 8005c88:	4613      	mov	r3, r2
 8005c8a:	005b      	lsls	r3, r3, #1
 8005c8c:	4413      	add	r3, r2
 8005c8e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005c90:	e002      	b.n	8005c98 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	3b01      	subs	r3, #1
 8005c96:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1f9      	bne.n	8005c92 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cac:	d107      	bne.n	8005cbe <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689a      	ldr	r2, [r3, #8]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cbc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	f040 8086 	bne.w	8005dda <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005cd6:	f023 0301 	bic.w	r3, r3, #1
 8005cda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d007      	beq.n	8005d00 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005cf8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d0c:	d106      	bne.n	8005d1c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d12:	f023 0206 	bic.w	r2, r3, #6
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	645a      	str	r2, [r3, #68]	; 0x44
 8005d1a:	e002      	b.n	8005d22 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005d2a:	4b36      	ldr	r3, [pc, #216]	; (8005e04 <HAL_ADC_Start_DMA+0x1cc>)
 8005d2c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d32:	4a35      	ldr	r2, [pc, #212]	; (8005e08 <HAL_ADC_Start_DMA+0x1d0>)
 8005d34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3a:	4a34      	ldr	r2, [pc, #208]	; (8005e0c <HAL_ADC_Start_DMA+0x1d4>)
 8005d3c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d42:	4a33      	ldr	r2, [pc, #204]	; (8005e10 <HAL_ADC_Start_DMA+0x1d8>)
 8005d44:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005d4e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005d5e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	689a      	ldr	r2, [r3, #8]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d6e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	334c      	adds	r3, #76	; 0x4c
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f001 f806 	bl	8006d90 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f003 031f 	and.w	r3, r3, #31
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10f      	bne.n	8005db0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d129      	bne.n	8005df2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005dac:	609a      	str	r2, [r3, #8]
 8005dae:	e020      	b.n	8005df2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a17      	ldr	r2, [pc, #92]	; (8005e14 <HAL_ADC_Start_DMA+0x1dc>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d11b      	bne.n	8005df2 <HAL_ADC_Start_DMA+0x1ba>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d114      	bne.n	8005df2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689a      	ldr	r2, [r3, #8]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005dd6:	609a      	str	r2, [r3, #8]
 8005dd8:	e00b      	b.n	8005df2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dde:	f043 0210 	orr.w	r2, r3, #16
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dea:	f043 0201 	orr.w	r2, r3, #1
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3718      	adds	r7, #24
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	20000394 	.word	0x20000394
 8005e00:	431bde83 	.word	0x431bde83
 8005e04:	40012300 	.word	0x40012300
 8005e08:	0800633d 	.word	0x0800633d
 8005e0c:	080063f7 	.word	0x080063f7
 8005e10:	08006413 	.word	0x08006413
 8005e14:	40012000 	.word	0x40012000

08005e18 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e20:	2300      	movs	r3, #0
 8005e22:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d101      	bne.n	8005e32 <HAL_ADC_Stop_DMA+0x1a>
 8005e2e:	2302      	movs	r3, #2
 8005e30:	e048      	b.n	8005ec4 <HAL_ADC_Stop_DMA+0xac>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	689a      	ldr	r2, [r3, #8]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 0201 	bic.w	r2, r2, #1
 8005e48:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d130      	bne.n	8005eba <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689a      	ldr	r2, [r3, #8]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e66:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d10f      	bne.n	8005e96 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 ffe0 	bl	8006e40 <HAL_DMA_Abort>
 8005e80:	4603      	mov	r3, r0
 8005e82:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8005e84:	7bfb      	ldrb	r3, [r7, #15]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d005      	beq.n	8005e96 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8005ea4:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005eae:	f023 0301 	bic.w	r3, r3, #1
 8005eb2:	f043 0201 	orr.w	r2, r3, #1
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005eea:	2300      	movs	r3, #0
 8005eec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d101      	bne.n	8005efc <HAL_ADC_ConfigChannel+0x1c>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	e113      	b.n	8006124 <HAL_ADC_ConfigChannel+0x244>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2b09      	cmp	r3, #9
 8005f0a:	d925      	bls.n	8005f58 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68d9      	ldr	r1, [r3, #12]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	461a      	mov	r2, r3
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	005b      	lsls	r3, r3, #1
 8005f1e:	4413      	add	r3, r2
 8005f20:	3b1e      	subs	r3, #30
 8005f22:	2207      	movs	r2, #7
 8005f24:	fa02 f303 	lsl.w	r3, r2, r3
 8005f28:	43da      	mvns	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	400a      	ands	r2, r1
 8005f30:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68d9      	ldr	r1, [r3, #12]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	689a      	ldr	r2, [r3, #8]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	4618      	mov	r0, r3
 8005f44:	4603      	mov	r3, r0
 8005f46:	005b      	lsls	r3, r3, #1
 8005f48:	4403      	add	r3, r0
 8005f4a:	3b1e      	subs	r3, #30
 8005f4c:	409a      	lsls	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	60da      	str	r2, [r3, #12]
 8005f56:	e022      	b.n	8005f9e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6919      	ldr	r1, [r3, #16]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	461a      	mov	r2, r3
 8005f66:	4613      	mov	r3, r2
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	4413      	add	r3, r2
 8005f6c:	2207      	movs	r2, #7
 8005f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f72:	43da      	mvns	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	400a      	ands	r2, r1
 8005f7a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6919      	ldr	r1, [r3, #16]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	689a      	ldr	r2, [r3, #8]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	4603      	mov	r3, r0
 8005f90:	005b      	lsls	r3, r3, #1
 8005f92:	4403      	add	r3, r0
 8005f94:	409a      	lsls	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	2b06      	cmp	r3, #6
 8005fa4:	d824      	bhi.n	8005ff0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	3b05      	subs	r3, #5
 8005fb8:	221f      	movs	r2, #31
 8005fba:	fa02 f303 	lsl.w	r3, r2, r3
 8005fbe:	43da      	mvns	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	400a      	ands	r2, r1
 8005fc6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	3b05      	subs	r3, #5
 8005fe2:	fa00 f203 	lsl.w	r2, r0, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	635a      	str	r2, [r3, #52]	; 0x34
 8005fee:	e04c      	b.n	800608a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	2b0c      	cmp	r3, #12
 8005ff6:	d824      	bhi.n	8006042 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	4613      	mov	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4413      	add	r3, r2
 8006008:	3b23      	subs	r3, #35	; 0x23
 800600a:	221f      	movs	r2, #31
 800600c:	fa02 f303 	lsl.w	r3, r2, r3
 8006010:	43da      	mvns	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	400a      	ands	r2, r1
 8006018:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	b29b      	uxth	r3, r3
 8006026:	4618      	mov	r0, r3
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	4613      	mov	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	3b23      	subs	r3, #35	; 0x23
 8006034:	fa00 f203 	lsl.w	r2, r0, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	430a      	orrs	r2, r1
 800603e:	631a      	str	r2, [r3, #48]	; 0x30
 8006040:	e023      	b.n	800608a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	4613      	mov	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4413      	add	r3, r2
 8006052:	3b41      	subs	r3, #65	; 0x41
 8006054:	221f      	movs	r2, #31
 8006056:	fa02 f303 	lsl.w	r3, r2, r3
 800605a:	43da      	mvns	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	400a      	ands	r2, r1
 8006062:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	b29b      	uxth	r3, r3
 8006070:	4618      	mov	r0, r3
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	685a      	ldr	r2, [r3, #4]
 8006076:	4613      	mov	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	3b41      	subs	r3, #65	; 0x41
 800607e:	fa00 f203 	lsl.w	r2, r0, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	430a      	orrs	r2, r1
 8006088:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800608a:	4b29      	ldr	r3, [pc, #164]	; (8006130 <HAL_ADC_ConfigChannel+0x250>)
 800608c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a28      	ldr	r2, [pc, #160]	; (8006134 <HAL_ADC_ConfigChannel+0x254>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d10f      	bne.n	80060b8 <HAL_ADC_ConfigChannel+0x1d8>
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2b12      	cmp	r3, #18
 800609e:	d10b      	bne.n	80060b8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a1d      	ldr	r2, [pc, #116]	; (8006134 <HAL_ADC_ConfigChannel+0x254>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d12b      	bne.n	800611a <HAL_ADC_ConfigChannel+0x23a>
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a1c      	ldr	r2, [pc, #112]	; (8006138 <HAL_ADC_ConfigChannel+0x258>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d003      	beq.n	80060d4 <HAL_ADC_ConfigChannel+0x1f4>
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2b11      	cmp	r3, #17
 80060d2:	d122      	bne.n	800611a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a11      	ldr	r2, [pc, #68]	; (8006138 <HAL_ADC_ConfigChannel+0x258>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d111      	bne.n	800611a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80060f6:	4b11      	ldr	r3, [pc, #68]	; (800613c <HAL_ADC_ConfigChannel+0x25c>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a11      	ldr	r2, [pc, #68]	; (8006140 <HAL_ADC_ConfigChannel+0x260>)
 80060fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006100:	0c9a      	lsrs	r2, r3, #18
 8006102:	4613      	mov	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800610c:	e002      	b.n	8006114 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	3b01      	subs	r3, #1
 8006112:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1f9      	bne.n	800610e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3714      	adds	r7, #20
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr
 8006130:	40012300 	.word	0x40012300
 8006134:	40012000 	.word	0x40012000
 8006138:	10000012 	.word	0x10000012
 800613c:	20000394 	.word	0x20000394
 8006140:	431bde83 	.word	0x431bde83

08006144 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800614c:	4b79      	ldr	r3, [pc, #484]	; (8006334 <ADC_Init+0x1f0>)
 800614e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	685a      	ldr	r2, [r3, #4]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	431a      	orrs	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006178:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	6859      	ldr	r1, [r3, #4]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	021a      	lsls	r2, r3, #8
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800619c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6859      	ldr	r1, [r3, #4]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689a      	ldr	r2, [r3, #8]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	430a      	orrs	r2, r1
 80061ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689a      	ldr	r2, [r3, #8]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6899      	ldr	r1, [r3, #8]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68da      	ldr	r2, [r3, #12]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d6:	4a58      	ldr	r2, [pc, #352]	; (8006338 <ADC_Init+0x1f4>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d022      	beq.n	8006222 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	689a      	ldr	r2, [r3, #8]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80061ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6899      	ldr	r1, [r3, #8]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	689a      	ldr	r2, [r3, #8]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800620c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6899      	ldr	r1, [r3, #8]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	430a      	orrs	r2, r1
 800621e:	609a      	str	r2, [r3, #8]
 8006220:	e00f      	b.n	8006242 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006230:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	689a      	ldr	r2, [r3, #8]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006240:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	689a      	ldr	r2, [r3, #8]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f022 0202 	bic.w	r2, r2, #2
 8006250:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	6899      	ldr	r1, [r3, #8]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	7e1b      	ldrb	r3, [r3, #24]
 800625c:	005a      	lsls	r2, r3, #1
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d01b      	beq.n	80062a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	685a      	ldr	r2, [r3, #4]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800627e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800628e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6859      	ldr	r1, [r3, #4]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629a:	3b01      	subs	r3, #1
 800629c:	035a      	lsls	r2, r3, #13
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	605a      	str	r2, [r3, #4]
 80062a6:	e007      	b.n	80062b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685a      	ldr	r2, [r3, #4]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80062c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	3b01      	subs	r3, #1
 80062d4:	051a      	lsls	r2, r3, #20
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	430a      	orrs	r2, r1
 80062dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	689a      	ldr	r2, [r3, #8]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80062ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6899      	ldr	r1, [r3, #8]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80062fa:	025a      	lsls	r2, r3, #9
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	430a      	orrs	r2, r1
 8006302:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	689a      	ldr	r2, [r3, #8]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006312:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	6899      	ldr	r1, [r3, #8]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	029a      	lsls	r2, r3, #10
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	430a      	orrs	r2, r1
 8006326:	609a      	str	r2, [r3, #8]
}
 8006328:	bf00      	nop
 800632a:	3714      	adds	r7, #20
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	40012300 	.word	0x40012300
 8006338:	0f000001 	.word	0x0f000001

0800633c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006348:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006352:	2b00      	cmp	r3, #0
 8006354:	d13c      	bne.n	80063d0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d12b      	bne.n	80063c8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006374:	2b00      	cmp	r3, #0
 8006376:	d127      	bne.n	80063c8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006382:	2b00      	cmp	r3, #0
 8006384:	d006      	beq.n	8006394 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006390:	2b00      	cmp	r3, #0
 8006392:	d119      	bne.n	80063c8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685a      	ldr	r2, [r3, #4]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 0220 	bic.w	r2, r2, #32
 80063a2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d105      	bne.n	80063c8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c0:	f043 0201 	orr.w	r2, r3, #1
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f7fe fe71 	bl	80050b0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80063ce:	e00e      	b.n	80063ee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d4:	f003 0310 	and.w	r3, r3, #16
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d003      	beq.n	80063e4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f7ff fd75 	bl	8005ecc <HAL_ADC_ErrorCallback>
}
 80063e2:	e004      	b.n	80063ee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	4798      	blx	r3
}
 80063ee:	bf00      	nop
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b084      	sub	sp, #16
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006402:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f7fe fe43 	bl	8005090 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800640a:	bf00      	nop
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b084      	sub	sp, #16
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2240      	movs	r2, #64	; 0x40
 8006424:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800642a:	f043 0204 	orr.w	r2, r3, #4
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f7ff fd4a 	bl	8005ecc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006438:	bf00      	nop
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8006440:	b480      	push	{r7}
 8006442:	b087      	sub	sp, #28
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006448:	2300      	movs	r3, #0
 800644a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800644c:	2300      	movs	r3, #0
 800644e:	617b      	str	r3, [r7, #20]
 8006450:	2300      	movs	r3, #0
 8006452:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800645a:	2b01      	cmp	r3, #1
 800645c:	d101      	bne.n	8006462 <HAL_ADCEx_InjectedStart+0x22>
 800645e:	2302      	movs	r3, #2
 8006460:	e0aa      	b.n	80065b8 <HAL_ADCEx_InjectedStart+0x178>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	2b01      	cmp	r3, #1
 8006476:	d018      	beq.n	80064aa <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	689a      	ldr	r2, [r3, #8]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f042 0201 	orr.w	r2, r2, #1
 8006486:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006488:	4b4e      	ldr	r3, [pc, #312]	; (80065c4 <HAL_ADCEx_InjectedStart+0x184>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a4e      	ldr	r2, [pc, #312]	; (80065c8 <HAL_ADCEx_InjectedStart+0x188>)
 800648e:	fba2 2303 	umull	r2, r3, r2, r3
 8006492:	0c9a      	lsrs	r2, r3, #18
 8006494:	4613      	mov	r3, r2
 8006496:	005b      	lsls	r3, r3, #1
 8006498:	4413      	add	r3, r2
 800649a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800649c:	e002      	b.n	80064a4 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	3b01      	subs	r3, #1
 80064a2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1f9      	bne.n	800649e <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d172      	bne.n	800659e <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80064c0:	f023 0301 	bic.w	r3, r3, #1
 80064c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d102      	bne.n	80064de <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f06f 0204 	mvn.w	r2, #4
 80064ee:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80064f0:	4b36      	ldr	r3, [pc, #216]	; (80065cc <HAL_ADCEx_InjectedStart+0x18c>)
 80064f2:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f003 031f 	and.w	r3, r3, #31
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d124      	bne.n	800654a <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800650a:	2b00      	cmp	r3, #0
 800650c:	bf0c      	ite	eq
 800650e:	2301      	moveq	r3, #1
 8006510:	2300      	movne	r3, #0
 8006512:	b2db      	uxtb	r3, r3
 8006514:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006520:	2b00      	cmp	r3, #0
 8006522:	bf0c      	ite	eq
 8006524:	2301      	moveq	r3, #1
 8006526:	2300      	movne	r3, #0
 8006528:	b2db      	uxtb	r3, r3
 800652a:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d041      	beq.n	80065b6 <HAL_ADCEx_InjectedStart+0x176>
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d03e      	beq.n	80065b6 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	689a      	ldr	r2, [r3, #8]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006546:	609a      	str	r2, [r3, #8]
 8006548:	e035      	b.n	80065b6 <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006554:	2b00      	cmp	r3, #0
 8006556:	bf0c      	ite	eq
 8006558:	2301      	moveq	r3, #1
 800655a:	2300      	movne	r3, #0
 800655c:	b2db      	uxtb	r3, r3
 800655e:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800656a:	2b00      	cmp	r3, #0
 800656c:	bf0c      	ite	eq
 800656e:	2301      	moveq	r3, #1
 8006570:	2300      	movne	r3, #0
 8006572:	b2db      	uxtb	r3, r3
 8006574:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a15      	ldr	r2, [pc, #84]	; (80065d0 <HAL_ADCEx_InjectedStart+0x190>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d11a      	bne.n	80065b6 <HAL_ADCEx_InjectedStart+0x176>
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d017      	beq.n	80065b6 <HAL_ADCEx_InjectedStart+0x176>
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d014      	beq.n	80065b6 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689a      	ldr	r2, [r3, #8]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800659a:	609a      	str	r2, [r3, #8]
 800659c:	e00b      	b.n	80065b6 <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a2:	f043 0210 	orr.w	r2, r3, #16
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ae:	f043 0201 	orr.w	r2, r3, #1
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	371c      	adds	r7, #28
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	20000394 	.word	0x20000394
 80065c8:	431bde83 	.word	0x431bde83
 80065cc:	40012300 	.word	0x40012300
 80065d0:	40012000 	.word	0x40012000

080065d4 <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80065dc:	2300      	movs	r3, #0
 80065de:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d101      	bne.n	80065ee <HAL_ADCEx_InjectedStop+0x1a>
 80065ea:	2302      	movs	r3, #2
 80065ec:	e037      	b.n	800665e <HAL_ADCEx_InjectedStop+0x8a>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d120      	bne.n	8006644 <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 800660c:	2b00      	cmp	r3, #0
 800660e:	d119      	bne.n	8006644 <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689a      	ldr	r2, [r3, #8]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 0201 	bic.w	r2, r2, #1
 800661e:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b00      	cmp	r3, #0
 800662c:	d112      	bne.n	8006654 <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006632:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006636:	f023 0301 	bic.w	r3, r3, #1
 800663a:	f043 0201 	orr.w	r2, r3, #1
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8006642:	e007      	b.n	8006654 <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006648:	f043 0220 	orr.w	r2, r3, #32
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800665c:	7bfb      	ldrb	r3, [r7, #15]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3714      	adds	r7, #20
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
	...

0800666c <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8006676:	2300      	movs	r3, #0
 8006678:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f06f 0204 	mvn.w	r2, #4
 8006682:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	3b01      	subs	r3, #1
 8006688:	2b03      	cmp	r3, #3
 800668a:	d81f      	bhi.n	80066cc <HAL_ADCEx_InjectedGetValue+0x60>
 800668c:	a201      	add	r2, pc, #4	; (adr r2, 8006694 <HAL_ADCEx_InjectedGetValue+0x28>)
 800668e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006692:	bf00      	nop
 8006694:	080066c3 	.word	0x080066c3
 8006698:	080066b9 	.word	0x080066b9
 800669c:	080066af 	.word	0x080066af
 80066a0:	080066a5 	.word	0x080066a5
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066aa:	60fb      	str	r3, [r7, #12]
    }  
    break;
 80066ac:	e00f      	b.n	80066ce <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066b4:	60fb      	str	r3, [r7, #12]
    }  
    break;
 80066b6:	e00a      	b.n	80066ce <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066be:	60fb      	str	r3, [r7, #12]
    }
    break;
 80066c0:	e005      	b.n	80066ce <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c8:	60fb      	str	r3, [r7, #12]
    }
    break;
 80066ca:	e000      	b.n	80066ce <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 80066cc:	bf00      	nop
  }
  return tmp;
 80066ce:	68fb      	ldr	r3, [r7, #12]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3714      	adds	r7, #20
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d101      	bne.n	80066f4 <HAL_ADCEx_InjectedConfigChannel+0x18>
 80066f0:	2302      	movs	r3, #2
 80066f2:	e17e      	b.n	80069f2 <HAL_ADCEx_InjectedConfigChannel+0x316>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b09      	cmp	r3, #9
 8006702:	d925      	bls.n	8006750 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68d9      	ldr	r1, [r3, #12]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	b29b      	uxth	r3, r3
 8006710:	461a      	mov	r2, r3
 8006712:	4613      	mov	r3, r2
 8006714:	005b      	lsls	r3, r3, #1
 8006716:	4413      	add	r3, r2
 8006718:	3b1e      	subs	r3, #30
 800671a:	2207      	movs	r2, #7
 800671c:	fa02 f303 	lsl.w	r3, r2, r3
 8006720:	43da      	mvns	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	400a      	ands	r2, r1
 8006728:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68d9      	ldr	r1, [r3, #12]
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	689a      	ldr	r2, [r3, #8]
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	b29b      	uxth	r3, r3
 800673a:	4618      	mov	r0, r3
 800673c:	4603      	mov	r3, r0
 800673e:	005b      	lsls	r3, r3, #1
 8006740:	4403      	add	r3, r0
 8006742:	3b1e      	subs	r3, #30
 8006744:	409a      	lsls	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	430a      	orrs	r2, r1
 800674c:	60da      	str	r2, [r3, #12]
 800674e:	e022      	b.n	8006796 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	6919      	ldr	r1, [r3, #16]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	b29b      	uxth	r3, r3
 800675c:	461a      	mov	r2, r3
 800675e:	4613      	mov	r3, r2
 8006760:	005b      	lsls	r3, r3, #1
 8006762:	4413      	add	r3, r2
 8006764:	2207      	movs	r2, #7
 8006766:	fa02 f303 	lsl.w	r3, r2, r3
 800676a:	43da      	mvns	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	400a      	ands	r2, r1
 8006772:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6919      	ldr	r1, [r3, #16]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	689a      	ldr	r2, [r3, #8]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	b29b      	uxth	r3, r3
 8006784:	4618      	mov	r0, r3
 8006786:	4603      	mov	r3, r0
 8006788:	005b      	lsls	r3, r3, #1
 800678a:	4403      	add	r3, r0
 800678c:	409a      	lsls	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	430a      	orrs	r2, r1
 8006794:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80067a4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	3b01      	subs	r3, #1
 80067b2:	051a      	lsls	r2, r3, #20
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	430a      	orrs	r2, r1
 80067ba:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	3303      	adds	r3, #3
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	461a      	mov	r2, r3
 80067d8:	4613      	mov	r3, r2
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4413      	add	r3, r2
 80067de:	221f      	movs	r2, #31
 80067e0:	fa02 f303 	lsl.w	r3, r2, r3
 80067e4:	43da      	mvns	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	400a      	ands	r2, r1
 80067ec:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	4618      	mov	r0, r3
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	b2da      	uxtb	r2, r3
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	b2db      	uxtb	r3, r3
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	b2db      	uxtb	r3, r3
 800680c:	3303      	adds	r3, #3
 800680e:	b2db      	uxtb	r3, r3
 8006810:	461a      	mov	r2, r3
 8006812:	4613      	mov	r3, r2
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	4413      	add	r3, r2
 8006818:	fa00 f203 	lsl.w	r2, r0, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	430a      	orrs	r2, r1
 8006822:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	4a75      	ldr	r2, [pc, #468]	; (8006a00 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d022      	beq.n	8006874 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	689a      	ldr	r2, [r3, #8]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800683c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	6899      	ldr	r1, [r3, #8]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	699a      	ldr	r2, [r3, #24]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	430a      	orrs	r2, r1
 800684e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	689a      	ldr	r2, [r3, #8]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800685e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6899      	ldr	r1, [r3, #8]
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	69da      	ldr	r2, [r3, #28]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	430a      	orrs	r2, r1
 8006870:	609a      	str	r2, [r3, #8]
 8006872:	e00f      	b.n	8006894 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689a      	ldr	r2, [r3, #8]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8006882:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	689a      	ldr	r2, [r3, #8]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006892:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	7d5b      	ldrb	r3, [r3, #21]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d008      	beq.n	80068ae <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068aa:	605a      	str	r2, [r3, #4]
 80068ac:	e007      	b.n	80068be <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068bc:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	7d1b      	ldrb	r3, [r3, #20]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d008      	beq.n	80068d8 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068d4:	605a      	str	r2, [r3, #4]
 80068d6:	e007      	b.n	80068e8 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	685a      	ldr	r2, [r3, #4]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80068e6:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	2b03      	cmp	r3, #3
 80068ee:	d02e      	beq.n	800694e <HAL_ADCEx_InjectedConfigChannel+0x272>
 80068f0:	2b03      	cmp	r3, #3
 80068f2:	d840      	bhi.n	8006976 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d002      	beq.n	80068fe <HAL_ADCEx_InjectedConfigChannel+0x222>
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d014      	beq.n	8006926 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 80068fc:	e03b      	b.n	8006976 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	6812      	ldr	r2, [r2, #0]
 8006908:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800690c:	f023 030f 	bic.w	r3, r3, #15
 8006910:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	6959      	ldr	r1, [r3, #20]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	68da      	ldr	r2, [r3, #12]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	430a      	orrs	r2, r1
 8006922:	615a      	str	r2, [r3, #20]
      break;
 8006924:	e03b      	b.n	800699e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	6812      	ldr	r2, [r2, #0]
 8006930:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006934:	f023 030f 	bic.w	r3, r3, #15
 8006938:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	6999      	ldr	r1, [r3, #24]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	68da      	ldr	r2, [r3, #12]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	430a      	orrs	r2, r1
 800694a:	619a      	str	r2, [r3, #24]
      break;
 800694c:	e027      	b.n	800699e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	69db      	ldr	r3, [r3, #28]
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	6812      	ldr	r2, [r2, #0]
 8006958:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800695c:	f023 030f 	bic.w	r3, r3, #15
 8006960:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	69d9      	ldr	r1, [r3, #28]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	68da      	ldr	r2, [r3, #12]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	430a      	orrs	r2, r1
 8006972:	61da      	str	r2, [r3, #28]
      break;
 8006974:	e013      	b.n	800699e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6a1b      	ldr	r3, [r3, #32]
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	6812      	ldr	r2, [r2, #0]
 8006980:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006984:	f023 030f 	bic.w	r3, r3, #15
 8006988:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6a19      	ldr	r1, [r3, #32]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	68da      	ldr	r2, [r3, #12]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	430a      	orrs	r2, r1
 800699a:	621a      	str	r2, [r3, #32]
      break;
 800699c:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800699e:	4b19      	ldr	r3, [pc, #100]	; (8006a04 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80069a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a18      	ldr	r2, [pc, #96]	; (8006a08 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d109      	bne.n	80069c0 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b12      	cmp	r3, #18
 80069b2:	d105      	bne.n	80069c0 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a10      	ldr	r2, [pc, #64]	; (8006a08 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d10e      	bne.n	80069e8 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a0f      	ldr	r2, [pc, #60]	; (8006a0c <HAL_ADCEx_InjectedConfigChannel+0x330>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d003      	beq.n	80069dc <HAL_ADCEx_InjectedConfigChannel+0x300>
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b11      	cmp	r3, #17
 80069da:	d105      	bne.n	80069e8 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	000f0001 	.word	0x000f0001
 8006a04:	40012300 	.word	0x40012300
 8006a08:	40012000 	.word	0x40012000
 8006a0c:	10000012 	.word	0x10000012

08006a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f003 0307 	and.w	r3, r3, #7
 8006a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a20:	4b0c      	ldr	r3, [pc, #48]	; (8006a54 <__NVIC_SetPriorityGrouping+0x44>)
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a42:	4a04      	ldr	r2, [pc, #16]	; (8006a54 <__NVIC_SetPriorityGrouping+0x44>)
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	60d3      	str	r3, [r2, #12]
}
 8006a48:	bf00      	nop
 8006a4a:	3714      	adds	r7, #20
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr
 8006a54:	e000ed00 	.word	0xe000ed00

08006a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a5c:	4b04      	ldr	r3, [pc, #16]	; (8006a70 <__NVIC_GetPriorityGrouping+0x18>)
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	0a1b      	lsrs	r3, r3, #8
 8006a62:	f003 0307 	and.w	r3, r3, #7
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr
 8006a70:	e000ed00 	.word	0xe000ed00

08006a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	db0b      	blt.n	8006a9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a86:	79fb      	ldrb	r3, [r7, #7]
 8006a88:	f003 021f 	and.w	r2, r3, #31
 8006a8c:	4907      	ldr	r1, [pc, #28]	; (8006aac <__NVIC_EnableIRQ+0x38>)
 8006a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a92:	095b      	lsrs	r3, r3, #5
 8006a94:	2001      	movs	r0, #1
 8006a96:	fa00 f202 	lsl.w	r2, r0, r2
 8006a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006a9e:	bf00      	nop
 8006aa0:	370c      	adds	r7, #12
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	e000e100 	.word	0xe000e100

08006ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	6039      	str	r1, [r7, #0]
 8006aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	db0a      	blt.n	8006ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	490c      	ldr	r1, [pc, #48]	; (8006afc <__NVIC_SetPriority+0x4c>)
 8006aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ace:	0112      	lsls	r2, r2, #4
 8006ad0:	b2d2      	uxtb	r2, r2
 8006ad2:	440b      	add	r3, r1
 8006ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006ad8:	e00a      	b.n	8006af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	b2da      	uxtb	r2, r3
 8006ade:	4908      	ldr	r1, [pc, #32]	; (8006b00 <__NVIC_SetPriority+0x50>)
 8006ae0:	79fb      	ldrb	r3, [r7, #7]
 8006ae2:	f003 030f 	and.w	r3, r3, #15
 8006ae6:	3b04      	subs	r3, #4
 8006ae8:	0112      	lsls	r2, r2, #4
 8006aea:	b2d2      	uxtb	r2, r2
 8006aec:	440b      	add	r3, r1
 8006aee:	761a      	strb	r2, [r3, #24]
}
 8006af0:	bf00      	nop
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr
 8006afc:	e000e100 	.word	0xe000e100
 8006b00:	e000ed00 	.word	0xe000ed00

08006b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b089      	sub	sp, #36	; 0x24
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f003 0307 	and.w	r3, r3, #7
 8006b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	f1c3 0307 	rsb	r3, r3, #7
 8006b1e:	2b04      	cmp	r3, #4
 8006b20:	bf28      	it	cs
 8006b22:	2304      	movcs	r3, #4
 8006b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	3304      	adds	r3, #4
 8006b2a:	2b06      	cmp	r3, #6
 8006b2c:	d902      	bls.n	8006b34 <NVIC_EncodePriority+0x30>
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	3b03      	subs	r3, #3
 8006b32:	e000      	b.n	8006b36 <NVIC_EncodePriority+0x32>
 8006b34:	2300      	movs	r3, #0
 8006b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b38:	f04f 32ff 	mov.w	r2, #4294967295
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b42:	43da      	mvns	r2, r3
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	401a      	ands	r2, r3
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	fa01 f303 	lsl.w	r3, r1, r3
 8006b56:	43d9      	mvns	r1, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b5c:	4313      	orrs	r3, r2
         );
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3724      	adds	r7, #36	; 0x24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
	...

08006b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	3b01      	subs	r3, #1
 8006b78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b7c:	d301      	bcc.n	8006b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e00f      	b.n	8006ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006b82:	4a0a      	ldr	r2, [pc, #40]	; (8006bac <SysTick_Config+0x40>)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	3b01      	subs	r3, #1
 8006b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006b8a:	210f      	movs	r1, #15
 8006b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b90:	f7ff ff8e 	bl	8006ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b94:	4b05      	ldr	r3, [pc, #20]	; (8006bac <SysTick_Config+0x40>)
 8006b96:	2200      	movs	r2, #0
 8006b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b9a:	4b04      	ldr	r3, [pc, #16]	; (8006bac <SysTick_Config+0x40>)
 8006b9c:	2207      	movs	r2, #7
 8006b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3708      	adds	r7, #8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	e000e010 	.word	0xe000e010

08006bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f7ff ff29 	bl	8006a10 <__NVIC_SetPriorityGrouping>
}
 8006bbe:	bf00      	nop
 8006bc0:	3708      	adds	r7, #8
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b086      	sub	sp, #24
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	4603      	mov	r3, r0
 8006bce:	60b9      	str	r1, [r7, #8]
 8006bd0:	607a      	str	r2, [r7, #4]
 8006bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006bd8:	f7ff ff3e 	bl	8006a58 <__NVIC_GetPriorityGrouping>
 8006bdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	68b9      	ldr	r1, [r7, #8]
 8006be2:	6978      	ldr	r0, [r7, #20]
 8006be4:	f7ff ff8e 	bl	8006b04 <NVIC_EncodePriority>
 8006be8:	4602      	mov	r2, r0
 8006bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bee:	4611      	mov	r1, r2
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7ff ff5d 	bl	8006ab0 <__NVIC_SetPriority>
}
 8006bf6:	bf00      	nop
 8006bf8:	3718      	adds	r7, #24
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b082      	sub	sp, #8
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	4603      	mov	r3, r0
 8006c06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7ff ff31 	bl	8006a74 <__NVIC_EnableIRQ>
}
 8006c12:	bf00      	nop
 8006c14:	3708      	adds	r7, #8
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b082      	sub	sp, #8
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f7ff ffa2 	bl	8006b6c <SysTick_Config>
 8006c28:	4603      	mov	r3, r0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3708      	adds	r7, #8
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
	...

08006c34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006c40:	f7fe fe46 	bl	80058d0 <HAL_GetTick>
 8006c44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e099      	b.n	8006d84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2202      	movs	r2, #2
 8006c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f022 0201 	bic.w	r2, r2, #1
 8006c6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c70:	e00f      	b.n	8006c92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c72:	f7fe fe2d 	bl	80058d0 <HAL_GetTick>
 8006c76:	4602      	mov	r2, r0
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	2b05      	cmp	r3, #5
 8006c7e:	d908      	bls.n	8006c92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2220      	movs	r2, #32
 8006c84:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2203      	movs	r2, #3
 8006c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e078      	b.n	8006d84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1e8      	bne.n	8006c72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006ca8:	697a      	ldr	r2, [r7, #20]
 8006caa:	4b38      	ldr	r3, [pc, #224]	; (8006d8c <HAL_DMA_Init+0x158>)
 8006cac:	4013      	ands	r3, r2
 8006cae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	685a      	ldr	r2, [r3, #4]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006cbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006cca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006cd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a1b      	ldr	r3, [r3, #32]
 8006cdc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce8:	2b04      	cmp	r3, #4
 8006cea:	d107      	bne.n	8006cfc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	f023 0307 	bic.w	r3, r3, #7
 8006d12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d22:	2b04      	cmp	r3, #4
 8006d24:	d117      	bne.n	8006d56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00e      	beq.n	8006d56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 fadf 	bl	80072fc <DMA_CheckFifoParam>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d008      	beq.n	8006d56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2240      	movs	r2, #64	; 0x40
 8006d48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006d52:	2301      	movs	r3, #1
 8006d54:	e016      	b.n	8006d84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 fa96 	bl	8007290 <DMA_CalcBaseAndBitshift>
 8006d64:	4603      	mov	r3, r0
 8006d66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d6c:	223f      	movs	r2, #63	; 0x3f
 8006d6e:	409a      	lsls	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3718      	adds	r7, #24
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	f010803f 	.word	0xf010803f

08006d90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
 8006d9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006da6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d101      	bne.n	8006db6 <HAL_DMA_Start_IT+0x26>
 8006db2:	2302      	movs	r3, #2
 8006db4:	e040      	b.n	8006e38 <HAL_DMA_Start_IT+0xa8>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d12f      	bne.n	8006e2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2202      	movs	r2, #2
 8006dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	68b9      	ldr	r1, [r7, #8]
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	f000 fa28 	bl	8007234 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006de8:	223f      	movs	r2, #63	; 0x3f
 8006dea:	409a      	lsls	r2, r3
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f042 0216 	orr.w	r2, r2, #22
 8006dfe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d007      	beq.n	8006e18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f042 0208 	orr.w	r2, r2, #8
 8006e16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f042 0201 	orr.w	r2, r2, #1
 8006e26:	601a      	str	r2, [r3, #0]
 8006e28:	e005      	b.n	8006e36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006e32:	2302      	movs	r3, #2
 8006e34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3718      	adds	r7, #24
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006e4e:	f7fe fd3f 	bl	80058d0 <HAL_GetTick>
 8006e52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	d008      	beq.n	8006e72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2280      	movs	r2, #128	; 0x80
 8006e64:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e052      	b.n	8006f18 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f022 0216 	bic.w	r2, r2, #22
 8006e80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	695a      	ldr	r2, [r3, #20]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d103      	bne.n	8006ea2 <HAL_DMA_Abort+0x62>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d007      	beq.n	8006eb2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 0208 	bic.w	r2, r2, #8
 8006eb0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f022 0201 	bic.w	r2, r2, #1
 8006ec0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006ec2:	e013      	b.n	8006eec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006ec4:	f7fe fd04 	bl	80058d0 <HAL_GetTick>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	2b05      	cmp	r3, #5
 8006ed0:	d90c      	bls.n	8006eec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2220      	movs	r2, #32
 8006ed6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2203      	movs	r2, #3
 8006edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e015      	b.n	8006f18 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 0301 	and.w	r3, r3, #1
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1e4      	bne.n	8006ec4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006efe:	223f      	movs	r2, #63	; 0x3f
 8006f00:	409a      	lsls	r2, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006f2c:	4b8e      	ldr	r3, [pc, #568]	; (8007168 <HAL_DMA_IRQHandler+0x248>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a8e      	ldr	r2, [pc, #568]	; (800716c <HAL_DMA_IRQHandler+0x24c>)
 8006f32:	fba2 2303 	umull	r2, r3, r2, r3
 8006f36:	0a9b      	lsrs	r3, r3, #10
 8006f38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f4a:	2208      	movs	r2, #8
 8006f4c:	409a      	lsls	r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	4013      	ands	r3, r2
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d01a      	beq.n	8006f8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0304 	and.w	r3, r3, #4
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d013      	beq.n	8006f8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f022 0204 	bic.w	r2, r2, #4
 8006f72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f78:	2208      	movs	r2, #8
 8006f7a:	409a      	lsls	r2, r3
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f84:	f043 0201 	orr.w	r2, r3, #1
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f90:	2201      	movs	r2, #1
 8006f92:	409a      	lsls	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	4013      	ands	r3, r2
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d012      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00b      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fae:	2201      	movs	r2, #1
 8006fb0:	409a      	lsls	r2, r3
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fba:	f043 0202 	orr.w	r2, r3, #2
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fc6:	2204      	movs	r2, #4
 8006fc8:	409a      	lsls	r2, r3
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	4013      	ands	r3, r2
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d012      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0302 	and.w	r3, r3, #2
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00b      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fe4:	2204      	movs	r2, #4
 8006fe6:	409a      	lsls	r2, r3
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff0:	f043 0204 	orr.w	r2, r3, #4
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ffc:	2210      	movs	r2, #16
 8006ffe:	409a      	lsls	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	4013      	ands	r3, r2
 8007004:	2b00      	cmp	r3, #0
 8007006:	d043      	beq.n	8007090 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0308 	and.w	r3, r3, #8
 8007012:	2b00      	cmp	r3, #0
 8007014:	d03c      	beq.n	8007090 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800701a:	2210      	movs	r2, #16
 800701c:	409a      	lsls	r2, r3
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d018      	beq.n	8007062 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d108      	bne.n	8007050 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007042:	2b00      	cmp	r3, #0
 8007044:	d024      	beq.n	8007090 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	4798      	blx	r3
 800704e:	e01f      	b.n	8007090 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007054:	2b00      	cmp	r3, #0
 8007056:	d01b      	beq.n	8007090 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	4798      	blx	r3
 8007060:	e016      	b.n	8007090 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800706c:	2b00      	cmp	r3, #0
 800706e:	d107      	bne.n	8007080 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f022 0208 	bic.w	r2, r2, #8
 800707e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007084:	2b00      	cmp	r3, #0
 8007086:	d003      	beq.n	8007090 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007094:	2220      	movs	r2, #32
 8007096:	409a      	lsls	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	4013      	ands	r3, r2
 800709c:	2b00      	cmp	r3, #0
 800709e:	f000 808f 	beq.w	80071c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0310 	and.w	r3, r3, #16
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f000 8087 	beq.w	80071c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070b6:	2220      	movs	r2, #32
 80070b8:	409a      	lsls	r2, r3
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b05      	cmp	r3, #5
 80070c8:	d136      	bne.n	8007138 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f022 0216 	bic.w	r2, r2, #22
 80070d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	695a      	ldr	r2, [r3, #20]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d103      	bne.n	80070fa <HAL_DMA_IRQHandler+0x1da>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d007      	beq.n	800710a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f022 0208 	bic.w	r2, r2, #8
 8007108:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800710e:	223f      	movs	r2, #63	; 0x3f
 8007110:	409a      	lsls	r2, r3
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2201      	movs	r2, #1
 800711a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800712a:	2b00      	cmp	r3, #0
 800712c:	d07e      	beq.n	800722c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	4798      	blx	r3
        }
        return;
 8007136:	e079      	b.n	800722c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d01d      	beq.n	8007182 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007150:	2b00      	cmp	r3, #0
 8007152:	d10d      	bne.n	8007170 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007158:	2b00      	cmp	r3, #0
 800715a:	d031      	beq.n	80071c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	4798      	blx	r3
 8007164:	e02c      	b.n	80071c0 <HAL_DMA_IRQHandler+0x2a0>
 8007166:	bf00      	nop
 8007168:	20000394 	.word	0x20000394
 800716c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007174:	2b00      	cmp	r3, #0
 8007176:	d023      	beq.n	80071c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	4798      	blx	r3
 8007180:	e01e      	b.n	80071c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10f      	bne.n	80071b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f022 0210 	bic.w	r2, r2, #16
 800719e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d003      	beq.n	80071c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d032      	beq.n	800722e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071cc:	f003 0301 	and.w	r3, r3, #1
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d022      	beq.n	800721a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2205      	movs	r2, #5
 80071d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f022 0201 	bic.w	r2, r2, #1
 80071ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	3301      	adds	r3, #1
 80071f0:	60bb      	str	r3, [r7, #8]
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d307      	bcc.n	8007208 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1f2      	bne.n	80071ec <HAL_DMA_IRQHandler+0x2cc>
 8007206:	e000      	b.n	800720a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007208:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800721e:	2b00      	cmp	r3, #0
 8007220:	d005      	beq.n	800722e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	4798      	blx	r3
 800722a:	e000      	b.n	800722e <HAL_DMA_IRQHandler+0x30e>
        return;
 800722c:	bf00      	nop
    }
  }
}
 800722e:	3718      	adds	r7, #24
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
 8007240:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007250:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	683a      	ldr	r2, [r7, #0]
 8007258:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	2b40      	cmp	r3, #64	; 0x40
 8007260:	d108      	bne.n	8007274 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007272:	e007      	b.n	8007284 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	60da      	str	r2, [r3, #12]
}
 8007284:	bf00      	nop
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	b2db      	uxtb	r3, r3
 800729e:	3b10      	subs	r3, #16
 80072a0:	4a14      	ldr	r2, [pc, #80]	; (80072f4 <DMA_CalcBaseAndBitshift+0x64>)
 80072a2:	fba2 2303 	umull	r2, r3, r2, r3
 80072a6:	091b      	lsrs	r3, r3, #4
 80072a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80072aa:	4a13      	ldr	r2, [pc, #76]	; (80072f8 <DMA_CalcBaseAndBitshift+0x68>)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	4413      	add	r3, r2
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	461a      	mov	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2b03      	cmp	r3, #3
 80072bc:	d909      	bls.n	80072d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80072c6:	f023 0303 	bic.w	r3, r3, #3
 80072ca:	1d1a      	adds	r2, r3, #4
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	659a      	str	r2, [r3, #88]	; 0x58
 80072d0:	e007      	b.n	80072e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80072da:	f023 0303 	bic.w	r3, r3, #3
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3714      	adds	r7, #20
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	aaaaaaab 	.word	0xaaaaaaab
 80072f8:	0800c5c0 	.word	0x0800c5c0

080072fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007304:	2300      	movs	r3, #0
 8007306:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d11f      	bne.n	8007356 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	2b03      	cmp	r3, #3
 800731a:	d856      	bhi.n	80073ca <DMA_CheckFifoParam+0xce>
 800731c:	a201      	add	r2, pc, #4	; (adr r2, 8007324 <DMA_CheckFifoParam+0x28>)
 800731e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007322:	bf00      	nop
 8007324:	08007335 	.word	0x08007335
 8007328:	08007347 	.word	0x08007347
 800732c:	08007335 	.word	0x08007335
 8007330:	080073cb 	.word	0x080073cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007338:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d046      	beq.n	80073ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007344:	e043      	b.n	80073ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800734e:	d140      	bne.n	80073d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007354:	e03d      	b.n	80073d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800735e:	d121      	bne.n	80073a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	2b03      	cmp	r3, #3
 8007364:	d837      	bhi.n	80073d6 <DMA_CheckFifoParam+0xda>
 8007366:	a201      	add	r2, pc, #4	; (adr r2, 800736c <DMA_CheckFifoParam+0x70>)
 8007368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736c:	0800737d 	.word	0x0800737d
 8007370:	08007383 	.word	0x08007383
 8007374:	0800737d 	.word	0x0800737d
 8007378:	08007395 	.word	0x08007395
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	73fb      	strb	r3, [r7, #15]
      break;
 8007380:	e030      	b.n	80073e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007386:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d025      	beq.n	80073da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007392:	e022      	b.n	80073da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007398:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800739c:	d11f      	bne.n	80073de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80073a2:	e01c      	b.n	80073de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d903      	bls.n	80073b2 <DMA_CheckFifoParam+0xb6>
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	2b03      	cmp	r3, #3
 80073ae:	d003      	beq.n	80073b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80073b0:	e018      	b.n	80073e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	73fb      	strb	r3, [r7, #15]
      break;
 80073b6:	e015      	b.n	80073e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00e      	beq.n	80073e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	73fb      	strb	r3, [r7, #15]
      break;
 80073c8:	e00b      	b.n	80073e2 <DMA_CheckFifoParam+0xe6>
      break;
 80073ca:	bf00      	nop
 80073cc:	e00a      	b.n	80073e4 <DMA_CheckFifoParam+0xe8>
      break;
 80073ce:	bf00      	nop
 80073d0:	e008      	b.n	80073e4 <DMA_CheckFifoParam+0xe8>
      break;
 80073d2:	bf00      	nop
 80073d4:	e006      	b.n	80073e4 <DMA_CheckFifoParam+0xe8>
      break;
 80073d6:	bf00      	nop
 80073d8:	e004      	b.n	80073e4 <DMA_CheckFifoParam+0xe8>
      break;
 80073da:	bf00      	nop
 80073dc:	e002      	b.n	80073e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80073de:	bf00      	nop
 80073e0:	e000      	b.n	80073e4 <DMA_CheckFifoParam+0xe8>
      break;
 80073e2:	bf00      	nop
    }
  } 
  
  return status; 
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop

080073f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b089      	sub	sp, #36	; 0x24
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80073fe:	2300      	movs	r3, #0
 8007400:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007402:	2300      	movs	r3, #0
 8007404:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007406:	2300      	movs	r3, #0
 8007408:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800740a:	2300      	movs	r3, #0
 800740c:	61fb      	str	r3, [r7, #28]
 800740e:	e159      	b.n	80076c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007410:	2201      	movs	r2, #1
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	fa02 f303 	lsl.w	r3, r2, r3
 8007418:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	4013      	ands	r3, r2
 8007422:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	429a      	cmp	r2, r3
 800742a:	f040 8148 	bne.w	80076be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	f003 0303 	and.w	r3, r3, #3
 8007436:	2b01      	cmp	r3, #1
 8007438:	d005      	beq.n	8007446 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007442:	2b02      	cmp	r3, #2
 8007444:	d130      	bne.n	80074a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	005b      	lsls	r3, r3, #1
 8007450:	2203      	movs	r2, #3
 8007452:	fa02 f303 	lsl.w	r3, r2, r3
 8007456:	43db      	mvns	r3, r3
 8007458:	69ba      	ldr	r2, [r7, #24]
 800745a:	4013      	ands	r3, r2
 800745c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	68da      	ldr	r2, [r3, #12]
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	005b      	lsls	r3, r3, #1
 8007466:	fa02 f303 	lsl.w	r3, r2, r3
 800746a:	69ba      	ldr	r2, [r7, #24]
 800746c:	4313      	orrs	r3, r2
 800746e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	69ba      	ldr	r2, [r7, #24]
 8007474:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800747c:	2201      	movs	r2, #1
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	fa02 f303 	lsl.w	r3, r2, r3
 8007484:	43db      	mvns	r3, r3
 8007486:	69ba      	ldr	r2, [r7, #24]
 8007488:	4013      	ands	r3, r2
 800748a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	091b      	lsrs	r3, r3, #4
 8007492:	f003 0201 	and.w	r2, r3, #1
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	fa02 f303 	lsl.w	r3, r2, r3
 800749c:	69ba      	ldr	r2, [r7, #24]
 800749e:	4313      	orrs	r3, r2
 80074a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	69ba      	ldr	r2, [r7, #24]
 80074a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	f003 0303 	and.w	r3, r3, #3
 80074b0:	2b03      	cmp	r3, #3
 80074b2:	d017      	beq.n	80074e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	005b      	lsls	r3, r3, #1
 80074be:	2203      	movs	r2, #3
 80074c0:	fa02 f303 	lsl.w	r3, r2, r3
 80074c4:	43db      	mvns	r3, r3
 80074c6:	69ba      	ldr	r2, [r7, #24]
 80074c8:	4013      	ands	r3, r2
 80074ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	689a      	ldr	r2, [r3, #8]
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	005b      	lsls	r3, r3, #1
 80074d4:	fa02 f303 	lsl.w	r3, r2, r3
 80074d8:	69ba      	ldr	r2, [r7, #24]
 80074da:	4313      	orrs	r3, r2
 80074dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	69ba      	ldr	r2, [r7, #24]
 80074e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	f003 0303 	and.w	r3, r3, #3
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d123      	bne.n	8007538 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	08da      	lsrs	r2, r3, #3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	3208      	adds	r2, #8
 80074f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	f003 0307 	and.w	r3, r3, #7
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	220f      	movs	r2, #15
 8007508:	fa02 f303 	lsl.w	r3, r2, r3
 800750c:	43db      	mvns	r3, r3
 800750e:	69ba      	ldr	r2, [r7, #24]
 8007510:	4013      	ands	r3, r2
 8007512:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	691a      	ldr	r2, [r3, #16]
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	f003 0307 	and.w	r3, r3, #7
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	fa02 f303 	lsl.w	r3, r2, r3
 8007524:	69ba      	ldr	r2, [r7, #24]
 8007526:	4313      	orrs	r3, r2
 8007528:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	08da      	lsrs	r2, r3, #3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	3208      	adds	r2, #8
 8007532:	69b9      	ldr	r1, [r7, #24]
 8007534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	005b      	lsls	r3, r3, #1
 8007542:	2203      	movs	r2, #3
 8007544:	fa02 f303 	lsl.w	r3, r2, r3
 8007548:	43db      	mvns	r3, r3
 800754a:	69ba      	ldr	r2, [r7, #24]
 800754c:	4013      	ands	r3, r2
 800754e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	f003 0203 	and.w	r2, r3, #3
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	005b      	lsls	r3, r3, #1
 800755c:	fa02 f303 	lsl.w	r3, r2, r3
 8007560:	69ba      	ldr	r2, [r7, #24]
 8007562:	4313      	orrs	r3, r2
 8007564:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	69ba      	ldr	r2, [r7, #24]
 800756a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 80a2 	beq.w	80076be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800757a:	2300      	movs	r3, #0
 800757c:	60fb      	str	r3, [r7, #12]
 800757e:	4b57      	ldr	r3, [pc, #348]	; (80076dc <HAL_GPIO_Init+0x2e8>)
 8007580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007582:	4a56      	ldr	r2, [pc, #344]	; (80076dc <HAL_GPIO_Init+0x2e8>)
 8007584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007588:	6453      	str	r3, [r2, #68]	; 0x44
 800758a:	4b54      	ldr	r3, [pc, #336]	; (80076dc <HAL_GPIO_Init+0x2e8>)
 800758c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800758e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007592:	60fb      	str	r3, [r7, #12]
 8007594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007596:	4a52      	ldr	r2, [pc, #328]	; (80076e0 <HAL_GPIO_Init+0x2ec>)
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	089b      	lsrs	r3, r3, #2
 800759c:	3302      	adds	r3, #2
 800759e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	f003 0303 	and.w	r3, r3, #3
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	220f      	movs	r2, #15
 80075ae:	fa02 f303 	lsl.w	r3, r2, r3
 80075b2:	43db      	mvns	r3, r3
 80075b4:	69ba      	ldr	r2, [r7, #24]
 80075b6:	4013      	ands	r3, r2
 80075b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a49      	ldr	r2, [pc, #292]	; (80076e4 <HAL_GPIO_Init+0x2f0>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d019      	beq.n	80075f6 <HAL_GPIO_Init+0x202>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a48      	ldr	r2, [pc, #288]	; (80076e8 <HAL_GPIO_Init+0x2f4>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d013      	beq.n	80075f2 <HAL_GPIO_Init+0x1fe>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a47      	ldr	r2, [pc, #284]	; (80076ec <HAL_GPIO_Init+0x2f8>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d00d      	beq.n	80075ee <HAL_GPIO_Init+0x1fa>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a46      	ldr	r2, [pc, #280]	; (80076f0 <HAL_GPIO_Init+0x2fc>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d007      	beq.n	80075ea <HAL_GPIO_Init+0x1f6>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a45      	ldr	r2, [pc, #276]	; (80076f4 <HAL_GPIO_Init+0x300>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d101      	bne.n	80075e6 <HAL_GPIO_Init+0x1f2>
 80075e2:	2304      	movs	r3, #4
 80075e4:	e008      	b.n	80075f8 <HAL_GPIO_Init+0x204>
 80075e6:	2307      	movs	r3, #7
 80075e8:	e006      	b.n	80075f8 <HAL_GPIO_Init+0x204>
 80075ea:	2303      	movs	r3, #3
 80075ec:	e004      	b.n	80075f8 <HAL_GPIO_Init+0x204>
 80075ee:	2302      	movs	r3, #2
 80075f0:	e002      	b.n	80075f8 <HAL_GPIO_Init+0x204>
 80075f2:	2301      	movs	r3, #1
 80075f4:	e000      	b.n	80075f8 <HAL_GPIO_Init+0x204>
 80075f6:	2300      	movs	r3, #0
 80075f8:	69fa      	ldr	r2, [r7, #28]
 80075fa:	f002 0203 	and.w	r2, r2, #3
 80075fe:	0092      	lsls	r2, r2, #2
 8007600:	4093      	lsls	r3, r2
 8007602:	69ba      	ldr	r2, [r7, #24]
 8007604:	4313      	orrs	r3, r2
 8007606:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007608:	4935      	ldr	r1, [pc, #212]	; (80076e0 <HAL_GPIO_Init+0x2ec>)
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	089b      	lsrs	r3, r3, #2
 800760e:	3302      	adds	r3, #2
 8007610:	69ba      	ldr	r2, [r7, #24]
 8007612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007616:	4b38      	ldr	r3, [pc, #224]	; (80076f8 <HAL_GPIO_Init+0x304>)
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	43db      	mvns	r3, r3
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	4013      	ands	r3, r2
 8007624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d003      	beq.n	800763a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007632:	69ba      	ldr	r2, [r7, #24]
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	4313      	orrs	r3, r2
 8007638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800763a:	4a2f      	ldr	r2, [pc, #188]	; (80076f8 <HAL_GPIO_Init+0x304>)
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007640:	4b2d      	ldr	r3, [pc, #180]	; (80076f8 <HAL_GPIO_Init+0x304>)
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	43db      	mvns	r3, r3
 800764a:	69ba      	ldr	r2, [r7, #24]
 800764c:	4013      	ands	r3, r2
 800764e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d003      	beq.n	8007664 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800765c:	69ba      	ldr	r2, [r7, #24]
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	4313      	orrs	r3, r2
 8007662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007664:	4a24      	ldr	r2, [pc, #144]	; (80076f8 <HAL_GPIO_Init+0x304>)
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800766a:	4b23      	ldr	r3, [pc, #140]	; (80076f8 <HAL_GPIO_Init+0x304>)
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	43db      	mvns	r3, r3
 8007674:	69ba      	ldr	r2, [r7, #24]
 8007676:	4013      	ands	r3, r2
 8007678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007682:	2b00      	cmp	r3, #0
 8007684:	d003      	beq.n	800768e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007686:	69ba      	ldr	r2, [r7, #24]
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	4313      	orrs	r3, r2
 800768c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800768e:	4a1a      	ldr	r2, [pc, #104]	; (80076f8 <HAL_GPIO_Init+0x304>)
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007694:	4b18      	ldr	r3, [pc, #96]	; (80076f8 <HAL_GPIO_Init+0x304>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	43db      	mvns	r3, r3
 800769e:	69ba      	ldr	r2, [r7, #24]
 80076a0:	4013      	ands	r3, r2
 80076a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d003      	beq.n	80076b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80076b0:	69ba      	ldr	r2, [r7, #24]
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80076b8:	4a0f      	ldr	r2, [pc, #60]	; (80076f8 <HAL_GPIO_Init+0x304>)
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	3301      	adds	r3, #1
 80076c2:	61fb      	str	r3, [r7, #28]
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	2b0f      	cmp	r3, #15
 80076c8:	f67f aea2 	bls.w	8007410 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80076cc:	bf00      	nop
 80076ce:	bf00      	nop
 80076d0:	3724      	adds	r7, #36	; 0x24
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	40023800 	.word	0x40023800
 80076e0:	40013800 	.word	0x40013800
 80076e4:	40020000 	.word	0x40020000
 80076e8:	40020400 	.word	0x40020400
 80076ec:	40020800 	.word	0x40020800
 80076f0:	40020c00 	.word	0x40020c00
 80076f4:	40021000 	.word	0x40021000
 80076f8:	40013c00 	.word	0x40013c00

080076fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	460b      	mov	r3, r1
 8007706:	807b      	strh	r3, [r7, #2]
 8007708:	4613      	mov	r3, r2
 800770a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800770c:	787b      	ldrb	r3, [r7, #1]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d003      	beq.n	800771a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007712:	887a      	ldrh	r2, [r7, #2]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007718:	e003      	b.n	8007722 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800771a:	887b      	ldrh	r3, [r7, #2]
 800771c:	041a      	lsls	r2, r3, #16
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	619a      	str	r2, [r3, #24]
}
 8007722:	bf00      	nop
 8007724:	370c      	adds	r7, #12
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
	...

08007730 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	4603      	mov	r3, r0
 8007738:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800773a:	4b08      	ldr	r3, [pc, #32]	; (800775c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800773c:	695a      	ldr	r2, [r3, #20]
 800773e:	88fb      	ldrh	r3, [r7, #6]
 8007740:	4013      	ands	r3, r2
 8007742:	2b00      	cmp	r3, #0
 8007744:	d006      	beq.n	8007754 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007746:	4a05      	ldr	r2, [pc, #20]	; (800775c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007748:	88fb      	ldrh	r3, [r7, #6]
 800774a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800774c:	88fb      	ldrh	r3, [r7, #6]
 800774e:	4618      	mov	r0, r3
 8007750:	f7fd fcc8 	bl	80050e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8007754:	bf00      	nop
 8007756:	3708      	adds	r7, #8
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	40013c00 	.word	0x40013c00

08007760 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d101      	bne.n	8007772 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	e12b      	b.n	80079ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007778:	b2db      	uxtb	r3, r3
 800777a:	2b00      	cmp	r3, #0
 800777c:	d106      	bne.n	800778c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f7fd fd82 	bl	8005290 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2224      	movs	r2, #36	; 0x24
 8007790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f022 0201 	bic.w	r2, r2, #1
 80077a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80077c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80077c4:	f001 fbbc 	bl	8008f40 <HAL_RCC_GetPCLK1Freq>
 80077c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	4a81      	ldr	r2, [pc, #516]	; (80079d4 <HAL_I2C_Init+0x274>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d807      	bhi.n	80077e4 <HAL_I2C_Init+0x84>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	4a80      	ldr	r2, [pc, #512]	; (80079d8 <HAL_I2C_Init+0x278>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	bf94      	ite	ls
 80077dc:	2301      	movls	r3, #1
 80077de:	2300      	movhi	r3, #0
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	e006      	b.n	80077f2 <HAL_I2C_Init+0x92>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	4a7d      	ldr	r2, [pc, #500]	; (80079dc <HAL_I2C_Init+0x27c>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	bf94      	ite	ls
 80077ec:	2301      	movls	r3, #1
 80077ee:	2300      	movhi	r3, #0
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d001      	beq.n	80077fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e0e7      	b.n	80079ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	4a78      	ldr	r2, [pc, #480]	; (80079e0 <HAL_I2C_Init+0x280>)
 80077fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007802:	0c9b      	lsrs	r3, r3, #18
 8007804:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	430a      	orrs	r2, r1
 8007818:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	6a1b      	ldr	r3, [r3, #32]
 8007820:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	4a6a      	ldr	r2, [pc, #424]	; (80079d4 <HAL_I2C_Init+0x274>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d802      	bhi.n	8007834 <HAL_I2C_Init+0xd4>
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	3301      	adds	r3, #1
 8007832:	e009      	b.n	8007848 <HAL_I2C_Init+0xe8>
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800783a:	fb02 f303 	mul.w	r3, r2, r3
 800783e:	4a69      	ldr	r2, [pc, #420]	; (80079e4 <HAL_I2C_Init+0x284>)
 8007840:	fba2 2303 	umull	r2, r3, r2, r3
 8007844:	099b      	lsrs	r3, r3, #6
 8007846:	3301      	adds	r3, #1
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	6812      	ldr	r2, [r2, #0]
 800784c:	430b      	orrs	r3, r1
 800784e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	69db      	ldr	r3, [r3, #28]
 8007856:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800785a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	495c      	ldr	r1, [pc, #368]	; (80079d4 <HAL_I2C_Init+0x274>)
 8007864:	428b      	cmp	r3, r1
 8007866:	d819      	bhi.n	800789c <HAL_I2C_Init+0x13c>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	1e59      	subs	r1, r3, #1
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	005b      	lsls	r3, r3, #1
 8007872:	fbb1 f3f3 	udiv	r3, r1, r3
 8007876:	1c59      	adds	r1, r3, #1
 8007878:	f640 73fc 	movw	r3, #4092	; 0xffc
 800787c:	400b      	ands	r3, r1
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00a      	beq.n	8007898 <HAL_I2C_Init+0x138>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	1e59      	subs	r1, r3, #1
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	005b      	lsls	r3, r3, #1
 800788c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007890:	3301      	adds	r3, #1
 8007892:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007896:	e051      	b.n	800793c <HAL_I2C_Init+0x1dc>
 8007898:	2304      	movs	r3, #4
 800789a:	e04f      	b.n	800793c <HAL_I2C_Init+0x1dc>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d111      	bne.n	80078c8 <HAL_I2C_Init+0x168>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	1e58      	subs	r0, r3, #1
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6859      	ldr	r1, [r3, #4]
 80078ac:	460b      	mov	r3, r1
 80078ae:	005b      	lsls	r3, r3, #1
 80078b0:	440b      	add	r3, r1
 80078b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80078b6:	3301      	adds	r3, #1
 80078b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078bc:	2b00      	cmp	r3, #0
 80078be:	bf0c      	ite	eq
 80078c0:	2301      	moveq	r3, #1
 80078c2:	2300      	movne	r3, #0
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	e012      	b.n	80078ee <HAL_I2C_Init+0x18e>
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	1e58      	subs	r0, r3, #1
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6859      	ldr	r1, [r3, #4]
 80078d0:	460b      	mov	r3, r1
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	440b      	add	r3, r1
 80078d6:	0099      	lsls	r1, r3, #2
 80078d8:	440b      	add	r3, r1
 80078da:	fbb0 f3f3 	udiv	r3, r0, r3
 80078de:	3301      	adds	r3, #1
 80078e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	bf0c      	ite	eq
 80078e8:	2301      	moveq	r3, #1
 80078ea:	2300      	movne	r3, #0
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <HAL_I2C_Init+0x196>
 80078f2:	2301      	movs	r3, #1
 80078f4:	e022      	b.n	800793c <HAL_I2C_Init+0x1dc>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10e      	bne.n	800791c <HAL_I2C_Init+0x1bc>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	1e58      	subs	r0, r3, #1
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6859      	ldr	r1, [r3, #4]
 8007906:	460b      	mov	r3, r1
 8007908:	005b      	lsls	r3, r3, #1
 800790a:	440b      	add	r3, r1
 800790c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007910:	3301      	adds	r3, #1
 8007912:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800791a:	e00f      	b.n	800793c <HAL_I2C_Init+0x1dc>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	1e58      	subs	r0, r3, #1
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6859      	ldr	r1, [r3, #4]
 8007924:	460b      	mov	r3, r1
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	440b      	add	r3, r1
 800792a:	0099      	lsls	r1, r3, #2
 800792c:	440b      	add	r3, r1
 800792e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007932:	3301      	adds	r3, #1
 8007934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007938:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800793c:	6879      	ldr	r1, [r7, #4]
 800793e:	6809      	ldr	r1, [r1, #0]
 8007940:	4313      	orrs	r3, r2
 8007942:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	69da      	ldr	r2, [r3, #28]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	431a      	orrs	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	430a      	orrs	r2, r1
 800795e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800796a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	6911      	ldr	r1, [r2, #16]
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	68d2      	ldr	r2, [r2, #12]
 8007976:	4311      	orrs	r1, r2
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	6812      	ldr	r2, [r2, #0]
 800797c:	430b      	orrs	r3, r1
 800797e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	695a      	ldr	r2, [r3, #20]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	699b      	ldr	r3, [r3, #24]
 8007992:	431a      	orrs	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	430a      	orrs	r2, r1
 800799a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f042 0201 	orr.w	r2, r2, #1
 80079aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2220      	movs	r2, #32
 80079b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	000186a0 	.word	0x000186a0
 80079d8:	001e847f 	.word	0x001e847f
 80079dc:	003d08ff 	.word	0x003d08ff
 80079e0:	431bde83 	.word	0x431bde83
 80079e4:	10624dd3 	.word	0x10624dd3

080079e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b088      	sub	sp, #32
 80079ec:	af02      	add	r7, sp, #8
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	4608      	mov	r0, r1
 80079f2:	4611      	mov	r1, r2
 80079f4:	461a      	mov	r2, r3
 80079f6:	4603      	mov	r3, r0
 80079f8:	817b      	strh	r3, [r7, #10]
 80079fa:	460b      	mov	r3, r1
 80079fc:	813b      	strh	r3, [r7, #8]
 80079fe:	4613      	mov	r3, r2
 8007a00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007a02:	f7fd ff65 	bl	80058d0 <HAL_GetTick>
 8007a06:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	2b20      	cmp	r3, #32
 8007a12:	f040 80d9 	bne.w	8007bc8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	2319      	movs	r3, #25
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	496d      	ldr	r1, [pc, #436]	; (8007bd4 <HAL_I2C_Mem_Write+0x1ec>)
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f000 fc7f 	bl	8008324 <I2C_WaitOnFlagUntilTimeout>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d001      	beq.n	8007a30 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	e0cc      	b.n	8007bca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d101      	bne.n	8007a3e <HAL_I2C_Mem_Write+0x56>
 8007a3a:	2302      	movs	r3, #2
 8007a3c:	e0c5      	b.n	8007bca <HAL_I2C_Mem_Write+0x1e2>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2201      	movs	r2, #1
 8007a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 0301 	and.w	r3, r3, #1
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d007      	beq.n	8007a64 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f042 0201 	orr.w	r2, r2, #1
 8007a62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2221      	movs	r2, #33	; 0x21
 8007a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2240      	movs	r2, #64	; 0x40
 8007a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2200      	movs	r2, #0
 8007a88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6a3a      	ldr	r2, [r7, #32]
 8007a8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007a94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	4a4d      	ldr	r2, [pc, #308]	; (8007bd8 <HAL_I2C_Mem_Write+0x1f0>)
 8007aa4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007aa6:	88f8      	ldrh	r0, [r7, #6]
 8007aa8:	893a      	ldrh	r2, [r7, #8]
 8007aaa:	8979      	ldrh	r1, [r7, #10]
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	9301      	str	r3, [sp, #4]
 8007ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f000 fab6 	bl	8008028 <I2C_RequestMemoryWrite>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d052      	beq.n	8007b68 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e081      	b.n	8007bca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ac6:	697a      	ldr	r2, [r7, #20]
 8007ac8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f000 fd00 	bl	80084d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00d      	beq.n	8007af2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ada:	2b04      	cmp	r3, #4
 8007adc:	d107      	bne.n	8007aee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007aec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e06b      	b.n	8007bca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af6:	781a      	ldrb	r2, [r3, #0]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b02:	1c5a      	adds	r2, r3, #1
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	b29a      	uxth	r2, r3
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	695b      	ldr	r3, [r3, #20]
 8007b28:	f003 0304 	and.w	r3, r3, #4
 8007b2c:	2b04      	cmp	r3, #4
 8007b2e:	d11b      	bne.n	8007b68 <HAL_I2C_Mem_Write+0x180>
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d017      	beq.n	8007b68 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3c:	781a      	ldrb	r2, [r3, #0]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b48:	1c5a      	adds	r2, r3, #1
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b52:	3b01      	subs	r3, #1
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	3b01      	subs	r3, #1
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d1aa      	bne.n	8007ac6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f000 fcec 	bl	8008552 <I2C_WaitOnBTFFlagUntilTimeout>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00d      	beq.n	8007b9c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b84:	2b04      	cmp	r3, #4
 8007b86:	d107      	bne.n	8007b98 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b96:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e016      	b.n	8007bca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007baa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2220      	movs	r2, #32
 8007bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	e000      	b.n	8007bca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007bc8:	2302      	movs	r3, #2
  }
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3718      	adds	r7, #24
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	00100002 	.word	0x00100002
 8007bd8:	ffff0000 	.word	0xffff0000

08007bdc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b08c      	sub	sp, #48	; 0x30
 8007be0:	af02      	add	r7, sp, #8
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	4608      	mov	r0, r1
 8007be6:	4611      	mov	r1, r2
 8007be8:	461a      	mov	r2, r3
 8007bea:	4603      	mov	r3, r0
 8007bec:	817b      	strh	r3, [r7, #10]
 8007bee:	460b      	mov	r3, r1
 8007bf0:	813b      	strh	r3, [r7, #8]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007bf6:	f7fd fe6b 	bl	80058d0 <HAL_GetTick>
 8007bfa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	2b20      	cmp	r3, #32
 8007c06:	f040 8208 	bne.w	800801a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0c:	9300      	str	r3, [sp, #0]
 8007c0e:	2319      	movs	r3, #25
 8007c10:	2201      	movs	r2, #1
 8007c12:	497b      	ldr	r1, [pc, #492]	; (8007e00 <HAL_I2C_Mem_Read+0x224>)
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f000 fb85 	bl	8008324 <I2C_WaitOnFlagUntilTimeout>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d001      	beq.n	8007c24 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007c20:	2302      	movs	r3, #2
 8007c22:	e1fb      	b.n	800801c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d101      	bne.n	8007c32 <HAL_I2C_Mem_Read+0x56>
 8007c2e:	2302      	movs	r3, #2
 8007c30:	e1f4      	b.n	800801c <HAL_I2C_Mem_Read+0x440>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2201      	movs	r2, #1
 8007c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 0301 	and.w	r3, r3, #1
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d007      	beq.n	8007c58 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f042 0201 	orr.w	r2, r2, #1
 8007c56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2222      	movs	r2, #34	; 0x22
 8007c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2240      	movs	r2, #64	; 0x40
 8007c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007c88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	4a5b      	ldr	r2, [pc, #364]	; (8007e04 <HAL_I2C_Mem_Read+0x228>)
 8007c98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007c9a:	88f8      	ldrh	r0, [r7, #6]
 8007c9c:	893a      	ldrh	r2, [r7, #8]
 8007c9e:	8979      	ldrh	r1, [r7, #10]
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca2:	9301      	str	r3, [sp, #4]
 8007ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca6:	9300      	str	r3, [sp, #0]
 8007ca8:	4603      	mov	r3, r0
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f000 fa52 	bl	8008154 <I2C_RequestMemoryRead>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d001      	beq.n	8007cba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e1b0      	b.n	800801c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d113      	bne.n	8007cea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	623b      	str	r3, [r7, #32]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	695b      	ldr	r3, [r3, #20]
 8007ccc:	623b      	str	r3, [r7, #32]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	623b      	str	r3, [r7, #32]
 8007cd6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ce6:	601a      	str	r2, [r3, #0]
 8007ce8:	e184      	b.n	8007ff4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d11b      	bne.n	8007d2a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d02:	2300      	movs	r3, #0
 8007d04:	61fb      	str	r3, [r7, #28]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	695b      	ldr	r3, [r3, #20]
 8007d0c:	61fb      	str	r3, [r7, #28]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	699b      	ldr	r3, [r3, #24]
 8007d14:	61fb      	str	r3, [r7, #28]
 8007d16:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d26:	601a      	str	r2, [r3, #0]
 8007d28:	e164      	b.n	8007ff4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d11b      	bne.n	8007d6a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d40:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d52:	2300      	movs	r3, #0
 8007d54:	61bb      	str	r3, [r7, #24]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	695b      	ldr	r3, [r3, #20]
 8007d5c:	61bb      	str	r3, [r7, #24]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	699b      	ldr	r3, [r3, #24]
 8007d64:	61bb      	str	r3, [r7, #24]
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	e144      	b.n	8007ff4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	617b      	str	r3, [r7, #20]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	695b      	ldr	r3, [r3, #20]
 8007d74:	617b      	str	r3, [r7, #20]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	699b      	ldr	r3, [r3, #24]
 8007d7c:	617b      	str	r3, [r7, #20]
 8007d7e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007d80:	e138      	b.n	8007ff4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d86:	2b03      	cmp	r3, #3
 8007d88:	f200 80f1 	bhi.w	8007f6e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d123      	bne.n	8007ddc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f000 fc1b 	bl	80085d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d001      	beq.n	8007da8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e139      	b.n	800801c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	691a      	ldr	r2, [r3, #16]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db2:	b2d2      	uxtb	r2, r2
 8007db4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dba:	1c5a      	adds	r2, r3, #1
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	b29a      	uxth	r2, r3
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007dda:	e10b      	b.n	8007ff4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	d14e      	bne.n	8007e82 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de6:	9300      	str	r3, [sp, #0]
 8007de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dea:	2200      	movs	r2, #0
 8007dec:	4906      	ldr	r1, [pc, #24]	; (8007e08 <HAL_I2C_Mem_Read+0x22c>)
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f000 fa98 	bl	8008324 <I2C_WaitOnFlagUntilTimeout>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d008      	beq.n	8007e0c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e10e      	b.n	800801c <HAL_I2C_Mem_Read+0x440>
 8007dfe:	bf00      	nop
 8007e00:	00100002 	.word	0x00100002
 8007e04:	ffff0000 	.word	0xffff0000
 8007e08:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	691a      	ldr	r2, [r3, #16]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e26:	b2d2      	uxtb	r2, r2
 8007e28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2e:	1c5a      	adds	r2, r3, #1
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	b29a      	uxth	r2, r3
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	3b01      	subs	r3, #1
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	691a      	ldr	r2, [r3, #16]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e58:	b2d2      	uxtb	r2, r2
 8007e5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e60:	1c5a      	adds	r2, r3, #1
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007e80:	e0b8      	b.n	8007ff4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e88:	2200      	movs	r2, #0
 8007e8a:	4966      	ldr	r1, [pc, #408]	; (8008024 <HAL_I2C_Mem_Read+0x448>)
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f000 fa49 	bl	8008324 <I2C_WaitOnFlagUntilTimeout>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d001      	beq.n	8007e9c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e0bf      	b.n	800801c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007eaa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	691a      	ldr	r2, [r3, #16]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb6:	b2d2      	uxtb	r2, r2
 8007eb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ebe:	1c5a      	adds	r2, r3, #1
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	b29a      	uxth	r2, r3
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee0:	9300      	str	r3, [sp, #0]
 8007ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	494f      	ldr	r1, [pc, #316]	; (8008024 <HAL_I2C_Mem_Read+0x448>)
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f000 fa1b 	bl	8008324 <I2C_WaitOnFlagUntilTimeout>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d001      	beq.n	8007ef8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e091      	b.n	800801c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	691a      	ldr	r2, [r3, #16]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f12:	b2d2      	uxtb	r2, r2
 8007f14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1a:	1c5a      	adds	r2, r3, #1
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f24:	3b01      	subs	r3, #1
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	3b01      	subs	r3, #1
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	691a      	ldr	r2, [r3, #16]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f44:	b2d2      	uxtb	r2, r2
 8007f46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4c:	1c5a      	adds	r2, r3, #1
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f56:	3b01      	subs	r3, #1
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	3b01      	subs	r3, #1
 8007f66:	b29a      	uxth	r2, r3
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007f6c:	e042      	b.n	8007ff4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	f000 fb2e 	bl	80085d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d001      	beq.n	8007f82 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e04c      	b.n	800801c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	691a      	ldr	r2, [r3, #16]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8c:	b2d2      	uxtb	r2, r2
 8007f8e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f94:	1c5a      	adds	r2, r3, #1
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	b29a      	uxth	r2, r3
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	3b01      	subs	r3, #1
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	695b      	ldr	r3, [r3, #20]
 8007fba:	f003 0304 	and.w	r3, r3, #4
 8007fbe:	2b04      	cmp	r3, #4
 8007fc0:	d118      	bne.n	8007ff4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	691a      	ldr	r2, [r3, #16]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fcc:	b2d2      	uxtb	r2, r2
 8007fce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd4:	1c5a      	adds	r2, r3, #1
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	3b01      	subs	r3, #1
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f47f aec2 	bne.w	8007d82 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2220      	movs	r2, #32
 8008002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2200      	movs	r2, #0
 8008012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008016:	2300      	movs	r3, #0
 8008018:	e000      	b.n	800801c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800801a:	2302      	movs	r3, #2
  }
}
 800801c:	4618      	mov	r0, r3
 800801e:	3728      	adds	r7, #40	; 0x28
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}
 8008024:	00010004 	.word	0x00010004

08008028 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b088      	sub	sp, #32
 800802c:	af02      	add	r7, sp, #8
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	4608      	mov	r0, r1
 8008032:	4611      	mov	r1, r2
 8008034:	461a      	mov	r2, r3
 8008036:	4603      	mov	r3, r0
 8008038:	817b      	strh	r3, [r7, #10]
 800803a:	460b      	mov	r3, r1
 800803c:	813b      	strh	r3, [r7, #8]
 800803e:	4613      	mov	r3, r2
 8008040:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008050:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008054:	9300      	str	r3, [sp, #0]
 8008056:	6a3b      	ldr	r3, [r7, #32]
 8008058:	2200      	movs	r2, #0
 800805a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f000 f960 	bl	8008324 <I2C_WaitOnFlagUntilTimeout>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00d      	beq.n	8008086 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008078:	d103      	bne.n	8008082 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008080:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008082:	2303      	movs	r3, #3
 8008084:	e05f      	b.n	8008146 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008086:	897b      	ldrh	r3, [r7, #10]
 8008088:	b2db      	uxtb	r3, r3
 800808a:	461a      	mov	r2, r3
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008094:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008098:	6a3a      	ldr	r2, [r7, #32]
 800809a:	492d      	ldr	r1, [pc, #180]	; (8008150 <I2C_RequestMemoryWrite+0x128>)
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f000 f998 	bl	80083d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d001      	beq.n	80080ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	e04c      	b.n	8008146 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080ac:	2300      	movs	r3, #0
 80080ae:	617b      	str	r3, [r7, #20]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	695b      	ldr	r3, [r3, #20]
 80080b6:	617b      	str	r3, [r7, #20]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	617b      	str	r3, [r7, #20]
 80080c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080c4:	6a39      	ldr	r1, [r7, #32]
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f000 fa02 	bl	80084d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d00d      	beq.n	80080ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d6:	2b04      	cmp	r3, #4
 80080d8:	d107      	bne.n	80080ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	e02b      	b.n	8008146 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80080ee:	88fb      	ldrh	r3, [r7, #6]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d105      	bne.n	8008100 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80080f4:	893b      	ldrh	r3, [r7, #8]
 80080f6:	b2da      	uxtb	r2, r3
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	611a      	str	r2, [r3, #16]
 80080fe:	e021      	b.n	8008144 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008100:	893b      	ldrh	r3, [r7, #8]
 8008102:	0a1b      	lsrs	r3, r3, #8
 8008104:	b29b      	uxth	r3, r3
 8008106:	b2da      	uxtb	r2, r3
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800810e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008110:	6a39      	ldr	r1, [r7, #32]
 8008112:	68f8      	ldr	r0, [r7, #12]
 8008114:	f000 f9dc 	bl	80084d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00d      	beq.n	800813a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008122:	2b04      	cmp	r3, #4
 8008124:	d107      	bne.n	8008136 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008134:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	e005      	b.n	8008146 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800813a:	893b      	ldrh	r3, [r7, #8]
 800813c:	b2da      	uxtb	r2, r3
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3718      	adds	r7, #24
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	00010002 	.word	0x00010002

08008154 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b088      	sub	sp, #32
 8008158:	af02      	add	r7, sp, #8
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	4608      	mov	r0, r1
 800815e:	4611      	mov	r1, r2
 8008160:	461a      	mov	r2, r3
 8008162:	4603      	mov	r3, r0
 8008164:	817b      	strh	r3, [r7, #10]
 8008166:	460b      	mov	r3, r1
 8008168:	813b      	strh	r3, [r7, #8]
 800816a:	4613      	mov	r3, r2
 800816c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800817c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800818c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800818e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	6a3b      	ldr	r3, [r7, #32]
 8008194:	2200      	movs	r2, #0
 8008196:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f000 f8c2 	bl	8008324 <I2C_WaitOnFlagUntilTimeout>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00d      	beq.n	80081c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081b4:	d103      	bne.n	80081be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80081be:	2303      	movs	r3, #3
 80081c0:	e0aa      	b.n	8008318 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80081c2:	897b      	ldrh	r3, [r7, #10]
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	461a      	mov	r2, r3
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80081d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80081d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d4:	6a3a      	ldr	r2, [r7, #32]
 80081d6:	4952      	ldr	r1, [pc, #328]	; (8008320 <I2C_RequestMemoryRead+0x1cc>)
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f000 f8fa 	bl	80083d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d001      	beq.n	80081e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	e097      	b.n	8008318 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081e8:	2300      	movs	r3, #0
 80081ea:	617b      	str	r3, [r7, #20]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	695b      	ldr	r3, [r3, #20]
 80081f2:	617b      	str	r3, [r7, #20]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	699b      	ldr	r3, [r3, #24]
 80081fa:	617b      	str	r3, [r7, #20]
 80081fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008200:	6a39      	ldr	r1, [r7, #32]
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f000 f964 	bl	80084d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00d      	beq.n	800822a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008212:	2b04      	cmp	r3, #4
 8008214:	d107      	bne.n	8008226 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008224:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	e076      	b.n	8008318 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800822a:	88fb      	ldrh	r3, [r7, #6]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d105      	bne.n	800823c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008230:	893b      	ldrh	r3, [r7, #8]
 8008232:	b2da      	uxtb	r2, r3
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	611a      	str	r2, [r3, #16]
 800823a:	e021      	b.n	8008280 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800823c:	893b      	ldrh	r3, [r7, #8]
 800823e:	0a1b      	lsrs	r3, r3, #8
 8008240:	b29b      	uxth	r3, r3
 8008242:	b2da      	uxtb	r2, r3
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800824a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800824c:	6a39      	ldr	r1, [r7, #32]
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f000 f93e 	bl	80084d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00d      	beq.n	8008276 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825e:	2b04      	cmp	r3, #4
 8008260:	d107      	bne.n	8008272 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008270:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e050      	b.n	8008318 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008276:	893b      	ldrh	r3, [r7, #8]
 8008278:	b2da      	uxtb	r2, r3
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008282:	6a39      	ldr	r1, [r7, #32]
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f000 f923 	bl	80084d0 <I2C_WaitOnTXEFlagUntilTimeout>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00d      	beq.n	80082ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008294:	2b04      	cmp	r3, #4
 8008296:	d107      	bne.n	80082a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	e035      	b.n	8008318 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80082bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082be:	9300      	str	r3, [sp, #0]
 80082c0:	6a3b      	ldr	r3, [r7, #32]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f000 f82b 	bl	8008324 <I2C_WaitOnFlagUntilTimeout>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d00d      	beq.n	80082f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082e2:	d103      	bne.n	80082ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e013      	b.n	8008318 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80082f0:	897b      	ldrh	r3, [r7, #10]
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	f043 0301 	orr.w	r3, r3, #1
 80082f8:	b2da      	uxtb	r2, r3
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008302:	6a3a      	ldr	r2, [r7, #32]
 8008304:	4906      	ldr	r1, [pc, #24]	; (8008320 <I2C_RequestMemoryRead+0x1cc>)
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f000 f863 	bl	80083d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d001      	beq.n	8008316 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	e000      	b.n	8008318 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3718      	adds	r7, #24
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	00010002 	.word	0x00010002

08008324 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	603b      	str	r3, [r7, #0]
 8008330:	4613      	mov	r3, r2
 8008332:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008334:	e025      	b.n	8008382 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800833c:	d021      	beq.n	8008382 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800833e:	f7fd fac7 	bl	80058d0 <HAL_GetTick>
 8008342:	4602      	mov	r2, r0
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	1ad3      	subs	r3, r2, r3
 8008348:	683a      	ldr	r2, [r7, #0]
 800834a:	429a      	cmp	r2, r3
 800834c:	d302      	bcc.n	8008354 <I2C_WaitOnFlagUntilTimeout+0x30>
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d116      	bne.n	8008382 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2220      	movs	r2, #32
 800835e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800836e:	f043 0220 	orr.w	r2, r3, #32
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2200      	movs	r2, #0
 800837a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e023      	b.n	80083ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	0c1b      	lsrs	r3, r3, #16
 8008386:	b2db      	uxtb	r3, r3
 8008388:	2b01      	cmp	r3, #1
 800838a:	d10d      	bne.n	80083a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	695b      	ldr	r3, [r3, #20]
 8008392:	43da      	mvns	r2, r3
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	4013      	ands	r3, r2
 8008398:	b29b      	uxth	r3, r3
 800839a:	2b00      	cmp	r3, #0
 800839c:	bf0c      	ite	eq
 800839e:	2301      	moveq	r3, #1
 80083a0:	2300      	movne	r3, #0
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	461a      	mov	r2, r3
 80083a6:	e00c      	b.n	80083c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	699b      	ldr	r3, [r3, #24]
 80083ae:	43da      	mvns	r2, r3
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	4013      	ands	r3, r2
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	bf0c      	ite	eq
 80083ba:	2301      	moveq	r3, #1
 80083bc:	2300      	movne	r3, #0
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	461a      	mov	r2, r3
 80083c2:	79fb      	ldrb	r3, [r7, #7]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d0b6      	beq.n	8008336 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b084      	sub	sp, #16
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	60f8      	str	r0, [r7, #12]
 80083da:	60b9      	str	r1, [r7, #8]
 80083dc:	607a      	str	r2, [r7, #4]
 80083de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80083e0:	e051      	b.n	8008486 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	695b      	ldr	r3, [r3, #20]
 80083e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083f0:	d123      	bne.n	800843a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008400:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800840a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2200      	movs	r2, #0
 8008410:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2220      	movs	r2, #32
 8008416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008426:	f043 0204 	orr.w	r2, r3, #4
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2200      	movs	r2, #0
 8008432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	e046      	b.n	80084c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008440:	d021      	beq.n	8008486 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008442:	f7fd fa45 	bl	80058d0 <HAL_GetTick>
 8008446:	4602      	mov	r2, r0
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	429a      	cmp	r2, r3
 8008450:	d302      	bcc.n	8008458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d116      	bne.n	8008486 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2200      	movs	r2, #0
 800845c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2220      	movs	r2, #32
 8008462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2200      	movs	r2, #0
 800846a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008472:	f043 0220 	orr.w	r2, r3, #32
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	e020      	b.n	80084c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	0c1b      	lsrs	r3, r3, #16
 800848a:	b2db      	uxtb	r3, r3
 800848c:	2b01      	cmp	r3, #1
 800848e:	d10c      	bne.n	80084aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	695b      	ldr	r3, [r3, #20]
 8008496:	43da      	mvns	r2, r3
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	4013      	ands	r3, r2
 800849c:	b29b      	uxth	r3, r3
 800849e:	2b00      	cmp	r3, #0
 80084a0:	bf14      	ite	ne
 80084a2:	2301      	movne	r3, #1
 80084a4:	2300      	moveq	r3, #0
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	e00b      	b.n	80084c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	699b      	ldr	r3, [r3, #24]
 80084b0:	43da      	mvns	r2, r3
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	4013      	ands	r3, r2
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	bf14      	ite	ne
 80084bc:	2301      	movne	r3, #1
 80084be:	2300      	moveq	r3, #0
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d18d      	bne.n	80083e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3710      	adds	r7, #16
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80084dc:	e02d      	b.n	800853a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	f000 f8ce 	bl	8008680 <I2C_IsAcknowledgeFailed>
 80084e4:	4603      	mov	r3, r0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d001      	beq.n	80084ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	e02d      	b.n	800854a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f4:	d021      	beq.n	800853a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084f6:	f7fd f9eb 	bl	80058d0 <HAL_GetTick>
 80084fa:	4602      	mov	r2, r0
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	68ba      	ldr	r2, [r7, #8]
 8008502:	429a      	cmp	r2, r3
 8008504:	d302      	bcc.n	800850c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d116      	bne.n	800853a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2200      	movs	r2, #0
 8008510:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2220      	movs	r2, #32
 8008516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2200      	movs	r2, #0
 800851e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008526:	f043 0220 	orr.w	r2, r3, #32
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	e007      	b.n	800854a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	695b      	ldr	r3, [r3, #20]
 8008540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008544:	2b80      	cmp	r3, #128	; 0x80
 8008546:	d1ca      	bne.n	80084de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008548:	2300      	movs	r3, #0
}
 800854a:	4618      	mov	r0, r3
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b084      	sub	sp, #16
 8008556:	af00      	add	r7, sp, #0
 8008558:	60f8      	str	r0, [r7, #12]
 800855a:	60b9      	str	r1, [r7, #8]
 800855c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800855e:	e02d      	b.n	80085bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f000 f88d 	bl	8008680 <I2C_IsAcknowledgeFailed>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d001      	beq.n	8008570 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	e02d      	b.n	80085cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008576:	d021      	beq.n	80085bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008578:	f7fd f9aa 	bl	80058d0 <HAL_GetTick>
 800857c:	4602      	mov	r2, r0
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	68ba      	ldr	r2, [r7, #8]
 8008584:	429a      	cmp	r2, r3
 8008586:	d302      	bcc.n	800858e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d116      	bne.n	80085bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2220      	movs	r2, #32
 8008598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a8:	f043 0220 	orr.w	r2, r3, #32
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	e007      	b.n	80085cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	695b      	ldr	r3, [r3, #20]
 80085c2:	f003 0304 	and.w	r3, r3, #4
 80085c6:	2b04      	cmp	r3, #4
 80085c8:	d1ca      	bne.n	8008560 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80085e0:	e042      	b.n	8008668 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	695b      	ldr	r3, [r3, #20]
 80085e8:	f003 0310 	and.w	r3, r3, #16
 80085ec:	2b10      	cmp	r3, #16
 80085ee:	d119      	bne.n	8008624 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f06f 0210 	mvn.w	r2, #16
 80085f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2200      	movs	r2, #0
 80085fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2220      	movs	r2, #32
 8008604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2200      	movs	r2, #0
 800860c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2200      	movs	r2, #0
 800861c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	e029      	b.n	8008678 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008624:	f7fd f954 	bl	80058d0 <HAL_GetTick>
 8008628:	4602      	mov	r2, r0
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	68ba      	ldr	r2, [r7, #8]
 8008630:	429a      	cmp	r2, r3
 8008632:	d302      	bcc.n	800863a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d116      	bne.n	8008668 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2200      	movs	r2, #0
 800863e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2220      	movs	r2, #32
 8008644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008654:	f043 0220 	orr.w	r2, r3, #32
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2200      	movs	r2, #0
 8008660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	e007      	b.n	8008678 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	695b      	ldr	r3, [r3, #20]
 800866e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008672:	2b40      	cmp	r3, #64	; 0x40
 8008674:	d1b5      	bne.n	80085e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008676:	2300      	movs	r3, #0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3710      	adds	r7, #16
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	695b      	ldr	r3, [r3, #20]
 800868e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008696:	d11b      	bne.n	80086d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80086a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2220      	movs	r2, #32
 80086ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086bc:	f043 0204 	orr.w	r2, r3, #4
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	e000      	b.n	80086d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	370c      	adds	r7, #12
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
	...

080086e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b086      	sub	sp, #24
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d101      	bne.n	80086f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	e267      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d075      	beq.n	80087ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80086fe:	4b88      	ldr	r3, [pc, #544]	; (8008920 <HAL_RCC_OscConfig+0x240>)
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	f003 030c 	and.w	r3, r3, #12
 8008706:	2b04      	cmp	r3, #4
 8008708:	d00c      	beq.n	8008724 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800870a:	4b85      	ldr	r3, [pc, #532]	; (8008920 <HAL_RCC_OscConfig+0x240>)
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008712:	2b08      	cmp	r3, #8
 8008714:	d112      	bne.n	800873c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008716:	4b82      	ldr	r3, [pc, #520]	; (8008920 <HAL_RCC_OscConfig+0x240>)
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800871e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008722:	d10b      	bne.n	800873c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008724:	4b7e      	ldr	r3, [pc, #504]	; (8008920 <HAL_RCC_OscConfig+0x240>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800872c:	2b00      	cmp	r3, #0
 800872e:	d05b      	beq.n	80087e8 <HAL_RCC_OscConfig+0x108>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d157      	bne.n	80087e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	e242      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008744:	d106      	bne.n	8008754 <HAL_RCC_OscConfig+0x74>
 8008746:	4b76      	ldr	r3, [pc, #472]	; (8008920 <HAL_RCC_OscConfig+0x240>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a75      	ldr	r2, [pc, #468]	; (8008920 <HAL_RCC_OscConfig+0x240>)
 800874c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008750:	6013      	str	r3, [r2, #0]
 8008752:	e01d      	b.n	8008790 <HAL_RCC_OscConfig+0xb0>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800875c:	d10c      	bne.n	8008778 <HAL_RCC_OscConfig+0x98>
 800875e:	4b70      	ldr	r3, [pc, #448]	; (8008920 <HAL_RCC_OscConfig+0x240>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a6f      	ldr	r2, [pc, #444]	; (8008920 <HAL_RCC_OscConfig+0x240>)
 8008764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008768:	6013      	str	r3, [r2, #0]
 800876a:	4b6d      	ldr	r3, [pc, #436]	; (8008920 <HAL_RCC_OscConfig+0x240>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a6c      	ldr	r2, [pc, #432]	; (8008920 <HAL_RCC_OscConfig+0x240>)
 8008770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008774:	6013      	str	r3, [r2, #0]
 8008776:	e00b      	b.n	8008790 <HAL_RCC_OscConfig+0xb0>
 8008778:	4b69      	ldr	r3, [pc, #420]	; (8008920 <HAL_RCC_OscConfig+0x240>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a68      	ldr	r2, [pc, #416]	; (8008920 <HAL_RCC_OscConfig+0x240>)
 800877e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008782:	6013      	str	r3, [r2, #0]
 8008784:	4b66      	ldr	r3, [pc, #408]	; (8008920 <HAL_RCC_OscConfig+0x240>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a65      	ldr	r2, [pc, #404]	; (8008920 <HAL_RCC_OscConfig+0x240>)
 800878a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800878e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d013      	beq.n	80087c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008798:	f7fd f89a 	bl	80058d0 <HAL_GetTick>
 800879c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800879e:	e008      	b.n	80087b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80087a0:	f7fd f896 	bl	80058d0 <HAL_GetTick>
 80087a4:	4602      	mov	r2, r0
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	2b64      	cmp	r3, #100	; 0x64
 80087ac:	d901      	bls.n	80087b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80087ae:	2303      	movs	r3, #3
 80087b0:	e207      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087b2:	4b5b      	ldr	r3, [pc, #364]	; (8008920 <HAL_RCC_OscConfig+0x240>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d0f0      	beq.n	80087a0 <HAL_RCC_OscConfig+0xc0>
 80087be:	e014      	b.n	80087ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087c0:	f7fd f886 	bl	80058d0 <HAL_GetTick>
 80087c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087c6:	e008      	b.n	80087da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80087c8:	f7fd f882 	bl	80058d0 <HAL_GetTick>
 80087cc:	4602      	mov	r2, r0
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	1ad3      	subs	r3, r2, r3
 80087d2:	2b64      	cmp	r3, #100	; 0x64
 80087d4:	d901      	bls.n	80087da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80087d6:	2303      	movs	r3, #3
 80087d8:	e1f3      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087da:	4b51      	ldr	r3, [pc, #324]	; (8008920 <HAL_RCC_OscConfig+0x240>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d1f0      	bne.n	80087c8 <HAL_RCC_OscConfig+0xe8>
 80087e6:	e000      	b.n	80087ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f003 0302 	and.w	r3, r3, #2
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d063      	beq.n	80088be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80087f6:	4b4a      	ldr	r3, [pc, #296]	; (8008920 <HAL_RCC_OscConfig+0x240>)
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	f003 030c 	and.w	r3, r3, #12
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00b      	beq.n	800881a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008802:	4b47      	ldr	r3, [pc, #284]	; (8008920 <HAL_RCC_OscConfig+0x240>)
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800880a:	2b08      	cmp	r3, #8
 800880c:	d11c      	bne.n	8008848 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800880e:	4b44      	ldr	r3, [pc, #272]	; (8008920 <HAL_RCC_OscConfig+0x240>)
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008816:	2b00      	cmp	r3, #0
 8008818:	d116      	bne.n	8008848 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800881a:	4b41      	ldr	r3, [pc, #260]	; (8008920 <HAL_RCC_OscConfig+0x240>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 0302 	and.w	r3, r3, #2
 8008822:	2b00      	cmp	r3, #0
 8008824:	d005      	beq.n	8008832 <HAL_RCC_OscConfig+0x152>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	2b01      	cmp	r3, #1
 800882c:	d001      	beq.n	8008832 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e1c7      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008832:	4b3b      	ldr	r3, [pc, #236]	; (8008920 <HAL_RCC_OscConfig+0x240>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	00db      	lsls	r3, r3, #3
 8008840:	4937      	ldr	r1, [pc, #220]	; (8008920 <HAL_RCC_OscConfig+0x240>)
 8008842:	4313      	orrs	r3, r2
 8008844:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008846:	e03a      	b.n	80088be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d020      	beq.n	8008892 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008850:	4b34      	ldr	r3, [pc, #208]	; (8008924 <HAL_RCC_OscConfig+0x244>)
 8008852:	2201      	movs	r2, #1
 8008854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008856:	f7fd f83b 	bl	80058d0 <HAL_GetTick>
 800885a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800885c:	e008      	b.n	8008870 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800885e:	f7fd f837 	bl	80058d0 <HAL_GetTick>
 8008862:	4602      	mov	r2, r0
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	1ad3      	subs	r3, r2, r3
 8008868:	2b02      	cmp	r3, #2
 800886a:	d901      	bls.n	8008870 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800886c:	2303      	movs	r3, #3
 800886e:	e1a8      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008870:	4b2b      	ldr	r3, [pc, #172]	; (8008920 <HAL_RCC_OscConfig+0x240>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f003 0302 	and.w	r3, r3, #2
 8008878:	2b00      	cmp	r3, #0
 800887a:	d0f0      	beq.n	800885e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800887c:	4b28      	ldr	r3, [pc, #160]	; (8008920 <HAL_RCC_OscConfig+0x240>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	691b      	ldr	r3, [r3, #16]
 8008888:	00db      	lsls	r3, r3, #3
 800888a:	4925      	ldr	r1, [pc, #148]	; (8008920 <HAL_RCC_OscConfig+0x240>)
 800888c:	4313      	orrs	r3, r2
 800888e:	600b      	str	r3, [r1, #0]
 8008890:	e015      	b.n	80088be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008892:	4b24      	ldr	r3, [pc, #144]	; (8008924 <HAL_RCC_OscConfig+0x244>)
 8008894:	2200      	movs	r2, #0
 8008896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008898:	f7fd f81a 	bl	80058d0 <HAL_GetTick>
 800889c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800889e:	e008      	b.n	80088b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80088a0:	f7fd f816 	bl	80058d0 <HAL_GetTick>
 80088a4:	4602      	mov	r2, r0
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	1ad3      	subs	r3, r2, r3
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d901      	bls.n	80088b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80088ae:	2303      	movs	r3, #3
 80088b0:	e187      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088b2:	4b1b      	ldr	r3, [pc, #108]	; (8008920 <HAL_RCC_OscConfig+0x240>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f003 0302 	and.w	r3, r3, #2
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1f0      	bne.n	80088a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 0308 	and.w	r3, r3, #8
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d036      	beq.n	8008938 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	695b      	ldr	r3, [r3, #20]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d016      	beq.n	8008900 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80088d2:	4b15      	ldr	r3, [pc, #84]	; (8008928 <HAL_RCC_OscConfig+0x248>)
 80088d4:	2201      	movs	r2, #1
 80088d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088d8:	f7fc fffa 	bl	80058d0 <HAL_GetTick>
 80088dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088de:	e008      	b.n	80088f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80088e0:	f7fc fff6 	bl	80058d0 <HAL_GetTick>
 80088e4:	4602      	mov	r2, r0
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	1ad3      	subs	r3, r2, r3
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d901      	bls.n	80088f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80088ee:	2303      	movs	r3, #3
 80088f0:	e167      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088f2:	4b0b      	ldr	r3, [pc, #44]	; (8008920 <HAL_RCC_OscConfig+0x240>)
 80088f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088f6:	f003 0302 	and.w	r3, r3, #2
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d0f0      	beq.n	80088e0 <HAL_RCC_OscConfig+0x200>
 80088fe:	e01b      	b.n	8008938 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008900:	4b09      	ldr	r3, [pc, #36]	; (8008928 <HAL_RCC_OscConfig+0x248>)
 8008902:	2200      	movs	r2, #0
 8008904:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008906:	f7fc ffe3 	bl	80058d0 <HAL_GetTick>
 800890a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800890c:	e00e      	b.n	800892c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800890e:	f7fc ffdf 	bl	80058d0 <HAL_GetTick>
 8008912:	4602      	mov	r2, r0
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	1ad3      	subs	r3, r2, r3
 8008918:	2b02      	cmp	r3, #2
 800891a:	d907      	bls.n	800892c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800891c:	2303      	movs	r3, #3
 800891e:	e150      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4e2>
 8008920:	40023800 	.word	0x40023800
 8008924:	42470000 	.word	0x42470000
 8008928:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800892c:	4b88      	ldr	r3, [pc, #544]	; (8008b50 <HAL_RCC_OscConfig+0x470>)
 800892e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008930:	f003 0302 	and.w	r3, r3, #2
 8008934:	2b00      	cmp	r3, #0
 8008936:	d1ea      	bne.n	800890e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 0304 	and.w	r3, r3, #4
 8008940:	2b00      	cmp	r3, #0
 8008942:	f000 8097 	beq.w	8008a74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008946:	2300      	movs	r3, #0
 8008948:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800894a:	4b81      	ldr	r3, [pc, #516]	; (8008b50 <HAL_RCC_OscConfig+0x470>)
 800894c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800894e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008952:	2b00      	cmp	r3, #0
 8008954:	d10f      	bne.n	8008976 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008956:	2300      	movs	r3, #0
 8008958:	60bb      	str	r3, [r7, #8]
 800895a:	4b7d      	ldr	r3, [pc, #500]	; (8008b50 <HAL_RCC_OscConfig+0x470>)
 800895c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895e:	4a7c      	ldr	r2, [pc, #496]	; (8008b50 <HAL_RCC_OscConfig+0x470>)
 8008960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008964:	6413      	str	r3, [r2, #64]	; 0x40
 8008966:	4b7a      	ldr	r3, [pc, #488]	; (8008b50 <HAL_RCC_OscConfig+0x470>)
 8008968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800896e:	60bb      	str	r3, [r7, #8]
 8008970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008972:	2301      	movs	r3, #1
 8008974:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008976:	4b77      	ldr	r3, [pc, #476]	; (8008b54 <HAL_RCC_OscConfig+0x474>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800897e:	2b00      	cmp	r3, #0
 8008980:	d118      	bne.n	80089b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008982:	4b74      	ldr	r3, [pc, #464]	; (8008b54 <HAL_RCC_OscConfig+0x474>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a73      	ldr	r2, [pc, #460]	; (8008b54 <HAL_RCC_OscConfig+0x474>)
 8008988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800898c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800898e:	f7fc ff9f 	bl	80058d0 <HAL_GetTick>
 8008992:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008994:	e008      	b.n	80089a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008996:	f7fc ff9b 	bl	80058d0 <HAL_GetTick>
 800899a:	4602      	mov	r2, r0
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	d901      	bls.n	80089a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80089a4:	2303      	movs	r3, #3
 80089a6:	e10c      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089a8:	4b6a      	ldr	r3, [pc, #424]	; (8008b54 <HAL_RCC_OscConfig+0x474>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d0f0      	beq.n	8008996 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d106      	bne.n	80089ca <HAL_RCC_OscConfig+0x2ea>
 80089bc:	4b64      	ldr	r3, [pc, #400]	; (8008b50 <HAL_RCC_OscConfig+0x470>)
 80089be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089c0:	4a63      	ldr	r2, [pc, #396]	; (8008b50 <HAL_RCC_OscConfig+0x470>)
 80089c2:	f043 0301 	orr.w	r3, r3, #1
 80089c6:	6713      	str	r3, [r2, #112]	; 0x70
 80089c8:	e01c      	b.n	8008a04 <HAL_RCC_OscConfig+0x324>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	2b05      	cmp	r3, #5
 80089d0:	d10c      	bne.n	80089ec <HAL_RCC_OscConfig+0x30c>
 80089d2:	4b5f      	ldr	r3, [pc, #380]	; (8008b50 <HAL_RCC_OscConfig+0x470>)
 80089d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089d6:	4a5e      	ldr	r2, [pc, #376]	; (8008b50 <HAL_RCC_OscConfig+0x470>)
 80089d8:	f043 0304 	orr.w	r3, r3, #4
 80089dc:	6713      	str	r3, [r2, #112]	; 0x70
 80089de:	4b5c      	ldr	r3, [pc, #368]	; (8008b50 <HAL_RCC_OscConfig+0x470>)
 80089e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089e2:	4a5b      	ldr	r2, [pc, #364]	; (8008b50 <HAL_RCC_OscConfig+0x470>)
 80089e4:	f043 0301 	orr.w	r3, r3, #1
 80089e8:	6713      	str	r3, [r2, #112]	; 0x70
 80089ea:	e00b      	b.n	8008a04 <HAL_RCC_OscConfig+0x324>
 80089ec:	4b58      	ldr	r3, [pc, #352]	; (8008b50 <HAL_RCC_OscConfig+0x470>)
 80089ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089f0:	4a57      	ldr	r2, [pc, #348]	; (8008b50 <HAL_RCC_OscConfig+0x470>)
 80089f2:	f023 0301 	bic.w	r3, r3, #1
 80089f6:	6713      	str	r3, [r2, #112]	; 0x70
 80089f8:	4b55      	ldr	r3, [pc, #340]	; (8008b50 <HAL_RCC_OscConfig+0x470>)
 80089fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089fc:	4a54      	ldr	r2, [pc, #336]	; (8008b50 <HAL_RCC_OscConfig+0x470>)
 80089fe:	f023 0304 	bic.w	r3, r3, #4
 8008a02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d015      	beq.n	8008a38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a0c:	f7fc ff60 	bl	80058d0 <HAL_GetTick>
 8008a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a12:	e00a      	b.n	8008a2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a14:	f7fc ff5c 	bl	80058d0 <HAL_GetTick>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	1ad3      	subs	r3, r2, r3
 8008a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d901      	bls.n	8008a2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008a26:	2303      	movs	r3, #3
 8008a28:	e0cb      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a2a:	4b49      	ldr	r3, [pc, #292]	; (8008b50 <HAL_RCC_OscConfig+0x470>)
 8008a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a2e:	f003 0302 	and.w	r3, r3, #2
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d0ee      	beq.n	8008a14 <HAL_RCC_OscConfig+0x334>
 8008a36:	e014      	b.n	8008a62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a38:	f7fc ff4a 	bl	80058d0 <HAL_GetTick>
 8008a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a3e:	e00a      	b.n	8008a56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a40:	f7fc ff46 	bl	80058d0 <HAL_GetTick>
 8008a44:	4602      	mov	r2, r0
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	1ad3      	subs	r3, r2, r3
 8008a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d901      	bls.n	8008a56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008a52:	2303      	movs	r3, #3
 8008a54:	e0b5      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a56:	4b3e      	ldr	r3, [pc, #248]	; (8008b50 <HAL_RCC_OscConfig+0x470>)
 8008a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a5a:	f003 0302 	and.w	r3, r3, #2
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1ee      	bne.n	8008a40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008a62:	7dfb      	ldrb	r3, [r7, #23]
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d105      	bne.n	8008a74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a68:	4b39      	ldr	r3, [pc, #228]	; (8008b50 <HAL_RCC_OscConfig+0x470>)
 8008a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6c:	4a38      	ldr	r2, [pc, #224]	; (8008b50 <HAL_RCC_OscConfig+0x470>)
 8008a6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	699b      	ldr	r3, [r3, #24]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f000 80a1 	beq.w	8008bc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008a7e:	4b34      	ldr	r3, [pc, #208]	; (8008b50 <HAL_RCC_OscConfig+0x470>)
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	f003 030c 	and.w	r3, r3, #12
 8008a86:	2b08      	cmp	r3, #8
 8008a88:	d05c      	beq.n	8008b44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	699b      	ldr	r3, [r3, #24]
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d141      	bne.n	8008b16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a92:	4b31      	ldr	r3, [pc, #196]	; (8008b58 <HAL_RCC_OscConfig+0x478>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a98:	f7fc ff1a 	bl	80058d0 <HAL_GetTick>
 8008a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a9e:	e008      	b.n	8008ab2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008aa0:	f7fc ff16 	bl	80058d0 <HAL_GetTick>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d901      	bls.n	8008ab2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	e087      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ab2:	4b27      	ldr	r3, [pc, #156]	; (8008b50 <HAL_RCC_OscConfig+0x470>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1f0      	bne.n	8008aa0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	69da      	ldr	r2, [r3, #28]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a1b      	ldr	r3, [r3, #32]
 8008ac6:	431a      	orrs	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008acc:	019b      	lsls	r3, r3, #6
 8008ace:	431a      	orrs	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ad4:	085b      	lsrs	r3, r3, #1
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	041b      	lsls	r3, r3, #16
 8008ada:	431a      	orrs	r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae0:	061b      	lsls	r3, r3, #24
 8008ae2:	491b      	ldr	r1, [pc, #108]	; (8008b50 <HAL_RCC_OscConfig+0x470>)
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ae8:	4b1b      	ldr	r3, [pc, #108]	; (8008b58 <HAL_RCC_OscConfig+0x478>)
 8008aea:	2201      	movs	r2, #1
 8008aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008aee:	f7fc feef 	bl	80058d0 <HAL_GetTick>
 8008af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008af4:	e008      	b.n	8008b08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008af6:	f7fc feeb 	bl	80058d0 <HAL_GetTick>
 8008afa:	4602      	mov	r2, r0
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	1ad3      	subs	r3, r2, r3
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d901      	bls.n	8008b08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008b04:	2303      	movs	r3, #3
 8008b06:	e05c      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b08:	4b11      	ldr	r3, [pc, #68]	; (8008b50 <HAL_RCC_OscConfig+0x470>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d0f0      	beq.n	8008af6 <HAL_RCC_OscConfig+0x416>
 8008b14:	e054      	b.n	8008bc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b16:	4b10      	ldr	r3, [pc, #64]	; (8008b58 <HAL_RCC_OscConfig+0x478>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b1c:	f7fc fed8 	bl	80058d0 <HAL_GetTick>
 8008b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b22:	e008      	b.n	8008b36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b24:	f7fc fed4 	bl	80058d0 <HAL_GetTick>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d901      	bls.n	8008b36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008b32:	2303      	movs	r3, #3
 8008b34:	e045      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b36:	4b06      	ldr	r3, [pc, #24]	; (8008b50 <HAL_RCC_OscConfig+0x470>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1f0      	bne.n	8008b24 <HAL_RCC_OscConfig+0x444>
 8008b42:	e03d      	b.n	8008bc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	699b      	ldr	r3, [r3, #24]
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d107      	bne.n	8008b5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e038      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4e2>
 8008b50:	40023800 	.word	0x40023800
 8008b54:	40007000 	.word	0x40007000
 8008b58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008b5c:	4b1b      	ldr	r3, [pc, #108]	; (8008bcc <HAL_RCC_OscConfig+0x4ec>)
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	699b      	ldr	r3, [r3, #24]
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d028      	beq.n	8008bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d121      	bne.n	8008bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d11a      	bne.n	8008bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008b92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d111      	bne.n	8008bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba2:	085b      	lsrs	r3, r3, #1
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d107      	bne.n	8008bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d001      	beq.n	8008bc0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e000      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008bc0:	2300      	movs	r3, #0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3718      	adds	r7, #24
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	40023800 	.word	0x40023800

08008bd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d101      	bne.n	8008be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	e0cc      	b.n	8008d7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008be4:	4b68      	ldr	r3, [pc, #416]	; (8008d88 <HAL_RCC_ClockConfig+0x1b8>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 0307 	and.w	r3, r3, #7
 8008bec:	683a      	ldr	r2, [r7, #0]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d90c      	bls.n	8008c0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bf2:	4b65      	ldr	r3, [pc, #404]	; (8008d88 <HAL_RCC_ClockConfig+0x1b8>)
 8008bf4:	683a      	ldr	r2, [r7, #0]
 8008bf6:	b2d2      	uxtb	r2, r2
 8008bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bfa:	4b63      	ldr	r3, [pc, #396]	; (8008d88 <HAL_RCC_ClockConfig+0x1b8>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f003 0307 	and.w	r3, r3, #7
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d001      	beq.n	8008c0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e0b8      	b.n	8008d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 0302 	and.w	r3, r3, #2
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d020      	beq.n	8008c5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f003 0304 	and.w	r3, r3, #4
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d005      	beq.n	8008c30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008c24:	4b59      	ldr	r3, [pc, #356]	; (8008d8c <HAL_RCC_ClockConfig+0x1bc>)
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	4a58      	ldr	r2, [pc, #352]	; (8008d8c <HAL_RCC_ClockConfig+0x1bc>)
 8008c2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008c2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f003 0308 	and.w	r3, r3, #8
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d005      	beq.n	8008c48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008c3c:	4b53      	ldr	r3, [pc, #332]	; (8008d8c <HAL_RCC_ClockConfig+0x1bc>)
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	4a52      	ldr	r2, [pc, #328]	; (8008d8c <HAL_RCC_ClockConfig+0x1bc>)
 8008c42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008c46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c48:	4b50      	ldr	r3, [pc, #320]	; (8008d8c <HAL_RCC_ClockConfig+0x1bc>)
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	494d      	ldr	r1, [pc, #308]	; (8008d8c <HAL_RCC_ClockConfig+0x1bc>)
 8008c56:	4313      	orrs	r3, r2
 8008c58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f003 0301 	and.w	r3, r3, #1
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d044      	beq.n	8008cf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d107      	bne.n	8008c7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c6e:	4b47      	ldr	r3, [pc, #284]	; (8008d8c <HAL_RCC_ClockConfig+0x1bc>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d119      	bne.n	8008cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e07f      	b.n	8008d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	2b02      	cmp	r3, #2
 8008c84:	d003      	beq.n	8008c8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c8a:	2b03      	cmp	r3, #3
 8008c8c:	d107      	bne.n	8008c9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c8e:	4b3f      	ldr	r3, [pc, #252]	; (8008d8c <HAL_RCC_ClockConfig+0x1bc>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d109      	bne.n	8008cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e06f      	b.n	8008d7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c9e:	4b3b      	ldr	r3, [pc, #236]	; (8008d8c <HAL_RCC_ClockConfig+0x1bc>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 0302 	and.w	r3, r3, #2
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d101      	bne.n	8008cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	e067      	b.n	8008d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008cae:	4b37      	ldr	r3, [pc, #220]	; (8008d8c <HAL_RCC_ClockConfig+0x1bc>)
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	f023 0203 	bic.w	r2, r3, #3
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	4934      	ldr	r1, [pc, #208]	; (8008d8c <HAL_RCC_ClockConfig+0x1bc>)
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008cc0:	f7fc fe06 	bl	80058d0 <HAL_GetTick>
 8008cc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cc6:	e00a      	b.n	8008cde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008cc8:	f7fc fe02 	bl	80058d0 <HAL_GetTick>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d901      	bls.n	8008cde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008cda:	2303      	movs	r3, #3
 8008cdc:	e04f      	b.n	8008d7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cde:	4b2b      	ldr	r3, [pc, #172]	; (8008d8c <HAL_RCC_ClockConfig+0x1bc>)
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	f003 020c 	and.w	r2, r3, #12
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d1eb      	bne.n	8008cc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008cf0:	4b25      	ldr	r3, [pc, #148]	; (8008d88 <HAL_RCC_ClockConfig+0x1b8>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f003 0307 	and.w	r3, r3, #7
 8008cf8:	683a      	ldr	r2, [r7, #0]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d20c      	bcs.n	8008d18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cfe:	4b22      	ldr	r3, [pc, #136]	; (8008d88 <HAL_RCC_ClockConfig+0x1b8>)
 8008d00:	683a      	ldr	r2, [r7, #0]
 8008d02:	b2d2      	uxtb	r2, r2
 8008d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d06:	4b20      	ldr	r3, [pc, #128]	; (8008d88 <HAL_RCC_ClockConfig+0x1b8>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f003 0307 	and.w	r3, r3, #7
 8008d0e:	683a      	ldr	r2, [r7, #0]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d001      	beq.n	8008d18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	e032      	b.n	8008d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f003 0304 	and.w	r3, r3, #4
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d008      	beq.n	8008d36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008d24:	4b19      	ldr	r3, [pc, #100]	; (8008d8c <HAL_RCC_ClockConfig+0x1bc>)
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	4916      	ldr	r1, [pc, #88]	; (8008d8c <HAL_RCC_ClockConfig+0x1bc>)
 8008d32:	4313      	orrs	r3, r2
 8008d34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f003 0308 	and.w	r3, r3, #8
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d009      	beq.n	8008d56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008d42:	4b12      	ldr	r3, [pc, #72]	; (8008d8c <HAL_RCC_ClockConfig+0x1bc>)
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	00db      	lsls	r3, r3, #3
 8008d50:	490e      	ldr	r1, [pc, #56]	; (8008d8c <HAL_RCC_ClockConfig+0x1bc>)
 8008d52:	4313      	orrs	r3, r2
 8008d54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008d56:	f000 f821 	bl	8008d9c <HAL_RCC_GetSysClockFreq>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	4b0b      	ldr	r3, [pc, #44]	; (8008d8c <HAL_RCC_ClockConfig+0x1bc>)
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	091b      	lsrs	r3, r3, #4
 8008d62:	f003 030f 	and.w	r3, r3, #15
 8008d66:	490a      	ldr	r1, [pc, #40]	; (8008d90 <HAL_RCC_ClockConfig+0x1c0>)
 8008d68:	5ccb      	ldrb	r3, [r1, r3]
 8008d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8008d6e:	4a09      	ldr	r2, [pc, #36]	; (8008d94 <HAL_RCC_ClockConfig+0x1c4>)
 8008d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008d72:	4b09      	ldr	r3, [pc, #36]	; (8008d98 <HAL_RCC_ClockConfig+0x1c8>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7fc fd66 	bl	8005848 <HAL_InitTick>

  return HAL_OK;
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	40023c00 	.word	0x40023c00
 8008d8c:	40023800 	.word	0x40023800
 8008d90:	0800c5a8 	.word	0x0800c5a8
 8008d94:	20000394 	.word	0x20000394
 8008d98:	20000398 	.word	0x20000398

08008d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008da0:	b090      	sub	sp, #64	; 0x40
 8008da2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008da4:	2300      	movs	r3, #0
 8008da6:	637b      	str	r3, [r7, #52]	; 0x34
 8008da8:	2300      	movs	r3, #0
 8008daa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dac:	2300      	movs	r3, #0
 8008dae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008db0:	2300      	movs	r3, #0
 8008db2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008db4:	4b59      	ldr	r3, [pc, #356]	; (8008f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	f003 030c 	and.w	r3, r3, #12
 8008dbc:	2b08      	cmp	r3, #8
 8008dbe:	d00d      	beq.n	8008ddc <HAL_RCC_GetSysClockFreq+0x40>
 8008dc0:	2b08      	cmp	r3, #8
 8008dc2:	f200 80a1 	bhi.w	8008f08 <HAL_RCC_GetSysClockFreq+0x16c>
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d002      	beq.n	8008dd0 <HAL_RCC_GetSysClockFreq+0x34>
 8008dca:	2b04      	cmp	r3, #4
 8008dcc:	d003      	beq.n	8008dd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8008dce:	e09b      	b.n	8008f08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008dd0:	4b53      	ldr	r3, [pc, #332]	; (8008f20 <HAL_RCC_GetSysClockFreq+0x184>)
 8008dd2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008dd4:	e09b      	b.n	8008f0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008dd6:	4b53      	ldr	r3, [pc, #332]	; (8008f24 <HAL_RCC_GetSysClockFreq+0x188>)
 8008dd8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008dda:	e098      	b.n	8008f0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008ddc:	4b4f      	ldr	r3, [pc, #316]	; (8008f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008de4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008de6:	4b4d      	ldr	r3, [pc, #308]	; (8008f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d028      	beq.n	8008e44 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008df2:	4b4a      	ldr	r3, [pc, #296]	; (8008f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	099b      	lsrs	r3, r3, #6
 8008df8:	2200      	movs	r2, #0
 8008dfa:	623b      	str	r3, [r7, #32]
 8008dfc:	627a      	str	r2, [r7, #36]	; 0x24
 8008dfe:	6a3b      	ldr	r3, [r7, #32]
 8008e00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008e04:	2100      	movs	r1, #0
 8008e06:	4b47      	ldr	r3, [pc, #284]	; (8008f24 <HAL_RCC_GetSysClockFreq+0x188>)
 8008e08:	fb03 f201 	mul.w	r2, r3, r1
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	fb00 f303 	mul.w	r3, r0, r3
 8008e12:	4413      	add	r3, r2
 8008e14:	4a43      	ldr	r2, [pc, #268]	; (8008f24 <HAL_RCC_GetSysClockFreq+0x188>)
 8008e16:	fba0 1202 	umull	r1, r2, r0, r2
 8008e1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e1c:	460a      	mov	r2, r1
 8008e1e:	62ba      	str	r2, [r7, #40]	; 0x28
 8008e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e22:	4413      	add	r3, r2
 8008e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e28:	2200      	movs	r2, #0
 8008e2a:	61bb      	str	r3, [r7, #24]
 8008e2c:	61fa      	str	r2, [r7, #28]
 8008e2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008e36:	f7f7 fd0d 	bl	8000854 <__aeabi_uldivmod>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	4613      	mov	r3, r2
 8008e40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e42:	e053      	b.n	8008eec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e44:	4b35      	ldr	r3, [pc, #212]	; (8008f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	099b      	lsrs	r3, r3, #6
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	613b      	str	r3, [r7, #16]
 8008e4e:	617a      	str	r2, [r7, #20]
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008e56:	f04f 0b00 	mov.w	fp, #0
 8008e5a:	4652      	mov	r2, sl
 8008e5c:	465b      	mov	r3, fp
 8008e5e:	f04f 0000 	mov.w	r0, #0
 8008e62:	f04f 0100 	mov.w	r1, #0
 8008e66:	0159      	lsls	r1, r3, #5
 8008e68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e6c:	0150      	lsls	r0, r2, #5
 8008e6e:	4602      	mov	r2, r0
 8008e70:	460b      	mov	r3, r1
 8008e72:	ebb2 080a 	subs.w	r8, r2, sl
 8008e76:	eb63 090b 	sbc.w	r9, r3, fp
 8008e7a:	f04f 0200 	mov.w	r2, #0
 8008e7e:	f04f 0300 	mov.w	r3, #0
 8008e82:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008e86:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008e8a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008e8e:	ebb2 0408 	subs.w	r4, r2, r8
 8008e92:	eb63 0509 	sbc.w	r5, r3, r9
 8008e96:	f04f 0200 	mov.w	r2, #0
 8008e9a:	f04f 0300 	mov.w	r3, #0
 8008e9e:	00eb      	lsls	r3, r5, #3
 8008ea0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ea4:	00e2      	lsls	r2, r4, #3
 8008ea6:	4614      	mov	r4, r2
 8008ea8:	461d      	mov	r5, r3
 8008eaa:	eb14 030a 	adds.w	r3, r4, sl
 8008eae:	603b      	str	r3, [r7, #0]
 8008eb0:	eb45 030b 	adc.w	r3, r5, fp
 8008eb4:	607b      	str	r3, [r7, #4]
 8008eb6:	f04f 0200 	mov.w	r2, #0
 8008eba:	f04f 0300 	mov.w	r3, #0
 8008ebe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008ec2:	4629      	mov	r1, r5
 8008ec4:	028b      	lsls	r3, r1, #10
 8008ec6:	4621      	mov	r1, r4
 8008ec8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008ecc:	4621      	mov	r1, r4
 8008ece:	028a      	lsls	r2, r1, #10
 8008ed0:	4610      	mov	r0, r2
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	60bb      	str	r3, [r7, #8]
 8008eda:	60fa      	str	r2, [r7, #12]
 8008edc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ee0:	f7f7 fcb8 	bl	8000854 <__aeabi_uldivmod>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	4613      	mov	r3, r2
 8008eea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008eec:	4b0b      	ldr	r3, [pc, #44]	; (8008f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	0c1b      	lsrs	r3, r3, #16
 8008ef2:	f003 0303 	and.w	r3, r3, #3
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	005b      	lsls	r3, r3, #1
 8008efa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8008efc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008f06:	e002      	b.n	8008f0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008f08:	4b05      	ldr	r3, [pc, #20]	; (8008f20 <HAL_RCC_GetSysClockFreq+0x184>)
 8008f0a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008f0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3740      	adds	r7, #64	; 0x40
 8008f14:	46bd      	mov	sp, r7
 8008f16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f1a:	bf00      	nop
 8008f1c:	40023800 	.word	0x40023800
 8008f20:	00f42400 	.word	0x00f42400
 8008f24:	017d7840 	.word	0x017d7840

08008f28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f2c:	4b03      	ldr	r3, [pc, #12]	; (8008f3c <HAL_RCC_GetHCLKFreq+0x14>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	20000394 	.word	0x20000394

08008f40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008f44:	f7ff fff0 	bl	8008f28 <HAL_RCC_GetHCLKFreq>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	4b05      	ldr	r3, [pc, #20]	; (8008f60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	0a9b      	lsrs	r3, r3, #10
 8008f50:	f003 0307 	and.w	r3, r3, #7
 8008f54:	4903      	ldr	r1, [pc, #12]	; (8008f64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f56:	5ccb      	ldrb	r3, [r1, r3]
 8008f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	40023800 	.word	0x40023800
 8008f64:	0800c5b8 	.word	0x0800c5b8

08008f68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008f6c:	f7ff ffdc 	bl	8008f28 <HAL_RCC_GetHCLKFreq>
 8008f70:	4602      	mov	r2, r0
 8008f72:	4b05      	ldr	r3, [pc, #20]	; (8008f88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	0b5b      	lsrs	r3, r3, #13
 8008f78:	f003 0307 	and.w	r3, r3, #7
 8008f7c:	4903      	ldr	r1, [pc, #12]	; (8008f8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f7e:	5ccb      	ldrb	r3, [r1, r3]
 8008f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	bd80      	pop	{r7, pc}
 8008f88:	40023800 	.word	0x40023800
 8008f8c:	0800c5b8 	.word	0x0800c5b8

08008f90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d101      	bne.n	8008fa2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	e07b      	b.n	800909a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d108      	bne.n	8008fbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008fb2:	d009      	beq.n	8008fc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	61da      	str	r2, [r3, #28]
 8008fba:	e005      	b.n	8008fc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d106      	bne.n	8008fe8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f7fc f9ae 	bl	8005344 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2202      	movs	r2, #2
 8008fec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ffe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009010:	431a      	orrs	r2, r3
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800901a:	431a      	orrs	r2, r3
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	f003 0302 	and.w	r3, r3, #2
 8009024:	431a      	orrs	r2, r3
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	695b      	ldr	r3, [r3, #20]
 800902a:	f003 0301 	and.w	r3, r3, #1
 800902e:	431a      	orrs	r2, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	699b      	ldr	r3, [r3, #24]
 8009034:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009038:	431a      	orrs	r2, r3
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	69db      	ldr	r3, [r3, #28]
 800903e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009042:	431a      	orrs	r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6a1b      	ldr	r3, [r3, #32]
 8009048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800904c:	ea42 0103 	orr.w	r1, r2, r3
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009054:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	430a      	orrs	r2, r1
 800905e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	699b      	ldr	r3, [r3, #24]
 8009064:	0c1b      	lsrs	r3, r3, #16
 8009066:	f003 0104 	and.w	r1, r3, #4
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906e:	f003 0210 	and.w	r2, r3, #16
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	430a      	orrs	r2, r1
 8009078:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	69da      	ldr	r2, [r3, #28]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009088:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2201      	movs	r2, #1
 8009094:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3708      	adds	r7, #8
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b088      	sub	sp, #32
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	60f8      	str	r0, [r7, #12]
 80090aa:	60b9      	str	r1, [r7, #8]
 80090ac:	603b      	str	r3, [r7, #0]
 80090ae:	4613      	mov	r3, r2
 80090b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80090b2:	2300      	movs	r3, #0
 80090b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d101      	bne.n	80090c4 <HAL_SPI_Transmit+0x22>
 80090c0:	2302      	movs	r3, #2
 80090c2:	e126      	b.n	8009312 <HAL_SPI_Transmit+0x270>
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80090cc:	f7fc fc00 	bl	80058d0 <HAL_GetTick>
 80090d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80090d2:	88fb      	ldrh	r3, [r7, #6]
 80090d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d002      	beq.n	80090e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80090e2:	2302      	movs	r3, #2
 80090e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80090e6:	e10b      	b.n	8009300 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d002      	beq.n	80090f4 <HAL_SPI_Transmit+0x52>
 80090ee:	88fb      	ldrh	r3, [r7, #6]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d102      	bne.n	80090fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80090f8:	e102      	b.n	8009300 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2203      	movs	r2, #3
 80090fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2200      	movs	r2, #0
 8009106:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	68ba      	ldr	r2, [r7, #8]
 800910c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	88fa      	ldrh	r2, [r7, #6]
 8009112:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	88fa      	ldrh	r2, [r7, #6]
 8009118:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2200      	movs	r2, #0
 800911e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2200      	movs	r2, #0
 8009124:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2200      	movs	r2, #0
 800912a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2200      	movs	r2, #0
 8009130:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2200      	movs	r2, #0
 8009136:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009140:	d10f      	bne.n	8009162 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009150:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009160:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800916c:	2b40      	cmp	r3, #64	; 0x40
 800916e:	d007      	beq.n	8009180 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800917e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009188:	d14b      	bne.n	8009222 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d002      	beq.n	8009198 <HAL_SPI_Transmit+0xf6>
 8009192:	8afb      	ldrh	r3, [r7, #22]
 8009194:	2b01      	cmp	r3, #1
 8009196:	d13e      	bne.n	8009216 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800919c:	881a      	ldrh	r2, [r3, #0]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a8:	1c9a      	adds	r2, r3, #2
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	3b01      	subs	r3, #1
 80091b6:	b29a      	uxth	r2, r3
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80091bc:	e02b      	b.n	8009216 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	f003 0302 	and.w	r3, r3, #2
 80091c8:	2b02      	cmp	r3, #2
 80091ca:	d112      	bne.n	80091f2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d0:	881a      	ldrh	r2, [r3, #0]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091dc:	1c9a      	adds	r2, r3, #2
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	3b01      	subs	r3, #1
 80091ea:	b29a      	uxth	r2, r3
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80091f0:	e011      	b.n	8009216 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091f2:	f7fc fb6d 	bl	80058d0 <HAL_GetTick>
 80091f6:	4602      	mov	r2, r0
 80091f8:	69bb      	ldr	r3, [r7, #24]
 80091fa:	1ad3      	subs	r3, r2, r3
 80091fc:	683a      	ldr	r2, [r7, #0]
 80091fe:	429a      	cmp	r2, r3
 8009200:	d803      	bhi.n	800920a <HAL_SPI_Transmit+0x168>
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009208:	d102      	bne.n	8009210 <HAL_SPI_Transmit+0x16e>
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d102      	bne.n	8009216 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009210:	2303      	movs	r3, #3
 8009212:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009214:	e074      	b.n	8009300 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800921a:	b29b      	uxth	r3, r3
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1ce      	bne.n	80091be <HAL_SPI_Transmit+0x11c>
 8009220:	e04c      	b.n	80092bc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d002      	beq.n	8009230 <HAL_SPI_Transmit+0x18e>
 800922a:	8afb      	ldrh	r3, [r7, #22]
 800922c:	2b01      	cmp	r3, #1
 800922e:	d140      	bne.n	80092b2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	330c      	adds	r3, #12
 800923a:	7812      	ldrb	r2, [r2, #0]
 800923c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009242:	1c5a      	adds	r2, r3, #1
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800924c:	b29b      	uxth	r3, r3
 800924e:	3b01      	subs	r3, #1
 8009250:	b29a      	uxth	r2, r3
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009256:	e02c      	b.n	80092b2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	f003 0302 	and.w	r3, r3, #2
 8009262:	2b02      	cmp	r3, #2
 8009264:	d113      	bne.n	800928e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	330c      	adds	r3, #12
 8009270:	7812      	ldrb	r2, [r2, #0]
 8009272:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009278:	1c5a      	adds	r2, r3, #1
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009282:	b29b      	uxth	r3, r3
 8009284:	3b01      	subs	r3, #1
 8009286:	b29a      	uxth	r2, r3
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	86da      	strh	r2, [r3, #54]	; 0x36
 800928c:	e011      	b.n	80092b2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800928e:	f7fc fb1f 	bl	80058d0 <HAL_GetTick>
 8009292:	4602      	mov	r2, r0
 8009294:	69bb      	ldr	r3, [r7, #24]
 8009296:	1ad3      	subs	r3, r2, r3
 8009298:	683a      	ldr	r2, [r7, #0]
 800929a:	429a      	cmp	r2, r3
 800929c:	d803      	bhi.n	80092a6 <HAL_SPI_Transmit+0x204>
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092a4:	d102      	bne.n	80092ac <HAL_SPI_Transmit+0x20a>
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d102      	bne.n	80092b2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80092ac:	2303      	movs	r3, #3
 80092ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80092b0:	e026      	b.n	8009300 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d1cd      	bne.n	8009258 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80092bc:	69ba      	ldr	r2, [r7, #24]
 80092be:	6839      	ldr	r1, [r7, #0]
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	f000 fbcb 	bl	8009a5c <SPI_EndRxTxTransaction>
 80092c6:	4603      	mov	r3, r0
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d002      	beq.n	80092d2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2220      	movs	r2, #32
 80092d0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d10a      	bne.n	80092f0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80092da:	2300      	movs	r3, #0
 80092dc:	613b      	str	r3, [r7, #16]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	613b      	str	r3, [r7, #16]
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	613b      	str	r3, [r7, #16]
 80092ee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d002      	beq.n	80092fe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
 80092fa:	77fb      	strb	r3, [r7, #31]
 80092fc:	e000      	b.n	8009300 <HAL_SPI_Transmit+0x25e>
  }

error:
 80092fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2200      	movs	r2, #0
 800930c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009310:	7ffb      	ldrb	r3, [r7, #31]
}
 8009312:	4618      	mov	r0, r3
 8009314:	3720      	adds	r7, #32
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b088      	sub	sp, #32
 800931e:	af02      	add	r7, sp, #8
 8009320:	60f8      	str	r0, [r7, #12]
 8009322:	60b9      	str	r1, [r7, #8]
 8009324:	603b      	str	r3, [r7, #0]
 8009326:	4613      	mov	r3, r2
 8009328:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800932a:	2300      	movs	r3, #0
 800932c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009336:	d112      	bne.n	800935e <HAL_SPI_Receive+0x44>
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d10e      	bne.n	800935e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2204      	movs	r2, #4
 8009344:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009348:	88fa      	ldrh	r2, [r7, #6]
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	9300      	str	r3, [sp, #0]
 800934e:	4613      	mov	r3, r2
 8009350:	68ba      	ldr	r2, [r7, #8]
 8009352:	68b9      	ldr	r1, [r7, #8]
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	f000 f8f1 	bl	800953c <HAL_SPI_TransmitReceive>
 800935a:	4603      	mov	r3, r0
 800935c:	e0ea      	b.n	8009534 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009364:	2b01      	cmp	r3, #1
 8009366:	d101      	bne.n	800936c <HAL_SPI_Receive+0x52>
 8009368:	2302      	movs	r3, #2
 800936a:	e0e3      	b.n	8009534 <HAL_SPI_Receive+0x21a>
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2201      	movs	r2, #1
 8009370:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009374:	f7fc faac 	bl	80058d0 <HAL_GetTick>
 8009378:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009380:	b2db      	uxtb	r3, r3
 8009382:	2b01      	cmp	r3, #1
 8009384:	d002      	beq.n	800938c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009386:	2302      	movs	r3, #2
 8009388:	75fb      	strb	r3, [r7, #23]
    goto error;
 800938a:	e0ca      	b.n	8009522 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d002      	beq.n	8009398 <HAL_SPI_Receive+0x7e>
 8009392:	88fb      	ldrh	r3, [r7, #6]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d102      	bne.n	800939e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009398:	2301      	movs	r3, #1
 800939a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800939c:	e0c1      	b.n	8009522 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2204      	movs	r2, #4
 80093a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2200      	movs	r2, #0
 80093aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	68ba      	ldr	r2, [r7, #8]
 80093b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	88fa      	ldrh	r2, [r7, #6]
 80093b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	88fa      	ldrh	r2, [r7, #6]
 80093bc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2200      	movs	r2, #0
 80093c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2200      	movs	r2, #0
 80093c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2200      	movs	r2, #0
 80093ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2200      	movs	r2, #0
 80093d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2200      	movs	r2, #0
 80093da:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093e4:	d10f      	bne.n	8009406 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009404:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009410:	2b40      	cmp	r3, #64	; 0x40
 8009412:	d007      	beq.n	8009424 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009422:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d162      	bne.n	80094f2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800942c:	e02e      	b.n	800948c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	f003 0301 	and.w	r3, r3, #1
 8009438:	2b01      	cmp	r3, #1
 800943a:	d115      	bne.n	8009468 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f103 020c 	add.w	r2, r3, #12
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009448:	7812      	ldrb	r2, [r2, #0]
 800944a:	b2d2      	uxtb	r2, r2
 800944c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009452:	1c5a      	adds	r2, r3, #1
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800945c:	b29b      	uxth	r3, r3
 800945e:	3b01      	subs	r3, #1
 8009460:	b29a      	uxth	r2, r3
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009466:	e011      	b.n	800948c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009468:	f7fc fa32 	bl	80058d0 <HAL_GetTick>
 800946c:	4602      	mov	r2, r0
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	1ad3      	subs	r3, r2, r3
 8009472:	683a      	ldr	r2, [r7, #0]
 8009474:	429a      	cmp	r2, r3
 8009476:	d803      	bhi.n	8009480 <HAL_SPI_Receive+0x166>
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800947e:	d102      	bne.n	8009486 <HAL_SPI_Receive+0x16c>
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d102      	bne.n	800948c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009486:	2303      	movs	r3, #3
 8009488:	75fb      	strb	r3, [r7, #23]
          goto error;
 800948a:	e04a      	b.n	8009522 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009490:	b29b      	uxth	r3, r3
 8009492:	2b00      	cmp	r3, #0
 8009494:	d1cb      	bne.n	800942e <HAL_SPI_Receive+0x114>
 8009496:	e031      	b.n	80094fc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	f003 0301 	and.w	r3, r3, #1
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d113      	bne.n	80094ce <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	68da      	ldr	r2, [r3, #12]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b0:	b292      	uxth	r2, r2
 80094b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b8:	1c9a      	adds	r2, r3, #2
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	3b01      	subs	r3, #1
 80094c6:	b29a      	uxth	r2, r3
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80094cc:	e011      	b.n	80094f2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094ce:	f7fc f9ff 	bl	80058d0 <HAL_GetTick>
 80094d2:	4602      	mov	r2, r0
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	1ad3      	subs	r3, r2, r3
 80094d8:	683a      	ldr	r2, [r7, #0]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d803      	bhi.n	80094e6 <HAL_SPI_Receive+0x1cc>
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e4:	d102      	bne.n	80094ec <HAL_SPI_Receive+0x1d2>
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d102      	bne.n	80094f2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80094ec:	2303      	movs	r3, #3
 80094ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 80094f0:	e017      	b.n	8009522 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d1cd      	bne.n	8009498 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80094fc:	693a      	ldr	r2, [r7, #16]
 80094fe:	6839      	ldr	r1, [r7, #0]
 8009500:	68f8      	ldr	r0, [r7, #12]
 8009502:	f000 fa45 	bl	8009990 <SPI_EndRxTransaction>
 8009506:	4603      	mov	r3, r0
 8009508:	2b00      	cmp	r3, #0
 800950a:	d002      	beq.n	8009512 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2220      	movs	r2, #32
 8009510:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009516:	2b00      	cmp	r3, #0
 8009518:	d002      	beq.n	8009520 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800951a:	2301      	movs	r3, #1
 800951c:	75fb      	strb	r3, [r7, #23]
 800951e:	e000      	b.n	8009522 <HAL_SPI_Receive+0x208>
  }

error :
 8009520:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2201      	movs	r2, #1
 8009526:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2200      	movs	r2, #0
 800952e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009532:	7dfb      	ldrb	r3, [r7, #23]
}
 8009534:	4618      	mov	r0, r3
 8009536:	3718      	adds	r7, #24
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b08c      	sub	sp, #48	; 0x30
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	607a      	str	r2, [r7, #4]
 8009548:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800954a:	2301      	movs	r3, #1
 800954c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800954e:	2300      	movs	r3, #0
 8009550:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800955a:	2b01      	cmp	r3, #1
 800955c:	d101      	bne.n	8009562 <HAL_SPI_TransmitReceive+0x26>
 800955e:	2302      	movs	r3, #2
 8009560:	e18a      	b.n	8009878 <HAL_SPI_TransmitReceive+0x33c>
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2201      	movs	r2, #1
 8009566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800956a:	f7fc f9b1 	bl	80058d0 <HAL_GetTick>
 800956e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009580:	887b      	ldrh	r3, [r7, #2]
 8009582:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009584:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009588:	2b01      	cmp	r3, #1
 800958a:	d00f      	beq.n	80095ac <HAL_SPI_TransmitReceive+0x70>
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009592:	d107      	bne.n	80095a4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d103      	bne.n	80095a4 <HAL_SPI_TransmitReceive+0x68>
 800959c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80095a0:	2b04      	cmp	r3, #4
 80095a2:	d003      	beq.n	80095ac <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80095a4:	2302      	movs	r3, #2
 80095a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80095aa:	e15b      	b.n	8009864 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d005      	beq.n	80095be <HAL_SPI_TransmitReceive+0x82>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d002      	beq.n	80095be <HAL_SPI_TransmitReceive+0x82>
 80095b8:	887b      	ldrh	r3, [r7, #2]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d103      	bne.n	80095c6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80095be:	2301      	movs	r3, #1
 80095c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80095c4:	e14e      	b.n	8009864 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	2b04      	cmp	r3, #4
 80095d0:	d003      	beq.n	80095da <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2205      	movs	r2, #5
 80095d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2200      	movs	r2, #0
 80095de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	887a      	ldrh	r2, [r7, #2]
 80095ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	887a      	ldrh	r2, [r7, #2]
 80095f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	68ba      	ldr	r2, [r7, #8]
 80095f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	887a      	ldrh	r2, [r7, #2]
 80095fc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	887a      	ldrh	r2, [r7, #2]
 8009602:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2200      	movs	r2, #0
 8009608:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2200      	movs	r2, #0
 800960e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800961a:	2b40      	cmp	r3, #64	; 0x40
 800961c:	d007      	beq.n	800962e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800962c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009636:	d178      	bne.n	800972a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d002      	beq.n	8009646 <HAL_SPI_TransmitReceive+0x10a>
 8009640:	8b7b      	ldrh	r3, [r7, #26]
 8009642:	2b01      	cmp	r3, #1
 8009644:	d166      	bne.n	8009714 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800964a:	881a      	ldrh	r2, [r3, #0]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009656:	1c9a      	adds	r2, r3, #2
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009660:	b29b      	uxth	r3, r3
 8009662:	3b01      	subs	r3, #1
 8009664:	b29a      	uxth	r2, r3
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800966a:	e053      	b.n	8009714 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	f003 0302 	and.w	r3, r3, #2
 8009676:	2b02      	cmp	r3, #2
 8009678:	d11b      	bne.n	80096b2 <HAL_SPI_TransmitReceive+0x176>
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800967e:	b29b      	uxth	r3, r3
 8009680:	2b00      	cmp	r3, #0
 8009682:	d016      	beq.n	80096b2 <HAL_SPI_TransmitReceive+0x176>
 8009684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009686:	2b01      	cmp	r3, #1
 8009688:	d113      	bne.n	80096b2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800968e:	881a      	ldrh	r2, [r3, #0]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800969a:	1c9a      	adds	r2, r3, #2
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	3b01      	subs	r3, #1
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80096ae:	2300      	movs	r3, #0
 80096b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	689b      	ldr	r3, [r3, #8]
 80096b8:	f003 0301 	and.w	r3, r3, #1
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d119      	bne.n	80096f4 <HAL_SPI_TransmitReceive+0x1b8>
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d014      	beq.n	80096f4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	68da      	ldr	r2, [r3, #12]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d4:	b292      	uxth	r2, r2
 80096d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096dc:	1c9a      	adds	r2, r3, #2
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	3b01      	subs	r3, #1
 80096ea:	b29a      	uxth	r2, r3
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80096f0:	2301      	movs	r3, #1
 80096f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80096f4:	f7fc f8ec 	bl	80058d0 <HAL_GetTick>
 80096f8:	4602      	mov	r2, r0
 80096fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fc:	1ad3      	subs	r3, r2, r3
 80096fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009700:	429a      	cmp	r2, r3
 8009702:	d807      	bhi.n	8009714 <HAL_SPI_TransmitReceive+0x1d8>
 8009704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800970a:	d003      	beq.n	8009714 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800970c:	2303      	movs	r3, #3
 800970e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009712:	e0a7      	b.n	8009864 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009718:	b29b      	uxth	r3, r3
 800971a:	2b00      	cmp	r3, #0
 800971c:	d1a6      	bne.n	800966c <HAL_SPI_TransmitReceive+0x130>
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009722:	b29b      	uxth	r3, r3
 8009724:	2b00      	cmp	r3, #0
 8009726:	d1a1      	bne.n	800966c <HAL_SPI_TransmitReceive+0x130>
 8009728:	e07c      	b.n	8009824 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d002      	beq.n	8009738 <HAL_SPI_TransmitReceive+0x1fc>
 8009732:	8b7b      	ldrh	r3, [r7, #26]
 8009734:	2b01      	cmp	r3, #1
 8009736:	d16b      	bne.n	8009810 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	330c      	adds	r3, #12
 8009742:	7812      	ldrb	r2, [r2, #0]
 8009744:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800974a:	1c5a      	adds	r2, r3, #1
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009754:	b29b      	uxth	r3, r3
 8009756:	3b01      	subs	r3, #1
 8009758:	b29a      	uxth	r2, r3
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800975e:	e057      	b.n	8009810 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	f003 0302 	and.w	r3, r3, #2
 800976a:	2b02      	cmp	r3, #2
 800976c:	d11c      	bne.n	80097a8 <HAL_SPI_TransmitReceive+0x26c>
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009772:	b29b      	uxth	r3, r3
 8009774:	2b00      	cmp	r3, #0
 8009776:	d017      	beq.n	80097a8 <HAL_SPI_TransmitReceive+0x26c>
 8009778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800977a:	2b01      	cmp	r3, #1
 800977c:	d114      	bne.n	80097a8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	330c      	adds	r3, #12
 8009788:	7812      	ldrb	r2, [r2, #0]
 800978a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009790:	1c5a      	adds	r2, r3, #1
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800979a:	b29b      	uxth	r3, r3
 800979c:	3b01      	subs	r3, #1
 800979e:	b29a      	uxth	r2, r3
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80097a4:	2300      	movs	r3, #0
 80097a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	f003 0301 	and.w	r3, r3, #1
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d119      	bne.n	80097ea <HAL_SPI_TransmitReceive+0x2ae>
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d014      	beq.n	80097ea <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	68da      	ldr	r2, [r3, #12]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ca:	b2d2      	uxtb	r2, r2
 80097cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d2:	1c5a      	adds	r2, r3, #1
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097dc:	b29b      	uxth	r3, r3
 80097de:	3b01      	subs	r3, #1
 80097e0:	b29a      	uxth	r2, r3
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80097e6:	2301      	movs	r3, #1
 80097e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80097ea:	f7fc f871 	bl	80058d0 <HAL_GetTick>
 80097ee:	4602      	mov	r2, r0
 80097f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f2:	1ad3      	subs	r3, r2, r3
 80097f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d803      	bhi.n	8009802 <HAL_SPI_TransmitReceive+0x2c6>
 80097fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009800:	d102      	bne.n	8009808 <HAL_SPI_TransmitReceive+0x2cc>
 8009802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009804:	2b00      	cmp	r3, #0
 8009806:	d103      	bne.n	8009810 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009808:	2303      	movs	r3, #3
 800980a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800980e:	e029      	b.n	8009864 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009814:	b29b      	uxth	r3, r3
 8009816:	2b00      	cmp	r3, #0
 8009818:	d1a2      	bne.n	8009760 <HAL_SPI_TransmitReceive+0x224>
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800981e:	b29b      	uxth	r3, r3
 8009820:	2b00      	cmp	r3, #0
 8009822:	d19d      	bne.n	8009760 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009826:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009828:	68f8      	ldr	r0, [r7, #12]
 800982a:	f000 f917 	bl	8009a5c <SPI_EndRxTxTransaction>
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d006      	beq.n	8009842 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2220      	movs	r2, #32
 800983e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009840:	e010      	b.n	8009864 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d10b      	bne.n	8009862 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800984a:	2300      	movs	r3, #0
 800984c:	617b      	str	r3, [r7, #20]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	617b      	str	r3, [r7, #20]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	617b      	str	r3, [r7, #20]
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	e000      	b.n	8009864 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009862:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2201      	movs	r2, #1
 8009868:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2200      	movs	r2, #0
 8009870:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009874:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009878:	4618      	mov	r0, r3
 800987a:	3730      	adds	r7, #48	; 0x30
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b088      	sub	sp, #32
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	603b      	str	r3, [r7, #0]
 800988c:	4613      	mov	r3, r2
 800988e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009890:	f7fc f81e 	bl	80058d0 <HAL_GetTick>
 8009894:	4602      	mov	r2, r0
 8009896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009898:	1a9b      	subs	r3, r3, r2
 800989a:	683a      	ldr	r2, [r7, #0]
 800989c:	4413      	add	r3, r2
 800989e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80098a0:	f7fc f816 	bl	80058d0 <HAL_GetTick>
 80098a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80098a6:	4b39      	ldr	r3, [pc, #228]	; (800998c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	015b      	lsls	r3, r3, #5
 80098ac:	0d1b      	lsrs	r3, r3, #20
 80098ae:	69fa      	ldr	r2, [r7, #28]
 80098b0:	fb02 f303 	mul.w	r3, r2, r3
 80098b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80098b6:	e054      	b.n	8009962 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098be:	d050      	beq.n	8009962 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80098c0:	f7fc f806 	bl	80058d0 <HAL_GetTick>
 80098c4:	4602      	mov	r2, r0
 80098c6:	69bb      	ldr	r3, [r7, #24]
 80098c8:	1ad3      	subs	r3, r2, r3
 80098ca:	69fa      	ldr	r2, [r7, #28]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d902      	bls.n	80098d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d13d      	bne.n	8009952 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	685a      	ldr	r2, [r3, #4]
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80098e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80098ee:	d111      	bne.n	8009914 <SPI_WaitFlagStateUntilTimeout+0x94>
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098f8:	d004      	beq.n	8009904 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	689b      	ldr	r3, [r3, #8]
 80098fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009902:	d107      	bne.n	8009914 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009912:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800991c:	d10f      	bne.n	800993e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800992c:	601a      	str	r2, [r3, #0]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800993c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2201      	movs	r2, #1
 8009942:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2200      	movs	r2, #0
 800994a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800994e:	2303      	movs	r3, #3
 8009950:	e017      	b.n	8009982 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d101      	bne.n	800995c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009958:	2300      	movs	r3, #0
 800995a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	3b01      	subs	r3, #1
 8009960:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	689a      	ldr	r2, [r3, #8]
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	4013      	ands	r3, r2
 800996c:	68ba      	ldr	r2, [r7, #8]
 800996e:	429a      	cmp	r2, r3
 8009970:	bf0c      	ite	eq
 8009972:	2301      	moveq	r3, #1
 8009974:	2300      	movne	r3, #0
 8009976:	b2db      	uxtb	r3, r3
 8009978:	461a      	mov	r2, r3
 800997a:	79fb      	ldrb	r3, [r7, #7]
 800997c:	429a      	cmp	r2, r3
 800997e:	d19b      	bne.n	80098b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009980:	2300      	movs	r3, #0
}
 8009982:	4618      	mov	r0, r3
 8009984:	3720      	adds	r7, #32
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	20000394 	.word	0x20000394

08009990 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b086      	sub	sp, #24
 8009994:	af02      	add	r7, sp, #8
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099a4:	d111      	bne.n	80099ca <SPI_EndRxTransaction+0x3a>
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	689b      	ldr	r3, [r3, #8]
 80099aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099ae:	d004      	beq.n	80099ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099b8:	d107      	bne.n	80099ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099c8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099d2:	d12a      	bne.n	8009a2a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099dc:	d012      	beq.n	8009a04 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	9300      	str	r3, [sp, #0]
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	2200      	movs	r2, #0
 80099e6:	2180      	movs	r1, #128	; 0x80
 80099e8:	68f8      	ldr	r0, [r7, #12]
 80099ea:	f7ff ff49 	bl	8009880 <SPI_WaitFlagStateUntilTimeout>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d02d      	beq.n	8009a50 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099f8:	f043 0220 	orr.w	r2, r3, #32
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009a00:	2303      	movs	r3, #3
 8009a02:	e026      	b.n	8009a52 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	9300      	str	r3, [sp, #0]
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	2101      	movs	r1, #1
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f7ff ff36 	bl	8009880 <SPI_WaitFlagStateUntilTimeout>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d01a      	beq.n	8009a50 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a1e:	f043 0220 	orr.w	r2, r3, #32
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009a26:	2303      	movs	r3, #3
 8009a28:	e013      	b.n	8009a52 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	9300      	str	r3, [sp, #0]
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	2200      	movs	r2, #0
 8009a32:	2101      	movs	r1, #1
 8009a34:	68f8      	ldr	r0, [r7, #12]
 8009a36:	f7ff ff23 	bl	8009880 <SPI_WaitFlagStateUntilTimeout>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d007      	beq.n	8009a50 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a44:	f043 0220 	orr.w	r2, r3, #32
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009a4c:	2303      	movs	r3, #3
 8009a4e:	e000      	b.n	8009a52 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
	...

08009a5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b088      	sub	sp, #32
 8009a60:	af02      	add	r7, sp, #8
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009a68:	4b1b      	ldr	r3, [pc, #108]	; (8009ad8 <SPI_EndRxTxTransaction+0x7c>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a1b      	ldr	r2, [pc, #108]	; (8009adc <SPI_EndRxTxTransaction+0x80>)
 8009a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8009a72:	0d5b      	lsrs	r3, r3, #21
 8009a74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009a78:	fb02 f303 	mul.w	r3, r2, r3
 8009a7c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a86:	d112      	bne.n	8009aae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	9300      	str	r3, [sp, #0]
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	2180      	movs	r1, #128	; 0x80
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f7ff fef4 	bl	8009880 <SPI_WaitFlagStateUntilTimeout>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d016      	beq.n	8009acc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aa2:	f043 0220 	orr.w	r2, r3, #32
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009aaa:	2303      	movs	r3, #3
 8009aac:	e00f      	b.n	8009ace <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d00a      	beq.n	8009aca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	689b      	ldr	r3, [r3, #8]
 8009ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ac4:	2b80      	cmp	r3, #128	; 0x80
 8009ac6:	d0f2      	beq.n	8009aae <SPI_EndRxTxTransaction+0x52>
 8009ac8:	e000      	b.n	8009acc <SPI_EndRxTxTransaction+0x70>
        break;
 8009aca:	bf00      	nop
  }

  return HAL_OK;
 8009acc:	2300      	movs	r3, #0
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3718      	adds	r7, #24
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	20000394 	.word	0x20000394
 8009adc:	165e9f81 	.word	0x165e9f81

08009ae0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d101      	bne.n	8009af2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009aee:	2301      	movs	r3, #1
 8009af0:	e041      	b.n	8009b76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d106      	bne.n	8009b0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2200      	movs	r2, #0
 8009b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f7fb fd16 	bl	8005538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2202      	movs	r2, #2
 8009b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	3304      	adds	r3, #4
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	4610      	mov	r0, r2
 8009b20:	f000 fd54 	bl	800a5cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2201      	movs	r2, #1
 8009b58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2201      	movs	r2, #1
 8009b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b74:	2300      	movs	r3, #0
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3708      	adds	r7, #8
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
	...

08009b80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b085      	sub	sp, #20
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b8e:	b2db      	uxtb	r3, r3
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d001      	beq.n	8009b98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009b94:	2301      	movs	r3, #1
 8009b96:	e03c      	b.n	8009c12 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2202      	movs	r2, #2
 8009b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a1e      	ldr	r2, [pc, #120]	; (8009c20 <HAL_TIM_Base_Start+0xa0>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d018      	beq.n	8009bdc <HAL_TIM_Base_Start+0x5c>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bb2:	d013      	beq.n	8009bdc <HAL_TIM_Base_Start+0x5c>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a1a      	ldr	r2, [pc, #104]	; (8009c24 <HAL_TIM_Base_Start+0xa4>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d00e      	beq.n	8009bdc <HAL_TIM_Base_Start+0x5c>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4a19      	ldr	r2, [pc, #100]	; (8009c28 <HAL_TIM_Base_Start+0xa8>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d009      	beq.n	8009bdc <HAL_TIM_Base_Start+0x5c>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a17      	ldr	r2, [pc, #92]	; (8009c2c <HAL_TIM_Base_Start+0xac>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d004      	beq.n	8009bdc <HAL_TIM_Base_Start+0x5c>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a16      	ldr	r2, [pc, #88]	; (8009c30 <HAL_TIM_Base_Start+0xb0>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d111      	bne.n	8009c00 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	f003 0307 	and.w	r3, r3, #7
 8009be6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2b06      	cmp	r3, #6
 8009bec:	d010      	beq.n	8009c10 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f042 0201 	orr.w	r2, r2, #1
 8009bfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bfe:	e007      	b.n	8009c10 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f042 0201 	orr.w	r2, r2, #1
 8009c0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009c10:	2300      	movs	r3, #0
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3714      	adds	r7, #20
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr
 8009c1e:	bf00      	nop
 8009c20:	40010000 	.word	0x40010000
 8009c24:	40000400 	.word	0x40000400
 8009c28:	40000800 	.word	0x40000800
 8009c2c:	40000c00 	.word	0x40000c00
 8009c30:	40014000 	.word	0x40014000

08009c34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b085      	sub	sp, #20
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d001      	beq.n	8009c4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e044      	b.n	8009cd6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2202      	movs	r2, #2
 8009c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	68da      	ldr	r2, [r3, #12]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f042 0201 	orr.w	r2, r2, #1
 8009c62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a1e      	ldr	r2, [pc, #120]	; (8009ce4 <HAL_TIM_Base_Start_IT+0xb0>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d018      	beq.n	8009ca0 <HAL_TIM_Base_Start_IT+0x6c>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c76:	d013      	beq.n	8009ca0 <HAL_TIM_Base_Start_IT+0x6c>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a1a      	ldr	r2, [pc, #104]	; (8009ce8 <HAL_TIM_Base_Start_IT+0xb4>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d00e      	beq.n	8009ca0 <HAL_TIM_Base_Start_IT+0x6c>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a19      	ldr	r2, [pc, #100]	; (8009cec <HAL_TIM_Base_Start_IT+0xb8>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d009      	beq.n	8009ca0 <HAL_TIM_Base_Start_IT+0x6c>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a17      	ldr	r2, [pc, #92]	; (8009cf0 <HAL_TIM_Base_Start_IT+0xbc>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d004      	beq.n	8009ca0 <HAL_TIM_Base_Start_IT+0x6c>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a16      	ldr	r2, [pc, #88]	; (8009cf4 <HAL_TIM_Base_Start_IT+0xc0>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d111      	bne.n	8009cc4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	689b      	ldr	r3, [r3, #8]
 8009ca6:	f003 0307 	and.w	r3, r3, #7
 8009caa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2b06      	cmp	r3, #6
 8009cb0:	d010      	beq.n	8009cd4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f042 0201 	orr.w	r2, r2, #1
 8009cc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cc2:	e007      	b.n	8009cd4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f042 0201 	orr.w	r2, r2, #1
 8009cd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009cd4:	2300      	movs	r3, #0
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3714      	adds	r7, #20
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	40010000 	.word	0x40010000
 8009ce8:	40000400 	.word	0x40000400
 8009cec:	40000800 	.word	0x40000800
 8009cf0:	40000c00 	.word	0x40000c00
 8009cf4:	40014000 	.word	0x40014000

08009cf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d101      	bne.n	8009d0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	e041      	b.n	8009d8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d10:	b2db      	uxtb	r3, r3
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d106      	bne.n	8009d24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 f839 	bl	8009d96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2202      	movs	r2, #2
 8009d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	3304      	adds	r3, #4
 8009d34:	4619      	mov	r1, r3
 8009d36:	4610      	mov	r0, r2
 8009d38:	f000 fc48 	bl	800a5cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2201      	movs	r2, #1
 8009d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2201      	movs	r2, #1
 8009d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2201      	movs	r2, #1
 8009d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2201      	movs	r2, #1
 8009d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d8c:	2300      	movs	r3, #0
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3708      	adds	r7, #8
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009d96:	b480      	push	{r7}
 8009d98:	b083      	sub	sp, #12
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009d9e:	bf00      	nop
 8009da0:	370c      	adds	r7, #12
 8009da2:	46bd      	mov	sp, r7
 8009da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da8:	4770      	bx	lr
	...

08009dac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d109      	bne.n	8009dd0 <HAL_TIM_PWM_Start+0x24>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	bf14      	ite	ne
 8009dc8:	2301      	movne	r3, #1
 8009dca:	2300      	moveq	r3, #0
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	e022      	b.n	8009e16 <HAL_TIM_PWM_Start+0x6a>
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	2b04      	cmp	r3, #4
 8009dd4:	d109      	bne.n	8009dea <HAL_TIM_PWM_Start+0x3e>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	bf14      	ite	ne
 8009de2:	2301      	movne	r3, #1
 8009de4:	2300      	moveq	r3, #0
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	e015      	b.n	8009e16 <HAL_TIM_PWM_Start+0x6a>
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	2b08      	cmp	r3, #8
 8009dee:	d109      	bne.n	8009e04 <HAL_TIM_PWM_Start+0x58>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	bf14      	ite	ne
 8009dfc:	2301      	movne	r3, #1
 8009dfe:	2300      	moveq	r3, #0
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	e008      	b.n	8009e16 <HAL_TIM_PWM_Start+0x6a>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e0a:	b2db      	uxtb	r3, r3
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	bf14      	ite	ne
 8009e10:	2301      	movne	r3, #1
 8009e12:	2300      	moveq	r3, #0
 8009e14:	b2db      	uxtb	r3, r3
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d001      	beq.n	8009e1e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e068      	b.n	8009ef0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d104      	bne.n	8009e2e <HAL_TIM_PWM_Start+0x82>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2202      	movs	r2, #2
 8009e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e2c:	e013      	b.n	8009e56 <HAL_TIM_PWM_Start+0xaa>
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	2b04      	cmp	r3, #4
 8009e32:	d104      	bne.n	8009e3e <HAL_TIM_PWM_Start+0x92>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2202      	movs	r2, #2
 8009e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e3c:	e00b      	b.n	8009e56 <HAL_TIM_PWM_Start+0xaa>
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	2b08      	cmp	r3, #8
 8009e42:	d104      	bne.n	8009e4e <HAL_TIM_PWM_Start+0xa2>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2202      	movs	r2, #2
 8009e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e4c:	e003      	b.n	8009e56 <HAL_TIM_PWM_Start+0xaa>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2202      	movs	r2, #2
 8009e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	6839      	ldr	r1, [r7, #0]
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f000 fe5a 	bl	800ab18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a23      	ldr	r2, [pc, #140]	; (8009ef8 <HAL_TIM_PWM_Start+0x14c>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d107      	bne.n	8009e7e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a1d      	ldr	r2, [pc, #116]	; (8009ef8 <HAL_TIM_PWM_Start+0x14c>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d018      	beq.n	8009eba <HAL_TIM_PWM_Start+0x10e>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e90:	d013      	beq.n	8009eba <HAL_TIM_PWM_Start+0x10e>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a19      	ldr	r2, [pc, #100]	; (8009efc <HAL_TIM_PWM_Start+0x150>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d00e      	beq.n	8009eba <HAL_TIM_PWM_Start+0x10e>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a17      	ldr	r2, [pc, #92]	; (8009f00 <HAL_TIM_PWM_Start+0x154>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d009      	beq.n	8009eba <HAL_TIM_PWM_Start+0x10e>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a16      	ldr	r2, [pc, #88]	; (8009f04 <HAL_TIM_PWM_Start+0x158>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d004      	beq.n	8009eba <HAL_TIM_PWM_Start+0x10e>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a14      	ldr	r2, [pc, #80]	; (8009f08 <HAL_TIM_PWM_Start+0x15c>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d111      	bne.n	8009ede <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	f003 0307 	and.w	r3, r3, #7
 8009ec4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2b06      	cmp	r3, #6
 8009eca:	d010      	beq.n	8009eee <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f042 0201 	orr.w	r2, r2, #1
 8009eda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009edc:	e007      	b.n	8009eee <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f042 0201 	orr.w	r2, r2, #1
 8009eec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3710      	adds	r7, #16
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	40010000 	.word	0x40010000
 8009efc:	40000400 	.word	0x40000400
 8009f00:	40000800 	.word	0x40000800
 8009f04:	40000c00 	.word	0x40000c00
 8009f08:	40014000 	.word	0x40014000

08009f0c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b086      	sub	sp, #24
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d101      	bne.n	8009f20 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	e097      	b.n	800a050 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d106      	bne.n	8009f3a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f7fb fa83 	bl	8005440 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2202      	movs	r2, #2
 8009f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	6812      	ldr	r2, [r2, #0]
 8009f4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f50:	f023 0307 	bic.w	r3, r3, #7
 8009f54:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681a      	ldr	r2, [r3, #0]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	3304      	adds	r3, #4
 8009f5e:	4619      	mov	r1, r3
 8009f60:	4610      	mov	r0, r2
 8009f62:	f000 fb33 	bl	800a5cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	699b      	ldr	r3, [r3, #24]
 8009f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	6a1b      	ldr	r3, [r3, #32]
 8009f7c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	697a      	ldr	r2, [r7, #20]
 8009f84:	4313      	orrs	r3, r2
 8009f86:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f8e:	f023 0303 	bic.w	r3, r3, #3
 8009f92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	689a      	ldr	r2, [r3, #8]
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	699b      	ldr	r3, [r3, #24]
 8009f9c:	021b      	lsls	r3, r3, #8
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	693a      	ldr	r2, [r7, #16]
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009fac:	f023 030c 	bic.w	r3, r3, #12
 8009fb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009fb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009fbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	68da      	ldr	r2, [r3, #12]
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	69db      	ldr	r3, [r3, #28]
 8009fc6:	021b      	lsls	r3, r3, #8
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	693a      	ldr	r2, [r7, #16]
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	691b      	ldr	r3, [r3, #16]
 8009fd4:	011a      	lsls	r2, r3, #4
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	6a1b      	ldr	r3, [r3, #32]
 8009fda:	031b      	lsls	r3, r3, #12
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	693a      	ldr	r2, [r7, #16]
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009fea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009ff2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	685a      	ldr	r2, [r3, #4]
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	695b      	ldr	r3, [r3, #20]
 8009ffc:	011b      	lsls	r3, r3, #4
 8009ffe:	4313      	orrs	r3, r2
 800a000:	68fa      	ldr	r2, [r7, #12]
 800a002:	4313      	orrs	r3, r2
 800a004:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	697a      	ldr	r2, [r7, #20]
 800a00c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	693a      	ldr	r2, [r7, #16]
 800a014:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	68fa      	ldr	r2, [r7, #12]
 800a01c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2201      	movs	r2, #1
 800a022:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2201      	movs	r2, #1
 800a02a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2201      	movs	r2, #1
 800a032:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2201      	movs	r2, #1
 800a03a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2201      	movs	r2, #1
 800a042:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2201      	movs	r2, #1
 800a04a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a04e:	2300      	movs	r3, #0
}
 800a050:	4618      	mov	r0, r3
 800a052:	3718      	adds	r7, #24
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	691b      	ldr	r3, [r3, #16]
 800a066:	f003 0302 	and.w	r3, r3, #2
 800a06a:	2b02      	cmp	r3, #2
 800a06c:	d122      	bne.n	800a0b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	68db      	ldr	r3, [r3, #12]
 800a074:	f003 0302 	and.w	r3, r3, #2
 800a078:	2b02      	cmp	r3, #2
 800a07a:	d11b      	bne.n	800a0b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f06f 0202 	mvn.w	r2, #2
 800a084:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2201      	movs	r2, #1
 800a08a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	699b      	ldr	r3, [r3, #24]
 800a092:	f003 0303 	and.w	r3, r3, #3
 800a096:	2b00      	cmp	r3, #0
 800a098:	d003      	beq.n	800a0a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 fa77 	bl	800a58e <HAL_TIM_IC_CaptureCallback>
 800a0a0:	e005      	b.n	800a0ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 fa69 	bl	800a57a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 fa7a 	bl	800a5a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	691b      	ldr	r3, [r3, #16]
 800a0ba:	f003 0304 	and.w	r3, r3, #4
 800a0be:	2b04      	cmp	r3, #4
 800a0c0:	d122      	bne.n	800a108 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	f003 0304 	and.w	r3, r3, #4
 800a0cc:	2b04      	cmp	r3, #4
 800a0ce:	d11b      	bne.n	800a108 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f06f 0204 	mvn.w	r2, #4
 800a0d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2202      	movs	r2, #2
 800a0de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	699b      	ldr	r3, [r3, #24]
 800a0e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d003      	beq.n	800a0f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 fa4d 	bl	800a58e <HAL_TIM_IC_CaptureCallback>
 800a0f4:	e005      	b.n	800a102 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f000 fa3f 	bl	800a57a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 fa50 	bl	800a5a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	691b      	ldr	r3, [r3, #16]
 800a10e:	f003 0308 	and.w	r3, r3, #8
 800a112:	2b08      	cmp	r3, #8
 800a114:	d122      	bne.n	800a15c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	f003 0308 	and.w	r3, r3, #8
 800a120:	2b08      	cmp	r3, #8
 800a122:	d11b      	bne.n	800a15c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f06f 0208 	mvn.w	r2, #8
 800a12c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2204      	movs	r2, #4
 800a132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	69db      	ldr	r3, [r3, #28]
 800a13a:	f003 0303 	and.w	r3, r3, #3
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d003      	beq.n	800a14a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 fa23 	bl	800a58e <HAL_TIM_IC_CaptureCallback>
 800a148:	e005      	b.n	800a156 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 fa15 	bl	800a57a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 fa26 	bl	800a5a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	691b      	ldr	r3, [r3, #16]
 800a162:	f003 0310 	and.w	r3, r3, #16
 800a166:	2b10      	cmp	r3, #16
 800a168:	d122      	bne.n	800a1b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	f003 0310 	and.w	r3, r3, #16
 800a174:	2b10      	cmp	r3, #16
 800a176:	d11b      	bne.n	800a1b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f06f 0210 	mvn.w	r2, #16
 800a180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2208      	movs	r2, #8
 800a186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	69db      	ldr	r3, [r3, #28]
 800a18e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a192:	2b00      	cmp	r3, #0
 800a194:	d003      	beq.n	800a19e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 f9f9 	bl	800a58e <HAL_TIM_IC_CaptureCallback>
 800a19c:	e005      	b.n	800a1aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 f9eb 	bl	800a57a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 f9fc 	bl	800a5a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	691b      	ldr	r3, [r3, #16]
 800a1b6:	f003 0301 	and.w	r3, r3, #1
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d10e      	bne.n	800a1dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	f003 0301 	and.w	r3, r3, #1
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d107      	bne.n	800a1dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f06f 0201 	mvn.w	r2, #1
 800a1d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f7f7 f9f2 	bl	80015c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1e6:	2b80      	cmp	r3, #128	; 0x80
 800a1e8:	d10e      	bne.n	800a208 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	68db      	ldr	r3, [r3, #12]
 800a1f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1f4:	2b80      	cmp	r3, #128	; 0x80
 800a1f6:	d107      	bne.n	800a208 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 fd26 	bl	800ac54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	691b      	ldr	r3, [r3, #16]
 800a20e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a212:	2b40      	cmp	r3, #64	; 0x40
 800a214:	d10e      	bne.n	800a234 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	68db      	ldr	r3, [r3, #12]
 800a21c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a220:	2b40      	cmp	r3, #64	; 0x40
 800a222:	d107      	bne.n	800a234 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a22c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 f9c1 	bl	800a5b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	691b      	ldr	r3, [r3, #16]
 800a23a:	f003 0320 	and.w	r3, r3, #32
 800a23e:	2b20      	cmp	r3, #32
 800a240:	d10e      	bne.n	800a260 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	f003 0320 	and.w	r3, r3, #32
 800a24c:	2b20      	cmp	r3, #32
 800a24e:	d107      	bne.n	800a260 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f06f 0220 	mvn.w	r2, #32
 800a258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 fcf0 	bl	800ac40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a260:	bf00      	nop
 800a262:	3708      	adds	r7, #8
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b086      	sub	sp, #24
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a274:	2300      	movs	r3, #0
 800a276:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d101      	bne.n	800a286 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a282:	2302      	movs	r3, #2
 800a284:	e0ae      	b.n	800a3e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2201      	movs	r2, #1
 800a28a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2b0c      	cmp	r3, #12
 800a292:	f200 809f 	bhi.w	800a3d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a296:	a201      	add	r2, pc, #4	; (adr r2, 800a29c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a29c:	0800a2d1 	.word	0x0800a2d1
 800a2a0:	0800a3d5 	.word	0x0800a3d5
 800a2a4:	0800a3d5 	.word	0x0800a3d5
 800a2a8:	0800a3d5 	.word	0x0800a3d5
 800a2ac:	0800a311 	.word	0x0800a311
 800a2b0:	0800a3d5 	.word	0x0800a3d5
 800a2b4:	0800a3d5 	.word	0x0800a3d5
 800a2b8:	0800a3d5 	.word	0x0800a3d5
 800a2bc:	0800a353 	.word	0x0800a353
 800a2c0:	0800a3d5 	.word	0x0800a3d5
 800a2c4:	0800a3d5 	.word	0x0800a3d5
 800a2c8:	0800a3d5 	.word	0x0800a3d5
 800a2cc:	0800a393 	.word	0x0800a393
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	68b9      	ldr	r1, [r7, #8]
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f000 f9f8 	bl	800a6cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	699a      	ldr	r2, [r3, #24]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f042 0208 	orr.w	r2, r2, #8
 800a2ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	699a      	ldr	r2, [r3, #24]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f022 0204 	bic.w	r2, r2, #4
 800a2fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	6999      	ldr	r1, [r3, #24]
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	691a      	ldr	r2, [r3, #16]
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	430a      	orrs	r2, r1
 800a30c:	619a      	str	r2, [r3, #24]
      break;
 800a30e:	e064      	b.n	800a3da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	68b9      	ldr	r1, [r7, #8]
 800a316:	4618      	mov	r0, r3
 800a318:	f000 fa3e 	bl	800a798 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	699a      	ldr	r2, [r3, #24]
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a32a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	699a      	ldr	r2, [r3, #24]
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a33a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	6999      	ldr	r1, [r3, #24]
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	691b      	ldr	r3, [r3, #16]
 800a346:	021a      	lsls	r2, r3, #8
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	430a      	orrs	r2, r1
 800a34e:	619a      	str	r2, [r3, #24]
      break;
 800a350:	e043      	b.n	800a3da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	68b9      	ldr	r1, [r7, #8]
 800a358:	4618      	mov	r0, r3
 800a35a:	f000 fa89 	bl	800a870 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	69da      	ldr	r2, [r3, #28]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f042 0208 	orr.w	r2, r2, #8
 800a36c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	69da      	ldr	r2, [r3, #28]
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f022 0204 	bic.w	r2, r2, #4
 800a37c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	69d9      	ldr	r1, [r3, #28]
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	691a      	ldr	r2, [r3, #16]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	430a      	orrs	r2, r1
 800a38e:	61da      	str	r2, [r3, #28]
      break;
 800a390:	e023      	b.n	800a3da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	68b9      	ldr	r1, [r7, #8]
 800a398:	4618      	mov	r0, r3
 800a39a:	f000 fad3 	bl	800a944 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	69da      	ldr	r2, [r3, #28]
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a3ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	69da      	ldr	r2, [r3, #28]
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	69d9      	ldr	r1, [r3, #28]
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	691b      	ldr	r3, [r3, #16]
 800a3c8:	021a      	lsls	r2, r3, #8
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	430a      	orrs	r2, r1
 800a3d0:	61da      	str	r2, [r3, #28]
      break;
 800a3d2:	e002      	b.n	800a3da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	75fb      	strb	r3, [r7, #23]
      break;
 800a3d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a3e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3718      	adds	r7, #24
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a400:	2b01      	cmp	r3, #1
 800a402:	d101      	bne.n	800a408 <HAL_TIM_ConfigClockSource+0x1c>
 800a404:	2302      	movs	r3, #2
 800a406:	e0b4      	b.n	800a572 <HAL_TIM_ConfigClockSource+0x186>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2201      	movs	r2, #1
 800a40c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2202      	movs	r2, #2
 800a414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	689b      	ldr	r3, [r3, #8]
 800a41e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a426:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a42e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	68ba      	ldr	r2, [r7, #8]
 800a436:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a440:	d03e      	beq.n	800a4c0 <HAL_TIM_ConfigClockSource+0xd4>
 800a442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a446:	f200 8087 	bhi.w	800a558 <HAL_TIM_ConfigClockSource+0x16c>
 800a44a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a44e:	f000 8086 	beq.w	800a55e <HAL_TIM_ConfigClockSource+0x172>
 800a452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a456:	d87f      	bhi.n	800a558 <HAL_TIM_ConfigClockSource+0x16c>
 800a458:	2b70      	cmp	r3, #112	; 0x70
 800a45a:	d01a      	beq.n	800a492 <HAL_TIM_ConfigClockSource+0xa6>
 800a45c:	2b70      	cmp	r3, #112	; 0x70
 800a45e:	d87b      	bhi.n	800a558 <HAL_TIM_ConfigClockSource+0x16c>
 800a460:	2b60      	cmp	r3, #96	; 0x60
 800a462:	d050      	beq.n	800a506 <HAL_TIM_ConfigClockSource+0x11a>
 800a464:	2b60      	cmp	r3, #96	; 0x60
 800a466:	d877      	bhi.n	800a558 <HAL_TIM_ConfigClockSource+0x16c>
 800a468:	2b50      	cmp	r3, #80	; 0x50
 800a46a:	d03c      	beq.n	800a4e6 <HAL_TIM_ConfigClockSource+0xfa>
 800a46c:	2b50      	cmp	r3, #80	; 0x50
 800a46e:	d873      	bhi.n	800a558 <HAL_TIM_ConfigClockSource+0x16c>
 800a470:	2b40      	cmp	r3, #64	; 0x40
 800a472:	d058      	beq.n	800a526 <HAL_TIM_ConfigClockSource+0x13a>
 800a474:	2b40      	cmp	r3, #64	; 0x40
 800a476:	d86f      	bhi.n	800a558 <HAL_TIM_ConfigClockSource+0x16c>
 800a478:	2b30      	cmp	r3, #48	; 0x30
 800a47a:	d064      	beq.n	800a546 <HAL_TIM_ConfigClockSource+0x15a>
 800a47c:	2b30      	cmp	r3, #48	; 0x30
 800a47e:	d86b      	bhi.n	800a558 <HAL_TIM_ConfigClockSource+0x16c>
 800a480:	2b20      	cmp	r3, #32
 800a482:	d060      	beq.n	800a546 <HAL_TIM_ConfigClockSource+0x15a>
 800a484:	2b20      	cmp	r3, #32
 800a486:	d867      	bhi.n	800a558 <HAL_TIM_ConfigClockSource+0x16c>
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d05c      	beq.n	800a546 <HAL_TIM_ConfigClockSource+0x15a>
 800a48c:	2b10      	cmp	r3, #16
 800a48e:	d05a      	beq.n	800a546 <HAL_TIM_ConfigClockSource+0x15a>
 800a490:	e062      	b.n	800a558 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6818      	ldr	r0, [r3, #0]
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	6899      	ldr	r1, [r3, #8]
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	685a      	ldr	r2, [r3, #4]
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	68db      	ldr	r3, [r3, #12]
 800a4a2:	f000 fb19 	bl	800aad8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a4b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	68ba      	ldr	r2, [r7, #8]
 800a4bc:	609a      	str	r2, [r3, #8]
      break;
 800a4be:	e04f      	b.n	800a560 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6818      	ldr	r0, [r3, #0]
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	6899      	ldr	r1, [r3, #8]
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	685a      	ldr	r2, [r3, #4]
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	f000 fb02 	bl	800aad8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	689a      	ldr	r2, [r3, #8]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a4e2:	609a      	str	r2, [r3, #8]
      break;
 800a4e4:	e03c      	b.n	800a560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6818      	ldr	r0, [r3, #0]
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	6859      	ldr	r1, [r3, #4]
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	f000 fa76 	bl	800a9e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	2150      	movs	r1, #80	; 0x50
 800a4fe:	4618      	mov	r0, r3
 800a500:	f000 facf 	bl	800aaa2 <TIM_ITRx_SetConfig>
      break;
 800a504:	e02c      	b.n	800a560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6818      	ldr	r0, [r3, #0]
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	6859      	ldr	r1, [r3, #4]
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	68db      	ldr	r3, [r3, #12]
 800a512:	461a      	mov	r2, r3
 800a514:	f000 fa95 	bl	800aa42 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	2160      	movs	r1, #96	; 0x60
 800a51e:	4618      	mov	r0, r3
 800a520:	f000 fabf 	bl	800aaa2 <TIM_ITRx_SetConfig>
      break;
 800a524:	e01c      	b.n	800a560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6818      	ldr	r0, [r3, #0]
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	6859      	ldr	r1, [r3, #4]
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	461a      	mov	r2, r3
 800a534:	f000 fa56 	bl	800a9e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	2140      	movs	r1, #64	; 0x40
 800a53e:	4618      	mov	r0, r3
 800a540:	f000 faaf 	bl	800aaa2 <TIM_ITRx_SetConfig>
      break;
 800a544:	e00c      	b.n	800a560 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4619      	mov	r1, r3
 800a550:	4610      	mov	r0, r2
 800a552:	f000 faa6 	bl	800aaa2 <TIM_ITRx_SetConfig>
      break;
 800a556:	e003      	b.n	800a560 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a558:	2301      	movs	r3, #1
 800a55a:	73fb      	strb	r3, [r7, #15]
      break;
 800a55c:	e000      	b.n	800a560 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a55e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a570:	7bfb      	ldrb	r3, [r7, #15]
}
 800a572:	4618      	mov	r0, r3
 800a574:	3710      	adds	r7, #16
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}

0800a57a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a57a:	b480      	push	{r7}
 800a57c:	b083      	sub	sp, #12
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a582:	bf00      	nop
 800a584:	370c      	adds	r7, #12
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr

0800a58e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a58e:	b480      	push	{r7}
 800a590:	b083      	sub	sp, #12
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a596:	bf00      	nop
 800a598:	370c      	adds	r7, #12
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr

0800a5a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a5a2:	b480      	push	{r7}
 800a5a4:	b083      	sub	sp, #12
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a5aa:	bf00      	nop
 800a5ac:	370c      	adds	r7, #12
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr

0800a5b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a5b6:	b480      	push	{r7}
 800a5b8:	b083      	sub	sp, #12
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a5be:	bf00      	nop
 800a5c0:	370c      	adds	r7, #12
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr
	...

0800a5cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b085      	sub	sp, #20
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	4a34      	ldr	r2, [pc, #208]	; (800a6b0 <TIM_Base_SetConfig+0xe4>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d00f      	beq.n	800a604 <TIM_Base_SetConfig+0x38>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5ea:	d00b      	beq.n	800a604 <TIM_Base_SetConfig+0x38>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4a31      	ldr	r2, [pc, #196]	; (800a6b4 <TIM_Base_SetConfig+0xe8>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d007      	beq.n	800a604 <TIM_Base_SetConfig+0x38>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	4a30      	ldr	r2, [pc, #192]	; (800a6b8 <TIM_Base_SetConfig+0xec>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d003      	beq.n	800a604 <TIM_Base_SetConfig+0x38>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	4a2f      	ldr	r2, [pc, #188]	; (800a6bc <TIM_Base_SetConfig+0xf0>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d108      	bne.n	800a616 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a60a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	68fa      	ldr	r2, [r7, #12]
 800a612:	4313      	orrs	r3, r2
 800a614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	4a25      	ldr	r2, [pc, #148]	; (800a6b0 <TIM_Base_SetConfig+0xe4>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d01b      	beq.n	800a656 <TIM_Base_SetConfig+0x8a>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a624:	d017      	beq.n	800a656 <TIM_Base_SetConfig+0x8a>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	4a22      	ldr	r2, [pc, #136]	; (800a6b4 <TIM_Base_SetConfig+0xe8>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d013      	beq.n	800a656 <TIM_Base_SetConfig+0x8a>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	4a21      	ldr	r2, [pc, #132]	; (800a6b8 <TIM_Base_SetConfig+0xec>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d00f      	beq.n	800a656 <TIM_Base_SetConfig+0x8a>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	4a20      	ldr	r2, [pc, #128]	; (800a6bc <TIM_Base_SetConfig+0xf0>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d00b      	beq.n	800a656 <TIM_Base_SetConfig+0x8a>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	4a1f      	ldr	r2, [pc, #124]	; (800a6c0 <TIM_Base_SetConfig+0xf4>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d007      	beq.n	800a656 <TIM_Base_SetConfig+0x8a>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	4a1e      	ldr	r2, [pc, #120]	; (800a6c4 <TIM_Base_SetConfig+0xf8>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d003      	beq.n	800a656 <TIM_Base_SetConfig+0x8a>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	4a1d      	ldr	r2, [pc, #116]	; (800a6c8 <TIM_Base_SetConfig+0xfc>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d108      	bne.n	800a668 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a65c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	68db      	ldr	r3, [r3, #12]
 800a662:	68fa      	ldr	r2, [r7, #12]
 800a664:	4313      	orrs	r3, r2
 800a666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	695b      	ldr	r3, [r3, #20]
 800a672:	4313      	orrs	r3, r2
 800a674:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	68fa      	ldr	r2, [r7, #12]
 800a67a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	689a      	ldr	r2, [r3, #8]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	681a      	ldr	r2, [r3, #0]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	4a08      	ldr	r2, [pc, #32]	; (800a6b0 <TIM_Base_SetConfig+0xe4>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d103      	bne.n	800a69c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	691a      	ldr	r2, [r3, #16]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	615a      	str	r2, [r3, #20]
}
 800a6a2:	bf00      	nop
 800a6a4:	3714      	adds	r7, #20
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr
 800a6ae:	bf00      	nop
 800a6b0:	40010000 	.word	0x40010000
 800a6b4:	40000400 	.word	0x40000400
 800a6b8:	40000800 	.word	0x40000800
 800a6bc:	40000c00 	.word	0x40000c00
 800a6c0:	40014000 	.word	0x40014000
 800a6c4:	40014400 	.word	0x40014400
 800a6c8:	40014800 	.word	0x40014800

0800a6cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b087      	sub	sp, #28
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6a1b      	ldr	r3, [r3, #32]
 800a6da:	f023 0201 	bic.w	r2, r3, #1
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6a1b      	ldr	r3, [r3, #32]
 800a6e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	699b      	ldr	r3, [r3, #24]
 800a6f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f023 0303 	bic.w	r3, r3, #3
 800a702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	4313      	orrs	r3, r2
 800a70c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	f023 0302 	bic.w	r3, r3, #2
 800a714:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	689b      	ldr	r3, [r3, #8]
 800a71a:	697a      	ldr	r2, [r7, #20]
 800a71c:	4313      	orrs	r3, r2
 800a71e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	4a1c      	ldr	r2, [pc, #112]	; (800a794 <TIM_OC1_SetConfig+0xc8>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d10c      	bne.n	800a742 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	f023 0308 	bic.w	r3, r3, #8
 800a72e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	68db      	ldr	r3, [r3, #12]
 800a734:	697a      	ldr	r2, [r7, #20]
 800a736:	4313      	orrs	r3, r2
 800a738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	f023 0304 	bic.w	r3, r3, #4
 800a740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	4a13      	ldr	r2, [pc, #76]	; (800a794 <TIM_OC1_SetConfig+0xc8>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d111      	bne.n	800a76e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	695b      	ldr	r3, [r3, #20]
 800a75e:	693a      	ldr	r2, [r7, #16]
 800a760:	4313      	orrs	r3, r2
 800a762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	699b      	ldr	r3, [r3, #24]
 800a768:	693a      	ldr	r2, [r7, #16]
 800a76a:	4313      	orrs	r3, r2
 800a76c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	693a      	ldr	r2, [r7, #16]
 800a772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	68fa      	ldr	r2, [r7, #12]
 800a778:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	685a      	ldr	r2, [r3, #4]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	697a      	ldr	r2, [r7, #20]
 800a786:	621a      	str	r2, [r3, #32]
}
 800a788:	bf00      	nop
 800a78a:	371c      	adds	r7, #28
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr
 800a794:	40010000 	.word	0x40010000

0800a798 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a798:	b480      	push	{r7}
 800a79a:	b087      	sub	sp, #28
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6a1b      	ldr	r3, [r3, #32]
 800a7a6:	f023 0210 	bic.w	r2, r3, #16
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6a1b      	ldr	r3, [r3, #32]
 800a7b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	699b      	ldr	r3, [r3, #24]
 800a7be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	021b      	lsls	r3, r3, #8
 800a7d6:	68fa      	ldr	r2, [r7, #12]
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	f023 0320 	bic.w	r3, r3, #32
 800a7e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	011b      	lsls	r3, r3, #4
 800a7ea:	697a      	ldr	r2, [r7, #20]
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	4a1e      	ldr	r2, [pc, #120]	; (800a86c <TIM_OC2_SetConfig+0xd4>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d10d      	bne.n	800a814 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	68db      	ldr	r3, [r3, #12]
 800a804:	011b      	lsls	r3, r3, #4
 800a806:	697a      	ldr	r2, [r7, #20]
 800a808:	4313      	orrs	r3, r2
 800a80a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a812:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	4a15      	ldr	r2, [pc, #84]	; (800a86c <TIM_OC2_SetConfig+0xd4>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d113      	bne.n	800a844 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a822:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a82a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	695b      	ldr	r3, [r3, #20]
 800a830:	009b      	lsls	r3, r3, #2
 800a832:	693a      	ldr	r2, [r7, #16]
 800a834:	4313      	orrs	r3, r2
 800a836:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	699b      	ldr	r3, [r3, #24]
 800a83c:	009b      	lsls	r3, r3, #2
 800a83e:	693a      	ldr	r2, [r7, #16]
 800a840:	4313      	orrs	r3, r2
 800a842:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	693a      	ldr	r2, [r7, #16]
 800a848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	68fa      	ldr	r2, [r7, #12]
 800a84e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	685a      	ldr	r2, [r3, #4]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	697a      	ldr	r2, [r7, #20]
 800a85c:	621a      	str	r2, [r3, #32]
}
 800a85e:	bf00      	nop
 800a860:	371c      	adds	r7, #28
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr
 800a86a:	bf00      	nop
 800a86c:	40010000 	.word	0x40010000

0800a870 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a870:	b480      	push	{r7}
 800a872:	b087      	sub	sp, #28
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6a1b      	ldr	r3, [r3, #32]
 800a87e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6a1b      	ldr	r3, [r3, #32]
 800a88a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	69db      	ldr	r3, [r3, #28]
 800a896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a89e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f023 0303 	bic.w	r3, r3, #3
 800a8a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	68fa      	ldr	r2, [r7, #12]
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a8b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	021b      	lsls	r3, r3, #8
 800a8c0:	697a      	ldr	r2, [r7, #20]
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	4a1d      	ldr	r2, [pc, #116]	; (800a940 <TIM_OC3_SetConfig+0xd0>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d10d      	bne.n	800a8ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a8d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	021b      	lsls	r3, r3, #8
 800a8dc:	697a      	ldr	r2, [r7, #20]
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a8e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	4a14      	ldr	r2, [pc, #80]	; (800a940 <TIM_OC3_SetConfig+0xd0>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d113      	bne.n	800a91a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	695b      	ldr	r3, [r3, #20]
 800a906:	011b      	lsls	r3, r3, #4
 800a908:	693a      	ldr	r2, [r7, #16]
 800a90a:	4313      	orrs	r3, r2
 800a90c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	699b      	ldr	r3, [r3, #24]
 800a912:	011b      	lsls	r3, r3, #4
 800a914:	693a      	ldr	r2, [r7, #16]
 800a916:	4313      	orrs	r3, r2
 800a918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	693a      	ldr	r2, [r7, #16]
 800a91e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	68fa      	ldr	r2, [r7, #12]
 800a924:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	685a      	ldr	r2, [r3, #4]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	697a      	ldr	r2, [r7, #20]
 800a932:	621a      	str	r2, [r3, #32]
}
 800a934:	bf00      	nop
 800a936:	371c      	adds	r7, #28
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr
 800a940:	40010000 	.word	0x40010000

0800a944 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a944:	b480      	push	{r7}
 800a946:	b087      	sub	sp, #28
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6a1b      	ldr	r3, [r3, #32]
 800a952:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6a1b      	ldr	r3, [r3, #32]
 800a95e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	69db      	ldr	r3, [r3, #28]
 800a96a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a97a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	021b      	lsls	r3, r3, #8
 800a982:	68fa      	ldr	r2, [r7, #12]
 800a984:	4313      	orrs	r3, r2
 800a986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a98e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	689b      	ldr	r3, [r3, #8]
 800a994:	031b      	lsls	r3, r3, #12
 800a996:	693a      	ldr	r2, [r7, #16]
 800a998:	4313      	orrs	r3, r2
 800a99a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	4a10      	ldr	r2, [pc, #64]	; (800a9e0 <TIM_OC4_SetConfig+0x9c>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d109      	bne.n	800a9b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a9aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	695b      	ldr	r3, [r3, #20]
 800a9b0:	019b      	lsls	r3, r3, #6
 800a9b2:	697a      	ldr	r2, [r7, #20]
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	697a      	ldr	r2, [r7, #20]
 800a9bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	68fa      	ldr	r2, [r7, #12]
 800a9c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	685a      	ldr	r2, [r3, #4]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	693a      	ldr	r2, [r7, #16]
 800a9d0:	621a      	str	r2, [r3, #32]
}
 800a9d2:	bf00      	nop
 800a9d4:	371c      	adds	r7, #28
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr
 800a9de:	bf00      	nop
 800a9e0:	40010000 	.word	0x40010000

0800a9e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b087      	sub	sp, #28
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	60f8      	str	r0, [r7, #12]
 800a9ec:	60b9      	str	r1, [r7, #8]
 800a9ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	6a1b      	ldr	r3, [r3, #32]
 800a9f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	6a1b      	ldr	r3, [r3, #32]
 800a9fa:	f023 0201 	bic.w	r2, r3, #1
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	699b      	ldr	r3, [r3, #24]
 800aa06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	011b      	lsls	r3, r3, #4
 800aa14:	693a      	ldr	r2, [r7, #16]
 800aa16:	4313      	orrs	r3, r2
 800aa18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	f023 030a 	bic.w	r3, r3, #10
 800aa20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa22:	697a      	ldr	r2, [r7, #20]
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	4313      	orrs	r3, r2
 800aa28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	693a      	ldr	r2, [r7, #16]
 800aa2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	697a      	ldr	r2, [r7, #20]
 800aa34:	621a      	str	r2, [r3, #32]
}
 800aa36:	bf00      	nop
 800aa38:	371c      	adds	r7, #28
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr

0800aa42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa42:	b480      	push	{r7}
 800aa44:	b087      	sub	sp, #28
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	60f8      	str	r0, [r7, #12]
 800aa4a:	60b9      	str	r1, [r7, #8]
 800aa4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	6a1b      	ldr	r3, [r3, #32]
 800aa52:	f023 0210 	bic.w	r2, r3, #16
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	699b      	ldr	r3, [r3, #24]
 800aa5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	6a1b      	ldr	r3, [r3, #32]
 800aa64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	031b      	lsls	r3, r3, #12
 800aa72:	697a      	ldr	r2, [r7, #20]
 800aa74:	4313      	orrs	r3, r2
 800aa76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aa7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	011b      	lsls	r3, r3, #4
 800aa84:	693a      	ldr	r2, [r7, #16]
 800aa86:	4313      	orrs	r3, r2
 800aa88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	697a      	ldr	r2, [r7, #20]
 800aa8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	693a      	ldr	r2, [r7, #16]
 800aa94:	621a      	str	r2, [r3, #32]
}
 800aa96:	bf00      	nop
 800aa98:	371c      	adds	r7, #28
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr

0800aaa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aaa2:	b480      	push	{r7}
 800aaa4:	b085      	sub	sp, #20
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
 800aaaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	689b      	ldr	r3, [r3, #8]
 800aab0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aab8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aaba:	683a      	ldr	r2, [r7, #0]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	4313      	orrs	r3, r2
 800aac0:	f043 0307 	orr.w	r3, r3, #7
 800aac4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	68fa      	ldr	r2, [r7, #12]
 800aaca:	609a      	str	r2, [r3, #8]
}
 800aacc:	bf00      	nop
 800aace:	3714      	adds	r7, #20
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr

0800aad8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aad8:	b480      	push	{r7}
 800aada:	b087      	sub	sp, #28
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	60b9      	str	r1, [r7, #8]
 800aae2:	607a      	str	r2, [r7, #4]
 800aae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	689b      	ldr	r3, [r3, #8]
 800aaea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aaf2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	021a      	lsls	r2, r3, #8
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	431a      	orrs	r2, r3
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	4313      	orrs	r3, r2
 800ab00:	697a      	ldr	r2, [r7, #20]
 800ab02:	4313      	orrs	r3, r2
 800ab04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	697a      	ldr	r2, [r7, #20]
 800ab0a:	609a      	str	r2, [r3, #8]
}
 800ab0c:	bf00      	nop
 800ab0e:	371c      	adds	r7, #28
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b087      	sub	sp, #28
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	60f8      	str	r0, [r7, #12]
 800ab20:	60b9      	str	r1, [r7, #8]
 800ab22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	f003 031f 	and.w	r3, r3, #31
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	fa02 f303 	lsl.w	r3, r2, r3
 800ab30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	6a1a      	ldr	r2, [r3, #32]
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	43db      	mvns	r3, r3
 800ab3a:	401a      	ands	r2, r3
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	6a1a      	ldr	r2, [r3, #32]
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	f003 031f 	and.w	r3, r3, #31
 800ab4a:	6879      	ldr	r1, [r7, #4]
 800ab4c:	fa01 f303 	lsl.w	r3, r1, r3
 800ab50:	431a      	orrs	r2, r3
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	621a      	str	r2, [r3, #32]
}
 800ab56:	bf00      	nop
 800ab58:	371c      	adds	r7, #28
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr
	...

0800ab64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b085      	sub	sp, #20
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d101      	bne.n	800ab7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab78:	2302      	movs	r3, #2
 800ab7a:	e050      	b.n	800ac1e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2202      	movs	r2, #2
 800ab88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	689b      	ldr	r3, [r3, #8]
 800ab9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aba2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	4313      	orrs	r3, r2
 800abac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	68fa      	ldr	r2, [r7, #12]
 800abb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a1c      	ldr	r2, [pc, #112]	; (800ac2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d018      	beq.n	800abf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abc8:	d013      	beq.n	800abf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4a18      	ldr	r2, [pc, #96]	; (800ac30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d00e      	beq.n	800abf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4a16      	ldr	r2, [pc, #88]	; (800ac34 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d009      	beq.n	800abf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4a15      	ldr	r2, [pc, #84]	; (800ac38 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d004      	beq.n	800abf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4a13      	ldr	r2, [pc, #76]	; (800ac3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d10c      	bne.n	800ac0c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abf8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	68ba      	ldr	r2, [r7, #8]
 800ac00:	4313      	orrs	r3, r2
 800ac02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	68ba      	ldr	r2, [r7, #8]
 800ac0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2201      	movs	r2, #1
 800ac10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2200      	movs	r2, #0
 800ac18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac1c:	2300      	movs	r3, #0
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3714      	adds	r7, #20
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr
 800ac2a:	bf00      	nop
 800ac2c:	40010000 	.word	0x40010000
 800ac30:	40000400 	.word	0x40000400
 800ac34:	40000800 	.word	0x40000800
 800ac38:	40000c00 	.word	0x40000c00
 800ac3c:	40014000 	.word	0x40014000

0800ac40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac48:	bf00      	nop
 800ac4a:	370c      	adds	r7, #12
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr

0800ac54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac5c:	bf00      	nop
 800ac5e:	370c      	adds	r7, #12
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr

0800ac68 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d101      	bne.n	800ac7a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800ac76:	2301      	movs	r3, #1
 800ac78:	e047      	b.n	800ad0a <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac80:	b2db      	uxtb	r3, r3
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d106      	bne.n	800ac94 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f7fa fcb4 	bl	80055fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2224      	movs	r2, #36	; 0x24
 800ac98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	68da      	ldr	r2, [r3, #12]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800acaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 f931 	bl	800af14 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	691a      	ldr	r2, [r3, #16]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800acc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	695a      	ldr	r2, [r3, #20]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800acd0:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	695a      	ldr	r2, [r3, #20]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f042 0208 	orr.w	r2, r2, #8
 800ace0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	68da      	ldr	r2, [r3, #12]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800acf0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2200      	movs	r2, #0
 800acf6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2220      	movs	r2, #32
 800acfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2220      	movs	r2, #32
 800ad04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ad08:	2300      	movs	r3, #0
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3708      	adds	r7, #8
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}

0800ad12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad12:	b580      	push	{r7, lr}
 800ad14:	b08a      	sub	sp, #40	; 0x28
 800ad16:	af02      	add	r7, sp, #8
 800ad18:	60f8      	str	r0, [r7, #12]
 800ad1a:	60b9      	str	r1, [r7, #8]
 800ad1c:	603b      	str	r3, [r7, #0]
 800ad1e:	4613      	mov	r3, r2
 800ad20:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ad22:	2300      	movs	r3, #0
 800ad24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	2b20      	cmp	r3, #32
 800ad30:	d17c      	bne.n	800ae2c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d002      	beq.n	800ad3e <HAL_UART_Transmit+0x2c>
 800ad38:	88fb      	ldrh	r3, [r7, #6]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d101      	bne.n	800ad42 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	e075      	b.n	800ae2e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d101      	bne.n	800ad50 <HAL_UART_Transmit+0x3e>
 800ad4c:	2302      	movs	r3, #2
 800ad4e:	e06e      	b.n	800ae2e <HAL_UART_Transmit+0x11c>
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2201      	movs	r2, #1
 800ad54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2221      	movs	r2, #33	; 0x21
 800ad62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ad66:	f7fa fdb3 	bl	80058d0 <HAL_GetTick>
 800ad6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	88fa      	ldrh	r2, [r7, #6]
 800ad70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	88fa      	ldrh	r2, [r7, #6]
 800ad76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	689b      	ldr	r3, [r3, #8]
 800ad7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad80:	d108      	bne.n	800ad94 <HAL_UART_Transmit+0x82>
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	691b      	ldr	r3, [r3, #16]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d104      	bne.n	800ad94 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	61bb      	str	r3, [r7, #24]
 800ad92:	e003      	b.n	800ad9c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800ada4:	e02a      	b.n	800adfc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	9300      	str	r3, [sp, #0]
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	2200      	movs	r2, #0
 800adae:	2180      	movs	r1, #128	; 0x80
 800adb0:	68f8      	ldr	r0, [r7, #12]
 800adb2:	f000 f840 	bl	800ae36 <UART_WaitOnFlagUntilTimeout>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d001      	beq.n	800adc0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800adbc:	2303      	movs	r3, #3
 800adbe:	e036      	b.n	800ae2e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800adc0:	69fb      	ldr	r3, [r7, #28]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d10b      	bne.n	800adde <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800adc6:	69bb      	ldr	r3, [r7, #24]
 800adc8:	881b      	ldrh	r3, [r3, #0]
 800adca:	461a      	mov	r2, r3
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800add4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	3302      	adds	r3, #2
 800adda:	61bb      	str	r3, [r7, #24]
 800addc:	e007      	b.n	800adee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800adde:	69fb      	ldr	r3, [r7, #28]
 800ade0:	781a      	ldrb	r2, [r3, #0]
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ade8:	69fb      	ldr	r3, [r7, #28]
 800adea:	3301      	adds	r3, #1
 800adec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800adf2:	b29b      	uxth	r3, r3
 800adf4:	3b01      	subs	r3, #1
 800adf6:	b29a      	uxth	r2, r3
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d1cf      	bne.n	800ada6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	9300      	str	r3, [sp, #0]
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	2140      	movs	r1, #64	; 0x40
 800ae10:	68f8      	ldr	r0, [r7, #12]
 800ae12:	f000 f810 	bl	800ae36 <UART_WaitOnFlagUntilTimeout>
 800ae16:	4603      	mov	r3, r0
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d001      	beq.n	800ae20 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800ae1c:	2303      	movs	r3, #3
 800ae1e:	e006      	b.n	800ae2e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2220      	movs	r2, #32
 800ae24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	e000      	b.n	800ae2e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800ae2c:	2302      	movs	r3, #2
  }
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3720      	adds	r7, #32
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b090      	sub	sp, #64	; 0x40
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	60f8      	str	r0, [r7, #12]
 800ae3e:	60b9      	str	r1, [r7, #8]
 800ae40:	603b      	str	r3, [r7, #0]
 800ae42:	4613      	mov	r3, r2
 800ae44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae46:	e050      	b.n	800aeea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae4e:	d04c      	beq.n	800aeea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ae50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d007      	beq.n	800ae66 <UART_WaitOnFlagUntilTimeout+0x30>
 800ae56:	f7fa fd3b 	bl	80058d0 <HAL_GetTick>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	1ad3      	subs	r3, r2, r3
 800ae60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d241      	bcs.n	800aeea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	330c      	adds	r3, #12
 800ae6c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae70:	e853 3f00 	ldrex	r3, [r3]
 800ae74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ae7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	330c      	adds	r3, #12
 800ae84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ae86:	637a      	str	r2, [r7, #52]	; 0x34
 800ae88:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae8e:	e841 2300 	strex	r3, r2, [r1]
 800ae92:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ae94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d1e5      	bne.n	800ae66 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	3314      	adds	r3, #20
 800aea0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	e853 3f00 	ldrex	r3, [r3]
 800aea8:	613b      	str	r3, [r7, #16]
   return(result);
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	f023 0301 	bic.w	r3, r3, #1
 800aeb0:	63bb      	str	r3, [r7, #56]	; 0x38
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	3314      	adds	r3, #20
 800aeb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aeba:	623a      	str	r2, [r7, #32]
 800aebc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aebe:	69f9      	ldr	r1, [r7, #28]
 800aec0:	6a3a      	ldr	r2, [r7, #32]
 800aec2:	e841 2300 	strex	r3, r2, [r1]
 800aec6:	61bb      	str	r3, [r7, #24]
   return(result);
 800aec8:	69bb      	ldr	r3, [r7, #24]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d1e5      	bne.n	800ae9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2220      	movs	r2, #32
 800aed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2220      	movs	r2, #32
 800aeda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2200      	movs	r2, #0
 800aee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800aee6:	2303      	movs	r3, #3
 800aee8:	e00f      	b.n	800af0a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	4013      	ands	r3, r2
 800aef4:	68ba      	ldr	r2, [r7, #8]
 800aef6:	429a      	cmp	r2, r3
 800aef8:	bf0c      	ite	eq
 800aefa:	2301      	moveq	r3, #1
 800aefc:	2300      	movne	r3, #0
 800aefe:	b2db      	uxtb	r3, r3
 800af00:	461a      	mov	r2, r3
 800af02:	79fb      	ldrb	r3, [r7, #7]
 800af04:	429a      	cmp	r2, r3
 800af06:	d09f      	beq.n	800ae48 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800af08:	2300      	movs	r3, #0
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3740      	adds	r7, #64	; 0x40
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
	...

0800af14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af18:	b0c0      	sub	sp, #256	; 0x100
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	691b      	ldr	r3, [r3, #16]
 800af28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800af2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af30:	68d9      	ldr	r1, [r3, #12]
 800af32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af36:	681a      	ldr	r2, [r3, #0]
 800af38:	ea40 0301 	orr.w	r3, r0, r1
 800af3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800af3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af42:	689a      	ldr	r2, [r3, #8]
 800af44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af48:	691b      	ldr	r3, [r3, #16]
 800af4a:	431a      	orrs	r2, r3
 800af4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af50:	695b      	ldr	r3, [r3, #20]
 800af52:	431a      	orrs	r2, r3
 800af54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af58:	69db      	ldr	r3, [r3, #28]
 800af5a:	4313      	orrs	r3, r2
 800af5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800af60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	68db      	ldr	r3, [r3, #12]
 800af68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800af6c:	f021 010c 	bic.w	r1, r1, #12
 800af70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af74:	681a      	ldr	r2, [r3, #0]
 800af76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800af7a:	430b      	orrs	r3, r1
 800af7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800af7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	695b      	ldr	r3, [r3, #20]
 800af86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800af8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af8e:	6999      	ldr	r1, [r3, #24]
 800af90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	ea40 0301 	orr.w	r3, r0, r1
 800af9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800af9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afa0:	681a      	ldr	r2, [r3, #0]
 800afa2:	4b8f      	ldr	r3, [pc, #572]	; (800b1e0 <UART_SetConfig+0x2cc>)
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d005      	beq.n	800afb4 <UART_SetConfig+0xa0>
 800afa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	4b8d      	ldr	r3, [pc, #564]	; (800b1e4 <UART_SetConfig+0x2d0>)
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d104      	bne.n	800afbe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800afb4:	f7fd ffd8 	bl	8008f68 <HAL_RCC_GetPCLK2Freq>
 800afb8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800afbc:	e003      	b.n	800afc6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800afbe:	f7fd ffbf 	bl	8008f40 <HAL_RCC_GetPCLK1Freq>
 800afc2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800afc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afca:	69db      	ldr	r3, [r3, #28]
 800afcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afd0:	f040 810c 	bne.w	800b1ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800afd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800afd8:	2200      	movs	r2, #0
 800afda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800afde:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800afe2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800afe6:	4622      	mov	r2, r4
 800afe8:	462b      	mov	r3, r5
 800afea:	1891      	adds	r1, r2, r2
 800afec:	65b9      	str	r1, [r7, #88]	; 0x58
 800afee:	415b      	adcs	r3, r3
 800aff0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aff2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800aff6:	4621      	mov	r1, r4
 800aff8:	eb12 0801 	adds.w	r8, r2, r1
 800affc:	4629      	mov	r1, r5
 800affe:	eb43 0901 	adc.w	r9, r3, r1
 800b002:	f04f 0200 	mov.w	r2, #0
 800b006:	f04f 0300 	mov.w	r3, #0
 800b00a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b00e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b012:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b016:	4690      	mov	r8, r2
 800b018:	4699      	mov	r9, r3
 800b01a:	4623      	mov	r3, r4
 800b01c:	eb18 0303 	adds.w	r3, r8, r3
 800b020:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b024:	462b      	mov	r3, r5
 800b026:	eb49 0303 	adc.w	r3, r9, r3
 800b02a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b02e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	2200      	movs	r2, #0
 800b036:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b03a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b03e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b042:	460b      	mov	r3, r1
 800b044:	18db      	adds	r3, r3, r3
 800b046:	653b      	str	r3, [r7, #80]	; 0x50
 800b048:	4613      	mov	r3, r2
 800b04a:	eb42 0303 	adc.w	r3, r2, r3
 800b04e:	657b      	str	r3, [r7, #84]	; 0x54
 800b050:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b054:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b058:	f7f5 fbfc 	bl	8000854 <__aeabi_uldivmod>
 800b05c:	4602      	mov	r2, r0
 800b05e:	460b      	mov	r3, r1
 800b060:	4b61      	ldr	r3, [pc, #388]	; (800b1e8 <UART_SetConfig+0x2d4>)
 800b062:	fba3 2302 	umull	r2, r3, r3, r2
 800b066:	095b      	lsrs	r3, r3, #5
 800b068:	011c      	lsls	r4, r3, #4
 800b06a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b06e:	2200      	movs	r2, #0
 800b070:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b074:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b078:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b07c:	4642      	mov	r2, r8
 800b07e:	464b      	mov	r3, r9
 800b080:	1891      	adds	r1, r2, r2
 800b082:	64b9      	str	r1, [r7, #72]	; 0x48
 800b084:	415b      	adcs	r3, r3
 800b086:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b088:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b08c:	4641      	mov	r1, r8
 800b08e:	eb12 0a01 	adds.w	sl, r2, r1
 800b092:	4649      	mov	r1, r9
 800b094:	eb43 0b01 	adc.w	fp, r3, r1
 800b098:	f04f 0200 	mov.w	r2, #0
 800b09c:	f04f 0300 	mov.w	r3, #0
 800b0a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b0a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b0a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b0ac:	4692      	mov	sl, r2
 800b0ae:	469b      	mov	fp, r3
 800b0b0:	4643      	mov	r3, r8
 800b0b2:	eb1a 0303 	adds.w	r3, sl, r3
 800b0b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b0ba:	464b      	mov	r3, r9
 800b0bc:	eb4b 0303 	adc.w	r3, fp, r3
 800b0c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b0c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b0d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b0d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b0d8:	460b      	mov	r3, r1
 800b0da:	18db      	adds	r3, r3, r3
 800b0dc:	643b      	str	r3, [r7, #64]	; 0x40
 800b0de:	4613      	mov	r3, r2
 800b0e0:	eb42 0303 	adc.w	r3, r2, r3
 800b0e4:	647b      	str	r3, [r7, #68]	; 0x44
 800b0e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b0ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b0ee:	f7f5 fbb1 	bl	8000854 <__aeabi_uldivmod>
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	4611      	mov	r1, r2
 800b0f8:	4b3b      	ldr	r3, [pc, #236]	; (800b1e8 <UART_SetConfig+0x2d4>)
 800b0fa:	fba3 2301 	umull	r2, r3, r3, r1
 800b0fe:	095b      	lsrs	r3, r3, #5
 800b100:	2264      	movs	r2, #100	; 0x64
 800b102:	fb02 f303 	mul.w	r3, r2, r3
 800b106:	1acb      	subs	r3, r1, r3
 800b108:	00db      	lsls	r3, r3, #3
 800b10a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b10e:	4b36      	ldr	r3, [pc, #216]	; (800b1e8 <UART_SetConfig+0x2d4>)
 800b110:	fba3 2302 	umull	r2, r3, r3, r2
 800b114:	095b      	lsrs	r3, r3, #5
 800b116:	005b      	lsls	r3, r3, #1
 800b118:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b11c:	441c      	add	r4, r3
 800b11e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b122:	2200      	movs	r2, #0
 800b124:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b128:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b12c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b130:	4642      	mov	r2, r8
 800b132:	464b      	mov	r3, r9
 800b134:	1891      	adds	r1, r2, r2
 800b136:	63b9      	str	r1, [r7, #56]	; 0x38
 800b138:	415b      	adcs	r3, r3
 800b13a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b13c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b140:	4641      	mov	r1, r8
 800b142:	1851      	adds	r1, r2, r1
 800b144:	6339      	str	r1, [r7, #48]	; 0x30
 800b146:	4649      	mov	r1, r9
 800b148:	414b      	adcs	r3, r1
 800b14a:	637b      	str	r3, [r7, #52]	; 0x34
 800b14c:	f04f 0200 	mov.w	r2, #0
 800b150:	f04f 0300 	mov.w	r3, #0
 800b154:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b158:	4659      	mov	r1, fp
 800b15a:	00cb      	lsls	r3, r1, #3
 800b15c:	4651      	mov	r1, sl
 800b15e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b162:	4651      	mov	r1, sl
 800b164:	00ca      	lsls	r2, r1, #3
 800b166:	4610      	mov	r0, r2
 800b168:	4619      	mov	r1, r3
 800b16a:	4603      	mov	r3, r0
 800b16c:	4642      	mov	r2, r8
 800b16e:	189b      	adds	r3, r3, r2
 800b170:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b174:	464b      	mov	r3, r9
 800b176:	460a      	mov	r2, r1
 800b178:	eb42 0303 	adc.w	r3, r2, r3
 800b17c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b184:	685b      	ldr	r3, [r3, #4]
 800b186:	2200      	movs	r2, #0
 800b188:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b18c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b190:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b194:	460b      	mov	r3, r1
 800b196:	18db      	adds	r3, r3, r3
 800b198:	62bb      	str	r3, [r7, #40]	; 0x28
 800b19a:	4613      	mov	r3, r2
 800b19c:	eb42 0303 	adc.w	r3, r2, r3
 800b1a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b1a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b1aa:	f7f5 fb53 	bl	8000854 <__aeabi_uldivmod>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	4b0d      	ldr	r3, [pc, #52]	; (800b1e8 <UART_SetConfig+0x2d4>)
 800b1b4:	fba3 1302 	umull	r1, r3, r3, r2
 800b1b8:	095b      	lsrs	r3, r3, #5
 800b1ba:	2164      	movs	r1, #100	; 0x64
 800b1bc:	fb01 f303 	mul.w	r3, r1, r3
 800b1c0:	1ad3      	subs	r3, r2, r3
 800b1c2:	00db      	lsls	r3, r3, #3
 800b1c4:	3332      	adds	r3, #50	; 0x32
 800b1c6:	4a08      	ldr	r2, [pc, #32]	; (800b1e8 <UART_SetConfig+0x2d4>)
 800b1c8:	fba2 2303 	umull	r2, r3, r2, r3
 800b1cc:	095b      	lsrs	r3, r3, #5
 800b1ce:	f003 0207 	and.w	r2, r3, #7
 800b1d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	4422      	add	r2, r4
 800b1da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b1dc:	e105      	b.n	800b3ea <UART_SetConfig+0x4d6>
 800b1de:	bf00      	nop
 800b1e0:	40011000 	.word	0x40011000
 800b1e4:	40011400 	.word	0x40011400
 800b1e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b1ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b1f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b1fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b1fe:	4642      	mov	r2, r8
 800b200:	464b      	mov	r3, r9
 800b202:	1891      	adds	r1, r2, r2
 800b204:	6239      	str	r1, [r7, #32]
 800b206:	415b      	adcs	r3, r3
 800b208:	627b      	str	r3, [r7, #36]	; 0x24
 800b20a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b20e:	4641      	mov	r1, r8
 800b210:	1854      	adds	r4, r2, r1
 800b212:	4649      	mov	r1, r9
 800b214:	eb43 0501 	adc.w	r5, r3, r1
 800b218:	f04f 0200 	mov.w	r2, #0
 800b21c:	f04f 0300 	mov.w	r3, #0
 800b220:	00eb      	lsls	r3, r5, #3
 800b222:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b226:	00e2      	lsls	r2, r4, #3
 800b228:	4614      	mov	r4, r2
 800b22a:	461d      	mov	r5, r3
 800b22c:	4643      	mov	r3, r8
 800b22e:	18e3      	adds	r3, r4, r3
 800b230:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b234:	464b      	mov	r3, r9
 800b236:	eb45 0303 	adc.w	r3, r5, r3
 800b23a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b23e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	2200      	movs	r2, #0
 800b246:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b24a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b24e:	f04f 0200 	mov.w	r2, #0
 800b252:	f04f 0300 	mov.w	r3, #0
 800b256:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b25a:	4629      	mov	r1, r5
 800b25c:	008b      	lsls	r3, r1, #2
 800b25e:	4621      	mov	r1, r4
 800b260:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b264:	4621      	mov	r1, r4
 800b266:	008a      	lsls	r2, r1, #2
 800b268:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b26c:	f7f5 faf2 	bl	8000854 <__aeabi_uldivmod>
 800b270:	4602      	mov	r2, r0
 800b272:	460b      	mov	r3, r1
 800b274:	4b60      	ldr	r3, [pc, #384]	; (800b3f8 <UART_SetConfig+0x4e4>)
 800b276:	fba3 2302 	umull	r2, r3, r3, r2
 800b27a:	095b      	lsrs	r3, r3, #5
 800b27c:	011c      	lsls	r4, r3, #4
 800b27e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b282:	2200      	movs	r2, #0
 800b284:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b288:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b28c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b290:	4642      	mov	r2, r8
 800b292:	464b      	mov	r3, r9
 800b294:	1891      	adds	r1, r2, r2
 800b296:	61b9      	str	r1, [r7, #24]
 800b298:	415b      	adcs	r3, r3
 800b29a:	61fb      	str	r3, [r7, #28]
 800b29c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b2a0:	4641      	mov	r1, r8
 800b2a2:	1851      	adds	r1, r2, r1
 800b2a4:	6139      	str	r1, [r7, #16]
 800b2a6:	4649      	mov	r1, r9
 800b2a8:	414b      	adcs	r3, r1
 800b2aa:	617b      	str	r3, [r7, #20]
 800b2ac:	f04f 0200 	mov.w	r2, #0
 800b2b0:	f04f 0300 	mov.w	r3, #0
 800b2b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b2b8:	4659      	mov	r1, fp
 800b2ba:	00cb      	lsls	r3, r1, #3
 800b2bc:	4651      	mov	r1, sl
 800b2be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b2c2:	4651      	mov	r1, sl
 800b2c4:	00ca      	lsls	r2, r1, #3
 800b2c6:	4610      	mov	r0, r2
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	4642      	mov	r2, r8
 800b2ce:	189b      	adds	r3, r3, r2
 800b2d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b2d4:	464b      	mov	r3, r9
 800b2d6:	460a      	mov	r2, r1
 800b2d8:	eb42 0303 	adc.w	r3, r2, r3
 800b2dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b2e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	67bb      	str	r3, [r7, #120]	; 0x78
 800b2ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b2ec:	f04f 0200 	mov.w	r2, #0
 800b2f0:	f04f 0300 	mov.w	r3, #0
 800b2f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b2f8:	4649      	mov	r1, r9
 800b2fa:	008b      	lsls	r3, r1, #2
 800b2fc:	4641      	mov	r1, r8
 800b2fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b302:	4641      	mov	r1, r8
 800b304:	008a      	lsls	r2, r1, #2
 800b306:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b30a:	f7f5 faa3 	bl	8000854 <__aeabi_uldivmod>
 800b30e:	4602      	mov	r2, r0
 800b310:	460b      	mov	r3, r1
 800b312:	4b39      	ldr	r3, [pc, #228]	; (800b3f8 <UART_SetConfig+0x4e4>)
 800b314:	fba3 1302 	umull	r1, r3, r3, r2
 800b318:	095b      	lsrs	r3, r3, #5
 800b31a:	2164      	movs	r1, #100	; 0x64
 800b31c:	fb01 f303 	mul.w	r3, r1, r3
 800b320:	1ad3      	subs	r3, r2, r3
 800b322:	011b      	lsls	r3, r3, #4
 800b324:	3332      	adds	r3, #50	; 0x32
 800b326:	4a34      	ldr	r2, [pc, #208]	; (800b3f8 <UART_SetConfig+0x4e4>)
 800b328:	fba2 2303 	umull	r2, r3, r2, r3
 800b32c:	095b      	lsrs	r3, r3, #5
 800b32e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b332:	441c      	add	r4, r3
 800b334:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b338:	2200      	movs	r2, #0
 800b33a:	673b      	str	r3, [r7, #112]	; 0x70
 800b33c:	677a      	str	r2, [r7, #116]	; 0x74
 800b33e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b342:	4642      	mov	r2, r8
 800b344:	464b      	mov	r3, r9
 800b346:	1891      	adds	r1, r2, r2
 800b348:	60b9      	str	r1, [r7, #8]
 800b34a:	415b      	adcs	r3, r3
 800b34c:	60fb      	str	r3, [r7, #12]
 800b34e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b352:	4641      	mov	r1, r8
 800b354:	1851      	adds	r1, r2, r1
 800b356:	6039      	str	r1, [r7, #0]
 800b358:	4649      	mov	r1, r9
 800b35a:	414b      	adcs	r3, r1
 800b35c:	607b      	str	r3, [r7, #4]
 800b35e:	f04f 0200 	mov.w	r2, #0
 800b362:	f04f 0300 	mov.w	r3, #0
 800b366:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b36a:	4659      	mov	r1, fp
 800b36c:	00cb      	lsls	r3, r1, #3
 800b36e:	4651      	mov	r1, sl
 800b370:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b374:	4651      	mov	r1, sl
 800b376:	00ca      	lsls	r2, r1, #3
 800b378:	4610      	mov	r0, r2
 800b37a:	4619      	mov	r1, r3
 800b37c:	4603      	mov	r3, r0
 800b37e:	4642      	mov	r2, r8
 800b380:	189b      	adds	r3, r3, r2
 800b382:	66bb      	str	r3, [r7, #104]	; 0x68
 800b384:	464b      	mov	r3, r9
 800b386:	460a      	mov	r2, r1
 800b388:	eb42 0303 	adc.w	r3, r2, r3
 800b38c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b38e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	2200      	movs	r2, #0
 800b396:	663b      	str	r3, [r7, #96]	; 0x60
 800b398:	667a      	str	r2, [r7, #100]	; 0x64
 800b39a:	f04f 0200 	mov.w	r2, #0
 800b39e:	f04f 0300 	mov.w	r3, #0
 800b3a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b3a6:	4649      	mov	r1, r9
 800b3a8:	008b      	lsls	r3, r1, #2
 800b3aa:	4641      	mov	r1, r8
 800b3ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b3b0:	4641      	mov	r1, r8
 800b3b2:	008a      	lsls	r2, r1, #2
 800b3b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b3b8:	f7f5 fa4c 	bl	8000854 <__aeabi_uldivmod>
 800b3bc:	4602      	mov	r2, r0
 800b3be:	460b      	mov	r3, r1
 800b3c0:	4b0d      	ldr	r3, [pc, #52]	; (800b3f8 <UART_SetConfig+0x4e4>)
 800b3c2:	fba3 1302 	umull	r1, r3, r3, r2
 800b3c6:	095b      	lsrs	r3, r3, #5
 800b3c8:	2164      	movs	r1, #100	; 0x64
 800b3ca:	fb01 f303 	mul.w	r3, r1, r3
 800b3ce:	1ad3      	subs	r3, r2, r3
 800b3d0:	011b      	lsls	r3, r3, #4
 800b3d2:	3332      	adds	r3, #50	; 0x32
 800b3d4:	4a08      	ldr	r2, [pc, #32]	; (800b3f8 <UART_SetConfig+0x4e4>)
 800b3d6:	fba2 2303 	umull	r2, r3, r2, r3
 800b3da:	095b      	lsrs	r3, r3, #5
 800b3dc:	f003 020f 	and.w	r2, r3, #15
 800b3e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4422      	add	r2, r4
 800b3e8:	609a      	str	r2, [r3, #8]
}
 800b3ea:	bf00      	nop
 800b3ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b3f6:	bf00      	nop
 800b3f8:	51eb851f 	.word	0x51eb851f

0800b3fc <arm_sin_f32>:
 800b3fc:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800b478 <arm_sin_f32+0x7c>
 800b400:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b404:	ee20 7a07 	vmul.f32	s14, s0, s14
 800b408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b40c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800b410:	d42c      	bmi.n	800b46c <arm_sin_f32+0x70>
 800b412:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b416:	eddf 6a19 	vldr	s13, [pc, #100]	; 800b47c <arm_sin_f32+0x80>
 800b41a:	4a19      	ldr	r2, [pc, #100]	; (800b480 <arm_sin_f32+0x84>)
 800b41c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b420:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b424:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b428:	eef4 7ae6 	vcmpe.f32	s15, s13
 800b42c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b430:	bfa8      	it	ge
 800b432:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 800b436:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800b43a:	ee17 3a10 	vmov	r3, s14
 800b43e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b442:	ee07 3a10 	vmov	s14, r3
 800b446:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800b44a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800b44e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b452:	edd1 6a01 	vldr	s13, [r1, #4]
 800b456:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b45a:	ed91 0a00 	vldr	s0, [r1]
 800b45e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b462:	ee27 0a00 	vmul.f32	s0, s14, s0
 800b466:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b46a:	4770      	bx	lr
 800b46c:	ee17 3a90 	vmov	r3, s15
 800b470:	3b01      	subs	r3, #1
 800b472:	ee07 3a90 	vmov	s15, r3
 800b476:	e7cc      	b.n	800b412 <arm_sin_f32+0x16>
 800b478:	3e22f983 	.word	0x3e22f983
 800b47c:	44000000 	.word	0x44000000
 800b480:	0800c5c8 	.word	0x0800c5c8

0800b484 <atoi>:
 800b484:	220a      	movs	r2, #10
 800b486:	2100      	movs	r1, #0
 800b488:	f000 b8d6 	b.w	800b638 <strtol>

0800b48c <__errno>:
 800b48c:	4b01      	ldr	r3, [pc, #4]	; (800b494 <__errno+0x8>)
 800b48e:	6818      	ldr	r0, [r3, #0]
 800b490:	4770      	bx	lr
 800b492:	bf00      	nop
 800b494:	200003a0 	.word	0x200003a0

0800b498 <__libc_init_array>:
 800b498:	b570      	push	{r4, r5, r6, lr}
 800b49a:	4d0d      	ldr	r5, [pc, #52]	; (800b4d0 <__libc_init_array+0x38>)
 800b49c:	4c0d      	ldr	r4, [pc, #52]	; (800b4d4 <__libc_init_array+0x3c>)
 800b49e:	1b64      	subs	r4, r4, r5
 800b4a0:	10a4      	asrs	r4, r4, #2
 800b4a2:	2600      	movs	r6, #0
 800b4a4:	42a6      	cmp	r6, r4
 800b4a6:	d109      	bne.n	800b4bc <__libc_init_array+0x24>
 800b4a8:	4d0b      	ldr	r5, [pc, #44]	; (800b4d8 <__libc_init_array+0x40>)
 800b4aa:	4c0c      	ldr	r4, [pc, #48]	; (800b4dc <__libc_init_array+0x44>)
 800b4ac:	f000 f8ce 	bl	800b64c <_init>
 800b4b0:	1b64      	subs	r4, r4, r5
 800b4b2:	10a4      	asrs	r4, r4, #2
 800b4b4:	2600      	movs	r6, #0
 800b4b6:	42a6      	cmp	r6, r4
 800b4b8:	d105      	bne.n	800b4c6 <__libc_init_array+0x2e>
 800b4ba:	bd70      	pop	{r4, r5, r6, pc}
 800b4bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4c0:	4798      	blx	r3
 800b4c2:	3601      	adds	r6, #1
 800b4c4:	e7ee      	b.n	800b4a4 <__libc_init_array+0xc>
 800b4c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4ca:	4798      	blx	r3
 800b4cc:	3601      	adds	r6, #1
 800b4ce:	e7f2      	b.n	800b4b6 <__libc_init_array+0x1e>
 800b4d0:	0800ced8 	.word	0x0800ced8
 800b4d4:	0800ced8 	.word	0x0800ced8
 800b4d8:	0800ced8 	.word	0x0800ced8
 800b4dc:	0800cedc 	.word	0x0800cedc

0800b4e0 <memcpy>:
 800b4e0:	440a      	add	r2, r1
 800b4e2:	4291      	cmp	r1, r2
 800b4e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b4e8:	d100      	bne.n	800b4ec <memcpy+0xc>
 800b4ea:	4770      	bx	lr
 800b4ec:	b510      	push	{r4, lr}
 800b4ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4f6:	4291      	cmp	r1, r2
 800b4f8:	d1f9      	bne.n	800b4ee <memcpy+0xe>
 800b4fa:	bd10      	pop	{r4, pc}

0800b4fc <memset>:
 800b4fc:	4402      	add	r2, r0
 800b4fe:	4603      	mov	r3, r0
 800b500:	4293      	cmp	r3, r2
 800b502:	d100      	bne.n	800b506 <memset+0xa>
 800b504:	4770      	bx	lr
 800b506:	f803 1b01 	strb.w	r1, [r3], #1
 800b50a:	e7f9      	b.n	800b500 <memset+0x4>

0800b50c <strncmp>:
 800b50c:	b510      	push	{r4, lr}
 800b50e:	b17a      	cbz	r2, 800b530 <strncmp+0x24>
 800b510:	4603      	mov	r3, r0
 800b512:	3901      	subs	r1, #1
 800b514:	1884      	adds	r4, r0, r2
 800b516:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b51a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b51e:	4290      	cmp	r0, r2
 800b520:	d101      	bne.n	800b526 <strncmp+0x1a>
 800b522:	42a3      	cmp	r3, r4
 800b524:	d101      	bne.n	800b52a <strncmp+0x1e>
 800b526:	1a80      	subs	r0, r0, r2
 800b528:	bd10      	pop	{r4, pc}
 800b52a:	2800      	cmp	r0, #0
 800b52c:	d1f3      	bne.n	800b516 <strncmp+0xa>
 800b52e:	e7fa      	b.n	800b526 <strncmp+0x1a>
 800b530:	4610      	mov	r0, r2
 800b532:	e7f9      	b.n	800b528 <strncmp+0x1c>

0800b534 <_strtol_l.constprop.0>:
 800b534:	2b01      	cmp	r3, #1
 800b536:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b53a:	d001      	beq.n	800b540 <_strtol_l.constprop.0+0xc>
 800b53c:	2b24      	cmp	r3, #36	; 0x24
 800b53e:	d906      	bls.n	800b54e <_strtol_l.constprop.0+0x1a>
 800b540:	f7ff ffa4 	bl	800b48c <__errno>
 800b544:	2316      	movs	r3, #22
 800b546:	6003      	str	r3, [r0, #0]
 800b548:	2000      	movs	r0, #0
 800b54a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b54e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b634 <_strtol_l.constprop.0+0x100>
 800b552:	460d      	mov	r5, r1
 800b554:	462e      	mov	r6, r5
 800b556:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b55a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b55e:	f017 0708 	ands.w	r7, r7, #8
 800b562:	d1f7      	bne.n	800b554 <_strtol_l.constprop.0+0x20>
 800b564:	2c2d      	cmp	r4, #45	; 0x2d
 800b566:	d132      	bne.n	800b5ce <_strtol_l.constprop.0+0x9a>
 800b568:	782c      	ldrb	r4, [r5, #0]
 800b56a:	2701      	movs	r7, #1
 800b56c:	1cb5      	adds	r5, r6, #2
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d05b      	beq.n	800b62a <_strtol_l.constprop.0+0xf6>
 800b572:	2b10      	cmp	r3, #16
 800b574:	d109      	bne.n	800b58a <_strtol_l.constprop.0+0x56>
 800b576:	2c30      	cmp	r4, #48	; 0x30
 800b578:	d107      	bne.n	800b58a <_strtol_l.constprop.0+0x56>
 800b57a:	782c      	ldrb	r4, [r5, #0]
 800b57c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b580:	2c58      	cmp	r4, #88	; 0x58
 800b582:	d14d      	bne.n	800b620 <_strtol_l.constprop.0+0xec>
 800b584:	786c      	ldrb	r4, [r5, #1]
 800b586:	2310      	movs	r3, #16
 800b588:	3502      	adds	r5, #2
 800b58a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b58e:	f108 38ff 	add.w	r8, r8, #4294967295
 800b592:	f04f 0c00 	mov.w	ip, #0
 800b596:	fbb8 f9f3 	udiv	r9, r8, r3
 800b59a:	4666      	mov	r6, ip
 800b59c:	fb03 8a19 	mls	sl, r3, r9, r8
 800b5a0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b5a4:	f1be 0f09 	cmp.w	lr, #9
 800b5a8:	d816      	bhi.n	800b5d8 <_strtol_l.constprop.0+0xa4>
 800b5aa:	4674      	mov	r4, lr
 800b5ac:	42a3      	cmp	r3, r4
 800b5ae:	dd24      	ble.n	800b5fa <_strtol_l.constprop.0+0xc6>
 800b5b0:	f1bc 0f00 	cmp.w	ip, #0
 800b5b4:	db1e      	blt.n	800b5f4 <_strtol_l.constprop.0+0xc0>
 800b5b6:	45b1      	cmp	r9, r6
 800b5b8:	d31c      	bcc.n	800b5f4 <_strtol_l.constprop.0+0xc0>
 800b5ba:	d101      	bne.n	800b5c0 <_strtol_l.constprop.0+0x8c>
 800b5bc:	45a2      	cmp	sl, r4
 800b5be:	db19      	blt.n	800b5f4 <_strtol_l.constprop.0+0xc0>
 800b5c0:	fb06 4603 	mla	r6, r6, r3, r4
 800b5c4:	f04f 0c01 	mov.w	ip, #1
 800b5c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b5cc:	e7e8      	b.n	800b5a0 <_strtol_l.constprop.0+0x6c>
 800b5ce:	2c2b      	cmp	r4, #43	; 0x2b
 800b5d0:	bf04      	itt	eq
 800b5d2:	782c      	ldrbeq	r4, [r5, #0]
 800b5d4:	1cb5      	addeq	r5, r6, #2
 800b5d6:	e7ca      	b.n	800b56e <_strtol_l.constprop.0+0x3a>
 800b5d8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b5dc:	f1be 0f19 	cmp.w	lr, #25
 800b5e0:	d801      	bhi.n	800b5e6 <_strtol_l.constprop.0+0xb2>
 800b5e2:	3c37      	subs	r4, #55	; 0x37
 800b5e4:	e7e2      	b.n	800b5ac <_strtol_l.constprop.0+0x78>
 800b5e6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b5ea:	f1be 0f19 	cmp.w	lr, #25
 800b5ee:	d804      	bhi.n	800b5fa <_strtol_l.constprop.0+0xc6>
 800b5f0:	3c57      	subs	r4, #87	; 0x57
 800b5f2:	e7db      	b.n	800b5ac <_strtol_l.constprop.0+0x78>
 800b5f4:	f04f 3cff 	mov.w	ip, #4294967295
 800b5f8:	e7e6      	b.n	800b5c8 <_strtol_l.constprop.0+0x94>
 800b5fa:	f1bc 0f00 	cmp.w	ip, #0
 800b5fe:	da05      	bge.n	800b60c <_strtol_l.constprop.0+0xd8>
 800b600:	2322      	movs	r3, #34	; 0x22
 800b602:	6003      	str	r3, [r0, #0]
 800b604:	4646      	mov	r6, r8
 800b606:	b942      	cbnz	r2, 800b61a <_strtol_l.constprop.0+0xe6>
 800b608:	4630      	mov	r0, r6
 800b60a:	e79e      	b.n	800b54a <_strtol_l.constprop.0+0x16>
 800b60c:	b107      	cbz	r7, 800b610 <_strtol_l.constprop.0+0xdc>
 800b60e:	4276      	negs	r6, r6
 800b610:	2a00      	cmp	r2, #0
 800b612:	d0f9      	beq.n	800b608 <_strtol_l.constprop.0+0xd4>
 800b614:	f1bc 0f00 	cmp.w	ip, #0
 800b618:	d000      	beq.n	800b61c <_strtol_l.constprop.0+0xe8>
 800b61a:	1e69      	subs	r1, r5, #1
 800b61c:	6011      	str	r1, [r2, #0]
 800b61e:	e7f3      	b.n	800b608 <_strtol_l.constprop.0+0xd4>
 800b620:	2430      	movs	r4, #48	; 0x30
 800b622:	2b00      	cmp	r3, #0
 800b624:	d1b1      	bne.n	800b58a <_strtol_l.constprop.0+0x56>
 800b626:	2308      	movs	r3, #8
 800b628:	e7af      	b.n	800b58a <_strtol_l.constprop.0+0x56>
 800b62a:	2c30      	cmp	r4, #48	; 0x30
 800b62c:	d0a5      	beq.n	800b57a <_strtol_l.constprop.0+0x46>
 800b62e:	230a      	movs	r3, #10
 800b630:	e7ab      	b.n	800b58a <_strtol_l.constprop.0+0x56>
 800b632:	bf00      	nop
 800b634:	0800cdcd 	.word	0x0800cdcd

0800b638 <strtol>:
 800b638:	4613      	mov	r3, r2
 800b63a:	460a      	mov	r2, r1
 800b63c:	4601      	mov	r1, r0
 800b63e:	4802      	ldr	r0, [pc, #8]	; (800b648 <strtol+0x10>)
 800b640:	6800      	ldr	r0, [r0, #0]
 800b642:	f7ff bf77 	b.w	800b534 <_strtol_l.constprop.0>
 800b646:	bf00      	nop
 800b648:	200003a0 	.word	0x200003a0

0800b64c <_init>:
 800b64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b64e:	bf00      	nop
 800b650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b652:	bc08      	pop	{r3}
 800b654:	469e      	mov	lr, r3
 800b656:	4770      	bx	lr

0800b658 <_fini>:
 800b658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b65a:	bf00      	nop
 800b65c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b65e:	bc08      	pop	{r3}
 800b660:	469e      	mov	lr, r3
 800b662:	4770      	bx	lr
