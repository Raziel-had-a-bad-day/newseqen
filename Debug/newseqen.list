
newseqen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ad0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000104c  08009c68  08009c68  00019c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acb4  0800acb4  00020b48  2**0
                  CONTENTS
  4 .ARM          00000008  0800acb4  0800acb4  0001acb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acbc  0800acbc  00020b48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acbc  0800acbc  0001acbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acc0  0800acc0  0001acc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b48  20000000  0800acc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003b4c  20000b48  0800b80c  00020b48  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004694  0800b80c  00024694  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020b48  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013462  00000000  00000000  00020b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002488  00000000  00000000  00033fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  00036468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001030  00000000  00000000  000375a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018817  00000000  00000000  000385d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c06  00000000  00000000  00050de7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ead9  00000000  00000000  000659ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  001044c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b8c  00000000  00000000  00104588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000d8  00000000  00000000  00109114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000b48 	.word	0x20000b48
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009c50 	.word	0x08009c50

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000b4c 	.word	0x20000b4c
 80001d4:	08009c50 	.word	0x08009c50

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_dmul>:
 80001e8:	b570      	push	{r4, r5, r6, lr}
 80001ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001f6:	bf1d      	ittte	ne
 80001f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001fc:	ea94 0f0c 	teqne	r4, ip
 8000200:	ea95 0f0c 	teqne	r5, ip
 8000204:	f000 f8de 	bleq	80003c4 <__aeabi_dmul+0x1dc>
 8000208:	442c      	add	r4, r5
 800020a:	ea81 0603 	eor.w	r6, r1, r3
 800020e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000212:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000216:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021a:	bf18      	it	ne
 800021c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000228:	d038      	beq.n	800029c <__aeabi_dmul+0xb4>
 800022a:	fba0 ce02 	umull	ip, lr, r0, r2
 800022e:	f04f 0500 	mov.w	r5, #0
 8000232:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000236:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800023a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800023e:	f04f 0600 	mov.w	r6, #0
 8000242:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000246:	f09c 0f00 	teq	ip, #0
 800024a:	bf18      	it	ne
 800024c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000250:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000254:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000258:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800025c:	d204      	bcs.n	8000268 <__aeabi_dmul+0x80>
 800025e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000262:	416d      	adcs	r5, r5
 8000264:	eb46 0606 	adc.w	r6, r6, r6
 8000268:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800026c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000270:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000274:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000278:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800027c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000280:	bf88      	it	hi
 8000282:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000286:	d81e      	bhi.n	80002c6 <__aeabi_dmul+0xde>
 8000288:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a0:	ea46 0101 	orr.w	r1, r6, r1
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	ea81 0103 	eor.w	r1, r1, r3
 80002ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b0:	bfc2      	ittt	gt
 80002b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	popgt	{r4, r5, r6, pc}
 80002bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c0:	f04f 0e00 	mov.w	lr, #0
 80002c4:	3c01      	subs	r4, #1
 80002c6:	f300 80ab 	bgt.w	8000420 <__aeabi_dmul+0x238>
 80002ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ce:	bfde      	ittt	le
 80002d0:	2000      	movle	r0, #0
 80002d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002d6:	bd70      	pople	{r4, r5, r6, pc}
 80002d8:	f1c4 0400 	rsb	r4, r4, #0
 80002dc:	3c20      	subs	r4, #32
 80002de:	da35      	bge.n	800034c <__aeabi_dmul+0x164>
 80002e0:	340c      	adds	r4, #12
 80002e2:	dc1b      	bgt.n	800031c <__aeabi_dmul+0x134>
 80002e4:	f104 0414 	add.w	r4, r4, #20
 80002e8:	f1c4 0520 	rsb	r5, r4, #32
 80002ec:	fa00 f305 	lsl.w	r3, r0, r5
 80002f0:	fa20 f004 	lsr.w	r0, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea40 0002 	orr.w	r0, r0, r2
 80002fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000300:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000304:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000308:	fa21 f604 	lsr.w	r6, r1, r4
 800030c:	eb42 0106 	adc.w	r1, r2, r6
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f1c4 040c 	rsb	r4, r4, #12
 8000320:	f1c4 0520 	rsb	r5, r4, #32
 8000324:	fa00 f304 	lsl.w	r3, r0, r4
 8000328:	fa20 f005 	lsr.w	r0, r0, r5
 800032c:	fa01 f204 	lsl.w	r2, r1, r4
 8000330:	ea40 0002 	orr.w	r0, r0, r2
 8000334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000338:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 0520 	rsb	r5, r4, #32
 8000350:	fa00 f205 	lsl.w	r2, r0, r5
 8000354:	ea4e 0e02 	orr.w	lr, lr, r2
 8000358:	fa20 f304 	lsr.w	r3, r0, r4
 800035c:	fa01 f205 	lsl.w	r2, r1, r5
 8000360:	ea43 0302 	orr.w	r3, r3, r2
 8000364:	fa21 f004 	lsr.w	r0, r1, r4
 8000368:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800036c:	fa21 f204 	lsr.w	r2, r1, r4
 8000370:	ea20 0002 	bic.w	r0, r0, r2
 8000374:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800037c:	bf08      	it	eq
 800037e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f094 0f00 	teq	r4, #0
 8000388:	d10f      	bne.n	80003aa <__aeabi_dmul+0x1c2>
 800038a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800038e:	0040      	lsls	r0, r0, #1
 8000390:	eb41 0101 	adc.w	r1, r1, r1
 8000394:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3c01      	subeq	r4, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1a6>
 800039e:	ea41 0106 	orr.w	r1, r1, r6
 80003a2:	f095 0f00 	teq	r5, #0
 80003a6:	bf18      	it	ne
 80003a8:	4770      	bxne	lr
 80003aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ae:	0052      	lsls	r2, r2, #1
 80003b0:	eb43 0303 	adc.w	r3, r3, r3
 80003b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3d01      	subeq	r5, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1c6>
 80003be:	ea43 0306 	orr.w	r3, r3, r6
 80003c2:	4770      	bx	lr
 80003c4:	ea94 0f0c 	teq	r4, ip
 80003c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003cc:	bf18      	it	ne
 80003ce:	ea95 0f0c 	teqne	r5, ip
 80003d2:	d00c      	beq.n	80003ee <__aeabi_dmul+0x206>
 80003d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d8:	bf18      	it	ne
 80003da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003de:	d1d1      	bne.n	8000384 <__aeabi_dmul+0x19c>
 80003e0:	ea81 0103 	eor.w	r1, r1, r3
 80003e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd70      	pop	{r4, r5, r6, pc}
 80003ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f2:	bf06      	itte	eq
 80003f4:	4610      	moveq	r0, r2
 80003f6:	4619      	moveq	r1, r3
 80003f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fc:	d019      	beq.n	8000432 <__aeabi_dmul+0x24a>
 80003fe:	ea94 0f0c 	teq	r4, ip
 8000402:	d102      	bne.n	800040a <__aeabi_dmul+0x222>
 8000404:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000408:	d113      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800040a:	ea95 0f0c 	teq	r5, ip
 800040e:	d105      	bne.n	800041c <__aeabi_dmul+0x234>
 8000410:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000414:	bf1c      	itt	ne
 8000416:	4610      	movne	r0, r2
 8000418:	4619      	movne	r1, r3
 800041a:	d10a      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800041c:	ea81 0103 	eor.w	r1, r1, r3
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd70      	pop	{r4, r5, r6, pc}
 8000432:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000436:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800043a:	bd70      	pop	{r4, r5, r6, pc}

0800043c <__aeabi_drsub>:
 800043c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000440:	e002      	b.n	8000448 <__adddf3>
 8000442:	bf00      	nop

08000444 <__aeabi_dsub>:
 8000444:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000448 <__adddf3>:
 8000448:	b530      	push	{r4, r5, lr}
 800044a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800044e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	bf1f      	itttt	ne
 800045e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000462:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000466:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800046e:	f000 80e2 	beq.w	8000636 <__adddf3+0x1ee>
 8000472:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000476:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047a:	bfb8      	it	lt
 800047c:	426d      	neglt	r5, r5
 800047e:	dd0c      	ble.n	800049a <__adddf3+0x52>
 8000480:	442c      	add	r4, r5
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	ea82 0000 	eor.w	r0, r2, r0
 800048e:	ea83 0101 	eor.w	r1, r3, r1
 8000492:	ea80 0202 	eor.w	r2, r0, r2
 8000496:	ea81 0303 	eor.w	r3, r1, r3
 800049a:	2d36      	cmp	r5, #54	; 0x36
 800049c:	bf88      	it	hi
 800049e:	bd30      	pophi	{r4, r5, pc}
 80004a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x70>
 80004b2:	4240      	negs	r0, r0
 80004b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c4:	d002      	beq.n	80004cc <__adddf3+0x84>
 80004c6:	4252      	negs	r2, r2
 80004c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004cc:	ea94 0f05 	teq	r4, r5
 80004d0:	f000 80a7 	beq.w	8000622 <__adddf3+0x1da>
 80004d4:	f1a4 0401 	sub.w	r4, r4, #1
 80004d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004dc:	db0d      	blt.n	80004fa <__adddf3+0xb2>
 80004de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e2:	fa22 f205 	lsr.w	r2, r2, r5
 80004e6:	1880      	adds	r0, r0, r2
 80004e8:	f141 0100 	adc.w	r1, r1, #0
 80004ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f0:	1880      	adds	r0, r0, r2
 80004f2:	fa43 f305 	asr.w	r3, r3, r5
 80004f6:	4159      	adcs	r1, r3
 80004f8:	e00e      	b.n	8000518 <__adddf3+0xd0>
 80004fa:	f1a5 0520 	sub.w	r5, r5, #32
 80004fe:	f10e 0e20 	add.w	lr, lr, #32
 8000502:	2a01      	cmp	r2, #1
 8000504:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000508:	bf28      	it	cs
 800050a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	d507      	bpl.n	800052e <__adddf3+0xe6>
 800051e:	f04f 0e00 	mov.w	lr, #0
 8000522:	f1dc 0c00 	rsbs	ip, ip, #0
 8000526:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052a:	eb6e 0101 	sbc.w	r1, lr, r1
 800052e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000532:	d31b      	bcc.n	800056c <__adddf3+0x124>
 8000534:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000538:	d30c      	bcc.n	8000554 <__adddf3+0x10c>
 800053a:	0849      	lsrs	r1, r1, #1
 800053c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000540:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000544:	f104 0401 	add.w	r4, r4, #1
 8000548:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800054c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000550:	f080 809a 	bcs.w	8000688 <__adddf3+0x240>
 8000554:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000558:	bf08      	it	eq
 800055a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800055e:	f150 0000 	adcs.w	r0, r0, #0
 8000562:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000566:	ea41 0105 	orr.w	r1, r1, r5
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000570:	4140      	adcs	r0, r0
 8000572:	eb41 0101 	adc.w	r1, r1, r1
 8000576:	3c01      	subs	r4, #1
 8000578:	bf28      	it	cs
 800057a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800057e:	d2e9      	bcs.n	8000554 <__adddf3+0x10c>
 8000580:	f091 0f00 	teq	r1, #0
 8000584:	bf04      	itt	eq
 8000586:	4601      	moveq	r1, r0
 8000588:	2000      	moveq	r0, #0
 800058a:	fab1 f381 	clz	r3, r1
 800058e:	bf08      	it	eq
 8000590:	3320      	addeq	r3, #32
 8000592:	f1a3 030b 	sub.w	r3, r3, #11
 8000596:	f1b3 0220 	subs.w	r2, r3, #32
 800059a:	da0c      	bge.n	80005b6 <__adddf3+0x16e>
 800059c:	320c      	adds	r2, #12
 800059e:	dd08      	ble.n	80005b2 <__adddf3+0x16a>
 80005a0:	f102 0c14 	add.w	ip, r2, #20
 80005a4:	f1c2 020c 	rsb	r2, r2, #12
 80005a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ac:	fa21 f102 	lsr.w	r1, r1, r2
 80005b0:	e00c      	b.n	80005cc <__adddf3+0x184>
 80005b2:	f102 0214 	add.w	r2, r2, #20
 80005b6:	bfd8      	it	le
 80005b8:	f1c2 0c20 	rsble	ip, r2, #32
 80005bc:	fa01 f102 	lsl.w	r1, r1, r2
 80005c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c4:	bfdc      	itt	le
 80005c6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ca:	4090      	lslle	r0, r2
 80005cc:	1ae4      	subs	r4, r4, r3
 80005ce:	bfa2      	ittt	ge
 80005d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d4:	4329      	orrge	r1, r5
 80005d6:	bd30      	popge	{r4, r5, pc}
 80005d8:	ea6f 0404 	mvn.w	r4, r4
 80005dc:	3c1f      	subs	r4, #31
 80005de:	da1c      	bge.n	800061a <__adddf3+0x1d2>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc0e      	bgt.n	8000602 <__adddf3+0x1ba>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0220 	rsb	r2, r4, #32
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f302 	lsl.w	r3, r1, r2
 80005f4:	ea40 0003 	orr.w	r0, r0, r3
 80005f8:	fa21 f304 	lsr.w	r3, r1, r4
 80005fc:	ea45 0103 	orr.w	r1, r5, r3
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f1c4 040c 	rsb	r4, r4, #12
 8000606:	f1c4 0220 	rsb	r2, r4, #32
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 f304 	lsl.w	r3, r1, r4
 8000612:	ea40 0003 	orr.w	r0, r0, r3
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	fa21 f004 	lsr.w	r0, r1, r4
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f094 0f00 	teq	r4, #0
 8000626:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800062a:	bf06      	itte	eq
 800062c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000630:	3401      	addeq	r4, #1
 8000632:	3d01      	subne	r5, #1
 8000634:	e74e      	b.n	80004d4 <__adddf3+0x8c>
 8000636:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063a:	bf18      	it	ne
 800063c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000640:	d029      	beq.n	8000696 <__adddf3+0x24e>
 8000642:	ea94 0f05 	teq	r4, r5
 8000646:	bf08      	it	eq
 8000648:	ea90 0f02 	teqeq	r0, r2
 800064c:	d005      	beq.n	800065a <__adddf3+0x212>
 800064e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000652:	bf04      	itt	eq
 8000654:	4619      	moveq	r1, r3
 8000656:	4610      	moveq	r0, r2
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	ea91 0f03 	teq	r1, r3
 800065e:	bf1e      	ittt	ne
 8000660:	2100      	movne	r1, #0
 8000662:	2000      	movne	r0, #0
 8000664:	bd30      	popne	{r4, r5, pc}
 8000666:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066a:	d105      	bne.n	8000678 <__adddf3+0x230>
 800066c:	0040      	lsls	r0, r0, #1
 800066e:	4149      	adcs	r1, r1
 8000670:	bf28      	it	cs
 8000672:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd30      	pop	{r4, r5, pc}
 8000678:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800067c:	bf3c      	itt	cc
 800067e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000682:	bd30      	popcc	{r4, r5, pc}
 8000684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000688:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800068c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000690:	f04f 0000 	mov.w	r0, #0
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069a:	bf1a      	itte	ne
 800069c:	4619      	movne	r1, r3
 800069e:	4610      	movne	r0, r2
 80006a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a4:	bf1c      	itt	ne
 80006a6:	460b      	movne	r3, r1
 80006a8:	4602      	movne	r2, r0
 80006aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ae:	bf06      	itte	eq
 80006b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b4:	ea91 0f03 	teqeq	r1, r3
 80006b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	bf00      	nop

080006c0 <__aeabi_ui2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f04f 0500 	mov.w	r5, #0
 80006d8:	f04f 0100 	mov.w	r1, #0
 80006dc:	e750      	b.n	8000580 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_i2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f8:	bf48      	it	mi
 80006fa:	4240      	negmi	r0, r0
 80006fc:	f04f 0100 	mov.w	r1, #0
 8000700:	e73e      	b.n	8000580 <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_f2d>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000712:	bf1f      	itttt	ne
 8000714:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000718:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800071c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000720:	4770      	bxne	lr
 8000722:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000726:	bf08      	it	eq
 8000728:	4770      	bxeq	lr
 800072a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800072e:	bf04      	itt	eq
 8000730:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000734:	4770      	bxeq	lr
 8000736:	b530      	push	{r4, r5, lr}
 8000738:	f44f 7460 	mov.w	r4, #896	; 0x380
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	e71c      	b.n	8000580 <__adddf3+0x138>
 8000746:	bf00      	nop

08000748 <__aeabi_ul2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f04f 0500 	mov.w	r5, #0
 8000756:	e00a      	b.n	800076e <__aeabi_l2d+0x16>

08000758 <__aeabi_l2d>:
 8000758:	ea50 0201 	orrs.w	r2, r0, r1
 800075c:	bf08      	it	eq
 800075e:	4770      	bxeq	lr
 8000760:	b530      	push	{r4, r5, lr}
 8000762:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000766:	d502      	bpl.n	800076e <__aeabi_l2d+0x16>
 8000768:	4240      	negs	r0, r0
 800076a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800076e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000772:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000776:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077a:	f43f aed8 	beq.w	800052e <__adddf3+0xe6>
 800077e:	f04f 0203 	mov.w	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000796:	f1c2 0320 	rsb	r3, r2, #32
 800079a:	fa00 fc03 	lsl.w	ip, r0, r3
 800079e:	fa20 f002 	lsr.w	r0, r0, r2
 80007a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007a6:	ea40 000e 	orr.w	r0, r0, lr
 80007aa:	fa21 f102 	lsr.w	r1, r1, r2
 80007ae:	4414      	add	r4, r2
 80007b0:	e6bd      	b.n	800052e <__adddf3+0xe6>
 80007b2:	bf00      	nop

080007b4 <__aeabi_d2f>:
 80007b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007bc:	bf24      	itt	cs
 80007be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007c6:	d90d      	bls.n	80007e4 <__aeabi_d2f+0x30>
 80007c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007dc:	bf08      	it	eq
 80007de:	f020 0001 	biceq.w	r0, r0, #1
 80007e2:	4770      	bx	lr
 80007e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007e8:	d121      	bne.n	800082e <__aeabi_d2f+0x7a>
 80007ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ee:	bfbc      	itt	lt
 80007f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007f4:	4770      	bxlt	lr
 80007f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007fe:	f1c2 0218 	rsb	r2, r2, #24
 8000802:	f1c2 0c20 	rsb	ip, r2, #32
 8000806:	fa10 f30c 	lsls.w	r3, r0, ip
 800080a:	fa20 f002 	lsr.w	r0, r0, r2
 800080e:	bf18      	it	ne
 8000810:	f040 0001 	orrne.w	r0, r0, #1
 8000814:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000818:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800081c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000820:	ea40 000c 	orr.w	r0, r0, ip
 8000824:	fa23 f302 	lsr.w	r3, r3, r2
 8000828:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800082c:	e7cc      	b.n	80007c8 <__aeabi_d2f+0x14>
 800082e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000832:	d107      	bne.n	8000844 <__aeabi_d2f+0x90>
 8000834:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000838:	bf1e      	ittt	ne
 800083a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800083e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000842:	4770      	bxne	lr
 8000844:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000848:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800084c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b974 	b.w	8000b54 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468e      	mov	lr, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	d14d      	bne.n	800092e <__udivmoddi4+0xaa>
 8000892:	428a      	cmp	r2, r1
 8000894:	4694      	mov	ip, r2
 8000896:	d969      	bls.n	800096c <__udivmoddi4+0xe8>
 8000898:	fab2 f282 	clz	r2, r2
 800089c:	b152      	cbz	r2, 80008b4 <__udivmoddi4+0x30>
 800089e:	fa01 f302 	lsl.w	r3, r1, r2
 80008a2:	f1c2 0120 	rsb	r1, r2, #32
 80008a6:	fa20 f101 	lsr.w	r1, r0, r1
 80008aa:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ae:	ea41 0e03 	orr.w	lr, r1, r3
 80008b2:	4094      	lsls	r4, r2
 80008b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008b8:	0c21      	lsrs	r1, r4, #16
 80008ba:	fbbe f6f8 	udiv	r6, lr, r8
 80008be:	fa1f f78c 	uxth.w	r7, ip
 80008c2:	fb08 e316 	mls	r3, r8, r6, lr
 80008c6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008ca:	fb06 f107 	mul.w	r1, r6, r7
 80008ce:	4299      	cmp	r1, r3
 80008d0:	d90a      	bls.n	80008e8 <__udivmoddi4+0x64>
 80008d2:	eb1c 0303 	adds.w	r3, ip, r3
 80008d6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008da:	f080 811f 	bcs.w	8000b1c <__udivmoddi4+0x298>
 80008de:	4299      	cmp	r1, r3
 80008e0:	f240 811c 	bls.w	8000b1c <__udivmoddi4+0x298>
 80008e4:	3e02      	subs	r6, #2
 80008e6:	4463      	add	r3, ip
 80008e8:	1a5b      	subs	r3, r3, r1
 80008ea:	b2a4      	uxth	r4, r4
 80008ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80008f0:	fb08 3310 	mls	r3, r8, r0, r3
 80008f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f8:	fb00 f707 	mul.w	r7, r0, r7
 80008fc:	42a7      	cmp	r7, r4
 80008fe:	d90a      	bls.n	8000916 <__udivmoddi4+0x92>
 8000900:	eb1c 0404 	adds.w	r4, ip, r4
 8000904:	f100 33ff 	add.w	r3, r0, #4294967295
 8000908:	f080 810a 	bcs.w	8000b20 <__udivmoddi4+0x29c>
 800090c:	42a7      	cmp	r7, r4
 800090e:	f240 8107 	bls.w	8000b20 <__udivmoddi4+0x29c>
 8000912:	4464      	add	r4, ip
 8000914:	3802      	subs	r0, #2
 8000916:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800091a:	1be4      	subs	r4, r4, r7
 800091c:	2600      	movs	r6, #0
 800091e:	b11d      	cbz	r5, 8000928 <__udivmoddi4+0xa4>
 8000920:	40d4      	lsrs	r4, r2
 8000922:	2300      	movs	r3, #0
 8000924:	e9c5 4300 	strd	r4, r3, [r5]
 8000928:	4631      	mov	r1, r6
 800092a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092e:	428b      	cmp	r3, r1
 8000930:	d909      	bls.n	8000946 <__udivmoddi4+0xc2>
 8000932:	2d00      	cmp	r5, #0
 8000934:	f000 80ef 	beq.w	8000b16 <__udivmoddi4+0x292>
 8000938:	2600      	movs	r6, #0
 800093a:	e9c5 0100 	strd	r0, r1, [r5]
 800093e:	4630      	mov	r0, r6
 8000940:	4631      	mov	r1, r6
 8000942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000946:	fab3 f683 	clz	r6, r3
 800094a:	2e00      	cmp	r6, #0
 800094c:	d14a      	bne.n	80009e4 <__udivmoddi4+0x160>
 800094e:	428b      	cmp	r3, r1
 8000950:	d302      	bcc.n	8000958 <__udivmoddi4+0xd4>
 8000952:	4282      	cmp	r2, r0
 8000954:	f200 80f9 	bhi.w	8000b4a <__udivmoddi4+0x2c6>
 8000958:	1a84      	subs	r4, r0, r2
 800095a:	eb61 0303 	sbc.w	r3, r1, r3
 800095e:	2001      	movs	r0, #1
 8000960:	469e      	mov	lr, r3
 8000962:	2d00      	cmp	r5, #0
 8000964:	d0e0      	beq.n	8000928 <__udivmoddi4+0xa4>
 8000966:	e9c5 4e00 	strd	r4, lr, [r5]
 800096a:	e7dd      	b.n	8000928 <__udivmoddi4+0xa4>
 800096c:	b902      	cbnz	r2, 8000970 <__udivmoddi4+0xec>
 800096e:	deff      	udf	#255	; 0xff
 8000970:	fab2 f282 	clz	r2, r2
 8000974:	2a00      	cmp	r2, #0
 8000976:	f040 8092 	bne.w	8000a9e <__udivmoddi4+0x21a>
 800097a:	eba1 010c 	sub.w	r1, r1, ip
 800097e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000982:	fa1f fe8c 	uxth.w	lr, ip
 8000986:	2601      	movs	r6, #1
 8000988:	0c20      	lsrs	r0, r4, #16
 800098a:	fbb1 f3f7 	udiv	r3, r1, r7
 800098e:	fb07 1113 	mls	r1, r7, r3, r1
 8000992:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000996:	fb0e f003 	mul.w	r0, lr, r3
 800099a:	4288      	cmp	r0, r1
 800099c:	d908      	bls.n	80009b0 <__udivmoddi4+0x12c>
 800099e:	eb1c 0101 	adds.w	r1, ip, r1
 80009a2:	f103 38ff 	add.w	r8, r3, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0x12a>
 80009a8:	4288      	cmp	r0, r1
 80009aa:	f200 80cb 	bhi.w	8000b44 <__udivmoddi4+0x2c0>
 80009ae:	4643      	mov	r3, r8
 80009b0:	1a09      	subs	r1, r1, r0
 80009b2:	b2a4      	uxth	r4, r4
 80009b4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009b8:	fb07 1110 	mls	r1, r7, r0, r1
 80009bc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009c0:	fb0e fe00 	mul.w	lr, lr, r0
 80009c4:	45a6      	cmp	lr, r4
 80009c6:	d908      	bls.n	80009da <__udivmoddi4+0x156>
 80009c8:	eb1c 0404 	adds.w	r4, ip, r4
 80009cc:	f100 31ff 	add.w	r1, r0, #4294967295
 80009d0:	d202      	bcs.n	80009d8 <__udivmoddi4+0x154>
 80009d2:	45a6      	cmp	lr, r4
 80009d4:	f200 80bb 	bhi.w	8000b4e <__udivmoddi4+0x2ca>
 80009d8:	4608      	mov	r0, r1
 80009da:	eba4 040e 	sub.w	r4, r4, lr
 80009de:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009e2:	e79c      	b.n	800091e <__udivmoddi4+0x9a>
 80009e4:	f1c6 0720 	rsb	r7, r6, #32
 80009e8:	40b3      	lsls	r3, r6
 80009ea:	fa22 fc07 	lsr.w	ip, r2, r7
 80009ee:	ea4c 0c03 	orr.w	ip, ip, r3
 80009f2:	fa20 f407 	lsr.w	r4, r0, r7
 80009f6:	fa01 f306 	lsl.w	r3, r1, r6
 80009fa:	431c      	orrs	r4, r3
 80009fc:	40f9      	lsrs	r1, r7
 80009fe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a02:	fa00 f306 	lsl.w	r3, r0, r6
 8000a06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a0a:	0c20      	lsrs	r0, r4, #16
 8000a0c:	fa1f fe8c 	uxth.w	lr, ip
 8000a10:	fb09 1118 	mls	r1, r9, r8, r1
 8000a14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a18:	fb08 f00e 	mul.w	r0, r8, lr
 8000a1c:	4288      	cmp	r0, r1
 8000a1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a22:	d90b      	bls.n	8000a3c <__udivmoddi4+0x1b8>
 8000a24:	eb1c 0101 	adds.w	r1, ip, r1
 8000a28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a2c:	f080 8088 	bcs.w	8000b40 <__udivmoddi4+0x2bc>
 8000a30:	4288      	cmp	r0, r1
 8000a32:	f240 8085 	bls.w	8000b40 <__udivmoddi4+0x2bc>
 8000a36:	f1a8 0802 	sub.w	r8, r8, #2
 8000a3a:	4461      	add	r1, ip
 8000a3c:	1a09      	subs	r1, r1, r0
 8000a3e:	b2a4      	uxth	r4, r4
 8000a40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a44:	fb09 1110 	mls	r1, r9, r0, r1
 8000a48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a50:	458e      	cmp	lr, r1
 8000a52:	d908      	bls.n	8000a66 <__udivmoddi4+0x1e2>
 8000a54:	eb1c 0101 	adds.w	r1, ip, r1
 8000a58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a5c:	d26c      	bcs.n	8000b38 <__udivmoddi4+0x2b4>
 8000a5e:	458e      	cmp	lr, r1
 8000a60:	d96a      	bls.n	8000b38 <__udivmoddi4+0x2b4>
 8000a62:	3802      	subs	r0, #2
 8000a64:	4461      	add	r1, ip
 8000a66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a6e:	eba1 010e 	sub.w	r1, r1, lr
 8000a72:	42a1      	cmp	r1, r4
 8000a74:	46c8      	mov	r8, r9
 8000a76:	46a6      	mov	lr, r4
 8000a78:	d356      	bcc.n	8000b28 <__udivmoddi4+0x2a4>
 8000a7a:	d053      	beq.n	8000b24 <__udivmoddi4+0x2a0>
 8000a7c:	b15d      	cbz	r5, 8000a96 <__udivmoddi4+0x212>
 8000a7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a82:	eb61 010e 	sbc.w	r1, r1, lr
 8000a86:	fa01 f707 	lsl.w	r7, r1, r7
 8000a8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a8e:	40f1      	lsrs	r1, r6
 8000a90:	431f      	orrs	r7, r3
 8000a92:	e9c5 7100 	strd	r7, r1, [r5]
 8000a96:	2600      	movs	r6, #0
 8000a98:	4631      	mov	r1, r6
 8000a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9e:	f1c2 0320 	rsb	r3, r2, #32
 8000aa2:	40d8      	lsrs	r0, r3
 8000aa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000aac:	4091      	lsls	r1, r2
 8000aae:	4301      	orrs	r1, r0
 8000ab0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab4:	fa1f fe8c 	uxth.w	lr, ip
 8000ab8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000abc:	fb07 3610 	mls	r6, r7, r0, r3
 8000ac0:	0c0b      	lsrs	r3, r1, #16
 8000ac2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ac6:	fb00 f60e 	mul.w	r6, r0, lr
 8000aca:	429e      	cmp	r6, r3
 8000acc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ad0:	d908      	bls.n	8000ae4 <__udivmoddi4+0x260>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ada:	d22f      	bcs.n	8000b3c <__udivmoddi4+0x2b8>
 8000adc:	429e      	cmp	r6, r3
 8000ade:	d92d      	bls.n	8000b3c <__udivmoddi4+0x2b8>
 8000ae0:	3802      	subs	r0, #2
 8000ae2:	4463      	add	r3, ip
 8000ae4:	1b9b      	subs	r3, r3, r6
 8000ae6:	b289      	uxth	r1, r1
 8000ae8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000aec:	fb07 3316 	mls	r3, r7, r6, r3
 8000af0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000af4:	fb06 f30e 	mul.w	r3, r6, lr
 8000af8:	428b      	cmp	r3, r1
 8000afa:	d908      	bls.n	8000b0e <__udivmoddi4+0x28a>
 8000afc:	eb1c 0101 	adds.w	r1, ip, r1
 8000b00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b04:	d216      	bcs.n	8000b34 <__udivmoddi4+0x2b0>
 8000b06:	428b      	cmp	r3, r1
 8000b08:	d914      	bls.n	8000b34 <__udivmoddi4+0x2b0>
 8000b0a:	3e02      	subs	r6, #2
 8000b0c:	4461      	add	r1, ip
 8000b0e:	1ac9      	subs	r1, r1, r3
 8000b10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b14:	e738      	b.n	8000988 <__udivmoddi4+0x104>
 8000b16:	462e      	mov	r6, r5
 8000b18:	4628      	mov	r0, r5
 8000b1a:	e705      	b.n	8000928 <__udivmoddi4+0xa4>
 8000b1c:	4606      	mov	r6, r0
 8000b1e:	e6e3      	b.n	80008e8 <__udivmoddi4+0x64>
 8000b20:	4618      	mov	r0, r3
 8000b22:	e6f8      	b.n	8000916 <__udivmoddi4+0x92>
 8000b24:	454b      	cmp	r3, r9
 8000b26:	d2a9      	bcs.n	8000a7c <__udivmoddi4+0x1f8>
 8000b28:	ebb9 0802 	subs.w	r8, r9, r2
 8000b2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b30:	3801      	subs	r0, #1
 8000b32:	e7a3      	b.n	8000a7c <__udivmoddi4+0x1f8>
 8000b34:	4646      	mov	r6, r8
 8000b36:	e7ea      	b.n	8000b0e <__udivmoddi4+0x28a>
 8000b38:	4620      	mov	r0, r4
 8000b3a:	e794      	b.n	8000a66 <__udivmoddi4+0x1e2>
 8000b3c:	4640      	mov	r0, r8
 8000b3e:	e7d1      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b40:	46d0      	mov	r8, sl
 8000b42:	e77b      	b.n	8000a3c <__udivmoddi4+0x1b8>
 8000b44:	3b02      	subs	r3, #2
 8000b46:	4461      	add	r1, ip
 8000b48:	e732      	b.n	80009b0 <__udivmoddi4+0x12c>
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	e709      	b.n	8000962 <__udivmoddi4+0xde>
 8000b4e:	4464      	add	r4, ip
 8000b50:	3802      	subs	r0, #2
 8000b52:	e742      	b.n	80009da <__udivmoddi4+0x156>

08000b54 <__aeabi_idiv0>:
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <menu_vars>:
uint8_t*  menu_vars(char* menu_string,  uint8_t var_index   ){ // in comes name and index , out goes variable reference pointer
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	70fb      	strb	r3, [r7, #3]


	char menu_string2[8];
	var_index=var_index&15;    //set var index ie  LFO[1].rate
 8000b64:	78fb      	ldrb	r3, [r7, #3]
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	70fb      	strb	r3, [r7, #3]
	uint8_t menu_countr=0; //  menu vars
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	75fb      	strb	r3, [r7, #23]
	uint8_t *menu_vars_var1=NULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	613b      	str	r3, [r7, #16]

	for (i = 0; i < 28; i++) {      // find menu location
 8000b74:	4b96      	ldr	r3, [pc, #600]	; (8000dd0 <menu_vars+0x278>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	801a      	strh	r2, [r3, #0]
 8000b7a:	e01d      	b.n	8000bb8 <menu_vars+0x60>

		memcpy(menu_string2, menu_titles_final[i], 8);  // copy title list
 8000b7c:	4b94      	ldr	r3, [pc, #592]	; (8000dd0 <menu_vars+0x278>)
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b94      	ldr	r3, [pc, #592]	; (8000dd4 <menu_vars+0x27c>)
 8000b84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b88:	f107 0308 	add.w	r3, r7, #8
 8000b8c:	6810      	ldr	r0, [r2, #0]
 8000b8e:	6851      	ldr	r1, [r2, #4]
 8000b90:	c303      	stmia	r3!, {r0, r1}
		if ((strncmp(menu_string, menu_string2, 8)) == 0) {
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	2208      	movs	r2, #8
 8000b98:	4619      	mov	r1, r3
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f008 ffb8 	bl	8009b10 <strncmp>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d102      	bne.n	8000bac <menu_vars+0x54>
			menu_countr = i;
 8000ba6:	4b8a      	ldr	r3, [pc, #552]	; (8000dd0 <menu_vars+0x278>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i < 28; i++) {      // find menu location
 8000bac:	4b88      	ldr	r3, [pc, #544]	; (8000dd0 <menu_vars+0x278>)
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	4b86      	ldr	r3, [pc, #536]	; (8000dd0 <menu_vars+0x278>)
 8000bb6:	801a      	strh	r2, [r3, #0]
 8000bb8:	4b85      	ldr	r3, [pc, #532]	; (8000dd0 <menu_vars+0x278>)
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	2b1b      	cmp	r3, #27
 8000bbe:	d9dd      	bls.n	8000b7c <menu_vars+0x24>

		}
	}

	if (menu_vars_index_limit[menu_countr]<var_index) var_index=menu_vars_index_limit[menu_countr];   // make sure it stays right
 8000bc0:	7dfb      	ldrb	r3, [r7, #23]
 8000bc2:	4a85      	ldr	r2, [pc, #532]	; (8000dd8 <menu_vars+0x280>)
 8000bc4:	5cd3      	ldrb	r3, [r2, r3]
 8000bc6:	78fa      	ldrb	r2, [r7, #3]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d903      	bls.n	8000bd4 <menu_vars+0x7c>
 8000bcc:	7dfb      	ldrb	r3, [r7, #23]
 8000bce:	4a82      	ldr	r2, [pc, #520]	; (8000dd8 <menu_vars+0x280>)
 8000bd0:	5cd3      	ldrb	r3, [r2, r3]
 8000bd2:	70fb      	strb	r3, [r7, #3]

	switch(menu_countr){
 8000bd4:	7dfb      	ldrb	r3, [r7, #23]
 8000bd6:	2b1b      	cmp	r3, #27
 8000bd8:	f200 80f1 	bhi.w	8000dbe <menu_vars+0x266>
 8000bdc:	a201      	add	r2, pc, #4	; (adr r2, 8000be4 <menu_vars+0x8c>)
 8000bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be2:	bf00      	nop
 8000be4:	08000c55 	.word	0x08000c55
 8000be8:	08000c5b 	.word	0x08000c5b
 8000bec:	08000c67 	.word	0x08000c67
 8000bf0:	08000c75 	.word	0x08000c75
 8000bf4:	08000c83 	.word	0x08000c83
 8000bf8:	08000c91 	.word	0x08000c91
 8000bfc:	08000c9f 	.word	0x08000c9f
 8000c00:	08000ca5 	.word	0x08000ca5
 8000c04:	08000cb7 	.word	0x08000cb7
 8000c08:	08000ccb 	.word	0x08000ccb
 8000c0c:	08000cdf 	.word	0x08000cdf
 8000c10:	08000cf3 	.word	0x08000cf3
 8000c14:	08000cf9 	.word	0x08000cf9
 8000c18:	08000d05 	.word	0x08000d05
 8000c1c:	08000d13 	.word	0x08000d13
 8000c20:	08000d21 	.word	0x08000d21
 8000c24:	08000d2f 	.word	0x08000d2f
 8000c28:	08000d3d 	.word	0x08000d3d
 8000c2c:	08000d4b 	.word	0x08000d4b
 8000c30:	08000d59 	.word	0x08000d59
 8000c34:	08000d67 	.word	0x08000d67
 8000c38:	08000d77 	.word	0x08000d77
 8000c3c:	08000d7d 	.word	0x08000d7d
 8000c40:	08000d83 	.word	0x08000d83
 8000c44:	08000d89 	.word	0x08000d89
 8000c48:	08000d95 	.word	0x08000d95
 8000c4c:	08000da3 	.word	0x08000da3
 8000c50:	08000db1 	.word	0x08000db1
	case 0:     menu_vars_var1= NULL; break;
 8000c54:	2300      	movs	r3, #0
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	e0b4      	b.n	8000dc4 <menu_vars+0x26c>
	case 1:     menu_vars_var1= &LFO[var_index].rate   ; break;
 8000c5a:	78fb      	ldrb	r3, [r7, #3]
 8000c5c:	015b      	lsls	r3, r3, #5
 8000c5e:	4a5f      	ldr	r2, [pc, #380]	; (8000ddc <menu_vars+0x284>)
 8000c60:	4413      	add	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	e0ae      	b.n	8000dc4 <menu_vars+0x26c>
	case 2:     menu_vars_var1= &LFO[var_index].depth    ; break;
 8000c66:	78fb      	ldrb	r3, [r7, #3]
 8000c68:	015b      	lsls	r3, r3, #5
 8000c6a:	4a5c      	ldr	r2, [pc, #368]	; (8000ddc <menu_vars+0x284>)
 8000c6c:	4413      	add	r3, r2
 8000c6e:	3301      	adds	r3, #1
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	e0a7      	b.n	8000dc4 <menu_vars+0x26c>
	case 3:     menu_vars_var1= &LFO[var_index].gain    ; break;
 8000c74:	78fb      	ldrb	r3, [r7, #3]
 8000c76:	015b      	lsls	r3, r3, #5
 8000c78:	4a58      	ldr	r2, [pc, #352]	; (8000ddc <menu_vars+0x284>)
 8000c7a:	4413      	add	r3, r2
 8000c7c:	3302      	adds	r3, #2
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	e0a0      	b.n	8000dc4 <menu_vars+0x26c>
	case 4:     menu_vars_var1= &LFO[var_index].offset    ; break;
 8000c82:	78fb      	ldrb	r3, [r7, #3]
 8000c84:	015b      	lsls	r3, r3, #5
 8000c86:	4a55      	ldr	r2, [pc, #340]	; (8000ddc <menu_vars+0x284>)
 8000c88:	4413      	add	r3, r2
 8000c8a:	3303      	adds	r3, #3
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	e099      	b.n	8000dc4 <menu_vars+0x26c>
	case 5:     menu_vars_var1= &LFO[var_index].target    ; break;
 8000c90:	78fb      	ldrb	r3, [r7, #3]
 8000c92:	015b      	lsls	r3, r3, #5
 8000c94:	4a51      	ldr	r2, [pc, #324]	; (8000ddc <menu_vars+0x284>)
 8000c96:	4413      	add	r3, r2
 8000c98:	3304      	adds	r3, #4
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	e092      	b.n	8000dc4 <menu_vars+0x26c>
	case 6:     menu_vars_var1= NULL   ; break;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	e08f      	b.n	8000dc4 <menu_vars+0x26c>
	case 7:     menu_vars_var1= &ADSR[var_index].attack    ; break;
 8000ca4:	78fb      	ldrb	r3, [r7, #3]
 8000ca6:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000caa:	fb02 f303 	mul.w	r3, r2, r3
 8000cae:	4a4c      	ldr	r2, [pc, #304]	; (8000de0 <menu_vars+0x288>)
 8000cb0:	4413      	add	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	e086      	b.n	8000dc4 <menu_vars+0x26c>
	case 8:     menu_vars_var1= &ADSR[var_index].decay    ; break;
 8000cb6:	78fb      	ldrb	r3, [r7, #3]
 8000cb8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000cbc:	fb02 f303 	mul.w	r3, r2, r3
 8000cc0:	4a47      	ldr	r2, [pc, #284]	; (8000de0 <menu_vars+0x288>)
 8000cc2:	4413      	add	r3, r2
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	e07c      	b.n	8000dc4 <menu_vars+0x26c>
	case 9:     menu_vars_var1= &ADSR[var_index].sustain    ; break;
 8000cca:	78fb      	ldrb	r3, [r7, #3]
 8000ccc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000cd0:	fb02 f303 	mul.w	r3, r2, r3
 8000cd4:	4a42      	ldr	r2, [pc, #264]	; (8000de0 <menu_vars+0x288>)
 8000cd6:	4413      	add	r3, r2
 8000cd8:	3302      	adds	r3, #2
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	e072      	b.n	8000dc4 <menu_vars+0x26c>
	case 10:     menu_vars_var1= &ADSR[var_index].release    ; break;
 8000cde:	78fb      	ldrb	r3, [r7, #3]
 8000ce0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000ce4:	fb02 f303 	mul.w	r3, r2, r3
 8000ce8:	4a3d      	ldr	r2, [pc, #244]	; (8000de0 <menu_vars+0x288>)
 8000cea:	4413      	add	r3, r2
 8000cec:	3303      	adds	r3, #3
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	e068      	b.n	8000dc4 <menu_vars+0x26c>
	case 11:     menu_vars_var1= NULL  ; break;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	e065      	b.n	8000dc4 <menu_vars+0x26c>
	case 12:     menu_vars_var1= &note[var_index].osc    ; break;
 8000cf8:	78fb      	ldrb	r3, [r7, #3]
 8000cfa:	011b      	lsls	r3, r3, #4
 8000cfc:	4a39      	ldr	r2, [pc, #228]	; (8000de4 <menu_vars+0x28c>)
 8000cfe:	4413      	add	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	e05f      	b.n	8000dc4 <menu_vars+0x26c>
	case 13:     menu_vars_var1= &note[var_index].osc2    ; break;
 8000d04:	78fb      	ldrb	r3, [r7, #3]
 8000d06:	011b      	lsls	r3, r3, #4
 8000d08:	4a36      	ldr	r2, [pc, #216]	; (8000de4 <menu_vars+0x28c>)
 8000d0a:	4413      	add	r3, r2
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	e058      	b.n	8000dc4 <menu_vars+0x26c>
	case 14:     menu_vars_var1= &note[var_index].pitch    ; break;
 8000d12:	78fb      	ldrb	r3, [r7, #3]
 8000d14:	011b      	lsls	r3, r3, #4
 8000d16:	4a33      	ldr	r2, [pc, #204]	; (8000de4 <menu_vars+0x28c>)
 8000d18:	4413      	add	r3, r2
 8000d1a:	3302      	adds	r3, #2
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	e051      	b.n	8000dc4 <menu_vars+0x26c>
	case 15:     menu_vars_var1= &note[var_index].duration    ; break;
 8000d20:	78fb      	ldrb	r3, [r7, #3]
 8000d22:	011b      	lsls	r3, r3, #4
 8000d24:	4a2f      	ldr	r2, [pc, #188]	; (8000de4 <menu_vars+0x28c>)
 8000d26:	4413      	add	r3, r2
 8000d28:	3303      	adds	r3, #3
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	e04a      	b.n	8000dc4 <menu_vars+0x26c>
	case 16:     menu_vars_var1= &note[var_index].position    ; break;
 8000d2e:	78fb      	ldrb	r3, [r7, #3]
 8000d30:	011b      	lsls	r3, r3, #4
 8000d32:	4a2c      	ldr	r2, [pc, #176]	; (8000de4 <menu_vars+0x28c>)
 8000d34:	4413      	add	r3, r2
 8000d36:	3304      	adds	r3, #4
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	e043      	b.n	8000dc4 <menu_vars+0x26c>
	case 17:     menu_vars_var1= &note[var_index].transpose    ; break;
 8000d3c:	78fb      	ldrb	r3, [r7, #3]
 8000d3e:	011b      	lsls	r3, r3, #4
 8000d40:	4a28      	ldr	r2, [pc, #160]	; (8000de4 <menu_vars+0x28c>)
 8000d42:	4413      	add	r3, r2
 8000d44:	3305      	adds	r3, #5
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	e03c      	b.n	8000dc4 <menu_vars+0x26c>
	case 18:     menu_vars_var1= &note[var_index].timeshift    ; break;
 8000d4a:	78fb      	ldrb	r3, [r7, #3]
 8000d4c:	011b      	lsls	r3, r3, #4
 8000d4e:	4a25      	ldr	r2, [pc, #148]	; (8000de4 <menu_vars+0x28c>)
 8000d50:	4413      	add	r3, r2
 8000d52:	3306      	adds	r3, #6
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	e035      	b.n	8000dc4 <menu_vars+0x26c>
	case 19:     menu_vars_var1= &note[var_index].velocity   ; break; // 16 bit
 8000d58:	78fb      	ldrb	r3, [r7, #3]
 8000d5a:	011b      	lsls	r3, r3, #4
 8000d5c:	3308      	adds	r3, #8
 8000d5e:	4a21      	ldr	r2, [pc, #132]	; (8000de4 <menu_vars+0x28c>)
 8000d60:	4413      	add	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	e02e      	b.n	8000dc4 <menu_vars+0x26c>
	case 20:     menu_vars_var1= &note[var_index].detune    ; break;
 8000d66:	78fb      	ldrb	r3, [r7, #3]
 8000d68:	011b      	lsls	r3, r3, #4
 8000d6a:	3308      	adds	r3, #8
 8000d6c:	4a1d      	ldr	r2, [pc, #116]	; (8000de4 <menu_vars+0x28c>)
 8000d6e:	4413      	add	r3, r2
 8000d70:	3302      	adds	r3, #2
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	e026      	b.n	8000dc4 <menu_vars+0x26c>
	case 21:     menu_vars_var1= NULL   ; break;
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	e023      	b.n	8000dc4 <menu_vars+0x26c>
	case 22:     menu_vars_var1= &seq.pos    ; break;
 8000d7c:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <menu_vars+0x290>)
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	e020      	b.n	8000dc4 <menu_vars+0x26c>
	case 23:     menu_vars_var1= &seq.tempo    ; break;
 8000d82:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <menu_vars+0x294>)
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	e01d      	b.n	8000dc4 <menu_vars+0x26c>
	case 24:     menu_vars_var1= &seq.notes1[var_index]   ; break;
 8000d88:	78fb      	ldrb	r3, [r7, #3]
 8000d8a:	4a17      	ldr	r2, [pc, #92]	; (8000de8 <menu_vars+0x290>)
 8000d8c:	4413      	add	r3, r2
 8000d8e:	3302      	adds	r3, #2
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	e017      	b.n	8000dc4 <menu_vars+0x26c>
	case 25:     menu_vars_var1= &seq.notes2[var_index]   ; break;
 8000d94:	78fb      	ldrb	r3, [r7, #3]
 8000d96:	3310      	adds	r3, #16
 8000d98:	4a13      	ldr	r2, [pc, #76]	; (8000de8 <menu_vars+0x290>)
 8000d9a:	4413      	add	r3, r2
 8000d9c:	3303      	adds	r3, #3
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	e010      	b.n	8000dc4 <menu_vars+0x26c>
	case 26:     menu_vars_var1= &seq.loop [var_index]    ; break;
 8000da2:	78fb      	ldrb	r3, [r7, #3]
 8000da4:	3320      	adds	r3, #32
 8000da6:	4a10      	ldr	r2, [pc, #64]	; (8000de8 <menu_vars+0x290>)
 8000da8:	4413      	add	r3, r2
 8000daa:	3304      	adds	r3, #4
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	e009      	b.n	8000dc4 <menu_vars+0x26c>
	case 27:     menu_vars_var1= &LFO[var_index].target_index    ; break;
 8000db0:	78fb      	ldrb	r3, [r7, #3]
 8000db2:	015b      	lsls	r3, r3, #5
 8000db4:	4a09      	ldr	r2, [pc, #36]	; (8000ddc <menu_vars+0x284>)
 8000db6:	4413      	add	r3, r2
 8000db8:	3305      	adds	r3, #5
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	e002      	b.n	8000dc4 <menu_vars+0x26c>
	default :		menu_vars_var1= NULL   ; break;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	bf00      	nop

	}
    // copy back address  ,ok

	//menu_vars_var= menu_vars_var1;
	return menu_vars_var1;
 8000dc4:	693b      	ldr	r3, [r7, #16]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000ea4 	.word	0x20000ea4
 8000dd4:	20000668 	.word	0x20000668
 8000dd8:	08009ea0 	.word	0x08009ea0
 8000ddc:	20003080 	.word	0x20003080
 8000de0:	200031c0 	.word	0x200031c0
 8000de4:	20003c4c 	.word	0x20003c4c
 8000de8:	20003cbc 	.word	0x20003cbc
 8000dec:	20003cbd 	.word	0x20003cbd

08000df0 <menu_parser>:



void menu_parser(void){          // parse out menus , shouldn't have to run (in theory) once filled ,only for feedback pointer maybe
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0


	char menu_string[8]="xxxxxxxx";   // incoming string holder (single)
 8000df6:	4a59      	ldr	r2, [pc, #356]	; (8000f5c <menu_parser+0x16c>)
 8000df8:	f107 030c 	add.w	r3, r7, #12
 8000dfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e00:	e883 0003 	stmia.w	r3, {r0, r1}
	char menu_string2[8]="hhhhhhhh";
 8000e04:	4a56      	ldr	r2, [pc, #344]	; (8000f60 <menu_parser+0x170>)
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e0c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t string_counter=0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	75fb      	strb	r3, [r7, #23]

	uint16_t menu_searchsize=sizeof(default_menu)-8;   // this should fairly big always , leave gap at the end , atm 480
 8000e14:	f240 43a1 	movw	r3, #1185	; 0x4a1
 8000e18:	82bb      	strh	r3, [r7, #20]


	if (string_search>menu_searchsize) {                    //this is ok
 8000e1a:	4b52      	ldr	r3, [pc, #328]	; (8000f64 <menu_parser+0x174>)
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	8aba      	ldrh	r2, [r7, #20]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	f0c0 8097 	bcc.w	8000f54 <menu_parser+0x164>
		return;    }    // check if bigger than search area
	//if (menu_counter>240)  return;
	memcpy(menu_string,default_menu+string_search,8);    //copy 8 strings created menu array
 8000e26:	4b4f      	ldr	r3, [pc, #316]	; (8000f64 <menu_parser+0x174>)
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4b4e      	ldr	r3, [pc, #312]	; (8000f68 <menu_parser+0x178>)
 8000e2e:	441a      	add	r2, r3
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	6810      	ldr	r0, [r2, #0]
 8000e36:	6851      	ldr	r1, [r2, #4]
 8000e38:	c303      	stmia	r3!, {r0, r1}
	////////////////////////////
	for (string_counter=0;string_counter<28;string_counter++){    	// test a single menu entry  , for now only the first record
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	75fb      	strb	r3, [r7, #23]
 8000e3e:	e06f      	b.n	8000f20 <menu_parser+0x130>

		memcpy(menu_string2,menu_titles_final[string_counter],8);
 8000e40:	7dfb      	ldrb	r3, [r7, #23]
 8000e42:	4a4a      	ldr	r2, [pc, #296]	; (8000f6c <menu_parser+0x17c>)
 8000e44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	6810      	ldr	r0, [r2, #0]
 8000e4c:	6851      	ldr	r1, [r2, #4]
 8000e4e:	c303      	stmia	r3!, {r0, r1}
		if  ((strncmp(menu_string,menu_string2,8))==0) 								// compare and if true pass var,seq
 8000e50:	1d39      	adds	r1, r7, #4
 8000e52:	f107 030c 	add.w	r3, r7, #12
 8000e56:	2208      	movs	r2, #8
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f008 fe59 	bl	8009b10 <strncmp>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d15a      	bne.n	8000f1a <menu_parser+0x12a>
		{


			if ((menu_counter>110 )&&(menu_counter<128 )) menu_counter=menu_counter+16;   // skip to second page
 8000e64:	4b42      	ldr	r3, [pc, #264]	; (8000f70 <menu_parser+0x180>)
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	2b6e      	cmp	r3, #110	; 0x6e
 8000e6a:	d909      	bls.n	8000e80 <menu_parser+0x90>
 8000e6c:	4b40      	ldr	r3, [pc, #256]	; (8000f70 <menu_parser+0x180>)
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	2b7f      	cmp	r3, #127	; 0x7f
 8000e72:	d805      	bhi.n	8000e80 <menu_parser+0x90>
 8000e74:	4b3e      	ldr	r3, [pc, #248]	; (8000f70 <menu_parser+0x180>)
 8000e76:	881b      	ldrh	r3, [r3, #0]
 8000e78:	3310      	adds	r3, #16
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	4b3c      	ldr	r3, [pc, #240]	; (8000f70 <menu_parser+0x180>)
 8000e7e:	801a      	strh	r2, [r3, #0]


			if((menu_counter>237)&&(menu_counter<256 )) menu_counter=menu_counter+16; // skip
 8000e80:	4b3b      	ldr	r3, [pc, #236]	; (8000f70 <menu_parser+0x180>)
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	2bed      	cmp	r3, #237	; 0xed
 8000e86:	d909      	bls.n	8000e9c <menu_parser+0xac>
 8000e88:	4b39      	ldr	r3, [pc, #228]	; (8000f70 <menu_parser+0x180>)
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	2bff      	cmp	r3, #255	; 0xff
 8000e8e:	d805      	bhi.n	8000e9c <menu_parser+0xac>
 8000e90:	4b37      	ldr	r3, [pc, #220]	; (8000f70 <menu_parser+0x180>)
 8000e92:	881b      	ldrh	r3, [r3, #0]
 8000e94:	3310      	adds	r3, #16
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	4b35      	ldr	r3, [pc, #212]	; (8000f70 <menu_parser+0x180>)
 8000e9a:	801a      	strh	r2, [r3, #0]
			if((menu_counter>365)&&(menu_counter<384 )) menu_counter=menu_counter+16; // skip
 8000e9c:	4b34      	ldr	r3, [pc, #208]	; (8000f70 <menu_parser+0x180>)
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
 8000ea4:	d30a      	bcc.n	8000ebc <menu_parser+0xcc>
 8000ea6:	4b32      	ldr	r3, [pc, #200]	; (8000f70 <menu_parser+0x180>)
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000eae:	d205      	bcs.n	8000ebc <menu_parser+0xcc>
 8000eb0:	4b2f      	ldr	r3, [pc, #188]	; (8000f70 <menu_parser+0x180>)
 8000eb2:	881b      	ldrh	r3, [r3, #0]
 8000eb4:	3310      	adds	r3, #16
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	4b2d      	ldr	r3, [pc, #180]	; (8000f70 <menu_parser+0x180>)
 8000eba:	801a      	strh	r2, [r3, #0]



			menu_title_lut[menu_title_count]=  (string_counter <<16)+menu_counter;   // search result  and disp lcd position counter
 8000ebc:	7dfb      	ldrb	r3, [r7, #23]
 8000ebe:	041b      	lsls	r3, r3, #16
 8000ec0:	4a2b      	ldr	r2, [pc, #172]	; (8000f70 <menu_parser+0x180>)
 8000ec2:	8812      	ldrh	r2, [r2, #0]
 8000ec4:	1899      	adds	r1, r3, r2
 8000ec6:	4b2b      	ldr	r3, [pc, #172]	; (8000f74 <menu_parser+0x184>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	4b2a      	ldr	r3, [pc, #168]	; (8000f78 <menu_parser+0x188>)
 8000ece:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			memcpy(menu_index_list+(menu_title_count*2),default_menu+string_search-2,2); // get array  index under ,LFO[1]  etc ,ok
 8000ed2:	4b28      	ldr	r3, [pc, #160]	; (8000f74 <menu_parser+0x184>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b28      	ldr	r3, [pc, #160]	; (8000f7c <menu_parser+0x18c>)
 8000edc:	4413      	add	r3, r2
 8000ede:	4a21      	ldr	r2, [pc, #132]	; (8000f64 <menu_parser+0x174>)
 8000ee0:	8812      	ldrh	r2, [r2, #0]
 8000ee2:	3a02      	subs	r2, #2
 8000ee4:	4920      	ldr	r1, [pc, #128]	; (8000f68 <menu_parser+0x178>)
 8000ee6:	440a      	add	r2, r1
 8000ee8:	8812      	ldrh	r2, [r2, #0]
 8000eea:	b292      	uxth	r2, r2
 8000eec:	801a      	strh	r2, [r3, #0]


			menu_title_count++;
 8000eee:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <menu_parser+0x184>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <menu_parser+0x184>)
 8000ef8:	701a      	strb	r2, [r3, #0]
			menu_counter++;
 8000efa:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <menu_parser+0x180>)
 8000efc:	881b      	ldrh	r3, [r3, #0]
 8000efe:	3301      	adds	r3, #1
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <menu_parser+0x180>)
 8000f04:	801a      	strh	r2, [r3, #0]
			space_check=0;
 8000f06:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <menu_parser+0x190>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
			string_search=string_search+8;     // advance search position
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <menu_parser+0x174>)
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	3308      	adds	r3, #8
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <menu_parser+0x174>)
 8000f16:	801a      	strh	r2, [r3, #0]

			return;}
 8000f18:	e01d      	b.n	8000f56 <menu_parser+0x166>
	for (string_counter=0;string_counter<28;string_counter++){    	// test a single menu entry  , for now only the first record
 8000f1a:	7dfb      	ldrb	r3, [r7, #23]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	75fb      	strb	r3, [r7, #23]
 8000f20:	7dfb      	ldrb	r3, [r7, #23]
 8000f22:	2b1b      	cmp	r3, #27
 8000f24:	d98c      	bls.n	8000e40 <menu_parser+0x50>
	}

	//string_value=255;    // no result use 255 for now
	//menu_title_lut[menu_title_count]=255;   // record for feedback line
	//menu_title_count++;
	if (space_check>1)  menu_counter++;   //this is ok
 8000f26:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <menu_parser+0x190>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d905      	bls.n	8000f3a <menu_parser+0x14a>
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <menu_parser+0x180>)
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	3301      	adds	r3, #1
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <menu_parser+0x180>)
 8000f38:	801a      	strh	r2, [r3, #0]
	space_check++;  // count empty spaces or fill characters
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <menu_parser+0x190>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <menu_parser+0x190>)
 8000f44:	701a      	strb	r2, [r3, #0]
	string_search++;
 8000f46:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <menu_parser+0x174>)
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <menu_parser+0x174>)
 8000f50:	801a      	strh	r2, [r3, #0]
	return;
 8000f52:	e000      	b.n	8000f56 <menu_parser+0x166>
		return;    }    // check if bigger than search area
 8000f54:	bf00      	nop


}
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	08009db8 	.word	0x08009db8
 8000f60:	08009dc0 	.word	0x08009dc0
 8000f64:	20003cea 	.word	0x20003cea
 8000f68:	200001bc 	.word	0x200001bc
 8000f6c:	20000668 	.word	0x20000668
 8000f70:	20003cec 	.word	0x20003cec
 8000f74:	20003cef 	.word	0x20003cef
 8000f78:	20003cf0 	.word	0x20003cf0
 8000f7c:	20003ef0 	.word	0x20003ef0
 8000f80:	20003cee 	.word	0x20003cee

08000f84 <lfo_target_parse>:
void lfo_target_parse(void){    // records ptr for target options , works ok
 8000f84:	b590      	push	{r4, r7, lr}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0

		for (n=0;n<10;n++){
 8000f8a:	4b2e      	ldr	r3, [pc, #184]	; (8001044 <lfo_target_parse+0xc0>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	801a      	strh	r2, [r3, #0]
 8000f90:	e04e      	b.n	8001030 <lfo_target_parse+0xac>

			if (LFO[n].target) {  // test if above zero
 8000f92:	4b2c      	ldr	r3, [pc, #176]	; (8001044 <lfo_target_parse+0xc0>)
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	4a2c      	ldr	r2, [pc, #176]	; (8001048 <lfo_target_parse+0xc4>)
 8000f98:	015b      	lsls	r3, r3, #5
 8000f9a:	4413      	add	r3, r2
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d03f      	beq.n	8001024 <lfo_target_parse+0xa0>
				uint8_t target_input=LFO[n].target; // copy to avoid messed up pointer
 8000fa4:	4b27      	ldr	r3, [pc, #156]	; (8001044 <lfo_target_parse+0xc0>)
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	4a27      	ldr	r2, [pc, #156]	; (8001048 <lfo_target_parse+0xc4>)
 8000faa:	015b      	lsls	r3, r3, #5
 8000fac:	4413      	add	r3, r2
 8000fae:	3304      	adds	r3, #4
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]

				if (target_input>26)    target_input=26;   // test  limit and block self
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	2b1a      	cmp	r3, #26
 8000fb8:	d901      	bls.n	8000fbe <lfo_target_parse+0x3a>
 8000fba:	231a      	movs	r3, #26
 8000fbc:	71fb      	strb	r3, [r7, #7]
			if (target_input==5) 	target_input=6;  // skip up so it doesnt self
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	2b05      	cmp	r3, #5
 8000fc2:	d101      	bne.n	8000fc8 <lfo_target_parse+0x44>
 8000fc4:	2306      	movs	r3, #6
 8000fc6:	71fb      	strb	r3, [r7, #7]
			if (target_input==22) 	target_input=23;   //  maybe skip everything that has no generator ,
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	2b16      	cmp	r3, #22
 8000fcc:	d101      	bne.n	8000fd2 <lfo_target_parse+0x4e>
 8000fce:	2317      	movs	r3, #23
 8000fd0:	71fb      	strb	r3, [r7, #7]
			if (target_input==17) 	target_input=18;
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b11      	cmp	r3, #17
 8000fd6:	d101      	bne.n	8000fdc <lfo_target_parse+0x58>
 8000fd8:	2312      	movs	r3, #18
 8000fda:	71fb      	strb	r3, [r7, #7]

			uint8_t target_index=LFO[n].target_index;
 8000fdc:	4b19      	ldr	r3, [pc, #100]	; (8001044 <lfo_target_parse+0xc0>)
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	4a19      	ldr	r2, [pc, #100]	; (8001048 <lfo_target_parse+0xc4>)
 8000fe2:	015b      	lsls	r3, r3, #5
 8000fe4:	4413      	add	r3, r2
 8000fe6:	3305      	adds	r3, #5
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	71bb      	strb	r3, [r7, #6]

			if (target_index>menu_vars_index_limit[target_index]  )   // test limit
 8000fec:	79bb      	ldrb	r3, [r7, #6]
 8000fee:	4a17      	ldr	r2, [pc, #92]	; (800104c <lfo_target_parse+0xc8>)
 8000ff0:	5cd3      	ldrb	r3, [r2, r3]
 8000ff2:	79ba      	ldrb	r2, [r7, #6]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d903      	bls.n	8001000 <lfo_target_parse+0x7c>
			{	target_index=menu_vars_index_limit[target_index]; }
 8000ff8:	79bb      	ldrb	r3, [r7, #6]
 8000ffa:	4a14      	ldr	r2, [pc, #80]	; (800104c <lfo_target_parse+0xc8>)
 8000ffc:	5cd3      	ldrb	r3, [r2, r3]
 8000ffe:	71bb      	strb	r3, [r7, #6]

			LFO[n].out_ptr= menu_vars(menu_titles_final[target_input] , target_index    );     // write ptr
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	4a13      	ldr	r2, [pc, #76]	; (8001050 <lfo_target_parse+0xcc>)
 8001004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001008:	4a0e      	ldr	r2, [pc, #56]	; (8001044 <lfo_target_parse+0xc0>)
 800100a:	8812      	ldrh	r2, [r2, #0]
 800100c:	4614      	mov	r4, r2
 800100e:	79ba      	ldrb	r2, [r7, #6]
 8001010:	4611      	mov	r1, r2
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fda0 	bl	8000b58 <menu_vars>
 8001018:	4602      	mov	r2, r0
 800101a:	490b      	ldr	r1, [pc, #44]	; (8001048 <lfo_target_parse+0xc4>)
 800101c:	0163      	lsls	r3, r4, #5
 800101e:	440b      	add	r3, r1
 8001020:	331c      	adds	r3, #28
 8001022:	601a      	str	r2, [r3, #0]
		for (n=0;n<10;n++){
 8001024:	4b07      	ldr	r3, [pc, #28]	; (8001044 <lfo_target_parse+0xc0>)
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	3301      	adds	r3, #1
 800102a:	b29a      	uxth	r2, r3
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <lfo_target_parse+0xc0>)
 800102e:	801a      	strh	r2, [r3, #0]
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <lfo_target_parse+0xc0>)
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	2b09      	cmp	r3, #9
 8001036:	d9ac      	bls.n	8000f92 <lfo_target_parse+0xe>

			}
		}

	}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	bd90      	pop	{r4, r7, pc}
 8001042:	bf00      	nop
 8001044:	20000e82 	.word	0x20000e82
 8001048:	20003080 	.word	0x20003080
 800104c:	08009ea0 	.word	0x08009ea0
 8001050:	20000668 	.word	0x20000668

08001054 <lfo_target_modify>:

void lfo_target_modify(void){					// careful position  ,ok
 8001054:	b480      	push	{r7}
 8001056:	b087      	sub	sp, #28
 8001058:	af00      	add	r7, sp, #0


	for (n=0;n<10;n++){
 800105a:	4b28      	ldr	r3, [pc, #160]	; (80010fc <lfo_target_modify+0xa8>)
 800105c:	2200      	movs	r2, #0
 800105e:	801a      	strh	r2, [r3, #0]
 8001060:	e040      	b.n	80010e4 <lfo_target_modify+0x90>
		if (LFO[n].target) {         // check first for enable
 8001062:	4b26      	ldr	r3, [pc, #152]	; (80010fc <lfo_target_modify+0xa8>)
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	4a26      	ldr	r2, [pc, #152]	; (8001100 <lfo_target_modify+0xac>)
 8001068:	015b      	lsls	r3, r3, #5
 800106a:	4413      	add	r3, r2
 800106c:	3304      	adds	r3, #4
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d031      	beq.n	80010d8 <lfo_target_modify+0x84>
			uint8_t loop_position=sampling_position&7;    // 0-7 , this comes usually from 0-512 loop / 64
 8001074:	4b23      	ldr	r3, [pc, #140]	; (8001104 <lfo_target_modify+0xb0>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	f003 0307 	and.w	r3, r3, #7
 800107c:	75fb      	strb	r3, [r7, #23]
			uint8_t right_shift=menu_vars_divider[LFO[n].target]+12;   // grab divider
 800107e:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <lfo_target_modify+0xa8>)
 8001080:	881b      	ldrh	r3, [r3, #0]
 8001082:	4a1f      	ldr	r2, [pc, #124]	; (8001100 <lfo_target_modify+0xac>)
 8001084:	015b      	lsls	r3, r3, #5
 8001086:	4413      	add	r3, r2
 8001088:	3304      	adds	r3, #4
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <lfo_target_modify+0xb4>)
 8001090:	5c9b      	ldrb	r3, [r3, r2]
 8001092:	330c      	adds	r3, #12
 8001094:	75bb      	strb	r3, [r7, #22]
			uint8_t  *ptr_to_modify =LFO[n].out_ptr;       // select address , not always 8 bit
 8001096:	4b19      	ldr	r3, [pc, #100]	; (80010fc <lfo_target_modify+0xa8>)
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	4a19      	ldr	r2, [pc, #100]	; (8001100 <lfo_target_modify+0xac>)
 800109c:	015b      	lsls	r3, r3, #5
 800109e:	4413      	add	r3, r2
 80010a0:	331c      	adds	r3, #28
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	613b      	str	r3, [r7, #16]
			uint16_t lfo_out_temp=  LFO[n].out [loop_position];
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <lfo_target_modify+0xa8>)
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	7dfb      	ldrb	r3, [r7, #23]
 80010ae:	4914      	ldr	r1, [pc, #80]	; (8001100 <lfo_target_modify+0xac>)
 80010b0:	0112      	lsls	r2, r2, #4
 80010b2:	4413      	add	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	440b      	add	r3, r1
 80010b8:	88db      	ldrh	r3, [r3, #6]
 80010ba:	81fb      	strh	r3, [r7, #14]

			uint32_t  modified_var =  lfo_out_temp*  (*ptr_to_modify)   ;   // grab lfo out *    data to be modfied
 80010bc:	89fb      	ldrh	r3, [r7, #14]
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	7812      	ldrb	r2, [r2, #0]
 80010c2:	fb02 f303 	mul.w	r3, r2, r3
 80010c6:	60bb      	str	r3, [r7, #8]
			uint8_t  var_replaced= modified_var>>right_shift;   // scale to 8 bit for now
 80010c8:	7dbb      	ldrb	r3, [r7, #22]
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	fa22 f303 	lsr.w	r3, r2, r3
 80010d0:	71fb      	strb	r3, [r7, #7]
			 *ptr_to_modify =var_replaced;   // replace original value
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	79fa      	ldrb	r2, [r7, #7]
 80010d6:	701a      	strb	r2, [r3, #0]
	for (n=0;n<10;n++){
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <lfo_target_modify+0xa8>)
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	3301      	adds	r3, #1
 80010de:	b29a      	uxth	r2, r3
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <lfo_target_modify+0xa8>)
 80010e2:	801a      	strh	r2, [r3, #0]
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <lfo_target_modify+0xa8>)
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	2b09      	cmp	r3, #9
 80010ea:	d9ba      	bls.n	8001062 <lfo_target_modify+0xe>
		}


	}

}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	371c      	adds	r7, #28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000e82 	.word	0x20000e82
 8001100:	20003080 	.word	0x20003080
 8001104:	20004008 	.word	0x20004008
 8001108:	08009ebc 	.word	0x08009ebc

0800110c <SPI_command>:



void SPI_command(void){
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
// pins are all good , SPI is always the problem!!!
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 8001112:	4b18      	ldr	r3, [pc, #96]	; (8001174 <SPI_command+0x68>)
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d128      	bne.n	800116c <SPI_command+0x60>
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <SPI_command+0x6c>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d124      	bne.n	800116c <SPI_command+0x60>

uint8_t spi_store[5];

	//clk_pin=(i&1)^1;
		//bsrr_long=0;
		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8001122:	4b16      	ldr	r3, [pc, #88]	; (800117c <SPI_command+0x70>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	0a1b      	lsrs	r3, r3, #8
 8001128:	b29b      	uxth	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <SPI_command+0x2a>
 800112e:	4b14      	ldr	r3, [pc, #80]	; (8001180 <SPI_command+0x74>)
 8001130:	22f8      	movs	r2, #248	; 0xf8
 8001132:	701a      	strb	r2, [r3, #0]
 8001134:	e002      	b.n	800113c <SPI_command+0x30>
 8001136:	4b12      	ldr	r3, [pc, #72]	; (8001180 <SPI_command+0x74>)
 8001138:	22fa      	movs	r2, #250	; 0xfa
 800113a:	701a      	strb	r2, [r3, #0]

	spi_store[0]=spi_byte&255;
 800113c:	4b10      	ldr	r3, [pc, #64]	; (8001180 <SPI_command+0x74>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	703b      	strb	r3, [r7, #0]
	spi_store[1]=((spi_hold>>4)<<4)&255;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <SPI_command+0x70>)
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	091b      	lsrs	r3, r3, #4
 8001148:	b29b      	uxth	r3, r3
 800114a:	011b      	lsls	r3, r3, #4
 800114c:	b2db      	uxtb	r3, r3
 800114e:	707b      	strb	r3, [r7, #1]
	spi_store[2]=((spi_hold&15)<<4)&255;
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <SPI_command+0x70>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	011b      	lsls	r3, r3, #4
 8001156:	b2db      	uxtb	r3, r3
 8001158:	70bb      	strb	r3, [r7, #2]

// send this to spi for now
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3,3
 800115a:	4639      	mov	r1, r7
 800115c:	2303      	movs	r3, #3
 800115e:	2203      	movs	r2, #3
 8001160:	4808      	ldr	r0, [pc, #32]	; (8001184 <SPI_command+0x78>)
 8001162:	f006 fe6a 	bl	8007e3a <HAL_SPI_Transmit>
			);  // working good


//HAL_Delay(10);
	spi_enable=1; }
 8001166:	4b03      	ldr	r3, [pc, #12]	; (8001174 <SPI_command+0x68>)
 8001168:	2201      	movs	r2, #1
 800116a:	801a      	strh	r2, [r3, #0]
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200022fe 	.word	0x200022fe
 8001178:	20002304 	.word	0x20002304
 800117c:	20002302 	.word	0x20002302
 8001180:	20002300 	.word	0x20002300
 8001184:	20004560 	.word	0x20004560

08001188 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)    // unreliable

	{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
		time_proc++;
 8001190:	4b24      	ldr	r3, [pc, #144]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	3301      	adds	r3, #1
 8001196:	b29a      	uxth	r2, r3
 8001198:	4b22      	ldr	r3, [pc, #136]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800119a:	801a      	strh	r2, [r3, #0]
		//if (((sample_point==511) || (sample_point==1022)) && (bank_write)  ) error_count++;

		if (sample_point==511) {bank_write=1; sample_pointD=0;  }
 800119c:	4b22      	ldr	r3, [pc, #136]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d105      	bne.n	80011b6 <HAL_TIM_PeriodElapsedCallback+0x2e>
 80011aa:	4b20      	ldr	r3, [pc, #128]	; (800122c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	801a      	strh	r2, [r3, #0]
 80011b0:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	801a      	strh	r2, [r3, #0]
		if (sample_point==1022) {bank_write=1; sample_pointD=512; }
 80011b6:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d106      	bne.n	80011d2 <HAL_TIM_PeriodElapsedCallback+0x4a>
 80011c4:	4b19      	ldr	r3, [pc, #100]	; (800122c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	801a      	strh	r2, [r3, #0]
 80011ca:	4b19      	ldr	r3, [pc, #100]	; (8001230 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80011cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011d0:	801a      	strh	r2, [r3, #0]
		sample_point=sample_point & 1023;// this is 1
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80011e0:	801a      	strh	r2, [r3, #0]
		play_hold=play_sample[sample_point]; // this is 2
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80011ec:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80011f2:	801a      	strh	r2, [r3, #0]

		if(TIM3==htim->Instance)			// nothing here is consistent
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a10      	ldr	r2, [pc, #64]	; (800123c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d10b      	bne.n	8001216 <HAL_TIM_PeriodElapsedCallback+0x8e>
	{


	TIM3->CCR3=play_hold ;  // keep readin sample storage
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	b29a      	uxth	r2, r3
 8001204:	4b0d      	ldr	r3, [pc, #52]	; (800123c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001206:	63da      	str	r2, [r3, #60]	; 0x3c


	sample_point++; //this needs to be here or too fast and wrong sample rate
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	b29b      	uxth	r3, r3
 800120e:	3301      	adds	r3, #1
 8001210:	b29a      	uxth	r2, r3
 8001212:	4b05      	ldr	r3, [pc, #20]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001214:	801a      	strh	r2, [r3, #0]

	}

	}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	2000307c 	.word	0x2000307c
 8001228:	200016aa 	.word	0x200016aa
 800122c:	200001b2 	.word	0x200001b2
 8001230:	200016ae 	.word	0x200016ae
 8001234:	20000ea8 	.word	0x20000ea8
 8001238:	200016ac 	.word	0x200016ac
 800123c:	40000400 	.word	0x40000400

08001240 <analoginputloopb>:



void analoginputloopb(void){  //works ,getting obsolete
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
uint16_t menu_holder;

	menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 8001246:	4b51      	ldr	r3, [pc, #324]	; (800138c <analoginputloopb+0x14c>)
 8001248:	889b      	ldrh	r3, [r3, #4]
 800124a:	091b      	lsrs	r3, r3, #4
 800124c:	b29b      	uxth	r3, r3
 800124e:	b2da      	uxtb	r2, r3
 8001250:	4b4f      	ldr	r3, [pc, #316]	; (8001390 <analoginputloopb+0x150>)
 8001252:	701a      	strb	r2, [r3, #0]
		menuSelectX=cursor_menu[2]&15;  // Y select inside page
 8001254:	4b4d      	ldr	r3, [pc, #308]	; (800138c <analoginputloopb+0x14c>)
 8001256:	889b      	ldrh	r3, [r3, #4]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	f003 030f 	and.w	r3, r3, #15
 800125e:	b2da      	uxtb	r2, r3
 8001260:	4b4c      	ldr	r3, [pc, #304]	; (8001394 <analoginputloopb+0x154>)
 8001262:	701a      	strb	r2, [r3, #0]


		cursor_menu[1]=0;
 8001264:	4b49      	ldr	r3, [pc, #292]	; (800138c <analoginputloopb+0x14c>)
 8001266:	2200      	movs	r2, #0
 8001268:	805a      	strh	r2, [r3, #2]

		cursor_menu[2]=enc2_dir;
 800126a:	4b4b      	ldr	r3, [pc, #300]	; (8001398 <analoginputloopb+0x158>)
 800126c:	881a      	ldrh	r2, [r3, #0]
 800126e:	4b47      	ldr	r3, [pc, #284]	; (800138c <analoginputloopb+0x14c>)
 8001270:	809a      	strh	r2, [r3, #4]


	enc_temp=(TIM2->CNT)>>1;  // read counter tim2 ,divider ok
 8001272:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001278:	085b      	lsrs	r3, r3, #1
 800127a:	b29a      	uxth	r2, r3
 800127c:	4b47      	ldr	r3, [pc, #284]	; (800139c <analoginputloopb+0x15c>)
 800127e:	801a      	strh	r2, [r3, #0]
	enc2_store[enc2_store_count]=(TIM4->CNT)&255;  // read counter tim4, noisy
 8001280:	4b47      	ldr	r3, [pc, #284]	; (80013a0 <analoginputloopb+0x160>)
 8001282:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001284:	4b47      	ldr	r3, [pc, #284]	; (80013a4 <analoginputloopb+0x164>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	b2c9      	uxtb	r1, r1
 800128c:	4b46      	ldr	r3, [pc, #280]	; (80013a8 <analoginputloopb+0x168>)
 800128e:	5499      	strb	r1, [r3, r2]
	uint16_t enc2_store2=0;
 8001290:	2300      	movs	r3, #0
 8001292:	80fb      	strh	r3, [r7, #6]
	uint16_t enc2_store3=0;
 8001294:	2300      	movs	r3, #0
 8001296:	80bb      	strh	r3, [r7, #4]
	if (enc2_store_count==3) enc2_store_count=0; else enc2_store_count++;
 8001298:	4b42      	ldr	r3, [pc, #264]	; (80013a4 <analoginputloopb+0x164>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b03      	cmp	r3, #3
 800129e:	d103      	bne.n	80012a8 <analoginputloopb+0x68>
 80012a0:	4b40      	ldr	r3, [pc, #256]	; (80013a4 <analoginputloopb+0x164>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
 80012a6:	e005      	b.n	80012b4 <analoginputloopb+0x74>
 80012a8:	4b3e      	ldr	r3, [pc, #248]	; (80013a4 <analoginputloopb+0x164>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	3301      	adds	r3, #1
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	4b3c      	ldr	r3, [pc, #240]	; (80013a4 <analoginputloopb+0x164>)
 80012b2:	701a      	strb	r2, [r3, #0]

	enc2_store2=enc2_store[0]+enc2_store[1]+enc2_store[2]+enc2_store[3];     // average filter hopefully
 80012b4:	4b3c      	ldr	r3, [pc, #240]	; (80013a8 <analoginputloopb+0x168>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	4b3b      	ldr	r3, [pc, #236]	; (80013a8 <analoginputloopb+0x168>)
 80012bc:	785b      	ldrb	r3, [r3, #1]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	4413      	add	r3, r2
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	4b38      	ldr	r3, [pc, #224]	; (80013a8 <analoginputloopb+0x168>)
 80012c6:	789b      	ldrb	r3, [r3, #2]
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	4413      	add	r3, r2
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	4b36      	ldr	r3, [pc, #216]	; (80013a8 <analoginputloopb+0x168>)
 80012d0:	78db      	ldrb	r3, [r3, #3]
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	4413      	add	r3, r2
 80012d6:	80fb      	strh	r3, [r7, #6]
	enc2_store3=enc2_store2>>3;
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	08db      	lsrs	r3, r3, #3
 80012dc:	80bb      	strh	r3, [r7, #4]
	enc2_temp=enc2_store3;
 80012de:	4a33      	ldr	r2, [pc, #204]	; (80013ac <analoginputloopb+0x16c>)
 80012e0:	88bb      	ldrh	r3, [r7, #4]
 80012e2:	8013      	strh	r3, [r2, #0]

	if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-1;
 80012e4:	4b2d      	ldr	r3, [pc, #180]	; (800139c <analoginputloopb+0x15c>)
 80012e6:	881a      	ldrh	r2, [r3, #0]
 80012e8:	4b31      	ldr	r3, [pc, #196]	; (80013b0 <analoginputloopb+0x170>)
 80012ea:	881b      	ldrh	r3, [r3, #0]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d908      	bls.n	8001302 <analoginputloopb+0xc2>
 80012f0:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <analoginputloopb+0x174>)
 80012f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	3b01      	subs	r3, #1
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	b21a      	sxth	r2, r3
 80012fe:	4b2d      	ldr	r3, [pc, #180]	; (80013b4 <analoginputloopb+0x174>)
 8001300:	801a      	strh	r2, [r3, #0]
	if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+1;
 8001302:	4b26      	ldr	r3, [pc, #152]	; (800139c <analoginputloopb+0x15c>)
 8001304:	881a      	ldrh	r2, [r3, #0]
 8001306:	4b2a      	ldr	r3, [pc, #168]	; (80013b0 <analoginputloopb+0x170>)
 8001308:	881b      	ldrh	r3, [r3, #0]
 800130a:	429a      	cmp	r2, r3
 800130c:	d208      	bcs.n	8001320 <analoginputloopb+0xe0>
 800130e:	4b29      	ldr	r3, [pc, #164]	; (80013b4 <analoginputloopb+0x174>)
 8001310:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001314:	b29b      	uxth	r3, r3
 8001316:	3301      	adds	r3, #1
 8001318:	b29b      	uxth	r3, r3
 800131a:	b21a      	sxth	r2, r3
 800131c:	4b25      	ldr	r3, [pc, #148]	; (80013b4 <analoginputloopb+0x174>)
 800131e:	801a      	strh	r2, [r3, #0]


  if (enc2_temp>383) enc2_temp=383;  //mem overflow somewhere
 8001320:	4b22      	ldr	r3, [pc, #136]	; (80013ac <analoginputloopb+0x16c>)
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8001328:	d303      	bcc.n	8001332 <analoginputloopb+0xf2>
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <analoginputloopb+0x16c>)
 800132c:	f240 127f 	movw	r2, #383	; 0x17f
 8001330:	801a      	strh	r2, [r3, #0]
	if (enc_dir>160) enc_dir=160;
 8001332:	4b20      	ldr	r3, [pc, #128]	; (80013b4 <analoginputloopb+0x174>)
 8001334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001338:	2ba0      	cmp	r3, #160	; 0xa0
 800133a:	dd02      	ble.n	8001342 <analoginputloopb+0x102>
 800133c:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <analoginputloopb+0x174>)
 800133e:	22a0      	movs	r2, #160	; 0xa0
 8001340:	801a      	strh	r2, [r3, #0]
			if (enc_dir<0) enc_dir=0;
 8001342:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <analoginputloopb+0x174>)
 8001344:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001348:	2b00      	cmp	r3, #0
 800134a:	da02      	bge.n	8001352 <analoginputloopb+0x112>
 800134c:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <analoginputloopb+0x174>)
 800134e:	2200      	movs	r2, #0
 8001350:	801a      	strh	r2, [r3, #0]

			enc_tempB=enc_temp;
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <analoginputloopb+0x15c>)
 8001354:	881a      	ldrh	r2, [r3, #0]
 8001356:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <analoginputloopb+0x170>)
 8001358:	801a      	strh	r2, [r3, #0]

			enc2_dir=enc2_temp; //temp to try source data
 800135a:	4b14      	ldr	r3, [pc, #80]	; (80013ac <analoginputloopb+0x16c>)
 800135c:	881a      	ldrh	r2, [r3, #0]
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <analoginputloopb+0x158>)
 8001360:	801a      	strh	r2, [r3, #0]


					enc2_tempB=enc2_temp; // to effective as counter not getting reset
 8001362:	4b12      	ldr	r3, [pc, #72]	; (80013ac <analoginputloopb+0x16c>)
 8001364:	881a      	ldrh	r2, [r3, #0]
 8001366:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <analoginputloopb+0x178>)
 8001368:	801a      	strh	r2, [r3, #0]


potValues[counterVarB]=(potSource[counterVarB]>>4) & 15 ;  // reduce values for now ,use original for others , slow count
 800136a:	4b14      	ldr	r3, [pc, #80]	; (80013bc <analoginputloopb+0x17c>)
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <analoginputloopb+0x180>)
 8001372:	5c9b      	ldrb	r3, [r3, r2]
 8001374:	4a11      	ldr	r2, [pc, #68]	; (80013bc <analoginputloopb+0x17c>)
 8001376:	8812      	ldrh	r2, [r2, #0]
 8001378:	091b      	lsrs	r3, r3, #4
 800137a:	b2d9      	uxtb	r1, r3
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <analoginputloopb+0x184>)
 800137e:	5499      	strb	r1, [r3, r2]


}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	20002308 	.word	0x20002308
 8001390:	20000e72 	.word	0x20000e72
 8001394:	20000e73 	.word	0x20000e73
 8001398:	200022f6 	.word	0x200022f6
 800139c:	200022ee 	.word	0x200022ee
 80013a0:	40000800 	.word	0x40000800
 80013a4:	20004005 	.word	0x20004005
 80013a8:	20004000 	.word	0x20004000
 80013ac:	200022f2 	.word	0x200022f2
 80013b0:	200022f0 	.word	0x200022f0
 80013b4:	200022f8 	.word	0x200022f8
 80013b8:	200022f4 	.word	0x200022f4
 80013bc:	20000e78 	.word	0x20000e78
 80013c0:	20000ce8 	.word	0x20000ce8
 80013c4:	20000b68 	.word	0x20000b68

080013c8 <display_init>:
void display_init(void){
 80013c8:	b5b0      	push	{r4, r5, r7, lr}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0
	//uint8_t sp2_command=0xf8+(0<<1);
		 // uint16_t disp[]={  304,304,304,270,257,268,384,258,51,51,52,53,54,55,56,57,58,0};  // normal characters
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd 310 is extended instruction
 80013ce:	4b22      	ldr	r3, [pc, #136]	; (8001458 <display_init+0x90>)
 80013d0:	1d3c      	adds	r4, r7, #4
 80013d2:	461d      	mov	r5, r3
 80013d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013dc:	682b      	ldr	r3, [r5, #0]
 80013de:	8023      	strh	r3, [r4, #0]
		  if (spi_send==0){         // sets data byte
 80013e0:	4b1e      	ldr	r3, [pc, #120]	; (800145c <display_init+0x94>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d132      	bne.n	800144e <display_init+0x86>

switch(init){     //Remember every line advances +char on display ,,all this is mostly unneeded

default : init_b=init-6;displayBuffer2 ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 80013e8:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <display_init+0x98>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	3b06      	subs	r3, #6
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <display_init+0x9c>)
 80013f4:	801a      	strh	r2, [r3, #0]
 80013f6:	f000 fb85 	bl	8001b04 <displayBuffer2>
 80013fa:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <display_init+0x9c>)
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <display_init+0xa0>)
 8001402:	5c9b      	ldrb	r3, [r3, r2]
 8001404:	b29a      	uxth	r2, r3
 8001406:	4b19      	ldr	r3, [pc, #100]	; (800146c <display_init+0xa4>)
 8001408:	801a      	strh	r2, [r3, #0]
 800140a:	bf00      	nop
}


if (init<6)	{HAL_Delay(3);spi_hold=disp[init]  ; } //delay needs to go
 800140c:	4b14      	ldr	r3, [pc, #80]	; (8001460 <display_init+0x98>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b05      	cmp	r3, #5
 8001412:	d80b      	bhi.n	800142c <display_init+0x64>
 8001414:	2003      	movs	r0, #3
 8001416:	f003 f955 	bl	80046c4 <HAL_Delay>
 800141a:	4b11      	ldr	r3, [pc, #68]	; (8001460 <display_init+0x98>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	3328      	adds	r3, #40	; 0x28
 8001422:	443b      	add	r3, r7
 8001424:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8001428:	4b10      	ldr	r3, [pc, #64]	; (800146c <display_init+0xa4>)
 800142a:	801a      	strh	r2, [r3, #0]

init++;   // after 6 it quits the rest is not needed
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <display_init+0x98>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	3301      	adds	r3, #1
 8001432:	b2da      	uxtb	r2, r3
 8001434:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <display_init+0x98>)
 8001436:	701a      	strb	r2, [r3, #0]
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <display_init+0x94>)
 800143a:	2201      	movs	r2, #1
 800143c:	701a      	strb	r2, [r3, #0]
 800143e:	f7ff fe65 	bl	800110c <SPI_command>
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <display_init+0x94>)
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
 8001448:	4b09      	ldr	r3, [pc, #36]	; (8001470 <display_init+0xa8>)
 800144a:	2200      	movs	r2, #0
 800144c:	801a      	strh	r2, [r3, #0]


		  }

		//  if (init==5) display_fill();
}
 800144e:	bf00      	nop
 8001450:	3728      	adds	r7, #40	; 0x28
 8001452:	46bd      	mov	sp, r7
 8001454:	bdb0      	pop	{r4, r5, r7, pc}
 8001456:	bf00      	nop
 8001458:	08009dc8 	.word	0x08009dc8
 800145c:	20002304 	.word	0x20002304
 8001460:	20002305 	.word	0x20002305
 8001464:	20002306 	.word	0x20002306
 8001468:	20000000 	.word	0x20000000
 800146c:	20002302 	.word	0x20002302
 8001470:	200022fe 	.word	0x200022fe

08001474 <gfx_send>:


void gfx_send(void){         // send spi to lcd from gfx ram
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0


			uint8_t spi_store[3];
			uint8_t spi_store2=0;
 800147a:	2300      	movs	r3, #0
 800147c:	71fb      	strb	r3, [r7, #7]
			uint8_t spi_store3=gfx_ram[gfx_send_counter];
 800147e:	4b24      	ldr	r3, [pc, #144]	; (8001510 <gfx_send+0x9c>)
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	4b23      	ldr	r3, [pc, #140]	; (8001514 <gfx_send+0xa0>)
 8001486:	5c9b      	ldrb	r3, [r3, r2]
 8001488:	71bb      	strb	r3, [r7, #6]
	if (gfx_send_counter2>1) {spi_store2=250;
 800148a:	4b23      	ldr	r3, [pc, #140]	; (8001518 <gfx_send+0xa4>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d902      	bls.n	8001498 <gfx_send+0x24>
 8001492:	23fa      	movs	r3, #250	; 0xfa
 8001494:	71fb      	strb	r3, [r7, #7]
 8001496:	e001      	b.n	800149c <gfx_send+0x28>

			}

			else {spi_store2=248;    }//start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8001498:	23f8      	movs	r3, #248	; 0xf8
 800149a:	71fb      	strb	r3, [r7, #7]


					spi_store[0]=spi_store2;
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	703b      	strb	r3, [r7, #0]
					spi_store[1]=((spi_store3>>4)<<4);
 80014a0:	79bb      	ldrb	r3, [r7, #6]
 80014a2:	091b      	lsrs	r3, r3, #4
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	011b      	lsls	r3, r3, #4
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	707b      	strb	r3, [r7, #1]
					spi_store[2]=((spi_store3&15)<<4);
 80014ac:	79bb      	ldrb	r3, [r7, #6]
 80014ae:	011b      	lsls	r3, r3, #4
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	70bb      	strb	r3, [r7, #2]


						HAL_SPI_Transmit(&hspi2,spi_store,3,3);  // ok
 80014b4:	4639      	mov	r1, r7
 80014b6:	2303      	movs	r3, #3
 80014b8:	2203      	movs	r2, #3
 80014ba:	4818      	ldr	r0, [pc, #96]	; (800151c <gfx_send+0xa8>)
 80014bc:	f006 fcbd 	bl	8007e3a <HAL_SPI_Transmit>
					if (gfx_send_counter2==17 ) { gfx_send_counter2=0;    } else gfx_send_counter2++; // check elsewhere if changing gfx_send_counter
 80014c0:	4b15      	ldr	r3, [pc, #84]	; (8001518 <gfx_send+0xa4>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b11      	cmp	r3, #17
 80014c6:	d103      	bne.n	80014d0 <gfx_send+0x5c>
 80014c8:	4b13      	ldr	r3, [pc, #76]	; (8001518 <gfx_send+0xa4>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]
 80014ce:	e005      	b.n	80014dc <gfx_send+0x68>
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <gfx_send+0xa4>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	3301      	adds	r3, #1
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <gfx_send+0xa4>)
 80014da:	701a      	strb	r2, [r3, #0]
			if (gfx_send_counter==1151 ) { gfx_send_counter=0; disp_end=1; gfx_send_counter2=0;    } else gfx_send_counter++; ;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <gfx_send+0x9c>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	f240 427f 	movw	r2, #1151	; 0x47f
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d109      	bne.n	80014fc <gfx_send+0x88>
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <gfx_send+0x9c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	801a      	strh	r2, [r3, #0]
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <gfx_send+0xac>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	701a      	strb	r2, [r3, #0]
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <gfx_send+0xa4>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	701a      	strb	r2, [r3, #0]

		}
 80014fa:	e005      	b.n	8001508 <gfx_send+0x94>
			if (gfx_send_counter==1151 ) { gfx_send_counter=0; disp_end=1; gfx_send_counter2=0;    } else gfx_send_counter++; ;
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <gfx_send+0x9c>)
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	3301      	adds	r3, #1
 8001502:	b29a      	uxth	r2, r3
 8001504:	4b02      	ldr	r3, [pc, #8]	; (8001510 <gfx_send+0x9c>)
 8001506:	801a      	strh	r2, [r3, #0]
		}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20002c2a 	.word	0x20002c2a
 8001514:	200027a8 	.word	0x200027a8
 8001518:	20002c2c 	.word	0x20002c2c
 800151c:	20004560 	.word	0x20004560
 8001520:	20002c62 	.word	0x20002c62

08001524 <gfx_clear>:

void gfx_clear(void){     // simple gfx ram clear ,besides feedback
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0

	for (n=0;n<1152 ;n=n+18)    {
 8001528:	4b19      	ldr	r3, [pc, #100]	; (8001590 <gfx_clear+0x6c>)
 800152a:	2200      	movs	r2, #0
 800152c:	801a      	strh	r2, [r3, #0]
 800152e:	e01c      	b.n	800156a <gfx_clear+0x46>
				for (i=2;i<18;i++){ gfx_ram[n+i] =0;
 8001530:	4b18      	ldr	r3, [pc, #96]	; (8001594 <gfx_clear+0x70>)
 8001532:	2202      	movs	r2, #2
 8001534:	801a      	strh	r2, [r3, #0]
 8001536:	e00e      	b.n	8001556 <gfx_clear+0x32>
 8001538:	4b15      	ldr	r3, [pc, #84]	; (8001590 <gfx_clear+0x6c>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <gfx_clear+0x70>)
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	4413      	add	r3, r2
 8001544:	4a14      	ldr	r2, [pc, #80]	; (8001598 <gfx_clear+0x74>)
 8001546:	2100      	movs	r1, #0
 8001548:	54d1      	strb	r1, [r2, r3]
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <gfx_clear+0x70>)
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	3301      	adds	r3, #1
 8001550:	b29a      	uxth	r2, r3
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <gfx_clear+0x70>)
 8001554:	801a      	strh	r2, [r3, #0]
 8001556:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <gfx_clear+0x70>)
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	2b11      	cmp	r3, #17
 800155c:	d9ec      	bls.n	8001538 <gfx_clear+0x14>
	for (n=0;n<1152 ;n=n+18)    {
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <gfx_clear+0x6c>)
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	3312      	adds	r3, #18
 8001564:	b29a      	uxth	r2, r3
 8001566:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <gfx_clear+0x6c>)
 8001568:	801a      	strh	r2, [r3, #0]
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <gfx_clear+0x6c>)
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8001572:	d3dd      	bcc.n	8001530 <gfx_clear+0xc>

				}  }
	 gfx_send_swap=0;  // disable line skip
 8001574:	4b09      	ldr	r3, [pc, #36]	; (800159c <gfx_clear+0x78>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
	 gfx_send_counter=0;    //reset page
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <gfx_clear+0x7c>)
 800157c:	2200      	movs	r2, #0
 800157e:	801a      	strh	r2, [r3, #0]
	 disp_end=0;     //  should disable display process till one page
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <gfx_clear+0x80>)
 8001582:	2200      	movs	r2, #0
 8001584:	701a      	strb	r2, [r3, #0]

}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	20000e82 	.word	0x20000e82
 8001594:	20000ea4 	.word	0x20000ea4
 8001598:	200027a8 	.word	0x200027a8
 800159c:	20002c2e 	.word	0x20002c2e
 80015a0:	20002c2a 	.word	0x20002c2a
 80015a4:	20002c62 	.word	0x20002c62

080015a8 <display_clear>:

		 gfx_send();

	 }  }

void display_clear (void){ //  simple character clear on default menu3
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0

	uint16_t disp_counter=0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	80fb      	strh	r3, [r7, #6]
	for (disp_counter=0;disp_counter<default_menu3_size;disp_counter++){
 80015b2:	2300      	movs	r3, #0
 80015b4:	80fb      	strh	r3, [r7, #6]
 80015b6:	e006      	b.n	80015c6 <display_clear+0x1e>
		default_menu3[disp_counter]=47;
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	4a09      	ldr	r2, [pc, #36]	; (80015e0 <display_clear+0x38>)
 80015bc:	212f      	movs	r1, #47	; 0x2f
 80015be:	54d1      	strb	r1, [r2, r3]
	for (disp_counter=0;disp_counter<default_menu3_size;disp_counter++){
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	3301      	adds	r3, #1
 80015c4:	80fb      	strh	r3, [r7, #6]
 80015c6:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <display_clear+0x3c>)
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	88fa      	ldrh	r2, [r7, #6]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d3f3      	bcc.n	80015b8 <display_clear+0x10>
	}


}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	2000400c 	.word	0x2000400c
 80015e4:	20003ffe 	.word	0x20003ffe

080015e8 <display_generate>:
void display_generate(void){    // display character generate, 1+1+16 chars
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0

	gfx_clear_flag=0;
 80015ec:	4b10      	ldr	r3, [pc, #64]	; (8001630 <display_generate+0x48>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
	for (i=0;i<18;i++) {
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <display_generate+0x4c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	801a      	strh	r2, [r3, #0]
 80015f8:	e009      	b.n	800160e <display_generate+0x26>
	display_process();
 80015fa:	f000 f863 	bl	80016c4 <display_process>
		  displayBuffer2();} // 5 cycles max for the lot or  0.2ms
 80015fe:	f000 fa81 	bl	8001b04 <displayBuffer2>
	for (i=0;i<18;i++) {
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <display_generate+0x4c>)
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	3301      	adds	r3, #1
 8001608:	b29a      	uxth	r2, r3
 800160a:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <display_generate+0x4c>)
 800160c:	801a      	strh	r2, [r3, #0]
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <display_generate+0x4c>)
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	2b11      	cmp	r3, #17
 8001614:	d9f1      	bls.n	80015fa <display_generate+0x12>
	 if(!gfx_clear_flag)   gfx_send_swap=1;   // enable line swapping
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <display_generate+0x48>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d102      	bne.n	8001624 <display_generate+0x3c>
 800161e:	4b06      	ldr	r3, [pc, #24]	; (8001638 <display_generate+0x50>)
 8001620:	2201      	movs	r2, #1
 8001622:	701a      	strb	r2, [r3, #0]
	 disp_end=0;   ///reset till next full page
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <display_generate+0x54>)
 8001626:	2200      	movs	r2, #0
 8001628:	701a      	strb	r2, [r3, #0]

	//  if (!disp_stepper) break;

}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20004009 	.word	0x20004009
 8001634:	20000ea4 	.word	0x20000ea4
 8001638:	20002c2e 	.word	0x20002c2e
 800163c:	20002c62 	.word	0x20002c62

08001640 <display_fill>:

void display_fill(void)  {     // full update of gfx memory, ok
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
loop_counter3=1;
 8001646:	4b19      	ldr	r3, [pc, #100]	; (80016ac <display_fill+0x6c>)
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
uint16_t fill_counter= 0;
 800164c:	2300      	movs	r3, #0
 800164e:	80fb      	strh	r3, [r7, #6]
uint16_t init_b1=init_b;
 8001650:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <display_fill+0x70>)
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	80bb      	strh	r3, [r7, #4]
uint16_t init_bs=init_b&896;   // get msb
 8001656:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <display_fill+0x70>)
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800165e:	807b      	strh	r3, [r7, #2]
fill_counter=fill_counter+init_bs; // add msb from init b
 8001660:	88fa      	ldrh	r2, [r7, #6]
 8001662:	887b      	ldrh	r3, [r7, #2]
 8001664:	4413      	add	r3, r2
 8001666:	80fb      	strh	r3, [r7, #6]

while ((fill_counter&896)==init_bs)   // skip when over a page something  127+
 8001668:	e00a      	b.n	8001680 <display_fill+0x40>
{
	init_b=fill_counter; // upcount
 800166a:	4a11      	ldr	r2, [pc, #68]	; (80016b0 <display_fill+0x70>)
 800166c:	88fb      	ldrh	r3, [r7, #6]
 800166e:	8013      	strh	r3, [r2, #0]

	disp_stepper=1;   // first character
 8001670:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <display_fill+0x74>)
 8001672:	2201      	movs	r2, #1
 8001674:	701a      	strb	r2, [r3, #0]
	displayBuffer2();	//read default menu
 8001676:	f000 fa45 	bl	8001b04 <displayBuffer2>
	fill_counter++;
 800167a:	88fb      	ldrh	r3, [r7, #6]
 800167c:	3301      	adds	r3, #1
 800167e:	80fb      	strh	r3, [r7, #6]
while ((fill_counter&896)==init_bs)   // skip when over a page something  127+
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	f403 7260 	and.w	r2, r3, #896	; 0x380
 8001686:	887b      	ldrh	r3, [r7, #2]
 8001688:	429a      	cmp	r2, r3
 800168a:	d0ee      	beq.n	800166a <display_fill+0x2a>
}
init_b=init_b1; // write back original value
 800168c:	4a08      	ldr	r2, [pc, #32]	; (80016b0 <display_fill+0x70>)
 800168e:	88bb      	ldrh	r3, [r7, #4]
 8001690:	8013      	strh	r3, [r2, #0]
gfx_send_swap=0;  // disable line skip
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <display_fill+0x78>)
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]
	 gfx_send_counter=0;    //reset page
 8001698:	4b08      	ldr	r3, [pc, #32]	; (80016bc <display_fill+0x7c>)
 800169a:	2200      	movs	r2, #0
 800169c:	801a      	strh	r2, [r3, #0]
	 disp_end=0;     //  should disable display process till one page
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <display_fill+0x80>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	701a      	strb	r2, [r3, #0]


	}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20002c63 	.word	0x20002c63
 80016b0:	20002306 	.word	0x20002306
 80016b4:	200001b6 	.word	0x200001b6
 80016b8:	20002c2e 	.word	0x20002c2e
 80016bc:	20002c2a 	.word	0x20002c2a
 80016c0:	20002c62 	.word	0x20002c62

080016c4 <display_process>:



void display_process(void){							// keep data processing here
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
uint16_t feedback_loc=(init_b&896)+107;
 80016ca:	4b7c      	ldr	r3, [pc, #496]	; (80018bc <display_process+0x1f8>)
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	f403 7360 	and.w	r3, r3, #896	; 0x380
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	336b      	adds	r3, #107	; 0x6b
 80016d6:	81bb      	strh	r3, [r7, #12]

	if ((enc2_tempC==enc2_dir) && (!enc2_add))  {
 80016d8:	4b79      	ldr	r3, [pc, #484]	; (80018c0 <display_process+0x1fc>)
 80016da:	f993 3000 	ldrsb.w	r3, [r3]
 80016de:	461a      	mov	r2, r3
 80016e0:	4b78      	ldr	r3, [pc, #480]	; (80018c4 <display_process+0x200>)
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d112      	bne.n	800170e <display_process+0x4a>
 80016e8:	4b77      	ldr	r3, [pc, #476]	; (80018c8 <display_process+0x204>)
 80016ea:	f993 3000 	ldrsb.w	r3, [r3]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10d      	bne.n	800170e <display_process+0x4a>
		if ((disp_stepper==5)&&(!target_display))  {enc2_add=2; 	disp_stepper=17;}   	 // wait till enc2_dir  hasn't changed ,jump and then change feedback
 80016f2:	4b76      	ldr	r3, [pc, #472]	; (80018cc <display_process+0x208>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b05      	cmp	r3, #5
 80016f8:	d109      	bne.n	800170e <display_process+0x4a>
 80016fa:	4b75      	ldr	r3, [pc, #468]	; (80018d0 <display_process+0x20c>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d105      	bne.n	800170e <display_process+0x4a>
 8001702:	4b71      	ldr	r3, [pc, #452]	; (80018c8 <display_process+0x204>)
 8001704:	2202      	movs	r2, #2
 8001706:	701a      	strb	r2, [r3, #0]
 8001708:	4b70      	ldr	r3, [pc, #448]	; (80018cc <display_process+0x208>)
 800170a:	2211      	movs	r2, #17
 800170c:	701a      	strb	r2, [r3, #0]
			}

	if (disp_stepper>1)	init_b=feedback_loc+16+(disp_stepper);  // write lcd3
 800170e:	4b6f      	ldr	r3, [pc, #444]	; (80018cc <display_process+0x208>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d909      	bls.n	800172a <display_process+0x66>
 8001716:	4b6d      	ldr	r3, [pc, #436]	; (80018cc <display_process+0x208>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	b29a      	uxth	r2, r3
 800171c:	89bb      	ldrh	r3, [r7, #12]
 800171e:	4413      	add	r3, r2
 8001720:	b29b      	uxth	r3, r3
 8001722:	3310      	adds	r3, #16
 8001724:	b29a      	uxth	r2, r3
 8001726:	4b65      	ldr	r3, [pc, #404]	; (80018bc <display_process+0x1f8>)
 8001728:	801a      	strh	r2, [r3, #0]
	if (disp_stepper>4)	init_b=feedback_loc+(disp_stepper);  // write feedback line
 800172a:	4b68      	ldr	r3, [pc, #416]	; (80018cc <display_process+0x208>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b04      	cmp	r3, #4
 8001730:	d907      	bls.n	8001742 <display_process+0x7e>
 8001732:	4b66      	ldr	r3, [pc, #408]	; (80018cc <display_process+0x208>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b29a      	uxth	r2, r3
 8001738:	89bb      	ldrh	r3, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	b29a      	uxth	r2, r3
 800173e:	4b5f      	ldr	r3, [pc, #380]	; (80018bc <display_process+0x1f8>)
 8001740:	801a      	strh	r2, [r3, #0]

	if ((lcd_temp!=enc_dir)  && (enc2_tempC==enc2_dir) )   {*menu_vars_var=enc_dir;   // enc2_dir =same enc_dir=changed
 8001742:	4b64      	ldr	r3, [pc, #400]	; (80018d4 <display_process+0x210>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	4b63      	ldr	r3, [pc, #396]	; (80018d8 <display_process+0x214>)
 800174a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800174e:	429a      	cmp	r2, r3
 8001750:	d014      	beq.n	800177c <display_process+0xb8>
 8001752:	4b5b      	ldr	r3, [pc, #364]	; (80018c0 <display_process+0x1fc>)
 8001754:	f993 3000 	ldrsb.w	r3, [r3]
 8001758:	461a      	mov	r2, r3
 800175a:	4b5a      	ldr	r3, [pc, #360]	; (80018c4 <display_process+0x200>)
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d10c      	bne.n	800177c <display_process+0xb8>
 8001762:	4b5d      	ldr	r3, [pc, #372]	; (80018d8 <display_process+0x214>)
 8001764:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001768:	4b5c      	ldr	r3, [pc, #368]	; (80018dc <display_process+0x218>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	701a      	strb	r2, [r3, #0]
	lcd_temp=enc_dir;  }
 8001770:	4b59      	ldr	r3, [pc, #356]	; (80018d8 <display_process+0x214>)
 8001772:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001776:	b2da      	uxtb	r2, r3
 8001778:	4b56      	ldr	r3, [pc, #344]	; (80018d4 <display_process+0x210>)
 800177a:	701a      	strb	r2, [r3, #0]



	if ((disp_stepper==0) && (enc2_tempC!=enc2_dir) && (!enc2_add))  {      // wait till loop end , ok
 800177c:	4b53      	ldr	r3, [pc, #332]	; (80018cc <display_process+0x208>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	f040 8082 	bne.w	800188a <display_process+0x1c6>
 8001786:	4b4e      	ldr	r3, [pc, #312]	; (80018c0 <display_process+0x1fc>)
 8001788:	f993 3000 	ldrsb.w	r3, [r3]
 800178c:	461a      	mov	r2, r3
 800178e:	4b4d      	ldr	r3, [pc, #308]	; (80018c4 <display_process+0x200>)
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d079      	beq.n	800188a <display_process+0x1c6>
 8001796:	4b4c      	ldr	r3, [pc, #304]	; (80018c8 <display_process+0x204>)
 8001798:	f993 3000 	ldrsb.w	r3, [r3]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d174      	bne.n	800188a <display_process+0x1c6>

	if  (enc2_tempC<enc2_dir)	 enc2_add=1;   									// use this to set up or down count for variables , might change
 80017a0:	4b47      	ldr	r3, [pc, #284]	; (80018c0 <display_process+0x1fc>)
 80017a2:	f993 3000 	ldrsb.w	r3, [r3]
 80017a6:	461a      	mov	r2, r3
 80017a8:	4b46      	ldr	r3, [pc, #280]	; (80018c4 <display_process+0x200>)
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	da02      	bge.n	80017b6 <display_process+0xf2>
 80017b0:	4b45      	ldr	r3, [pc, #276]	; (80018c8 <display_process+0x204>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	701a      	strb	r2, [r3, #0]
		if  (enc2_tempC>enc2_dir)	 enc2_add=-1;    // slow but 1 step at a time
 80017b6:	4b42      	ldr	r3, [pc, #264]	; (80018c0 <display_process+0x1fc>)
 80017b8:	f993 3000 	ldrsb.w	r3, [r3]
 80017bc:	461a      	mov	r2, r3
 80017be:	4b41      	ldr	r3, [pc, #260]	; (80018c4 <display_process+0x200>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	dd02      	ble.n	80017cc <display_process+0x108>
 80017c6:	4b40      	ldr	r3, [pc, #256]	; (80018c8 <display_process+0x204>)
 80017c8:	22ff      	movs	r2, #255	; 0xff
 80017ca:	701a      	strb	r2, [r3, #0]
		if  (enc2_tempC<enc2_dir)	 enc2_add=+(enc2_dir-enc2_tempC);   	//  fast but skips
 80017cc:	4b3c      	ldr	r3, [pc, #240]	; (80018c0 <display_process+0x1fc>)
 80017ce:	f993 3000 	ldrsb.w	r3, [r3]
 80017d2:	461a      	mov	r2, r3
 80017d4:	4b3b      	ldr	r3, [pc, #236]	; (80018c4 <display_process+0x200>)
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	da0b      	bge.n	80017f4 <display_process+0x130>
 80017dc:	4b39      	ldr	r3, [pc, #228]	; (80018c4 <display_process+0x200>)
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	4b37      	ldr	r3, [pc, #220]	; (80018c0 <display_process+0x1fc>)
 80017e4:	f993 3000 	ldrsb.w	r3, [r3]
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	b25a      	sxtb	r2, r3
 80017f0:	4b35      	ldr	r3, [pc, #212]	; (80018c8 <display_process+0x204>)
 80017f2:	701a      	strb	r2, [r3, #0]

		if  (enc2_tempC>enc2_dir)	 enc2_add=-(enc2_tempC-enc2_dir);
 80017f4:	4b32      	ldr	r3, [pc, #200]	; (80018c0 <display_process+0x1fc>)
 80017f6:	f993 3000 	ldrsb.w	r3, [r3]
 80017fa:	461a      	mov	r2, r3
 80017fc:	4b31      	ldr	r3, [pc, #196]	; (80018c4 <display_process+0x200>)
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	dd0b      	ble.n	800181c <display_process+0x158>
 8001804:	4b2f      	ldr	r3, [pc, #188]	; (80018c4 <display_process+0x200>)
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4b2d      	ldr	r3, [pc, #180]	; (80018c0 <display_process+0x1fc>)
 800180c:	f993 3000 	ldrsb.w	r3, [r3]
 8001810:	b2db      	uxtb	r3, r3
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	b2db      	uxtb	r3, r3
 8001816:	b25a      	sxtb	r2, r3
 8001818:	4b2b      	ldr	r3, [pc, #172]	; (80018c8 <display_process+0x204>)
 800181a:	701a      	strb	r2, [r3, #0]


		enc2_tempC=enc2_dir;	   // loop back until change
 800181c:	4b29      	ldr	r3, [pc, #164]	; (80018c4 <display_process+0x200>)
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	b25a      	sxtb	r2, r3
 8001822:	4b27      	ldr	r3, [pc, #156]	; (80018c0 <display_process+0x1fc>)
 8001824:	701a      	strb	r2, [r3, #0]
		if ((enc_out1>=0)  &&  (enc_out1<=menu_title_count))    {enc_out1=enc_out1+enc2_add;}   // count up or down within limits
 8001826:	4b2e      	ldr	r3, [pc, #184]	; (80018e0 <display_process+0x21c>)
 8001828:	f993 3000 	ldrsb.w	r3, [r3]
 800182c:	2b00      	cmp	r3, #0
 800182e:	db14      	blt.n	800185a <display_process+0x196>
 8001830:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <display_process+0x21c>)
 8001832:	f993 3000 	ldrsb.w	r3, [r3]
 8001836:	461a      	mov	r2, r3
 8001838:	4b2a      	ldr	r3, [pc, #168]	; (80018e4 <display_process+0x220>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	dc0c      	bgt.n	800185a <display_process+0x196>
 8001840:	4b27      	ldr	r3, [pc, #156]	; (80018e0 <display_process+0x21c>)
 8001842:	f993 3000 	ldrsb.w	r3, [r3]
 8001846:	b2da      	uxtb	r2, r3
 8001848:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <display_process+0x204>)
 800184a:	f993 3000 	ldrsb.w	r3, [r3]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	4413      	add	r3, r2
 8001852:	b2db      	uxtb	r3, r3
 8001854:	b25a      	sxtb	r2, r3
 8001856:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <display_process+0x21c>)
 8001858:	701a      	strb	r2, [r3, #0]
		if (enc_out1<0)  {  enc_out1=menu_title_count; }
 800185a:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <display_process+0x21c>)
 800185c:	f993 3000 	ldrsb.w	r3, [r3]
 8001860:	2b00      	cmp	r3, #0
 8001862:	da04      	bge.n	800186e <display_process+0x1aa>
 8001864:	4b1f      	ldr	r3, [pc, #124]	; (80018e4 <display_process+0x220>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	b25a      	sxtb	r2, r3
 800186a:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <display_process+0x21c>)
 800186c:	701a      	strb	r2, [r3, #0]
		if (enc_out1>menu_title_count) enc_out1=0;
 800186e:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <display_process+0x21c>)
 8001870:	f993 3000 	ldrsb.w	r3, [r3]
 8001874:	461a      	mov	r2, r3
 8001876:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <display_process+0x220>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	dd02      	ble.n	8001884 <display_process+0x1c0>
 800187e:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <display_process+0x21c>)
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]
		enc2_add=2;
 8001884:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <display_process+0x204>)
 8001886:	2202      	movs	r2, #2
 8001888:	701a      	strb	r2, [r3, #0]

	}


	if ((disp_stepper==0) && (enc2_add==2))			// skip if no input for enc2 , also maybe wait till enc2 stopped moving
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <display_process+0x208>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d168      	bne.n	8001964 <display_process+0x2a0>
 8001892:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <display_process+0x204>)
 8001894:	f993 3000 	ldrsb.w	r3, [r3]
 8001898:	2b02      	cmp	r3, #2
 800189a:	d163      	bne.n	8001964 <display_process+0x2a0>
	{



	uint8_t crap_hold9=menu_title_lut[enc_out1]>>16;   // look up up menu_titles_final
 800189c:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <display_process+0x21c>)
 800189e:	f993 3000 	ldrsb.w	r3, [r3]
 80018a2:	461a      	mov	r2, r3
 80018a4:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <display_process+0x224>)
 80018a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018aa:	0c1b      	lsrs	r3, r3, #16
 80018ac:	72fb      	strb	r3, [r7, #11]
	if (crap_hold9==5) target_display=1;   // check if LFO.target is on cursor
 80018ae:	7afb      	ldrb	r3, [r7, #11]
 80018b0:	2b05      	cmp	r3, #5
 80018b2:	d11b      	bne.n	80018ec <display_process+0x228>
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <display_process+0x20c>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	701a      	strb	r2, [r3, #0]
 80018ba:	e01a      	b.n	80018f2 <display_process+0x22e>
 80018bc:	20002306 	.word	0x20002306
 80018c0:	200001b4 	.word	0x200001b4
 80018c4:	200022f6 	.word	0x200022f6
 80018c8:	200001b5 	.word	0x200001b5
 80018cc:	200001b6 	.word	0x200001b6
 80018d0:	20004007 	.word	0x20004007
 80018d4:	20004006 	.word	0x20004006
 80018d8:	200022f8 	.word	0x200022f8
 80018dc:	20003ff0 	.word	0x20003ff0
 80018e0:	200001ba 	.word	0x200001ba
 80018e4:	20003cef 	.word	0x20003cef
 80018e8:	20003cf0 	.word	0x20003cf0
	else target_display=0;
 80018ec:	4b73      	ldr	r3, [pc, #460]	; (8001abc <display_process+0x3f8>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]

	// fetch values for last line or cursor

	 memcpy(default_menu3+feedback_loc+5, *(menu_titles_final+crap_hold9),8);   // copy feedback data for reading,ok
 80018f2:	89bb      	ldrh	r3, [r7, #12]
 80018f4:	3305      	adds	r3, #5
 80018f6:	4a72      	ldr	r2, [pc, #456]	; (8001ac0 <display_process+0x3fc>)
 80018f8:	1898      	adds	r0, r3, r2
 80018fa:	7afb      	ldrb	r3, [r7, #11]
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4a71      	ldr	r2, [pc, #452]	; (8001ac4 <display_process+0x400>)
 8001900:	4413      	add	r3, r2
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2208      	movs	r2, #8
 8001906:	4619      	mov	r1, r3
 8001908:	f008 f8ec 	bl	8009ae4 <memcpy>
	 memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 800190c:	7afb      	ldrb	r3, [r7, #11]
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4a6c      	ldr	r2, [pc, #432]	; (8001ac4 <display_process+0x400>)
 8001912:	4413      	add	r3, r2
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	4b6c      	ldr	r3, [pc, #432]	; (8001ac8 <display_process+0x404>)
 8001918:	6810      	ldr	r0, [r2, #0]
 800191a:	6851      	ldr	r1, [r2, #4]
 800191c:	c303      	stmia	r3!, {r0, r1}

	 char temp_char[]="  ";
 800191e:	4a6b      	ldr	r2, [pc, #428]	; (8001acc <display_process+0x408>)
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	6812      	ldr	r2, [r2, #0]
 8001924:	4611      	mov	r1, r2
 8001926:	8019      	strh	r1, [r3, #0]
 8001928:	3302      	adds	r3, #2
 800192a:	0c12      	lsrs	r2, r2, #16
 800192c:	701a      	strb	r2, [r3, #0]
	 memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 800192e:	4b68      	ldr	r3, [pc, #416]	; (8001ad0 <display_process+0x40c>)
 8001930:	f993 3000 	ldrsb.w	r3, [r3]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	461a      	mov	r2, r3
 8001938:	4b66      	ldr	r3, [pc, #408]	; (8001ad4 <display_process+0x410>)
 800193a:	4413      	add	r3, r2
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	b29b      	uxth	r3, r3
 8001940:	80bb      	strh	r3, [r7, #4]
	 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	4618      	mov	r0, r3
 8001946:	f008 f89f 	bl	8009a88 <atoi>
 800194a:	4603      	mov	r3, r0
 800194c:	b2da      	uxtb	r2, r3
 800194e:	4b62      	ldr	r3, [pc, #392]	; (8001ad8 <display_process+0x414>)
 8001950:	701a      	strb	r2, [r3, #0]


	 menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8001952:	4b61      	ldr	r3, [pc, #388]	; (8001ad8 <display_process+0x414>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	4619      	mov	r1, r3
 8001958:	485b      	ldr	r0, [pc, #364]	; (8001ac8 <display_process+0x404>)
 800195a:	f7ff f8fd 	bl	8000b58 <menu_vars>
 800195e:	4603      	mov	r3, r0
 8001960:	4a5e      	ldr	r2, [pc, #376]	; (8001adc <display_process+0x418>)
 8001962:	6013      	str	r3, [r2, #0]

	    // grab value on ptr address , also write first char , ok

	}

	if ((disp_stepper==0) || (disp_stepper==1))   // repeat first character
 8001964:	4b5e      	ldr	r3, [pc, #376]	; (8001ae0 <display_process+0x41c>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <display_process+0x2b0>
 800196c:	4b5c      	ldr	r3, [pc, #368]	; (8001ae0 <display_process+0x41c>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d13a      	bne.n	80019ea <display_process+0x326>
	{


		uint16_t init_holder=init_b;
 8001974:	4b5b      	ldr	r3, [pc, #364]	; (8001ae4 <display_process+0x420>)
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	813b      	strh	r3, [r7, #8]

		init_b= menu_title_lut[enc_out1]&65535;    // this only grabs menu_title_count (&255)      , problem maybe here
 800197a:	4b55      	ldr	r3, [pc, #340]	; (8001ad0 <display_process+0x40c>)
 800197c:	f993 3000 	ldrsb.w	r3, [r3]
 8001980:	461a      	mov	r2, r3
 8001982:	4b59      	ldr	r3, [pc, #356]	; (8001ae8 <display_process+0x424>)
 8001984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001988:	b29a      	uxth	r2, r3
 800198a:	4b56      	ldr	r3, [pc, #344]	; (8001ae4 <display_process+0x420>)
 800198c:	801a      	strh	r2, [r3, #0]
	//	if (init_b>(feedback_loc+3) ) init_b=init_b+16;// skip feedback line
		if ((init_b&896)!=(init_holder&896)) {display_fill(); gfx_clear_flag=1; } // detect x over , not perfect
 800198e:	4b55      	ldr	r3, [pc, #340]	; (8001ae4 <display_process+0x420>)
 8001990:	881a      	ldrh	r2, [r3, #0]
 8001992:	893b      	ldrh	r3, [r7, #8]
 8001994:	4053      	eors	r3, r2
 8001996:	b29b      	uxth	r3, r3
 8001998:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800199c:	2b00      	cmp	r3, #0
 800199e:	d004      	beq.n	80019aa <display_process+0x2e6>
 80019a0:	f7ff fe4e 	bl	8001640 <display_fill>
 80019a4:	4b51      	ldr	r3, [pc, #324]	; (8001aec <display_process+0x428>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	701a      	strb	r2, [r3, #0]

	lcd_out3=*menu_vars_var;
 80019aa:	4b4c      	ldr	r3, [pc, #304]	; (8001adc <display_process+0x418>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	4b4f      	ldr	r3, [pc, #316]	; (8001af0 <display_process+0x42c>)
 80019b4:	801a      	strh	r2, [r3, #0]
	default_menu3[init_b]=((lcd_out3&255)>>4)+48; lcd_temp=lcd_out3&127; enc_dir=lcd_temp;       } // force enc_dir
 80019b6:	4b4e      	ldr	r3, [pc, #312]	; (8001af0 <display_process+0x42c>)
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	111b      	asrs	r3, r3, #4
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	4a47      	ldr	r2, [pc, #284]	; (8001ae4 <display_process+0x420>)
 80019c6:	8812      	ldrh	r2, [r2, #0]
 80019c8:	3330      	adds	r3, #48	; 0x30
 80019ca:	b2d9      	uxtb	r1, r3
 80019cc:	4b3c      	ldr	r3, [pc, #240]	; (8001ac0 <display_process+0x3fc>)
 80019ce:	5499      	strb	r1, [r3, r2]
 80019d0:	4b47      	ldr	r3, [pc, #284]	; (8001af0 <display_process+0x42c>)
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	4b45      	ldr	r3, [pc, #276]	; (8001af4 <display_process+0x430>)
 80019de:	701a      	strb	r2, [r3, #0]
 80019e0:	4b44      	ldr	r3, [pc, #272]	; (8001af4 <display_process+0x430>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	b21a      	sxth	r2, r3
 80019e6:	4b44      	ldr	r3, [pc, #272]	; (8001af8 <display_process+0x434>)
 80019e8:	801a      	strh	r2, [r3, #0]

	if (disp_stepper==11) {default_menu3[feedback_loc+13]=menu_index_list[enc_out1<<1];   	default_menu3[feedback_loc+14]=menu_index_list[(enc_out1<<1)+1];}   // index display
 80019ea:	4b3d      	ldr	r3, [pc, #244]	; (8001ae0 <display_process+0x41c>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b0b      	cmp	r3, #11
 80019f0:	d114      	bne.n	8001a1c <display_process+0x358>
 80019f2:	4b37      	ldr	r3, [pc, #220]	; (8001ad0 <display_process+0x40c>)
 80019f4:	f993 3000 	ldrsb.w	r3, [r3]
 80019f8:	005a      	lsls	r2, r3, #1
 80019fa:	89bb      	ldrh	r3, [r7, #12]
 80019fc:	330d      	adds	r3, #13
 80019fe:	4935      	ldr	r1, [pc, #212]	; (8001ad4 <display_process+0x410>)
 8001a00:	5c89      	ldrb	r1, [r1, r2]
 8001a02:	4a2f      	ldr	r2, [pc, #188]	; (8001ac0 <display_process+0x3fc>)
 8001a04:	54d1      	strb	r1, [r2, r3]
 8001a06:	4b32      	ldr	r3, [pc, #200]	; (8001ad0 <display_process+0x40c>)
 8001a08:	f993 3000 	ldrsb.w	r3, [r3]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	89bb      	ldrh	r3, [r7, #12]
 8001a12:	330e      	adds	r3, #14
 8001a14:	492f      	ldr	r1, [pc, #188]	; (8001ad4 <display_process+0x410>)
 8001a16:	5c89      	ldrb	r1, [r1, r2]
 8001a18:	4a29      	ldr	r2, [pc, #164]	; (8001ac0 <display_process+0x3fc>)
 8001a1a:	54d1      	strb	r1, [r2, r3]

	if ((target_display) &&   (disp_stepper==11))      // write LFO.target display
 8001a1c:	4b27      	ldr	r3, [pc, #156]	; (8001abc <display_process+0x3f8>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d019      	beq.n	8001a58 <display_process+0x394>
 8001a24:	4b2e      	ldr	r3, [pc, #184]	; (8001ae0 <display_process+0x41c>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b0b      	cmp	r3, #11
 8001a2a:	d115      	bne.n	8001a58 <display_process+0x394>
	{
		uint8_t target_tmp1=*menu_vars_var ;
 8001a2c:	4b2b      	ldr	r3, [pc, #172]	; (8001adc <display_process+0x418>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	73fb      	strb	r3, [r7, #15]
		if (target_tmp1>26) target_tmp1=26;    // check in case
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
 8001a36:	2b1a      	cmp	r3, #26
 8001a38:	d901      	bls.n	8001a3e <display_process+0x37a>
 8001a3a:	231a      	movs	r3, #26
 8001a3c:	73fb      	strb	r3, [r7, #15]
		memcpy(default_menu3+feedback_loc+12, *(menu_titles_final+target_tmp1),7);  // copy info for LFO
 8001a3e:	89bb      	ldrh	r3, [r7, #12]
 8001a40:	330c      	adds	r3, #12
 8001a42:	4a1f      	ldr	r2, [pc, #124]	; (8001ac0 <display_process+0x3fc>)
 8001a44:	1898      	adds	r0, r3, r2
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4a1e      	ldr	r2, [pc, #120]	; (8001ac4 <display_process+0x400>)
 8001a4c:	4413      	add	r3, r2
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2207      	movs	r2, #7
 8001a52:	4619      	mov	r1, r3
 8001a54:	f008 f846 	bl	8009ae4 <memcpy>

		 		 	}

	if (disp_stepper==1)  gfx_send_cursor=(init_b>>4)&7 ;   //send cursor line
 8001a58:	4b21      	ldr	r3, [pc, #132]	; (8001ae0 <display_process+0x41c>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d109      	bne.n	8001a74 <display_process+0x3b0>
 8001a60:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <display_process+0x420>)
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	091b      	lsrs	r3, r3, #4
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	4b22      	ldr	r3, [pc, #136]	; (8001afc <display_process+0x438>)
 8001a72:	701a      	strb	r2, [r3, #0]
	if (disp_stepper==2)  {
 8001a74:	4b1a      	ldr	r3, [pc, #104]	; (8001ae0 <display_process+0x41c>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d11a      	bne.n	8001ab2 <display_process+0x3ee>

		default_menu3[feedback_loc+18]=potSource[380]+48;
 8001a7c:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <display_process+0x43c>)
 8001a7e:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
 8001a82:	89bb      	ldrh	r3, [r7, #12]
 8001a84:	3312      	adds	r3, #18
 8001a86:	3230      	adds	r2, #48	; 0x30
 8001a88:	b2d1      	uxtb	r1, r2
 8001a8a:	4a0d      	ldr	r2, [pc, #52]	; (8001ac0 <display_process+0x3fc>)
 8001a8c:	54d1      	strb	r1, [r2, r3]
		default_menu3[feedback_loc+19]=potSource[381]+48; default_menu3[feedback_loc+20]=potSource[382]+48; }  // write this straight after start ,ok
 8001a8e:	4b1c      	ldr	r3, [pc, #112]	; (8001b00 <display_process+0x43c>)
 8001a90:	f893 217d 	ldrb.w	r2, [r3, #381]	; 0x17d
 8001a94:	89bb      	ldrh	r3, [r7, #12]
 8001a96:	3313      	adds	r3, #19
 8001a98:	3230      	adds	r2, #48	; 0x30
 8001a9a:	b2d1      	uxtb	r1, r2
 8001a9c:	4a08      	ldr	r2, [pc, #32]	; (8001ac0 <display_process+0x3fc>)
 8001a9e:	54d1      	strb	r1, [r2, r3]
 8001aa0:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <display_process+0x43c>)
 8001aa2:	f893 217e 	ldrb.w	r2, [r3, #382]	; 0x17e
 8001aa6:	89bb      	ldrh	r3, [r7, #12]
 8001aa8:	3314      	adds	r3, #20
 8001aaa:	3230      	adds	r2, #48	; 0x30
 8001aac:	b2d1      	uxtb	r1, r2
 8001aae:	4a04      	ldr	r2, [pc, #16]	; (8001ac0 <display_process+0x3fc>)
 8001ab0:	54d1      	strb	r1, [r2, r3]


}   // end o void
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20004007 	.word	0x20004007
 8001ac0:	2000400c 	.word	0x2000400c
 8001ac4:	20000668 	.word	0x20000668
 8001ac8:	20003ff4 	.word	0x20003ff4
 8001acc:	08009dec 	.word	0x08009dec
 8001ad0:	200001ba 	.word	0x200001ba
 8001ad4:	20003ef0 	.word	0x20003ef0
 8001ad8:	20003ffc 	.word	0x20003ffc
 8001adc:	20003ff0 	.word	0x20003ff0
 8001ae0:	200001b6 	.word	0x200001b6
 8001ae4:	20002306 	.word	0x20002306
 8001ae8:	20003cf0 	.word	0x20003cf0
 8001aec:	20004009 	.word	0x20004009
 8001af0:	20002c60 	.word	0x20002c60
 8001af4:	20004006 	.word	0x20004006
 8001af8:	200022f8 	.word	0x200022f8
 8001afc:	20002c2d 	.word	0x20002c2d
 8001b00:	20000ce8 	.word	0x20000ce8

08001b04 <displayBuffer2>:





void displayBuffer2 (void){       // use only writing characters  ,nothing more  , init_b for selecting location
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
														//when scrolling maybe use this only until  settled
														// start 2*8 bit then squeeze in 20*6 bit characters

	store_c= (default_menu3[init_b]-47)&127 ;    // grab char from mem
 8001b0a:	4b3d      	ldr	r3, [pc, #244]	; (8001c00 <displayBuffer2+0xfc>)
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4b3c      	ldr	r3, [pc, #240]	; (8001c04 <displayBuffer2+0x100>)
 8001b12:	5c9b      	ldrb	r3, [r3, r2]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	3b2f      	subs	r3, #47	; 0x2f
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	4b39      	ldr	r3, [pc, #228]	; (8001c08 <displayBuffer2+0x104>)
 8001b22:	801a      	strh	r2, [r3, #0]
	uint8_t init_bx=init_b&127;
 8001b24:	4b36      	ldr	r3, [pc, #216]	; (8001c00 <displayBuffer2+0xfc>)
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b2e:	71bb      	strb	r3, [r7, #6]

	uint8_t d_count;
uint8_t init_x=(init_bx & 15)+2 ;    // +2 important  2-17 hor char pos
 8001b30:	79bb      	ldrb	r3, [r7, #6]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	3302      	adds	r3, #2
 8001b3a:	717b      	strb	r3, [r7, #5]
uint8_t init_x2=(init_bx>>4)<<3 ;  // 0,8,16-64  vertical pos  gfx
 8001b3c:	79bb      	ldrb	r3, [r7, #6]
 8001b3e:	091b      	lsrs	r3, r3, #4
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	713b      	strb	r3, [r7, #4]
uint16_t init_y=((init_x2)*18)+init_x;   //   works ok  8  bit  0-1152
 8001b46:	793b      	ldrb	r3, [r7, #4]
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	00d2      	lsls	r2, r2, #3
 8001b4e:	4413      	add	r3, r2
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	797b      	ldrb	r3, [r7, #5]
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	4413      	add	r3, r2
 8001b5a:	807b      	strh	r3, [r7, #2]
uint16_t store_x;

store_x=(store_c*8);  // i line characters , might shrink it and use extr for other  visuals , old code but keep for now
 8001b5c:	4b2a      	ldr	r3, [pc, #168]	; (8001c08 <displayBuffer2+0x104>)
 8001b5e:	881b      	ldrh	r3, [r3, #0]
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	803b      	strh	r3, [r7, #0]


		if ( (disp_stepper==0))     // blinker for cursor character only  , might just flip the whole last line from prev tables then its x4 faster
 8001b64:	4b29      	ldr	r3, [pc, #164]	; (8001c0c <displayBuffer2+0x108>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d11a      	bne.n	8001ba2 <displayBuffer2+0x9e>
			for (d_count=0;d_count<8;d_count++){
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	71fb      	strb	r3, [r7, #7]
 8001b70:	e013      	b.n	8001b9a <displayBuffer2+0x96>

				gfx_ram[init_y+(d_count*18) ]= gfx_char[d_count+store_x]^127; //write character to ram ,should be elsewhere , blank is correct
 8001b72:	79fa      	ldrb	r2, [r7, #7]
 8001b74:	883b      	ldrh	r3, [r7, #0]
 8001b76:	4413      	add	r3, r2
 8001b78:	4a25      	ldr	r2, [pc, #148]	; (8001c10 <displayBuffer2+0x10c>)
 8001b7a:	5cd1      	ldrb	r1, [r2, r3]
 8001b7c:	8878      	ldrh	r0, [r7, #2]
 8001b7e:	79fa      	ldrb	r2, [r7, #7]
 8001b80:	4613      	mov	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	4413      	add	r3, r2
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	4403      	add	r3, r0
 8001b8a:	f081 027f 	eor.w	r2, r1, #127	; 0x7f
 8001b8e:	b2d1      	uxtb	r1, r2
 8001b90:	4a20      	ldr	r2, [pc, #128]	; (8001c14 <displayBuffer2+0x110>)
 8001b92:	54d1      	strb	r1, [r2, r3]
			for (d_count=0;d_count<8;d_count++){
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	3301      	adds	r3, #1
 8001b98:	71fb      	strb	r3, [r7, #7]
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	2b07      	cmp	r3, #7
 8001b9e:	d9e8      	bls.n	8001b72 <displayBuffer2+0x6e>
 8001ba0:	e016      	b.n	8001bd0 <displayBuffer2+0xcc>
			}

		else for (d_count=0;d_count<8;d_count++){
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	71fb      	strb	r3, [r7, #7]
 8001ba6:	e010      	b.n	8001bca <displayBuffer2+0xc6>
			gfx_ram[init_y+(d_count*18) ]= gfx_char[d_count+store_x]; //write character to ram ,should be elsewhere , seems affected by later stufff
 8001ba8:	79fa      	ldrb	r2, [r7, #7]
 8001baa:	883b      	ldrh	r3, [r7, #0]
 8001bac:	18d1      	adds	r1, r2, r3
 8001bae:	8878      	ldrh	r0, [r7, #2]
 8001bb0:	79fa      	ldrb	r2, [r7, #7]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4403      	add	r3, r0
 8001bbc:	4a14      	ldr	r2, [pc, #80]	; (8001c10 <displayBuffer2+0x10c>)
 8001bbe:	5c51      	ldrb	r1, [r2, r1]
 8001bc0:	4a14      	ldr	r2, [pc, #80]	; (8001c14 <displayBuffer2+0x110>)
 8001bc2:	54d1      	strb	r1, [r2, r3]
		else for (d_count=0;d_count<8;d_count++){
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	71fb      	strb	r3, [r7, #7]
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	2b07      	cmp	r3, #7
 8001bce:	d9eb      	bls.n	8001ba8 <displayBuffer2+0xa4>
		}

if (disp_stepper==17) {disp_stepper=0;enc2_add=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8001bd0:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <displayBuffer2+0x108>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b11      	cmp	r3, #17
 8001bd6:	d106      	bne.n	8001be6 <displayBuffer2+0xe2>
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <displayBuffer2+0x108>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <displayBuffer2+0x114>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	701a      	strb	r2, [r3, #0]


}    // displayBuffer2
 8001be4:	e005      	b.n	8001bf2 <displayBuffer2+0xee>
if (disp_stepper==17) {disp_stepper=0;enc2_add=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8001be6:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <displayBuffer2+0x108>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	3301      	adds	r3, #1
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <displayBuffer2+0x108>)
 8001bf0:	701a      	strb	r2, [r3, #0]
}    // displayBuffer2
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	20002306 	.word	0x20002306
 8001c04:	2000400c 	.word	0x2000400c
 8001c08:	20000e80 	.word	0x20000e80
 8001c0c:	200001b6 	.word	0x200001b6
 8001c10:	200006d8 	.word	0x200006d8
 8001c14:	200027a8 	.word	0x200027a8
 8001c18:	200001b5 	.word	0x200001b5
 8001c1c:	00000000 	.word	0x00000000

08001c20 <sampling>:
void sampling(void){						// 330 atm or 8.5ms
 8001c20:	b5b0      	push	{r4, r5, r7, lr}
 8001c22:	f5ad 5d84 	sub.w	sp, sp, #4224	; 0x1080
 8001c26:	af00      	add	r7, sp, #0
//	if (time_proc>580) time_final=time_proc;


//time_proc=0;

	time_proc=0;
 8001c28:	4b97      	ldr	r3, [pc, #604]	; (8001e88 <sampling+0x268>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	801a      	strh	r2, [r3, #0]

uint8_t mask_i;


bank_write=0;
 8001c2e:	4b97      	ldr	r3, [pc, #604]	; (8001e8c <sampling+0x26c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	801a      	strh	r2, [r3, #0]
//time_proc=0;   //millis

//adc_read();
//uint16_t isr_tempo=isrMask; // get tempo value
sample_pointB=sample_pointD;
 8001c34:	4b96      	ldr	r3, [pc, #600]	; (8001e90 <sampling+0x270>)
 8001c36:	881a      	ldrh	r2, [r3, #0]
 8001c38:	4b96      	ldr	r3, [pc, #600]	; (8001e94 <sampling+0x274>)
 8001c3a:	801a      	strh	r2, [r3, #0]
unsigned short tempo_start=0;  // enabled when i=isrMask;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001c42:	f102 021c 	add.w	r2, r2, #28
 8001c46:	8013      	strh	r3, [r2, #0]

uint16_t i_total;
uint16_t tempo_mod=tempo_lut[seq.tempo];  // set tempo,speed from lut 40-200bpm  ,changed to 4x for note lenght
 8001c48:	4b93      	ldr	r3, [pc, #588]	; (8001e98 <sampling+0x278>)
 8001c4a:	785b      	ldrb	r3, [r3, #1]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b93      	ldr	r3, [pc, #588]	; (8001e9c <sampling+0x27c>)
 8001c50:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001c54:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001c58:	f102 020c 	add.w	r2, r2, #12
 8001c5c:	8013      	strh	r3, [r2, #0]

uint8_t l;			// 35.002khz(0.02857ms) sample, 1 sample is temp count (16x=0.00045712) , *16=1 note ,at 300 (437bpm),(1/(0.00002857*tempo count*16)=1beat in s
float freq_temp;	// (1/(bpm/60)) /0.00045712=tempo count ie 1093.8 for 120bpm
float freq2_temp;

float tempo_sync=16384/((tempo_mod*16)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80
 8001c5e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001c62:	f103 030c 	add.w	r3, r3, #12
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	da00      	bge.n	8001c6e <sampling+0x4e>
 8001c6c:	331f      	adds	r3, #31
 8001c6e:	115b      	asrs	r3, r3, #5
 8001c70:	461a      	mov	r2, r3
 8001c72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c76:	fb93 f3f2 	sdiv	r3, r3, r2
 8001c7a:	ee07 3a90 	vmov	s15, r3
 8001c7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c82:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001c86:	f103 0308 	add.w	r3, r3, #8
 8001c8a:	edc3 7a00 	vstr	s15, [r3]
tempo_sync=tempo_sync/80;  // bit weird her , this is adsr !
 8001c8e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001c92:	f103 0308 	add.w	r3, r3, #8
 8001c96:	ed93 7a00 	vldr	s14, [r3]
 8001c9a:	eddf 6a81 	vldr	s13, [pc, #516]	; 8001ea0 <sampling+0x280>
 8001c9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ca2:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001ca6:	f103 0308 	add.w	r3, r3, #8
 8001caa:	edc3 7a00 	vstr	s15, [r3]

uint32_t  note_toggler[17]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //records note position on 0-512   using a bit
 8001cae:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001cb2:	f103 0318 	add.w	r3, r3, #24
 8001cb6:	2244      	movs	r2, #68	; 0x44
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f007 ff20 	bl	8009b00 <memset>
for (i=0;i<16;i++) {  note_toggler[i]=0; }
 8001cc0:	4b78      	ldr	r3, [pc, #480]	; (8001ea4 <sampling+0x284>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	801a      	strh	r2, [r3, #0]
 8001cc6:	e00e      	b.n	8001ce6 <sampling+0xc6>
 8001cc8:	4b76      	ldr	r3, [pc, #472]	; (8001ea4 <sampling+0x284>)
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001cd2:	443b      	add	r3, r7
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f843 2c68 	str.w	r2, [r3, #-104]
 8001cda:	4b72      	ldr	r3, [pc, #456]	; (8001ea4 <sampling+0x284>)
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	4b70      	ldr	r3, [pc, #448]	; (8001ea4 <sampling+0x284>)
 8001ce4:	801a      	strh	r2, [r3, #0]
 8001ce6:	4b6f      	ldr	r3, [pc, #444]	; (8001ea4 <sampling+0x284>)
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	2b0f      	cmp	r3, #15
 8001cec:	d9ec      	bls.n	8001cc8 <sampling+0xa8>

//lcd_out3=menu_page[1]; // still goes to 15

//lcd_out3=adc_values[0]+adc_values[1]+adc_values[2]; // 3 digit read out , works ok,, [2] works but thats it
//lcd_out3=lcd_out3+180;
potSource[380]=(lcd_out3/100);  // still works   , potsource ref is located in feedback line var  ,was sendin x16 values
 8001cee:	4b6e      	ldr	r3, [pc, #440]	; (8001ea8 <sampling+0x288>)
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	4a6e      	ldr	r2, [pc, #440]	; (8001eac <sampling+0x28c>)
 8001cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf8:	095b      	lsrs	r3, r3, #5
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	4b6c      	ldr	r3, [pc, #432]	; (8001eb0 <sampling+0x290>)
 8001d00:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
potSource[381]=((lcd_out3 %100)/10);		 // 0-160 to 0-10
 8001d04:	4b68      	ldr	r3, [pc, #416]	; (8001ea8 <sampling+0x288>)
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	4a68      	ldr	r2, [pc, #416]	; (8001eac <sampling+0x28c>)
 8001d0a:	fba2 1203 	umull	r1, r2, r2, r3
 8001d0e:	0952      	lsrs	r2, r2, #5
 8001d10:	2164      	movs	r1, #100	; 0x64
 8001d12:	fb01 f202 	mul.w	r2, r1, r2
 8001d16:	1a9b      	subs	r3, r3, r2
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	4a66      	ldr	r2, [pc, #408]	; (8001eb4 <sampling+0x294>)
 8001d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d20:	08db      	lsrs	r3, r3, #3
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	4b62      	ldr	r3, [pc, #392]	; (8001eb0 <sampling+0x290>)
 8001d28:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
potSource[382]=(lcd_out3%10);
 8001d2c:	4b5e      	ldr	r3, [pc, #376]	; (8001ea8 <sampling+0x288>)
 8001d2e:	881a      	ldrh	r2, [r3, #0]
 8001d30:	4b60      	ldr	r3, [pc, #384]	; (8001eb4 <sampling+0x294>)
 8001d32:	fba3 1302 	umull	r1, r3, r3, r2
 8001d36:	08d9      	lsrs	r1, r3, #3
 8001d38:	460b      	mov	r3, r1
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	4b5a      	ldr	r3, [pc, #360]	; (8001eb0 <sampling+0x290>)
 8001d48:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e



note_holdA=0;
 8001d4c:	4b5a      	ldr	r3, [pc, #360]	; (8001eb8 <sampling+0x298>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	701a      	strb	r2, [r3, #0]


//sample_Accu2=0;
//printf (adc_values[0]," ",adc_values[1]," ",adc_values[2]," ","crap \n");
// some good phasin and delays here
uint8_t cross_fade[2]={0,0};
 8001d52:	2300      	movs	r3, #0
 8001d54:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001d58:	f102 0214 	add.w	r2, r2, #20
 8001d5c:	8013      	strh	r3, [r2, #0]
uint8_t fader[17]={0,1,5,11,19,28,39,51,64,76,88,99,108,116,122,126,127}; // sine curve for cross fade
 8001d5e:	4b57      	ldr	r3, [pc, #348]	; (8001ebc <sampling+0x29c>)
 8001d60:	f507 5480 	add.w	r4, r7, #4096	; 0x1000
 8001d64:	461d      	mov	r5, r3
 8001d66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d6a:	682b      	ldr	r3, [r5, #0]
 8001d6c:	7023      	strb	r3, [r4, #0]
adc_values[2]= 15; //force for now
 8001d6e:	4b54      	ldr	r3, [pc, #336]	; (8001ec0 <sampling+0x2a0>)
 8001d70:	220f      	movs	r2, #15
 8001d72:	809a      	strh	r2, [r3, #4]
if(adc_values[2]&16)     	{cross_fade[1]=127-fader[adc_values[2]&15]; cross_fade[2]=127;}  else {cross_fade[2]=fader[adc_values[2]&15]; cross_fade[1]=127;} //calculate crossfader
 8001d74:	4b52      	ldr	r3, [pc, #328]	; (8001ec0 <sampling+0x2a0>)
 8001d76:	889b      	ldrh	r3, [r3, #4]
 8001d78:	f003 0310 	and.w	r3, r3, #16
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d017      	beq.n	8001db0 <sampling+0x190>
 8001d80:	4b4f      	ldr	r3, [pc, #316]	; (8001ec0 <sampling+0x2a0>)
 8001d82:	889b      	ldrh	r3, [r3, #4]
 8001d84:	f003 030f 	and.w	r3, r3, #15
 8001d88:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001d8c:	443b      	add	r3, r7
 8001d8e:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 8001d92:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001d9c:	f102 0215 	add.w	r2, r2, #21
 8001da0:	7013      	strb	r3, [r2, #0]
 8001da2:	237f      	movs	r3, #127	; 0x7f
 8001da4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001da8:	f102 0216 	add.w	r2, r2, #22
 8001dac:	7013      	strb	r3, [r2, #0]
 8001dae:	e013      	b.n	8001dd8 <sampling+0x1b8>
 8001db0:	4b43      	ldr	r3, [pc, #268]	; (8001ec0 <sampling+0x2a0>)
 8001db2:	889b      	ldrh	r3, [r3, #4]
 8001db4:	f003 030f 	and.w	r3, r3, #15
 8001db8:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001dbc:	443b      	add	r3, r7
 8001dbe:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 8001dc2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001dc6:	f102 0216 	add.w	r2, r2, #22
 8001dca:	7013      	strb	r3, [r2, #0]
 8001dcc:	237f      	movs	r3, #127	; 0x7f
 8001dce:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001dd2:	f102 0215 	add.w	r2, r2, #21
 8001dd6:	7013      	strb	r3, [r2, #0]

// doing lfo calc here as it is slow only for now
////////////////////adsr/////////////////////////////////////////
if	 (ADSR[0].attack_trigger==0) {		adsr_att=(161-ADSR[0].attack ) *0.02 ; // for now all of them from this only , speed , 0-16  // rarely read
 8001dd8:	4b3a      	ldr	r3, [pc, #232]	; (8001ec4 <sampling+0x2a4>)
 8001dda:	791b      	ldrb	r3, [r3, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d146      	bne.n	8001e6e <sampling+0x24e>
 8001de0:	4b38      	ldr	r3, [pc, #224]	; (8001ec4 <sampling+0x2a4>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe fc79 	bl	80006e0 <__aeabi_i2d>
 8001dee:	a322      	add	r3, pc, #136	; (adr r3, 8001e78 <sampling+0x258>)
 8001df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df4:	f7fe f9f8 	bl	80001e8 <__aeabi_dmul>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4619      	mov	r1, r3
 8001e00:	f7fe fcd8 	bl	80007b4 <__aeabi_d2f>
 8001e04:	4603      	mov	r3, r0
 8001e06:	4a30      	ldr	r2, [pc, #192]	; (8001ec8 <sampling+0x2a8>)
 8001e08:	6013      	str	r3, [r2, #0]
ADSR[0].sustain_data=((161-ADSR[0].decay)*0.01);  // length and level this is ok is running 1/16 ish				ADSR[0].attack_data=ADSR[0].attack_data-ADSR[0].sustain_data;
 8001e0a:	4b2e      	ldr	r3, [pc, #184]	; (8001ec4 <sampling+0x2a4>)
 8001e0c:	785b      	ldrb	r3, [r3, #1]
 8001e0e:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fc64 	bl	80006e0 <__aeabi_i2d>
 8001e18:	a319      	add	r3, pc, #100	; (adr r3, 8001e80 <sampling+0x260>)
 8001e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1e:	f7fe f9e3 	bl	80001e8 <__aeabi_dmul>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4610      	mov	r0, r2
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f7fe fcc3 	bl	80007b4 <__aeabi_d2f>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	4a24      	ldr	r2, [pc, #144]	; (8001ec4 <sampling+0x2a4>)
 8001e32:	6113      	str	r3, [r2, #16]
adsr_att=adsr_att*adsr_att;
 8001e34:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <sampling+0x2a8>)
 8001e36:	ed93 7a00 	vldr	s14, [r3]
 8001e3a:	4b23      	ldr	r3, [pc, #140]	; (8001ec8 <sampling+0x2a8>)
 8001e3c:	edd3 7a00 	vldr	s15, [r3]
 8001e40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e44:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <sampling+0x2a8>)
 8001e46:	edc3 7a00 	vstr	s15, [r3]
ADSR[0].sustain_data=ADSR[0].sustain_data*ADSR[0].sustain_data;
 8001e4a:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <sampling+0x2a4>)
 8001e4c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001e50:	4b1c      	ldr	r3, [pc, #112]	; (8001ec4 <sampling+0x2a4>)
 8001e52:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e5a:	4b1a      	ldr	r3, [pc, #104]	; (8001ec4 <sampling+0x2a4>)
 8001e5c:	edc3 7a04 	vstr	s15, [r3, #16]

ADSR[0].attack_trigger=1;
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <sampling+0x2a4>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	711a      	strb	r2, [r3, #4]
ADSR[0].attack_data=0;
 8001e66:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <sampling+0x2a4>)
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
}

//float ADSR[0].buffer_temp;    // adsr

for (i=0;i<256;i++) {
 8001e6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <sampling+0x284>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	801a      	strh	r2, [r3, #0]
 8001e74:	e0ea      	b.n	800204c <sampling+0x42c>
 8001e76:	bf00      	nop
 8001e78:	47ae147b 	.word	0x47ae147b
 8001e7c:	3f947ae1 	.word	0x3f947ae1
 8001e80:	47ae147b 	.word	0x47ae147b
 8001e84:	3f847ae1 	.word	0x3f847ae1
 8001e88:	2000307c 	.word	0x2000307c
 8001e8c:	200001b2 	.word	0x200001b2
 8001e90:	200016ae 	.word	0x200016ae
 8001e94:	20000ea2 	.word	0x20000ea2
 8001e98:	20003cbc 	.word	0x20003cbc
 8001e9c:	20002664 	.word	0x20002664
 8001ea0:	42a00000 	.word	0x42a00000
 8001ea4:	20000ea4 	.word	0x20000ea4
 8001ea8:	20002c60 	.word	0x20002c60
 8001eac:	51eb851f 	.word	0x51eb851f
 8001eb0:	20000ce8 	.word	0x20000ce8
 8001eb4:	cccccccd 	.word	0xcccccccd
 8001eb8:	200022d0 	.word	0x200022d0
 8001ebc:	08009df0 	.word	0x08009df0
 8001ec0:	200001a8 	.word	0x200001a8
 8001ec4:	200031c0 	.word	0x200031c0
 8001ec8:	20002c5c 	.word	0x20002c5c

	if     (ADSR[0].attack_data<1000)    																		{ADSR[0].attack_data=ADSR[0].attack_data+adsr_att;					ADSR[0].buffer_temp=ADSR[0].attack_data; } //0-1000
 8001ecc:	4b84      	ldr	r3, [pc, #528]	; (80020e0 <sampling+0x4c0>)
 8001ece:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ed2:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80020e4 <sampling+0x4c4>
 8001ed6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ede:	d50e      	bpl.n	8001efe <sampling+0x2de>
 8001ee0:	4b7f      	ldr	r3, [pc, #508]	; (80020e0 <sampling+0x4c0>)
 8001ee2:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ee6:	4b80      	ldr	r3, [pc, #512]	; (80020e8 <sampling+0x4c8>)
 8001ee8:	edd3 7a00 	vldr	s15, [r3]
 8001eec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ef0:	4b7b      	ldr	r3, [pc, #492]	; (80020e0 <sampling+0x4c0>)
 8001ef2:	edc3 7a02 	vstr	s15, [r3, #8]
 8001ef6:	4b7a      	ldr	r3, [pc, #488]	; (80020e0 <sampling+0x4c0>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	4a79      	ldr	r2, [pc, #484]	; (80020e0 <sampling+0x4c0>)
 8001efc:	6193      	str	r3, [r2, #24]
	 if  ((ADSR[0].attack_data<1500)  && (ADSR[0].attack_data>999))  					{ADSR[0].attack_data=ADSR[0].attack_data+adsr_att;					ADSR[0].buffer_temp=1500-(ADSR[0].attack_data-500);  }  // 1000-500
 8001efe:	4b78      	ldr	r3, [pc, #480]	; (80020e0 <sampling+0x4c0>)
 8001f00:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f04:	ed9f 7a79 	vldr	s14, [pc, #484]	; 80020ec <sampling+0x4cc>
 8001f08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f10:	d522      	bpl.n	8001f58 <sampling+0x338>
 8001f12:	4b73      	ldr	r3, [pc, #460]	; (80020e0 <sampling+0x4c0>)
 8001f14:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f18:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80020f0 <sampling+0x4d0>
 8001f1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f24:	dd18      	ble.n	8001f58 <sampling+0x338>
 8001f26:	4b6e      	ldr	r3, [pc, #440]	; (80020e0 <sampling+0x4c0>)
 8001f28:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f2c:	4b6e      	ldr	r3, [pc, #440]	; (80020e8 <sampling+0x4c8>)
 8001f2e:	edd3 7a00 	vldr	s15, [r3]
 8001f32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f36:	4b6a      	ldr	r3, [pc, #424]	; (80020e0 <sampling+0x4c0>)
 8001f38:	edc3 7a02 	vstr	s15, [r3, #8]
 8001f3c:	4b68      	ldr	r3, [pc, #416]	; (80020e0 <sampling+0x4c0>)
 8001f3e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f42:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80020f4 <sampling+0x4d4>
 8001f46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f4a:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80020ec <sampling+0x4cc>
 8001f4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f52:	4b63      	ldr	r3, [pc, #396]	; (80020e0 <sampling+0x4c0>)
 8001f54:	edc3 7a06 	vstr	s15, [r3, #24]
	 if ((ADSR[0].attack_data>1499)   && 		(ADSR[0].attack_data<2000)) 			{		ADSR[0].buffer_temp=500; 	ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data;}
 8001f58:	4b61      	ldr	r3, [pc, #388]	; (80020e0 <sampling+0x4c0>)
 8001f5a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f5e:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80020f8 <sampling+0x4d8>
 8001f62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f6a:	dd17      	ble.n	8001f9c <sampling+0x37c>
 8001f6c:	4b5c      	ldr	r3, [pc, #368]	; (80020e0 <sampling+0x4c0>)
 8001f6e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f72:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80020fc <sampling+0x4dc>
 8001f76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7e:	d50d      	bpl.n	8001f9c <sampling+0x37c>
 8001f80:	4b57      	ldr	r3, [pc, #348]	; (80020e0 <sampling+0x4c0>)
 8001f82:	4a5f      	ldr	r2, [pc, #380]	; (8002100 <sampling+0x4e0>)
 8001f84:	619a      	str	r2, [r3, #24]
 8001f86:	4b56      	ldr	r3, [pc, #344]	; (80020e0 <sampling+0x4c0>)
 8001f88:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f8c:	4b54      	ldr	r3, [pc, #336]	; (80020e0 <sampling+0x4c0>)
 8001f8e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f96:	4b52      	ldr	r3, [pc, #328]	; (80020e0 <sampling+0x4c0>)
 8001f98:	edc3 7a02 	vstr	s15, [r3, #8]
	if ((ADSR[0].attack_data>1999)  &&  (ADSR[0].attack_data<2500)	)					{ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data	;	ADSR[0].buffer_temp=2500-ADSR[0].attack_data; } //500-0;
 8001f9c:	4b50      	ldr	r3, [pc, #320]	; (80020e0 <sampling+0x4c0>)
 8001f9e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fa2:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002104 <sampling+0x4e4>
 8001fa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fae:	dd1e      	ble.n	8001fee <sampling+0x3ce>
 8001fb0:	4b4b      	ldr	r3, [pc, #300]	; (80020e0 <sampling+0x4c0>)
 8001fb2:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fb6:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8002108 <sampling+0x4e8>
 8001fba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc2:	d514      	bpl.n	8001fee <sampling+0x3ce>
 8001fc4:	4b46      	ldr	r3, [pc, #280]	; (80020e0 <sampling+0x4c0>)
 8001fc6:	ed93 7a02 	vldr	s14, [r3, #8]
 8001fca:	4b45      	ldr	r3, [pc, #276]	; (80020e0 <sampling+0x4c0>)
 8001fcc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001fd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fd4:	4b42      	ldr	r3, [pc, #264]	; (80020e0 <sampling+0x4c0>)
 8001fd6:	edc3 7a02 	vstr	s15, [r3, #8]
 8001fda:	4b41      	ldr	r3, [pc, #260]	; (80020e0 <sampling+0x4c0>)
 8001fdc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fe0:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8002108 <sampling+0x4e8>
 8001fe4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fe8:	4b3d      	ldr	r3, [pc, #244]	; (80020e0 <sampling+0x4c0>)
 8001fea:	edc3 7a06 	vstr	s15, [r3, #24]
	if (ADSR[0].attack_data>3000)   																			{ADSR[0].buffer_temp=1; ADSR[0].attack_data=4000; }     // THE END
 8001fee:	4b3c      	ldr	r3, [pc, #240]	; (80020e0 <sampling+0x4c0>)
 8001ff0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ff4:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800210c <sampling+0x4ec>
 8001ff8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002000:	dd06      	ble.n	8002010 <sampling+0x3f0>
 8002002:	4b37      	ldr	r3, [pc, #220]	; (80020e0 <sampling+0x4c0>)
 8002004:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002008:	619a      	str	r2, [r3, #24]
 800200a:	4b35      	ldr	r3, [pc, #212]	; (80020e0 <sampling+0x4c0>)
 800200c:	4a40      	ldr	r2, [pc, #256]	; (8002110 <sampling+0x4f0>)
 800200e:	609a      	str	r2, [r3, #8]

adsr_lut[i]= ADSR[0].buffer_temp*0.001;
 8002010:	4b33      	ldr	r3, [pc, #204]	; (80020e0 <sampling+0x4c0>)
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe fb75 	bl	8000704 <__aeabi_f2d>
 800201a:	a32f      	add	r3, pc, #188	; (adr r3, 80020d8 <sampling+0x4b8>)
 800201c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002020:	f7fe f8e2 	bl	80001e8 <__aeabi_dmul>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	493a      	ldr	r1, [pc, #232]	; (8002114 <sampling+0x4f4>)
 800202a:	8809      	ldrh	r1, [r1, #0]
 800202c:	460c      	mov	r4, r1
 800202e:	4610      	mov	r0, r2
 8002030:	4619      	mov	r1, r3
 8002032:	f7fe fbbf 	bl	80007b4 <__aeabi_d2f>
 8002036:	4602      	mov	r2, r0
 8002038:	4937      	ldr	r1, [pc, #220]	; (8002118 <sampling+0x4f8>)
 800203a:	00a3      	lsls	r3, r4, #2
 800203c:	440b      	add	r3, r1
 800203e:	601a      	str	r2, [r3, #0]
for (i=0;i<256;i++) {
 8002040:	4b34      	ldr	r3, [pc, #208]	; (8002114 <sampling+0x4f4>)
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	3301      	adds	r3, #1
 8002046:	b29a      	uxth	r2, r3
 8002048:	4b32      	ldr	r3, [pc, #200]	; (8002114 <sampling+0x4f4>)
 800204a:	801a      	strh	r2, [r3, #0]
 800204c:	4b31      	ldr	r3, [pc, #196]	; (8002114 <sampling+0x4f4>)
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	2bff      	cmp	r3, #255	; 0xff
 8002052:	f67f af3b 	bls.w	8001ecc <sampling+0x2ac>


///////////////////////////////////////////////////////////////
uint8_t note_plain;

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002056:	4b2f      	ldr	r3, [pc, #188]	; (8002114 <sampling+0x4f4>)
 8002058:	2200      	movs	r2, #0
 800205a:	801a      	strh	r2, [r3, #0]
 800205c:	e370      	b.n	8002740 <sampling+0xb20>

	i_total=i+sample_pointB;
 800205e:	4b2d      	ldr	r3, [pc, #180]	; (8002114 <sampling+0x4f4>)
 8002060:	881a      	ldrh	r2, [r3, #0]
 8002062:	4b2e      	ldr	r3, [pc, #184]	; (800211c <sampling+0x4fc>)
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	4413      	add	r3, r2
 8002068:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800206c:	f102 0202 	add.w	r2, r2, #2
 8002070:	8013      	strh	r3, [r2, #0]
	sampling_position=i>>6;   //   0-8 steps
 8002072:	4b28      	ldr	r3, [pc, #160]	; (8002114 <sampling+0x4f4>)
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	099b      	lsrs	r3, r3, #6
 8002078:	b29b      	uxth	r3, r3
 800207a:	b2da      	uxtb	r2, r3
 800207c:	4b28      	ldr	r3, [pc, #160]	; (8002120 <sampling+0x500>)
 800207e:	701a      	strb	r2, [r3, #0]

	note_plain=seq.notes1[seq.pos & 7 ];
 8002080:	4b28      	ldr	r3, [pc, #160]	; (8002124 <sampling+0x504>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	4a26      	ldr	r2, [pc, #152]	; (8002124 <sampling+0x504>)
 800208a:	4413      	add	r3, r2
 800208c:	789b      	ldrb	r3, [r3, #2]
 800208e:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002092:	7013      	strb	r3, [r2, #0]
potValues[i&255]=potSource[i&255]>>4; //just to update values
 8002094:	4b1f      	ldr	r3, [pc, #124]	; (8002114 <sampling+0x4f4>)
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	4a23      	ldr	r2, [pc, #140]	; (8002128 <sampling+0x508>)
 800209c:	5cd2      	ldrb	r2, [r2, r3]
 800209e:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <sampling+0x4f4>)
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	0912      	lsrs	r2, r2, #4
 80020a6:	b2d1      	uxtb	r1, r2
 80020a8:	4a20      	ldr	r2, [pc, #128]	; (800212c <sampling+0x50c>)
 80020aa:	54d1      	strb	r1, [r2, r3]
	if (tempo_count>=tempo_mod) { next_isr=(next_isr+1)& 4095;tempo_count=0;  }  else {tempo_count++; }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 80020ac:	4b20      	ldr	r3, [pc, #128]	; (8002130 <sampling+0x510>)
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80020b4:	f102 020c 	add.w	r2, r2, #12
 80020b8:	8812      	ldrh	r2, [r2, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d83c      	bhi.n	8002138 <sampling+0x518>
 80020be:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <sampling+0x514>)
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	3301      	adds	r3, #1
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	4b19      	ldr	r3, [pc, #100]	; (8002134 <sampling+0x514>)
 80020ce:	801a      	strh	r2, [r3, #0]
 80020d0:	4b17      	ldr	r3, [pc, #92]	; (8002130 <sampling+0x510>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	801a      	strh	r2, [r3, #0]
 80020d6:	e035      	b.n	8002144 <sampling+0x524>
 80020d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80020dc:	3f50624d 	.word	0x3f50624d
 80020e0:	200031c0 	.word	0x200031c0
 80020e4:	447a0000 	.word	0x447a0000
 80020e8:	20002c5c 	.word	0x20002c5c
 80020ec:	44bb8000 	.word	0x44bb8000
 80020f0:	4479c000 	.word	0x4479c000
 80020f4:	43fa0000 	.word	0x43fa0000
 80020f8:	44bb6000 	.word	0x44bb6000
 80020fc:	44fa0000 	.word	0x44fa0000
 8002100:	43fa0000 	.word	0x43fa0000
 8002104:	44f9e000 	.word	0x44f9e000
 8002108:	451c4000 	.word	0x451c4000
 800210c:	453b8000 	.word	0x453b8000
 8002110:	457a0000 	.word	0x457a0000
 8002114:	20000ea4 	.word	0x20000ea4
 8002118:	20001eb8 	.word	0x20001eb8
 800211c:	20000ea2 	.word	0x20000ea2
 8002120:	20004008 	.word	0x20004008
 8002124:	20003cbc 	.word	0x20003cbc
 8002128:	20000ce8 	.word	0x20000ce8
 800212c:	20000b68 	.word	0x20000b68
 8002130:	200022fa 	.word	0x200022fa
 8002134:	200022ce 	.word	0x200022ce
 8002138:	4ba7      	ldr	r3, [pc, #668]	; (80023d8 <sampling+0x7b8>)
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	3301      	adds	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	4ba5      	ldr	r3, [pc, #660]	; (80023d8 <sampling+0x7b8>)
 8002142:	801a      	strh	r2, [r3, #0]
// tempo_count is about 1000-400
	tempo_start=0;
 8002144:	2300      	movs	r3, #0
 8002146:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800214a:	f102 021c 	add.w	r2, r2, #28
 800214e:	8013      	strh	r3, [r2, #0]
	if ((next_isr>>4) != (seq.pos)) { 					// next note step 140ms
 8002150:	4ba2      	ldr	r3, [pc, #648]	; (80023dc <sampling+0x7bc>)
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	091b      	lsrs	r3, r3, #4
 8002156:	b29a      	uxth	r2, r3
 8002158:	4ba1      	ldr	r3, [pc, #644]	; (80023e0 <sampling+0x7c0>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	b29b      	uxth	r3, r3
 800215e:	429a      	cmp	r2, r3
 8002160:	d00c      	beq.n	800217c <sampling+0x55c>
		seq.pos=(next_isr>>4); // seq pos =256 max , isr = 1/16 of a note, note lenght is 1-4
 8002162:	4b9e      	ldr	r3, [pc, #632]	; (80023dc <sampling+0x7bc>)
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	091b      	lsrs	r3, r3, #4
 8002168:	b29b      	uxth	r3, r3
 800216a:	b2da      	uxtb	r2, r3
 800216c:	4b9c      	ldr	r3, [pc, #624]	; (80023e0 <sampling+0x7c0>)
 800216e:	701a      	strb	r2, [r3, #0]
		tempo_start=1;
 8002170:	2301      	movs	r3, #1
 8002172:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002176:	f102 021c 	add.w	r2, r2, #28
 800217a:	8013      	strh	r3, [r2, #0]
// record note triggers or seq_changes position ,NEEDS TO BE OFF FOR NOTE 0
}


	if(tempo_start  )    // Calculates only on note change, gotta change seq.pos somehow  , only activates when change in seq pos
 800217c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002180:	f103 031c 	add.w	r3, r3, #28
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 810a 	beq.w	80023a0 <sampling+0x780>
	{
	//printf("\n");//	ITM_SendChar( 65 );   //  Send ASCII code 65 = ’A’
	//printf("%d" ,note[].pitch[10]);


		note[2].timeshift=(adc_values[0]>>2)&15; //assigned pots to start of loopers 0-16,works
 800218c:	4b95      	ldr	r3, [pc, #596]	; (80023e4 <sampling+0x7c4>)
 800218e:	881b      	ldrh	r3, [r3, #0]
 8002190:	089b      	lsrs	r3, r3, #2
 8002192:	b29b      	uxth	r3, r3
 8002194:	b2db      	uxtb	r3, r3
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	b2da      	uxtb	r2, r3
 800219c:	4b92      	ldr	r3, [pc, #584]	; (80023e8 <sampling+0x7c8>)
 800219e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		note[3].timeshift=(adc_values[1]>>2)&15;
 80021a2:	4b90      	ldr	r3, [pc, #576]	; (80023e4 <sampling+0x7c4>)
 80021a4:	885b      	ldrh	r3, [r3, #2]
 80021a6:	089b      	lsrs	r3, r3, #2
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	f003 030f 	and.w	r3, r3, #15
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	4b8d      	ldr	r3, [pc, #564]	; (80023e8 <sampling+0x7c8>)
 80021b4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36


		seq.loop[2]=((note[2].timeshift+(seq.pos&7))&15); // calc  8 note loop positions sets looping point in sequence
 80021b8:	4b8b      	ldr	r3, [pc, #556]	; (80023e8 <sampling+0x7c8>)
 80021ba:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80021be:	4b88      	ldr	r3, [pc, #544]	; (80023e0 <sampling+0x7c0>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	4413      	add	r3, r2
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	f003 030f 	and.w	r3, r3, #15
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	4b83      	ldr	r3, [pc, #524]	; (80023e0 <sampling+0x7c0>)
 80021d4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

		//seq.loop[3]=(note[3].timeshift+(( seq.pos&31 ) >>2)) & 15;  // quater speed
			seq.loop[3]=((note[3].timeshift+(seq.pos&7))&15); //sets looping point in sequence this is full 16 note
 80021d8:	4b83      	ldr	r3, [pc, #524]	; (80023e8 <sampling+0x7c8>)
 80021da:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 80021de:	4b80      	ldr	r3, [pc, #512]	; (80023e0 <sampling+0x7c0>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	4413      	add	r3, r2
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	f003 030f 	and.w	r3, r3, #15
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4b7b      	ldr	r3, [pc, #492]	; (80023e0 <sampling+0x7c0>)
 80021f4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

			seq.loop[4]=((note[2].timeshift+(seq.pos&7))&15);
 80021f8:	4b7b      	ldr	r3, [pc, #492]	; (80023e8 <sampling+0x7c8>)
 80021fa:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80021fe:	4b78      	ldr	r3, [pc, #480]	; (80023e0 <sampling+0x7c0>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	b2db      	uxtb	r3, r3
 8002208:	4413      	add	r3, r2
 800220a:	b2db      	uxtb	r3, r3
 800220c:	f003 030f 	and.w	r3, r3, #15
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4b73      	ldr	r3, [pc, #460]	; (80023e0 <sampling+0x7c0>)
 8002214:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

		//seq.loop[4]=((note[2].timeshift+((seq.pos&15)>>1))&15); // half speed

		note[2].pitch=(seq.notes2[seq.loop[2]]>>4)+(note[2].transpose>>4);  //loop 8 notes from pos and x times
 8002218:	4b71      	ldr	r3, [pc, #452]	; (80023e0 <sampling+0x7c0>)
 800221a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800221e:	461a      	mov	r2, r3
 8002220:	4b6f      	ldr	r3, [pc, #444]	; (80023e0 <sampling+0x7c0>)
 8002222:	4413      	add	r3, r2
 8002224:	7cdb      	ldrb	r3, [r3, #19]
 8002226:	091b      	lsrs	r3, r3, #4
 8002228:	b2da      	uxtb	r2, r3
 800222a:	4b6f      	ldr	r3, [pc, #444]	; (80023e8 <sampling+0x7c8>)
 800222c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	b2db      	uxtb	r3, r3
 8002234:	4413      	add	r3, r2
 8002236:	b2da      	uxtb	r2, r3
 8002238:	4b6b      	ldr	r3, [pc, #428]	; (80023e8 <sampling+0x7c8>)
 800223a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		note[3].pitch=(seq.notes1[seq.loop[3]]>>4);  //loop 8 notes from pos and x times ,might disable normal adsr completely
 800223e:	4b68      	ldr	r3, [pc, #416]	; (80023e0 <sampling+0x7c0>)
 8002240:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002244:	461a      	mov	r2, r3
 8002246:	4b66      	ldr	r3, [pc, #408]	; (80023e0 <sampling+0x7c0>)
 8002248:	4413      	add	r3, r2
 800224a:	789b      	ldrb	r3, [r3, #2]
 800224c:	091b      	lsrs	r3, r3, #4
 800224e:	b2da      	uxtb	r2, r3
 8002250:	4b65      	ldr	r3, [pc, #404]	; (80023e8 <sampling+0x7c8>)
 8002252:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	if (note[3].pitch) 		{note[3].pitch=note[3].pitch+(note[3].transpose>>4);	adsr_retrigger[3]=1; note_toggler[i>>5]=1<<(i&31   )   ; } // stay at zero for off
 8002256:	4b64      	ldr	r3, [pc, #400]	; (80023e8 <sampling+0x7c8>)
 8002258:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800225c:	2b00      	cmp	r3, #0
 800225e:	d01f      	beq.n	80022a0 <sampling+0x680>
 8002260:	4b61      	ldr	r3, [pc, #388]	; (80023e8 <sampling+0x7c8>)
 8002262:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8002266:	4b60      	ldr	r3, [pc, #384]	; (80023e8 <sampling+0x7c8>)
 8002268:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800226c:	091b      	lsrs	r3, r3, #4
 800226e:	b2db      	uxtb	r3, r3
 8002270:	4413      	add	r3, r2
 8002272:	b2da      	uxtb	r2, r3
 8002274:	4b5c      	ldr	r3, [pc, #368]	; (80023e8 <sampling+0x7c8>)
 8002276:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800227a:	4b5c      	ldr	r3, [pc, #368]	; (80023ec <sampling+0x7cc>)
 800227c:	2201      	movs	r2, #1
 800227e:	80da      	strh	r2, [r3, #6]
 8002280:	4b5b      	ldr	r3, [pc, #364]	; (80023f0 <sampling+0x7d0>)
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	f003 031f 	and.w	r3, r3, #31
 8002288:	2201      	movs	r2, #1
 800228a:	409a      	lsls	r2, r3
 800228c:	4b58      	ldr	r3, [pc, #352]	; (80023f0 <sampling+0x7d0>)
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	095b      	lsrs	r3, r3, #5
 8002292:	b29b      	uxth	r3, r3
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 800229a:	443b      	add	r3, r7
 800229c:	f843 2c68 	str.w	r2, [r3, #-104]


	//if ((note[5].pitch) && (adsr_toggle[5]==2)) {note[5].pitch=note[5].pitch; one_shot=0;}  // grab note when on ,one shot also , also delete


	note[5].pitch=(seq.notes2[seq.loop[2]]>>4)+(note[5].transpose>>4);  //
 80022a0:	4b4f      	ldr	r3, [pc, #316]	; (80023e0 <sampling+0x7c0>)
 80022a2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80022a6:	461a      	mov	r2, r3
 80022a8:	4b4d      	ldr	r3, [pc, #308]	; (80023e0 <sampling+0x7c0>)
 80022aa:	4413      	add	r3, r2
 80022ac:	7cdb      	ldrb	r3, [r3, #19]
 80022ae:	091b      	lsrs	r3, r3, #4
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	4b4d      	ldr	r3, [pc, #308]	; (80023e8 <sampling+0x7c8>)
 80022b4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80022b8:	091b      	lsrs	r3, r3, #4
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	4413      	add	r3, r2
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	4b49      	ldr	r3, [pc, #292]	; (80023e8 <sampling+0x7c8>)
 80022c2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52





	note[5].pitch=MajorNote[note[5].pitch];    //this is for sine skip mask
 80022c6:	4b48      	ldr	r3, [pc, #288]	; (80023e8 <sampling+0x7c8>)
 80022c8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b49      	ldr	r3, [pc, #292]	; (80023f4 <sampling+0x7d4>)
 80022d0:	5c9a      	ldrb	r2, [r3, r2]
 80022d2:	4b45      	ldr	r3, [pc, #276]	; (80023e8 <sampling+0x7c8>)
 80022d4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	//note[5].pitch=11; // works ok with single note @24 but   fails on other
	note[5].tuned=sine_lut[note[5].pitch];	//sets freq ,1.0594  * 16536 =17518  ,
 80022d8:	4b43      	ldr	r3, [pc, #268]	; (80023e8 <sampling+0x7c8>)
 80022da:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80022de:	461a      	mov	r2, r3
 80022e0:	4b45      	ldr	r3, [pc, #276]	; (80023f8 <sampling+0x7d8>)
 80022e2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80022e6:	4b40      	ldr	r3, [pc, #256]	; (80023e8 <sampling+0x7c8>)
 80022e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	note[5].tuned= (note[5].tuned*1200)>>10;  // modify different sample size , just need single cycle length and thats it
 80022ec:	4b3e      	ldr	r3, [pc, #248]	; (80023e8 <sampling+0x7c8>)
 80022ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80022f2:	461a      	mov	r2, r3
 80022f4:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80022f8:	fb02 f303 	mul.w	r3, r2, r3
 80022fc:	129b      	asrs	r3, r3, #10
 80022fe:	b29a      	uxth	r2, r3
 8002300:	4b39      	ldr	r3, [pc, #228]	; (80023e8 <sampling+0x7c8>)
 8002302:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		mask_result =0;
 8002306:	4b3d      	ldr	r3, [pc, #244]	; (80023fc <sampling+0x7dc>)
 8002308:	2200      	movs	r2, #0
 800230a:	801a      	strh	r2, [r3, #0]

		lfo_target_modify();
 800230c:	f7fe fea2 	bl	8001054 <lfo_target_modify>


		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8002310:	2300      	movs	r3, #0
 8002312:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002316:	f102 021f 	add.w	r2, r2, #31
 800231a:	7013      	strb	r3, [r2, #0]
 800231c:	e039      	b.n	8002392 <sampling+0x772>

	if (note[mask_i].pitch) {tune_Accu=sample_Noteadd[MajorNote[note[mask_i].pitch&15]];   note[mask_i].tuned=(tune_Accu);       } // relies on note channel clear , not good , clear not channel straight after
 800231e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002322:	f103 031f 	add.w	r3, r3, #31
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	4a2f      	ldr	r2, [pc, #188]	; (80023e8 <sampling+0x7c8>)
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	4413      	add	r3, r2
 800232e:	3302      	adds	r3, #2
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d022      	beq.n	800237c <sampling+0x75c>
 8002336:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800233a:	f103 031f 	add.w	r3, r3, #31
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	4a29      	ldr	r2, [pc, #164]	; (80023e8 <sampling+0x7c8>)
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	4413      	add	r3, r2
 8002346:	3302      	adds	r3, #2
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	4a29      	ldr	r2, [pc, #164]	; (80023f4 <sampling+0x7d4>)
 8002350:	5cd3      	ldrb	r3, [r2, r3]
 8002352:	461a      	mov	r2, r3
 8002354:	4b2a      	ldr	r3, [pc, #168]	; (8002400 <sampling+0x7e0>)
 8002356:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800235a:	461a      	mov	r2, r3
 800235c:	4b29      	ldr	r3, [pc, #164]	; (8002404 <sampling+0x7e4>)
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	4b28      	ldr	r3, [pc, #160]	; (8002404 <sampling+0x7e4>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002368:	f103 031f 	add.w	r3, r3, #31
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	b291      	uxth	r1, r2
 8002370:	4a1d      	ldr	r2, [pc, #116]	; (80023e8 <sampling+0x7c8>)
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	4413      	add	r3, r2
 8002376:	330e      	adds	r3, #14
 8002378:	460a      	mov	r2, r1
 800237a:	801a      	strh	r2, [r3, #0]
		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 800237c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002380:	f103 031f 	add.w	r3, r3, #31
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	3301      	adds	r3, #1
 8002388:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800238c:	f102 021f 	add.w	r2, r2, #31
 8002390:	7013      	strb	r3, [r2, #0]
 8002392:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002396:	f103 031f 	add.w	r3, r3, #31
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b04      	cmp	r3, #4
 800239e:	d9be      	bls.n	800231e <sampling+0x6fe>

  // calc freq 1/isr or 1/16 per note ,need for pitch bend and so on , change depending on decay

// lfo section

	if ((i&63)==0) {   // calculate lfo maybe 8 times for now , seems to fill up
 80023a0:	4b13      	ldr	r3, [pc, #76]	; (80023f0 <sampling+0x7d0>)
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f040 81c3 	bne.w	8002734 <sampling+0xb14>
freq_temp=0;
 80023ae:	f04f 0300 	mov.w	r3, #0
 80023b2:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80023b6:	f102 0214 	add.w	r2, r2, #20
 80023ba:	6013      	str	r3, [r2, #0]
freq2_temp=0;
 80023bc:	f04f 0300 	mov.w	r3, #0
 80023c0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80023c4:	f102 021c 	add.w	r2, r2, #28
 80023c8:	6013      	str	r3, [r2, #0]

//uint8_t sampling_position2=(sampling_position+7)&7;  //previous value can change shape  , not  bad effect

		for (l=0;l<10;l++){   //current lfo setup , messy
 80023ca:	2300      	movs	r3, #0
 80023cc:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80023d0:	f102 021b 	add.w	r2, r2, #27
 80023d4:	7013      	strb	r3, [r2, #0]
 80023d6:	e196      	b.n	8002706 <sampling+0xae6>
 80023d8:	200022fa 	.word	0x200022fa
 80023dc:	200022ce 	.word	0x200022ce
 80023e0:	20003cbc 	.word	0x20003cbc
 80023e4:	200001a8 	.word	0x200001a8
 80023e8:	20003c4c 	.word	0x20003c4c
 80023ec:	200022b8 	.word	0x200022b8
 80023f0:	20000ea4 	.word	0x20000ea4
 80023f4:	08009e20 	.word	0x08009e20
 80023f8:	20000144 	.word	0x20000144
 80023fc:	200016b0 	.word	0x200016b0
 8002400:	08009e3c 	.word	0x08009e3c
 8002404:	20000e7c 	.word	0x20000e7c
			//LFO[l].rate=potSource[130+l];   //grab dat for now
			freq_temp=LFO[l].rate +1;  // rate. this needs a little log
 8002408:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800240c:	f103 031b 	add.w	r3, r3, #27
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	4ad3      	ldr	r2, [pc, #844]	; (8002760 <sampling+0xb40>)
 8002414:	015b      	lsls	r3, r3, #5
 8002416:	4413      	add	r3, r2
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	3301      	adds	r3, #1
 800241c:	ee07 3a90 	vmov	s15, r3
 8002420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002424:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002428:	f103 0314 	add.w	r3, r3, #20
 800242c:	edc3 7a00 	vstr	s15, [r3]
			freq2_temp=freq_temp*freq_temp;
 8002430:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002434:	f103 0314 	add.w	r3, r3, #20
 8002438:	edd3 7a00 	vldr	s15, [r3]
 800243c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002440:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002444:	f103 031c 	add.w	r3, r3, #28
 8002448:	edc3 7a00 	vstr	s15, [r3]
			freq_temp=freq2_temp/64;
 800244c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002450:	f103 031c 	add.w	r3, r3, #28
 8002454:	ed93 7a00 	vldr	s14, [r3]
 8002458:	eddf 6ac2 	vldr	s13, [pc, #776]	; 8002764 <sampling+0xb44>
 800245c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002460:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002464:	f103 0314 	add.w	r3, r3, #20
 8002468:	edc3 7a00 	vstr	s15, [r3]
			freq2_temp=freq_temp*tempo_sync ; //correction to one note per cycle ,fixed , maybe loose this
 800246c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002470:	f103 0314 	add.w	r3, r3, #20
 8002474:	ed93 7a00 	vldr	s14, [r3]
 8002478:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800247c:	f103 0308 	add.w	r3, r3, #8
 8002480:	edd3 7a00 	vldr	s15, [r3]
 8002484:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002488:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800248c:	f103 031c 	add.w	r3, r3, #28
 8002490:	edc3 7a00 	vstr	s15, [r3]

			freq_temp=lfo_accu[l][sampling_position]+ freq2_temp;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar
 8002494:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002498:	f103 031b 	add.w	r3, r3, #27
 800249c:	781a      	ldrb	r2, [r3, #0]
 800249e:	4bb2      	ldr	r3, [pc, #712]	; (8002768 <sampling+0xb48>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	49b1      	ldr	r1, [pc, #708]	; (800276c <sampling+0xb4c>)
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	4403      	add	r3, r0
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	440b      	add	r3, r1
 80024b4:	edd3 7a00 	vldr	s15, [r3]
 80024b8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80024bc:	f103 031c 	add.w	r3, r3, #28
 80024c0:	ed93 7a00 	vldr	s14, [r3]
 80024c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024c8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80024cc:	f103 0314 	add.w	r3, r3, #20
 80024d0:	edc3 7a00 	vstr	s15, [r3]


//			if ((tempo_count<50) && ((next_isr&15)==15)) freq_temp=0;   // trying retrigger
		if (freq_temp>16384) lfo_accu[l][sampling_position]=freq_temp-16384; else lfo_accu[l][sampling_position]=freq_temp; // write back value
 80024d4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80024d8:	f103 0314 	add.w	r3, r3, #20
 80024dc:	edd3 7a00 	vldr	s15, [r3]
 80024e0:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8002770 <sampling+0xb50>
 80024e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ec:	dd1c      	ble.n	8002528 <sampling+0x908>
 80024ee:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80024f2:	f103 031b 	add.w	r3, r3, #27
 80024f6:	781a      	ldrb	r2, [r3, #0]
 80024f8:	4b9b      	ldr	r3, [pc, #620]	; (8002768 <sampling+0xb48>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002502:	f103 0314 	add.w	r3, r3, #20
 8002506:	edd3 7a00 	vldr	s15, [r3]
 800250a:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8002770 <sampling+0xb50>
 800250e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002512:	4996      	ldr	r1, [pc, #600]	; (800276c <sampling+0xb4c>)
 8002514:	4613      	mov	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	4403      	add	r3, r0
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	edc3 7a00 	vstr	s15, [r3]
 8002526:	e015      	b.n	8002554 <sampling+0x934>
 8002528:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800252c:	f103 031b 	add.w	r3, r3, #27
 8002530:	781a      	ldrb	r2, [r3, #0]
 8002532:	4b8d      	ldr	r3, [pc, #564]	; (8002768 <sampling+0xb48>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	498c      	ldr	r1, [pc, #560]	; (800276c <sampling+0xb4c>)
 800253a:	4613      	mov	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	4403      	add	r3, r0
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800254c:	f102 0214 	add.w	r2, r2, #20
 8002550:	6812      	ldr	r2, [r2, #0]
 8002552:	601a      	str	r2, [r3, #0]
		freq_temp=lfo_accu[l][sampling_position]; // 0-255 limit + above zero
 8002554:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002558:	f103 031b 	add.w	r3, r3, #27
 800255c:	781a      	ldrb	r2, [r3, #0]
 800255e:	4b82      	ldr	r3, [pc, #520]	; (8002768 <sampling+0xb48>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	4981      	ldr	r1, [pc, #516]	; (800276c <sampling+0xb4c>)
 8002566:	4613      	mov	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	4403      	add	r3, r0
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	440b      	add	r3, r1
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800257a:	f102 0214 	add.w	r2, r2, #20
 800257e:	6013      	str	r3, [r2, #0]
		freq_temp=freq_temp*0.000383495;  // 0-255 , chang this for depth
 8002580:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002584:	f103 0314 	add.w	r3, r3, #20
 8002588:	6818      	ldr	r0, [r3, #0]
 800258a:	f7fe f8bb 	bl	8000704 <__aeabi_f2d>
 800258e:	a372      	add	r3, pc, #456	; (adr r3, 8002758 <sampling+0xb38>)
 8002590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002594:	f7fd fe28 	bl	80001e8 <__aeabi_dmul>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	4610      	mov	r0, r2
 800259e:	4619      	mov	r1, r3
 80025a0:	f7fe f908 	bl	80007b4 <__aeabi_d2f>
 80025a4:	4603      	mov	r3, r0
 80025a6:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80025aa:	f102 0214 	add.w	r2, r2, #20
 80025ae:	6013      	str	r3, [r2, #0]
		freq2_temp =arm_sin_f32(freq_temp); // seems ok   , cmsis is ok
 80025b0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80025b4:	f103 0314 	add.w	r3, r3, #20
 80025b8:	ed93 0a00 	vldr	s0, [r3]
 80025bc:	f007 fa20 	bl	8009a00 <arm_sin_f32>
 80025c0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80025c4:	f103 031c 	add.w	r3, r3, #28
 80025c8:	ed83 0a00 	vstr	s0, [r3]
		freq_temp=freq2_temp*LFO[l].depth*51;   // depth
 80025cc:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80025d0:	f103 031b 	add.w	r3, r3, #27
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	4a62      	ldr	r2, [pc, #392]	; (8002760 <sampling+0xb40>)
 80025d8:	015b      	lsls	r3, r3, #5
 80025da:	4413      	add	r3, r2
 80025dc:	3301      	adds	r3, #1
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	ee07 3a90 	vmov	s15, r3
 80025e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025e8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80025ec:	f103 031c 	add.w	r3, r3, #28
 80025f0:	edd3 7a00 	vldr	s15, [r3]
 80025f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025f8:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002774 <sampling+0xb54>
 80025fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002600:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002604:	f103 0314 	add.w	r3, r3, #20
 8002608:	edc3 7a00 	vstr	s15, [r3]
		if (freq_temp>8195)  freq_temp=8195;
 800260c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002610:	f103 0314 	add.w	r3, r3, #20
 8002614:	edd3 7a00 	vldr	s15, [r3]
 8002618:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8002778 <sampling+0xb58>
 800261c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002624:	dd05      	ble.n	8002632 <sampling+0xa12>
 8002626:	4b55      	ldr	r3, [pc, #340]	; (800277c <sampling+0xb5c>)
 8002628:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800262c:	f102 0214 	add.w	r2, r2, #20
 8002630:	6013      	str	r3, [r2, #0]
		if (freq_temp<-8195)  freq_temp=-8195;   // clip to 13bit
 8002632:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002636:	f103 0314 	add.w	r3, r3, #20
 800263a:	edd3 7a00 	vldr	s15, [r3]
 800263e:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8002780 <sampling+0xb60>
 8002642:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800264a:	d505      	bpl.n	8002658 <sampling+0xa38>
 800264c:	4b4d      	ldr	r3, [pc, #308]	; (8002784 <sampling+0xb64>)
 800264e:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002652:	f102 0214 	add.w	r2, r2, #20
 8002656:	6013      	str	r3, [r2, #0]
		lfo_out[l] [sampling_position]=freq_temp+(LFO[l].offset<<7); // ok now     , 8 steps per i loop , 14 bit
 8002658:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800265c:	f103 031b 	add.w	r3, r3, #27
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	4a3f      	ldr	r2, [pc, #252]	; (8002760 <sampling+0xb40>)
 8002664:	015b      	lsls	r3, r3, #5
 8002666:	4413      	add	r3, r2
 8002668:	3303      	adds	r3, #3
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	01db      	lsls	r3, r3, #7
 800266e:	ee07 3a90 	vmov	s15, r3
 8002672:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002676:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800267a:	f103 0314 	add.w	r3, r3, #20
 800267e:	edd3 7a00 	vldr	s15, [r3]
 8002682:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002686:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800268a:	f103 031b 	add.w	r3, r3, #27
 800268e:	781a      	ldrb	r2, [r3, #0]
 8002690:	4b35      	ldr	r3, [pc, #212]	; (8002768 <sampling+0xb48>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	461c      	mov	r4, r3
 8002696:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800269a:	ee17 3a90 	vmov	r3, s15
 800269e:	b298      	uxth	r0, r3
 80026a0:	4939      	ldr	r1, [pc, #228]	; (8002788 <sampling+0xb68>)
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	4423      	add	r3, r4
 80026ac:	4602      	mov	r2, r0
 80026ae:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		LFO[l].out[sampling_position]=lfo_out[l] [sampling_position];  // just copy for now
 80026b2:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80026b6:	f103 031b 	add.w	r3, r3, #27
 80026ba:	781a      	ldrb	r2, [r3, #0]
 80026bc:	4b2a      	ldr	r3, [pc, #168]	; (8002768 <sampling+0xb48>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	461d      	mov	r5, r3
 80026c2:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80026c6:	f103 031b 	add.w	r3, r3, #27
 80026ca:	7819      	ldrb	r1, [r3, #0]
 80026cc:	4b26      	ldr	r3, [pc, #152]	; (8002768 <sampling+0xb48>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	461c      	mov	r4, r3
 80026d2:	482d      	ldr	r0, [pc, #180]	; (8002788 <sampling+0xb68>)
 80026d4:	4613      	mov	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	442b      	add	r3, r5
 80026de:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80026e2:	4a1f      	ldr	r2, [pc, #124]	; (8002760 <sampling+0xb40>)
 80026e4:	010b      	lsls	r3, r1, #4
 80026e6:	4423      	add	r3, r4
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	4413      	add	r3, r2
 80026ec:	4602      	mov	r2, r0
 80026ee:	80da      	strh	r2, [r3, #6]
		for (l=0;l<10;l++){   //current lfo setup , messy
 80026f0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80026f4:	f103 031b 	add.w	r3, r3, #27
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	3301      	adds	r3, #1
 80026fc:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002700:	f102 021b 	add.w	r2, r2, #27
 8002704:	7013      	strb	r3, [r2, #0]
 8002706:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800270a:	f103 031b 	add.w	r3, r3, #27
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b09      	cmp	r3, #9
 8002712:	f67f ae79 	bls.w	8002408 <sampling+0x7e8>
		} // lfo gen : 0=f1 , 1=tempo,2=pitch


			freq_pointer[0] [sampling_position]=0.99; // problem was selecting accu instead of out , good now
 8002716:	4b14      	ldr	r3, [pc, #80]	; (8002768 <sampling+0xb48>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	4a1c      	ldr	r2, [pc, #112]	; (800278c <sampling+0xb6c>)
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	4a1b      	ldr	r2, [pc, #108]	; (8002790 <sampling+0xb70>)
 8002722:	601a      	str	r2, [r3, #0]
	freq_pointer[2] [sampling_position] =0.99; // filter lfos
 8002724:	4b10      	ldr	r3, [pc, #64]	; (8002768 <sampling+0xb48>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	4a18      	ldr	r2, [pc, #96]	; (800278c <sampling+0xb6c>)
 800272a:	3312      	adds	r3, #18
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	4a17      	ldr	r2, [pc, #92]	; (8002790 <sampling+0xb70>)
 8002732:	601a      	str	r2, [r3, #0]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002734:	4b17      	ldr	r3, [pc, #92]	; (8002794 <sampling+0xb74>)
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	3301      	adds	r3, #1
 800273a:	b29a      	uxth	r2, r3
 800273c:	4b15      	ldr	r3, [pc, #84]	; (8002794 <sampling+0xb74>)
 800273e:	801a      	strh	r2, [r3, #0]
 8002740:	4b14      	ldr	r3, [pc, #80]	; (8002794 <sampling+0xb74>)
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002748:	f4ff ac89 	bcc.w	800205e <sampling+0x43e>
// filter loop
int32_t play_holder1[512];    // data banks
int32_t play_holder2[512];
uint8_t sine_zero;

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 800274c:	4b11      	ldr	r3, [pc, #68]	; (8002794 <sampling+0xb74>)
 800274e:	2200      	movs	r2, #0
 8002750:	801a      	strh	r2, [r3, #0]
 8002752:	e108      	b.n	8002966 <sampling+0xd46>
 8002754:	f3af 8000 	nop.w
 8002758:	7bb1a72c 	.word	0x7bb1a72c
 800275c:	3f3921fa 	.word	0x3f3921fa
 8002760:	20003080 	.word	0x20003080
 8002764:	42800000 	.word	0x42800000
 8002768:	20004008 	.word	0x20004008
 800276c:	2000240c 	.word	0x2000240c
 8002770:	46800000 	.word	0x46800000
 8002774:	424c0000 	.word	0x424c0000
 8002778:	46000c00 	.word	0x46000c00
 800277c:	46000c00 	.word	0x46000c00
 8002780:	c6000c00 	.word	0xc6000c00
 8002784:	c6000c00 	.word	0xc6000c00
 8002788:	2000259c 	.word	0x2000259c
 800278c:	20002378 	.word	0x20002378
 8002790:	3f7d70a4 	.word	0x3f7d70a4
 8002794:	20000ea4 	.word	0x20000ea4
	i_total=i+sample_pointB;
 8002798:	4b82      	ldr	r3, [pc, #520]	; (80029a4 <sampling+0xd84>)
 800279a:	881a      	ldrh	r2, [r3, #0]
 800279c:	4b82      	ldr	r3, [pc, #520]	; (80029a8 <sampling+0xd88>)
 800279e:	881b      	ldrh	r3, [r3, #0]
 80027a0:	4413      	add	r3, r2
 80027a2:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80027a6:	f102 0202 	add.w	r2, r2, #2
 80027aa:	8013      	strh	r3, [r2, #0]
	sampling_position=(i>>6);
 80027ac:	4b7d      	ldr	r3, [pc, #500]	; (80029a4 <sampling+0xd84>)
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	099b      	lsrs	r3, r3, #6
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	4b7d      	ldr	r3, [pc, #500]	; (80029ac <sampling+0xd8c>)
 80027b8:	701a      	strb	r2, [r3, #0]
	sampling_position=(i>>6);
 80027ba:	4b7a      	ldr	r3, [pc, #488]	; (80029a4 <sampling+0xd84>)
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	099b      	lsrs	r3, r3, #6
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	4b79      	ldr	r3, [pc, #484]	; (80029ac <sampling+0xd8c>)
 80027c6:	701a      	strb	r2, [r3, #0]
// every step   1,110,928   >>20  ,per note
// New oscillators , sync, trigger input , waveshape ,zero cross
	sample_accus[0] = sample_accus[0] + note[0].tuned; //careful with signed bit shift,better compare
 80027c8:	4b79      	ldr	r3, [pc, #484]	; (80029b0 <sampling+0xd90>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a79      	ldr	r2, [pc, #484]	; (80029b4 <sampling+0xd94>)
 80027ce:	89d2      	ldrh	r2, [r2, #14]
 80027d0:	4413      	add	r3, r2
 80027d2:	4a77      	ldr	r2, [pc, #476]	; (80029b0 <sampling+0xd90>)
 80027d4:	6013      	str	r3, [r2, #0]

	if (sample_accus[0]>524287) sample_accus[0] =-sample_accus[0] ; // faster >  than &  ,strange
 80027d6:	4b76      	ldr	r3, [pc, #472]	; (80029b0 <sampling+0xd90>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80027de:	db04      	blt.n	80027ea <sampling+0xbca>
 80027e0:	4b73      	ldr	r3, [pc, #460]	; (80029b0 <sampling+0xd90>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	425b      	negs	r3, r3
 80027e6:	4a72      	ldr	r2, [pc, #456]	; (80029b0 <sampling+0xd90>)
 80027e8:	6013      	str	r3, [r2, #0]



	sample_accus[1] = sample_accus[1] + note[1].tuned;  // normal adder full volume
 80027ea:	4b71      	ldr	r3, [pc, #452]	; (80029b0 <sampling+0xd90>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	4a71      	ldr	r2, [pc, #452]	; (80029b4 <sampling+0xd94>)
 80027f0:	8bd2      	ldrh	r2, [r2, #30]
 80027f2:	4413      	add	r3, r2
 80027f4:	4a6e      	ldr	r2, [pc, #440]	; (80029b0 <sampling+0xd90>)
 80027f6:	6053      	str	r3, [r2, #4]
		//	if (!(note[].pitch[0]))   sample_accus[1] =0;  // turn off with vel now , maybe use mask
			if (sample_accus[1]>524287) sample_accus[1] =-sample_accus[1] ; // faster >  than &  ,strange
 80027f8:	4b6d      	ldr	r3, [pc, #436]	; (80029b0 <sampling+0xd90>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002800:	db04      	blt.n	800280c <sampling+0xbec>
 8002802:	4b6b      	ldr	r3, [pc, #428]	; (80029b0 <sampling+0xd90>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	425b      	negs	r3, r3
 8002808:	4a69      	ldr	r2, [pc, #420]	; (80029b0 <sampling+0xd90>)
 800280a:	6053      	str	r3, [r2, #4]

			sample_accus[2] = sample_accus[2] + note[2].tuned;
 800280c:	4b68      	ldr	r3, [pc, #416]	; (80029b0 <sampling+0xd90>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	4a68      	ldr	r2, [pc, #416]	; (80029b4 <sampling+0xd94>)
 8002812:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8002814:	4413      	add	r3, r2
 8002816:	4a66      	ldr	r2, [pc, #408]	; (80029b0 <sampling+0xd90>)
 8002818:	6093      	str	r3, [r2, #8]
			//		if (!(note[].pitch[0]))   sample_accus[2] =0;  // turn off with vel now , maybe use mask
					if (sample_accus[2]>524287) sample_accus[2] =-sample_accus[2] ; // faster >  than &  ,strange
 800281a:	4b65      	ldr	r3, [pc, #404]	; (80029b0 <sampling+0xd90>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002822:	db04      	blt.n	800282e <sampling+0xc0e>
 8002824:	4b62      	ldr	r3, [pc, #392]	; (80029b0 <sampling+0xd90>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	425b      	negs	r3, r3
 800282a:	4a61      	ldr	r2, [pc, #388]	; (80029b0 <sampling+0xd90>)
 800282c:	6093      	str	r3, [r2, #8]

					sample_accus[3] = sample_accus[3] + note[3].tuned; // bouncing somewhere
 800282e:	4b60      	ldr	r3, [pc, #384]	; (80029b0 <sampling+0xd90>)
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	4a60      	ldr	r2, [pc, #384]	; (80029b4 <sampling+0xd94>)
 8002834:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 8002836:	4413      	add	r3, r2
 8002838:	4a5d      	ldr	r2, [pc, #372]	; (80029b0 <sampling+0xd90>)
 800283a:	60d3      	str	r3, [r2, #12]
					//sample_accus[3] = sample_accus[3] +4000;
					//	if (!(note[].pitch[0]))   sample_accus[3] =0;  // turn off with vel now , maybe use mask
							if (sample_accus[3]>524287) sample_accus[3] =-sample_accus[3] ; // faster >  than &  ,strange
 800283c:	4b5c      	ldr	r3, [pc, #368]	; (80029b0 <sampling+0xd90>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002844:	db04      	blt.n	8002850 <sampling+0xc30>
 8002846:	4b5a      	ldr	r3, [pc, #360]	; (80029b0 <sampling+0xd90>)
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	425b      	negs	r3, r3
 800284c:	4a58      	ldr	r2, [pc, #352]	; (80029b0 <sampling+0xd90>)
 800284e:	60d3      	str	r3, [r2, #12]

							sample_accus[4] = sample_accus[4] + note[4].tuned;
 8002850:	4b57      	ldr	r3, [pc, #348]	; (80029b0 <sampling+0xd90>)
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	4a57      	ldr	r2, [pc, #348]	; (80029b4 <sampling+0xd94>)
 8002856:	f8b2 204e 	ldrh.w	r2, [r2, #78]	; 0x4e
 800285a:	4413      	add	r3, r2
 800285c:	4a54      	ldr	r2, [pc, #336]	; (80029b0 <sampling+0xd90>)
 800285e:	6113      	str	r3, [r2, #16]
								//	if (!(note[].pitch[4]))   sample_accus[4] =0;  // turn off with vel now , maybe use mask
									if (sample_accus[4]>524287) sample_accus[4] =-sample_accus[4] ; // faster >  than &  ,strange
 8002860:	4b53      	ldr	r3, [pc, #332]	; (80029b0 <sampling+0xd90>)
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002868:	db04      	blt.n	8002874 <sampling+0xc54>
 800286a:	4b51      	ldr	r3, [pc, #324]	; (80029b0 <sampling+0xd90>)
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	425b      	negs	r3, r3
 8002870:	4a4f      	ldr	r2, [pc, #316]	; (80029b0 <sampling+0xd90>)
 8002872:	6113      	str	r3, [r2, #16]

									sample_Accu[2] = 0;sample_Accu[0] =0;sample_Accu[3] =0; //all zeroed
 8002874:	4b50      	ldr	r3, [pc, #320]	; (80029b8 <sampling+0xd98>)
 8002876:	2200      	movs	r2, #0
 8002878:	609a      	str	r2, [r3, #8]
 800287a:	4b4f      	ldr	r3, [pc, #316]	; (80029b8 <sampling+0xd98>)
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	4b4d      	ldr	r3, [pc, #308]	; (80029b8 <sampling+0xd98>)
 8002882:	2200      	movs	r2, #0
 8002884:	60da      	str	r2, [r3, #12]
									//if (sample_accus[2]<0) sample_Accu[2]=+sample_accus[2]; else sample_Accu[2]=sample_accus[2]; // convert to triangle ?
									sample_Accu[0]=sample_accus[2]>>7; // needs cut a bit
 8002886:	4b4a      	ldr	r3, [pc, #296]	; (80029b0 <sampling+0xd90>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	11db      	asrs	r3, r3, #7
 800288c:	4a4a      	ldr	r2, [pc, #296]	; (80029b8 <sampling+0xd98>)
 800288e:	6013      	str	r3, [r2, #0]

							sample_Accu[0] = ((sine_out+sample_Accu[0])*cross_fade[1]);   // sine input plus other
 8002890:	4b49      	ldr	r3, [pc, #292]	; (80029b8 <sampling+0xd98>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	4b49      	ldr	r3, [pc, #292]	; (80029bc <sampling+0xd9c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4413      	add	r3, r2
 800289a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800289e:	f102 0215 	add.w	r2, r2, #21
 80028a2:	7812      	ldrb	r2, [r2, #0]
 80028a4:	fb02 f303 	mul.w	r3, r2, r3
 80028a8:	4a43      	ldr	r2, [pc, #268]	; (80029b8 <sampling+0xd98>)
 80028aa:	6013      	str	r3, [r2, #0]
							//sample_Accu[0] = (sine_out*cross_fade[1]);  // sine out only
									//if (sample_accus[3]<0) sample_Accu[3]=+sample_accus[3]; else sample_Accu[3]=sample_accus[3]; // convert to triangle
									sample_Accu[3]=sample_accus[3];
 80028ac:	4b40      	ldr	r3, [pc, #256]	; (80029b0 <sampling+0xd90>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	4a41      	ldr	r2, [pc, #260]	; (80029b8 <sampling+0xd98>)
 80028b2:	60d3      	str	r3, [r2, #12]
									sample_Accu[2] = (sample_Accu[3]*cross_fade[2]);			//27b, 2 out f2  might do a crossfade here using pot 3
 80028b4:	4b40      	ldr	r3, [pc, #256]	; (80029b8 <sampling+0xd98>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80028bc:	f102 0216 	add.w	r2, r2, #22
 80028c0:	7812      	ldrb	r2, [r2, #0]
 80028c2:	fb02 f303 	mul.w	r3, r2, r3
 80028c6:	4a3c      	ldr	r2, [pc, #240]	; (80029b8 <sampling+0xd98>)
 80028c8:	6093      	str	r3, [r2, #8]
									//	sample_Accu[5] = sample_Accu[4]+ (sample_accus[4]*4);			// drum and envelope

	//	sample_Accu=sample_Accu-(1<<21);


if (sine_counterB==0) 	sine_temp2=note[5].tuned;
 80028ca:	4b3d      	ldr	r3, [pc, #244]	; (80029c0 <sampling+0xda0>)
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d104      	bne.n	80028dc <sampling+0xcbc>
 80028d2:	4b38      	ldr	r3, [pc, #224]	; (80029b4 <sampling+0xd94>)
 80028d4:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 80028d8:	4b3a      	ldr	r3, [pc, #232]	; (80029c4 <sampling+0xda4>)
 80028da:	801a      	strh	r2, [r3, #0]

	sine_counterB=sine_counterB+sine_temp2 ;  // sine up counter per cycle , however sine adder needs to wait
 80028dc:	4b38      	ldr	r3, [pc, #224]	; (80029c0 <sampling+0xda0>)
 80028de:	881a      	ldrh	r2, [r3, #0]
 80028e0:	4b38      	ldr	r3, [pc, #224]	; (80029c4 <sampling+0xda4>)
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	4413      	add	r3, r2
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	4b35      	ldr	r3, [pc, #212]	; (80029c0 <sampling+0xda0>)
 80028ea:	801a      	strh	r2, [r3, #0]
	if (sine_counterB>>7) sine_zero=0; else sine_zero=1;
 80028ec:	4b34      	ldr	r3, [pc, #208]	; (80029c0 <sampling+0xda0>)
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	09db      	lsrs	r3, r3, #7
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d006      	beq.n	8002906 <sampling+0xce6>
 80028f8:	2300      	movs	r3, #0
 80028fa:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80028fe:	f102 0201 	add.w	r2, r2, #1
 8002902:	7013      	strb	r3, [r2, #0]
 8002904:	e005      	b.n	8002912 <sampling+0xcf2>
 8002906:	2301      	movs	r3, #1
 8002908:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800290c:	f102 0201 	add.w	r2, r2, #1
 8002910:	7013      	strb	r3, [r2, #0]

if (sine_counterB>(sine_length<<5)) sine_counterB=0; //fixed for now
 8002912:	4b2b      	ldr	r3, [pc, #172]	; (80029c0 <sampling+0xda0>)
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	4b2b      	ldr	r3, [pc, #172]	; (80029c8 <sampling+0xda8>)
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	015b      	lsls	r3, r3, #5
 800291e:	429a      	cmp	r2, r3
 8002920:	dd02      	ble.n	8002928 <sampling+0xd08>
 8002922:	4b27      	ldr	r3, [pc, #156]	; (80029c0 <sampling+0xda0>)
 8002924:	2200      	movs	r2, #0
 8002926:	801a      	strh	r2, [r3, #0]
sine_count(); // calc sine   distortion out when hcagning note
 8002928:	f000 fadc 	bl	8002ee4 <sine_count>
play_holder1[i]=sample_Accu[0];  // write to bank
 800292c:	4b1d      	ldr	r3, [pc, #116]	; (80029a4 <sampling+0xd84>)
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	4619      	mov	r1, r3
 8002932:	4b21      	ldr	r3, [pc, #132]	; (80029b8 <sampling+0xd98>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800293a:	f5a3 6308 	sub.w	r3, r3, #2176	; 0x880
 800293e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
play_holder2[i]=sample_Accu[2];
 8002942:	4b18      	ldr	r3, [pc, #96]	; (80029a4 <sampling+0xd84>)
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <sampling+0xd98>)
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002950:	4619      	mov	r1, r3
 8002952:	0083      	lsls	r3, r0, #2
 8002954:	440b      	add	r3, r1
 8002956:	f843 2c80 	str.w	r2, [r3, #-128]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 800295a:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <sampling+0xd84>)
 800295c:	881b      	ldrh	r3, [r3, #0]
 800295e:	3301      	adds	r3, #1
 8002960:	b29a      	uxth	r2, r3
 8002962:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <sampling+0xd84>)
 8002964:	801a      	strh	r2, [r3, #0]
 8002966:	4b0f      	ldr	r3, [pc, #60]	; (80029a4 <sampling+0xd84>)
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800296e:	f4ff af13 	bcc.w	8002798 <sampling+0xb78>



//uint16_t* click=&input_holder[0];

uint16_t crap_hold=2000;
 8002972:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002976:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800297a:	f102 0206 	add.w	r2, r2, #6
 800297e:	8013      	strh	r3, [r2, #0]

				uint16_t crap_hold1=2000;
 8002980:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002984:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002988:	f102 020e 	add.w	r2, r2, #14
 800298c:	8013      	strh	r3, [r2, #0]
				uint16_t crap_hold2=2000;
 800298e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002992:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002996:	f102 0204 	add.w	r2, r2, #4
 800299a:	8013      	strh	r3, [r2, #0]




for (i=0;i<512;i++) // 15-20 tmr cycles (174)
 800299c:	4b01      	ldr	r3, [pc, #4]	; (80029a4 <sampling+0xd84>)
 800299e:	2200      	movs	r2, #0
 80029a0:	801a      	strh	r2, [r3, #0]
 80029a2:	e059      	b.n	8002a58 <sampling+0xe38>
 80029a4:	20000ea4 	.word	0x20000ea4
 80029a8:	20000ea2 	.word	0x20000ea2
 80029ac:	20004008 	.word	0x20004008
 80029b0:	200022d4 	.word	0x200022d4
 80029b4:	20003c4c 	.word	0x20003c4c
 80029b8:	20000e84 	.word	0x20000e84
 80029bc:	20000e6c 	.word	0x20000e6c
 80029c0:	20000e6a 	.word	0x20000e6a
 80029c4:	20000e70 	.word	0x20000e70
 80029c8:	20000142 	.word	0x20000142
			{




				crap_hold=((input_holder[i]*7)+crap_hold2)>>3;
 80029cc:	4b60      	ldr	r3, [pc, #384]	; (8002b50 <sampling+0xf30>)
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	461a      	mov	r2, r3
 80029d2:	4b60      	ldr	r3, [pc, #384]	; (8002b54 <sampling+0xf34>)
 80029d4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80029d8:	461a      	mov	r2, r3
 80029da:	4613      	mov	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	1a9a      	subs	r2, r3, r2
 80029e0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80029e4:	f103 0304 	add.w	r3, r3, #4
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	4413      	add	r3, r2
 80029ec:	10db      	asrs	r3, r3, #3
 80029ee:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80029f2:	f102 0206 	add.w	r2, r2, #6
 80029f6:	8013      	strh	r3, [r2, #0]
					crap_hold1=((crap_hold*7)+crap_hold1)>>3;
 80029f8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80029fc:	f103 0306 	add.w	r3, r3, #6
 8002a00:	881a      	ldrh	r2, [r3, #0]
 8002a02:	4613      	mov	r3, r2
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	1a9a      	subs	r2, r3, r2
 8002a08:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002a0c:	f103 030e 	add.w	r3, r3, #14
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	4413      	add	r3, r2
 8002a14:	10db      	asrs	r3, r3, #3
 8002a16:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002a1a:	f102 020e 	add.w	r2, r2, #14
 8002a1e:	8013      	strh	r3, [r2, #0]
					input_holder[i] =((crap_hold1*7)+crap_hold2)>>3;
 8002a20:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002a24:	f103 030e 	add.w	r3, r3, #14
 8002a28:	881a      	ldrh	r2, [r3, #0]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	1a9a      	subs	r2, r3, r2
 8002a30:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002a34:	f103 0304 	add.w	r3, r3, #4
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	10d9      	asrs	r1, r3, #3
 8002a3e:	4b44      	ldr	r3, [pc, #272]	; (8002b50 <sampling+0xf30>)
 8002a40:	881b      	ldrh	r3, [r3, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	b289      	uxth	r1, r1
 8002a46:	4b43      	ldr	r3, [pc, #268]	; (8002b54 <sampling+0xf34>)
 8002a48:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
for (i=0;i<512;i++) // 15-20 tmr cycles (174)
 8002a4c:	4b40      	ldr	r3, [pc, #256]	; (8002b50 <sampling+0xf30>)
 8002a4e:	881b      	ldrh	r3, [r3, #0]
 8002a50:	3301      	adds	r3, #1
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	4b3e      	ldr	r3, [pc, #248]	; (8002b50 <sampling+0xf30>)
 8002a56:	801a      	strh	r2, [r3, #0]
 8002a58:	4b3d      	ldr	r3, [pc, #244]	; (8002b50 <sampling+0xf30>)
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a60:	d3b4      	bcc.n	80029cc <sampling+0xdac>
}
*/



for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 8002a62:	4b3b      	ldr	r3, [pc, #236]	; (8002b50 <sampling+0xf30>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	801a      	strh	r2, [r3, #0]
 8002a68:	e214      	b.n	8002e94 <sampling+0x1274>
	i_total=i+sample_pointB;
 8002a6a:	4b39      	ldr	r3, [pc, #228]	; (8002b50 <sampling+0xf30>)
 8002a6c:	881a      	ldrh	r2, [r3, #0]
 8002a6e:	4b3a      	ldr	r3, [pc, #232]	; (8002b58 <sampling+0xf38>)
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	4413      	add	r3, r2
 8002a74:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002a78:	f102 0202 	add.w	r2, r2, #2
 8002a7c:	8013      	strh	r3, [r2, #0]

sampling_position=(i>>6);
 8002a7e:	4b34      	ldr	r3, [pc, #208]	; (8002b50 <sampling+0xf30>)
 8002a80:	881b      	ldrh	r3, [r3, #0]
 8002a82:	099b      	lsrs	r3, r3, #6
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	4b34      	ldr	r3, [pc, #208]	; (8002b5c <sampling+0xf3c>)
 8002a8a:	701a      	strb	r2, [r3, #0]
// filter 1
if (		(note_toggler[i>>5]	)==(1<<(i&31)	)) 				{ADSR[0].attack_trigger =0;  trigger_counter++; trigger_counter=trigger_counter&1023  ;}
 8002a8c:	4b30      	ldr	r3, [pc, #192]	; (8002b50 <sampling+0xf30>)
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	095b      	lsrs	r3, r3, #5
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8002a9a:	443b      	add	r3, r7
 8002a9c:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8002aa0:	4a2b      	ldr	r2, [pc, #172]	; (8002b50 <sampling+0xf30>)
 8002aa2:	8812      	ldrh	r2, [r2, #0]
 8002aa4:	f002 021f 	and.w	r2, r2, #31
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d10f      	bne.n	8002ad2 <sampling+0xeb2>
 8002ab2:	4b2b      	ldr	r3, [pc, #172]	; (8002b60 <sampling+0xf40>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	711a      	strb	r2, [r3, #4]
 8002ab8:	4b2a      	ldr	r3, [pc, #168]	; (8002b64 <sampling+0xf44>)
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	3301      	adds	r3, #1
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	4b28      	ldr	r3, [pc, #160]	; (8002b64 <sampling+0xf44>)
 8002ac2:	801a      	strh	r2, [r3, #0]
 8002ac4:	4b27      	ldr	r3, [pc, #156]	; (8002b64 <sampling+0xf44>)
 8002ac6:	881b      	ldrh	r3, [r3, #0]
 8002ac8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	4b25      	ldr	r3, [pc, #148]	; (8002b64 <sampling+0xf44>)
 8002ad0:	801a      	strh	r2, [r3, #0]
//sample_Accu[1]=(sample_Accu[1]-2020)<<14; // shift to correct level



//sample_Accu[1]=sample_Accu[1]-60000;
sample_Accu[1]=play_holder1[i];  // sine input
 8002ad2:	4b1f      	ldr	r3, [pc, #124]	; (8002b50 <sampling+0xf30>)
 8002ad4:	881b      	ldrh	r3, [r3, #0]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002adc:	f5a3 6308 	sub.w	r3, r3, #2176	; 0x880
 8002ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ae4:	4a20      	ldr	r2, [pc, #128]	; (8002b68 <sampling+0xf48>)
 8002ae6:	6053      	str	r3, [r2, #4]
sample_Accu[3]=play_holder2[i] ; // sine
 8002ae8:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <sampling+0xf30>)
 8002aea:	881b      	ldrh	r3, [r3, #0]
 8002aec:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	f853 3c80 	ldr.w	r3, [r3, #-128]
 8002af8:	4a1b      	ldr	r2, [pc, #108]	; (8002b68 <sampling+0xf48>)
 8002afa:	60d3      	str	r3, [r2, #12]

// this section is about 100 tmr cycles

freq_point[0]=freq_pointer[0] [sampling_position];; // load up coeffs
 8002afc:	4b17      	ldr	r3, [pc, #92]	; (8002b5c <sampling+0xf3c>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	4a1a      	ldr	r2, [pc, #104]	; (8002b6c <sampling+0xf4c>)
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a19      	ldr	r2, [pc, #100]	; (8002b70 <sampling+0xf50>)
 8002b0a:	6013      	str	r3, [r2, #0]
//freq_point[1]=freq_pointer[1] [sampling_position];
freq_point[2]=freq_pointer[2] [sampling_position];  // ok , array was too short
 8002b0c:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <sampling+0xf3c>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	4a16      	ldr	r2, [pc, #88]	; (8002b6c <sampling+0xf4c>)
 8002b12:	3312      	adds	r3, #18
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a15      	ldr	r2, [pc, #84]	; (8002b70 <sampling+0xf50>)
 8002b1c:	6093      	str	r3, [r2, #8]
//freq_point[3]=freq_pointer[3] [sampling_position];
//freq_point[0]=0.5;  //was ok with this
	//	freq_point[2]=0.5;


adsr_level[3] = adsr_lut	[i>>1];
 8002b1e:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <sampling+0xf30>)
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	085b      	lsrs	r3, r3, #1
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	4a13      	ldr	r2, [pc, #76]	; (8002b74 <sampling+0xf54>)
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a12      	ldr	r2, [pc, #72]	; (8002b78 <sampling+0xf58>)
 8002b30:	60d3      	str	r3, [r2, #12]


if (freq_point[0]>1) freq_point[0]=1; else if (freq_point[0]<0) freq_point[0]=0;// just in case
 8002b32:	4b0f      	ldr	r3, [pc, #60]	; (8002b70 <sampling+0xf50>)
 8002b34:	edd3 7a00 	vldr	s15, [r3]
 8002b38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b44:	dd1a      	ble.n	8002b7c <sampling+0xf5c>
 8002b46:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <sampling+0xf50>)
 8002b48:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	e021      	b.n	8002b94 <sampling+0xf74>
 8002b50:	20000ea4 	.word	0x20000ea4
 8002b54:	20002c64 	.word	0x20002c64
 8002b58:	20000ea2 	.word	0x20000ea2
 8002b5c:	20004008 	.word	0x20004008
 8002b60:	200031c0 	.word	0x200031c0
 8002b64:	20002408 	.word	0x20002408
 8002b68:	20000e84 	.word	0x20000e84
 8002b6c:	20002378 	.word	0x20002378
 8002b70:	20002368 	.word	0x20002368
 8002b74:	20001eb8 	.word	0x20001eb8
 8002b78:	20002c30 	.word	0x20002c30
 8002b7c:	4bac      	ldr	r3, [pc, #688]	; (8002e30 <sampling+0x1210>)
 8002b7e:	edd3 7a00 	vldr	s15, [r3]
 8002b82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b8a:	d503      	bpl.n	8002b94 <sampling+0xf74>
 8002b8c:	4ba8      	ldr	r3, [pc, #672]	; (8002e30 <sampling+0x1210>)
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
		//freq_point[0]=0.50;
		freq_point[1]=1-freq_point[0];
 8002b94:	4ba6      	ldr	r3, [pc, #664]	; (8002e30 <sampling+0x1210>)
 8002b96:	edd3 7a00 	vldr	s15, [r3]
 8002b9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ba2:	4ba3      	ldr	r3, [pc, #652]	; (8002e30 <sampling+0x1210>)
 8002ba4:	edc3 7a01 	vstr	s15, [r3, #4]

		//int16_t  ADSR[0].buffer_temp2=lfo_out [1] [i>>6];

		//ADSR[0].buffer_temp2=ADSR[0].buffer_temp2-8195;
		//sample_Accu[1] = sample_Accu[1] *lfo_out [0] [i>>6];     // vol lfo
		sample_Accu[1] = sample_Accu[1] ;
 8002ba8:	4ba2      	ldr	r3, [pc, #648]	; (8002e34 <sampling+0x1214>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	4aa1      	ldr	r2, [pc, #644]	; (8002e34 <sampling+0x1214>)
 8002bae:	6053      	str	r3, [r2, #4]



		filter_accus[1]=sample_Accu[1]; // saw
 8002bb0:	4ba0      	ldr	r3, [pc, #640]	; (8002e34 <sampling+0x1214>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	ee07 3a90 	vmov	s15, r3
 8002bb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bbc:	4b9e      	ldr	r3, [pc, #632]	; (8002e38 <sampling+0x1218>)
 8002bbe:	edc3 7a01 	vstr	s15, [r3, #4]
	//	filter_accus[1]=	filter_accus[1]*adsr_level[3][sampling_position];
		//filter_accus[1]=	filter_accus[1]*adsr_level[3];

		filter_accus[2]=(filter_accus[1]*freq_point[0])+(filter_accus[2]*freq_point[1]);					// maybe allow bandpass insted of lpf
 8002bc2:	4b9d      	ldr	r3, [pc, #628]	; (8002e38 <sampling+0x1218>)
 8002bc4:	ed93 7a01 	vldr	s14, [r3, #4]
 8002bc8:	4b99      	ldr	r3, [pc, #612]	; (8002e30 <sampling+0x1210>)
 8002bca:	edd3 7a00 	vldr	s15, [r3]
 8002bce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bd2:	4b99      	ldr	r3, [pc, #612]	; (8002e38 <sampling+0x1218>)
 8002bd4:	edd3 6a02 	vldr	s13, [r3, #8]
 8002bd8:	4b95      	ldr	r3, [pc, #596]	; (8002e30 <sampling+0x1210>)
 8002bda:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002be2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be6:	4b94      	ldr	r3, [pc, #592]	; (8002e38 <sampling+0x1218>)
 8002be8:	edc3 7a02 	vstr	s15, [r3, #8]
		filter_accus[3]=(filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]);
 8002bec:	4b92      	ldr	r3, [pc, #584]	; (8002e38 <sampling+0x1218>)
 8002bee:	ed93 7a02 	vldr	s14, [r3, #8]
 8002bf2:	4b8f      	ldr	r3, [pc, #572]	; (8002e30 <sampling+0x1210>)
 8002bf4:	edd3 7a00 	vldr	s15, [r3]
 8002bf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bfc:	4b8e      	ldr	r3, [pc, #568]	; (8002e38 <sampling+0x1218>)
 8002bfe:	edd3 6a03 	vldr	s13, [r3, #12]
 8002c02:	4b8b      	ldr	r3, [pc, #556]	; (8002e30 <sampling+0x1210>)
 8002c04:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c10:	4b89      	ldr	r3, [pc, #548]	; (8002e38 <sampling+0x1218>)
 8002c12:	edc3 7a03 	vstr	s15, [r3, #12]
		filter_accus[4]=(filter_accus[3]*freq_point[0])+(filter_accus[4]*freq_point[1]);
 8002c16:	4b88      	ldr	r3, [pc, #544]	; (8002e38 <sampling+0x1218>)
 8002c18:	ed93 7a03 	vldr	s14, [r3, #12]
 8002c1c:	4b84      	ldr	r3, [pc, #528]	; (8002e30 <sampling+0x1210>)
 8002c1e:	edd3 7a00 	vldr	s15, [r3]
 8002c22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c26:	4b84      	ldr	r3, [pc, #528]	; (8002e38 <sampling+0x1218>)
 8002c28:	edd3 6a04 	vldr	s13, [r3, #16]
 8002c2c:	4b80      	ldr	r3, [pc, #512]	; (8002e30 <sampling+0x1210>)
 8002c2e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c3a:	4b7f      	ldr	r3, [pc, #508]	; (8002e38 <sampling+0x1218>)
 8002c3c:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[5]=(filter_accus[4]*freq_point[0])+(filter_accus[5]*freq_point[1]);
 8002c40:	4b7d      	ldr	r3, [pc, #500]	; (8002e38 <sampling+0x1218>)
 8002c42:	ed93 7a04 	vldr	s14, [r3, #16]
 8002c46:	4b7a      	ldr	r3, [pc, #488]	; (8002e30 <sampling+0x1210>)
 8002c48:	edd3 7a00 	vldr	s15, [r3]
 8002c4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c50:	4b79      	ldr	r3, [pc, #484]	; (8002e38 <sampling+0x1218>)
 8002c52:	edd3 6a05 	vldr	s13, [r3, #20]
 8002c56:	4b76      	ldr	r3, [pc, #472]	; (8002e30 <sampling+0x1210>)
 8002c58:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c64:	4b74      	ldr	r3, [pc, #464]	; (8002e38 <sampling+0x1218>)
 8002c66:	edc3 7a05 	vstr	s15, [r3, #20]
		filter_hold[0]=(filter_accus[5]+filter_accus[11])*0.5; //half sample , nice
 8002c6a:	4b73      	ldr	r3, [pc, #460]	; (8002e38 <sampling+0x1218>)
 8002c6c:	ed93 7a05 	vldr	s14, [r3, #20]
 8002c70:	4b71      	ldr	r3, [pc, #452]	; (8002e38 <sampling+0x1218>)
 8002c72:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002c76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c7a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c82:	4b6e      	ldr	r3, [pc, #440]	; (8002e3c <sampling+0x121c>)
 8002c84:	edc3 7a00 	vstr	s15, [r3]
		sample_Accu[0] =filter_accus[5]; // out
 8002c88:	4b6b      	ldr	r3, [pc, #428]	; (8002e38 <sampling+0x1218>)
 8002c8a:	edd3 7a05 	vldr	s15, [r3, #20]
 8002c8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c92:	ee17 2a90 	vmov	r2, s15
 8002c96:	4b67      	ldr	r3, [pc, #412]	; (8002e34 <sampling+0x1214>)
 8002c98:	601a      	str	r2, [r3, #0]
		filter_accus[11]=filter_accus[5]; //write back new value
 8002c9a:	4b67      	ldr	r3, [pc, #412]	; (8002e38 <sampling+0x1218>)
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	4a66      	ldr	r2, [pc, #408]	; (8002e38 <sampling+0x1218>)
 8002ca0:	62d3      	str	r3, [r2, #44]	; 0x2c
		//sample_Accu[0] =sample_Accu[1];

		//filter 2
		sample_Accu[3]=play_holder2[i] >>5; // sine
 8002ca2:	4b67      	ldr	r3, [pc, #412]	; (8002e40 <sampling+0x1220>)
 8002ca4:	881b      	ldrh	r3, [r3, #0]
 8002ca6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	f853 3c80 	ldr.w	r3, [r3, #-128]
 8002cb2:	115b      	asrs	r3, r3, #5
 8002cb4:	4a5f      	ldr	r2, [pc, #380]	; (8002e34 <sampling+0x1214>)
 8002cb6:	60d3      	str	r3, [r2, #12]


				if (freq_point[2]>1) freq_point[2]=1;
 8002cb8:	4b5d      	ldr	r3, [pc, #372]	; (8002e30 <sampling+0x1210>)
 8002cba:	edd3 7a02 	vldr	s15, [r3, #8]
 8002cbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002cc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cca:	dd03      	ble.n	8002cd4 <sampling+0x10b4>
 8002ccc:	4b58      	ldr	r3, [pc, #352]	; (8002e30 <sampling+0x1210>)
 8002cce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002cd2:	609a      	str	r2, [r3, #8]

				freq_point[3]=1-freq_point[2];
 8002cd4:	4b56      	ldr	r3, [pc, #344]	; (8002e30 <sampling+0x1210>)
 8002cd6:	edd3 7a02 	vldr	s15, [r3, #8]
 8002cda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002cde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ce2:	4b53      	ldr	r3, [pc, #332]	; (8002e30 <sampling+0x1210>)
 8002ce4:	edc3 7a03 	vstr	s15, [r3, #12]
				filter_accus[6]=sample_Accu[3];
 8002ce8:	4b52      	ldr	r3, [pc, #328]	; (8002e34 <sampling+0x1214>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	ee07 3a90 	vmov	s15, r3
 8002cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cf4:	4b50      	ldr	r3, [pc, #320]	; (8002e38 <sampling+0x1218>)
 8002cf6:	edc3 7a06 	vstr	s15, [r3, #24]
			//	filter_accus[6]= filter_accus[6]*adsr_level[3]; // add adsr envelope

				filter_accus[7]=(filter_accus[6]*freq_point[2])+(filter_accus[7]*freq_point[3]);
 8002cfa:	4b4f      	ldr	r3, [pc, #316]	; (8002e38 <sampling+0x1218>)
 8002cfc:	ed93 7a06 	vldr	s14, [r3, #24]
 8002d00:	4b4b      	ldr	r3, [pc, #300]	; (8002e30 <sampling+0x1210>)
 8002d02:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d0a:	4b4b      	ldr	r3, [pc, #300]	; (8002e38 <sampling+0x1218>)
 8002d0c:	edd3 6a07 	vldr	s13, [r3, #28]
 8002d10:	4b47      	ldr	r3, [pc, #284]	; (8002e30 <sampling+0x1210>)
 8002d12:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d1e:	4b46      	ldr	r3, [pc, #280]	; (8002e38 <sampling+0x1218>)
 8002d20:	edc3 7a07 	vstr	s15, [r3, #28]
				filter_accus[8]=(filter_accus[7]*freq_point[2])+(filter_accus[8]*freq_point[3]);
 8002d24:	4b44      	ldr	r3, [pc, #272]	; (8002e38 <sampling+0x1218>)
 8002d26:	ed93 7a07 	vldr	s14, [r3, #28]
 8002d2a:	4b41      	ldr	r3, [pc, #260]	; (8002e30 <sampling+0x1210>)
 8002d2c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d34:	4b40      	ldr	r3, [pc, #256]	; (8002e38 <sampling+0x1218>)
 8002d36:	edd3 6a08 	vldr	s13, [r3, #32]
 8002d3a:	4b3d      	ldr	r3, [pc, #244]	; (8002e30 <sampling+0x1210>)
 8002d3c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d48:	4b3b      	ldr	r3, [pc, #236]	; (8002e38 <sampling+0x1218>)
 8002d4a:	edc3 7a08 	vstr	s15, [r3, #32]
				filter_accus[9]=(filter_accus[8]*freq_point[2])+(filter_accus[9]*freq_point[3]);
 8002d4e:	4b3a      	ldr	r3, [pc, #232]	; (8002e38 <sampling+0x1218>)
 8002d50:	ed93 7a08 	vldr	s14, [r3, #32]
 8002d54:	4b36      	ldr	r3, [pc, #216]	; (8002e30 <sampling+0x1210>)
 8002d56:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d5e:	4b36      	ldr	r3, [pc, #216]	; (8002e38 <sampling+0x1218>)
 8002d60:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002d64:	4b32      	ldr	r3, [pc, #200]	; (8002e30 <sampling+0x1210>)
 8002d66:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d72:	4b31      	ldr	r3, [pc, #196]	; (8002e38 <sampling+0x1218>)
 8002d74:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				filter_accus[10]=(filter_accus[9]*freq_point[2])+(filter_accus[10]*freq_point[3]);
 8002d78:	4b2f      	ldr	r3, [pc, #188]	; (8002e38 <sampling+0x1218>)
 8002d7a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002d7e:	4b2c      	ldr	r3, [pc, #176]	; (8002e30 <sampling+0x1210>)
 8002d80:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d88:	4b2b      	ldr	r3, [pc, #172]	; (8002e38 <sampling+0x1218>)
 8002d8a:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002d8e:	4b28      	ldr	r3, [pc, #160]	; (8002e30 <sampling+0x1210>)
 8002d90:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d9c:	4b26      	ldr	r3, [pc, #152]	; (8002e38 <sampling+0x1218>)
 8002d9e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				filter_hold[1]=(filter_accus[10]+filter_accus[12])*0.5; //half sample
 8002da2:	4b25      	ldr	r3, [pc, #148]	; (8002e38 <sampling+0x1218>)
 8002da4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002da8:	4b23      	ldr	r3, [pc, #140]	; (8002e38 <sampling+0x1218>)
 8002daa:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002dae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002db2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002db6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dba:	4b20      	ldr	r3, [pc, #128]	; (8002e3c <sampling+0x121c>)
 8002dbc:	edc3 7a01 	vstr	s15, [r3, #4]
				sample_Accu[2] =filter_accus[10]; //out
 8002dc0:	4b1d      	ldr	r3, [pc, #116]	; (8002e38 <sampling+0x1218>)
 8002dc2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002dc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dca:	ee17 2a90 	vmov	r2, s15
 8002dce:	4b19      	ldr	r3, [pc, #100]	; (8002e34 <sampling+0x1214>)
 8002dd0:	609a      	str	r2, [r3, #8]
				filter_accus[12]=filter_accus[10]; //write back new value
 8002dd2:	4b19      	ldr	r3, [pc, #100]	; (8002e38 <sampling+0x1218>)
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd6:	4a18      	ldr	r2, [pc, #96]	; (8002e38 <sampling+0x1218>)
 8002dd8:	6313      	str	r3, [r2, #48]	; 0x30


filter_Accu=0;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002de0:	f102 0210 	add.w	r2, r2, #16
 8002de4:	6013      	str	r3, [r2, #0]
filter_Accu=(sample_Accu[0]+sample_Accu[2])>>8; //filter + drum out
 8002de6:	4b13      	ldr	r3, [pc, #76]	; (8002e34 <sampling+0x1214>)
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	4b12      	ldr	r3, [pc, #72]	; (8002e34 <sampling+0x1214>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	4413      	add	r3, r2
 8002df0:	121b      	asrs	r3, r3, #8
 8002df2:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002df6:	f102 0210 	add.w	r2, r2, #16
 8002dfa:	6013      	str	r3, [r2, #0]
//filter_Accu=(sample_Accu[1]+sample_Accu[3])>>8; //filter + drum out ,clean out
 //filter_Accu=sample_Accu[1]>>7;

// filter_Accu=sample_Accu[2]>>11;
//filter_Accu=(sample_Accu[1]>>7)+(sample_Accu[3]>>8); //filter + drum out
 if (one_shot!=199)   one_shot++;  //play one attack then stop
 8002dfc:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <sampling+0x1224>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2bc7      	cmp	r3, #199	; 0xc7
 8002e02:	d005      	beq.n	8002e10 <sampling+0x11f0>
 8002e04:	4b0f      	ldr	r3, [pc, #60]	; (8002e44 <sampling+0x1224>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	4b0d      	ldr	r3, [pc, #52]	; (8002e44 <sampling+0x1224>)
 8002e0e:	701a      	strb	r2, [r3, #0]

 if (filter_Accu>0xFFFF) filter_Accu=0xFFFF; else if (filter_Accu<-65535) filter_Accu=-65535;  // limiter to 16 bits
 8002e10:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002e14:	f103 0310 	add.w	r3, r3, #16
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e1e:	db13      	blt.n	8002e48 <sampling+0x1228>
 8002e20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e24:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002e28:	f102 0210 	add.w	r2, r2, #16
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	e019      	b.n	8002e64 <sampling+0x1244>
 8002e30:	20002368 	.word	0x20002368
 8002e34:	20000e84 	.word	0x20000e84
 8002e38:	20002318 	.word	0x20002318
 8002e3c:	20002354 	.word	0x20002354
 8002e40:	20000ea4 	.word	0x20000ea4
 8002e44:	200022ec 	.word	0x200022ec
 8002e48:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002e4c:	f103 0310 	add.w	r3, r3, #16
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e56:	dc05      	bgt.n	8002e64 <sampling+0x1244>
 8002e58:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <sampling+0x12a8>)
 8002e5a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002e5e:	f102 0210 	add.w	r2, r2, #16
 8002e62:	6013      	str	r3, [r2, #0]


 play_sample[i_total]=(filter_Accu>>6)+1024;   // final output disable for now 2544
 8002e64:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002e68:	f103 0310 	add.w	r3, r3, #16
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	119b      	asrs	r3, r3, #6
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002e76:	f103 0302 	add.w	r3, r3, #2
 8002e7a:	881b      	ldrh	r3, [r3, #0]
 8002e7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e80:	b291      	uxth	r1, r2
 8002e82:	4a12      	ldr	r2, [pc, #72]	; (8002ecc <sampling+0x12ac>)
 8002e84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 8002e88:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <sampling+0x12b0>)
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <sampling+0x12b0>)
 8002e92:	801a      	strh	r2, [r3, #0]
 8002e94:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <sampling+0x12b0>)
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e9c:	f4ff ade5 	bcc.w	8002a6a <sampling+0xe4a>
} // end of filer


//time_final=time_proc;   // in samples

if (bank_write)   error_count++;  // if bank write is high it means too much stall here
 8002ea0:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <sampling+0x12b4>)
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <sampling+0x1294>
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <sampling+0x12b8>)
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	3301      	adds	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	4b09      	ldr	r3, [pc, #36]	; (8002ed8 <sampling+0x12b8>)
 8002eb2:	801a      	strh	r2, [r3, #0]
time_final[0]=time_proc;
 8002eb4:	4b09      	ldr	r3, [pc, #36]	; (8002edc <sampling+0x12bc>)
 8002eb6:	881a      	ldrh	r2, [r3, #0]
 8002eb8:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <sampling+0x12c0>)
 8002eba:	801a      	strh	r2, [r3, #0]


//bank_write=0;   /// total 320 sample time (39khz)
}
 8002ebc:	bf00      	nop
 8002ebe:	f507 5784 	add.w	r7, r7, #4224	; 0x1080
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	ffff0001 	.word	0xffff0001
 8002ecc:	20000ea8 	.word	0x20000ea8
 8002ed0:	20000ea4 	.word	0x20000ea4
 8002ed4:	200001b2 	.word	0x200001b2
 8002ed8:	2000307e 	.word	0x2000307e
 8002edc:	2000307c 	.word	0x2000307c
 8002ee0:	20003078 	.word	0x20003078

08002ee4 <sine_count>:
mask_result=mask_tempB &1;


}

void sine_count(void) {         // sine_out is the output 9  bit  , works
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
int32_t sine_tempA;
int32_t sine_tempB;
int8_t sine_frac;


sine_counter=(sine_counterB>>5);  // up countr controlled by counter
 8002eea:	4b2f      	ldr	r3, [pc, #188]	; (8002fa8 <sine_count+0xc4>)
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	095b      	lsrs	r3, r3, #5
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	4b2e      	ldr	r3, [pc, #184]	; (8002fac <sine_count+0xc8>)
 8002ef4:	801a      	strh	r2, [r3, #0]
sine_frac=sine_counterB & 31;  // grab last 5 bits, actual position for linear interpol,fractional
 8002ef6:	4b2c      	ldr	r3, [pc, #176]	; (8002fa8 <sine_count+0xc4>)
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	b25b      	sxtb	r3, r3
 8002efc:	f003 031f 	and.w	r3, r3, #31
 8002f00:	73fb      	strb	r3, [r7, #15]

	if (sine_counter>sine_length) sine_counter = sine_length;		// seems to be faster than using a for loop to calculate both values
 8002f02:	4b2a      	ldr	r3, [pc, #168]	; (8002fac <sine_count+0xc8>)
 8002f04:	881a      	ldrh	r2, [r3, #0]
 8002f06:	4b2a      	ldr	r3, [pc, #168]	; (8002fb0 <sine_count+0xcc>)
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d903      	bls.n	8002f16 <sine_count+0x32>
 8002f0e:	4b28      	ldr	r3, [pc, #160]	; (8002fb0 <sine_count+0xcc>)
 8002f10:	881a      	ldrh	r2, [r3, #0]
 8002f12:	4b26      	ldr	r3, [pc, #152]	; (8002fac <sine_count+0xc8>)
 8002f14:	801a      	strh	r2, [r3, #0]

	sine_out = sine_block[sine_counter];  // 0- 40000
 8002f16:	4b25      	ldr	r3, [pc, #148]	; (8002fac <sine_count+0xc8>)
 8002f18:	881b      	ldrh	r3, [r3, #0]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	4b25      	ldr	r3, [pc, #148]	; (8002fb4 <sine_count+0xd0>)
 8002f1e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002f22:	461a      	mov	r2, r3
 8002f24:	4b24      	ldr	r3, [pc, #144]	; (8002fb8 <sine_count+0xd4>)
 8002f26:	601a      	str	r2, [r3, #0]
	sine_tempA=sine_out; // grab first value , needs to be always plus
 8002f28:	4b23      	ldr	r3, [pc, #140]	; (8002fb8 <sine_count+0xd4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	60bb      	str	r3, [r7, #8]
	sine_tempA=sine_tempA-20000; //convert to signed
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 8002f34:	3b20      	subs	r3, #32
 8002f36:	60bb      	str	r3, [r7, #8]

	sine_counter++;
 8002f38:	4b1c      	ldr	r3, [pc, #112]	; (8002fac <sine_count+0xc8>)
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <sine_count+0xc8>)
 8002f42:	801a      	strh	r2, [r3, #0]
	if (sine_counter>=sine_length)  sine_counter=0; // set to sample length
 8002f44:	4b19      	ldr	r3, [pc, #100]	; (8002fac <sine_count+0xc8>)
 8002f46:	881a      	ldrh	r2, [r3, #0]
 8002f48:	4b19      	ldr	r3, [pc, #100]	; (8002fb0 <sine_count+0xcc>)
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d302      	bcc.n	8002f56 <sine_count+0x72>
 8002f50:	4b16      	ldr	r3, [pc, #88]	; (8002fac <sine_count+0xc8>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	801a      	strh	r2, [r3, #0]

			sine_out = sine_block[sine_counter];  // grab second value
 8002f56:	4b15      	ldr	r3, [pc, #84]	; (8002fac <sine_count+0xc8>)
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	4b15      	ldr	r3, [pc, #84]	; (8002fb4 <sine_count+0xd0>)
 8002f5e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002f62:	461a      	mov	r2, r3
 8002f64:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <sine_count+0xd4>)
 8002f66:	601a      	str	r2, [r3, #0]

		sine_tempB=sine_out; // grab first value
 8002f68:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <sine_count+0xd4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	607b      	str	r3, [r7, #4]
			sine_tempB=sine_tempB-20000;  // convert to signed and +256 to -256
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 8002f74:	3b20      	subs	r3, #32
 8002f76:	607b      	str	r3, [r7, #4]

			sine_tempB=	sine_tempB-sine_tempA;   // calculate fraction then add
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	607b      	str	r3, [r7, #4]
			sine_tempB=sine_tempB>>5; // div 32 or 32 upsample
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	115b      	asrs	r3, r3, #5
 8002f84:	607b      	str	r3, [r7, #4]

			sine_tempB=sine_tempB*sine_frac; // mult by steps , can overshoot !!
 8002f86:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	fb02 f303 	mul.w	r3, r2, r3
 8002f90:	607b      	str	r3, [r7, #4]

			sine_out=(sine_tempA+sine_tempB);   // add back to start value
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4413      	add	r3, r2
 8002f98:	4a07      	ldr	r2, [pc, #28]	; (8002fb8 <sine_count+0xd4>)
 8002f9a:	6013      	str	r3, [r2, #0]
			//sine_tempA=sine_tempA; //needs

			//sine_out=sine_tempA;


}
 8002f9c:	bf00      	nop
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	20000e6a 	.word	0x20000e6a
 8002fac:	20000e68 	.word	0x20000e68
 8002fb0:	20000142 	.word	0x20000142
 8002fb4:	08009ed8 	.word	0x08009ed8
 8002fb8:	20000e6c 	.word	0x20000e6c
 8002fbc:	00000000 	.word	0x00000000

08002fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fc2:	b0a3      	sub	sp, #140	; 0x8c
 8002fc4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fc6:	f001 fb0b 	bl	80045e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fca:	f000 fcd3 	bl	8003974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fce:	f000 ff99 	bl	8003f04 <MX_GPIO_Init>
  MX_DMA_Init();
 8002fd2:	f000 ff77 	bl	8003ec4 <MX_DMA_Init>
  MX_ADC1_Init();
 8002fd6:	f000 fd37 	bl	8003a48 <MX_ADC1_Init>
  MX_SPI2_Init();
 8002fda:	f000 fe1f 	bl	8003c1c <MX_SPI2_Init>
  MX_TIM3_Init();
 8002fde:	f000 fea7 	bl	8003d30 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002fe2:	f000 ff1b 	bl	8003e1c <MX_TIM4_Init>
  MX_I2C2_Init();
 8002fe6:	f000 fdb5 	bl	8003b54 <MX_I2C2_Init>
  MX_TIM2_Init();
 8002fea:	f000 fe4d 	bl	8003c88 <MX_TIM2_Init>
  MX_SPI1_Init();
 8002fee:	f000 fddf 	bl	8003bb0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  const volatile uint8_t *userConfig=(const volatile uint8_t *)0x0800D2F0;
 8002ff2:	4baa      	ldr	r3, [pc, #680]	; (800329c <main+0x2dc>)
 8002ff4:	673b      	str	r3, [r7, #112]	; 0x70



//LL_SPI_Enable(SPI2);

  HAL_SPI_Init(&hspi2); // write to register hspi2
 8002ff6:	48aa      	ldr	r0, [pc, #680]	; (80032a0 <main+0x2e0>)
 8002ff8:	f004 fe96 	bl	8007d28 <HAL_SPI_Init>
  HAL_SPI_Init(&hspi1); // write to register hspi2
 8002ffc:	48a9      	ldr	r0, [pc, #676]	; (80032a4 <main+0x2e4>)
 8002ffe:	f004 fe93 	bl	8007d28 <HAL_SPI_Init>
  // lcd_init(); // keep this late or have issues
//HAL_TIM_Base_Start_IT(&htim1);  // This needs to work for irq   ,disbling tim1 made loop a lot faster
//TIM1->CCER=0;
HAL_TIM_Base_Start_IT(&htim3);  // This needs to work for irq
 8003002:	48a9      	ldr	r0, [pc, #676]	; (80032a8 <main+0x2e8>)
 8003004:	f005 fce2 	bl	80089cc <HAL_TIM_Base_Start_IT>
TIM3->CCER=0;
 8003008:	4ba8      	ldr	r3, [pc, #672]	; (80032ac <main+0x2ec>)
 800300a:	2200      	movs	r2, #0
 800300c:	621a      	str	r2, [r3, #32]
HAL_TIM_Base_Start(&htim2);
 800300e:	48a8      	ldr	r0, [pc, #672]	; (80032b0 <main+0x2f0>)
 8003010:	f005 fc82 	bl	8008918 <HAL_TIM_Base_Start>
HAL_TIM_Base_Start(&htim4);
 8003014:	48a7      	ldr	r0, [pc, #668]	; (80032b4 <main+0x2f4>)
 8003016:	f005 fc7f 	bl	8008918 <HAL_TIM_Base_Start>
//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  // they both work fine together
HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 800301a:	2108      	movs	r1, #8
 800301c:	48a2      	ldr	r0, [pc, #648]	; (80032a8 <main+0x2e8>)
 800301e:	f005 fd91 	bl	8008b44 <HAL_TIM_PWM_Start>
//HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,pData, 63);
TIM2->CNT=32000;
 8003022:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003026:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800302a:	625a      	str	r2, [r3, #36]	; 0x24
HAL_ADC_Start(&hadc1);
 800302c:	48a2      	ldr	r0, [pc, #648]	; (80032b8 <main+0x2f8>)
 800302e:	f001 fbb1 	bl	8004794 <HAL_ADC_Start>
HAL_ADC_Start_DMA(&hadc1, adc_source, 1024); //dma start ,needs this and adc start ,set sampling time to very long or it will fail
 8003032:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003036:	49a1      	ldr	r1, [pc, #644]	; (80032bc <main+0x2fc>)
 8003038:	489f      	ldr	r0, [pc, #636]	; (80032b8 <main+0x2f8>)
 800303a:	f001 fceb 	bl	8004a14 <HAL_ADC_Start_DMA>
//HAL_DMA_Init(&hdma_spi2_tx);

HAL_I2C_MspInit(&hi2c2);
 800303e:	48a0      	ldr	r0, [pc, #640]	; (80032c0 <main+0x300>)
 8003040:	f001 f89a 	bl	8004178 <HAL_I2C_MspInit>
uint8_t send_spi1[5]={0x90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,};
 8003044:	4a9f      	ldr	r2, [pc, #636]	; (80032c4 <main+0x304>)
 8003046:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800304a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800304e:	6018      	str	r0, [r3, #0]
 8003050:	3304      	adds	r3, #4
 8003052:	7019      	strb	r1, [r3, #0]





HAL_Delay(5);
 8003054:	2005      	movs	r0, #5
 8003056:	f001 fb35 	bl	80046c4 <HAL_Delay>


send_spi1[0]=0x06; //enable write  , only lasts for single operation
 800305a:	2306      	movs	r3, #6
 800305c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8003060:	2200      	movs	r2, #0
 8003062:	2110      	movs	r1, #16
 8003064:	4898      	ldr	r0, [pc, #608]	; (80032c8 <main+0x308>)
 8003066:	f003 fa41 	bl	80064ec <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 800306a:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800306e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003072:	2201      	movs	r2, #1
 8003074:	488b      	ldr	r0, [pc, #556]	; (80032a4 <main+0x2e4>)
 8003076:	f004 fee0 	bl	8007e3a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 800307a:	2201      	movs	r2, #1
 800307c:	2110      	movs	r1, #16
 800307e:	4892      	ldr	r0, [pc, #584]	; (80032c8 <main+0x308>)
 8003080:	f003 fa34 	bl	80064ec <HAL_GPIO_WritePin>
HAL_Delay(5);
 8003084:	2005      	movs	r0, #5
 8003086:	f001 fb1d 	bl	80046c4 <HAL_Delay>
send_spi1[0]=0x20; //sector erase
 800308a:	2320      	movs	r3, #32
 800308c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
send_spi1[1]=0; //24bit address msb
 8003090:	2300      	movs	r3, #0
 8003092:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
send_spi1[2]=0; //24bit address
 8003096:	2300      	movs	r3, #0
 8003098:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
send_spi1[3]=1; //24bit address lsb
 800309c:	2301      	movs	r3, #1
 800309e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);         // enable for sector erase   , stays empty when enabled
 80030a2:	2200      	movs	r2, #0
 80030a4:	2110      	movs	r1, #16
 80030a6:	4888      	ldr	r0, [pc, #544]	; (80032c8 <main+0x308>)
 80030a8:	f003 fa20 	bl	80064ec <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 4, 1000);   //erase sector ,works
 80030ac:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80030b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030b4:	2204      	movs	r2, #4
 80030b6:	487b      	ldr	r0, [pc, #492]	; (80032a4 <main+0x2e4>)
 80030b8:	f004 febf 	bl	8007e3a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 80030bc:	2201      	movs	r2, #1
 80030be:	2110      	movs	r1, #16
 80030c0:	4881      	ldr	r0, [pc, #516]	; (80032c8 <main+0x308>)
 80030c2:	f003 fa13 	bl	80064ec <HAL_GPIO_WritePin>


send_spi1[0]=0x05; //read status register  if writing
 80030c6:	2305      	movs	r3, #5
 80030c8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
send_spi1[1]=0; //24bit address msb
 80030cc:	2300      	movs	r3, #0
 80030ce:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
status_reg[1]=1; // set busy on
 80030d2:	4b7e      	ldr	r3, [pc, #504]	; (80032cc <main+0x30c>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	705a      	strb	r2, [r3, #1]

while (status_reg[1]&1){								// check if write busy
 80030d8:	e012      	b.n	8003100 <main+0x140>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 80030da:	2200      	movs	r2, #0
 80030dc:	2110      	movs	r1, #16
 80030de:	487a      	ldr	r0, [pc, #488]	; (80032c8 <main+0x308>)
 80030e0:	f003 fa04 	bl	80064ec <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, send_spi1, status_reg,2, 200);
 80030e4:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80030e8:	23c8      	movs	r3, #200	; 0xc8
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	2302      	movs	r3, #2
 80030ee:	4a77      	ldr	r2, [pc, #476]	; (80032cc <main+0x30c>)
 80030f0:	486c      	ldr	r0, [pc, #432]	; (80032a4 <main+0x2e4>)
 80030f2:	f005 f8ef 	bl	80082d4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 80030f6:	2201      	movs	r2, #1
 80030f8:	2110      	movs	r1, #16
 80030fa:	4873      	ldr	r0, [pc, #460]	; (80032c8 <main+0x308>)
 80030fc:	f003 f9f6 	bl	80064ec <HAL_GPIO_WritePin>
while (status_reg[1]&1){								// check if write busy
 8003100:	4b72      	ldr	r3, [pc, #456]	; (80032cc <main+0x30c>)
 8003102:	785b      	ldrb	r3, [r3, #1]
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1e6      	bne.n	80030da <main+0x11a>
}

send_spi1[0]=0x06; //enable write again
 800310c:	2306      	movs	r3, #6
 800310e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8003112:	2200      	movs	r2, #0
 8003114:	2110      	movs	r1, #16
 8003116:	486c      	ldr	r0, [pc, #432]	; (80032c8 <main+0x308>)
 8003118:	f003 f9e8 	bl	80064ec <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 800311c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8003120:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003124:	2201      	movs	r2, #1
 8003126:	485f      	ldr	r0, [pc, #380]	; (80032a4 <main+0x2e4>)
 8003128:	f004 fe87 	bl	8007e3a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 800312c:	2201      	movs	r2, #1
 800312e:	2110      	movs	r1, #16
 8003130:	4865      	ldr	r0, [pc, #404]	; (80032c8 <main+0x308>)
 8003132:	f003 f9db 	bl	80064ec <HAL_GPIO_WritePin>
HAL_Delay(5);
 8003136:	2005      	movs	r0, #5
 8003138:	f001 fac4 	bl	80046c4 <HAL_Delay>




//uint8_t temp_spi1[]={0x02,0,0,1,"H","E","L","L","O"," ","W","O","R","L","D",250,0,0} ; //page progrram ,24bit(address)  +1-255 byte data  (page)
uint8_t temp_spi1[]={0x02,0,0,1,128,129,130,131,132,133,134,135,136,137,138,250,0,0} ; //page progrram ,24bit(address)  +1-255 byte data  (page)
 800313c:	4b64      	ldr	r3, [pc, #400]	; (80032d0 <main+0x310>)
 800313e:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8003142:	461d      	mov	r5, r3
 8003144:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003146:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003148:	682b      	ldr	r3, [r5, #0]
 800314a:	8023      	strh	r3, [r4, #0]
memcpy  (send_spi1,temp_spi1, 14);   // copy new array over old
 800314c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003150:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003154:	220e      	movs	r2, #14
 8003156:	4618      	mov	r0, r3
 8003158:	f006 fcc4 	bl	8009ae4 <memcpy>

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 800315c:	2200      	movs	r2, #0
 800315e:	2110      	movs	r1, #16
 8003160:	4859      	ldr	r0, [pc, #356]	; (80032c8 <main+0x308>)
 8003162:	f003 f9c3 	bl	80064ec <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 14, 1000);  //address,page program
 8003166:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800316a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800316e:	220e      	movs	r2, #14
 8003170:	484c      	ldr	r0, [pc, #304]	; (80032a4 <main+0x2e4>)
 8003172:	f004 fe62 	bl	8007e3a <HAL_SPI_Transmit>

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8003176:	2201      	movs	r2, #1
 8003178:	2110      	movs	r1, #16
 800317a:	4853      	ldr	r0, [pc, #332]	; (80032c8 <main+0x308>)
 800317c:	f003 f9b6 	bl	80064ec <HAL_GPIO_WritePin>




HAL_Delay(25);
 8003180:	2019      	movs	r0, #25
 8003182:	f001 fa9f 	bl	80046c4 <HAL_Delay>
send_spi1[0]=0x04; //disable write
 8003186:	2304      	movs	r3, #4
 8003188:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 800318c:	2200      	movs	r2, #0
 800318e:	2110      	movs	r1, #16
 8003190:	484d      	ldr	r0, [pc, #308]	; (80032c8 <main+0x308>)
 8003192:	f003 f9ab 	bl	80064ec <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8003196:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800319a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800319e:	2201      	movs	r2, #1
 80031a0:	4840      	ldr	r0, [pc, #256]	; (80032a4 <main+0x2e4>)
 80031a2:	f004 fe4a 	bl	8007e3a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 80031a6:	2201      	movs	r2, #1
 80031a8:	2110      	movs	r1, #16
 80031aa:	4847      	ldr	r0, [pc, #284]	; (80032c8 <main+0x308>)
 80031ac:	f003 f99e 	bl	80064ec <HAL_GPIO_WritePin>

HAL_Delay(5);
 80031b0:	2005      	movs	r0, #5
 80031b2:	f001 fa87 	bl	80046c4 <HAL_Delay>
memcpy  (send_spi1,return_spi1, 14);   // clear out
 80031b6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80031ba:	220e      	movs	r2, #14
 80031bc:	4945      	ldr	r1, [pc, #276]	; (80032d4 <main+0x314>)
 80031be:	4618      	mov	r0, r3
 80031c0:	f006 fc90 	bl	8009ae4 <memcpy>
send_spi1[0]=0x03; //read page 1
 80031c4:	2303      	movs	r3, #3
 80031c6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
send_spi1[1]=0; //24bit address msb
 80031ca:	2300      	movs	r3, #0
 80031cc:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
send_spi1[2]=0; //24bit address
 80031d0:	2300      	movs	r3, #0
 80031d2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
send_spi1[3]=1; //24bit address lsb
 80031d6:	2301      	movs	r3, #1
 80031d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // when readin low till the end
 80031dc:	2200      	movs	r2, #0
 80031de:	2110      	movs	r1, #16
 80031e0:	4839      	ldr	r0, [pc, #228]	; (80032c8 <main+0x308>)
 80031e2:	f003 f983 	bl	80064ec <HAL_GPIO_WritePin>

HAL_SPI_Transmit (&hspi1, send_spi1, 4, 100);
 80031e6:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80031ea:	2364      	movs	r3, #100	; 0x64
 80031ec:	2204      	movs	r2, #4
 80031ee:	482d      	ldr	r0, [pc, #180]	; (80032a4 <main+0x2e4>)
 80031f0:	f004 fe23 	bl	8007e3a <HAL_SPI_Transmit>
HAL_SPI_Receive (&hspi1, return_spi1, 10, 100);   // works fine
 80031f4:	2364      	movs	r3, #100	; 0x64
 80031f6:	220a      	movs	r2, #10
 80031f8:	4936      	ldr	r1, [pc, #216]	; (80032d4 <main+0x314>)
 80031fa:	482a      	ldr	r0, [pc, #168]	; (80032a4 <main+0x2e4>)
 80031fc:	f004 ff59 	bl	80080b2 <HAL_SPI_Receive>

//HAL_SPI_TransmitReceive(&hspi1, send_spi1, return_spi1,14, 100);  // better in case skip , 4 bytes is null then data , slow
//HAL_Delay(5);

//HAL_SPI_Receive(&hspi1, return_spi1, 12, 1000);  // reverse msb ?
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8003200:	2201      	movs	r2, #1
 8003202:	2110      	movs	r1, #16
 8003204:	4830      	ldr	r0, [pc, #192]	; (80032c8 <main+0x308>)
 8003206:	f003 f971 	bl	80064ec <HAL_GPIO_WritePin>



HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 800320a:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800320e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003212:	2201      	movs	r2, #1
 8003214:	4823      	ldr	r0, [pc, #140]	; (80032a4 <main+0x2e4>)
 8003216:	f004 fe10 	bl	8007e3a <HAL_SPI_Transmit>

uint8_t potSource2[64];



	for(i=0;i<5;i++){     // 256
 800321a:	4b2f      	ldr	r3, [pc, #188]	; (80032d8 <main+0x318>)
 800321c:	2200      	movs	r2, #0
 800321e:	801a      	strh	r2, [r3, #0]
 8003220:	e02f      	b.n	8003282 <main+0x2c2>
	HAL_I2C_Mem_Read(&hi2c2, 160, 64+(i*64), 2,&potSource2, 64,1000);		// all good readin eeprom  values
 8003222:	4b2d      	ldr	r3, [pc, #180]	; (80032d8 <main+0x318>)
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	3301      	adds	r3, #1
 8003228:	b29b      	uxth	r3, r3
 800322a:	019b      	lsls	r3, r3, #6
 800322c:	b29a      	uxth	r2, r3
 800322e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003232:	9302      	str	r3, [sp, #8]
 8003234:	2340      	movs	r3, #64	; 0x40
 8003236:	9301      	str	r3, [sp, #4]
 8003238:	f107 0308 	add.w	r3, r7, #8
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	2302      	movs	r3, #2
 8003240:	21a0      	movs	r1, #160	; 0xa0
 8003242:	481f      	ldr	r0, [pc, #124]	; (80032c0 <main+0x300>)
 8003244:	f003 fbaa 	bl	800699c <HAL_I2C_Mem_Read>

	memcpy (potSource+(i*64),potSource2,sizeof(potSource2));   //this works  ok now
 8003248:	4b23      	ldr	r3, [pc, #140]	; (80032d8 <main+0x318>)
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	019b      	lsls	r3, r3, #6
 800324e:	461a      	mov	r2, r3
 8003250:	4b22      	ldr	r3, [pc, #136]	; (80032dc <main+0x31c>)
 8003252:	4413      	add	r3, r2
 8003254:	f107 0408 	add.w	r4, r7, #8
 8003258:	469c      	mov	ip, r3
 800325a:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 800325e:	4665      	mov	r5, ip
 8003260:	4626      	mov	r6, r4
 8003262:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003264:	6028      	str	r0, [r5, #0]
 8003266:	6069      	str	r1, [r5, #4]
 8003268:	60aa      	str	r2, [r5, #8]
 800326a:	60eb      	str	r3, [r5, #12]
 800326c:	3410      	adds	r4, #16
 800326e:	f10c 0c10 	add.w	ip, ip, #16
 8003272:	4574      	cmp	r4, lr
 8003274:	d1f3      	bne.n	800325e <main+0x29e>
	for(i=0;i<5;i++){     // 256
 8003276:	4b18      	ldr	r3, [pc, #96]	; (80032d8 <main+0x318>)
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	3301      	adds	r3, #1
 800327c:	b29a      	uxth	r2, r3
 800327e:	4b16      	ldr	r3, [pc, #88]	; (80032d8 <main+0x318>)
 8003280:	801a      	strh	r2, [r3, #0]
 8003282:	4b15      	ldr	r3, [pc, #84]	; (80032d8 <main+0x318>)
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	2b04      	cmp	r3, #4
 8003288:	d9cb      	bls.n	8003222 <main+0x262>


	}

	for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 800328a:	4b13      	ldr	r3, [pc, #76]	; (80032d8 <main+0x318>)
 800328c:	2200      	movs	r2, #0
 800328e:	801a      	strh	r2, [r3, #0]
 8003290:	e07c      	b.n	800338c <main+0x3cc>

	for 	(n=0;n<18;n++){					// this is ok
 8003292:	4b13      	ldr	r3, [pc, #76]	; (80032e0 <main+0x320>)
 8003294:	2200      	movs	r2, #0
 8003296:	801a      	strh	r2, [r3, #0]
 8003298:	e06e      	b.n	8003378 <main+0x3b8>
 800329a:	bf00      	nop
 800329c:	0800d2f0 	.word	0x0800d2f0
 80032a0:	20004560 	.word	0x20004560
 80032a4:	20004508 	.word	0x20004508
 80032a8:	20004600 	.word	0x20004600
 80032ac:	40000400 	.word	0x40000400
 80032b0:	200045b8 	.word	0x200045b8
 80032b4:	20004648 	.word	0x20004648
 80032b8:	2000440c 	.word	0x2000440c
 80032bc:	200016b4 	.word	0x200016b4
 80032c0:	200044b4 	.word	0x200044b4
 80032c4:	08009e04 	.word	0x08009e04
 80032c8:	40020000 	.word	0x40020000
 80032cc:	200001b8 	.word	0x200001b8
 80032d0:	08009e0c 	.word	0x08009e0c
 80032d4:	20003068 	.word	0x20003068
 80032d8:	20000ea4 	.word	0x20000ea4
 80032dc:	20000ce8 	.word	0x20000ce8
 80032e0:	20000e82 	.word	0x20000e82
		if (n==0) gfx_ram[(i*18)+n] = 128+(i&31);   // half page
 80032e4:	4b9e      	ldr	r3, [pc, #632]	; (8003560 <main+0x5a0>)
 80032e6:	881b      	ldrh	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d114      	bne.n	8003316 <main+0x356>
 80032ec:	4b9d      	ldr	r3, [pc, #628]	; (8003564 <main+0x5a4>)
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	f003 031f 	and.w	r3, r3, #31
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	4b9a      	ldr	r3, [pc, #616]	; (8003564 <main+0x5a4>)
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	4619      	mov	r1, r3
 80032fe:	460b      	mov	r3, r1
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	440b      	add	r3, r1
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	4619      	mov	r1, r3
 8003308:	4b95      	ldr	r3, [pc, #596]	; (8003560 <main+0x5a0>)
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	440b      	add	r3, r1
 800330e:	3a80      	subs	r2, #128	; 0x80
 8003310:	b2d1      	uxtb	r1, r2
 8003312:	4a95      	ldr	r2, [pc, #596]	; (8003568 <main+0x5a8>)
 8003314:	54d1      	strb	r1, [r2, r3]
		if (n==1) gfx_ram[(i*18)+n] = 128+((i>>5)*8);    // change x to 8
 8003316:	4b92      	ldr	r3, [pc, #584]	; (8003560 <main+0x5a0>)
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d114      	bne.n	8003348 <main+0x388>
 800331e:	4b91      	ldr	r3, [pc, #580]	; (8003564 <main+0x5a4>)
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	b29b      	uxth	r3, r3
 8003326:	3310      	adds	r3, #16
 8003328:	b2da      	uxtb	r2, r3
 800332a:	4b8e      	ldr	r3, [pc, #568]	; (8003564 <main+0x5a4>)
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	4619      	mov	r1, r3
 8003330:	460b      	mov	r3, r1
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	440b      	add	r3, r1
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	4619      	mov	r1, r3
 800333a:	4b89      	ldr	r3, [pc, #548]	; (8003560 <main+0x5a0>)
 800333c:	881b      	ldrh	r3, [r3, #0]
 800333e:	440b      	add	r3, r1
 8003340:	00d2      	lsls	r2, r2, #3
 8003342:	b2d1      	uxtb	r1, r2
 8003344:	4a88      	ldr	r2, [pc, #544]	; (8003568 <main+0x5a8>)
 8003346:	54d1      	strb	r1, [r2, r3]
		if (n>1)  gfx_ram[(i*18)+n] = 255;
 8003348:	4b85      	ldr	r3, [pc, #532]	; (8003560 <main+0x5a0>)
 800334a:	881b      	ldrh	r3, [r3, #0]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d90d      	bls.n	800336c <main+0x3ac>
 8003350:	4b84      	ldr	r3, [pc, #528]	; (8003564 <main+0x5a4>)
 8003352:	881b      	ldrh	r3, [r3, #0]
 8003354:	461a      	mov	r2, r3
 8003356:	4613      	mov	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	4413      	add	r3, r2
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	461a      	mov	r2, r3
 8003360:	4b7f      	ldr	r3, [pc, #508]	; (8003560 <main+0x5a0>)
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	4413      	add	r3, r2
 8003366:	4a80      	ldr	r2, [pc, #512]	; (8003568 <main+0x5a8>)
 8003368:	21ff      	movs	r1, #255	; 0xff
 800336a:	54d1      	strb	r1, [r2, r3]
	for 	(n=0;n<18;n++){					// this is ok
 800336c:	4b7c      	ldr	r3, [pc, #496]	; (8003560 <main+0x5a0>)
 800336e:	881b      	ldrh	r3, [r3, #0]
 8003370:	3301      	adds	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	4b7a      	ldr	r3, [pc, #488]	; (8003560 <main+0x5a0>)
 8003376:	801a      	strh	r2, [r3, #0]
 8003378:	4b79      	ldr	r3, [pc, #484]	; (8003560 <main+0x5a0>)
 800337a:	881b      	ldrh	r3, [r3, #0]
 800337c:	2b11      	cmp	r3, #17
 800337e:	d9b1      	bls.n	80032e4 <main+0x324>
	for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8003380:	4b78      	ldr	r3, [pc, #480]	; (8003564 <main+0x5a4>)
 8003382:	881b      	ldrh	r3, [r3, #0]
 8003384:	3301      	adds	r3, #1
 8003386:	b29a      	uxth	r2, r3
 8003388:	4b76      	ldr	r3, [pc, #472]	; (8003564 <main+0x5a4>)
 800338a:	801a      	strh	r2, [r3, #0]
 800338c:	4b75      	ldr	r3, [pc, #468]	; (8003564 <main+0x5a4>)
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	2b3f      	cmp	r3, #63	; 0x3f
 8003392:	f67f af7e 	bls.w	8003292 <main+0x2d2>
	}

	}


for(i=0;i<260;i++){			// write potvalues ,for display
 8003396:	4b73      	ldr	r3, [pc, #460]	; (8003564 <main+0x5a4>)
 8003398:	2200      	movs	r2, #0
 800339a:	801a      	strh	r2, [r3, #0]
 800339c:	e010      	b.n	80033c0 <main+0x400>
	potValues[i]=potSource[i]>>4;
 800339e:	4b71      	ldr	r3, [pc, #452]	; (8003564 <main+0x5a4>)
 80033a0:	881b      	ldrh	r3, [r3, #0]
 80033a2:	461a      	mov	r2, r3
 80033a4:	4b71      	ldr	r3, [pc, #452]	; (800356c <main+0x5ac>)
 80033a6:	5c9b      	ldrb	r3, [r3, r2]
 80033a8:	4a6e      	ldr	r2, [pc, #440]	; (8003564 <main+0x5a4>)
 80033aa:	8812      	ldrh	r2, [r2, #0]
 80033ac:	091b      	lsrs	r3, r3, #4
 80033ae:	b2d9      	uxtb	r1, r3
 80033b0:	4b6f      	ldr	r3, [pc, #444]	; (8003570 <main+0x5b0>)
 80033b2:	5499      	strb	r1, [r3, r2]
for(i=0;i<260;i++){			// write potvalues ,for display
 80033b4:	4b6b      	ldr	r3, [pc, #428]	; (8003564 <main+0x5a4>)
 80033b6:	881b      	ldrh	r3, [r3, #0]
 80033b8:	3301      	adds	r3, #1
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	4b69      	ldr	r3, [pc, #420]	; (8003564 <main+0x5a4>)
 80033be:	801a      	strh	r2, [r3, #0]
 80033c0:	4b68      	ldr	r3, [pc, #416]	; (8003564 <main+0x5a4>)
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033c8:	d3e9      	bcc.n	800339e <main+0x3de>
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////// variable fill

memcpy(&seq,potSource,46 );  // load from potSource
 80033ca:	4a6a      	ldr	r2, [pc, #424]	; (8003574 <main+0x5b4>)
 80033cc:	4b67      	ldr	r3, [pc, #412]	; (800356c <main+0x5ac>)
 80033ce:	4614      	mov	r4, r2
 80033d0:	461d      	mov	r5, r3
 80033d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033da:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80033de:	c407      	stmia	r4!, {r0, r1, r2}
 80033e0:	8023      	strh	r3, [r4, #0]


for(i=0;i<10;i++){
 80033e2:	4b60      	ldr	r3, [pc, #384]	; (8003564 <main+0x5a4>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	801a      	strh	r2, [r3, #0]
 80033e8:	e044      	b.n	8003474 <main+0x4b4>
	if (i<8){    memcpy(&note[i],potSource+46+(i*14),14 );}  //grab note settings ,112 total , works ok
 80033ea:	4b5e      	ldr	r3, [pc, #376]	; (8003564 <main+0x5a4>)
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	2b07      	cmp	r3, #7
 80033f0:	d812      	bhi.n	8003418 <main+0x458>
 80033f2:	4b5c      	ldr	r3, [pc, #368]	; (8003564 <main+0x5a4>)
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	4a5f      	ldr	r2, [pc, #380]	; (8003578 <main+0x5b8>)
 80033fa:	1898      	adds	r0, r3, r2
 80033fc:	4b59      	ldr	r3, [pc, #356]	; (8003564 <main+0x5a4>)
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	461a      	mov	r2, r3
 8003402:	4613      	mov	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	1a9b      	subs	r3, r3, r2
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	332e      	adds	r3, #46	; 0x2e
 800340c:	4a57      	ldr	r2, [pc, #348]	; (800356c <main+0x5ac>)
 800340e:	4413      	add	r3, r2
 8003410:	220e      	movs	r2, #14
 8003412:	4619      	mov	r1, r3
 8003414:	f006 fb66 	bl	8009ae4 <memcpy>

	memcpy(&LFO[i],potSource+158+(i*5),6 );  // + 60
 8003418:	4b52      	ldr	r3, [pc, #328]	; (8003564 <main+0x5a4>)
 800341a:	881b      	ldrh	r3, [r3, #0]
 800341c:	015b      	lsls	r3, r3, #5
 800341e:	4a57      	ldr	r2, [pc, #348]	; (800357c <main+0x5bc>)
 8003420:	1898      	adds	r0, r3, r2
 8003422:	4b50      	ldr	r3, [pc, #320]	; (8003564 <main+0x5a4>)
 8003424:	881b      	ldrh	r3, [r3, #0]
 8003426:	461a      	mov	r2, r3
 8003428:	4613      	mov	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	339e      	adds	r3, #158	; 0x9e
 8003430:	4a4e      	ldr	r2, [pc, #312]	; (800356c <main+0x5ac>)
 8003432:	4413      	add	r3, r2
 8003434:	2206      	movs	r2, #6
 8003436:	4619      	mov	r1, r3
 8003438:	f006 fb54 	bl	8009ae4 <memcpy>
	memcpy(&ADSR[i],potSource+218+(i*5),5 );  // +50  ,
 800343c:	4b49      	ldr	r3, [pc, #292]	; (8003564 <main+0x5a4>)
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	461a      	mov	r2, r3
 8003442:	f44f 7307 	mov.w	r3, #540	; 0x21c
 8003446:	fb02 f303 	mul.w	r3, r2, r3
 800344a:	4a4d      	ldr	r2, [pc, #308]	; (8003580 <main+0x5c0>)
 800344c:	1898      	adds	r0, r3, r2
 800344e:	4b45      	ldr	r3, [pc, #276]	; (8003564 <main+0x5a4>)
 8003450:	881b      	ldrh	r3, [r3, #0]
 8003452:	461a      	mov	r2, r3
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	33da      	adds	r3, #218	; 0xda
 800345c:	4a43      	ldr	r2, [pc, #268]	; (800356c <main+0x5ac>)
 800345e:	4413      	add	r3, r2
 8003460:	2205      	movs	r2, #5
 8003462:	4619      	mov	r1, r3
 8003464:	f006 fb3e 	bl	8009ae4 <memcpy>
for(i=0;i<10;i++){
 8003468:	4b3e      	ldr	r3, [pc, #248]	; (8003564 <main+0x5a4>)
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	3301      	adds	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	4b3c      	ldr	r3, [pc, #240]	; (8003564 <main+0x5a4>)
 8003472:	801a      	strh	r2, [r3, #0]
 8003474:	4b3b      	ldr	r3, [pc, #236]	; (8003564 <main+0x5a4>)
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	2b09      	cmp	r3, #9
 800347a:	d9b6      	bls.n	80033ea <main+0x42a>


float tempo_hold;  // calculate tempo look up


	for (i=0;i<161;i++) {
 800347c:	4b39      	ldr	r3, [pc, #228]	; (8003564 <main+0x5a4>)
 800347e:	2200      	movs	r2, #0
 8003480:	801a      	strh	r2, [r3, #0]
 8003482:	e03d      	b.n	8003500 <main+0x540>

	tempo_hold=(i+180)*0.0166666666;
 8003484:	4b37      	ldr	r3, [pc, #220]	; (8003564 <main+0x5a4>)
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	33b4      	adds	r3, #180	; 0xb4
 800348a:	4618      	mov	r0, r3
 800348c:	f7fd f928 	bl	80006e0 <__aeabi_i2d>
 8003490:	a32f      	add	r3, pc, #188	; (adr r3, 8003550 <main+0x590>)
 8003492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003496:	f7fc fea7 	bl	80001e8 <__aeabi_dmul>
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	4610      	mov	r0, r2
 80034a0:	4619      	mov	r1, r3
 80034a2:	f7fd f987 	bl	80007b4 <__aeabi_d2f>
 80034a6:	4603      	mov	r3, r0
 80034a8:	667b      	str	r3, [r7, #100]	; 0x64

	tempo_hold=	1/tempo_hold;
 80034aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034ae:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80034b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034b6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	//tempo_hold=	tempo_hold*2187.6*4;      // change for the sake of note length
	tempo_hold=	tempo_hold*2187.6*1;      // change for the sake of note length
 80034ba:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80034bc:	f7fd f922 	bl	8000704 <__aeabi_f2d>
 80034c0:	a325      	add	r3, pc, #148	; (adr r3, 8003558 <main+0x598>)
 80034c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c6:	f7fc fe8f 	bl	80001e8 <__aeabi_dmul>
 80034ca:	4602      	mov	r2, r0
 80034cc:	460b      	mov	r3, r1
 80034ce:	4610      	mov	r0, r2
 80034d0:	4619      	mov	r1, r3
 80034d2:	f7fd f96f 	bl	80007b4 <__aeabi_d2f>
 80034d6:	4603      	mov	r3, r0
 80034d8:	667b      	str	r3, [r7, #100]	; 0x64
	tempo_lut[i]=tempo_hold;
 80034da:	4b22      	ldr	r3, [pc, #136]	; (8003564 <main+0x5a4>)
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80034e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034e8:	ee17 3a90 	vmov	r3, s15
 80034ec:	b299      	uxth	r1, r3
 80034ee:	4b25      	ldr	r3, [pc, #148]	; (8003584 <main+0x5c4>)
 80034f0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (i=0;i<161;i++) {
 80034f4:	4b1b      	ldr	r3, [pc, #108]	; (8003564 <main+0x5a4>)
 80034f6:	881b      	ldrh	r3, [r3, #0]
 80034f8:	3301      	adds	r3, #1
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	4b19      	ldr	r3, [pc, #100]	; (8003564 <main+0x5a4>)
 80034fe:	801a      	strh	r2, [r3, #0]
 8003500:	4b18      	ldr	r3, [pc, #96]	; (8003564 <main+0x5a4>)
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	2ba0      	cmp	r3, #160	; 0xa0
 8003506:	d9bd      	bls.n	8003484 <main+0x4c4>
	}

isrMask=571; // def tempo 571=180bpm , 20 ms /isrcount
 8003508:	4b1f      	ldr	r3, [pc, #124]	; (8003588 <main+0x5c8>)
 800350a:	f240 223b 	movw	r2, #571	; 0x23b
 800350e:	801a      	strh	r2, [r3, #0]

	noteTiming=24;
 8003510:	4b1e      	ldr	r3, [pc, #120]	; (800358c <main+0x5cc>)
 8003512:	2218      	movs	r2, #24
 8003514:	701a      	strb	r2, [r3, #0]
	for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8003516:	4b13      	ldr	r3, [pc, #76]	; (8003564 <main+0x5a4>)
 8003518:	2200      	movs	r2, #0
 800351a:	801a      	strh	r2, [r3, #0]
 800351c:	e00b      	b.n	8003536 <main+0x576>
		spell[i]=67;
 800351e:	4b11      	ldr	r3, [pc, #68]	; (8003564 <main+0x5a4>)
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	461a      	mov	r2, r3
 8003524:	4b1a      	ldr	r3, [pc, #104]	; (8003590 <main+0x5d0>)
 8003526:	2143      	movs	r1, #67	; 0x43
 8003528:	5499      	strb	r1, [r3, r2]
	for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 800352a:	4b0e      	ldr	r3, [pc, #56]	; (8003564 <main+0x5a4>)
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	3301      	adds	r3, #1
 8003530:	b29a      	uxth	r2, r3
 8003532:	4b0c      	ldr	r3, [pc, #48]	; (8003564 <main+0x5a4>)
 8003534:	801a      	strh	r2, [r3, #0]
 8003536:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <main+0x5a4>)
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800353e:	d3ee      	bcc.n	800351e <main+0x55e>

	}

gfx_clear();
 8003540:	f7fd fff0 	bl	8001524 <gfx_clear>

for (n=0;n<512;n++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8003544:	4b06      	ldr	r3, [pc, #24]	; (8003560 <main+0x5a0>)
 8003546:	2200      	movs	r2, #0
 8003548:	801a      	strh	r2, [r3, #0]
 800354a:	e033      	b.n	80035b4 <main+0x5f4>
 800354c:	f3af 8000 	nop.w
 8003550:	0febdd13 	.word	0x0febdd13
 8003554:	3f911111 	.word	0x3f911111
 8003558:	33333333 	.word	0x33333333
 800355c:	40a11733 	.word	0x40a11733
 8003560:	20000e82 	.word	0x20000e82
 8003564:	20000ea4 	.word	0x20000ea4
 8003568:	200027a8 	.word	0x200027a8
 800356c:	20000ce8 	.word	0x20000ce8
 8003570:	20000b68 	.word	0x20000b68
 8003574:	20003cbc 	.word	0x20003cbc
 8003578:	20003c4c 	.word	0x20003c4c
 800357c:	20003080 	.word	0x20003080
 8003580:	200031c0 	.word	0x200031c0
 8003584:	20002664 	.word	0x20002664
 8003588:	20000e74 	.word	0x20000e74
 800358c:	20000b64 	.word	0x20000b64
 8003590:	20000000 	.word	0x20000000

	menu_parser();  // run it closer to default_menu size ,times
 8003594:	f7fd fc2c 	bl	8000df0 <menu_parser>
	default_menu3[n>>1]=64;
 8003598:	4b72      	ldr	r3, [pc, #456]	; (8003764 <main+0x7a4>)
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	085b      	lsrs	r3, r3, #1
 800359e:	b29b      	uxth	r3, r3
 80035a0:	461a      	mov	r2, r3
 80035a2:	4b71      	ldr	r3, [pc, #452]	; (8003768 <main+0x7a8>)
 80035a4:	2140      	movs	r1, #64	; 0x40
 80035a6:	5499      	strb	r1, [r3, r2]
for (n=0;n<512;n++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 80035a8:	4b6e      	ldr	r3, [pc, #440]	; (8003764 <main+0x7a4>)
 80035aa:	881b      	ldrh	r3, [r3, #0]
 80035ac:	3301      	adds	r3, #1
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	4b6c      	ldr	r3, [pc, #432]	; (8003764 <main+0x7a4>)
 80035b2:	801a      	strh	r2, [r3, #0]
 80035b4:	4b6b      	ldr	r3, [pc, #428]	; (8003764 <main+0x7a4>)
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035bc:	d3ea      	bcc.n	8003594 <main+0x5d4>
}
default_menu3_size = strlen(default_menu3);  // grab menu size
 80035be:	486a      	ldr	r0, [pc, #424]	; (8003768 <main+0x7a8>)
 80035c0:	f7fc fe0a 	bl	80001d8 <strlen>
 80035c4:	4603      	mov	r3, r0
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	4b68      	ldr	r3, [pc, #416]	; (800376c <main+0x7ac>)
 80035ca:	801a      	strh	r2, [r3, #0]
menu_title_count--;  //count back one
 80035cc:	4b68      	ldr	r3, [pc, #416]	; (8003770 <main+0x7b0>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	3b01      	subs	r3, #1
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	4b66      	ldr	r3, [pc, #408]	; (8003770 <main+0x7b0>)
 80035d6:	701a      	strb	r2, [r3, #0]
display_clear ();
 80035d8:	f7fd ffe6 	bl	80015a8 <display_clear>
//   produce extra menu pages here /////////////////////////////////////////////////////////////////////////////////
uint16_t lut_temp2=0;
 80035dc:	2300      	movs	r3, #0
 80035de:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
uint16_t lut_temp3=0;
 80035e2:	2300      	movs	r3, #0
 80035e4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c


menuSelect=0;
 80035e8:	4b62      	ldr	r3, [pc, #392]	; (8003774 <main+0x7b4>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	701a      	strb	r2, [r3, #0]
// fill up sample
firstbarLoop=0;
 80035ee:	4b62      	ldr	r3, [pc, #392]	; (8003778 <main+0x7b8>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	701a      	strb	r2, [r3, #0]
  while (1)																																																		//   while loop , random 20+ms freeze around 0.5 sec
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_counter++ ;
 80035f4:	4b61      	ldr	r3, [pc, #388]	; (800377c <main+0x7bc>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	3301      	adds	r3, #1
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	4b5f      	ldr	r3, [pc, #380]	; (800377c <main+0x7bc>)
 80035fe:	701a      	strb	r2, [r3, #0]
	  loop_counter2++;// this pretty slow now thanks to gfx , no skips though
 8003600:	4b5f      	ldr	r3, [pc, #380]	; (8003780 <main+0x7c0>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3301      	adds	r3, #1
 8003606:	4a5e      	ldr	r2, [pc, #376]	; (8003780 <main+0x7c0>)
 8003608:	6013      	str	r3, [r2, #0]

	  // if (menu_page<320) lcd_feedback();  //curious no issues with lcd without this  , maybe spell writing

	  if 	((loop_counter2&7)==6)      {analoginputloopb();} // this is ok , plenty quick , no freeze here
 800360a:	4b5d      	ldr	r3, [pc, #372]	; (8003780 <main+0x7c0>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	2b06      	cmp	r3, #6
 8003614:	d101      	bne.n	800361a <main+0x65a>
 8003616:	f7fd fe13 	bl	8001240 <analoginputloopb>


if (loop_counter2==4024) {    //   4096=1min=32bytes so 4mins per 128 bank or 15 writes/hour , no freeze here
 800361a:	4b59      	ldr	r3, [pc, #356]	; (8003780 <main+0x7c0>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f640 72b8 	movw	r2, #4024	; 0xfb8
 8003622:	4293      	cmp	r3, r2
 8003624:	f040 808f 	bne.w	8003746 <main+0x786>
	  if (mem_count==255) mem_count=0; else mem_count++;  // write to first this was moved for no logical reason ?
 8003628:	4b56      	ldr	r3, [pc, #344]	; (8003784 <main+0x7c4>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2bff      	cmp	r3, #255	; 0xff
 800362e:	d103      	bne.n	8003638 <main+0x678>
 8003630:	4b54      	ldr	r3, [pc, #336]	; (8003784 <main+0x7c4>)
 8003632:	2200      	movs	r2, #0
 8003634:	701a      	strb	r2, [r3, #0]
 8003636:	e005      	b.n	8003644 <main+0x684>
 8003638:	4b52      	ldr	r3, [pc, #328]	; (8003784 <main+0x7c4>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	3301      	adds	r3, #1
 800363e:	b2da      	uxtb	r2, r3
 8003640:	4b50      	ldr	r3, [pc, #320]	; (8003784 <main+0x7c4>)
 8003642:	701a      	strb	r2, [r3, #0]
	  lfo_target_parse(); //
 8003644:	f7fd fc9e 	bl	8000f84 <lfo_target_parse>
	// read values from stored

memcpy(potSource,&seq,46); // about 46 bytes
 8003648:	4a4f      	ldr	r2, [pc, #316]	; (8003788 <main+0x7c8>)
 800364a:	4b50      	ldr	r3, [pc, #320]	; (800378c <main+0x7cc>)
 800364c:	4614      	mov	r4, r2
 800364e:	461d      	mov	r5, r3
 8003650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003658:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800365c:	c407      	stmia	r4!, {r0, r1, r2}
 800365e:	8023      	strh	r3, [r4, #0]

for(i=0;i<10;i++){
 8003660:	4b4b      	ldr	r3, [pc, #300]	; (8003790 <main+0x7d0>)
 8003662:	2200      	movs	r2, #0
 8003664:	801a      	strh	r2, [r3, #0]
 8003666:	e044      	b.n	80036f2 <main+0x732>
	if (i<8){    memcpy(potSource+46+(i*14),&note[i],14 );}  //grab note settings ,112 total , works
 8003668:	4b49      	ldr	r3, [pc, #292]	; (8003790 <main+0x7d0>)
 800366a:	881b      	ldrh	r3, [r3, #0]
 800366c:	2b07      	cmp	r3, #7
 800366e:	d812      	bhi.n	8003696 <main+0x6d6>
 8003670:	4b47      	ldr	r3, [pc, #284]	; (8003790 <main+0x7d0>)
 8003672:	881b      	ldrh	r3, [r3, #0]
 8003674:	461a      	mov	r2, r3
 8003676:	4613      	mov	r3, r2
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	1a9b      	subs	r3, r3, r2
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	332e      	adds	r3, #46	; 0x2e
 8003680:	4a41      	ldr	r2, [pc, #260]	; (8003788 <main+0x7c8>)
 8003682:	1898      	adds	r0, r3, r2
 8003684:	4b42      	ldr	r3, [pc, #264]	; (8003790 <main+0x7d0>)
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	4a42      	ldr	r2, [pc, #264]	; (8003794 <main+0x7d4>)
 800368c:	4413      	add	r3, r2
 800368e:	220e      	movs	r2, #14
 8003690:	4619      	mov	r1, r3
 8003692:	f006 fa27 	bl	8009ae4 <memcpy>

	memcpy(potSource+158+(i*5),&LFO[i],6 );  // + 60
 8003696:	4b3e      	ldr	r3, [pc, #248]	; (8003790 <main+0x7d0>)
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	4613      	mov	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	339e      	adds	r3, #158	; 0x9e
 80036a4:	4a38      	ldr	r2, [pc, #224]	; (8003788 <main+0x7c8>)
 80036a6:	1898      	adds	r0, r3, r2
 80036a8:	4b39      	ldr	r3, [pc, #228]	; (8003790 <main+0x7d0>)
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	015b      	lsls	r3, r3, #5
 80036ae:	4a3a      	ldr	r2, [pc, #232]	; (8003798 <main+0x7d8>)
 80036b0:	4413      	add	r3, r2
 80036b2:	2206      	movs	r2, #6
 80036b4:	4619      	mov	r1, r3
 80036b6:	f006 fa15 	bl	8009ae4 <memcpy>
	memcpy(potSource+218+(i*5),&ADSR[i],5 );  // +50  ,
 80036ba:	4b35      	ldr	r3, [pc, #212]	; (8003790 <main+0x7d0>)
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	461a      	mov	r2, r3
 80036c0:	4613      	mov	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	33da      	adds	r3, #218	; 0xda
 80036c8:	4a2f      	ldr	r2, [pc, #188]	; (8003788 <main+0x7c8>)
 80036ca:	1898      	adds	r0, r3, r2
 80036cc:	4b30      	ldr	r3, [pc, #192]	; (8003790 <main+0x7d0>)
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	461a      	mov	r2, r3
 80036d2:	f44f 7307 	mov.w	r3, #540	; 0x21c
 80036d6:	fb02 f303 	mul.w	r3, r2, r3
 80036da:	4a30      	ldr	r2, [pc, #192]	; (800379c <main+0x7dc>)
 80036dc:	4413      	add	r3, r2
 80036de:	2205      	movs	r2, #5
 80036e0:	4619      	mov	r1, r3
 80036e2:	f006 f9ff 	bl	8009ae4 <memcpy>
for(i=0;i<10;i++){
 80036e6:	4b2a      	ldr	r3, [pc, #168]	; (8003790 <main+0x7d0>)
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	3301      	adds	r3, #1
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	4b28      	ldr	r3, [pc, #160]	; (8003790 <main+0x7d0>)
 80036f0:	801a      	strh	r2, [r3, #0]
 80036f2:	4b27      	ldr	r3, [pc, #156]	; (8003790 <main+0x7d0>)
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	2b09      	cmp	r3, #9
 80036f8:	d9b6      	bls.n	8003668 <main+0x6a8>

}	// copy vars into potSource

mem_buf=potSource[mem_count];
 80036fa:	4b22      	ldr	r3, [pc, #136]	; (8003784 <main+0x7c4>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	461a      	mov	r2, r3
 8003700:	4b21      	ldr	r3, [pc, #132]	; (8003788 <main+0x7c8>)
 8003702:	5c9a      	ldrb	r2, [r3, r2]
 8003704:	4b26      	ldr	r3, [pc, #152]	; (80037a0 <main+0x7e0>)
 8003706:	701a      	strb	r2, [r3, #0]
//if (mem_buf>160) mem_buf=160;   // just in case , may be a problem

	HAL_I2C_Mem_Write(&hi2c2, 160, ((1+(mem_count>>6))<<6)+(mem_count&63), 2, &mem_buf, 1, 100);  // "&hi2c2"  actual register address
 8003708:	4b1e      	ldr	r3, [pc, #120]	; (8003784 <main+0x7c4>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	099b      	lsrs	r3, r3, #6
 800370e:	b2db      	uxtb	r3, r3
 8003710:	b29b      	uxth	r3, r3
 8003712:	3301      	adds	r3, #1
 8003714:	b29b      	uxth	r3, r3
 8003716:	019b      	lsls	r3, r3, #6
 8003718:	b29a      	uxth	r2, r3
 800371a:	4b1a      	ldr	r3, [pc, #104]	; (8003784 <main+0x7c4>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	b29b      	uxth	r3, r3
 8003720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003724:	b29b      	uxth	r3, r3
 8003726:	4413      	add	r3, r2
 8003728:	b29a      	uxth	r2, r3
 800372a:	2364      	movs	r3, #100	; 0x64
 800372c:	9302      	str	r3, [sp, #8]
 800372e:	2301      	movs	r3, #1
 8003730:	9301      	str	r3, [sp, #4]
 8003732:	4b1b      	ldr	r3, [pc, #108]	; (80037a0 <main+0x7e0>)
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	2302      	movs	r3, #2
 8003738:	21a0      	movs	r1, #160	; 0xa0
 800373a:	481a      	ldr	r0, [pc, #104]	; (80037a4 <main+0x7e4>)
 800373c:	f003 f834 	bl	80067a8 <HAL_I2C_Mem_Write>
	//HAL_Delay(5); // this is slow , no bueno

	loop_counter2=0; //reset
 8003740:	4b0f      	ldr	r3, [pc, #60]	; (8003780 <main+0x7c0>)
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]

}


	  if (disp_end==1)	  display_generate();      // run this after gfx draw page finish
 8003746:	4b18      	ldr	r3, [pc, #96]	; (80037a8 <main+0x7e8>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d101      	bne.n	8003752 <main+0x792>
 800374e:	f7fd ff4b 	bl	80015e8 <display_generate>




	  if (init<6)				// after 6 its done for good   // no freeze here
 8003752:	4b16      	ldr	r3, [pc, #88]	; (80037ac <main+0x7ec>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2b05      	cmp	r3, #5
 8003758:	d836      	bhi.n	80037c8 <main+0x808>
{
	  for (i=0;i<6;i++) {display_init();}  //1-2ms ?  change length if flickering ,maybe initial data
 800375a:	4b0d      	ldr	r3, [pc, #52]	; (8003790 <main+0x7d0>)
 800375c:	2200      	movs	r2, #0
 800375e:	801a      	strh	r2, [r3, #0]
 8003760:	e02e      	b.n	80037c0 <main+0x800>
 8003762:	bf00      	nop
 8003764:	20000e82 	.word	0x20000e82
 8003768:	2000400c 	.word	0x2000400c
 800376c:	20003ffe 	.word	0x20003ffe
 8003770:	20003cef 	.word	0x20003cef
 8003774:	20000e72 	.word	0x20000e72
 8003778:	20000e76 	.word	0x20000e76
 800377c:	20000ea0 	.word	0x20000ea0
 8003780:	20002310 	.word	0x20002310
 8003784:	2000230e 	.word	0x2000230e
 8003788:	20000ce8 	.word	0x20000ce8
 800378c:	20003cbc 	.word	0x20003cbc
 8003790:	20000ea4 	.word	0x20000ea4
 8003794:	20003c4c 	.word	0x20003c4c
 8003798:	20003080 	.word	0x20003080
 800379c:	200031c0 	.word	0x200031c0
 80037a0:	20002314 	.word	0x20002314
 80037a4:	200044b4 	.word	0x200044b4
 80037a8:	20002c62 	.word	0x20002c62
 80037ac:	20002305 	.word	0x20002305
 80037b0:	f7fd fe0a 	bl	80013c8 <display_init>
 80037b4:	4b5f      	ldr	r3, [pc, #380]	; (8003934 <main+0x974>)
 80037b6:	881b      	ldrh	r3, [r3, #0]
 80037b8:	3301      	adds	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	4b5d      	ldr	r3, [pc, #372]	; (8003934 <main+0x974>)
 80037be:	801a      	strh	r2, [r3, #0]
 80037c0:	4b5c      	ldr	r3, [pc, #368]	; (8003934 <main+0x974>)
 80037c2:	881b      	ldrh	r3, [r3, #0]
 80037c4:	2b05      	cmp	r3, #5
 80037c6:	d9f3      	bls.n	80037b0 <main+0x7f0>
}

	  if (init > 5) {    //  around 3 cycles per single transmit  , plenty quick as is , spi lcd can really slow things down
 80037c8:	4b5b      	ldr	r3, [pc, #364]	; (8003938 <main+0x978>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b05      	cmp	r3, #5
 80037ce:	d92a      	bls.n	8003826 <main+0x866>


		  if (gfx_send_swap==2) gfx_send_lines++;		// this is ok for now
 80037d0:	4b5a      	ldr	r3, [pc, #360]	; (800393c <main+0x97c>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d105      	bne.n	80037e4 <main+0x824>
 80037d8:	4b59      	ldr	r3, [pc, #356]	; (8003940 <main+0x980>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	3301      	adds	r3, #1
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	4b57      	ldr	r3, [pc, #348]	; (8003940 <main+0x980>)
 80037e2:	701a      	strb	r2, [r3, #0]
		  if (gfx_send_swap==1)  { gfx_send_counter=gfx_send_cursor*144; gfx_send_swap=2; } // jump to cursor pixel line
 80037e4:	4b55      	ldr	r3, [pc, #340]	; (800393c <main+0x97c>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d10c      	bne.n	8003806 <main+0x846>
 80037ec:	4b55      	ldr	r3, [pc, #340]	; (8003944 <main+0x984>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	461a      	mov	r2, r3
 80037f4:	00d2      	lsls	r2, r2, #3
 80037f6:	4413      	add	r3, r2
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	4b52      	ldr	r3, [pc, #328]	; (8003948 <main+0x988>)
 80037fe:	801a      	strh	r2, [r3, #0]
 8003800:	4b4e      	ldr	r3, [pc, #312]	; (800393c <main+0x97c>)
 8003802:	2202      	movs	r2, #2
 8003804:	701a      	strb	r2, [r3, #0]
	      if (gfx_send_lines==144)   { gfx_send_lines=0; gfx_send_counter=1008; gfx_send_swap=0;}  // skip to last char line
 8003806:	4b4e      	ldr	r3, [pc, #312]	; (8003940 <main+0x980>)
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	2b90      	cmp	r3, #144	; 0x90
 800380c:	d109      	bne.n	8003822 <main+0x862>
 800380e:	4b4c      	ldr	r3, [pc, #304]	; (8003940 <main+0x980>)
 8003810:	2200      	movs	r2, #0
 8003812:	701a      	strb	r2, [r3, #0]
 8003814:	4b4c      	ldr	r3, [pc, #304]	; (8003948 <main+0x988>)
 8003816:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800381a:	801a      	strh	r2, [r3, #0]
 800381c:	4b47      	ldr	r3, [pc, #284]	; (800393c <main+0x97c>)
 800381e:	2200      	movs	r2, #0
 8003820:	701a      	strb	r2, [r3, #0]
				gfx_send();    // don't loop this without using dma  , just makes things really slow
 8003822:	f7fd fe27 	bl	8001474 <gfx_send>


	}


	  if (loop_counter == 255)	{ // grab adc readings + 3ms , 32 step  // no freeze
 8003826:	4b49      	ldr	r3, [pc, #292]	; (800394c <main+0x98c>)
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2bff      	cmp	r3, #255	; 0xff
 800382c:	d128      	bne.n	8003880 <main+0x8c0>



		  //HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go

		  HAL_ADCEx_InjectedStart(&hadc1) ;  // start injected mode normal conversion
 800382e:	4848      	ldr	r0, [pc, #288]	; (8003950 <main+0x990>)
 8003830:	f001 fcfe 	bl	8005230 <HAL_ADCEx_InjectedStart>
		  uint16_t adc_temp1[4]={0,0,0,0};
 8003834:	463b      	mov	r3, r7
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	605a      	str	r2, [r3, #4]

		  HAL_ADC_PollForConversion(&hadc1,1);  // works but  slow ,blocking very slow, set quick time out
 800383c:	2101      	movs	r1, #1
 800383e:	4844      	ldr	r0, [pc, #272]	; (8003950 <main+0x990>)
 8003840:	f001 f85c 	bl	80048fc <HAL_ADC_PollForConversion>

		  adc_temp1[0]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8003844:	2101      	movs	r1, #1
 8003846:	4842      	ldr	r0, [pc, #264]	; (8003950 <main+0x990>)
 8003848:	f001 fe08 	bl	800545c <HAL_ADCEx_InjectedGetValue>
 800384c:	4603      	mov	r3, r0
 800384e:	b29b      	uxth	r3, r3
 8003850:	803b      	strh	r3, [r7, #0]
		  adc_temp1[1] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8003852:	2102      	movs	r1, #2
 8003854:	483e      	ldr	r0, [pc, #248]	; (8003950 <main+0x990>)
 8003856:	f001 fe01 	bl	800545c <HAL_ADCEx_InjectedGetValue>
 800385a:	4603      	mov	r3, r0
 800385c:	b29b      	uxth	r3, r3
 800385e:	807b      	strh	r3, [r7, #2]
		//  adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
		  adc_values[0]=	  adc_temp1[0]>>7;
 8003860:	883b      	ldrh	r3, [r7, #0]
 8003862:	09db      	lsrs	r3, r3, #7
 8003864:	b29a      	uxth	r2, r3
 8003866:	4b3b      	ldr	r3, [pc, #236]	; (8003954 <main+0x994>)
 8003868:	801a      	strh	r2, [r3, #0]
		  adc_values[1]=	  adc_temp1[1]>>7;
 800386a:	887b      	ldrh	r3, [r7, #2]
 800386c:	09db      	lsrs	r3, r3, #7
 800386e:	b29a      	uxth	r2, r3
 8003870:	4b38      	ldr	r3, [pc, #224]	; (8003954 <main+0x994>)
 8003872:	805a      	strh	r2, [r3, #2]
		//  adc_values[2]=	  adc_temp1[2]>>7;
		  HAL_ADCEx_InjectedStop(&hadc1) ;
 8003874:	4836      	ldr	r0, [pc, #216]	; (8003950 <main+0x990>)
 8003876:	f001 fda5 	bl	80053c4 <HAL_ADCEx_InjectedStop>


		  //HAL_ADC_Start_DMA(&hadc1, adc_source, 512);


	  	loop_counter=0;
 800387a:	4b34      	ldr	r3, [pc, #208]	; (800394c <main+0x98c>)
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]
	  }

	  if ((seq.pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 8003880:	4b35      	ldr	r3, [pc, #212]	; (8003958 <main+0x998>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b07      	cmp	r3, #7
 8003886:	d106      	bne.n	8003896 <main+0x8d6>
 8003888:	4b34      	ldr	r3, [pc, #208]	; (800395c <main+0x99c>)
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d102      	bne.n	8003896 <main+0x8d6>
 8003890:	4b32      	ldr	r3, [pc, #200]	; (800395c <main+0x99c>)
 8003892:	2201      	movs	r2, #1
 8003894:	801a      	strh	r2, [r3, #0]
	   if (promValue<64) promValue=promValue+1 ; else promValue=0;  // fetch eeprom   nogo
	  	  if ((promValues[promValue] ) !=(potValues[promValue]))  EEPROM.write(promValue,(potValues[promValue]));   //  not too happy can totally kill speed  will have to put elsewhere
	  	  promValues[promValue] =potValues[promValue];
	  	   */

	  	     HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,(seq.pos & 1)); // easy skip ?
 8003896:	4b30      	ldr	r3, [pc, #192]	; (8003958 <main+0x998>)
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	461a      	mov	r2, r3
 80038a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038a6:	482e      	ldr	r0, [pc, #184]	; (8003960 <main+0x9a0>)
 80038a8:	f002 fe20 	bl	80064ec <HAL_GPIO_WritePin>


	//  if (sample_pointB!=sample_pointD) bank_write=1; // set start of buffer ,grab , works ok

	  	//	adc_flag=0;
	  		if (adc_flag) {
 80038ac:	4b2d      	ldr	r3, [pc, #180]	; (8003964 <main+0x9a4>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d03a      	beq.n	800392a <main+0x96a>
	  		HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go
 80038b4:	4826      	ldr	r0, [pc, #152]	; (8003950 <main+0x990>)
 80038b6:	f001 f99d 	bl	8004bf4 <HAL_ADC_Stop_DMA>
	  		HAL_ADC_Start_DMA(&hadc1, adc_source, 1024); //dma start ,needs this and adc start ,set sampling time
 80038ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038be:	492a      	ldr	r1, [pc, #168]	; (8003968 <main+0x9a8>)
 80038c0:	4823      	ldr	r0, [pc, #140]	; (8003950 <main+0x990>)
 80038c2:	f001 f8a7 	bl	8004a14 <HAL_ADC_Start_DMA>

	  			uint16_t* click=&adc_source[0];
 80038c6:	4b28      	ldr	r3, [pc, #160]	; (8003968 <main+0x9a8>)
 80038c8:	677b      	str	r3, [r7, #116]	; 0x74

	  			for (i=0;i<512;i++)
 80038ca:	4b1a      	ldr	r3, [pc, #104]	; (8003934 <main+0x974>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	801a      	strh	r2, [r3, #0]
 80038d0:	e023      	b.n	800391a <main+0x95a>
	  			{

	  				uint16_t crap_hold=*click;
 80038d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

	  			uint16_t crap_hold1=*(++click);
 80038da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038dc:	3302      	adds	r3, #2
 80038de:	677b      	str	r3, [r7, #116]	; 0x74
 80038e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
	  		click++;
 80038e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038ea:	3302      	adds	r3, #2
 80038ec:	677b      	str	r3, [r7, #116]	; 0x74

	  	//			uint16_t crap_hold=adc_source[i*2];

	  				 // 				uint16_t crap_hold1=adc_source[(i*2)+1];

	  				input_holder[i] = (crap_hold+crap_hold1 )>>1;
 80038ee:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 80038f2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80038f6:	4413      	add	r3, r2
 80038f8:	1059      	asrs	r1, r3, #1
 80038fa:	4b0e      	ldr	r3, [pc, #56]	; (8003934 <main+0x974>)
 80038fc:	881b      	ldrh	r3, [r3, #0]
 80038fe:	461a      	mov	r2, r3
 8003900:	b289      	uxth	r1, r1
 8003902:	4b1a      	ldr	r3, [pc, #104]	; (800396c <main+0x9ac>)
 8003904:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  				adc_flag=0;
 8003908:	4b16      	ldr	r3, [pc, #88]	; (8003964 <main+0x9a4>)
 800390a:	2200      	movs	r2, #0
 800390c:	701a      	strb	r2, [r3, #0]
	  			for (i=0;i<512;i++)
 800390e:	4b09      	ldr	r3, [pc, #36]	; (8003934 <main+0x974>)
 8003910:	881b      	ldrh	r3, [r3, #0]
 8003912:	3301      	adds	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	4b07      	ldr	r3, [pc, #28]	; (8003934 <main+0x974>)
 8003918:	801a      	strh	r2, [r3, #0]
 800391a:	4b06      	ldr	r3, [pc, #24]	; (8003934 <main+0x974>)
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003922:	d3d6      	bcc.n	80038d2 <main+0x912>
	  			}
	  		}

	while  (bank_write)                         {							// wait for adc , priority
 8003924:	e001      	b.n	800392a <main+0x96a>



		  //HAL_Delay(4);
	  		//sample_point=sample_point&768 ;
	  		sampling();
 8003926:	f7fe f97b 	bl	8001c20 <sampling>
	while  (bank_write)                         {							// wait for adc , priority
 800392a:	4b11      	ldr	r3, [pc, #68]	; (8003970 <main+0x9b0>)
 800392c:	881b      	ldrh	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1f9      	bne.n	8003926 <main+0x966>
	  loop_counter++ ;
 8003932:	e65f      	b.n	80035f4 <main+0x634>
 8003934:	20000ea4 	.word	0x20000ea4
 8003938:	20002305 	.word	0x20002305
 800393c:	20002c2e 	.word	0x20002c2e
 8003940:	20002c2f 	.word	0x20002c2f
 8003944:	20002c2d 	.word	0x20002c2d
 8003948:	20002c2a 	.word	0x20002c2a
 800394c:	20000ea0 	.word	0x20000ea0
 8003950:	2000440c 	.word	0x2000440c
 8003954:	200001a8 	.word	0x200001a8
 8003958:	20003cbc 	.word	0x20003cbc
 800395c:	200022fc 	.word	0x200022fc
 8003960:	40020800 	.word	0x40020800
 8003964:	20003064 	.word	0x20003064
 8003968:	200016b4 	.word	0x200016b4
 800396c:	20002c64 	.word	0x20002c64
 8003970:	200001b2 	.word	0x200001b2

08003974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b094      	sub	sp, #80	; 0x50
 8003978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800397a:	f107 0320 	add.w	r3, r7, #32
 800397e:	2230      	movs	r2, #48	; 0x30
 8003980:	2100      	movs	r1, #0
 8003982:	4618      	mov	r0, r3
 8003984:	f006 f8bc 	bl	8009b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003988:	f107 030c 	add.w	r3, r7, #12
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	605a      	str	r2, [r3, #4]
 8003992:	609a      	str	r2, [r3, #8]
 8003994:	60da      	str	r2, [r3, #12]
 8003996:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003998:	2300      	movs	r3, #0
 800399a:	60bb      	str	r3, [r7, #8]
 800399c:	4b28      	ldr	r3, [pc, #160]	; (8003a40 <SystemClock_Config+0xcc>)
 800399e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a0:	4a27      	ldr	r2, [pc, #156]	; (8003a40 <SystemClock_Config+0xcc>)
 80039a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a6:	6413      	str	r3, [r2, #64]	; 0x40
 80039a8:	4b25      	ldr	r3, [pc, #148]	; (8003a40 <SystemClock_Config+0xcc>)
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b0:	60bb      	str	r3, [r7, #8]
 80039b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039b4:	2300      	movs	r3, #0
 80039b6:	607b      	str	r3, [r7, #4]
 80039b8:	4b22      	ldr	r3, [pc, #136]	; (8003a44 <SystemClock_Config+0xd0>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a21      	ldr	r2, [pc, #132]	; (8003a44 <SystemClock_Config+0xd0>)
 80039be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	4b1f      	ldr	r3, [pc, #124]	; (8003a44 <SystemClock_Config+0xd0>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80039cc:	607b      	str	r3, [r7, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80039d0:	2302      	movs	r3, #2
 80039d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039d4:	2301      	movs	r3, #1
 80039d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80039d8:	2310      	movs	r3, #16
 80039da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039dc:	2302      	movs	r3, #2
 80039de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80039e0:	2300      	movs	r3, #0
 80039e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80039e4:	2308      	movs	r3, #8
 80039e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80039e8:	2364      	movs	r3, #100	; 0x64
 80039ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80039ec:	2302      	movs	r3, #2
 80039ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80039f0:	2304      	movs	r3, #4
 80039f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039f4:	f107 0320 	add.w	r3, r7, #32
 80039f8:	4618      	mov	r0, r3
 80039fa:	f003 fd51 	bl	80074a0 <HAL_RCC_OscConfig>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003a04:	f000 faf6 	bl	8003ff4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a08:	230f      	movs	r3, #15
 8003a0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003a20:	f107 030c 	add.w	r3, r7, #12
 8003a24:	2103      	movs	r1, #3
 8003a26:	4618      	mov	r0, r3
 8003a28:	f003 ffb2 	bl	8007990 <HAL_RCC_ClockConfig>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003a32:	f000 fadf 	bl	8003ff4 <Error_Handler>
  }
}
 8003a36:	bf00      	nop
 8003a38:	3750      	adds	r7, #80	; 0x50
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40023800 	.word	0x40023800
 8003a44:	40007000 	.word	0x40007000

08003a48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08c      	sub	sp, #48	; 0x30
 8003a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003a4e:	f107 0320 	add.w	r3, r7, #32
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	605a      	str	r2, [r3, #4]
 8003a58:	609a      	str	r2, [r3, #8]
 8003a5a:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8003a5c:	463b      	mov	r3, r7
 8003a5e:	2220      	movs	r2, #32
 8003a60:	2100      	movs	r1, #0
 8003a62:	4618      	mov	r0, r3
 8003a64:	f006 f84c 	bl	8009b00 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003a68:	4b36      	ldr	r3, [pc, #216]	; (8003b44 <MX_ADC1_Init+0xfc>)
 8003a6a:	4a37      	ldr	r2, [pc, #220]	; (8003b48 <MX_ADC1_Init+0x100>)
 8003a6c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003a6e:	4b35      	ldr	r3, [pc, #212]	; (8003b44 <MX_ADC1_Init+0xfc>)
 8003a70:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003a74:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003a76:	4b33      	ldr	r3, [pc, #204]	; (8003b44 <MX_ADC1_Init+0xfc>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003a7c:	4b31      	ldr	r3, [pc, #196]	; (8003b44 <MX_ADC1_Init+0xfc>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003a82:	4b30      	ldr	r3, [pc, #192]	; (8003b44 <MX_ADC1_Init+0xfc>)
 8003a84:	2201      	movs	r2, #1
 8003a86:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003a88:	4b2e      	ldr	r3, [pc, #184]	; (8003b44 <MX_ADC1_Init+0xfc>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003a90:	4b2c      	ldr	r3, [pc, #176]	; (8003b44 <MX_ADC1_Init+0xfc>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003a96:	4b2b      	ldr	r3, [pc, #172]	; (8003b44 <MX_ADC1_Init+0xfc>)
 8003a98:	4a2c      	ldr	r2, [pc, #176]	; (8003b4c <MX_ADC1_Init+0x104>)
 8003a9a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003a9c:	4b29      	ldr	r3, [pc, #164]	; (8003b44 <MX_ADC1_Init+0xfc>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003aa2:	4b28      	ldr	r3, [pc, #160]	; (8003b44 <MX_ADC1_Init+0xfc>)
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003aa8:	4b26      	ldr	r3, [pc, #152]	; (8003b44 <MX_ADC1_Init+0xfc>)
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003ab0:	4b24      	ldr	r3, [pc, #144]	; (8003b44 <MX_ADC1_Init+0xfc>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003ab6:	4823      	ldr	r0, [pc, #140]	; (8003b44 <MX_ADC1_Init+0xfc>)
 8003ab8:	f000 fe28 	bl	800470c <HAL_ADC_Init>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8003ac2:	f000 fa97 	bl	8003ff4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003ac6:	2309      	movs	r3, #9
 8003ac8:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8003aca:	2301      	movs	r3, #1
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8003ace:	2306      	movs	r3, #6
 8003ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ad2:	f107 0320 	add.w	r3, r7, #32
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	481a      	ldr	r0, [pc, #104]	; (8003b44 <MX_ADC1_Init+0xfc>)
 8003ada:	f001 f8f9 	bl	8004cd0 <HAL_ADC_ConfigChannel>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8003ae4:	f000 fa86 	bl	8003ff4 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8003aec:	2301      	movs	r3, #1
 8003aee:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8003af0:	2302      	movs	r3, #2
 8003af2:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_56CYCLES;
 8003af4:	2303      	movs	r3, #3
 8003af6:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8003af8:	2300      	movs	r3, #0
 8003afa:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8003afc:	4b14      	ldr	r3, [pc, #80]	; (8003b50 <MX_ADC1_Init+0x108>)
 8003afe:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8003b00:	2300      	movs	r3, #0
 8003b02:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8003b04:	2300      	movs	r3, #0
 8003b06:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8003b0c:	463b      	mov	r3, r7
 8003b0e:	4619      	mov	r1, r3
 8003b10:	480c      	ldr	r0, [pc, #48]	; (8003b44 <MX_ADC1_Init+0xfc>)
 8003b12:	f001 fcdb 	bl	80054cc <HAL_ADCEx_InjectedConfigChannel>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8003b1c:	f000 fa6a 	bl	8003ff4 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8003b20:	2302      	movs	r3, #2
 8003b22:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8003b24:	2302      	movs	r3, #2
 8003b26:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8003b28:	463b      	mov	r3, r7
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4805      	ldr	r0, [pc, #20]	; (8003b44 <MX_ADC1_Init+0xfc>)
 8003b2e:	f001 fccd 	bl	80054cc <HAL_ADCEx_InjectedConfigChannel>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8003b38:	f000 fa5c 	bl	8003ff4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003b3c:	bf00      	nop
 8003b3e:	3730      	adds	r7, #48	; 0x30
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	2000440c 	.word	0x2000440c
 8003b48:	40012000 	.word	0x40012000
 8003b4c:	0f000001 	.word	0x0f000001
 8003b50:	000f0001 	.word	0x000f0001

08003b54 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003b58:	4b12      	ldr	r3, [pc, #72]	; (8003ba4 <MX_I2C2_Init+0x50>)
 8003b5a:	4a13      	ldr	r2, [pc, #76]	; (8003ba8 <MX_I2C2_Init+0x54>)
 8003b5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003b5e:	4b11      	ldr	r3, [pc, #68]	; (8003ba4 <MX_I2C2_Init+0x50>)
 8003b60:	4a12      	ldr	r2, [pc, #72]	; (8003bac <MX_I2C2_Init+0x58>)
 8003b62:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b64:	4b0f      	ldr	r3, [pc, #60]	; (8003ba4 <MX_I2C2_Init+0x50>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003b6a:	4b0e      	ldr	r3, [pc, #56]	; (8003ba4 <MX_I2C2_Init+0x50>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b70:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <MX_I2C2_Init+0x50>)
 8003b72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b76:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b78:	4b0a      	ldr	r3, [pc, #40]	; (8003ba4 <MX_I2C2_Init+0x50>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003b7e:	4b09      	ldr	r3, [pc, #36]	; (8003ba4 <MX_I2C2_Init+0x50>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b84:	4b07      	ldr	r3, [pc, #28]	; (8003ba4 <MX_I2C2_Init+0x50>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b8a:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <MX_I2C2_Init+0x50>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003b90:	4804      	ldr	r0, [pc, #16]	; (8003ba4 <MX_I2C2_Init+0x50>)
 8003b92:	f002 fcc5 	bl	8006520 <HAL_I2C_Init>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003b9c:	f000 fa2a 	bl	8003ff4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003ba0:	bf00      	nop
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	200044b4 	.word	0x200044b4
 8003ba8:	40005800 	.word	0x40005800
 8003bac:	00061a80 	.word	0x00061a80

08003bb0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003bb4:	4b17      	ldr	r3, [pc, #92]	; (8003c14 <MX_SPI1_Init+0x64>)
 8003bb6:	4a18      	ldr	r2, [pc, #96]	; (8003c18 <MX_SPI1_Init+0x68>)
 8003bb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003bba:	4b16      	ldr	r3, [pc, #88]	; (8003c14 <MX_SPI1_Init+0x64>)
 8003bbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003bc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003bc2:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <MX_SPI1_Init+0x64>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003bc8:	4b12      	ldr	r3, [pc, #72]	; (8003c14 <MX_SPI1_Init+0x64>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bce:	4b11      	ldr	r3, [pc, #68]	; (8003c14 <MX_SPI1_Init+0x64>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003bd4:	4b0f      	ldr	r3, [pc, #60]	; (8003c14 <MX_SPI1_Init+0x64>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003bda:	4b0e      	ldr	r3, [pc, #56]	; (8003c14 <MX_SPI1_Init+0x64>)
 8003bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003be0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003be2:	4b0c      	ldr	r3, [pc, #48]	; (8003c14 <MX_SPI1_Init+0x64>)
 8003be4:	2208      	movs	r2, #8
 8003be6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003be8:	4b0a      	ldr	r3, [pc, #40]	; (8003c14 <MX_SPI1_Init+0x64>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003bee:	4b09      	ldr	r3, [pc, #36]	; (8003c14 <MX_SPI1_Init+0x64>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bf4:	4b07      	ldr	r3, [pc, #28]	; (8003c14 <MX_SPI1_Init+0x64>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003bfa:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <MX_SPI1_Init+0x64>)
 8003bfc:	220a      	movs	r2, #10
 8003bfe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003c00:	4804      	ldr	r0, [pc, #16]	; (8003c14 <MX_SPI1_Init+0x64>)
 8003c02:	f004 f891 	bl	8007d28 <HAL_SPI_Init>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003c0c:	f000 f9f2 	bl	8003ff4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003c10:	bf00      	nop
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	20004508 	.word	0x20004508
 8003c18:	40013000 	.word	0x40013000

08003c1c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003c20:	4b17      	ldr	r3, [pc, #92]	; (8003c80 <MX_SPI2_Init+0x64>)
 8003c22:	4a18      	ldr	r2, [pc, #96]	; (8003c84 <MX_SPI2_Init+0x68>)
 8003c24:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003c26:	4b16      	ldr	r3, [pc, #88]	; (8003c80 <MX_SPI2_Init+0x64>)
 8003c28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c2c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003c2e:	4b14      	ldr	r3, [pc, #80]	; (8003c80 <MX_SPI2_Init+0x64>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c34:	4b12      	ldr	r3, [pc, #72]	; (8003c80 <MX_SPI2_Init+0x64>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c3a:	4b11      	ldr	r3, [pc, #68]	; (8003c80 <MX_SPI2_Init+0x64>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c40:	4b0f      	ldr	r3, [pc, #60]	; (8003c80 <MX_SPI2_Init+0x64>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003c46:	4b0e      	ldr	r3, [pc, #56]	; (8003c80 <MX_SPI2_Init+0x64>)
 8003c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c4c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003c4e:	4b0c      	ldr	r3, [pc, #48]	; (8003c80 <MX_SPI2_Init+0x64>)
 8003c50:	2230      	movs	r2, #48	; 0x30
 8003c52:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c54:	4b0a      	ldr	r3, [pc, #40]	; (8003c80 <MX_SPI2_Init+0x64>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c5a:	4b09      	ldr	r3, [pc, #36]	; (8003c80 <MX_SPI2_Init+0x64>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c60:	4b07      	ldr	r3, [pc, #28]	; (8003c80 <MX_SPI2_Init+0x64>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003c66:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <MX_SPI2_Init+0x64>)
 8003c68:	220a      	movs	r2, #10
 8003c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003c6c:	4804      	ldr	r0, [pc, #16]	; (8003c80 <MX_SPI2_Init+0x64>)
 8003c6e:	f004 f85b 	bl	8007d28 <HAL_SPI_Init>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003c78:	f000 f9bc 	bl	8003ff4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003c7c:	bf00      	nop
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	20004560 	.word	0x20004560
 8003c84:	40003800 	.word	0x40003800

08003c88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08c      	sub	sp, #48	; 0x30
 8003c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003c8e:	f107 030c 	add.w	r3, r7, #12
 8003c92:	2224      	movs	r2, #36	; 0x24
 8003c94:	2100      	movs	r1, #0
 8003c96:	4618      	mov	r0, r3
 8003c98:	f005 ff32 	bl	8009b00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c9c:	1d3b      	adds	r3, r7, #4
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003ca4:	4b21      	ldr	r3, [pc, #132]	; (8003d2c <MX_TIM2_Init+0xa4>)
 8003ca6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003caa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003cac:	4b1f      	ldr	r3, [pc, #124]	; (8003d2c <MX_TIM2_Init+0xa4>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cb2:	4b1e      	ldr	r3, [pc, #120]	; (8003d2c <MX_TIM2_Init+0xa4>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003cb8:	4b1c      	ldr	r3, [pc, #112]	; (8003d2c <MX_TIM2_Init+0xa4>)
 8003cba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cbe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8003cc0:	4b1a      	ldr	r3, [pc, #104]	; (8003d2c <MX_TIM2_Init+0xa4>)
 8003cc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cc6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cc8:	4b18      	ldr	r3, [pc, #96]	; (8003d2c <MX_TIM2_Init+0xa4>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8003cde:	2302      	movs	r3, #2
 8003ce0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003cea:	2300      	movs	r3, #0
 8003cec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8003cee:	2302      	movs	r3, #2
 8003cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003cf2:	f107 030c 	add.w	r3, r7, #12
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	480c      	ldr	r0, [pc, #48]	; (8003d2c <MX_TIM2_Init+0xa4>)
 8003cfa:	f004 ffd3 	bl	8008ca4 <HAL_TIM_Encoder_Init>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003d04:	f000 f976 	bl	8003ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d10:	1d3b      	adds	r3, r7, #4
 8003d12:	4619      	mov	r1, r3
 8003d14:	4805      	ldr	r0, [pc, #20]	; (8003d2c <MX_TIM2_Init+0xa4>)
 8003d16:	f005 fdf1 	bl	80098fc <HAL_TIMEx_MasterConfigSynchronization>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003d20:	f000 f968 	bl	8003ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003d24:	bf00      	nop
 8003d26:	3730      	adds	r7, #48	; 0x30
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	200045b8 	.word	0x200045b8

08003d30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08e      	sub	sp, #56	; 0x38
 8003d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	605a      	str	r2, [r3, #4]
 8003d40:	609a      	str	r2, [r3, #8]
 8003d42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d44:	f107 0320 	add.w	r3, r7, #32
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d4e:	1d3b      	adds	r3, r7, #4
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	605a      	str	r2, [r3, #4]
 8003d56:	609a      	str	r2, [r3, #8]
 8003d58:	60da      	str	r2, [r3, #12]
 8003d5a:	611a      	str	r2, [r3, #16]
 8003d5c:	615a      	str	r2, [r3, #20]
 8003d5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003d60:	4b2c      	ldr	r3, [pc, #176]	; (8003e14 <MX_TIM3_Init+0xe4>)
 8003d62:	4a2d      	ldr	r2, [pc, #180]	; (8003e18 <MX_TIM3_Init+0xe8>)
 8003d64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003d66:	4b2b      	ldr	r3, [pc, #172]	; (8003e14 <MX_TIM3_Init+0xe4>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d6c:	4b29      	ldr	r3, [pc, #164]	; (8003e14 <MX_TIM3_Init+0xe4>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2544;
 8003d72:	4b28      	ldr	r3, [pc, #160]	; (8003e14 <MX_TIM3_Init+0xe4>)
 8003d74:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 8003d78:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d7a:	4b26      	ldr	r3, [pc, #152]	; (8003e14 <MX_TIM3_Init+0xe4>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d80:	4b24      	ldr	r3, [pc, #144]	; (8003e14 <MX_TIM3_Init+0xe4>)
 8003d82:	2280      	movs	r2, #128	; 0x80
 8003d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003d86:	4823      	ldr	r0, [pc, #140]	; (8003e14 <MX_TIM3_Init+0xe4>)
 8003d88:	f004 fd76 	bl	8008878 <HAL_TIM_Base_Init>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003d92:	f000 f92f 	bl	8003ff4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003d9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003da0:	4619      	mov	r1, r3
 8003da2:	481c      	ldr	r0, [pc, #112]	; (8003e14 <MX_TIM3_Init+0xe4>)
 8003da4:	f005 f9ee 	bl	8009184 <HAL_TIM_ConfigClockSource>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003dae:	f000 f921 	bl	8003ff4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003db2:	4818      	ldr	r0, [pc, #96]	; (8003e14 <MX_TIM3_Init+0xe4>)
 8003db4:	f004 fe6c 	bl	8008a90 <HAL_TIM_PWM_Init>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003dbe:	f000 f919 	bl	8003ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003dca:	f107 0320 	add.w	r3, r7, #32
 8003dce:	4619      	mov	r1, r3
 8003dd0:	4810      	ldr	r0, [pc, #64]	; (8003e14 <MX_TIM3_Init+0xe4>)
 8003dd2:	f005 fd93 	bl	80098fc <HAL_TIMEx_MasterConfigSynchronization>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003ddc:	f000 f90a 	bl	8003ff4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003de0:	2370      	movs	r3, #112	; 0x70
 8003de2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003de4:	2300      	movs	r3, #0
 8003de6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003de8:	2300      	movs	r3, #0
 8003dea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003df0:	1d3b      	adds	r3, r7, #4
 8003df2:	2208      	movs	r2, #8
 8003df4:	4619      	mov	r1, r3
 8003df6:	4807      	ldr	r0, [pc, #28]	; (8003e14 <MX_TIM3_Init+0xe4>)
 8003df8:	f005 f902 	bl	8009000 <HAL_TIM_PWM_ConfigChannel>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003e02:	f000 f8f7 	bl	8003ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003e06:	4803      	ldr	r0, [pc, #12]	; (8003e14 <MX_TIM3_Init+0xe4>)
 8003e08:	f000 fb32 	bl	8004470 <HAL_TIM_MspPostInit>

}
 8003e0c:	bf00      	nop
 8003e0e:	3738      	adds	r7, #56	; 0x38
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	20004600 	.word	0x20004600
 8003e18:	40000400 	.word	0x40000400

08003e1c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b08c      	sub	sp, #48	; 0x30
 8003e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003e22:	f107 030c 	add.w	r3, r7, #12
 8003e26:	2224      	movs	r2, #36	; 0x24
 8003e28:	2100      	movs	r1, #0
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f005 fe68 	bl	8009b00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e30:	1d3b      	adds	r3, r7, #4
 8003e32:	2200      	movs	r2, #0
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003e38:	4b20      	ldr	r3, [pc, #128]	; (8003ebc <MX_TIM4_Init+0xa0>)
 8003e3a:	4a21      	ldr	r2, [pc, #132]	; (8003ec0 <MX_TIM4_Init+0xa4>)
 8003e3c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003e3e:	4b1f      	ldr	r3, [pc, #124]	; (8003ebc <MX_TIM4_Init+0xa0>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e44:	4b1d      	ldr	r3, [pc, #116]	; (8003ebc <MX_TIM4_Init+0xa0>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003e4a:	4b1c      	ldr	r3, [pc, #112]	; (8003ebc <MX_TIM4_Init+0xa0>)
 8003e4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e50:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e52:	4b1a      	ldr	r3, [pc, #104]	; (8003ebc <MX_TIM4_Init+0xa0>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e58:	4b18      	ldr	r3, [pc, #96]	; (8003ebc <MX_TIM4_Init+0xa0>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003e62:	2302      	movs	r3, #2
 8003e64:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003e66:	2301      	movs	r3, #1
 8003e68:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8003e6e:	2302      	movs	r3, #2
 8003e70:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003e72:	2302      	movs	r3, #2
 8003e74:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003e76:	2301      	movs	r3, #1
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8003e7e:	2302      	movs	r3, #2
 8003e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003e82:	f107 030c 	add.w	r3, r7, #12
 8003e86:	4619      	mov	r1, r3
 8003e88:	480c      	ldr	r0, [pc, #48]	; (8003ebc <MX_TIM4_Init+0xa0>)
 8003e8a:	f004 ff0b 	bl	8008ca4 <HAL_TIM_Encoder_Init>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003e94:	f000 f8ae 	bl	8003ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003ea0:	1d3b      	adds	r3, r7, #4
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4805      	ldr	r0, [pc, #20]	; (8003ebc <MX_TIM4_Init+0xa0>)
 8003ea6:	f005 fd29 	bl	80098fc <HAL_TIMEx_MasterConfigSynchronization>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003eb0:	f000 f8a0 	bl	8003ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003eb4:	bf00      	nop
 8003eb6:	3730      	adds	r7, #48	; 0x30
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	20004648 	.word	0x20004648
 8003ec0:	40000800 	.word	0x40000800

08003ec4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003eca:	2300      	movs	r3, #0
 8003ecc:	607b      	str	r3, [r7, #4]
 8003ece:	4b0c      	ldr	r3, [pc, #48]	; (8003f00 <MX_DMA_Init+0x3c>)
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed2:	4a0b      	ldr	r2, [pc, #44]	; (8003f00 <MX_DMA_Init+0x3c>)
 8003ed4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eda:	4b09      	ldr	r3, [pc, #36]	; (8003f00 <MX_DMA_Init+0x3c>)
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ee2:	607b      	str	r3, [r7, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	2100      	movs	r1, #0
 8003eea:	203c      	movs	r0, #60	; 0x3c
 8003eec:	f001 fd63 	bl	80059b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8003ef0:	203c      	movs	r0, #60	; 0x3c
 8003ef2:	f001 fd7c 	bl	80059ee <HAL_NVIC_EnableIRQ>

}
 8003ef6:	bf00      	nop
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	40023800 	.word	0x40023800

08003f04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b088      	sub	sp, #32
 8003f08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f0a:	f107 030c 	add.w	r3, r7, #12
 8003f0e:	2200      	movs	r2, #0
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	605a      	str	r2, [r3, #4]
 8003f14:	609a      	str	r2, [r3, #8]
 8003f16:	60da      	str	r2, [r3, #12]
 8003f18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60bb      	str	r3, [r7, #8]
 8003f1e:	4b2a      	ldr	r3, [pc, #168]	; (8003fc8 <MX_GPIO_Init+0xc4>)
 8003f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f22:	4a29      	ldr	r2, [pc, #164]	; (8003fc8 <MX_GPIO_Init+0xc4>)
 8003f24:	f043 0301 	orr.w	r3, r3, #1
 8003f28:	6313      	str	r3, [r2, #48]	; 0x30
 8003f2a:	4b27      	ldr	r3, [pc, #156]	; (8003fc8 <MX_GPIO_Init+0xc4>)
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	60bb      	str	r3, [r7, #8]
 8003f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f36:	2300      	movs	r3, #0
 8003f38:	607b      	str	r3, [r7, #4]
 8003f3a:	4b23      	ldr	r3, [pc, #140]	; (8003fc8 <MX_GPIO_Init+0xc4>)
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3e:	4a22      	ldr	r2, [pc, #136]	; (8003fc8 <MX_GPIO_Init+0xc4>)
 8003f40:	f043 0302 	orr.w	r3, r3, #2
 8003f44:	6313      	str	r3, [r2, #48]	; 0x30
 8003f46:	4b20      	ldr	r3, [pc, #128]	; (8003fc8 <MX_GPIO_Init+0xc4>)
 8003f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	607b      	str	r3, [r7, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f52:	2300      	movs	r3, #0
 8003f54:	603b      	str	r3, [r7, #0]
 8003f56:	4b1c      	ldr	r3, [pc, #112]	; (8003fc8 <MX_GPIO_Init+0xc4>)
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	4a1b      	ldr	r2, [pc, #108]	; (8003fc8 <MX_GPIO_Init+0xc4>)
 8003f5c:	f043 0304 	orr.w	r3, r3, #4
 8003f60:	6313      	str	r3, [r2, #48]	; 0x30
 8003f62:	4b19      	ldr	r3, [pc, #100]	; (8003fc8 <MX_GPIO_Init+0xc4>)
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	f003 0304 	and.w	r3, r3, #4
 8003f6a:	603b      	str	r3, [r7, #0]
 8003f6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f74:	4815      	ldr	r0, [pc, #84]	; (8003fcc <MX_GPIO_Init+0xc8>)
 8003f76:	f002 fab9 	bl	80064ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	2110      	movs	r1, #16
 8003f7e:	4814      	ldr	r0, [pc, #80]	; (8003fd0 <MX_GPIO_Init+0xcc>)
 8003f80:	f002 fab4 	bl	80064ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003f84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f92:	2300      	movs	r3, #0
 8003f94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003f96:	f107 030c 	add.w	r3, r7, #12
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	480b      	ldr	r0, [pc, #44]	; (8003fcc <MX_GPIO_Init+0xc8>)
 8003f9e:	f002 f921 	bl	80061e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 8003fa2:	2310      	movs	r3, #16
 8003fa4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 8003fb2:	f107 030c 	add.w	r3, r7, #12
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4805      	ldr	r0, [pc, #20]	; (8003fd0 <MX_GPIO_Init+0xcc>)
 8003fba:	f002 f913 	bl	80061e4 <HAL_GPIO_Init>

}
 8003fbe:	bf00      	nop
 8003fc0:	3720      	adds	r7, #32
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	40020800 	.word	0x40020800
 8003fd0:	40020000 	.word	0x40020000

08003fd4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)   // get data after conversion
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
adc_flag=1;
 8003fdc:	4b04      	ldr	r3, [pc, #16]	; (8003ff0 <HAL_ADC_ConvCpltCallback+0x1c>)
 8003fde:	2201      	movs	r2, #1
 8003fe0:	701a      	strb	r2, [r3, #0]


}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	20003064 	.word	0x20003064

08003ff4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ff8:	b672      	cpsid	i
}
 8003ffa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ffc:	e7fe      	b.n	8003ffc <Error_Handler+0x8>
	...

08004000 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004006:	2300      	movs	r3, #0
 8004008:	607b      	str	r3, [r7, #4]
 800400a:	4b10      	ldr	r3, [pc, #64]	; (800404c <HAL_MspInit+0x4c>)
 800400c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400e:	4a0f      	ldr	r2, [pc, #60]	; (800404c <HAL_MspInit+0x4c>)
 8004010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004014:	6453      	str	r3, [r2, #68]	; 0x44
 8004016:	4b0d      	ldr	r3, [pc, #52]	; (800404c <HAL_MspInit+0x4c>)
 8004018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800401e:	607b      	str	r3, [r7, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004022:	2300      	movs	r3, #0
 8004024:	603b      	str	r3, [r7, #0]
 8004026:	4b09      	ldr	r3, [pc, #36]	; (800404c <HAL_MspInit+0x4c>)
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	4a08      	ldr	r2, [pc, #32]	; (800404c <HAL_MspInit+0x4c>)
 800402c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004030:	6413      	str	r3, [r2, #64]	; 0x40
 8004032:	4b06      	ldr	r3, [pc, #24]	; (800404c <HAL_MspInit+0x4c>)
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800403a:	603b      	str	r3, [r7, #0]
 800403c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	40023800 	.word	0x40023800

08004050 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b08a      	sub	sp, #40	; 0x28
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004058:	f107 0314 	add.w	r3, r7, #20
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	605a      	str	r2, [r3, #4]
 8004062:	609a      	str	r2, [r3, #8]
 8004064:	60da      	str	r2, [r3, #12]
 8004066:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a3c      	ldr	r2, [pc, #240]	; (8004160 <HAL_ADC_MspInit+0x110>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d171      	bne.n	8004156 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004072:	2300      	movs	r3, #0
 8004074:	613b      	str	r3, [r7, #16]
 8004076:	4b3b      	ldr	r3, [pc, #236]	; (8004164 <HAL_ADC_MspInit+0x114>)
 8004078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407a:	4a3a      	ldr	r2, [pc, #232]	; (8004164 <HAL_ADC_MspInit+0x114>)
 800407c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004080:	6453      	str	r3, [r2, #68]	; 0x44
 8004082:	4b38      	ldr	r3, [pc, #224]	; (8004164 <HAL_ADC_MspInit+0x114>)
 8004084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408a:	613b      	str	r3, [r7, #16]
 800408c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	4b34      	ldr	r3, [pc, #208]	; (8004164 <HAL_ADC_MspInit+0x114>)
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004096:	4a33      	ldr	r2, [pc, #204]	; (8004164 <HAL_ADC_MspInit+0x114>)
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	6313      	str	r3, [r2, #48]	; 0x30
 800409e:	4b31      	ldr	r3, [pc, #196]	; (8004164 <HAL_ADC_MspInit+0x114>)
 80040a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040aa:	2300      	movs	r3, #0
 80040ac:	60bb      	str	r3, [r7, #8]
 80040ae:	4b2d      	ldr	r3, [pc, #180]	; (8004164 <HAL_ADC_MspInit+0x114>)
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	4a2c      	ldr	r2, [pc, #176]	; (8004164 <HAL_ADC_MspInit+0x114>)
 80040b4:	f043 0302 	orr.w	r3, r3, #2
 80040b8:	6313      	str	r3, [r2, #48]	; 0x30
 80040ba:	4b2a      	ldr	r3, [pc, #168]	; (8004164 <HAL_ADC_MspInit+0x114>)
 80040bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	60bb      	str	r3, [r7, #8]
 80040c4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA0-WKUP     ------> ADC1_IN0
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0;
 80040c6:	2305      	movs	r3, #5
 80040c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040ca:	2303      	movs	r3, #3
 80040cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ce:	2300      	movs	r3, #0
 80040d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040d2:	f107 0314 	add.w	r3, r7, #20
 80040d6:	4619      	mov	r1, r3
 80040d8:	4823      	ldr	r0, [pc, #140]	; (8004168 <HAL_ADC_MspInit+0x118>)
 80040da:	f002 f883 	bl	80061e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80040de:	2302      	movs	r3, #2
 80040e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040e2:	2303      	movs	r3, #3
 80040e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e6:	2300      	movs	r3, #0
 80040e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040ea:	f107 0314 	add.w	r3, r7, #20
 80040ee:	4619      	mov	r1, r3
 80040f0:	481e      	ldr	r0, [pc, #120]	; (800416c <HAL_ADC_MspInit+0x11c>)
 80040f2:	f002 f877 	bl	80061e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80040f6:	4b1e      	ldr	r3, [pc, #120]	; (8004170 <HAL_ADC_MspInit+0x120>)
 80040f8:	4a1e      	ldr	r2, [pc, #120]	; (8004174 <HAL_ADC_MspInit+0x124>)
 80040fa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80040fc:	4b1c      	ldr	r3, [pc, #112]	; (8004170 <HAL_ADC_MspInit+0x120>)
 80040fe:	2200      	movs	r2, #0
 8004100:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004102:	4b1b      	ldr	r3, [pc, #108]	; (8004170 <HAL_ADC_MspInit+0x120>)
 8004104:	2200      	movs	r2, #0
 8004106:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004108:	4b19      	ldr	r3, [pc, #100]	; (8004170 <HAL_ADC_MspInit+0x120>)
 800410a:	2200      	movs	r2, #0
 800410c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800410e:	4b18      	ldr	r3, [pc, #96]	; (8004170 <HAL_ADC_MspInit+0x120>)
 8004110:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004114:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004116:	4b16      	ldr	r3, [pc, #88]	; (8004170 <HAL_ADC_MspInit+0x120>)
 8004118:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800411c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800411e:	4b14      	ldr	r3, [pc, #80]	; (8004170 <HAL_ADC_MspInit+0x120>)
 8004120:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004124:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004126:	4b12      	ldr	r3, [pc, #72]	; (8004170 <HAL_ADC_MspInit+0x120>)
 8004128:	f44f 7280 	mov.w	r2, #256	; 0x100
 800412c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800412e:	4b10      	ldr	r3, [pc, #64]	; (8004170 <HAL_ADC_MspInit+0x120>)
 8004130:	2200      	movs	r2, #0
 8004132:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004134:	4b0e      	ldr	r3, [pc, #56]	; (8004170 <HAL_ADC_MspInit+0x120>)
 8004136:	2200      	movs	r2, #0
 8004138:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800413a:	480d      	ldr	r0, [pc, #52]	; (8004170 <HAL_ADC_MspInit+0x120>)
 800413c:	f001 fc72 	bl	8005a24 <HAL_DMA_Init>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8004146:	f7ff ff55 	bl	8003ff4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a08      	ldr	r2, [pc, #32]	; (8004170 <HAL_ADC_MspInit+0x120>)
 800414e:	639a      	str	r2, [r3, #56]	; 0x38
 8004150:	4a07      	ldr	r2, [pc, #28]	; (8004170 <HAL_ADC_MspInit+0x120>)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004156:	bf00      	nop
 8004158:	3728      	adds	r7, #40	; 0x28
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	40012000 	.word	0x40012000
 8004164:	40023800 	.word	0x40023800
 8004168:	40020000 	.word	0x40020000
 800416c:	40020400 	.word	0x40020400
 8004170:	20004454 	.word	0x20004454
 8004174:	40026470 	.word	0x40026470

08004178 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b08a      	sub	sp, #40	; 0x28
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004180:	f107 0314 	add.w	r3, r7, #20
 8004184:	2200      	movs	r2, #0
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	605a      	str	r2, [r3, #4]
 800418a:	609a      	str	r2, [r3, #8]
 800418c:	60da      	str	r2, [r3, #12]
 800418e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a22      	ldr	r2, [pc, #136]	; (8004220 <HAL_I2C_MspInit+0xa8>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d13d      	bne.n	8004216 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800419a:	2300      	movs	r3, #0
 800419c:	613b      	str	r3, [r7, #16]
 800419e:	4b21      	ldr	r3, [pc, #132]	; (8004224 <HAL_I2C_MspInit+0xac>)
 80041a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a2:	4a20      	ldr	r2, [pc, #128]	; (8004224 <HAL_I2C_MspInit+0xac>)
 80041a4:	f043 0302 	orr.w	r3, r3, #2
 80041a8:	6313      	str	r3, [r2, #48]	; 0x30
 80041aa:	4b1e      	ldr	r3, [pc, #120]	; (8004224 <HAL_I2C_MspInit+0xac>)
 80041ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	613b      	str	r3, [r7, #16]
 80041b4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB9     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80041b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041bc:	2312      	movs	r3, #18
 80041be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c0:	2300      	movs	r3, #0
 80041c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041c4:	2303      	movs	r3, #3
 80041c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80041c8:	2309      	movs	r3, #9
 80041ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041cc:	f107 0314 	add.w	r3, r7, #20
 80041d0:	4619      	mov	r1, r3
 80041d2:	4815      	ldr	r0, [pc, #84]	; (8004228 <HAL_I2C_MspInit+0xb0>)
 80041d4:	f002 f806 	bl	80061e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80041d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041de:	2312      	movs	r3, #18
 80041e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e2:	2300      	movs	r3, #0
 80041e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041e6:	2303      	movs	r3, #3
 80041e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80041ea:	2304      	movs	r3, #4
 80041ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041ee:	f107 0314 	add.w	r3, r7, #20
 80041f2:	4619      	mov	r1, r3
 80041f4:	480c      	ldr	r0, [pc, #48]	; (8004228 <HAL_I2C_MspInit+0xb0>)
 80041f6:	f001 fff5 	bl	80061e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80041fa:	2300      	movs	r3, #0
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	4b09      	ldr	r3, [pc, #36]	; (8004224 <HAL_I2C_MspInit+0xac>)
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	4a08      	ldr	r2, [pc, #32]	; (8004224 <HAL_I2C_MspInit+0xac>)
 8004204:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004208:	6413      	str	r3, [r2, #64]	; 0x40
 800420a:	4b06      	ldr	r3, [pc, #24]	; (8004224 <HAL_I2C_MspInit+0xac>)
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004216:	bf00      	nop
 8004218:	3728      	adds	r7, #40	; 0x28
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	40005800 	.word	0x40005800
 8004224:	40023800 	.word	0x40023800
 8004228:	40020400 	.word	0x40020400

0800422c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b08c      	sub	sp, #48	; 0x30
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004234:	f107 031c 	add.w	r3, r7, #28
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	605a      	str	r2, [r3, #4]
 800423e:	609a      	str	r2, [r3, #8]
 8004240:	60da      	str	r2, [r3, #12]
 8004242:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a32      	ldr	r2, [pc, #200]	; (8004314 <HAL_SPI_MspInit+0xe8>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d12c      	bne.n	80042a8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800424e:	2300      	movs	r3, #0
 8004250:	61bb      	str	r3, [r7, #24]
 8004252:	4b31      	ldr	r3, [pc, #196]	; (8004318 <HAL_SPI_MspInit+0xec>)
 8004254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004256:	4a30      	ldr	r2, [pc, #192]	; (8004318 <HAL_SPI_MspInit+0xec>)
 8004258:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800425c:	6453      	str	r3, [r2, #68]	; 0x44
 800425e:	4b2e      	ldr	r3, [pc, #184]	; (8004318 <HAL_SPI_MspInit+0xec>)
 8004260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004262:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004266:	61bb      	str	r3, [r7, #24]
 8004268:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800426a:	2300      	movs	r3, #0
 800426c:	617b      	str	r3, [r7, #20]
 800426e:	4b2a      	ldr	r3, [pc, #168]	; (8004318 <HAL_SPI_MspInit+0xec>)
 8004270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004272:	4a29      	ldr	r2, [pc, #164]	; (8004318 <HAL_SPI_MspInit+0xec>)
 8004274:	f043 0301 	orr.w	r3, r3, #1
 8004278:	6313      	str	r3, [r2, #48]	; 0x30
 800427a:	4b27      	ldr	r3, [pc, #156]	; (8004318 <HAL_SPI_MspInit+0xec>)
 800427c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 8004286:	23e0      	movs	r3, #224	; 0xe0
 8004288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800428a:	2302      	movs	r3, #2
 800428c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800428e:	2300      	movs	r3, #0
 8004290:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004292:	2303      	movs	r3, #3
 8004294:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004296:	2305      	movs	r3, #5
 8004298:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800429a:	f107 031c 	add.w	r3, r7, #28
 800429e:	4619      	mov	r1, r3
 80042a0:	481e      	ldr	r0, [pc, #120]	; (800431c <HAL_SPI_MspInit+0xf0>)
 80042a2:	f001 ff9f 	bl	80061e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80042a6:	e031      	b.n	800430c <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a1c      	ldr	r2, [pc, #112]	; (8004320 <HAL_SPI_MspInit+0xf4>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d12c      	bne.n	800430c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80042b2:	2300      	movs	r3, #0
 80042b4:	613b      	str	r3, [r7, #16]
 80042b6:	4b18      	ldr	r3, [pc, #96]	; (8004318 <HAL_SPI_MspInit+0xec>)
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	4a17      	ldr	r2, [pc, #92]	; (8004318 <HAL_SPI_MspInit+0xec>)
 80042bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042c0:	6413      	str	r3, [r2, #64]	; 0x40
 80042c2:	4b15      	ldr	r3, [pc, #84]	; (8004318 <HAL_SPI_MspInit+0xec>)
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ca:	613b      	str	r3, [r7, #16]
 80042cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042ce:	2300      	movs	r3, #0
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	4b11      	ldr	r3, [pc, #68]	; (8004318 <HAL_SPI_MspInit+0xec>)
 80042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d6:	4a10      	ldr	r2, [pc, #64]	; (8004318 <HAL_SPI_MspInit+0xec>)
 80042d8:	f043 0302 	orr.w	r3, r3, #2
 80042dc:	6313      	str	r3, [r2, #48]	; 0x30
 80042de:	4b0e      	ldr	r3, [pc, #56]	; (8004318 <HAL_SPI_MspInit+0xec>)
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 80042ea:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80042ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042f0:	2302      	movs	r3, #2
 80042f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f4:	2300      	movs	r3, #0
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042f8:	2303      	movs	r3, #3
 80042fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80042fc:	2305      	movs	r3, #5
 80042fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004300:	f107 031c 	add.w	r3, r7, #28
 8004304:	4619      	mov	r1, r3
 8004306:	4807      	ldr	r0, [pc, #28]	; (8004324 <HAL_SPI_MspInit+0xf8>)
 8004308:	f001 ff6c 	bl	80061e4 <HAL_GPIO_Init>
}
 800430c:	bf00      	nop
 800430e:	3730      	adds	r7, #48	; 0x30
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40013000 	.word	0x40013000
 8004318:	40023800 	.word	0x40023800
 800431c:	40020000 	.word	0x40020000
 8004320:	40003800 	.word	0x40003800
 8004324:	40020400 	.word	0x40020400

08004328 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b08c      	sub	sp, #48	; 0x30
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004330:	f107 031c 	add.w	r3, r7, #28
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	605a      	str	r2, [r3, #4]
 800433a:	609a      	str	r2, [r3, #8]
 800433c:	60da      	str	r2, [r3, #12]
 800433e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004348:	d12d      	bne.n	80043a6 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800434a:	2300      	movs	r3, #0
 800434c:	61bb      	str	r3, [r7, #24]
 800434e:	4b30      	ldr	r3, [pc, #192]	; (8004410 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	4a2f      	ldr	r2, [pc, #188]	; (8004410 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004354:	f043 0301 	orr.w	r3, r3, #1
 8004358:	6413      	str	r3, [r2, #64]	; 0x40
 800435a:	4b2d      	ldr	r3, [pc, #180]	; (8004410 <HAL_TIM_Encoder_MspInit+0xe8>)
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	61bb      	str	r3, [r7, #24]
 8004364:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004366:	2300      	movs	r3, #0
 8004368:	617b      	str	r3, [r7, #20]
 800436a:	4b29      	ldr	r3, [pc, #164]	; (8004410 <HAL_TIM_Encoder_MspInit+0xe8>)
 800436c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436e:	4a28      	ldr	r2, [pc, #160]	; (8004410 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004370:	f043 0301 	orr.w	r3, r3, #1
 8004374:	6313      	str	r3, [r2, #48]	; 0x30
 8004376:	4b26      	ldr	r3, [pc, #152]	; (8004410 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 8004382:	f248 0302 	movw	r3, #32770	; 0x8002
 8004386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004388:	2302      	movs	r3, #2
 800438a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800438c:	2301      	movs	r3, #1
 800438e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004390:	2300      	movs	r3, #0
 8004392:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004394:	2301      	movs	r3, #1
 8004396:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004398:	f107 031c 	add.w	r3, r7, #28
 800439c:	4619      	mov	r1, r3
 800439e:	481d      	ldr	r0, [pc, #116]	; (8004414 <HAL_TIM_Encoder_MspInit+0xec>)
 80043a0:	f001 ff20 	bl	80061e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80043a4:	e030      	b.n	8004408 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a1b      	ldr	r2, [pc, #108]	; (8004418 <HAL_TIM_Encoder_MspInit+0xf0>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d12b      	bne.n	8004408 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80043b0:	2300      	movs	r3, #0
 80043b2:	613b      	str	r3, [r7, #16]
 80043b4:	4b16      	ldr	r3, [pc, #88]	; (8004410 <HAL_TIM_Encoder_MspInit+0xe8>)
 80043b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b8:	4a15      	ldr	r2, [pc, #84]	; (8004410 <HAL_TIM_Encoder_MspInit+0xe8>)
 80043ba:	f043 0304 	orr.w	r3, r3, #4
 80043be:	6413      	str	r3, [r2, #64]	; 0x40
 80043c0:	4b13      	ldr	r3, [pc, #76]	; (8004410 <HAL_TIM_Encoder_MspInit+0xe8>)
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	613b      	str	r3, [r7, #16]
 80043ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043cc:	2300      	movs	r3, #0
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	4b0f      	ldr	r3, [pc, #60]	; (8004410 <HAL_TIM_Encoder_MspInit+0xe8>)
 80043d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d4:	4a0e      	ldr	r2, [pc, #56]	; (8004410 <HAL_TIM_Encoder_MspInit+0xe8>)
 80043d6:	f043 0302 	orr.w	r3, r3, #2
 80043da:	6313      	str	r3, [r2, #48]	; 0x30
 80043dc:	4b0c      	ldr	r3, [pc, #48]	; (8004410 <HAL_TIM_Encoder_MspInit+0xe8>)
 80043de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80043e8:	23c0      	movs	r3, #192	; 0xc0
 80043ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ec:	2302      	movs	r3, #2
 80043ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043f0:	2301      	movs	r3, #1
 80043f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043f4:	2300      	movs	r3, #0
 80043f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80043f8:	2302      	movs	r3, #2
 80043fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043fc:	f107 031c 	add.w	r3, r7, #28
 8004400:	4619      	mov	r1, r3
 8004402:	4806      	ldr	r0, [pc, #24]	; (800441c <HAL_TIM_Encoder_MspInit+0xf4>)
 8004404:	f001 feee 	bl	80061e4 <HAL_GPIO_Init>
}
 8004408:	bf00      	nop
 800440a:	3730      	adds	r7, #48	; 0x30
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	40023800 	.word	0x40023800
 8004414:	40020000 	.word	0x40020000
 8004418:	40000800 	.word	0x40000800
 800441c:	40020400 	.word	0x40020400

08004420 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a0e      	ldr	r2, [pc, #56]	; (8004468 <HAL_TIM_Base_MspInit+0x48>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d115      	bne.n	800445e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004432:	2300      	movs	r3, #0
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	4b0d      	ldr	r3, [pc, #52]	; (800446c <HAL_TIM_Base_MspInit+0x4c>)
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	4a0c      	ldr	r2, [pc, #48]	; (800446c <HAL_TIM_Base_MspInit+0x4c>)
 800443c:	f043 0302 	orr.w	r3, r3, #2
 8004440:	6413      	str	r3, [r2, #64]	; 0x40
 8004442:	4b0a      	ldr	r3, [pc, #40]	; (800446c <HAL_TIM_Base_MspInit+0x4c>)
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800444e:	2200      	movs	r2, #0
 8004450:	2100      	movs	r1, #0
 8004452:	201d      	movs	r0, #29
 8004454:	f001 faaf 	bl	80059b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004458:	201d      	movs	r0, #29
 800445a:	f001 fac8 	bl	80059ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800445e:	bf00      	nop
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	40000400 	.word	0x40000400
 800446c:	40023800 	.word	0x40023800

08004470 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b088      	sub	sp, #32
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004478:	f107 030c 	add.w	r3, r7, #12
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	605a      	str	r2, [r3, #4]
 8004482:	609a      	str	r2, [r3, #8]
 8004484:	60da      	str	r2, [r3, #12]
 8004486:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a12      	ldr	r2, [pc, #72]	; (80044d8 <HAL_TIM_MspPostInit+0x68>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d11d      	bne.n	80044ce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004492:	2300      	movs	r3, #0
 8004494:	60bb      	str	r3, [r7, #8]
 8004496:	4b11      	ldr	r3, [pc, #68]	; (80044dc <HAL_TIM_MspPostInit+0x6c>)
 8004498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449a:	4a10      	ldr	r2, [pc, #64]	; (80044dc <HAL_TIM_MspPostInit+0x6c>)
 800449c:	f043 0302 	orr.w	r3, r3, #2
 80044a0:	6313      	str	r3, [r2, #48]	; 0x30
 80044a2:	4b0e      	ldr	r3, [pc, #56]	; (80044dc <HAL_TIM_MspPostInit+0x6c>)
 80044a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	60bb      	str	r3, [r7, #8]
 80044ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80044ae:	2301      	movs	r3, #1
 80044b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044b2:	2302      	movs	r3, #2
 80044b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b6:	2300      	movs	r3, #0
 80044b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ba:	2300      	movs	r3, #0
 80044bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80044be:	2302      	movs	r3, #2
 80044c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044c2:	f107 030c 	add.w	r3, r7, #12
 80044c6:	4619      	mov	r1, r3
 80044c8:	4805      	ldr	r0, [pc, #20]	; (80044e0 <HAL_TIM_MspPostInit+0x70>)
 80044ca:	f001 fe8b 	bl	80061e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80044ce:	bf00      	nop
 80044d0:	3720      	adds	r7, #32
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	40000400 	.word	0x40000400
 80044dc:	40023800 	.word	0x40023800
 80044e0:	40020400 	.word	0x40020400

080044e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80044e8:	e7fe      	b.n	80044e8 <NMI_Handler+0x4>

080044ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044ea:	b480      	push	{r7}
 80044ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044ee:	e7fe      	b.n	80044ee <HardFault_Handler+0x4>

080044f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044f4:	e7fe      	b.n	80044f4 <MemManage_Handler+0x4>

080044f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044f6:	b480      	push	{r7}
 80044f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044fa:	e7fe      	b.n	80044fa <BusFault_Handler+0x4>

080044fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004500:	e7fe      	b.n	8004500 <UsageFault_Handler+0x4>

08004502 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004502:	b480      	push	{r7}
 8004504:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004506:	bf00      	nop
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004514:	bf00      	nop
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800451e:	b480      	push	{r7}
 8004520:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004522:	bf00      	nop
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004530:	f000 f8a8 	bl	8004684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004534:	bf00      	nop
 8004536:	bd80      	pop	{r7, pc}

08004538 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800453c:	4802      	ldr	r0, [pc, #8]	; (8004548 <TIM3_IRQHandler+0x10>)
 800453e:	f004 fc57 	bl	8008df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004542:	bf00      	nop
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	20004600 	.word	0x20004600

0800454c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004550:	4802      	ldr	r0, [pc, #8]	; (800455c <DMA2_Stream4_IRQHandler+0x10>)
 8004552:	f001 fbdd 	bl	8005d10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8004556:	bf00      	nop
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	20004454 	.word	0x20004454

08004560 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004564:	4b08      	ldr	r3, [pc, #32]	; (8004588 <SystemInit+0x28>)
 8004566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456a:	4a07      	ldr	r2, [pc, #28]	; (8004588 <SystemInit+0x28>)
 800456c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004570:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004574:	4b04      	ldr	r3, [pc, #16]	; (8004588 <SystemInit+0x28>)
 8004576:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800457a:	609a      	str	r2, [r3, #8]
#endif
}
 800457c:	bf00      	nop
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	e000ed00 	.word	0xe000ed00

0800458c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800458c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80045c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004590:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004592:	e003      	b.n	800459c <LoopCopyDataInit>

08004594 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004594:	4b0c      	ldr	r3, [pc, #48]	; (80045c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004596:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004598:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800459a:	3104      	adds	r1, #4

0800459c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800459c:	480b      	ldr	r0, [pc, #44]	; (80045cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800459e:	4b0c      	ldr	r3, [pc, #48]	; (80045d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80045a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80045a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80045a4:	d3f6      	bcc.n	8004594 <CopyDataInit>
  ldr  r2, =_sbss
 80045a6:	4a0b      	ldr	r2, [pc, #44]	; (80045d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80045a8:	e002      	b.n	80045b0 <LoopFillZerobss>

080045aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80045aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80045ac:	f842 3b04 	str.w	r3, [r2], #4

080045b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80045b0:	4b09      	ldr	r3, [pc, #36]	; (80045d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80045b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80045b4:	d3f9      	bcc.n	80045aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80045b6:	f7ff ffd3 	bl	8004560 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045ba:	f005 fa6f 	bl	8009a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045be:	f7fe fcff 	bl	8002fc0 <main>
  bx  lr    
 80045c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80045c4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80045c8:	0800acc4 	.word	0x0800acc4
  ldr  r0, =_sdata
 80045cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80045d0:	20000b48 	.word	0x20000b48
  ldr  r2, =_sbss
 80045d4:	20000b48 	.word	0x20000b48
  ldr  r3, = _ebss
 80045d8:	20004694 	.word	0x20004694

080045dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045dc:	e7fe      	b.n	80045dc <ADC_IRQHandler>
	...

080045e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80045e4:	4b0e      	ldr	r3, [pc, #56]	; (8004620 <HAL_Init+0x40>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a0d      	ldr	r2, [pc, #52]	; (8004620 <HAL_Init+0x40>)
 80045ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80045f0:	4b0b      	ldr	r3, [pc, #44]	; (8004620 <HAL_Init+0x40>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a0a      	ldr	r2, [pc, #40]	; (8004620 <HAL_Init+0x40>)
 80045f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80045fc:	4b08      	ldr	r3, [pc, #32]	; (8004620 <HAL_Init+0x40>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a07      	ldr	r2, [pc, #28]	; (8004620 <HAL_Init+0x40>)
 8004602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004606:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004608:	2003      	movs	r0, #3
 800460a:	f001 f9c9 	bl	80059a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800460e:	2000      	movs	r0, #0
 8004610:	f000 f808 	bl	8004624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004614:	f7ff fcf4 	bl	8004000 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	40023c00 	.word	0x40023c00

08004624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800462c:	4b12      	ldr	r3, [pc, #72]	; (8004678 <HAL_InitTick+0x54>)
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	4b12      	ldr	r3, [pc, #72]	; (800467c <HAL_InitTick+0x58>)
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	4619      	mov	r1, r3
 8004636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800463a:	fbb3 f3f1 	udiv	r3, r3, r1
 800463e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004642:	4618      	mov	r0, r3
 8004644:	f001 f9e1 	bl	8005a0a <HAL_SYSTICK_Config>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e00e      	b.n	8004670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b0f      	cmp	r3, #15
 8004656:	d80a      	bhi.n	800466e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004658:	2200      	movs	r2, #0
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	f04f 30ff 	mov.w	r0, #4294967295
 8004660:	f001 f9a9 	bl	80059b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004664:	4a06      	ldr	r2, [pc, #24]	; (8004680 <HAL_InitTick+0x5c>)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800466a:	2300      	movs	r3, #0
 800466c:	e000      	b.n	8004670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
}
 8004670:	4618      	mov	r0, r3
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	20000ad8 	.word	0x20000ad8
 800467c:	20000ae0 	.word	0x20000ae0
 8004680:	20000adc 	.word	0x20000adc

08004684 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004688:	4b06      	ldr	r3, [pc, #24]	; (80046a4 <HAL_IncTick+0x20>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	461a      	mov	r2, r3
 800468e:	4b06      	ldr	r3, [pc, #24]	; (80046a8 <HAL_IncTick+0x24>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4413      	add	r3, r2
 8004694:	4a04      	ldr	r2, [pc, #16]	; (80046a8 <HAL_IncTick+0x24>)
 8004696:	6013      	str	r3, [r2, #0]
}
 8004698:	bf00      	nop
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	20000ae0 	.word	0x20000ae0
 80046a8:	20004690 	.word	0x20004690

080046ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0
  return uwTick;
 80046b0:	4b03      	ldr	r3, [pc, #12]	; (80046c0 <HAL_GetTick+0x14>)
 80046b2:	681b      	ldr	r3, [r3, #0]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	20004690 	.word	0x20004690

080046c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046cc:	f7ff ffee 	bl	80046ac <HAL_GetTick>
 80046d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046dc:	d005      	beq.n	80046ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046de:	4b0a      	ldr	r3, [pc, #40]	; (8004708 <HAL_Delay+0x44>)
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	461a      	mov	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	4413      	add	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80046ea:	bf00      	nop
 80046ec:	f7ff ffde 	bl	80046ac <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d8f7      	bhi.n	80046ec <HAL_Delay+0x28>
  {
  }
}
 80046fc:	bf00      	nop
 80046fe:	bf00      	nop
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	20000ae0 	.word	0x20000ae0

0800470c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004714:	2300      	movs	r3, #0
 8004716:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e033      	b.n	800478a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	2b00      	cmp	r3, #0
 8004728:	d109      	bne.n	800473e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7ff fc90 	bl	8004050 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	f003 0310 	and.w	r3, r3, #16
 8004746:	2b00      	cmp	r3, #0
 8004748:	d118      	bne.n	800477c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004752:	f023 0302 	bic.w	r3, r3, #2
 8004756:	f043 0202 	orr.w	r2, r3, #2
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 fbe8 	bl	8004f34 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	f023 0303 	bic.w	r3, r3, #3
 8004772:	f043 0201 	orr.w	r2, r3, #1
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	641a      	str	r2, [r3, #64]	; 0x40
 800477a:	e001      	b.n	8004780 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004788:	7bfb      	ldrb	r3, [r7, #15]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
	...

08004794 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d101      	bne.n	80047ae <HAL_ADC_Start+0x1a>
 80047aa:	2302      	movs	r3, #2
 80047ac:	e097      	b.n	80048de <HAL_ADC_Start+0x14a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d018      	beq.n	80047f6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689a      	ldr	r2, [r3, #8]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0201 	orr.w	r2, r2, #1
 80047d2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80047d4:	4b45      	ldr	r3, [pc, #276]	; (80048ec <HAL_ADC_Start+0x158>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a45      	ldr	r2, [pc, #276]	; (80048f0 <HAL_ADC_Start+0x15c>)
 80047da:	fba2 2303 	umull	r2, r3, r2, r3
 80047de:	0c9a      	lsrs	r2, r3, #18
 80047e0:	4613      	mov	r3, r2
 80047e2:	005b      	lsls	r3, r3, #1
 80047e4:	4413      	add	r3, r2
 80047e6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80047e8:	e002      	b.n	80047f0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	3b01      	subs	r3, #1
 80047ee:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1f9      	bne.n	80047ea <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b01      	cmp	r3, #1
 8004802:	d15f      	bne.n	80048c4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004808:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800480c:	f023 0301 	bic.w	r3, r3, #1
 8004810:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004822:	2b00      	cmp	r3, #0
 8004824:	d007      	beq.n	8004836 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800482e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800483e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004842:	d106      	bne.n	8004852 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004848:	f023 0206 	bic.w	r2, r3, #6
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	645a      	str	r2, [r3, #68]	; 0x44
 8004850:	e002      	b.n	8004858 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004860:	4b24      	ldr	r3, [pc, #144]	; (80048f4 <HAL_ADC_Start+0x160>)
 8004862:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800486c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f003 031f 	and.w	r3, r3, #31
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10f      	bne.n	800489a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d129      	bne.n	80048dc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689a      	ldr	r2, [r3, #8]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004896:	609a      	str	r2, [r3, #8]
 8004898:	e020      	b.n	80048dc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a16      	ldr	r2, [pc, #88]	; (80048f8 <HAL_ADC_Start+0x164>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d11b      	bne.n	80048dc <HAL_ADC_Start+0x148>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d114      	bne.n	80048dc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80048c0:	609a      	str	r2, [r3, #8]
 80048c2:	e00b      	b.n	80048dc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c8:	f043 0210 	orr.w	r2, r3, #16
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d4:	f043 0201 	orr.w	r2, r3, #1
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	20000ad8 	.word	0x20000ad8
 80048f0:	431bde83 	.word	0x431bde83
 80048f4:	40012300 	.word	0x40012300
 80048f8:	40012000 	.word	0x40012000

080048fc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004918:	d113      	bne.n	8004942 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004924:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004928:	d10b      	bne.n	8004942 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	f043 0220 	orr.w	r2, r3, #32
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e063      	b.n	8004a0a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004942:	f7ff feb3 	bl	80046ac <HAL_GetTick>
 8004946:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004948:	e021      	b.n	800498e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004950:	d01d      	beq.n	800498e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d007      	beq.n	8004968 <HAL_ADC_PollForConversion+0x6c>
 8004958:	f7ff fea8 	bl	80046ac <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d212      	bcs.n	800498e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b02      	cmp	r3, #2
 8004974:	d00b      	beq.n	800498e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	f043 0204 	orr.w	r2, r3, #4
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e03d      	b.n	8004a0a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b02      	cmp	r3, #2
 800499a:	d1d6      	bne.n	800494a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f06f 0212 	mvn.w	r2, #18
 80049a4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d123      	bne.n	8004a08 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d11f      	bne.n	8004a08 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d006      	beq.n	80049e4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d111      	bne.n	8004a08 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d105      	bne.n	8004a08 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a00:	f043 0201 	orr.w	r2, r3, #1
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
	...

08004a14 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d101      	bne.n	8004a32 <HAL_ADC_Start_DMA+0x1e>
 8004a2e:	2302      	movs	r3, #2
 8004a30:	e0ce      	b.n	8004bd0 <HAL_ADC_Start_DMA+0x1bc>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d018      	beq.n	8004a7a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689a      	ldr	r2, [r3, #8]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 0201 	orr.w	r2, r2, #1
 8004a56:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004a58:	4b5f      	ldr	r3, [pc, #380]	; (8004bd8 <HAL_ADC_Start_DMA+0x1c4>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a5f      	ldr	r2, [pc, #380]	; (8004bdc <HAL_ADC_Start_DMA+0x1c8>)
 8004a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a62:	0c9a      	lsrs	r2, r3, #18
 8004a64:	4613      	mov	r3, r2
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	4413      	add	r3, r2
 8004a6a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004a6c:	e002      	b.n	8004a74 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	3b01      	subs	r3, #1
 8004a72:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f9      	bne.n	8004a6e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a88:	d107      	bne.n	8004a9a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689a      	ldr	r2, [r3, #8]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a98:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	f040 8086 	bne.w	8004bb6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004ab2:	f023 0301 	bic.w	r3, r3, #1
 8004ab6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d007      	beq.n	8004adc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004ad4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae8:	d106      	bne.n	8004af8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aee:	f023 0206 	bic.w	r2, r3, #6
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	645a      	str	r2, [r3, #68]	; 0x44
 8004af6:	e002      	b.n	8004afe <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b06:	4b36      	ldr	r3, [pc, #216]	; (8004be0 <HAL_ADC_Start_DMA+0x1cc>)
 8004b08:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0e:	4a35      	ldr	r2, [pc, #212]	; (8004be4 <HAL_ADC_Start_DMA+0x1d0>)
 8004b10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b16:	4a34      	ldr	r2, [pc, #208]	; (8004be8 <HAL_ADC_Start_DMA+0x1d4>)
 8004b18:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1e:	4a33      	ldr	r2, [pc, #204]	; (8004bec <HAL_ADC_Start_DMA+0x1d8>)
 8004b20:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004b2a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004b3a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689a      	ldr	r2, [r3, #8]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b4a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	334c      	adds	r3, #76	; 0x4c
 8004b56:	4619      	mov	r1, r3
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f001 f810 	bl	8005b80 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f003 031f 	and.w	r3, r3, #31
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10f      	bne.n	8004b8c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d129      	bne.n	8004bce <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689a      	ldr	r2, [r3, #8]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004b88:	609a      	str	r2, [r3, #8]
 8004b8a:	e020      	b.n	8004bce <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a17      	ldr	r2, [pc, #92]	; (8004bf0 <HAL_ADC_Start_DMA+0x1dc>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d11b      	bne.n	8004bce <HAL_ADC_Start_DMA+0x1ba>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d114      	bne.n	8004bce <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	689a      	ldr	r2, [r3, #8]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004bb2:	609a      	str	r2, [r3, #8]
 8004bb4:	e00b      	b.n	8004bce <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bba:	f043 0210 	orr.w	r2, r3, #16
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc6:	f043 0201 	orr.w	r2, r3, #1
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3718      	adds	r7, #24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	20000ad8 	.word	0x20000ad8
 8004bdc:	431bde83 	.word	0x431bde83
 8004be0:	40012300 	.word	0x40012300
 8004be4:	0800512d 	.word	0x0800512d
 8004be8:	080051e7 	.word	0x080051e7
 8004bec:	08005203 	.word	0x08005203
 8004bf0:	40012000 	.word	0x40012000

08004bf4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d101      	bne.n	8004c0e <HAL_ADC_Stop_DMA+0x1a>
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	e048      	b.n	8004ca0 <HAL_ADC_Stop_DMA+0xac>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 0201 	bic.w	r2, r2, #1
 8004c24:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d130      	bne.n	8004c96 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689a      	ldr	r2, [r3, #8]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c42:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d10f      	bne.n	8004c72 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 ffea 	bl	8005c30 <HAL_DMA_Abort>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004c60:	7bfb      	ldrb	r3, [r7, #15]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d005      	beq.n	8004c72 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004c80:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c86:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004c8a:	f023 0301 	bic.w	r3, r3, #1
 8004c8e:	f043 0201 	orr.w	r2, r3, #1
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d101      	bne.n	8004cec <HAL_ADC_ConfigChannel+0x1c>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e113      	b.n	8004f14 <HAL_ADC_ConfigChannel+0x244>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b09      	cmp	r3, #9
 8004cfa:	d925      	bls.n	8004d48 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68d9      	ldr	r1, [r3, #12]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	461a      	mov	r2, r3
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	4413      	add	r3, r2
 8004d10:	3b1e      	subs	r3, #30
 8004d12:	2207      	movs	r2, #7
 8004d14:	fa02 f303 	lsl.w	r3, r2, r3
 8004d18:	43da      	mvns	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	400a      	ands	r2, r1
 8004d20:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68d9      	ldr	r1, [r3, #12]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	4618      	mov	r0, r3
 8004d34:	4603      	mov	r3, r0
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	4403      	add	r3, r0
 8004d3a:	3b1e      	subs	r3, #30
 8004d3c:	409a      	lsls	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	60da      	str	r2, [r3, #12]
 8004d46:	e022      	b.n	8004d8e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6919      	ldr	r1, [r3, #16]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	461a      	mov	r2, r3
 8004d56:	4613      	mov	r3, r2
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	4413      	add	r3, r2
 8004d5c:	2207      	movs	r2, #7
 8004d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d62:	43da      	mvns	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	400a      	ands	r2, r1
 8004d6a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6919      	ldr	r1, [r3, #16]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	4603      	mov	r3, r0
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	4403      	add	r3, r0
 8004d84:	409a      	lsls	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2b06      	cmp	r3, #6
 8004d94:	d824      	bhi.n	8004de0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	4613      	mov	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4413      	add	r3, r2
 8004da6:	3b05      	subs	r3, #5
 8004da8:	221f      	movs	r2, #31
 8004daa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dae:	43da      	mvns	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	400a      	ands	r2, r1
 8004db6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	3b05      	subs	r3, #5
 8004dd2:	fa00 f203 	lsl.w	r2, r0, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	635a      	str	r2, [r3, #52]	; 0x34
 8004dde:	e04c      	b.n	8004e7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	2b0c      	cmp	r3, #12
 8004de6:	d824      	bhi.n	8004e32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	4613      	mov	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	3b23      	subs	r3, #35	; 0x23
 8004dfa:	221f      	movs	r2, #31
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	43da      	mvns	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	400a      	ands	r2, r1
 8004e08:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	4618      	mov	r0, r3
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	3b23      	subs	r3, #35	; 0x23
 8004e24:	fa00 f203 	lsl.w	r2, r0, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	631a      	str	r2, [r3, #48]	; 0x30
 8004e30:	e023      	b.n	8004e7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	3b41      	subs	r3, #65	; 0x41
 8004e44:	221f      	movs	r2, #31
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	43da      	mvns	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	400a      	ands	r2, r1
 8004e52:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	4618      	mov	r0, r3
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	4613      	mov	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4413      	add	r3, r2
 8004e6c:	3b41      	subs	r3, #65	; 0x41
 8004e6e:	fa00 f203 	lsl.w	r2, r0, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004e7a:	4b29      	ldr	r3, [pc, #164]	; (8004f20 <HAL_ADC_ConfigChannel+0x250>)
 8004e7c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a28      	ldr	r2, [pc, #160]	; (8004f24 <HAL_ADC_ConfigChannel+0x254>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d10f      	bne.n	8004ea8 <HAL_ADC_ConfigChannel+0x1d8>
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b12      	cmp	r3, #18
 8004e8e:	d10b      	bne.n	8004ea8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a1d      	ldr	r2, [pc, #116]	; (8004f24 <HAL_ADC_ConfigChannel+0x254>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d12b      	bne.n	8004f0a <HAL_ADC_ConfigChannel+0x23a>
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a1c      	ldr	r2, [pc, #112]	; (8004f28 <HAL_ADC_ConfigChannel+0x258>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d003      	beq.n	8004ec4 <HAL_ADC_ConfigChannel+0x1f4>
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b11      	cmp	r3, #17
 8004ec2:	d122      	bne.n	8004f0a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a11      	ldr	r2, [pc, #68]	; (8004f28 <HAL_ADC_ConfigChannel+0x258>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d111      	bne.n	8004f0a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004ee6:	4b11      	ldr	r3, [pc, #68]	; (8004f2c <HAL_ADC_ConfigChannel+0x25c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a11      	ldr	r2, [pc, #68]	; (8004f30 <HAL_ADC_ConfigChannel+0x260>)
 8004eec:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef0:	0c9a      	lsrs	r2, r3, #18
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4413      	add	r3, r2
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004efc:	e002      	b.n	8004f04 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	3b01      	subs	r3, #1
 8004f02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1f9      	bne.n	8004efe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	40012300 	.word	0x40012300
 8004f24:	40012000 	.word	0x40012000
 8004f28:	10000012 	.word	0x10000012
 8004f2c:	20000ad8 	.word	0x20000ad8
 8004f30:	431bde83 	.word	0x431bde83

08004f34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f3c:	4b79      	ldr	r3, [pc, #484]	; (8005124 <ADC_Init+0x1f0>)
 8004f3e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	431a      	orrs	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	6859      	ldr	r1, [r3, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	021a      	lsls	r2, r3, #8
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004f8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6859      	ldr	r1, [r3, #4]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689a      	ldr	r2, [r3, #8]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6899      	ldr	r1, [r3, #8]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68da      	ldr	r2, [r3, #12]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc6:	4a58      	ldr	r2, [pc, #352]	; (8005128 <ADC_Init+0x1f4>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d022      	beq.n	8005012 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689a      	ldr	r2, [r3, #8]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004fda:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6899      	ldr	r1, [r3, #8]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ffc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6899      	ldr	r1, [r3, #8]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	609a      	str	r2, [r3, #8]
 8005010:	e00f      	b.n	8005032 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005020:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005030:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 0202 	bic.w	r2, r2, #2
 8005040:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6899      	ldr	r1, [r3, #8]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	7e1b      	ldrb	r3, [r3, #24]
 800504c:	005a      	lsls	r2, r3, #1
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 3020 	ldrb.w	r3, [r3, #32]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d01b      	beq.n	8005098 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800506e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685a      	ldr	r2, [r3, #4]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800507e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6859      	ldr	r1, [r3, #4]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	3b01      	subs	r3, #1
 800508c:	035a      	lsls	r2, r3, #13
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	605a      	str	r2, [r3, #4]
 8005096:	e007      	b.n	80050a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80050b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	3b01      	subs	r3, #1
 80050c4:	051a      	lsls	r2, r3, #20
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80050dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6899      	ldr	r1, [r3, #8]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80050ea:	025a      	lsls	r2, r3, #9
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689a      	ldr	r2, [r3, #8]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005102:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6899      	ldr	r1, [r3, #8]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	029a      	lsls	r2, r3, #10
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	430a      	orrs	r2, r1
 8005116:	609a      	str	r2, [r3, #8]
}
 8005118:	bf00      	nop
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	40012300 	.word	0x40012300
 8005128:	0f000001 	.word	0x0f000001

0800512c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005138:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005142:	2b00      	cmp	r3, #0
 8005144:	d13c      	bne.n	80051c0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d12b      	bne.n	80051b8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005164:	2b00      	cmp	r3, #0
 8005166:	d127      	bne.n	80051b8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005172:	2b00      	cmp	r3, #0
 8005174:	d006      	beq.n	8005184 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005180:	2b00      	cmp	r3, #0
 8005182:	d119      	bne.n	80051b8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 0220 	bic.w	r2, r2, #32
 8005192:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005198:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d105      	bne.n	80051b8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b0:	f043 0201 	orr.w	r2, r3, #1
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f7fe ff0b 	bl	8003fd4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80051be:	e00e      	b.n	80051de <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c4:	f003 0310 	and.w	r3, r3, #16
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f7ff fd75 	bl	8004cbc <HAL_ADC_ErrorCallback>
}
 80051d2:	e004      	b.n	80051de <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	4798      	blx	r3
}
 80051de:	bf00      	nop
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b084      	sub	sp, #16
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f7ff fd57 	bl	8004ca8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80051fa:	bf00      	nop
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b084      	sub	sp, #16
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2240      	movs	r2, #64	; 0x40
 8005214:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521a:	f043 0204 	orr.w	r2, r3, #4
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f7ff fd4a 	bl	8004cbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005228:	bf00      	nop
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8005230:	b480      	push	{r7}
 8005232:	b087      	sub	sp, #28
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005238:	2300      	movs	r3, #0
 800523a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800523c:	2300      	movs	r3, #0
 800523e:	617b      	str	r3, [r7, #20]
 8005240:	2300      	movs	r3, #0
 8005242:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800524a:	2b01      	cmp	r3, #1
 800524c:	d101      	bne.n	8005252 <HAL_ADCEx_InjectedStart+0x22>
 800524e:	2302      	movs	r3, #2
 8005250:	e0aa      	b.n	80053a8 <HAL_ADCEx_InjectedStart+0x178>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	2b01      	cmp	r3, #1
 8005266:	d018      	beq.n	800529a <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689a      	ldr	r2, [r3, #8]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f042 0201 	orr.w	r2, r2, #1
 8005276:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005278:	4b4e      	ldr	r3, [pc, #312]	; (80053b4 <HAL_ADCEx_InjectedStart+0x184>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a4e      	ldr	r2, [pc, #312]	; (80053b8 <HAL_ADCEx_InjectedStart+0x188>)
 800527e:	fba2 2303 	umull	r2, r3, r2, r3
 8005282:	0c9a      	lsrs	r2, r3, #18
 8005284:	4613      	mov	r3, r2
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	4413      	add	r3, r2
 800528a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800528c:	e002      	b.n	8005294 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	3b01      	subs	r3, #1
 8005292:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1f9      	bne.n	800528e <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d172      	bne.n	800538e <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80052b0:	f023 0301 	bic.w	r3, r3, #1
 80052b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d102      	bne.n	80052ce <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f06f 0204 	mvn.w	r2, #4
 80052de:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80052e0:	4b36      	ldr	r3, [pc, #216]	; (80053bc <HAL_ADCEx_InjectedStart+0x18c>)
 80052e2:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f003 031f 	and.w	r3, r3, #31
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d124      	bne.n	800533a <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	bf0c      	ite	eq
 80052fe:	2301      	moveq	r3, #1
 8005300:	2300      	movne	r3, #0
 8005302:	b2db      	uxtb	r3, r3
 8005304:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005310:	2b00      	cmp	r3, #0
 8005312:	bf0c      	ite	eq
 8005314:	2301      	moveq	r3, #1
 8005316:	2300      	movne	r3, #0
 8005318:	b2db      	uxtb	r3, r3
 800531a:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d041      	beq.n	80053a6 <HAL_ADCEx_InjectedStart+0x176>
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d03e      	beq.n	80053a6 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689a      	ldr	r2, [r3, #8]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005336:	609a      	str	r2, [r3, #8]
 8005338:	e035      	b.n	80053a6 <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005344:	2b00      	cmp	r3, #0
 8005346:	bf0c      	ite	eq
 8005348:	2301      	moveq	r3, #1
 800534a:	2300      	movne	r3, #0
 800534c:	b2db      	uxtb	r3, r3
 800534e:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800535a:	2b00      	cmp	r3, #0
 800535c:	bf0c      	ite	eq
 800535e:	2301      	moveq	r3, #1
 8005360:	2300      	movne	r3, #0
 8005362:	b2db      	uxtb	r3, r3
 8005364:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a15      	ldr	r2, [pc, #84]	; (80053c0 <HAL_ADCEx_InjectedStart+0x190>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d11a      	bne.n	80053a6 <HAL_ADCEx_InjectedStart+0x176>
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d017      	beq.n	80053a6 <HAL_ADCEx_InjectedStart+0x176>
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d014      	beq.n	80053a6 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	689a      	ldr	r2, [r3, #8]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800538a:	609a      	str	r2, [r3, #8]
 800538c:	e00b      	b.n	80053a6 <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	f043 0210 	orr.w	r2, r3, #16
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539e:	f043 0201 	orr.w	r2, r3, #1
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	371c      	adds	r7, #28
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr
 80053b4:	20000ad8 	.word	0x20000ad8
 80053b8:	431bde83 	.word	0x431bde83
 80053bc:	40012300 	.word	0x40012300
 80053c0:	40012000 	.word	0x40012000

080053c4 <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053cc:	2300      	movs	r3, #0
 80053ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d101      	bne.n	80053de <HAL_ADCEx_InjectedStop+0x1a>
 80053da:	2302      	movs	r3, #2
 80053dc:	e037      	b.n	800544e <HAL_ADCEx_InjectedStop+0x8a>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d120      	bne.n	8005434 <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d119      	bne.n	8005434 <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689a      	ldr	r2, [r3, #8]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f022 0201 	bic.w	r2, r2, #1
 800540e:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b00      	cmp	r3, #0
 800541c:	d112      	bne.n	8005444 <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005426:	f023 0301 	bic.w	r3, r3, #1
 800542a:	f043 0201 	orr.w	r2, r3, #1
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005432:	e007      	b.n	8005444 <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005438:	f043 0220 	orr.w	r2, r3, #32
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800544c:	7bfb      	ldrb	r3, [r7, #15]
}
 800544e:	4618      	mov	r0, r3
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
	...

0800545c <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f06f 0204 	mvn.w	r2, #4
 8005472:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	3b01      	subs	r3, #1
 8005478:	2b03      	cmp	r3, #3
 800547a:	d81f      	bhi.n	80054bc <HAL_ADCEx_InjectedGetValue+0x60>
 800547c:	a201      	add	r2, pc, #4	; (adr r2, 8005484 <HAL_ADCEx_InjectedGetValue+0x28>)
 800547e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005482:	bf00      	nop
 8005484:	080054b3 	.word	0x080054b3
 8005488:	080054a9 	.word	0x080054a9
 800548c:	0800549f 	.word	0x0800549f
 8005490:	08005495 	.word	0x08005495
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800549a:	60fb      	str	r3, [r7, #12]
    }  
    break;
 800549c:	e00f      	b.n	80054be <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a4:	60fb      	str	r3, [r7, #12]
    }  
    break;
 80054a6:	e00a      	b.n	80054be <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ae:	60fb      	str	r3, [r7, #12]
    }
    break;
 80054b0:	e005      	b.n	80054be <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b8:	60fb      	str	r3, [r7, #12]
    }
    break;
 80054ba:	e000      	b.n	80054be <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 80054bc:	bf00      	nop
  }
  return tmp;
 80054be:	68fb      	ldr	r3, [r7, #12]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d101      	bne.n	80054e4 <HAL_ADCEx_InjectedConfigChannel+0x18>
 80054e0:	2302      	movs	r3, #2
 80054e2:	e17e      	b.n	80057e2 <HAL_ADCEx_InjectedConfigChannel+0x316>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b09      	cmp	r3, #9
 80054f2:	d925      	bls.n	8005540 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68d9      	ldr	r1, [r3, #12]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	b29b      	uxth	r3, r3
 8005500:	461a      	mov	r2, r3
 8005502:	4613      	mov	r3, r2
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	4413      	add	r3, r2
 8005508:	3b1e      	subs	r3, #30
 800550a:	2207      	movs	r2, #7
 800550c:	fa02 f303 	lsl.w	r3, r2, r3
 8005510:	43da      	mvns	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	400a      	ands	r2, r1
 8005518:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68d9      	ldr	r1, [r3, #12]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	689a      	ldr	r2, [r3, #8]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	b29b      	uxth	r3, r3
 800552a:	4618      	mov	r0, r3
 800552c:	4603      	mov	r3, r0
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	4403      	add	r3, r0
 8005532:	3b1e      	subs	r3, #30
 8005534:	409a      	lsls	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	60da      	str	r2, [r3, #12]
 800553e:	e022      	b.n	8005586 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6919      	ldr	r1, [r3, #16]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	b29b      	uxth	r3, r3
 800554c:	461a      	mov	r2, r3
 800554e:	4613      	mov	r3, r2
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	4413      	add	r3, r2
 8005554:	2207      	movs	r2, #7
 8005556:	fa02 f303 	lsl.w	r3, r2, r3
 800555a:	43da      	mvns	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	400a      	ands	r2, r1
 8005562:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6919      	ldr	r1, [r3, #16]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	689a      	ldr	r2, [r3, #8]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	b29b      	uxth	r3, r3
 8005574:	4618      	mov	r0, r3
 8005576:	4603      	mov	r3, r0
 8005578:	005b      	lsls	r3, r3, #1
 800557a:	4403      	add	r3, r0
 800557c:	409a      	lsls	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005594:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	3b01      	subs	r3, #1
 80055a2:	051a      	lsls	r2, r3, #20
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	3303      	adds	r3, #3
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	461a      	mov	r2, r3
 80055c8:	4613      	mov	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	221f      	movs	r2, #31
 80055d0:	fa02 f303 	lsl.w	r3, r2, r3
 80055d4:	43da      	mvns	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	400a      	ands	r2, r1
 80055dc:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	4618      	mov	r0, r3
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	3303      	adds	r3, #3
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	461a      	mov	r2, r3
 8005602:	4613      	mov	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	fa00 f203 	lsl.w	r2, r0, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	430a      	orrs	r2, r1
 8005612:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	4a75      	ldr	r2, [pc, #468]	; (80057f0 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d022      	beq.n	8005664 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	689a      	ldr	r2, [r3, #8]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800562c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6899      	ldr	r1, [r3, #8]
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	699a      	ldr	r2, [r3, #24]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689a      	ldr	r2, [r3, #8]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800564e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6899      	ldr	r1, [r3, #8]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	69da      	ldr	r2, [r3, #28]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	430a      	orrs	r2, r1
 8005660:	609a      	str	r2, [r3, #8]
 8005662:	e00f      	b.n	8005684 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689a      	ldr	r2, [r3, #8]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8005672:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689a      	ldr	r2, [r3, #8]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005682:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	7d5b      	ldrb	r3, [r3, #21]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d008      	beq.n	800569e <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800569a:	605a      	str	r2, [r3, #4]
 800569c:	e007      	b.n	80056ae <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ac:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	7d1b      	ldrb	r3, [r3, #20]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d008      	beq.n	80056c8 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056c4:	605a      	str	r2, [r3, #4]
 80056c6:	e007      	b.n	80056d8 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056d6:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	2b03      	cmp	r3, #3
 80056de:	d02e      	beq.n	800573e <HAL_ADCEx_InjectedConfigChannel+0x272>
 80056e0:	2b03      	cmp	r3, #3
 80056e2:	d840      	bhi.n	8005766 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d002      	beq.n	80056ee <HAL_ADCEx_InjectedConfigChannel+0x222>
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d014      	beq.n	8005716 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 80056ec:	e03b      	b.n	8005766 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	6812      	ldr	r2, [r2, #0]
 80056f8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80056fc:	f023 030f 	bic.w	r3, r3, #15
 8005700:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6959      	ldr	r1, [r3, #20]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	68da      	ldr	r2, [r3, #12]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	430a      	orrs	r2, r1
 8005712:	615a      	str	r2, [r3, #20]
      break;
 8005714:	e03b      	b.n	800578e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	6812      	ldr	r2, [r2, #0]
 8005720:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005724:	f023 030f 	bic.w	r3, r3, #15
 8005728:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	6999      	ldr	r1, [r3, #24]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	68da      	ldr	r2, [r3, #12]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	430a      	orrs	r2, r1
 800573a:	619a      	str	r2, [r3, #24]
      break;
 800573c:	e027      	b.n	800578e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	69db      	ldr	r3, [r3, #28]
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	6812      	ldr	r2, [r2, #0]
 8005748:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800574c:	f023 030f 	bic.w	r3, r3, #15
 8005750:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	69d9      	ldr	r1, [r3, #28]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	68da      	ldr	r2, [r3, #12]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	430a      	orrs	r2, r1
 8005762:	61da      	str	r2, [r3, #28]
      break;
 8005764:	e013      	b.n	800578e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	6812      	ldr	r2, [r2, #0]
 8005770:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005774:	f023 030f 	bic.w	r3, r3, #15
 8005778:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6a19      	ldr	r1, [r3, #32]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	68da      	ldr	r2, [r3, #12]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	621a      	str	r2, [r3, #32]
      break;
 800578c:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800578e:	4b19      	ldr	r3, [pc, #100]	; (80057f4 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8005790:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a18      	ldr	r2, [pc, #96]	; (80057f8 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d109      	bne.n	80057b0 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b12      	cmp	r3, #18
 80057a2:	d105      	bne.n	80057b0 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a10      	ldr	r2, [pc, #64]	; (80057f8 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d10e      	bne.n	80057d8 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a0f      	ldr	r2, [pc, #60]	; (80057fc <HAL_ADCEx_InjectedConfigChannel+0x330>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d003      	beq.n	80057cc <HAL_ADCEx_InjectedConfigChannel+0x300>
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b11      	cmp	r3, #17
 80057ca:	d105      	bne.n	80057d8 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	000f0001 	.word	0x000f0001
 80057f4:	40012300 	.word	0x40012300
 80057f8:	40012000 	.word	0x40012000
 80057fc:	10000012 	.word	0x10000012

08005800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f003 0307 	and.w	r3, r3, #7
 800580e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005810:	4b0c      	ldr	r3, [pc, #48]	; (8005844 <__NVIC_SetPriorityGrouping+0x44>)
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800581c:	4013      	ands	r3, r2
 800581e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800582c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005832:	4a04      	ldr	r2, [pc, #16]	; (8005844 <__NVIC_SetPriorityGrouping+0x44>)
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	60d3      	str	r3, [r2, #12]
}
 8005838:	bf00      	nop
 800583a:	3714      	adds	r7, #20
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr
 8005844:	e000ed00 	.word	0xe000ed00

08005848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005848:	b480      	push	{r7}
 800584a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800584c:	4b04      	ldr	r3, [pc, #16]	; (8005860 <__NVIC_GetPriorityGrouping+0x18>)
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	0a1b      	lsrs	r3, r3, #8
 8005852:	f003 0307 	and.w	r3, r3, #7
}
 8005856:	4618      	mov	r0, r3
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr
 8005860:	e000ed00 	.word	0xe000ed00

08005864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	4603      	mov	r3, r0
 800586c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800586e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005872:	2b00      	cmp	r3, #0
 8005874:	db0b      	blt.n	800588e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005876:	79fb      	ldrb	r3, [r7, #7]
 8005878:	f003 021f 	and.w	r2, r3, #31
 800587c:	4907      	ldr	r1, [pc, #28]	; (800589c <__NVIC_EnableIRQ+0x38>)
 800587e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005882:	095b      	lsrs	r3, r3, #5
 8005884:	2001      	movs	r0, #1
 8005886:	fa00 f202 	lsl.w	r2, r0, r2
 800588a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800588e:	bf00      	nop
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	e000e100 	.word	0xe000e100

080058a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	4603      	mov	r3, r0
 80058a8:	6039      	str	r1, [r7, #0]
 80058aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	db0a      	blt.n	80058ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	b2da      	uxtb	r2, r3
 80058b8:	490c      	ldr	r1, [pc, #48]	; (80058ec <__NVIC_SetPriority+0x4c>)
 80058ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058be:	0112      	lsls	r2, r2, #4
 80058c0:	b2d2      	uxtb	r2, r2
 80058c2:	440b      	add	r3, r1
 80058c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80058c8:	e00a      	b.n	80058e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	b2da      	uxtb	r2, r3
 80058ce:	4908      	ldr	r1, [pc, #32]	; (80058f0 <__NVIC_SetPriority+0x50>)
 80058d0:	79fb      	ldrb	r3, [r7, #7]
 80058d2:	f003 030f 	and.w	r3, r3, #15
 80058d6:	3b04      	subs	r3, #4
 80058d8:	0112      	lsls	r2, r2, #4
 80058da:	b2d2      	uxtb	r2, r2
 80058dc:	440b      	add	r3, r1
 80058de:	761a      	strb	r2, [r3, #24]
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr
 80058ec:	e000e100 	.word	0xe000e100
 80058f0:	e000ed00 	.word	0xe000ed00

080058f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b089      	sub	sp, #36	; 0x24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f003 0307 	and.w	r3, r3, #7
 8005906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	f1c3 0307 	rsb	r3, r3, #7
 800590e:	2b04      	cmp	r3, #4
 8005910:	bf28      	it	cs
 8005912:	2304      	movcs	r3, #4
 8005914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	3304      	adds	r3, #4
 800591a:	2b06      	cmp	r3, #6
 800591c:	d902      	bls.n	8005924 <NVIC_EncodePriority+0x30>
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	3b03      	subs	r3, #3
 8005922:	e000      	b.n	8005926 <NVIC_EncodePriority+0x32>
 8005924:	2300      	movs	r3, #0
 8005926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005928:	f04f 32ff 	mov.w	r2, #4294967295
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	fa02 f303 	lsl.w	r3, r2, r3
 8005932:	43da      	mvns	r2, r3
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	401a      	ands	r2, r3
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800593c:	f04f 31ff 	mov.w	r1, #4294967295
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	fa01 f303 	lsl.w	r3, r1, r3
 8005946:	43d9      	mvns	r1, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800594c:	4313      	orrs	r3, r2
         );
}
 800594e:	4618      	mov	r0, r3
 8005950:	3724      	adds	r7, #36	; 0x24
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
	...

0800595c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	3b01      	subs	r3, #1
 8005968:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800596c:	d301      	bcc.n	8005972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800596e:	2301      	movs	r3, #1
 8005970:	e00f      	b.n	8005992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005972:	4a0a      	ldr	r2, [pc, #40]	; (800599c <SysTick_Config+0x40>)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	3b01      	subs	r3, #1
 8005978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800597a:	210f      	movs	r1, #15
 800597c:	f04f 30ff 	mov.w	r0, #4294967295
 8005980:	f7ff ff8e 	bl	80058a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005984:	4b05      	ldr	r3, [pc, #20]	; (800599c <SysTick_Config+0x40>)
 8005986:	2200      	movs	r2, #0
 8005988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800598a:	4b04      	ldr	r3, [pc, #16]	; (800599c <SysTick_Config+0x40>)
 800598c:	2207      	movs	r2, #7
 800598e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	e000e010 	.word	0xe000e010

080059a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f7ff ff29 	bl	8005800 <__NVIC_SetPriorityGrouping>
}
 80059ae:	bf00      	nop
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b086      	sub	sp, #24
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	4603      	mov	r3, r0
 80059be:	60b9      	str	r1, [r7, #8]
 80059c0:	607a      	str	r2, [r7, #4]
 80059c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80059c4:	2300      	movs	r3, #0
 80059c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80059c8:	f7ff ff3e 	bl	8005848 <__NVIC_GetPriorityGrouping>
 80059cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	68b9      	ldr	r1, [r7, #8]
 80059d2:	6978      	ldr	r0, [r7, #20]
 80059d4:	f7ff ff8e 	bl	80058f4 <NVIC_EncodePriority>
 80059d8:	4602      	mov	r2, r0
 80059da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059de:	4611      	mov	r1, r2
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7ff ff5d 	bl	80058a0 <__NVIC_SetPriority>
}
 80059e6:	bf00      	nop
 80059e8:	3718      	adds	r7, #24
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b082      	sub	sp, #8
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	4603      	mov	r3, r0
 80059f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80059f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7ff ff31 	bl	8005864 <__NVIC_EnableIRQ>
}
 8005a02:	bf00      	nop
 8005a04:	3708      	adds	r7, #8
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b082      	sub	sp, #8
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7ff ffa2 	bl	800595c <SysTick_Config>
 8005a18:	4603      	mov	r3, r0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
	...

08005a24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005a30:	f7fe fe3c 	bl	80046ac <HAL_GetTick>
 8005a34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d101      	bne.n	8005a40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e099      	b.n	8005b74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2202      	movs	r2, #2
 8005a44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f022 0201 	bic.w	r2, r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a60:	e00f      	b.n	8005a82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a62:	f7fe fe23 	bl	80046ac <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	2b05      	cmp	r3, #5
 8005a6e:	d908      	bls.n	8005a82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2220      	movs	r2, #32
 8005a74:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2203      	movs	r2, #3
 8005a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e078      	b.n	8005b74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1e8      	bne.n	8005a62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	4b38      	ldr	r3, [pc, #224]	; (8005b7c <HAL_DMA_Init+0x158>)
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005aae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005aba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ac6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	d107      	bne.n	8005aec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	f023 0307 	bic.w	r3, r3, #7
 8005b02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	2b04      	cmp	r3, #4
 8005b14:	d117      	bne.n	8005b46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00e      	beq.n	8005b46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 fadf 	bl	80060ec <DMA_CheckFifoParam>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d008      	beq.n	8005b46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2240      	movs	r2, #64	; 0x40
 8005b38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005b42:	2301      	movs	r3, #1
 8005b44:	e016      	b.n	8005b74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 fa96 	bl	8006080 <DMA_CalcBaseAndBitshift>
 8005b54:	4603      	mov	r3, r0
 8005b56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b5c:	223f      	movs	r2, #63	; 0x3f
 8005b5e:	409a      	lsls	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3718      	adds	r7, #24
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	f010803f 	.word	0xf010803f

08005b80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
 8005b8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b96:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d101      	bne.n	8005ba6 <HAL_DMA_Start_IT+0x26>
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	e040      	b.n	8005c28 <HAL_DMA_Start_IT+0xa8>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d12f      	bne.n	8005c1a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2202      	movs	r2, #2
 8005bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	68b9      	ldr	r1, [r7, #8]
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f000 fa28 	bl	8006024 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bd8:	223f      	movs	r2, #63	; 0x3f
 8005bda:	409a      	lsls	r2, r3
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f042 0216 	orr.w	r2, r2, #22
 8005bee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d007      	beq.n	8005c08 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f042 0208 	orr.w	r2, r2, #8
 8005c06:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f042 0201 	orr.w	r2, r2, #1
 8005c16:	601a      	str	r2, [r3, #0]
 8005c18:	e005      	b.n	8005c26 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005c22:	2302      	movs	r3, #2
 8005c24:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3718      	adds	r7, #24
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c3c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005c3e:	f7fe fd35 	bl	80046ac <HAL_GetTick>
 8005c42:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d008      	beq.n	8005c62 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2280      	movs	r2, #128	; 0x80
 8005c54:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e052      	b.n	8005d08 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 0216 	bic.w	r2, r2, #22
 8005c70:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	695a      	ldr	r2, [r3, #20]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c80:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d103      	bne.n	8005c92 <HAL_DMA_Abort+0x62>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d007      	beq.n	8005ca2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 0208 	bic.w	r2, r2, #8
 8005ca0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f022 0201 	bic.w	r2, r2, #1
 8005cb0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cb2:	e013      	b.n	8005cdc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005cb4:	f7fe fcfa 	bl	80046ac <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	2b05      	cmp	r3, #5
 8005cc0:	d90c      	bls.n	8005cdc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2203      	movs	r2, #3
 8005ccc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e015      	b.n	8005d08 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1e4      	bne.n	8005cb4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cee:	223f      	movs	r2, #63	; 0x3f
 8005cf0:	409a      	lsls	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d1c:	4b8e      	ldr	r3, [pc, #568]	; (8005f58 <HAL_DMA_IRQHandler+0x248>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a8e      	ldr	r2, [pc, #568]	; (8005f5c <HAL_DMA_IRQHandler+0x24c>)
 8005d22:	fba2 2303 	umull	r2, r3, r2, r3
 8005d26:	0a9b      	lsrs	r3, r3, #10
 8005d28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d3a:	2208      	movs	r2, #8
 8005d3c:	409a      	lsls	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	4013      	ands	r3, r2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d01a      	beq.n	8005d7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0304 	and.w	r3, r3, #4
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d013      	beq.n	8005d7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f022 0204 	bic.w	r2, r2, #4
 8005d62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d68:	2208      	movs	r2, #8
 8005d6a:	409a      	lsls	r2, r3
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d74:	f043 0201 	orr.w	r2, r3, #1
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d80:	2201      	movs	r2, #1
 8005d82:	409a      	lsls	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	4013      	ands	r3, r2
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d012      	beq.n	8005db2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00b      	beq.n	8005db2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d9e:	2201      	movs	r2, #1
 8005da0:	409a      	lsls	r2, r3
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005daa:	f043 0202 	orr.w	r2, r3, #2
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005db6:	2204      	movs	r2, #4
 8005db8:	409a      	lsls	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d012      	beq.n	8005de8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0302 	and.w	r3, r3, #2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00b      	beq.n	8005de8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dd4:	2204      	movs	r2, #4
 8005dd6:	409a      	lsls	r2, r3
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de0:	f043 0204 	orr.w	r2, r3, #4
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dec:	2210      	movs	r2, #16
 8005dee:	409a      	lsls	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	4013      	ands	r3, r2
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d043      	beq.n	8005e80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0308 	and.w	r3, r3, #8
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d03c      	beq.n	8005e80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e0a:	2210      	movs	r2, #16
 8005e0c:	409a      	lsls	r2, r3
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d018      	beq.n	8005e52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d108      	bne.n	8005e40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d024      	beq.n	8005e80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	4798      	blx	r3
 8005e3e:	e01f      	b.n	8005e80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d01b      	beq.n	8005e80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	4798      	blx	r3
 8005e50:	e016      	b.n	8005e80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d107      	bne.n	8005e70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 0208 	bic.w	r2, r2, #8
 8005e6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d003      	beq.n	8005e80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e84:	2220      	movs	r2, #32
 8005e86:	409a      	lsls	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 808f 	beq.w	8005fb0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0310 	and.w	r3, r3, #16
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f000 8087 	beq.w	8005fb0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	409a      	lsls	r2, r3
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b05      	cmp	r3, #5
 8005eb8:	d136      	bne.n	8005f28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 0216 	bic.w	r2, r2, #22
 8005ec8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	695a      	ldr	r2, [r3, #20]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ed8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d103      	bne.n	8005eea <HAL_DMA_IRQHandler+0x1da>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d007      	beq.n	8005efa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f022 0208 	bic.w	r2, r2, #8
 8005ef8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005efe:	223f      	movs	r2, #63	; 0x3f
 8005f00:	409a      	lsls	r2, r3
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d07e      	beq.n	800601c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	4798      	blx	r3
        }
        return;
 8005f26:	e079      	b.n	800601c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d01d      	beq.n	8005f72 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10d      	bne.n	8005f60 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d031      	beq.n	8005fb0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	4798      	blx	r3
 8005f54:	e02c      	b.n	8005fb0 <HAL_DMA_IRQHandler+0x2a0>
 8005f56:	bf00      	nop
 8005f58:	20000ad8 	.word	0x20000ad8
 8005f5c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d023      	beq.n	8005fb0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	4798      	blx	r3
 8005f70:	e01e      	b.n	8005fb0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10f      	bne.n	8005fa0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f022 0210 	bic.w	r2, r2, #16
 8005f8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d003      	beq.n	8005fb0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d032      	beq.n	800601e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d022      	beq.n	800600a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2205      	movs	r2, #5
 8005fc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 0201 	bic.w	r2, r2, #1
 8005fda:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	60bb      	str	r3, [r7, #8]
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d307      	bcc.n	8005ff8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1f2      	bne.n	8005fdc <HAL_DMA_IRQHandler+0x2cc>
 8005ff6:	e000      	b.n	8005ffa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005ff8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800600e:	2b00      	cmp	r3, #0
 8006010:	d005      	beq.n	800601e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	4798      	blx	r3
 800601a:	e000      	b.n	800601e <HAL_DMA_IRQHandler+0x30e>
        return;
 800601c:	bf00      	nop
    }
  }
}
 800601e:	3718      	adds	r7, #24
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
 8006030:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006040:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	2b40      	cmp	r3, #64	; 0x40
 8006050:	d108      	bne.n	8006064 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006062:	e007      	b.n	8006074 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	60da      	str	r2, [r3, #12]
}
 8006074:	bf00      	nop
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	b2db      	uxtb	r3, r3
 800608e:	3b10      	subs	r3, #16
 8006090:	4a14      	ldr	r2, [pc, #80]	; (80060e4 <DMA_CalcBaseAndBitshift+0x64>)
 8006092:	fba2 2303 	umull	r2, r3, r2, r3
 8006096:	091b      	lsrs	r3, r3, #4
 8006098:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800609a:	4a13      	ldr	r2, [pc, #76]	; (80060e8 <DMA_CalcBaseAndBitshift+0x68>)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	4413      	add	r3, r2
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	461a      	mov	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2b03      	cmp	r3, #3
 80060ac:	d909      	bls.n	80060c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80060b6:	f023 0303 	bic.w	r3, r3, #3
 80060ba:	1d1a      	adds	r2, r3, #4
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	659a      	str	r2, [r3, #88]	; 0x58
 80060c0:	e007      	b.n	80060d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80060ca:	f023 0303 	bic.w	r3, r3, #3
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	aaaaaaab 	.word	0xaaaaaaab
 80060e8:	0800a3a4 	.word	0x0800a3a4

080060ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060f4:	2300      	movs	r3, #0
 80060f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d11f      	bne.n	8006146 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	2b03      	cmp	r3, #3
 800610a:	d856      	bhi.n	80061ba <DMA_CheckFifoParam+0xce>
 800610c:	a201      	add	r2, pc, #4	; (adr r2, 8006114 <DMA_CheckFifoParam+0x28>)
 800610e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006112:	bf00      	nop
 8006114:	08006125 	.word	0x08006125
 8006118:	08006137 	.word	0x08006137
 800611c:	08006125 	.word	0x08006125
 8006120:	080061bb 	.word	0x080061bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006128:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d046      	beq.n	80061be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006134:	e043      	b.n	80061be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800613e:	d140      	bne.n	80061c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006144:	e03d      	b.n	80061c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800614e:	d121      	bne.n	8006194 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	2b03      	cmp	r3, #3
 8006154:	d837      	bhi.n	80061c6 <DMA_CheckFifoParam+0xda>
 8006156:	a201      	add	r2, pc, #4	; (adr r2, 800615c <DMA_CheckFifoParam+0x70>)
 8006158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615c:	0800616d 	.word	0x0800616d
 8006160:	08006173 	.word	0x08006173
 8006164:	0800616d 	.word	0x0800616d
 8006168:	08006185 	.word	0x08006185
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	73fb      	strb	r3, [r7, #15]
      break;
 8006170:	e030      	b.n	80061d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006176:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d025      	beq.n	80061ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006182:	e022      	b.n	80061ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006188:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800618c:	d11f      	bne.n	80061ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006192:	e01c      	b.n	80061ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2b02      	cmp	r3, #2
 8006198:	d903      	bls.n	80061a2 <DMA_CheckFifoParam+0xb6>
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	2b03      	cmp	r3, #3
 800619e:	d003      	beq.n	80061a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80061a0:	e018      	b.n	80061d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	73fb      	strb	r3, [r7, #15]
      break;
 80061a6:	e015      	b.n	80061d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00e      	beq.n	80061d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	73fb      	strb	r3, [r7, #15]
      break;
 80061b8:	e00b      	b.n	80061d2 <DMA_CheckFifoParam+0xe6>
      break;
 80061ba:	bf00      	nop
 80061bc:	e00a      	b.n	80061d4 <DMA_CheckFifoParam+0xe8>
      break;
 80061be:	bf00      	nop
 80061c0:	e008      	b.n	80061d4 <DMA_CheckFifoParam+0xe8>
      break;
 80061c2:	bf00      	nop
 80061c4:	e006      	b.n	80061d4 <DMA_CheckFifoParam+0xe8>
      break;
 80061c6:	bf00      	nop
 80061c8:	e004      	b.n	80061d4 <DMA_CheckFifoParam+0xe8>
      break;
 80061ca:	bf00      	nop
 80061cc:	e002      	b.n	80061d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80061ce:	bf00      	nop
 80061d0:	e000      	b.n	80061d4 <DMA_CheckFifoParam+0xe8>
      break;
 80061d2:	bf00      	nop
    }
  } 
  
  return status; 
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop

080061e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b089      	sub	sp, #36	; 0x24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80061ee:	2300      	movs	r3, #0
 80061f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80061f2:	2300      	movs	r3, #0
 80061f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80061f6:	2300      	movs	r3, #0
 80061f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80061fa:	2300      	movs	r3, #0
 80061fc:	61fb      	str	r3, [r7, #28]
 80061fe:	e159      	b.n	80064b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006200:	2201      	movs	r2, #1
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	fa02 f303 	lsl.w	r3, r2, r3
 8006208:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	4013      	ands	r3, r2
 8006212:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	429a      	cmp	r2, r3
 800621a:	f040 8148 	bne.w	80064ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f003 0303 	and.w	r3, r3, #3
 8006226:	2b01      	cmp	r3, #1
 8006228:	d005      	beq.n	8006236 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006232:	2b02      	cmp	r3, #2
 8006234:	d130      	bne.n	8006298 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	005b      	lsls	r3, r3, #1
 8006240:	2203      	movs	r2, #3
 8006242:	fa02 f303 	lsl.w	r3, r2, r3
 8006246:	43db      	mvns	r3, r3
 8006248:	69ba      	ldr	r2, [r7, #24]
 800624a:	4013      	ands	r3, r2
 800624c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	68da      	ldr	r2, [r3, #12]
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	fa02 f303 	lsl.w	r3, r2, r3
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	4313      	orrs	r3, r2
 800625e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	69ba      	ldr	r2, [r7, #24]
 8006264:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800626c:	2201      	movs	r2, #1
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	fa02 f303 	lsl.w	r3, r2, r3
 8006274:	43db      	mvns	r3, r3
 8006276:	69ba      	ldr	r2, [r7, #24]
 8006278:	4013      	ands	r3, r2
 800627a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	091b      	lsrs	r3, r3, #4
 8006282:	f003 0201 	and.w	r2, r3, #1
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	fa02 f303 	lsl.w	r3, r2, r3
 800628c:	69ba      	ldr	r2, [r7, #24]
 800628e:	4313      	orrs	r3, r2
 8006290:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f003 0303 	and.w	r3, r3, #3
 80062a0:	2b03      	cmp	r3, #3
 80062a2:	d017      	beq.n	80062d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	005b      	lsls	r3, r3, #1
 80062ae:	2203      	movs	r2, #3
 80062b0:	fa02 f303 	lsl.w	r3, r2, r3
 80062b4:	43db      	mvns	r3, r3
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	4013      	ands	r3, r2
 80062ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	689a      	ldr	r2, [r3, #8]
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	005b      	lsls	r3, r3, #1
 80062c4:	fa02 f303 	lsl.w	r3, r2, r3
 80062c8:	69ba      	ldr	r2, [r7, #24]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	69ba      	ldr	r2, [r7, #24]
 80062d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f003 0303 	and.w	r3, r3, #3
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d123      	bne.n	8006328 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	08da      	lsrs	r2, r3, #3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	3208      	adds	r2, #8
 80062e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	f003 0307 	and.w	r3, r3, #7
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	220f      	movs	r2, #15
 80062f8:	fa02 f303 	lsl.w	r3, r2, r3
 80062fc:	43db      	mvns	r3, r3
 80062fe:	69ba      	ldr	r2, [r7, #24]
 8006300:	4013      	ands	r3, r2
 8006302:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	691a      	ldr	r2, [r3, #16]
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	f003 0307 	and.w	r3, r3, #7
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	fa02 f303 	lsl.w	r3, r2, r3
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	4313      	orrs	r3, r2
 8006318:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	08da      	lsrs	r2, r3, #3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	3208      	adds	r2, #8
 8006322:	69b9      	ldr	r1, [r7, #24]
 8006324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	005b      	lsls	r3, r3, #1
 8006332:	2203      	movs	r2, #3
 8006334:	fa02 f303 	lsl.w	r3, r2, r3
 8006338:	43db      	mvns	r3, r3
 800633a:	69ba      	ldr	r2, [r7, #24]
 800633c:	4013      	ands	r3, r2
 800633e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	f003 0203 	and.w	r2, r3, #3
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	005b      	lsls	r3, r3, #1
 800634c:	fa02 f303 	lsl.w	r3, r2, r3
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	4313      	orrs	r3, r2
 8006354:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	69ba      	ldr	r2, [r7, #24]
 800635a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006364:	2b00      	cmp	r3, #0
 8006366:	f000 80a2 	beq.w	80064ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800636a:	2300      	movs	r3, #0
 800636c:	60fb      	str	r3, [r7, #12]
 800636e:	4b57      	ldr	r3, [pc, #348]	; (80064cc <HAL_GPIO_Init+0x2e8>)
 8006370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006372:	4a56      	ldr	r2, [pc, #344]	; (80064cc <HAL_GPIO_Init+0x2e8>)
 8006374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006378:	6453      	str	r3, [r2, #68]	; 0x44
 800637a:	4b54      	ldr	r3, [pc, #336]	; (80064cc <HAL_GPIO_Init+0x2e8>)
 800637c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800637e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006382:	60fb      	str	r3, [r7, #12]
 8006384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006386:	4a52      	ldr	r2, [pc, #328]	; (80064d0 <HAL_GPIO_Init+0x2ec>)
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	089b      	lsrs	r3, r3, #2
 800638c:	3302      	adds	r3, #2
 800638e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	f003 0303 	and.w	r3, r3, #3
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	220f      	movs	r2, #15
 800639e:	fa02 f303 	lsl.w	r3, r2, r3
 80063a2:	43db      	mvns	r3, r3
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	4013      	ands	r3, r2
 80063a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a49      	ldr	r2, [pc, #292]	; (80064d4 <HAL_GPIO_Init+0x2f0>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d019      	beq.n	80063e6 <HAL_GPIO_Init+0x202>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a48      	ldr	r2, [pc, #288]	; (80064d8 <HAL_GPIO_Init+0x2f4>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d013      	beq.n	80063e2 <HAL_GPIO_Init+0x1fe>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a47      	ldr	r2, [pc, #284]	; (80064dc <HAL_GPIO_Init+0x2f8>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d00d      	beq.n	80063de <HAL_GPIO_Init+0x1fa>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a46      	ldr	r2, [pc, #280]	; (80064e0 <HAL_GPIO_Init+0x2fc>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d007      	beq.n	80063da <HAL_GPIO_Init+0x1f6>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a45      	ldr	r2, [pc, #276]	; (80064e4 <HAL_GPIO_Init+0x300>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d101      	bne.n	80063d6 <HAL_GPIO_Init+0x1f2>
 80063d2:	2304      	movs	r3, #4
 80063d4:	e008      	b.n	80063e8 <HAL_GPIO_Init+0x204>
 80063d6:	2307      	movs	r3, #7
 80063d8:	e006      	b.n	80063e8 <HAL_GPIO_Init+0x204>
 80063da:	2303      	movs	r3, #3
 80063dc:	e004      	b.n	80063e8 <HAL_GPIO_Init+0x204>
 80063de:	2302      	movs	r3, #2
 80063e0:	e002      	b.n	80063e8 <HAL_GPIO_Init+0x204>
 80063e2:	2301      	movs	r3, #1
 80063e4:	e000      	b.n	80063e8 <HAL_GPIO_Init+0x204>
 80063e6:	2300      	movs	r3, #0
 80063e8:	69fa      	ldr	r2, [r7, #28]
 80063ea:	f002 0203 	and.w	r2, r2, #3
 80063ee:	0092      	lsls	r2, r2, #2
 80063f0:	4093      	lsls	r3, r2
 80063f2:	69ba      	ldr	r2, [r7, #24]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80063f8:	4935      	ldr	r1, [pc, #212]	; (80064d0 <HAL_GPIO_Init+0x2ec>)
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	089b      	lsrs	r3, r3, #2
 80063fe:	3302      	adds	r3, #2
 8006400:	69ba      	ldr	r2, [r7, #24]
 8006402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006406:	4b38      	ldr	r3, [pc, #224]	; (80064e8 <HAL_GPIO_Init+0x304>)
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	43db      	mvns	r3, r3
 8006410:	69ba      	ldr	r2, [r7, #24]
 8006412:	4013      	ands	r3, r2
 8006414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d003      	beq.n	800642a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006422:	69ba      	ldr	r2, [r7, #24]
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	4313      	orrs	r3, r2
 8006428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800642a:	4a2f      	ldr	r2, [pc, #188]	; (80064e8 <HAL_GPIO_Init+0x304>)
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006430:	4b2d      	ldr	r3, [pc, #180]	; (80064e8 <HAL_GPIO_Init+0x304>)
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	43db      	mvns	r3, r3
 800643a:	69ba      	ldr	r2, [r7, #24]
 800643c:	4013      	ands	r3, r2
 800643e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d003      	beq.n	8006454 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	4313      	orrs	r3, r2
 8006452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006454:	4a24      	ldr	r2, [pc, #144]	; (80064e8 <HAL_GPIO_Init+0x304>)
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800645a:	4b23      	ldr	r3, [pc, #140]	; (80064e8 <HAL_GPIO_Init+0x304>)
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	43db      	mvns	r3, r3
 8006464:	69ba      	ldr	r2, [r7, #24]
 8006466:	4013      	ands	r3, r2
 8006468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d003      	beq.n	800647e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006476:	69ba      	ldr	r2, [r7, #24]
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	4313      	orrs	r3, r2
 800647c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800647e:	4a1a      	ldr	r2, [pc, #104]	; (80064e8 <HAL_GPIO_Init+0x304>)
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006484:	4b18      	ldr	r3, [pc, #96]	; (80064e8 <HAL_GPIO_Init+0x304>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	43db      	mvns	r3, r3
 800648e:	69ba      	ldr	r2, [r7, #24]
 8006490:	4013      	ands	r3, r2
 8006492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d003      	beq.n	80064a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80064a0:	69ba      	ldr	r2, [r7, #24]
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80064a8:	4a0f      	ldr	r2, [pc, #60]	; (80064e8 <HAL_GPIO_Init+0x304>)
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	3301      	adds	r3, #1
 80064b2:	61fb      	str	r3, [r7, #28]
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	2b0f      	cmp	r3, #15
 80064b8:	f67f aea2 	bls.w	8006200 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80064bc:	bf00      	nop
 80064be:	bf00      	nop
 80064c0:	3724      	adds	r7, #36	; 0x24
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop
 80064cc:	40023800 	.word	0x40023800
 80064d0:	40013800 	.word	0x40013800
 80064d4:	40020000 	.word	0x40020000
 80064d8:	40020400 	.word	0x40020400
 80064dc:	40020800 	.word	0x40020800
 80064e0:	40020c00 	.word	0x40020c00
 80064e4:	40021000 	.word	0x40021000
 80064e8:	40013c00 	.word	0x40013c00

080064ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	460b      	mov	r3, r1
 80064f6:	807b      	strh	r3, [r7, #2]
 80064f8:	4613      	mov	r3, r2
 80064fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80064fc:	787b      	ldrb	r3, [r7, #1]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d003      	beq.n	800650a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006502:	887a      	ldrh	r2, [r7, #2]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006508:	e003      	b.n	8006512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800650a:	887b      	ldrh	r3, [r7, #2]
 800650c:	041a      	lsls	r2, r3, #16
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	619a      	str	r2, [r3, #24]
}
 8006512:	bf00      	nop
 8006514:	370c      	adds	r7, #12
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
	...

08006520 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d101      	bne.n	8006532 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e12b      	b.n	800678a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d106      	bne.n	800654c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7fd fe16 	bl	8004178 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2224      	movs	r2, #36	; 0x24
 8006550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f022 0201 	bic.w	r2, r2, #1
 8006562:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006572:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006582:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006584:	f001 fbbc 	bl	8007d00 <HAL_RCC_GetPCLK1Freq>
 8006588:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	4a81      	ldr	r2, [pc, #516]	; (8006794 <HAL_I2C_Init+0x274>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d807      	bhi.n	80065a4 <HAL_I2C_Init+0x84>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	4a80      	ldr	r2, [pc, #512]	; (8006798 <HAL_I2C_Init+0x278>)
 8006598:	4293      	cmp	r3, r2
 800659a:	bf94      	ite	ls
 800659c:	2301      	movls	r3, #1
 800659e:	2300      	movhi	r3, #0
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	e006      	b.n	80065b2 <HAL_I2C_Init+0x92>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	4a7d      	ldr	r2, [pc, #500]	; (800679c <HAL_I2C_Init+0x27c>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	bf94      	ite	ls
 80065ac:	2301      	movls	r3, #1
 80065ae:	2300      	movhi	r3, #0
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d001      	beq.n	80065ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e0e7      	b.n	800678a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	4a78      	ldr	r2, [pc, #480]	; (80067a0 <HAL_I2C_Init+0x280>)
 80065be:	fba2 2303 	umull	r2, r3, r2, r3
 80065c2:	0c9b      	lsrs	r3, r3, #18
 80065c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	6a1b      	ldr	r3, [r3, #32]
 80065e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	4a6a      	ldr	r2, [pc, #424]	; (8006794 <HAL_I2C_Init+0x274>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d802      	bhi.n	80065f4 <HAL_I2C_Init+0xd4>
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	3301      	adds	r3, #1
 80065f2:	e009      	b.n	8006608 <HAL_I2C_Init+0xe8>
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80065fa:	fb02 f303 	mul.w	r3, r2, r3
 80065fe:	4a69      	ldr	r2, [pc, #420]	; (80067a4 <HAL_I2C_Init+0x284>)
 8006600:	fba2 2303 	umull	r2, r3, r2, r3
 8006604:	099b      	lsrs	r3, r3, #6
 8006606:	3301      	adds	r3, #1
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	6812      	ldr	r2, [r2, #0]
 800660c:	430b      	orrs	r3, r1
 800660e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	69db      	ldr	r3, [r3, #28]
 8006616:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800661a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	495c      	ldr	r1, [pc, #368]	; (8006794 <HAL_I2C_Init+0x274>)
 8006624:	428b      	cmp	r3, r1
 8006626:	d819      	bhi.n	800665c <HAL_I2C_Init+0x13c>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	1e59      	subs	r1, r3, #1
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	005b      	lsls	r3, r3, #1
 8006632:	fbb1 f3f3 	udiv	r3, r1, r3
 8006636:	1c59      	adds	r1, r3, #1
 8006638:	f640 73fc 	movw	r3, #4092	; 0xffc
 800663c:	400b      	ands	r3, r1
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00a      	beq.n	8006658 <HAL_I2C_Init+0x138>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	1e59      	subs	r1, r3, #1
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	005b      	lsls	r3, r3, #1
 800664c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006650:	3301      	adds	r3, #1
 8006652:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006656:	e051      	b.n	80066fc <HAL_I2C_Init+0x1dc>
 8006658:	2304      	movs	r3, #4
 800665a:	e04f      	b.n	80066fc <HAL_I2C_Init+0x1dc>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d111      	bne.n	8006688 <HAL_I2C_Init+0x168>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	1e58      	subs	r0, r3, #1
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6859      	ldr	r1, [r3, #4]
 800666c:	460b      	mov	r3, r1
 800666e:	005b      	lsls	r3, r3, #1
 8006670:	440b      	add	r3, r1
 8006672:	fbb0 f3f3 	udiv	r3, r0, r3
 8006676:	3301      	adds	r3, #1
 8006678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800667c:	2b00      	cmp	r3, #0
 800667e:	bf0c      	ite	eq
 8006680:	2301      	moveq	r3, #1
 8006682:	2300      	movne	r3, #0
 8006684:	b2db      	uxtb	r3, r3
 8006686:	e012      	b.n	80066ae <HAL_I2C_Init+0x18e>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	1e58      	subs	r0, r3, #1
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6859      	ldr	r1, [r3, #4]
 8006690:	460b      	mov	r3, r1
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	440b      	add	r3, r1
 8006696:	0099      	lsls	r1, r3, #2
 8006698:	440b      	add	r3, r1
 800669a:	fbb0 f3f3 	udiv	r3, r0, r3
 800669e:	3301      	adds	r3, #1
 80066a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	bf0c      	ite	eq
 80066a8:	2301      	moveq	r3, #1
 80066aa:	2300      	movne	r3, #0
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <HAL_I2C_Init+0x196>
 80066b2:	2301      	movs	r3, #1
 80066b4:	e022      	b.n	80066fc <HAL_I2C_Init+0x1dc>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10e      	bne.n	80066dc <HAL_I2C_Init+0x1bc>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	1e58      	subs	r0, r3, #1
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6859      	ldr	r1, [r3, #4]
 80066c6:	460b      	mov	r3, r1
 80066c8:	005b      	lsls	r3, r3, #1
 80066ca:	440b      	add	r3, r1
 80066cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80066d0:	3301      	adds	r3, #1
 80066d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066da:	e00f      	b.n	80066fc <HAL_I2C_Init+0x1dc>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	1e58      	subs	r0, r3, #1
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6859      	ldr	r1, [r3, #4]
 80066e4:	460b      	mov	r3, r1
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	440b      	add	r3, r1
 80066ea:	0099      	lsls	r1, r3, #2
 80066ec:	440b      	add	r3, r1
 80066ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80066f2:	3301      	adds	r3, #1
 80066f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066fc:	6879      	ldr	r1, [r7, #4]
 80066fe:	6809      	ldr	r1, [r1, #0]
 8006700:	4313      	orrs	r3, r2
 8006702:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	69da      	ldr	r2, [r3, #28]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	431a      	orrs	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	430a      	orrs	r2, r1
 800671e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800672a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	6911      	ldr	r1, [r2, #16]
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	68d2      	ldr	r2, [r2, #12]
 8006736:	4311      	orrs	r1, r2
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	6812      	ldr	r2, [r2, #0]
 800673c:	430b      	orrs	r3, r1
 800673e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	695a      	ldr	r2, [r3, #20]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	431a      	orrs	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	430a      	orrs	r2, r1
 800675a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f042 0201 	orr.w	r2, r2, #1
 800676a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2220      	movs	r2, #32
 8006776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	000186a0 	.word	0x000186a0
 8006798:	001e847f 	.word	0x001e847f
 800679c:	003d08ff 	.word	0x003d08ff
 80067a0:	431bde83 	.word	0x431bde83
 80067a4:	10624dd3 	.word	0x10624dd3

080067a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b088      	sub	sp, #32
 80067ac:	af02      	add	r7, sp, #8
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	4608      	mov	r0, r1
 80067b2:	4611      	mov	r1, r2
 80067b4:	461a      	mov	r2, r3
 80067b6:	4603      	mov	r3, r0
 80067b8:	817b      	strh	r3, [r7, #10]
 80067ba:	460b      	mov	r3, r1
 80067bc:	813b      	strh	r3, [r7, #8]
 80067be:	4613      	mov	r3, r2
 80067c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80067c2:	f7fd ff73 	bl	80046ac <HAL_GetTick>
 80067c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b20      	cmp	r3, #32
 80067d2:	f040 80d9 	bne.w	8006988 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	9300      	str	r3, [sp, #0]
 80067da:	2319      	movs	r3, #25
 80067dc:	2201      	movs	r2, #1
 80067de:	496d      	ldr	r1, [pc, #436]	; (8006994 <HAL_I2C_Mem_Write+0x1ec>)
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f000 fc7f 	bl	80070e4 <I2C_WaitOnFlagUntilTimeout>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d001      	beq.n	80067f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80067ec:	2302      	movs	r3, #2
 80067ee:	e0cc      	b.n	800698a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d101      	bne.n	80067fe <HAL_I2C_Mem_Write+0x56>
 80067fa:	2302      	movs	r3, #2
 80067fc:	e0c5      	b.n	800698a <HAL_I2C_Mem_Write+0x1e2>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	2b01      	cmp	r3, #1
 8006812:	d007      	beq.n	8006824 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f042 0201 	orr.w	r2, r2, #1
 8006822:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006832:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2221      	movs	r2, #33	; 0x21
 8006838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2240      	movs	r2, #64	; 0x40
 8006840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6a3a      	ldr	r2, [r7, #32]
 800684e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006854:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800685a:	b29a      	uxth	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	4a4d      	ldr	r2, [pc, #308]	; (8006998 <HAL_I2C_Mem_Write+0x1f0>)
 8006864:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006866:	88f8      	ldrh	r0, [r7, #6]
 8006868:	893a      	ldrh	r2, [r7, #8]
 800686a:	8979      	ldrh	r1, [r7, #10]
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	9301      	str	r3, [sp, #4]
 8006870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006872:	9300      	str	r3, [sp, #0]
 8006874:	4603      	mov	r3, r0
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f000 fab6 	bl	8006de8 <I2C_RequestMemoryWrite>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d052      	beq.n	8006928 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e081      	b.n	800698a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f000 fd00 	bl	8007290 <I2C_WaitOnTXEFlagUntilTimeout>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00d      	beq.n	80068b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689a:	2b04      	cmp	r3, #4
 800689c:	d107      	bne.n	80068ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e06b      	b.n	800698a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b6:	781a      	ldrb	r2, [r3, #0]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c2:	1c5a      	adds	r2, r3, #1
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068cc:	3b01      	subs	r3, #1
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d8:	b29b      	uxth	r3, r3
 80068da:	3b01      	subs	r3, #1
 80068dc:	b29a      	uxth	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	f003 0304 	and.w	r3, r3, #4
 80068ec:	2b04      	cmp	r3, #4
 80068ee:	d11b      	bne.n	8006928 <HAL_I2C_Mem_Write+0x180>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d017      	beq.n	8006928 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fc:	781a      	ldrb	r2, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006908:	1c5a      	adds	r2, r3, #1
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006912:	3b01      	subs	r3, #1
 8006914:	b29a      	uxth	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800691e:	b29b      	uxth	r3, r3
 8006920:	3b01      	subs	r3, #1
 8006922:	b29a      	uxth	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1aa      	bne.n	8006886 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f000 fcec 	bl	8007312 <I2C_WaitOnBTFFlagUntilTimeout>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00d      	beq.n	800695c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006944:	2b04      	cmp	r3, #4
 8006946:	d107      	bne.n	8006958 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006956:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e016      	b.n	800698a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800696a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2220      	movs	r2, #32
 8006970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006984:	2300      	movs	r3, #0
 8006986:	e000      	b.n	800698a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006988:	2302      	movs	r3, #2
  }
}
 800698a:	4618      	mov	r0, r3
 800698c:	3718      	adds	r7, #24
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	00100002 	.word	0x00100002
 8006998:	ffff0000 	.word	0xffff0000

0800699c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b08c      	sub	sp, #48	; 0x30
 80069a0:	af02      	add	r7, sp, #8
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	4608      	mov	r0, r1
 80069a6:	4611      	mov	r1, r2
 80069a8:	461a      	mov	r2, r3
 80069aa:	4603      	mov	r3, r0
 80069ac:	817b      	strh	r3, [r7, #10]
 80069ae:	460b      	mov	r3, r1
 80069b0:	813b      	strh	r3, [r7, #8]
 80069b2:	4613      	mov	r3, r2
 80069b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80069b6:	f7fd fe79 	bl	80046ac <HAL_GetTick>
 80069ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b20      	cmp	r3, #32
 80069c6:	f040 8208 	bne.w	8006dda <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80069ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	2319      	movs	r3, #25
 80069d0:	2201      	movs	r2, #1
 80069d2:	497b      	ldr	r1, [pc, #492]	; (8006bc0 <HAL_I2C_Mem_Read+0x224>)
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f000 fb85 	bl	80070e4 <I2C_WaitOnFlagUntilTimeout>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d001      	beq.n	80069e4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80069e0:	2302      	movs	r3, #2
 80069e2:	e1fb      	b.n	8006ddc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d101      	bne.n	80069f2 <HAL_I2C_Mem_Read+0x56>
 80069ee:	2302      	movs	r3, #2
 80069f0:	e1f4      	b.n	8006ddc <HAL_I2C_Mem_Read+0x440>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0301 	and.w	r3, r3, #1
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d007      	beq.n	8006a18 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f042 0201 	orr.w	r2, r2, #1
 8006a16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2222      	movs	r2, #34	; 0x22
 8006a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2240      	movs	r2, #64	; 0x40
 8006a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006a48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	4a5b      	ldr	r2, [pc, #364]	; (8006bc4 <HAL_I2C_Mem_Read+0x228>)
 8006a58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a5a:	88f8      	ldrh	r0, [r7, #6]
 8006a5c:	893a      	ldrh	r2, [r7, #8]
 8006a5e:	8979      	ldrh	r1, [r7, #10]
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	9301      	str	r3, [sp, #4]
 8006a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	4603      	mov	r3, r0
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f000 fa52 	bl	8006f14 <I2C_RequestMemoryRead>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d001      	beq.n	8006a7a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e1b0      	b.n	8006ddc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d113      	bne.n	8006aaa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a82:	2300      	movs	r3, #0
 8006a84:	623b      	str	r3, [r7, #32]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	623b      	str	r3, [r7, #32]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	623b      	str	r3, [r7, #32]
 8006a96:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aa6:	601a      	str	r2, [r3, #0]
 8006aa8:	e184      	b.n	8006db4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d11b      	bne.n	8006aea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ac0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	61fb      	str	r3, [r7, #28]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	61fb      	str	r3, [r7, #28]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	61fb      	str	r3, [r7, #28]
 8006ad6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ae6:	601a      	str	r2, [r3, #0]
 8006ae8:	e164      	b.n	8006db4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d11b      	bne.n	8006b2a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b00:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b12:	2300      	movs	r3, #0
 8006b14:	61bb      	str	r3, [r7, #24]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	61bb      	str	r3, [r7, #24]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	61bb      	str	r3, [r7, #24]
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	e144      	b.n	8006db4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	617b      	str	r3, [r7, #20]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	695b      	ldr	r3, [r3, #20]
 8006b34:	617b      	str	r3, [r7, #20]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	617b      	str	r3, [r7, #20]
 8006b3e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006b40:	e138      	b.n	8006db4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b46:	2b03      	cmp	r3, #3
 8006b48:	f200 80f1 	bhi.w	8006d2e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d123      	bne.n	8006b9c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 fc1b 	bl	8007394 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d001      	beq.n	8006b68 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e139      	b.n	8006ddc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	691a      	ldr	r2, [r3, #16]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b72:	b2d2      	uxtb	r2, r2
 8006b74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7a:	1c5a      	adds	r2, r3, #1
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b84:	3b01      	subs	r3, #1
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	3b01      	subs	r3, #1
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b9a:	e10b      	b.n	8006db4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d14e      	bne.n	8006c42 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006baa:	2200      	movs	r2, #0
 8006bac:	4906      	ldr	r1, [pc, #24]	; (8006bc8 <HAL_I2C_Mem_Read+0x22c>)
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	f000 fa98 	bl	80070e4 <I2C_WaitOnFlagUntilTimeout>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d008      	beq.n	8006bcc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e10e      	b.n	8006ddc <HAL_I2C_Mem_Read+0x440>
 8006bbe:	bf00      	nop
 8006bc0:	00100002 	.word	0x00100002
 8006bc4:	ffff0000 	.word	0xffff0000
 8006bc8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	691a      	ldr	r2, [r3, #16]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be6:	b2d2      	uxtb	r2, r2
 8006be8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bee:	1c5a      	adds	r2, r3, #1
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	3b01      	subs	r3, #1
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	691a      	ldr	r2, [r3, #16]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c18:	b2d2      	uxtb	r2, r2
 8006c1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c20:	1c5a      	adds	r2, r3, #1
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c40:	e0b8      	b.n	8006db4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c44:	9300      	str	r3, [sp, #0]
 8006c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c48:	2200      	movs	r2, #0
 8006c4a:	4966      	ldr	r1, [pc, #408]	; (8006de4 <HAL_I2C_Mem_Read+0x448>)
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 fa49 	bl	80070e4 <I2C_WaitOnFlagUntilTimeout>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d001      	beq.n	8006c5c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e0bf      	b.n	8006ddc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	691a      	ldr	r2, [r3, #16]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c76:	b2d2      	uxtb	r2, r2
 8006c78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7e:	1c5a      	adds	r2, r3, #1
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	3b01      	subs	r3, #1
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	494f      	ldr	r1, [pc, #316]	; (8006de4 <HAL_I2C_Mem_Read+0x448>)
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f000 fa1b 	bl	80070e4 <I2C_WaitOnFlagUntilTimeout>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d001      	beq.n	8006cb8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e091      	b.n	8006ddc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	691a      	ldr	r2, [r3, #16]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd2:	b2d2      	uxtb	r2, r2
 8006cd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cda:	1c5a      	adds	r2, r3, #1
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	691a      	ldr	r2, [r3, #16]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d04:	b2d2      	uxtb	r2, r2
 8006d06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0c:	1c5a      	adds	r2, r3, #1
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d16:	3b01      	subs	r3, #1
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	3b01      	subs	r3, #1
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d2c:	e042      	b.n	8006db4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f000 fb2e 	bl	8007394 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d001      	beq.n	8006d42 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e04c      	b.n	8006ddc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	691a      	ldr	r2, [r3, #16]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	b2d2      	uxtb	r2, r2
 8006d4e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d54:	1c5a      	adds	r2, r3, #1
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	f003 0304 	and.w	r3, r3, #4
 8006d7e:	2b04      	cmp	r3, #4
 8006d80:	d118      	bne.n	8006db4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	691a      	ldr	r2, [r3, #16]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8c:	b2d2      	uxtb	r2, r2
 8006d8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d94:	1c5a      	adds	r2, r3, #1
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	3b01      	subs	r3, #1
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f47f aec2 	bne.w	8006b42 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2220      	movs	r2, #32
 8006dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	e000      	b.n	8006ddc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006dda:	2302      	movs	r3, #2
  }
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3728      	adds	r7, #40	; 0x28
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	00010004 	.word	0x00010004

08006de8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b088      	sub	sp, #32
 8006dec:	af02      	add	r7, sp, #8
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	4608      	mov	r0, r1
 8006df2:	4611      	mov	r1, r2
 8006df4:	461a      	mov	r2, r3
 8006df6:	4603      	mov	r3, r0
 8006df8:	817b      	strh	r3, [r7, #10]
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	813b      	strh	r3, [r7, #8]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	6a3b      	ldr	r3, [r7, #32]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f000 f960 	bl	80070e4 <I2C_WaitOnFlagUntilTimeout>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00d      	beq.n	8006e46 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e38:	d103      	bne.n	8006e42 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e05f      	b.n	8006f06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006e46:	897b      	ldrh	r3, [r7, #10]
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006e54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e58:	6a3a      	ldr	r2, [r7, #32]
 8006e5a:	492d      	ldr	r1, [pc, #180]	; (8006f10 <I2C_RequestMemoryWrite+0x128>)
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f000 f998 	bl	8007192 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d001      	beq.n	8006e6c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e04c      	b.n	8006f06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	617b      	str	r3, [r7, #20]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	695b      	ldr	r3, [r3, #20]
 8006e76:	617b      	str	r3, [r7, #20]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	617b      	str	r3, [r7, #20]
 8006e80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e84:	6a39      	ldr	r1, [r7, #32]
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f000 fa02 	bl	8007290 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00d      	beq.n	8006eae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e96:	2b04      	cmp	r3, #4
 8006e98:	d107      	bne.n	8006eaa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ea8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e02b      	b.n	8006f06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006eae:	88fb      	ldrh	r3, [r7, #6]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d105      	bne.n	8006ec0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006eb4:	893b      	ldrh	r3, [r7, #8]
 8006eb6:	b2da      	uxtb	r2, r3
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	611a      	str	r2, [r3, #16]
 8006ebe:	e021      	b.n	8006f04 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006ec0:	893b      	ldrh	r3, [r7, #8]
 8006ec2:	0a1b      	lsrs	r3, r3, #8
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	b2da      	uxtb	r2, r3
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ed0:	6a39      	ldr	r1, [r7, #32]
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f000 f9dc 	bl	8007290 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00d      	beq.n	8006efa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee2:	2b04      	cmp	r3, #4
 8006ee4:	d107      	bne.n	8006ef6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ef4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e005      	b.n	8006f06 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006efa:	893b      	ldrh	r3, [r7, #8]
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3718      	adds	r7, #24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	00010002 	.word	0x00010002

08006f14 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b088      	sub	sp, #32
 8006f18:	af02      	add	r7, sp, #8
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	4608      	mov	r0, r1
 8006f1e:	4611      	mov	r1, r2
 8006f20:	461a      	mov	r2, r3
 8006f22:	4603      	mov	r3, r0
 8006f24:	817b      	strh	r3, [r7, #10]
 8006f26:	460b      	mov	r3, r1
 8006f28:	813b      	strh	r3, [r7, #8]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f3c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	6a3b      	ldr	r3, [r7, #32]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f000 f8c2 	bl	80070e4 <I2C_WaitOnFlagUntilTimeout>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00d      	beq.n	8006f82 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f74:	d103      	bne.n	8006f7e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f7c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e0aa      	b.n	80070d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f82:	897b      	ldrh	r3, [r7, #10]
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	461a      	mov	r2, r3
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006f90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f94:	6a3a      	ldr	r2, [r7, #32]
 8006f96:	4952      	ldr	r1, [pc, #328]	; (80070e0 <I2C_RequestMemoryRead+0x1cc>)
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	f000 f8fa 	bl	8007192 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d001      	beq.n	8006fa8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e097      	b.n	80070d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fa8:	2300      	movs	r3, #0
 8006faa:	617b      	str	r3, [r7, #20]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	617b      	str	r3, [r7, #20]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	617b      	str	r3, [r7, #20]
 8006fbc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fc0:	6a39      	ldr	r1, [r7, #32]
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f000 f964 	bl	8007290 <I2C_WaitOnTXEFlagUntilTimeout>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00d      	beq.n	8006fea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd2:	2b04      	cmp	r3, #4
 8006fd4:	d107      	bne.n	8006fe6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fe4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e076      	b.n	80070d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006fea:	88fb      	ldrh	r3, [r7, #6]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d105      	bne.n	8006ffc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ff0:	893b      	ldrh	r3, [r7, #8]
 8006ff2:	b2da      	uxtb	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	611a      	str	r2, [r3, #16]
 8006ffa:	e021      	b.n	8007040 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006ffc:	893b      	ldrh	r3, [r7, #8]
 8006ffe:	0a1b      	lsrs	r3, r3, #8
 8007000:	b29b      	uxth	r3, r3
 8007002:	b2da      	uxtb	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800700a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800700c:	6a39      	ldr	r1, [r7, #32]
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f000 f93e 	bl	8007290 <I2C_WaitOnTXEFlagUntilTimeout>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00d      	beq.n	8007036 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701e:	2b04      	cmp	r3, #4
 8007020:	d107      	bne.n	8007032 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007030:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e050      	b.n	80070d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007036:	893b      	ldrh	r3, [r7, #8]
 8007038:	b2da      	uxtb	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007042:	6a39      	ldr	r1, [r7, #32]
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f000 f923 	bl	8007290 <I2C_WaitOnTXEFlagUntilTimeout>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00d      	beq.n	800706c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007054:	2b04      	cmp	r3, #4
 8007056:	d107      	bne.n	8007068 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007066:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e035      	b.n	80070d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800707a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800707c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	6a3b      	ldr	r3, [r7, #32]
 8007082:	2200      	movs	r2, #0
 8007084:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f000 f82b 	bl	80070e4 <I2C_WaitOnFlagUntilTimeout>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00d      	beq.n	80070b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800709e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070a2:	d103      	bne.n	80070ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80070ac:	2303      	movs	r3, #3
 80070ae:	e013      	b.n	80070d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80070b0:	897b      	ldrh	r3, [r7, #10]
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	f043 0301 	orr.w	r3, r3, #1
 80070b8:	b2da      	uxtb	r2, r3
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c2:	6a3a      	ldr	r2, [r7, #32]
 80070c4:	4906      	ldr	r1, [pc, #24]	; (80070e0 <I2C_RequestMemoryRead+0x1cc>)
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f000 f863 	bl	8007192 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d001      	beq.n	80070d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e000      	b.n	80070d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3718      	adds	r7, #24
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	00010002 	.word	0x00010002

080070e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	603b      	str	r3, [r7, #0]
 80070f0:	4613      	mov	r3, r2
 80070f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070f4:	e025      	b.n	8007142 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070fc:	d021      	beq.n	8007142 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070fe:	f7fd fad5 	bl	80046ac <HAL_GetTick>
 8007102:	4602      	mov	r2, r0
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	683a      	ldr	r2, [r7, #0]
 800710a:	429a      	cmp	r2, r3
 800710c:	d302      	bcc.n	8007114 <I2C_WaitOnFlagUntilTimeout+0x30>
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d116      	bne.n	8007142 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2220      	movs	r2, #32
 800711e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712e:	f043 0220 	orr.w	r2, r3, #32
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e023      	b.n	800718a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	0c1b      	lsrs	r3, r3, #16
 8007146:	b2db      	uxtb	r3, r3
 8007148:	2b01      	cmp	r3, #1
 800714a:	d10d      	bne.n	8007168 <I2C_WaitOnFlagUntilTimeout+0x84>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	43da      	mvns	r2, r3
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	4013      	ands	r3, r2
 8007158:	b29b      	uxth	r3, r3
 800715a:	2b00      	cmp	r3, #0
 800715c:	bf0c      	ite	eq
 800715e:	2301      	moveq	r3, #1
 8007160:	2300      	movne	r3, #0
 8007162:	b2db      	uxtb	r3, r3
 8007164:	461a      	mov	r2, r3
 8007166:	e00c      	b.n	8007182 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	43da      	mvns	r2, r3
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	4013      	ands	r3, r2
 8007174:	b29b      	uxth	r3, r3
 8007176:	2b00      	cmp	r3, #0
 8007178:	bf0c      	ite	eq
 800717a:	2301      	moveq	r3, #1
 800717c:	2300      	movne	r3, #0
 800717e:	b2db      	uxtb	r3, r3
 8007180:	461a      	mov	r2, r3
 8007182:	79fb      	ldrb	r3, [r7, #7]
 8007184:	429a      	cmp	r2, r3
 8007186:	d0b6      	beq.n	80070f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b084      	sub	sp, #16
 8007196:	af00      	add	r7, sp, #0
 8007198:	60f8      	str	r0, [r7, #12]
 800719a:	60b9      	str	r1, [r7, #8]
 800719c:	607a      	str	r2, [r7, #4]
 800719e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80071a0:	e051      	b.n	8007246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	695b      	ldr	r3, [r3, #20]
 80071a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071b0:	d123      	bne.n	80071fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80071ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2220      	movs	r2, #32
 80071d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e6:	f043 0204 	orr.w	r2, r3, #4
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e046      	b.n	8007288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007200:	d021      	beq.n	8007246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007202:	f7fd fa53 	bl	80046ac <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	429a      	cmp	r2, r3
 8007210:	d302      	bcc.n	8007218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d116      	bne.n	8007246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2220      	movs	r2, #32
 8007222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007232:	f043 0220 	orr.w	r2, r3, #32
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e020      	b.n	8007288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	0c1b      	lsrs	r3, r3, #16
 800724a:	b2db      	uxtb	r3, r3
 800724c:	2b01      	cmp	r3, #1
 800724e:	d10c      	bne.n	800726a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	43da      	mvns	r2, r3
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	4013      	ands	r3, r2
 800725c:	b29b      	uxth	r3, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	bf14      	ite	ne
 8007262:	2301      	movne	r3, #1
 8007264:	2300      	moveq	r3, #0
 8007266:	b2db      	uxtb	r3, r3
 8007268:	e00b      	b.n	8007282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	699b      	ldr	r3, [r3, #24]
 8007270:	43da      	mvns	r2, r3
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	4013      	ands	r3, r2
 8007276:	b29b      	uxth	r3, r3
 8007278:	2b00      	cmp	r3, #0
 800727a:	bf14      	ite	ne
 800727c:	2301      	movne	r3, #1
 800727e:	2300      	moveq	r3, #0
 8007280:	b2db      	uxtb	r3, r3
 8007282:	2b00      	cmp	r3, #0
 8007284:	d18d      	bne.n	80071a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800729c:	e02d      	b.n	80072fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f000 f8ce 	bl	8007440 <I2C_IsAcknowledgeFailed>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d001      	beq.n	80072ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e02d      	b.n	800730a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b4:	d021      	beq.n	80072fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072b6:	f7fd f9f9 	bl	80046ac <HAL_GetTick>
 80072ba:	4602      	mov	r2, r0
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	68ba      	ldr	r2, [r7, #8]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d302      	bcc.n	80072cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d116      	bne.n	80072fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2200      	movs	r2, #0
 80072d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2220      	movs	r2, #32
 80072d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e6:	f043 0220 	orr.w	r2, r3, #32
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e007      	b.n	800730a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007304:	2b80      	cmp	r3, #128	; 0x80
 8007306:	d1ca      	bne.n	800729e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b084      	sub	sp, #16
 8007316:	af00      	add	r7, sp, #0
 8007318:	60f8      	str	r0, [r7, #12]
 800731a:	60b9      	str	r1, [r7, #8]
 800731c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800731e:	e02d      	b.n	800737c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	f000 f88d 	bl	8007440 <I2C_IsAcknowledgeFailed>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d001      	beq.n	8007330 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	e02d      	b.n	800738c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007336:	d021      	beq.n	800737c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007338:	f7fd f9b8 	bl	80046ac <HAL_GetTick>
 800733c:	4602      	mov	r2, r0
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	429a      	cmp	r2, r3
 8007346:	d302      	bcc.n	800734e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d116      	bne.n	800737c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2220      	movs	r2, #32
 8007358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007368:	f043 0220 	orr.w	r2, r3, #32
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e007      	b.n	800738c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	f003 0304 	and.w	r3, r3, #4
 8007386:	2b04      	cmp	r3, #4
 8007388:	d1ca      	bne.n	8007320 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80073a0:	e042      	b.n	8007428 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	695b      	ldr	r3, [r3, #20]
 80073a8:	f003 0310 	and.w	r3, r3, #16
 80073ac:	2b10      	cmp	r3, #16
 80073ae:	d119      	bne.n	80073e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f06f 0210 	mvn.w	r2, #16
 80073b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2220      	movs	r2, #32
 80073c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e029      	b.n	8007438 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073e4:	f7fd f962 	bl	80046ac <HAL_GetTick>
 80073e8:	4602      	mov	r2, r0
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d302      	bcc.n	80073fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d116      	bne.n	8007428 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2220      	movs	r2, #32
 8007404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007414:	f043 0220 	orr.w	r2, r3, #32
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	e007      	b.n	8007438 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007432:	2b40      	cmp	r3, #64	; 0x40
 8007434:	d1b5      	bne.n	80073a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	3710      	adds	r7, #16
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007456:	d11b      	bne.n	8007490 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007460:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2220      	movs	r2, #32
 800746c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747c:	f043 0204 	orr.w	r2, r3, #4
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e000      	b.n	8007492 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	370c      	adds	r7, #12
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
	...

080074a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b086      	sub	sp, #24
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d101      	bne.n	80074b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e267      	b.n	8007982 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d075      	beq.n	80075aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80074be:	4b88      	ldr	r3, [pc, #544]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f003 030c 	and.w	r3, r3, #12
 80074c6:	2b04      	cmp	r3, #4
 80074c8:	d00c      	beq.n	80074e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074ca:	4b85      	ldr	r3, [pc, #532]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80074d2:	2b08      	cmp	r3, #8
 80074d4:	d112      	bne.n	80074fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074d6:	4b82      	ldr	r3, [pc, #520]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074e2:	d10b      	bne.n	80074fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074e4:	4b7e      	ldr	r3, [pc, #504]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d05b      	beq.n	80075a8 <HAL_RCC_OscConfig+0x108>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d157      	bne.n	80075a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e242      	b.n	8007982 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007504:	d106      	bne.n	8007514 <HAL_RCC_OscConfig+0x74>
 8007506:	4b76      	ldr	r3, [pc, #472]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a75      	ldr	r2, [pc, #468]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 800750c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007510:	6013      	str	r3, [r2, #0]
 8007512:	e01d      	b.n	8007550 <HAL_RCC_OscConfig+0xb0>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800751c:	d10c      	bne.n	8007538 <HAL_RCC_OscConfig+0x98>
 800751e:	4b70      	ldr	r3, [pc, #448]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a6f      	ldr	r2, [pc, #444]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 8007524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007528:	6013      	str	r3, [r2, #0]
 800752a:	4b6d      	ldr	r3, [pc, #436]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a6c      	ldr	r2, [pc, #432]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 8007530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007534:	6013      	str	r3, [r2, #0]
 8007536:	e00b      	b.n	8007550 <HAL_RCC_OscConfig+0xb0>
 8007538:	4b69      	ldr	r3, [pc, #420]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a68      	ldr	r2, [pc, #416]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 800753e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007542:	6013      	str	r3, [r2, #0]
 8007544:	4b66      	ldr	r3, [pc, #408]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a65      	ldr	r2, [pc, #404]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 800754a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800754e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d013      	beq.n	8007580 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007558:	f7fd f8a8 	bl	80046ac <HAL_GetTick>
 800755c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800755e:	e008      	b.n	8007572 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007560:	f7fd f8a4 	bl	80046ac <HAL_GetTick>
 8007564:	4602      	mov	r2, r0
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	2b64      	cmp	r3, #100	; 0x64
 800756c:	d901      	bls.n	8007572 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	e207      	b.n	8007982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007572:	4b5b      	ldr	r3, [pc, #364]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800757a:	2b00      	cmp	r3, #0
 800757c:	d0f0      	beq.n	8007560 <HAL_RCC_OscConfig+0xc0>
 800757e:	e014      	b.n	80075aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007580:	f7fd f894 	bl	80046ac <HAL_GetTick>
 8007584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007586:	e008      	b.n	800759a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007588:	f7fd f890 	bl	80046ac <HAL_GetTick>
 800758c:	4602      	mov	r2, r0
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	2b64      	cmp	r3, #100	; 0x64
 8007594:	d901      	bls.n	800759a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	e1f3      	b.n	8007982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800759a:	4b51      	ldr	r3, [pc, #324]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1f0      	bne.n	8007588 <HAL_RCC_OscConfig+0xe8>
 80075a6:	e000      	b.n	80075aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 0302 	and.w	r3, r3, #2
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d063      	beq.n	800767e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80075b6:	4b4a      	ldr	r3, [pc, #296]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	f003 030c 	and.w	r3, r3, #12
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00b      	beq.n	80075da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075c2:	4b47      	ldr	r3, [pc, #284]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80075ca:	2b08      	cmp	r3, #8
 80075cc:	d11c      	bne.n	8007608 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075ce:	4b44      	ldr	r3, [pc, #272]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d116      	bne.n	8007608 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075da:	4b41      	ldr	r3, [pc, #260]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0302 	and.w	r3, r3, #2
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d005      	beq.n	80075f2 <HAL_RCC_OscConfig+0x152>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d001      	beq.n	80075f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e1c7      	b.n	8007982 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075f2:	4b3b      	ldr	r3, [pc, #236]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	00db      	lsls	r3, r3, #3
 8007600:	4937      	ldr	r1, [pc, #220]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 8007602:	4313      	orrs	r3, r2
 8007604:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007606:	e03a      	b.n	800767e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d020      	beq.n	8007652 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007610:	4b34      	ldr	r3, [pc, #208]	; (80076e4 <HAL_RCC_OscConfig+0x244>)
 8007612:	2201      	movs	r2, #1
 8007614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007616:	f7fd f849 	bl	80046ac <HAL_GetTick>
 800761a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800761c:	e008      	b.n	8007630 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800761e:	f7fd f845 	bl	80046ac <HAL_GetTick>
 8007622:	4602      	mov	r2, r0
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	1ad3      	subs	r3, r2, r3
 8007628:	2b02      	cmp	r3, #2
 800762a:	d901      	bls.n	8007630 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800762c:	2303      	movs	r3, #3
 800762e:	e1a8      	b.n	8007982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007630:	4b2b      	ldr	r3, [pc, #172]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0302 	and.w	r3, r3, #2
 8007638:	2b00      	cmp	r3, #0
 800763a:	d0f0      	beq.n	800761e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800763c:	4b28      	ldr	r3, [pc, #160]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	00db      	lsls	r3, r3, #3
 800764a:	4925      	ldr	r1, [pc, #148]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 800764c:	4313      	orrs	r3, r2
 800764e:	600b      	str	r3, [r1, #0]
 8007650:	e015      	b.n	800767e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007652:	4b24      	ldr	r3, [pc, #144]	; (80076e4 <HAL_RCC_OscConfig+0x244>)
 8007654:	2200      	movs	r2, #0
 8007656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007658:	f7fd f828 	bl	80046ac <HAL_GetTick>
 800765c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800765e:	e008      	b.n	8007672 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007660:	f7fd f824 	bl	80046ac <HAL_GetTick>
 8007664:	4602      	mov	r2, r0
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	2b02      	cmp	r3, #2
 800766c:	d901      	bls.n	8007672 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	e187      	b.n	8007982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007672:	4b1b      	ldr	r3, [pc, #108]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 0302 	and.w	r3, r3, #2
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1f0      	bne.n	8007660 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0308 	and.w	r3, r3, #8
 8007686:	2b00      	cmp	r3, #0
 8007688:	d036      	beq.n	80076f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d016      	beq.n	80076c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007692:	4b15      	ldr	r3, [pc, #84]	; (80076e8 <HAL_RCC_OscConfig+0x248>)
 8007694:	2201      	movs	r2, #1
 8007696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007698:	f7fd f808 	bl	80046ac <HAL_GetTick>
 800769c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800769e:	e008      	b.n	80076b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076a0:	f7fd f804 	bl	80046ac <HAL_GetTick>
 80076a4:	4602      	mov	r2, r0
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d901      	bls.n	80076b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e167      	b.n	8007982 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076b2:	4b0b      	ldr	r3, [pc, #44]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 80076b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076b6:	f003 0302 	and.w	r3, r3, #2
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d0f0      	beq.n	80076a0 <HAL_RCC_OscConfig+0x200>
 80076be:	e01b      	b.n	80076f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076c0:	4b09      	ldr	r3, [pc, #36]	; (80076e8 <HAL_RCC_OscConfig+0x248>)
 80076c2:	2200      	movs	r2, #0
 80076c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076c6:	f7fc fff1 	bl	80046ac <HAL_GetTick>
 80076ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076cc:	e00e      	b.n	80076ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076ce:	f7fc ffed 	bl	80046ac <HAL_GetTick>
 80076d2:	4602      	mov	r2, r0
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	1ad3      	subs	r3, r2, r3
 80076d8:	2b02      	cmp	r3, #2
 80076da:	d907      	bls.n	80076ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80076dc:	2303      	movs	r3, #3
 80076de:	e150      	b.n	8007982 <HAL_RCC_OscConfig+0x4e2>
 80076e0:	40023800 	.word	0x40023800
 80076e4:	42470000 	.word	0x42470000
 80076e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076ec:	4b88      	ldr	r3, [pc, #544]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 80076ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076f0:	f003 0302 	and.w	r3, r3, #2
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1ea      	bne.n	80076ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0304 	and.w	r3, r3, #4
 8007700:	2b00      	cmp	r3, #0
 8007702:	f000 8097 	beq.w	8007834 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007706:	2300      	movs	r3, #0
 8007708:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800770a:	4b81      	ldr	r3, [pc, #516]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 800770c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10f      	bne.n	8007736 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007716:	2300      	movs	r3, #0
 8007718:	60bb      	str	r3, [r7, #8]
 800771a:	4b7d      	ldr	r3, [pc, #500]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 800771c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771e:	4a7c      	ldr	r2, [pc, #496]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 8007720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007724:	6413      	str	r3, [r2, #64]	; 0x40
 8007726:	4b7a      	ldr	r3, [pc, #488]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 8007728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800772e:	60bb      	str	r3, [r7, #8]
 8007730:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007732:	2301      	movs	r3, #1
 8007734:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007736:	4b77      	ldr	r3, [pc, #476]	; (8007914 <HAL_RCC_OscConfig+0x474>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800773e:	2b00      	cmp	r3, #0
 8007740:	d118      	bne.n	8007774 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007742:	4b74      	ldr	r3, [pc, #464]	; (8007914 <HAL_RCC_OscConfig+0x474>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a73      	ldr	r2, [pc, #460]	; (8007914 <HAL_RCC_OscConfig+0x474>)
 8007748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800774c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800774e:	f7fc ffad 	bl	80046ac <HAL_GetTick>
 8007752:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007754:	e008      	b.n	8007768 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007756:	f7fc ffa9 	bl	80046ac <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	2b02      	cmp	r3, #2
 8007762:	d901      	bls.n	8007768 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e10c      	b.n	8007982 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007768:	4b6a      	ldr	r3, [pc, #424]	; (8007914 <HAL_RCC_OscConfig+0x474>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007770:	2b00      	cmp	r3, #0
 8007772:	d0f0      	beq.n	8007756 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d106      	bne.n	800778a <HAL_RCC_OscConfig+0x2ea>
 800777c:	4b64      	ldr	r3, [pc, #400]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 800777e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007780:	4a63      	ldr	r2, [pc, #396]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 8007782:	f043 0301 	orr.w	r3, r3, #1
 8007786:	6713      	str	r3, [r2, #112]	; 0x70
 8007788:	e01c      	b.n	80077c4 <HAL_RCC_OscConfig+0x324>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	2b05      	cmp	r3, #5
 8007790:	d10c      	bne.n	80077ac <HAL_RCC_OscConfig+0x30c>
 8007792:	4b5f      	ldr	r3, [pc, #380]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 8007794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007796:	4a5e      	ldr	r2, [pc, #376]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 8007798:	f043 0304 	orr.w	r3, r3, #4
 800779c:	6713      	str	r3, [r2, #112]	; 0x70
 800779e:	4b5c      	ldr	r3, [pc, #368]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 80077a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a2:	4a5b      	ldr	r2, [pc, #364]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 80077a4:	f043 0301 	orr.w	r3, r3, #1
 80077a8:	6713      	str	r3, [r2, #112]	; 0x70
 80077aa:	e00b      	b.n	80077c4 <HAL_RCC_OscConfig+0x324>
 80077ac:	4b58      	ldr	r3, [pc, #352]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 80077ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077b0:	4a57      	ldr	r2, [pc, #348]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 80077b2:	f023 0301 	bic.w	r3, r3, #1
 80077b6:	6713      	str	r3, [r2, #112]	; 0x70
 80077b8:	4b55      	ldr	r3, [pc, #340]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 80077ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077bc:	4a54      	ldr	r2, [pc, #336]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 80077be:	f023 0304 	bic.w	r3, r3, #4
 80077c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d015      	beq.n	80077f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077cc:	f7fc ff6e 	bl	80046ac <HAL_GetTick>
 80077d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077d2:	e00a      	b.n	80077ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077d4:	f7fc ff6a 	bl	80046ac <HAL_GetTick>
 80077d8:	4602      	mov	r2, r0
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	f241 3288 	movw	r2, #5000	; 0x1388
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d901      	bls.n	80077ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e0cb      	b.n	8007982 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077ea:	4b49      	ldr	r3, [pc, #292]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 80077ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ee:	f003 0302 	and.w	r3, r3, #2
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d0ee      	beq.n	80077d4 <HAL_RCC_OscConfig+0x334>
 80077f6:	e014      	b.n	8007822 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077f8:	f7fc ff58 	bl	80046ac <HAL_GetTick>
 80077fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077fe:	e00a      	b.n	8007816 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007800:	f7fc ff54 	bl	80046ac <HAL_GetTick>
 8007804:	4602      	mov	r2, r0
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	f241 3288 	movw	r2, #5000	; 0x1388
 800780e:	4293      	cmp	r3, r2
 8007810:	d901      	bls.n	8007816 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007812:	2303      	movs	r3, #3
 8007814:	e0b5      	b.n	8007982 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007816:	4b3e      	ldr	r3, [pc, #248]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 8007818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800781a:	f003 0302 	and.w	r3, r3, #2
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1ee      	bne.n	8007800 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007822:	7dfb      	ldrb	r3, [r7, #23]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d105      	bne.n	8007834 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007828:	4b39      	ldr	r3, [pc, #228]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 800782a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782c:	4a38      	ldr	r2, [pc, #224]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 800782e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007832:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 80a1 	beq.w	8007980 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800783e:	4b34      	ldr	r3, [pc, #208]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f003 030c 	and.w	r3, r3, #12
 8007846:	2b08      	cmp	r3, #8
 8007848:	d05c      	beq.n	8007904 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	2b02      	cmp	r3, #2
 8007850:	d141      	bne.n	80078d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007852:	4b31      	ldr	r3, [pc, #196]	; (8007918 <HAL_RCC_OscConfig+0x478>)
 8007854:	2200      	movs	r2, #0
 8007856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007858:	f7fc ff28 	bl	80046ac <HAL_GetTick>
 800785c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800785e:	e008      	b.n	8007872 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007860:	f7fc ff24 	bl	80046ac <HAL_GetTick>
 8007864:	4602      	mov	r2, r0
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	2b02      	cmp	r3, #2
 800786c:	d901      	bls.n	8007872 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e087      	b.n	8007982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007872:	4b27      	ldr	r3, [pc, #156]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1f0      	bne.n	8007860 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	69da      	ldr	r2, [r3, #28]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	431a      	orrs	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788c:	019b      	lsls	r3, r3, #6
 800788e:	431a      	orrs	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007894:	085b      	lsrs	r3, r3, #1
 8007896:	3b01      	subs	r3, #1
 8007898:	041b      	lsls	r3, r3, #16
 800789a:	431a      	orrs	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a0:	061b      	lsls	r3, r3, #24
 80078a2:	491b      	ldr	r1, [pc, #108]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078a8:	4b1b      	ldr	r3, [pc, #108]	; (8007918 <HAL_RCC_OscConfig+0x478>)
 80078aa:	2201      	movs	r2, #1
 80078ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078ae:	f7fc fefd 	bl	80046ac <HAL_GetTick>
 80078b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078b4:	e008      	b.n	80078c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078b6:	f7fc fef9 	bl	80046ac <HAL_GetTick>
 80078ba:	4602      	mov	r2, r0
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d901      	bls.n	80078c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e05c      	b.n	8007982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078c8:	4b11      	ldr	r3, [pc, #68]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d0f0      	beq.n	80078b6 <HAL_RCC_OscConfig+0x416>
 80078d4:	e054      	b.n	8007980 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078d6:	4b10      	ldr	r3, [pc, #64]	; (8007918 <HAL_RCC_OscConfig+0x478>)
 80078d8:	2200      	movs	r2, #0
 80078da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078dc:	f7fc fee6 	bl	80046ac <HAL_GetTick>
 80078e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078e2:	e008      	b.n	80078f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078e4:	f7fc fee2 	bl	80046ac <HAL_GetTick>
 80078e8:	4602      	mov	r2, r0
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	1ad3      	subs	r3, r2, r3
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	d901      	bls.n	80078f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80078f2:	2303      	movs	r3, #3
 80078f4:	e045      	b.n	8007982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078f6:	4b06      	ldr	r3, [pc, #24]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1f0      	bne.n	80078e4 <HAL_RCC_OscConfig+0x444>
 8007902:	e03d      	b.n	8007980 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d107      	bne.n	800791c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e038      	b.n	8007982 <HAL_RCC_OscConfig+0x4e2>
 8007910:	40023800 	.word	0x40023800
 8007914:	40007000 	.word	0x40007000
 8007918:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800791c:	4b1b      	ldr	r3, [pc, #108]	; (800798c <HAL_RCC_OscConfig+0x4ec>)
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	699b      	ldr	r3, [r3, #24]
 8007926:	2b01      	cmp	r3, #1
 8007928:	d028      	beq.n	800797c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007934:	429a      	cmp	r2, r3
 8007936:	d121      	bne.n	800797c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007942:	429a      	cmp	r2, r3
 8007944:	d11a      	bne.n	800797c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800794c:	4013      	ands	r3, r2
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007952:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007954:	4293      	cmp	r3, r2
 8007956:	d111      	bne.n	800797c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007962:	085b      	lsrs	r3, r3, #1
 8007964:	3b01      	subs	r3, #1
 8007966:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007968:	429a      	cmp	r2, r3
 800796a:	d107      	bne.n	800797c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007976:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007978:	429a      	cmp	r2, r3
 800797a:	d001      	beq.n	8007980 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	e000      	b.n	8007982 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3718      	adds	r7, #24
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	40023800 	.word	0x40023800

08007990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d101      	bne.n	80079a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	e0cc      	b.n	8007b3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80079a4:	4b68      	ldr	r3, [pc, #416]	; (8007b48 <HAL_RCC_ClockConfig+0x1b8>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 0307 	and.w	r3, r3, #7
 80079ac:	683a      	ldr	r2, [r7, #0]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d90c      	bls.n	80079cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079b2:	4b65      	ldr	r3, [pc, #404]	; (8007b48 <HAL_RCC_ClockConfig+0x1b8>)
 80079b4:	683a      	ldr	r2, [r7, #0]
 80079b6:	b2d2      	uxtb	r2, r2
 80079b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079ba:	4b63      	ldr	r3, [pc, #396]	; (8007b48 <HAL_RCC_ClockConfig+0x1b8>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 0307 	and.w	r3, r3, #7
 80079c2:	683a      	ldr	r2, [r7, #0]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d001      	beq.n	80079cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	e0b8      	b.n	8007b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 0302 	and.w	r3, r3, #2
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d020      	beq.n	8007a1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0304 	and.w	r3, r3, #4
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d005      	beq.n	80079f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80079e4:	4b59      	ldr	r3, [pc, #356]	; (8007b4c <HAL_RCC_ClockConfig+0x1bc>)
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	4a58      	ldr	r2, [pc, #352]	; (8007b4c <HAL_RCC_ClockConfig+0x1bc>)
 80079ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80079ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 0308 	and.w	r3, r3, #8
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d005      	beq.n	8007a08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80079fc:	4b53      	ldr	r3, [pc, #332]	; (8007b4c <HAL_RCC_ClockConfig+0x1bc>)
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	4a52      	ldr	r2, [pc, #328]	; (8007b4c <HAL_RCC_ClockConfig+0x1bc>)
 8007a02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007a06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a08:	4b50      	ldr	r3, [pc, #320]	; (8007b4c <HAL_RCC_ClockConfig+0x1bc>)
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	494d      	ldr	r1, [pc, #308]	; (8007b4c <HAL_RCC_ClockConfig+0x1bc>)
 8007a16:	4313      	orrs	r3, r2
 8007a18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0301 	and.w	r3, r3, #1
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d044      	beq.n	8007ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d107      	bne.n	8007a3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a2e:	4b47      	ldr	r3, [pc, #284]	; (8007b4c <HAL_RCC_ClockConfig+0x1bc>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d119      	bne.n	8007a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e07f      	b.n	8007b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d003      	beq.n	8007a4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a4a:	2b03      	cmp	r3, #3
 8007a4c:	d107      	bne.n	8007a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a4e:	4b3f      	ldr	r3, [pc, #252]	; (8007b4c <HAL_RCC_ClockConfig+0x1bc>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d109      	bne.n	8007a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e06f      	b.n	8007b3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a5e:	4b3b      	ldr	r3, [pc, #236]	; (8007b4c <HAL_RCC_ClockConfig+0x1bc>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 0302 	and.w	r3, r3, #2
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d101      	bne.n	8007a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e067      	b.n	8007b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a6e:	4b37      	ldr	r3, [pc, #220]	; (8007b4c <HAL_RCC_ClockConfig+0x1bc>)
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	f023 0203 	bic.w	r2, r3, #3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	4934      	ldr	r1, [pc, #208]	; (8007b4c <HAL_RCC_ClockConfig+0x1bc>)
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a80:	f7fc fe14 	bl	80046ac <HAL_GetTick>
 8007a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a86:	e00a      	b.n	8007a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a88:	f7fc fe10 	bl	80046ac <HAL_GetTick>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d901      	bls.n	8007a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e04f      	b.n	8007b3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a9e:	4b2b      	ldr	r3, [pc, #172]	; (8007b4c <HAL_RCC_ClockConfig+0x1bc>)
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	f003 020c 	and.w	r2, r3, #12
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d1eb      	bne.n	8007a88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007ab0:	4b25      	ldr	r3, [pc, #148]	; (8007b48 <HAL_RCC_ClockConfig+0x1b8>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 0307 	and.w	r3, r3, #7
 8007ab8:	683a      	ldr	r2, [r7, #0]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d20c      	bcs.n	8007ad8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007abe:	4b22      	ldr	r3, [pc, #136]	; (8007b48 <HAL_RCC_ClockConfig+0x1b8>)
 8007ac0:	683a      	ldr	r2, [r7, #0]
 8007ac2:	b2d2      	uxtb	r2, r2
 8007ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ac6:	4b20      	ldr	r3, [pc, #128]	; (8007b48 <HAL_RCC_ClockConfig+0x1b8>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f003 0307 	and.w	r3, r3, #7
 8007ace:	683a      	ldr	r2, [r7, #0]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d001      	beq.n	8007ad8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e032      	b.n	8007b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 0304 	and.w	r3, r3, #4
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d008      	beq.n	8007af6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ae4:	4b19      	ldr	r3, [pc, #100]	; (8007b4c <HAL_RCC_ClockConfig+0x1bc>)
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	4916      	ldr	r1, [pc, #88]	; (8007b4c <HAL_RCC_ClockConfig+0x1bc>)
 8007af2:	4313      	orrs	r3, r2
 8007af4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 0308 	and.w	r3, r3, #8
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d009      	beq.n	8007b16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b02:	4b12      	ldr	r3, [pc, #72]	; (8007b4c <HAL_RCC_ClockConfig+0x1bc>)
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	00db      	lsls	r3, r3, #3
 8007b10:	490e      	ldr	r1, [pc, #56]	; (8007b4c <HAL_RCC_ClockConfig+0x1bc>)
 8007b12:	4313      	orrs	r3, r2
 8007b14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007b16:	f000 f821 	bl	8007b5c <HAL_RCC_GetSysClockFreq>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	4b0b      	ldr	r3, [pc, #44]	; (8007b4c <HAL_RCC_ClockConfig+0x1bc>)
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	091b      	lsrs	r3, r3, #4
 8007b22:	f003 030f 	and.w	r3, r3, #15
 8007b26:	490a      	ldr	r1, [pc, #40]	; (8007b50 <HAL_RCC_ClockConfig+0x1c0>)
 8007b28:	5ccb      	ldrb	r3, [r1, r3]
 8007b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b2e:	4a09      	ldr	r2, [pc, #36]	; (8007b54 <HAL_RCC_ClockConfig+0x1c4>)
 8007b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007b32:	4b09      	ldr	r3, [pc, #36]	; (8007b58 <HAL_RCC_ClockConfig+0x1c8>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7fc fd74 	bl	8004624 <HAL_InitTick>

  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3710      	adds	r7, #16
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	40023c00 	.word	0x40023c00
 8007b4c:	40023800 	.word	0x40023800
 8007b50:	0800a38c 	.word	0x0800a38c
 8007b54:	20000ad8 	.word	0x20000ad8
 8007b58:	20000adc 	.word	0x20000adc

08007b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b60:	b090      	sub	sp, #64	; 0x40
 8007b62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007b64:	2300      	movs	r3, #0
 8007b66:	637b      	str	r3, [r7, #52]	; 0x34
 8007b68:	2300      	movs	r3, #0
 8007b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007b70:	2300      	movs	r3, #0
 8007b72:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b74:	4b59      	ldr	r3, [pc, #356]	; (8007cdc <HAL_RCC_GetSysClockFreq+0x180>)
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	f003 030c 	and.w	r3, r3, #12
 8007b7c:	2b08      	cmp	r3, #8
 8007b7e:	d00d      	beq.n	8007b9c <HAL_RCC_GetSysClockFreq+0x40>
 8007b80:	2b08      	cmp	r3, #8
 8007b82:	f200 80a1 	bhi.w	8007cc8 <HAL_RCC_GetSysClockFreq+0x16c>
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d002      	beq.n	8007b90 <HAL_RCC_GetSysClockFreq+0x34>
 8007b8a:	2b04      	cmp	r3, #4
 8007b8c:	d003      	beq.n	8007b96 <HAL_RCC_GetSysClockFreq+0x3a>
 8007b8e:	e09b      	b.n	8007cc8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007b90:	4b53      	ldr	r3, [pc, #332]	; (8007ce0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007b92:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007b94:	e09b      	b.n	8007cce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007b96:	4b53      	ldr	r3, [pc, #332]	; (8007ce4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007b98:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007b9a:	e098      	b.n	8007cce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007b9c:	4b4f      	ldr	r3, [pc, #316]	; (8007cdc <HAL_RCC_GetSysClockFreq+0x180>)
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ba4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ba6:	4b4d      	ldr	r3, [pc, #308]	; (8007cdc <HAL_RCC_GetSysClockFreq+0x180>)
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d028      	beq.n	8007c04 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007bb2:	4b4a      	ldr	r3, [pc, #296]	; (8007cdc <HAL_RCC_GetSysClockFreq+0x180>)
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	099b      	lsrs	r3, r3, #6
 8007bb8:	2200      	movs	r2, #0
 8007bba:	623b      	str	r3, [r7, #32]
 8007bbc:	627a      	str	r2, [r7, #36]	; 0x24
 8007bbe:	6a3b      	ldr	r3, [r7, #32]
 8007bc0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	4b47      	ldr	r3, [pc, #284]	; (8007ce4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007bc8:	fb03 f201 	mul.w	r2, r3, r1
 8007bcc:	2300      	movs	r3, #0
 8007bce:	fb00 f303 	mul.w	r3, r0, r3
 8007bd2:	4413      	add	r3, r2
 8007bd4:	4a43      	ldr	r2, [pc, #268]	; (8007ce4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007bd6:	fba0 1202 	umull	r1, r2, r0, r2
 8007bda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bdc:	460a      	mov	r2, r1
 8007bde:	62ba      	str	r2, [r7, #40]	; 0x28
 8007be0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007be2:	4413      	add	r3, r2
 8007be4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be8:	2200      	movs	r2, #0
 8007bea:	61bb      	str	r3, [r7, #24]
 8007bec:	61fa      	str	r2, [r7, #28]
 8007bee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007bf2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007bf6:	f7f8 fe2d 	bl	8000854 <__aeabi_uldivmod>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	4613      	mov	r3, r2
 8007c00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c02:	e053      	b.n	8007cac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c04:	4b35      	ldr	r3, [pc, #212]	; (8007cdc <HAL_RCC_GetSysClockFreq+0x180>)
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	099b      	lsrs	r3, r3, #6
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	613b      	str	r3, [r7, #16]
 8007c0e:	617a      	str	r2, [r7, #20]
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007c16:	f04f 0b00 	mov.w	fp, #0
 8007c1a:	4652      	mov	r2, sl
 8007c1c:	465b      	mov	r3, fp
 8007c1e:	f04f 0000 	mov.w	r0, #0
 8007c22:	f04f 0100 	mov.w	r1, #0
 8007c26:	0159      	lsls	r1, r3, #5
 8007c28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007c2c:	0150      	lsls	r0, r2, #5
 8007c2e:	4602      	mov	r2, r0
 8007c30:	460b      	mov	r3, r1
 8007c32:	ebb2 080a 	subs.w	r8, r2, sl
 8007c36:	eb63 090b 	sbc.w	r9, r3, fp
 8007c3a:	f04f 0200 	mov.w	r2, #0
 8007c3e:	f04f 0300 	mov.w	r3, #0
 8007c42:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007c46:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007c4a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007c4e:	ebb2 0408 	subs.w	r4, r2, r8
 8007c52:	eb63 0509 	sbc.w	r5, r3, r9
 8007c56:	f04f 0200 	mov.w	r2, #0
 8007c5a:	f04f 0300 	mov.w	r3, #0
 8007c5e:	00eb      	lsls	r3, r5, #3
 8007c60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c64:	00e2      	lsls	r2, r4, #3
 8007c66:	4614      	mov	r4, r2
 8007c68:	461d      	mov	r5, r3
 8007c6a:	eb14 030a 	adds.w	r3, r4, sl
 8007c6e:	603b      	str	r3, [r7, #0]
 8007c70:	eb45 030b 	adc.w	r3, r5, fp
 8007c74:	607b      	str	r3, [r7, #4]
 8007c76:	f04f 0200 	mov.w	r2, #0
 8007c7a:	f04f 0300 	mov.w	r3, #0
 8007c7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007c82:	4629      	mov	r1, r5
 8007c84:	028b      	lsls	r3, r1, #10
 8007c86:	4621      	mov	r1, r4
 8007c88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007c8c:	4621      	mov	r1, r4
 8007c8e:	028a      	lsls	r2, r1, #10
 8007c90:	4610      	mov	r0, r2
 8007c92:	4619      	mov	r1, r3
 8007c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c96:	2200      	movs	r2, #0
 8007c98:	60bb      	str	r3, [r7, #8]
 8007c9a:	60fa      	str	r2, [r7, #12]
 8007c9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ca0:	f7f8 fdd8 	bl	8000854 <__aeabi_uldivmod>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	4613      	mov	r3, r2
 8007caa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007cac:	4b0b      	ldr	r3, [pc, #44]	; (8007cdc <HAL_RCC_GetSysClockFreq+0x180>)
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	0c1b      	lsrs	r3, r3, #16
 8007cb2:	f003 0303 	and.w	r3, r3, #3
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	005b      	lsls	r3, r3, #1
 8007cba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007cbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cc4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007cc6:	e002      	b.n	8007cce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007cc8:	4b05      	ldr	r3, [pc, #20]	; (8007ce0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007cca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007ccc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3740      	adds	r7, #64	; 0x40
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cda:	bf00      	nop
 8007cdc:	40023800 	.word	0x40023800
 8007ce0:	00f42400 	.word	0x00f42400
 8007ce4:	017d7840 	.word	0x017d7840

08007ce8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007cec:	4b03      	ldr	r3, [pc, #12]	; (8007cfc <HAL_RCC_GetHCLKFreq+0x14>)
 8007cee:	681b      	ldr	r3, [r3, #0]
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	20000ad8 	.word	0x20000ad8

08007d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007d04:	f7ff fff0 	bl	8007ce8 <HAL_RCC_GetHCLKFreq>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	4b05      	ldr	r3, [pc, #20]	; (8007d20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	0a9b      	lsrs	r3, r3, #10
 8007d10:	f003 0307 	and.w	r3, r3, #7
 8007d14:	4903      	ldr	r1, [pc, #12]	; (8007d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d16:	5ccb      	ldrb	r3, [r1, r3]
 8007d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	40023800 	.word	0x40023800
 8007d24:	0800a39c 	.word	0x0800a39c

08007d28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d101      	bne.n	8007d3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e07b      	b.n	8007e32 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d108      	bne.n	8007d54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d4a:	d009      	beq.n	8007d60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	61da      	str	r2, [r3, #28]
 8007d52:	e005      	b.n	8007d60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d106      	bne.n	8007d80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7fc fa56 	bl	800422c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2202      	movs	r2, #2
 8007d84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007da8:	431a      	orrs	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007db2:	431a      	orrs	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	f003 0302 	and.w	r3, r3, #2
 8007dbc:	431a      	orrs	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	695b      	ldr	r3, [r3, #20]
 8007dc2:	f003 0301 	and.w	r3, r3, #1
 8007dc6:	431a      	orrs	r2, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	699b      	ldr	r3, [r3, #24]
 8007dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dd0:	431a      	orrs	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	69db      	ldr	r3, [r3, #28]
 8007dd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007dda:	431a      	orrs	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6a1b      	ldr	r3, [r3, #32]
 8007de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007de4:	ea42 0103 	orr.w	r1, r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	430a      	orrs	r2, r1
 8007df6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	699b      	ldr	r3, [r3, #24]
 8007dfc:	0c1b      	lsrs	r3, r3, #16
 8007dfe:	f003 0104 	and.w	r1, r3, #4
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e06:	f003 0210 	and.w	r2, r3, #16
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	430a      	orrs	r2, r1
 8007e10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	69da      	ldr	r2, [r3, #28]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3708      	adds	r7, #8
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b088      	sub	sp, #32
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	60f8      	str	r0, [r7, #12]
 8007e42:	60b9      	str	r1, [r7, #8]
 8007e44:	603b      	str	r3, [r7, #0]
 8007e46:	4613      	mov	r3, r2
 8007e48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d101      	bne.n	8007e5c <HAL_SPI_Transmit+0x22>
 8007e58:	2302      	movs	r3, #2
 8007e5a:	e126      	b.n	80080aa <HAL_SPI_Transmit+0x270>
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e64:	f7fc fc22 	bl	80046ac <HAL_GetTick>
 8007e68:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007e6a:	88fb      	ldrh	r3, [r7, #6]
 8007e6c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d002      	beq.n	8007e80 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007e7a:	2302      	movs	r3, #2
 8007e7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007e7e:	e10b      	b.n	8008098 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d002      	beq.n	8007e8c <HAL_SPI_Transmit+0x52>
 8007e86:	88fb      	ldrh	r3, [r7, #6]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d102      	bne.n	8007e92 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007e90:	e102      	b.n	8008098 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2203      	movs	r2, #3
 8007e96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	88fa      	ldrh	r2, [r7, #6]
 8007eaa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	88fa      	ldrh	r2, [r7, #6]
 8007eb0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ed8:	d10f      	bne.n	8007efa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ee8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ef8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f04:	2b40      	cmp	r3, #64	; 0x40
 8007f06:	d007      	beq.n	8007f18 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f20:	d14b      	bne.n	8007fba <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d002      	beq.n	8007f30 <HAL_SPI_Transmit+0xf6>
 8007f2a:	8afb      	ldrh	r3, [r7, #22]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d13e      	bne.n	8007fae <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f34:	881a      	ldrh	r2, [r3, #0]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f40:	1c9a      	adds	r2, r3, #2
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	b29a      	uxth	r2, r3
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007f54:	e02b      	b.n	8007fae <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	f003 0302 	and.w	r3, r3, #2
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d112      	bne.n	8007f8a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f68:	881a      	ldrh	r2, [r3, #0]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f74:	1c9a      	adds	r2, r3, #2
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	3b01      	subs	r3, #1
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	86da      	strh	r2, [r3, #54]	; 0x36
 8007f88:	e011      	b.n	8007fae <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f8a:	f7fc fb8f 	bl	80046ac <HAL_GetTick>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	1ad3      	subs	r3, r2, r3
 8007f94:	683a      	ldr	r2, [r7, #0]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d803      	bhi.n	8007fa2 <HAL_SPI_Transmit+0x168>
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fa0:	d102      	bne.n	8007fa8 <HAL_SPI_Transmit+0x16e>
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d102      	bne.n	8007fae <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007fa8:	2303      	movs	r3, #3
 8007faa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007fac:	e074      	b.n	8008098 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1ce      	bne.n	8007f56 <HAL_SPI_Transmit+0x11c>
 8007fb8:	e04c      	b.n	8008054 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d002      	beq.n	8007fc8 <HAL_SPI_Transmit+0x18e>
 8007fc2:	8afb      	ldrh	r3, [r7, #22]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d140      	bne.n	800804a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	330c      	adds	r3, #12
 8007fd2:	7812      	ldrb	r2, [r2, #0]
 8007fd4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fda:	1c5a      	adds	r2, r3, #1
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007fee:	e02c      	b.n	800804a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f003 0302 	and.w	r3, r3, #2
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d113      	bne.n	8008026 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	330c      	adds	r3, #12
 8008008:	7812      	ldrb	r2, [r2, #0]
 800800a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008010:	1c5a      	adds	r2, r3, #1
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800801a:	b29b      	uxth	r3, r3
 800801c:	3b01      	subs	r3, #1
 800801e:	b29a      	uxth	r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	86da      	strh	r2, [r3, #54]	; 0x36
 8008024:	e011      	b.n	800804a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008026:	f7fc fb41 	bl	80046ac <HAL_GetTick>
 800802a:	4602      	mov	r2, r0
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	683a      	ldr	r2, [r7, #0]
 8008032:	429a      	cmp	r2, r3
 8008034:	d803      	bhi.n	800803e <HAL_SPI_Transmit+0x204>
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800803c:	d102      	bne.n	8008044 <HAL_SPI_Transmit+0x20a>
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d102      	bne.n	800804a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008044:	2303      	movs	r3, #3
 8008046:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008048:	e026      	b.n	8008098 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800804e:	b29b      	uxth	r3, r3
 8008050:	2b00      	cmp	r3, #0
 8008052:	d1cd      	bne.n	8007ff0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008054:	69ba      	ldr	r2, [r7, #24]
 8008056:	6839      	ldr	r1, [r7, #0]
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f000 fbcb 	bl	80087f4 <SPI_EndRxTxTransaction>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d002      	beq.n	800806a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2220      	movs	r2, #32
 8008068:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d10a      	bne.n	8008088 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008072:	2300      	movs	r3, #0
 8008074:	613b      	str	r3, [r7, #16]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	613b      	str	r3, [r7, #16]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	613b      	str	r3, [r7, #16]
 8008086:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800808c:	2b00      	cmp	r3, #0
 800808e:	d002      	beq.n	8008096 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	77fb      	strb	r3, [r7, #31]
 8008094:	e000      	b.n	8008098 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008096:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80080a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3720      	adds	r7, #32
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b088      	sub	sp, #32
 80080b6:	af02      	add	r7, sp, #8
 80080b8:	60f8      	str	r0, [r7, #12]
 80080ba:	60b9      	str	r1, [r7, #8]
 80080bc:	603b      	str	r3, [r7, #0]
 80080be:	4613      	mov	r3, r2
 80080c0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080ce:	d112      	bne.n	80080f6 <HAL_SPI_Receive+0x44>
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10e      	bne.n	80080f6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2204      	movs	r2, #4
 80080dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80080e0:	88fa      	ldrh	r2, [r7, #6]
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	9300      	str	r3, [sp, #0]
 80080e6:	4613      	mov	r3, r2
 80080e8:	68ba      	ldr	r2, [r7, #8]
 80080ea:	68b9      	ldr	r1, [r7, #8]
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f000 f8f1 	bl	80082d4 <HAL_SPI_TransmitReceive>
 80080f2:	4603      	mov	r3, r0
 80080f4:	e0ea      	b.n	80082cc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d101      	bne.n	8008104 <HAL_SPI_Receive+0x52>
 8008100:	2302      	movs	r3, #2
 8008102:	e0e3      	b.n	80082cc <HAL_SPI_Receive+0x21a>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800810c:	f7fc face 	bl	80046ac <HAL_GetTick>
 8008110:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008118:	b2db      	uxtb	r3, r3
 800811a:	2b01      	cmp	r3, #1
 800811c:	d002      	beq.n	8008124 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800811e:	2302      	movs	r3, #2
 8008120:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008122:	e0ca      	b.n	80082ba <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d002      	beq.n	8008130 <HAL_SPI_Receive+0x7e>
 800812a:	88fb      	ldrh	r3, [r7, #6]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d102      	bne.n	8008136 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008134:	e0c1      	b.n	80082ba <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2204      	movs	r2, #4
 800813a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2200      	movs	r2, #0
 8008142:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	68ba      	ldr	r2, [r7, #8]
 8008148:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	88fa      	ldrh	r2, [r7, #6]
 800814e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	88fa      	ldrh	r2, [r7, #6]
 8008154:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2200      	movs	r2, #0
 8008166:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2200      	movs	r2, #0
 800816c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2200      	movs	r2, #0
 8008172:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800817c:	d10f      	bne.n	800819e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800818c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800819c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a8:	2b40      	cmp	r3, #64	; 0x40
 80081aa:	d007      	beq.n	80081bc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d162      	bne.n	800828a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80081c4:	e02e      	b.n	8008224 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	f003 0301 	and.w	r3, r3, #1
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d115      	bne.n	8008200 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f103 020c 	add.w	r2, r3, #12
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e0:	7812      	ldrb	r2, [r2, #0]
 80081e2:	b2d2      	uxtb	r2, r2
 80081e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ea:	1c5a      	adds	r2, r3, #1
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	3b01      	subs	r3, #1
 80081f8:	b29a      	uxth	r2, r3
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80081fe:	e011      	b.n	8008224 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008200:	f7fc fa54 	bl	80046ac <HAL_GetTick>
 8008204:	4602      	mov	r2, r0
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	683a      	ldr	r2, [r7, #0]
 800820c:	429a      	cmp	r2, r3
 800820e:	d803      	bhi.n	8008218 <HAL_SPI_Receive+0x166>
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008216:	d102      	bne.n	800821e <HAL_SPI_Receive+0x16c>
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d102      	bne.n	8008224 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008222:	e04a      	b.n	80082ba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008228:	b29b      	uxth	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1cb      	bne.n	80081c6 <HAL_SPI_Receive+0x114>
 800822e:	e031      	b.n	8008294 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	f003 0301 	and.w	r3, r3, #1
 800823a:	2b01      	cmp	r3, #1
 800823c:	d113      	bne.n	8008266 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68da      	ldr	r2, [r3, #12]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008248:	b292      	uxth	r2, r2
 800824a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008250:	1c9a      	adds	r2, r3, #2
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800825a:	b29b      	uxth	r3, r3
 800825c:	3b01      	subs	r3, #1
 800825e:	b29a      	uxth	r2, r3
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008264:	e011      	b.n	800828a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008266:	f7fc fa21 	bl	80046ac <HAL_GetTick>
 800826a:	4602      	mov	r2, r0
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	683a      	ldr	r2, [r7, #0]
 8008272:	429a      	cmp	r2, r3
 8008274:	d803      	bhi.n	800827e <HAL_SPI_Receive+0x1cc>
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800827c:	d102      	bne.n	8008284 <HAL_SPI_Receive+0x1d2>
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d102      	bne.n	800828a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008284:	2303      	movs	r3, #3
 8008286:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008288:	e017      	b.n	80082ba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800828e:	b29b      	uxth	r3, r3
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1cd      	bne.n	8008230 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008294:	693a      	ldr	r2, [r7, #16]
 8008296:	6839      	ldr	r1, [r7, #0]
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f000 fa45 	bl	8008728 <SPI_EndRxTransaction>
 800829e:	4603      	mov	r3, r0
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d002      	beq.n	80082aa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2220      	movs	r2, #32
 80082a8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d002      	beq.n	80082b8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	75fb      	strb	r3, [r7, #23]
 80082b6:	e000      	b.n	80082ba <HAL_SPI_Receive+0x208>
  }

error :
 80082b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2201      	movs	r2, #1
 80082be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80082ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3718      	adds	r7, #24
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b08c      	sub	sp, #48	; 0x30
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	607a      	str	r2, [r7, #4]
 80082e0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80082e2:	2301      	movs	r3, #1
 80082e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80082e6:	2300      	movs	r3, #0
 80082e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d101      	bne.n	80082fa <HAL_SPI_TransmitReceive+0x26>
 80082f6:	2302      	movs	r3, #2
 80082f8:	e18a      	b.n	8008610 <HAL_SPI_TransmitReceive+0x33c>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2201      	movs	r2, #1
 80082fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008302:	f7fc f9d3 	bl	80046ac <HAL_GetTick>
 8008306:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800830e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008318:	887b      	ldrh	r3, [r7, #2]
 800831a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800831c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008320:	2b01      	cmp	r3, #1
 8008322:	d00f      	beq.n	8008344 <HAL_SPI_TransmitReceive+0x70>
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800832a:	d107      	bne.n	800833c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d103      	bne.n	800833c <HAL_SPI_TransmitReceive+0x68>
 8008334:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008338:	2b04      	cmp	r3, #4
 800833a:	d003      	beq.n	8008344 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800833c:	2302      	movs	r3, #2
 800833e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008342:	e15b      	b.n	80085fc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d005      	beq.n	8008356 <HAL_SPI_TransmitReceive+0x82>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d002      	beq.n	8008356 <HAL_SPI_TransmitReceive+0x82>
 8008350:	887b      	ldrh	r3, [r7, #2]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d103      	bne.n	800835e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800835c:	e14e      	b.n	80085fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008364:	b2db      	uxtb	r3, r3
 8008366:	2b04      	cmp	r3, #4
 8008368:	d003      	beq.n	8008372 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2205      	movs	r2, #5
 800836e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2200      	movs	r2, #0
 8008376:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	887a      	ldrh	r2, [r7, #2]
 8008382:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	887a      	ldrh	r2, [r7, #2]
 8008388:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	68ba      	ldr	r2, [r7, #8]
 800838e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	887a      	ldrh	r2, [r7, #2]
 8008394:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	887a      	ldrh	r2, [r7, #2]
 800839a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2200      	movs	r2, #0
 80083a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b2:	2b40      	cmp	r3, #64	; 0x40
 80083b4:	d007      	beq.n	80083c6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083ce:	d178      	bne.n	80084c2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d002      	beq.n	80083de <HAL_SPI_TransmitReceive+0x10a>
 80083d8:	8b7b      	ldrh	r3, [r7, #26]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d166      	bne.n	80084ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e2:	881a      	ldrh	r2, [r3, #0]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ee:	1c9a      	adds	r2, r3, #2
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	3b01      	subs	r3, #1
 80083fc:	b29a      	uxth	r2, r3
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008402:	e053      	b.n	80084ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	f003 0302 	and.w	r3, r3, #2
 800840e:	2b02      	cmp	r3, #2
 8008410:	d11b      	bne.n	800844a <HAL_SPI_TransmitReceive+0x176>
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008416:	b29b      	uxth	r3, r3
 8008418:	2b00      	cmp	r3, #0
 800841a:	d016      	beq.n	800844a <HAL_SPI_TransmitReceive+0x176>
 800841c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841e:	2b01      	cmp	r3, #1
 8008420:	d113      	bne.n	800844a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008426:	881a      	ldrh	r2, [r3, #0]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008432:	1c9a      	adds	r2, r3, #2
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800843c:	b29b      	uxth	r3, r3
 800843e:	3b01      	subs	r3, #1
 8008440:	b29a      	uxth	r2, r3
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008446:	2300      	movs	r3, #0
 8008448:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	f003 0301 	and.w	r3, r3, #1
 8008454:	2b01      	cmp	r3, #1
 8008456:	d119      	bne.n	800848c <HAL_SPI_TransmitReceive+0x1b8>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800845c:	b29b      	uxth	r3, r3
 800845e:	2b00      	cmp	r3, #0
 8008460:	d014      	beq.n	800848c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68da      	ldr	r2, [r3, #12]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800846c:	b292      	uxth	r2, r2
 800846e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008474:	1c9a      	adds	r2, r3, #2
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800847e:	b29b      	uxth	r3, r3
 8008480:	3b01      	subs	r3, #1
 8008482:	b29a      	uxth	r2, r3
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008488:	2301      	movs	r3, #1
 800848a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800848c:	f7fc f90e 	bl	80046ac <HAL_GetTick>
 8008490:	4602      	mov	r2, r0
 8008492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008494:	1ad3      	subs	r3, r2, r3
 8008496:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008498:	429a      	cmp	r2, r3
 800849a:	d807      	bhi.n	80084ac <HAL_SPI_TransmitReceive+0x1d8>
 800849c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a2:	d003      	beq.n	80084ac <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80084a4:	2303      	movs	r3, #3
 80084a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80084aa:	e0a7      	b.n	80085fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1a6      	bne.n	8008404 <HAL_SPI_TransmitReceive+0x130>
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d1a1      	bne.n	8008404 <HAL_SPI_TransmitReceive+0x130>
 80084c0:	e07c      	b.n	80085bc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d002      	beq.n	80084d0 <HAL_SPI_TransmitReceive+0x1fc>
 80084ca:	8b7b      	ldrh	r3, [r7, #26]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d16b      	bne.n	80085a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	330c      	adds	r3, #12
 80084da:	7812      	ldrb	r2, [r2, #0]
 80084dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e2:	1c5a      	adds	r2, r3, #1
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	3b01      	subs	r3, #1
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084f6:	e057      	b.n	80085a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	f003 0302 	and.w	r3, r3, #2
 8008502:	2b02      	cmp	r3, #2
 8008504:	d11c      	bne.n	8008540 <HAL_SPI_TransmitReceive+0x26c>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800850a:	b29b      	uxth	r3, r3
 800850c:	2b00      	cmp	r3, #0
 800850e:	d017      	beq.n	8008540 <HAL_SPI_TransmitReceive+0x26c>
 8008510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008512:	2b01      	cmp	r3, #1
 8008514:	d114      	bne.n	8008540 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	330c      	adds	r3, #12
 8008520:	7812      	ldrb	r2, [r2, #0]
 8008522:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008528:	1c5a      	adds	r2, r3, #1
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008532:	b29b      	uxth	r3, r3
 8008534:	3b01      	subs	r3, #1
 8008536:	b29a      	uxth	r2, r3
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800853c:	2300      	movs	r3, #0
 800853e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	f003 0301 	and.w	r3, r3, #1
 800854a:	2b01      	cmp	r3, #1
 800854c:	d119      	bne.n	8008582 <HAL_SPI_TransmitReceive+0x2ae>
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008552:	b29b      	uxth	r3, r3
 8008554:	2b00      	cmp	r3, #0
 8008556:	d014      	beq.n	8008582 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	68da      	ldr	r2, [r3, #12]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008562:	b2d2      	uxtb	r2, r2
 8008564:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800856a:	1c5a      	adds	r2, r3, #1
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008574:	b29b      	uxth	r3, r3
 8008576:	3b01      	subs	r3, #1
 8008578:	b29a      	uxth	r2, r3
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800857e:	2301      	movs	r3, #1
 8008580:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008582:	f7fc f893 	bl	80046ac <HAL_GetTick>
 8008586:	4602      	mov	r2, r0
 8008588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858a:	1ad3      	subs	r3, r2, r3
 800858c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800858e:	429a      	cmp	r2, r3
 8008590:	d803      	bhi.n	800859a <HAL_SPI_TransmitReceive+0x2c6>
 8008592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008598:	d102      	bne.n	80085a0 <HAL_SPI_TransmitReceive+0x2cc>
 800859a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859c:	2b00      	cmp	r3, #0
 800859e:	d103      	bne.n	80085a8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80085a0:	2303      	movs	r3, #3
 80085a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80085a6:	e029      	b.n	80085fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d1a2      	bne.n	80084f8 <HAL_SPI_TransmitReceive+0x224>
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d19d      	bne.n	80084f8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80085bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f000 f917 	bl	80087f4 <SPI_EndRxTxTransaction>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d006      	beq.n	80085da <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2220      	movs	r2, #32
 80085d6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80085d8:	e010      	b.n	80085fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d10b      	bne.n	80085fa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80085e2:	2300      	movs	r3, #0
 80085e4:	617b      	str	r3, [r7, #20]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	617b      	str	r3, [r7, #20]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	617b      	str	r3, [r7, #20]
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	e000      	b.n	80085fc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80085fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800860c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008610:	4618      	mov	r0, r3
 8008612:	3730      	adds	r7, #48	; 0x30
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b088      	sub	sp, #32
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	603b      	str	r3, [r7, #0]
 8008624:	4613      	mov	r3, r2
 8008626:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008628:	f7fc f840 	bl	80046ac <HAL_GetTick>
 800862c:	4602      	mov	r2, r0
 800862e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008630:	1a9b      	subs	r3, r3, r2
 8008632:	683a      	ldr	r2, [r7, #0]
 8008634:	4413      	add	r3, r2
 8008636:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008638:	f7fc f838 	bl	80046ac <HAL_GetTick>
 800863c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800863e:	4b39      	ldr	r3, [pc, #228]	; (8008724 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	015b      	lsls	r3, r3, #5
 8008644:	0d1b      	lsrs	r3, r3, #20
 8008646:	69fa      	ldr	r2, [r7, #28]
 8008648:	fb02 f303 	mul.w	r3, r2, r3
 800864c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800864e:	e054      	b.n	80086fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008656:	d050      	beq.n	80086fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008658:	f7fc f828 	bl	80046ac <HAL_GetTick>
 800865c:	4602      	mov	r2, r0
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	69fa      	ldr	r2, [r7, #28]
 8008664:	429a      	cmp	r2, r3
 8008666:	d902      	bls.n	800866e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d13d      	bne.n	80086ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	685a      	ldr	r2, [r3, #4]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800867c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008686:	d111      	bne.n	80086ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008690:	d004      	beq.n	800869c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800869a:	d107      	bne.n	80086ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086b4:	d10f      	bne.n	80086d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80086c4:	601a      	str	r2, [r3, #0]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80086d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2201      	movs	r2, #1
 80086da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80086e6:	2303      	movs	r3, #3
 80086e8:	e017      	b.n	800871a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d101      	bne.n	80086f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80086f0:	2300      	movs	r3, #0
 80086f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	3b01      	subs	r3, #1
 80086f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	689a      	ldr	r2, [r3, #8]
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	4013      	ands	r3, r2
 8008704:	68ba      	ldr	r2, [r7, #8]
 8008706:	429a      	cmp	r2, r3
 8008708:	bf0c      	ite	eq
 800870a:	2301      	moveq	r3, #1
 800870c:	2300      	movne	r3, #0
 800870e:	b2db      	uxtb	r3, r3
 8008710:	461a      	mov	r2, r3
 8008712:	79fb      	ldrb	r3, [r7, #7]
 8008714:	429a      	cmp	r2, r3
 8008716:	d19b      	bne.n	8008650 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3720      	adds	r7, #32
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	20000ad8 	.word	0x20000ad8

08008728 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b086      	sub	sp, #24
 800872c:	af02      	add	r7, sp, #8
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800873c:	d111      	bne.n	8008762 <SPI_EndRxTransaction+0x3a>
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008746:	d004      	beq.n	8008752 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008750:	d107      	bne.n	8008762 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008760:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800876a:	d12a      	bne.n	80087c2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008774:	d012      	beq.n	800879c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	9300      	str	r3, [sp, #0]
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	2200      	movs	r2, #0
 800877e:	2180      	movs	r1, #128	; 0x80
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f7ff ff49 	bl	8008618 <SPI_WaitFlagStateUntilTimeout>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d02d      	beq.n	80087e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008790:	f043 0220 	orr.w	r2, r3, #32
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e026      	b.n	80087ea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	9300      	str	r3, [sp, #0]
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	2200      	movs	r2, #0
 80087a4:	2101      	movs	r1, #1
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	f7ff ff36 	bl	8008618 <SPI_WaitFlagStateUntilTimeout>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d01a      	beq.n	80087e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087b6:	f043 0220 	orr.w	r2, r3, #32
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80087be:	2303      	movs	r3, #3
 80087c0:	e013      	b.n	80087ea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	9300      	str	r3, [sp, #0]
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	2200      	movs	r2, #0
 80087ca:	2101      	movs	r1, #1
 80087cc:	68f8      	ldr	r0, [r7, #12]
 80087ce:	f7ff ff23 	bl	8008618 <SPI_WaitFlagStateUntilTimeout>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d007      	beq.n	80087e8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087dc:	f043 0220 	orr.w	r2, r3, #32
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80087e4:	2303      	movs	r3, #3
 80087e6:	e000      	b.n	80087ea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
	...

080087f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b088      	sub	sp, #32
 80087f8:	af02      	add	r7, sp, #8
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008800:	4b1b      	ldr	r3, [pc, #108]	; (8008870 <SPI_EndRxTxTransaction+0x7c>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a1b      	ldr	r2, [pc, #108]	; (8008874 <SPI_EndRxTxTransaction+0x80>)
 8008806:	fba2 2303 	umull	r2, r3, r2, r3
 800880a:	0d5b      	lsrs	r3, r3, #21
 800880c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008810:	fb02 f303 	mul.w	r3, r2, r3
 8008814:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800881e:	d112      	bne.n	8008846 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	9300      	str	r3, [sp, #0]
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2200      	movs	r2, #0
 8008828:	2180      	movs	r1, #128	; 0x80
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f7ff fef4 	bl	8008618 <SPI_WaitFlagStateUntilTimeout>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	d016      	beq.n	8008864 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800883a:	f043 0220 	orr.w	r2, r3, #32
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008842:	2303      	movs	r3, #3
 8008844:	e00f      	b.n	8008866 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d00a      	beq.n	8008862 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	3b01      	subs	r3, #1
 8008850:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800885c:	2b80      	cmp	r3, #128	; 0x80
 800885e:	d0f2      	beq.n	8008846 <SPI_EndRxTxTransaction+0x52>
 8008860:	e000      	b.n	8008864 <SPI_EndRxTxTransaction+0x70>
        break;
 8008862:	bf00      	nop
  }

  return HAL_OK;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3718      	adds	r7, #24
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	20000ad8 	.word	0x20000ad8
 8008874:	165e9f81 	.word	0x165e9f81

08008878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d101      	bne.n	800888a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	e041      	b.n	800890e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008890:	b2db      	uxtb	r3, r3
 8008892:	2b00      	cmp	r3, #0
 8008894:	d106      	bne.n	80088a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f7fb fdbe 	bl	8004420 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2202      	movs	r2, #2
 80088a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	3304      	adds	r3, #4
 80088b4:	4619      	mov	r1, r3
 80088b6:	4610      	mov	r0, r2
 80088b8:	f000 fd54 	bl	8009364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3708      	adds	r7, #8
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
	...

08008918 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008926:	b2db      	uxtb	r3, r3
 8008928:	2b01      	cmp	r3, #1
 800892a:	d001      	beq.n	8008930 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	e03c      	b.n	80089aa <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2202      	movs	r2, #2
 8008934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a1e      	ldr	r2, [pc, #120]	; (80089b8 <HAL_TIM_Base_Start+0xa0>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d018      	beq.n	8008974 <HAL_TIM_Base_Start+0x5c>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800894a:	d013      	beq.n	8008974 <HAL_TIM_Base_Start+0x5c>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a1a      	ldr	r2, [pc, #104]	; (80089bc <HAL_TIM_Base_Start+0xa4>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d00e      	beq.n	8008974 <HAL_TIM_Base_Start+0x5c>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a19      	ldr	r2, [pc, #100]	; (80089c0 <HAL_TIM_Base_Start+0xa8>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d009      	beq.n	8008974 <HAL_TIM_Base_Start+0x5c>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a17      	ldr	r2, [pc, #92]	; (80089c4 <HAL_TIM_Base_Start+0xac>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d004      	beq.n	8008974 <HAL_TIM_Base_Start+0x5c>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a16      	ldr	r2, [pc, #88]	; (80089c8 <HAL_TIM_Base_Start+0xb0>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d111      	bne.n	8008998 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	f003 0307 	and.w	r3, r3, #7
 800897e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2b06      	cmp	r3, #6
 8008984:	d010      	beq.n	80089a8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f042 0201 	orr.w	r2, r2, #1
 8008994:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008996:	e007      	b.n	80089a8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f042 0201 	orr.w	r2, r2, #1
 80089a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3714      	adds	r7, #20
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	40010000 	.word	0x40010000
 80089bc:	40000400 	.word	0x40000400
 80089c0:	40000800 	.word	0x40000800
 80089c4:	40000c00 	.word	0x40000c00
 80089c8:	40014000 	.word	0x40014000

080089cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b085      	sub	sp, #20
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d001      	beq.n	80089e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	e044      	b.n	8008a6e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2202      	movs	r2, #2
 80089e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	68da      	ldr	r2, [r3, #12]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f042 0201 	orr.w	r2, r2, #1
 80089fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a1e      	ldr	r2, [pc, #120]	; (8008a7c <HAL_TIM_Base_Start_IT+0xb0>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d018      	beq.n	8008a38 <HAL_TIM_Base_Start_IT+0x6c>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a0e:	d013      	beq.n	8008a38 <HAL_TIM_Base_Start_IT+0x6c>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a1a      	ldr	r2, [pc, #104]	; (8008a80 <HAL_TIM_Base_Start_IT+0xb4>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d00e      	beq.n	8008a38 <HAL_TIM_Base_Start_IT+0x6c>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a19      	ldr	r2, [pc, #100]	; (8008a84 <HAL_TIM_Base_Start_IT+0xb8>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d009      	beq.n	8008a38 <HAL_TIM_Base_Start_IT+0x6c>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a17      	ldr	r2, [pc, #92]	; (8008a88 <HAL_TIM_Base_Start_IT+0xbc>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d004      	beq.n	8008a38 <HAL_TIM_Base_Start_IT+0x6c>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a16      	ldr	r2, [pc, #88]	; (8008a8c <HAL_TIM_Base_Start_IT+0xc0>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d111      	bne.n	8008a5c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	f003 0307 	and.w	r3, r3, #7
 8008a42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2b06      	cmp	r3, #6
 8008a48:	d010      	beq.n	8008a6c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f042 0201 	orr.w	r2, r2, #1
 8008a58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a5a:	e007      	b.n	8008a6c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f042 0201 	orr.w	r2, r2, #1
 8008a6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3714      	adds	r7, #20
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr
 8008a7a:	bf00      	nop
 8008a7c:	40010000 	.word	0x40010000
 8008a80:	40000400 	.word	0x40000400
 8008a84:	40000800 	.word	0x40000800
 8008a88:	40000c00 	.word	0x40000c00
 8008a8c:	40014000 	.word	0x40014000

08008a90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d101      	bne.n	8008aa2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e041      	b.n	8008b26 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d106      	bne.n	8008abc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f839 	bl	8008b2e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2202      	movs	r2, #2
 8008ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	3304      	adds	r3, #4
 8008acc:	4619      	mov	r1, r3
 8008ace:	4610      	mov	r0, r2
 8008ad0:	f000 fc48 	bl	8009364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2201      	movs	r2, #1
 8008af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2201      	movs	r2, #1
 8008b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2201      	movs	r2, #1
 8008b08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3708      	adds	r7, #8
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008b2e:	b480      	push	{r7}
 8008b30:	b083      	sub	sp, #12
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008b36:	bf00      	nop
 8008b38:	370c      	adds	r7, #12
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr
	...

08008b44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d109      	bne.n	8008b68 <HAL_TIM_PWM_Start+0x24>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	bf14      	ite	ne
 8008b60:	2301      	movne	r3, #1
 8008b62:	2300      	moveq	r3, #0
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	e022      	b.n	8008bae <HAL_TIM_PWM_Start+0x6a>
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	2b04      	cmp	r3, #4
 8008b6c:	d109      	bne.n	8008b82 <HAL_TIM_PWM_Start+0x3e>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	bf14      	ite	ne
 8008b7a:	2301      	movne	r3, #1
 8008b7c:	2300      	moveq	r3, #0
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	e015      	b.n	8008bae <HAL_TIM_PWM_Start+0x6a>
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	2b08      	cmp	r3, #8
 8008b86:	d109      	bne.n	8008b9c <HAL_TIM_PWM_Start+0x58>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	bf14      	ite	ne
 8008b94:	2301      	movne	r3, #1
 8008b96:	2300      	moveq	r3, #0
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	e008      	b.n	8008bae <HAL_TIM_PWM_Start+0x6a>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	bf14      	ite	ne
 8008ba8:	2301      	movne	r3, #1
 8008baa:	2300      	moveq	r3, #0
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d001      	beq.n	8008bb6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e068      	b.n	8008c88 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d104      	bne.n	8008bc6 <HAL_TIM_PWM_Start+0x82>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2202      	movs	r2, #2
 8008bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bc4:	e013      	b.n	8008bee <HAL_TIM_PWM_Start+0xaa>
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	2b04      	cmp	r3, #4
 8008bca:	d104      	bne.n	8008bd6 <HAL_TIM_PWM_Start+0x92>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2202      	movs	r2, #2
 8008bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bd4:	e00b      	b.n	8008bee <HAL_TIM_PWM_Start+0xaa>
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	2b08      	cmp	r3, #8
 8008bda:	d104      	bne.n	8008be6 <HAL_TIM_PWM_Start+0xa2>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2202      	movs	r2, #2
 8008be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008be4:	e003      	b.n	8008bee <HAL_TIM_PWM_Start+0xaa>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2202      	movs	r2, #2
 8008bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	6839      	ldr	r1, [r7, #0]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f000 fe5a 	bl	80098b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a23      	ldr	r2, [pc, #140]	; (8008c90 <HAL_TIM_PWM_Start+0x14c>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d107      	bne.n	8008c16 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a1d      	ldr	r2, [pc, #116]	; (8008c90 <HAL_TIM_PWM_Start+0x14c>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d018      	beq.n	8008c52 <HAL_TIM_PWM_Start+0x10e>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c28:	d013      	beq.n	8008c52 <HAL_TIM_PWM_Start+0x10e>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a19      	ldr	r2, [pc, #100]	; (8008c94 <HAL_TIM_PWM_Start+0x150>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d00e      	beq.n	8008c52 <HAL_TIM_PWM_Start+0x10e>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a17      	ldr	r2, [pc, #92]	; (8008c98 <HAL_TIM_PWM_Start+0x154>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d009      	beq.n	8008c52 <HAL_TIM_PWM_Start+0x10e>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a16      	ldr	r2, [pc, #88]	; (8008c9c <HAL_TIM_PWM_Start+0x158>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d004      	beq.n	8008c52 <HAL_TIM_PWM_Start+0x10e>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a14      	ldr	r2, [pc, #80]	; (8008ca0 <HAL_TIM_PWM_Start+0x15c>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d111      	bne.n	8008c76 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	f003 0307 	and.w	r3, r3, #7
 8008c5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2b06      	cmp	r3, #6
 8008c62:	d010      	beq.n	8008c86 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f042 0201 	orr.w	r2, r2, #1
 8008c72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c74:	e007      	b.n	8008c86 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f042 0201 	orr.w	r2, r2, #1
 8008c84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3710      	adds	r7, #16
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	40010000 	.word	0x40010000
 8008c94:	40000400 	.word	0x40000400
 8008c98:	40000800 	.word	0x40000800
 8008c9c:	40000c00 	.word	0x40000c00
 8008ca0:	40014000 	.word	0x40014000

08008ca4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b086      	sub	sp, #24
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d101      	bne.n	8008cb8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e097      	b.n	8008de8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d106      	bne.n	8008cd2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f7fb fb2b 	bl	8004328 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2202      	movs	r2, #2
 8008cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	6812      	ldr	r2, [r2, #0]
 8008ce4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ce8:	f023 0307 	bic.w	r3, r3, #7
 8008cec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	3304      	adds	r3, #4
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	4610      	mov	r0, r2
 8008cfa:	f000 fb33 	bl	8009364 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	699b      	ldr	r3, [r3, #24]
 8008d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	6a1b      	ldr	r3, [r3, #32]
 8008d14:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	697a      	ldr	r2, [r7, #20]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d26:	f023 0303 	bic.w	r3, r3, #3
 8008d2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	689a      	ldr	r2, [r3, #8]
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	699b      	ldr	r3, [r3, #24]
 8008d34:	021b      	lsls	r3, r3, #8
 8008d36:	4313      	orrs	r3, r2
 8008d38:	693a      	ldr	r2, [r7, #16]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008d44:	f023 030c 	bic.w	r3, r3, #12
 8008d48:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	68da      	ldr	r2, [r3, #12]
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	69db      	ldr	r3, [r3, #28]
 8008d5e:	021b      	lsls	r3, r3, #8
 8008d60:	4313      	orrs	r3, r2
 8008d62:	693a      	ldr	r2, [r7, #16]
 8008d64:	4313      	orrs	r3, r2
 8008d66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	011a      	lsls	r2, r3, #4
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	6a1b      	ldr	r3, [r3, #32]
 8008d72:	031b      	lsls	r3, r3, #12
 8008d74:	4313      	orrs	r3, r2
 8008d76:	693a      	ldr	r2, [r7, #16]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008d82:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008d8a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	685a      	ldr	r2, [r3, #4]
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	695b      	ldr	r3, [r3, #20]
 8008d94:	011b      	lsls	r3, r3, #4
 8008d96:	4313      	orrs	r3, r2
 8008d98:	68fa      	ldr	r2, [r7, #12]
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	697a      	ldr	r2, [r7, #20]
 8008da4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	693a      	ldr	r2, [r7, #16]
 8008dac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2201      	movs	r2, #1
 8008dba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2201      	movs	r2, #1
 8008de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3718      	adds	r7, #24
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	f003 0302 	and.w	r3, r3, #2
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d122      	bne.n	8008e4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	f003 0302 	and.w	r3, r3, #2
 8008e10:	2b02      	cmp	r3, #2
 8008e12:	d11b      	bne.n	8008e4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f06f 0202 	mvn.w	r2, #2
 8008e1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2201      	movs	r2, #1
 8008e22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	699b      	ldr	r3, [r3, #24]
 8008e2a:	f003 0303 	and.w	r3, r3, #3
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d003      	beq.n	8008e3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 fa77 	bl	8009326 <HAL_TIM_IC_CaptureCallback>
 8008e38:	e005      	b.n	8008e46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 fa69 	bl	8009312 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 fa7a 	bl	800933a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	691b      	ldr	r3, [r3, #16]
 8008e52:	f003 0304 	and.w	r3, r3, #4
 8008e56:	2b04      	cmp	r3, #4
 8008e58:	d122      	bne.n	8008ea0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	f003 0304 	and.w	r3, r3, #4
 8008e64:	2b04      	cmp	r3, #4
 8008e66:	d11b      	bne.n	8008ea0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f06f 0204 	mvn.w	r2, #4
 8008e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2202      	movs	r2, #2
 8008e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	699b      	ldr	r3, [r3, #24]
 8008e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d003      	beq.n	8008e8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 fa4d 	bl	8009326 <HAL_TIM_IC_CaptureCallback>
 8008e8c:	e005      	b.n	8008e9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 fa3f 	bl	8009312 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 fa50 	bl	800933a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	f003 0308 	and.w	r3, r3, #8
 8008eaa:	2b08      	cmp	r3, #8
 8008eac:	d122      	bne.n	8008ef4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	f003 0308 	and.w	r3, r3, #8
 8008eb8:	2b08      	cmp	r3, #8
 8008eba:	d11b      	bne.n	8008ef4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f06f 0208 	mvn.w	r2, #8
 8008ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2204      	movs	r2, #4
 8008eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	69db      	ldr	r3, [r3, #28]
 8008ed2:	f003 0303 	and.w	r3, r3, #3
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d003      	beq.n	8008ee2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 fa23 	bl	8009326 <HAL_TIM_IC_CaptureCallback>
 8008ee0:	e005      	b.n	8008eee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 fa15 	bl	8009312 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 fa26 	bl	800933a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	f003 0310 	and.w	r3, r3, #16
 8008efe:	2b10      	cmp	r3, #16
 8008f00:	d122      	bne.n	8008f48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	f003 0310 	and.w	r3, r3, #16
 8008f0c:	2b10      	cmp	r3, #16
 8008f0e:	d11b      	bne.n	8008f48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f06f 0210 	mvn.w	r2, #16
 8008f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2208      	movs	r2, #8
 8008f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	69db      	ldr	r3, [r3, #28]
 8008f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d003      	beq.n	8008f36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 f9f9 	bl	8009326 <HAL_TIM_IC_CaptureCallback>
 8008f34:	e005      	b.n	8008f42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 f9eb 	bl	8009312 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 f9fc 	bl	800933a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	f003 0301 	and.w	r3, r3, #1
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d10e      	bne.n	8008f74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	f003 0301 	and.w	r3, r3, #1
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d107      	bne.n	8008f74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f06f 0201 	mvn.w	r2, #1
 8008f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f7f8 f90a 	bl	8001188 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	691b      	ldr	r3, [r3, #16]
 8008f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f7e:	2b80      	cmp	r3, #128	; 0x80
 8008f80:	d10e      	bne.n	8008fa0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f8c:	2b80      	cmp	r3, #128	; 0x80
 8008f8e:	d107      	bne.n	8008fa0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 fd26 	bl	80099ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008faa:	2b40      	cmp	r3, #64	; 0x40
 8008fac:	d10e      	bne.n	8008fcc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fb8:	2b40      	cmp	r3, #64	; 0x40
 8008fba:	d107      	bne.n	8008fcc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 f9c1 	bl	800934e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	f003 0320 	and.w	r3, r3, #32
 8008fd6:	2b20      	cmp	r3, #32
 8008fd8:	d10e      	bne.n	8008ff8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	f003 0320 	and.w	r3, r3, #32
 8008fe4:	2b20      	cmp	r3, #32
 8008fe6:	d107      	bne.n	8008ff8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f06f 0220 	mvn.w	r2, #32
 8008ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 fcf0 	bl	80099d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ff8:	bf00      	nop
 8008ffa:	3708      	adds	r7, #8
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b086      	sub	sp, #24
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800900c:	2300      	movs	r3, #0
 800900e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009016:	2b01      	cmp	r3, #1
 8009018:	d101      	bne.n	800901e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800901a:	2302      	movs	r3, #2
 800901c:	e0ae      	b.n	800917c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2201      	movs	r2, #1
 8009022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2b0c      	cmp	r3, #12
 800902a:	f200 809f 	bhi.w	800916c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800902e:	a201      	add	r2, pc, #4	; (adr r2, 8009034 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009034:	08009069 	.word	0x08009069
 8009038:	0800916d 	.word	0x0800916d
 800903c:	0800916d 	.word	0x0800916d
 8009040:	0800916d 	.word	0x0800916d
 8009044:	080090a9 	.word	0x080090a9
 8009048:	0800916d 	.word	0x0800916d
 800904c:	0800916d 	.word	0x0800916d
 8009050:	0800916d 	.word	0x0800916d
 8009054:	080090eb 	.word	0x080090eb
 8009058:	0800916d 	.word	0x0800916d
 800905c:	0800916d 	.word	0x0800916d
 8009060:	0800916d 	.word	0x0800916d
 8009064:	0800912b 	.word	0x0800912b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	68b9      	ldr	r1, [r7, #8]
 800906e:	4618      	mov	r0, r3
 8009070:	f000 f9f8 	bl	8009464 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	699a      	ldr	r2, [r3, #24]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f042 0208 	orr.w	r2, r2, #8
 8009082:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	699a      	ldr	r2, [r3, #24]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f022 0204 	bic.w	r2, r2, #4
 8009092:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	6999      	ldr	r1, [r3, #24]
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	691a      	ldr	r2, [r3, #16]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	430a      	orrs	r2, r1
 80090a4:	619a      	str	r2, [r3, #24]
      break;
 80090a6:	e064      	b.n	8009172 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	68b9      	ldr	r1, [r7, #8]
 80090ae:	4618      	mov	r0, r3
 80090b0:	f000 fa3e 	bl	8009530 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	699a      	ldr	r2, [r3, #24]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	699a      	ldr	r2, [r3, #24]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	6999      	ldr	r1, [r3, #24]
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	021a      	lsls	r2, r3, #8
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	430a      	orrs	r2, r1
 80090e6:	619a      	str	r2, [r3, #24]
      break;
 80090e8:	e043      	b.n	8009172 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	68b9      	ldr	r1, [r7, #8]
 80090f0:	4618      	mov	r0, r3
 80090f2:	f000 fa89 	bl	8009608 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	69da      	ldr	r2, [r3, #28]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f042 0208 	orr.w	r2, r2, #8
 8009104:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	69da      	ldr	r2, [r3, #28]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f022 0204 	bic.w	r2, r2, #4
 8009114:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	69d9      	ldr	r1, [r3, #28]
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	691a      	ldr	r2, [r3, #16]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	430a      	orrs	r2, r1
 8009126:	61da      	str	r2, [r3, #28]
      break;
 8009128:	e023      	b.n	8009172 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	68b9      	ldr	r1, [r7, #8]
 8009130:	4618      	mov	r0, r3
 8009132:	f000 fad3 	bl	80096dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	69da      	ldr	r2, [r3, #28]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009144:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	69da      	ldr	r2, [r3, #28]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009154:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	69d9      	ldr	r1, [r3, #28]
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	691b      	ldr	r3, [r3, #16]
 8009160:	021a      	lsls	r2, r3, #8
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	430a      	orrs	r2, r1
 8009168:	61da      	str	r2, [r3, #28]
      break;
 800916a:	e002      	b.n	8009172 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800916c:	2301      	movs	r3, #1
 800916e:	75fb      	strb	r3, [r7, #23]
      break;
 8009170:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2200      	movs	r2, #0
 8009176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800917a:	7dfb      	ldrb	r3, [r7, #23]
}
 800917c:	4618      	mov	r0, r3
 800917e:	3718      	adds	r7, #24
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800918e:	2300      	movs	r3, #0
 8009190:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009198:	2b01      	cmp	r3, #1
 800919a:	d101      	bne.n	80091a0 <HAL_TIM_ConfigClockSource+0x1c>
 800919c:	2302      	movs	r3, #2
 800919e:	e0b4      	b.n	800930a <HAL_TIM_ConfigClockSource+0x186>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2202      	movs	r2, #2
 80091ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80091be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	68ba      	ldr	r2, [r7, #8]
 80091ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091d8:	d03e      	beq.n	8009258 <HAL_TIM_ConfigClockSource+0xd4>
 80091da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091de:	f200 8087 	bhi.w	80092f0 <HAL_TIM_ConfigClockSource+0x16c>
 80091e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091e6:	f000 8086 	beq.w	80092f6 <HAL_TIM_ConfigClockSource+0x172>
 80091ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091ee:	d87f      	bhi.n	80092f0 <HAL_TIM_ConfigClockSource+0x16c>
 80091f0:	2b70      	cmp	r3, #112	; 0x70
 80091f2:	d01a      	beq.n	800922a <HAL_TIM_ConfigClockSource+0xa6>
 80091f4:	2b70      	cmp	r3, #112	; 0x70
 80091f6:	d87b      	bhi.n	80092f0 <HAL_TIM_ConfigClockSource+0x16c>
 80091f8:	2b60      	cmp	r3, #96	; 0x60
 80091fa:	d050      	beq.n	800929e <HAL_TIM_ConfigClockSource+0x11a>
 80091fc:	2b60      	cmp	r3, #96	; 0x60
 80091fe:	d877      	bhi.n	80092f0 <HAL_TIM_ConfigClockSource+0x16c>
 8009200:	2b50      	cmp	r3, #80	; 0x50
 8009202:	d03c      	beq.n	800927e <HAL_TIM_ConfigClockSource+0xfa>
 8009204:	2b50      	cmp	r3, #80	; 0x50
 8009206:	d873      	bhi.n	80092f0 <HAL_TIM_ConfigClockSource+0x16c>
 8009208:	2b40      	cmp	r3, #64	; 0x40
 800920a:	d058      	beq.n	80092be <HAL_TIM_ConfigClockSource+0x13a>
 800920c:	2b40      	cmp	r3, #64	; 0x40
 800920e:	d86f      	bhi.n	80092f0 <HAL_TIM_ConfigClockSource+0x16c>
 8009210:	2b30      	cmp	r3, #48	; 0x30
 8009212:	d064      	beq.n	80092de <HAL_TIM_ConfigClockSource+0x15a>
 8009214:	2b30      	cmp	r3, #48	; 0x30
 8009216:	d86b      	bhi.n	80092f0 <HAL_TIM_ConfigClockSource+0x16c>
 8009218:	2b20      	cmp	r3, #32
 800921a:	d060      	beq.n	80092de <HAL_TIM_ConfigClockSource+0x15a>
 800921c:	2b20      	cmp	r3, #32
 800921e:	d867      	bhi.n	80092f0 <HAL_TIM_ConfigClockSource+0x16c>
 8009220:	2b00      	cmp	r3, #0
 8009222:	d05c      	beq.n	80092de <HAL_TIM_ConfigClockSource+0x15a>
 8009224:	2b10      	cmp	r3, #16
 8009226:	d05a      	beq.n	80092de <HAL_TIM_ConfigClockSource+0x15a>
 8009228:	e062      	b.n	80092f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6818      	ldr	r0, [r3, #0]
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	6899      	ldr	r1, [r3, #8]
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	685a      	ldr	r2, [r3, #4]
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	f000 fb19 	bl	8009870 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800924c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	68ba      	ldr	r2, [r7, #8]
 8009254:	609a      	str	r2, [r3, #8]
      break;
 8009256:	e04f      	b.n	80092f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6818      	ldr	r0, [r3, #0]
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	6899      	ldr	r1, [r3, #8]
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	685a      	ldr	r2, [r3, #4]
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	f000 fb02 	bl	8009870 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	689a      	ldr	r2, [r3, #8]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800927a:	609a      	str	r2, [r3, #8]
      break;
 800927c:	e03c      	b.n	80092f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6818      	ldr	r0, [r3, #0]
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	6859      	ldr	r1, [r3, #4]
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	68db      	ldr	r3, [r3, #12]
 800928a:	461a      	mov	r2, r3
 800928c:	f000 fa76 	bl	800977c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2150      	movs	r1, #80	; 0x50
 8009296:	4618      	mov	r0, r3
 8009298:	f000 facf 	bl	800983a <TIM_ITRx_SetConfig>
      break;
 800929c:	e02c      	b.n	80092f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6818      	ldr	r0, [r3, #0]
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	6859      	ldr	r1, [r3, #4]
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	461a      	mov	r2, r3
 80092ac:	f000 fa95 	bl	80097da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2160      	movs	r1, #96	; 0x60
 80092b6:	4618      	mov	r0, r3
 80092b8:	f000 fabf 	bl	800983a <TIM_ITRx_SetConfig>
      break;
 80092bc:	e01c      	b.n	80092f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6818      	ldr	r0, [r3, #0]
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	6859      	ldr	r1, [r3, #4]
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	461a      	mov	r2, r3
 80092cc:	f000 fa56 	bl	800977c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2140      	movs	r1, #64	; 0x40
 80092d6:	4618      	mov	r0, r3
 80092d8:	f000 faaf 	bl	800983a <TIM_ITRx_SetConfig>
      break;
 80092dc:	e00c      	b.n	80092f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4619      	mov	r1, r3
 80092e8:	4610      	mov	r0, r2
 80092ea:	f000 faa6 	bl	800983a <TIM_ITRx_SetConfig>
      break;
 80092ee:	e003      	b.n	80092f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	73fb      	strb	r3, [r7, #15]
      break;
 80092f4:	e000      	b.n	80092f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80092f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009308:	7bfb      	ldrb	r3, [r7, #15]
}
 800930a:	4618      	mov	r0, r3
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009312:	b480      	push	{r7}
 8009314:	b083      	sub	sp, #12
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800931a:	bf00      	nop
 800931c:	370c      	adds	r7, #12
 800931e:	46bd      	mov	sp, r7
 8009320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009324:	4770      	bx	lr

08009326 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009326:	b480      	push	{r7}
 8009328:	b083      	sub	sp, #12
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800932e:	bf00      	nop
 8009330:	370c      	adds	r7, #12
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr

0800933a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800933a:	b480      	push	{r7}
 800933c:	b083      	sub	sp, #12
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009342:	bf00      	nop
 8009344:	370c      	adds	r7, #12
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr

0800934e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800934e:	b480      	push	{r7}
 8009350:	b083      	sub	sp, #12
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009356:	bf00      	nop
 8009358:	370c      	adds	r7, #12
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr
	...

08009364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4a34      	ldr	r2, [pc, #208]	; (8009448 <TIM_Base_SetConfig+0xe4>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d00f      	beq.n	800939c <TIM_Base_SetConfig+0x38>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009382:	d00b      	beq.n	800939c <TIM_Base_SetConfig+0x38>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	4a31      	ldr	r2, [pc, #196]	; (800944c <TIM_Base_SetConfig+0xe8>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d007      	beq.n	800939c <TIM_Base_SetConfig+0x38>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4a30      	ldr	r2, [pc, #192]	; (8009450 <TIM_Base_SetConfig+0xec>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d003      	beq.n	800939c <TIM_Base_SetConfig+0x38>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	4a2f      	ldr	r2, [pc, #188]	; (8009454 <TIM_Base_SetConfig+0xf0>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d108      	bne.n	80093ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	68fa      	ldr	r2, [r7, #12]
 80093aa:	4313      	orrs	r3, r2
 80093ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a25      	ldr	r2, [pc, #148]	; (8009448 <TIM_Base_SetConfig+0xe4>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d01b      	beq.n	80093ee <TIM_Base_SetConfig+0x8a>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093bc:	d017      	beq.n	80093ee <TIM_Base_SetConfig+0x8a>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a22      	ldr	r2, [pc, #136]	; (800944c <TIM_Base_SetConfig+0xe8>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d013      	beq.n	80093ee <TIM_Base_SetConfig+0x8a>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4a21      	ldr	r2, [pc, #132]	; (8009450 <TIM_Base_SetConfig+0xec>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d00f      	beq.n	80093ee <TIM_Base_SetConfig+0x8a>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a20      	ldr	r2, [pc, #128]	; (8009454 <TIM_Base_SetConfig+0xf0>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d00b      	beq.n	80093ee <TIM_Base_SetConfig+0x8a>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4a1f      	ldr	r2, [pc, #124]	; (8009458 <TIM_Base_SetConfig+0xf4>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d007      	beq.n	80093ee <TIM_Base_SetConfig+0x8a>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4a1e      	ldr	r2, [pc, #120]	; (800945c <TIM_Base_SetConfig+0xf8>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d003      	beq.n	80093ee <TIM_Base_SetConfig+0x8a>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4a1d      	ldr	r2, [pc, #116]	; (8009460 <TIM_Base_SetConfig+0xfc>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d108      	bne.n	8009400 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	68fa      	ldr	r2, [r7, #12]
 80093fc:	4313      	orrs	r3, r2
 80093fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	695b      	ldr	r3, [r3, #20]
 800940a:	4313      	orrs	r3, r2
 800940c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	68fa      	ldr	r2, [r7, #12]
 8009412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	689a      	ldr	r2, [r3, #8]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a08      	ldr	r2, [pc, #32]	; (8009448 <TIM_Base_SetConfig+0xe4>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d103      	bne.n	8009434 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	691a      	ldr	r2, [r3, #16]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2201      	movs	r2, #1
 8009438:	615a      	str	r2, [r3, #20]
}
 800943a:	bf00      	nop
 800943c:	3714      	adds	r7, #20
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr
 8009446:	bf00      	nop
 8009448:	40010000 	.word	0x40010000
 800944c:	40000400 	.word	0x40000400
 8009450:	40000800 	.word	0x40000800
 8009454:	40000c00 	.word	0x40000c00
 8009458:	40014000 	.word	0x40014000
 800945c:	40014400 	.word	0x40014400
 8009460:	40014800 	.word	0x40014800

08009464 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009464:	b480      	push	{r7}
 8009466:	b087      	sub	sp, #28
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6a1b      	ldr	r3, [r3, #32]
 8009472:	f023 0201 	bic.w	r2, r3, #1
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6a1b      	ldr	r3, [r3, #32]
 800947e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	699b      	ldr	r3, [r3, #24]
 800948a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f023 0303 	bic.w	r3, r3, #3
 800949a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	68fa      	ldr	r2, [r7, #12]
 80094a2:	4313      	orrs	r3, r2
 80094a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	f023 0302 	bic.w	r3, r3, #2
 80094ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	697a      	ldr	r2, [r7, #20]
 80094b4:	4313      	orrs	r3, r2
 80094b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	4a1c      	ldr	r2, [pc, #112]	; (800952c <TIM_OC1_SetConfig+0xc8>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d10c      	bne.n	80094da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	f023 0308 	bic.w	r3, r3, #8
 80094c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	697a      	ldr	r2, [r7, #20]
 80094ce:	4313      	orrs	r3, r2
 80094d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	f023 0304 	bic.w	r3, r3, #4
 80094d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a13      	ldr	r2, [pc, #76]	; (800952c <TIM_OC1_SetConfig+0xc8>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d111      	bne.n	8009506 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	695b      	ldr	r3, [r3, #20]
 80094f6:	693a      	ldr	r2, [r7, #16]
 80094f8:	4313      	orrs	r3, r2
 80094fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	693a      	ldr	r2, [r7, #16]
 8009502:	4313      	orrs	r3, r2
 8009504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	693a      	ldr	r2, [r7, #16]
 800950a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	68fa      	ldr	r2, [r7, #12]
 8009510:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	685a      	ldr	r2, [r3, #4]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	697a      	ldr	r2, [r7, #20]
 800951e:	621a      	str	r2, [r3, #32]
}
 8009520:	bf00      	nop
 8009522:	371c      	adds	r7, #28
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr
 800952c:	40010000 	.word	0x40010000

08009530 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009530:	b480      	push	{r7}
 8009532:	b087      	sub	sp, #28
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6a1b      	ldr	r3, [r3, #32]
 800953e:	f023 0210 	bic.w	r2, r3, #16
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6a1b      	ldr	r3, [r3, #32]
 800954a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	699b      	ldr	r3, [r3, #24]
 8009556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800955e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009566:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	021b      	lsls	r3, r3, #8
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	4313      	orrs	r3, r2
 8009572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	f023 0320 	bic.w	r3, r3, #32
 800957a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	011b      	lsls	r3, r3, #4
 8009582:	697a      	ldr	r2, [r7, #20]
 8009584:	4313      	orrs	r3, r2
 8009586:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4a1e      	ldr	r2, [pc, #120]	; (8009604 <TIM_OC2_SetConfig+0xd4>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d10d      	bne.n	80095ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	011b      	lsls	r3, r3, #4
 800959e:	697a      	ldr	r2, [r7, #20]
 80095a0:	4313      	orrs	r3, r2
 80095a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4a15      	ldr	r2, [pc, #84]	; (8009604 <TIM_OC2_SetConfig+0xd4>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d113      	bne.n	80095dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80095ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	695b      	ldr	r3, [r3, #20]
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	693a      	ldr	r2, [r7, #16]
 80095cc:	4313      	orrs	r3, r2
 80095ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	699b      	ldr	r3, [r3, #24]
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	693a      	ldr	r2, [r7, #16]
 80095d8:	4313      	orrs	r3, r2
 80095da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	693a      	ldr	r2, [r7, #16]
 80095e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	68fa      	ldr	r2, [r7, #12]
 80095e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	685a      	ldr	r2, [r3, #4]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	697a      	ldr	r2, [r7, #20]
 80095f4:	621a      	str	r2, [r3, #32]
}
 80095f6:	bf00      	nop
 80095f8:	371c      	adds	r7, #28
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	40010000 	.word	0x40010000

08009608 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009608:	b480      	push	{r7}
 800960a:	b087      	sub	sp, #28
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a1b      	ldr	r3, [r3, #32]
 8009616:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6a1b      	ldr	r3, [r3, #32]
 8009622:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	69db      	ldr	r3, [r3, #28]
 800962e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f023 0303 	bic.w	r3, r3, #3
 800963e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	68fa      	ldr	r2, [r7, #12]
 8009646:	4313      	orrs	r3, r2
 8009648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	021b      	lsls	r3, r3, #8
 8009658:	697a      	ldr	r2, [r7, #20]
 800965a:	4313      	orrs	r3, r2
 800965c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4a1d      	ldr	r2, [pc, #116]	; (80096d8 <TIM_OC3_SetConfig+0xd0>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d10d      	bne.n	8009682 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800966c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	021b      	lsls	r3, r3, #8
 8009674:	697a      	ldr	r2, [r7, #20]
 8009676:	4313      	orrs	r3, r2
 8009678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4a14      	ldr	r2, [pc, #80]	; (80096d8 <TIM_OC3_SetConfig+0xd0>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d113      	bne.n	80096b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	695b      	ldr	r3, [r3, #20]
 800969e:	011b      	lsls	r3, r3, #4
 80096a0:	693a      	ldr	r2, [r7, #16]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	699b      	ldr	r3, [r3, #24]
 80096aa:	011b      	lsls	r3, r3, #4
 80096ac:	693a      	ldr	r2, [r7, #16]
 80096ae:	4313      	orrs	r3, r2
 80096b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	693a      	ldr	r2, [r7, #16]
 80096b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	68fa      	ldr	r2, [r7, #12]
 80096bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	685a      	ldr	r2, [r3, #4]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	697a      	ldr	r2, [r7, #20]
 80096ca:	621a      	str	r2, [r3, #32]
}
 80096cc:	bf00      	nop
 80096ce:	371c      	adds	r7, #28
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr
 80096d8:	40010000 	.word	0x40010000

080096dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096dc:	b480      	push	{r7}
 80096de:	b087      	sub	sp, #28
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6a1b      	ldr	r3, [r3, #32]
 80096ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a1b      	ldr	r3, [r3, #32]
 80096f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	69db      	ldr	r3, [r3, #28]
 8009702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800970a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	021b      	lsls	r3, r3, #8
 800971a:	68fa      	ldr	r2, [r7, #12]
 800971c:	4313      	orrs	r3, r2
 800971e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009726:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	031b      	lsls	r3, r3, #12
 800972e:	693a      	ldr	r2, [r7, #16]
 8009730:	4313      	orrs	r3, r2
 8009732:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4a10      	ldr	r2, [pc, #64]	; (8009778 <TIM_OC4_SetConfig+0x9c>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d109      	bne.n	8009750 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009742:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	695b      	ldr	r3, [r3, #20]
 8009748:	019b      	lsls	r3, r3, #6
 800974a:	697a      	ldr	r2, [r7, #20]
 800974c:	4313      	orrs	r3, r2
 800974e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	697a      	ldr	r2, [r7, #20]
 8009754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	685a      	ldr	r2, [r3, #4]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	693a      	ldr	r2, [r7, #16]
 8009768:	621a      	str	r2, [r3, #32]
}
 800976a:	bf00      	nop
 800976c:	371c      	adds	r7, #28
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr
 8009776:	bf00      	nop
 8009778:	40010000 	.word	0x40010000

0800977c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800977c:	b480      	push	{r7}
 800977e:	b087      	sub	sp, #28
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	6a1b      	ldr	r3, [r3, #32]
 800978c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	6a1b      	ldr	r3, [r3, #32]
 8009792:	f023 0201 	bic.w	r2, r3, #1
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	699b      	ldr	r3, [r3, #24]
 800979e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	011b      	lsls	r3, r3, #4
 80097ac:	693a      	ldr	r2, [r7, #16]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	f023 030a 	bic.w	r3, r3, #10
 80097b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80097ba:	697a      	ldr	r2, [r7, #20]
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	4313      	orrs	r3, r2
 80097c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	693a      	ldr	r2, [r7, #16]
 80097c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	697a      	ldr	r2, [r7, #20]
 80097cc:	621a      	str	r2, [r3, #32]
}
 80097ce:	bf00      	nop
 80097d0:	371c      	adds	r7, #28
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr

080097da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097da:	b480      	push	{r7}
 80097dc:	b087      	sub	sp, #28
 80097de:	af00      	add	r7, sp, #0
 80097e0:	60f8      	str	r0, [r7, #12]
 80097e2:	60b9      	str	r1, [r7, #8]
 80097e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	6a1b      	ldr	r3, [r3, #32]
 80097ea:	f023 0210 	bic.w	r2, r3, #16
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	699b      	ldr	r3, [r3, #24]
 80097f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	6a1b      	ldr	r3, [r3, #32]
 80097fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009804:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	031b      	lsls	r3, r3, #12
 800980a:	697a      	ldr	r2, [r7, #20]
 800980c:	4313      	orrs	r3, r2
 800980e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009816:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	011b      	lsls	r3, r3, #4
 800981c:	693a      	ldr	r2, [r7, #16]
 800981e:	4313      	orrs	r3, r2
 8009820:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	697a      	ldr	r2, [r7, #20]
 8009826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	693a      	ldr	r2, [r7, #16]
 800982c:	621a      	str	r2, [r3, #32]
}
 800982e:	bf00      	nop
 8009830:	371c      	adds	r7, #28
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr

0800983a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800983a:	b480      	push	{r7}
 800983c:	b085      	sub	sp, #20
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
 8009842:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009850:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009852:	683a      	ldr	r2, [r7, #0]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	4313      	orrs	r3, r2
 8009858:	f043 0307 	orr.w	r3, r3, #7
 800985c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	68fa      	ldr	r2, [r7, #12]
 8009862:	609a      	str	r2, [r3, #8]
}
 8009864:	bf00      	nop
 8009866:	3714      	adds	r7, #20
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009870:	b480      	push	{r7}
 8009872:	b087      	sub	sp, #28
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	607a      	str	r2, [r7, #4]
 800987c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	689b      	ldr	r3, [r3, #8]
 8009882:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800988a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	021a      	lsls	r2, r3, #8
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	431a      	orrs	r2, r3
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	4313      	orrs	r3, r2
 8009898:	697a      	ldr	r2, [r7, #20]
 800989a:	4313      	orrs	r3, r2
 800989c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	697a      	ldr	r2, [r7, #20]
 80098a2:	609a      	str	r2, [r3, #8]
}
 80098a4:	bf00      	nop
 80098a6:	371c      	adds	r7, #28
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b087      	sub	sp, #28
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	f003 031f 	and.w	r3, r3, #31
 80098c2:	2201      	movs	r2, #1
 80098c4:	fa02 f303 	lsl.w	r3, r2, r3
 80098c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	6a1a      	ldr	r2, [r3, #32]
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	43db      	mvns	r3, r3
 80098d2:	401a      	ands	r2, r3
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	6a1a      	ldr	r2, [r3, #32]
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	f003 031f 	and.w	r3, r3, #31
 80098e2:	6879      	ldr	r1, [r7, #4]
 80098e4:	fa01 f303 	lsl.w	r3, r1, r3
 80098e8:	431a      	orrs	r2, r3
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	621a      	str	r2, [r3, #32]
}
 80098ee:	bf00      	nop
 80098f0:	371c      	adds	r7, #28
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr
	...

080098fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b085      	sub	sp, #20
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800990c:	2b01      	cmp	r3, #1
 800990e:	d101      	bne.n	8009914 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009910:	2302      	movs	r3, #2
 8009912:	e050      	b.n	80099b6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2201      	movs	r2, #1
 8009918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2202      	movs	r2, #2
 8009920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	689b      	ldr	r3, [r3, #8]
 8009932:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800993a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	68fa      	ldr	r2, [r7, #12]
 8009942:	4313      	orrs	r3, r2
 8009944:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	68fa      	ldr	r2, [r7, #12]
 800994c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a1c      	ldr	r2, [pc, #112]	; (80099c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d018      	beq.n	800998a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009960:	d013      	beq.n	800998a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a18      	ldr	r2, [pc, #96]	; (80099c8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d00e      	beq.n	800998a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a16      	ldr	r2, [pc, #88]	; (80099cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d009      	beq.n	800998a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4a15      	ldr	r2, [pc, #84]	; (80099d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d004      	beq.n	800998a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a13      	ldr	r2, [pc, #76]	; (80099d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d10c      	bne.n	80099a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009990:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	68ba      	ldr	r2, [r7, #8]
 8009998:	4313      	orrs	r3, r2
 800999a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	68ba      	ldr	r2, [r7, #8]
 80099a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80099b4:	2300      	movs	r3, #0
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3714      	adds	r7, #20
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	40010000 	.word	0x40010000
 80099c8:	40000400 	.word	0x40000400
 80099cc:	40000800 	.word	0x40000800
 80099d0:	40000c00 	.word	0x40000c00
 80099d4:	40014000 	.word	0x40014000

080099d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80099e0:	bf00      	nop
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80099f4:	bf00      	nop
 80099f6:	370c      	adds	r7, #12
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <arm_sin_f32>:
 8009a00:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8009a7c <arm_sin_f32+0x7c>
 8009a04:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009a08:	ee20 7a07 	vmul.f32	s14, s0, s14
 8009a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a10:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8009a14:	d42c      	bmi.n	8009a70 <arm_sin_f32+0x70>
 8009a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a1a:	eddf 6a19 	vldr	s13, [pc, #100]	; 8009a80 <arm_sin_f32+0x80>
 8009a1e:	4a19      	ldr	r2, [pc, #100]	; (8009a84 <arm_sin_f32+0x84>)
 8009a20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a24:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009a28:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009a2c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a34:	bfa8      	it	ge
 8009a36:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 8009a3a:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8009a3e:	ee17 3a10 	vmov	r3, s14
 8009a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a46:	ee07 3a10 	vmov	s14, r3
 8009a4a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8009a4e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8009a52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009a56:	edd1 6a01 	vldr	s13, [r1, #4]
 8009a5a:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009a5e:	ed91 0a00 	vldr	s0, [r1]
 8009a62:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009a66:	ee27 0a00 	vmul.f32	s0, s14, s0
 8009a6a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009a6e:	4770      	bx	lr
 8009a70:	ee17 3a90 	vmov	r3, s15
 8009a74:	3b01      	subs	r3, #1
 8009a76:	ee07 3a90 	vmov	s15, r3
 8009a7a:	e7cc      	b.n	8009a16 <arm_sin_f32+0x16>
 8009a7c:	3e22f983 	.word	0x3e22f983
 8009a80:	44000000 	.word	0x44000000
 8009a84:	0800a3ac 	.word	0x0800a3ac

08009a88 <atoi>:
 8009a88:	220a      	movs	r2, #10
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	f000 b8d6 	b.w	8009c3c <strtol>

08009a90 <__errno>:
 8009a90:	4b01      	ldr	r3, [pc, #4]	; (8009a98 <__errno+0x8>)
 8009a92:	6818      	ldr	r0, [r3, #0]
 8009a94:	4770      	bx	lr
 8009a96:	bf00      	nop
 8009a98:	20000ae4 	.word	0x20000ae4

08009a9c <__libc_init_array>:
 8009a9c:	b570      	push	{r4, r5, r6, lr}
 8009a9e:	4d0d      	ldr	r5, [pc, #52]	; (8009ad4 <__libc_init_array+0x38>)
 8009aa0:	4c0d      	ldr	r4, [pc, #52]	; (8009ad8 <__libc_init_array+0x3c>)
 8009aa2:	1b64      	subs	r4, r4, r5
 8009aa4:	10a4      	asrs	r4, r4, #2
 8009aa6:	2600      	movs	r6, #0
 8009aa8:	42a6      	cmp	r6, r4
 8009aaa:	d109      	bne.n	8009ac0 <__libc_init_array+0x24>
 8009aac:	4d0b      	ldr	r5, [pc, #44]	; (8009adc <__libc_init_array+0x40>)
 8009aae:	4c0c      	ldr	r4, [pc, #48]	; (8009ae0 <__libc_init_array+0x44>)
 8009ab0:	f000 f8ce 	bl	8009c50 <_init>
 8009ab4:	1b64      	subs	r4, r4, r5
 8009ab6:	10a4      	asrs	r4, r4, #2
 8009ab8:	2600      	movs	r6, #0
 8009aba:	42a6      	cmp	r6, r4
 8009abc:	d105      	bne.n	8009aca <__libc_init_array+0x2e>
 8009abe:	bd70      	pop	{r4, r5, r6, pc}
 8009ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ac4:	4798      	blx	r3
 8009ac6:	3601      	adds	r6, #1
 8009ac8:	e7ee      	b.n	8009aa8 <__libc_init_array+0xc>
 8009aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ace:	4798      	blx	r3
 8009ad0:	3601      	adds	r6, #1
 8009ad2:	e7f2      	b.n	8009aba <__libc_init_array+0x1e>
 8009ad4:	0800acbc 	.word	0x0800acbc
 8009ad8:	0800acbc 	.word	0x0800acbc
 8009adc:	0800acbc 	.word	0x0800acbc
 8009ae0:	0800acc0 	.word	0x0800acc0

08009ae4 <memcpy>:
 8009ae4:	440a      	add	r2, r1
 8009ae6:	4291      	cmp	r1, r2
 8009ae8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009aec:	d100      	bne.n	8009af0 <memcpy+0xc>
 8009aee:	4770      	bx	lr
 8009af0:	b510      	push	{r4, lr}
 8009af2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009af6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009afa:	4291      	cmp	r1, r2
 8009afc:	d1f9      	bne.n	8009af2 <memcpy+0xe>
 8009afe:	bd10      	pop	{r4, pc}

08009b00 <memset>:
 8009b00:	4402      	add	r2, r0
 8009b02:	4603      	mov	r3, r0
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d100      	bne.n	8009b0a <memset+0xa>
 8009b08:	4770      	bx	lr
 8009b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8009b0e:	e7f9      	b.n	8009b04 <memset+0x4>

08009b10 <strncmp>:
 8009b10:	b510      	push	{r4, lr}
 8009b12:	b17a      	cbz	r2, 8009b34 <strncmp+0x24>
 8009b14:	4603      	mov	r3, r0
 8009b16:	3901      	subs	r1, #1
 8009b18:	1884      	adds	r4, r0, r2
 8009b1a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009b1e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009b22:	4290      	cmp	r0, r2
 8009b24:	d101      	bne.n	8009b2a <strncmp+0x1a>
 8009b26:	42a3      	cmp	r3, r4
 8009b28:	d101      	bne.n	8009b2e <strncmp+0x1e>
 8009b2a:	1a80      	subs	r0, r0, r2
 8009b2c:	bd10      	pop	{r4, pc}
 8009b2e:	2800      	cmp	r0, #0
 8009b30:	d1f3      	bne.n	8009b1a <strncmp+0xa>
 8009b32:	e7fa      	b.n	8009b2a <strncmp+0x1a>
 8009b34:	4610      	mov	r0, r2
 8009b36:	e7f9      	b.n	8009b2c <strncmp+0x1c>

08009b38 <_strtol_l.constprop.0>:
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b3e:	d001      	beq.n	8009b44 <_strtol_l.constprop.0+0xc>
 8009b40:	2b24      	cmp	r3, #36	; 0x24
 8009b42:	d906      	bls.n	8009b52 <_strtol_l.constprop.0+0x1a>
 8009b44:	f7ff ffa4 	bl	8009a90 <__errno>
 8009b48:	2316      	movs	r3, #22
 8009b4a:	6003      	str	r3, [r0, #0]
 8009b4c:	2000      	movs	r0, #0
 8009b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b52:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009c38 <_strtol_l.constprop.0+0x100>
 8009b56:	460d      	mov	r5, r1
 8009b58:	462e      	mov	r6, r5
 8009b5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b5e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009b62:	f017 0708 	ands.w	r7, r7, #8
 8009b66:	d1f7      	bne.n	8009b58 <_strtol_l.constprop.0+0x20>
 8009b68:	2c2d      	cmp	r4, #45	; 0x2d
 8009b6a:	d132      	bne.n	8009bd2 <_strtol_l.constprop.0+0x9a>
 8009b6c:	782c      	ldrb	r4, [r5, #0]
 8009b6e:	2701      	movs	r7, #1
 8009b70:	1cb5      	adds	r5, r6, #2
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d05b      	beq.n	8009c2e <_strtol_l.constprop.0+0xf6>
 8009b76:	2b10      	cmp	r3, #16
 8009b78:	d109      	bne.n	8009b8e <_strtol_l.constprop.0+0x56>
 8009b7a:	2c30      	cmp	r4, #48	; 0x30
 8009b7c:	d107      	bne.n	8009b8e <_strtol_l.constprop.0+0x56>
 8009b7e:	782c      	ldrb	r4, [r5, #0]
 8009b80:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009b84:	2c58      	cmp	r4, #88	; 0x58
 8009b86:	d14d      	bne.n	8009c24 <_strtol_l.constprop.0+0xec>
 8009b88:	786c      	ldrb	r4, [r5, #1]
 8009b8a:	2310      	movs	r3, #16
 8009b8c:	3502      	adds	r5, #2
 8009b8e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009b92:	f108 38ff 	add.w	r8, r8, #4294967295
 8009b96:	f04f 0c00 	mov.w	ip, #0
 8009b9a:	fbb8 f9f3 	udiv	r9, r8, r3
 8009b9e:	4666      	mov	r6, ip
 8009ba0:	fb03 8a19 	mls	sl, r3, r9, r8
 8009ba4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009ba8:	f1be 0f09 	cmp.w	lr, #9
 8009bac:	d816      	bhi.n	8009bdc <_strtol_l.constprop.0+0xa4>
 8009bae:	4674      	mov	r4, lr
 8009bb0:	42a3      	cmp	r3, r4
 8009bb2:	dd24      	ble.n	8009bfe <_strtol_l.constprop.0+0xc6>
 8009bb4:	f1bc 0f00 	cmp.w	ip, #0
 8009bb8:	db1e      	blt.n	8009bf8 <_strtol_l.constprop.0+0xc0>
 8009bba:	45b1      	cmp	r9, r6
 8009bbc:	d31c      	bcc.n	8009bf8 <_strtol_l.constprop.0+0xc0>
 8009bbe:	d101      	bne.n	8009bc4 <_strtol_l.constprop.0+0x8c>
 8009bc0:	45a2      	cmp	sl, r4
 8009bc2:	db19      	blt.n	8009bf8 <_strtol_l.constprop.0+0xc0>
 8009bc4:	fb06 4603 	mla	r6, r6, r3, r4
 8009bc8:	f04f 0c01 	mov.w	ip, #1
 8009bcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bd0:	e7e8      	b.n	8009ba4 <_strtol_l.constprop.0+0x6c>
 8009bd2:	2c2b      	cmp	r4, #43	; 0x2b
 8009bd4:	bf04      	itt	eq
 8009bd6:	782c      	ldrbeq	r4, [r5, #0]
 8009bd8:	1cb5      	addeq	r5, r6, #2
 8009bda:	e7ca      	b.n	8009b72 <_strtol_l.constprop.0+0x3a>
 8009bdc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009be0:	f1be 0f19 	cmp.w	lr, #25
 8009be4:	d801      	bhi.n	8009bea <_strtol_l.constprop.0+0xb2>
 8009be6:	3c37      	subs	r4, #55	; 0x37
 8009be8:	e7e2      	b.n	8009bb0 <_strtol_l.constprop.0+0x78>
 8009bea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009bee:	f1be 0f19 	cmp.w	lr, #25
 8009bf2:	d804      	bhi.n	8009bfe <_strtol_l.constprop.0+0xc6>
 8009bf4:	3c57      	subs	r4, #87	; 0x57
 8009bf6:	e7db      	b.n	8009bb0 <_strtol_l.constprop.0+0x78>
 8009bf8:	f04f 3cff 	mov.w	ip, #4294967295
 8009bfc:	e7e6      	b.n	8009bcc <_strtol_l.constprop.0+0x94>
 8009bfe:	f1bc 0f00 	cmp.w	ip, #0
 8009c02:	da05      	bge.n	8009c10 <_strtol_l.constprop.0+0xd8>
 8009c04:	2322      	movs	r3, #34	; 0x22
 8009c06:	6003      	str	r3, [r0, #0]
 8009c08:	4646      	mov	r6, r8
 8009c0a:	b942      	cbnz	r2, 8009c1e <_strtol_l.constprop.0+0xe6>
 8009c0c:	4630      	mov	r0, r6
 8009c0e:	e79e      	b.n	8009b4e <_strtol_l.constprop.0+0x16>
 8009c10:	b107      	cbz	r7, 8009c14 <_strtol_l.constprop.0+0xdc>
 8009c12:	4276      	negs	r6, r6
 8009c14:	2a00      	cmp	r2, #0
 8009c16:	d0f9      	beq.n	8009c0c <_strtol_l.constprop.0+0xd4>
 8009c18:	f1bc 0f00 	cmp.w	ip, #0
 8009c1c:	d000      	beq.n	8009c20 <_strtol_l.constprop.0+0xe8>
 8009c1e:	1e69      	subs	r1, r5, #1
 8009c20:	6011      	str	r1, [r2, #0]
 8009c22:	e7f3      	b.n	8009c0c <_strtol_l.constprop.0+0xd4>
 8009c24:	2430      	movs	r4, #48	; 0x30
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1b1      	bne.n	8009b8e <_strtol_l.constprop.0+0x56>
 8009c2a:	2308      	movs	r3, #8
 8009c2c:	e7af      	b.n	8009b8e <_strtol_l.constprop.0+0x56>
 8009c2e:	2c30      	cmp	r4, #48	; 0x30
 8009c30:	d0a5      	beq.n	8009b7e <_strtol_l.constprop.0+0x46>
 8009c32:	230a      	movs	r3, #10
 8009c34:	e7ab      	b.n	8009b8e <_strtol_l.constprop.0+0x56>
 8009c36:	bf00      	nop
 8009c38:	0800abb1 	.word	0x0800abb1

08009c3c <strtol>:
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	460a      	mov	r2, r1
 8009c40:	4601      	mov	r1, r0
 8009c42:	4802      	ldr	r0, [pc, #8]	; (8009c4c <strtol+0x10>)
 8009c44:	6800      	ldr	r0, [r0, #0]
 8009c46:	f7ff bf77 	b.w	8009b38 <_strtol_l.constprop.0>
 8009c4a:	bf00      	nop
 8009c4c:	20000ae4 	.word	0x20000ae4

08009c50 <_init>:
 8009c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c52:	bf00      	nop
 8009c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c56:	bc08      	pop	{r3}
 8009c58:	469e      	mov	lr, r3
 8009c5a:	4770      	bx	lr

08009c5c <_fini>:
 8009c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c5e:	bf00      	nop
 8009c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c62:	bc08      	pop	{r3}
 8009c64:	469e      	mov	lr, r3
 8009c66:	4770      	bx	lr
