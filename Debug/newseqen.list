
newseqen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007410  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fd8  080075a8  080075a8  000175a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008580  08008580  000205cc  2**0
                  CONTENTS
  4 .ARM          00000008  08008580  08008580  00018580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008588  08008588  000205cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008588  08008588  00018588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800858c  0800858c  0001858c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005cc  20000000  08008590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001394  200005cc  08008b5c  000205cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001960  08008b5c  00021960  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e48  00000000  00000000  000205fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000224a  00000000  00000000  00032444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  00034690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f48  00000000  00000000  000356c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001753e  00000000  00000000  00036608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d0a  00000000  00000000  0004db46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095216  00000000  00000000  0005f850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  000f4a66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046a4  00000000  00000000  000f4b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000d8  00000000  00000000  000f91cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200005cc 	.word	0x200005cc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007590 	.word	0x08007590

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200005d0 	.word	0x200005d0
 80001d4:	08007590 	.word	0x08007590

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__gedf2>:
 80007a4:	f04f 3cff 	mov.w	ip, #4294967295
 80007a8:	e006      	b.n	80007b8 <__cmpdf2+0x4>
 80007aa:	bf00      	nop

080007ac <__ledf2>:
 80007ac:	f04f 0c01 	mov.w	ip, #1
 80007b0:	e002      	b.n	80007b8 <__cmpdf2+0x4>
 80007b2:	bf00      	nop

080007b4 <__cmpdf2>:
 80007b4:	f04f 0c01 	mov.w	ip, #1
 80007b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007c8:	bf18      	it	ne
 80007ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007ce:	d01b      	beq.n	8000808 <__cmpdf2+0x54>
 80007d0:	b001      	add	sp, #4
 80007d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007d6:	bf0c      	ite	eq
 80007d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007dc:	ea91 0f03 	teqne	r1, r3
 80007e0:	bf02      	ittt	eq
 80007e2:	ea90 0f02 	teqeq	r0, r2
 80007e6:	2000      	moveq	r0, #0
 80007e8:	4770      	bxeq	lr
 80007ea:	f110 0f00 	cmn.w	r0, #0
 80007ee:	ea91 0f03 	teq	r1, r3
 80007f2:	bf58      	it	pl
 80007f4:	4299      	cmppl	r1, r3
 80007f6:	bf08      	it	eq
 80007f8:	4290      	cmpeq	r0, r2
 80007fa:	bf2c      	ite	cs
 80007fc:	17d8      	asrcs	r0, r3, #31
 80007fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000802:	f040 0001 	orr.w	r0, r0, #1
 8000806:	4770      	bx	lr
 8000808:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d102      	bne.n	8000818 <__cmpdf2+0x64>
 8000812:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000816:	d107      	bne.n	8000828 <__cmpdf2+0x74>
 8000818:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800081c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000820:	d1d6      	bne.n	80007d0 <__cmpdf2+0x1c>
 8000822:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000826:	d0d3      	beq.n	80007d0 <__cmpdf2+0x1c>
 8000828:	f85d 0b04 	ldr.w	r0, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop

08000830 <__aeabi_cdrcmple>:
 8000830:	4684      	mov	ip, r0
 8000832:	4610      	mov	r0, r2
 8000834:	4662      	mov	r2, ip
 8000836:	468c      	mov	ip, r1
 8000838:	4619      	mov	r1, r3
 800083a:	4663      	mov	r3, ip
 800083c:	e000      	b.n	8000840 <__aeabi_cdcmpeq>
 800083e:	bf00      	nop

08000840 <__aeabi_cdcmpeq>:
 8000840:	b501      	push	{r0, lr}
 8000842:	f7ff ffb7 	bl	80007b4 <__cmpdf2>
 8000846:	2800      	cmp	r0, #0
 8000848:	bf48      	it	mi
 800084a:	f110 0f00 	cmnmi.w	r0, #0
 800084e:	bd01      	pop	{r0, pc}

08000850 <__aeabi_dcmpeq>:
 8000850:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000854:	f7ff fff4 	bl	8000840 <__aeabi_cdcmpeq>
 8000858:	bf0c      	ite	eq
 800085a:	2001      	moveq	r0, #1
 800085c:	2000      	movne	r0, #0
 800085e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000862:	bf00      	nop

08000864 <__aeabi_dcmplt>:
 8000864:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000868:	f7ff ffea 	bl	8000840 <__aeabi_cdcmpeq>
 800086c:	bf34      	ite	cc
 800086e:	2001      	movcc	r0, #1
 8000870:	2000      	movcs	r0, #0
 8000872:	f85d fb08 	ldr.w	pc, [sp], #8
 8000876:	bf00      	nop

08000878 <__aeabi_dcmple>:
 8000878:	f84d ed08 	str.w	lr, [sp, #-8]!
 800087c:	f7ff ffe0 	bl	8000840 <__aeabi_cdcmpeq>
 8000880:	bf94      	ite	ls
 8000882:	2001      	movls	r0, #1
 8000884:	2000      	movhi	r0, #0
 8000886:	f85d fb08 	ldr.w	pc, [sp], #8
 800088a:	bf00      	nop

0800088c <__aeabi_dcmpge>:
 800088c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000890:	f7ff ffce 	bl	8000830 <__aeabi_cdrcmple>
 8000894:	bf94      	ite	ls
 8000896:	2001      	movls	r0, #1
 8000898:	2000      	movhi	r0, #0
 800089a:	f85d fb08 	ldr.w	pc, [sp], #8
 800089e:	bf00      	nop

080008a0 <__aeabi_dcmpgt>:
 80008a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a4:	f7ff ffc4 	bl	8000830 <__aeabi_cdrcmple>
 80008a8:	bf34      	ite	cc
 80008aa:	2001      	movcc	r0, #1
 80008ac:	2000      	movcs	r0, #0
 80008ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b2:	bf00      	nop

080008b4 <__aeabi_d2f>:
 80008b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008bc:	bf24      	itt	cs
 80008be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008c6:	d90d      	bls.n	80008e4 <__aeabi_d2f+0x30>
 80008c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008dc:	bf08      	it	eq
 80008de:	f020 0001 	biceq.w	r0, r0, #1
 80008e2:	4770      	bx	lr
 80008e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008e8:	d121      	bne.n	800092e <__aeabi_d2f+0x7a>
 80008ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008ee:	bfbc      	itt	lt
 80008f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008f4:	4770      	bxlt	lr
 80008f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008fe:	f1c2 0218 	rsb	r2, r2, #24
 8000902:	f1c2 0c20 	rsb	ip, r2, #32
 8000906:	fa10 f30c 	lsls.w	r3, r0, ip
 800090a:	fa20 f002 	lsr.w	r0, r0, r2
 800090e:	bf18      	it	ne
 8000910:	f040 0001 	orrne.w	r0, r0, #1
 8000914:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000918:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800091c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000920:	ea40 000c 	orr.w	r0, r0, ip
 8000924:	fa23 f302 	lsr.w	r3, r3, r2
 8000928:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800092c:	e7cc      	b.n	80008c8 <__aeabi_d2f+0x14>
 800092e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000932:	d107      	bne.n	8000944 <__aeabi_d2f+0x90>
 8000934:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000938:	bf1e      	ittt	ne
 800093a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800093e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000942:	4770      	bxne	lr
 8000944:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000948:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800094c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop

08000954 <__aeabi_uldivmod>:
 8000954:	b953      	cbnz	r3, 800096c <__aeabi_uldivmod+0x18>
 8000956:	b94a      	cbnz	r2, 800096c <__aeabi_uldivmod+0x18>
 8000958:	2900      	cmp	r1, #0
 800095a:	bf08      	it	eq
 800095c:	2800      	cmpeq	r0, #0
 800095e:	bf1c      	itt	ne
 8000960:	f04f 31ff 	movne.w	r1, #4294967295
 8000964:	f04f 30ff 	movne.w	r0, #4294967295
 8000968:	f000 b974 	b.w	8000c54 <__aeabi_idiv0>
 800096c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000970:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000974:	f000 f806 	bl	8000984 <__udivmoddi4>
 8000978:	f8dd e004 	ldr.w	lr, [sp, #4]
 800097c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000980:	b004      	add	sp, #16
 8000982:	4770      	bx	lr

08000984 <__udivmoddi4>:
 8000984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000988:	9d08      	ldr	r5, [sp, #32]
 800098a:	4604      	mov	r4, r0
 800098c:	468e      	mov	lr, r1
 800098e:	2b00      	cmp	r3, #0
 8000990:	d14d      	bne.n	8000a2e <__udivmoddi4+0xaa>
 8000992:	428a      	cmp	r2, r1
 8000994:	4694      	mov	ip, r2
 8000996:	d969      	bls.n	8000a6c <__udivmoddi4+0xe8>
 8000998:	fab2 f282 	clz	r2, r2
 800099c:	b152      	cbz	r2, 80009b4 <__udivmoddi4+0x30>
 800099e:	fa01 f302 	lsl.w	r3, r1, r2
 80009a2:	f1c2 0120 	rsb	r1, r2, #32
 80009a6:	fa20 f101 	lsr.w	r1, r0, r1
 80009aa:	fa0c fc02 	lsl.w	ip, ip, r2
 80009ae:	ea41 0e03 	orr.w	lr, r1, r3
 80009b2:	4094      	lsls	r4, r2
 80009b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009b8:	0c21      	lsrs	r1, r4, #16
 80009ba:	fbbe f6f8 	udiv	r6, lr, r8
 80009be:	fa1f f78c 	uxth.w	r7, ip
 80009c2:	fb08 e316 	mls	r3, r8, r6, lr
 80009c6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009ca:	fb06 f107 	mul.w	r1, r6, r7
 80009ce:	4299      	cmp	r1, r3
 80009d0:	d90a      	bls.n	80009e8 <__udivmoddi4+0x64>
 80009d2:	eb1c 0303 	adds.w	r3, ip, r3
 80009d6:	f106 30ff 	add.w	r0, r6, #4294967295
 80009da:	f080 811f 	bcs.w	8000c1c <__udivmoddi4+0x298>
 80009de:	4299      	cmp	r1, r3
 80009e0:	f240 811c 	bls.w	8000c1c <__udivmoddi4+0x298>
 80009e4:	3e02      	subs	r6, #2
 80009e6:	4463      	add	r3, ip
 80009e8:	1a5b      	subs	r3, r3, r1
 80009ea:	b2a4      	uxth	r4, r4
 80009ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80009f0:	fb08 3310 	mls	r3, r8, r0, r3
 80009f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009f8:	fb00 f707 	mul.w	r7, r0, r7
 80009fc:	42a7      	cmp	r7, r4
 80009fe:	d90a      	bls.n	8000a16 <__udivmoddi4+0x92>
 8000a00:	eb1c 0404 	adds.w	r4, ip, r4
 8000a04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a08:	f080 810a 	bcs.w	8000c20 <__udivmoddi4+0x29c>
 8000a0c:	42a7      	cmp	r7, r4
 8000a0e:	f240 8107 	bls.w	8000c20 <__udivmoddi4+0x29c>
 8000a12:	4464      	add	r4, ip
 8000a14:	3802      	subs	r0, #2
 8000a16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a1a:	1be4      	subs	r4, r4, r7
 8000a1c:	2600      	movs	r6, #0
 8000a1e:	b11d      	cbz	r5, 8000a28 <__udivmoddi4+0xa4>
 8000a20:	40d4      	lsrs	r4, r2
 8000a22:	2300      	movs	r3, #0
 8000a24:	e9c5 4300 	strd	r4, r3, [r5]
 8000a28:	4631      	mov	r1, r6
 8000a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2e:	428b      	cmp	r3, r1
 8000a30:	d909      	bls.n	8000a46 <__udivmoddi4+0xc2>
 8000a32:	2d00      	cmp	r5, #0
 8000a34:	f000 80ef 	beq.w	8000c16 <__udivmoddi4+0x292>
 8000a38:	2600      	movs	r6, #0
 8000a3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a3e:	4630      	mov	r0, r6
 8000a40:	4631      	mov	r1, r6
 8000a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a46:	fab3 f683 	clz	r6, r3
 8000a4a:	2e00      	cmp	r6, #0
 8000a4c:	d14a      	bne.n	8000ae4 <__udivmoddi4+0x160>
 8000a4e:	428b      	cmp	r3, r1
 8000a50:	d302      	bcc.n	8000a58 <__udivmoddi4+0xd4>
 8000a52:	4282      	cmp	r2, r0
 8000a54:	f200 80f9 	bhi.w	8000c4a <__udivmoddi4+0x2c6>
 8000a58:	1a84      	subs	r4, r0, r2
 8000a5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000a5e:	2001      	movs	r0, #1
 8000a60:	469e      	mov	lr, r3
 8000a62:	2d00      	cmp	r5, #0
 8000a64:	d0e0      	beq.n	8000a28 <__udivmoddi4+0xa4>
 8000a66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a6a:	e7dd      	b.n	8000a28 <__udivmoddi4+0xa4>
 8000a6c:	b902      	cbnz	r2, 8000a70 <__udivmoddi4+0xec>
 8000a6e:	deff      	udf	#255	; 0xff
 8000a70:	fab2 f282 	clz	r2, r2
 8000a74:	2a00      	cmp	r2, #0
 8000a76:	f040 8092 	bne.w	8000b9e <__udivmoddi4+0x21a>
 8000a7a:	eba1 010c 	sub.w	r1, r1, ip
 8000a7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a82:	fa1f fe8c 	uxth.w	lr, ip
 8000a86:	2601      	movs	r6, #1
 8000a88:	0c20      	lsrs	r0, r4, #16
 8000a8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000a92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a96:	fb0e f003 	mul.w	r0, lr, r3
 8000a9a:	4288      	cmp	r0, r1
 8000a9c:	d908      	bls.n	8000ab0 <__udivmoddi4+0x12c>
 8000a9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000aa6:	d202      	bcs.n	8000aae <__udivmoddi4+0x12a>
 8000aa8:	4288      	cmp	r0, r1
 8000aaa:	f200 80cb 	bhi.w	8000c44 <__udivmoddi4+0x2c0>
 8000aae:	4643      	mov	r3, r8
 8000ab0:	1a09      	subs	r1, r1, r0
 8000ab2:	b2a4      	uxth	r4, r4
 8000ab4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ab8:	fb07 1110 	mls	r1, r7, r0, r1
 8000abc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ac0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ac4:	45a6      	cmp	lr, r4
 8000ac6:	d908      	bls.n	8000ada <__udivmoddi4+0x156>
 8000ac8:	eb1c 0404 	adds.w	r4, ip, r4
 8000acc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ad0:	d202      	bcs.n	8000ad8 <__udivmoddi4+0x154>
 8000ad2:	45a6      	cmp	lr, r4
 8000ad4:	f200 80bb 	bhi.w	8000c4e <__udivmoddi4+0x2ca>
 8000ad8:	4608      	mov	r0, r1
 8000ada:	eba4 040e 	sub.w	r4, r4, lr
 8000ade:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ae2:	e79c      	b.n	8000a1e <__udivmoddi4+0x9a>
 8000ae4:	f1c6 0720 	rsb	r7, r6, #32
 8000ae8:	40b3      	lsls	r3, r6
 8000aea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000aee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000af2:	fa20 f407 	lsr.w	r4, r0, r7
 8000af6:	fa01 f306 	lsl.w	r3, r1, r6
 8000afa:	431c      	orrs	r4, r3
 8000afc:	40f9      	lsrs	r1, r7
 8000afe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b02:	fa00 f306 	lsl.w	r3, r0, r6
 8000b06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b0a:	0c20      	lsrs	r0, r4, #16
 8000b0c:	fa1f fe8c 	uxth.w	lr, ip
 8000b10:	fb09 1118 	mls	r1, r9, r8, r1
 8000b14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b18:	fb08 f00e 	mul.w	r0, r8, lr
 8000b1c:	4288      	cmp	r0, r1
 8000b1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b22:	d90b      	bls.n	8000b3c <__udivmoddi4+0x1b8>
 8000b24:	eb1c 0101 	adds.w	r1, ip, r1
 8000b28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b2c:	f080 8088 	bcs.w	8000c40 <__udivmoddi4+0x2bc>
 8000b30:	4288      	cmp	r0, r1
 8000b32:	f240 8085 	bls.w	8000c40 <__udivmoddi4+0x2bc>
 8000b36:	f1a8 0802 	sub.w	r8, r8, #2
 8000b3a:	4461      	add	r1, ip
 8000b3c:	1a09      	subs	r1, r1, r0
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b44:	fb09 1110 	mls	r1, r9, r0, r1
 8000b48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b50:	458e      	cmp	lr, r1
 8000b52:	d908      	bls.n	8000b66 <__udivmoddi4+0x1e2>
 8000b54:	eb1c 0101 	adds.w	r1, ip, r1
 8000b58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b5c:	d26c      	bcs.n	8000c38 <__udivmoddi4+0x2b4>
 8000b5e:	458e      	cmp	lr, r1
 8000b60:	d96a      	bls.n	8000c38 <__udivmoddi4+0x2b4>
 8000b62:	3802      	subs	r0, #2
 8000b64:	4461      	add	r1, ip
 8000b66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000b6e:	eba1 010e 	sub.w	r1, r1, lr
 8000b72:	42a1      	cmp	r1, r4
 8000b74:	46c8      	mov	r8, r9
 8000b76:	46a6      	mov	lr, r4
 8000b78:	d356      	bcc.n	8000c28 <__udivmoddi4+0x2a4>
 8000b7a:	d053      	beq.n	8000c24 <__udivmoddi4+0x2a0>
 8000b7c:	b15d      	cbz	r5, 8000b96 <__udivmoddi4+0x212>
 8000b7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000b82:	eb61 010e 	sbc.w	r1, r1, lr
 8000b86:	fa01 f707 	lsl.w	r7, r1, r7
 8000b8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000b8e:	40f1      	lsrs	r1, r6
 8000b90:	431f      	orrs	r7, r3
 8000b92:	e9c5 7100 	strd	r7, r1, [r5]
 8000b96:	2600      	movs	r6, #0
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ba2:	40d8      	lsrs	r0, r3
 8000ba4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba8:	fa21 f303 	lsr.w	r3, r1, r3
 8000bac:	4091      	lsls	r1, r2
 8000bae:	4301      	orrs	r1, r0
 8000bb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb4:	fa1f fe8c 	uxth.w	lr, ip
 8000bb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000bbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000bc0:	0c0b      	lsrs	r3, r1, #16
 8000bc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000bc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000bca:	429e      	cmp	r6, r3
 8000bcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x260>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bda:	d22f      	bcs.n	8000c3c <__udivmoddi4+0x2b8>
 8000bdc:	429e      	cmp	r6, r3
 8000bde:	d92d      	bls.n	8000c3c <__udivmoddi4+0x2b8>
 8000be0:	3802      	subs	r0, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1b9b      	subs	r3, r3, r6
 8000be6:	b289      	uxth	r1, r1
 8000be8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bec:	fb07 3316 	mls	r3, r7, r6, r3
 8000bf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bf4:	fb06 f30e 	mul.w	r3, r6, lr
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x28a>
 8000bfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000c00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c04:	d216      	bcs.n	8000c34 <__udivmoddi4+0x2b0>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d914      	bls.n	8000c34 <__udivmoddi4+0x2b0>
 8000c0a:	3e02      	subs	r6, #2
 8000c0c:	4461      	add	r1, ip
 8000c0e:	1ac9      	subs	r1, r1, r3
 8000c10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c14:	e738      	b.n	8000a88 <__udivmoddi4+0x104>
 8000c16:	462e      	mov	r6, r5
 8000c18:	4628      	mov	r0, r5
 8000c1a:	e705      	b.n	8000a28 <__udivmoddi4+0xa4>
 8000c1c:	4606      	mov	r6, r0
 8000c1e:	e6e3      	b.n	80009e8 <__udivmoddi4+0x64>
 8000c20:	4618      	mov	r0, r3
 8000c22:	e6f8      	b.n	8000a16 <__udivmoddi4+0x92>
 8000c24:	454b      	cmp	r3, r9
 8000c26:	d2a9      	bcs.n	8000b7c <__udivmoddi4+0x1f8>
 8000c28:	ebb9 0802 	subs.w	r8, r9, r2
 8000c2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c30:	3801      	subs	r0, #1
 8000c32:	e7a3      	b.n	8000b7c <__udivmoddi4+0x1f8>
 8000c34:	4646      	mov	r6, r8
 8000c36:	e7ea      	b.n	8000c0e <__udivmoddi4+0x28a>
 8000c38:	4620      	mov	r0, r4
 8000c3a:	e794      	b.n	8000b66 <__udivmoddi4+0x1e2>
 8000c3c:	4640      	mov	r0, r8
 8000c3e:	e7d1      	b.n	8000be4 <__udivmoddi4+0x260>
 8000c40:	46d0      	mov	r8, sl
 8000c42:	e77b      	b.n	8000b3c <__udivmoddi4+0x1b8>
 8000c44:	3b02      	subs	r3, #2
 8000c46:	4461      	add	r1, ip
 8000c48:	e732      	b.n	8000ab0 <__udivmoddi4+0x12c>
 8000c4a:	4630      	mov	r0, r6
 8000c4c:	e709      	b.n	8000a62 <__udivmoddi4+0xde>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	e742      	b.n	8000ada <__udivmoddi4+0x156>

08000c54 <__aeabi_idiv0>:
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b0aa      	sub	sp, #168	; 0xa8
 8000c5c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c5e:	f002 fb33 	bl	80032c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c62:	f000 faa9 	bl	80011b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c66:	f000 fd21 	bl	80016ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000c6a:	f000 fcff 	bl	800166c <MX_DMA_Init>
  MX_ADC1_Init();
 8000c6e:	f000 fb0d 	bl	800128c <MX_ADC1_Init>
  MX_SPI2_Init();
 8000c72:	f000 fba7 	bl	80013c4 <MX_SPI2_Init>
  MX_TIM3_Init();
 8000c76:	f000 fc2f 	bl	80014d8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c7a:	f000 fca3 	bl	80015c4 <MX_TIM4_Init>
  MX_I2C2_Init();
 8000c7e:	f000 fb73 	bl	8001368 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000c82:	f000 fbd5 	bl	8001430 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  const volatile uint8_t *userConfig=(const volatile uint8_t *)0x0800D2F0;
 8000c86:	4b9e      	ldr	r3, [pc, #632]	; (8000f00 <main+0x2a8>)
 8000c88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94



//LL_SPI_Enable(SPI2);

  HAL_SPI_Init(&hspi2);
 8000c8c:	489d      	ldr	r0, [pc, #628]	; (8000f04 <main+0x2ac>)
 8000c8e:	f005 fa57 	bl	8006140 <HAL_SPI_Init>
  // lcd_init(); // keep this late or have issues
//HAL_TIM_Base_Start_IT(&htim1);  // This needs to work for irq   ,disbling tim1 made loop a lot faster
//TIM1->CCER=0;
HAL_TIM_Base_Start_IT(&htim3);  // This needs to work for irq
 8000c92:	489d      	ldr	r0, [pc, #628]	; (8000f08 <main+0x2b0>)
 8000c94:	f005 fce7 	bl	8006666 <HAL_TIM_Base_Start_IT>
TIM3->CCER=0;
 8000c98:	4b9c      	ldr	r3, [pc, #624]	; (8000f0c <main+0x2b4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	621a      	str	r2, [r3, #32]
HAL_TIM_Base_Start(&htim2);
 8000c9e:	489c      	ldr	r0, [pc, #624]	; (8000f10 <main+0x2b8>)
 8000ca0:	f005 fcbd 	bl	800661e <HAL_TIM_Base_Start>
HAL_TIM_Base_Start(&htim4);
 8000ca4:	489b      	ldr	r0, [pc, #620]	; (8000f14 <main+0x2bc>)
 8000ca6:	f005 fcba 	bl	800661e <HAL_TIM_Base_Start>
//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  // they both work fine together
HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8000caa:	2108      	movs	r1, #8
 8000cac:	4896      	ldr	r0, [pc, #600]	; (8000f08 <main+0x2b0>)
 8000cae:	f005 fd33 	bl	8006718 <HAL_TIM_PWM_Start>
//HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,pData, 63);
TIM2->CNT=32000;
 8000cb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cb6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000cba:	625a      	str	r2, [r3, #36]	; 0x24
HAL_ADC_Start(&hadc1);
 8000cbc:	4896      	ldr	r0, [pc, #600]	; (8000f18 <main+0x2c0>)
 8000cbe:	f002 fbdd 	bl	800347c <HAL_ADC_Start>
HAL_ADC_Start_DMA(&hadc1, adc_source, 3); //dma start ,needs this and adc start
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	4995      	ldr	r1, [pc, #596]	; (8000f1c <main+0x2c4>)
 8000cc6:	4894      	ldr	r0, [pc, #592]	; (8000f18 <main+0x2c0>)
 8000cc8:	f002 fc7e 	bl	80035c8 <HAL_ADC_Start_DMA>


HAL_I2C_MspInit(&hi2c2);
 8000ccc:	4894      	ldr	r0, [pc, #592]	; (8000f20 <main+0x2c8>)
 8000cce:	f002 f8fd 	bl	8002ecc <HAL_I2C_MspInit>
} // reads stored values for potvalues
*/

uint8_t potSource2[65];
uint8_t potSource3[65];
HAL_I2C_Mem_Read(&hi2c2, 160, (1<<6), 2,&potSource, 64,1000);		// all good
 8000cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd6:	9302      	str	r3, [sp, #8]
 8000cd8:	2340      	movs	r3, #64	; 0x40
 8000cda:	9301      	str	r3, [sp, #4]
 8000cdc:	4b91      	ldr	r3, [pc, #580]	; (8000f24 <main+0x2cc>)
 8000cde:	9300      	str	r3, [sp, #0]
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	2240      	movs	r2, #64	; 0x40
 8000ce4:	21a0      	movs	r1, #160	; 0xa0
 8000ce6:	488e      	ldr	r0, [pc, #568]	; (8000f20 <main+0x2c8>)
 8000ce8:	f004 f86e 	bl	8004dc8 <HAL_I2C_Mem_Read>
HAL_I2C_Mem_Read(&hi2c2, 160, (2<<6), 2,&potSource2,64,1000);
 8000cec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf0:	9302      	str	r3, [sp, #8]
 8000cf2:	2340      	movs	r3, #64	; 0x40
 8000cf4:	9301      	str	r3, [sp, #4]
 8000cf6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	2280      	movs	r2, #128	; 0x80
 8000d00:	21a0      	movs	r1, #160	; 0xa0
 8000d02:	4887      	ldr	r0, [pc, #540]	; (8000f20 <main+0x2c8>)
 8000d04:	f004 f860 	bl	8004dc8 <HAL_I2C_Mem_Read>
HAL_I2C_Mem_Read(&hi2c2, 160, (3<<6), 2,&potSource3,64,1000);
 8000d08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0c:	9302      	str	r3, [sp, #8]
 8000d0e:	2340      	movs	r3, #64	; 0x40
 8000d10:	9301      	str	r3, [sp, #4]
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	9300      	str	r3, [sp, #0]
 8000d16:	2302      	movs	r3, #2
 8000d18:	22c0      	movs	r2, #192	; 0xc0
 8000d1a:	21a0      	movs	r1, #160	; 0xa0
 8000d1c:	4880      	ldr	r0, [pc, #512]	; (8000f20 <main+0x2c8>)
 8000d1e:	f004 f853 	bl	8004dc8 <HAL_I2C_Mem_Read>

for(i=0;i<1024;i++){
 8000d22:	4b81      	ldr	r3, [pc, #516]	; (8000f28 <main+0x2d0>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	801a      	strh	r2, [r3, #0]
 8000d28:	e024      	b.n	8000d74 <main+0x11c>
//	gfx_ram[i]=gfx_char[((i>>5)&7)+((i>>8)<<3)]; // test input fill  8*128 v+h just normal characters
	gfx_ram[i&63] [i>>6]  =gfx_char[8+(i&7)+(((i>>3)*8)&63)];
 8000d2a:	4b7f      	ldr	r3, [pc, #508]	; (8000f28 <main+0x2d0>)
 8000d2c:	881b      	ldrh	r3, [r3, #0]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	f103 0208 	add.w	r2, r3, #8
 8000d36:	4b7c      	ldr	r3, [pc, #496]	; (8000f28 <main+0x2d0>)
 8000d38:	881b      	ldrh	r3, [r3, #0]
 8000d3a:	08db      	lsrs	r3, r3, #3
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	00db      	lsls	r3, r3, #3
 8000d40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000d44:	441a      	add	r2, r3
 8000d46:	4b78      	ldr	r3, [pc, #480]	; (8000f28 <main+0x2d0>)
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d4e:	4976      	ldr	r1, [pc, #472]	; (8000f28 <main+0x2d0>)
 8000d50:	8809      	ldrh	r1, [r1, #0]
 8000d52:	0989      	lsrs	r1, r1, #6
 8000d54:	b289      	uxth	r1, r1
 8000d56:	4608      	mov	r0, r1
 8000d58:	4974      	ldr	r1, [pc, #464]	; (8000f2c <main+0x2d4>)
 8000d5a:	5c89      	ldrb	r1, [r1, r2]
 8000d5c:	4a74      	ldr	r2, [pc, #464]	; (8000f30 <main+0x2d8>)
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	4413      	add	r3, r2
 8000d62:	4403      	add	r3, r0
 8000d64:	460a      	mov	r2, r1
 8000d66:	701a      	strb	r2, [r3, #0]
for(i=0;i<1024;i++){
 8000d68:	4b6f      	ldr	r3, [pc, #444]	; (8000f28 <main+0x2d0>)
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	4b6d      	ldr	r3, [pc, #436]	; (8000f28 <main+0x2d0>)
 8000d72:	801a      	strh	r2, [r3, #0]
 8000d74:	4b6c      	ldr	r3, [pc, #432]	; (8000f28 <main+0x2d0>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d7c:	d3d5      	bcc.n	8000d2a <main+0xd2>
//gfx_ram[i&63] [i>>6]  =250;
}

for(i=0;i<64;i++){
 8000d7e:	4b6a      	ldr	r3, [pc, #424]	; (8000f28 <main+0x2d0>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	801a      	strh	r2, [r3, #0]
 8000d84:	e011      	b.n	8000daa <main+0x152>
	potSource[i+64]=potSource2[i];  //load up from eeprom
 8000d86:	4b68      	ldr	r3, [pc, #416]	; (8000f28 <main+0x2d0>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4b66      	ldr	r3, [pc, #408]	; (8000f28 <main+0x2d0>)
 8000d8e:	881b      	ldrh	r3, [r3, #0]
 8000d90:	3340      	adds	r3, #64	; 0x40
 8000d92:	3298      	adds	r2, #152	; 0x98
 8000d94:	443a      	add	r2, r7
 8000d96:	f812 1c50 	ldrb.w	r1, [r2, #-80]
 8000d9a:	4a62      	ldr	r2, [pc, #392]	; (8000f24 <main+0x2cc>)
 8000d9c:	54d1      	strb	r1, [r2, r3]
for(i=0;i<64;i++){
 8000d9e:	4b62      	ldr	r3, [pc, #392]	; (8000f28 <main+0x2d0>)
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	3301      	adds	r3, #1
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	4b60      	ldr	r3, [pc, #384]	; (8000f28 <main+0x2d0>)
 8000da8:	801a      	strh	r2, [r3, #0]
 8000daa:	4b5f      	ldr	r3, [pc, #380]	; (8000f28 <main+0x2d0>)
 8000dac:	881b      	ldrh	r3, [r3, #0]
 8000dae:	2b3f      	cmp	r3, #63	; 0x3f
 8000db0:	d9e9      	bls.n	8000d86 <main+0x12e>
}

for(i=0;i<64;i++){
 8000db2:	4b5d      	ldr	r3, [pc, #372]	; (8000f28 <main+0x2d0>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	801a      	strh	r2, [r3, #0]
 8000db8:	e011      	b.n	8000dde <main+0x186>
	potSource[i+128]=potSource3[i];
 8000dba:	4b5b      	ldr	r3, [pc, #364]	; (8000f28 <main+0x2d0>)
 8000dbc:	881b      	ldrh	r3, [r3, #0]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	4b59      	ldr	r3, [pc, #356]	; (8000f28 <main+0x2d0>)
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	3380      	adds	r3, #128	; 0x80
 8000dc6:	3298      	adds	r2, #152	; 0x98
 8000dc8:	443a      	add	r2, r7
 8000dca:	f812 1c94 	ldrb.w	r1, [r2, #-148]
 8000dce:	4a55      	ldr	r2, [pc, #340]	; (8000f24 <main+0x2cc>)
 8000dd0:	54d1      	strb	r1, [r2, r3]
for(i=0;i<64;i++){
 8000dd2:	4b55      	ldr	r3, [pc, #340]	; (8000f28 <main+0x2d0>)
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	4b53      	ldr	r3, [pc, #332]	; (8000f28 <main+0x2d0>)
 8000ddc:	801a      	strh	r2, [r3, #0]
 8000dde:	4b52      	ldr	r3, [pc, #328]	; (8000f28 <main+0x2d0>)
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	2b3f      	cmp	r3, #63	; 0x3f
 8000de4:	d9e9      	bls.n	8000dba <main+0x162>
}

for(i=0;i<180;i++){
 8000de6:	4b50      	ldr	r3, [pc, #320]	; (8000f28 <main+0x2d0>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	801a      	strh	r2, [r3, #0]
 8000dec:	e010      	b.n	8000e10 <main+0x1b8>
	potValues[i]=potSource[i]>>4;
 8000dee:	4b4e      	ldr	r3, [pc, #312]	; (8000f28 <main+0x2d0>)
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	4b4b      	ldr	r3, [pc, #300]	; (8000f24 <main+0x2cc>)
 8000df6:	5c9b      	ldrb	r3, [r3, r2]
 8000df8:	4a4b      	ldr	r2, [pc, #300]	; (8000f28 <main+0x2d0>)
 8000dfa:	8812      	ldrh	r2, [r2, #0]
 8000dfc:	091b      	lsrs	r3, r3, #4
 8000dfe:	b2d9      	uxtb	r1, r3
 8000e00:	4b4c      	ldr	r3, [pc, #304]	; (8000f34 <main+0x2dc>)
 8000e02:	5499      	strb	r1, [r3, r2]
for(i=0;i<180;i++){
 8000e04:	4b48      	ldr	r3, [pc, #288]	; (8000f28 <main+0x2d0>)
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	4b46      	ldr	r3, [pc, #280]	; (8000f28 <main+0x2d0>)
 8000e0e:	801a      	strh	r2, [r3, #0]
 8000e10:	4b45      	ldr	r3, [pc, #276]	; (8000f28 <main+0x2d0>)
 8000e12:	881b      	ldrh	r3, [r3, #0]
 8000e14:	2bb3      	cmp	r3, #179	; 0xb3
 8000e16:	d9ea      	bls.n	8000dee <main+0x196>
}

float tempo_hold;  // calculate tempo look up
for (i=0;i<161;i++) {
 8000e18:	4b43      	ldr	r3, [pc, #268]	; (8000f28 <main+0x2d0>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	801a      	strh	r2, [r3, #0]
 8000e1e:	e040      	b.n	8000ea2 <main+0x24a>

tempo_hold=(i+180)*0.0166666666;
 8000e20:	4b41      	ldr	r3, [pc, #260]	; (8000f28 <main+0x2d0>)
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	33b4      	adds	r3, #180	; 0xb4
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fc52 	bl	80006d0 <__aeabi_i2d>
 8000e2c:	a330      	add	r3, pc, #192	; (adr r3, 8000ef0 <main+0x298>)
 8000e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e32:	f7ff f9d1 	bl	80001d8 <__aeabi_dmul>
 8000e36:	4602      	mov	r2, r0
 8000e38:	460b      	mov	r3, r1
 8000e3a:	4610      	mov	r0, r2
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f7ff fd39 	bl	80008b4 <__aeabi_d2f>
 8000e42:	4603      	mov	r3, r0
 8000e44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

tempo_hold=	1/tempo_hold;
 8000e48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000e4c:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8000e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e54:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
tempo_hold=	tempo_hold*2187.6;	
 8000e58:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000e5c:	f7ff fc4a 	bl	80006f4 <__aeabi_f2d>
 8000e60:	a325      	add	r3, pc, #148	; (adr r3, 8000ef8 <main+0x2a0>)
 8000e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e66:	f7ff f9b7 	bl	80001d8 <__aeabi_dmul>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	4610      	mov	r0, r2
 8000e70:	4619      	mov	r1, r3
 8000e72:	f7ff fd1f 	bl	80008b4 <__aeabi_d2f>
 8000e76:	4603      	mov	r3, r0
 8000e78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

tempo_lut[i]=tempo_hold;
 8000e7c:	4b2a      	ldr	r3, [pc, #168]	; (8000f28 <main+0x2d0>)
 8000e7e:	881b      	ldrh	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8000e86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e8a:	ee17 3a90 	vmov	r3, s15
 8000e8e:	b299      	uxth	r1, r3
 8000e90:	4b29      	ldr	r3, [pc, #164]	; (8000f38 <main+0x2e0>)
 8000e92:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
for (i=0;i<161;i++) {
 8000e96:	4b24      	ldr	r3, [pc, #144]	; (8000f28 <main+0x2d0>)
 8000e98:	881b      	ldrh	r3, [r3, #0]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	b29a      	uxth	r2, r3
 8000e9e:	4b22      	ldr	r3, [pc, #136]	; (8000f28 <main+0x2d0>)
 8000ea0:	801a      	strh	r2, [r3, #0]
 8000ea2:	4b21      	ldr	r3, [pc, #132]	; (8000f28 <main+0x2d0>)
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	2ba0      	cmp	r3, #160	; 0xa0
 8000ea8:	d9ba      	bls.n	8000e20 <main+0x1c8>
}
isrMask=571; // def tempo 571=180bpm , 20 ms /isrcount
 8000eaa:	4b24      	ldr	r3, [pc, #144]	; (8000f3c <main+0x2e4>)
 8000eac:	f240 223b 	movw	r2, #571	; 0x23b
 8000eb0:	801a      	strh	r2, [r3, #0]

noteTiming=24;
 8000eb2:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <main+0x2e8>)
 8000eb4:	2218      	movs	r2, #24
 8000eb6:	701a      	strb	r2, [r3, #0]
for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <main+0x2d0>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	801a      	strh	r2, [r3, #0]
 8000ebe:	e00b      	b.n	8000ed8 <main+0x280>
	spell[i]=67;
 8000ec0:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <main+0x2d0>)
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <main+0x2ec>)
 8000ec8:	2143      	movs	r1, #67	; 0x43
 8000eca:	5499      	strb	r1, [r3, r2]
for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8000ecc:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <main+0x2d0>)
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <main+0x2d0>)
 8000ed6:	801a      	strh	r2, [r3, #0]
 8000ed8:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <main+0x2d0>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000ee0:	d3ee      	bcc.n	8000ec0 <main+0x268>

}

for (n=0;n<128;n++)	{ //fills up gfx ram or not
 8000ee2:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <main+0x2f0>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	801a      	strh	r2, [r3, #0]
 8000ee8:	e03d      	b.n	8000f66 <main+0x30e>
 8000eea:	bf00      	nop
 8000eec:	f3af 8000 	nop.w
 8000ef0:	0febdd13 	.word	0x0febdd13
 8000ef4:	3f911111 	.word	0x3f911111
 8000ef8:	33333333 	.word	0x33333333
 8000efc:	40a11733 	.word	0x40a11733
 8000f00:	0800d2f0 	.word	0x0800d2f0
 8000f04:	200006e4 	.word	0x200006e4
 8000f08:	2000077c 	.word	0x2000077c
 8000f0c:	40000400 	.word	0x40000400
 8000f10:	2000073c 	.word	0x2000073c
 8000f14:	200007bc 	.word	0x200007bc
 8000f18:	200005e8 	.word	0x200005e8
 8000f1c:	200012a4 	.word	0x200012a4
 8000f20:	20000690 	.word	0x20000690
 8000f24:	200008fc 	.word	0x200008fc
 8000f28:	20000a58 	.word	0x20000a58
 8000f2c:	200001b0 	.word	0x200001b0
 8000f30:	20001508 	.word	0x20001508
 8000f34:	200007fc 	.word	0x200007fc
 8000f38:	200013c4 	.word	0x200013c4
 8000f3c:	20000a04 	.word	0x20000a04
 8000f40:	200009fc 	.word	0x200009fc
 8000f44:	20000000 	.word	0x20000000
 8000f48:	20000a36 	.word	0x20000a36

	//menuSelect=n*2;menuSelectX=i;displayBuffer();
init_b=n;
 8000f4c:	4b83      	ldr	r3, [pc, #524]	; (800115c <main+0x504>)
 8000f4e:	881b      	ldrh	r3, [r3, #0]
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4b83      	ldr	r3, [pc, #524]	; (8001160 <main+0x508>)
 8000f54:	701a      	strb	r2, [r3, #0]

displayBuffer();
 8000f56:	f000 ff4f 	bl	8001df8 <displayBuffer>
for (n=0;n<128;n++)	{ //fills up gfx ram or not
 8000f5a:	4b80      	ldr	r3, [pc, #512]	; (800115c <main+0x504>)
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	4b7e      	ldr	r3, [pc, #504]	; (800115c <main+0x504>)
 8000f64:	801a      	strh	r2, [r3, #0]
 8000f66:	4b7d      	ldr	r3, [pc, #500]	; (800115c <main+0x504>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	2b7f      	cmp	r3, #127	; 0x7f
 8000f6c:	d9ee      	bls.n	8000f4c <main+0x2f4>
}

menuSelect=0;
 8000f6e:	4b7d      	ldr	r3, [pc, #500]	; (8001164 <main+0x50c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
// fill up sample
firstbarLoop=0;
 8000f74:	4b7c      	ldr	r3, [pc, #496]	; (8001168 <main+0x510>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_counter++ ;
 8000f7a:	4b7c      	ldr	r3, [pc, #496]	; (800116c <main+0x514>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4b7a      	ldr	r3, [pc, #488]	; (800116c <main+0x514>)
 8000f84:	701a      	strb	r2, [r3, #0]
	  loop_counter2++;//
 8000f86:	4b7a      	ldr	r3, [pc, #488]	; (8001170 <main+0x518>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	4a78      	ldr	r2, [pc, #480]	; (8001170 <main+0x518>)
 8000f8e:	6013      	str	r3, [r2, #0]
	  // if (menu_page<320) lcd_feedback();  //curious no issues with lcd without this  , maybe spell writing
	 {analoginputloopb();}   // about 1 sec
 8000f90:	f000 fc50 	bl	8001834 <analoginputloopb>
	  if (loop_counter2==9096) {    //   4096=1min=32bytes so 4mins per 128 bank or 15 writes/hour
 8000f94:	4b76      	ldr	r3, [pc, #472]	; (8001170 <main+0x518>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f242 3288 	movw	r2, #9096	; 0x2388
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d137      	bne.n	8001010 <main+0x3b8>

	  	mem_buf=potSource[mem_count];
 8000fa0:	4b74      	ldr	r3, [pc, #464]	; (8001174 <main+0x51c>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b74      	ldr	r3, [pc, #464]	; (8001178 <main+0x520>)
 8000fa8:	5c9a      	ldrb	r2, [r3, r2]
 8000faa:	4b74      	ldr	r3, [pc, #464]	; (800117c <main+0x524>)
 8000fac:	701a      	strb	r2, [r3, #0]
	  	// read values from stored
	  	HAL_I2C_Mem_Write(&hi2c2, 160, ((1+(mem_count>>6))<<6)+(mem_count&63), 2, &mem_buf, 1, 1000);
 8000fae:	4b71      	ldr	r3, [pc, #452]	; (8001174 <main+0x51c>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	099b      	lsrs	r3, r3, #6
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	3301      	adds	r3, #1
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	019b      	lsls	r3, r3, #6
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	4b6c      	ldr	r3, [pc, #432]	; (8001174 <main+0x51c>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	4413      	add	r3, r2
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd4:	9302      	str	r3, [sp, #8]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	4b68      	ldr	r3, [pc, #416]	; (800117c <main+0x524>)
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2302      	movs	r3, #2
 8000fe0:	21a0      	movs	r1, #160	; 0xa0
 8000fe2:	4867      	ldr	r0, [pc, #412]	; (8001180 <main+0x528>)
 8000fe4:	f003 fdf6 	bl	8004bd4 <HAL_I2C_Mem_Write>
	  	HAL_Delay(5);
 8000fe8:	2005      	movs	r0, #5
 8000fea:	f002 f9df 	bl	80033ac <HAL_Delay>
	  	if (mem_count==255) mem_count=0; else mem_count++;  // write to first
 8000fee:	4b61      	ldr	r3, [pc, #388]	; (8001174 <main+0x51c>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2bff      	cmp	r3, #255	; 0xff
 8000ff4:	d103      	bne.n	8000ffe <main+0x3a6>
 8000ff6:	4b5f      	ldr	r3, [pc, #380]	; (8001174 <main+0x51c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
 8000ffc:	e005      	b.n	800100a <main+0x3b2>
 8000ffe:	4b5d      	ldr	r3, [pc, #372]	; (8001174 <main+0x51c>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	3301      	adds	r3, #1
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4b5b      	ldr	r3, [pc, #364]	; (8001174 <main+0x51c>)
 8001008:	701a      	strb	r2, [r3, #0]
	  	loop_counter2=0; //reset
 800100a:	4b59      	ldr	r3, [pc, #356]	; (8001170 <main+0x518>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]

	  }

	  if (!(loop_counter2 & 2047))	 { uint8_t enc2_tempc=enc2_dir;  //hold enc till finished , this to clean up characters for now ,works ok
 8001010:	4b57      	ldr	r3, [pc, #348]	; (8001170 <main+0x518>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001018:	2b00      	cmp	r3, #0
 800101a:	d120      	bne.n	800105e <main+0x406>
 800101c:	4b59      	ldr	r3, [pc, #356]	; (8001184 <main+0x52c>)
 800101e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001022:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

		  for (i=0;i<128;i++) {
 8001026:	4b58      	ldr	r3, [pc, #352]	; (8001188 <main+0x530>)
 8001028:	2200      	movs	r2, #0
 800102a:	801a      	strh	r2, [r3, #0]
 800102c:	e00c      	b.n	8001048 <main+0x3f0>
		enc2_dir=i;
 800102e:	4b56      	ldr	r3, [pc, #344]	; (8001188 <main+0x530>)
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	b21a      	sxth	r2, r3
 8001034:	4b53      	ldr	r3, [pc, #332]	; (8001184 <main+0x52c>)
 8001036:	801a      	strh	r2, [r3, #0]
		displayBuffer();
 8001038:	f000 fede 	bl	8001df8 <displayBuffer>
		  for (i=0;i<128;i++) {
 800103c:	4b52      	ldr	r3, [pc, #328]	; (8001188 <main+0x530>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	3301      	adds	r3, #1
 8001042:	b29a      	uxth	r2, r3
 8001044:	4b50      	ldr	r3, [pc, #320]	; (8001188 <main+0x530>)
 8001046:	801a      	strh	r2, [r3, #0]
 8001048:	4b4f      	ldr	r3, [pc, #316]	; (8001188 <main+0x530>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	2b7f      	cmp	r3, #127	; 0x7f
 800104e:	d9ee      	bls.n	800102e <main+0x3d6>
		  }
enc2_dir=enc2_tempc;
 8001050:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001054:	b21a      	sxth	r2, r3
 8001056:	4b4b      	ldr	r3, [pc, #300]	; (8001184 <main+0x52c>)
 8001058:	801a      	strh	r2, [r3, #0]
displayBuffer();
 800105a:	f000 fecd 	bl	8001df8 <displayBuffer>
	  }
	// if (!(loop_counter2 & 1023)) {enc2_dir=i; displayBuffer(); //needs to be before display update or scroll breaks
//	  if ((gfx_skip==18) && (!(gfx_counter[0]&7))) displayBuffer(); // doesn't need to be fast

	  if (gfx_skip==18) displayBuffer(); // doesn't need to be fast
 800105e:	4b4b      	ldr	r3, [pc, #300]	; (800118c <main+0x534>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b12      	cmp	r3, #18
 8001064:	d101      	bne.n	800106a <main+0x412>
 8001066:	f000 fec7 	bl	8001df8 <displayBuffer>


	  //  analoginputloopb(); // no delay, maybe some
	//  for (i=0;i<7;i++) {display_init();}
	  if (init<6)
 800106a:	4b49      	ldr	r3, [pc, #292]	; (8001190 <main+0x538>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b05      	cmp	r3, #5
 8001070:	d810      	bhi.n	8001094 <main+0x43c>
{
	  for (i=0;i<6;i++) {display_init();}  //1-2ms ?  change length if flickering ,maybe initial data
 8001072:	4b45      	ldr	r3, [pc, #276]	; (8001188 <main+0x530>)
 8001074:	2200      	movs	r2, #0
 8001076:	801a      	strh	r2, [r3, #0]
 8001078:	e007      	b.n	800108a <main+0x432>
 800107a:	f000 fcdb 	bl	8001a34 <display_init>
 800107e:	4b42      	ldr	r3, [pc, #264]	; (8001188 <main+0x530>)
 8001080:	881b      	ldrh	r3, [r3, #0]
 8001082:	3301      	adds	r3, #1
 8001084:	b29a      	uxth	r2, r3
 8001086:	4b40      	ldr	r3, [pc, #256]	; (8001188 <main+0x530>)
 8001088:	801a      	strh	r2, [r3, #0]
 800108a:	4b3f      	ldr	r3, [pc, #252]	; (8001188 <main+0x530>)
 800108c:	881b      	ldrh	r3, [r3, #0]
 800108e:	2b05      	cmp	r3, #5
 8001090:	d9f3      	bls.n	800107a <main+0x422>
 8001092:	e001      	b.n	8001098 <main+0x440>
} else {display_update(); }
 8001094:	f000 fdd6 	bl	8001c44 <display_update>

	  ///////////////////////////////////////////////////////////////////////////////

	  if (loop_counter & 255)	{ // grab adc readings + 3ms , 32 step
 8001098:	4b34      	ldr	r3, [pc, #208]	; (800116c <main+0x514>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d022      	beq.n	80010e6 <main+0x48e>
	  	for (i=0;i<3;i++) {
 80010a0:	4b39      	ldr	r3, [pc, #228]	; (8001188 <main+0x530>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	801a      	strh	r2, [r3, #0]
 80010a6:	e017      	b.n	80010d8 <main+0x480>

	  	adc_values[2-i]= (adc_source[i]>>7) &31;
 80010a8:	4b37      	ldr	r3, [pc, #220]	; (8001188 <main+0x530>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b39      	ldr	r3, [pc, #228]	; (8001194 <main+0x53c>)
 80010b0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80010b4:	09db      	lsrs	r3, r3, #7
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4b33      	ldr	r3, [pc, #204]	; (8001188 <main+0x530>)
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	f1c3 0302 	rsb	r3, r3, #2
 80010c2:	f002 021f 	and.w	r2, r2, #31
 80010c6:	b2d1      	uxtb	r1, r2
 80010c8:	4a33      	ldr	r2, [pc, #204]	; (8001198 <main+0x540>)
 80010ca:	54d1      	strb	r1, [r2, r3]
	  	for (i=0;i<3;i++) {
 80010cc:	4b2e      	ldr	r3, [pc, #184]	; (8001188 <main+0x530>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	3301      	adds	r3, #1
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	4b2c      	ldr	r3, [pc, #176]	; (8001188 <main+0x530>)
 80010d6:	801a      	strh	r2, [r3, #0]
 80010d8:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <main+0x530>)
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d9e3      	bls.n	80010a8 <main+0x450>
	  }
	  	loop_counter=0;
 80010e0:	4b22      	ldr	r3, [pc, #136]	; (800116c <main+0x514>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
	  }

	  if ((seq_pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 80010e6:	4b2d      	ldr	r3, [pc, #180]	; (800119c <main+0x544>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b07      	cmp	r3, #7
 80010ec:	d106      	bne.n	80010fc <main+0x4a4>
 80010ee:	4b2c      	ldr	r3, [pc, #176]	; (80011a0 <main+0x548>)
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d102      	bne.n	80010fc <main+0x4a4>
 80010f6:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <main+0x548>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	801a      	strh	r2, [r3, #0]
	   if (promValue<64) promValue=promValue+1 ; else promValue=0;  // fetch eeprom   nogo
	  	  if ((promValues[promValue] ) !=(potValues[promValue]))  EEPROM.write(promValue,(potValues[promValue]));   //  not too happy can totally kill speed  will have to put elsewhere
	  	  promValues[promValue] =potValues[promValue];
	  	   */

	  	     HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,(seq_pos & 1)); // easy skip ?
 80010fc:	4b27      	ldr	r3, [pc, #156]	; (800119c <main+0x544>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	b2db      	uxtb	r3, r3
 8001106:	461a      	mov	r2, r3
 8001108:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800110c:	4825      	ldr	r0, [pc, #148]	; (80011a4 <main+0x54c>)
 800110e:	f003 fc03 	bl	8004918 <HAL_GPIO_WritePin>
	  	    // very inconsistent

	  if (sample_point>511) sample_pointD=0; // loop when zero cross , good but limited, works ok
 8001112:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <main+0x550>)
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	b29b      	uxth	r3, r3
 8001118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800111c:	d302      	bcc.n	8001124 <main+0x4cc>
 800111e:	4b23      	ldr	r3, [pc, #140]	; (80011ac <main+0x554>)
 8001120:	2200      	movs	r2, #0
 8001122:	801a      	strh	r2, [r3, #0]
	  if (sample_point<511)  sample_pointD=512;
 8001124:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <main+0x550>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	b29b      	uxth	r3, r3
 800112a:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800112e:	d803      	bhi.n	8001138 <main+0x4e0>
 8001130:	4b1e      	ldr	r3, [pc, #120]	; (80011ac <main+0x554>)
 8001132:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001136:	801a      	strh	r2, [r3, #0]


	  if (sample_pointB!=sample_pointD) bank_write=1; // set start of buffer ,grab , works ok
 8001138:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <main+0x558>)
 800113a:	881a      	ldrh	r2, [r3, #0]
 800113c:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <main+0x554>)
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	429a      	cmp	r2, r3
 8001142:	d002      	beq.n	800114a <main+0x4f2>
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <main+0x55c>)
 8001146:	2201      	movs	r2, #1
 8001148:	801a      	strh	r2, [r3, #0]
	  if (bank_write){
 800114a:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <main+0x55c>)
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	f43f af13 	beq.w	8000f7a <main+0x322>

	  	sampling();
 8001154:	f000 ff34 	bl	8001fc0 <sampling>
	  loop_counter++ ;
 8001158:	e70f      	b.n	8000f7a <main+0x322>
 800115a:	bf00      	nop
 800115c:	20000a36 	.word	0x20000a36
 8001160:	20001322 	.word	0x20001322
 8001164:	200009fd 	.word	0x200009fd
 8001168:	20000a02 	.word	0x20000a02
 800116c:	20000a54 	.word	0x20000a54
 8001170:	20001328 	.word	0x20001328
 8001174:	20001327 	.word	0x20001327
 8001178:	200008fc 	.word	0x200008fc
 800117c:	2000132c 	.word	0x2000132c
 8001180:	20000690 	.word	0x20000690
 8001184:	20001312 	.word	0x20001312
 8001188:	20000a58 	.word	0x20000a58
 800118c:	200005b0 	.word	0x200005b0
 8001190:	20001321 	.word	0x20001321
 8001194:	200012a4 	.word	0x200012a4
 8001198:	200001a8 	.word	0x200001a8
 800119c:	20000a30 	.word	0x20000a30
 80011a0:	20001318 	.word	0x20001318
 80011a4:	40020800 	.word	0x40020800
 80011a8:	2000125e 	.word	0x2000125e
 80011ac:	20001262 	.word	0x20001262
 80011b0:	20000a56 	.word	0x20000a56
 80011b4:	200001ae 	.word	0x200001ae

080011b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b094      	sub	sp, #80	; 0x50
 80011bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011be:	f107 0320 	add.w	r3, r7, #32
 80011c2:	2230      	movs	r2, #48	; 0x30
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f006 f9da 	bl	8007580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011dc:	2300      	movs	r3, #0
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	4b28      	ldr	r3, [pc, #160]	; (8001284 <SystemClock_Config+0xcc>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	4a27      	ldr	r2, [pc, #156]	; (8001284 <SystemClock_Config+0xcc>)
 80011e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ea:	6413      	str	r3, [r2, #64]	; 0x40
 80011ec:	4b25      	ldr	r3, [pc, #148]	; (8001284 <SystemClock_Config+0xcc>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f8:	2300      	movs	r3, #0
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	4b22      	ldr	r3, [pc, #136]	; (8001288 <SystemClock_Config+0xd0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a21      	ldr	r2, [pc, #132]	; (8001288 <SystemClock_Config+0xd0>)
 8001202:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <SystemClock_Config+0xd0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001214:	2302      	movs	r3, #2
 8001216:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001218:	2301      	movs	r3, #1
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800121c:	2310      	movs	r3, #16
 800121e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001220:	2302      	movs	r3, #2
 8001222:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001224:	2300      	movs	r3, #0
 8001226:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001228:	2308      	movs	r3, #8
 800122a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800122c:	2364      	movs	r3, #100	; 0x64
 800122e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001230:	2302      	movs	r3, #2
 8001232:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001234:	2304      	movs	r3, #4
 8001236:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001238:	f107 0320 	add.w	r3, r7, #32
 800123c:	4618      	mov	r0, r3
 800123e:	f004 fb45 	bl	80058cc <HAL_RCC_OscConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001248:	f001 fd9a 	bl	8002d80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124c:	230f      	movs	r3, #15
 800124e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001250:	2302      	movs	r3, #2
 8001252:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800125c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800125e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001262:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	2103      	movs	r1, #3
 800126a:	4618      	mov	r0, r3
 800126c:	f004 fd9c 	bl	8005da8 <HAL_RCC_ClockConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001276:	f001 fd83 	bl	8002d80 <Error_Handler>
  }
}
 800127a:	bf00      	nop
 800127c:	3750      	adds	r7, #80	; 0x50
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800
 8001288:	40007000 	.word	0x40007000

0800128c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001292:	463b      	mov	r3, r7
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800129e:	4b2f      	ldr	r3, [pc, #188]	; (800135c <MX_ADC1_Init+0xd0>)
 80012a0:	4a2f      	ldr	r2, [pc, #188]	; (8001360 <MX_ADC1_Init+0xd4>)
 80012a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80012a4:	4b2d      	ldr	r3, [pc, #180]	; (800135c <MX_ADC1_Init+0xd0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012aa:	4b2c      	ldr	r3, [pc, #176]	; (800135c <MX_ADC1_Init+0xd0>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80012b0:	4b2a      	ldr	r3, [pc, #168]	; (800135c <MX_ADC1_Init+0xd0>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012b6:	4b29      	ldr	r3, [pc, #164]	; (800135c <MX_ADC1_Init+0xd0>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012bc:	4b27      	ldr	r3, [pc, #156]	; (800135c <MX_ADC1_Init+0xd0>)
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012c4:	4b25      	ldr	r3, [pc, #148]	; (800135c <MX_ADC1_Init+0xd0>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012ca:	4b24      	ldr	r3, [pc, #144]	; (800135c <MX_ADC1_Init+0xd0>)
 80012cc:	4a25      	ldr	r2, [pc, #148]	; (8001364 <MX_ADC1_Init+0xd8>)
 80012ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012d0:	4b22      	ldr	r3, [pc, #136]	; (800135c <MX_ADC1_Init+0xd0>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80012d6:	4b21      	ldr	r3, [pc, #132]	; (800135c <MX_ADC1_Init+0xd0>)
 80012d8:	2203      	movs	r2, #3
 80012da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80012dc:	4b1f      	ldr	r3, [pc, #124]	; (800135c <MX_ADC1_Init+0xd0>)
 80012de:	2201      	movs	r2, #1
 80012e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80012e4:	4b1d      	ldr	r3, [pc, #116]	; (800135c <MX_ADC1_Init+0xd0>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012ea:	481c      	ldr	r0, [pc, #112]	; (800135c <MX_ADC1_Init+0xd0>)
 80012ec:	f002 f882 	bl	80033f4 <HAL_ADC_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80012f6:	f001 fd43 	bl	8002d80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012fa:	2303      	movs	r3, #3
 80012fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012fe:	2301      	movs	r3, #1
 8001300:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001302:	2307      	movs	r3, #7
 8001304:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001306:	463b      	mov	r3, r7
 8001308:	4619      	mov	r1, r3
 800130a:	4814      	ldr	r0, [pc, #80]	; (800135c <MX_ADC1_Init+0xd0>)
 800130c:	f002 fa4e 	bl	80037ac <HAL_ADC_ConfigChannel>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001316:	f001 fd33 	bl	8002d80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800131a:	2304      	movs	r3, #4
 800131c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800131e:	2302      	movs	r3, #2
 8001320:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001322:	463b      	mov	r3, r7
 8001324:	4619      	mov	r1, r3
 8001326:	480d      	ldr	r0, [pc, #52]	; (800135c <MX_ADC1_Init+0xd0>)
 8001328:	f002 fa40 	bl	80037ac <HAL_ADC_ConfigChannel>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001332:	f001 fd25 	bl	8002d80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001336:	2305      	movs	r3, #5
 8001338:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800133a:	2303      	movs	r3, #3
 800133c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800133e:	463b      	mov	r3, r7
 8001340:	4619      	mov	r1, r3
 8001342:	4806      	ldr	r0, [pc, #24]	; (800135c <MX_ADC1_Init+0xd0>)
 8001344:	f002 fa32 	bl	80037ac <HAL_ADC_ConfigChannel>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800134e:	f001 fd17 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200005e8 	.word	0x200005e8
 8001360:	40012000 	.word	0x40012000
 8001364:	0f000001 	.word	0x0f000001

08001368 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <MX_I2C2_Init+0x50>)
 800136e:	4a13      	ldr	r2, [pc, #76]	; (80013bc <MX_I2C2_Init+0x54>)
 8001370:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_I2C2_Init+0x50>)
 8001374:	4a12      	ldr	r2, [pc, #72]	; (80013c0 <MX_I2C2_Init+0x58>)
 8001376:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <MX_I2C2_Init+0x50>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <MX_I2C2_Init+0x50>)
 8001380:	2200      	movs	r2, #0
 8001382:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <MX_I2C2_Init+0x50>)
 8001386:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800138a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800138c:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <MX_I2C2_Init+0x50>)
 800138e:	2200      	movs	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <MX_I2C2_Init+0x50>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <MX_I2C2_Init+0x50>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <MX_I2C2_Init+0x50>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013a4:	4804      	ldr	r0, [pc, #16]	; (80013b8 <MX_I2C2_Init+0x50>)
 80013a6:	f003 fad1 	bl	800494c <HAL_I2C_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013b0:	f001 fce6 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000690 	.word	0x20000690
 80013bc:	40005800 	.word	0x40005800
 80013c0:	00061a80 	.word	0x00061a80

080013c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013c8:	4b17      	ldr	r3, [pc, #92]	; (8001428 <MX_SPI2_Init+0x64>)
 80013ca:	4a18      	ldr	r2, [pc, #96]	; (800142c <MX_SPI2_Init+0x68>)
 80013cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013ce:	4b16      	ldr	r3, [pc, #88]	; (8001428 <MX_SPI2_Init+0x64>)
 80013d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013d6:	4b14      	ldr	r3, [pc, #80]	; (8001428 <MX_SPI2_Init+0x64>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80013dc:	4b12      	ldr	r3, [pc, #72]	; (8001428 <MX_SPI2_Init+0x64>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <MX_SPI2_Init+0x64>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <MX_SPI2_Init+0x64>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <MX_SPI2_Init+0x64>)
 80013f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <MX_SPI2_Init+0x64>)
 80013f8:	2230      	movs	r2, #48	; 0x30
 80013fa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013fc:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <MX_SPI2_Init+0x64>)
 80013fe:	2200      	movs	r2, #0
 8001400:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <MX_SPI2_Init+0x64>)
 8001404:	2200      	movs	r2, #0
 8001406:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <MX_SPI2_Init+0x64>)
 800140a:	2200      	movs	r2, #0
 800140c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <MX_SPI2_Init+0x64>)
 8001410:	220a      	movs	r2, #10
 8001412:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001414:	4804      	ldr	r0, [pc, #16]	; (8001428 <MX_SPI2_Init+0x64>)
 8001416:	f004 fe93 	bl	8006140 <HAL_SPI_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001420:	f001 fcae 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	200006e4 	.word	0x200006e4
 800142c:	40003800 	.word	0x40003800

08001430 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08c      	sub	sp, #48	; 0x30
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001436:	f107 030c 	add.w	r3, r7, #12
 800143a:	2224      	movs	r2, #36	; 0x24
 800143c:	2100      	movs	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f006 f89e 	bl	8007580 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800144c:	4b21      	ldr	r3, [pc, #132]	; (80014d4 <MX_TIM2_Init+0xa4>)
 800144e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001452:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001454:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <MX_TIM2_Init+0xa4>)
 8001456:	2200      	movs	r2, #0
 8001458:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145a:	4b1e      	ldr	r3, [pc, #120]	; (80014d4 <MX_TIM2_Init+0xa4>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001460:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <MX_TIM2_Init+0xa4>)
 8001462:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001466:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001468:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <MX_TIM2_Init+0xa4>)
 800146a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800146e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001470:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <MX_TIM2_Init+0xa4>)
 8001472:	2200      	movs	r2, #0
 8001474:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001476:	2301      	movs	r3, #1
 8001478:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800147a:	2302      	movs	r3, #2
 800147c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800147e:	2301      	movs	r3, #1
 8001480:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001482:	2300      	movs	r3, #0
 8001484:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8001486:	2301      	movs	r3, #1
 8001488:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800148a:	2302      	movs	r3, #2
 800148c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800148e:	2301      	movs	r3, #1
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001492:	2300      	movs	r3, #0
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 8001496:	2301      	movs	r3, #1
 8001498:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800149a:	f107 030c 	add.w	r3, r7, #12
 800149e:	4619      	mov	r1, r3
 80014a0:	480c      	ldr	r0, [pc, #48]	; (80014d4 <MX_TIM2_Init+0xa4>)
 80014a2:	f005 f96b 	bl	800677c <HAL_TIM_Encoder_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80014ac:	f001 fc68 	bl	8002d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b0:	2300      	movs	r3, #0
 80014b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	4619      	mov	r1, r3
 80014bc:	4805      	ldr	r0, [pc, #20]	; (80014d4 <MX_TIM2_Init+0xa4>)
 80014be:	f005 ff75 	bl	80073ac <HAL_TIMEx_MasterConfigSynchronization>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80014c8:	f001 fc5a 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014cc:	bf00      	nop
 80014ce:	3730      	adds	r7, #48	; 0x30
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	2000073c 	.word	0x2000073c

080014d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08e      	sub	sp, #56	; 0x38
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ec:	f107 0320 	add.w	r3, r7, #32
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
 8001504:	615a      	str	r2, [r3, #20]
 8001506:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001508:	4b2c      	ldr	r3, [pc, #176]	; (80015bc <MX_TIM3_Init+0xe4>)
 800150a:	4a2d      	ldr	r2, [pc, #180]	; (80015c0 <MX_TIM3_Init+0xe8>)
 800150c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800150e:	4b2b      	ldr	r3, [pc, #172]	; (80015bc <MX_TIM3_Init+0xe4>)
 8001510:	2200      	movs	r2, #0
 8001512:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001514:	4b29      	ldr	r3, [pc, #164]	; (80015bc <MX_TIM3_Init+0xe4>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2857;
 800151a:	4b28      	ldr	r3, [pc, #160]	; (80015bc <MX_TIM3_Init+0xe4>)
 800151c:	f640 3229 	movw	r2, #2857	; 0xb29
 8001520:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001522:	4b26      	ldr	r3, [pc, #152]	; (80015bc <MX_TIM3_Init+0xe4>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001528:	4b24      	ldr	r3, [pc, #144]	; (80015bc <MX_TIM3_Init+0xe4>)
 800152a:	2280      	movs	r2, #128	; 0x80
 800152c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800152e:	4823      	ldr	r0, [pc, #140]	; (80015bc <MX_TIM3_Init+0xe4>)
 8001530:	f005 f84a 	bl	80065c8 <HAL_TIM_Base_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800153a:	f001 fc21 	bl	8002d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800153e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001544:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001548:	4619      	mov	r1, r3
 800154a:	481c      	ldr	r0, [pc, #112]	; (80015bc <MX_TIM3_Init+0xe4>)
 800154c:	f005 fb76 	bl	8006c3c <HAL_TIM_ConfigClockSource>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001556:	f001 fc13 	bl	8002d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800155a:	4818      	ldr	r0, [pc, #96]	; (80015bc <MX_TIM3_Init+0xe4>)
 800155c:	f005 f8a7 	bl	80066ae <HAL_TIM_PWM_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001566:	f001 fc0b 	bl	8002d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156a:	2300      	movs	r3, #0
 800156c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156e:	2300      	movs	r3, #0
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001572:	f107 0320 	add.w	r3, r7, #32
 8001576:	4619      	mov	r1, r3
 8001578:	4810      	ldr	r0, [pc, #64]	; (80015bc <MX_TIM3_Init+0xe4>)
 800157a:	f005 ff17 	bl	80073ac <HAL_TIMEx_MasterConfigSynchronization>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001584:	f001 fbfc 	bl	8002d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001588:	2370      	movs	r3, #112	; 0x70
 800158a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	2208      	movs	r2, #8
 800159c:	4619      	mov	r1, r3
 800159e:	4807      	ldr	r0, [pc, #28]	; (80015bc <MX_TIM3_Init+0xe4>)
 80015a0:	f005 fa86 	bl	8006ab0 <HAL_TIM_PWM_ConfigChannel>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80015aa:	f001 fbe9 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015ae:	4803      	ldr	r0, [pc, #12]	; (80015bc <MX_TIM3_Init+0xe4>)
 80015b0:	f001 fdd2 	bl	8003158 <HAL_TIM_MspPostInit>

}
 80015b4:	bf00      	nop
 80015b6:	3738      	adds	r7, #56	; 0x38
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	2000077c 	.word	0x2000077c
 80015c0:	40000400 	.word	0x40000400

080015c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08c      	sub	sp, #48	; 0x30
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	2224      	movs	r2, #36	; 0x24
 80015d0:	2100      	movs	r1, #0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f005 ffd4 	bl	8007580 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015e0:	4b20      	ldr	r3, [pc, #128]	; (8001664 <MX_TIM4_Init+0xa0>)
 80015e2:	4a21      	ldr	r2, [pc, #132]	; (8001668 <MX_TIM4_Init+0xa4>)
 80015e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80015e6:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <MX_TIM4_Init+0xa0>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ec:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <MX_TIM4_Init+0xa0>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80015f2:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <MX_TIM4_Init+0xa0>)
 80015f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fa:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <MX_TIM4_Init+0xa0>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001600:	4b18      	ldr	r3, [pc, #96]	; (8001664 <MX_TIM4_Init+0xa0>)
 8001602:	2200      	movs	r2, #0
 8001604:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001606:	2301      	movs	r3, #1
 8001608:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800160a:	2302      	movs	r3, #2
 800160c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800160e:	2301      	movs	r3, #1
 8001610:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001612:	2300      	movs	r3, #0
 8001614:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 3;
 8001616:	2303      	movs	r3, #3
 8001618:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800161a:	2302      	movs	r3, #2
 800161c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800161e:	2301      	movs	r3, #1
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001622:	2300      	movs	r3, #0
 8001624:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 3;
 8001626:	2303      	movs	r3, #3
 8001628:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800162a:	f107 030c 	add.w	r3, r7, #12
 800162e:	4619      	mov	r1, r3
 8001630:	480c      	ldr	r0, [pc, #48]	; (8001664 <MX_TIM4_Init+0xa0>)
 8001632:	f005 f8a3 	bl	800677c <HAL_TIM_Encoder_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800163c:	f001 fba0 	bl	8002d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001640:	2300      	movs	r3, #0
 8001642:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001644:	2300      	movs	r3, #0
 8001646:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	4619      	mov	r1, r3
 800164c:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_TIM4_Init+0xa0>)
 800164e:	f005 fead 	bl	80073ac <HAL_TIMEx_MasterConfigSynchronization>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001658:	f001 fb92 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	3730      	adds	r7, #48	; 0x30
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	200007bc 	.word	0x200007bc
 8001668:	40000800 	.word	0x40000800

0800166c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <MX_DMA_Init+0x3c>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <MX_DMA_Init+0x3c>)
 800167c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <MX_DMA_Init+0x3c>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2100      	movs	r1, #0
 8001692:	2038      	movs	r0, #56	; 0x38
 8001694:	f002 fc15 	bl	8003ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001698:	2038      	movs	r0, #56	; 0x38
 800169a:	f002 fc2e 	bl	8003efa <HAL_NVIC_EnableIRQ>

}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40023800 	.word	0x40023800

080016ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b2:	f107 030c 	add.w	r3, r7, #12
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
 80016c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	4b20      	ldr	r3, [pc, #128]	; (8001748 <MX_GPIO_Init+0x9c>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a1f      	ldr	r2, [pc, #124]	; (8001748 <MX_GPIO_Init+0x9c>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b1d      	ldr	r3, [pc, #116]	; (8001748 <MX_GPIO_Init+0x9c>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	607b      	str	r3, [r7, #4]
 80016e2:	4b19      	ldr	r3, [pc, #100]	; (8001748 <MX_GPIO_Init+0x9c>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a18      	ldr	r2, [pc, #96]	; (8001748 <MX_GPIO_Init+0x9c>)
 80016e8:	f043 0302 	orr.w	r3, r3, #2
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b16      	ldr	r3, [pc, #88]	; (8001748 <MX_GPIO_Init+0x9c>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	603b      	str	r3, [r7, #0]
 80016fe:	4b12      	ldr	r3, [pc, #72]	; (8001748 <MX_GPIO_Init+0x9c>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4a11      	ldr	r2, [pc, #68]	; (8001748 <MX_GPIO_Init+0x9c>)
 8001704:	f043 0304 	orr.w	r3, r3, #4
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <MX_GPIO_Init+0x9c>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f003 0304 	and.w	r3, r3, #4
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800171c:	480b      	ldr	r0, [pc, #44]	; (800174c <MX_GPIO_Init+0xa0>)
 800171e:	f003 f8fb 	bl	8004918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001722:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001726:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001728:	2301      	movs	r3, #1
 800172a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001730:	2300      	movs	r3, #0
 8001732:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001734:	f107 030c 	add.w	r3, r7, #12
 8001738:	4619      	mov	r1, r3
 800173a:	4804      	ldr	r0, [pc, #16]	; (800174c <MX_GPIO_Init+0xa0>)
 800173c:	f002 ff68 	bl	8004610 <HAL_GPIO_Init>

}
 8001740:	bf00      	nop
 8001742:	3720      	adds	r7, #32
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40023800 	.word	0x40023800
 800174c:	40020800 	.word	0x40020800

08001750 <SPI_command>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
void SPI_command(void){
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
// pins are all good , SPI is always the problem!!!
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 8001756:	4b18      	ldr	r3, [pc, #96]	; (80017b8 <SPI_command+0x68>)
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d128      	bne.n	80017b0 <SPI_command+0x60>
 800175e:	4b17      	ldr	r3, [pc, #92]	; (80017bc <SPI_command+0x6c>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d124      	bne.n	80017b0 <SPI_command+0x60>

uint8_t spi_store[5];

	//clk_pin=(i&1)^1;
		//bsrr_long=0;
		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8001766:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <SPI_command+0x70>)
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	0a1b      	lsrs	r3, r3, #8
 800176c:	b29b      	uxth	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <SPI_command+0x2a>
 8001772:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <SPI_command+0x74>)
 8001774:	22f8      	movs	r2, #248	; 0xf8
 8001776:	701a      	strb	r2, [r3, #0]
 8001778:	e002      	b.n	8001780 <SPI_command+0x30>
 800177a:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <SPI_command+0x74>)
 800177c:	22fa      	movs	r2, #250	; 0xfa
 800177e:	701a      	strb	r2, [r3, #0]
/*		bsrr_long=spi_byte<<16; // top byte for command 24-16, then 2 bytes of data 16-0
		spi_hold=(spi_hold&255);
		bsrr_long=bsrr_long+((spi_hold>>4)<<12); // 4 bits to top
		bsrr_long=bsrr_long+((spi_hold&15)<<4);	// 4 bits to top
*/
	spi_store[0]=spi_byte&255;
 8001780:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <SPI_command+0x74>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	703b      	strb	r3, [r7, #0]
	spi_store[1]=((spi_hold>>4)<<4)&255;
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <SPI_command+0x70>)
 8001788:	881b      	ldrh	r3, [r3, #0]
 800178a:	091b      	lsrs	r3, r3, #4
 800178c:	b29b      	uxth	r3, r3
 800178e:	011b      	lsls	r3, r3, #4
 8001790:	b2db      	uxtb	r3, r3
 8001792:	707b      	strb	r3, [r7, #1]
	spi_store[2]=((spi_hold&15)<<4)&255;
 8001794:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <SPI_command+0x70>)
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	011b      	lsls	r3, r3, #4
 800179a:	b2db      	uxtb	r3, r3
 800179c:	70bb      	strb	r3, [r7, #2]

// send this to spi for now
		HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3, 100);  // working good
 800179e:	4639      	mov	r1, r7
 80017a0:	2364      	movs	r3, #100	; 0x64
 80017a2:	2203      	movs	r2, #3
 80017a4:	4808      	ldr	r0, [pc, #32]	; (80017c8 <SPI_command+0x78>)
 80017a6:	f004 fd2f 	bl	8006208 <HAL_SPI_Transmit>


//HAL_Delay(10);
	spi_enable=1; }
 80017aa:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <SPI_command+0x68>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	801a      	strh	r2, [r3, #0]
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	2000131a 	.word	0x2000131a
 80017bc:	20001320 	.word	0x20001320
 80017c0:	2000131e 	.word	0x2000131e
 80017c4:	2000131c 	.word	0x2000131c
 80017c8:	200006e4 	.word	0x200006e4

080017cc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)    // unreliable

{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]

	sample_point=sample_point & 1023;// this is 1
 80017d4:	4b13      	ldr	r3, [pc, #76]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017de:	b29a      	uxth	r2, r3
 80017e0:	4b10      	ldr	r3, [pc, #64]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80017e2:	801a      	strh	r2, [r3, #0]
	play_hold=play_sample[sample_point]; // this is 2
 80017e4:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	461a      	mov	r2, r3
 80017ec:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80017ee:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x60>)
 80017f4:	801a      	strh	r2, [r3, #0]

		if(TIM3==htim->Instance)			// nothing here is consistent
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a0d      	ldr	r2, [pc, #52]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d10b      	bne.n	8001818 <HAL_TIM_PeriodElapsedCallback+0x4c>
{


TIM3->CCR3=play_hold ;  // keep readin sample storage
 8001800:	4b0a      	ldr	r3, [pc, #40]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	b29a      	uxth	r2, r3
 8001806:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001808:	63da      	str	r2, [r3, #60]	; 0x3c


//if (bs_count==255
	//	)  { bs_count=0; menu_store=(menuSelect>>2); } else bs_count++; // menu select, higher count just spills over  159 chamge to 128 2*64
//}
sample_point++; //this needs to be here or too fast and wrong sample rate
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	b29b      	uxth	r3, r3
 8001810:	3301      	adds	r3, #1
 8001812:	b29a      	uxth	r2, r3
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001816:	801a      	strh	r2, [r3, #0]

}

}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	2000125e 	.word	0x2000125e
 8001828:	20000a5c 	.word	0x20000a5c
 800182c:	20001260 	.word	0x20001260
 8001830:	40000400 	.word	0x40000400

08001834 <analoginputloopb>:
		HAL_ADC_Stop(&hadc1);
for (i=0;i<3;i++){ adc_values[i]= (adc_values[i]>>8) &15; } // reduce value to 4 bit

}

void analoginputloopb(void){  //works fine still
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0


	//menuSelect = (7 - (adc_values[0] >>2))<<1;		//x *16  main menu select
	//menuSelect = (15 - (adc_values[0] >>1));		//x *7  main menu select
	//menuSelectX=(31 - adc_values[1])>>1;  // Y select inside page
	menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 800183a:	4b6e      	ldr	r3, [pc, #440]	; (80019f4 <analoginputloopb+0x1c0>)
 800183c:	789b      	ldrb	r3, [r3, #2]
 800183e:	091b      	lsrs	r3, r3, #4
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4b6d      	ldr	r3, [pc, #436]	; (80019f8 <analoginputloopb+0x1c4>)
 8001844:	701a      	strb	r2, [r3, #0]
		menuSelectX=cursor_menu[2]&15;  // Y select inside page
 8001846:	4b6b      	ldr	r3, [pc, #428]	; (80019f4 <analoginputloopb+0x1c0>)
 8001848:	789b      	ldrb	r3, [r3, #2]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	b2da      	uxtb	r2, r3
 8001850:	4b6a      	ldr	r3, [pc, #424]	; (80019fc <analoginputloopb+0x1c8>)
 8001852:	701a      	strb	r2, [r3, #0]
	//	counterVarB = menuSelectX + menuSelect; // select mem page 10*8  and location pointer  77
//		if (adc_values[1]>15)	menu_holder=disp_lut [(menuSelect)	+1] [31-adc_values[1]]; // change back to 0-15
//	else menu_holder=disp_lut [(menuSelect)	] [15-adc_values[1]];  // grab disp lut value for pointer if valid then write for now

		//menu_holder=disp_lut [(menuSelect)	] [(15-adc_values[1])];   // value from disp lut
		menu_holder=disp_lut [menuSelect] [menuSelectX];   // value from disp lut
 8001854:	4b68      	ldr	r3, [pc, #416]	; (80019f8 <analoginputloopb+0x1c4>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	4b68      	ldr	r3, [pc, #416]	; (80019fc <analoginputloopb+0x1c8>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	4619      	mov	r1, r3
 8001860:	4a67      	ldr	r2, [pc, #412]	; (8001a00 <analoginputloopb+0x1cc>)
 8001862:	0103      	lsls	r3, r0, #4
 8001864:	440b      	add	r3, r1
 8001866:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800186a:	80fb      	strh	r3, [r7, #6]
		cursor_menu[1]=0;
 800186c:	4b61      	ldr	r3, [pc, #388]	; (80019f4 <analoginputloopb+0x1c0>)
 800186e:	2200      	movs	r2, #0
 8001870:	705a      	strb	r2, [r3, #1]
		//cursor_menu[2]=cursor_lookup[enc2_dir];
		// cursor_menu[2]=cursor_lookup[enc2_dir]; //needed for correct line sequence ,obsolete
		cursor_menu[2]=enc2_dir;
 8001872:	4b64      	ldr	r3, [pc, #400]	; (8001a04 <analoginputloopb+0x1d0>)
 8001874:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4b5e      	ldr	r3, [pc, #376]	; (80019f4 <analoginputloopb+0x1c0>)
 800187c:	709a      	strb	r2, [r3, #2]
		
		//cursor_menu[2]=(16-adc_values[1]);



		if (menu_holder>127)	counterVarB=menu_holder-128; //  points to actual potvalues location from dsip_lut when value is higher than 127 , works ok problem with menu display
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	2b7f      	cmp	r3, #127	; 0x7f
 8001882:	d904      	bls.n	800188e <analoginputloopb+0x5a>
 8001884:	88fb      	ldrh	r3, [r7, #6]
 8001886:	3b80      	subs	r3, #128	; 0x80
 8001888:	b29a      	uxth	r2, r3
 800188a:	4b5f      	ldr	r3, [pc, #380]	; (8001a08 <analoginputloopb+0x1d4>)
 800188c:	801a      	strh	r2, [r3, #0]
				enc_dir=potSource[counterVarB];
 800188e:	4b5e      	ldr	r3, [pc, #376]	; (8001a08 <analoginputloopb+0x1d4>)
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	461a      	mov	r2, r3
 8001894:	4b5d      	ldr	r3, [pc, #372]	; (8001a0c <analoginputloopb+0x1d8>)
 8001896:	5c9b      	ldrb	r3, [r3, r2]
 8001898:	b21a      	sxth	r2, r3
 800189a:	4b5d      	ldr	r3, [pc, #372]	; (8001a10 <analoginputloopb+0x1dc>)
 800189c:	801a      	strh	r2, [r3, #0]

	enc_temp=(TIM2->CNT);  // read counter tim2 ,change divider not a good solution ?
 800189e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	4b5b      	ldr	r3, [pc, #364]	; (8001a14 <analoginputloopb+0x1e0>)
 80018a8:	801a      	strh	r2, [r3, #0]
	enc2_temp=(TIM4->CNT);  // read counter tim4
 80018aa:	4b5b      	ldr	r3, [pc, #364]	; (8001a18 <analoginputloopb+0x1e4>)
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	4b5a      	ldr	r3, [pc, #360]	; (8001a1c <analoginputloopb+0x1e8>)
 80018b2:	801a      	strh	r2, [r3, #0]
	if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-(disp_multi[enc2_dir>>4]);   // start settle timer , will do 2 times per turn always, wire opposite
 80018b4:	4b57      	ldr	r3, [pc, #348]	; (8001a14 <analoginputloopb+0x1e0>)
 80018b6:	881a      	ldrh	r2, [r3, #0]
 80018b8:	4b59      	ldr	r3, [pc, #356]	; (8001a20 <analoginputloopb+0x1ec>)
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d911      	bls.n	80018e4 <analoginputloopb+0xb0>
 80018c0:	4b53      	ldr	r3, [pc, #332]	; (8001a10 <analoginputloopb+0x1dc>)
 80018c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	4b4e      	ldr	r3, [pc, #312]	; (8001a04 <analoginputloopb+0x1d0>)
 80018ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ce:	111b      	asrs	r3, r3, #4
 80018d0:	b21b      	sxth	r3, r3
 80018d2:	4619      	mov	r1, r3
 80018d4:	4b53      	ldr	r3, [pc, #332]	; (8001a24 <analoginputloopb+0x1f0>)
 80018d6:	5c5b      	ldrb	r3, [r3, r1]
 80018d8:	b29b      	uxth	r3, r3
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	b29b      	uxth	r3, r3
 80018de:	b21a      	sxth	r2, r3
 80018e0:	4b4b      	ldr	r3, [pc, #300]	; (8001a10 <analoginputloopb+0x1dc>)
 80018e2:	801a      	strh	r2, [r3, #0]
	if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+(disp_multi[enc2_dir>>4]);   // start settle timer , will do 2 times per turn always, wire opposite
 80018e4:	4b4b      	ldr	r3, [pc, #300]	; (8001a14 <analoginputloopb+0x1e0>)
 80018e6:	881a      	ldrh	r2, [r3, #0]
 80018e8:	4b4d      	ldr	r3, [pc, #308]	; (8001a20 <analoginputloopb+0x1ec>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d211      	bcs.n	8001914 <analoginputloopb+0xe0>
 80018f0:	4b44      	ldr	r3, [pc, #272]	; (8001a04 <analoginputloopb+0x1d0>)
 80018f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018f6:	111b      	asrs	r3, r3, #4
 80018f8:	b21b      	sxth	r3, r3
 80018fa:	461a      	mov	r2, r3
 80018fc:	4b49      	ldr	r3, [pc, #292]	; (8001a24 <analoginputloopb+0x1f0>)
 80018fe:	5c9b      	ldrb	r3, [r3, r2]
 8001900:	b29a      	uxth	r2, r3
 8001902:	4b43      	ldr	r3, [pc, #268]	; (8001a10 <analoginputloopb+0x1dc>)
 8001904:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001908:	b29b      	uxth	r3, r3
 800190a:	4413      	add	r3, r2
 800190c:	b29b      	uxth	r3, r3
 800190e:	b21a      	sxth	r2, r3
 8001910:	4b3f      	ldr	r3, [pc, #252]	; (8001a10 <analoginputloopb+0x1dc>)
 8001912:	801a      	strh	r2, [r3, #0]
	//if (enc_temp<enc_tempB)	 enc_dir++;




	if (enc_dir>160) enc_dir=160;
 8001914:	4b3e      	ldr	r3, [pc, #248]	; (8001a10 <analoginputloopb+0x1dc>)
 8001916:	f9b3 3000 	ldrsh.w	r3, [r3]
 800191a:	2ba0      	cmp	r3, #160	; 0xa0
 800191c:	dd02      	ble.n	8001924 <analoginputloopb+0xf0>
 800191e:	4b3c      	ldr	r3, [pc, #240]	; (8001a10 <analoginputloopb+0x1dc>)
 8001920:	22a0      	movs	r2, #160	; 0xa0
 8001922:	801a      	strh	r2, [r3, #0]
			if (enc_dir<0) enc_dir=0;
 8001924:	4b3a      	ldr	r3, [pc, #232]	; (8001a10 <analoginputloopb+0x1dc>)
 8001926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800192a:	2b00      	cmp	r3, #0
 800192c:	da02      	bge.n	8001934 <analoginputloopb+0x100>
 800192e:	4b38      	ldr	r3, [pc, #224]	; (8001a10 <analoginputloopb+0x1dc>)
 8001930:	2200      	movs	r2, #0
 8001932:	801a      	strh	r2, [r3, #0]
			//if (enc2_temp<16) enc_dir=(enc_dir<<2) & 127; // faster for notes on first row

			potSource[counterVarB]=enc_dir;
 8001934:	4b36      	ldr	r3, [pc, #216]	; (8001a10 <analoginputloopb+0x1dc>)
 8001936:	f9b3 1000 	ldrsh.w	r1, [r3]
 800193a:	4b33      	ldr	r3, [pc, #204]	; (8001a08 <analoginputloopb+0x1d4>)
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	b2c9      	uxtb	r1, r1
 8001942:	4b32      	ldr	r3, [pc, #200]	; (8001a0c <analoginputloopb+0x1d8>)
 8001944:	5499      	strb	r1, [r3, r2]
					enc_dir=0;
 8001946:	4b32      	ldr	r3, [pc, #200]	; (8001a10 <analoginputloopb+0x1dc>)
 8001948:	2200      	movs	r2, #0
 800194a:	801a      	strh	r2, [r3, #0]
			enc_tempB=enc_temp;
 800194c:	4b31      	ldr	r3, [pc, #196]	; (8001a14 <analoginputloopb+0x1e0>)
 800194e:	881a      	ldrh	r2, [r3, #0]
 8001950:	4b33      	ldr	r3, [pc, #204]	; (8001a20 <analoginputloopb+0x1ec>)
 8001952:	801a      	strh	r2, [r3, #0]




			if  (enc2_temp>enc2_tempB)	 enc2_dir++;   // start settle timer , will do 2 times per turn always
 8001954:	4b31      	ldr	r3, [pc, #196]	; (8001a1c <analoginputloopb+0x1e8>)
 8001956:	881a      	ldrh	r2, [r3, #0]
 8001958:	4b33      	ldr	r3, [pc, #204]	; (8001a28 <analoginputloopb+0x1f4>)
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d908      	bls.n	8001972 <analoginputloopb+0x13e>
 8001960:	4b28      	ldr	r3, [pc, #160]	; (8001a04 <analoginputloopb+0x1d0>)
 8001962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001966:	b29b      	uxth	r3, r3
 8001968:	3301      	adds	r3, #1
 800196a:	b29b      	uxth	r3, r3
 800196c:	b21a      	sxth	r2, r3
 800196e:	4b25      	ldr	r3, [pc, #148]	; (8001a04 <analoginputloopb+0x1d0>)
 8001970:	801a      	strh	r2, [r3, #0]
			if (enc2_temp<enc2_tempB)	 enc2_dir--;
 8001972:	4b2a      	ldr	r3, [pc, #168]	; (8001a1c <analoginputloopb+0x1e8>)
 8001974:	881a      	ldrh	r2, [r3, #0]
 8001976:	4b2c      	ldr	r3, [pc, #176]	; (8001a28 <analoginputloopb+0x1f4>)
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d208      	bcs.n	8001990 <analoginputloopb+0x15c>
 800197e:	4b21      	ldr	r3, [pc, #132]	; (8001a04 <analoginputloopb+0x1d0>)
 8001980:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001984:	b29b      	uxth	r3, r3
 8001986:	3b01      	subs	r3, #1
 8001988:	b29b      	uxth	r3, r3
 800198a:	b21a      	sxth	r2, r3
 800198c:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <analoginputloopb+0x1d0>)
 800198e:	801a      	strh	r2, [r3, #0]


			if (enc2_dir>126) enc2_dir=126;
 8001990:	4b1c      	ldr	r3, [pc, #112]	; (8001a04 <analoginputloopb+0x1d0>)
 8001992:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001996:	2b7e      	cmp	r3, #126	; 0x7e
 8001998:	dd02      	ble.n	80019a0 <analoginputloopb+0x16c>
 800199a:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <analoginputloopb+0x1d0>)
 800199c:	227e      	movs	r2, #126	; 0x7e
 800199e:	801a      	strh	r2, [r3, #0]
					if (enc2_dir>63) menu_page[1]=1; else menu_page[1]=0;
 80019a0:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <analoginputloopb+0x1d0>)
 80019a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a6:	2b3f      	cmp	r3, #63	; 0x3f
 80019a8:	dd03      	ble.n	80019b2 <analoginputloopb+0x17e>
 80019aa:	4b20      	ldr	r3, [pc, #128]	; (8001a2c <analoginputloopb+0x1f8>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	705a      	strb	r2, [r3, #1]
 80019b0:	e002      	b.n	80019b8 <analoginputloopb+0x184>
 80019b2:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <analoginputloopb+0x1f8>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	705a      	strb	r2, [r3, #1]
					if (enc2_dir<0) enc2_dir=0;
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <analoginputloopb+0x1d0>)
 80019ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	da02      	bge.n	80019c8 <analoginputloopb+0x194>
 80019c2:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <analoginputloopb+0x1d0>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	801a      	strh	r2, [r3, #0]
					//enc2_dir=enc2_lut[enc2_dir]; // jump to stored position
							//enc2_dir=0;
					enc2_tempB=enc2_temp;
 80019c8:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <analoginputloopb+0x1e8>)
 80019ca:	881a      	ldrh	r2, [r3, #0]
 80019cc:	4b16      	ldr	r3, [pc, #88]	; (8001a28 <analoginputloopb+0x1f4>)
 80019ce:	801a      	strh	r2, [r3, #0]


potValues[counterVarB]=(potSource[counterVarB]>>4) & 15 ;  // reduce values for now ,use original for others , slow count
 80019d0:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <analoginputloopb+0x1d4>)
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <analoginputloopb+0x1d8>)
 80019d8:	5c9b      	ldrb	r3, [r3, r2]
 80019da:	4a0b      	ldr	r2, [pc, #44]	; (8001a08 <analoginputloopb+0x1d4>)
 80019dc:	8812      	ldrh	r2, [r2, #0]
 80019de:	091b      	lsrs	r3, r3, #4
 80019e0:	b2d9      	uxtb	r1, r3
 80019e2:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <analoginputloopb+0x1fc>)
 80019e4:	5499      	strb	r1, [r3, r2]

//potValues[counterVarB]=potSource[counterVarB] & 15 ;  // reduce values for now ,use original for others



}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20001324 	.word	0x20001324
 80019f8:	200009fd 	.word	0x200009fd
 80019fc:	200009fe 	.word	0x200009fe
 8001a00:	08007668 	.word	0x08007668
 8001a04:	20001312 	.word	0x20001312
 8001a08:	20000a00 	.word	0x20000a00
 8001a0c:	200008fc 	.word	0x200008fc
 8001a10:	20001314 	.word	0x20001314
 8001a14:	2000130a 	.word	0x2000130a
 8001a18:	40000800 	.word	0x40000800
 8001a1c:	2000130e 	.word	0x2000130e
 8001a20:	2000130c 	.word	0x2000130c
 8001a24:	200005b4 	.word	0x200005b4
 8001a28:	20001310 	.word	0x20001310
 8001a2c:	20001330 	.word	0x20001330
 8001a30:	200007fc 	.word	0x200007fc

08001a34 <display_init>:
void display_init(void){
 8001a34:	b5b0      	push	{r4, r5, r7, lr}
 8001a36:	b08a      	sub	sp, #40	; 0x28
 8001a38:	af00      	add	r7, sp, #0
	//uint8_t sp2_command=0xf8+(0<<1);


		 // uint16_t disp[]={  304,304,304,270,257,268,384,258,51,51,52,53,54,55,56,57,58,0};  // normal characters
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd
 8001a3a:	4b78      	ldr	r3, [pc, #480]	; (8001c1c <display_init+0x1e8>)
 8001a3c:	1d3c      	adds	r4, r7, #4
 8001a3e:	461d      	mov	r5, r3
 8001a40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a48:	682b      	ldr	r3, [r5, #0]
 8001a4a:	8023      	strh	r3, [r4, #0]
		  if (spi_send==0){         // sets data byte
 8001a4c:	4b74      	ldr	r3, [pc, #464]	; (8001c20 <display_init+0x1ec>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f040 80de 	bne.w	8001c12 <display_init+0x1de>

if ((enc2_dir>63) && (menu_page[2]==0))  {init=4;menu_page[2]=1;}  //restart page draw for second page , might need home pos init
 8001a56:	4b73      	ldr	r3, [pc, #460]	; (8001c24 <display_init+0x1f0>)
 8001a58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a5c:	2b3f      	cmp	r3, #63	; 0x3f
 8001a5e:	dd09      	ble.n	8001a74 <display_init+0x40>
 8001a60:	4b71      	ldr	r3, [pc, #452]	; (8001c28 <display_init+0x1f4>)
 8001a62:	789b      	ldrb	r3, [r3, #2]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d105      	bne.n	8001a74 <display_init+0x40>
 8001a68:	4b70      	ldr	r3, [pc, #448]	; (8001c2c <display_init+0x1f8>)
 8001a6a:	2204      	movs	r2, #4
 8001a6c:	701a      	strb	r2, [r3, #0]
 8001a6e:	4b6e      	ldr	r3, [pc, #440]	; (8001c28 <display_init+0x1f4>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	709a      	strb	r2, [r3, #2]
if  ((init==76) && (menu_page[2]==1)) menu_page[2]=2; //after drawing second page and finish
 8001a74:	4b6d      	ldr	r3, [pc, #436]	; (8001c2c <display_init+0x1f8>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b4c      	cmp	r3, #76	; 0x4c
 8001a7a:	d106      	bne.n	8001a8a <display_init+0x56>
 8001a7c:	4b6a      	ldr	r3, [pc, #424]	; (8001c28 <display_init+0x1f4>)
 8001a7e:	789b      	ldrb	r3, [r3, #2]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d102      	bne.n	8001a8a <display_init+0x56>
 8001a84:	4b68      	ldr	r3, [pc, #416]	; (8001c28 <display_init+0x1f4>)
 8001a86:	2202      	movs	r2, #2
 8001a88:	709a      	strb	r2, [r3, #2]
if ((enc2_dir<63) && (menu_page[2]==2))  {init=4;menu_page[2]=0;}
 8001a8a:	4b66      	ldr	r3, [pc, #408]	; (8001c24 <display_init+0x1f0>)
 8001a8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a90:	2b3e      	cmp	r3, #62	; 0x3e
 8001a92:	dc09      	bgt.n	8001aa8 <display_init+0x74>
 8001a94:	4b64      	ldr	r3, [pc, #400]	; (8001c28 <display_init+0x1f4>)
 8001a96:	789b      	ldrb	r3, [r3, #2]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d105      	bne.n	8001aa8 <display_init+0x74>
 8001a9c:	4b63      	ldr	r3, [pc, #396]	; (8001c2c <display_init+0x1f8>)
 8001a9e:	2204      	movs	r2, #4
 8001aa0:	701a      	strb	r2, [r3, #0]
 8001aa2:	4b61      	ldr	r3, [pc, #388]	; (8001c28 <display_init+0x1f4>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	709a      	strb	r2, [r3, #2]

switch(init){     //Remember every line advances +char on display
 8001aa8:	4b60      	ldr	r3, [pc, #384]	; (8001c2c <display_init+0x1f8>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	3b4d      	subs	r3, #77	; 0x4d
 8001aae:	2b07      	cmp	r3, #7
 8001ab0:	d879      	bhi.n	8001ba6 <display_init+0x172>
 8001ab2:	a201      	add	r2, pc, #4	; (adr r2, 8001ab8 <display_init+0x84>)
 8001ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab8:	08001ad9 	.word	0x08001ad9
 8001abc:	08001b09 	.word	0x08001b09
 8001ac0:	08001b11 	.word	0x08001b11
 8001ac4:	08001b2d 	.word	0x08001b2d
 8001ac8:	08001b41 	.word	0x08001b41
 8001acc:	08001b4f 	.word	0x08001b4f
 8001ad0:	08001b65 	.word	0x08001b65
 8001ad4:	08001b79 	.word	0x08001b79

case 77: spi_hold=384+(init_b>>1);init=init+((init_b&1)*2);break; // no delay ,jump to either blink sets
 8001ad8:	4b55      	ldr	r3, [pc, #340]	; (8001c30 <display_init+0x1fc>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	085b      	lsrs	r3, r3, #1
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	4b52      	ldr	r3, [pc, #328]	; (8001c34 <display_init+0x200>)
 8001aea:	801a      	strh	r2, [r3, #0]
 8001aec:	4b50      	ldr	r3, [pc, #320]	; (8001c30 <display_init+0x1fc>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	4b4c      	ldr	r3, [pc, #304]	; (8001c2c <display_init+0x1f8>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	4413      	add	r3, r2
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	4b4a      	ldr	r3, [pc, #296]	; (8001c2c <display_init+0x1f8>)
 8001b04:	701a      	strb	r2, [r3, #0]
 8001b06:	e05f      	b.n	8001bc8 <display_init+0x194>

case 78: spi_hold=10;break; //write one set then jump
 8001b08:	4b4a      	ldr	r3, [pc, #296]	; (8001c34 <display_init+0x200>)
 8001b0a:	220a      	movs	r2, #10
 8001b0c:	801a      	strh	r2, [r3, #0]
 8001b0e:	e05b      	b.n	8001bc8 <display_init+0x194>
case 79: spi_hold=spell[(init_b&62)+1];init=81;break;
 8001b10:	4b47      	ldr	r3, [pc, #284]	; (8001c30 <display_init+0x1fc>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001b18:	3301      	adds	r3, #1
 8001b1a:	4a47      	ldr	r2, [pc, #284]	; (8001c38 <display_init+0x204>)
 8001b1c:	5cd3      	ldrb	r3, [r2, r3]
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	4b44      	ldr	r3, [pc, #272]	; (8001c34 <display_init+0x200>)
 8001b22:	801a      	strh	r2, [r3, #0]
 8001b24:	4b41      	ldr	r3, [pc, #260]	; (8001c2c <display_init+0x1f8>)
 8001b26:	2251      	movs	r2, #81	; 0x51
 8001b28:	701a      	strb	r2, [r3, #0]
 8001b2a:	e04d      	b.n	8001bc8 <display_init+0x194>
case 80: spi_hold=spell[init_b&62];break; // or write other set then jump
 8001b2c:	4b40      	ldr	r3, [pc, #256]	; (8001c30 <display_init+0x1fc>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001b34:	4a40      	ldr	r2, [pc, #256]	; (8001c38 <display_init+0x204>)
 8001b36:	5cd3      	ldrb	r3, [r2, r3]
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	4b3e      	ldr	r3, [pc, #248]	; (8001c34 <display_init+0x200>)
 8001b3c:	801a      	strh	r2, [r3, #0]
 8001b3e:	e043      	b.n	8001bc8 <display_init+0x194>
case 81: spi_hold=10;init=81;break;
 8001b40:	4b3c      	ldr	r3, [pc, #240]	; (8001c34 <display_init+0x200>)
 8001b42:	220a      	movs	r2, #10
 8001b44:	801a      	strh	r2, [r3, #0]
 8001b46:	4b39      	ldr	r3, [pc, #228]	; (8001c2c <display_init+0x1f8>)
 8001b48:	2251      	movs	r2, #81	; 0x51
 8001b4a:	701a      	strb	r2, [r3, #0]
 8001b4c:	e03c      	b.n	8001bc8 <display_init+0x194>


case 82: spi_hold=384+(init_b>>1);break;  // finish writes
 8001b4e:	4b38      	ldr	r3, [pc, #224]	; (8001c30 <display_init+0x1fc>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	085b      	lsrs	r3, r3, #1
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	4b35      	ldr	r3, [pc, #212]	; (8001c34 <display_init+0x200>)
 8001b60:	801a      	strh	r2, [r3, #0]
 8001b62:	e031      	b.n	8001bc8 <display_init+0x194>
case 83: spi_hold=spell[init_b&62];break;
 8001b64:	4b32      	ldr	r3, [pc, #200]	; (8001c30 <display_init+0x1fc>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001b6c:	4a32      	ldr	r2, [pc, #200]	; (8001c38 <display_init+0x204>)
 8001b6e:	5cd3      	ldrb	r3, [r2, r3]
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	4b30      	ldr	r3, [pc, #192]	; (8001c34 <display_init+0x200>)
 8001b74:	801a      	strh	r2, [r3, #0]
 8001b76:	e027      	b.n	8001bc8 <display_init+0x194>
case 84 : spi_hold=spell[(init_b&62)+1];init_b=cursor_menu[2]&63;displayBuffer ();init=76; break; //update cursor and displaybuffer
 8001b78:	4b2d      	ldr	r3, [pc, #180]	; (8001c30 <display_init+0x1fc>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001b80:	3301      	adds	r3, #1
 8001b82:	4a2d      	ldr	r2, [pc, #180]	; (8001c38 <display_init+0x204>)
 8001b84:	5cd3      	ldrb	r3, [r2, r3]
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	4b2a      	ldr	r3, [pc, #168]	; (8001c34 <display_init+0x200>)
 8001b8a:	801a      	strh	r2, [r3, #0]
 8001b8c:	4b2b      	ldr	r3, [pc, #172]	; (8001c3c <display_init+0x208>)
 8001b8e:	789b      	ldrb	r3, [r3, #2]
 8001b90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4b26      	ldr	r3, [pc, #152]	; (8001c30 <display_init+0x1fc>)
 8001b98:	701a      	strb	r2, [r3, #0]
 8001b9a:	f000 f92d 	bl	8001df8 <displayBuffer>
 8001b9e:	4b23      	ldr	r3, [pc, #140]	; (8001c2c <display_init+0x1f8>)
 8001ba0:	224c      	movs	r2, #76	; 0x4c
 8001ba2:	701a      	strb	r2, [r3, #0]
 8001ba4:	e010      	b.n	8001bc8 <display_init+0x194>
default : init_b=init-6;displayBuffer ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 8001ba6:	4b21      	ldr	r3, [pc, #132]	; (8001c2c <display_init+0x1f8>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	3b06      	subs	r3, #6
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	4b20      	ldr	r3, [pc, #128]	; (8001c30 <display_init+0x1fc>)
 8001bb0:	701a      	strb	r2, [r3, #0]
 8001bb2:	f000 f921 	bl	8001df8 <displayBuffer>
 8001bb6:	4b1e      	ldr	r3, [pc, #120]	; (8001c30 <display_init+0x1fc>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4b1e      	ldr	r3, [pc, #120]	; (8001c38 <display_init+0x204>)
 8001bbe:	5c9b      	ldrb	r3, [r3, r2]
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	4b1c      	ldr	r3, [pc, #112]	; (8001c34 <display_init+0x200>)
 8001bc4:	801a      	strh	r2, [r3, #0]
 8001bc6:	bf00      	nop
}


if (init<6)	{HAL_Delay(30);spi_hold=disp[init] ;  init_b=cursor_menu[2]; } //delay needs to go
 8001bc8:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <display_init+0x1f8>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b05      	cmp	r3, #5
 8001bce:	d80f      	bhi.n	8001bf0 <display_init+0x1bc>
 8001bd0:	201e      	movs	r0, #30
 8001bd2:	f001 fbeb 	bl	80033ac <HAL_Delay>
 8001bd6:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <display_init+0x1f8>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	3328      	adds	r3, #40	; 0x28
 8001bde:	443b      	add	r3, r7
 8001be0:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8001be4:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <display_init+0x200>)
 8001be6:	801a      	strh	r2, [r3, #0]
 8001be8:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <display_init+0x208>)
 8001bea:	789a      	ldrb	r2, [r3, #2]
 8001bec:	4b10      	ldr	r3, [pc, #64]	; (8001c30 <display_init+0x1fc>)
 8001bee:	701a      	strb	r2, [r3, #0]

init++;
 8001bf0:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <display_init+0x1f8>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <display_init+0x1f8>)
 8001bfa:	701a      	strb	r2, [r3, #0]
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <display_init+0x1ec>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	701a      	strb	r2, [r3, #0]
 8001c02:	f7ff fda5 	bl	8001750 <SPI_command>
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <display_init+0x1ec>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <display_init+0x20c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	801a      	strh	r2, [r3, #0]

		 }

*/

}
 8001c12:	bf00      	nop
 8001c14:	3728      	adds	r7, #40	; 0x28
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bdb0      	pop	{r4, r5, r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	080075a8 	.word	0x080075a8
 8001c20:	20001320 	.word	0x20001320
 8001c24:	20001312 	.word	0x20001312
 8001c28:	20001330 	.word	0x20001330
 8001c2c:	20001321 	.word	0x20001321
 8001c30:	20001322 	.word	0x20001322
 8001c34:	2000131e 	.word	0x2000131e
 8001c38:	20000000 	.word	0x20000000
 8001c3c:	20001324 	.word	0x20001324
 8001c40:	2000131a 	.word	0x2000131a

08001c44 <display_update>:



}

void display_update(void){				//spi display updater code , all gfx , works pretty ok n doesn't need to be running always 18x 128 ,constant scaning
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0

	uint8_t spi_store[5];

switch (gfx_skip) { // 1-17  one row
 8001c4a:	4b65      	ldr	r3, [pc, #404]	; (8001de0 <display_update+0x19c>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	2b11      	cmp	r3, #17
 8001c52:	d870      	bhi.n	8001d36 <display_update+0xf2>
 8001c54:	a201      	add	r2, pc, #4	; (adr r2, 8001c5c <display_update+0x18>)
 8001c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c5a:	bf00      	nop
 8001c5c:	08001ca5 	.word	0x08001ca5
 8001c60:	08001ce5 	.word	0x08001ce5
 8001c64:	08001d03 	.word	0x08001d03
 8001c68:	08001d37 	.word	0x08001d37
 8001c6c:	08001d37 	.word	0x08001d37
 8001c70:	08001d37 	.word	0x08001d37
 8001c74:	08001d37 	.word	0x08001d37
 8001c78:	08001d37 	.word	0x08001d37
 8001c7c:	08001d37 	.word	0x08001d37
 8001c80:	08001d37 	.word	0x08001d37
 8001c84:	08001d37 	.word	0x08001d37
 8001c88:	08001d37 	.word	0x08001d37
 8001c8c:	08001d37 	.word	0x08001d37
 8001c90:	08001d37 	.word	0x08001d37
 8001c94:	08001d37 	.word	0x08001d37
 8001c98:	08001d37 	.word	0x08001d37
 8001c9c:	08001d37 	.word	0x08001d37
 8001ca0:	08001d17 	.word	0x08001d17


case 1 : {spi_hold=((gfx_counter[0])&31)+384;gfx_counter[4]=(gfx_counter[0]>>5);  gfx_counter[0]=(gfx_counter[0]+1)&63 ;gfx_skip++;break ;}  // count up positions
 8001ca4:	4b4f      	ldr	r3, [pc, #316]	; (8001de4 <display_update+0x1a0>)
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	f003 031f 	and.w	r3, r3, #31
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	4b4c      	ldr	r3, [pc, #304]	; (8001de8 <display_update+0x1a4>)
 8001cb6:	801a      	strh	r2, [r3, #0]
 8001cb8:	4b4a      	ldr	r3, [pc, #296]	; (8001de4 <display_update+0x1a0>)
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	095b      	lsrs	r3, r3, #5
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	4b48      	ldr	r3, [pc, #288]	; (8001de4 <display_update+0x1a0>)
 8001cc2:	811a      	strh	r2, [r3, #8]
 8001cc4:	4b47      	ldr	r3, [pc, #284]	; (8001de4 <display_update+0x1a0>)
 8001cc6:	881b      	ldrh	r3, [r3, #0]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	4b44      	ldr	r3, [pc, #272]	; (8001de4 <display_update+0x1a0>)
 8001cd4:	801a      	strh	r2, [r3, #0]
 8001cd6:	4b42      	ldr	r3, [pc, #264]	; (8001de0 <display_update+0x19c>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	4b40      	ldr	r3, [pc, #256]	; (8001de0 <display_update+0x19c>)
 8001ce0:	701a      	strb	r2, [r3, #0]
 8001ce2:	e038      	b.n	8001d56 <display_update+0x112>
case 2  : {	spi_hold=384+(gfx_counter[4]*8);gfx_skip++;break ;  }
 8001ce4:	4b3f      	ldr	r3, [pc, #252]	; (8001de4 <display_update+0x1a0>)
 8001ce6:	891b      	ldrh	r3, [r3, #8]
 8001ce8:	3330      	adds	r3, #48	; 0x30
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	4b3d      	ldr	r3, [pc, #244]	; (8001de8 <display_update+0x1a4>)
 8001cf2:	801a      	strh	r2, [r3, #0]
 8001cf4:	4b3a      	ldr	r3, [pc, #232]	; (8001de0 <display_update+0x19c>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	4b38      	ldr	r3, [pc, #224]	; (8001de0 <display_update+0x19c>)
 8001cfe:	701a      	strb	r2, [r3, #0]
 8001d00:	e029      	b.n	8001d56 <display_update+0x112>
case 3   : gfx_counter[3]=0; gfx_skip++;break;
 8001d02:	4b38      	ldr	r3, [pc, #224]	; (8001de4 <display_update+0x1a0>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	80da      	strh	r2, [r3, #6]
 8001d08:	4b35      	ldr	r3, [pc, #212]	; (8001de0 <display_update+0x19c>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	4b33      	ldr	r3, [pc, #204]	; (8001de0 <display_update+0x19c>)
 8001d12:	701a      	strb	r2, [r3, #0]
 8001d14:	e01f      	b.n	8001d56 <display_update+0x112>
case 18 : gfx_counter[2]=(gfx_counter[2]+1) &63; gfx_counter[3]=0;gfx_skip=1;break;
 8001d16:	4b33      	ldr	r3, [pc, #204]	; (8001de4 <display_update+0x1a0>)
 8001d18:	889b      	ldrh	r3, [r3, #4]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	4b2f      	ldr	r3, [pc, #188]	; (8001de4 <display_update+0x1a0>)
 8001d26:	809a      	strh	r2, [r3, #4]
 8001d28:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <display_update+0x1a0>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	80da      	strh	r2, [r3, #6]
 8001d2e:	4b2c      	ldr	r3, [pc, #176]	; (8001de0 <display_update+0x19c>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	701a      	strb	r2, [r3, #0]
 8001d34:	e00f      	b.n	8001d56 <display_update+0x112>
default :  gfx_counter[3]=(gfx_counter[3]+1)&15;gfx_skip++;break;
 8001d36:	4b2b      	ldr	r3, [pc, #172]	; (8001de4 <display_update+0x1a0>)
 8001d38:	88db      	ldrh	r3, [r3, #6]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	4b27      	ldr	r3, [pc, #156]	; (8001de4 <display_update+0x1a0>)
 8001d46:	80da      	strh	r2, [r3, #6]
 8001d48:	4b25      	ldr	r3, [pc, #148]	; (8001de0 <display_update+0x19c>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	4b23      	ldr	r3, [pc, #140]	; (8001de0 <display_update+0x19c>)
 8001d52:	701a      	strb	r2, [r3, #0]
 8001d54:	bf00      	nop

}


if ((gfx_skip==2) || (gfx_skip==3) || (gfx_skip==1)) spi_hold=spi_hold; else spi_hold=gfx_ram[gfx_counter[2]] [gfx_counter[3]] ; // write command or data
 8001d56:	4b22      	ldr	r3, [pc, #136]	; (8001de0 <display_update+0x19c>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d007      	beq.n	8001d6e <display_update+0x12a>
 8001d5e:	4b20      	ldr	r3, [pc, #128]	; (8001de0 <display_update+0x19c>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	d003      	beq.n	8001d6e <display_update+0x12a>
 8001d66:	4b1e      	ldr	r3, [pc, #120]	; (8001de0 <display_update+0x19c>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d104      	bne.n	8001d78 <display_update+0x134>
 8001d6e:	4b1e      	ldr	r3, [pc, #120]	; (8001de8 <display_update+0x1a4>)
 8001d70:	881a      	ldrh	r2, [r3, #0]
 8001d72:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <display_update+0x1a4>)
 8001d74:	801a      	strh	r2, [r3, #0]
 8001d76:	e00d      	b.n	8001d94 <display_update+0x150>
 8001d78:	4b1a      	ldr	r3, [pc, #104]	; (8001de4 <display_update+0x1a0>)
 8001d7a:	889b      	ldrh	r3, [r3, #4]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <display_update+0x1a0>)
 8001d80:	88db      	ldrh	r3, [r3, #6]
 8001d82:	4619      	mov	r1, r3
 8001d84:	4a19      	ldr	r2, [pc, #100]	; (8001dec <display_update+0x1a8>)
 8001d86:	0103      	lsls	r3, r0, #4
 8001d88:	4413      	add	r3, r2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <display_update+0x1a4>)
 8001d92:	801a      	strh	r2, [r3, #0]



		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8001d94:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <display_update+0x1a4>)
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	0a1b      	lsrs	r3, r3, #8
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <display_update+0x164>
 8001da0:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <display_update+0x1ac>)
 8001da2:	22f8      	movs	r2, #248	; 0xf8
 8001da4:	701a      	strb	r2, [r3, #0]
 8001da6:	e002      	b.n	8001dae <display_update+0x16a>
 8001da8:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <display_update+0x1ac>)
 8001daa:	22fa      	movs	r2, #250	; 0xfa
 8001dac:	701a      	strb	r2, [r3, #0]

		spi_store[0]=spi_byte&255;
 8001dae:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <display_update+0x1ac>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	703b      	strb	r3, [r7, #0]
		spi_store[1]=((spi_hold>>4)<<4)&255;
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <display_update+0x1a4>)
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	011b      	lsls	r3, r3, #4
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	707b      	strb	r3, [r7, #1]
		spi_store[2]=((spi_hold&15)<<4)&255;
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <display_update+0x1a4>)
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	011b      	lsls	r3, r3, #4
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	70bb      	strb	r3, [r7, #2]

	// send this to spi for now
			HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3, 100);  // working good ,blocking
 8001dcc:	4639      	mov	r1, r7
 8001dce:	2364      	movs	r3, #100	; 0x64
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	4808      	ldr	r0, [pc, #32]	; (8001df4 <display_update+0x1b0>)
 8001dd4:	f004 fa18 	bl	8006208 <HAL_SPI_Transmit>





}
 8001dd8:	bf00      	nop
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	200005b0 	.word	0x200005b0
 8001de4:	2000194c 	.word	0x2000194c
 8001de8:	2000131e 	.word	0x2000131e
 8001dec:	20001508 	.word	0x20001508
 8001df0:	2000131c 	.word	0x2000131c
 8001df4:	200006e4 	.word	0x200006e4

08001df8 <displayBuffer>:

	// if(store_c>239) {lcd_feedback(); }

}
*/
void displayBuffer (void){        //  only cursor , maybe cycle a set of position inc blink before moving cursor
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0

//uint8_t count_lut[44]={48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,103,104,105,106,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89};
//uint16_t lcd_menuB;  // select upper or lower


	switch(disp_stepper){
 8001dfe:	4b65      	ldr	r3, [pc, #404]	; (8001f94 <displayBuffer+0x19c>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d820      	bhi.n	8001e4a <displayBuffer+0x52>
 8001e08:	a201      	add	r2, pc, #4	; (adr r2, 8001e10 <displayBuffer+0x18>)
 8001e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e0e:	bf00      	nop
 8001e10:	08001e25 	.word	0x08001e25
 8001e14:	08001e4b 	.word	0x08001e4b
 8001e18:	08001e33 	.word	0x08001e33
 8001e1c:	08001e3b 	.word	0x08001e3b
 8001e20:	08001e43 	.word	0x08001e43
	//case 1:init_b=enc2_lut[enc2_dir] ;break;
	case 1:init_b=enc2_dir;break; // cursor position
 8001e24:	4b5c      	ldr	r3, [pc, #368]	; (8001f98 <displayBuffer+0x1a0>)
 8001e26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	4b5b      	ldr	r3, [pc, #364]	; (8001f9c <displayBuffer+0x1a4>)
 8001e2e:	701a      	strb	r2, [r3, #0]
 8001e30:	e00c      	b.n	8001e4c <displayBuffer+0x54>
	case 3:init_b=115 ;break; // bottom info line
 8001e32:	4b5a      	ldr	r3, [pc, #360]	; (8001f9c <displayBuffer+0x1a4>)
 8001e34:	2273      	movs	r2, #115	; 0x73
 8001e36:	701a      	strb	r2, [r3, #0]
 8001e38:	e008      	b.n	8001e4c <displayBuffer+0x54>
	case 4:init_b=116 ;break;
 8001e3a:	4b58      	ldr	r3, [pc, #352]	; (8001f9c <displayBuffer+0x1a4>)
 8001e3c:	2274      	movs	r2, #116	; 0x74
 8001e3e:	701a      	strb	r2, [r3, #0]
 8001e40:	e004      	b.n	8001e4c <displayBuffer+0x54>
	case 5:init_b=117 ;break;
 8001e42:	4b56      	ldr	r3, [pc, #344]	; (8001f9c <displayBuffer+0x1a4>)
 8001e44:	2275      	movs	r2, #117	; 0x75
 8001e46:	701a      	strb	r2, [r3, #0]
 8001e48:	e000      	b.n	8001e4c <displayBuffer+0x54>


	default :break;
 8001e4a:	bf00      	nop
	}
	uint8_t d_count;
uint8_t init_x=((init_b>>4)<<3);
 8001e4c:	4b53      	ldr	r3, [pc, #332]	; (8001f9c <displayBuffer+0x1a4>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	091b      	lsrs	r3, r3, #4
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	71bb      	strb	r3, [r7, #6]
uint8_t init_y=init_b&15;
 8001e58:	4b50      	ldr	r3, [pc, #320]	; (8001f9c <displayBuffer+0x1a4>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	f003 030f 	and.w	r3, r3, #15
 8001e60:	717b      	strb	r3, [r7, #5]
uint16_t store_x;



store_c= disp_lut [init_b>>4]  [init_y] ;  //gets potvalues pointer from menus ,works
 8001e62:	4b4e      	ldr	r3, [pc, #312]	; (8001f9c <displayBuffer+0x1a4>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	091b      	lsrs	r3, r3, #4
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	797b      	ldrb	r3, [r7, #5]
 8001e6e:	494c      	ldr	r1, [pc, #304]	; (8001fa0 <displayBuffer+0x1a8>)
 8001e70:	0112      	lsls	r2, r2, #4
 8001e72:	4413      	add	r3, r2
 8001e74:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001e78:	4b4a      	ldr	r3, [pc, #296]	; (8001fa4 <displayBuffer+0x1ac>)
 8001e7a:	801a      	strh	r2, [r3, #0]
if (disp_stepper==1) lcd_out3=potSource[store_c-128];
 8001e7c:	4b45      	ldr	r3, [pc, #276]	; (8001f94 <displayBuffer+0x19c>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d107      	bne.n	8001e94 <displayBuffer+0x9c>
 8001e84:	4b47      	ldr	r3, [pc, #284]	; (8001fa4 <displayBuffer+0x1ac>)
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	3b80      	subs	r3, #128	; 0x80
 8001e8a:	4a47      	ldr	r2, [pc, #284]	; (8001fa8 <displayBuffer+0x1b0>)
 8001e8c:	5cd3      	ldrb	r3, [r2, r3]
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	4b46      	ldr	r3, [pc, #280]	; (8001fac <displayBuffer+0x1b4>)
 8001e92:	801a      	strh	r2, [r3, #0]
//if (init_b==enc2_dir) lcd_out3=potSource[store_c-128];   // feedback line output change to whatever
//if (init_b==enc2_dir) lcd_out3=potValues[store_c-128];   // feedback line output change to whatever

//if (store_c<64) store_c=64; // just in case , causes issues with char

	 if (store_c==64) store_c=47;
 8001e94:	4b43      	ldr	r3, [pc, #268]	; (8001fa4 <displayBuffer+0x1ac>)
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	2b40      	cmp	r3, #64	; 0x40
 8001e9a:	d102      	bne.n	8001ea2 <displayBuffer+0xaa>
 8001e9c:	4b41      	ldr	r3, [pc, #260]	; (8001fa4 <displayBuffer+0x1ac>)
 8001e9e:	222f      	movs	r2, #47	; 0x2f
 8001ea0:	801a      	strh	r2, [r3, #0]
	if ((store_c>127)&& (store_c<255))  {store_c= potValues[store_c&127]+48;}		// sets data or stored
 8001ea2:	4b40      	ldr	r3, [pc, #256]	; (8001fa4 <displayBuffer+0x1ac>)
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	2b7f      	cmp	r3, #127	; 0x7f
 8001ea8:	d90e      	bls.n	8001ec8 <displayBuffer+0xd0>
 8001eaa:	4b3e      	ldr	r3, [pc, #248]	; (8001fa4 <displayBuffer+0x1ac>)
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	2bfe      	cmp	r3, #254	; 0xfe
 8001eb0:	d80a      	bhi.n	8001ec8 <displayBuffer+0xd0>
 8001eb2:	4b3c      	ldr	r3, [pc, #240]	; (8001fa4 <displayBuffer+0x1ac>)
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001eba:	4a3d      	ldr	r2, [pc, #244]	; (8001fb0 <displayBuffer+0x1b8>)
 8001ebc:	5cd3      	ldrb	r3, [r2, r3]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	3330      	adds	r3, #48	; 0x30
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	4b37      	ldr	r3, [pc, #220]	; (8001fa4 <displayBuffer+0x1ac>)
 8001ec6:	801a      	strh	r2, [r3, #0]
	if (store_c>254){store_c= potValues[store_c-128]+48;}
 8001ec8:	4b36      	ldr	r3, [pc, #216]	; (8001fa4 <displayBuffer+0x1ac>)
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	2bfe      	cmp	r3, #254	; 0xfe
 8001ece:	d909      	bls.n	8001ee4 <displayBuffer+0xec>
 8001ed0:	4b34      	ldr	r3, [pc, #208]	; (8001fa4 <displayBuffer+0x1ac>)
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	3b80      	subs	r3, #128	; 0x80
 8001ed6:	4a36      	ldr	r2, [pc, #216]	; (8001fb0 <displayBuffer+0x1b8>)
 8001ed8:	5cd3      	ldrb	r3, [r2, r3]
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	3330      	adds	r3, #48	; 0x30
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	4b30      	ldr	r3, [pc, #192]	; (8001fa4 <displayBuffer+0x1ac>)
 8001ee2:	801a      	strh	r2, [r3, #0]

store_c=store_c-47; store_c = store_c &127;	spell[init_b] = store_c ;  // spell no longer ?, store_c changes
 8001ee4:	4b2f      	ldr	r3, [pc, #188]	; (8001fa4 <displayBuffer+0x1ac>)
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	3b2f      	subs	r3, #47	; 0x2f
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	4b2d      	ldr	r3, [pc, #180]	; (8001fa4 <displayBuffer+0x1ac>)
 8001eee:	801a      	strh	r2, [r3, #0]
 8001ef0:	4b2c      	ldr	r3, [pc, #176]	; (8001fa4 <displayBuffer+0x1ac>)
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	4b2a      	ldr	r3, [pc, #168]	; (8001fa4 <displayBuffer+0x1ac>)
 8001efc:	801a      	strh	r2, [r3, #0]
 8001efe:	4b29      	ldr	r3, [pc, #164]	; (8001fa4 <displayBuffer+0x1ac>)
 8001f00:	8819      	ldrh	r1, [r3, #0]
 8001f02:	4b26      	ldr	r3, [pc, #152]	; (8001f9c <displayBuffer+0x1a4>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	b2c9      	uxtb	r1, r1
 8001f0a:	4b2a      	ldr	r3, [pc, #168]	; (8001fb4 <displayBuffer+0x1bc>)
 8001f0c:	5499      	strb	r1, [r3, r2]
//if ((seq_pos&1) && (store_c) && (init_b==enc2_dir)) store_c=0; // blinker ok for now ,slow might need other separate code for this
//if (seq_pos&1)  {if (store_c) {  store_c=0;} else store_c=48;}
if   (disp_stepper==1)      {  store_c=1;}
 8001f0e:	4b21      	ldr	r3, [pc, #132]	; (8001f94 <displayBuffer+0x19c>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d102      	bne.n	8001f1c <displayBuffer+0x124>
 8001f16:	4b23      	ldr	r3, [pc, #140]	; (8001fa4 <displayBuffer+0x1ac>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	801a      	strh	r2, [r3, #0]
//lcd_out3=potSource[store_c-128]; // just feedback
store_x=(store_c*8);
 8001f1c:	4b21      	ldr	r3, [pc, #132]	; (8001fa4 <displayBuffer+0x1ac>)
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	807b      	strh	r3, [r7, #2]

for (d_count=0;d_count<7;d_count++){
 8001f24:	2300      	movs	r3, #0
 8001f26:	71fb      	strb	r3, [r7, #7]
 8001f28:	e013      	b.n	8001f52 <displayBuffer+0x15a>
					gfx_ram[d_count+init_x] [init_y] = gfx_char[d_count+store_x]^255; //write character to ram ,should be elsewhere
 8001f2a:	79fa      	ldrb	r2, [r7, #7]
 8001f2c:	887b      	ldrh	r3, [r7, #2]
 8001f2e:	4413      	add	r3, r2
 8001f30:	4a21      	ldr	r2, [pc, #132]	; (8001fb8 <displayBuffer+0x1c0>)
 8001f32:	5cd1      	ldrb	r1, [r2, r3]
 8001f34:	79fa      	ldrb	r2, [r7, #7]
 8001f36:	79bb      	ldrb	r3, [r7, #6]
 8001f38:	441a      	add	r2, r3
 8001f3a:	797b      	ldrb	r3, [r7, #5]
 8001f3c:	43c9      	mvns	r1, r1
 8001f3e:	b2c8      	uxtb	r0, r1
 8001f40:	491e      	ldr	r1, [pc, #120]	; (8001fbc <displayBuffer+0x1c4>)
 8001f42:	0112      	lsls	r2, r2, #4
 8001f44:	440a      	add	r2, r1
 8001f46:	4413      	add	r3, r2
 8001f48:	4602      	mov	r2, r0
 8001f4a:	701a      	strb	r2, [r3, #0]
for (d_count=0;d_count<7;d_count++){
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	71fb      	strb	r3, [r7, #7]
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	2b06      	cmp	r3, #6
 8001f56:	d9e8      	bls.n	8001f2a <displayBuffer+0x132>





gfx_ram[7+init_x] [init_y] = 255; // last line is blank between rows
 8001f58:	79bb      	ldrb	r3, [r7, #6]
 8001f5a:	1dda      	adds	r2, r3, #7
 8001f5c:	797b      	ldrb	r3, [r7, #5]
 8001f5e:	4917      	ldr	r1, [pc, #92]	; (8001fbc <displayBuffer+0x1c4>)
 8001f60:	0112      	lsls	r2, r2, #4
 8001f62:	440a      	add	r2, r1
 8001f64:	4413      	add	r3, r2
 8001f66:	22ff      	movs	r2, #255	; 0xff
 8001f68:	701a      	strb	r2, [r3, #0]
if (disp_stepper==5) disp_stepper=1; else disp_stepper++;
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <displayBuffer+0x19c>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b05      	cmp	r3, #5
 8001f70:	d103      	bne.n	8001f7a <displayBuffer+0x182>
 8001f72:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <displayBuffer+0x19c>)
 8001f74:	2201      	movs	r2, #1
 8001f76:	701a      	strb	r2, [r3, #0]

//	if (init_b==119) init_b=0; else init_b++;   // character position  dont need

	// if(store_c>239) {lcd_feedback(); }

}
 8001f78:	e005      	b.n	8001f86 <displayBuffer+0x18e>
if (disp_stepper==5) disp_stepper=1; else disp_stepper++;
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <displayBuffer+0x19c>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <displayBuffer+0x19c>)
 8001f84:	701a      	strb	r2, [r3, #0]
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	200005bd 	.word	0x200005bd
 8001f98:	20001312 	.word	0x20001312
 8001f9c:	20001322 	.word	0x20001322
 8001fa0:	08007668 	.word	0x08007668
 8001fa4:	20000a34 	.word	0x20000a34
 8001fa8:	200008fc 	.word	0x200008fc
 8001fac:	20001958 	.word	0x20001958
 8001fb0:	200007fc 	.word	0x200007fc
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	200001b0 	.word	0x200001b0
 8001fbc:	20001508 	.word	0x20001508

08001fc0 <sampling>:
spell[148+n]=spell[108+n];
}
}


void sampling(void){						// 18 ms of data
 8001fc0:	b5b0      	push	{r4, r5, r7, lr}
 8001fc2:	b092      	sub	sp, #72	; 0x48
 8001fc4:	af00      	add	r7, sp, #0
uint8_t mask_i;
uint8_t mask_k;
uint8_t adsr_mult[5];
//adc_read();
//uint16_t isr_tempo=isrMask; // get tempo value
sample_pointB=sample_pointD;
 8001fc6:	4bb2      	ldr	r3, [pc, #712]	; (8002290 <sampling+0x2d0>)
 8001fc8:	881a      	ldrh	r2, [r3, #0]
 8001fca:	4bb2      	ldr	r3, [pc, #712]	; (8002294 <sampling+0x2d4>)
 8001fcc:	801a      	strh	r2, [r3, #0]
unsigned short tempo_start=0;  // enabled when i=isrMask;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
static unsigned short tempo_end=0;   // last count before note start
uint16_t i_total;
uint16_t tempo_mod=tempo_lut[potSource[109]];  // set tempo,speed from lut 40-200bpm
 8001fd4:	4bb0      	ldr	r3, [pc, #704]	; (8002298 <sampling+0x2d8>)
 8001fd6:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4baf      	ldr	r3, [pc, #700]	; (800229c <sampling+0x2dc>)
 8001fde:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001fe2:	86fb      	strh	r3, [r7, #54]	; 0x36

uint8_t l;			// 35.002khz(0.02857ms) sample, 1 sample is temp count (16x=0.00045712) , *16=1 note ,at 300 (437bpm),(1/(0.00002857*tempo count*16)=1beat in s
float freq_temp;	// (1/(bpm/60)) /0.00045712=tempo count ie 1093.8 for 120bpm
float freq2_temp;
float freq_adder;
float tempo_sync=16384/((tempo_mod*16)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80 
 8001fe4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	da00      	bge.n	8001fec <sampling+0x2c>
 8001fea:	331f      	adds	r3, #31
 8001fec:	115b      	asrs	r3, r3, #5
 8001fee:	461a      	mov	r2, r3
 8001ff0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ff4:	fb93 f3f2 	sdiv	r3, r3, r2
 8001ff8:	ee07 3a90 	vmov	s15, r3
 8001ffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002000:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
tempo_sync=tempo_sync/80;
 8002004:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002008:	eddf 6aa5 	vldr	s13, [pc, #660]	; 80022a0 <sampling+0x2e0>
 800200c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002010:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30


for (l=0;l<10;l++){
 8002014:	2300      	movs	r3, #0
 8002016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800201a:	e09d      	b.n	8002158 <sampling+0x198>
	
	
	freq_temp=potSource[130+l];
 800201c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002020:	3382      	adds	r3, #130	; 0x82
 8002022:	4a9d      	ldr	r2, [pc, #628]	; (8002298 <sampling+0x2d8>)
 8002024:	5cd3      	ldrb	r3, [r2, r3]
 8002026:	ee07 3a90 	vmov	s15, r3
 800202a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800202e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	freq2_temp=freq_temp*tempo_sync; //correction to one note per cycle 
 8002032:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002036:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800203a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800203e:	edc7 7a08 	vstr	s15, [r7, #32]
	//freq2_temp=freq_temp;
	freq_temp=lfo_accu[l]+ freq2_temp;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar 
 8002042:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002046:	4a97      	ldr	r2, [pc, #604]	; (80022a4 <sampling+0x2e4>)
 8002048:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800204c:	ee07 3a90 	vmov	s15, r3
 8002050:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002054:	ed97 7a08 	vldr	s14, [r7, #32]
 8002058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800205c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	// temp0*16isr*8notes=(1/tempo)*128		@80 rate is 1 bar/8note?  @ tempo*128 count ie@300 temp : 38400tempo countis at freq_temp=8192 freq_temp+1=4.6

if ((tempo_count<50) && ((next_isr&15)==15)) freq_temp=0;   // trying retrigger
 8002060:	4b91      	ldr	r3, [pc, #580]	; (80022a8 <sampling+0x2e8>)
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	2b31      	cmp	r3, #49	; 0x31
 8002066:	d808      	bhi.n	800207a <sampling+0xba>
 8002068:	4b90      	ldr	r3, [pc, #576]	; (80022ac <sampling+0x2ec>)
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	f003 030f 	and.w	r3, r3, #15
 8002070:	2b0f      	cmp	r3, #15
 8002072:	d102      	bne.n	800207a <sampling+0xba>
 8002074:	f04f 0300 	mov.w	r3, #0
 8002078:	63fb      	str	r3, [r7, #60]	; 0x3c
if (freq_temp>16384) lfo_accu[l]=freq_temp-16384; else lfo_accu[l]=freq_temp; // write back value
 800207a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800207e:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80022b0 <sampling+0x2f0>
 8002082:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800208a:	dd10      	ble.n	80020ae <sampling+0xee>
 800208c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002090:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80022b0 <sampling+0x2f0>
 8002094:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002098:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800209c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020a0:	ee17 2a90 	vmov	r2, s15
 80020a4:	b291      	uxth	r1, r2
 80020a6:	4a7f      	ldr	r2, [pc, #508]	; (80022a4 <sampling+0x2e4>)
 80020a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80020ac:	e00b      	b.n	80020c6 <sampling+0x106>
 80020ae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80020b2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80020b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020ba:	ee17 2a90 	vmov	r2, s15
 80020be:	b291      	uxth	r1, r2
 80020c0:	4a78      	ldr	r2, [pc, #480]	; (80022a4 <sampling+0x2e4>)
 80020c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
freq_temp=lfo_accu[l]; // 0-255 limit + above zero
 80020c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80020ca:	4a76      	ldr	r2, [pc, #472]	; (80022a4 <sampling+0x2e4>)
 80020cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020d0:	ee07 3a90 	vmov	s15, r3
 80020d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020d8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
freq_temp=freq_temp*0.000383495;  // 0-255 , chang this for depth
 80020dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80020de:	f7fe fb09 	bl	80006f4 <__aeabi_f2d>
 80020e2:	a367      	add	r3, pc, #412	; (adr r3, 8002280 <sampling+0x2c0>)
 80020e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e8:	f7fe f876 	bl	80001d8 <__aeabi_dmul>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4610      	mov	r0, r2
 80020f2:	4619      	mov	r1, r3
 80020f4:	f7fe fbde 	bl	80008b4 <__aeabi_d2f>
 80020f8:	4603      	mov	r3, r0
 80020fa:	63fb      	str	r3, [r7, #60]	; 0x3c
freq2_temp =arm_sin_f32(freq_temp); // seems to be working
 80020fc:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8002100:	f005 f9d6 	bl	80074b0 <arm_sin_f32>
 8002104:	ed87 0a08 	vstr	s0, [r7, #32]
freq_temp=freq2_temp*potSource[140+l]*51;
 8002108:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800210c:	338c      	adds	r3, #140	; 0x8c
 800210e:	4a62      	ldr	r2, [pc, #392]	; (8002298 <sampling+0x2d8>)
 8002110:	5cd3      	ldrb	r3, [r2, r3]
 8002112:	ee07 3a90 	vmov	s15, r3
 8002116:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800211a:	edd7 7a08 	vldr	s15, [r7, #32]
 800211e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002122:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80022b4 <sampling+0x2f4>
 8002126:	ee67 7a87 	vmul.f32	s15, s15, s14
 800212a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
lfo_out[l]=freq_temp+8195; // all ok
 800212e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002132:	ed9f 7a61 	vldr	s14, [pc, #388]	; 80022b8 <sampling+0x2f8>
 8002136:	ee77 7a87 	vadd.f32	s15, s15, s14
 800213a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800213e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002142:	ee17 2a90 	vmov	r2, s15
 8002146:	b211      	sxth	r1, r2
 8002148:	4a5c      	ldr	r2, [pc, #368]	; (80022bc <sampling+0x2fc>)
 800214a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
for (l=0;l<10;l++){
 800214e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002152:	3301      	adds	r3, #1
 8002154:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002158:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800215c:	2b09      	cmp	r3, #9
 800215e:	f67f af5d 	bls.w	800201c <sampling+0x5c>

} // lfo gen : 0=f1 , 1=tempo,2=pitch


	freq_point[0]=lfo_out[0]*0.00006435; //sine seem to overload at fully open but only with filter engaged 
 8002162:	4b56      	ldr	r3, [pc, #344]	; (80022bc <sampling+0x2fc>)
 8002164:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe fab1 	bl	80006d0 <__aeabi_i2d>
 800216e:	a346      	add	r3, pc, #280	; (adr r3, 8002288 <sampling+0x2c8>)
 8002170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002174:	f7fe f830 	bl	80001d8 <__aeabi_dmul>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	4610      	mov	r0, r2
 800217e:	4619      	mov	r1, r3
 8002180:	f7fe fb98 	bl	80008b4 <__aeabi_d2f>
 8002184:	4603      	mov	r3, r0
 8002186:	4a4e      	ldr	r2, [pc, #312]	; (80022c0 <sampling+0x300>)
 8002188:	6013      	str	r3, [r2, #0]
freq_point[2]=lfo_out[3]*0.00006435;;
 800218a:	4b4c      	ldr	r3, [pc, #304]	; (80022bc <sampling+0x2fc>)
 800218c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002190:	4618      	mov	r0, r3
 8002192:	f7fe fa9d 	bl	80006d0 <__aeabi_i2d>
 8002196:	a33c      	add	r3, pc, #240	; (adr r3, 8002288 <sampling+0x2c8>)
 8002198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219c:	f7fe f81c 	bl	80001d8 <__aeabi_dmul>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4610      	mov	r0, r2
 80021a6:	4619      	mov	r1, r3
 80021a8:	f7fe fb84 	bl	80008b4 <__aeabi_d2f>
 80021ac:	4603      	mov	r3, r0
 80021ae:	4a44      	ldr	r2, [pc, #272]	; (80022c0 <sampling+0x300>)
 80021b0:	6093      	str	r3, [r2, #8]



//lcd_out3=potSource[130]; // 3 digit read out , works ok
//lcd_out3=lcd_out3+180;
potSource[150]=(lcd_out3/100)*16;
 80021b2:	4b44      	ldr	r3, [pc, #272]	; (80022c4 <sampling+0x304>)
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	4a44      	ldr	r2, [pc, #272]	; (80022c8 <sampling+0x308>)
 80021b8:	fba2 2303 	umull	r2, r3, r2, r3
 80021bc:	095b      	lsrs	r3, r3, #5
 80021be:	b29b      	uxth	r3, r3
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	011b      	lsls	r3, r3, #4
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	4b34      	ldr	r3, [pc, #208]	; (8002298 <sampling+0x2d8>)
 80021c8:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
potSource[151]=((lcd_out3 %100)/10)*16;		 // 0-160 to 0-10
 80021cc:	4b3d      	ldr	r3, [pc, #244]	; (80022c4 <sampling+0x304>)
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	4a3d      	ldr	r2, [pc, #244]	; (80022c8 <sampling+0x308>)
 80021d2:	fba2 1203 	umull	r1, r2, r2, r3
 80021d6:	0952      	lsrs	r2, r2, #5
 80021d8:	2164      	movs	r1, #100	; 0x64
 80021da:	fb01 f202 	mul.w	r2, r1, r2
 80021de:	1a9b      	subs	r3, r3, r2
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	4a3a      	ldr	r2, [pc, #232]	; (80022cc <sampling+0x30c>)
 80021e4:	fba2 2303 	umull	r2, r3, r2, r3
 80021e8:	08db      	lsrs	r3, r3, #3
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4b29      	ldr	r3, [pc, #164]	; (8002298 <sampling+0x2d8>)
 80021f4:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
potSource[152]=(lcd_out3%10)*16;
 80021f8:	4b32      	ldr	r3, [pc, #200]	; (80022c4 <sampling+0x304>)
 80021fa:	881a      	ldrh	r2, [r3, #0]
 80021fc:	4b33      	ldr	r3, [pc, #204]	; (80022cc <sampling+0x30c>)
 80021fe:	fba3 1302 	umull	r1, r3, r3, r2
 8002202:	08d9      	lsrs	r1, r3, #3
 8002204:	460b      	mov	r3, r1
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	b29b      	uxth	r3, r3
 8002210:	b2db      	uxtb	r3, r3
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	b2da      	uxtb	r2, r3
 8002216:	4b20      	ldr	r3, [pc, #128]	; (8002298 <sampling+0x2d8>)
 8002218:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98


unsigned short  sine_zero;  // zero cross
note_holdA=0;
 800221c:	4b2c      	ldr	r3, [pc, #176]	; (80022d0 <sampling+0x310>)
 800221e:	2200      	movs	r2, #0
 8002220:	701a      	strb	r2, [r3, #0]
int32_t filter_Accu;

//tempo_mod=tempo_mod-63+(lfo_out[1]>>7);
//if (tempo_mod<450) tempo_mod=((tempo_mod-200)>>1) +200; // more res lower
uint8_t note_plain;
int8_t ring_mod=0;
 8002222:	2300      	movs	r3, #0
 8002224:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
//sample_Accu2=0;
//printf ("crap");
// some good phasin and delays here
uint8_t cross_fade[2];
uint8_t fader[17]={0,1,5,11,19,28,39,51,64,76,88,99,108,116,122,126,127}; // sine curve for cross fade
 8002228:	4b2a      	ldr	r3, [pc, #168]	; (80022d4 <sampling+0x314>)
 800222a:	463c      	mov	r4, r7
 800222c:	461d      	mov	r5, r3
 800222e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002230:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002232:	682b      	ldr	r3, [r5, #0]
 8002234:	7023      	strb	r3, [r4, #0]
if(adc_values[2]&16)	{cross_fade[1]=127-fader[adc_values[2]&15]; cross_fade[2]=127;}  else {cross_fade[2]=fader[adc_values[2]&15]; cross_fade[1]=127;} //calculate crossfader
 8002236:	4b28      	ldr	r3, [pc, #160]	; (80022d8 <sampling+0x318>)
 8002238:	789b      	ldrb	r3, [r3, #2]
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00e      	beq.n	8002260 <sampling+0x2a0>
 8002242:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <sampling+0x318>)
 8002244:	789b      	ldrb	r3, [r3, #2]
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	3348      	adds	r3, #72	; 0x48
 800224c:	443b      	add	r3, r7
 800224e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002252:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002256:	b2db      	uxtb	r3, r3
 8002258:	757b      	strb	r3, [r7, #21]
 800225a:	237f      	movs	r3, #127	; 0x7f
 800225c:	75bb      	strb	r3, [r7, #22]
 800225e:	e00a      	b.n	8002276 <sampling+0x2b6>
 8002260:	4b1d      	ldr	r3, [pc, #116]	; (80022d8 <sampling+0x318>)
 8002262:	789b      	ldrb	r3, [r3, #2]
 8002264:	f003 030f 	and.w	r3, r3, #15
 8002268:	3348      	adds	r3, #72	; 0x48
 800226a:	443b      	add	r3, r7
 800226c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002270:	75bb      	strb	r3, [r7, #22]
 8002272:	237f      	movs	r3, #127	; 0x7f
 8002274:	757b      	strb	r3, [r7, #21]
// doing lfo calc here as it is slow only for now


///////////////////////////////////////////////////////////////

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine
 8002276:	4b19      	ldr	r3, [pc, #100]	; (80022dc <sampling+0x31c>)
 8002278:	2200      	movs	r2, #0
 800227a:	801a      	strh	r2, [r3, #0]
 800227c:	e3fc      	b.n	8002a78 <sampling+0xab8>
 800227e:	bf00      	nop
 8002280:	7bb1a72c 	.word	0x7bb1a72c
 8002284:	3f3921fa 	.word	0x3f3921fa
 8002288:	94fd52a7 	.word	0x94fd52a7
 800228c:	3f10de74 	.word	0x3f10de74
 8002290:	20001262 	.word	0x20001262
 8002294:	20000a56 	.word	0x20000a56
 8002298:	200008fc 	.word	0x200008fc
 800229c:	200013c4 	.word	0x200013c4
 80022a0:	42a00000 	.word	0x42a00000
 80022a4:	2000139c 	.word	0x2000139c
 80022a8:	20001316 	.word	0x20001316
 80022ac:	200012c2 	.word	0x200012c2
 80022b0:	46800000 	.word	0x46800000
 80022b4:	424c0000 	.word	0x424c0000
 80022b8:	46000c00 	.word	0x46000c00
 80022bc:	200013b0 	.word	0x200013b0
 80022c0:	2000138c 	.word	0x2000138c
 80022c4:	20001958 	.word	0x20001958
 80022c8:	51eb851f 	.word	0x51eb851f
 80022cc:	cccccccd 	.word	0xcccccccd
 80022d0:	200012cf 	.word	0x200012cf
 80022d4:	080075cc 	.word	0x080075cc
 80022d8:	200001a8 	.word	0x200001a8
 80022dc:	20000a58 	.word	0x20000a58

	i_total=i+sample_pointB;
 80022e0:	4b91      	ldr	r3, [pc, #580]	; (8002528 <sampling+0x568>)
 80022e2:	881a      	ldrh	r2, [r3, #0]
 80022e4:	4b91      	ldr	r3, [pc, #580]	; (800252c <sampling+0x56c>)
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	4413      	add	r3, r2
 80022ea:	85bb      	strh	r3, [r7, #44]	; 0x2c

	note_plain=potValues[seq_pos & 7 ];
 80022ec:	4b90      	ldr	r3, [pc, #576]	; (8002530 <sampling+0x570>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	4a8f      	ldr	r2, [pc, #572]	; (8002534 <sampling+0x574>)
 80022f6:	5cd3      	ldrb	r3, [r2, r3]
 80022f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
potValues[i&255]=potSource[i&255]>>4; //just to update values 
 80022fc:	4b8a      	ldr	r3, [pc, #552]	; (8002528 <sampling+0x568>)
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	b2db      	uxtb	r3, r3
 8002302:	4a8d      	ldr	r2, [pc, #564]	; (8002538 <sampling+0x578>)
 8002304:	5cd2      	ldrb	r2, [r2, r3]
 8002306:	4b88      	ldr	r3, [pc, #544]	; (8002528 <sampling+0x568>)
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	b2db      	uxtb	r3, r3
 800230c:	0912      	lsrs	r2, r2, #4
 800230e:	b2d1      	uxtb	r1, r2
 8002310:	4a88      	ldr	r2, [pc, #544]	; (8002534 <sampling+0x574>)
 8002312:	54d1      	strb	r1, [r2, r3]
	if (tempo_count>=tempo_mod) { next_isr=(next_isr+1) & 4095;tempo_count=0;adsr();  }  else {tempo_count++; }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 8002314:	4b89      	ldr	r3, [pc, #548]	; (800253c <sampling+0x57c>)
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800231a:	429a      	cmp	r2, r3
 800231c:	d80e      	bhi.n	800233c <sampling+0x37c>
 800231e:	4b88      	ldr	r3, [pc, #544]	; (8002540 <sampling+0x580>)
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	3301      	adds	r3, #1
 8002324:	b29b      	uxth	r3, r3
 8002326:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800232a:	b29a      	uxth	r2, r3
 800232c:	4b84      	ldr	r3, [pc, #528]	; (8002540 <sampling+0x580>)
 800232e:	801a      	strh	r2, [r3, #0]
 8002330:	4b82      	ldr	r3, [pc, #520]	; (800253c <sampling+0x57c>)
 8002332:	2200      	movs	r2, #0
 8002334:	801a      	strh	r2, [r3, #0]
 8002336:	f000 fbb7 	bl	8002aa8 <adsr>
 800233a:	e005      	b.n	8002348 <sampling+0x388>
 800233c:	4b7f      	ldr	r3, [pc, #508]	; (800253c <sampling+0x57c>)
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	3301      	adds	r3, #1
 8002342:	b29a      	uxth	r2, r3
 8002344:	4b7d      	ldr	r3, [pc, #500]	; (800253c <sampling+0x57c>)
 8002346:	801a      	strh	r2, [r3, #0]
// tempo_count is about 1000-400 
	tempo_start=0;
 8002348:	2300      	movs	r3, #0
 800234a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	if ((next_isr>>4) != seq_pos) { 					// next note step 140ms
 800234e:	4b7c      	ldr	r3, [pc, #496]	; (8002540 <sampling+0x580>)
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	091b      	lsrs	r3, r3, #4
 8002354:	b29a      	uxth	r2, r3
 8002356:	4b76      	ldr	r3, [pc, #472]	; (8002530 <sampling+0x570>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	b29b      	uxth	r3, r3
 800235c:	429a      	cmp	r2, r3
 800235e:	d009      	beq.n	8002374 <sampling+0x3b4>
		seq_pos=next_isr>>4; // seq pos =256 max , isr = 1/16 of a note
 8002360:	4b77      	ldr	r3, [pc, #476]	; (8002540 <sampling+0x580>)
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	091b      	lsrs	r3, r3, #4
 8002366:	b29b      	uxth	r3, r3
 8002368:	b2da      	uxtb	r2, r3
 800236a:	4b71      	ldr	r3, [pc, #452]	; (8002530 <sampling+0x570>)
 800236c:	701a      	strb	r2, [r3, #0]
		tempo_start=1;
 800236e:	2301      	movs	r3, #1
 8002370:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

}


	if(tempo_start  )    // this helps alot to slow down,only on note change 16xisr maybe clear everythign before hand  and sample and hold and zero means no change
 8002374:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 8124 	beq.w	80025c6 <sampling+0x606>
	{
	//printf("\n");//	ITM_SendChar( 65 );   //  Send ASCII code 65 = ’A’
	//printf("%d" ,note_channel[10]);


		potValues[32]=adc_values[0]>>1; //assigned pots to start of loopers 0-16,works
 800237e:	4b71      	ldr	r3, [pc, #452]	; (8002544 <sampling+0x584>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	085b      	lsrs	r3, r3, #1
 8002384:	b2da      	uxtb	r2, r3
 8002386:	4b6b      	ldr	r3, [pc, #428]	; (8002534 <sampling+0x574>)
 8002388:	f883 2020 	strb.w	r2, [r3, #32]
		potValues[33]=adc_values[1]>>1;
 800238c:	4b6d      	ldr	r3, [pc, #436]	; (8002544 <sampling+0x584>)
 800238e:	785b      	ldrb	r3, [r3, #1]
 8002390:	085b      	lsrs	r3, r3, #1
 8002392:	b2da      	uxtb	r2, r3
 8002394:	4b67      	ldr	r3, [pc, #412]	; (8002534 <sampling+0x574>)
 8002396:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21


		seq_loop[2]=((potValues[32]+(seq_pos&7))&15); // calc  8 note loop positions sets looping point in sequence
 800239a:	4b66      	ldr	r3, [pc, #408]	; (8002534 <sampling+0x574>)
 800239c:	f893 2020 	ldrb.w	r2, [r3, #32]
 80023a0:	4b63      	ldr	r3, [pc, #396]	; (8002530 <sampling+0x570>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	4413      	add	r3, r2
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	4b64      	ldr	r3, [pc, #400]	; (8002548 <sampling+0x588>)
 80023b6:	709a      	strb	r2, [r3, #2]
		
		//seq_loop[3]=(potValues[33]+(( seq_pos&31 ) >>2)) & 15;  // quater speed
			seq_loop[3]=((potValues[33]+(seq_pos&15))&15); //sets looping point in sequence this is full 16 note
 80023b8:	4b5e      	ldr	r3, [pc, #376]	; (8002534 <sampling+0x574>)
 80023ba:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80023be:	4b5c      	ldr	r3, [pc, #368]	; (8002530 <sampling+0x570>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	4413      	add	r3, r2
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	4b5e      	ldr	r3, [pc, #376]	; (8002548 <sampling+0x588>)
 80023ce:	70da      	strb	r2, [r3, #3]
		
			seq_loop[4]=((potValues[32]+(seq_pos&7))&15);
 80023d0:	4b58      	ldr	r3, [pc, #352]	; (8002534 <sampling+0x574>)
 80023d2:	f893 2020 	ldrb.w	r2, [r3, #32]
 80023d6:	4b56      	ldr	r3, [pc, #344]	; (8002530 <sampling+0x570>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	4413      	add	r3, r2
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	f003 030f 	and.w	r3, r3, #15
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	4b57      	ldr	r3, [pc, #348]	; (8002548 <sampling+0x588>)
 80023ec:	711a      	strb	r2, [r3, #4]
			
		//seq_loop[4]=((potValues[32]+((seq_pos&15)>>1))&15); // half speed

		note_channel[2]=potValues[80+seq_loop[2]]+potValues[72];  //loop 8 notes from pos and x times
 80023ee:	4b56      	ldr	r3, [pc, #344]	; (8002548 <sampling+0x588>)
 80023f0:	789b      	ldrb	r3, [r3, #2]
 80023f2:	3350      	adds	r3, #80	; 0x50
 80023f4:	4a4f      	ldr	r2, [pc, #316]	; (8002534 <sampling+0x574>)
 80023f6:	5cd3      	ldrb	r3, [r2, r3]
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	4b4e      	ldr	r3, [pc, #312]	; (8002534 <sampling+0x574>)
 80023fc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002400:	b29b      	uxth	r3, r3
 8002402:	4413      	add	r3, r2
 8002404:	b29a      	uxth	r2, r3
 8002406:	4b51      	ldr	r3, [pc, #324]	; (800254c <sampling+0x58c>)
 8002408:	809a      	strh	r2, [r3, #4]
		note_channel[3]=potValues[seq_loop[3]];  //loop 8 notes from pos and x times ,might disable normal adsr completely
 800240a:	4b4f      	ldr	r3, [pc, #316]	; (8002548 <sampling+0x588>)
 800240c:	78db      	ldrb	r3, [r3, #3]
 800240e:	461a      	mov	r2, r3
 8002410:	4b48      	ldr	r3, [pc, #288]	; (8002534 <sampling+0x574>)
 8002412:	5c9b      	ldrb	r3, [r3, r2]
 8002414:	b29a      	uxth	r2, r3
 8002416:	4b4d      	ldr	r3, [pc, #308]	; (800254c <sampling+0x58c>)
 8002418:	80da      	strh	r2, [r3, #6]
	if (note_channel[3]) note_channel[3]=note_channel[3]+potValues[73]; // stay at zero for off
 800241a:	4b4c      	ldr	r3, [pc, #304]	; (800254c <sampling+0x58c>)
 800241c:	88db      	ldrh	r3, [r3, #6]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d009      	beq.n	8002436 <sampling+0x476>
 8002422:	4b4a      	ldr	r3, [pc, #296]	; (800254c <sampling+0x58c>)
 8002424:	88da      	ldrh	r2, [r3, #6]
 8002426:	4b43      	ldr	r3, [pc, #268]	; (8002534 <sampling+0x574>)
 8002428:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800242c:	b29b      	uxth	r3, r3
 800242e:	4413      	add	r3, r2
 8002430:	b29a      	uxth	r2, r3
 8002432:	4b46      	ldr	r3, [pc, #280]	; (800254c <sampling+0x58c>)
 8002434:	80da      	strh	r2, [r3, #6]
	//note_channel[3]=(note_channel[3]-4)+(lfo_out[2]>>11);
	
	if (((seq_pos&7)==0) && (adsr_toggle[6]==2))		{adsr_retrigger[6]=1; } else adsr_retrigger[6]=0; // nothing
 8002436:	4b3e      	ldr	r3, [pc, #248]	; (8002530 <sampling+0x570>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	2b00      	cmp	r3, #0
 8002440:	d107      	bne.n	8002452 <sampling+0x492>
 8002442:	4b43      	ldr	r3, [pc, #268]	; (8002550 <sampling+0x590>)
 8002444:	799b      	ldrb	r3, [r3, #6]
 8002446:	2b02      	cmp	r3, #2
 8002448:	d103      	bne.n	8002452 <sampling+0x492>
 800244a:	4b42      	ldr	r3, [pc, #264]	; (8002554 <sampling+0x594>)
 800244c:	2201      	movs	r2, #1
 800244e:	819a      	strh	r2, [r3, #12]
 8002450:	e002      	b.n	8002458 <sampling+0x498>
 8002452:	4b40      	ldr	r3, [pc, #256]	; (8002554 <sampling+0x594>)
 8002454:	2200      	movs	r2, #0
 8002456:	819a      	strh	r2, [r3, #12]


	note_channel[5]=potValues[80+(seq_pos&15)];  // sample
 8002458:	4b35      	ldr	r3, [pc, #212]	; (8002530 <sampling+0x570>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	f003 030f 	and.w	r3, r3, #15
 8002460:	3350      	adds	r3, #80	; 0x50
 8002462:	4a34      	ldr	r2, [pc, #208]	; (8002534 <sampling+0x574>)
 8002464:	5cd3      	ldrb	r3, [r2, r3]
 8002466:	b29a      	uxth	r2, r3
 8002468:	4b38      	ldr	r3, [pc, #224]	; (800254c <sampling+0x58c>)
 800246a:	815a      	strh	r2, [r3, #10]


	if ((note_channel[5]) && (adsr_toggle[5]==2)) {note_holdB=note_channel[5]; one_shot=0;}  // grab note when on ,one shot also
 800246c:	4b37      	ldr	r3, [pc, #220]	; (800254c <sampling+0x58c>)
 800246e:	895b      	ldrh	r3, [r3, #10]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00b      	beq.n	800248c <sampling+0x4cc>
 8002474:	4b36      	ldr	r3, [pc, #216]	; (8002550 <sampling+0x590>)
 8002476:	795b      	ldrb	r3, [r3, #5]
 8002478:	2b02      	cmp	r3, #2
 800247a:	d107      	bne.n	800248c <sampling+0x4cc>
 800247c:	4b33      	ldr	r3, [pc, #204]	; (800254c <sampling+0x58c>)
 800247e:	895b      	ldrh	r3, [r3, #10]
 8002480:	b2da      	uxtb	r2, r3
 8002482:	4b35      	ldr	r3, [pc, #212]	; (8002558 <sampling+0x598>)
 8002484:	701a      	strb	r2, [r3, #0]
 8002486:	4b35      	ldr	r3, [pc, #212]	; (800255c <sampling+0x59c>)
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]

	
	note_holdB=potValues[80+seq_loop[2]]+(potValues[74]);  // 
 800248c:	4b2e      	ldr	r3, [pc, #184]	; (8002548 <sampling+0x588>)
 800248e:	789b      	ldrb	r3, [r3, #2]
 8002490:	3350      	adds	r3, #80	; 0x50
 8002492:	4a28      	ldr	r2, [pc, #160]	; (8002534 <sampling+0x574>)
 8002494:	5cd2      	ldrb	r2, [r2, r3]
 8002496:	4b27      	ldr	r3, [pc, #156]	; (8002534 <sampling+0x574>)
 8002498:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800249c:	4413      	add	r3, r2
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	4b2d      	ldr	r3, [pc, #180]	; (8002558 <sampling+0x598>)
 80024a2:	701a      	strb	r2, [r3, #0]
	
	note_holdB=(note_holdB-4)+(lfo_out[2]>>11);
 80024a4:	4b2e      	ldr	r3, [pc, #184]	; (8002560 <sampling+0x5a0>)
 80024a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80024aa:	12db      	asrs	r3, r3, #11
 80024ac:	b21b      	sxth	r3, r3
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	4b29      	ldr	r3, [pc, #164]	; (8002558 <sampling+0x598>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	4413      	add	r3, r2
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	3b04      	subs	r3, #4
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	4b26      	ldr	r3, [pc, #152]	; (8002558 <sampling+0x598>)
 80024be:	701a      	strb	r2, [r3, #0]
	note_holdB=MajorNote[note_holdB];
 80024c0:	4b25      	ldr	r3, [pc, #148]	; (8002558 <sampling+0x598>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	461a      	mov	r2, r3
 80024c6:	4b27      	ldr	r3, [pc, #156]	; (8002564 <sampling+0x5a4>)
 80024c8:	5c9a      	ldrb	r2, [r3, r2]
 80024ca:	4b23      	ldr	r3, [pc, #140]	; (8002558 <sampling+0x598>)
 80024cc:	701a      	strb	r2, [r3, #0]

	sine_adder=sine_lut[note_holdB];	//sets freq ,1.0594  * 16536 =17518  ,
 80024ce:	4b22      	ldr	r3, [pc, #136]	; (8002558 <sampling+0x598>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	4b24      	ldr	r3, [pc, #144]	; (8002568 <sampling+0x5a8>)
 80024d6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80024da:	4b24      	ldr	r3, [pc, #144]	; (800256c <sampling+0x5ac>)
 80024dc:	801a      	strh	r2, [r3, #0]
	sine_adder= (sine_adder*1200)>>10;  // modify different sample size , just need single cycle length and thats it
 80024de:	4b23      	ldr	r3, [pc, #140]	; (800256c <sampling+0x5ac>)
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80024e8:	fb02 f303 	mul.w	r3, r2, r3
 80024ec:	129b      	asrs	r3, r3, #10
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	4b1e      	ldr	r3, [pc, #120]	; (800256c <sampling+0x5ac>)
 80024f2:	801a      	strh	r2, [r3, #0]
		mask_result =0;
 80024f4:	4b1e      	ldr	r3, [pc, #120]	; (8002570 <sampling+0x5b0>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	801a      	strh	r2, [r3, #0]


		sample_Accu[0]=0; // reset to 0 mani sample hold
 80024fa:	4b1e      	ldr	r3, [pc, #120]	; (8002574 <sampling+0x5b4>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
		sample_Accu[1]=0; // reset to 0 mani sample hold
 8002500:	4b1c      	ldr	r3, [pc, #112]	; (8002574 <sampling+0x5b4>)
 8002502:	2200      	movs	r2, #0
 8002504:	605a      	str	r2, [r3, #4]
		sample_Accu[2]=0; // reset to 0 mani sample hold
 8002506:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <sampling+0x5b4>)
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
		sample_Accu[3]=0; // reset to 0 mani sample hold
 800250c:	4b19      	ldr	r3, [pc, #100]	; (8002574 <sampling+0x5b4>)
 800250e:	2200      	movs	r2, #0
 8002510:	60da      	str	r2, [r3, #12]
		sample_Accu[4]=0; // reset to 0 mani sample hold
 8002512:	4b18      	ldr	r3, [pc, #96]	; (8002574 <sampling+0x5b4>)
 8002514:	2200      	movs	r2, #0
 8002516:	611a      	str	r2, [r3, #16]
		sample_Accu[5]=0; // reset to 0 mani sample hold
 8002518:	4b16      	ldr	r3, [pc, #88]	; (8002574 <sampling+0x5b4>)
 800251a:	2200      	movs	r2, #0
 800251c:	615a      	str	r2, [r3, #20]
	for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 800251e:	2300      	movs	r3, #0
 8002520:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002524:	e04b      	b.n	80025be <sampling+0x5fe>
 8002526:	bf00      	nop
 8002528:	20000a58 	.word	0x20000a58
 800252c:	20000a56 	.word	0x20000a56
 8002530:	20000a30 	.word	0x20000a30
 8002534:	200007fc 	.word	0x200007fc
 8002538:	200008fc 	.word	0x200008fc
 800253c:	20001316 	.word	0x20001316
 8002540:	200012c2 	.word	0x200012c2
 8002544:	200001a8 	.word	0x200001a8
 8002548:	20001334 	.word	0x20001334
 800254c:	20001264 	.word	0x20001264
 8002550:	200012c4 	.word	0x200012c4
 8002554:	200012ac 	.word	0x200012ac
 8002558:	200012d0 	.word	0x200012d0
 800255c:	20001308 	.word	0x20001308
 8002560:	200013b0 	.word	0x200013b0
 8002564:	080075e8 	.word	0x080075e8
 8002568:	20000144 	.word	0x20000144
 800256c:	20000a32 	.word	0x20000a32
 8002570:	200012a2 	.word	0x200012a2
 8002574:	20000a38 	.word	0x20000a38

		if (note_channel[mask_i]) {tune_Accu=sample_Noteadd[MajorNote[note_channel[mask_i]]];   note_tuned[mask_i]=(tune_Accu);}
 8002578:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800257c:	4a6d      	ldr	r2, [pc, #436]	; (8002734 <sampling+0x774>)
 800257e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d016      	beq.n	80025b4 <sampling+0x5f4>
 8002586:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800258a:	4a6a      	ldr	r2, [pc, #424]	; (8002734 <sampling+0x774>)
 800258c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002590:	461a      	mov	r2, r3
 8002592:	4b69      	ldr	r3, [pc, #420]	; (8002738 <sampling+0x778>)
 8002594:	5c9b      	ldrb	r3, [r3, r2]
 8002596:	461a      	mov	r2, r3
 8002598:	4b68      	ldr	r3, [pc, #416]	; (800273c <sampling+0x77c>)
 800259a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800259e:	461a      	mov	r2, r3
 80025a0:	4b67      	ldr	r3, [pc, #412]	; (8002740 <sampling+0x780>)
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	4b66      	ldr	r3, [pc, #408]	; (8002740 <sampling+0x780>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80025ac:	b291      	uxth	r1, r2
 80025ae:	4a65      	ldr	r2, [pc, #404]	; (8002744 <sampling+0x784>)
 80025b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 80025b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80025b8:	3301      	adds	r3, #1
 80025ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80025be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d9d8      	bls.n	8002578 <sampling+0x5b8>

  // calc freq 1/isr or 1/16 per note ,need for pitch bend and so on , change depending on decay

	// every step   1,110,928   >>20  ,per note
// New oscillators , sync, trigger input , waveshape ,zero cross
		sample_accus[0] = sample_accus[0] + note_tuned[0]; //careful with signed bit shift,better compare
 80025c6:	4b60      	ldr	r3, [pc, #384]	; (8002748 <sampling+0x788>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a5e      	ldr	r2, [pc, #376]	; (8002744 <sampling+0x784>)
 80025cc:	8812      	ldrh	r2, [r2, #0]
 80025ce:	4413      	add	r3, r2
 80025d0:	4a5d      	ldr	r2, [pc, #372]	; (8002748 <sampling+0x788>)
 80025d2:	6013      	str	r3, [r2, #0]

		if (sample_accus[0]>524287) sample_accus[0] =-sample_accus[0] ; // faster >  than &  ,strange
 80025d4:	4b5c      	ldr	r3, [pc, #368]	; (8002748 <sampling+0x788>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025dc:	db04      	blt.n	80025e8 <sampling+0x628>
 80025de:	4b5a      	ldr	r3, [pc, #360]	; (8002748 <sampling+0x788>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	425b      	negs	r3, r3
 80025e4:	4a58      	ldr	r2, [pc, #352]	; (8002748 <sampling+0x788>)
 80025e6:	6013      	str	r3, [r2, #0]



		sample_accus[1] = sample_accus[1] + note_tuned[1];  // normal adder full volume
 80025e8:	4b57      	ldr	r3, [pc, #348]	; (8002748 <sampling+0x788>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	4a55      	ldr	r2, [pc, #340]	; (8002744 <sampling+0x784>)
 80025ee:	8852      	ldrh	r2, [r2, #2]
 80025f0:	4413      	add	r3, r2
 80025f2:	4a55      	ldr	r2, [pc, #340]	; (8002748 <sampling+0x788>)
 80025f4:	6053      	str	r3, [r2, #4]
			//	if (!(note_channel[0]))   sample_accus[1] =0;  // turn off with vel now , maybe use mask
				if (sample_accus[1]>524287) sample_accus[1] =-sample_accus[1] ; // faster >  than &  ,strange
 80025f6:	4b54      	ldr	r3, [pc, #336]	; (8002748 <sampling+0x788>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025fe:	db04      	blt.n	800260a <sampling+0x64a>
 8002600:	4b51      	ldr	r3, [pc, #324]	; (8002748 <sampling+0x788>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	425b      	negs	r3, r3
 8002606:	4a50      	ldr	r2, [pc, #320]	; (8002748 <sampling+0x788>)
 8002608:	6053      	str	r3, [r2, #4]

				sample_accus[2] = sample_accus[2] + note_tuned[2];
 800260a:	4b4f      	ldr	r3, [pc, #316]	; (8002748 <sampling+0x788>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	4a4d      	ldr	r2, [pc, #308]	; (8002744 <sampling+0x784>)
 8002610:	8892      	ldrh	r2, [r2, #4]
 8002612:	4413      	add	r3, r2
 8002614:	4a4c      	ldr	r2, [pc, #304]	; (8002748 <sampling+0x788>)
 8002616:	6093      	str	r3, [r2, #8]
				//		if (!(note_channel[0]))   sample_accus[2] =0;  // turn off with vel now , maybe use mask
						if (sample_accus[2]>524287) sample_accus[2] =-sample_accus[2] ; // faster >  than &  ,strange
 8002618:	4b4b      	ldr	r3, [pc, #300]	; (8002748 <sampling+0x788>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002620:	db04      	blt.n	800262c <sampling+0x66c>
 8002622:	4b49      	ldr	r3, [pc, #292]	; (8002748 <sampling+0x788>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	425b      	negs	r3, r3
 8002628:	4a47      	ldr	r2, [pc, #284]	; (8002748 <sampling+0x788>)
 800262a:	6093      	str	r3, [r2, #8]

						sample_accus[3] = sample_accus[3] + note_tuned[3]; // bouncing somewhere
 800262c:	4b46      	ldr	r3, [pc, #280]	; (8002748 <sampling+0x788>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4a44      	ldr	r2, [pc, #272]	; (8002744 <sampling+0x784>)
 8002632:	88d2      	ldrh	r2, [r2, #6]
 8002634:	4413      	add	r3, r2
 8002636:	4a44      	ldr	r2, [pc, #272]	; (8002748 <sampling+0x788>)
 8002638:	60d3      	str	r3, [r2, #12]
						//sample_accus[3] = sample_accus[3] +4000;
						//	if (!(note_channel[0]))   sample_accus[3] =0;  // turn off with vel now , maybe use mask
								if (sample_accus[3]>524287) sample_accus[3] =-sample_accus[3] ; // faster >  than &  ,strange
 800263a:	4b43      	ldr	r3, [pc, #268]	; (8002748 <sampling+0x788>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002642:	db04      	blt.n	800264e <sampling+0x68e>
 8002644:	4b40      	ldr	r3, [pc, #256]	; (8002748 <sampling+0x788>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	425b      	negs	r3, r3
 800264a:	4a3f      	ldr	r2, [pc, #252]	; (8002748 <sampling+0x788>)
 800264c:	60d3      	str	r3, [r2, #12]

								sample_accus[4] = sample_accus[4] + note_tuned[4];
 800264e:	4b3e      	ldr	r3, [pc, #248]	; (8002748 <sampling+0x788>)
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	4a3c      	ldr	r2, [pc, #240]	; (8002744 <sampling+0x784>)
 8002654:	8912      	ldrh	r2, [r2, #8]
 8002656:	4413      	add	r3, r2
 8002658:	4a3b      	ldr	r2, [pc, #236]	; (8002748 <sampling+0x788>)
 800265a:	6113      	str	r3, [r2, #16]
									//	if (!(note_channel[4]))   sample_accus[4] =0;  // turn off with vel now , maybe use mask
										if (sample_accus[4]>524287) sample_accus[4] =-sample_accus[4] ; // faster >  than &  ,strange
 800265c:	4b3a      	ldr	r3, [pc, #232]	; (8002748 <sampling+0x788>)
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002664:	db04      	blt.n	8002670 <sampling+0x6b0>
 8002666:	4b38      	ldr	r3, [pc, #224]	; (8002748 <sampling+0x788>)
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	425b      	negs	r3, r3
 800266c:	4a36      	ldr	r2, [pc, #216]	; (8002748 <sampling+0x788>)
 800266e:	6113      	str	r3, [r2, #16]

										sample_Accu[2] = 0;sample_Accu[0] =0;sample_Accu[3] =0; //all zeroed
 8002670:	4b36      	ldr	r3, [pc, #216]	; (800274c <sampling+0x78c>)
 8002672:	2200      	movs	r2, #0
 8002674:	609a      	str	r2, [r3, #8]
 8002676:	4b35      	ldr	r3, [pc, #212]	; (800274c <sampling+0x78c>)
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	4b33      	ldr	r3, [pc, #204]	; (800274c <sampling+0x78c>)
 800267e:	2200      	movs	r2, #0
 8002680:	60da      	str	r2, [r3, #12]
										//if (sample_accus[2]<0) sample_Accu[2]=+sample_accus[2]; else sample_Accu[2]=sample_accus[2]; // convert to triangle ?
										sample_Accu[0]=sample_accus[2]>>7; // needs cut a bit
 8002682:	4b31      	ldr	r3, [pc, #196]	; (8002748 <sampling+0x788>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	11db      	asrs	r3, r3, #7
 8002688:	4a30      	ldr	r2, [pc, #192]	; (800274c <sampling+0x78c>)
 800268a:	6013      	str	r3, [r2, #0]
							
								sample_Accu[0] = ((sine_out+sample_Accu[0])*cross_fade[1]);
 800268c:	4b2f      	ldr	r3, [pc, #188]	; (800274c <sampling+0x78c>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4b2f      	ldr	r3, [pc, #188]	; (8002750 <sampling+0x790>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4413      	add	r3, r2
 8002696:	7d7a      	ldrb	r2, [r7, #21]
 8002698:	fb02 f303 	mul.w	r3, r2, r3
 800269c:	4a2b      	ldr	r2, [pc, #172]	; (800274c <sampling+0x78c>)
 800269e:	6013      	str	r3, [r2, #0]
								
										//if (sample_accus[3]<0) sample_Accu[3]=+sample_accus[3]; else sample_Accu[3]=sample_accus[3]; // convert to triangle
										sample_Accu[3]=sample_accus[3];
 80026a0:	4b29      	ldr	r3, [pc, #164]	; (8002748 <sampling+0x788>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	4a29      	ldr	r2, [pc, #164]	; (800274c <sampling+0x78c>)
 80026a6:	60d3      	str	r3, [r2, #12]
										sample_Accu[2] = (sample_Accu[3]*cross_fade[2]);			//27b, 2 out f2  might do a crossfade here using pot 3
 80026a8:	4b28      	ldr	r3, [pc, #160]	; (800274c <sampling+0x78c>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	7dba      	ldrb	r2, [r7, #22]
 80026ae:	fb02 f303 	mul.w	r3, r2, r3
 80026b2:	4a26      	ldr	r2, [pc, #152]	; (800274c <sampling+0x78c>)
 80026b4:	6093      	str	r3, [r2, #8]
										//	sample_Accu[5] = sample_Accu[4]+ (sample_accus[4]*4);			// drum and envelope

		//	sample_Accu=sample_Accu-(1<<21);


	if (sine_counterB==0) 	sine_temp2=sine_adder;
 80026b6:	4b27      	ldr	r3, [pc, #156]	; (8002754 <sampling+0x794>)
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d103      	bne.n	80026c6 <sampling+0x706>
 80026be:	4b26      	ldr	r3, [pc, #152]	; (8002758 <sampling+0x798>)
 80026c0:	881a      	ldrh	r2, [r3, #0]
 80026c2:	4b26      	ldr	r3, [pc, #152]	; (800275c <sampling+0x79c>)
 80026c4:	801a      	strh	r2, [r3, #0]

		sine_counterB=sine_counterB+sine_temp2 ;  // sine up counter per cycle , however sine adder nees to wait
 80026c6:	4b23      	ldr	r3, [pc, #140]	; (8002754 <sampling+0x794>)
 80026c8:	881a      	ldrh	r2, [r3, #0]
 80026ca:	4b24      	ldr	r3, [pc, #144]	; (800275c <sampling+0x79c>)
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	4413      	add	r3, r2
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	4b20      	ldr	r3, [pc, #128]	; (8002754 <sampling+0x794>)
 80026d4:	801a      	strh	r2, [r3, #0]
		if (sine_counterB>>7) sine_zero=0; else sine_zero=1;
 80026d6:	4b1f      	ldr	r3, [pc, #124]	; (8002754 <sampling+0x794>)
 80026d8:	881b      	ldrh	r3, [r3, #0]
 80026da:	09db      	lsrs	r3, r3, #7
 80026dc:	b29b      	uxth	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d002      	beq.n	80026e8 <sampling+0x728>
 80026e2:	2300      	movs	r3, #0
 80026e4:	853b      	strh	r3, [r7, #40]	; 0x28
 80026e6:	e001      	b.n	80026ec <sampling+0x72c>
 80026e8:	2301      	movs	r3, #1
 80026ea:	853b      	strh	r3, [r7, #40]	; 0x28

if (sine_counterB>(sine_length<<5)) sine_counterB=0; //fixed for now
 80026ec:	4b19      	ldr	r3, [pc, #100]	; (8002754 <sampling+0x794>)
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	4b1b      	ldr	r3, [pc, #108]	; (8002760 <sampling+0x7a0>)
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	015b      	lsls	r3, r3, #5
 80026f8:	429a      	cmp	r2, r3
 80026fa:	dd02      	ble.n	8002702 <sampling+0x742>
 80026fc:	4b15      	ldr	r3, [pc, #84]	; (8002754 <sampling+0x794>)
 80026fe:	2200      	movs	r2, #0
 8002700:	801a      	strh	r2, [r3, #0]
	sine_count(); // calc sine
 8002702:	f000 fad1 	bl	8002ca8 <sine_count>

// filter 1


int32_t feedback_out=filter_out[3];
 8002706:	4b17      	ldr	r3, [pc, #92]	; (8002764 <sampling+0x7a4>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	627b      	str	r3, [r7, #36]	; 0x24
//if (feedback_out>0xFFFF) feedback_out=0xFFFF; else if (feedback_out<-65535) feedback_out=-65535;  // limiter to 16 bits

sample_Accu[1]=sample_Accu[0];
 800270c:	4b0f      	ldr	r3, [pc, #60]	; (800274c <sampling+0x78c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a0e      	ldr	r2, [pc, #56]	; (800274c <sampling+0x78c>)
 8002712:	6053      	str	r3, [r2, #4]


		if (freq_point[0]>1) freq_point[0]=1; else if (freq_point[0]<0) freq_point[0]=0;// just in case
 8002714:	4b14      	ldr	r3, [pc, #80]	; (8002768 <sampling+0x7a8>)
 8002716:	edd3 7a00 	vldr	s15, [r3]
 800271a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800271e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002726:	dd21      	ble.n	800276c <sampling+0x7ac>
 8002728:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <sampling+0x7a8>)
 800272a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	e028      	b.n	8002784 <sampling+0x7c4>
 8002732:	bf00      	nop
 8002734:	20001264 	.word	0x20001264
 8002738:	080075e8 	.word	0x080075e8
 800273c:	08007604 	.word	0x08007604
 8002740:	20000a2c 	.word	0x20000a2c
 8002744:	20000a14 	.word	0x20000a14
 8002748:	200012f0 	.word	0x200012f0
 800274c:	20000a38 	.word	0x20000a38
 8002750:	20000a0c 	.word	0x20000a0c
 8002754:	20000a08 	.word	0x20000a08
 8002758:	20000a32 	.word	0x20000a32
 800275c:	20000a10 	.word	0x20000a10
 8002760:	20000142 	.word	0x20000142
 8002764:	200012d4 	.word	0x200012d4
 8002768:	2000138c 	.word	0x2000138c
 800276c:	4bb0      	ldr	r3, [pc, #704]	; (8002a30 <sampling+0xa70>)
 800276e:	edd3 7a00 	vldr	s15, [r3]
 8002772:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800277a:	d503      	bpl.n	8002784 <sampling+0x7c4>
 800277c:	4bac      	ldr	r3, [pc, #688]	; (8002a30 <sampling+0xa70>)
 800277e:	f04f 0200 	mov.w	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
		//freq_point[0]=0.50;
		freq_point[1]=1-freq_point[0];
 8002784:	4baa      	ldr	r3, [pc, #680]	; (8002a30 <sampling+0xa70>)
 8002786:	edd3 7a00 	vldr	s15, [r3]
 800278a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800278e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002792:	4ba7      	ldr	r3, [pc, #668]	; (8002a30 <sampling+0xa70>)
 8002794:	edc3 7a01 	vstr	s15, [r3, #4]
		//filter_accus[1]=sample_Accu[1];
		filter_accus[1]=sample_Accu[1]+((filter_hold[0])*0.5);
 8002798:	4ba6      	ldr	r3, [pc, #664]	; (8002a34 <sampling+0xa74>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	4618      	mov	r0, r3
 800279e:	f7fd ff97 	bl	80006d0 <__aeabi_i2d>
 80027a2:	4604      	mov	r4, r0
 80027a4:	460d      	mov	r5, r1
 80027a6:	4ba4      	ldr	r3, [pc, #656]	; (8002a38 <sampling+0xa78>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fd ffa2 	bl	80006f4 <__aeabi_f2d>
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	4ba1      	ldr	r3, [pc, #644]	; (8002a3c <sampling+0xa7c>)
 80027b6:	f7fd fd0f 	bl	80001d8 <__aeabi_dmul>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4620      	mov	r0, r4
 80027c0:	4629      	mov	r1, r5
 80027c2:	f7fd fe39 	bl	8000438 <__adddf3>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	4610      	mov	r0, r2
 80027cc:	4619      	mov	r1, r3
 80027ce:	f7fe f871 	bl	80008b4 <__aeabi_d2f>
 80027d2:	4603      	mov	r3, r0
 80027d4:	4a9a      	ldr	r2, [pc, #616]	; (8002a40 <sampling+0xa80>)
 80027d6:	6053      	str	r3, [r2, #4]

		filter_accus[2]=(filter_accus[1]*freq_point[0])+(filter_accus[2]*freq_point[1]);
 80027d8:	4b99      	ldr	r3, [pc, #612]	; (8002a40 <sampling+0xa80>)
 80027da:	ed93 7a01 	vldr	s14, [r3, #4]
 80027de:	4b94      	ldr	r3, [pc, #592]	; (8002a30 <sampling+0xa70>)
 80027e0:	edd3 7a00 	vldr	s15, [r3]
 80027e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027e8:	4b95      	ldr	r3, [pc, #596]	; (8002a40 <sampling+0xa80>)
 80027ea:	edd3 6a02 	vldr	s13, [r3, #8]
 80027ee:	4b90      	ldr	r3, [pc, #576]	; (8002a30 <sampling+0xa70>)
 80027f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80027f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027fc:	4b90      	ldr	r3, [pc, #576]	; (8002a40 <sampling+0xa80>)
 80027fe:	edc3 7a02 	vstr	s15, [r3, #8]
		filter_accus[3]=(filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]);
 8002802:	4b8f      	ldr	r3, [pc, #572]	; (8002a40 <sampling+0xa80>)
 8002804:	ed93 7a02 	vldr	s14, [r3, #8]
 8002808:	4b89      	ldr	r3, [pc, #548]	; (8002a30 <sampling+0xa70>)
 800280a:	edd3 7a00 	vldr	s15, [r3]
 800280e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002812:	4b8b      	ldr	r3, [pc, #556]	; (8002a40 <sampling+0xa80>)
 8002814:	edd3 6a03 	vldr	s13, [r3, #12]
 8002818:	4b85      	ldr	r3, [pc, #532]	; (8002a30 <sampling+0xa70>)
 800281a:	edd3 7a01 	vldr	s15, [r3, #4]
 800281e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002826:	4b86      	ldr	r3, [pc, #536]	; (8002a40 <sampling+0xa80>)
 8002828:	edc3 7a03 	vstr	s15, [r3, #12]
		filter_accus[4]=(filter_accus[3]*freq_point[0])+(filter_accus[4]*freq_point[1]);
 800282c:	4b84      	ldr	r3, [pc, #528]	; (8002a40 <sampling+0xa80>)
 800282e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002832:	4b7f      	ldr	r3, [pc, #508]	; (8002a30 <sampling+0xa70>)
 8002834:	edd3 7a00 	vldr	s15, [r3]
 8002838:	ee27 7a27 	vmul.f32	s14, s14, s15
 800283c:	4b80      	ldr	r3, [pc, #512]	; (8002a40 <sampling+0xa80>)
 800283e:	edd3 6a04 	vldr	s13, [r3, #16]
 8002842:	4b7b      	ldr	r3, [pc, #492]	; (8002a30 <sampling+0xa70>)
 8002844:	edd3 7a01 	vldr	s15, [r3, #4]
 8002848:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800284c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002850:	4b7b      	ldr	r3, [pc, #492]	; (8002a40 <sampling+0xa80>)
 8002852:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[5]=(filter_accus[4]*freq_point[0])+(filter_accus[5]*freq_point[1]);
 8002856:	4b7a      	ldr	r3, [pc, #488]	; (8002a40 <sampling+0xa80>)
 8002858:	ed93 7a04 	vldr	s14, [r3, #16]
 800285c:	4b74      	ldr	r3, [pc, #464]	; (8002a30 <sampling+0xa70>)
 800285e:	edd3 7a00 	vldr	s15, [r3]
 8002862:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002866:	4b76      	ldr	r3, [pc, #472]	; (8002a40 <sampling+0xa80>)
 8002868:	edd3 6a05 	vldr	s13, [r3, #20]
 800286c:	4b70      	ldr	r3, [pc, #448]	; (8002a30 <sampling+0xa70>)
 800286e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002872:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800287a:	4b71      	ldr	r3, [pc, #452]	; (8002a40 <sampling+0xa80>)
 800287c:	edc3 7a05 	vstr	s15, [r3, #20]
		filter_hold[0]=(filter_accus[5]+filter_accus[11])*0.5; //half sample , nice
 8002880:	4b6f      	ldr	r3, [pc, #444]	; (8002a40 <sampling+0xa80>)
 8002882:	ed93 7a05 	vldr	s14, [r3, #20]
 8002886:	4b6e      	ldr	r3, [pc, #440]	; (8002a40 <sampling+0xa80>)
 8002888:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800288c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002890:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002894:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002898:	4b67      	ldr	r3, [pc, #412]	; (8002a38 <sampling+0xa78>)
 800289a:	edc3 7a00 	vstr	s15, [r3]
		sample_Accu[0] =filter_accus[5]; // out
 800289e:	4b68      	ldr	r3, [pc, #416]	; (8002a40 <sampling+0xa80>)
 80028a0:	edd3 7a05 	vldr	s15, [r3, #20]
 80028a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028a8:	ee17 2a90 	vmov	r2, s15
 80028ac:	4b61      	ldr	r3, [pc, #388]	; (8002a34 <sampling+0xa74>)
 80028ae:	601a      	str	r2, [r3, #0]
		filter_accus[11]=filter_accus[5]; //write back new value
 80028b0:	4b63      	ldr	r3, [pc, #396]	; (8002a40 <sampling+0xa80>)
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	4a62      	ldr	r2, [pc, #392]	; (8002a40 <sampling+0xa80>)
 80028b6:	62d3      	str	r3, [r2, #44]	; 0x2c
		//sample_Accu[0] =sample_Accu[1];

		//filter 2
		sample_Accu[3]=(sample_Accu[2]>>5); // this one is louder than sine
 80028b8:	4b5e      	ldr	r3, [pc, #376]	; (8002a34 <sampling+0xa74>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	115b      	asrs	r3, r3, #5
 80028be:	4a5d      	ldr	r2, [pc, #372]	; (8002a34 <sampling+0xa74>)
 80028c0:	60d3      	str	r3, [r2, #12]


				if (freq_point[2]>1) freq_point[2]=1;
 80028c2:	4b5b      	ldr	r3, [pc, #364]	; (8002a30 <sampling+0xa70>)
 80028c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80028c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d4:	dd03      	ble.n	80028de <sampling+0x91e>
 80028d6:	4b56      	ldr	r3, [pc, #344]	; (8002a30 <sampling+0xa70>)
 80028d8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80028dc:	609a      	str	r2, [r3, #8]

				freq_point[3]=1-freq_point[2];
 80028de:	4b54      	ldr	r3, [pc, #336]	; (8002a30 <sampling+0xa70>)
 80028e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80028e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028ec:	4b50      	ldr	r3, [pc, #320]	; (8002a30 <sampling+0xa70>)
 80028ee:	edc3 7a03 	vstr	s15, [r3, #12]
				filter_accus[6]=sample_Accu[3];
 80028f2:	4b50      	ldr	r3, [pc, #320]	; (8002a34 <sampling+0xa74>)
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	ee07 3a90 	vmov	s15, r3
 80028fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028fe:	4b50      	ldr	r3, [pc, #320]	; (8002a40 <sampling+0xa80>)
 8002900:	edc3 7a06 	vstr	s15, [r3, #24]
					filter_accus[6]= filter_accus[6]*adsr_level[3]; // add adsr envelope
 8002904:	4b4e      	ldr	r3, [pc, #312]	; (8002a40 <sampling+0xa80>)
 8002906:	ed93 7a06 	vldr	s14, [r3, #24]
 800290a:	4b4e      	ldr	r3, [pc, #312]	; (8002a44 <sampling+0xa84>)
 800290c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002914:	4b4a      	ldr	r3, [pc, #296]	; (8002a40 <sampling+0xa80>)
 8002916:	edc3 7a06 	vstr	s15, [r3, #24]
				
				filter_accus[7]=(filter_accus[6]*freq_point[2])+(filter_accus[7]*freq_point[3]);
 800291a:	4b49      	ldr	r3, [pc, #292]	; (8002a40 <sampling+0xa80>)
 800291c:	ed93 7a06 	vldr	s14, [r3, #24]
 8002920:	4b43      	ldr	r3, [pc, #268]	; (8002a30 <sampling+0xa70>)
 8002922:	edd3 7a02 	vldr	s15, [r3, #8]
 8002926:	ee27 7a27 	vmul.f32	s14, s14, s15
 800292a:	4b45      	ldr	r3, [pc, #276]	; (8002a40 <sampling+0xa80>)
 800292c:	edd3 6a07 	vldr	s13, [r3, #28]
 8002930:	4b3f      	ldr	r3, [pc, #252]	; (8002a30 <sampling+0xa70>)
 8002932:	edd3 7a03 	vldr	s15, [r3, #12]
 8002936:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800293a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800293e:	4b40      	ldr	r3, [pc, #256]	; (8002a40 <sampling+0xa80>)
 8002940:	edc3 7a07 	vstr	s15, [r3, #28]
				filter_accus[8]=(filter_accus[7]*freq_point[2])+(filter_accus[8]*freq_point[3]);
 8002944:	4b3e      	ldr	r3, [pc, #248]	; (8002a40 <sampling+0xa80>)
 8002946:	ed93 7a07 	vldr	s14, [r3, #28]
 800294a:	4b39      	ldr	r3, [pc, #228]	; (8002a30 <sampling+0xa70>)
 800294c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002950:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002954:	4b3a      	ldr	r3, [pc, #232]	; (8002a40 <sampling+0xa80>)
 8002956:	edd3 6a08 	vldr	s13, [r3, #32]
 800295a:	4b35      	ldr	r3, [pc, #212]	; (8002a30 <sampling+0xa70>)
 800295c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002960:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002964:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002968:	4b35      	ldr	r3, [pc, #212]	; (8002a40 <sampling+0xa80>)
 800296a:	edc3 7a08 	vstr	s15, [r3, #32]
				filter_accus[9]=(filter_accus[8]*freq_point[2])+(filter_accus[9]*freq_point[3]);
 800296e:	4b34      	ldr	r3, [pc, #208]	; (8002a40 <sampling+0xa80>)
 8002970:	ed93 7a08 	vldr	s14, [r3, #32]
 8002974:	4b2e      	ldr	r3, [pc, #184]	; (8002a30 <sampling+0xa70>)
 8002976:	edd3 7a02 	vldr	s15, [r3, #8]
 800297a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800297e:	4b30      	ldr	r3, [pc, #192]	; (8002a40 <sampling+0xa80>)
 8002980:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002984:	4b2a      	ldr	r3, [pc, #168]	; (8002a30 <sampling+0xa70>)
 8002986:	edd3 7a03 	vldr	s15, [r3, #12]
 800298a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800298e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002992:	4b2b      	ldr	r3, [pc, #172]	; (8002a40 <sampling+0xa80>)
 8002994:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				filter_accus[10]=(filter_accus[9]*freq_point[2])+(filter_accus[10]*freq_point[3]);
 8002998:	4b29      	ldr	r3, [pc, #164]	; (8002a40 <sampling+0xa80>)
 800299a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800299e:	4b24      	ldr	r3, [pc, #144]	; (8002a30 <sampling+0xa70>)
 80029a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80029a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029a8:	4b25      	ldr	r3, [pc, #148]	; (8002a40 <sampling+0xa80>)
 80029aa:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80029ae:	4b20      	ldr	r3, [pc, #128]	; (8002a30 <sampling+0xa70>)
 80029b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80029b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029bc:	4b20      	ldr	r3, [pc, #128]	; (8002a40 <sampling+0xa80>)
 80029be:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				filter_hold[1]=(filter_accus[10]+filter_accus[12])*0.5; //half sample
 80029c2:	4b1f      	ldr	r3, [pc, #124]	; (8002a40 <sampling+0xa80>)
 80029c4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80029c8:	4b1d      	ldr	r3, [pc, #116]	; (8002a40 <sampling+0xa80>)
 80029ca:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80029ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80029d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029da:	4b17      	ldr	r3, [pc, #92]	; (8002a38 <sampling+0xa78>)
 80029dc:	edc3 7a01 	vstr	s15, [r3, #4]
				sample_Accu[2] =filter_accus[10]; //out
 80029e0:	4b17      	ldr	r3, [pc, #92]	; (8002a40 <sampling+0xa80>)
 80029e2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80029e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029ea:	ee17 2a90 	vmov	r2, s15
 80029ee:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <sampling+0xa74>)
 80029f0:	609a      	str	r2, [r3, #8]
				filter_accus[12]=filter_accus[10]; //write back new value
 80029f2:	4b13      	ldr	r3, [pc, #76]	; (8002a40 <sampling+0xa80>)
 80029f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f6:	4a12      	ldr	r2, [pc, #72]	; (8002a40 <sampling+0xa80>)
 80029f8:	6313      	str	r3, [r2, #48]	; 0x30
				

filter_Accu=0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	63bb      	str	r3, [r7, #56]	; 0x38
filter_Accu=(sample_Accu[0]+sample_Accu[2])>>8; //filter + drum out
 80029fe:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <sampling+0xa74>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <sampling+0xa74>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	4413      	add	r3, r2
 8002a08:	121b      	asrs	r3, r3, #8
 8002a0a:	63bb      	str	r3, [r7, #56]	; 0x38


 if (one_shot!=199)   one_shot++;  //play one attack then stop
 8002a0c:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <sampling+0xa88>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2bc7      	cmp	r3, #199	; 0xc7
 8002a12:	d005      	beq.n	8002a20 <sampling+0xa60>
 8002a14:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <sampling+0xa88>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <sampling+0xa88>)
 8002a1e:	701a      	strb	r2, [r3, #0]

 if (filter_Accu>0xFFFF) filter_Accu=0xFFFF; else if (filter_Accu<-65535) filter_Accu=-65535;  // limiter to 16 bits
 8002a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a26:	db11      	blt.n	8002a4c <sampling+0xa8c>
 8002a28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a2e:	e013      	b.n	8002a58 <sampling+0xa98>
 8002a30:	2000138c 	.word	0x2000138c
 8002a34:	20000a38 	.word	0x20000a38
 8002a38:	20001378 	.word	0x20001378
 8002a3c:	3fe00000 	.word	0x3fe00000
 8002a40:	2000133c 	.word	0x2000133c
 8002a44:	20001920 	.word	0x20001920
 8002a48:	20001308 	.word	0x20001308
 8002a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a4e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a52:	dc01      	bgt.n	8002a58 <sampling+0xa98>
 8002a54:	4b0f      	ldr	r3, [pc, #60]	; (8002a94 <sampling+0xad4>)
 8002a56:	63bb      	str	r3, [r7, #56]	; 0x38


 play_sample[i_total]=(filter_Accu>>6)+1023;   // final output disable for now
 8002a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5a:	119b      	asrs	r3, r3, #6
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002a60:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8002a64:	b291      	uxth	r1, r2
 8002a66:	4a0c      	ldr	r2, [pc, #48]	; (8002a98 <sampling+0xad8>)
 8002a68:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <sampling+0xadc>)
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	3301      	adds	r3, #1
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <sampling+0xadc>)
 8002a76:	801a      	strh	r2, [r3, #0]
 8002a78:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <sampling+0xadc>)
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a80:	f4ff ac2e 	bcc.w	80022e0 <sampling+0x320>
	//play_sample[i_total]=(sample_Accu[4])+1023;

}
 //make sure it's finished
bank_write=0;
 8002a84:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <sampling+0xae0>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	801a      	strh	r2, [r3, #0]
}
 8002a8a:	bf00      	nop
 8002a8c:	3748      	adds	r7, #72	; 0x48
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bdb0      	pop	{r4, r5, r7, pc}
 8002a92:	bf00      	nop
 8002a94:	ffff0001 	.word	0xffff0001
 8002a98:	20000a5c 	.word	0x20000a5c
 8002a9c:	20000a58 	.word	0x20000a58
 8002aa0:	200001ae 	.word	0x200001ae
 8002aa4:	00000000 	.word	0x00000000

08002aa8 <adsr>:
}

potSource[28]=lfo_output[0]>>6;

}
void adsr(void){
 8002aa8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002aac:	b086      	sub	sp, #24
 8002aae:	af00      	add	r7, sp, #0
	float note_attack;  //attack length 50/50 , just a default shape that is maybe interpolated , store values for both and position, time in isr 
	float note_sustain; //sustaing lenght and height 80/20 / 0-160 0-1-sustain-0  160 is 160 steps(10 notes) 80+80  0+(1/(attack/2))*(attack/2) 1-(1/(attack/2))*(attack/2)+sustain level 1/160*sustain at (1/sustain)*time
	//uint16_t adsr_countup[11];  //holds isr count on notes , 
	//float adsr_level[11]; //float for vol envelope  ,ps 20 21
	uint8_t ad;//counter    0-160-160-160 maybe change 1/10 dunno 
	float as_attack=potSource[20]*0.1; // for now
 8002ab0:	4b79      	ldr	r3, [pc, #484]	; (8002c98 <adsr+0x1f0>)
 8002ab2:	7d1b      	ldrb	r3, [r3, #20]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fd fe0b 	bl	80006d0 <__aeabi_i2d>
 8002aba:	a371      	add	r3, pc, #452	; (adr r3, 8002c80 <adsr+0x1d8>)
 8002abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac0:	f7fd fb8a 	bl	80001d8 <__aeabi_dmul>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4619      	mov	r1, r3
 8002acc:	f7fd fef2 	bl	80008b4 <__aeabi_d2f>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	60fb      	str	r3, [r7, #12]
	float as_sustain=potSource[21];
 8002ad4:	4b70      	ldr	r3, [pc, #448]	; (8002c98 <adsr+0x1f0>)
 8002ad6:	7d5b      	ldrb	r3, [r3, #21]
 8002ad8:	ee07 3a90 	vmov	s15, r3
 8002adc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ae0:	edc7 7a02 	vstr	s15, [r7, #8]
	uint16_t as_temp; 
	
	
	
for (ad=0;ad<10;ad++){							// envelope generator ,needs to be faster 
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	74fb      	strb	r3, [r7, #19]
 8002ae8:	e0bd      	b.n	8002c66 <adsr+0x1be>
	as_temp =adsr_countup[ad]; //grab counter
 8002aea:	7cfb      	ldrb	r3, [r7, #19]
 8002aec:	4a6b      	ldr	r2, [pc, #428]	; (8002c9c <adsr+0x1f4>)
 8002aee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002af2:	823b      	strh	r3, [r7, #16]
	
	if (note_channel[ad]) {as_temp=1;note_channel[ad]=0; } // reset on note & 1 isr length ,retrigger also clear not for later
 8002af4:	7cfb      	ldrb	r3, [r7, #19]
 8002af6:	4a6a      	ldr	r2, [pc, #424]	; (8002ca0 <adsr+0x1f8>)
 8002af8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d006      	beq.n	8002b0e <adsr+0x66>
 8002b00:	2301      	movs	r3, #1
 8002b02:	823b      	strh	r3, [r7, #16]
 8002b04:	7cfb      	ldrb	r3, [r7, #19]
 8002b06:	4a66      	ldr	r2, [pc, #408]	; (8002ca0 <adsr+0x1f8>)
 8002b08:	2100      	movs	r1, #0
 8002b0a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	if (as_temp) {
 8002b0e:	8a3b      	ldrh	r3, [r7, #16]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 80a5 	beq.w	8002c60 <adsr+0x1b8>
	if (as_temp<(as_attack))    note_attack=(1/as_attack)*as_temp; //count up attack ok 
 8002b16:	8a3b      	ldrh	r3, [r7, #16]
 8002b18:	ee07 3a90 	vmov	s15, r3
 8002b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b20:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b2c:	dd0e      	ble.n	8002b4c <adsr+0xa4>
 8002b2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b32:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b3a:	8a3b      	ldrh	r3, [r7, #16]
 8002b3c:	ee07 3a90 	vmov	s15, r3
 8002b40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b48:	edc7 7a05 	vstr	s15, [r7, #20]
	if (as_temp>=(as_attack))    note_attack=1-((1/as_attack)*(as_temp-as_attack)); //count down attack
 8002b4c:	8a3b      	ldrh	r3, [r7, #16]
 8002b4e:	ee07 3a90 	vmov	s15, r3
 8002b52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b56:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b62:	d816      	bhi.n	8002b92 <adsr+0xea>
 8002b64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b68:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b70:	8a3b      	ldrh	r3, [r7, #16]
 8002b72:	ee07 3a90 	vmov	s15, r3
 8002b76:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002b7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b7e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b8e:	edc7 7a05 	vstr	s15, [r7, #20]
	if(note_attack<0) note_attack=0; // stop at 0
 8002b92:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9e:	d502      	bpl.n	8002ba6 <adsr+0xfe>
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
	note_sustain=as_sustain*0.00625;
 8002ba6:	68b8      	ldr	r0, [r7, #8]
 8002ba8:	f7fd fda4 	bl	80006f4 <__aeabi_f2d>
 8002bac:	a336      	add	r3, pc, #216	; (adr r3, 8002c88 <adsr+0x1e0>)
 8002bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb2:	f7fd fb11 	bl	80001d8 <__aeabi_dmul>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4610      	mov	r0, r2
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	f7fd fe79 	bl	80008b4 <__aeabi_d2f>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	607b      	str	r3, [r7, #4]
	if ((as_temp>=(as_attack)) && (note_sustain>note_attack)) note_attack=note_sustain; // change over to sustain level
 8002bc6:	8a3b      	ldrh	r3, [r7, #16]
 8002bc8:	ee07 3a90 	vmov	s15, r3
 8002bcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bd0:	ed97 7a03 	vldr	s14, [r7, #12]
 8002bd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bdc:	d80a      	bhi.n	8002bf4 <adsr+0x14c>
 8002bde:	ed97 7a01 	vldr	s14, [r7, #4]
 8002be2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002be6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bee:	dd01      	ble.n	8002bf4 <adsr+0x14c>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	617b      	str	r3, [r7, #20]
	
	if (as_temp>=(as_attack+(as_sustain*0.2))) {note_attack= 0;  as_temp=0; }else as_temp++; // no roll off for now just straight to 0 , shortened , also stops 
 8002bf4:	8a3b      	ldrh	r3, [r7, #16]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fd fd6a 	bl	80006d0 <__aeabi_i2d>
 8002bfc:	4604      	mov	r4, r0
 8002bfe:	460d      	mov	r5, r1
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f7fd fd77 	bl	80006f4 <__aeabi_f2d>
 8002c06:	4680      	mov	r8, r0
 8002c08:	4689      	mov	r9, r1
 8002c0a:	68b8      	ldr	r0, [r7, #8]
 8002c0c:	f7fd fd72 	bl	80006f4 <__aeabi_f2d>
 8002c10:	a31f      	add	r3, pc, #124	; (adr r3, 8002c90 <adsr+0x1e8>)
 8002c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c16:	f7fd fadf 	bl	80001d8 <__aeabi_dmul>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4640      	mov	r0, r8
 8002c20:	4649      	mov	r1, r9
 8002c22:	f7fd fc09 	bl	8000438 <__adddf3>
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	4620      	mov	r0, r4
 8002c2c:	4629      	mov	r1, r5
 8002c2e:	f7fd fe2d 	bl	800088c <__aeabi_dcmpge>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <adsr+0x19c>
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	823b      	strh	r3, [r7, #16]
 8002c42:	e002      	b.n	8002c4a <adsr+0x1a2>
 8002c44:	8a3b      	ldrh	r3, [r7, #16]
 8002c46:	3301      	adds	r3, #1
 8002c48:	823b      	strh	r3, [r7, #16]
	
	adsr_level[ad]=note_attack;
 8002c4a:	7cfb      	ldrb	r3, [r7, #19]
 8002c4c:	4a15      	ldr	r2, [pc, #84]	; (8002ca4 <adsr+0x1fc>)
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	601a      	str	r2, [r3, #0]
	
	adsr_countup[ad]=as_temp; //write back new value
 8002c56:	7cfb      	ldrb	r3, [r7, #19]
 8002c58:	4910      	ldr	r1, [pc, #64]	; (8002c9c <adsr+0x1f4>)
 8002c5a:	8a3a      	ldrh	r2, [r7, #16]
 8002c5c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
for (ad=0;ad<10;ad++){							// envelope generator ,needs to be faster 
 8002c60:	7cfb      	ldrb	r3, [r7, #19]
 8002c62:	3301      	adds	r3, #1
 8002c64:	74fb      	strb	r3, [r7, #19]
 8002c66:	7cfb      	ldrb	r3, [r7, #19]
 8002c68:	2b09      	cmp	r3, #9
 8002c6a:	f67f af3e 	bls.w	8002aea <adsr+0x42>
	} 

}	
}
 8002c6e:	bf00      	nop
 8002c70:	bf00      	nop
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c7a:	bf00      	nop
 8002c7c:	f3af 8000 	nop.w
 8002c80:	9999999a 	.word	0x9999999a
 8002c84:	3fb99999 	.word	0x3fb99999
 8002c88:	9999999a 	.word	0x9999999a
 8002c8c:	3f799999 	.word	0x3f799999
 8002c90:	9999999a 	.word	0x9999999a
 8002c94:	3fc99999 	.word	0x3fc99999
 8002c98:	200008fc 	.word	0x200008fc
 8002c9c:	20001908 	.word	0x20001908
 8002ca0:	20001264 	.word	0x20001264
 8002ca4:	20001920 	.word	0x20001920

08002ca8 <sine_count>:
mask_result=mask_tempB &1;


}

void sine_count(void) {         // sine_out is the output 9  bit  , works
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
int32_t sine_tempA;
int32_t sine_tempB;
int8_t sine_frac;


sine_counter=(sine_counterB>>5);  // up countr controlled by counter
 8002cae:	4b2f      	ldr	r3, [pc, #188]	; (8002d6c <sine_count+0xc4>)
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	095b      	lsrs	r3, r3, #5
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	4b2e      	ldr	r3, [pc, #184]	; (8002d70 <sine_count+0xc8>)
 8002cb8:	801a      	strh	r2, [r3, #0]
sine_frac=sine_counterB & 31;  // grab last 5 bits, actual position for linear interpol,fractional
 8002cba:	4b2c      	ldr	r3, [pc, #176]	; (8002d6c <sine_count+0xc4>)
 8002cbc:	881b      	ldrh	r3, [r3, #0]
 8002cbe:	b25b      	sxtb	r3, r3
 8002cc0:	f003 031f 	and.w	r3, r3, #31
 8002cc4:	73fb      	strb	r3, [r7, #15]

	if (sine_counter>sine_length) sine_counter = sine_length;		// seems to be faster than using a for loop to calculate both values
 8002cc6:	4b2a      	ldr	r3, [pc, #168]	; (8002d70 <sine_count+0xc8>)
 8002cc8:	881a      	ldrh	r2, [r3, #0]
 8002cca:	4b2a      	ldr	r3, [pc, #168]	; (8002d74 <sine_count+0xcc>)
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d903      	bls.n	8002cda <sine_count+0x32>
 8002cd2:	4b28      	ldr	r3, [pc, #160]	; (8002d74 <sine_count+0xcc>)
 8002cd4:	881a      	ldrh	r2, [r3, #0]
 8002cd6:	4b26      	ldr	r3, [pc, #152]	; (8002d70 <sine_count+0xc8>)
 8002cd8:	801a      	strh	r2, [r3, #0]

	sine_out = sine_block[sine_counter];  // 0- 40000
 8002cda:	4b25      	ldr	r3, [pc, #148]	; (8002d70 <sine_count+0xc8>)
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	4b25      	ldr	r3, [pc, #148]	; (8002d78 <sine_count+0xd0>)
 8002ce2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	4b24      	ldr	r3, [pc, #144]	; (8002d7c <sine_count+0xd4>)
 8002cea:	601a      	str	r2, [r3, #0]
	sine_tempA=sine_out; // grab first value , needs to be always plus
 8002cec:	4b23      	ldr	r3, [pc, #140]	; (8002d7c <sine_count+0xd4>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	60bb      	str	r3, [r7, #8]
	sine_tempA=sine_tempA-20000; //convert to signed
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 8002cf8:	3b20      	subs	r3, #32
 8002cfa:	60bb      	str	r3, [r7, #8]

	sine_counter++;
 8002cfc:	4b1c      	ldr	r3, [pc, #112]	; (8002d70 <sine_count+0xc8>)
 8002cfe:	881b      	ldrh	r3, [r3, #0]
 8002d00:	3301      	adds	r3, #1
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	4b1a      	ldr	r3, [pc, #104]	; (8002d70 <sine_count+0xc8>)
 8002d06:	801a      	strh	r2, [r3, #0]
	if (sine_counter>=sine_length)  sine_counter=0; // set to sample length
 8002d08:	4b19      	ldr	r3, [pc, #100]	; (8002d70 <sine_count+0xc8>)
 8002d0a:	881a      	ldrh	r2, [r3, #0]
 8002d0c:	4b19      	ldr	r3, [pc, #100]	; (8002d74 <sine_count+0xcc>)
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d302      	bcc.n	8002d1a <sine_count+0x72>
 8002d14:	4b16      	ldr	r3, [pc, #88]	; (8002d70 <sine_count+0xc8>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	801a      	strh	r2, [r3, #0]

			sine_out = sine_block[sine_counter];  // grab second value
 8002d1a:	4b15      	ldr	r3, [pc, #84]	; (8002d70 <sine_count+0xc8>)
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	4b15      	ldr	r3, [pc, #84]	; (8002d78 <sine_count+0xd0>)
 8002d22:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002d26:	461a      	mov	r2, r3
 8002d28:	4b14      	ldr	r3, [pc, #80]	; (8002d7c <sine_count+0xd4>)
 8002d2a:	601a      	str	r2, [r3, #0]
		
		sine_tempB=sine_out; // grab first value
 8002d2c:	4b13      	ldr	r3, [pc, #76]	; (8002d7c <sine_count+0xd4>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	607b      	str	r3, [r7, #4]
			sine_tempB=sine_tempB-20000;  // convert to signed and +256 to -256
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 8002d38:	3b20      	subs	r3, #32
 8002d3a:	607b      	str	r3, [r7, #4]

			sine_tempB=	sine_tempB-sine_tempA;   // calculate fraction then add
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	607b      	str	r3, [r7, #4]
			sine_tempB=sine_tempB>>5; // div 32 or 32 upsample
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	115b      	asrs	r3, r3, #5
 8002d48:	607b      	str	r3, [r7, #4]

			sine_tempB=sine_tempB*sine_frac; // mult by steps , can overshoot !!
 8002d4a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	fb02 f303 	mul.w	r3, r2, r3
 8002d54:	607b      	str	r3, [r7, #4]

			sine_out=(sine_tempA+sine_tempB);   // add back to start value
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	4a07      	ldr	r2, [pc, #28]	; (8002d7c <sine_count+0xd4>)
 8002d5e:	6013      	str	r3, [r2, #0]


			//sine_out=sine_tempA;


}
 8002d60:	bf00      	nop
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	20000a08 	.word	0x20000a08
 8002d70:	20000a06 	.word	0x20000a06
 8002d74:	20000142 	.word	0x20000142
 8002d78:	080078a8 	.word	0x080078a8
 8002d7c:	20000a0c 	.word	0x20000a0c

08002d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d84:	b672      	cpsid	i
}
 8002d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d88:	e7fe      	b.n	8002d88 <Error_Handler+0x8>
	...

08002d8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	607b      	str	r3, [r7, #4]
 8002d96:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <HAL_MspInit+0x4c>)
 8002d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9a:	4a0f      	ldr	r2, [pc, #60]	; (8002dd8 <HAL_MspInit+0x4c>)
 8002d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002da0:	6453      	str	r3, [r2, #68]	; 0x44
 8002da2:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <HAL_MspInit+0x4c>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002daa:	607b      	str	r3, [r7, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	603b      	str	r3, [r7, #0]
 8002db2:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <HAL_MspInit+0x4c>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	4a08      	ldr	r2, [pc, #32]	; (8002dd8 <HAL_MspInit+0x4c>)
 8002db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dbe:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <HAL_MspInit+0x4c>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc6:	603b      	str	r3, [r7, #0]
 8002dc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	40023800 	.word	0x40023800

08002ddc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08a      	sub	sp, #40	; 0x28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de4:	f107 0314 	add.w	r3, r7, #20
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	609a      	str	r2, [r3, #8]
 8002df0:	60da      	str	r2, [r3, #12]
 8002df2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a2f      	ldr	r2, [pc, #188]	; (8002eb8 <HAL_ADC_MspInit+0xdc>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d157      	bne.n	8002eae <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	4b2e      	ldr	r3, [pc, #184]	; (8002ebc <HAL_ADC_MspInit+0xe0>)
 8002e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e06:	4a2d      	ldr	r2, [pc, #180]	; (8002ebc <HAL_ADC_MspInit+0xe0>)
 8002e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e0e:	4b2b      	ldr	r3, [pc, #172]	; (8002ebc <HAL_ADC_MspInit+0xe0>)
 8002e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	4b27      	ldr	r3, [pc, #156]	; (8002ebc <HAL_ADC_MspInit+0xe0>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	4a26      	ldr	r2, [pc, #152]	; (8002ebc <HAL_ADC_MspInit+0xe0>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2a:	4b24      	ldr	r3, [pc, #144]	; (8002ebc <HAL_ADC_MspInit+0xe0>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_4;
 8002e36:	2338      	movs	r3, #56	; 0x38
 8002e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e42:	f107 0314 	add.w	r3, r7, #20
 8002e46:	4619      	mov	r1, r3
 8002e48:	481d      	ldr	r0, [pc, #116]	; (8002ec0 <HAL_ADC_MspInit+0xe4>)
 8002e4a:	f001 fbe1 	bl	8004610 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002e4e:	4b1d      	ldr	r3, [pc, #116]	; (8002ec4 <HAL_ADC_MspInit+0xe8>)
 8002e50:	4a1d      	ldr	r2, [pc, #116]	; (8002ec8 <HAL_ADC_MspInit+0xec>)
 8002e52:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002e54:	4b1b      	ldr	r3, [pc, #108]	; (8002ec4 <HAL_ADC_MspInit+0xe8>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e5a:	4b1a      	ldr	r3, [pc, #104]	; (8002ec4 <HAL_ADC_MspInit+0xe8>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e60:	4b18      	ldr	r3, [pc, #96]	; (8002ec4 <HAL_ADC_MspInit+0xe8>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002e66:	4b17      	ldr	r3, [pc, #92]	; (8002ec4 <HAL_ADC_MspInit+0xe8>)
 8002e68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e6c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e6e:	4b15      	ldr	r3, [pc, #84]	; (8002ec4 <HAL_ADC_MspInit+0xe8>)
 8002e70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e74:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e76:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <HAL_ADC_MspInit+0xe8>)
 8002e78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e7c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002e7e:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <HAL_ADC_MspInit+0xe8>)
 8002e80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e84:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002e86:	4b0f      	ldr	r3, [pc, #60]	; (8002ec4 <HAL_ADC_MspInit+0xe8>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e8c:	4b0d      	ldr	r3, [pc, #52]	; (8002ec4 <HAL_ADC_MspInit+0xe8>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002e92:	480c      	ldr	r0, [pc, #48]	; (8002ec4 <HAL_ADC_MspInit+0xe8>)
 8002e94:	f001 f84c 	bl	8003f30 <HAL_DMA_Init>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002e9e:	f7ff ff6f 	bl	8002d80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a07      	ldr	r2, [pc, #28]	; (8002ec4 <HAL_ADC_MspInit+0xe8>)
 8002ea6:	639a      	str	r2, [r3, #56]	; 0x38
 8002ea8:	4a06      	ldr	r2, [pc, #24]	; (8002ec4 <HAL_ADC_MspInit+0xe8>)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002eae:	bf00      	nop
 8002eb0:	3728      	adds	r7, #40	; 0x28
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40012000 	.word	0x40012000
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	40020000 	.word	0x40020000
 8002ec4:	20000630 	.word	0x20000630
 8002ec8:	40026410 	.word	0x40026410

08002ecc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08a      	sub	sp, #40	; 0x28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed4:	f107 0314 	add.w	r3, r7, #20
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a22      	ldr	r2, [pc, #136]	; (8002f74 <HAL_I2C_MspInit+0xa8>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d13d      	bne.n	8002f6a <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	4b21      	ldr	r3, [pc, #132]	; (8002f78 <HAL_I2C_MspInit+0xac>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	4a20      	ldr	r2, [pc, #128]	; (8002f78 <HAL_I2C_MspInit+0xac>)
 8002ef8:	f043 0302 	orr.w	r3, r3, #2
 8002efc:	6313      	str	r3, [r2, #48]	; 0x30
 8002efe:	4b1e      	ldr	r3, [pc, #120]	; (8002f78 <HAL_I2C_MspInit+0xac>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	613b      	str	r3, [r7, #16]
 8002f08:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB9     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f10:	2312      	movs	r3, #18
 8002f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f14:	2300      	movs	r3, #0
 8002f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002f1c:	2309      	movs	r3, #9
 8002f1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f20:	f107 0314 	add.w	r3, r7, #20
 8002f24:	4619      	mov	r1, r3
 8002f26:	4815      	ldr	r0, [pc, #84]	; (8002f7c <HAL_I2C_MspInit+0xb0>)
 8002f28:	f001 fb72 	bl	8004610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f32:	2312      	movs	r3, #18
 8002f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002f3e:	2304      	movs	r3, #4
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f42:	f107 0314 	add.w	r3, r7, #20
 8002f46:	4619      	mov	r1, r3
 8002f48:	480c      	ldr	r0, [pc, #48]	; (8002f7c <HAL_I2C_MspInit+0xb0>)
 8002f4a:	f001 fb61 	bl	8004610 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <HAL_I2C_MspInit+0xac>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	4a08      	ldr	r2, [pc, #32]	; (8002f78 <HAL_I2C_MspInit+0xac>)
 8002f58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f5e:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <HAL_I2C_MspInit+0xac>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002f6a:	bf00      	nop
 8002f6c:	3728      	adds	r7, #40	; 0x28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40005800 	.word	0x40005800
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	40020400 	.word	0x40020400

08002f80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08a      	sub	sp, #40	; 0x28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f88:	f107 0314 	add.w	r3, r7, #20
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	605a      	str	r2, [r3, #4]
 8002f92:	609a      	str	r2, [r3, #8]
 8002f94:	60da      	str	r2, [r3, #12]
 8002f96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a19      	ldr	r2, [pc, #100]	; (8003004 <HAL_SPI_MspInit+0x84>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d12c      	bne.n	8002ffc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	613b      	str	r3, [r7, #16]
 8002fa6:	4b18      	ldr	r3, [pc, #96]	; (8003008 <HAL_SPI_MspInit+0x88>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	4a17      	ldr	r2, [pc, #92]	; (8003008 <HAL_SPI_MspInit+0x88>)
 8002fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb2:	4b15      	ldr	r3, [pc, #84]	; (8003008 <HAL_SPI_MspInit+0x88>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fba:	613b      	str	r3, [r7, #16]
 8002fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	4b11      	ldr	r3, [pc, #68]	; (8003008 <HAL_SPI_MspInit+0x88>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	4a10      	ldr	r2, [pc, #64]	; (8003008 <HAL_SPI_MspInit+0x88>)
 8002fc8:	f043 0302 	orr.w	r3, r3, #2
 8002fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fce:	4b0e      	ldr	r3, [pc, #56]	; (8003008 <HAL_SPI_MspInit+0x88>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB15     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8002fda:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002fec:	2305      	movs	r3, #5
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff0:	f107 0314 	add.w	r3, r7, #20
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4805      	ldr	r0, [pc, #20]	; (800300c <HAL_SPI_MspInit+0x8c>)
 8002ff8:	f001 fb0a 	bl	8004610 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002ffc:	bf00      	nop
 8002ffe:	3728      	adds	r7, #40	; 0x28
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40003800 	.word	0x40003800
 8003008:	40023800 	.word	0x40023800
 800300c:	40020400 	.word	0x40020400

08003010 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08c      	sub	sp, #48	; 0x30
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003018:	f107 031c 	add.w	r3, r7, #28
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	605a      	str	r2, [r3, #4]
 8003022:	609a      	str	r2, [r3, #8]
 8003024:	60da      	str	r2, [r3, #12]
 8003026:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003030:	d12d      	bne.n	800308e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	61bb      	str	r3, [r7, #24]
 8003036:	4b30      	ldr	r3, [pc, #192]	; (80030f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	4a2f      	ldr	r2, [pc, #188]	; (80030f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	6413      	str	r3, [r2, #64]	; 0x40
 8003042:	4b2d      	ldr	r3, [pc, #180]	; (80030f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	61bb      	str	r3, [r7, #24]
 800304c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]
 8003052:	4b29      	ldr	r3, [pc, #164]	; (80030f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	4a28      	ldr	r2, [pc, #160]	; (80030f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	6313      	str	r3, [r2, #48]	; 0x30
 800305e:	4b26      	ldr	r3, [pc, #152]	; (80030f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 800306a:	f248 0302 	movw	r3, #32770	; 0x8002
 800306e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003070:	2302      	movs	r3, #2
 8003072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003074:	2301      	movs	r3, #1
 8003076:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003078:	2300      	movs	r3, #0
 800307a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800307c:	2301      	movs	r3, #1
 800307e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003080:	f107 031c 	add.w	r3, r7, #28
 8003084:	4619      	mov	r1, r3
 8003086:	481d      	ldr	r0, [pc, #116]	; (80030fc <HAL_TIM_Encoder_MspInit+0xec>)
 8003088:	f001 fac2 	bl	8004610 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800308c:	e030      	b.n	80030f0 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a1b      	ldr	r2, [pc, #108]	; (8003100 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d12b      	bne.n	80030f0 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003098:	2300      	movs	r3, #0
 800309a:	613b      	str	r3, [r7, #16]
 800309c:	4b16      	ldr	r3, [pc, #88]	; (80030f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	4a15      	ldr	r2, [pc, #84]	; (80030f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80030a2:	f043 0304 	orr.w	r3, r3, #4
 80030a6:	6413      	str	r3, [r2, #64]	; 0x40
 80030a8:	4b13      	ldr	r3, [pc, #76]	; (80030f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b4:	2300      	movs	r3, #0
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80030ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030bc:	4a0e      	ldr	r2, [pc, #56]	; (80030f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80030be:	f043 0302 	orr.w	r3, r3, #2
 80030c2:	6313      	str	r3, [r2, #48]	; 0x30
 80030c4:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80030c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030d0:	23c0      	movs	r3, #192	; 0xc0
 80030d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d4:	2302      	movs	r3, #2
 80030d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030d8:	2301      	movs	r3, #1
 80030da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030dc:	2300      	movs	r3, #0
 80030de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80030e0:	2302      	movs	r3, #2
 80030e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030e4:	f107 031c 	add.w	r3, r7, #28
 80030e8:	4619      	mov	r1, r3
 80030ea:	4806      	ldr	r0, [pc, #24]	; (8003104 <HAL_TIM_Encoder_MspInit+0xf4>)
 80030ec:	f001 fa90 	bl	8004610 <HAL_GPIO_Init>
}
 80030f0:	bf00      	nop
 80030f2:	3730      	adds	r7, #48	; 0x30
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40023800 	.word	0x40023800
 80030fc:	40020000 	.word	0x40020000
 8003100:	40000800 	.word	0x40000800
 8003104:	40020400 	.word	0x40020400

08003108 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a0e      	ldr	r2, [pc, #56]	; (8003150 <HAL_TIM_Base_MspInit+0x48>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d115      	bne.n	8003146 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800311a:	2300      	movs	r3, #0
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	4b0d      	ldr	r3, [pc, #52]	; (8003154 <HAL_TIM_Base_MspInit+0x4c>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	4a0c      	ldr	r2, [pc, #48]	; (8003154 <HAL_TIM_Base_MspInit+0x4c>)
 8003124:	f043 0302 	orr.w	r3, r3, #2
 8003128:	6413      	str	r3, [r2, #64]	; 0x40
 800312a:	4b0a      	ldr	r3, [pc, #40]	; (8003154 <HAL_TIM_Base_MspInit+0x4c>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003136:	2200      	movs	r2, #0
 8003138:	2100      	movs	r1, #0
 800313a:	201d      	movs	r0, #29
 800313c:	f000 fec1 	bl	8003ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003140:	201d      	movs	r0, #29
 8003142:	f000 feda 	bl	8003efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003146:	bf00      	nop
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40000400 	.word	0x40000400
 8003154:	40023800 	.word	0x40023800

08003158 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003160:	f107 030c 	add.w	r3, r7, #12
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	609a      	str	r2, [r3, #8]
 800316c:	60da      	str	r2, [r3, #12]
 800316e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a12      	ldr	r2, [pc, #72]	; (80031c0 <HAL_TIM_MspPostInit+0x68>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d11d      	bne.n	80031b6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	60bb      	str	r3, [r7, #8]
 800317e:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <HAL_TIM_MspPostInit+0x6c>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	4a10      	ldr	r2, [pc, #64]	; (80031c4 <HAL_TIM_MspPostInit+0x6c>)
 8003184:	f043 0302 	orr.w	r3, r3, #2
 8003188:	6313      	str	r3, [r2, #48]	; 0x30
 800318a:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <HAL_TIM_MspPostInit+0x6c>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	60bb      	str	r3, [r7, #8]
 8003194:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003196:	2301      	movs	r3, #1
 8003198:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319a:	2302      	movs	r3, #2
 800319c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a2:	2300      	movs	r3, #0
 80031a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031a6:	2302      	movs	r3, #2
 80031a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031aa:	f107 030c 	add.w	r3, r7, #12
 80031ae:	4619      	mov	r1, r3
 80031b0:	4805      	ldr	r0, [pc, #20]	; (80031c8 <HAL_TIM_MspPostInit+0x70>)
 80031b2:	f001 fa2d 	bl	8004610 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80031b6:	bf00      	nop
 80031b8:	3720      	adds	r7, #32
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40000400 	.word	0x40000400
 80031c4:	40023800 	.word	0x40023800
 80031c8:	40020400 	.word	0x40020400

080031cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031d0:	e7fe      	b.n	80031d0 <NMI_Handler+0x4>

080031d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031d2:	b480      	push	{r7}
 80031d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031d6:	e7fe      	b.n	80031d6 <HardFault_Handler+0x4>

080031d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031dc:	e7fe      	b.n	80031dc <MemManage_Handler+0x4>

080031de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031de:	b480      	push	{r7}
 80031e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031e2:	e7fe      	b.n	80031e2 <BusFault_Handler+0x4>

080031e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031e8:	e7fe      	b.n	80031e8 <UsageFault_Handler+0x4>

080031ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031ea:	b480      	push	{r7}
 80031ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031ee:	bf00      	nop
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031fc:	bf00      	nop
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003206:	b480      	push	{r7}
 8003208:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800320a:	bf00      	nop
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003218:	f000 f8a8 	bl	800336c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800321c:	bf00      	nop
 800321e:	bd80      	pop	{r7, pc}

08003220 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003224:	4802      	ldr	r0, [pc, #8]	; (8003230 <TIM3_IRQHandler+0x10>)
 8003226:	f003 fb3b 	bl	80068a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800322a:	bf00      	nop
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	2000077c 	.word	0x2000077c

08003234 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003238:	4802      	ldr	r0, [pc, #8]	; (8003244 <DMA2_Stream0_IRQHandler+0x10>)
 800323a:	f000 ff7f 	bl	800413c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800323e:	bf00      	nop
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	20000630 	.word	0x20000630

08003248 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800324c:	4b08      	ldr	r3, [pc, #32]	; (8003270 <SystemInit+0x28>)
 800324e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003252:	4a07      	ldr	r2, [pc, #28]	; (8003270 <SystemInit+0x28>)
 8003254:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003258:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800325c:	4b04      	ldr	r3, [pc, #16]	; (8003270 <SystemInit+0x28>)
 800325e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003262:	609a      	str	r2, [r3, #8]
#endif
}
 8003264:	bf00      	nop
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	e000ed00 	.word	0xe000ed00

08003274 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003274:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003278:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800327a:	e003      	b.n	8003284 <LoopCopyDataInit>

0800327c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800327c:	4b0c      	ldr	r3, [pc, #48]	; (80032b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800327e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003280:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003282:	3104      	adds	r1, #4

08003284 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003284:	480b      	ldr	r0, [pc, #44]	; (80032b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003286:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003288:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800328a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800328c:	d3f6      	bcc.n	800327c <CopyDataInit>
  ldr  r2, =_sbss
 800328e:	4a0b      	ldr	r2, [pc, #44]	; (80032bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003290:	e002      	b.n	8003298 <LoopFillZerobss>

08003292 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003292:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003294:	f842 3b04 	str.w	r3, [r2], #4

08003298 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003298:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800329a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800329c:	d3f9      	bcc.n	8003292 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800329e:	f7ff ffd3 	bl	8003248 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032a2:	f004 f949 	bl	8007538 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032a6:	f7fd fcd7 	bl	8000c58 <main>
  bx  lr    
 80032aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80032ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80032b0:	08008590 	.word	0x08008590
  ldr  r0, =_sdata
 80032b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80032b8:	200005cc 	.word	0x200005cc
  ldr  r2, =_sbss
 80032bc:	200005cc 	.word	0x200005cc
  ldr  r3, = _ebss
 80032c0:	20001960 	.word	0x20001960

080032c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032c4:	e7fe      	b.n	80032c4 <ADC_IRQHandler>
	...

080032c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032cc:	4b0e      	ldr	r3, [pc, #56]	; (8003308 <HAL_Init+0x40>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a0d      	ldr	r2, [pc, #52]	; (8003308 <HAL_Init+0x40>)
 80032d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032d8:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <HAL_Init+0x40>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a0a      	ldr	r2, [pc, #40]	; (8003308 <HAL_Init+0x40>)
 80032de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032e4:	4b08      	ldr	r3, [pc, #32]	; (8003308 <HAL_Init+0x40>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a07      	ldr	r2, [pc, #28]	; (8003308 <HAL_Init+0x40>)
 80032ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032f0:	2003      	movs	r0, #3
 80032f2:	f000 fddb 	bl	8003eac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032f6:	2000      	movs	r0, #0
 80032f8:	f000 f808 	bl	800330c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032fc:	f7ff fd46 	bl	8002d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40023c00 	.word	0x40023c00

0800330c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003314:	4b12      	ldr	r3, [pc, #72]	; (8003360 <HAL_InitTick+0x54>)
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	4b12      	ldr	r3, [pc, #72]	; (8003364 <HAL_InitTick+0x58>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	4619      	mov	r1, r3
 800331e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003322:	fbb3 f3f1 	udiv	r3, r3, r1
 8003326:	fbb2 f3f3 	udiv	r3, r2, r3
 800332a:	4618      	mov	r0, r3
 800332c:	f000 fdf3 	bl	8003f16 <HAL_SYSTICK_Config>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e00e      	b.n	8003358 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b0f      	cmp	r3, #15
 800333e:	d80a      	bhi.n	8003356 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003340:	2200      	movs	r2, #0
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	f04f 30ff 	mov.w	r0, #4294967295
 8003348:	f000 fdbb 	bl	8003ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800334c:	4a06      	ldr	r2, [pc, #24]	; (8003368 <HAL_InitTick+0x5c>)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003352:	2300      	movs	r3, #0
 8003354:	e000      	b.n	8003358 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
}
 8003358:	4618      	mov	r0, r3
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	200005c0 	.word	0x200005c0
 8003364:	200005c8 	.word	0x200005c8
 8003368:	200005c4 	.word	0x200005c4

0800336c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003370:	4b06      	ldr	r3, [pc, #24]	; (800338c <HAL_IncTick+0x20>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	461a      	mov	r2, r3
 8003376:	4b06      	ldr	r3, [pc, #24]	; (8003390 <HAL_IncTick+0x24>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4413      	add	r3, r2
 800337c:	4a04      	ldr	r2, [pc, #16]	; (8003390 <HAL_IncTick+0x24>)
 800337e:	6013      	str	r3, [r2, #0]
}
 8003380:	bf00      	nop
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	200005c8 	.word	0x200005c8
 8003390:	2000195c 	.word	0x2000195c

08003394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  return uwTick;
 8003398:	4b03      	ldr	r3, [pc, #12]	; (80033a8 <HAL_GetTick+0x14>)
 800339a:	681b      	ldr	r3, [r3, #0]
}
 800339c:	4618      	mov	r0, r3
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	2000195c 	.word	0x2000195c

080033ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033b4:	f7ff ffee 	bl	8003394 <HAL_GetTick>
 80033b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c4:	d005      	beq.n	80033d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033c6:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <HAL_Delay+0x44>)
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	461a      	mov	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4413      	add	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033d2:	bf00      	nop
 80033d4:	f7ff ffde 	bl	8003394 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d8f7      	bhi.n	80033d4 <HAL_Delay+0x28>
  {
  }
}
 80033e4:	bf00      	nop
 80033e6:	bf00      	nop
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	200005c8 	.word	0x200005c8

080033f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033fc:	2300      	movs	r3, #0
 80033fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e033      	b.n	8003472 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	2b00      	cmp	r3, #0
 8003410:	d109      	bne.n	8003426 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7ff fce2 	bl	8002ddc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	f003 0310 	and.w	r3, r3, #16
 800342e:	2b00      	cmp	r3, #0
 8003430:	d118      	bne.n	8003464 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800343a:	f023 0302 	bic.w	r3, r3, #2
 800343e:	f043 0202 	orr.w	r2, r3, #2
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 fae2 	bl	8003a10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	f023 0303 	bic.w	r3, r3, #3
 800345a:	f043 0201 	orr.w	r2, r3, #1
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	641a      	str	r2, [r3, #64]	; 0x40
 8003462:	e001      	b.n	8003468 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003470:	7bfb      	ldrb	r3, [r7, #15]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
	...

0800347c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003484:	2300      	movs	r3, #0
 8003486:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800348e:	2b01      	cmp	r3, #1
 8003490:	d101      	bne.n	8003496 <HAL_ADC_Start+0x1a>
 8003492:	2302      	movs	r3, #2
 8003494:	e08a      	b.n	80035ac <HAL_ADC_Start+0x130>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d018      	beq.n	80034de <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0201 	orr.w	r2, r2, #1
 80034ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80034bc:	4b3e      	ldr	r3, [pc, #248]	; (80035b8 <HAL_ADC_Start+0x13c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a3e      	ldr	r2, [pc, #248]	; (80035bc <HAL_ADC_Start+0x140>)
 80034c2:	fba2 2303 	umull	r2, r3, r2, r3
 80034c6:	0c9a      	lsrs	r2, r3, #18
 80034c8:	4613      	mov	r3, r2
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	4413      	add	r3, r2
 80034ce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80034d0:	e002      	b.n	80034d8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	3b01      	subs	r3, #1
 80034d6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1f9      	bne.n	80034d2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d15e      	bne.n	80035aa <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80034f4:	f023 0301 	bic.w	r3, r3, #1
 80034f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800350a:	2b00      	cmp	r3, #0
 800350c:	d007      	beq.n	800351e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003516:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800352a:	d106      	bne.n	800353a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003530:	f023 0206 	bic.w	r2, r3, #6
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	645a      	str	r2, [r3, #68]	; 0x44
 8003538:	e002      	b.n	8003540 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003548:	4b1d      	ldr	r3, [pc, #116]	; (80035c0 <HAL_ADC_Start+0x144>)
 800354a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003554:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f003 031f 	and.w	r3, r3, #31
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10f      	bne.n	8003582 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d11c      	bne.n	80035aa <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800357e:	609a      	str	r2, [r3, #8]
 8003580:	e013      	b.n	80035aa <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a0f      	ldr	r2, [pc, #60]	; (80035c4 <HAL_ADC_Start+0x148>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d10e      	bne.n	80035aa <HAL_ADC_Start+0x12e>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d107      	bne.n	80035aa <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80035a8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	200005c0 	.word	0x200005c0
 80035bc:	431bde83 	.word	0x431bde83
 80035c0:	40012300 	.word	0x40012300
 80035c4:	40012000 	.word	0x40012000

080035c8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_ADC_Start_DMA+0x1e>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e0b1      	b.n	800374a <HAL_ADC_Start_DMA+0x182>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d018      	beq.n	800362e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0201 	orr.w	r2, r2, #1
 800360a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800360c:	4b51      	ldr	r3, [pc, #324]	; (8003754 <HAL_ADC_Start_DMA+0x18c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a51      	ldr	r2, [pc, #324]	; (8003758 <HAL_ADC_Start_DMA+0x190>)
 8003612:	fba2 2303 	umull	r2, r3, r2, r3
 8003616:	0c9a      	lsrs	r2, r3, #18
 8003618:	4613      	mov	r3, r2
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	4413      	add	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003620:	e002      	b.n	8003628 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	3b01      	subs	r3, #1
 8003626:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f9      	bne.n	8003622 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b01      	cmp	r3, #1
 800363a:	f040 8085 	bne.w	8003748 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003646:	f023 0301 	bic.w	r3, r3, #1
 800364a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800365c:	2b00      	cmp	r3, #0
 800365e:	d007      	beq.n	8003670 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003668:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800367c:	d106      	bne.n	800368c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003682:	f023 0206 	bic.w	r2, r3, #6
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	645a      	str	r2, [r3, #68]	; 0x44
 800368a:	e002      	b.n	8003692 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800369a:	4b30      	ldr	r3, [pc, #192]	; (800375c <HAL_ADC_Start_DMA+0x194>)
 800369c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a2:	4a2f      	ldr	r2, [pc, #188]	; (8003760 <HAL_ADC_Start_DMA+0x198>)
 80036a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036aa:	4a2e      	ldr	r2, [pc, #184]	; (8003764 <HAL_ADC_Start_DMA+0x19c>)
 80036ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b2:	4a2d      	ldr	r2, [pc, #180]	; (8003768 <HAL_ADC_Start_DMA+0x1a0>)
 80036b4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80036be:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80036ce:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036de:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	334c      	adds	r3, #76	; 0x4c
 80036ea:	4619      	mov	r1, r3
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f000 fccc 	bl	800408c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f003 031f 	and.w	r3, r3, #31
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10f      	bne.n	8003720 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d11c      	bne.n	8003748 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800371c:	609a      	str	r2, [r3, #8]
 800371e:	e013      	b.n	8003748 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a11      	ldr	r2, [pc, #68]	; (800376c <HAL_ADC_Start_DMA+0x1a4>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d10e      	bne.n	8003748 <HAL_ADC_Start_DMA+0x180>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d107      	bne.n	8003748 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003746:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	200005c0 	.word	0x200005c0
 8003758:	431bde83 	.word	0x431bde83
 800375c:	40012300 	.word	0x40012300
 8003760:	08003c09 	.word	0x08003c09
 8003764:	08003cc3 	.word	0x08003cc3
 8003768:	08003cdf 	.word	0x08003cdf
 800376c:	40012000 	.word	0x40012000

08003770 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80037b6:	2300      	movs	r3, #0
 80037b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d101      	bne.n	80037c8 <HAL_ADC_ConfigChannel+0x1c>
 80037c4:	2302      	movs	r3, #2
 80037c6:	e113      	b.n	80039f0 <HAL_ADC_ConfigChannel+0x244>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b09      	cmp	r3, #9
 80037d6:	d925      	bls.n	8003824 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68d9      	ldr	r1, [r3, #12]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	461a      	mov	r2, r3
 80037e6:	4613      	mov	r3, r2
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	4413      	add	r3, r2
 80037ec:	3b1e      	subs	r3, #30
 80037ee:	2207      	movs	r2, #7
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	43da      	mvns	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	400a      	ands	r2, r1
 80037fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68d9      	ldr	r1, [r3, #12]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	b29b      	uxth	r3, r3
 800380e:	4618      	mov	r0, r3
 8003810:	4603      	mov	r3, r0
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	4403      	add	r3, r0
 8003816:	3b1e      	subs	r3, #30
 8003818:	409a      	lsls	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	60da      	str	r2, [r3, #12]
 8003822:	e022      	b.n	800386a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6919      	ldr	r1, [r3, #16]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	b29b      	uxth	r3, r3
 8003830:	461a      	mov	r2, r3
 8003832:	4613      	mov	r3, r2
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	4413      	add	r3, r2
 8003838:	2207      	movs	r2, #7
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	43da      	mvns	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	400a      	ands	r2, r1
 8003846:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6919      	ldr	r1, [r3, #16]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	b29b      	uxth	r3, r3
 8003858:	4618      	mov	r0, r3
 800385a:	4603      	mov	r3, r0
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	4403      	add	r3, r0
 8003860:	409a      	lsls	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b06      	cmp	r3, #6
 8003870:	d824      	bhi.n	80038bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	4613      	mov	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	3b05      	subs	r3, #5
 8003884:	221f      	movs	r2, #31
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	43da      	mvns	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	400a      	ands	r2, r1
 8003892:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	b29b      	uxth	r3, r3
 80038a0:	4618      	mov	r0, r3
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	4613      	mov	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	3b05      	subs	r3, #5
 80038ae:	fa00 f203 	lsl.w	r2, r0, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	635a      	str	r2, [r3, #52]	; 0x34
 80038ba:	e04c      	b.n	8003956 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b0c      	cmp	r3, #12
 80038c2:	d824      	bhi.n	800390e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	4613      	mov	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	3b23      	subs	r3, #35	; 0x23
 80038d6:	221f      	movs	r2, #31
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	43da      	mvns	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	400a      	ands	r2, r1
 80038e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	4618      	mov	r0, r3
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	3b23      	subs	r3, #35	; 0x23
 8003900:	fa00 f203 	lsl.w	r2, r0, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	631a      	str	r2, [r3, #48]	; 0x30
 800390c:	e023      	b.n	8003956 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	4613      	mov	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	3b41      	subs	r3, #65	; 0x41
 8003920:	221f      	movs	r2, #31
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	43da      	mvns	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	400a      	ands	r2, r1
 800392e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	b29b      	uxth	r3, r3
 800393c:	4618      	mov	r0, r3
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	4613      	mov	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	3b41      	subs	r3, #65	; 0x41
 800394a:	fa00 f203 	lsl.w	r2, r0, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003956:	4b29      	ldr	r3, [pc, #164]	; (80039fc <HAL_ADC_ConfigChannel+0x250>)
 8003958:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a28      	ldr	r2, [pc, #160]	; (8003a00 <HAL_ADC_ConfigChannel+0x254>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d10f      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x1d8>
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b12      	cmp	r3, #18
 800396a:	d10b      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a1d      	ldr	r2, [pc, #116]	; (8003a00 <HAL_ADC_ConfigChannel+0x254>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d12b      	bne.n	80039e6 <HAL_ADC_ConfigChannel+0x23a>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a1c      	ldr	r2, [pc, #112]	; (8003a04 <HAL_ADC_ConfigChannel+0x258>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d003      	beq.n	80039a0 <HAL_ADC_ConfigChannel+0x1f4>
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b11      	cmp	r3, #17
 800399e:	d122      	bne.n	80039e6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a11      	ldr	r2, [pc, #68]	; (8003a04 <HAL_ADC_ConfigChannel+0x258>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d111      	bne.n	80039e6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039c2:	4b11      	ldr	r3, [pc, #68]	; (8003a08 <HAL_ADC_ConfigChannel+0x25c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a11      	ldr	r2, [pc, #68]	; (8003a0c <HAL_ADC_ConfigChannel+0x260>)
 80039c8:	fba2 2303 	umull	r2, r3, r2, r3
 80039cc:	0c9a      	lsrs	r2, r3, #18
 80039ce:	4613      	mov	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80039d8:	e002      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	3b01      	subs	r3, #1
 80039de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f9      	bne.n	80039da <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	40012300 	.word	0x40012300
 8003a00:	40012000 	.word	0x40012000
 8003a04:	10000012 	.word	0x10000012
 8003a08:	200005c0 	.word	0x200005c0
 8003a0c:	431bde83 	.word	0x431bde83

08003a10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a18:	4b79      	ldr	r3, [pc, #484]	; (8003c00 <ADC_Init+0x1f0>)
 8003a1a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	431a      	orrs	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6859      	ldr	r1, [r3, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	021a      	lsls	r2, r3, #8
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6859      	ldr	r1, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6899      	ldr	r1, [r3, #8]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa2:	4a58      	ldr	r2, [pc, #352]	; (8003c04 <ADC_Init+0x1f4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d022      	beq.n	8003aee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ab6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6899      	ldr	r1, [r3, #8]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ad8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6899      	ldr	r1, [r3, #8]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	609a      	str	r2, [r3, #8]
 8003aec:	e00f      	b.n	8003b0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003afc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0202 	bic.w	r2, r2, #2
 8003b1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6899      	ldr	r1, [r3, #8]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	7e1b      	ldrb	r3, [r3, #24]
 8003b28:	005a      	lsls	r2, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d01b      	beq.n	8003b74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b4a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6859      	ldr	r1, [r3, #4]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	3b01      	subs	r3, #1
 8003b68:	035a      	lsls	r2, r3, #13
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	605a      	str	r2, [r3, #4]
 8003b72:	e007      	b.n	8003b84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b82:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	051a      	lsls	r2, r3, #20
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003bb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6899      	ldr	r1, [r3, #8]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003bc6:	025a      	lsls	r2, r3, #9
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6899      	ldr	r1, [r3, #8]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	029a      	lsls	r2, r3, #10
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	609a      	str	r2, [r3, #8]
}
 8003bf4:	bf00      	nop
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	40012300 	.word	0x40012300
 8003c04:	0f000001 	.word	0x0f000001

08003c08 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c14:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d13c      	bne.n	8003c9c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d12b      	bne.n	8003c94 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d127      	bne.n	8003c94 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d006      	beq.n	8003c60 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d119      	bne.n	8003c94 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0220 	bic.w	r2, r2, #32
 8003c6e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d105      	bne.n	8003c94 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8c:	f043 0201 	orr.w	r2, r3, #1
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f7ff fd6b 	bl	8003770 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c9a:	e00e      	b.n	8003cba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	f003 0310 	and.w	r3, r3, #16
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d003      	beq.n	8003cb0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f7ff fd75 	bl	8003798 <HAL_ADC_ErrorCallback>
}
 8003cae:	e004      	b.n	8003cba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	4798      	blx	r3
}
 8003cba:	bf00      	nop
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b084      	sub	sp, #16
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cce:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f7ff fd57 	bl	8003784 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cd6:	bf00      	nop
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b084      	sub	sp, #16
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cea:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2240      	movs	r2, #64	; 0x40
 8003cf0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf6:	f043 0204 	orr.w	r2, r3, #4
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f7ff fd4a 	bl	8003798 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d04:	bf00      	nop
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f003 0307 	and.w	r3, r3, #7
 8003d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d1c:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <__NVIC_SetPriorityGrouping+0x44>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d28:	4013      	ands	r3, r2
 8003d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d3e:	4a04      	ldr	r2, [pc, #16]	; (8003d50 <__NVIC_SetPriorityGrouping+0x44>)
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	60d3      	str	r3, [r2, #12]
}
 8003d44:	bf00      	nop
 8003d46:	3714      	adds	r7, #20
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	e000ed00 	.word	0xe000ed00

08003d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d58:	4b04      	ldr	r3, [pc, #16]	; (8003d6c <__NVIC_GetPriorityGrouping+0x18>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	0a1b      	lsrs	r3, r3, #8
 8003d5e:	f003 0307 	and.w	r3, r3, #7
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	e000ed00 	.word	0xe000ed00

08003d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	4603      	mov	r3, r0
 8003d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	db0b      	blt.n	8003d9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d82:	79fb      	ldrb	r3, [r7, #7]
 8003d84:	f003 021f 	and.w	r2, r3, #31
 8003d88:	4907      	ldr	r1, [pc, #28]	; (8003da8 <__NVIC_EnableIRQ+0x38>)
 8003d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8e:	095b      	lsrs	r3, r3, #5
 8003d90:	2001      	movs	r0, #1
 8003d92:	fa00 f202 	lsl.w	r2, r0, r2
 8003d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	e000e100 	.word	0xe000e100

08003dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	6039      	str	r1, [r7, #0]
 8003db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	db0a      	blt.n	8003dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	490c      	ldr	r1, [pc, #48]	; (8003df8 <__NVIC_SetPriority+0x4c>)
 8003dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dca:	0112      	lsls	r2, r2, #4
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	440b      	add	r3, r1
 8003dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dd4:	e00a      	b.n	8003dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	4908      	ldr	r1, [pc, #32]	; (8003dfc <__NVIC_SetPriority+0x50>)
 8003ddc:	79fb      	ldrb	r3, [r7, #7]
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	3b04      	subs	r3, #4
 8003de4:	0112      	lsls	r2, r2, #4
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	440b      	add	r3, r1
 8003dea:	761a      	strb	r2, [r3, #24]
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	e000e100 	.word	0xe000e100
 8003dfc:	e000ed00 	.word	0xe000ed00

08003e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b089      	sub	sp, #36	; 0x24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	f1c3 0307 	rsb	r3, r3, #7
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	bf28      	it	cs
 8003e1e:	2304      	movcs	r3, #4
 8003e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	3304      	adds	r3, #4
 8003e26:	2b06      	cmp	r3, #6
 8003e28:	d902      	bls.n	8003e30 <NVIC_EncodePriority+0x30>
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	3b03      	subs	r3, #3
 8003e2e:	e000      	b.n	8003e32 <NVIC_EncodePriority+0x32>
 8003e30:	2300      	movs	r3, #0
 8003e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e34:	f04f 32ff 	mov.w	r2, #4294967295
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	43da      	mvns	r2, r3
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	401a      	ands	r2, r3
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e48:	f04f 31ff 	mov.w	r1, #4294967295
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e52:	43d9      	mvns	r1, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e58:	4313      	orrs	r3, r2
         );
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3724      	adds	r7, #36	; 0x24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
	...

08003e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e78:	d301      	bcc.n	8003e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e00f      	b.n	8003e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e7e:	4a0a      	ldr	r2, [pc, #40]	; (8003ea8 <SysTick_Config+0x40>)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e86:	210f      	movs	r1, #15
 8003e88:	f04f 30ff 	mov.w	r0, #4294967295
 8003e8c:	f7ff ff8e 	bl	8003dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e90:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <SysTick_Config+0x40>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e96:	4b04      	ldr	r3, [pc, #16]	; (8003ea8 <SysTick_Config+0x40>)
 8003e98:	2207      	movs	r2, #7
 8003e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	e000e010 	.word	0xe000e010

08003eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f7ff ff29 	bl	8003d0c <__NVIC_SetPriorityGrouping>
}
 8003eba:	bf00      	nop
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b086      	sub	sp, #24
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	4603      	mov	r3, r0
 8003eca:	60b9      	str	r1, [r7, #8]
 8003ecc:	607a      	str	r2, [r7, #4]
 8003ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ed4:	f7ff ff3e 	bl	8003d54 <__NVIC_GetPriorityGrouping>
 8003ed8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	68b9      	ldr	r1, [r7, #8]
 8003ede:	6978      	ldr	r0, [r7, #20]
 8003ee0:	f7ff ff8e 	bl	8003e00 <NVIC_EncodePriority>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eea:	4611      	mov	r1, r2
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff ff5d 	bl	8003dac <__NVIC_SetPriority>
}
 8003ef2:	bf00      	nop
 8003ef4:	3718      	adds	r7, #24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b082      	sub	sp, #8
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	4603      	mov	r3, r0
 8003f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff ff31 	bl	8003d70 <__NVIC_EnableIRQ>
}
 8003f0e:	bf00      	nop
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b082      	sub	sp, #8
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7ff ffa2 	bl	8003e68 <SysTick_Config>
 8003f24:	4603      	mov	r3, r0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
	...

08003f30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f3c:	f7ff fa2a 	bl	8003394 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d101      	bne.n	8003f4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e099      	b.n	8004080 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0201 	bic.w	r2, r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f6c:	e00f      	b.n	8003f8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f6e:	f7ff fa11 	bl	8003394 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b05      	cmp	r3, #5
 8003f7a:	d908      	bls.n	8003f8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2203      	movs	r2, #3
 8003f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e078      	b.n	8004080 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1e8      	bne.n	8003f6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	4b38      	ldr	r3, [pc, #224]	; (8004088 <HAL_DMA_Init+0x158>)
 8003fa8:	4013      	ands	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	2b04      	cmp	r3, #4
 8003fe6:	d107      	bne.n	8003ff8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f023 0307 	bic.w	r3, r3, #7
 800400e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	4313      	orrs	r3, r2
 8004018:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	2b04      	cmp	r3, #4
 8004020:	d117      	bne.n	8004052 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	4313      	orrs	r3, r2
 800402a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00e      	beq.n	8004052 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 fa6f 	bl	8004518 <DMA_CheckFifoParam>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d008      	beq.n	8004052 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2240      	movs	r2, #64	; 0x40
 8004044:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800404e:	2301      	movs	r3, #1
 8004050:	e016      	b.n	8004080 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 fa26 	bl	80044ac <DMA_CalcBaseAndBitshift>
 8004060:	4603      	mov	r3, r0
 8004062:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004068:	223f      	movs	r2, #63	; 0x3f
 800406a:	409a      	lsls	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3718      	adds	r7, #24
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	f010803f 	.word	0xf010803f

0800408c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
 8004098:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800409a:	2300      	movs	r3, #0
 800409c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d101      	bne.n	80040b2 <HAL_DMA_Start_IT+0x26>
 80040ae:	2302      	movs	r3, #2
 80040b0:	e040      	b.n	8004134 <HAL_DMA_Start_IT+0xa8>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d12f      	bne.n	8004126 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2202      	movs	r2, #2
 80040ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	68b9      	ldr	r1, [r7, #8]
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 f9b8 	bl	8004450 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e4:	223f      	movs	r2, #63	; 0x3f
 80040e6:	409a      	lsls	r2, r3
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0216 	orr.w	r2, r2, #22
 80040fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004100:	2b00      	cmp	r3, #0
 8004102:	d007      	beq.n	8004114 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0208 	orr.w	r2, r2, #8
 8004112:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0201 	orr.w	r2, r2, #1
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	e005      	b.n	8004132 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800412e:	2302      	movs	r3, #2
 8004130:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004132:	7dfb      	ldrb	r3, [r7, #23]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004148:	4b8e      	ldr	r3, [pc, #568]	; (8004384 <HAL_DMA_IRQHandler+0x248>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a8e      	ldr	r2, [pc, #568]	; (8004388 <HAL_DMA_IRQHandler+0x24c>)
 800414e:	fba2 2303 	umull	r2, r3, r2, r3
 8004152:	0a9b      	lsrs	r3, r3, #10
 8004154:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004166:	2208      	movs	r2, #8
 8004168:	409a      	lsls	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	4013      	ands	r3, r2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d01a      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b00      	cmp	r3, #0
 800417e:	d013      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0204 	bic.w	r2, r2, #4
 800418e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004194:	2208      	movs	r2, #8
 8004196:	409a      	lsls	r2, r3
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a0:	f043 0201 	orr.w	r2, r3, #1
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ac:	2201      	movs	r2, #1
 80041ae:	409a      	lsls	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4013      	ands	r3, r2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d012      	beq.n	80041de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00b      	beq.n	80041de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ca:	2201      	movs	r2, #1
 80041cc:	409a      	lsls	r2, r3
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d6:	f043 0202 	orr.w	r2, r3, #2
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e2:	2204      	movs	r2, #4
 80041e4:	409a      	lsls	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4013      	ands	r3, r2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d012      	beq.n	8004214 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00b      	beq.n	8004214 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004200:	2204      	movs	r2, #4
 8004202:	409a      	lsls	r2, r3
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420c:	f043 0204 	orr.w	r2, r3, #4
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004218:	2210      	movs	r2, #16
 800421a:	409a      	lsls	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4013      	ands	r3, r2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d043      	beq.n	80042ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b00      	cmp	r3, #0
 8004230:	d03c      	beq.n	80042ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004236:	2210      	movs	r2, #16
 8004238:	409a      	lsls	r2, r3
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d018      	beq.n	800427e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d108      	bne.n	800426c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	2b00      	cmp	r3, #0
 8004260:	d024      	beq.n	80042ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	4798      	blx	r3
 800426a:	e01f      	b.n	80042ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004270:	2b00      	cmp	r3, #0
 8004272:	d01b      	beq.n	80042ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	4798      	blx	r3
 800427c:	e016      	b.n	80042ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004288:	2b00      	cmp	r3, #0
 800428a:	d107      	bne.n	800429c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0208 	bic.w	r2, r2, #8
 800429a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d003      	beq.n	80042ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b0:	2220      	movs	r2, #32
 80042b2:	409a      	lsls	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4013      	ands	r3, r2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f000 808f 	beq.w	80043dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0310 	and.w	r3, r3, #16
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 8087 	beq.w	80043dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d2:	2220      	movs	r2, #32
 80042d4:	409a      	lsls	r2, r3
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b05      	cmp	r3, #5
 80042e4:	d136      	bne.n	8004354 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0216 	bic.w	r2, r2, #22
 80042f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	695a      	ldr	r2, [r3, #20]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004304:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	2b00      	cmp	r3, #0
 800430c:	d103      	bne.n	8004316 <HAL_DMA_IRQHandler+0x1da>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004312:	2b00      	cmp	r3, #0
 8004314:	d007      	beq.n	8004326 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0208 	bic.w	r2, r2, #8
 8004324:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800432a:	223f      	movs	r2, #63	; 0x3f
 800432c:	409a      	lsls	r2, r3
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004346:	2b00      	cmp	r3, #0
 8004348:	d07e      	beq.n	8004448 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	4798      	blx	r3
        }
        return;
 8004352:	e079      	b.n	8004448 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d01d      	beq.n	800439e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10d      	bne.n	800438c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004374:	2b00      	cmp	r3, #0
 8004376:	d031      	beq.n	80043dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	4798      	blx	r3
 8004380:	e02c      	b.n	80043dc <HAL_DMA_IRQHandler+0x2a0>
 8004382:	bf00      	nop
 8004384:	200005c0 	.word	0x200005c0
 8004388:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004390:	2b00      	cmp	r3, #0
 8004392:	d023      	beq.n	80043dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	4798      	blx	r3
 800439c:	e01e      	b.n	80043dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10f      	bne.n	80043cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0210 	bic.w	r2, r2, #16
 80043ba:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d032      	beq.n	800444a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d022      	beq.n	8004436 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2205      	movs	r2, #5
 80043f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0201 	bic.w	r2, r2, #1
 8004406:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	3301      	adds	r3, #1
 800440c:	60bb      	str	r3, [r7, #8]
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	429a      	cmp	r2, r3
 8004412:	d307      	bcc.n	8004424 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f2      	bne.n	8004408 <HAL_DMA_IRQHandler+0x2cc>
 8004422:	e000      	b.n	8004426 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004424:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800443a:	2b00      	cmp	r3, #0
 800443c:	d005      	beq.n	800444a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	4798      	blx	r3
 8004446:	e000      	b.n	800444a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004448:	bf00      	nop
    }
  }
}
 800444a:	3718      	adds	r7, #24
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
 800445c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800446c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2b40      	cmp	r3, #64	; 0x40
 800447c:	d108      	bne.n	8004490 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800448e:	e007      	b.n	80044a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	60da      	str	r2, [r3, #12]
}
 80044a0:	bf00      	nop
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	3b10      	subs	r3, #16
 80044bc:	4a14      	ldr	r2, [pc, #80]	; (8004510 <DMA_CalcBaseAndBitshift+0x64>)
 80044be:	fba2 2303 	umull	r2, r3, r2, r3
 80044c2:	091b      	lsrs	r3, r3, #4
 80044c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80044c6:	4a13      	ldr	r2, [pc, #76]	; (8004514 <DMA_CalcBaseAndBitshift+0x68>)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4413      	add	r3, r2
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	461a      	mov	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b03      	cmp	r3, #3
 80044d8:	d909      	bls.n	80044ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044e2:	f023 0303 	bic.w	r3, r3, #3
 80044e6:	1d1a      	adds	r2, r3, #4
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	659a      	str	r2, [r3, #88]	; 0x58
 80044ec:	e007      	b.n	80044fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044f6:	f023 0303 	bic.w	r3, r3, #3
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004502:	4618      	mov	r0, r3
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	aaaaaaab 	.word	0xaaaaaaab
 8004514:	08007d74 	.word	0x08007d74

08004518 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004520:	2300      	movs	r3, #0
 8004522:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004528:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d11f      	bne.n	8004572 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2b03      	cmp	r3, #3
 8004536:	d856      	bhi.n	80045e6 <DMA_CheckFifoParam+0xce>
 8004538:	a201      	add	r2, pc, #4	; (adr r2, 8004540 <DMA_CheckFifoParam+0x28>)
 800453a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453e:	bf00      	nop
 8004540:	08004551 	.word	0x08004551
 8004544:	08004563 	.word	0x08004563
 8004548:	08004551 	.word	0x08004551
 800454c:	080045e7 	.word	0x080045e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004554:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d046      	beq.n	80045ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004560:	e043      	b.n	80045ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004566:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800456a:	d140      	bne.n	80045ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004570:	e03d      	b.n	80045ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800457a:	d121      	bne.n	80045c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2b03      	cmp	r3, #3
 8004580:	d837      	bhi.n	80045f2 <DMA_CheckFifoParam+0xda>
 8004582:	a201      	add	r2, pc, #4	; (adr r2, 8004588 <DMA_CheckFifoParam+0x70>)
 8004584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004588:	08004599 	.word	0x08004599
 800458c:	0800459f 	.word	0x0800459f
 8004590:	08004599 	.word	0x08004599
 8004594:	080045b1 	.word	0x080045b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	73fb      	strb	r3, [r7, #15]
      break;
 800459c:	e030      	b.n	8004600 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d025      	beq.n	80045f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045ae:	e022      	b.n	80045f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045b8:	d11f      	bne.n	80045fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80045be:	e01c      	b.n	80045fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d903      	bls.n	80045ce <DMA_CheckFifoParam+0xb6>
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2b03      	cmp	r3, #3
 80045ca:	d003      	beq.n	80045d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80045cc:	e018      	b.n	8004600 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	73fb      	strb	r3, [r7, #15]
      break;
 80045d2:	e015      	b.n	8004600 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00e      	beq.n	80045fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	73fb      	strb	r3, [r7, #15]
      break;
 80045e4:	e00b      	b.n	80045fe <DMA_CheckFifoParam+0xe6>
      break;
 80045e6:	bf00      	nop
 80045e8:	e00a      	b.n	8004600 <DMA_CheckFifoParam+0xe8>
      break;
 80045ea:	bf00      	nop
 80045ec:	e008      	b.n	8004600 <DMA_CheckFifoParam+0xe8>
      break;
 80045ee:	bf00      	nop
 80045f0:	e006      	b.n	8004600 <DMA_CheckFifoParam+0xe8>
      break;
 80045f2:	bf00      	nop
 80045f4:	e004      	b.n	8004600 <DMA_CheckFifoParam+0xe8>
      break;
 80045f6:	bf00      	nop
 80045f8:	e002      	b.n	8004600 <DMA_CheckFifoParam+0xe8>
      break;   
 80045fa:	bf00      	nop
 80045fc:	e000      	b.n	8004600 <DMA_CheckFifoParam+0xe8>
      break;
 80045fe:	bf00      	nop
    }
  } 
  
  return status; 
 8004600:	7bfb      	ldrb	r3, [r7, #15]
}
 8004602:	4618      	mov	r0, r3
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop

08004610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004610:	b480      	push	{r7}
 8004612:	b089      	sub	sp, #36	; 0x24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800461a:	2300      	movs	r3, #0
 800461c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800461e:	2300      	movs	r3, #0
 8004620:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004622:	2300      	movs	r3, #0
 8004624:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004626:	2300      	movs	r3, #0
 8004628:	61fb      	str	r3, [r7, #28]
 800462a:	e159      	b.n	80048e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800462c:	2201      	movs	r2, #1
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	4013      	ands	r3, r2
 800463e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	429a      	cmp	r2, r3
 8004646:	f040 8148 	bne.w	80048da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d00b      	beq.n	800466a <HAL_GPIO_Init+0x5a>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2b02      	cmp	r3, #2
 8004658:	d007      	beq.n	800466a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800465e:	2b11      	cmp	r3, #17
 8004660:	d003      	beq.n	800466a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b12      	cmp	r3, #18
 8004668:	d130      	bne.n	80046cc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	005b      	lsls	r3, r3, #1
 8004674:	2203      	movs	r2, #3
 8004676:	fa02 f303 	lsl.w	r3, r2, r3
 800467a:	43db      	mvns	r3, r3
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	4013      	ands	r3, r2
 8004680:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	fa02 f303 	lsl.w	r3, r2, r3
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	4313      	orrs	r3, r2
 8004692:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046a0:	2201      	movs	r2, #1
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	fa02 f303 	lsl.w	r3, r2, r3
 80046a8:	43db      	mvns	r3, r3
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	4013      	ands	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	091b      	lsrs	r3, r3, #4
 80046b6:	f003 0201 	and.w	r2, r3, #1
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	fa02 f303 	lsl.w	r3, r2, r3
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	2203      	movs	r2, #3
 80046d8:	fa02 f303 	lsl.w	r3, r2, r3
 80046dc:	43db      	mvns	r3, r3
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	4013      	ands	r3, r2
 80046e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	2b02      	cmp	r3, #2
 8004702:	d003      	beq.n	800470c <HAL_GPIO_Init+0xfc>
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2b12      	cmp	r3, #18
 800470a:	d123      	bne.n	8004754 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	08da      	lsrs	r2, r3, #3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3208      	adds	r2, #8
 8004714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004718:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	220f      	movs	r2, #15
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	43db      	mvns	r3, r3
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	4013      	ands	r3, r2
 800472e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	691a      	ldr	r2, [r3, #16]
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	f003 0307 	and.w	r3, r3, #7
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	4313      	orrs	r3, r2
 8004744:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	08da      	lsrs	r2, r3, #3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3208      	adds	r2, #8
 800474e:	69b9      	ldr	r1, [r7, #24]
 8004750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	2203      	movs	r2, #3
 8004760:	fa02 f303 	lsl.w	r3, r2, r3
 8004764:	43db      	mvns	r3, r3
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	4013      	ands	r3, r2
 800476a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f003 0203 	and.w	r2, r3, #3
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	fa02 f303 	lsl.w	r3, r2, r3
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	4313      	orrs	r3, r2
 8004780:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 80a2 	beq.w	80048da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004796:	2300      	movs	r3, #0
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	4b57      	ldr	r3, [pc, #348]	; (80048f8 <HAL_GPIO_Init+0x2e8>)
 800479c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479e:	4a56      	ldr	r2, [pc, #344]	; (80048f8 <HAL_GPIO_Init+0x2e8>)
 80047a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047a4:	6453      	str	r3, [r2, #68]	; 0x44
 80047a6:	4b54      	ldr	r3, [pc, #336]	; (80048f8 <HAL_GPIO_Init+0x2e8>)
 80047a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ae:	60fb      	str	r3, [r7, #12]
 80047b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047b2:	4a52      	ldr	r2, [pc, #328]	; (80048fc <HAL_GPIO_Init+0x2ec>)
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	089b      	lsrs	r3, r3, #2
 80047b8:	3302      	adds	r3, #2
 80047ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	220f      	movs	r2, #15
 80047ca:	fa02 f303 	lsl.w	r3, r2, r3
 80047ce:	43db      	mvns	r3, r3
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	4013      	ands	r3, r2
 80047d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a49      	ldr	r2, [pc, #292]	; (8004900 <HAL_GPIO_Init+0x2f0>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d019      	beq.n	8004812 <HAL_GPIO_Init+0x202>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a48      	ldr	r2, [pc, #288]	; (8004904 <HAL_GPIO_Init+0x2f4>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d013      	beq.n	800480e <HAL_GPIO_Init+0x1fe>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a47      	ldr	r2, [pc, #284]	; (8004908 <HAL_GPIO_Init+0x2f8>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d00d      	beq.n	800480a <HAL_GPIO_Init+0x1fa>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a46      	ldr	r2, [pc, #280]	; (800490c <HAL_GPIO_Init+0x2fc>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d007      	beq.n	8004806 <HAL_GPIO_Init+0x1f6>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a45      	ldr	r2, [pc, #276]	; (8004910 <HAL_GPIO_Init+0x300>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d101      	bne.n	8004802 <HAL_GPIO_Init+0x1f2>
 80047fe:	2304      	movs	r3, #4
 8004800:	e008      	b.n	8004814 <HAL_GPIO_Init+0x204>
 8004802:	2307      	movs	r3, #7
 8004804:	e006      	b.n	8004814 <HAL_GPIO_Init+0x204>
 8004806:	2303      	movs	r3, #3
 8004808:	e004      	b.n	8004814 <HAL_GPIO_Init+0x204>
 800480a:	2302      	movs	r3, #2
 800480c:	e002      	b.n	8004814 <HAL_GPIO_Init+0x204>
 800480e:	2301      	movs	r3, #1
 8004810:	e000      	b.n	8004814 <HAL_GPIO_Init+0x204>
 8004812:	2300      	movs	r3, #0
 8004814:	69fa      	ldr	r2, [r7, #28]
 8004816:	f002 0203 	and.w	r2, r2, #3
 800481a:	0092      	lsls	r2, r2, #2
 800481c:	4093      	lsls	r3, r2
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	4313      	orrs	r3, r2
 8004822:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004824:	4935      	ldr	r1, [pc, #212]	; (80048fc <HAL_GPIO_Init+0x2ec>)
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	089b      	lsrs	r3, r3, #2
 800482a:	3302      	adds	r3, #2
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004832:	4b38      	ldr	r3, [pc, #224]	; (8004914 <HAL_GPIO_Init+0x304>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	43db      	mvns	r3, r3
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	4013      	ands	r3, r2
 8004840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	4313      	orrs	r3, r2
 8004854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004856:	4a2f      	ldr	r2, [pc, #188]	; (8004914 <HAL_GPIO_Init+0x304>)
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800485c:	4b2d      	ldr	r3, [pc, #180]	; (8004914 <HAL_GPIO_Init+0x304>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	43db      	mvns	r3, r3
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	4013      	ands	r3, r2
 800486a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d003      	beq.n	8004880 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	4313      	orrs	r3, r2
 800487e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004880:	4a24      	ldr	r2, [pc, #144]	; (8004914 <HAL_GPIO_Init+0x304>)
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004886:	4b23      	ldr	r3, [pc, #140]	; (8004914 <HAL_GPIO_Init+0x304>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	43db      	mvns	r3, r3
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	4013      	ands	r3, r2
 8004894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048aa:	4a1a      	ldr	r2, [pc, #104]	; (8004914 <HAL_GPIO_Init+0x304>)
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048b0:	4b18      	ldr	r3, [pc, #96]	; (8004914 <HAL_GPIO_Init+0x304>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	43db      	mvns	r3, r3
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	4013      	ands	r3, r2
 80048be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d003      	beq.n	80048d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048d4:	4a0f      	ldr	r2, [pc, #60]	; (8004914 <HAL_GPIO_Init+0x304>)
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	3301      	adds	r3, #1
 80048de:	61fb      	str	r3, [r7, #28]
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	2b0f      	cmp	r3, #15
 80048e4:	f67f aea2 	bls.w	800462c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048e8:	bf00      	nop
 80048ea:	bf00      	nop
 80048ec:	3724      	adds	r7, #36	; 0x24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	40023800 	.word	0x40023800
 80048fc:	40013800 	.word	0x40013800
 8004900:	40020000 	.word	0x40020000
 8004904:	40020400 	.word	0x40020400
 8004908:	40020800 	.word	0x40020800
 800490c:	40020c00 	.word	0x40020c00
 8004910:	40021000 	.word	0x40021000
 8004914:	40013c00 	.word	0x40013c00

08004918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	460b      	mov	r3, r1
 8004922:	807b      	strh	r3, [r7, #2]
 8004924:	4613      	mov	r3, r2
 8004926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004928:	787b      	ldrb	r3, [r7, #1]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800492e:	887a      	ldrh	r2, [r7, #2]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004934:	e003      	b.n	800493e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004936:	887b      	ldrh	r3, [r7, #2]
 8004938:	041a      	lsls	r2, r3, #16
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	619a      	str	r2, [r3, #24]
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
	...

0800494c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e12b      	b.n	8004bb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d106      	bne.n	8004978 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7fe faaa 	bl	8002ecc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2224      	movs	r2, #36	; 0x24
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 0201 	bic.w	r2, r2, #1
 800498e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800499e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049b0:	f001 fbb2 	bl	8006118 <HAL_RCC_GetPCLK1Freq>
 80049b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	4a81      	ldr	r2, [pc, #516]	; (8004bc0 <HAL_I2C_Init+0x274>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d807      	bhi.n	80049d0 <HAL_I2C_Init+0x84>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4a80      	ldr	r2, [pc, #512]	; (8004bc4 <HAL_I2C_Init+0x278>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	bf94      	ite	ls
 80049c8:	2301      	movls	r3, #1
 80049ca:	2300      	movhi	r3, #0
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	e006      	b.n	80049de <HAL_I2C_Init+0x92>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4a7d      	ldr	r2, [pc, #500]	; (8004bc8 <HAL_I2C_Init+0x27c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	bf94      	ite	ls
 80049d8:	2301      	movls	r3, #1
 80049da:	2300      	movhi	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e0e7      	b.n	8004bb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	4a78      	ldr	r2, [pc, #480]	; (8004bcc <HAL_I2C_Init+0x280>)
 80049ea:	fba2 2303 	umull	r2, r3, r2, r3
 80049ee:	0c9b      	lsrs	r3, r3, #18
 80049f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	4a6a      	ldr	r2, [pc, #424]	; (8004bc0 <HAL_I2C_Init+0x274>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d802      	bhi.n	8004a20 <HAL_I2C_Init+0xd4>
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	e009      	b.n	8004a34 <HAL_I2C_Init+0xe8>
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a26:	fb02 f303 	mul.w	r3, r2, r3
 8004a2a:	4a69      	ldr	r2, [pc, #420]	; (8004bd0 <HAL_I2C_Init+0x284>)
 8004a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a30:	099b      	lsrs	r3, r3, #6
 8004a32:	3301      	adds	r3, #1
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6812      	ldr	r2, [r2, #0]
 8004a38:	430b      	orrs	r3, r1
 8004a3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	495c      	ldr	r1, [pc, #368]	; (8004bc0 <HAL_I2C_Init+0x274>)
 8004a50:	428b      	cmp	r3, r1
 8004a52:	d819      	bhi.n	8004a88 <HAL_I2C_Init+0x13c>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	1e59      	subs	r1, r3, #1
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a62:	1c59      	adds	r1, r3, #1
 8004a64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a68:	400b      	ands	r3, r1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00a      	beq.n	8004a84 <HAL_I2C_Init+0x138>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	1e59      	subs	r1, r3, #1
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a82:	e051      	b.n	8004b28 <HAL_I2C_Init+0x1dc>
 8004a84:	2304      	movs	r3, #4
 8004a86:	e04f      	b.n	8004b28 <HAL_I2C_Init+0x1dc>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d111      	bne.n	8004ab4 <HAL_I2C_Init+0x168>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	1e58      	subs	r0, r3, #1
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6859      	ldr	r1, [r3, #4]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	440b      	add	r3, r1
 8004a9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	bf0c      	ite	eq
 8004aac:	2301      	moveq	r3, #1
 8004aae:	2300      	movne	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	e012      	b.n	8004ada <HAL_I2C_Init+0x18e>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	1e58      	subs	r0, r3, #1
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6859      	ldr	r1, [r3, #4]
 8004abc:	460b      	mov	r3, r1
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	440b      	add	r3, r1
 8004ac2:	0099      	lsls	r1, r3, #2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aca:	3301      	adds	r3, #1
 8004acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	bf0c      	ite	eq
 8004ad4:	2301      	moveq	r3, #1
 8004ad6:	2300      	movne	r3, #0
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <HAL_I2C_Init+0x196>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e022      	b.n	8004b28 <HAL_I2C_Init+0x1dc>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10e      	bne.n	8004b08 <HAL_I2C_Init+0x1bc>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	1e58      	subs	r0, r3, #1
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6859      	ldr	r1, [r3, #4]
 8004af2:	460b      	mov	r3, r1
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	440b      	add	r3, r1
 8004af8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004afc:	3301      	adds	r3, #1
 8004afe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b06:	e00f      	b.n	8004b28 <HAL_I2C_Init+0x1dc>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	1e58      	subs	r0, r3, #1
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6859      	ldr	r1, [r3, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	440b      	add	r3, r1
 8004b16:	0099      	lsls	r1, r3, #2
 8004b18:	440b      	add	r3, r1
 8004b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b1e:	3301      	adds	r3, #1
 8004b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b28:	6879      	ldr	r1, [r7, #4]
 8004b2a:	6809      	ldr	r1, [r1, #0]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	69da      	ldr	r2, [r3, #28]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	431a      	orrs	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	6911      	ldr	r1, [r2, #16]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	68d2      	ldr	r2, [r2, #12]
 8004b62:	4311      	orrs	r1, r2
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6812      	ldr	r2, [r2, #0]
 8004b68:	430b      	orrs	r3, r1
 8004b6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	695a      	ldr	r2, [r3, #20]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0201 	orr.w	r2, r2, #1
 8004b96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	000186a0 	.word	0x000186a0
 8004bc4:	001e847f 	.word	0x001e847f
 8004bc8:	003d08ff 	.word	0x003d08ff
 8004bcc:	431bde83 	.word	0x431bde83
 8004bd0:	10624dd3 	.word	0x10624dd3

08004bd4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b088      	sub	sp, #32
 8004bd8:	af02      	add	r7, sp, #8
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	4608      	mov	r0, r1
 8004bde:	4611      	mov	r1, r2
 8004be0:	461a      	mov	r2, r3
 8004be2:	4603      	mov	r3, r0
 8004be4:	817b      	strh	r3, [r7, #10]
 8004be6:	460b      	mov	r3, r1
 8004be8:	813b      	strh	r3, [r7, #8]
 8004bea:	4613      	mov	r3, r2
 8004bec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bee:	f7fe fbd1 	bl	8003394 <HAL_GetTick>
 8004bf2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b20      	cmp	r3, #32
 8004bfe:	f040 80d9 	bne.w	8004db4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	2319      	movs	r3, #25
 8004c08:	2201      	movs	r2, #1
 8004c0a:	496d      	ldr	r1, [pc, #436]	; (8004dc0 <HAL_I2C_Mem_Write+0x1ec>)
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 fc7f 	bl	8005510 <I2C_WaitOnFlagUntilTimeout>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d001      	beq.n	8004c1c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004c18:	2302      	movs	r3, #2
 8004c1a:	e0cc      	b.n	8004db6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d101      	bne.n	8004c2a <HAL_I2C_Mem_Write+0x56>
 8004c26:	2302      	movs	r3, #2
 8004c28:	e0c5      	b.n	8004db6 <HAL_I2C_Mem_Write+0x1e2>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d007      	beq.n	8004c50 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0201 	orr.w	r2, r2, #1
 8004c4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2221      	movs	r2, #33	; 0x21
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2240      	movs	r2, #64	; 0x40
 8004c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6a3a      	ldr	r2, [r7, #32]
 8004c7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4a4d      	ldr	r2, [pc, #308]	; (8004dc4 <HAL_I2C_Mem_Write+0x1f0>)
 8004c90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c92:	88f8      	ldrh	r0, [r7, #6]
 8004c94:	893a      	ldrh	r2, [r7, #8]
 8004c96:	8979      	ldrh	r1, [r7, #10]
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	9301      	str	r3, [sp, #4]
 8004c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9e:	9300      	str	r3, [sp, #0]
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f000 fab6 	bl	8005214 <I2C_RequestMemoryWrite>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d052      	beq.n	8004d54 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e081      	b.n	8004db6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f000 fd00 	bl	80056bc <I2C_WaitOnTXEFlagUntilTimeout>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00d      	beq.n	8004cde <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	2b04      	cmp	r3, #4
 8004cc8:	d107      	bne.n	8004cda <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cd8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e06b      	b.n	8004db6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	781a      	ldrb	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	1c5a      	adds	r2, r3, #1
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	3b01      	subs	r3, #1
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	2b04      	cmp	r3, #4
 8004d1a:	d11b      	bne.n	8004d54 <HAL_I2C_Mem_Write+0x180>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d017      	beq.n	8004d54 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	781a      	ldrb	r2, [r3, #0]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	1c5a      	adds	r2, r3, #1
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1aa      	bne.n	8004cb2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 fcec 	bl	800573e <I2C_WaitOnBTFFlagUntilTimeout>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00d      	beq.n	8004d88 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d70:	2b04      	cmp	r3, #4
 8004d72:	d107      	bne.n	8004d84 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d82:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e016      	b.n	8004db6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004db0:	2300      	movs	r3, #0
 8004db2:	e000      	b.n	8004db6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004db4:	2302      	movs	r3, #2
  }
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	00100002 	.word	0x00100002
 8004dc4:	ffff0000 	.word	0xffff0000

08004dc8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b08c      	sub	sp, #48	; 0x30
 8004dcc:	af02      	add	r7, sp, #8
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	4608      	mov	r0, r1
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	817b      	strh	r3, [r7, #10]
 8004dda:	460b      	mov	r3, r1
 8004ddc:	813b      	strh	r3, [r7, #8]
 8004dde:	4613      	mov	r3, r2
 8004de0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004de2:	f7fe fad7 	bl	8003394 <HAL_GetTick>
 8004de6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b20      	cmp	r3, #32
 8004df2:	f040 8208 	bne.w	8005206 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	2319      	movs	r3, #25
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	497b      	ldr	r1, [pc, #492]	; (8004fec <HAL_I2C_Mem_Read+0x224>)
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 fb85 	bl	8005510 <I2C_WaitOnFlagUntilTimeout>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	e1fb      	b.n	8005208 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <HAL_I2C_Mem_Read+0x56>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	e1f4      	b.n	8005208 <HAL_I2C_Mem_Read+0x440>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d007      	beq.n	8004e44 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f042 0201 	orr.w	r2, r2, #1
 8004e42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2222      	movs	r2, #34	; 0x22
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2240      	movs	r2, #64	; 0x40
 8004e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004e74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4a5b      	ldr	r2, [pc, #364]	; (8004ff0 <HAL_I2C_Mem_Read+0x228>)
 8004e84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e86:	88f8      	ldrh	r0, [r7, #6]
 8004e88:	893a      	ldrh	r2, [r7, #8]
 8004e8a:	8979      	ldrh	r1, [r7, #10]
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	9301      	str	r3, [sp, #4]
 8004e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	4603      	mov	r3, r0
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f000 fa52 	bl	8005340 <I2C_RequestMemoryRead>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e1b0      	b.n	8005208 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d113      	bne.n	8004ed6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eae:	2300      	movs	r3, #0
 8004eb0:	623b      	str	r3, [r7, #32]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	623b      	str	r3, [r7, #32]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	623b      	str	r3, [r7, #32]
 8004ec2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	e184      	b.n	80051e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d11b      	bne.n	8004f16 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61fb      	str	r3, [r7, #28]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	61fb      	str	r3, [r7, #28]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	61fb      	str	r3, [r7, #28]
 8004f02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f12:	601a      	str	r2, [r3, #0]
 8004f14:	e164      	b.n	80051e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d11b      	bne.n	8004f56 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f2c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61bb      	str	r3, [r7, #24]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	61bb      	str	r3, [r7, #24]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	61bb      	str	r3, [r7, #24]
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	e144      	b.n	80051e0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f56:	2300      	movs	r3, #0
 8004f58:	617b      	str	r3, [r7, #20]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	617b      	str	r3, [r7, #20]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	617b      	str	r3, [r7, #20]
 8004f6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004f6c:	e138      	b.n	80051e0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f72:	2b03      	cmp	r3, #3
 8004f74:	f200 80f1 	bhi.w	800515a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d123      	bne.n	8004fc8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 fc1b 	bl	80057c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d001      	beq.n	8004f94 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e139      	b.n	8005208 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	691a      	ldr	r2, [r3, #16]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	1c5a      	adds	r2, r3, #1
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fc6:	e10b      	b.n	80051e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d14e      	bne.n	800506e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	4906      	ldr	r1, [pc, #24]	; (8004ff4 <HAL_I2C_Mem_Read+0x22c>)
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f000 fa98 	bl	8005510 <I2C_WaitOnFlagUntilTimeout>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d008      	beq.n	8004ff8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e10e      	b.n	8005208 <HAL_I2C_Mem_Read+0x440>
 8004fea:	bf00      	nop
 8004fec:	00100002 	.word	0x00100002
 8004ff0:	ffff0000 	.word	0xffff0000
 8004ff4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005006:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	691a      	ldr	r2, [r3, #16]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005012:	b2d2      	uxtb	r2, r2
 8005014:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	1c5a      	adds	r2, r3, #1
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005024:	3b01      	subs	r3, #1
 8005026:	b29a      	uxth	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005030:	b29b      	uxth	r3, r3
 8005032:	3b01      	subs	r3, #1
 8005034:	b29a      	uxth	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	b2d2      	uxtb	r2, r2
 8005046:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005056:	3b01      	subs	r3, #1
 8005058:	b29a      	uxth	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005062:	b29b      	uxth	r3, r3
 8005064:	3b01      	subs	r3, #1
 8005066:	b29a      	uxth	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800506c:	e0b8      	b.n	80051e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005074:	2200      	movs	r2, #0
 8005076:	4966      	ldr	r1, [pc, #408]	; (8005210 <HAL_I2C_Mem_Read+0x448>)
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f000 fa49 	bl	8005510 <I2C_WaitOnFlagUntilTimeout>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d001      	beq.n	8005088 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e0bf      	b.n	8005208 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005096:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	691a      	ldr	r2, [r3, #16]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a2:	b2d2      	uxtb	r2, r2
 80050a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b4:	3b01      	subs	r3, #1
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	3b01      	subs	r3, #1
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d0:	2200      	movs	r2, #0
 80050d2:	494f      	ldr	r1, [pc, #316]	; (8005210 <HAL_I2C_Mem_Read+0x448>)
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f000 fa1b 	bl	8005510 <I2C_WaitOnFlagUntilTimeout>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d001      	beq.n	80050e4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e091      	b.n	8005208 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691a      	ldr	r2, [r3, #16]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005110:	3b01      	subs	r3, #1
 8005112:	b29a      	uxth	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511c:	b29b      	uxth	r3, r3
 800511e:	3b01      	subs	r3, #1
 8005120:	b29a      	uxth	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	691a      	ldr	r2, [r3, #16]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	b2d2      	uxtb	r2, r2
 8005132:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005142:	3b01      	subs	r3, #1
 8005144:	b29a      	uxth	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800514e:	b29b      	uxth	r3, r3
 8005150:	3b01      	subs	r3, #1
 8005152:	b29a      	uxth	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005158:	e042      	b.n	80051e0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800515a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800515c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 fb2e 	bl	80057c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e04c      	b.n	8005208 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	691a      	ldr	r2, [r3, #16]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	b2d2      	uxtb	r2, r2
 800517a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005180:	1c5a      	adds	r2, r3, #1
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800518a:	3b01      	subs	r3, #1
 800518c:	b29a      	uxth	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005196:	b29b      	uxth	r3, r3
 8005198:	3b01      	subs	r3, #1
 800519a:	b29a      	uxth	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	f003 0304 	and.w	r3, r3, #4
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d118      	bne.n	80051e0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	691a      	ldr	r2, [r3, #16]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	b2d2      	uxtb	r2, r2
 80051ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ca:	3b01      	subs	r3, #1
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	3b01      	subs	r3, #1
 80051da:	b29a      	uxth	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f47f aec2 	bne.w	8004f6e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2220      	movs	r2, #32
 80051ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005202:	2300      	movs	r3, #0
 8005204:	e000      	b.n	8005208 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005206:	2302      	movs	r3, #2
  }
}
 8005208:	4618      	mov	r0, r3
 800520a:	3728      	adds	r7, #40	; 0x28
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	00010004 	.word	0x00010004

08005214 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b088      	sub	sp, #32
 8005218:	af02      	add	r7, sp, #8
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	4608      	mov	r0, r1
 800521e:	4611      	mov	r1, r2
 8005220:	461a      	mov	r2, r3
 8005222:	4603      	mov	r3, r0
 8005224:	817b      	strh	r3, [r7, #10]
 8005226:	460b      	mov	r3, r1
 8005228:	813b      	strh	r3, [r7, #8]
 800522a:	4613      	mov	r3, r2
 800522c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800523c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	2200      	movs	r2, #0
 8005246:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 f960 	bl	8005510 <I2C_WaitOnFlagUntilTimeout>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00d      	beq.n	8005272 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005264:	d103      	bne.n	800526e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f44f 7200 	mov.w	r2, #512	; 0x200
 800526c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e05f      	b.n	8005332 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005272:	897b      	ldrh	r3, [r7, #10]
 8005274:	b2db      	uxtb	r3, r3
 8005276:	461a      	mov	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005280:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	6a3a      	ldr	r2, [r7, #32]
 8005286:	492d      	ldr	r1, [pc, #180]	; (800533c <I2C_RequestMemoryWrite+0x128>)
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 f998 	bl	80055be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e04c      	b.n	8005332 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005298:	2300      	movs	r3, #0
 800529a:	617b      	str	r3, [r7, #20]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	617b      	str	r3, [r7, #20]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	617b      	str	r3, [r7, #20]
 80052ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b0:	6a39      	ldr	r1, [r7, #32]
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f000 fa02 	bl	80056bc <I2C_WaitOnTXEFlagUntilTimeout>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00d      	beq.n	80052da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	2b04      	cmp	r3, #4
 80052c4:	d107      	bne.n	80052d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e02b      	b.n	8005332 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052da:	88fb      	ldrh	r3, [r7, #6]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d105      	bne.n	80052ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052e0:	893b      	ldrh	r3, [r7, #8]
 80052e2:	b2da      	uxtb	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	611a      	str	r2, [r3, #16]
 80052ea:	e021      	b.n	8005330 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80052ec:	893b      	ldrh	r3, [r7, #8]
 80052ee:	0a1b      	lsrs	r3, r3, #8
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052fc:	6a39      	ldr	r1, [r7, #32]
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 f9dc 	bl	80056bc <I2C_WaitOnTXEFlagUntilTimeout>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00d      	beq.n	8005326 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	2b04      	cmp	r3, #4
 8005310:	d107      	bne.n	8005322 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005320:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e005      	b.n	8005332 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005326:	893b      	ldrh	r3, [r7, #8]
 8005328:	b2da      	uxtb	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3718      	adds	r7, #24
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	00010002 	.word	0x00010002

08005340 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b088      	sub	sp, #32
 8005344:	af02      	add	r7, sp, #8
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	4608      	mov	r0, r1
 800534a:	4611      	mov	r1, r2
 800534c:	461a      	mov	r2, r3
 800534e:	4603      	mov	r3, r0
 8005350:	817b      	strh	r3, [r7, #10]
 8005352:	460b      	mov	r3, r1
 8005354:	813b      	strh	r3, [r7, #8]
 8005356:	4613      	mov	r3, r2
 8005358:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005368:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005378:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	2200      	movs	r2, #0
 8005382:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f000 f8c2 	bl	8005510 <I2C_WaitOnFlagUntilTimeout>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00d      	beq.n	80053ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800539c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053a0:	d103      	bne.n	80053aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e0aa      	b.n	8005504 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053ae:	897b      	ldrh	r3, [r7, #10]
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	461a      	mov	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	6a3a      	ldr	r2, [r7, #32]
 80053c2:	4952      	ldr	r1, [pc, #328]	; (800550c <I2C_RequestMemoryRead+0x1cc>)
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f000 f8fa 	bl	80055be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e097      	b.n	8005504 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053d4:	2300      	movs	r3, #0
 80053d6:	617b      	str	r3, [r7, #20]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	617b      	str	r3, [r7, #20]
 80053e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ec:	6a39      	ldr	r1, [r7, #32]
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f000 f964 	bl	80056bc <I2C_WaitOnTXEFlagUntilTimeout>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00d      	beq.n	8005416 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fe:	2b04      	cmp	r3, #4
 8005400:	d107      	bne.n	8005412 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005410:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e076      	b.n	8005504 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005416:	88fb      	ldrh	r3, [r7, #6]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d105      	bne.n	8005428 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800541c:	893b      	ldrh	r3, [r7, #8]
 800541e:	b2da      	uxtb	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	611a      	str	r2, [r3, #16]
 8005426:	e021      	b.n	800546c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005428:	893b      	ldrh	r3, [r7, #8]
 800542a:	0a1b      	lsrs	r3, r3, #8
 800542c:	b29b      	uxth	r3, r3
 800542e:	b2da      	uxtb	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005438:	6a39      	ldr	r1, [r7, #32]
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f000 f93e 	bl	80056bc <I2C_WaitOnTXEFlagUntilTimeout>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00d      	beq.n	8005462 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	2b04      	cmp	r3, #4
 800544c:	d107      	bne.n	800545e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800545c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e050      	b.n	8005504 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005462:	893b      	ldrh	r3, [r7, #8]
 8005464:	b2da      	uxtb	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800546c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800546e:	6a39      	ldr	r1, [r7, #32]
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 f923 	bl	80056bc <I2C_WaitOnTXEFlagUntilTimeout>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00d      	beq.n	8005498 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005480:	2b04      	cmp	r3, #4
 8005482:	d107      	bne.n	8005494 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005492:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e035      	b.n	8005504 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	9300      	str	r3, [sp, #0]
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 f82b 	bl	8005510 <I2C_WaitOnFlagUntilTimeout>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00d      	beq.n	80054dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ce:	d103      	bne.n	80054d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e013      	b.n	8005504 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80054dc:	897b      	ldrh	r3, [r7, #10]
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	f043 0301 	orr.w	r3, r3, #1
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ee:	6a3a      	ldr	r2, [r7, #32]
 80054f0:	4906      	ldr	r1, [pc, #24]	; (800550c <I2C_RequestMemoryRead+0x1cc>)
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f000 f863 	bl	80055be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d001      	beq.n	8005502 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e000      	b.n	8005504 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3718      	adds	r7, #24
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	00010002 	.word	0x00010002

08005510 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	603b      	str	r3, [r7, #0]
 800551c:	4613      	mov	r3, r2
 800551e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005520:	e025      	b.n	800556e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005528:	d021      	beq.n	800556e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800552a:	f7fd ff33 	bl	8003394 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	429a      	cmp	r2, r3
 8005538:	d302      	bcc.n	8005540 <I2C_WaitOnFlagUntilTimeout+0x30>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d116      	bne.n	800556e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2220      	movs	r2, #32
 800554a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555a:	f043 0220 	orr.w	r2, r3, #32
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e023      	b.n	80055b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	0c1b      	lsrs	r3, r3, #16
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b01      	cmp	r3, #1
 8005576:	d10d      	bne.n	8005594 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	43da      	mvns	r2, r3
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	4013      	ands	r3, r2
 8005584:	b29b      	uxth	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	bf0c      	ite	eq
 800558a:	2301      	moveq	r3, #1
 800558c:	2300      	movne	r3, #0
 800558e:	b2db      	uxtb	r3, r3
 8005590:	461a      	mov	r2, r3
 8005592:	e00c      	b.n	80055ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	43da      	mvns	r2, r3
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	4013      	ands	r3, r2
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	bf0c      	ite	eq
 80055a6:	2301      	moveq	r3, #1
 80055a8:	2300      	movne	r3, #0
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	461a      	mov	r2, r3
 80055ae:	79fb      	ldrb	r3, [r7, #7]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d0b6      	beq.n	8005522 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b084      	sub	sp, #16
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	60f8      	str	r0, [r7, #12]
 80055c6:	60b9      	str	r1, [r7, #8]
 80055c8:	607a      	str	r2, [r7, #4]
 80055ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055cc:	e051      	b.n	8005672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055dc:	d123      	bne.n	8005626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2220      	movs	r2, #32
 8005602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	f043 0204 	orr.w	r2, r3, #4
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e046      	b.n	80056b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562c:	d021      	beq.n	8005672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800562e:	f7fd feb1 	bl	8003394 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	429a      	cmp	r2, r3
 800563c:	d302      	bcc.n	8005644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d116      	bne.n	8005672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2220      	movs	r2, #32
 800564e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565e:	f043 0220 	orr.w	r2, r3, #32
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e020      	b.n	80056b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	0c1b      	lsrs	r3, r3, #16
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b01      	cmp	r3, #1
 800567a:	d10c      	bne.n	8005696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	43da      	mvns	r2, r3
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	4013      	ands	r3, r2
 8005688:	b29b      	uxth	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	bf14      	ite	ne
 800568e:	2301      	movne	r3, #1
 8005690:	2300      	moveq	r3, #0
 8005692:	b2db      	uxtb	r3, r3
 8005694:	e00b      	b.n	80056ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	43da      	mvns	r2, r3
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	4013      	ands	r3, r2
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	bf14      	ite	ne
 80056a8:	2301      	movne	r3, #1
 80056aa:	2300      	moveq	r3, #0
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d18d      	bne.n	80055ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056c8:	e02d      	b.n	8005726 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f000 f8ce 	bl	800586c <I2C_IsAcknowledgeFailed>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d001      	beq.n	80056da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e02d      	b.n	8005736 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e0:	d021      	beq.n	8005726 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056e2:	f7fd fe57 	bl	8003394 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d302      	bcc.n	80056f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d116      	bne.n	8005726 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2220      	movs	r2, #32
 8005702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005712:	f043 0220 	orr.w	r2, r3, #32
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e007      	b.n	8005736 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005730:	2b80      	cmp	r3, #128	; 0x80
 8005732:	d1ca      	bne.n	80056ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b084      	sub	sp, #16
 8005742:	af00      	add	r7, sp, #0
 8005744:	60f8      	str	r0, [r7, #12]
 8005746:	60b9      	str	r1, [r7, #8]
 8005748:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800574a:	e02d      	b.n	80057a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f000 f88d 	bl	800586c <I2C_IsAcknowledgeFailed>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d001      	beq.n	800575c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e02d      	b.n	80057b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005762:	d021      	beq.n	80057a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005764:	f7fd fe16 	bl	8003394 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	429a      	cmp	r2, r3
 8005772:	d302      	bcc.n	800577a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d116      	bne.n	80057a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2220      	movs	r2, #32
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005794:	f043 0220 	orr.w	r2, r3, #32
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e007      	b.n	80057b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	f003 0304 	and.w	r3, r3, #4
 80057b2:	2b04      	cmp	r3, #4
 80057b4:	d1ca      	bne.n	800574c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057cc:	e042      	b.n	8005854 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	f003 0310 	and.w	r3, r3, #16
 80057d8:	2b10      	cmp	r3, #16
 80057da:	d119      	bne.n	8005810 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f06f 0210 	mvn.w	r2, #16
 80057e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2220      	movs	r2, #32
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e029      	b.n	8005864 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005810:	f7fd fdc0 	bl	8003394 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	429a      	cmp	r2, r3
 800581e:	d302      	bcc.n	8005826 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d116      	bne.n	8005854 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2220      	movs	r2, #32
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005840:	f043 0220 	orr.w	r2, r3, #32
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e007      	b.n	8005864 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800585e:	2b40      	cmp	r3, #64	; 0x40
 8005860:	d1b5      	bne.n	80057ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800587e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005882:	d11b      	bne.n	80058bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800588c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2220      	movs	r2, #32
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a8:	f043 0204 	orr.w	r2, r3, #4
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e000      	b.n	80058be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
	...

080058cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e25e      	b.n	8005d9c <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d075      	beq.n	80059d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058ea:	4b88      	ldr	r3, [pc, #544]	; (8005b0c <HAL_RCC_OscConfig+0x240>)
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f003 030c 	and.w	r3, r3, #12
 80058f2:	2b04      	cmp	r3, #4
 80058f4:	d00c      	beq.n	8005910 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058f6:	4b85      	ldr	r3, [pc, #532]	; (8005b0c <HAL_RCC_OscConfig+0x240>)
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058fe:	2b08      	cmp	r3, #8
 8005900:	d112      	bne.n	8005928 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005902:	4b82      	ldr	r3, [pc, #520]	; (8005b0c <HAL_RCC_OscConfig+0x240>)
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800590a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800590e:	d10b      	bne.n	8005928 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005910:	4b7e      	ldr	r3, [pc, #504]	; (8005b0c <HAL_RCC_OscConfig+0x240>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d05b      	beq.n	80059d4 <HAL_RCC_OscConfig+0x108>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d157      	bne.n	80059d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e239      	b.n	8005d9c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005930:	d106      	bne.n	8005940 <HAL_RCC_OscConfig+0x74>
 8005932:	4b76      	ldr	r3, [pc, #472]	; (8005b0c <HAL_RCC_OscConfig+0x240>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a75      	ldr	r2, [pc, #468]	; (8005b0c <HAL_RCC_OscConfig+0x240>)
 8005938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800593c:	6013      	str	r3, [r2, #0]
 800593e:	e01d      	b.n	800597c <HAL_RCC_OscConfig+0xb0>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005948:	d10c      	bne.n	8005964 <HAL_RCC_OscConfig+0x98>
 800594a:	4b70      	ldr	r3, [pc, #448]	; (8005b0c <HAL_RCC_OscConfig+0x240>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a6f      	ldr	r2, [pc, #444]	; (8005b0c <HAL_RCC_OscConfig+0x240>)
 8005950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005954:	6013      	str	r3, [r2, #0]
 8005956:	4b6d      	ldr	r3, [pc, #436]	; (8005b0c <HAL_RCC_OscConfig+0x240>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a6c      	ldr	r2, [pc, #432]	; (8005b0c <HAL_RCC_OscConfig+0x240>)
 800595c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005960:	6013      	str	r3, [r2, #0]
 8005962:	e00b      	b.n	800597c <HAL_RCC_OscConfig+0xb0>
 8005964:	4b69      	ldr	r3, [pc, #420]	; (8005b0c <HAL_RCC_OscConfig+0x240>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a68      	ldr	r2, [pc, #416]	; (8005b0c <HAL_RCC_OscConfig+0x240>)
 800596a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800596e:	6013      	str	r3, [r2, #0]
 8005970:	4b66      	ldr	r3, [pc, #408]	; (8005b0c <HAL_RCC_OscConfig+0x240>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a65      	ldr	r2, [pc, #404]	; (8005b0c <HAL_RCC_OscConfig+0x240>)
 8005976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800597a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d013      	beq.n	80059ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005984:	f7fd fd06 	bl	8003394 <HAL_GetTick>
 8005988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800598a:	e008      	b.n	800599e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800598c:	f7fd fd02 	bl	8003394 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b64      	cmp	r3, #100	; 0x64
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e1fe      	b.n	8005d9c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800599e:	4b5b      	ldr	r3, [pc, #364]	; (8005b0c <HAL_RCC_OscConfig+0x240>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d0f0      	beq.n	800598c <HAL_RCC_OscConfig+0xc0>
 80059aa:	e014      	b.n	80059d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059ac:	f7fd fcf2 	bl	8003394 <HAL_GetTick>
 80059b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059b2:	e008      	b.n	80059c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059b4:	f7fd fcee 	bl	8003394 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b64      	cmp	r3, #100	; 0x64
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e1ea      	b.n	8005d9c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059c6:	4b51      	ldr	r3, [pc, #324]	; (8005b0c <HAL_RCC_OscConfig+0x240>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1f0      	bne.n	80059b4 <HAL_RCC_OscConfig+0xe8>
 80059d2:	e000      	b.n	80059d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d063      	beq.n	8005aaa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059e2:	4b4a      	ldr	r3, [pc, #296]	; (8005b0c <HAL_RCC_OscConfig+0x240>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f003 030c 	and.w	r3, r3, #12
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00b      	beq.n	8005a06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059ee:	4b47      	ldr	r3, [pc, #284]	; (8005b0c <HAL_RCC_OscConfig+0x240>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059f6:	2b08      	cmp	r3, #8
 80059f8:	d11c      	bne.n	8005a34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059fa:	4b44      	ldr	r3, [pc, #272]	; (8005b0c <HAL_RCC_OscConfig+0x240>)
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d116      	bne.n	8005a34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a06:	4b41      	ldr	r3, [pc, #260]	; (8005b0c <HAL_RCC_OscConfig+0x240>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d005      	beq.n	8005a1e <HAL_RCC_OscConfig+0x152>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d001      	beq.n	8005a1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e1be      	b.n	8005d9c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a1e:	4b3b      	ldr	r3, [pc, #236]	; (8005b0c <HAL_RCC_OscConfig+0x240>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	00db      	lsls	r3, r3, #3
 8005a2c:	4937      	ldr	r1, [pc, #220]	; (8005b0c <HAL_RCC_OscConfig+0x240>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a32:	e03a      	b.n	8005aaa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d020      	beq.n	8005a7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a3c:	4b34      	ldr	r3, [pc, #208]	; (8005b10 <HAL_RCC_OscConfig+0x244>)
 8005a3e:	2201      	movs	r2, #1
 8005a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a42:	f7fd fca7 	bl	8003394 <HAL_GetTick>
 8005a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a48:	e008      	b.n	8005a5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a4a:	f7fd fca3 	bl	8003394 <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d901      	bls.n	8005a5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e19f      	b.n	8005d9c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a5c:	4b2b      	ldr	r3, [pc, #172]	; (8005b0c <HAL_RCC_OscConfig+0x240>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0302 	and.w	r3, r3, #2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d0f0      	beq.n	8005a4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a68:	4b28      	ldr	r3, [pc, #160]	; (8005b0c <HAL_RCC_OscConfig+0x240>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	00db      	lsls	r3, r3, #3
 8005a76:	4925      	ldr	r1, [pc, #148]	; (8005b0c <HAL_RCC_OscConfig+0x240>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	600b      	str	r3, [r1, #0]
 8005a7c:	e015      	b.n	8005aaa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a7e:	4b24      	ldr	r3, [pc, #144]	; (8005b10 <HAL_RCC_OscConfig+0x244>)
 8005a80:	2200      	movs	r2, #0
 8005a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a84:	f7fd fc86 	bl	8003394 <HAL_GetTick>
 8005a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a8a:	e008      	b.n	8005a9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a8c:	f7fd fc82 	bl	8003394 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d901      	bls.n	8005a9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e17e      	b.n	8005d9c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a9e:	4b1b      	ldr	r3, [pc, #108]	; (8005b0c <HAL_RCC_OscConfig+0x240>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1f0      	bne.n	8005a8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0308 	and.w	r3, r3, #8
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d036      	beq.n	8005b24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d016      	beq.n	8005aec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005abe:	4b15      	ldr	r3, [pc, #84]	; (8005b14 <HAL_RCC_OscConfig+0x248>)
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ac4:	f7fd fc66 	bl	8003394 <HAL_GetTick>
 8005ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005aca:	e008      	b.n	8005ade <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005acc:	f7fd fc62 	bl	8003394 <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d901      	bls.n	8005ade <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e15e      	b.n	8005d9c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ade:	4b0b      	ldr	r3, [pc, #44]	; (8005b0c <HAL_RCC_OscConfig+0x240>)
 8005ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d0f0      	beq.n	8005acc <HAL_RCC_OscConfig+0x200>
 8005aea:	e01b      	b.n	8005b24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005aec:	4b09      	ldr	r3, [pc, #36]	; (8005b14 <HAL_RCC_OscConfig+0x248>)
 8005aee:	2200      	movs	r2, #0
 8005af0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005af2:	f7fd fc4f 	bl	8003394 <HAL_GetTick>
 8005af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005af8:	e00e      	b.n	8005b18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005afa:	f7fd fc4b 	bl	8003394 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d907      	bls.n	8005b18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e147      	b.n	8005d9c <HAL_RCC_OscConfig+0x4d0>
 8005b0c:	40023800 	.word	0x40023800
 8005b10:	42470000 	.word	0x42470000
 8005b14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b18:	4b88      	ldr	r3, [pc, #544]	; (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b1c:	f003 0302 	and.w	r3, r3, #2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1ea      	bne.n	8005afa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0304 	and.w	r3, r3, #4
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f000 8097 	beq.w	8005c60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b32:	2300      	movs	r3, #0
 8005b34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b36:	4b81      	ldr	r3, [pc, #516]	; (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10f      	bne.n	8005b62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b42:	2300      	movs	r3, #0
 8005b44:	60bb      	str	r3, [r7, #8]
 8005b46:	4b7d      	ldr	r3, [pc, #500]	; (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4a:	4a7c      	ldr	r2, [pc, #496]	; (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b50:	6413      	str	r3, [r2, #64]	; 0x40
 8005b52:	4b7a      	ldr	r3, [pc, #488]	; (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b5a:	60bb      	str	r3, [r7, #8]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b62:	4b77      	ldr	r3, [pc, #476]	; (8005d40 <HAL_RCC_OscConfig+0x474>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d118      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b6e:	4b74      	ldr	r3, [pc, #464]	; (8005d40 <HAL_RCC_OscConfig+0x474>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a73      	ldr	r2, [pc, #460]	; (8005d40 <HAL_RCC_OscConfig+0x474>)
 8005b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b7a:	f7fd fc0b 	bl	8003394 <HAL_GetTick>
 8005b7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b80:	e008      	b.n	8005b94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b82:	f7fd fc07 	bl	8003394 <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d901      	bls.n	8005b94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e103      	b.n	8005d9c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b94:	4b6a      	ldr	r3, [pc, #424]	; (8005d40 <HAL_RCC_OscConfig+0x474>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d0f0      	beq.n	8005b82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d106      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x2ea>
 8005ba8:	4b64      	ldr	r3, [pc, #400]	; (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bac:	4a63      	ldr	r2, [pc, #396]	; (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005bae:	f043 0301 	orr.w	r3, r3, #1
 8005bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8005bb4:	e01c      	b.n	8005bf0 <HAL_RCC_OscConfig+0x324>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	2b05      	cmp	r3, #5
 8005bbc:	d10c      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x30c>
 8005bbe:	4b5f      	ldr	r3, [pc, #380]	; (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc2:	4a5e      	ldr	r2, [pc, #376]	; (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005bc4:	f043 0304 	orr.w	r3, r3, #4
 8005bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8005bca:	4b5c      	ldr	r3, [pc, #368]	; (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bce:	4a5b      	ldr	r2, [pc, #364]	; (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005bd0:	f043 0301 	orr.w	r3, r3, #1
 8005bd4:	6713      	str	r3, [r2, #112]	; 0x70
 8005bd6:	e00b      	b.n	8005bf0 <HAL_RCC_OscConfig+0x324>
 8005bd8:	4b58      	ldr	r3, [pc, #352]	; (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bdc:	4a57      	ldr	r2, [pc, #348]	; (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005bde:	f023 0301 	bic.w	r3, r3, #1
 8005be2:	6713      	str	r3, [r2, #112]	; 0x70
 8005be4:	4b55      	ldr	r3, [pc, #340]	; (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be8:	4a54      	ldr	r2, [pc, #336]	; (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005bea:	f023 0304 	bic.w	r3, r3, #4
 8005bee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d015      	beq.n	8005c24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bf8:	f7fd fbcc 	bl	8003394 <HAL_GetTick>
 8005bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bfe:	e00a      	b.n	8005c16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c00:	f7fd fbc8 	bl	8003394 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e0c2      	b.n	8005d9c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c16:	4b49      	ldr	r3, [pc, #292]	; (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0ee      	beq.n	8005c00 <HAL_RCC_OscConfig+0x334>
 8005c22:	e014      	b.n	8005c4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c24:	f7fd fbb6 	bl	8003394 <HAL_GetTick>
 8005c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c2a:	e00a      	b.n	8005c42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c2c:	f7fd fbb2 	bl	8003394 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e0ac      	b.n	8005d9c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c42:	4b3e      	ldr	r3, [pc, #248]	; (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1ee      	bne.n	8005c2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c4e:	7dfb      	ldrb	r3, [r7, #23]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d105      	bne.n	8005c60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c54:	4b39      	ldr	r3, [pc, #228]	; (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c58:	4a38      	ldr	r2, [pc, #224]	; (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 8098 	beq.w	8005d9a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c6a:	4b34      	ldr	r3, [pc, #208]	; (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f003 030c 	and.w	r3, r3, #12
 8005c72:	2b08      	cmp	r3, #8
 8005c74:	d05c      	beq.n	8005d30 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d141      	bne.n	8005d02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c7e:	4b31      	ldr	r3, [pc, #196]	; (8005d44 <HAL_RCC_OscConfig+0x478>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c84:	f7fd fb86 	bl	8003394 <HAL_GetTick>
 8005c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c8a:	e008      	b.n	8005c9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c8c:	f7fd fb82 	bl	8003394 <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d901      	bls.n	8005c9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e07e      	b.n	8005d9c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c9e:	4b27      	ldr	r3, [pc, #156]	; (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1f0      	bne.n	8005c8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	69da      	ldr	r2, [r3, #28]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb8:	019b      	lsls	r3, r3, #6
 8005cba:	431a      	orrs	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc0:	085b      	lsrs	r3, r3, #1
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	041b      	lsls	r3, r3, #16
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ccc:	061b      	lsls	r3, r3, #24
 8005cce:	491b      	ldr	r1, [pc, #108]	; (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cd4:	4b1b      	ldr	r3, [pc, #108]	; (8005d44 <HAL_RCC_OscConfig+0x478>)
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cda:	f7fd fb5b 	bl	8003394 <HAL_GetTick>
 8005cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ce0:	e008      	b.n	8005cf4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ce2:	f7fd fb57 	bl	8003394 <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d901      	bls.n	8005cf4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e053      	b.n	8005d9c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cf4:	4b11      	ldr	r3, [pc, #68]	; (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d0f0      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x416>
 8005d00:	e04b      	b.n	8005d9a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d02:	4b10      	ldr	r3, [pc, #64]	; (8005d44 <HAL_RCC_OscConfig+0x478>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d08:	f7fd fb44 	bl	8003394 <HAL_GetTick>
 8005d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d0e:	e008      	b.n	8005d22 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d10:	f7fd fb40 	bl	8003394 <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d901      	bls.n	8005d22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e03c      	b.n	8005d9c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d22:	4b06      	ldr	r3, [pc, #24]	; (8005d3c <HAL_RCC_OscConfig+0x470>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1f0      	bne.n	8005d10 <HAL_RCC_OscConfig+0x444>
 8005d2e:	e034      	b.n	8005d9a <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d107      	bne.n	8005d48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e02f      	b.n	8005d9c <HAL_RCC_OscConfig+0x4d0>
 8005d3c:	40023800 	.word	0x40023800
 8005d40:	40007000 	.word	0x40007000
 8005d44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d48:	4b16      	ldr	r3, [pc, #88]	; (8005da4 <HAL_RCC_OscConfig+0x4d8>)
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	69db      	ldr	r3, [r3, #28]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d11c      	bne.n	8005d96 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d115      	bne.n	8005d96 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d70:	4013      	ands	r3, r2
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d10d      	bne.n	8005d96 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d106      	bne.n	8005d96 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d001      	beq.n	8005d9a <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e000      	b.n	8005d9c <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3718      	adds	r7, #24
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	40023800 	.word	0x40023800

08005da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e0cc      	b.n	8005f56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005dbc:	4b68      	ldr	r3, [pc, #416]	; (8005f60 <HAL_RCC_ClockConfig+0x1b8>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 030f 	and.w	r3, r3, #15
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d90c      	bls.n	8005de4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dca:	4b65      	ldr	r3, [pc, #404]	; (8005f60 <HAL_RCC_ClockConfig+0x1b8>)
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	b2d2      	uxtb	r2, r2
 8005dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dd2:	4b63      	ldr	r3, [pc, #396]	; (8005f60 <HAL_RCC_ClockConfig+0x1b8>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 030f 	and.w	r3, r3, #15
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d001      	beq.n	8005de4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e0b8      	b.n	8005f56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d020      	beq.n	8005e32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0304 	and.w	r3, r3, #4
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d005      	beq.n	8005e08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005dfc:	4b59      	ldr	r3, [pc, #356]	; (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	4a58      	ldr	r2, [pc, #352]	; (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005e02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0308 	and.w	r3, r3, #8
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d005      	beq.n	8005e20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e14:	4b53      	ldr	r3, [pc, #332]	; (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	4a52      	ldr	r2, [pc, #328]	; (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005e1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e20:	4b50      	ldr	r3, [pc, #320]	; (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	494d      	ldr	r1, [pc, #308]	; (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d044      	beq.n	8005ec8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d107      	bne.n	8005e56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e46:	4b47      	ldr	r3, [pc, #284]	; (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d119      	bne.n	8005e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e07f      	b.n	8005f56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d003      	beq.n	8005e66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e62:	2b03      	cmp	r3, #3
 8005e64:	d107      	bne.n	8005e76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e66:	4b3f      	ldr	r3, [pc, #252]	; (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d109      	bne.n	8005e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e06f      	b.n	8005f56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e76:	4b3b      	ldr	r3, [pc, #236]	; (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e067      	b.n	8005f56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e86:	4b37      	ldr	r3, [pc, #220]	; (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f023 0203 	bic.w	r2, r3, #3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	4934      	ldr	r1, [pc, #208]	; (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e98:	f7fd fa7c 	bl	8003394 <HAL_GetTick>
 8005e9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e9e:	e00a      	b.n	8005eb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ea0:	f7fd fa78 	bl	8003394 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d901      	bls.n	8005eb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e04f      	b.n	8005f56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eb6:	4b2b      	ldr	r3, [pc, #172]	; (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f003 020c 	and.w	r2, r3, #12
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d1eb      	bne.n	8005ea0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ec8:	4b25      	ldr	r3, [pc, #148]	; (8005f60 <HAL_RCC_ClockConfig+0x1b8>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 030f 	and.w	r3, r3, #15
 8005ed0:	683a      	ldr	r2, [r7, #0]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d20c      	bcs.n	8005ef0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ed6:	4b22      	ldr	r3, [pc, #136]	; (8005f60 <HAL_RCC_ClockConfig+0x1b8>)
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ede:	4b20      	ldr	r3, [pc, #128]	; (8005f60 <HAL_RCC_ClockConfig+0x1b8>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 030f 	and.w	r3, r3, #15
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d001      	beq.n	8005ef0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e032      	b.n	8005f56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0304 	and.w	r3, r3, #4
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d008      	beq.n	8005f0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005efc:	4b19      	ldr	r3, [pc, #100]	; (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	4916      	ldr	r1, [pc, #88]	; (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0308 	and.w	r3, r3, #8
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d009      	beq.n	8005f2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f1a:	4b12      	ldr	r3, [pc, #72]	; (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	00db      	lsls	r3, r3, #3
 8005f28:	490e      	ldr	r1, [pc, #56]	; (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f2e:	f000 f821 	bl	8005f74 <HAL_RCC_GetSysClockFreq>
 8005f32:	4602      	mov	r2, r0
 8005f34:	4b0b      	ldr	r3, [pc, #44]	; (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	091b      	lsrs	r3, r3, #4
 8005f3a:	f003 030f 	and.w	r3, r3, #15
 8005f3e:	490a      	ldr	r1, [pc, #40]	; (8005f68 <HAL_RCC_ClockConfig+0x1c0>)
 8005f40:	5ccb      	ldrb	r3, [r1, r3]
 8005f42:	fa22 f303 	lsr.w	r3, r2, r3
 8005f46:	4a09      	ldr	r2, [pc, #36]	; (8005f6c <HAL_RCC_ClockConfig+0x1c4>)
 8005f48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f4a:	4b09      	ldr	r3, [pc, #36]	; (8005f70 <HAL_RCC_ClockConfig+0x1c8>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fd f9dc 	bl	800330c <HAL_InitTick>

  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	40023c00 	.word	0x40023c00
 8005f64:	40023800 	.word	0x40023800
 8005f68:	08007d5c 	.word	0x08007d5c
 8005f6c:	200005c0 	.word	0x200005c0
 8005f70:	200005c4 	.word	0x200005c4

08005f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f78:	b090      	sub	sp, #64	; 0x40
 8005f7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	637b      	str	r3, [r7, #52]	; 0x34
 8005f80:	2300      	movs	r3, #0
 8005f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f84:	2300      	movs	r3, #0
 8005f86:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f8c:	4b59      	ldr	r3, [pc, #356]	; (80060f4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f003 030c 	and.w	r3, r3, #12
 8005f94:	2b08      	cmp	r3, #8
 8005f96:	d00d      	beq.n	8005fb4 <HAL_RCC_GetSysClockFreq+0x40>
 8005f98:	2b08      	cmp	r3, #8
 8005f9a:	f200 80a1 	bhi.w	80060e0 <HAL_RCC_GetSysClockFreq+0x16c>
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d002      	beq.n	8005fa8 <HAL_RCC_GetSysClockFreq+0x34>
 8005fa2:	2b04      	cmp	r3, #4
 8005fa4:	d003      	beq.n	8005fae <HAL_RCC_GetSysClockFreq+0x3a>
 8005fa6:	e09b      	b.n	80060e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005fa8:	4b53      	ldr	r3, [pc, #332]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005faa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005fac:	e09b      	b.n	80060e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005fae:	4b53      	ldr	r3, [pc, #332]	; (80060fc <HAL_RCC_GetSysClockFreq+0x188>)
 8005fb0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005fb2:	e098      	b.n	80060e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fb4:	4b4f      	ldr	r3, [pc, #316]	; (80060f4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fbc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fbe:	4b4d      	ldr	r3, [pc, #308]	; (80060f4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d028      	beq.n	800601c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fca:	4b4a      	ldr	r3, [pc, #296]	; (80060f4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	099b      	lsrs	r3, r3, #6
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	623b      	str	r3, [r7, #32]
 8005fd4:	627a      	str	r2, [r7, #36]	; 0x24
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005fdc:	2100      	movs	r1, #0
 8005fde:	4b47      	ldr	r3, [pc, #284]	; (80060fc <HAL_RCC_GetSysClockFreq+0x188>)
 8005fe0:	fb03 f201 	mul.w	r2, r3, r1
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	fb00 f303 	mul.w	r3, r0, r3
 8005fea:	4413      	add	r3, r2
 8005fec:	4a43      	ldr	r2, [pc, #268]	; (80060fc <HAL_RCC_GetSysClockFreq+0x188>)
 8005fee:	fba0 1202 	umull	r1, r2, r0, r2
 8005ff2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ff4:	460a      	mov	r2, r1
 8005ff6:	62ba      	str	r2, [r7, #40]	; 0x28
 8005ff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ffa:	4413      	add	r3, r2
 8005ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006000:	2200      	movs	r2, #0
 8006002:	61bb      	str	r3, [r7, #24]
 8006004:	61fa      	str	r2, [r7, #28]
 8006006:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800600a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800600e:	f7fa fca1 	bl	8000954 <__aeabi_uldivmod>
 8006012:	4602      	mov	r2, r0
 8006014:	460b      	mov	r3, r1
 8006016:	4613      	mov	r3, r2
 8006018:	63fb      	str	r3, [r7, #60]	; 0x3c
 800601a:	e053      	b.n	80060c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800601c:	4b35      	ldr	r3, [pc, #212]	; (80060f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	099b      	lsrs	r3, r3, #6
 8006022:	2200      	movs	r2, #0
 8006024:	613b      	str	r3, [r7, #16]
 8006026:	617a      	str	r2, [r7, #20]
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800602e:	f04f 0b00 	mov.w	fp, #0
 8006032:	4652      	mov	r2, sl
 8006034:	465b      	mov	r3, fp
 8006036:	f04f 0000 	mov.w	r0, #0
 800603a:	f04f 0100 	mov.w	r1, #0
 800603e:	0159      	lsls	r1, r3, #5
 8006040:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006044:	0150      	lsls	r0, r2, #5
 8006046:	4602      	mov	r2, r0
 8006048:	460b      	mov	r3, r1
 800604a:	ebb2 080a 	subs.w	r8, r2, sl
 800604e:	eb63 090b 	sbc.w	r9, r3, fp
 8006052:	f04f 0200 	mov.w	r2, #0
 8006056:	f04f 0300 	mov.w	r3, #0
 800605a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800605e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006062:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006066:	ebb2 0408 	subs.w	r4, r2, r8
 800606a:	eb63 0509 	sbc.w	r5, r3, r9
 800606e:	f04f 0200 	mov.w	r2, #0
 8006072:	f04f 0300 	mov.w	r3, #0
 8006076:	00eb      	lsls	r3, r5, #3
 8006078:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800607c:	00e2      	lsls	r2, r4, #3
 800607e:	4614      	mov	r4, r2
 8006080:	461d      	mov	r5, r3
 8006082:	eb14 030a 	adds.w	r3, r4, sl
 8006086:	603b      	str	r3, [r7, #0]
 8006088:	eb45 030b 	adc.w	r3, r5, fp
 800608c:	607b      	str	r3, [r7, #4]
 800608e:	f04f 0200 	mov.w	r2, #0
 8006092:	f04f 0300 	mov.w	r3, #0
 8006096:	e9d7 4500 	ldrd	r4, r5, [r7]
 800609a:	4629      	mov	r1, r5
 800609c:	028b      	lsls	r3, r1, #10
 800609e:	4621      	mov	r1, r4
 80060a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060a4:	4621      	mov	r1, r4
 80060a6:	028a      	lsls	r2, r1, #10
 80060a8:	4610      	mov	r0, r2
 80060aa:	4619      	mov	r1, r3
 80060ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ae:	2200      	movs	r2, #0
 80060b0:	60bb      	str	r3, [r7, #8]
 80060b2:	60fa      	str	r2, [r7, #12]
 80060b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060b8:	f7fa fc4c 	bl	8000954 <__aeabi_uldivmod>
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	4613      	mov	r3, r2
 80060c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80060c4:	4b0b      	ldr	r3, [pc, #44]	; (80060f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	0c1b      	lsrs	r3, r3, #16
 80060ca:	f003 0303 	and.w	r3, r3, #3
 80060ce:	3301      	adds	r3, #1
 80060d0:	005b      	lsls	r3, r3, #1
 80060d2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80060d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80060de:	e002      	b.n	80060e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060e0:	4b05      	ldr	r3, [pc, #20]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80060e2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80060e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3740      	adds	r7, #64	; 0x40
 80060ec:	46bd      	mov	sp, r7
 80060ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060f2:	bf00      	nop
 80060f4:	40023800 	.word	0x40023800
 80060f8:	00f42400 	.word	0x00f42400
 80060fc:	017d7840 	.word	0x017d7840

08006100 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006100:	b480      	push	{r7}
 8006102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006104:	4b03      	ldr	r3, [pc, #12]	; (8006114 <HAL_RCC_GetHCLKFreq+0x14>)
 8006106:	681b      	ldr	r3, [r3, #0]
}
 8006108:	4618      	mov	r0, r3
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	200005c0 	.word	0x200005c0

08006118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800611c:	f7ff fff0 	bl	8006100 <HAL_RCC_GetHCLKFreq>
 8006120:	4602      	mov	r2, r0
 8006122:	4b05      	ldr	r3, [pc, #20]	; (8006138 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	0a9b      	lsrs	r3, r3, #10
 8006128:	f003 0307 	and.w	r3, r3, #7
 800612c:	4903      	ldr	r1, [pc, #12]	; (800613c <HAL_RCC_GetPCLK1Freq+0x24>)
 800612e:	5ccb      	ldrb	r3, [r1, r3]
 8006130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006134:	4618      	mov	r0, r3
 8006136:	bd80      	pop	{r7, pc}
 8006138:	40023800 	.word	0x40023800
 800613c:	08007d6c 	.word	0x08007d6c

08006140 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d101      	bne.n	8006152 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e056      	b.n	8006200 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	d106      	bne.n	8006172 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f7fc ff07 	bl	8002f80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2202      	movs	r2, #2
 8006176:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006188:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	431a      	orrs	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	431a      	orrs	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	431a      	orrs	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	695b      	ldr	r3, [r3, #20]
 80061a4:	431a      	orrs	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061ae:	431a      	orrs	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	69db      	ldr	r3, [r3, #28]
 80061b4:	431a      	orrs	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	ea42 0103 	orr.w	r1, r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	430a      	orrs	r2, r1
 80061c8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	0c1b      	lsrs	r3, r3, #16
 80061d0:	f003 0104 	and.w	r1, r3, #4
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	430a      	orrs	r2, r1
 80061de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	69da      	ldr	r2, [r3, #28]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b088      	sub	sp, #32
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	603b      	str	r3, [r7, #0]
 8006214:	4613      	mov	r3, r2
 8006216:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006218:	2300      	movs	r3, #0
 800621a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006222:	2b01      	cmp	r3, #1
 8006224:	d101      	bne.n	800622a <HAL_SPI_Transmit+0x22>
 8006226:	2302      	movs	r3, #2
 8006228:	e11e      	b.n	8006468 <HAL_SPI_Transmit+0x260>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006232:	f7fd f8af 	bl	8003394 <HAL_GetTick>
 8006236:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006238:	88fb      	ldrh	r3, [r7, #6]
 800623a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006242:	b2db      	uxtb	r3, r3
 8006244:	2b01      	cmp	r3, #1
 8006246:	d002      	beq.n	800624e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006248:	2302      	movs	r3, #2
 800624a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800624c:	e103      	b.n	8006456 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d002      	beq.n	800625a <HAL_SPI_Transmit+0x52>
 8006254:	88fb      	ldrh	r3, [r7, #6]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d102      	bne.n	8006260 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800625e:	e0fa      	b.n	8006456 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2203      	movs	r2, #3
 8006264:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	88fa      	ldrh	r2, [r7, #6]
 8006278:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	88fa      	ldrh	r2, [r7, #6]
 800627e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062a6:	d107      	bne.n	80062b8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062b6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c2:	2b40      	cmp	r3, #64	; 0x40
 80062c4:	d007      	beq.n	80062d6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062de:	d14b      	bne.n	8006378 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d002      	beq.n	80062ee <HAL_SPI_Transmit+0xe6>
 80062e8:	8afb      	ldrh	r3, [r7, #22]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d13e      	bne.n	800636c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f2:	881a      	ldrh	r2, [r3, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fe:	1c9a      	adds	r2, r3, #2
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006308:	b29b      	uxth	r3, r3
 800630a:	3b01      	subs	r3, #1
 800630c:	b29a      	uxth	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006312:	e02b      	b.n	800636c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b02      	cmp	r3, #2
 8006320:	d112      	bne.n	8006348 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006326:	881a      	ldrh	r2, [r3, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006332:	1c9a      	adds	r2, r3, #2
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800633c:	b29b      	uxth	r3, r3
 800633e:	3b01      	subs	r3, #1
 8006340:	b29a      	uxth	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	86da      	strh	r2, [r3, #54]	; 0x36
 8006346:	e011      	b.n	800636c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006348:	f7fd f824 	bl	8003394 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	429a      	cmp	r2, r3
 8006356:	d803      	bhi.n	8006360 <HAL_SPI_Transmit+0x158>
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635e:	d102      	bne.n	8006366 <HAL_SPI_Transmit+0x15e>
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d102      	bne.n	800636c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	77fb      	strb	r3, [r7, #31]
          goto error;
 800636a:	e074      	b.n	8006456 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006370:	b29b      	uxth	r3, r3
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1ce      	bne.n	8006314 <HAL_SPI_Transmit+0x10c>
 8006376:	e04c      	b.n	8006412 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d002      	beq.n	8006386 <HAL_SPI_Transmit+0x17e>
 8006380:	8afb      	ldrh	r3, [r7, #22]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d140      	bne.n	8006408 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	330c      	adds	r3, #12
 8006390:	7812      	ldrb	r2, [r2, #0]
 8006392:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006398:	1c5a      	adds	r2, r3, #1
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	3b01      	subs	r3, #1
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80063ac:	e02c      	b.n	8006408 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d113      	bne.n	80063e4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	330c      	adds	r3, #12
 80063c6:	7812      	ldrb	r2, [r2, #0]
 80063c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ce:	1c5a      	adds	r2, r3, #1
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063d8:	b29b      	uxth	r3, r3
 80063da:	3b01      	subs	r3, #1
 80063dc:	b29a      	uxth	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80063e2:	e011      	b.n	8006408 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063e4:	f7fc ffd6 	bl	8003394 <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d803      	bhi.n	80063fc <HAL_SPI_Transmit+0x1f4>
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fa:	d102      	bne.n	8006402 <HAL_SPI_Transmit+0x1fa>
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d102      	bne.n	8006408 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006406:	e026      	b.n	8006456 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800640c:	b29b      	uxth	r3, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1cd      	bne.n	80063ae <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006412:	69ba      	ldr	r2, [r7, #24]
 8006414:	6839      	ldr	r1, [r7, #0]
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f000 f894 	bl	8006544 <SPI_EndRxTxTransaction>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d002      	beq.n	8006428 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2220      	movs	r2, #32
 8006426:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10a      	bne.n	8006446 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006430:	2300      	movs	r3, #0
 8006432:	613b      	str	r3, [r7, #16]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	613b      	str	r3, [r7, #16]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	613b      	str	r3, [r7, #16]
 8006444:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800644a:	2b00      	cmp	r3, #0
 800644c:	d002      	beq.n	8006454 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	77fb      	strb	r3, [r7, #31]
 8006452:	e000      	b.n	8006456 <HAL_SPI_Transmit+0x24e>
  }

error:
 8006454:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006466:	7ffb      	ldrb	r3, [r7, #31]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3720      	adds	r7, #32
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	603b      	str	r3, [r7, #0]
 800647c:	4613      	mov	r3, r2
 800647e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006480:	e04c      	b.n	800651c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006488:	d048      	beq.n	800651c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800648a:	f7fc ff83 	bl	8003394 <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	683a      	ldr	r2, [r7, #0]
 8006496:	429a      	cmp	r2, r3
 8006498:	d902      	bls.n	80064a0 <SPI_WaitFlagStateUntilTimeout+0x30>
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d13d      	bne.n	800651c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80064ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064b8:	d111      	bne.n	80064de <SPI_WaitFlagStateUntilTimeout+0x6e>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064c2:	d004      	beq.n	80064ce <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064cc:	d107      	bne.n	80064de <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064e6:	d10f      	bne.n	8006508 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064f6:	601a      	str	r2, [r3, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006506:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e00f      	b.n	800653c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	689a      	ldr	r2, [r3, #8]
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	4013      	ands	r3, r2
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	429a      	cmp	r2, r3
 800652a:	bf0c      	ite	eq
 800652c:	2301      	moveq	r3, #1
 800652e:	2300      	movne	r3, #0
 8006530:	b2db      	uxtb	r3, r3
 8006532:	461a      	mov	r2, r3
 8006534:	79fb      	ldrb	r3, [r7, #7]
 8006536:	429a      	cmp	r2, r3
 8006538:	d1a3      	bne.n	8006482 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b088      	sub	sp, #32
 8006548:	af02      	add	r7, sp, #8
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006550:	4b1b      	ldr	r3, [pc, #108]	; (80065c0 <SPI_EndRxTxTransaction+0x7c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a1b      	ldr	r2, [pc, #108]	; (80065c4 <SPI_EndRxTxTransaction+0x80>)
 8006556:	fba2 2303 	umull	r2, r3, r2, r3
 800655a:	0d5b      	lsrs	r3, r3, #21
 800655c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006560:	fb02 f303 	mul.w	r3, r2, r3
 8006564:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800656e:	d112      	bne.n	8006596 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2200      	movs	r2, #0
 8006578:	2180      	movs	r1, #128	; 0x80
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f7ff ff78 	bl	8006470 <SPI_WaitFlagStateUntilTimeout>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d016      	beq.n	80065b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800658a:	f043 0220 	orr.w	r2, r3, #32
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e00f      	b.n	80065b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00a      	beq.n	80065b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	3b01      	subs	r3, #1
 80065a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ac:	2b80      	cmp	r3, #128	; 0x80
 80065ae:	d0f2      	beq.n	8006596 <SPI_EndRxTxTransaction+0x52>
 80065b0:	e000      	b.n	80065b4 <SPI_EndRxTxTransaction+0x70>
        break;
 80065b2:	bf00      	nop
  }

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3718      	adds	r7, #24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	200005c0 	.word	0x200005c0
 80065c4:	165e9f81 	.word	0x165e9f81

080065c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e01d      	b.n	8006616 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d106      	bne.n	80065f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7fc fd8a 	bl	8003108 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2202      	movs	r2, #2
 80065f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	3304      	adds	r3, #4
 8006604:	4619      	mov	r1, r3
 8006606:	4610      	mov	r0, r2
 8006608:	f000 fc04 	bl	8006e14 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800661e:	b480      	push	{r7}
 8006620:	b085      	sub	sp, #20
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2202      	movs	r2, #2
 800662a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f003 0307 	and.w	r3, r3, #7
 8006638:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2b06      	cmp	r3, #6
 800663e:	d007      	beq.n	8006650 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f042 0201 	orr.w	r2, r2, #1
 800664e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006666:	b480      	push	{r7}
 8006668:	b085      	sub	sp, #20
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68da      	ldr	r2, [r3, #12]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f042 0201 	orr.w	r2, r2, #1
 800667c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f003 0307 	and.w	r3, r3, #7
 8006688:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2b06      	cmp	r3, #6
 800668e:	d007      	beq.n	80066a0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f042 0201 	orr.w	r2, r2, #1
 800669e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3714      	adds	r7, #20
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b082      	sub	sp, #8
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d101      	bne.n	80066c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e01d      	b.n	80066fc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d106      	bne.n	80066da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 f815 	bl	8006704 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2202      	movs	r2, #2
 80066de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	3304      	adds	r3, #4
 80066ea:	4619      	mov	r1, r3
 80066ec:	4610      	mov	r0, r2
 80066ee:	f000 fb91 	bl	8006e14 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3708      	adds	r7, #8
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2201      	movs	r2, #1
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	4618      	mov	r0, r3
 800672c:	f000 fe18 	bl	8007360 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a10      	ldr	r2, [pc, #64]	; (8006778 <HAL_TIM_PWM_Start+0x60>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d107      	bne.n	800674a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006748:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f003 0307 	and.w	r3, r3, #7
 8006754:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2b06      	cmp	r3, #6
 800675a:	d007      	beq.n	800676c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f042 0201 	orr.w	r2, r2, #1
 800676a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	40010000 	.word	0x40010000

0800677c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b086      	sub	sp, #24
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d101      	bne.n	8006790 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e083      	b.n	8006898 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b00      	cmp	r3, #0
 800679a:	d106      	bne.n	80067aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f7fc fc33 	bl	8003010 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2202      	movs	r2, #2
 80067ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	6812      	ldr	r2, [r2, #0]
 80067bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067c0:	f023 0307 	bic.w	r3, r3, #7
 80067c4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	3304      	adds	r3, #4
 80067ce:	4619      	mov	r1, r3
 80067d0:	4610      	mov	r0, r2
 80067d2:	f000 fb1f 	bl	8006e14 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067fe:	f023 0303 	bic.w	r3, r3, #3
 8006802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	689a      	ldr	r2, [r3, #8]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	021b      	lsls	r3, r3, #8
 800680e:	4313      	orrs	r3, r2
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	4313      	orrs	r3, r2
 8006814:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800681c:	f023 030c 	bic.w	r3, r3, #12
 8006820:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006828:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800682c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	68da      	ldr	r2, [r3, #12]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	69db      	ldr	r3, [r3, #28]
 8006836:	021b      	lsls	r3, r3, #8
 8006838:	4313      	orrs	r3, r2
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	4313      	orrs	r3, r2
 800683e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	011a      	lsls	r2, r3, #4
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	031b      	lsls	r3, r3, #12
 800684c:	4313      	orrs	r3, r2
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	4313      	orrs	r3, r2
 8006852:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800685a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006862:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	685a      	ldr	r2, [r3, #4]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	695b      	ldr	r3, [r3, #20]
 800686c:	011b      	lsls	r3, r3, #4
 800686e:	4313      	orrs	r3, r2
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	4313      	orrs	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3718      	adds	r7, #24
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d122      	bne.n	80068fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	f003 0302 	and.w	r3, r3, #2
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d11b      	bne.n	80068fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f06f 0202 	mvn.w	r2, #2
 80068cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2201      	movs	r2, #1
 80068d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	f003 0303 	and.w	r3, r3, #3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d003      	beq.n	80068ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fa78 	bl	8006dd8 <HAL_TIM_IC_CaptureCallback>
 80068e8:	e005      	b.n	80068f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fa6a 	bl	8006dc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 fa7b 	bl	8006dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	f003 0304 	and.w	r3, r3, #4
 8006906:	2b04      	cmp	r3, #4
 8006908:	d122      	bne.n	8006950 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	f003 0304 	and.w	r3, r3, #4
 8006914:	2b04      	cmp	r3, #4
 8006916:	d11b      	bne.n	8006950 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f06f 0204 	mvn.w	r2, #4
 8006920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2202      	movs	r2, #2
 8006926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006932:	2b00      	cmp	r3, #0
 8006934:	d003      	beq.n	800693e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fa4e 	bl	8006dd8 <HAL_TIM_IC_CaptureCallback>
 800693c:	e005      	b.n	800694a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fa40 	bl	8006dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 fa51 	bl	8006dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	f003 0308 	and.w	r3, r3, #8
 800695a:	2b08      	cmp	r3, #8
 800695c:	d122      	bne.n	80069a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	f003 0308 	and.w	r3, r3, #8
 8006968:	2b08      	cmp	r3, #8
 800696a:	d11b      	bne.n	80069a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f06f 0208 	mvn.w	r2, #8
 8006974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2204      	movs	r2, #4
 800697a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	69db      	ldr	r3, [r3, #28]
 8006982:	f003 0303 	and.w	r3, r3, #3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d003      	beq.n	8006992 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fa24 	bl	8006dd8 <HAL_TIM_IC_CaptureCallback>
 8006990:	e005      	b.n	800699e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fa16 	bl	8006dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 fa27 	bl	8006dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	f003 0310 	and.w	r3, r3, #16
 80069ae:	2b10      	cmp	r3, #16
 80069b0:	d122      	bne.n	80069f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	f003 0310 	and.w	r3, r3, #16
 80069bc:	2b10      	cmp	r3, #16
 80069be:	d11b      	bne.n	80069f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f06f 0210 	mvn.w	r2, #16
 80069c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2208      	movs	r2, #8
 80069ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	69db      	ldr	r3, [r3, #28]
 80069d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d003      	beq.n	80069e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f9fa 	bl	8006dd8 <HAL_TIM_IC_CaptureCallback>
 80069e4:	e005      	b.n	80069f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f9ec 	bl	8006dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 f9fd 	bl	8006dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d10e      	bne.n	8006a24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	f003 0301 	and.w	r3, r3, #1
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d107      	bne.n	8006a24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f06f 0201 	mvn.w	r2, #1
 8006a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7fa fed4 	bl	80017cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a2e:	2b80      	cmp	r3, #128	; 0x80
 8006a30:	d10e      	bne.n	8006a50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a3c:	2b80      	cmp	r3, #128	; 0x80
 8006a3e:	d107      	bne.n	8006a50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fd26 	bl	800749c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a5a:	2b40      	cmp	r3, #64	; 0x40
 8006a5c:	d10e      	bne.n	8006a7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a68:	2b40      	cmp	r3, #64	; 0x40
 8006a6a:	d107      	bne.n	8006a7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f9c2 	bl	8006e00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	f003 0320 	and.w	r3, r3, #32
 8006a86:	2b20      	cmp	r3, #32
 8006a88:	d10e      	bne.n	8006aa8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	f003 0320 	and.w	r3, r3, #32
 8006a94:	2b20      	cmp	r3, #32
 8006a96:	d107      	bne.n	8006aa8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f06f 0220 	mvn.w	r2, #32
 8006aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fcf0 	bl	8007488 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006aa8:	bf00      	nop
 8006aaa:	3708      	adds	r7, #8
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d101      	bne.n	8006aca <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006ac6:	2302      	movs	r3, #2
 8006ac8:	e0b4      	b.n	8006c34 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2202      	movs	r2, #2
 8006ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2b0c      	cmp	r3, #12
 8006ade:	f200 809f 	bhi.w	8006c20 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006ae2:	a201      	add	r2, pc, #4	; (adr r2, 8006ae8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae8:	08006b1d 	.word	0x08006b1d
 8006aec:	08006c21 	.word	0x08006c21
 8006af0:	08006c21 	.word	0x08006c21
 8006af4:	08006c21 	.word	0x08006c21
 8006af8:	08006b5d 	.word	0x08006b5d
 8006afc:	08006c21 	.word	0x08006c21
 8006b00:	08006c21 	.word	0x08006c21
 8006b04:	08006c21 	.word	0x08006c21
 8006b08:	08006b9f 	.word	0x08006b9f
 8006b0c:	08006c21 	.word	0x08006c21
 8006b10:	08006c21 	.word	0x08006c21
 8006b14:	08006c21 	.word	0x08006c21
 8006b18:	08006bdf 	.word	0x08006bdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68b9      	ldr	r1, [r7, #8]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f000 f9f6 	bl	8006f14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	699a      	ldr	r2, [r3, #24]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f042 0208 	orr.w	r2, r2, #8
 8006b36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	699a      	ldr	r2, [r3, #24]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f022 0204 	bic.w	r2, r2, #4
 8006b46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6999      	ldr	r1, [r3, #24]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	691a      	ldr	r2, [r3, #16]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	430a      	orrs	r2, r1
 8006b58:	619a      	str	r2, [r3, #24]
      break;
 8006b5a:	e062      	b.n	8006c22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68b9      	ldr	r1, [r7, #8]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f000 fa3c 	bl	8006fe0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	699a      	ldr	r2, [r3, #24]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	699a      	ldr	r2, [r3, #24]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6999      	ldr	r1, [r3, #24]
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	021a      	lsls	r2, r3, #8
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	430a      	orrs	r2, r1
 8006b9a:	619a      	str	r2, [r3, #24]
      break;
 8006b9c:	e041      	b.n	8006c22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68b9      	ldr	r1, [r7, #8]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f000 fa87 	bl	80070b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	69da      	ldr	r2, [r3, #28]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f042 0208 	orr.w	r2, r2, #8
 8006bb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	69da      	ldr	r2, [r3, #28]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f022 0204 	bic.w	r2, r2, #4
 8006bc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	69d9      	ldr	r1, [r3, #28]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	691a      	ldr	r2, [r3, #16]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	61da      	str	r2, [r3, #28]
      break;
 8006bdc:	e021      	b.n	8006c22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68b9      	ldr	r1, [r7, #8]
 8006be4:	4618      	mov	r0, r3
 8006be6:	f000 fad1 	bl	800718c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	69da      	ldr	r2, [r3, #28]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	69da      	ldr	r2, [r3, #28]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	69d9      	ldr	r1, [r3, #28]
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	021a      	lsls	r2, r3, #8
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	430a      	orrs	r2, r1
 8006c1c:	61da      	str	r2, [r3, #28]
      break;
 8006c1e:	e000      	b.n	8006c22 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006c20:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d101      	bne.n	8006c54 <HAL_TIM_ConfigClockSource+0x18>
 8006c50:	2302      	movs	r3, #2
 8006c52:	e0b3      	b.n	8006dbc <HAL_TIM_ConfigClockSource+0x180>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2202      	movs	r2, #2
 8006c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c7a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c8c:	d03e      	beq.n	8006d0c <HAL_TIM_ConfigClockSource+0xd0>
 8006c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c92:	f200 8087 	bhi.w	8006da4 <HAL_TIM_ConfigClockSource+0x168>
 8006c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c9a:	f000 8085 	beq.w	8006da8 <HAL_TIM_ConfigClockSource+0x16c>
 8006c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ca2:	d87f      	bhi.n	8006da4 <HAL_TIM_ConfigClockSource+0x168>
 8006ca4:	2b70      	cmp	r3, #112	; 0x70
 8006ca6:	d01a      	beq.n	8006cde <HAL_TIM_ConfigClockSource+0xa2>
 8006ca8:	2b70      	cmp	r3, #112	; 0x70
 8006caa:	d87b      	bhi.n	8006da4 <HAL_TIM_ConfigClockSource+0x168>
 8006cac:	2b60      	cmp	r3, #96	; 0x60
 8006cae:	d050      	beq.n	8006d52 <HAL_TIM_ConfigClockSource+0x116>
 8006cb0:	2b60      	cmp	r3, #96	; 0x60
 8006cb2:	d877      	bhi.n	8006da4 <HAL_TIM_ConfigClockSource+0x168>
 8006cb4:	2b50      	cmp	r3, #80	; 0x50
 8006cb6:	d03c      	beq.n	8006d32 <HAL_TIM_ConfigClockSource+0xf6>
 8006cb8:	2b50      	cmp	r3, #80	; 0x50
 8006cba:	d873      	bhi.n	8006da4 <HAL_TIM_ConfigClockSource+0x168>
 8006cbc:	2b40      	cmp	r3, #64	; 0x40
 8006cbe:	d058      	beq.n	8006d72 <HAL_TIM_ConfigClockSource+0x136>
 8006cc0:	2b40      	cmp	r3, #64	; 0x40
 8006cc2:	d86f      	bhi.n	8006da4 <HAL_TIM_ConfigClockSource+0x168>
 8006cc4:	2b30      	cmp	r3, #48	; 0x30
 8006cc6:	d064      	beq.n	8006d92 <HAL_TIM_ConfigClockSource+0x156>
 8006cc8:	2b30      	cmp	r3, #48	; 0x30
 8006cca:	d86b      	bhi.n	8006da4 <HAL_TIM_ConfigClockSource+0x168>
 8006ccc:	2b20      	cmp	r3, #32
 8006cce:	d060      	beq.n	8006d92 <HAL_TIM_ConfigClockSource+0x156>
 8006cd0:	2b20      	cmp	r3, #32
 8006cd2:	d867      	bhi.n	8006da4 <HAL_TIM_ConfigClockSource+0x168>
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d05c      	beq.n	8006d92 <HAL_TIM_ConfigClockSource+0x156>
 8006cd8:	2b10      	cmp	r3, #16
 8006cda:	d05a      	beq.n	8006d92 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006cdc:	e062      	b.n	8006da4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6818      	ldr	r0, [r3, #0]
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	6899      	ldr	r1, [r3, #8]
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	685a      	ldr	r2, [r3, #4]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	f000 fb17 	bl	8007320 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d00:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	609a      	str	r2, [r3, #8]
      break;
 8006d0a:	e04e      	b.n	8006daa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6818      	ldr	r0, [r3, #0]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	6899      	ldr	r1, [r3, #8]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	685a      	ldr	r2, [r3, #4]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	f000 fb00 	bl	8007320 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689a      	ldr	r2, [r3, #8]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d2e:	609a      	str	r2, [r3, #8]
      break;
 8006d30:	e03b      	b.n	8006daa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6818      	ldr	r0, [r3, #0]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	6859      	ldr	r1, [r3, #4]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	f000 fa74 	bl	800722c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2150      	movs	r1, #80	; 0x50
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 facd 	bl	80072ea <TIM_ITRx_SetConfig>
      break;
 8006d50:	e02b      	b.n	8006daa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6818      	ldr	r0, [r3, #0]
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	6859      	ldr	r1, [r3, #4]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	f000 fa93 	bl	800728a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2160      	movs	r1, #96	; 0x60
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f000 fabd 	bl	80072ea <TIM_ITRx_SetConfig>
      break;
 8006d70:	e01b      	b.n	8006daa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6818      	ldr	r0, [r3, #0]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	6859      	ldr	r1, [r3, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	f000 fa54 	bl	800722c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2140      	movs	r1, #64	; 0x40
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f000 faad 	bl	80072ea <TIM_ITRx_SetConfig>
      break;
 8006d90:	e00b      	b.n	8006daa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	f000 faa4 	bl	80072ea <TIM_ITRx_SetConfig>
      break;
 8006da2:	e002      	b.n	8006daa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006da4:	bf00      	nop
 8006da6:	e000      	b.n	8006daa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006da8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a34      	ldr	r2, [pc, #208]	; (8006ef8 <TIM_Base_SetConfig+0xe4>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d00f      	beq.n	8006e4c <TIM_Base_SetConfig+0x38>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e32:	d00b      	beq.n	8006e4c <TIM_Base_SetConfig+0x38>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a31      	ldr	r2, [pc, #196]	; (8006efc <TIM_Base_SetConfig+0xe8>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d007      	beq.n	8006e4c <TIM_Base_SetConfig+0x38>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a30      	ldr	r2, [pc, #192]	; (8006f00 <TIM_Base_SetConfig+0xec>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d003      	beq.n	8006e4c <TIM_Base_SetConfig+0x38>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a2f      	ldr	r2, [pc, #188]	; (8006f04 <TIM_Base_SetConfig+0xf0>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d108      	bne.n	8006e5e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a25      	ldr	r2, [pc, #148]	; (8006ef8 <TIM_Base_SetConfig+0xe4>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d01b      	beq.n	8006e9e <TIM_Base_SetConfig+0x8a>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e6c:	d017      	beq.n	8006e9e <TIM_Base_SetConfig+0x8a>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a22      	ldr	r2, [pc, #136]	; (8006efc <TIM_Base_SetConfig+0xe8>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d013      	beq.n	8006e9e <TIM_Base_SetConfig+0x8a>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a21      	ldr	r2, [pc, #132]	; (8006f00 <TIM_Base_SetConfig+0xec>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d00f      	beq.n	8006e9e <TIM_Base_SetConfig+0x8a>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a20      	ldr	r2, [pc, #128]	; (8006f04 <TIM_Base_SetConfig+0xf0>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d00b      	beq.n	8006e9e <TIM_Base_SetConfig+0x8a>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a1f      	ldr	r2, [pc, #124]	; (8006f08 <TIM_Base_SetConfig+0xf4>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d007      	beq.n	8006e9e <TIM_Base_SetConfig+0x8a>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a1e      	ldr	r2, [pc, #120]	; (8006f0c <TIM_Base_SetConfig+0xf8>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d003      	beq.n	8006e9e <TIM_Base_SetConfig+0x8a>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a1d      	ldr	r2, [pc, #116]	; (8006f10 <TIM_Base_SetConfig+0xfc>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d108      	bne.n	8006eb0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ea4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	689a      	ldr	r2, [r3, #8]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a08      	ldr	r2, [pc, #32]	; (8006ef8 <TIM_Base_SetConfig+0xe4>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d103      	bne.n	8006ee4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	691a      	ldr	r2, [r3, #16]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	615a      	str	r2, [r3, #20]
}
 8006eea:	bf00      	nop
 8006eec:	3714      	adds	r7, #20
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	40010000 	.word	0x40010000
 8006efc:	40000400 	.word	0x40000400
 8006f00:	40000800 	.word	0x40000800
 8006f04:	40000c00 	.word	0x40000c00
 8006f08:	40014000 	.word	0x40014000
 8006f0c:	40014400 	.word	0x40014400
 8006f10:	40014800 	.word	0x40014800

08006f14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b087      	sub	sp, #28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	f023 0201 	bic.w	r2, r3, #1
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f023 0303 	bic.w	r3, r3, #3
 8006f4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68fa      	ldr	r2, [r7, #12]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f023 0302 	bic.w	r3, r3, #2
 8006f5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a1c      	ldr	r2, [pc, #112]	; (8006fdc <TIM_OC1_SetConfig+0xc8>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d10c      	bne.n	8006f8a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f023 0308 	bic.w	r3, r3, #8
 8006f76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	697a      	ldr	r2, [r7, #20]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f023 0304 	bic.w	r3, r3, #4
 8006f88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a13      	ldr	r2, [pc, #76]	; (8006fdc <TIM_OC1_SetConfig+0xc8>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d111      	bne.n	8006fb6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	693a      	ldr	r2, [r7, #16]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	693a      	ldr	r2, [r7, #16]
 8006fba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	685a      	ldr	r2, [r3, #4]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	697a      	ldr	r2, [r7, #20]
 8006fce:	621a      	str	r2, [r3, #32]
}
 8006fd0:	bf00      	nop
 8006fd2:	371c      	adds	r7, #28
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr
 8006fdc:	40010000 	.word	0x40010000

08006fe0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b087      	sub	sp, #28
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	f023 0210 	bic.w	r2, r3, #16
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	699b      	ldr	r3, [r3, #24]
 8007006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800700e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007016:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	021b      	lsls	r3, r3, #8
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	4313      	orrs	r3, r2
 8007022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	f023 0320 	bic.w	r3, r3, #32
 800702a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	011b      	lsls	r3, r3, #4
 8007032:	697a      	ldr	r2, [r7, #20]
 8007034:	4313      	orrs	r3, r2
 8007036:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a1e      	ldr	r2, [pc, #120]	; (80070b4 <TIM_OC2_SetConfig+0xd4>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d10d      	bne.n	800705c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007046:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	011b      	lsls	r3, r3, #4
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	4313      	orrs	r3, r2
 8007052:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800705a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a15      	ldr	r2, [pc, #84]	; (80070b4 <TIM_OC2_SetConfig+0xd4>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d113      	bne.n	800708c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800706a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007072:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	695b      	ldr	r3, [r3, #20]
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	693a      	ldr	r2, [r7, #16]
 800707c:	4313      	orrs	r3, r2
 800707e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	693a      	ldr	r2, [r7, #16]
 8007088:	4313      	orrs	r3, r2
 800708a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	697a      	ldr	r2, [r7, #20]
 80070a4:	621a      	str	r2, [r3, #32]
}
 80070a6:	bf00      	nop
 80070a8:	371c      	adds	r7, #28
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	40010000 	.word	0x40010000

080070b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	69db      	ldr	r3, [r3, #28]
 80070de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f023 0303 	bic.w	r3, r3, #3
 80070ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	021b      	lsls	r3, r3, #8
 8007108:	697a      	ldr	r2, [r7, #20]
 800710a:	4313      	orrs	r3, r2
 800710c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a1d      	ldr	r2, [pc, #116]	; (8007188 <TIM_OC3_SetConfig+0xd0>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d10d      	bne.n	8007132 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800711c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	021b      	lsls	r3, r3, #8
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	4313      	orrs	r3, r2
 8007128:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007130:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a14      	ldr	r2, [pc, #80]	; (8007188 <TIM_OC3_SetConfig+0xd0>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d113      	bne.n	8007162 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	011b      	lsls	r3, r3, #4
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	4313      	orrs	r3, r2
 8007154:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	011b      	lsls	r3, r3, #4
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	4313      	orrs	r3, r2
 8007160:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	685a      	ldr	r2, [r3, #4]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	697a      	ldr	r2, [r7, #20]
 800717a:	621a      	str	r2, [r3, #32]
}
 800717c:	bf00      	nop
 800717e:	371c      	adds	r7, #28
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr
 8007188:	40010000 	.word	0x40010000

0800718c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800718c:	b480      	push	{r7}
 800718e:	b087      	sub	sp, #28
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	69db      	ldr	r3, [r3, #28]
 80071b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	021b      	lsls	r3, r3, #8
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	031b      	lsls	r3, r3, #12
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a10      	ldr	r2, [pc, #64]	; (8007228 <TIM_OC4_SetConfig+0x9c>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d109      	bne.n	8007200 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	695b      	ldr	r3, [r3, #20]
 80071f8:	019b      	lsls	r3, r3, #6
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	697a      	ldr	r2, [r7, #20]
 8007204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	685a      	ldr	r2, [r3, #4]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	693a      	ldr	r2, [r7, #16]
 8007218:	621a      	str	r2, [r3, #32]
}
 800721a:	bf00      	nop
 800721c:	371c      	adds	r7, #28
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	40010000 	.word	0x40010000

0800722c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800722c:	b480      	push	{r7}
 800722e:	b087      	sub	sp, #28
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6a1b      	ldr	r3, [r3, #32]
 800723c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6a1b      	ldr	r3, [r3, #32]
 8007242:	f023 0201 	bic.w	r2, r3, #1
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007256:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	011b      	lsls	r3, r3, #4
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	4313      	orrs	r3, r2
 8007260:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	f023 030a 	bic.w	r3, r3, #10
 8007268:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800726a:	697a      	ldr	r2, [r7, #20]
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	4313      	orrs	r3, r2
 8007270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	621a      	str	r2, [r3, #32]
}
 800727e:	bf00      	nop
 8007280:	371c      	adds	r7, #28
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr

0800728a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800728a:	b480      	push	{r7}
 800728c:	b087      	sub	sp, #28
 800728e:	af00      	add	r7, sp, #0
 8007290:	60f8      	str	r0, [r7, #12]
 8007292:	60b9      	str	r1, [r7, #8]
 8007294:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	f023 0210 	bic.w	r2, r3, #16
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6a1b      	ldr	r3, [r3, #32]
 80072ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	031b      	lsls	r3, r3, #12
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	4313      	orrs	r3, r2
 80072be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	011b      	lsls	r3, r3, #4
 80072cc:	693a      	ldr	r2, [r7, #16]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	697a      	ldr	r2, [r7, #20]
 80072d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	621a      	str	r2, [r3, #32]
}
 80072de:	bf00      	nop
 80072e0:	371c      	adds	r7, #28
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072ea:	b480      	push	{r7}
 80072ec:	b085      	sub	sp, #20
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007300:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007302:	683a      	ldr	r2, [r7, #0]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	4313      	orrs	r3, r2
 8007308:	f043 0307 	orr.w	r3, r3, #7
 800730c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	609a      	str	r2, [r3, #8]
}
 8007314:	bf00      	nop
 8007316:	3714      	adds	r7, #20
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007320:	b480      	push	{r7}
 8007322:	b087      	sub	sp, #28
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
 800732c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800733a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	021a      	lsls	r2, r3, #8
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	431a      	orrs	r2, r3
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	4313      	orrs	r3, r2
 8007348:	697a      	ldr	r2, [r7, #20]
 800734a:	4313      	orrs	r3, r2
 800734c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	609a      	str	r2, [r3, #8]
}
 8007354:	bf00      	nop
 8007356:	371c      	adds	r7, #28
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007360:	b480      	push	{r7}
 8007362:	b087      	sub	sp, #28
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	f003 031f 	and.w	r3, r3, #31
 8007372:	2201      	movs	r2, #1
 8007374:	fa02 f303 	lsl.w	r3, r2, r3
 8007378:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6a1a      	ldr	r2, [r3, #32]
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	43db      	mvns	r3, r3
 8007382:	401a      	ands	r2, r3
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6a1a      	ldr	r2, [r3, #32]
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	f003 031f 	and.w	r3, r3, #31
 8007392:	6879      	ldr	r1, [r7, #4]
 8007394:	fa01 f303 	lsl.w	r3, r1, r3
 8007398:	431a      	orrs	r2, r3
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	621a      	str	r2, [r3, #32]
}
 800739e:	bf00      	nop
 80073a0:	371c      	adds	r7, #28
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
	...

080073ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d101      	bne.n	80073c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073c0:	2302      	movs	r3, #2
 80073c2:	e050      	b.n	8007466 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2202      	movs	r2, #2
 80073d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a1c      	ldr	r2, [pc, #112]	; (8007474 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d018      	beq.n	800743a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007410:	d013      	beq.n	800743a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a18      	ldr	r2, [pc, #96]	; (8007478 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d00e      	beq.n	800743a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a16      	ldr	r2, [pc, #88]	; (800747c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d009      	beq.n	800743a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a15      	ldr	r2, [pc, #84]	; (8007480 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d004      	beq.n	800743a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a13      	ldr	r2, [pc, #76]	; (8007484 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d10c      	bne.n	8007454 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007440:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	4313      	orrs	r3, r2
 800744a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3714      	adds	r7, #20
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	40010000 	.word	0x40010000
 8007478:	40000400 	.word	0x40000400
 800747c:	40000800 	.word	0x40000800
 8007480:	40000c00 	.word	0x40000c00
 8007484:	40014000 	.word	0x40014000

08007488 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007490:	bf00      	nop
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074a4:	bf00      	nop
 80074a6:	370c      	adds	r7, #12
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <arm_sin_f32>:
 80074b0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800752c <arm_sin_f32+0x7c>
 80074b4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80074b8:	ee20 7a07 	vmul.f32	s14, s0, s14
 80074bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074c0:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80074c4:	d42c      	bmi.n	8007520 <arm_sin_f32+0x70>
 80074c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074ca:	eddf 6a19 	vldr	s13, [pc, #100]	; 8007530 <arm_sin_f32+0x80>
 80074ce:	4a19      	ldr	r2, [pc, #100]	; (8007534 <arm_sin_f32+0x84>)
 80074d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80074d4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80074d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80074dc:	eef4 7ae6 	vcmpe.f32	s15, s13
 80074e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074e4:	bfa8      	it	ge
 80074e6:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 80074ea:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80074ee:	ee17 3a10 	vmov	r3, s14
 80074f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074f6:	ee07 3a10 	vmov	s14, r3
 80074fa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80074fe:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8007502:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007506:	edd1 6a01 	vldr	s13, [r1, #4]
 800750a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800750e:	ed91 0a00 	vldr	s0, [r1]
 8007512:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007516:	ee27 0a00 	vmul.f32	s0, s14, s0
 800751a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800751e:	4770      	bx	lr
 8007520:	ee17 3a90 	vmov	r3, s15
 8007524:	3b01      	subs	r3, #1
 8007526:	ee07 3a90 	vmov	s15, r3
 800752a:	e7cc      	b.n	80074c6 <arm_sin_f32+0x16>
 800752c:	3e22f983 	.word	0x3e22f983
 8007530:	44000000 	.word	0x44000000
 8007534:	08007d7c 	.word	0x08007d7c

08007538 <__libc_init_array>:
 8007538:	b570      	push	{r4, r5, r6, lr}
 800753a:	4d0d      	ldr	r5, [pc, #52]	; (8007570 <__libc_init_array+0x38>)
 800753c:	4c0d      	ldr	r4, [pc, #52]	; (8007574 <__libc_init_array+0x3c>)
 800753e:	1b64      	subs	r4, r4, r5
 8007540:	10a4      	asrs	r4, r4, #2
 8007542:	2600      	movs	r6, #0
 8007544:	42a6      	cmp	r6, r4
 8007546:	d109      	bne.n	800755c <__libc_init_array+0x24>
 8007548:	4d0b      	ldr	r5, [pc, #44]	; (8007578 <__libc_init_array+0x40>)
 800754a:	4c0c      	ldr	r4, [pc, #48]	; (800757c <__libc_init_array+0x44>)
 800754c:	f000 f820 	bl	8007590 <_init>
 8007550:	1b64      	subs	r4, r4, r5
 8007552:	10a4      	asrs	r4, r4, #2
 8007554:	2600      	movs	r6, #0
 8007556:	42a6      	cmp	r6, r4
 8007558:	d105      	bne.n	8007566 <__libc_init_array+0x2e>
 800755a:	bd70      	pop	{r4, r5, r6, pc}
 800755c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007560:	4798      	blx	r3
 8007562:	3601      	adds	r6, #1
 8007564:	e7ee      	b.n	8007544 <__libc_init_array+0xc>
 8007566:	f855 3b04 	ldr.w	r3, [r5], #4
 800756a:	4798      	blx	r3
 800756c:	3601      	adds	r6, #1
 800756e:	e7f2      	b.n	8007556 <__libc_init_array+0x1e>
 8007570:	08008588 	.word	0x08008588
 8007574:	08008588 	.word	0x08008588
 8007578:	08008588 	.word	0x08008588
 800757c:	0800858c 	.word	0x0800858c

08007580 <memset>:
 8007580:	4402      	add	r2, r0
 8007582:	4603      	mov	r3, r0
 8007584:	4293      	cmp	r3, r2
 8007586:	d100      	bne.n	800758a <memset+0xa>
 8007588:	4770      	bx	lr
 800758a:	f803 1b01 	strb.w	r1, [r3], #1
 800758e:	e7f9      	b.n	8007584 <memset+0x4>

08007590 <_init>:
 8007590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007592:	bf00      	nop
 8007594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007596:	bc08      	pop	{r3}
 8007598:	469e      	mov	lr, r3
 800759a:	4770      	bx	lr

0800759c <_fini>:
 800759c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800759e:	bf00      	nop
 80075a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075a2:	bc08      	pop	{r3}
 80075a4:	469e      	mov	lr, r3
 80075a6:	4770      	bx	lr
