
newseqen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f80  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012a4  08009120  08009120  00019120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3c4  0800a3c4  0002066c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3c4  0800a3c4  0001a3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3cc  0800a3cc  0002066c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3cc  0800a3cc  0001a3cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3d0  0800a3d0  0001a3d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000066c  20000000  0800a3d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf8  2000066c  0800aa40  0002066c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002264  0800aa40  00022264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002066c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001336b  00000000  00000000  0002069c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002510  00000000  00000000  00033a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  00035f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001020  00000000  00000000  00037050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a61  00000000  00000000  00038070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014162  00000000  00000000  00050ad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e4ac  00000000  00000000  00064c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  001030df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051e0  00000000  00000000  001031a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000d8  00000000  00000000  00108380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000066c 	.word	0x2000066c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009108 	.word	0x08009108

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000670 	.word	0x20000670
 80001dc:	08009108 	.word	0x08009108

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2f>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000854:	bf24      	itt	cs
 8000856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800085a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800085e:	d90d      	bls.n	800087c <__aeabi_d2f+0x30>
 8000860:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800086c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000874:	bf08      	it	eq
 8000876:	f020 0001 	biceq.w	r0, r0, #1
 800087a:	4770      	bx	lr
 800087c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000880:	d121      	bne.n	80008c6 <__aeabi_d2f+0x7a>
 8000882:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000886:	bfbc      	itt	lt
 8000888:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800088c:	4770      	bxlt	lr
 800088e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000892:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000896:	f1c2 0218 	rsb	r2, r2, #24
 800089a:	f1c2 0c20 	rsb	ip, r2, #32
 800089e:	fa10 f30c 	lsls.w	r3, r0, ip
 80008a2:	fa20 f002 	lsr.w	r0, r0, r2
 80008a6:	bf18      	it	ne
 80008a8:	f040 0001 	orrne.w	r0, r0, #1
 80008ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b8:	ea40 000c 	orr.w	r0, r0, ip
 80008bc:	fa23 f302 	lsr.w	r3, r3, r2
 80008c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008c4:	e7cc      	b.n	8000860 <__aeabi_d2f+0x14>
 80008c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ca:	d107      	bne.n	80008dc <__aeabi_d2f+0x90>
 80008cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d0:	bf1e      	ittt	ne
 80008d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008da:	4770      	bxne	lr
 80008dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000900:	f000 b974 	b.w	8000bec <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9d08      	ldr	r5, [sp, #32]
 8000922:	4604      	mov	r4, r0
 8000924:	468e      	mov	lr, r1
 8000926:	2b00      	cmp	r3, #0
 8000928:	d14d      	bne.n	80009c6 <__udivmoddi4+0xaa>
 800092a:	428a      	cmp	r2, r1
 800092c:	4694      	mov	ip, r2
 800092e:	d969      	bls.n	8000a04 <__udivmoddi4+0xe8>
 8000930:	fab2 f282 	clz	r2, r2
 8000934:	b152      	cbz	r2, 800094c <__udivmoddi4+0x30>
 8000936:	fa01 f302 	lsl.w	r3, r1, r2
 800093a:	f1c2 0120 	rsb	r1, r2, #32
 800093e:	fa20 f101 	lsr.w	r1, r0, r1
 8000942:	fa0c fc02 	lsl.w	ip, ip, r2
 8000946:	ea41 0e03 	orr.w	lr, r1, r3
 800094a:	4094      	lsls	r4, r2
 800094c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000950:	0c21      	lsrs	r1, r4, #16
 8000952:	fbbe f6f8 	udiv	r6, lr, r8
 8000956:	fa1f f78c 	uxth.w	r7, ip
 800095a:	fb08 e316 	mls	r3, r8, r6, lr
 800095e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000962:	fb06 f107 	mul.w	r1, r6, r7
 8000966:	4299      	cmp	r1, r3
 8000968:	d90a      	bls.n	8000980 <__udivmoddi4+0x64>
 800096a:	eb1c 0303 	adds.w	r3, ip, r3
 800096e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000972:	f080 811f 	bcs.w	8000bb4 <__udivmoddi4+0x298>
 8000976:	4299      	cmp	r1, r3
 8000978:	f240 811c 	bls.w	8000bb4 <__udivmoddi4+0x298>
 800097c:	3e02      	subs	r6, #2
 800097e:	4463      	add	r3, ip
 8000980:	1a5b      	subs	r3, r3, r1
 8000982:	b2a4      	uxth	r4, r4
 8000984:	fbb3 f0f8 	udiv	r0, r3, r8
 8000988:	fb08 3310 	mls	r3, r8, r0, r3
 800098c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000990:	fb00 f707 	mul.w	r7, r0, r7
 8000994:	42a7      	cmp	r7, r4
 8000996:	d90a      	bls.n	80009ae <__udivmoddi4+0x92>
 8000998:	eb1c 0404 	adds.w	r4, ip, r4
 800099c:	f100 33ff 	add.w	r3, r0, #4294967295
 80009a0:	f080 810a 	bcs.w	8000bb8 <__udivmoddi4+0x29c>
 80009a4:	42a7      	cmp	r7, r4
 80009a6:	f240 8107 	bls.w	8000bb8 <__udivmoddi4+0x29c>
 80009aa:	4464      	add	r4, ip
 80009ac:	3802      	subs	r0, #2
 80009ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009b2:	1be4      	subs	r4, r4, r7
 80009b4:	2600      	movs	r6, #0
 80009b6:	b11d      	cbz	r5, 80009c0 <__udivmoddi4+0xa4>
 80009b8:	40d4      	lsrs	r4, r2
 80009ba:	2300      	movs	r3, #0
 80009bc:	e9c5 4300 	strd	r4, r3, [r5]
 80009c0:	4631      	mov	r1, r6
 80009c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c6:	428b      	cmp	r3, r1
 80009c8:	d909      	bls.n	80009de <__udivmoddi4+0xc2>
 80009ca:	2d00      	cmp	r5, #0
 80009cc:	f000 80ef 	beq.w	8000bae <__udivmoddi4+0x292>
 80009d0:	2600      	movs	r6, #0
 80009d2:	e9c5 0100 	strd	r0, r1, [r5]
 80009d6:	4630      	mov	r0, r6
 80009d8:	4631      	mov	r1, r6
 80009da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009de:	fab3 f683 	clz	r6, r3
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d14a      	bne.n	8000a7c <__udivmoddi4+0x160>
 80009e6:	428b      	cmp	r3, r1
 80009e8:	d302      	bcc.n	80009f0 <__udivmoddi4+0xd4>
 80009ea:	4282      	cmp	r2, r0
 80009ec:	f200 80f9 	bhi.w	8000be2 <__udivmoddi4+0x2c6>
 80009f0:	1a84      	subs	r4, r0, r2
 80009f2:	eb61 0303 	sbc.w	r3, r1, r3
 80009f6:	2001      	movs	r0, #1
 80009f8:	469e      	mov	lr, r3
 80009fa:	2d00      	cmp	r5, #0
 80009fc:	d0e0      	beq.n	80009c0 <__udivmoddi4+0xa4>
 80009fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a02:	e7dd      	b.n	80009c0 <__udivmoddi4+0xa4>
 8000a04:	b902      	cbnz	r2, 8000a08 <__udivmoddi4+0xec>
 8000a06:	deff      	udf	#255	; 0xff
 8000a08:	fab2 f282 	clz	r2, r2
 8000a0c:	2a00      	cmp	r2, #0
 8000a0e:	f040 8092 	bne.w	8000b36 <__udivmoddi4+0x21a>
 8000a12:	eba1 010c 	sub.w	r1, r1, ip
 8000a16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a1a:	fa1f fe8c 	uxth.w	lr, ip
 8000a1e:	2601      	movs	r6, #1
 8000a20:	0c20      	lsrs	r0, r4, #16
 8000a22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a26:	fb07 1113 	mls	r1, r7, r3, r1
 8000a2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a2e:	fb0e f003 	mul.w	r0, lr, r3
 8000a32:	4288      	cmp	r0, r1
 8000a34:	d908      	bls.n	8000a48 <__udivmoddi4+0x12c>
 8000a36:	eb1c 0101 	adds.w	r1, ip, r1
 8000a3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a3e:	d202      	bcs.n	8000a46 <__udivmoddi4+0x12a>
 8000a40:	4288      	cmp	r0, r1
 8000a42:	f200 80cb 	bhi.w	8000bdc <__udivmoddi4+0x2c0>
 8000a46:	4643      	mov	r3, r8
 8000a48:	1a09      	subs	r1, r1, r0
 8000a4a:	b2a4      	uxth	r4, r4
 8000a4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a50:	fb07 1110 	mls	r1, r7, r0, r1
 8000a54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a58:	fb0e fe00 	mul.w	lr, lr, r0
 8000a5c:	45a6      	cmp	lr, r4
 8000a5e:	d908      	bls.n	8000a72 <__udivmoddi4+0x156>
 8000a60:	eb1c 0404 	adds.w	r4, ip, r4
 8000a64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a68:	d202      	bcs.n	8000a70 <__udivmoddi4+0x154>
 8000a6a:	45a6      	cmp	lr, r4
 8000a6c:	f200 80bb 	bhi.w	8000be6 <__udivmoddi4+0x2ca>
 8000a70:	4608      	mov	r0, r1
 8000a72:	eba4 040e 	sub.w	r4, r4, lr
 8000a76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a7a:	e79c      	b.n	80009b6 <__udivmoddi4+0x9a>
 8000a7c:	f1c6 0720 	rsb	r7, r6, #32
 8000a80:	40b3      	lsls	r3, r6
 8000a82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a92:	431c      	orrs	r4, r3
 8000a94:	40f9      	lsrs	r1, r7
 8000a96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000aa2:	0c20      	lsrs	r0, r4, #16
 8000aa4:	fa1f fe8c 	uxth.w	lr, ip
 8000aa8:	fb09 1118 	mls	r1, r9, r8, r1
 8000aac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ab0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ab4:	4288      	cmp	r0, r1
 8000ab6:	fa02 f206 	lsl.w	r2, r2, r6
 8000aba:	d90b      	bls.n	8000ad4 <__udivmoddi4+0x1b8>
 8000abc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ac0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ac4:	f080 8088 	bcs.w	8000bd8 <__udivmoddi4+0x2bc>
 8000ac8:	4288      	cmp	r0, r1
 8000aca:	f240 8085 	bls.w	8000bd8 <__udivmoddi4+0x2bc>
 8000ace:	f1a8 0802 	sub.w	r8, r8, #2
 8000ad2:	4461      	add	r1, ip
 8000ad4:	1a09      	subs	r1, r1, r0
 8000ad6:	b2a4      	uxth	r4, r4
 8000ad8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000adc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ae0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ae4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ae8:	458e      	cmp	lr, r1
 8000aea:	d908      	bls.n	8000afe <__udivmoddi4+0x1e2>
 8000aec:	eb1c 0101 	adds.w	r1, ip, r1
 8000af0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000af4:	d26c      	bcs.n	8000bd0 <__udivmoddi4+0x2b4>
 8000af6:	458e      	cmp	lr, r1
 8000af8:	d96a      	bls.n	8000bd0 <__udivmoddi4+0x2b4>
 8000afa:	3802      	subs	r0, #2
 8000afc:	4461      	add	r1, ip
 8000afe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b02:	fba0 9402 	umull	r9, r4, r0, r2
 8000b06:	eba1 010e 	sub.w	r1, r1, lr
 8000b0a:	42a1      	cmp	r1, r4
 8000b0c:	46c8      	mov	r8, r9
 8000b0e:	46a6      	mov	lr, r4
 8000b10:	d356      	bcc.n	8000bc0 <__udivmoddi4+0x2a4>
 8000b12:	d053      	beq.n	8000bbc <__udivmoddi4+0x2a0>
 8000b14:	b15d      	cbz	r5, 8000b2e <__udivmoddi4+0x212>
 8000b16:	ebb3 0208 	subs.w	r2, r3, r8
 8000b1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b22:	fa22 f306 	lsr.w	r3, r2, r6
 8000b26:	40f1      	lsrs	r1, r6
 8000b28:	431f      	orrs	r7, r3
 8000b2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b2e:	2600      	movs	r6, #0
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	f1c2 0320 	rsb	r3, r2, #32
 8000b3a:	40d8      	lsrs	r0, r3
 8000b3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b40:	fa21 f303 	lsr.w	r3, r1, r3
 8000b44:	4091      	lsls	r1, r2
 8000b46:	4301      	orrs	r1, r0
 8000b48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b4c:	fa1f fe8c 	uxth.w	lr, ip
 8000b50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b54:	fb07 3610 	mls	r6, r7, r0, r3
 8000b58:	0c0b      	lsrs	r3, r1, #16
 8000b5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b62:	429e      	cmp	r6, r3
 8000b64:	fa04 f402 	lsl.w	r4, r4, r2
 8000b68:	d908      	bls.n	8000b7c <__udivmoddi4+0x260>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b72:	d22f      	bcs.n	8000bd4 <__udivmoddi4+0x2b8>
 8000b74:	429e      	cmp	r6, r3
 8000b76:	d92d      	bls.n	8000bd4 <__udivmoddi4+0x2b8>
 8000b78:	3802      	subs	r0, #2
 8000b7a:	4463      	add	r3, ip
 8000b7c:	1b9b      	subs	r3, r3, r6
 8000b7e:	b289      	uxth	r1, r1
 8000b80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b84:	fb07 3316 	mls	r3, r7, r6, r3
 8000b88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b90:	428b      	cmp	r3, r1
 8000b92:	d908      	bls.n	8000ba6 <__udivmoddi4+0x28a>
 8000b94:	eb1c 0101 	adds.w	r1, ip, r1
 8000b98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b9c:	d216      	bcs.n	8000bcc <__udivmoddi4+0x2b0>
 8000b9e:	428b      	cmp	r3, r1
 8000ba0:	d914      	bls.n	8000bcc <__udivmoddi4+0x2b0>
 8000ba2:	3e02      	subs	r6, #2
 8000ba4:	4461      	add	r1, ip
 8000ba6:	1ac9      	subs	r1, r1, r3
 8000ba8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bac:	e738      	b.n	8000a20 <__udivmoddi4+0x104>
 8000bae:	462e      	mov	r6, r5
 8000bb0:	4628      	mov	r0, r5
 8000bb2:	e705      	b.n	80009c0 <__udivmoddi4+0xa4>
 8000bb4:	4606      	mov	r6, r0
 8000bb6:	e6e3      	b.n	8000980 <__udivmoddi4+0x64>
 8000bb8:	4618      	mov	r0, r3
 8000bba:	e6f8      	b.n	80009ae <__udivmoddi4+0x92>
 8000bbc:	454b      	cmp	r3, r9
 8000bbe:	d2a9      	bcs.n	8000b14 <__udivmoddi4+0x1f8>
 8000bc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000bc4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000bc8:	3801      	subs	r0, #1
 8000bca:	e7a3      	b.n	8000b14 <__udivmoddi4+0x1f8>
 8000bcc:	4646      	mov	r6, r8
 8000bce:	e7ea      	b.n	8000ba6 <__udivmoddi4+0x28a>
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	e794      	b.n	8000afe <__udivmoddi4+0x1e2>
 8000bd4:	4640      	mov	r0, r8
 8000bd6:	e7d1      	b.n	8000b7c <__udivmoddi4+0x260>
 8000bd8:	46d0      	mov	r8, sl
 8000bda:	e77b      	b.n	8000ad4 <__udivmoddi4+0x1b8>
 8000bdc:	3b02      	subs	r3, #2
 8000bde:	4461      	add	r1, ip
 8000be0:	e732      	b.n	8000a48 <__udivmoddi4+0x12c>
 8000be2:	4630      	mov	r0, r6
 8000be4:	e709      	b.n	80009fa <__udivmoddi4+0xde>
 8000be6:	4464      	add	r4, ip
 8000be8:	3802      	subs	r0, #2
 8000bea:	e742      	b.n	8000a72 <__udivmoddi4+0x156>

08000bec <__aeabi_idiv0>:
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000bf8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bfc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d013      	beq.n	8000c30 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000c08:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c0c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000c10:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d00b      	beq.n	8000c30 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000c18:	e000      	b.n	8000c1c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000c1a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000c1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d0f9      	beq.n	8000c1a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c26:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000c30:	687b      	ldr	r3, [r7, #4]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <_write>:
uint16_t enc2_lut[180];   // lut to skip cells ,filled in on main
uint16_t feedback_line[17]={'F','o','o','d','b','a','c','k','g','_' ,'k',64, 278, 279, 280,64}; // this is variable , last display line for info
uint8_t feedback_pointer;  // pointer for feedback item start position , maybe bit search for less menu data ,dunno

int _write(int file, char *ptr, int len)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b086      	sub	sp, #24
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	60f8      	str	r0, [r7, #12]
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	e009      	b.n	8000c64 <_write+0x26>
	{
	   ITM_SendChar( *ptr++ );
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	1c5a      	adds	r2, r3, #1
 8000c54:	60ba      	str	r2, [r7, #8]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ffc9 	bl	8000bf0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	3301      	adds	r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	dbf1      	blt.n	8000c50 <_write+0x12>
	}

	return len;
 8000c6c:	687b      	ldr	r3, [r7, #4]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b0aa      	sub	sp, #168	; 0xa8
 8000c7c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c7e:	f002 ff7b 	bl	8003b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c82:	f000 faf7 	bl	8001274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c86:	f000 fd7f 	bl	8001788 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c8a:	f000 fd5d 	bl	8001748 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c8e:	f000 fb5b 	bl	8001348 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000c92:	f000 fc05 	bl	80014a0 <MX_SPI2_Init>
  MX_TIM3_Init();
 8000c96:	f000 fc8d 	bl	80015b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c9a:	f000 fd01 	bl	80016a0 <MX_TIM4_Init>
  MX_I2C2_Init();
 8000c9e:	f000 fbd1 	bl	8001444 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000ca2:	f000 fc33 	bl	800150c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  const volatile uint8_t *userConfig=(const volatile uint8_t *)0x0800D2F0;
 8000ca6:	4b9e      	ldr	r3, [pc, #632]	; (8000f20 <main+0x2a8>)
 8000ca8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90



//LL_SPI_Enable(SPI2);

  HAL_SPI_Init(&hspi2);
 8000cac:	489d      	ldr	r0, [pc, #628]	; (8000f24 <main+0x2ac>)
 8000cae:	f005 fed3 	bl	8006a58 <HAL_SPI_Init>
  // lcd_init(); // keep this late or have issues
//HAL_TIM_Base_Start_IT(&htim1);  // This needs to work for irq   ,disbling tim1 made loop a lot faster
//TIM1->CCER=0;
HAL_TIM_Base_Start_IT(&htim3);  // This needs to work for irq
 8000cb2:	489d      	ldr	r0, [pc, #628]	; (8000f28 <main+0x2b0>)
 8000cb4:	f006 fa0a 	bl	80070cc <HAL_TIM_Base_Start_IT>
TIM3->CCER=0;
 8000cb8:	4b9c      	ldr	r3, [pc, #624]	; (8000f2c <main+0x2b4>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	621a      	str	r2, [r3, #32]
HAL_TIM_Base_Start(&htim2);
 8000cbe:	489c      	ldr	r0, [pc, #624]	; (8000f30 <main+0x2b8>)
 8000cc0:	f006 f9aa 	bl	8007018 <HAL_TIM_Base_Start>
HAL_TIM_Base_Start(&htim4);
 8000cc4:	489b      	ldr	r0, [pc, #620]	; (8000f34 <main+0x2bc>)
 8000cc6:	f006 f9a7 	bl	8007018 <HAL_TIM_Base_Start>
//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  // they both work fine together
HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8000cca:	2108      	movs	r1, #8
 8000ccc:	4896      	ldr	r0, [pc, #600]	; (8000f28 <main+0x2b0>)
 8000cce:	f006 fab9 	bl	8007244 <HAL_TIM_PWM_Start>
//HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,pData, 63);
TIM2->CNT=32000;
 8000cd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cd6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000cda:	625a      	str	r2, [r3, #36]	; 0x24
HAL_ADC_Start(&hadc1);
 8000cdc:	4896      	ldr	r0, [pc, #600]	; (8000f38 <main+0x2c0>)
 8000cde:	f003 f825 	bl	8003d2c <HAL_ADC_Start>
HAL_ADC_Start_DMA(&hadc1, adc_source, 4); //dma start ,needs this and adc start ,set sampling time to very long or it will fail
 8000ce2:	2204      	movs	r2, #4
 8000ce4:	4995      	ldr	r1, [pc, #596]	; (8000f3c <main+0x2c4>)
 8000ce6:	4894      	ldr	r0, [pc, #592]	; (8000f38 <main+0x2c0>)
 8000ce8:	f003 f8d4 	bl	8003e94 <HAL_ADC_Start_DMA>


HAL_I2C_MspInit(&hi2c2);
 8000cec:	4894      	ldr	r0, [pc, #592]	; (8000f40 <main+0x2c8>)
 8000cee:	f002 fcbd 	bl	800366c <HAL_I2C_MspInit>
} // reads stored values for potvalues
*/

uint8_t potSource2[65];
uint8_t potSource3[65];
HAL_I2C_Mem_Read(&hi2c2, 160, (1<<6), 2,&potSource, 64,1000);		// all good
 8000cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf6:	9302      	str	r3, [sp, #8]
 8000cf8:	2340      	movs	r3, #64	; 0x40
 8000cfa:	9301      	str	r3, [sp, #4]
 8000cfc:	4b91      	ldr	r3, [pc, #580]	; (8000f44 <main+0x2cc>)
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	2302      	movs	r3, #2
 8000d02:	2240      	movs	r2, #64	; 0x40
 8000d04:	21a0      	movs	r1, #160	; 0xa0
 8000d06:	488e      	ldr	r0, [pc, #568]	; (8000f40 <main+0x2c8>)
 8000d08:	f004 fce0 	bl	80056cc <HAL_I2C_Mem_Read>
HAL_I2C_Mem_Read(&hi2c2, 160, (2<<6), 2,&potSource2,64,1000);
 8000d0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d10:	9302      	str	r3, [sp, #8]
 8000d12:	2340      	movs	r3, #64	; 0x40
 8000d14:	9301      	str	r3, [sp, #4]
 8000d16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d1a:	9300      	str	r3, [sp, #0]
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	2280      	movs	r2, #128	; 0x80
 8000d20:	21a0      	movs	r1, #160	; 0xa0
 8000d22:	4887      	ldr	r0, [pc, #540]	; (8000f40 <main+0x2c8>)
 8000d24:	f004 fcd2 	bl	80056cc <HAL_I2C_Mem_Read>
HAL_I2C_Mem_Read(&hi2c2, 160, (3<<6), 2,&potSource3,64,1000);
 8000d28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2c:	9302      	str	r3, [sp, #8]
 8000d2e:	2340      	movs	r3, #64	; 0x40
 8000d30:	9301      	str	r3, [sp, #4]
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	2302      	movs	r3, #2
 8000d38:	22c0      	movs	r2, #192	; 0xc0
 8000d3a:	21a0      	movs	r1, #160	; 0xa0
 8000d3c:	4880      	ldr	r0, [pc, #512]	; (8000f40 <main+0x2c8>)
 8000d3e:	f004 fcc5 	bl	80056cc <HAL_I2C_Mem_Read>

for(i=0;i<1024;i++){
 8000d42:	4b81      	ldr	r3, [pc, #516]	; (8000f48 <main+0x2d0>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	801a      	strh	r2, [r3, #0]
 8000d48:	e024      	b.n	8000d94 <main+0x11c>
//	gfx_ram[i]=gfx_char[((i>>5)&7)+((i>>8)<<3)]; // test input fill  8*128 v+h just normal characters
	gfx_ram[i&63] [i>>6]  =gfx_char[8+(i&7)+(((i>>3)*8)&63)];
 8000d4a:	4b7f      	ldr	r3, [pc, #508]	; (8000f48 <main+0x2d0>)
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	f103 0208 	add.w	r2, r3, #8
 8000d56:	4b7c      	ldr	r3, [pc, #496]	; (8000f48 <main+0x2d0>)
 8000d58:	881b      	ldrh	r3, [r3, #0]
 8000d5a:	08db      	lsrs	r3, r3, #3
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	00db      	lsls	r3, r3, #3
 8000d60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000d64:	441a      	add	r2, r3
 8000d66:	4b78      	ldr	r3, [pc, #480]	; (8000f48 <main+0x2d0>)
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d6e:	4976      	ldr	r1, [pc, #472]	; (8000f48 <main+0x2d0>)
 8000d70:	8809      	ldrh	r1, [r1, #0]
 8000d72:	0989      	lsrs	r1, r1, #6
 8000d74:	b289      	uxth	r1, r1
 8000d76:	4608      	mov	r0, r1
 8000d78:	4974      	ldr	r1, [pc, #464]	; (8000f4c <main+0x2d4>)
 8000d7a:	5c89      	ldrb	r1, [r1, r2]
 8000d7c:	4a74      	ldr	r2, [pc, #464]	; (8000f50 <main+0x2d8>)
 8000d7e:	011b      	lsls	r3, r3, #4
 8000d80:	4413      	add	r3, r2
 8000d82:	4403      	add	r3, r0
 8000d84:	460a      	mov	r2, r1
 8000d86:	701a      	strb	r2, [r3, #0]
for(i=0;i<1024;i++){
 8000d88:	4b6f      	ldr	r3, [pc, #444]	; (8000f48 <main+0x2d0>)
 8000d8a:	881b      	ldrh	r3, [r3, #0]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	4b6d      	ldr	r3, [pc, #436]	; (8000f48 <main+0x2d0>)
 8000d92:	801a      	strh	r2, [r3, #0]
 8000d94:	4b6c      	ldr	r3, [pc, #432]	; (8000f48 <main+0x2d0>)
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d9c:	d3d5      	bcc.n	8000d4a <main+0xd2>
//gfx_ram[i&63] [i>>6]  =250;
}

for(i=0;i<64;i++){
 8000d9e:	4b6a      	ldr	r3, [pc, #424]	; (8000f48 <main+0x2d0>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	801a      	strh	r2, [r3, #0]
 8000da4:	e011      	b.n	8000dca <main+0x152>
	potSource[i+64]=potSource2[i];  //load up from eeprom
 8000da6:	4b68      	ldr	r3, [pc, #416]	; (8000f48 <main+0x2d0>)
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	461a      	mov	r2, r3
 8000dac:	4b66      	ldr	r3, [pc, #408]	; (8000f48 <main+0x2d0>)
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	3340      	adds	r3, #64	; 0x40
 8000db2:	3298      	adds	r2, #152	; 0x98
 8000db4:	443a      	add	r2, r7
 8000db6:	f812 1c50 	ldrb.w	r1, [r2, #-80]
 8000dba:	4a62      	ldr	r2, [pc, #392]	; (8000f44 <main+0x2cc>)
 8000dbc:	54d1      	strb	r1, [r2, r3]
for(i=0;i<64;i++){
 8000dbe:	4b62      	ldr	r3, [pc, #392]	; (8000f48 <main+0x2d0>)
 8000dc0:	881b      	ldrh	r3, [r3, #0]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	4b60      	ldr	r3, [pc, #384]	; (8000f48 <main+0x2d0>)
 8000dc8:	801a      	strh	r2, [r3, #0]
 8000dca:	4b5f      	ldr	r3, [pc, #380]	; (8000f48 <main+0x2d0>)
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	2b3f      	cmp	r3, #63	; 0x3f
 8000dd0:	d9e9      	bls.n	8000da6 <main+0x12e>
}

for(i=0;i<64;i++){
 8000dd2:	4b5d      	ldr	r3, [pc, #372]	; (8000f48 <main+0x2d0>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	801a      	strh	r2, [r3, #0]
 8000dd8:	e011      	b.n	8000dfe <main+0x186>
	potSource[i+128]=potSource3[i];
 8000dda:	4b5b      	ldr	r3, [pc, #364]	; (8000f48 <main+0x2d0>)
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	4b59      	ldr	r3, [pc, #356]	; (8000f48 <main+0x2d0>)
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	3380      	adds	r3, #128	; 0x80
 8000de6:	3298      	adds	r2, #152	; 0x98
 8000de8:	443a      	add	r2, r7
 8000dea:	f812 1c94 	ldrb.w	r1, [r2, #-148]
 8000dee:	4a55      	ldr	r2, [pc, #340]	; (8000f44 <main+0x2cc>)
 8000df0:	54d1      	strb	r1, [r2, r3]
for(i=0;i<64;i++){
 8000df2:	4b55      	ldr	r3, [pc, #340]	; (8000f48 <main+0x2d0>)
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	3301      	adds	r3, #1
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	4b53      	ldr	r3, [pc, #332]	; (8000f48 <main+0x2d0>)
 8000dfc:	801a      	strh	r2, [r3, #0]
 8000dfe:	4b52      	ldr	r3, [pc, #328]	; (8000f48 <main+0x2d0>)
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	2b3f      	cmp	r3, #63	; 0x3f
 8000e04:	d9e9      	bls.n	8000dda <main+0x162>
}

for(i=0;i<180;i++){
 8000e06:	4b50      	ldr	r3, [pc, #320]	; (8000f48 <main+0x2d0>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	801a      	strh	r2, [r3, #0]
 8000e0c:	e010      	b.n	8000e30 <main+0x1b8>
	potValues[i]=potSource[i]>>4;
 8000e0e:	4b4e      	ldr	r3, [pc, #312]	; (8000f48 <main+0x2d0>)
 8000e10:	881b      	ldrh	r3, [r3, #0]
 8000e12:	461a      	mov	r2, r3
 8000e14:	4b4b      	ldr	r3, [pc, #300]	; (8000f44 <main+0x2cc>)
 8000e16:	5c9b      	ldrb	r3, [r3, r2]
 8000e18:	4a4b      	ldr	r2, [pc, #300]	; (8000f48 <main+0x2d0>)
 8000e1a:	8812      	ldrh	r2, [r2, #0]
 8000e1c:	091b      	lsrs	r3, r3, #4
 8000e1e:	b2d9      	uxtb	r1, r3
 8000e20:	4b4c      	ldr	r3, [pc, #304]	; (8000f54 <main+0x2dc>)
 8000e22:	5499      	strb	r1, [r3, r2]
for(i=0;i<180;i++){
 8000e24:	4b48      	ldr	r3, [pc, #288]	; (8000f48 <main+0x2d0>)
 8000e26:	881b      	ldrh	r3, [r3, #0]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	4b46      	ldr	r3, [pc, #280]	; (8000f48 <main+0x2d0>)
 8000e2e:	801a      	strh	r2, [r3, #0]
 8000e30:	4b45      	ldr	r3, [pc, #276]	; (8000f48 <main+0x2d0>)
 8000e32:	881b      	ldrh	r3, [r3, #0]
 8000e34:	2bb3      	cmp	r3, #179	; 0xb3
 8000e36:	d9ea      	bls.n	8000e0e <main+0x196>
}

float tempo_hold;  // calculate tempo look up
for (i=0;i<161;i++) {
 8000e38:	4b43      	ldr	r3, [pc, #268]	; (8000f48 <main+0x2d0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	801a      	strh	r2, [r3, #0]
 8000e3e:	e040      	b.n	8000ec2 <main+0x24a>

tempo_hold=(i+180)*0.0166666666;
 8000e40:	4b41      	ldr	r3, [pc, #260]	; (8000f48 <main+0x2d0>)
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	33b4      	adds	r3, #180	; 0xb4
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fc96 	bl	8000778 <__aeabi_i2d>
 8000e4c:	a330      	add	r3, pc, #192	; (adr r3, 8000f10 <main+0x298>)
 8000e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e52:	f7ff fa15 	bl	8000280 <__aeabi_dmul>
 8000e56:	4602      	mov	r2, r0
 8000e58:	460b      	mov	r3, r1
 8000e5a:	4610      	mov	r0, r2
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f7ff fcf5 	bl	800084c <__aeabi_d2f>
 8000e62:	4603      	mov	r3, r0
 8000e64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

tempo_hold=	1/tempo_hold;
 8000e68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000e6c:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8000e70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e74:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
//tempo_hold=	tempo_hold*2187.6*4;      // change for the sake of note length
tempo_hold=	tempo_hold*2187.6*1;      // change for the sake of note length
 8000e78:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000e7c:	f7ff fc8e 	bl	800079c <__aeabi_f2d>
 8000e80:	a325      	add	r3, pc, #148	; (adr r3, 8000f18 <main+0x2a0>)
 8000e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e86:	f7ff f9fb 	bl	8000280 <__aeabi_dmul>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	4610      	mov	r0, r2
 8000e90:	4619      	mov	r1, r3
 8000e92:	f7ff fcdb 	bl	800084c <__aeabi_d2f>
 8000e96:	4603      	mov	r3, r0
 8000e98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
tempo_lut[i]=tempo_hold;
 8000e9c:	4b2a      	ldr	r3, [pc, #168]	; (8000f48 <main+0x2d0>)
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8000ea6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eaa:	ee17 3a90 	vmov	r3, s15
 8000eae:	b299      	uxth	r1, r3
 8000eb0:	4b29      	ldr	r3, [pc, #164]	; (8000f58 <main+0x2e0>)
 8000eb2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
for (i=0;i<161;i++) {
 8000eb6:	4b24      	ldr	r3, [pc, #144]	; (8000f48 <main+0x2d0>)
 8000eb8:	881b      	ldrh	r3, [r3, #0]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <main+0x2d0>)
 8000ec0:	801a      	strh	r2, [r3, #0]
 8000ec2:	4b21      	ldr	r3, [pc, #132]	; (8000f48 <main+0x2d0>)
 8000ec4:	881b      	ldrh	r3, [r3, #0]
 8000ec6:	2ba0      	cmp	r3, #160	; 0xa0
 8000ec8:	d9ba      	bls.n	8000e40 <main+0x1c8>
}
isrMask=571; // def tempo 571=180bpm , 20 ms /isrcount
 8000eca:	4b24      	ldr	r3, [pc, #144]	; (8000f5c <main+0x2e4>)
 8000ecc:	f240 223b 	movw	r2, #571	; 0x23b
 8000ed0:	801a      	strh	r2, [r3, #0]

noteTiming=24;
 8000ed2:	4b23      	ldr	r3, [pc, #140]	; (8000f60 <main+0x2e8>)
 8000ed4:	2218      	movs	r2, #24
 8000ed6:	701a      	strb	r2, [r3, #0]
for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <main+0x2d0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	801a      	strh	r2, [r3, #0]
 8000ede:	e00b      	b.n	8000ef8 <main+0x280>
	spell[i]=67;
 8000ee0:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <main+0x2d0>)
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <main+0x2ec>)
 8000ee8:	2143      	movs	r1, #67	; 0x43
 8000eea:	5499      	strb	r1, [r3, r2]
for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8000eec:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <main+0x2d0>)
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <main+0x2d0>)
 8000ef6:	801a      	strh	r2, [r3, #0]
 8000ef8:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <main+0x2d0>)
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000f00:	d3ee      	bcc.n	8000ee0 <main+0x268>

}

display_fill();
 8000f02:	f000 ffc5 	bl	8001e90 <display_fill>
// build display, enc_lut2, works good

for (i=0;i<512;i++)	{gfx_char[i]=gfx_char[i];
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <main+0x2d0>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	801a      	strh	r2, [r3, #0]
 8000f0c:	e03c      	b.n	8000f88 <main+0x310>
 8000f0e:	bf00      	nop
 8000f10:	0febdd13 	.word	0x0febdd13
 8000f14:	3f911111 	.word	0x3f911111
 8000f18:	33333333 	.word	0x33333333
 8000f1c:	40a11733 	.word	0x40a11733
 8000f20:	0800d2f0 	.word	0x0800d2f0
 8000f24:	20000784 	.word	0x20000784
 8000f28:	20000824 	.word	0x20000824
 8000f2c:	40000400 	.word	0x40000400
 8000f30:	200007dc 	.word	0x200007dc
 8000f34:	2000086c 	.word	0x2000086c
 8000f38:	20000688 	.word	0x20000688
 8000f3c:	200014c8 	.word	0x200014c8
 8000f40:	20000730 	.word	0x20000730
 8000f44:	20000b20 	.word	0x20000b20
 8000f48:	20000c7c 	.word	0x20000c7c
 8000f4c:	200001d8 	.word	0x200001d8
 8000f50:	20001e00 	.word	0x20001e00
 8000f54:	20000a20 	.word	0x20000a20
 8000f58:	20001cbc 	.word	0x20001cbc
 8000f5c:	20000c28 	.word	0x20000c28
 8000f60:	20000c20 	.word	0x20000c20
 8000f64:	20000024 	.word	0x20000024
 8000f68:	4b7b      	ldr	r3, [pc, #492]	; (8001158 <main+0x4e0>)
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4b7a      	ldr	r3, [pc, #488]	; (8001158 <main+0x4e0>)
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	4b79      	ldr	r3, [pc, #484]	; (800115c <main+0x4e4>)
 8000f76:	5c59      	ldrb	r1, [r3, r1]
 8000f78:	4b78      	ldr	r3, [pc, #480]	; (800115c <main+0x4e4>)
 8000f7a:	5499      	strb	r1, [r3, r2]
 8000f7c:	4b76      	ldr	r3, [pc, #472]	; (8001158 <main+0x4e0>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	3301      	adds	r3, #1
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	4b74      	ldr	r3, [pc, #464]	; (8001158 <main+0x4e0>)
 8000f86:	801a      	strh	r2, [r3, #0]
 8000f88:	4b73      	ldr	r3, [pc, #460]	; (8001158 <main+0x4e0>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f90:	d3ea      	bcc.n	8000f68 <main+0x2f0>

}    //font replace



uint16_t lut_temp2=0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
uint16_t lut_temp3=0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
for (i=0;i<416;i++){					// get a few more pages
 8000f9e:	4b6e      	ldr	r3, [pc, #440]	; (8001158 <main+0x4e0>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	801a      	strh	r2, [r3, #0]
 8000fa4:	e027      	b.n	8000ff6 <main+0x37e>

	if (disp_lut [i>>4] [i&15] <95) lut_temp2=lut_temp2+1;
 8000fa6:	4b6c      	ldr	r3, [pc, #432]	; (8001158 <main+0x4e0>)
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	091b      	lsrs	r3, r3, #4
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	461a      	mov	r2, r3
 8000fb0:	4b69      	ldr	r3, [pc, #420]	; (8001158 <main+0x4e0>)
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	f003 030f 	and.w	r3, r3, #15
 8000fb8:	4969      	ldr	r1, [pc, #420]	; (8001160 <main+0x4e8>)
 8000fba:	0112      	lsls	r2, r2, #4
 8000fbc:	4413      	add	r3, r2
 8000fbe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000fc2:	2b5e      	cmp	r3, #94	; 0x5e
 8000fc4:	d805      	bhi.n	8000fd2 <main+0x35a>
 8000fc6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8000fca:	3301      	adds	r3, #1
 8000fcc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8000fd0:	e00b      	b.n	8000fea <main+0x372>

	else {enc2_lut[lut_temp3] =i;  lut_temp3++;}
 8000fd2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8000fd6:	4a60      	ldr	r2, [pc, #384]	; (8001158 <main+0x4e0>)
 8000fd8:	8811      	ldrh	r1, [r2, #0]
 8000fda:	4a62      	ldr	r2, [pc, #392]	; (8001164 <main+0x4ec>)
 8000fdc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000fe0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
for (i=0;i<416;i++){					// get a few more pages
 8000fea:	4b5b      	ldr	r3, [pc, #364]	; (8001158 <main+0x4e0>)
 8000fec:	881b      	ldrh	r3, [r3, #0]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	4b59      	ldr	r3, [pc, #356]	; (8001158 <main+0x4e0>)
 8000ff4:	801a      	strh	r2, [r3, #0]
 8000ff6:	4b58      	ldr	r3, [pc, #352]	; (8001158 <main+0x4e0>)
 8000ff8:	881b      	ldrh	r3, [r3, #0]
 8000ffa:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 8000ffe:	d3d2      	bcc.n	8000fa6 <main+0x32e>
}


menuSelect=0;
 8001000:	4b59      	ldr	r3, [pc, #356]	; (8001168 <main+0x4f0>)
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
// fill up sample
firstbarLoop=0;
 8001006:	4b59      	ldr	r3, [pc, #356]	; (800116c <main+0x4f4>)
 8001008:	2200      	movs	r2, #0
 800100a:	701a      	strb	r2, [r3, #0]
printf("Hello everybody");
 800100c:	4858      	ldr	r0, [pc, #352]	; (8001170 <main+0x4f8>)
 800100e:	f007 f8ed 	bl	80081ec <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_counter++ ;
 8001012:	4b58      	ldr	r3, [pc, #352]	; (8001174 <main+0x4fc>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	3301      	adds	r3, #1
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4b56      	ldr	r3, [pc, #344]	; (8001174 <main+0x4fc>)
 800101c:	701a      	strb	r2, [r3, #0]
	  loop_counter2++;//
 800101e:	4b56      	ldr	r3, [pc, #344]	; (8001178 <main+0x500>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	3301      	adds	r3, #1
 8001024:	4a54      	ldr	r2, [pc, #336]	; (8001178 <main+0x500>)
 8001026:	6013      	str	r3, [r2, #0]

	  // if (menu_page<320) lcd_feedback();  //curious no issues with lcd without this  , maybe spell writing
if 	((loop_counter2&7)==6)      {analoginputloopb();} // this is ok , plenty quick
 8001028:	4b53      	ldr	r3, [pc, #332]	; (8001178 <main+0x500>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 0307 	and.w	r3, r3, #7
 8001030:	2b06      	cmp	r3, #6
 8001032:	d101      	bne.n	8001038 <main+0x3c0>
 8001034:	f000 fc6c 	bl	8001910 <analoginputloopb>
if (loop_counter2==9096) {    //   4096=1min=32bytes so 4mins per 128 bank or 15 writes/hour
 8001038:	4b4f      	ldr	r3, [pc, #316]	; (8001178 <main+0x500>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f242 3288 	movw	r2, #9096	; 0x2388
 8001040:	4293      	cmp	r3, r2
 8001042:	d137      	bne.n	80010b4 <main+0x43c>

	mem_buf=potSource[mem_count];
 8001044:	4b4d      	ldr	r3, [pc, #308]	; (800117c <main+0x504>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b4d      	ldr	r3, [pc, #308]	; (8001180 <main+0x508>)
 800104c:	5c9a      	ldrb	r2, [r3, r2]
 800104e:	4b4d      	ldr	r3, [pc, #308]	; (8001184 <main+0x50c>)
 8001050:	701a      	strb	r2, [r3, #0]
	// read values from stored
	HAL_I2C_Mem_Write(&hi2c2, 160, ((1+(mem_count>>6))<<6)+(mem_count&63), 2, &mem_buf, 1, 1000);
 8001052:	4b4a      	ldr	r3, [pc, #296]	; (800117c <main+0x504>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	099b      	lsrs	r3, r3, #6
 8001058:	b2db      	uxtb	r3, r3
 800105a:	b29b      	uxth	r3, r3
 800105c:	3301      	adds	r3, #1
 800105e:	b29b      	uxth	r3, r3
 8001060:	019b      	lsls	r3, r3, #6
 8001062:	b29a      	uxth	r2, r3
 8001064:	4b45      	ldr	r3, [pc, #276]	; (800117c <main+0x504>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	b29b      	uxth	r3, r3
 800106a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800106e:	b29b      	uxth	r3, r3
 8001070:	4413      	add	r3, r2
 8001072:	b29a      	uxth	r2, r3
 8001074:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001078:	9302      	str	r3, [sp, #8]
 800107a:	2301      	movs	r3, #1
 800107c:	9301      	str	r3, [sp, #4]
 800107e:	4b41      	ldr	r3, [pc, #260]	; (8001184 <main+0x50c>)
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	2302      	movs	r3, #2
 8001084:	21a0      	movs	r1, #160	; 0xa0
 8001086:	4840      	ldr	r0, [pc, #256]	; (8001188 <main+0x510>)
 8001088:	f004 fa26 	bl	80054d8 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 800108c:	2005      	movs	r0, #5
 800108e:	f002 fde5 	bl	8003c5c <HAL_Delay>
	if (mem_count==255) mem_count=0; else mem_count++;  // write to first
 8001092:	4b3a      	ldr	r3, [pc, #232]	; (800117c <main+0x504>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2bff      	cmp	r3, #255	; 0xff
 8001098:	d103      	bne.n	80010a2 <main+0x42a>
 800109a:	4b38      	ldr	r3, [pc, #224]	; (800117c <main+0x504>)
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
 80010a0:	e005      	b.n	80010ae <main+0x436>
 80010a2:	4b36      	ldr	r3, [pc, #216]	; (800117c <main+0x504>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	3301      	adds	r3, #1
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4b34      	ldr	r3, [pc, #208]	; (800117c <main+0x504>)
 80010ac:	701a      	strb	r2, [r3, #0]
	loop_counter2=0; //reset
 80010ae:	4b32      	ldr	r3, [pc, #200]	; (8001178 <main+0x500>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]

}


	  if (disp_end==1)	 {  // displaybuffer after each full screen update on spi
 80010b4:	4b35      	ldr	r3, [pc, #212]	; (800118c <main+0x514>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d12e      	bne.n	800111a <main+0x4a2>

		  { if (loop_counter3)  enc2_tempc=enc2_dir; else enc2_dir=enc2_tempc; }    //hold enc till finished , this to clean up characters for now ,works ok
 80010bc:	4b34      	ldr	r3, [pc, #208]	; (8001190 <main+0x518>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d006      	beq.n	80010d2 <main+0x45a>
 80010c4:	4b33      	ldr	r3, [pc, #204]	; (8001194 <main+0x51c>)
 80010c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	4b32      	ldr	r3, [pc, #200]	; (8001198 <main+0x520>)
 80010ce:	801a      	strh	r2, [r3, #0]
 80010d0:	e004      	b.n	80010dc <main+0x464>
 80010d2:	4b31      	ldr	r3, [pc, #196]	; (8001198 <main+0x520>)
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	b21a      	sxth	r2, r3
 80010d8:	4b2e      	ldr	r3, [pc, #184]	; (8001194 <main+0x51c>)
 80010da:	801a      	strh	r2, [r3, #0]
		  loop_counter3=!loop_counter3;  //blinker flips on each full page refresh
 80010dc:	4b2c      	ldr	r3, [pc, #176]	; (8001190 <main+0x518>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	bf0c      	ite	eq
 80010e4:	2301      	moveq	r3, #1
 80010e6:	2300      	movne	r3, #0
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	461a      	mov	r2, r3
 80010ec:	4b28      	ldr	r3, [pc, #160]	; (8001190 <main+0x518>)
 80010ee:	701a      	strb	r2, [r3, #0]

		  for (i=0;i<16;i++) {   displayBuffer();}
 80010f0:	4b19      	ldr	r3, [pc, #100]	; (8001158 <main+0x4e0>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	801a      	strh	r2, [r3, #0]
 80010f6:	e007      	b.n	8001108 <main+0x490>
 80010f8:	f000 fef6 	bl	8001ee8 <displayBuffer>
 80010fc:	4b16      	ldr	r3, [pc, #88]	; (8001158 <main+0x4e0>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	3301      	adds	r3, #1
 8001102:	b29a      	uxth	r2, r3
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <main+0x4e0>)
 8001106:	801a      	strh	r2, [r3, #0]
 8001108:	4b13      	ldr	r3, [pc, #76]	; (8001158 <main+0x4e0>)
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	2b0f      	cmp	r3, #15
 800110e:	d9f3      	bls.n	80010f8 <main+0x480>
		  enc2_dir=enc2_tempc;
 8001110:	4b21      	ldr	r3, [pc, #132]	; (8001198 <main+0x520>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	b21a      	sxth	r2, r3
 8001116:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <main+0x51c>)
 8001118:	801a      	strh	r2, [r3, #0]

	  }


	  if (init<6)				// after 6 its done for good
 800111a:	4b20      	ldr	r3, [pc, #128]	; (800119c <main+0x524>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b05      	cmp	r3, #5
 8001120:	d810      	bhi.n	8001144 <main+0x4cc>
{
	  for (i=0;i<6;i++) {display_init();}  //1-2ms ?  change length if flickering ,maybe initial data
 8001122:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <main+0x4e0>)
 8001124:	2200      	movs	r2, #0
 8001126:	801a      	strh	r2, [r3, #0]
 8001128:	e007      	b.n	800113a <main+0x4c2>
 800112a:	f000 fd09 	bl	8001b40 <display_init>
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <main+0x4e0>)
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	3301      	adds	r3, #1
 8001134:	b29a      	uxth	r2, r3
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <main+0x4e0>)
 8001138:	801a      	strh	r2, [r3, #0]
 800113a:	4b07      	ldr	r3, [pc, #28]	; (8001158 <main+0x4e0>)
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	2b05      	cmp	r3, #5
 8001140:	d9f3      	bls.n	800112a <main+0x4b2>
 8001142:	e001      	b.n	8001148 <main+0x4d0>
} else {display_update(); }  // send spi line data every loop cycle , self contained, single 8pixel line 18*256steps
 8001144:	f000 fdd8 	bl	8001cf8 <display_update>

	  ///////////////////////////////////////////////////////////////////////////////

	  if (loop_counter & 255)	{ // grab adc readings + 3ms , 32 step
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <main+0x4fc>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d041      	beq.n	80011d4 <main+0x55c>
	  	for (i=0;i<4;i++) {
 8001150:	4b01      	ldr	r3, [pc, #4]	; (8001158 <main+0x4e0>)
 8001152:	2200      	movs	r2, #0
 8001154:	801a      	strh	r2, [r3, #0]
 8001156:	e036      	b.n	80011c6 <main+0x54e>
 8001158:	20000c7c 	.word	0x20000c7c
 800115c:	200001d8 	.word	0x200001d8
 8001160:	0800920c 	.word	0x0800920c
 8001164:	200008b4 	.word	0x200008b4
 8001168:	20000c21 	.word	0x20000c21
 800116c:	20000c26 	.word	0x20000c26
 8001170:	08009120 	.word	0x08009120
 8001174:	20000c78 	.word	0x20000c78
 8001178:	20001958 	.word	0x20001958
 800117c:	20001956 	.word	0x20001956
 8001180:	20000b20 	.word	0x20000b20
 8001184:	2000195c 	.word	0x2000195c
 8001188:	20000730 	.word	0x20000730
 800118c:	20002246 	.word	0x20002246
 8001190:	20002247 	.word	0x20002247
 8001194:	2000193e 	.word	0x2000193e
 8001198:	20002248 	.word	0x20002248
 800119c:	2000194d 	.word	0x2000194d

	  adc_values[i]= (adc_source[i])>>3 ;
 80011a0:	4b29      	ldr	r3, [pc, #164]	; (8001248 <main+0x5d0>)
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b29      	ldr	r3, [pc, #164]	; (800124c <main+0x5d4>)
 80011a8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80011ac:	4a26      	ldr	r2, [pc, #152]	; (8001248 <main+0x5d0>)
 80011ae:	8812      	ldrh	r2, [r2, #0]
 80011b0:	08db      	lsrs	r3, r3, #3
 80011b2:	b299      	uxth	r1, r3
 80011b4:	4b26      	ldr	r3, [pc, #152]	; (8001250 <main+0x5d8>)
 80011b6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  	for (i=0;i<4;i++) {
 80011ba:	4b23      	ldr	r3, [pc, #140]	; (8001248 <main+0x5d0>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	3301      	adds	r3, #1
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	4b21      	ldr	r3, [pc, #132]	; (8001248 <main+0x5d0>)
 80011c4:	801a      	strh	r2, [r3, #0]
 80011c6:	4b20      	ldr	r3, [pc, #128]	; (8001248 <main+0x5d0>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d9e8      	bls.n	80011a0 <main+0x528>
	  }
	  //	adc_read();
	  	loop_counter=0;
 80011ce:	4b21      	ldr	r3, [pc, #132]	; (8001254 <main+0x5dc>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
	  }

	  if ((seq_pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 80011d4:	4b20      	ldr	r3, [pc, #128]	; (8001258 <main+0x5e0>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b07      	cmp	r3, #7
 80011da:	d106      	bne.n	80011ea <main+0x572>
 80011dc:	4b1f      	ldr	r3, [pc, #124]	; (800125c <main+0x5e4>)
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d102      	bne.n	80011ea <main+0x572>
 80011e4:	4b1d      	ldr	r3, [pc, #116]	; (800125c <main+0x5e4>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	801a      	strh	r2, [r3, #0]
	   if (promValue<64) promValue=promValue+1 ; else promValue=0;  // fetch eeprom   nogo
	  	  if ((promValues[promValue] ) !=(potValues[promValue]))  EEPROM.write(promValue,(potValues[promValue]));   //  not too happy can totally kill speed  will have to put elsewhere
	  	  promValues[promValue] =potValues[promValue];
	  	   */

	  	     HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,(seq_pos & 1)); // easy skip ?
 80011ea:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <main+0x5e0>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	461a      	mov	r2, r3
 80011f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011fa:	4819      	ldr	r0, [pc, #100]	; (8001260 <main+0x5e8>)
 80011fc:	f004 f80e 	bl	800521c <HAL_GPIO_WritePin>
	  	    // very inconsistent

	  if (sample_point>511) sample_pointD=0; // loop when zero cross , good but limited, works ok
 8001200:	4b18      	ldr	r3, [pc, #96]	; (8001264 <main+0x5ec>)
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	b29b      	uxth	r3, r3
 8001206:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800120a:	d302      	bcc.n	8001212 <main+0x59a>
 800120c:	4b16      	ldr	r3, [pc, #88]	; (8001268 <main+0x5f0>)
 800120e:	2200      	movs	r2, #0
 8001210:	801a      	strh	r2, [r3, #0]
	  if (sample_point<511)  sample_pointD=512;
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <main+0x5ec>)
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	b29b      	uxth	r3, r3
 8001218:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800121c:	d803      	bhi.n	8001226 <main+0x5ae>
 800121e:	4b12      	ldr	r3, [pc, #72]	; (8001268 <main+0x5f0>)
 8001220:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001224:	801a      	strh	r2, [r3, #0]


	  if (sample_pointB!=sample_pointD) bank_write=1; // set start of buffer ,grab , works ok
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <main+0x5f4>)
 8001228:	881a      	ldrh	r2, [r3, #0]
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <main+0x5f0>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	429a      	cmp	r2, r3
 8001230:	d002      	beq.n	8001238 <main+0x5c0>
 8001232:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <main+0x5f8>)
 8001234:	2201      	movs	r2, #1
 8001236:	801a      	strh	r2, [r3, #0]
	  if (bank_write){
 8001238:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <main+0x5f8>)
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	f43f aee8 	beq.w	8001012 <main+0x39a>

	  	sampling();
 8001242:	f000 ffc1 	bl	80021c8 <sampling>
	  loop_counter++ ;
 8001246:	e6e4      	b.n	8001012 <main+0x39a>
 8001248:	20000c7c 	.word	0x20000c7c
 800124c:	200014c8 	.word	0x200014c8
 8001250:	200001cc 	.word	0x200001cc
 8001254:	20000c78 	.word	0x20000c78
 8001258:	20000c54 	.word	0x20000c54
 800125c:	20001944 	.word	0x20001944
 8001260:	40020800 	.word	0x40020800
 8001264:	20001482 	.word	0x20001482
 8001268:	20001486 	.word	0x20001486
 800126c:	20000c7a 	.word	0x20000c7a
 8001270:	200001d6 	.word	0x200001d6

08001274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b094      	sub	sp, #80	; 0x50
 8001278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127a:	f107 0320 	add.w	r3, r7, #32
 800127e:	2230      	movs	r2, #48	; 0x30
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f006 ffaa 	bl	80081dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	4b28      	ldr	r3, [pc, #160]	; (8001340 <SystemClock_Config+0xcc>)
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	4a27      	ldr	r2, [pc, #156]	; (8001340 <SystemClock_Config+0xcc>)
 80012a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a6:	6413      	str	r3, [r2, #64]	; 0x40
 80012a8:	4b25      	ldr	r3, [pc, #148]	; (8001340 <SystemClock_Config+0xcc>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b4:	2300      	movs	r3, #0
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	4b22      	ldr	r3, [pc, #136]	; (8001344 <SystemClock_Config+0xd0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a21      	ldr	r2, [pc, #132]	; (8001344 <SystemClock_Config+0xd0>)
 80012be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <SystemClock_Config+0xd0>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d0:	2302      	movs	r3, #2
 80012d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012d4:	2301      	movs	r3, #1
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012d8:	2310      	movs	r3, #16
 80012da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012dc:	2302      	movs	r3, #2
 80012de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012e0:	2300      	movs	r3, #0
 80012e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012e4:	2308      	movs	r3, #8
 80012e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80012e8:	2364      	movs	r3, #100	; 0x64
 80012ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012ec:	2302      	movs	r3, #2
 80012ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012f0:	2304      	movs	r3, #4
 80012f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f4:	f107 0320 	add.w	r3, r7, #32
 80012f8:	4618      	mov	r0, r3
 80012fa:	f004 ff69 	bl	80061d0 <HAL_RCC_OscConfig>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001304:	f002 f8f0 	bl	80034e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001308:	230f      	movs	r3, #15
 800130a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800130c:	2302      	movs	r3, #2
 800130e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001318:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800131a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	2103      	movs	r1, #3
 8001326:	4618      	mov	r0, r3
 8001328:	f005 f9ca 	bl	80066c0 <HAL_RCC_ClockConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001332:	f002 f8d9 	bl	80034e8 <Error_Handler>
  }
}
 8001336:	bf00      	nop
 8001338:	3750      	adds	r7, #80	; 0x50
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800
 8001344:	40007000 	.word	0x40007000

08001348 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800134e:	463b      	mov	r3, r7
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800135a:	4b37      	ldr	r3, [pc, #220]	; (8001438 <MX_ADC1_Init+0xf0>)
 800135c:	4a37      	ldr	r2, [pc, #220]	; (800143c <MX_ADC1_Init+0xf4>)
 800135e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001360:	4b35      	ldr	r3, [pc, #212]	; (8001438 <MX_ADC1_Init+0xf0>)
 8001362:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001366:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001368:	4b33      	ldr	r3, [pc, #204]	; (8001438 <MX_ADC1_Init+0xf0>)
 800136a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800136e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001370:	4b31      	ldr	r3, [pc, #196]	; (8001438 <MX_ADC1_Init+0xf0>)
 8001372:	2201      	movs	r2, #1
 8001374:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001376:	4b30      	ldr	r3, [pc, #192]	; (8001438 <MX_ADC1_Init+0xf0>)
 8001378:	2201      	movs	r2, #1
 800137a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800137c:	4b2e      	ldr	r3, [pc, #184]	; (8001438 <MX_ADC1_Init+0xf0>)
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001384:	4b2c      	ldr	r3, [pc, #176]	; (8001438 <MX_ADC1_Init+0xf0>)
 8001386:	2200      	movs	r2, #0
 8001388:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800138a:	4b2b      	ldr	r3, [pc, #172]	; (8001438 <MX_ADC1_Init+0xf0>)
 800138c:	4a2c      	ldr	r2, [pc, #176]	; (8001440 <MX_ADC1_Init+0xf8>)
 800138e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001390:	4b29      	ldr	r3, [pc, #164]	; (8001438 <MX_ADC1_Init+0xf0>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001396:	4b28      	ldr	r3, [pc, #160]	; (8001438 <MX_ADC1_Init+0xf0>)
 8001398:	2204      	movs	r2, #4
 800139a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800139c:	4b26      	ldr	r3, [pc, #152]	; (8001438 <MX_ADC1_Init+0xf0>)
 800139e:	2201      	movs	r2, #1
 80013a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80013a4:	4b24      	ldr	r3, [pc, #144]	; (8001438 <MX_ADC1_Init+0xf0>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013aa:	4823      	ldr	r0, [pc, #140]	; (8001438 <MX_ADC1_Init+0xf0>)
 80013ac:	f002 fc7a 	bl	8003ca4 <HAL_ADC_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80013b6:	f002 f897 	bl	80034e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80013ba:	2304      	movs	r3, #4
 80013bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013be:	2301      	movs	r3, #1
 80013c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80013c2:	2307      	movs	r3, #7
 80013c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c6:	463b      	mov	r3, r7
 80013c8:	4619      	mov	r1, r3
 80013ca:	481b      	ldr	r0, [pc, #108]	; (8001438 <MX_ADC1_Init+0xf0>)
 80013cc:	f002 fe70 	bl	80040b0 <HAL_ADC_ConfigChannel>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80013d6:	f002 f887 	bl	80034e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80013da:	2305      	movs	r3, #5
 80013dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80013de:	2302      	movs	r3, #2
 80013e0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e2:	463b      	mov	r3, r7
 80013e4:	4619      	mov	r1, r3
 80013e6:	4814      	ldr	r0, [pc, #80]	; (8001438 <MX_ADC1_Init+0xf0>)
 80013e8:	f002 fe62 	bl	80040b0 <HAL_ADC_ConfigChannel>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80013f2:	f002 f879 	bl	80034e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80013f6:	2306      	movs	r3, #6
 80013f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80013fa:	2303      	movs	r3, #3
 80013fc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013fe:	463b      	mov	r3, r7
 8001400:	4619      	mov	r1, r3
 8001402:	480d      	ldr	r0, [pc, #52]	; (8001438 <MX_ADC1_Init+0xf0>)
 8001404:	f002 fe54 	bl	80040b0 <HAL_ADC_ConfigChannel>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 800140e:	f002 f86b 	bl	80034e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001412:	2309      	movs	r3, #9
 8001414:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001416:	2304      	movs	r3, #4
 8001418:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800141a:	463b      	mov	r3, r7
 800141c:	4619      	mov	r1, r3
 800141e:	4806      	ldr	r0, [pc, #24]	; (8001438 <MX_ADC1_Init+0xf0>)
 8001420:	f002 fe46 	bl	80040b0 <HAL_ADC_ConfigChannel>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800142a:	f002 f85d 	bl	80034e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000688 	.word	0x20000688
 800143c:	40012000 	.word	0x40012000
 8001440:	0f000001 	.word	0x0f000001

08001444 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <MX_I2C2_Init+0x50>)
 800144a:	4a13      	ldr	r2, [pc, #76]	; (8001498 <MX_I2C2_Init+0x54>)
 800144c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_I2C2_Init+0x50>)
 8001450:	4a12      	ldr	r2, [pc, #72]	; (800149c <MX_I2C2_Init+0x58>)
 8001452:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_I2C2_Init+0x50>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <MX_I2C2_Init+0x50>)
 800145c:	2200      	movs	r2, #0
 800145e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <MX_I2C2_Init+0x50>)
 8001462:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001466:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <MX_I2C2_Init+0x50>)
 800146a:	2200      	movs	r2, #0
 800146c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <MX_I2C2_Init+0x50>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001474:	4b07      	ldr	r3, [pc, #28]	; (8001494 <MX_I2C2_Init+0x50>)
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <MX_I2C2_Init+0x50>)
 800147c:	2200      	movs	r2, #0
 800147e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001480:	4804      	ldr	r0, [pc, #16]	; (8001494 <MX_I2C2_Init+0x50>)
 8001482:	f003 fee5 	bl	8005250 <HAL_I2C_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800148c:	f002 f82c 	bl	80034e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000730 	.word	0x20000730
 8001498:	40005800 	.word	0x40005800
 800149c:	00061a80 	.word	0x00061a80

080014a0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80014a4:	4b17      	ldr	r3, [pc, #92]	; (8001504 <MX_SPI2_Init+0x64>)
 80014a6:	4a18      	ldr	r2, [pc, #96]	; (8001508 <MX_SPI2_Init+0x68>)
 80014a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <MX_SPI2_Init+0x64>)
 80014ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014b2:	4b14      	ldr	r3, [pc, #80]	; (8001504 <MX_SPI2_Init+0x64>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <MX_SPI2_Init+0x64>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014be:	4b11      	ldr	r3, [pc, #68]	; (8001504 <MX_SPI2_Init+0x64>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <MX_SPI2_Init+0x64>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <MX_SPI2_Init+0x64>)
 80014cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014d0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <MX_SPI2_Init+0x64>)
 80014d4:	2230      	movs	r2, #48	; 0x30
 80014d6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014d8:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <MX_SPI2_Init+0x64>)
 80014da:	2200      	movs	r2, #0
 80014dc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <MX_SPI2_Init+0x64>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014e4:	4b07      	ldr	r3, [pc, #28]	; (8001504 <MX_SPI2_Init+0x64>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <MX_SPI2_Init+0x64>)
 80014ec:	220a      	movs	r2, #10
 80014ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014f0:	4804      	ldr	r0, [pc, #16]	; (8001504 <MX_SPI2_Init+0x64>)
 80014f2:	f005 fab1 	bl	8006a58 <HAL_SPI_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80014fc:	f001 fff4 	bl	80034e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000784 	.word	0x20000784
 8001508:	40003800 	.word	0x40003800

0800150c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08c      	sub	sp, #48	; 0x30
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001512:	f107 030c 	add.w	r3, r7, #12
 8001516:	2224      	movs	r2, #36	; 0x24
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f006 fe5e 	bl	80081dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001528:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <MX_TIM2_Init+0xa4>)
 800152a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800152e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001530:	4b1f      	ldr	r3, [pc, #124]	; (80015b0 <MX_TIM2_Init+0xa4>)
 8001532:	2200      	movs	r2, #0
 8001534:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001536:	4b1e      	ldr	r3, [pc, #120]	; (80015b0 <MX_TIM2_Init+0xa4>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800153c:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <MX_TIM2_Init+0xa4>)
 800153e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001542:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001544:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <MX_TIM2_Init+0xa4>)
 8001546:	f44f 7200 	mov.w	r2, #512	; 0x200
 800154a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154c:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <MX_TIM2_Init+0xa4>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001552:	2301      	movs	r3, #1
 8001554:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001556:	2302      	movs	r3, #2
 8001558:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800155a:	2301      	movs	r3, #1
 800155c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800155e:	2300      	movs	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8001562:	2302      	movs	r3, #2
 8001564:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001566:	2302      	movs	r3, #2
 8001568:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800156a:	2301      	movs	r3, #1
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8001572:	2302      	movs	r3, #2
 8001574:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001576:	f107 030c 	add.w	r3, r7, #12
 800157a:	4619      	mov	r1, r3
 800157c:	480c      	ldr	r0, [pc, #48]	; (80015b0 <MX_TIM2_Init+0xa4>)
 800157e:	f005 ff11 	bl	80073a4 <HAL_TIM_Encoder_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001588:	f001 ffae 	bl	80034e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158c:	2300      	movs	r3, #0
 800158e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	4619      	mov	r1, r3
 8001598:	4805      	ldr	r0, [pc, #20]	; (80015b0 <MX_TIM2_Init+0xa4>)
 800159a:	f006 fd2f 	bl	8007ffc <HAL_TIMEx_MasterConfigSynchronization>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80015a4:	f001 ffa0 	bl	80034e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015a8:	bf00      	nop
 80015aa:	3730      	adds	r7, #48	; 0x30
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	200007dc 	.word	0x200007dc

080015b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08e      	sub	sp, #56	; 0x38
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c8:	f107 0320 	add.w	r3, r7, #32
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
 80015e0:	615a      	str	r2, [r3, #20]
 80015e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015e4:	4b2c      	ldr	r3, [pc, #176]	; (8001698 <MX_TIM3_Init+0xe4>)
 80015e6:	4a2d      	ldr	r2, [pc, #180]	; (800169c <MX_TIM3_Init+0xe8>)
 80015e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015ea:	4b2b      	ldr	r3, [pc, #172]	; (8001698 <MX_TIM3_Init+0xe4>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f0:	4b29      	ldr	r3, [pc, #164]	; (8001698 <MX_TIM3_Init+0xe4>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2857;
 80015f6:	4b28      	ldr	r3, [pc, #160]	; (8001698 <MX_TIM3_Init+0xe4>)
 80015f8:	f640 3229 	movw	r2, #2857	; 0xb29
 80015fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fe:	4b26      	ldr	r3, [pc, #152]	; (8001698 <MX_TIM3_Init+0xe4>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001604:	4b24      	ldr	r3, [pc, #144]	; (8001698 <MX_TIM3_Init+0xe4>)
 8001606:	2280      	movs	r2, #128	; 0x80
 8001608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800160a:	4823      	ldr	r0, [pc, #140]	; (8001698 <MX_TIM3_Init+0xe4>)
 800160c:	f005 fcb4 	bl	8006f78 <HAL_TIM_Base_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001616:	f001 ff67 	bl	80034e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800161a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001620:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001624:	4619      	mov	r1, r3
 8001626:	481c      	ldr	r0, [pc, #112]	; (8001698 <MX_TIM3_Init+0xe4>)
 8001628:	f006 f92c 	bl	8007884 <HAL_TIM_ConfigClockSource>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001632:	f001 ff59 	bl	80034e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001636:	4818      	ldr	r0, [pc, #96]	; (8001698 <MX_TIM3_Init+0xe4>)
 8001638:	f005 fdaa 	bl	8007190 <HAL_TIM_PWM_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001642:	f001 ff51 	bl	80034e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001646:	2300      	movs	r3, #0
 8001648:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164a:	2300      	movs	r3, #0
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800164e:	f107 0320 	add.w	r3, r7, #32
 8001652:	4619      	mov	r1, r3
 8001654:	4810      	ldr	r0, [pc, #64]	; (8001698 <MX_TIM3_Init+0xe4>)
 8001656:	f006 fcd1 	bl	8007ffc <HAL_TIMEx_MasterConfigSynchronization>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001660:	f001 ff42 	bl	80034e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001664:	2370      	movs	r3, #112	; 0x70
 8001666:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	2208      	movs	r2, #8
 8001678:	4619      	mov	r1, r3
 800167a:	4807      	ldr	r0, [pc, #28]	; (8001698 <MX_TIM3_Init+0xe4>)
 800167c:	f006 f840 	bl	8007700 <HAL_TIM_PWM_ConfigChannel>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001686:	f001 ff2f 	bl	80034e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800168a:	4803      	ldr	r0, [pc, #12]	; (8001698 <MX_TIM3_Init+0xe4>)
 800168c:	f002 f934 	bl	80038f8 <HAL_TIM_MspPostInit>

}
 8001690:	bf00      	nop
 8001692:	3738      	adds	r7, #56	; 0x38
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000824 	.word	0x20000824
 800169c:	40000400 	.word	0x40000400

080016a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08c      	sub	sp, #48	; 0x30
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016a6:	f107 030c 	add.w	r3, r7, #12
 80016aa:	2224      	movs	r2, #36	; 0x24
 80016ac:	2100      	movs	r1, #0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f006 fd94 	bl	80081dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016bc:	4b20      	ldr	r3, [pc, #128]	; (8001740 <MX_TIM4_Init+0xa0>)
 80016be:	4a21      	ldr	r2, [pc, #132]	; (8001744 <MX_TIM4_Init+0xa4>)
 80016c0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80016c2:	4b1f      	ldr	r3, [pc, #124]	; (8001740 <MX_TIM4_Init+0xa0>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c8:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <MX_TIM4_Init+0xa0>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80016ce:	4b1c      	ldr	r3, [pc, #112]	; (8001740 <MX_TIM4_Init+0xa0>)
 80016d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016d4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d6:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <MX_TIM4_Init+0xa0>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016dc:	4b18      	ldr	r3, [pc, #96]	; (8001740 <MX_TIM4_Init+0xa0>)
 80016de:	2200      	movs	r2, #0
 80016e0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80016e2:	2301      	movs	r3, #1
 80016e4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80016e6:	2302      	movs	r3, #2
 80016e8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016ea:	2301      	movs	r3, #1
 80016ec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 80016f2:	2302      	movs	r3, #2
 80016f4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80016f6:	2302      	movs	r3, #2
 80016f8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016fa:	2301      	movs	r3, #1
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016fe:	2300      	movs	r3, #0
 8001700:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8001702:	2302      	movs	r3, #2
 8001704:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001706:	f107 030c 	add.w	r3, r7, #12
 800170a:	4619      	mov	r1, r3
 800170c:	480c      	ldr	r0, [pc, #48]	; (8001740 <MX_TIM4_Init+0xa0>)
 800170e:	f005 fe49 	bl	80073a4 <HAL_TIM_Encoder_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001718:	f001 fee6 	bl	80034e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800171c:	2300      	movs	r3, #0
 800171e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001720:	2300      	movs	r3, #0
 8001722:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	4619      	mov	r1, r3
 8001728:	4805      	ldr	r0, [pc, #20]	; (8001740 <MX_TIM4_Init+0xa0>)
 800172a:	f006 fc67 	bl	8007ffc <HAL_TIMEx_MasterConfigSynchronization>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001734:	f001 fed8 	bl	80034e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001738:	bf00      	nop
 800173a:	3730      	adds	r7, #48	; 0x30
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	2000086c 	.word	0x2000086c
 8001744:	40000800 	.word	0x40000800

08001748 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <MX_DMA_Init+0x3c>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a0b      	ldr	r2, [pc, #44]	; (8001784 <MX_DMA_Init+0x3c>)
 8001758:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <MX_DMA_Init+0x3c>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800176a:	2200      	movs	r2, #0
 800176c:	2100      	movs	r1, #0
 800176e:	203c      	movs	r0, #60	; 0x3c
 8001770:	f003 f829 	bl	80047c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001774:	203c      	movs	r0, #60	; 0x3c
 8001776:	f003 f842 	bl	80047fe <HAL_NVIC_EnableIRQ>

}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40023800 	.word	0x40023800

08001788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178e:	f107 030c 	add.w	r3, r7, #12
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
 800179c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	4b20      	ldr	r3, [pc, #128]	; (8001824 <MX_GPIO_Init+0x9c>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a1f      	ldr	r2, [pc, #124]	; (8001824 <MX_GPIO_Init+0x9c>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <MX_GPIO_Init+0x9c>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	4b19      	ldr	r3, [pc, #100]	; (8001824 <MX_GPIO_Init+0x9c>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a18      	ldr	r2, [pc, #96]	; (8001824 <MX_GPIO_Init+0x9c>)
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b16      	ldr	r3, [pc, #88]	; (8001824 <MX_GPIO_Init+0x9c>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	603b      	str	r3, [r7, #0]
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <MX_GPIO_Init+0x9c>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a11      	ldr	r2, [pc, #68]	; (8001824 <MX_GPIO_Init+0x9c>)
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <MX_GPIO_Init+0x9c>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	603b      	str	r3, [r7, #0]
 80017f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017f8:	480b      	ldr	r0, [pc, #44]	; (8001828 <MX_GPIO_Init+0xa0>)
 80017fa:	f003 fd0f 	bl	800521c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80017fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001802:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001804:	2301      	movs	r3, #1
 8001806:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001810:	f107 030c 	add.w	r3, r7, #12
 8001814:	4619      	mov	r1, r3
 8001816:	4804      	ldr	r0, [pc, #16]	; (8001828 <MX_GPIO_Init+0xa0>)
 8001818:	f003 fb7c 	bl	8004f14 <HAL_GPIO_Init>

}
 800181c:	bf00      	nop
 800181e:	3720      	adds	r7, #32
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40023800 	.word	0x40023800
 8001828:	40020800 	.word	0x40020800

0800182c <SPI_command>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
void SPI_command(void){
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
// pins are all good , SPI is always the problem!!!
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 8001832:	4b18      	ldr	r3, [pc, #96]	; (8001894 <SPI_command+0x68>)
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d128      	bne.n	800188c <SPI_command+0x60>
 800183a:	4b17      	ldr	r3, [pc, #92]	; (8001898 <SPI_command+0x6c>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d124      	bne.n	800188c <SPI_command+0x60>

uint8_t spi_store[5];

	//clk_pin=(i&1)^1;
		//bsrr_long=0;
		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8001842:	4b16      	ldr	r3, [pc, #88]	; (800189c <SPI_command+0x70>)
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	0a1b      	lsrs	r3, r3, #8
 8001848:	b29b      	uxth	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <SPI_command+0x2a>
 800184e:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <SPI_command+0x74>)
 8001850:	22f8      	movs	r2, #248	; 0xf8
 8001852:	701a      	strb	r2, [r3, #0]
 8001854:	e002      	b.n	800185c <SPI_command+0x30>
 8001856:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <SPI_command+0x74>)
 8001858:	22fa      	movs	r2, #250	; 0xfa
 800185a:	701a      	strb	r2, [r3, #0]
/*		bsrr_long=spi_byte<<16; // top byte for command 24-16, then 2 bytes of data 16-0
		spi_hold=(spi_hold&255);
		bsrr_long=bsrr_long+((spi_hold>>4)<<12); // 4 bits to top
		bsrr_long=bsrr_long+((spi_hold&15)<<4);	// 4 bits to top
*/
	spi_store[0]=spi_byte&255;
 800185c:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <SPI_command+0x74>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	703b      	strb	r3, [r7, #0]
	spi_store[1]=((spi_hold>>4)<<4)&255;
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <SPI_command+0x70>)
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	091b      	lsrs	r3, r3, #4
 8001868:	b29b      	uxth	r3, r3
 800186a:	011b      	lsls	r3, r3, #4
 800186c:	b2db      	uxtb	r3, r3
 800186e:	707b      	strb	r3, [r7, #1]
	spi_store[2]=((spi_hold&15)<<4)&255;
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <SPI_command+0x70>)
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	011b      	lsls	r3, r3, #4
 8001876:	b2db      	uxtb	r3, r3
 8001878:	70bb      	strb	r3, [r7, #2]

// send this to spi for now
		HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3, 100);  // working good
 800187a:	4639      	mov	r1, r7
 800187c:	2364      	movs	r3, #100	; 0x64
 800187e:	2203      	movs	r2, #3
 8001880:	4808      	ldr	r0, [pc, #32]	; (80018a4 <SPI_command+0x78>)
 8001882:	f005 f972 	bl	8006b6a <HAL_SPI_Transmit>


//HAL_Delay(10);
	spi_enable=1; }
 8001886:	4b03      	ldr	r3, [pc, #12]	; (8001894 <SPI_command+0x68>)
 8001888:	2201      	movs	r2, #1
 800188a:	801a      	strh	r2, [r3, #0]
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20001946 	.word	0x20001946
 8001898:	2000194c 	.word	0x2000194c
 800189c:	2000194a 	.word	0x2000194a
 80018a0:	20001948 	.word	0x20001948
 80018a4:	20000784 	.word	0x20000784

080018a8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)    // unreliable

{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]

	sample_point=sample_point & 1023;// this is 1
 80018b0:	4b13      	ldr	r3, [pc, #76]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	4b10      	ldr	r3, [pc, #64]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80018be:	801a      	strh	r2, [r3, #0]
	play_hold=play_sample[sample_point]; // this is 2
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	461a      	mov	r2, r3
 80018c8:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80018ca:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80018d0:	801a      	strh	r2, [r3, #0]

		if(TIM3==htim->Instance)			// nothing here is consistent
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a0d      	ldr	r2, [pc, #52]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d10b      	bne.n	80018f4 <HAL_TIM_PeriodElapsedCallback+0x4c>
{


TIM3->CCR3=play_hold ;  // keep readin sample storage
 80018dc:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	4b0a      	ldr	r3, [pc, #40]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80018e4:	63da      	str	r2, [r3, #60]	; 0x3c


//if (bs_count==255
	//	)  { bs_count=0; menu_store=(menuSelect>>2); } else bs_count++; // menu select, higher count just spills over  159 chamge to 128 2*64
//}
sample_point++; //this needs to be here or too fast and wrong sample rate
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80018e8:	881b      	ldrh	r3, [r3, #0]
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	3301      	adds	r3, #1
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	4b03      	ldr	r3, [pc, #12]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80018f2:	801a      	strh	r2, [r3, #0]

}

}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	20001482 	.word	0x20001482
 8001904:	20000c80 	.word	0x20000c80
 8001908:	20001484 	.word	0x20001484
 800190c:	40000400 	.word	0x40000400

08001910 <analoginputloopb>:
						}  // get value this this on e is blank
		//HAL_ADC_Stop(&hadc1);
//for (i=0;i<3;i++){ adc_values[i]= (adc_values[i]>>8) &15; } // reduce value to 4 bit
}
*/
void analoginputloopb(void){  //works fine still
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0


	//menuSelect = (7 - (adc_values[0] >>2))<<1;		//x *16  main menu select
	//menuSelect = (15 - (adc_values[0] >>1));		//x *7  main menu select
	//menuSelectX=(31 - adc_values[1])>>1;  // Y select inside page
	menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 8001916:	4b79      	ldr	r3, [pc, #484]	; (8001afc <analoginputloopb+0x1ec>)
 8001918:	889b      	ldrh	r3, [r3, #4]
 800191a:	091b      	lsrs	r3, r3, #4
 800191c:	b29b      	uxth	r3, r3
 800191e:	b2da      	uxtb	r2, r3
 8001920:	4b77      	ldr	r3, [pc, #476]	; (8001b00 <analoginputloopb+0x1f0>)
 8001922:	701a      	strb	r2, [r3, #0]
		menuSelectX=cursor_menu[2]&15;  // Y select inside page
 8001924:	4b75      	ldr	r3, [pc, #468]	; (8001afc <analoginputloopb+0x1ec>)
 8001926:	889b      	ldrh	r3, [r3, #4]
 8001928:	b2db      	uxtb	r3, r3
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	b2da      	uxtb	r2, r3
 8001930:	4b74      	ldr	r3, [pc, #464]	; (8001b04 <analoginputloopb+0x1f4>)
 8001932:	701a      	strb	r2, [r3, #0]
	//	counterVarB = menuSelectX + menuSelect; // select mem page 10*8  and location pointer  77
//		if (adc_values[1]>15)	menu_holder=disp_lut [(menuSelect)	+1] [31-adc_values[1]]; // change back to 0-15
//	else menu_holder=disp_lut [(menuSelect)	] [15-adc_values[1]];  // grab disp lut value for pointer if valid then write for now

		//menu_holder=disp_lut [(menuSelect)	] [(15-adc_values[1])];   // value from disp lut
		menu_holder=disp_lut [menuSelect] [menuSelectX];   // value from disp lut
 8001934:	4b72      	ldr	r3, [pc, #456]	; (8001b00 <analoginputloopb+0x1f0>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	4b72      	ldr	r3, [pc, #456]	; (8001b04 <analoginputloopb+0x1f4>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	4619      	mov	r1, r3
 8001940:	4a71      	ldr	r2, [pc, #452]	; (8001b08 <analoginputloopb+0x1f8>)
 8001942:	0103      	lsls	r3, r0, #4
 8001944:	440b      	add	r3, r1
 8001946:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800194a:	80fb      	strh	r3, [r7, #6]
		cursor_menu[1]=0;
 800194c:	4b6b      	ldr	r3, [pc, #428]	; (8001afc <analoginputloopb+0x1ec>)
 800194e:	2200      	movs	r2, #0
 8001950:	805a      	strh	r2, [r3, #2]
		//cursor_menu[2]=cursor_lookup[enc2_dir];
		// cursor_menu[2]=cursor_lookup[enc2_dir]; //needed for correct line sequence ,obsolete
		cursor_menu[2]=enc2_dir;
 8001952:	4b6e      	ldr	r3, [pc, #440]	; (8001b0c <analoginputloopb+0x1fc>)
 8001954:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001958:	b29a      	uxth	r2, r3
 800195a:	4b68      	ldr	r3, [pc, #416]	; (8001afc <analoginputloopb+0x1ec>)
 800195c:	809a      	strh	r2, [r3, #4]
		
		//cursor_menu[2]=(16-adc_values[1]);



		if (menu_holder>127)	counterVarB=menu_holder-128; //  points to actual potvalues location from dsip_lut when value is higher than 127 , works ok problem with menu display
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	2b7f      	cmp	r3, #127	; 0x7f
 8001962:	d904      	bls.n	800196e <analoginputloopb+0x5e>
 8001964:	88fb      	ldrh	r3, [r7, #6]
 8001966:	3b80      	subs	r3, #128	; 0x80
 8001968:	b29a      	uxth	r2, r3
 800196a:	4b69      	ldr	r3, [pc, #420]	; (8001b10 <analoginputloopb+0x200>)
 800196c:	801a      	strh	r2, [r3, #0]
		if (menu_holder>511)	counterVarB=menu_holder-384;		//max potvalue address is 142 , fix second page issue later
 800196e:	88fb      	ldrh	r3, [r7, #6]
 8001970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001974:	d305      	bcc.n	8001982 <analoginputloopb+0x72>
 8001976:	88fb      	ldrh	r3, [r7, #6]
 8001978:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800197c:	b29a      	uxth	r2, r3
 800197e:	4b64      	ldr	r3, [pc, #400]	; (8001b10 <analoginputloopb+0x200>)
 8001980:	801a      	strh	r2, [r3, #0]


		enc_dir=potSource[counterVarB];
 8001982:	4b63      	ldr	r3, [pc, #396]	; (8001b10 <analoginputloopb+0x200>)
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	4b62      	ldr	r3, [pc, #392]	; (8001b14 <analoginputloopb+0x204>)
 800198a:	5c9b      	ldrb	r3, [r3, r2]
 800198c:	b21a      	sxth	r2, r3
 800198e:	4b62      	ldr	r3, [pc, #392]	; (8001b18 <analoginputloopb+0x208>)
 8001990:	801a      	strh	r2, [r3, #0]


	enc_temp=(TIM2->CNT)>>1;  // read counter tim2 ,divider ok
 8001992:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	085b      	lsrs	r3, r3, #1
 800199a:	b29a      	uxth	r2, r3
 800199c:	4b5f      	ldr	r3, [pc, #380]	; (8001b1c <analoginputloopb+0x20c>)
 800199e:	801a      	strh	r2, [r3, #0]
	enc2_temp=(TIM4->CNT)>>1;  // read counter tim4
 80019a0:	4b5f      	ldr	r3, [pc, #380]	; (8001b20 <analoginputloopb+0x210>)
 80019a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a4:	085b      	lsrs	r3, r3, #1
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	4b5e      	ldr	r3, [pc, #376]	; (8001b24 <analoginputloopb+0x214>)
 80019aa:	801a      	strh	r2, [r3, #0]
	enc2_temp=enc2_temp&511; // fix overflow ?
 80019ac:	4b5d      	ldr	r3, [pc, #372]	; (8001b24 <analoginputloopb+0x214>)
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	4b5b      	ldr	r3, [pc, #364]	; (8001b24 <analoginputloopb+0x214>)
 80019b8:	801a      	strh	r2, [r3, #0]
	if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-(disp_multi[enc2_dir>>4]);   // start settle timer , will do 2 times per turn always, wire opposite
 80019ba:	4b58      	ldr	r3, [pc, #352]	; (8001b1c <analoginputloopb+0x20c>)
 80019bc:	881a      	ldrh	r2, [r3, #0]
 80019be:	4b5a      	ldr	r3, [pc, #360]	; (8001b28 <analoginputloopb+0x218>)
 80019c0:	881b      	ldrh	r3, [r3, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d911      	bls.n	80019ea <analoginputloopb+0xda>
 80019c6:	4b54      	ldr	r3, [pc, #336]	; (8001b18 <analoginputloopb+0x208>)
 80019c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	4b4f      	ldr	r3, [pc, #316]	; (8001b0c <analoginputloopb+0x1fc>)
 80019d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019d4:	111b      	asrs	r3, r3, #4
 80019d6:	b21b      	sxth	r3, r3
 80019d8:	4619      	mov	r1, r3
 80019da:	4b54      	ldr	r3, [pc, #336]	; (8001b2c <analoginputloopb+0x21c>)
 80019dc:	5c5b      	ldrb	r3, [r3, r1]
 80019de:	b29b      	uxth	r3, r3
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	b21a      	sxth	r2, r3
 80019e6:	4b4c      	ldr	r3, [pc, #304]	; (8001b18 <analoginputloopb+0x208>)
 80019e8:	801a      	strh	r2, [r3, #0]
	if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+(disp_multi[enc2_dir>>4]);   // start settle timer , will do 2 times per turn always, wire opposite , step multiplier
 80019ea:	4b4c      	ldr	r3, [pc, #304]	; (8001b1c <analoginputloopb+0x20c>)
 80019ec:	881a      	ldrh	r2, [r3, #0]
 80019ee:	4b4e      	ldr	r3, [pc, #312]	; (8001b28 <analoginputloopb+0x218>)
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d211      	bcs.n	8001a1a <analoginputloopb+0x10a>
 80019f6:	4b45      	ldr	r3, [pc, #276]	; (8001b0c <analoginputloopb+0x1fc>)
 80019f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019fc:	111b      	asrs	r3, r3, #4
 80019fe:	b21b      	sxth	r3, r3
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b4a      	ldr	r3, [pc, #296]	; (8001b2c <analoginputloopb+0x21c>)
 8001a04:	5c9b      	ldrb	r3, [r3, r2]
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	4b43      	ldr	r3, [pc, #268]	; (8001b18 <analoginputloopb+0x208>)
 8001a0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	4413      	add	r3, r2
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	b21a      	sxth	r2, r3
 8001a16:	4b40      	ldr	r3, [pc, #256]	; (8001b18 <analoginputloopb+0x208>)
 8001a18:	801a      	strh	r2, [r3, #0]
	//if (enc_temp<enc_tempB)	 enc_dir++;

  enc2_temp=enc2_lut[enc2_temp];  // force alternative values for skip  , seems to work ok , disable temporarily
 8001a1a:	4b42      	ldr	r3, [pc, #264]	; (8001b24 <analoginputloopb+0x214>)
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4b43      	ldr	r3, [pc, #268]	; (8001b30 <analoginputloopb+0x220>)
 8001a22:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001a26:	4b3f      	ldr	r3, [pc, #252]	; (8001b24 <analoginputloopb+0x214>)
 8001a28:	801a      	strh	r2, [r3, #0]

	if (enc_dir>160) enc_dir=160;
 8001a2a:	4b3b      	ldr	r3, [pc, #236]	; (8001b18 <analoginputloopb+0x208>)
 8001a2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a30:	2ba0      	cmp	r3, #160	; 0xa0
 8001a32:	dd02      	ble.n	8001a3a <analoginputloopb+0x12a>
 8001a34:	4b38      	ldr	r3, [pc, #224]	; (8001b18 <analoginputloopb+0x208>)
 8001a36:	22a0      	movs	r2, #160	; 0xa0
 8001a38:	801a      	strh	r2, [r3, #0]
			if (enc_dir<0) enc_dir=0;
 8001a3a:	4b37      	ldr	r3, [pc, #220]	; (8001b18 <analoginputloopb+0x208>)
 8001a3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	da02      	bge.n	8001a4a <analoginputloopb+0x13a>
 8001a44:	4b34      	ldr	r3, [pc, #208]	; (8001b18 <analoginputloopb+0x208>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	801a      	strh	r2, [r3, #0]
			//if (enc2_temp<16) enc_dir=(enc_dir<<2) & 127; // faster for notes on first row

			potSource[counterVarB]=enc_dir;       // enter data into potsource
 8001a4a:	4b33      	ldr	r3, [pc, #204]	; (8001b18 <analoginputloopb+0x208>)
 8001a4c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001a50:	4b2f      	ldr	r3, [pc, #188]	; (8001b10 <analoginputloopb+0x200>)
 8001a52:	881b      	ldrh	r3, [r3, #0]
 8001a54:	461a      	mov	r2, r3
 8001a56:	b2c9      	uxtb	r1, r1
 8001a58:	4b2e      	ldr	r3, [pc, #184]	; (8001b14 <analoginputloopb+0x204>)
 8001a5a:	5499      	strb	r1, [r3, r2]
					enc_dir=0;
 8001a5c:	4b2e      	ldr	r3, [pc, #184]	; (8001b18 <analoginputloopb+0x208>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	801a      	strh	r2, [r3, #0]
			enc_tempB=enc_temp;
 8001a62:	4b2e      	ldr	r3, [pc, #184]	; (8001b1c <analoginputloopb+0x20c>)
 8001a64:	881a      	ldrh	r2, [r3, #0]
 8001a66:	4b30      	ldr	r3, [pc, #192]	; (8001b28 <analoginputloopb+0x218>)
 8001a68:	801a      	strh	r2, [r3, #0]

			//if  (enc2_temp>enc2_tempB)	 enc2_dir++;   // start settle timer , will do 2 times per turn always
			//if (enc2_temp<enc2_tempB)	 enc2_dir--;
			enc2_dir=enc2_temp; //temp to try source data
 8001a6a:	4b2e      	ldr	r3, [pc, #184]	; (8001b24 <analoginputloopb+0x214>)
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	b21a      	sxth	r2, r3
 8001a70:	4b26      	ldr	r3, [pc, #152]	; (8001b0c <analoginputloopb+0x1fc>)
 8001a72:	801a      	strh	r2, [r3, #0]
		//	if (enc2_dir>127) menu_page[1]=127; else if (enc2_dir>255)   menu_page[1]=255;				else menu_page[1]=0;
		//	menu_page[1]= (enc2_dir >>7) <<7;
			menu_page[1]=enc2_dir&384;
 8001a74:	4b25      	ldr	r3, [pc, #148]	; (8001b0c <analoginputloopb+0x1fc>)
 8001a76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	4b2c      	ldr	r3, [pc, #176]	; (8001b34 <analoginputloopb+0x224>)
 8001a84:	805a      	strh	r2, [r3, #2]


			//if (enc2_dir>255) {menu_page[1]=0;display_fill();}

					if ((enc2_temp>127) && (enc2_tempB<=127)) display_fill();    // need to optimize
 8001a86:	4b27      	ldr	r3, [pc, #156]	; (8001b24 <analoginputloopb+0x214>)
 8001a88:	881b      	ldrh	r3, [r3, #0]
 8001a8a:	2b7f      	cmp	r3, #127	; 0x7f
 8001a8c:	d905      	bls.n	8001a9a <analoginputloopb+0x18a>
 8001a8e:	4b2a      	ldr	r3, [pc, #168]	; (8001b38 <analoginputloopb+0x228>)
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	2b7f      	cmp	r3, #127	; 0x7f
 8001a94:	d801      	bhi.n	8001a9a <analoginputloopb+0x18a>
 8001a96:	f000 f9fb 	bl	8001e90 <display_fill>
					if ((enc2_temp<=127) && (enc2_tempB>127)) display_fill();
 8001a9a:	4b22      	ldr	r3, [pc, #136]	; (8001b24 <analoginputloopb+0x214>)
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	2b7f      	cmp	r3, #127	; 0x7f
 8001aa0:	d805      	bhi.n	8001aae <analoginputloopb+0x19e>
 8001aa2:	4b25      	ldr	r3, [pc, #148]	; (8001b38 <analoginputloopb+0x228>)
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	2b7f      	cmp	r3, #127	; 0x7f
 8001aa8:	d901      	bls.n	8001aae <analoginputloopb+0x19e>
 8001aaa:	f000 f9f1 	bl	8001e90 <display_fill>
					if ((enc2_temp>255) && (enc2_tempB<=255)) display_fill();
 8001aae:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <analoginputloopb+0x214>)
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	2bff      	cmp	r3, #255	; 0xff
 8001ab4:	d905      	bls.n	8001ac2 <analoginputloopb+0x1b2>
 8001ab6:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <analoginputloopb+0x228>)
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	2bff      	cmp	r3, #255	; 0xff
 8001abc:	d801      	bhi.n	8001ac2 <analoginputloopb+0x1b2>
 8001abe:	f000 f9e7 	bl	8001e90 <display_fill>
					if ((enc2_temp<=255) && (enc2_tempB>255)) display_fill();
 8001ac2:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <analoginputloopb+0x214>)
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	2bff      	cmp	r3, #255	; 0xff
 8001ac8:	d805      	bhi.n	8001ad6 <analoginputloopb+0x1c6>
 8001aca:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <analoginputloopb+0x228>)
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	2bff      	cmp	r3, #255	; 0xff
 8001ad0:	d901      	bls.n	8001ad6 <analoginputloopb+0x1c6>
 8001ad2:	f000 f9dd 	bl	8001e90 <display_fill>


					enc2_tempB=enc2_temp; // to effective as counter not getting reset
 8001ad6:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <analoginputloopb+0x214>)
 8001ad8:	881a      	ldrh	r2, [r3, #0]
 8001ada:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <analoginputloopb+0x228>)
 8001adc:	801a      	strh	r2, [r3, #0]


potValues[counterVarB]=(potSource[counterVarB]>>4) & 15 ;  // reduce values for now ,use original for others , slow count
 8001ade:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <analoginputloopb+0x200>)
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <analoginputloopb+0x204>)
 8001ae6:	5c9b      	ldrb	r3, [r3, r2]
 8001ae8:	4a09      	ldr	r2, [pc, #36]	; (8001b10 <analoginputloopb+0x200>)
 8001aea:	8812      	ldrh	r2, [r2, #0]
 8001aec:	091b      	lsrs	r3, r3, #4
 8001aee:	b2d9      	uxtb	r1, r3
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <analoginputloopb+0x22c>)
 8001af2:	5499      	strb	r1, [r3, r2]

//potValues[counterVarB]=potSource[counterVarB] & 15 ;  // reduce values for now ,use original for others



}
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20001950 	.word	0x20001950
 8001b00:	20000c21 	.word	0x20000c21
 8001b04:	20000c22 	.word	0x20000c22
 8001b08:	0800920c 	.word	0x0800920c
 8001b0c:	2000193e 	.word	0x2000193e
 8001b10:	20000c24 	.word	0x20000c24
 8001b14:	20000b20 	.word	0x20000b20
 8001b18:	20001940 	.word	0x20001940
 8001b1c:	20001936 	.word	0x20001936
 8001b20:	40000800 	.word	0x40000800
 8001b24:	2000193a 	.word	0x2000193a
 8001b28:	20001938 	.word	0x20001938
 8001b2c:	200005dc 	.word	0x200005dc
 8001b30:	200008b4 	.word	0x200008b4
 8001b34:	20001960 	.word	0x20001960
 8001b38:	2000193c 	.word	0x2000193c
 8001b3c:	20000a20 	.word	0x20000a20

08001b40 <display_init>:
void display_init(void){
 8001b40:	b5b0      	push	{r4, r5, r7, lr}
 8001b42:	b08a      	sub	sp, #40	; 0x28
 8001b44:	af00      	add	r7, sp, #0
	//uint8_t sp2_command=0xf8+(0<<1);


		 // uint16_t disp[]={  304,304,304,270,257,268,384,258,51,51,52,53,54,55,56,57,58,0};  // normal characters
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd
 8001b46:	4b64      	ldr	r3, [pc, #400]	; (8001cd8 <display_init+0x198>)
 8001b48:	1d3c      	adds	r4, r7, #4
 8001b4a:	461d      	mov	r5, r3
 8001b4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b54:	682b      	ldr	r3, [r5, #0]
 8001b56:	8023      	strh	r3, [r4, #0]
		  if (spi_send==0){         // sets data byte
 8001b58:	4b60      	ldr	r3, [pc, #384]	; (8001cdc <display_init+0x19c>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f040 80b6 	bne.w	8001cce <display_init+0x18e>

/*if ((enc2_dir>63) && (menu_page[2]==0))  {init=4;menu_page[2]=1;}  //restart page draw for second page , might need home pos init
if  ((init==76) && (menu_page[2]==1)) menu_page[2]=2; //after drawing second page and finish
if ((enc2_dir<63) && (menu_page[2]==2))  {init=4;menu_page[2]=0;}
*/
switch(init){     //Remember every line advances +char on display ,,all this is mostly unneeded
 8001b62:	4b5f      	ldr	r3, [pc, #380]	; (8001ce0 <display_init+0x1a0>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	3b4d      	subs	r3, #77	; 0x4d
 8001b68:	2b07      	cmp	r3, #7
 8001b6a:	d879      	bhi.n	8001c60 <display_init+0x120>
 8001b6c:	a201      	add	r2, pc, #4	; (adr r2, 8001b74 <display_init+0x34>)
 8001b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b72:	bf00      	nop
 8001b74:	08001b95 	.word	0x08001b95
 8001b78:	08001bc5 	.word	0x08001bc5
 8001b7c:	08001bcd 	.word	0x08001bcd
 8001b80:	08001be9 	.word	0x08001be9
 8001b84:	08001bfd 	.word	0x08001bfd
 8001b88:	08001c0b 	.word	0x08001c0b
 8001b8c:	08001c1f 	.word	0x08001c1f
 8001b90:	08001c33 	.word	0x08001c33

case 77: spi_hold=384+(init_b>>1);init=init+((init_b&1)*2);break; // no delay ,jump to either blink sets
 8001b94:	4b53      	ldr	r3, [pc, #332]	; (8001ce4 <display_init+0x1a4>)
 8001b96:	881b      	ldrh	r3, [r3, #0]
 8001b98:	085b      	lsrs	r3, r3, #1
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	4b51      	ldr	r3, [pc, #324]	; (8001ce8 <display_init+0x1a8>)
 8001ba4:	801a      	strh	r2, [r3, #0]
 8001ba6:	4b4f      	ldr	r3, [pc, #316]	; (8001ce4 <display_init+0x1a4>)
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	4b4a      	ldr	r3, [pc, #296]	; (8001ce0 <display_init+0x1a0>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	4413      	add	r3, r2
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	4b48      	ldr	r3, [pc, #288]	; (8001ce0 <display_init+0x1a0>)
 8001bc0:	701a      	strb	r2, [r3, #0]
 8001bc2:	e05f      	b.n	8001c84 <display_init+0x144>

case 78: spi_hold=10;break; //write one set then jump
 8001bc4:	4b48      	ldr	r3, [pc, #288]	; (8001ce8 <display_init+0x1a8>)
 8001bc6:	220a      	movs	r2, #10
 8001bc8:	801a      	strh	r2, [r3, #0]
 8001bca:	e05b      	b.n	8001c84 <display_init+0x144>
case 79: spi_hold=spell[(init_b&62)+1];init=81;break;
 8001bcc:	4b45      	ldr	r3, [pc, #276]	; (8001ce4 <display_init+0x1a4>)
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	4a45      	ldr	r2, [pc, #276]	; (8001cec <display_init+0x1ac>)
 8001bd8:	5cd3      	ldrb	r3, [r2, r3]
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	4b42      	ldr	r3, [pc, #264]	; (8001ce8 <display_init+0x1a8>)
 8001bde:	801a      	strh	r2, [r3, #0]
 8001be0:	4b3f      	ldr	r3, [pc, #252]	; (8001ce0 <display_init+0x1a0>)
 8001be2:	2251      	movs	r2, #81	; 0x51
 8001be4:	701a      	strb	r2, [r3, #0]
 8001be6:	e04d      	b.n	8001c84 <display_init+0x144>
case 80: spi_hold=spell[init_b&62];break; // or write other set then jump
 8001be8:	4b3e      	ldr	r3, [pc, #248]	; (8001ce4 <display_init+0x1a4>)
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001bf0:	4a3e      	ldr	r2, [pc, #248]	; (8001cec <display_init+0x1ac>)
 8001bf2:	5cd3      	ldrb	r3, [r2, r3]
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	4b3c      	ldr	r3, [pc, #240]	; (8001ce8 <display_init+0x1a8>)
 8001bf8:	801a      	strh	r2, [r3, #0]
 8001bfa:	e043      	b.n	8001c84 <display_init+0x144>
case 81: spi_hold=10;init=81;break;
 8001bfc:	4b3a      	ldr	r3, [pc, #232]	; (8001ce8 <display_init+0x1a8>)
 8001bfe:	220a      	movs	r2, #10
 8001c00:	801a      	strh	r2, [r3, #0]
 8001c02:	4b37      	ldr	r3, [pc, #220]	; (8001ce0 <display_init+0x1a0>)
 8001c04:	2251      	movs	r2, #81	; 0x51
 8001c06:	701a      	strb	r2, [r3, #0]
 8001c08:	e03c      	b.n	8001c84 <display_init+0x144>


case 82: spi_hold=384+(init_b>>1);break;  // finish writes
 8001c0a:	4b36      	ldr	r3, [pc, #216]	; (8001ce4 <display_init+0x1a4>)
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	085b      	lsrs	r3, r3, #1
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	4b33      	ldr	r3, [pc, #204]	; (8001ce8 <display_init+0x1a8>)
 8001c1a:	801a      	strh	r2, [r3, #0]
 8001c1c:	e032      	b.n	8001c84 <display_init+0x144>
case 83: spi_hold=spell[init_b&62];break;
 8001c1e:	4b31      	ldr	r3, [pc, #196]	; (8001ce4 <display_init+0x1a4>)
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001c26:	4a31      	ldr	r2, [pc, #196]	; (8001cec <display_init+0x1ac>)
 8001c28:	5cd3      	ldrb	r3, [r2, r3]
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	4b2e      	ldr	r3, [pc, #184]	; (8001ce8 <display_init+0x1a8>)
 8001c2e:	801a      	strh	r2, [r3, #0]
 8001c30:	e028      	b.n	8001c84 <display_init+0x144>
case 84 : spi_hold=spell[(init_b&62)+1];init_b=cursor_menu[2]&63;displayBuffer ();init=76; break; //update cursor and displaybuffer
 8001c32:	4b2c      	ldr	r3, [pc, #176]	; (8001ce4 <display_init+0x1a4>)
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	4a2b      	ldr	r2, [pc, #172]	; (8001cec <display_init+0x1ac>)
 8001c3e:	5cd3      	ldrb	r3, [r2, r3]
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	4b29      	ldr	r3, [pc, #164]	; (8001ce8 <display_init+0x1a8>)
 8001c44:	801a      	strh	r2, [r3, #0]
 8001c46:	4b2a      	ldr	r3, [pc, #168]	; (8001cf0 <display_init+0x1b0>)
 8001c48:	889b      	ldrh	r3, [r3, #4]
 8001c4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <display_init+0x1a4>)
 8001c52:	801a      	strh	r2, [r3, #0]
 8001c54:	f000 f948 	bl	8001ee8 <displayBuffer>
 8001c58:	4b21      	ldr	r3, [pc, #132]	; (8001ce0 <display_init+0x1a0>)
 8001c5a:	224c      	movs	r2, #76	; 0x4c
 8001c5c:	701a      	strb	r2, [r3, #0]
 8001c5e:	e011      	b.n	8001c84 <display_init+0x144>
default : init_b=init-6;displayBuffer ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 8001c60:	4b1f      	ldr	r3, [pc, #124]	; (8001ce0 <display_init+0x1a0>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	3b06      	subs	r3, #6
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ce4 <display_init+0x1a4>)
 8001c6c:	801a      	strh	r2, [r3, #0]
 8001c6e:	f000 f93b 	bl	8001ee8 <displayBuffer>
 8001c72:	4b1c      	ldr	r3, [pc, #112]	; (8001ce4 <display_init+0x1a4>)
 8001c74:	881b      	ldrh	r3, [r3, #0]
 8001c76:	461a      	mov	r2, r3
 8001c78:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <display_init+0x1ac>)
 8001c7a:	5c9b      	ldrb	r3, [r3, r2]
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ce8 <display_init+0x1a8>)
 8001c80:	801a      	strh	r2, [r3, #0]
 8001c82:	bf00      	nop
}


if (init<6)	{HAL_Delay(30);spi_hold=disp[init] ;  init_b=cursor_menu[2]; } //delay needs to go
 8001c84:	4b16      	ldr	r3, [pc, #88]	; (8001ce0 <display_init+0x1a0>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b05      	cmp	r3, #5
 8001c8a:	d80f      	bhi.n	8001cac <display_init+0x16c>
 8001c8c:	201e      	movs	r0, #30
 8001c8e:	f001 ffe5 	bl	8003c5c <HAL_Delay>
 8001c92:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <display_init+0x1a0>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	3328      	adds	r3, #40	; 0x28
 8001c9a:	443b      	add	r3, r7
 8001c9c:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <display_init+0x1a8>)
 8001ca2:	801a      	strh	r2, [r3, #0]
 8001ca4:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <display_init+0x1b0>)
 8001ca6:	889a      	ldrh	r2, [r3, #4]
 8001ca8:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <display_init+0x1a4>)
 8001caa:	801a      	strh	r2, [r3, #0]

init++;   // after 6 it quits the rest is not needed
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <display_init+0x1a0>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <display_init+0x1a0>)
 8001cb6:	701a      	strb	r2, [r3, #0]
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <display_init+0x19c>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	701a      	strb	r2, [r3, #0]
 8001cbe:	f7ff fdb5 	bl	800182c <SPI_command>
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <display_init+0x19c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
 8001cc8:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <display_init+0x1b4>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	801a      	strh	r2, [r3, #0]
		  //if ((bsrr_counter==49) && (spi_send==2)) {bsrr_counter=0; spi_send=0;}
		  if (bsrr_counter==49)  {bsrr_counter=0; spi_send=0;}
		 }
*/

}
 8001cce:	bf00      	nop
 8001cd0:	3728      	adds	r7, #40	; 0x28
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bdb0      	pop	{r4, r5, r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	08009130 	.word	0x08009130
 8001cdc:	2000194c 	.word	0x2000194c
 8001ce0:	2000194d 	.word	0x2000194d
 8001ce4:	2000194e 	.word	0x2000194e
 8001ce8:	2000194a 	.word	0x2000194a
 8001cec:	20000024 	.word	0x20000024
 8001cf0:	20001950 	.word	0x20001950
 8001cf4:	20001946 	.word	0x20001946

08001cf8 <display_update>:



}

void display_update(void){				//spi display updater code , all gfx , works pretty ok n doesn't need to be running always 18x 128 ,constant scanning
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0

	uint8_t spi_store[5];

switch (gfx_skip) { // 1-17  one row
 8001cfe:	4b5d      	ldr	r3, [pc, #372]	; (8001e74 <display_update+0x17c>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d035      	beq.n	8001d72 <display_update+0x7a>
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	dc3d      	bgt.n	8001d86 <display_update+0x8e>
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d002      	beq.n	8001d14 <display_update+0x1c>
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d020      	beq.n	8001d54 <display_update+0x5c>
 8001d12:	e038      	b.n	8001d86 <display_update+0x8e>


case 1 : {spi_hold=((gfx_counter[0])&31)+384;gfx_counter[4]=(gfx_counter[0]>>5);  gfx_counter[0]=(gfx_counter[0]+1)&63 ;gfx_skip++;break ;}  // count up positions
 8001d14:	4b58      	ldr	r3, [pc, #352]	; (8001e78 <display_update+0x180>)
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	f003 031f 	and.w	r3, r3, #31
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	4b55      	ldr	r3, [pc, #340]	; (8001e7c <display_update+0x184>)
 8001d26:	801a      	strh	r2, [r3, #0]
 8001d28:	4b53      	ldr	r3, [pc, #332]	; (8001e78 <display_update+0x180>)
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	095b      	lsrs	r3, r3, #5
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	4b51      	ldr	r3, [pc, #324]	; (8001e78 <display_update+0x180>)
 8001d32:	811a      	strh	r2, [r3, #8]
 8001d34:	4b50      	ldr	r3, [pc, #320]	; (8001e78 <display_update+0x180>)
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	4b4d      	ldr	r3, [pc, #308]	; (8001e78 <display_update+0x180>)
 8001d44:	801a      	strh	r2, [r3, #0]
 8001d46:	4b4b      	ldr	r3, [pc, #300]	; (8001e74 <display_update+0x17c>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	4b49      	ldr	r3, [pc, #292]	; (8001e74 <display_update+0x17c>)
 8001d50:	701a      	strb	r2, [r3, #0]
 8001d52:	e028      	b.n	8001da6 <display_update+0xae>
case 2  : {	spi_hold=384+(gfx_counter[4]*8);gfx_skip++;break ;  }
 8001d54:	4b48      	ldr	r3, [pc, #288]	; (8001e78 <display_update+0x180>)
 8001d56:	891b      	ldrh	r3, [r3, #8]
 8001d58:	3330      	adds	r3, #48	; 0x30
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	4b46      	ldr	r3, [pc, #280]	; (8001e7c <display_update+0x184>)
 8001d62:	801a      	strh	r2, [r3, #0]
 8001d64:	4b43      	ldr	r3, [pc, #268]	; (8001e74 <display_update+0x17c>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	4b41      	ldr	r3, [pc, #260]	; (8001e74 <display_update+0x17c>)
 8001d6e:	701a      	strb	r2, [r3, #0]
 8001d70:	e019      	b.n	8001da6 <display_update+0xae>
case 3   : gfx_counter[3]=0; gfx_skip++;break;
 8001d72:	4b41      	ldr	r3, [pc, #260]	; (8001e78 <display_update+0x180>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	80da      	strh	r2, [r3, #6]
 8001d78:	4b3e      	ldr	r3, [pc, #248]	; (8001e74 <display_update+0x17c>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	4b3c      	ldr	r3, [pc, #240]	; (8001e74 <display_update+0x17c>)
 8001d82:	701a      	strb	r2, [r3, #0]
 8001d84:	e00f      	b.n	8001da6 <display_update+0xae>
//case 18 : gfx_counter[2]=(gfx_counter[2]+1) &63; gfx_counter[3]=0;gfx_skip=1;break;  //not ideal
default :  gfx_counter[3]=(gfx_counter[3]+1)&15;gfx_skip++;break;
 8001d86:	4b3c      	ldr	r3, [pc, #240]	; (8001e78 <display_update+0x180>)
 8001d88:	88db      	ldrh	r3, [r3, #6]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	4b38      	ldr	r3, [pc, #224]	; (8001e78 <display_update+0x180>)
 8001d96:	80da      	strh	r2, [r3, #6]
 8001d98:	4b36      	ldr	r3, [pc, #216]	; (8001e74 <display_update+0x17c>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	4b34      	ldr	r3, [pc, #208]	; (8001e74 <display_update+0x17c>)
 8001da2:	701a      	strb	r2, [r3, #0]
 8001da4:	bf00      	nop

}


if ((gfx_skip==2) || (gfx_skip==3) || (gfx_skip==1)) spi_hold=spi_hold; else spi_hold=gfx_ram[gfx_counter[2]] [gfx_counter[3]] ; // write command or data
 8001da6:	4b33      	ldr	r3, [pc, #204]	; (8001e74 <display_update+0x17c>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d007      	beq.n	8001dbe <display_update+0xc6>
 8001dae:	4b31      	ldr	r3, [pc, #196]	; (8001e74 <display_update+0x17c>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b03      	cmp	r3, #3
 8001db4:	d003      	beq.n	8001dbe <display_update+0xc6>
 8001db6:	4b2f      	ldr	r3, [pc, #188]	; (8001e74 <display_update+0x17c>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d104      	bne.n	8001dc8 <display_update+0xd0>
 8001dbe:	4b2f      	ldr	r3, [pc, #188]	; (8001e7c <display_update+0x184>)
 8001dc0:	881a      	ldrh	r2, [r3, #0]
 8001dc2:	4b2e      	ldr	r3, [pc, #184]	; (8001e7c <display_update+0x184>)
 8001dc4:	801a      	strh	r2, [r3, #0]
 8001dc6:	e00d      	b.n	8001de4 <display_update+0xec>
 8001dc8:	4b2b      	ldr	r3, [pc, #172]	; (8001e78 <display_update+0x180>)
 8001dca:	889b      	ldrh	r3, [r3, #4]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	4b2a      	ldr	r3, [pc, #168]	; (8001e78 <display_update+0x180>)
 8001dd0:	88db      	ldrh	r3, [r3, #6]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4a2a      	ldr	r2, [pc, #168]	; (8001e80 <display_update+0x188>)
 8001dd6:	0103      	lsls	r3, r0, #4
 8001dd8:	4413      	add	r3, r2
 8001dda:	440b      	add	r3, r1
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	4b26      	ldr	r3, [pc, #152]	; (8001e7c <display_update+0x184>)
 8001de2:	801a      	strh	r2, [r3, #0]

if (gfx_skip==19)  {gfx_counter[2]=(gfx_counter[2]+1) &63; gfx_counter[3]=0;gfx_skip=1;}   // fixed last doubled char
 8001de4:	4b23      	ldr	r3, [pc, #140]	; (8001e74 <display_update+0x17c>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b13      	cmp	r3, #19
 8001dea:	d10e      	bne.n	8001e0a <display_update+0x112>
 8001dec:	4b22      	ldr	r3, [pc, #136]	; (8001e78 <display_update+0x180>)
 8001dee:	889b      	ldrh	r3, [r3, #4]
 8001df0:	3301      	adds	r3, #1
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	4b1f      	ldr	r3, [pc, #124]	; (8001e78 <display_update+0x180>)
 8001dfc:	809a      	strh	r2, [r3, #4]
 8001dfe:	4b1e      	ldr	r3, [pc, #120]	; (8001e78 <display_update+0x180>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	80da      	strh	r2, [r3, #6]
 8001e04:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <display_update+0x17c>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	701a      	strb	r2, [r3, #0]

		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8001e0a:	4b1c      	ldr	r3, [pc, #112]	; (8001e7c <display_update+0x184>)
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	0a1b      	lsrs	r3, r3, #8
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <display_update+0x126>
 8001e16:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <display_update+0x18c>)
 8001e18:	22f8      	movs	r2, #248	; 0xf8
 8001e1a:	701a      	strb	r2, [r3, #0]
 8001e1c:	e002      	b.n	8001e24 <display_update+0x12c>
 8001e1e:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <display_update+0x18c>)
 8001e20:	22fa      	movs	r2, #250	; 0xfa
 8001e22:	701a      	strb	r2, [r3, #0]

		spi_store[0]=spi_byte&255;
 8001e24:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <display_update+0x18c>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	703b      	strb	r3, [r7, #0]
		spi_store[1]=((spi_hold>>4)<<4)&255;
 8001e2a:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <display_update+0x184>)
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	091b      	lsrs	r3, r3, #4
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	011b      	lsls	r3, r3, #4
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	707b      	strb	r3, [r7, #1]
		spi_store[2]=((spi_hold&15)<<4)&255;
 8001e38:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <display_update+0x184>)
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	011b      	lsls	r3, r3, #4
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	70bb      	strb	r3, [r7, #2]

	// send this to spi for now
			HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3, 100);  // working good ,blocking
 8001e42:	4639      	mov	r1, r7
 8001e44:	2364      	movs	r3, #100	; 0x64
 8001e46:	2203      	movs	r2, #3
 8001e48:	480f      	ldr	r0, [pc, #60]	; (8001e88 <display_update+0x190>)
 8001e4a:	f004 fe8e 	bl	8006b6a <HAL_SPI_Transmit>


disp_end=gfx_skip+gfx_counter[2]+gfx_counter[3];			// vsynch for displaybuffer
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <display_update+0x180>)
 8001e50:	889b      	ldrh	r3, [r3, #4]
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <display_update+0x17c>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	4413      	add	r3, r2
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <display_update+0x180>)
 8001e5e:	88db      	ldrh	r3, [r3, #6]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	4413      	add	r3, r2
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <display_update+0x194>)
 8001e68:	701a      	strb	r2, [r3, #0]


}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	200005d8 	.word	0x200005d8
 8001e78:	20002238 	.word	0x20002238
 8001e7c:	2000194a 	.word	0x2000194a
 8001e80:	20001e00 	.word	0x20001e00
 8001e84:	20001948 	.word	0x20001948
 8001e88:	20000784 	.word	0x20000784
 8001e8c:	20002246 	.word	0x20002246

08001e90 <display_fill>:
void display_fill(void)  {     // full update of gfx memory
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
loop_counter3=1;
 8001e94:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <display_fill+0x48>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	701a      	strb	r2, [r3, #0]
for (n=0;n<2048;n++)	{ //fills up gfx ram or not
 8001e9a:	4b10      	ldr	r3, [pc, #64]	; (8001edc <display_fill+0x4c>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	801a      	strh	r2, [r3, #0]
 8001ea0:	e012      	b.n	8001ec8 <display_fill+0x38>

enc2_dir=(n>>4)+menu_page[1]; 												// 0-128         +      0,127,255
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <display_fill+0x4c>)
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	091b      	lsrs	r3, r3, #4
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <display_fill+0x50>)
 8001eac:	885b      	ldrh	r3, [r3, #2]
 8001eae:	4413      	add	r3, r2
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	b21a      	sxth	r2, r3
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <display_fill+0x54>)
 8001eb6:	801a      	strh	r2, [r3, #0]

displayBuffer();
 8001eb8:	f000 f816 	bl	8001ee8 <displayBuffer>
for (n=0;n<2048;n++)	{ //fills up gfx ram or not
 8001ebc:	4b07      	ldr	r3, [pc, #28]	; (8001edc <display_fill+0x4c>)
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	4b05      	ldr	r3, [pc, #20]	; (8001edc <display_fill+0x4c>)
 8001ec6:	801a      	strh	r2, [r3, #0]
 8001ec8:	4b04      	ldr	r3, [pc, #16]	; (8001edc <display_fill+0x4c>)
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ed0:	d3e7      	bcc.n	8001ea2 <display_fill+0x12>
}
//enc2_dir=menu_page[1];  // end clean
}
 8001ed2:	bf00      	nop
 8001ed4:	bf00      	nop
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20002247 	.word	0x20002247
 8001edc:	20000c5a 	.word	0x20000c5a
 8001ee0:	20001960 	.word	0x20001960
 8001ee4:	2000193e 	.word	0x2000193e

08001ee8 <displayBuffer>:



void displayBuffer (void){        //  in a constant state of flux
 8001ee8:	b4b0      	push	{r4, r5, r7}
 8001eea:	b089      	sub	sp, #36	; 0x24
 8001eec:	af00      	add	r7, sp, #0

	if (disp_stepper==0) init_b=enc2_dir; else init_b=111+disp_stepper;  // fetch values for last line or cursor
 8001eee:	4b89      	ldr	r3, [pc, #548]	; (8002114 <displayBuffer+0x22c>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d106      	bne.n	8001f04 <displayBuffer+0x1c>
 8001ef6:	4b88      	ldr	r3, [pc, #544]	; (8002118 <displayBuffer+0x230>)
 8001ef8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	4b87      	ldr	r3, [pc, #540]	; (800211c <displayBuffer+0x234>)
 8001f00:	801a      	strh	r2, [r3, #0]
 8001f02:	e006      	b.n	8001f12 <displayBuffer+0x2a>
 8001f04:	4b83      	ldr	r3, [pc, #524]	; (8002114 <displayBuffer+0x22c>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	336f      	adds	r3, #111	; 0x6f
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	4b83      	ldr	r3, [pc, #524]	; (800211c <displayBuffer+0x234>)
 8001f10:	801a      	strh	r2, [r3, #0]

	uint8_t d_count;
uint16_t init_x=((init_b>>4)<<3);    // normal x8 , try other 64 x16
 8001f12:	4b82      	ldr	r3, [pc, #520]	; (800211c <displayBuffer+0x234>)
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	091b      	lsrs	r3, r3, #4
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	83bb      	strh	r3, [r7, #28]
uint8_t init_x2=init_x&63;  // 0-64  character address in gfx
 8001f1e:	8bbb      	ldrh	r3, [r7, #28]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f26:	76fb      	strb	r3, [r7, #27]
uint8_t init_y=init_b&15;
 8001f28:	4b7c      	ldr	r3, [pc, #496]	; (800211c <displayBuffer+0x234>)
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	76bb      	strb	r3, [r7, #26]
uint16_t store_x;
uint8_t lfotarget_menu[17]={0,40,16,8,40,40,48,56,64,72,0,0,0,0,0,0,0,0,0,0};  // keep lfo target list here for now *8
 8001f34:	4b7a      	ldr	r3, [pc, #488]	; (8002120 <displayBuffer+0x238>)
 8001f36:	1d3c      	adds	r4, r7, #4
 8001f38:	461d      	mov	r5, r3
 8001f3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f3e:	682b      	ldr	r3, [r5, #0]
 8001f40:	7023      	strb	r3, [r4, #0]
// use this to set feedback pointer for now
// just to point the lfo number

//if (enc2_dir<128){
	if (disp_stepper==0) { store_c= disp_lut [init_b>>4]  [init_y] ; feedback_pointer=((enc2_dir>>4)<<3)&127; feedback_line[10]=((enc2_dir&15)>>1)+48; }
 8001f42:	4b74      	ldr	r3, [pc, #464]	; (8002114 <displayBuffer+0x22c>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d125      	bne.n	8001f96 <displayBuffer+0xae>
 8001f4a:	4b74      	ldr	r3, [pc, #464]	; (800211c <displayBuffer+0x234>)
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	091b      	lsrs	r3, r3, #4
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	461a      	mov	r2, r3
 8001f54:	7ebb      	ldrb	r3, [r7, #26]
 8001f56:	4973      	ldr	r1, [pc, #460]	; (8002124 <displayBuffer+0x23c>)
 8001f58:	0112      	lsls	r2, r2, #4
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001f60:	4b71      	ldr	r3, [pc, #452]	; (8002128 <displayBuffer+0x240>)
 8001f62:	801a      	strh	r2, [r3, #0]
 8001f64:	4b6c      	ldr	r3, [pc, #432]	; (8002118 <displayBuffer+0x230>)
 8001f66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f6a:	111b      	asrs	r3, r3, #4
 8001f6c:	b21b      	sxth	r3, r3
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	4b6c      	ldr	r3, [pc, #432]	; (800212c <displayBuffer+0x244>)
 8001f7a:	701a      	strb	r2, [r3, #0]
 8001f7c:	4b66      	ldr	r3, [pc, #408]	; (8002118 <displayBuffer+0x230>)
 8001f7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	105b      	asrs	r3, r3, #1
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	3330      	adds	r3, #48	; 0x30
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	4b67      	ldr	r3, [pc, #412]	; (8002130 <displayBuffer+0x248>)
 8001f94:	829a      	strh	r2, [r3, #20]
if  ((disp_stepper<9) && (disp_stepper))
 8001f96:	4b5f      	ldr	r3, [pc, #380]	; (8002114 <displayBuffer+0x22c>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d81a      	bhi.n	8001fd4 <displayBuffer+0xec>
 8001f9e:	4b5d      	ldr	r3, [pc, #372]	; (8002114 <displayBuffer+0x22c>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d016      	beq.n	8001fd4 <displayBuffer+0xec>

{	feedback_line[disp_stepper]=menuList[disp_stepper+feedback_pointer];  // feedback data info
 8001fa6:	4b5b      	ldr	r3, [pc, #364]	; (8002114 <displayBuffer+0x22c>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	4b5f      	ldr	r3, [pc, #380]	; (800212c <displayBuffer+0x244>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	4a60      	ldr	r2, [pc, #384]	; (8002134 <displayBuffer+0x24c>)
 8001fb4:	5cd1      	ldrb	r1, [r2, r3]
 8001fb6:	4b57      	ldr	r3, [pc, #348]	; (8002114 <displayBuffer+0x22c>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	b289      	uxth	r1, r1
 8001fbe:	4b5c      	ldr	r3, [pc, #368]	; (8002130 <displayBuffer+0x248>)
 8001fc0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	store_c=feedback_line[disp_stepper];//gets potvalues pointer from menus or feedback line
 8001fc4:	4b53      	ldr	r3, [pc, #332]	; (8002114 <displayBuffer+0x22c>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b59      	ldr	r3, [pc, #356]	; (8002130 <displayBuffer+0x248>)
 8001fcc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001fd0:	4b55      	ldr	r3, [pc, #340]	; (8002128 <displayBuffer+0x240>)
 8001fd2:	801a      	strh	r2, [r3, #0]
}
if (disp_stepper>8) store_c=feedback_line[disp_stepper];  /// just the lcd out  values
 8001fd4:	4b4f      	ldr	r3, [pc, #316]	; (8002114 <displayBuffer+0x22c>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d907      	bls.n	8001fec <displayBuffer+0x104>
 8001fdc:	4b4d      	ldr	r3, [pc, #308]	; (8002114 <displayBuffer+0x22c>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4b53      	ldr	r3, [pc, #332]	; (8002130 <displayBuffer+0x248>)
 8001fe4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001fe8:	4b4f      	ldr	r3, [pc, #316]	; (8002128 <displayBuffer+0x240>)
 8001fea:	801a      	strh	r2, [r3, #0]




	// all this can be simplified
	 if (store_c==64) store_c=47;  //EMPTY SPACE
 8001fec:	4b4e      	ldr	r3, [pc, #312]	; (8002128 <displayBuffer+0x240>)
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	2b40      	cmp	r3, #64	; 0x40
 8001ff2:	d102      	bne.n	8001ffa <displayBuffer+0x112>
 8001ff4:	4b4c      	ldr	r3, [pc, #304]	; (8002128 <displayBuffer+0x240>)
 8001ff6:	222f      	movs	r2, #47	; 0x2f
 8001ff8:	801a      	strh	r2, [r3, #0]
	if ((store_c>127)&& (store_c<255))  {lcd_out3=potSource[store_c-128] ;     store_c= potValues[store_c&127]+48;															}		// NORMAL POTVALUES
 8001ffa:	4b4b      	ldr	r3, [pc, #300]	; (8002128 <displayBuffer+0x240>)
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	2b7f      	cmp	r3, #127	; 0x7f
 8002000:	d916      	bls.n	8002030 <displayBuffer+0x148>
 8002002:	4b49      	ldr	r3, [pc, #292]	; (8002128 <displayBuffer+0x240>)
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	2bfe      	cmp	r3, #254	; 0xfe
 8002008:	d812      	bhi.n	8002030 <displayBuffer+0x148>
 800200a:	4b47      	ldr	r3, [pc, #284]	; (8002128 <displayBuffer+0x240>)
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	3b80      	subs	r3, #128	; 0x80
 8002010:	4a49      	ldr	r2, [pc, #292]	; (8002138 <displayBuffer+0x250>)
 8002012:	5cd3      	ldrb	r3, [r2, r3]
 8002014:	b29a      	uxth	r2, r3
 8002016:	4b49      	ldr	r3, [pc, #292]	; (800213c <displayBuffer+0x254>)
 8002018:	801a      	strh	r2, [r3, #0]
 800201a:	4b43      	ldr	r3, [pc, #268]	; (8002128 <displayBuffer+0x240>)
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002022:	4a47      	ldr	r2, [pc, #284]	; (8002140 <displayBuffer+0x258>)
 8002024:	5cd3      	ldrb	r3, [r2, r3]
 8002026:	b29b      	uxth	r3, r3
 8002028:	3330      	adds	r3, #48	; 0x30
 800202a:	b29a      	uxth	r2, r3
 800202c:	4b3e      	ldr	r3, [pc, #248]	; (8002128 <displayBuffer+0x240>)
 800202e:	801a      	strh	r2, [r3, #0]
	if ((store_c>254)	&& (store_c<384)) 											{lcd_out3=potSource[store_c-128] ;store_c= potValues[store_c-128]+48;}  // POTVALUES 128-254
 8002030:	4b3d      	ldr	r3, [pc, #244]	; (8002128 <displayBuffer+0x240>)
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	2bfe      	cmp	r3, #254	; 0xfe
 8002036:	d916      	bls.n	8002066 <displayBuffer+0x17e>
 8002038:	4b3b      	ldr	r3, [pc, #236]	; (8002128 <displayBuffer+0x240>)
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8002040:	d211      	bcs.n	8002066 <displayBuffer+0x17e>
 8002042:	4b39      	ldr	r3, [pc, #228]	; (8002128 <displayBuffer+0x240>)
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	3b80      	subs	r3, #128	; 0x80
 8002048:	4a3b      	ldr	r2, [pc, #236]	; (8002138 <displayBuffer+0x250>)
 800204a:	5cd3      	ldrb	r3, [r2, r3]
 800204c:	b29a      	uxth	r2, r3
 800204e:	4b3b      	ldr	r3, [pc, #236]	; (800213c <displayBuffer+0x254>)
 8002050:	801a      	strh	r2, [r3, #0]
 8002052:	4b35      	ldr	r3, [pc, #212]	; (8002128 <displayBuffer+0x240>)
 8002054:	881b      	ldrh	r3, [r3, #0]
 8002056:	3b80      	subs	r3, #128	; 0x80
 8002058:	4a39      	ldr	r2, [pc, #228]	; (8002140 <displayBuffer+0x258>)
 800205a:	5cd3      	ldrb	r3, [r2, r3]
 800205c:	b29b      	uxth	r3, r3
 800205e:	3330      	adds	r3, #48	; 0x30
 8002060:	b29a      	uxth	r2, r3
 8002062:	4b31      	ldr	r3, [pc, #196]	; (8002128 <displayBuffer+0x240>)
 8002064:	801a      	strh	r2, [r3, #0]
//	if ((store_c>127)	&& (store_c<384)) 	{store_c= potValues[store_c&127]+48;}		// NORMAL POTVALUES
	if (store_c>511)		{store_c=store_c&127;			store_c= menuList2		[     (lfotarget_menu[   ((store_c>>3))  ])	+(store_c&7)]						; } // VARIABLE MENU ITEMS CHAR LUT
 8002066:	4b30      	ldr	r3, [pc, #192]	; (8002128 <displayBuffer+0x240>)
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800206e:	d319      	bcc.n	80020a4 <displayBuffer+0x1bc>
 8002070:	4b2d      	ldr	r3, [pc, #180]	; (8002128 <displayBuffer+0x240>)
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002078:	b29a      	uxth	r2, r3
 800207a:	4b2b      	ldr	r3, [pc, #172]	; (8002128 <displayBuffer+0x240>)
 800207c:	801a      	strh	r2, [r3, #0]
 800207e:	4b2a      	ldr	r3, [pc, #168]	; (8002128 <displayBuffer+0x240>)
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	08db      	lsrs	r3, r3, #3
 8002084:	b29b      	uxth	r3, r3
 8002086:	3320      	adds	r3, #32
 8002088:	443b      	add	r3, r7
 800208a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800208e:	461a      	mov	r2, r3
 8002090:	4b25      	ldr	r3, [pc, #148]	; (8002128 <displayBuffer+0x240>)
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	4413      	add	r3, r2
 800209a:	4a2a      	ldr	r2, [pc, #168]	; (8002144 <displayBuffer+0x25c>)
 800209c:	5cd3      	ldrb	r3, [r2, r3]
 800209e:	b29a      	uxth	r2, r3
 80020a0:	4b21      	ldr	r3, [pc, #132]	; (8002128 <displayBuffer+0x240>)
 80020a2:	801a      	strh	r2, [r3, #0]

	store_c=store_c-47; store_c = store_c &127;	  // spell no longer ?, store_c changes		STARTS FROM 0
 80020a4:	4b20      	ldr	r3, [pc, #128]	; (8002128 <displayBuffer+0x240>)
 80020a6:	881b      	ldrh	r3, [r3, #0]
 80020a8:	3b2f      	subs	r3, #47	; 0x2f
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	4b1e      	ldr	r3, [pc, #120]	; (8002128 <displayBuffer+0x240>)
 80020ae:	801a      	strh	r2, [r3, #0]
 80020b0:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <displayBuffer+0x240>)
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <displayBuffer+0x240>)
 80020bc:	801a      	strh	r2, [r3, #0]

store_x=(store_c*8);  // i line characters , might shrink it and use extr for other  visuals
 80020be:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <displayBuffer+0x240>)
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	833b      	strh	r3, [r7, #24]


if (( !loop_counter3) && (disp_stepper==0))     // blinker for cursor character only
 80020c6:	4b20      	ldr	r3, [pc, #128]	; (8002148 <displayBuffer+0x260>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d11f      	bne.n	800210e <displayBuffer+0x226>
 80020ce:	4b11      	ldr	r3, [pc, #68]	; (8002114 <displayBuffer+0x22c>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d11b      	bne.n	800210e <displayBuffer+0x226>
	for (d_count=0;d_count<7;d_count++){
 80020d6:	2300      	movs	r3, #0
 80020d8:	77fb      	strb	r3, [r7, #31]
 80020da:	e014      	b.n	8002106 <displayBuffer+0x21e>
						gfx_ram[d_count+init_x2] [init_y] = gfx_char[d_count+store_x]^127; //write character to ram ,should be elsewhere , blank is correct
 80020dc:	7ffa      	ldrb	r2, [r7, #31]
 80020de:	8b3b      	ldrh	r3, [r7, #24]
 80020e0:	4413      	add	r3, r2
 80020e2:	4a1a      	ldr	r2, [pc, #104]	; (800214c <displayBuffer+0x264>)
 80020e4:	5cd1      	ldrb	r1, [r2, r3]
 80020e6:	7ffa      	ldrb	r2, [r7, #31]
 80020e8:	7efb      	ldrb	r3, [r7, #27]
 80020ea:	441a      	add	r2, r3
 80020ec:	7ebb      	ldrb	r3, [r7, #26]
 80020ee:	f081 017f 	eor.w	r1, r1, #127	; 0x7f
 80020f2:	b2c8      	uxtb	r0, r1
 80020f4:	4916      	ldr	r1, [pc, #88]	; (8002150 <displayBuffer+0x268>)
 80020f6:	0112      	lsls	r2, r2, #4
 80020f8:	440a      	add	r2, r1
 80020fa:	4413      	add	r3, r2
 80020fc:	4602      	mov	r2, r0
 80020fe:	701a      	strb	r2, [r3, #0]
	for (d_count=0;d_count<7;d_count++){
 8002100:	7ffb      	ldrb	r3, [r7, #31]
 8002102:	3301      	adds	r3, #1
 8002104:	77fb      	strb	r3, [r7, #31]
 8002106:	7ffb      	ldrb	r3, [r7, #31]
 8002108:	2b06      	cmp	r3, #6
 800210a:	d9e7      	bls.n	80020dc <displayBuffer+0x1f4>
if (( !loop_counter3) && (disp_stepper==0))     // blinker for cursor character only
 800210c:	e037      	b.n	800217e <displayBuffer+0x296>
	}
else for (d_count=0;d_count<7;d_count++){
 800210e:	2300      	movs	r3, #0
 8002110:	77fb      	strb	r3, [r7, #31]
 8002112:	e031      	b.n	8002178 <displayBuffer+0x290>
 8002114:	200005fa 	.word	0x200005fa
 8002118:	2000193e 	.word	0x2000193e
 800211c:	2000194e 	.word	0x2000194e
 8002120:	08009154 	.word	0x08009154
 8002124:	0800920c 	.word	0x0800920c
 8002128:	20000c58 	.word	0x20000c58
 800212c:	20000a1c 	.word	0x20000a1c
 8002130:	20000000 	.word	0x20000000
 8002134:	0800954c 	.word	0x0800954c
 8002138:	20000b20 	.word	0x20000b20
 800213c:	20002244 	.word	0x20002244
 8002140:	20000a20 	.word	0x20000a20
 8002144:	080095d0 	.word	0x080095d0
 8002148:	20002247 	.word	0x20002247
 800214c:	200001d8 	.word	0x200001d8
 8002150:	20001e00 	.word	0x20001e00
	gfx_ram[d_count+init_x2] [init_y] = gfx_char[d_count+store_x]; //write character to ram ,should be elsewhere , seems affected by later stufff
 8002154:	7ffa      	ldrb	r2, [r7, #31]
 8002156:	8b3b      	ldrh	r3, [r7, #24]
 8002158:	18d1      	adds	r1, r2, r3
 800215a:	7ffa      	ldrb	r2, [r7, #31]
 800215c:	7efb      	ldrb	r3, [r7, #27]
 800215e:	441a      	add	r2, r3
 8002160:	7ebb      	ldrb	r3, [r7, #26]
 8002162:	4815      	ldr	r0, [pc, #84]	; (80021b8 <displayBuffer+0x2d0>)
 8002164:	5c40      	ldrb	r0, [r0, r1]
 8002166:	4915      	ldr	r1, [pc, #84]	; (80021bc <displayBuffer+0x2d4>)
 8002168:	0112      	lsls	r2, r2, #4
 800216a:	440a      	add	r2, r1
 800216c:	4413      	add	r3, r2
 800216e:	4602      	mov	r2, r0
 8002170:	701a      	strb	r2, [r3, #0]
else for (d_count=0;d_count<7;d_count++){
 8002172:	7ffb      	ldrb	r3, [r7, #31]
 8002174:	3301      	adds	r3, #1
 8002176:	77fb      	strb	r3, [r7, #31]
 8002178:	7ffb      	ldrb	r3, [r7, #31]
 800217a:	2b06      	cmp	r3, #6
 800217c:	d9ea      	bls.n	8002154 <displayBuffer+0x26c>
}


gfx_ram[7+init_x2] [init_y] = 0; // last line is blank between rows or whatever
 800217e:	7efb      	ldrb	r3, [r7, #27]
 8002180:	1dda      	adds	r2, r3, #7
 8002182:	7ebb      	ldrb	r3, [r7, #26]
 8002184:	490d      	ldr	r1, [pc, #52]	; (80021bc <displayBuffer+0x2d4>)
 8002186:	0112      	lsls	r2, r2, #4
 8002188:	440a      	add	r2, r1
 800218a:	4413      	add	r3, r2
 800218c:	2200      	movs	r2, #0
 800218e:	701a      	strb	r2, [r3, #0]
if (disp_stepper==15) disp_stepper=0; else disp_stepper++;
 8002190:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <displayBuffer+0x2d8>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b0f      	cmp	r3, #15
 8002196:	d103      	bne.n	80021a0 <displayBuffer+0x2b8>
 8002198:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <displayBuffer+0x2d8>)
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]

}
 800219e:	e005      	b.n	80021ac <displayBuffer+0x2c4>
if (disp_stepper==15) disp_stepper=0; else disp_stepper++;
 80021a0:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <displayBuffer+0x2d8>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	3301      	adds	r3, #1
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <displayBuffer+0x2d8>)
 80021aa:	701a      	strb	r2, [r3, #0]
}
 80021ac:	bf00      	nop
 80021ae:	3724      	adds	r7, #36	; 0x24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bcb0      	pop	{r4, r5, r7}
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	200001d8 	.word	0x200001d8
 80021bc:	20001e00 	.word	0x20001e00
 80021c0:	200005fa 	.word	0x200005fa
 80021c4:	00000000 	.word	0x00000000

080021c8 <sampling>:
spell[148+n]=spell[108+n];
}
}


void sampling(void){						// 18 ms of data
 80021c8:	b5b0      	push	{r4, r5, r7, lr}
 80021ca:	f5ad 5d85 	sub.w	sp, sp, #4256	; 0x10a0
 80021ce:	af00      	add	r7, sp, #0
uint8_t mask_i;
uint8_t mask_k;
uint8_t adsr_mult[5];
//adc_read();
//uint16_t isr_tempo=isrMask; // get tempo value
sample_pointB=sample_pointD;
 80021d0:	4ba9      	ldr	r3, [pc, #676]	; (8002478 <sampling+0x2b0>)
 80021d2:	881a      	ldrh	r2, [r3, #0]
 80021d4:	4ba9      	ldr	r3, [pc, #676]	; (800247c <sampling+0x2b4>)
 80021d6:	801a      	strh	r2, [r3, #0]
unsigned short tempo_start=0;  // enabled when i=isrMask;
 80021d8:	2300      	movs	r3, #0
 80021da:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80021de:	f102 021c 	add.w	r2, r2, #28
 80021e2:	8013      	strh	r3, [r2, #0]
static unsigned short tempo_end=0;   // last count before note start
uint16_t i_total;
uint16_t tempo_mod=tempo_lut[potSource[109]];  // set tempo,speed from lut 40-200bpm  ,changed to 4x for note lenght
 80021e4:	4ba6      	ldr	r3, [pc, #664]	; (8002480 <sampling+0x2b8>)
 80021e6:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 80021ea:	461a      	mov	r2, r3
 80021ec:	4ba5      	ldr	r3, [pc, #660]	; (8002484 <sampling+0x2bc>)
 80021ee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80021f2:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80021f6:	f102 020e 	add.w	r2, r2, #14
 80021fa:	8013      	strh	r3, [r2, #0]

uint8_t l;			// 35.002khz(0.02857ms) sample, 1 sample is temp count (16x=0.00045712) , *16=1 note ,at 300 (437bpm),(1/(0.00002857*tempo count*16)=1beat in s
float freq_temp;	// (1/(bpm/60)) /0.00045712=tempo count ie 1093.8 for 120bpm
float freq2_temp;
float freq_adder;
float tempo_sync=16384/((tempo_mod*16)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80
 80021fc:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002200:	f103 030e 	add.w	r3, r3, #14
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	da00      	bge.n	800220c <sampling+0x44>
 800220a:	331f      	adds	r3, #31
 800220c:	115b      	asrs	r3, r3, #5
 800220e:	461a      	mov	r2, r3
 8002210:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002214:	fb93 f3f2 	sdiv	r3, r3, r2
 8002218:	ee07 3a90 	vmov	s15, r3
 800221c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002220:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002224:	f103 0308 	add.w	r3, r3, #8
 8002228:	edc3 7a00 	vstr	s15, [r3]
tempo_sync=tempo_sync/80;  // bit weird her , this is adsr !
 800222c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002230:	f103 0308 	add.w	r3, r3, #8
 8002234:	ed93 7a00 	vldr	s14, [r3]
 8002238:	eddf 6a93 	vldr	s13, [pc, #588]	; 8002488 <sampling+0x2c0>
 800223c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002240:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002244:	f103 0308 	add.w	r3, r3, #8
 8002248:	edc3 7a00 	vstr	s15, [r3]

uint32_t  note_toggler[17]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //records note position on 0-512   using a bit
 800224c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002250:	f103 0304 	add.w	r3, r3, #4
 8002254:	2244      	movs	r2, #68	; 0x44
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f005 ffbf 	bl	80081dc <memset>
for (i=0;i<16;i++) {  note_toggler[i]=0; }
 800225e:	4b8b      	ldr	r3, [pc, #556]	; (800248c <sampling+0x2c4>)
 8002260:	2200      	movs	r2, #0
 8002262:	801a      	strh	r2, [r3, #0]
 8002264:	e00e      	b.n	8002284 <sampling+0xbc>
 8002266:	4b89      	ldr	r3, [pc, #548]	; (800248c <sampling+0x2c4>)
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8002270:	443b      	add	r3, r7
 8002272:	2200      	movs	r2, #0
 8002274:	f843 2c7c 	str.w	r2, [r3, #-124]
 8002278:	4b84      	ldr	r3, [pc, #528]	; (800248c <sampling+0x2c4>)
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	3301      	adds	r3, #1
 800227e:	b29a      	uxth	r2, r3
 8002280:	4b82      	ldr	r3, [pc, #520]	; (800248c <sampling+0x2c4>)
 8002282:	801a      	strh	r2, [r3, #0]
 8002284:	4b81      	ldr	r3, [pc, #516]	; (800248c <sampling+0x2c4>)
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	2b0f      	cmp	r3, #15
 800228a:	d9ec      	bls.n	8002266 <sampling+0x9e>

//float lcd_out2;

//lcd_out3=enc2_dir; // still goes to 15

lcd_out3=adc_values[0]+adc_values[1]+adc_values[2]; // 3 digit read out , works ok,, [2] works but thats it
 800228c:	4b80      	ldr	r3, [pc, #512]	; (8002490 <sampling+0x2c8>)
 800228e:	881a      	ldrh	r2, [r3, #0]
 8002290:	4b7f      	ldr	r3, [pc, #508]	; (8002490 <sampling+0x2c8>)
 8002292:	885b      	ldrh	r3, [r3, #2]
 8002294:	4413      	add	r3, r2
 8002296:	b29a      	uxth	r2, r3
 8002298:	4b7d      	ldr	r3, [pc, #500]	; (8002490 <sampling+0x2c8>)
 800229a:	889b      	ldrh	r3, [r3, #4]
 800229c:	4413      	add	r3, r2
 800229e:	b29a      	uxth	r2, r3
 80022a0:	4b7c      	ldr	r3, [pc, #496]	; (8002494 <sampling+0x2cc>)
 80022a2:	801a      	strh	r2, [r3, #0]
//lcd_out3=lcd_out3+180;
potSource[150]=(lcd_out3/100)*16;  // still works
 80022a4:	4b7b      	ldr	r3, [pc, #492]	; (8002494 <sampling+0x2cc>)
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	4a7b      	ldr	r2, [pc, #492]	; (8002498 <sampling+0x2d0>)
 80022aa:	fba2 2303 	umull	r2, r3, r2, r3
 80022ae:	095b      	lsrs	r3, r3, #5
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	011b      	lsls	r3, r3, #4
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	4b71      	ldr	r3, [pc, #452]	; (8002480 <sampling+0x2b8>)
 80022ba:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
potSource[151]=((lcd_out3 %100)/10)*16;		 // 0-160 to 0-10
 80022be:	4b75      	ldr	r3, [pc, #468]	; (8002494 <sampling+0x2cc>)
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	4a75      	ldr	r2, [pc, #468]	; (8002498 <sampling+0x2d0>)
 80022c4:	fba2 1203 	umull	r1, r2, r2, r3
 80022c8:	0952      	lsrs	r2, r2, #5
 80022ca:	2164      	movs	r1, #100	; 0x64
 80022cc:	fb01 f202 	mul.w	r2, r1, r2
 80022d0:	1a9b      	subs	r3, r3, r2
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	4a71      	ldr	r2, [pc, #452]	; (800249c <sampling+0x2d4>)
 80022d6:	fba2 2303 	umull	r2, r3, r2, r3
 80022da:	08db      	lsrs	r3, r3, #3
 80022dc:	b29b      	uxth	r3, r3
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	4b66      	ldr	r3, [pc, #408]	; (8002480 <sampling+0x2b8>)
 80022e6:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
potSource[152]=(lcd_out3%10)*16;
 80022ea:	4b6a      	ldr	r3, [pc, #424]	; (8002494 <sampling+0x2cc>)
 80022ec:	881a      	ldrh	r2, [r3, #0]
 80022ee:	4b6b      	ldr	r3, [pc, #428]	; (800249c <sampling+0x2d4>)
 80022f0:	fba3 1302 	umull	r1, r3, r3, r2
 80022f4:	08d9      	lsrs	r1, r3, #3
 80022f6:	460b      	mov	r3, r1
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	440b      	add	r3, r1
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	b29b      	uxth	r3, r3
 8002302:	b2db      	uxtb	r3, r3
 8002304:	011b      	lsls	r3, r3, #4
 8002306:	b2da      	uxtb	r2, r3
 8002308:	4b5d      	ldr	r3, [pc, #372]	; (8002480 <sampling+0x2b8>)
 800230a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98


unsigned short  sine_zero;  // zero cross
note_holdA=0;
 800230e:	4b64      	ldr	r3, [pc, #400]	; (80024a0 <sampling+0x2d8>)
 8002310:	2200      	movs	r2, #0
 8002312:	701a      	strb	r2, [r3, #0]
//printf ("crap \n");
//printf("%d|",adc_values[0] );printf("%d|",adc_values[1] );printf("%d|",adc_values[2] );printf("%d|\n",adc_values[3] );
uint8_t note_patterns[8]={1,4,2,2,1,4,2,1,4,2,1,4,4};   // creating beats
 8002314:	4a63      	ldr	r2, [pc, #396]	; (80024a4 <sampling+0x2dc>)
 8002316:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800231a:	f103 031c 	add.w	r3, r3, #28
 800231e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002322:	e883 0003 	stmia.w	r3, {r0, r1}
uint8_t note_lenght=5-note_patterns[seq_pos&7] ; // note length modifier , higher faster
 8002326:	4b60      	ldr	r3, [pc, #384]	; (80024a8 <sampling+0x2e0>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8002332:	443b      	add	r3, r7
 8002334:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 8002338:	f1c3 0305 	rsb	r3, r3, #5
 800233c:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002340:	f102 0207 	add.w	r2, r2, #7
 8002344:	7013      	strb	r3, [r2, #0]
//tempo_mod=tempo_mod-63+(lfo_out[1]>>7);
//if (tempo_mod<450) tempo_mod=((tempo_mod-200)>>1) +200; // more res lower
uint8_t note_plain;
int8_t ring_mod=0;
 8002346:	2300      	movs	r3, #0
 8002348:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800234c:	f102 0206 	add.w	r2, r2, #6
 8002350:	7013      	strb	r3, [r2, #0]
//sample_Accu2=0;
//printf (adc_values[0]," ",adc_values[1]," ",adc_values[2]," ","crap \n");
// some good phasin and delays here
uint8_t cross_fade[2];
uint8_t fader[17]={0,1,5,11,19,28,39,51,64,76,88,99,108,116,122,126,127}; // sine curve for cross fade
 8002352:	4b56      	ldr	r3, [pc, #344]	; (80024ac <sampling+0x2e4>)
 8002354:	f507 5480 	add.w	r4, r7, #4096	; 0x1000
 8002358:	f104 0404 	add.w	r4, r4, #4
 800235c:	461d      	mov	r5, r3
 800235e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002360:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002362:	682b      	ldr	r3, [r5, #0]
 8002364:	7023      	strb	r3, [r4, #0]
//adc_values[2]=adc_values[1];   // this temp until pot 3 is fixed
if(adc_values[2]&16)     	{cross_fade[1]=127-fader[adc_values[2]&15]; cross_fade[2]=127;}  else {cross_fade[2]=fader[adc_values[2]&15]; cross_fade[1]=127;} //calculate crossfader
 8002366:	4b4a      	ldr	r3, [pc, #296]	; (8002490 <sampling+0x2c8>)
 8002368:	889b      	ldrh	r3, [r3, #4]
 800236a:	f003 0310 	and.w	r3, r3, #16
 800236e:	2b00      	cmp	r3, #0
 8002370:	d017      	beq.n	80023a2 <sampling+0x1da>
 8002372:	4b47      	ldr	r3, [pc, #284]	; (8002490 <sampling+0x2c8>)
 8002374:	889b      	ldrh	r3, [r3, #4]
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 800237e:	443b      	add	r3, r7
 8002380:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 8002384:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002388:	b2db      	uxtb	r3, r3
 800238a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800238e:	f102 0219 	add.w	r2, r2, #25
 8002392:	7013      	strb	r3, [r2, #0]
 8002394:	237f      	movs	r3, #127	; 0x7f
 8002396:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800239a:	f102 021a 	add.w	r2, r2, #26
 800239e:	7013      	strb	r3, [r2, #0]
 80023a0:	e013      	b.n	80023ca <sampling+0x202>
 80023a2:	4b3b      	ldr	r3, [pc, #236]	; (8002490 <sampling+0x2c8>)
 80023a4:	889b      	ldrh	r3, [r3, #4]
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 80023ae:	443b      	add	r3, r7
 80023b0:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 80023b4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80023b8:	f102 021a 	add.w	r2, r2, #26
 80023bc:	7013      	strb	r3, [r2, #0]
 80023be:	237f      	movs	r3, #127	; 0x7f
 80023c0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80023c4:	f102 0219 	add.w	r2, r2, #25
 80023c8:	7013      	strb	r3, [r2, #0]

// doing lfo calc here as it is slow only for now
////////////////////adsr/////////////////////////////////////////
if	 (adsr_temp==0) {		adsr_att=(161-potSource[20] ) *0.02 ; // for now all of them from this only , speed , 0-16  // rarely read
 80023ca:	4b39      	ldr	r3, [pc, #228]	; (80024b0 <sampling+0x2e8>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d146      	bne.n	8002460 <sampling+0x298>
 80023d2:	4b2b      	ldr	r3, [pc, #172]	; (8002480 <sampling+0x2b8>)
 80023d4:	7d1b      	ldrb	r3, [r3, #20]
 80023d6:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe f9cc 	bl	8000778 <__aeabi_i2d>
 80023e0:	a321      	add	r3, pc, #132	; (adr r3, 8002468 <sampling+0x2a0>)
 80023e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e6:	f7fd ff4b 	bl	8000280 <__aeabi_dmul>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4610      	mov	r0, r2
 80023f0:	4619      	mov	r1, r3
 80023f2:	f7fe fa2b 	bl	800084c <__aeabi_d2f>
 80023f6:	4603      	mov	r3, r0
 80023f8:	4a2e      	ldr	r2, [pc, #184]	; (80024b4 <sampling+0x2ec>)
 80023fa:	6013      	str	r3, [r2, #0]
as_sustain=((161-potSource[21])*0.01);  // length and level this is ok is running 1/16 ish				as_attack=as_attack-as_sustain;
 80023fc:	4b20      	ldr	r3, [pc, #128]	; (8002480 <sampling+0x2b8>)
 80023fe:	7d5b      	ldrb	r3, [r3, #21]
 8002400:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe f9b7 	bl	8000778 <__aeabi_i2d>
 800240a:	a319      	add	r3, pc, #100	; (adr r3, 8002470 <sampling+0x2a8>)
 800240c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002410:	f7fd ff36 	bl	8000280 <__aeabi_dmul>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4610      	mov	r0, r2
 800241a:	4619      	mov	r1, r3
 800241c:	f7fe fa16 	bl	800084c <__aeabi_d2f>
 8002420:	4603      	mov	r3, r0
 8002422:	4a25      	ldr	r2, [pc, #148]	; (80024b8 <sampling+0x2f0>)
 8002424:	6013      	str	r3, [r2, #0]
adsr_att=adsr_att*adsr_att;
 8002426:	4b23      	ldr	r3, [pc, #140]	; (80024b4 <sampling+0x2ec>)
 8002428:	ed93 7a00 	vldr	s14, [r3]
 800242c:	4b21      	ldr	r3, [pc, #132]	; (80024b4 <sampling+0x2ec>)
 800242e:	edd3 7a00 	vldr	s15, [r3]
 8002432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002436:	4b1f      	ldr	r3, [pc, #124]	; (80024b4 <sampling+0x2ec>)
 8002438:	edc3 7a00 	vstr	s15, [r3]
as_sustain=as_sustain*as_sustain;
 800243c:	4b1e      	ldr	r3, [pc, #120]	; (80024b8 <sampling+0x2f0>)
 800243e:	ed93 7a00 	vldr	s14, [r3]
 8002442:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <sampling+0x2f0>)
 8002444:	edd3 7a00 	vldr	s15, [r3]
 8002448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800244c:	4b1a      	ldr	r3, [pc, #104]	; (80024b8 <sampling+0x2f0>)
 800244e:	edc3 7a00 	vstr	s15, [r3]

adsr_temp=1;
 8002452:	4b17      	ldr	r3, [pc, #92]	; (80024b0 <sampling+0x2e8>)
 8002454:	2201      	movs	r2, #1
 8002456:	701a      	strb	r2, [r3, #0]
as_attack=0;
 8002458:	4b18      	ldr	r3, [pc, #96]	; (80024bc <sampling+0x2f4>)
 800245a:	f04f 0200 	mov.w	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
}

float lut_temp;

for (i=0;i<256;i++) {
 8002460:	4b0a      	ldr	r3, [pc, #40]	; (800248c <sampling+0x2c4>)
 8002462:	2200      	movs	r2, #0
 8002464:	801a      	strh	r2, [r3, #0]
 8002466:	e0fc      	b.n	8002662 <sampling+0x49a>
 8002468:	47ae147b 	.word	0x47ae147b
 800246c:	3f947ae1 	.word	0x3f947ae1
 8002470:	47ae147b 	.word	0x47ae147b
 8002474:	3f847ae1 	.word	0x3f847ae1
 8002478:	20001486 	.word	0x20001486
 800247c:	20000c7a 	.word	0x20000c7a
 8002480:	20000b20 	.word	0x20000b20
 8002484:	20001cbc 	.word	0x20001cbc
 8002488:	42a00000 	.word	0x42a00000
 800248c:	20000c7c 	.word	0x20000c7c
 8002490:	200001cc 	.word	0x200001cc
 8002494:	20002244 	.word	0x20002244
 8002498:	51eb851f 	.word	0x51eb851f
 800249c:	cccccccd 	.word	0xcccccccd
 80024a0:	200018fb 	.word	0x200018fb
 80024a4:	08009168 	.word	0x08009168
 80024a8:	20000c54 	.word	0x20000c54
 80024ac:	08009170 	.word	0x08009170
 80024b0:	200018d4 	.word	0x200018d4
 80024b4:	20002234 	.word	0x20002234
 80024b8:	20002230 	.word	0x20002230
 80024bc:	2000222c 	.word	0x2000222c

	if     (as_attack<1000)    																		{as_attack=as_attack+adsr_att;					lut_temp=as_attack; } //0-1000
 80024c0:	4b8d      	ldr	r3, [pc, #564]	; (80026f8 <sampling+0x530>)
 80024c2:	edd3 7a00 	vldr	s15, [r3]
 80024c6:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80026fc <sampling+0x534>
 80024ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d2:	d511      	bpl.n	80024f8 <sampling+0x330>
 80024d4:	4b88      	ldr	r3, [pc, #544]	; (80026f8 <sampling+0x530>)
 80024d6:	ed93 7a00 	vldr	s14, [r3]
 80024da:	4b89      	ldr	r3, [pc, #548]	; (8002700 <sampling+0x538>)
 80024dc:	edd3 7a00 	vldr	s15, [r3]
 80024e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024e4:	4b84      	ldr	r3, [pc, #528]	; (80026f8 <sampling+0x530>)
 80024e6:	edc3 7a00 	vstr	s15, [r3]
 80024ea:	4b83      	ldr	r3, [pc, #524]	; (80026f8 <sampling+0x530>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80024f2:	f102 0214 	add.w	r2, r2, #20
 80024f6:	6013      	str	r3, [r2, #0]
	 if  ((as_attack<1500)  && (as_attack>999))  										{as_attack=as_attack+adsr_att;					lut_temp=1500-(as_attack-500);  }  // 1000-500
 80024f8:	4b7f      	ldr	r3, [pc, #508]	; (80026f8 <sampling+0x530>)
 80024fa:	edd3 7a00 	vldr	s15, [r3]
 80024fe:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8002704 <sampling+0x53c>
 8002502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250a:	d525      	bpl.n	8002558 <sampling+0x390>
 800250c:	4b7a      	ldr	r3, [pc, #488]	; (80026f8 <sampling+0x530>)
 800250e:	edd3 7a00 	vldr	s15, [r3]
 8002512:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8002708 <sampling+0x540>
 8002516:	eef4 7ac7 	vcmpe.f32	s15, s14
 800251a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251e:	dd1b      	ble.n	8002558 <sampling+0x390>
 8002520:	4b75      	ldr	r3, [pc, #468]	; (80026f8 <sampling+0x530>)
 8002522:	ed93 7a00 	vldr	s14, [r3]
 8002526:	4b76      	ldr	r3, [pc, #472]	; (8002700 <sampling+0x538>)
 8002528:	edd3 7a00 	vldr	s15, [r3]
 800252c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002530:	4b71      	ldr	r3, [pc, #452]	; (80026f8 <sampling+0x530>)
 8002532:	edc3 7a00 	vstr	s15, [r3]
 8002536:	4b70      	ldr	r3, [pc, #448]	; (80026f8 <sampling+0x530>)
 8002538:	edd3 7a00 	vldr	s15, [r3]
 800253c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800270c <sampling+0x544>
 8002540:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002544:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8002704 <sampling+0x53c>
 8002548:	ee77 7a67 	vsub.f32	s15, s14, s15
 800254c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002550:	f103 0314 	add.w	r3, r3, #20
 8002554:	edc3 7a00 	vstr	s15, [r3]
	 if ((as_attack>1499)   && 		(as_attack<2000)) 																{		lut_temp=500; 	as_attack=as_attack+as_sustain;}
 8002558:	4b67      	ldr	r3, [pc, #412]	; (80026f8 <sampling+0x530>)
 800255a:	edd3 7a00 	vldr	s15, [r3]
 800255e:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8002710 <sampling+0x548>
 8002562:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256a:	dd1a      	ble.n	80025a2 <sampling+0x3da>
 800256c:	4b62      	ldr	r3, [pc, #392]	; (80026f8 <sampling+0x530>)
 800256e:	edd3 7a00 	vldr	s15, [r3]
 8002572:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8002714 <sampling+0x54c>
 8002576:	eef4 7ac7 	vcmpe.f32	s15, s14
 800257a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800257e:	d510      	bpl.n	80025a2 <sampling+0x3da>
 8002580:	4b65      	ldr	r3, [pc, #404]	; (8002718 <sampling+0x550>)
 8002582:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002586:	f102 0214 	add.w	r2, r2, #20
 800258a:	6013      	str	r3, [r2, #0]
 800258c:	4b5a      	ldr	r3, [pc, #360]	; (80026f8 <sampling+0x530>)
 800258e:	ed93 7a00 	vldr	s14, [r3]
 8002592:	4b62      	ldr	r3, [pc, #392]	; (800271c <sampling+0x554>)
 8002594:	edd3 7a00 	vldr	s15, [r3]
 8002598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800259c:	4b56      	ldr	r3, [pc, #344]	; (80026f8 <sampling+0x530>)
 800259e:	edc3 7a00 	vstr	s15, [r3]
	if ((as_attack>1999)  &&  (as_attack<2500)	)																							{as_attack=as_attack+as_sustain	;	lut_temp=2500-as_attack; } //500-0;
 80025a2:	4b55      	ldr	r3, [pc, #340]	; (80026f8 <sampling+0x530>)
 80025a4:	edd3 7a00 	vldr	s15, [r3]
 80025a8:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8002720 <sampling+0x558>
 80025ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b4:	dd21      	ble.n	80025fa <sampling+0x432>
 80025b6:	4b50      	ldr	r3, [pc, #320]	; (80026f8 <sampling+0x530>)
 80025b8:	edd3 7a00 	vldr	s15, [r3]
 80025bc:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8002724 <sampling+0x55c>
 80025c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c8:	d517      	bpl.n	80025fa <sampling+0x432>
 80025ca:	4b4b      	ldr	r3, [pc, #300]	; (80026f8 <sampling+0x530>)
 80025cc:	ed93 7a00 	vldr	s14, [r3]
 80025d0:	4b52      	ldr	r3, [pc, #328]	; (800271c <sampling+0x554>)
 80025d2:	edd3 7a00 	vldr	s15, [r3]
 80025d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025da:	4b47      	ldr	r3, [pc, #284]	; (80026f8 <sampling+0x530>)
 80025dc:	edc3 7a00 	vstr	s15, [r3]
 80025e0:	4b45      	ldr	r3, [pc, #276]	; (80026f8 <sampling+0x530>)
 80025e2:	edd3 7a00 	vldr	s15, [r3]
 80025e6:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8002724 <sampling+0x55c>
 80025ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025ee:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80025f2:	f103 0314 	add.w	r3, r3, #20
 80025f6:	edc3 7a00 	vstr	s15, [r3]
	if (as_attack>3000)   																																			{lut_temp=1; as_attack=4000; }     // THE END
 80025fa:	4b3f      	ldr	r3, [pc, #252]	; (80026f8 <sampling+0x530>)
 80025fc:	edd3 7a00 	vldr	s15, [r3]
 8002600:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8002728 <sampling+0x560>
 8002604:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260c:	dd09      	ble.n	8002622 <sampling+0x45a>
 800260e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002612:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002616:	f102 0214 	add.w	r2, r2, #20
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	4b36      	ldr	r3, [pc, #216]	; (80026f8 <sampling+0x530>)
 800261e:	4a43      	ldr	r2, [pc, #268]	; (800272c <sampling+0x564>)
 8002620:	601a      	str	r2, [r3, #0]

adsr_lut[i]= lut_temp*0.001;
 8002622:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002626:	f103 0314 	add.w	r3, r3, #20
 800262a:	6818      	ldr	r0, [r3, #0]
 800262c:	f7fe f8b6 	bl	800079c <__aeabi_f2d>
 8002630:	a32f      	add	r3, pc, #188	; (adr r3, 80026f0 <sampling+0x528>)
 8002632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002636:	f7fd fe23 	bl	8000280 <__aeabi_dmul>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	493c      	ldr	r1, [pc, #240]	; (8002730 <sampling+0x568>)
 8002640:	8809      	ldrh	r1, [r1, #0]
 8002642:	460c      	mov	r4, r1
 8002644:	4610      	mov	r0, r2
 8002646:	4619      	mov	r1, r3
 8002648:	f7fe f900 	bl	800084c <__aeabi_d2f>
 800264c:	4602      	mov	r2, r0
 800264e:	4939      	ldr	r1, [pc, #228]	; (8002734 <sampling+0x56c>)
 8002650:	00a3      	lsls	r3, r4, #2
 8002652:	440b      	add	r3, r1
 8002654:	601a      	str	r2, [r3, #0]
for (i=0;i<256;i++) {
 8002656:	4b36      	ldr	r3, [pc, #216]	; (8002730 <sampling+0x568>)
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	3301      	adds	r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	4b34      	ldr	r3, [pc, #208]	; (8002730 <sampling+0x568>)
 8002660:	801a      	strh	r2, [r3, #0]
 8002662:	4b33      	ldr	r3, [pc, #204]	; (8002730 <sampling+0x568>)
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	2bff      	cmp	r3, #255	; 0xff
 8002668:	f67f af2a 	bls.w	80024c0 <sampling+0x2f8>
}


///////////////////////////////////////////////////////////////

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 800266c:	4b30      	ldr	r3, [pc, #192]	; (8002730 <sampling+0x568>)
 800266e:	2200      	movs	r2, #0
 8002670:	801a      	strh	r2, [r3, #0]
 8002672:	e355      	b.n	8002d20 <sampling+0xb58>

	i_total=i+sample_pointB;
 8002674:	4b2e      	ldr	r3, [pc, #184]	; (8002730 <sampling+0x568>)
 8002676:	881a      	ldrh	r2, [r3, #0]
 8002678:	4b2f      	ldr	r3, [pc, #188]	; (8002738 <sampling+0x570>)
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	4413      	add	r3, r2
 800267e:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002682:	f102 021e 	add.w	r2, r2, #30
 8002686:	8013      	strh	r3, [r2, #0]
	i_frac=i>>6;
 8002688:	4b29      	ldr	r3, [pc, #164]	; (8002730 <sampling+0x568>)
 800268a:	881b      	ldrh	r3, [r3, #0]
 800268c:	099b      	lsrs	r3, r3, #6
 800268e:	b29b      	uxth	r3, r3
 8002690:	b2da      	uxtb	r2, r3
 8002692:	4b2a      	ldr	r3, [pc, #168]	; (800273c <sampling+0x574>)
 8002694:	701a      	strb	r2, [r3, #0]
	note_plain=potValues[seq_pos & 7 ];
 8002696:	4b2a      	ldr	r3, [pc, #168]	; (8002740 <sampling+0x578>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	4a29      	ldr	r2, [pc, #164]	; (8002744 <sampling+0x57c>)
 80026a0:	5cd3      	ldrb	r3, [r2, r3]
 80026a2:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80026a6:	f102 021b 	add.w	r2, r2, #27
 80026aa:	7013      	strb	r3, [r2, #0]
potValues[i&255]=potSource[i&255]>>4; //just to update values 
 80026ac:	4b20      	ldr	r3, [pc, #128]	; (8002730 <sampling+0x568>)
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	4a25      	ldr	r2, [pc, #148]	; (8002748 <sampling+0x580>)
 80026b4:	5cd2      	ldrb	r2, [r2, r3]
 80026b6:	4b1e      	ldr	r3, [pc, #120]	; (8002730 <sampling+0x568>)
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	0912      	lsrs	r2, r2, #4
 80026be:	b2d1      	uxtb	r1, r2
 80026c0:	4a20      	ldr	r2, [pc, #128]	; (8002744 <sampling+0x57c>)
 80026c2:	54d1      	strb	r1, [r2, r3]
	if (tempo_count>=tempo_mod) { next_isr=(next_isr+1)& 4095;tempo_count=0;  }  else {tempo_count++; }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 80026c4:	4b21      	ldr	r3, [pc, #132]	; (800274c <sampling+0x584>)
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80026cc:	f102 020e 	add.w	r2, r2, #14
 80026d0:	8812      	ldrh	r2, [r2, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d83e      	bhi.n	8002754 <sampling+0x58c>
 80026d6:	4b1e      	ldr	r3, [pc, #120]	; (8002750 <sampling+0x588>)
 80026d8:	881b      	ldrh	r3, [r3, #0]
 80026da:	3301      	adds	r3, #1
 80026dc:	b29b      	uxth	r3, r3
 80026de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <sampling+0x588>)
 80026e6:	801a      	strh	r2, [r3, #0]
 80026e8:	4b18      	ldr	r3, [pc, #96]	; (800274c <sampling+0x584>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	801a      	strh	r2, [r3, #0]
 80026ee:	e037      	b.n	8002760 <sampling+0x598>
 80026f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80026f4:	3f50624d 	.word	0x3f50624d
 80026f8:	2000222c 	.word	0x2000222c
 80026fc:	447a0000 	.word	0x447a0000
 8002700:	20002234 	.word	0x20002234
 8002704:	44bb8000 	.word	0x44bb8000
 8002708:	4479c000 	.word	0x4479c000
 800270c:	43fa0000 	.word	0x43fa0000
 8002710:	44bb6000 	.word	0x44bb6000
 8002714:	44fa0000 	.word	0x44fa0000
 8002718:	43fa0000 	.word	0x43fa0000
 800271c:	20002230 	.word	0x20002230
 8002720:	44f9e000 	.word	0x44f9e000
 8002724:	451c4000 	.word	0x451c4000
 8002728:	453b8000 	.word	0x453b8000
 800272c:	457a0000 	.word	0x457a0000
 8002730:	20000c7c 	.word	0x20000c7c
 8002734:	200014d4 	.word	0x200014d4
 8002738:	20000c7a 	.word	0x20000c7a
 800273c:	20001a60 	.word	0x20001a60
 8002740:	20000c54 	.word	0x20000c54
 8002744:	20000a20 	.word	0x20000a20
 8002748:	20000b20 	.word	0x20000b20
 800274c:	20001942 	.word	0x20001942
 8002750:	200018ee 	.word	0x200018ee
 8002754:	4b7d      	ldr	r3, [pc, #500]	; (800294c <sampling+0x784>)
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	3301      	adds	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	4b7b      	ldr	r3, [pc, #492]	; (800294c <sampling+0x784>)
 800275e:	801a      	strh	r2, [r3, #0]
// tempo_count is about 1000-400 
	tempo_start=0;
 8002760:	2300      	movs	r3, #0
 8002762:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002766:	f102 021c 	add.w	r2, r2, #28
 800276a:	8013      	strh	r3, [r2, #0]
	if ((next_isr>>4) != (seq_pos)) { 					// next note step 140ms
 800276c:	4b78      	ldr	r3, [pc, #480]	; (8002950 <sampling+0x788>)
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	091b      	lsrs	r3, r3, #4
 8002772:	b29a      	uxth	r2, r3
 8002774:	4b77      	ldr	r3, [pc, #476]	; (8002954 <sampling+0x78c>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	b29b      	uxth	r3, r3
 800277a:	429a      	cmp	r2, r3
 800277c:	d00c      	beq.n	8002798 <sampling+0x5d0>
		seq_pos=(next_isr>>4); // seq pos =256 max , isr = 1/16 of a note, note lenght is 1-4
 800277e:	4b74      	ldr	r3, [pc, #464]	; (8002950 <sampling+0x788>)
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	091b      	lsrs	r3, r3, #4
 8002784:	b29b      	uxth	r3, r3
 8002786:	b2da      	uxtb	r2, r3
 8002788:	4b72      	ldr	r3, [pc, #456]	; (8002954 <sampling+0x78c>)
 800278a:	701a      	strb	r2, [r3, #0]
		tempo_start=1;
 800278c:	2301      	movs	r3, #1
 800278e:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002792:	f102 021c 	add.w	r2, r2, #28
 8002796:	8013      	strh	r3, [r2, #0]
// record note triggers or seq_changes position ,NEEDS TO BE OFF FOR NOTE 0
}


	if(tempo_start  )    // Calculates only on note change, gotta change seq_pos somehow  , only activates when change in seq pos
 8002798:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800279c:	f103 031c 	add.w	r3, r3, #28
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 812f 	beq.w	8002a06 <sampling+0x83e>
	{
	//printf("\n");//	ITM_SendChar( 65 );   //  Send ASCII code 65 = ’A’
	//printf("%d" ,note_channel[10]);


		potValues[32]=(adc_values[0]>>2)&15; //assigned pots to start of loopers 0-16,works
 80027a8:	4b6b      	ldr	r3, [pc, #428]	; (8002958 <sampling+0x790>)
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	089b      	lsrs	r3, r3, #2
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	4b68      	ldr	r3, [pc, #416]	; (800295c <sampling+0x794>)
 80027ba:	f883 2020 	strb.w	r2, [r3, #32]
		potValues[33]=(adc_values[1]>>2)&15;
 80027be:	4b66      	ldr	r3, [pc, #408]	; (8002958 <sampling+0x790>)
 80027c0:	885b      	ldrh	r3, [r3, #2]
 80027c2:	089b      	lsrs	r3, r3, #2
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	f003 030f 	and.w	r3, r3, #15
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	4b63      	ldr	r3, [pc, #396]	; (800295c <sampling+0x794>)
 80027d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21


		seq_loop[2]=((potValues[32]+(seq_pos&7))&15); // calc  8 note loop positions sets looping point in sequence
 80027d4:	4b61      	ldr	r3, [pc, #388]	; (800295c <sampling+0x794>)
 80027d6:	f893 2020 	ldrb.w	r2, [r3, #32]
 80027da:	4b5e      	ldr	r3, [pc, #376]	; (8002954 <sampling+0x78c>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	4413      	add	r3, r2
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	f003 030f 	and.w	r3, r3, #15
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	4b5c      	ldr	r3, [pc, #368]	; (8002960 <sampling+0x798>)
 80027f0:	709a      	strb	r2, [r3, #2]
		
		//seq_loop[3]=(potValues[33]+(( seq_pos&31 ) >>2)) & 15;  // quater speed
			seq_loop[3]=((potValues[33]+(seq_pos&15))&15); //sets looping point in sequence this is full 16 note
 80027f2:	4b5a      	ldr	r3, [pc, #360]	; (800295c <sampling+0x794>)
 80027f4:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80027f8:	4b56      	ldr	r3, [pc, #344]	; (8002954 <sampling+0x78c>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	4413      	add	r3, r2
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	f003 030f 	and.w	r3, r3, #15
 8002804:	b2da      	uxtb	r2, r3
 8002806:	4b56      	ldr	r3, [pc, #344]	; (8002960 <sampling+0x798>)
 8002808:	70da      	strb	r2, [r3, #3]
		
			seq_loop[4]=((potValues[32]+(seq_pos&7))&15);
 800280a:	4b54      	ldr	r3, [pc, #336]	; (800295c <sampling+0x794>)
 800280c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8002810:	4b50      	ldr	r3, [pc, #320]	; (8002954 <sampling+0x78c>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	b2db      	uxtb	r3, r3
 800281a:	4413      	add	r3, r2
 800281c:	b2db      	uxtb	r3, r3
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	b2da      	uxtb	r2, r3
 8002824:	4b4e      	ldr	r3, [pc, #312]	; (8002960 <sampling+0x798>)
 8002826:	711a      	strb	r2, [r3, #4]
			
		//seq_loop[4]=((potValues[32]+((seq_pos&15)>>1))&15); // half speed

		note_channel[2]=potValues[80+seq_loop[2]]+potValues[72];  //loop 8 notes from pos and x times
 8002828:	4b4d      	ldr	r3, [pc, #308]	; (8002960 <sampling+0x798>)
 800282a:	789b      	ldrb	r3, [r3, #2]
 800282c:	3350      	adds	r3, #80	; 0x50
 800282e:	4a4b      	ldr	r2, [pc, #300]	; (800295c <sampling+0x794>)
 8002830:	5cd3      	ldrb	r3, [r2, r3]
 8002832:	b29a      	uxth	r2, r3
 8002834:	4b49      	ldr	r3, [pc, #292]	; (800295c <sampling+0x794>)
 8002836:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800283a:	b29b      	uxth	r3, r3
 800283c:	4413      	add	r3, r2
 800283e:	b29a      	uxth	r2, r3
 8002840:	4b48      	ldr	r3, [pc, #288]	; (8002964 <sampling+0x79c>)
 8002842:	809a      	strh	r2, [r3, #4]
		note_channel[3]=potValues[seq_loop[3]];  //loop 8 notes from pos and x times ,might disable normal adsr completely
 8002844:	4b46      	ldr	r3, [pc, #280]	; (8002960 <sampling+0x798>)
 8002846:	78db      	ldrb	r3, [r3, #3]
 8002848:	461a      	mov	r2, r3
 800284a:	4b44      	ldr	r3, [pc, #272]	; (800295c <sampling+0x794>)
 800284c:	5c9b      	ldrb	r3, [r3, r2]
 800284e:	b29a      	uxth	r2, r3
 8002850:	4b44      	ldr	r3, [pc, #272]	; (8002964 <sampling+0x79c>)
 8002852:	80da      	strh	r2, [r3, #6]
	if (note_channel[3]) 		{note_channel[3]=note_channel[3]+potValues[73];	adsr_retrigger[3]=1; note_toggler[i>>5]=1<<(i&31   )   ; } // stay at zero for off
 8002854:	4b43      	ldr	r3, [pc, #268]	; (8002964 <sampling+0x79c>)
 8002856:	88db      	ldrh	r3, [r3, #6]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d01c      	beq.n	8002896 <sampling+0x6ce>
 800285c:	4b41      	ldr	r3, [pc, #260]	; (8002964 <sampling+0x79c>)
 800285e:	88da      	ldrh	r2, [r3, #6]
 8002860:	4b3e      	ldr	r3, [pc, #248]	; (800295c <sampling+0x794>)
 8002862:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002866:	b29b      	uxth	r3, r3
 8002868:	4413      	add	r3, r2
 800286a:	b29a      	uxth	r2, r3
 800286c:	4b3d      	ldr	r3, [pc, #244]	; (8002964 <sampling+0x79c>)
 800286e:	80da      	strh	r2, [r3, #6]
 8002870:	4b3d      	ldr	r3, [pc, #244]	; (8002968 <sampling+0x7a0>)
 8002872:	2201      	movs	r2, #1
 8002874:	80da      	strh	r2, [r3, #6]
 8002876:	4b3d      	ldr	r3, [pc, #244]	; (800296c <sampling+0x7a4>)
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	f003 031f 	and.w	r3, r3, #31
 800287e:	2201      	movs	r2, #1
 8002880:	409a      	lsls	r2, r3
 8002882:	4b3a      	ldr	r3, [pc, #232]	; (800296c <sampling+0x7a4>)
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	095b      	lsrs	r3, r3, #5
 8002888:	b29b      	uxth	r3, r3
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8002890:	443b      	add	r3, r7
 8002892:	f843 2c7c 	str.w	r2, [r3, #-124]
	//note_channel[3]=(note_channel[3]-4)+(lfo_out[2]>>11);
	
	//if (((seq_pos&7)==0) && (adsr_toggle[6]==2))		{adsr_retrigger[6]=1; } else adsr_retrigger[6]=0; // delete


	note_channel[5]=potValues[80+(seq_pos&15)];  // sample
 8002896:	4b2f      	ldr	r3, [pc, #188]	; (8002954 <sampling+0x78c>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	3350      	adds	r3, #80	; 0x50
 80028a0:	4a2e      	ldr	r2, [pc, #184]	; (800295c <sampling+0x794>)
 80028a2:	5cd3      	ldrb	r3, [r2, r3]
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	4b2f      	ldr	r3, [pc, #188]	; (8002964 <sampling+0x79c>)
 80028a8:	815a      	strh	r2, [r3, #10]


	if ((note_channel[5]) && (adsr_toggle[5]==2)) {note_holdB=note_channel[5]; one_shot=0;}  // grab note when on ,one shot also , also delete
 80028aa:	4b2e      	ldr	r3, [pc, #184]	; (8002964 <sampling+0x79c>)
 80028ac:	895b      	ldrh	r3, [r3, #10]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00b      	beq.n	80028ca <sampling+0x702>
 80028b2:	4b2f      	ldr	r3, [pc, #188]	; (8002970 <sampling+0x7a8>)
 80028b4:	795b      	ldrb	r3, [r3, #5]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d107      	bne.n	80028ca <sampling+0x702>
 80028ba:	4b2a      	ldr	r3, [pc, #168]	; (8002964 <sampling+0x79c>)
 80028bc:	895b      	ldrh	r3, [r3, #10]
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	4b2c      	ldr	r3, [pc, #176]	; (8002974 <sampling+0x7ac>)
 80028c2:	701a      	strb	r2, [r3, #0]
 80028c4:	4b2c      	ldr	r3, [pc, #176]	; (8002978 <sampling+0x7b0>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	701a      	strb	r2, [r3, #0]

	
	note_holdB=potValues[80+seq_loop[2]]+(potValues[74]);  // 
 80028ca:	4b25      	ldr	r3, [pc, #148]	; (8002960 <sampling+0x798>)
 80028cc:	789b      	ldrb	r3, [r3, #2]
 80028ce:	3350      	adds	r3, #80	; 0x50
 80028d0:	4a22      	ldr	r2, [pc, #136]	; (800295c <sampling+0x794>)
 80028d2:	5cd2      	ldrb	r2, [r2, r3]
 80028d4:	4b21      	ldr	r3, [pc, #132]	; (800295c <sampling+0x794>)
 80028d6:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80028da:	4413      	add	r3, r2
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	4b25      	ldr	r3, [pc, #148]	; (8002974 <sampling+0x7ac>)
 80028e0:	701a      	strb	r2, [r3, #0]
	
	note_holdB=(note_holdB-4)+(lfo_out[2][i_frac]>>11);  //no go with float
 80028e2:	4b26      	ldr	r3, [pc, #152]	; (800297c <sampling+0x7b4>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	4a26      	ldr	r2, [pc, #152]	; (8002980 <sampling+0x7b8>)
 80028e8:	3314      	adds	r3, #20
 80028ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028ee:	0adb      	lsrs	r3, r3, #11
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	4b1f      	ldr	r3, [pc, #124]	; (8002974 <sampling+0x7ac>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	4413      	add	r3, r2
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	3b04      	subs	r3, #4
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	4b1c      	ldr	r3, [pc, #112]	; (8002974 <sampling+0x7ac>)
 8002902:	701a      	strb	r2, [r3, #0]



	note_holdB=MajorNote[note_holdB];
 8002904:	4b1b      	ldr	r3, [pc, #108]	; (8002974 <sampling+0x7ac>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	461a      	mov	r2, r3
 800290a:	4b1e      	ldr	r3, [pc, #120]	; (8002984 <sampling+0x7bc>)
 800290c:	5c9a      	ldrb	r2, [r3, r2]
 800290e:	4b19      	ldr	r3, [pc, #100]	; (8002974 <sampling+0x7ac>)
 8002910:	701a      	strb	r2, [r3, #0]

	sine_adder=sine_lut[note_holdB];	//sets freq ,1.0594  * 16536 =17518  ,
 8002912:	4b18      	ldr	r3, [pc, #96]	; (8002974 <sampling+0x7ac>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	4b1b      	ldr	r3, [pc, #108]	; (8002988 <sampling+0x7c0>)
 800291a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800291e:	4b1b      	ldr	r3, [pc, #108]	; (800298c <sampling+0x7c4>)
 8002920:	801a      	strh	r2, [r3, #0]
	sine_adder= (sine_adder*1200)>>10;  // modify different sample size , just need single cycle length and thats it
 8002922:	4b1a      	ldr	r3, [pc, #104]	; (800298c <sampling+0x7c4>)
 8002924:	881b      	ldrh	r3, [r3, #0]
 8002926:	461a      	mov	r2, r3
 8002928:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800292c:	fb02 f303 	mul.w	r3, r2, r3
 8002930:	129b      	asrs	r3, r3, #10
 8002932:	b29a      	uxth	r2, r3
 8002934:	4b15      	ldr	r3, [pc, #84]	; (800298c <sampling+0x7c4>)
 8002936:	801a      	strh	r2, [r3, #0]
		mask_result =0;
 8002938:	4b15      	ldr	r3, [pc, #84]	; (8002990 <sampling+0x7c8>)
 800293a:	2200      	movs	r2, #0
 800293c:	801a      	strh	r2, [r3, #0]
		sample_Accu[3]=0; // reset to 0 mani sample hold
		sample_Accu[4]=0; // reset to 0 mani sample hold
		sample_Accu[5]=0; // reset to 0 mani sample hold
*/

		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 800293e:	2300      	movs	r3, #0
 8002940:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002944:	f102 021f 	add.w	r2, r2, #31
 8002948:	7013      	strb	r3, [r2, #0]
 800294a:	e055      	b.n	80029f8 <sampling+0x830>
 800294c:	20001942 	.word	0x20001942
 8002950:	200018ee 	.word	0x200018ee
 8002954:	20000c54 	.word	0x20000c54
 8002958:	200001cc 	.word	0x200001cc
 800295c:	20000a20 	.word	0x20000a20
 8002960:	20001968 	.word	0x20001968
 8002964:	20001488 	.word	0x20001488
 8002968:	200018d8 	.word	0x200018d8
 800296c:	20000c7c 	.word	0x20000c7c
 8002970:	200018f0 	.word	0x200018f0
 8002974:	200018fc 	.word	0x200018fc
 8002978:	20001934 	.word	0x20001934
 800297c:	20001a60 	.word	0x20001a60
 8002980:	20001bf4 	.word	0x20001bf4
 8002984:	0800918c 	.word	0x0800918c
 8002988:	20000168 	.word	0x20000168
 800298c:	20000c56 	.word	0x20000c56
 8002990:	200014c6 	.word	0x200014c6

		if (note_channel[mask_i]) {tune_Accu=sample_Noteadd[MajorNote[note_channel[mask_i]]];   note_tuned[mask_i]=(tune_Accu);       } // relies on note channel clear , not good , clear not channel straight after
 8002994:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002998:	f103 031f 	add.w	r3, r3, #31
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	4a60      	ldr	r2, [pc, #384]	; (8002b20 <sampling+0x958>)
 80029a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d01c      	beq.n	80029e2 <sampling+0x81a>
 80029a8:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80029ac:	f103 031f 	add.w	r3, r3, #31
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	4a5b      	ldr	r2, [pc, #364]	; (8002b20 <sampling+0x958>)
 80029b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029b8:	461a      	mov	r2, r3
 80029ba:	4b5a      	ldr	r3, [pc, #360]	; (8002b24 <sampling+0x95c>)
 80029bc:	5c9b      	ldrb	r3, [r3, r2]
 80029be:	461a      	mov	r2, r3
 80029c0:	4b59      	ldr	r3, [pc, #356]	; (8002b28 <sampling+0x960>)
 80029c2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80029c6:	461a      	mov	r2, r3
 80029c8:	4b58      	ldr	r3, [pc, #352]	; (8002b2c <sampling+0x964>)
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	4b57      	ldr	r3, [pc, #348]	; (8002b2c <sampling+0x964>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80029d4:	f103 031f 	add.w	r3, r3, #31
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	b291      	uxth	r1, r2
 80029dc:	4a54      	ldr	r2, [pc, #336]	; (8002b30 <sampling+0x968>)
 80029de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 80029e2:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80029e6:	f103 031f 	add.w	r3, r3, #31
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	3301      	adds	r3, #1
 80029ee:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80029f2:	f102 021f 	add.w	r2, r2, #31
 80029f6:	7013      	strb	r3, [r2, #0]
 80029f8:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80029fc:	f103 031f 	add.w	r3, r3, #31
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d9c6      	bls.n	8002994 <sampling+0x7cc>

  // calc freq 1/isr or 1/16 per note ,need for pitch bend and so on , change depending on decay

// lfo section

	if ((i&63)==0) {   // calculate lfo maybe 8 times for now , seems to fill up
 8002a06:	4b4b      	ldr	r3, [pc, #300]	; (8002b34 <sampling+0x96c>)
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f040 8180 	bne.w	8002d14 <sampling+0xb4c>
freq_temp=0;
 8002a14:	f04f 0300 	mov.w	r3, #0
 8002a18:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002a1c:	f102 0214 	add.w	r2, r2, #20
 8002a20:	6013      	str	r3, [r2, #0]
freq2_temp=0;
 8002a22:	f04f 0300 	mov.w	r3, #0
 8002a26:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002a2a:	f102 0210 	add.w	r2, r2, #16
 8002a2e:	6013      	str	r3, [r2, #0]

//uint8_t i_frac2=(i_frac+7)&7;  //previous value can change shape  , not  bad effect

		for (l=0;l<10;l++){   //current lfo setup , messy
 8002a30:	2300      	movs	r3, #0
 8002a32:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002a36:	f102 021b 	add.w	r2, r2, #27
 8002a3a:	7013      	strb	r3, [r2, #0]
 8002a3c:	e128      	b.n	8002c90 <sampling+0xac8>

			freq_temp=potSource[130+l];
 8002a3e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002a42:	f103 031b 	add.w	r3, r3, #27
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	3382      	adds	r3, #130	; 0x82
 8002a4a:	4a3b      	ldr	r2, [pc, #236]	; (8002b38 <sampling+0x970>)
 8002a4c:	5cd3      	ldrb	r3, [r2, r3]
 8002a4e:	ee07 3a90 	vmov	s15, r3
 8002a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a56:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002a5a:	f103 0314 	add.w	r3, r3, #20
 8002a5e:	edc3 7a00 	vstr	s15, [r3]
			freq2_temp=freq_temp*tempo_sync ; //correction to one note per cycle ,fixed , maybe loose this
 8002a62:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002a66:	f103 0314 	add.w	r3, r3, #20
 8002a6a:	ed93 7a00 	vldr	s14, [r3]
 8002a6e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002a72:	f103 0308 	add.w	r3, r3, #8
 8002a76:	edd3 7a00 	vldr	s15, [r3]
 8002a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a7e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002a82:	f103 0310 	add.w	r3, r3, #16
 8002a86:	edc3 7a00 	vstr	s15, [r3]

			freq_temp=lfo_accu[l][i_frac]+ freq2_temp;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar
 8002a8a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002a8e:	f103 031b 	add.w	r3, r3, #27
 8002a92:	781a      	ldrb	r2, [r3, #0]
 8002a94:	4b29      	ldr	r3, [pc, #164]	; (8002b3c <sampling+0x974>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	4929      	ldr	r1, [pc, #164]	; (8002b40 <sampling+0x978>)
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	4403      	add	r3, r0
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	edd3 7a00 	vldr	s15, [r3]
 8002aae:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002ab2:	f103 0310 	add.w	r3, r3, #16
 8002ab6:	ed93 7a00 	vldr	s14, [r3]
 8002aba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002abe:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002ac2:	f103 0314 	add.w	r3, r3, #20
 8002ac6:	edc3 7a00 	vstr	s15, [r3]


//			if ((tempo_count<50) && ((next_isr&15)==15)) freq_temp=0;   // trying retrigger
		if (freq_temp>16384) lfo_accu[l][i_frac]=freq_temp-16384; else lfo_accu[l][i_frac]=freq_temp; // write back value
 8002aca:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002ace:	f103 0314 	add.w	r3, r3, #20
 8002ad2:	edd3 7a00 	vldr	s15, [r3]
 8002ad6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002b44 <sampling+0x97c>
 8002ada:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae2:	dd31      	ble.n	8002b48 <sampling+0x980>
 8002ae4:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002ae8:	f103 031b 	add.w	r3, r3, #27
 8002aec:	781a      	ldrb	r2, [r3, #0]
 8002aee:	4b13      	ldr	r3, [pc, #76]	; (8002b3c <sampling+0x974>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002af8:	f103 0314 	add.w	r3, r3, #20
 8002afc:	edd3 7a00 	vldr	s15, [r3]
 8002b00:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002b44 <sampling+0x97c>
 8002b04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b08:	490d      	ldr	r1, [pc, #52]	; (8002b40 <sampling+0x978>)
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	4403      	add	r3, r0
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	edc3 7a00 	vstr	s15, [r3]
 8002b1c:	e02a      	b.n	8002b74 <sampling+0x9ac>
 8002b1e:	bf00      	nop
 8002b20:	20001488 	.word	0x20001488
 8002b24:	0800918c 	.word	0x0800918c
 8002b28:	080091a8 	.word	0x080091a8
 8002b2c:	20000c50 	.word	0x20000c50
 8002b30:	20000c38 	.word	0x20000c38
 8002b34:	20000c7c 	.word	0x20000c7c
 8002b38:	20000b20 	.word	0x20000b20
 8002b3c:	20001a60 	.word	0x20001a60
 8002b40:	20001a64 	.word	0x20001a64
 8002b44:	46800000 	.word	0x46800000
 8002b48:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002b4c:	f103 031b 	add.w	r3, r3, #27
 8002b50:	781a      	ldrb	r2, [r3, #0]
 8002b52:	4b7d      	ldr	r3, [pc, #500]	; (8002d48 <sampling+0xb80>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	497c      	ldr	r1, [pc, #496]	; (8002d4c <sampling+0xb84>)
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	4403      	add	r3, r0
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	440b      	add	r3, r1
 8002b68:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002b6c:	f102 0214 	add.w	r2, r2, #20
 8002b70:	6812      	ldr	r2, [r2, #0]
 8002b72:	601a      	str	r2, [r3, #0]
		freq_temp=lfo_accu[l][i_frac]; // 0-255 limit + above zero
 8002b74:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002b78:	f103 031b 	add.w	r3, r3, #27
 8002b7c:	781a      	ldrb	r2, [r3, #0]
 8002b7e:	4b72      	ldr	r3, [pc, #456]	; (8002d48 <sampling+0xb80>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	4971      	ldr	r1, [pc, #452]	; (8002d4c <sampling+0xb84>)
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	4403      	add	r3, r0
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	440b      	add	r3, r1
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002b9a:	f102 0214 	add.w	r2, r2, #20
 8002b9e:	6013      	str	r3, [r2, #0]
		freq_temp=freq_temp*0.000383495;  // 0-255 , chang this for depth
 8002ba0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002ba4:	f103 0314 	add.w	r3, r3, #20
 8002ba8:	6818      	ldr	r0, [r3, #0]
 8002baa:	f7fd fdf7 	bl	800079c <__aeabi_f2d>
 8002bae:	a362      	add	r3, pc, #392	; (adr r3, 8002d38 <sampling+0xb70>)
 8002bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb4:	f7fd fb64 	bl	8000280 <__aeabi_dmul>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	f7fd fe44 	bl	800084c <__aeabi_d2f>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002bca:	f102 0214 	add.w	r2, r2, #20
 8002bce:	6013      	str	r3, [r2, #0]
		freq2_temp =arm_sin_f32(freq_temp); // seems to be working ok till here , not doing right here now
 8002bd0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002bd4:	f103 0314 	add.w	r3, r3, #20
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	f7fd fddf 	bl	800079c <__aeabi_f2d>
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	ec43 2b10 	vmov	d0, r2, r3
 8002be6:	f005 fa8b 	bl	8008100 <arm_sin_f32>
 8002bea:	ee07 0a90 	vmov	s15, r0
 8002bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bf2:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002bf6:	f103 0310 	add.w	r3, r3, #16
 8002bfa:	edc3 7a00 	vstr	s15, [r3]
		freq_temp=freq2_temp*potSource[140+l]*51;   // not working  proper something with angles i think
 8002bfe:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002c02:	f103 031b 	add.w	r3, r3, #27
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	338c      	adds	r3, #140	; 0x8c
 8002c0a:	4a51      	ldr	r2, [pc, #324]	; (8002d50 <sampling+0xb88>)
 8002c0c:	5cd3      	ldrb	r3, [r2, r3]
 8002c0e:	ee07 3a90 	vmov	s15, r3
 8002c12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c16:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002c1a:	f103 0310 	add.w	r3, r3, #16
 8002c1e:	edd3 7a00 	vldr	s15, [r3]
 8002c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c26:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8002d54 <sampling+0xb8c>
 8002c2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c2e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002c32:	f103 0314 	add.w	r3, r3, #20
 8002c36:	edc3 7a00 	vstr	s15, [r3]

		lfo_out[l] [i_frac]=freq_temp+8195; // ok now
 8002c3a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002c3e:	f103 0314 	add.w	r3, r3, #20
 8002c42:	edd3 7a00 	vldr	s15, [r3]
 8002c46:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002d58 <sampling+0xb90>
 8002c4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c4e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002c52:	f103 031b 	add.w	r3, r3, #27
 8002c56:	781a      	ldrb	r2, [r3, #0]
 8002c58:	4b3b      	ldr	r3, [pc, #236]	; (8002d48 <sampling+0xb80>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	461c      	mov	r4, r3
 8002c5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c62:	ee17 3a90 	vmov	r3, s15
 8002c66:	b298      	uxth	r0, r3
 8002c68:	493c      	ldr	r1, [pc, #240]	; (8002d5c <sampling+0xb94>)
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	4423      	add	r3, r4
 8002c74:	4602      	mov	r2, r0
 8002c76:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (l=0;l<10;l++){   //current lfo setup , messy
 8002c7a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002c7e:	f103 031b 	add.w	r3, r3, #27
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	3301      	adds	r3, #1
 8002c86:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002c8a:	f102 021b 	add.w	r2, r2, #27
 8002c8e:	7013      	strb	r3, [r2, #0]
 8002c90:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002c94:	f103 031b 	add.w	r3, r3, #27
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b09      	cmp	r3, #9
 8002c9c:	f67f aecf 	bls.w	8002a3e <sampling+0x876>

		} // lfo gen : 0=f1 , 1=tempo,2=pitch


			freq_pointer[0] [i_frac]=lfo_out [0][i_frac]*0.00006435; // problem was selecting accu instead of out , good now
 8002ca0:	4b29      	ldr	r3, [pc, #164]	; (8002d48 <sampling+0xb80>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	4b2d      	ldr	r3, [pc, #180]	; (8002d5c <sampling+0xb94>)
 8002ca8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fd fd63 	bl	8000778 <__aeabi_i2d>
 8002cb2:	a323      	add	r3, pc, #140	; (adr r3, 8002d40 <sampling+0xb78>)
 8002cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb8:	f7fd fae2 	bl	8000280 <__aeabi_dmul>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4921      	ldr	r1, [pc, #132]	; (8002d48 <sampling+0xb80>)
 8002cc2:	7809      	ldrb	r1, [r1, #0]
 8002cc4:	460c      	mov	r4, r1
 8002cc6:	4610      	mov	r0, r2
 8002cc8:	4619      	mov	r1, r3
 8002cca:	f7fd fdbf 	bl	800084c <__aeabi_d2f>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	4923      	ldr	r1, [pc, #140]	; (8002d60 <sampling+0xb98>)
 8002cd2:	00a3      	lsls	r3, r4, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	601a      	str	r2, [r3, #0]
		freq_pointer[2] [i_frac] =lfo_out [3][i_frac]*0.00006435;; // filter lfos
 8002cd8:	4b1b      	ldr	r3, [pc, #108]	; (8002d48 <sampling+0xb80>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	4a1f      	ldr	r2, [pc, #124]	; (8002d5c <sampling+0xb94>)
 8002cde:	331e      	adds	r3, #30
 8002ce0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fd fd47 	bl	8000778 <__aeabi_i2d>
 8002cea:	a315      	add	r3, pc, #84	; (adr r3, 8002d40 <sampling+0xb78>)
 8002cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf0:	f7fd fac6 	bl	8000280 <__aeabi_dmul>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4913      	ldr	r1, [pc, #76]	; (8002d48 <sampling+0xb80>)
 8002cfa:	7809      	ldrb	r1, [r1, #0]
 8002cfc:	460c      	mov	r4, r1
 8002cfe:	4610      	mov	r0, r2
 8002d00:	4619      	mov	r1, r3
 8002d02:	f7fd fda3 	bl	800084c <__aeabi_d2f>
 8002d06:	4602      	mov	r2, r0
 8002d08:	4915      	ldr	r1, [pc, #84]	; (8002d60 <sampling+0xb98>)
 8002d0a:	f104 0312 	add.w	r3, r4, #18
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	601a      	str	r2, [r3, #0]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002d14:	4b13      	ldr	r3, [pc, #76]	; (8002d64 <sampling+0xb9c>)
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	4b11      	ldr	r3, [pc, #68]	; (8002d64 <sampling+0xb9c>)
 8002d1e:	801a      	strh	r2, [r3, #0]
 8002d20:	4b10      	ldr	r3, [pc, #64]	; (8002d64 <sampling+0xb9c>)
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d28:	f4ff aca4 	bcc.w	8002674 <sampling+0x4ac>
// filter loop
int32_t play_holder1[512];    // data banks
int32_t play_holder2[512];


for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002d2c:	4b0d      	ldr	r3, [pc, #52]	; (8002d64 <sampling+0xb9c>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	801a      	strh	r2, [r3, #0]
 8002d32:	e0f7      	b.n	8002f24 <sampling+0xd5c>
 8002d34:	f3af 8000 	nop.w
 8002d38:	7bb1a72c 	.word	0x7bb1a72c
 8002d3c:	3f3921fa 	.word	0x3f3921fa
 8002d40:	94fd52a7 	.word	0x94fd52a7
 8002d44:	3f10de74 	.word	0x3f10de74
 8002d48:	20001a60 	.word	0x20001a60
 8002d4c:	20001a64 	.word	0x20001a64
 8002d50:	20000b20 	.word	0x20000b20
 8002d54:	424c0000 	.word	0x424c0000
 8002d58:	46000c00 	.word	0x46000c00
 8002d5c:	20001bf4 	.word	0x20001bf4
 8002d60:	200019d0 	.word	0x200019d0
 8002d64:	20000c7c 	.word	0x20000c7c
	i_total=i+sample_pointB;
 8002d68:	4b76      	ldr	r3, [pc, #472]	; (8002f44 <sampling+0xd7c>)
 8002d6a:	881a      	ldrh	r2, [r3, #0]
 8002d6c:	4b76      	ldr	r3, [pc, #472]	; (8002f48 <sampling+0xd80>)
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	4413      	add	r3, r2
 8002d72:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002d76:	f102 021e 	add.w	r2, r2, #30
 8002d7a:	8013      	strh	r3, [r2, #0]
	i_frac=(i>>6);
 8002d7c:	4b71      	ldr	r3, [pc, #452]	; (8002f44 <sampling+0xd7c>)
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	099b      	lsrs	r3, r3, #6
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	4b71      	ldr	r3, [pc, #452]	; (8002f4c <sampling+0xd84>)
 8002d88:	701a      	strb	r2, [r3, #0]
// every step   1,110,928   >>20  ,per note
// New oscillators , sync, trigger input , waveshape ,zero cross
	sample_accus[0] = sample_accus[0] + note_tuned[0]; //careful with signed bit shift,better compare
 8002d8a:	4b71      	ldr	r3, [pc, #452]	; (8002f50 <sampling+0xd88>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a71      	ldr	r2, [pc, #452]	; (8002f54 <sampling+0xd8c>)
 8002d90:	8812      	ldrh	r2, [r2, #0]
 8002d92:	4413      	add	r3, r2
 8002d94:	4a6e      	ldr	r2, [pc, #440]	; (8002f50 <sampling+0xd88>)
 8002d96:	6013      	str	r3, [r2, #0]

	if (sample_accus[0]>524287) sample_accus[0] =-sample_accus[0] ; // faster >  than &  ,strange
 8002d98:	4b6d      	ldr	r3, [pc, #436]	; (8002f50 <sampling+0xd88>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002da0:	db04      	blt.n	8002dac <sampling+0xbe4>
 8002da2:	4b6b      	ldr	r3, [pc, #428]	; (8002f50 <sampling+0xd88>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	425b      	negs	r3, r3
 8002da8:	4a69      	ldr	r2, [pc, #420]	; (8002f50 <sampling+0xd88>)
 8002daa:	6013      	str	r3, [r2, #0]



	sample_accus[1] = sample_accus[1] + note_tuned[1];  // normal adder full volume
 8002dac:	4b68      	ldr	r3, [pc, #416]	; (8002f50 <sampling+0xd88>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	4a68      	ldr	r2, [pc, #416]	; (8002f54 <sampling+0xd8c>)
 8002db2:	8852      	ldrh	r2, [r2, #2]
 8002db4:	4413      	add	r3, r2
 8002db6:	4a66      	ldr	r2, [pc, #408]	; (8002f50 <sampling+0xd88>)
 8002db8:	6053      	str	r3, [r2, #4]
		//	if (!(note_channel[0]))   sample_accus[1] =0;  // turn off with vel now , maybe use mask
			if (sample_accus[1]>524287) sample_accus[1] =-sample_accus[1] ; // faster >  than &  ,strange
 8002dba:	4b65      	ldr	r3, [pc, #404]	; (8002f50 <sampling+0xd88>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002dc2:	db04      	blt.n	8002dce <sampling+0xc06>
 8002dc4:	4b62      	ldr	r3, [pc, #392]	; (8002f50 <sampling+0xd88>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	425b      	negs	r3, r3
 8002dca:	4a61      	ldr	r2, [pc, #388]	; (8002f50 <sampling+0xd88>)
 8002dcc:	6053      	str	r3, [r2, #4]

			sample_accus[2] = sample_accus[2] + note_tuned[2];
 8002dce:	4b60      	ldr	r3, [pc, #384]	; (8002f50 <sampling+0xd88>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	4a60      	ldr	r2, [pc, #384]	; (8002f54 <sampling+0xd8c>)
 8002dd4:	8892      	ldrh	r2, [r2, #4]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	4a5d      	ldr	r2, [pc, #372]	; (8002f50 <sampling+0xd88>)
 8002dda:	6093      	str	r3, [r2, #8]
			//		if (!(note_channel[0]))   sample_accus[2] =0;  // turn off with vel now , maybe use mask
					if (sample_accus[2]>524287) sample_accus[2] =-sample_accus[2] ; // faster >  than &  ,strange
 8002ddc:	4b5c      	ldr	r3, [pc, #368]	; (8002f50 <sampling+0xd88>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002de4:	db04      	blt.n	8002df0 <sampling+0xc28>
 8002de6:	4b5a      	ldr	r3, [pc, #360]	; (8002f50 <sampling+0xd88>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	425b      	negs	r3, r3
 8002dec:	4a58      	ldr	r2, [pc, #352]	; (8002f50 <sampling+0xd88>)
 8002dee:	6093      	str	r3, [r2, #8]

					sample_accus[3] = sample_accus[3] + note_tuned[3]; // bouncing somewhere
 8002df0:	4b57      	ldr	r3, [pc, #348]	; (8002f50 <sampling+0xd88>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	4a57      	ldr	r2, [pc, #348]	; (8002f54 <sampling+0xd8c>)
 8002df6:	88d2      	ldrh	r2, [r2, #6]
 8002df8:	4413      	add	r3, r2
 8002dfa:	4a55      	ldr	r2, [pc, #340]	; (8002f50 <sampling+0xd88>)
 8002dfc:	60d3      	str	r3, [r2, #12]
					//sample_accus[3] = sample_accus[3] +4000;
					//	if (!(note_channel[0]))   sample_accus[3] =0;  // turn off with vel now , maybe use mask
							if (sample_accus[3]>524287) sample_accus[3] =-sample_accus[3] ; // faster >  than &  ,strange
 8002dfe:	4b54      	ldr	r3, [pc, #336]	; (8002f50 <sampling+0xd88>)
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e06:	db04      	blt.n	8002e12 <sampling+0xc4a>
 8002e08:	4b51      	ldr	r3, [pc, #324]	; (8002f50 <sampling+0xd88>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	425b      	negs	r3, r3
 8002e0e:	4a50      	ldr	r2, [pc, #320]	; (8002f50 <sampling+0xd88>)
 8002e10:	60d3      	str	r3, [r2, #12]

							sample_accus[4] = sample_accus[4] + note_tuned[4];
 8002e12:	4b4f      	ldr	r3, [pc, #316]	; (8002f50 <sampling+0xd88>)
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	4a4f      	ldr	r2, [pc, #316]	; (8002f54 <sampling+0xd8c>)
 8002e18:	8912      	ldrh	r2, [r2, #8]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	4a4c      	ldr	r2, [pc, #304]	; (8002f50 <sampling+0xd88>)
 8002e1e:	6113      	str	r3, [r2, #16]
								//	if (!(note_channel[4]))   sample_accus[4] =0;  // turn off with vel now , maybe use mask
									if (sample_accus[4]>524287) sample_accus[4] =-sample_accus[4] ; // faster >  than &  ,strange
 8002e20:	4b4b      	ldr	r3, [pc, #300]	; (8002f50 <sampling+0xd88>)
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e28:	db04      	blt.n	8002e34 <sampling+0xc6c>
 8002e2a:	4b49      	ldr	r3, [pc, #292]	; (8002f50 <sampling+0xd88>)
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	425b      	negs	r3, r3
 8002e30:	4a47      	ldr	r2, [pc, #284]	; (8002f50 <sampling+0xd88>)
 8002e32:	6113      	str	r3, [r2, #16]

									sample_Accu[2] = 0;sample_Accu[0] =0;sample_Accu[3] =0; //all zeroed
 8002e34:	4b48      	ldr	r3, [pc, #288]	; (8002f58 <sampling+0xd90>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	609a      	str	r2, [r3, #8]
 8002e3a:	4b47      	ldr	r3, [pc, #284]	; (8002f58 <sampling+0xd90>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	4b45      	ldr	r3, [pc, #276]	; (8002f58 <sampling+0xd90>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	60da      	str	r2, [r3, #12]
									//if (sample_accus[2]<0) sample_Accu[2]=+sample_accus[2]; else sample_Accu[2]=sample_accus[2]; // convert to triangle ?
									sample_Accu[0]=sample_accus[2]>>7; // needs cut a bit
 8002e46:	4b42      	ldr	r3, [pc, #264]	; (8002f50 <sampling+0xd88>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	11db      	asrs	r3, r3, #7
 8002e4c:	4a42      	ldr	r2, [pc, #264]	; (8002f58 <sampling+0xd90>)
 8002e4e:	6013      	str	r3, [r2, #0]

							sample_Accu[0] = ((sine_out+sample_Accu[0])*cross_fade[1]);   // sine input
 8002e50:	4b41      	ldr	r3, [pc, #260]	; (8002f58 <sampling+0xd90>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	4b41      	ldr	r3, [pc, #260]	; (8002f5c <sampling+0xd94>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002e5e:	f102 0219 	add.w	r2, r2, #25
 8002e62:	7812      	ldrb	r2, [r2, #0]
 8002e64:	fb02 f303 	mul.w	r3, r2, r3
 8002e68:	4a3b      	ldr	r2, [pc, #236]	; (8002f58 <sampling+0xd90>)
 8002e6a:	6013      	str	r3, [r2, #0]

									//if (sample_accus[3]<0) sample_Accu[3]=+sample_accus[3]; else sample_Accu[3]=sample_accus[3]; // convert to triangle
									sample_Accu[3]=sample_accus[3];
 8002e6c:	4b38      	ldr	r3, [pc, #224]	; (8002f50 <sampling+0xd88>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	4a39      	ldr	r2, [pc, #228]	; (8002f58 <sampling+0xd90>)
 8002e72:	60d3      	str	r3, [r2, #12]
									sample_Accu[2] = (sample_Accu[3]*cross_fade[2]);			//27b, 2 out f2  might do a crossfade here using pot 3
 8002e74:	4b38      	ldr	r3, [pc, #224]	; (8002f58 <sampling+0xd90>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002e7c:	f102 021a 	add.w	r2, r2, #26
 8002e80:	7812      	ldrb	r2, [r2, #0]
 8002e82:	fb02 f303 	mul.w	r3, r2, r3
 8002e86:	4a34      	ldr	r2, [pc, #208]	; (8002f58 <sampling+0xd90>)
 8002e88:	6093      	str	r3, [r2, #8]
									//	sample_Accu[5] = sample_Accu[4]+ (sample_accus[4]*4);			// drum and envelope

	//	sample_Accu=sample_Accu-(1<<21);


if (sine_counterB==0) 	sine_temp2=sine_adder;
 8002e8a:	4b35      	ldr	r3, [pc, #212]	; (8002f60 <sampling+0xd98>)
 8002e8c:	881b      	ldrh	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d103      	bne.n	8002e9a <sampling+0xcd2>
 8002e92:	4b34      	ldr	r3, [pc, #208]	; (8002f64 <sampling+0xd9c>)
 8002e94:	881a      	ldrh	r2, [r3, #0]
 8002e96:	4b34      	ldr	r3, [pc, #208]	; (8002f68 <sampling+0xda0>)
 8002e98:	801a      	strh	r2, [r3, #0]

	sine_counterB=sine_counterB+sine_temp2 ;  // sine up counter per cycle , however sine adder nees to wait
 8002e9a:	4b31      	ldr	r3, [pc, #196]	; (8002f60 <sampling+0xd98>)
 8002e9c:	881a      	ldrh	r2, [r3, #0]
 8002e9e:	4b32      	ldr	r3, [pc, #200]	; (8002f68 <sampling+0xda0>)
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	4b2e      	ldr	r3, [pc, #184]	; (8002f60 <sampling+0xd98>)
 8002ea8:	801a      	strh	r2, [r3, #0]
	if (sine_counterB>>7) sine_zero=0; else sine_zero=1;
 8002eaa:	4b2d      	ldr	r3, [pc, #180]	; (8002f60 <sampling+0xd98>)
 8002eac:	881b      	ldrh	r3, [r3, #0]
 8002eae:	09db      	lsrs	r3, r3, #7
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d006      	beq.n	8002ec4 <sampling+0xcfc>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002ebc:	f102 021c 	add.w	r2, r2, #28
 8002ec0:	8013      	strh	r3, [r2, #0]
 8002ec2:	e005      	b.n	8002ed0 <sampling+0xd08>
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002eca:	f102 021c 	add.w	r2, r2, #28
 8002ece:	8013      	strh	r3, [r2, #0]

if (sine_counterB>(sine_length<<5)) sine_counterB=0; //fixed for now
 8002ed0:	4b23      	ldr	r3, [pc, #140]	; (8002f60 <sampling+0xd98>)
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4b25      	ldr	r3, [pc, #148]	; (8002f6c <sampling+0xda4>)
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	015b      	lsls	r3, r3, #5
 8002edc:	429a      	cmp	r2, r3
 8002ede:	dd02      	ble.n	8002ee6 <sampling+0xd1e>
 8002ee0:	4b1f      	ldr	r3, [pc, #124]	; (8002f60 <sampling+0xd98>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	801a      	strh	r2, [r3, #0]
sine_count(); // calc sine
 8002ee6:	f000 fa93 	bl	8003410 <sine_count>
play_holder1[i]=sample_Accu[0];  // write to bank
 8002eea:	4b16      	ldr	r3, [pc, #88]	; (8002f44 <sampling+0xd7c>)
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4b19      	ldr	r3, [pc, #100]	; (8002f58 <sampling+0xd90>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002ef8:	f6a3 039c 	subw	r3, r3, #2204	; 0x89c
 8002efc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
play_holder2[i]=sample_Accu[2];
 8002f00:	4b10      	ldr	r3, [pc, #64]	; (8002f44 <sampling+0xd7c>)
 8002f02:	881b      	ldrh	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	4b14      	ldr	r3, [pc, #80]	; (8002f58 <sampling+0xd90>)
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002f0e:	4619      	mov	r1, r3
 8002f10:	0083      	lsls	r3, r0, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	f843 2c9c 	str.w	r2, [r3, #-156]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002f18:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <sampling+0xd7c>)
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <sampling+0xd7c>)
 8002f22:	801a      	strh	r2, [r3, #0]
 8002f24:	4b07      	ldr	r3, [pc, #28]	; (8002f44 <sampling+0xd7c>)
 8002f26:	881b      	ldrh	r3, [r3, #0]
 8002f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f2c:	f4ff af1c 	bcc.w	8002d68 <sampling+0xba0>


int32_t filter_Accu;


int32_t feedback_out=filter_out[3];
 8002f30:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <sampling+0xda8>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002f38:	6013      	str	r3, [r2, #0]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out
 8002f3a:	4b02      	ldr	r3, [pc, #8]	; (8002f44 <sampling+0xd7c>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	801a      	strh	r2, [r3, #0]
 8002f40:	e250      	b.n	80033e4 <sampling+0x121c>
 8002f42:	bf00      	nop
 8002f44:	20000c7c 	.word	0x20000c7c
 8002f48:	20000c7a 	.word	0x20000c7a
 8002f4c:	20001a60 	.word	0x20001a60
 8002f50:	2000191c 	.word	0x2000191c
 8002f54:	20000c38 	.word	0x20000c38
 8002f58:	20000c5c 	.word	0x20000c5c
 8002f5c:	20000c30 	.word	0x20000c30
 8002f60:	20000c2c 	.word	0x20000c2c
 8002f64:	20000c56 	.word	0x20000c56
 8002f68:	20000c34 	.word	0x20000c34
 8002f6c:	20000166 	.word	0x20000166
 8002f70:	20001900 	.word	0x20001900
	i_total=i+sample_pointB;
 8002f74:	4b34      	ldr	r3, [pc, #208]	; (8003048 <sampling+0xe80>)
 8002f76:	881a      	ldrh	r2, [r3, #0]
 8002f78:	4b34      	ldr	r3, [pc, #208]	; (800304c <sampling+0xe84>)
 8002f7a:	881b      	ldrh	r3, [r3, #0]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002f82:	f102 021e 	add.w	r2, r2, #30
 8002f86:	8013      	strh	r3, [r2, #0]
i_frac=(i>>6);
 8002f88:	4b2f      	ldr	r3, [pc, #188]	; (8003048 <sampling+0xe80>)
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	099b      	lsrs	r3, r3, #6
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	4b2f      	ldr	r3, [pc, #188]	; (8003050 <sampling+0xe88>)
 8002f94:	701a      	strb	r2, [r3, #0]

// filter 1
if (		(note_toggler[i>>5]	)==(1<<(i&31)	)) 				{adsr_temp =0;  trigger_counter++; trigger_counter=trigger_counter&1023  ;}
 8002f96:	4b2c      	ldr	r3, [pc, #176]	; (8003048 <sampling+0xe80>)
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8002fa4:	443b      	add	r3, r7
 8002fa6:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8002faa:	4a27      	ldr	r2, [pc, #156]	; (8003048 <sampling+0xe80>)
 8002fac:	8812      	ldrh	r2, [r2, #0]
 8002fae:	f002 021f 	and.w	r2, r2, #31
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d10f      	bne.n	8002fdc <sampling+0xe14>
 8002fbc:	4b25      	ldr	r3, [pc, #148]	; (8003054 <sampling+0xe8c>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	701a      	strb	r2, [r3, #0]
 8002fc2:	4b25      	ldr	r3, [pc, #148]	; (8003058 <sampling+0xe90>)
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	4b23      	ldr	r3, [pc, #140]	; (8003058 <sampling+0xe90>)
 8002fcc:	801a      	strh	r2, [r3, #0]
 8002fce:	4b22      	ldr	r3, [pc, #136]	; (8003058 <sampling+0xe90>)
 8002fd0:	881b      	ldrh	r3, [r3, #0]
 8002fd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	4b1f      	ldr	r3, [pc, #124]	; (8003058 <sampling+0xe90>)
 8002fda:	801a      	strh	r2, [r3, #0]

//if (feedback_out>0xFFFF) feedback_out=0xFFFF; else if (feedback_out<-65535) feedback_out=-65535;  // limiter to 16 bits

sample_Accu[1]=play_holder1[i];  // sine input
 8002fdc:	4b1a      	ldr	r3, [pc, #104]	; (8003048 <sampling+0xe80>)
 8002fde:	881b      	ldrh	r3, [r3, #0]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002fe6:	f6a3 039c 	subw	r3, r3, #2204	; 0x89c
 8002fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fee:	4a1b      	ldr	r2, [pc, #108]	; (800305c <sampling+0xe94>)
 8002ff0:	6053      	str	r3, [r2, #4]
freq_point[0]=freq_pointer[0] [i_frac];; // load up coeffs
 8002ff2:	4b17      	ldr	r3, [pc, #92]	; (8003050 <sampling+0xe88>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	4a1a      	ldr	r2, [pc, #104]	; (8003060 <sampling+0xe98>)
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a19      	ldr	r2, [pc, #100]	; (8003064 <sampling+0xe9c>)
 8003000:	6013      	str	r3, [r2, #0]
//freq_point[1]=freq_pointer[1] [i_frac];
freq_point[2]=freq_pointer[2] [i_frac];  // ok , array was too short
 8003002:	4b13      	ldr	r3, [pc, #76]	; (8003050 <sampling+0xe88>)
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	4a16      	ldr	r2, [pc, #88]	; (8003060 <sampling+0xe98>)
 8003008:	3312      	adds	r3, #18
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a14      	ldr	r2, [pc, #80]	; (8003064 <sampling+0xe9c>)
 8003012:	6093      	str	r3, [r2, #8]
//freq_point[3]=freq_pointer[3] [i_frac];
//freq_point[0]=0.5;  //was ok with this
	//	freq_point[2]=0.5;


adsr_level[3] = adsr_lut	[i>>1];
 8003014:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <sampling+0xe80>)
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	085b      	lsrs	r3, r3, #1
 800301a:	b29b      	uxth	r3, r3
 800301c:	4a12      	ldr	r2, [pc, #72]	; (8003068 <sampling+0xea0>)
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a11      	ldr	r2, [pc, #68]	; (800306c <sampling+0xea4>)
 8003026:	60d3      	str	r3, [r2, #12]


if (freq_point[0]>1) freq_point[0]=1; else if (freq_point[0]<0) freq_point[0]=0;// just in case
 8003028:	4b0e      	ldr	r3, [pc, #56]	; (8003064 <sampling+0xe9c>)
 800302a:	edd3 7a00 	vldr	s15, [r3]
 800302e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003032:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800303a:	dd19      	ble.n	8003070 <sampling+0xea8>
 800303c:	4b09      	ldr	r3, [pc, #36]	; (8003064 <sampling+0xe9c>)
 800303e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	e020      	b.n	8003088 <sampling+0xec0>
 8003046:	bf00      	nop
 8003048:	20000c7c 	.word	0x20000c7c
 800304c:	20000c7a 	.word	0x20000c7a
 8003050:	20001a60 	.word	0x20001a60
 8003054:	200018d4 	.word	0x200018d4
 8003058:	20001a62 	.word	0x20001a62
 800305c:	20000c5c 	.word	0x20000c5c
 8003060:	200019d0 	.word	0x200019d0
 8003064:	200019c0 	.word	0x200019c0
 8003068:	200014d4 	.word	0x200014d4
 800306c:	20002200 	.word	0x20002200
 8003070:	4bc1      	ldr	r3, [pc, #772]	; (8003378 <sampling+0x11b0>)
 8003072:	edd3 7a00 	vldr	s15, [r3]
 8003076:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800307a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800307e:	d503      	bpl.n	8003088 <sampling+0xec0>
 8003080:	4bbd      	ldr	r3, [pc, #756]	; (8003378 <sampling+0x11b0>)
 8003082:	f04f 0200 	mov.w	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
		//freq_point[0]=0.50;
		freq_point[1]=1-freq_point[0];
 8003088:	4bbb      	ldr	r3, [pc, #748]	; (8003378 <sampling+0x11b0>)
 800308a:	edd3 7a00 	vldr	s15, [r3]
 800308e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003092:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003096:	4bb8      	ldr	r3, [pc, #736]	; (8003378 <sampling+0x11b0>)
 8003098:	edc3 7a01 	vstr	s15, [r3, #4]
		//filter_accus[1]=sample_Accu[1];
		filter_accus[1]=sample_Accu[1]+((filter_hold[0])*0.5); // saw
 800309c:	4bb7      	ldr	r3, [pc, #732]	; (800337c <sampling+0x11b4>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7fd fb69 	bl	8000778 <__aeabi_i2d>
 80030a6:	4604      	mov	r4, r0
 80030a8:	460d      	mov	r5, r1
 80030aa:	4bb5      	ldr	r3, [pc, #724]	; (8003380 <sampling+0x11b8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fd fb74 	bl	800079c <__aeabi_f2d>
 80030b4:	f04f 0200 	mov.w	r2, #0
 80030b8:	4bb2      	ldr	r3, [pc, #712]	; (8003384 <sampling+0x11bc>)
 80030ba:	f7fd f8e1 	bl	8000280 <__aeabi_dmul>
 80030be:	4602      	mov	r2, r0
 80030c0:	460b      	mov	r3, r1
 80030c2:	4620      	mov	r0, r4
 80030c4:	4629      	mov	r1, r5
 80030c6:	f7fd fa0b 	bl	80004e0 <__adddf3>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	4610      	mov	r0, r2
 80030d0:	4619      	mov	r1, r3
 80030d2:	f7fd fbbb 	bl	800084c <__aeabi_d2f>
 80030d6:	4603      	mov	r3, r0
 80030d8:	4aab      	ldr	r2, [pc, #684]	; (8003388 <sampling+0x11c0>)
 80030da:	6053      	str	r3, [r2, #4]
	//	filter_accus[1]=	filter_accus[1]*adsr_level[3][i_frac];
		filter_accus[1]=	filter_accus[1]*adsr_level[3];
 80030dc:	4baa      	ldr	r3, [pc, #680]	; (8003388 <sampling+0x11c0>)
 80030de:	ed93 7a01 	vldr	s14, [r3, #4]
 80030e2:	4baa      	ldr	r3, [pc, #680]	; (800338c <sampling+0x11c4>)
 80030e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80030e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ec:	4ba6      	ldr	r3, [pc, #664]	; (8003388 <sampling+0x11c0>)
 80030ee:	edc3 7a01 	vstr	s15, [r3, #4]

		filter_accus[2]=(filter_accus[1]*freq_point[0])+(filter_accus[2]*freq_point[1]);					// maybe allow bandpass insted of lpf
 80030f2:	4ba5      	ldr	r3, [pc, #660]	; (8003388 <sampling+0x11c0>)
 80030f4:	ed93 7a01 	vldr	s14, [r3, #4]
 80030f8:	4b9f      	ldr	r3, [pc, #636]	; (8003378 <sampling+0x11b0>)
 80030fa:	edd3 7a00 	vldr	s15, [r3]
 80030fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003102:	4ba1      	ldr	r3, [pc, #644]	; (8003388 <sampling+0x11c0>)
 8003104:	edd3 6a02 	vldr	s13, [r3, #8]
 8003108:	4b9b      	ldr	r3, [pc, #620]	; (8003378 <sampling+0x11b0>)
 800310a:	edd3 7a01 	vldr	s15, [r3, #4]
 800310e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003112:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003116:	4b9c      	ldr	r3, [pc, #624]	; (8003388 <sampling+0x11c0>)
 8003118:	edc3 7a02 	vstr	s15, [r3, #8]
		filter_accus[3]=(filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]);
 800311c:	4b9a      	ldr	r3, [pc, #616]	; (8003388 <sampling+0x11c0>)
 800311e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003122:	4b95      	ldr	r3, [pc, #596]	; (8003378 <sampling+0x11b0>)
 8003124:	edd3 7a00 	vldr	s15, [r3]
 8003128:	ee27 7a27 	vmul.f32	s14, s14, s15
 800312c:	4b96      	ldr	r3, [pc, #600]	; (8003388 <sampling+0x11c0>)
 800312e:	edd3 6a03 	vldr	s13, [r3, #12]
 8003132:	4b91      	ldr	r3, [pc, #580]	; (8003378 <sampling+0x11b0>)
 8003134:	edd3 7a01 	vldr	s15, [r3, #4]
 8003138:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800313c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003140:	4b91      	ldr	r3, [pc, #580]	; (8003388 <sampling+0x11c0>)
 8003142:	edc3 7a03 	vstr	s15, [r3, #12]
		filter_accus[4]=(filter_accus[3]*freq_point[0])+(filter_accus[4]*freq_point[1]);
 8003146:	4b90      	ldr	r3, [pc, #576]	; (8003388 <sampling+0x11c0>)
 8003148:	ed93 7a03 	vldr	s14, [r3, #12]
 800314c:	4b8a      	ldr	r3, [pc, #552]	; (8003378 <sampling+0x11b0>)
 800314e:	edd3 7a00 	vldr	s15, [r3]
 8003152:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003156:	4b8c      	ldr	r3, [pc, #560]	; (8003388 <sampling+0x11c0>)
 8003158:	edd3 6a04 	vldr	s13, [r3, #16]
 800315c:	4b86      	ldr	r3, [pc, #536]	; (8003378 <sampling+0x11b0>)
 800315e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003162:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003166:	ee77 7a27 	vadd.f32	s15, s14, s15
 800316a:	4b87      	ldr	r3, [pc, #540]	; (8003388 <sampling+0x11c0>)
 800316c:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[5]=(filter_accus[4]*freq_point[0])+(filter_accus[5]*freq_point[1]);
 8003170:	4b85      	ldr	r3, [pc, #532]	; (8003388 <sampling+0x11c0>)
 8003172:	ed93 7a04 	vldr	s14, [r3, #16]
 8003176:	4b80      	ldr	r3, [pc, #512]	; (8003378 <sampling+0x11b0>)
 8003178:	edd3 7a00 	vldr	s15, [r3]
 800317c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003180:	4b81      	ldr	r3, [pc, #516]	; (8003388 <sampling+0x11c0>)
 8003182:	edd3 6a05 	vldr	s13, [r3, #20]
 8003186:	4b7c      	ldr	r3, [pc, #496]	; (8003378 <sampling+0x11b0>)
 8003188:	edd3 7a01 	vldr	s15, [r3, #4]
 800318c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003194:	4b7c      	ldr	r3, [pc, #496]	; (8003388 <sampling+0x11c0>)
 8003196:	edc3 7a05 	vstr	s15, [r3, #20]
		filter_hold[0]=(filter_accus[5]+filter_accus[11])*0.5; //half sample , nice
 800319a:	4b7b      	ldr	r3, [pc, #492]	; (8003388 <sampling+0x11c0>)
 800319c:	ed93 7a05 	vldr	s14, [r3, #20]
 80031a0:	4b79      	ldr	r3, [pc, #484]	; (8003388 <sampling+0x11c0>)
 80031a2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80031a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031aa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80031ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031b2:	4b73      	ldr	r3, [pc, #460]	; (8003380 <sampling+0x11b8>)
 80031b4:	edc3 7a00 	vstr	s15, [r3]
		sample_Accu[0] =filter_accus[5]; // out
 80031b8:	4b73      	ldr	r3, [pc, #460]	; (8003388 <sampling+0x11c0>)
 80031ba:	edd3 7a05 	vldr	s15, [r3, #20]
 80031be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031c2:	ee17 2a90 	vmov	r2, s15
 80031c6:	4b6d      	ldr	r3, [pc, #436]	; (800337c <sampling+0x11b4>)
 80031c8:	601a      	str	r2, [r3, #0]
		filter_accus[11]=filter_accus[5]; //write back new value
 80031ca:	4b6f      	ldr	r3, [pc, #444]	; (8003388 <sampling+0x11c0>)
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	4a6e      	ldr	r2, [pc, #440]	; (8003388 <sampling+0x11c0>)
 80031d0:	62d3      	str	r3, [r2, #44]	; 0x2c
		//sample_Accu[0] =sample_Accu[1];

		//filter 2
		sample_Accu[3]=play_holder2[i] >>5; // sine
 80031d2:	4b6f      	ldr	r3, [pc, #444]	; (8003390 <sampling+0x11c8>)
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 80031e2:	115b      	asrs	r3, r3, #5
 80031e4:	4a65      	ldr	r2, [pc, #404]	; (800337c <sampling+0x11b4>)
 80031e6:	60d3      	str	r3, [r2, #12]


				if (freq_point[2]>1) freq_point[2]=1;
 80031e8:	4b63      	ldr	r3, [pc, #396]	; (8003378 <sampling+0x11b0>)
 80031ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80031ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031fa:	dd03      	ble.n	8003204 <sampling+0x103c>
 80031fc:	4b5e      	ldr	r3, [pc, #376]	; (8003378 <sampling+0x11b0>)
 80031fe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003202:	609a      	str	r2, [r3, #8]

				freq_point[3]=1-freq_point[2];
 8003204:	4b5c      	ldr	r3, [pc, #368]	; (8003378 <sampling+0x11b0>)
 8003206:	edd3 7a02 	vldr	s15, [r3, #8]
 800320a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800320e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003212:	4b59      	ldr	r3, [pc, #356]	; (8003378 <sampling+0x11b0>)
 8003214:	edc3 7a03 	vstr	s15, [r3, #12]
				filter_accus[6]=sample_Accu[3];
 8003218:	4b58      	ldr	r3, [pc, #352]	; (800337c <sampling+0x11b4>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	ee07 3a90 	vmov	s15, r3
 8003220:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003224:	4b58      	ldr	r3, [pc, #352]	; (8003388 <sampling+0x11c0>)
 8003226:	edc3 7a06 	vstr	s15, [r3, #24]
				filter_accus[6]= filter_accus[6]*adsr_level[3]; // add adsr envelope
 800322a:	4b57      	ldr	r3, [pc, #348]	; (8003388 <sampling+0x11c0>)
 800322c:	ed93 7a06 	vldr	s14, [r3, #24]
 8003230:	4b56      	ldr	r3, [pc, #344]	; (800338c <sampling+0x11c4>)
 8003232:	edd3 7a03 	vldr	s15, [r3, #12]
 8003236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800323a:	4b53      	ldr	r3, [pc, #332]	; (8003388 <sampling+0x11c0>)
 800323c:	edc3 7a06 	vstr	s15, [r3, #24]

				filter_accus[7]=(filter_accus[6]*freq_point[2])+(filter_accus[7]*freq_point[3]);
 8003240:	4b51      	ldr	r3, [pc, #324]	; (8003388 <sampling+0x11c0>)
 8003242:	ed93 7a06 	vldr	s14, [r3, #24]
 8003246:	4b4c      	ldr	r3, [pc, #304]	; (8003378 <sampling+0x11b0>)
 8003248:	edd3 7a02 	vldr	s15, [r3, #8]
 800324c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003250:	4b4d      	ldr	r3, [pc, #308]	; (8003388 <sampling+0x11c0>)
 8003252:	edd3 6a07 	vldr	s13, [r3, #28]
 8003256:	4b48      	ldr	r3, [pc, #288]	; (8003378 <sampling+0x11b0>)
 8003258:	edd3 7a03 	vldr	s15, [r3, #12]
 800325c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003264:	4b48      	ldr	r3, [pc, #288]	; (8003388 <sampling+0x11c0>)
 8003266:	edc3 7a07 	vstr	s15, [r3, #28]
				filter_accus[8]=(filter_accus[7]*freq_point[2])+(filter_accus[8]*freq_point[3]);
 800326a:	4b47      	ldr	r3, [pc, #284]	; (8003388 <sampling+0x11c0>)
 800326c:	ed93 7a07 	vldr	s14, [r3, #28]
 8003270:	4b41      	ldr	r3, [pc, #260]	; (8003378 <sampling+0x11b0>)
 8003272:	edd3 7a02 	vldr	s15, [r3, #8]
 8003276:	ee27 7a27 	vmul.f32	s14, s14, s15
 800327a:	4b43      	ldr	r3, [pc, #268]	; (8003388 <sampling+0x11c0>)
 800327c:	edd3 6a08 	vldr	s13, [r3, #32]
 8003280:	4b3d      	ldr	r3, [pc, #244]	; (8003378 <sampling+0x11b0>)
 8003282:	edd3 7a03 	vldr	s15, [r3, #12]
 8003286:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800328a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800328e:	4b3e      	ldr	r3, [pc, #248]	; (8003388 <sampling+0x11c0>)
 8003290:	edc3 7a08 	vstr	s15, [r3, #32]
				filter_accus[9]=(filter_accus[8]*freq_point[2])+(filter_accus[9]*freq_point[3]);
 8003294:	4b3c      	ldr	r3, [pc, #240]	; (8003388 <sampling+0x11c0>)
 8003296:	ed93 7a08 	vldr	s14, [r3, #32]
 800329a:	4b37      	ldr	r3, [pc, #220]	; (8003378 <sampling+0x11b0>)
 800329c:	edd3 7a02 	vldr	s15, [r3, #8]
 80032a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032a4:	4b38      	ldr	r3, [pc, #224]	; (8003388 <sampling+0x11c0>)
 80032a6:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80032aa:	4b33      	ldr	r3, [pc, #204]	; (8003378 <sampling+0x11b0>)
 80032ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80032b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032b8:	4b33      	ldr	r3, [pc, #204]	; (8003388 <sampling+0x11c0>)
 80032ba:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				filter_accus[10]=(filter_accus[9]*freq_point[2])+(filter_accus[10]*freq_point[3]);
 80032be:	4b32      	ldr	r3, [pc, #200]	; (8003388 <sampling+0x11c0>)
 80032c0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80032c4:	4b2c      	ldr	r3, [pc, #176]	; (8003378 <sampling+0x11b0>)
 80032c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80032ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032ce:	4b2e      	ldr	r3, [pc, #184]	; (8003388 <sampling+0x11c0>)
 80032d0:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80032d4:	4b28      	ldr	r3, [pc, #160]	; (8003378 <sampling+0x11b0>)
 80032d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80032da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032e2:	4b29      	ldr	r3, [pc, #164]	; (8003388 <sampling+0x11c0>)
 80032e4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				filter_hold[1]=(filter_accus[10]+filter_accus[12])*0.5; //half sample
 80032e8:	4b27      	ldr	r3, [pc, #156]	; (8003388 <sampling+0x11c0>)
 80032ea:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80032ee:	4b26      	ldr	r3, [pc, #152]	; (8003388 <sampling+0x11c0>)
 80032f0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80032f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032f8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80032fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003300:	4b1f      	ldr	r3, [pc, #124]	; (8003380 <sampling+0x11b8>)
 8003302:	edc3 7a01 	vstr	s15, [r3, #4]
				sample_Accu[2] =filter_accus[10]; //out
 8003306:	4b20      	ldr	r3, [pc, #128]	; (8003388 <sampling+0x11c0>)
 8003308:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800330c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003310:	ee17 2a90 	vmov	r2, s15
 8003314:	4b19      	ldr	r3, [pc, #100]	; (800337c <sampling+0x11b4>)
 8003316:	609a      	str	r2, [r3, #8]
				filter_accus[12]=filter_accus[10]; //write back new value
 8003318:	4b1b      	ldr	r3, [pc, #108]	; (8003388 <sampling+0x11c0>)
 800331a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331c:	4a1a      	ldr	r2, [pc, #104]	; (8003388 <sampling+0x11c0>)
 800331e:	6313      	str	r3, [r2, #48]	; 0x30


filter_Accu=0;
 8003320:	2300      	movs	r3, #0
 8003322:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003326:	f102 0210 	add.w	r2, r2, #16
 800332a:	6013      	str	r3, [r2, #0]
//filter_Accu=(sample_Accu[0]+sample_Accu[2])>>8; //filter + drum out
//filter_Accu=(sample_Accu[1]+sample_Accu[3])>>8; //filter + drum out ,clean out
 //filter_Accu=sample_Accu[1]>>8;
filter_Accu=(sample_Accu[1]>>7)+(sample_Accu[3]>>8); //filter + drum out
 800332c:	4b13      	ldr	r3, [pc, #76]	; (800337c <sampling+0x11b4>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	11da      	asrs	r2, r3, #7
 8003332:	4b12      	ldr	r3, [pc, #72]	; (800337c <sampling+0x11b4>)
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	121b      	asrs	r3, r3, #8
 8003338:	4413      	add	r3, r2
 800333a:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800333e:	f102 0210 	add.w	r2, r2, #16
 8003342:	6013      	str	r3, [r2, #0]
 if (one_shot!=199)   one_shot++;  //play one attack then stop
 8003344:	4b13      	ldr	r3, [pc, #76]	; (8003394 <sampling+0x11cc>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2bc7      	cmp	r3, #199	; 0xc7
 800334a:	d005      	beq.n	8003358 <sampling+0x1190>
 800334c:	4b11      	ldr	r3, [pc, #68]	; (8003394 <sampling+0x11cc>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	3301      	adds	r3, #1
 8003352:	b2da      	uxtb	r2, r3
 8003354:	4b0f      	ldr	r3, [pc, #60]	; (8003394 <sampling+0x11cc>)
 8003356:	701a      	strb	r2, [r3, #0]

 if (filter_Accu>0xFFFF) filter_Accu=0xFFFF; else if (filter_Accu<-65535) filter_Accu=-65535;  // limiter to 16 bits
 8003358:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800335c:	f103 0310 	add.w	r3, r3, #16
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003366:	db17      	blt.n	8003398 <sampling+0x11d0>
 8003368:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800336c:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003370:	f102 0210 	add.w	r2, r2, #16
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	e01d      	b.n	80033b4 <sampling+0x11ec>
 8003378:	200019c0 	.word	0x200019c0
 800337c:	20000c5c 	.word	0x20000c5c
 8003380:	200019ac 	.word	0x200019ac
 8003384:	3fe00000 	.word	0x3fe00000
 8003388:	20001970 	.word	0x20001970
 800338c:	20002200 	.word	0x20002200
 8003390:	20000c7c 	.word	0x20000c7c
 8003394:	20001934 	.word	0x20001934
 8003398:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800339c:	f103 0310 	add.w	r3, r3, #16
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033a6:	dc05      	bgt.n	80033b4 <sampling+0x11ec>
 80033a8:	4b15      	ldr	r3, [pc, #84]	; (8003400 <sampling+0x1238>)
 80033aa:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80033ae:	f102 0210 	add.w	r2, r2, #16
 80033b2:	6013      	str	r3, [r2, #0]


 play_sample[i_total]=(filter_Accu>>6)+1023;   // final output disable for now
 80033b4:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80033b8:	f103 0310 	add.w	r3, r3, #16
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	119b      	asrs	r3, r3, #6
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80033c6:	f103 031e 	add.w	r3, r3, #30
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80033d0:	b291      	uxth	r1, r2
 80033d2:	4a0c      	ldr	r2, [pc, #48]	; (8003404 <sampling+0x123c>)
 80033d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out
 80033d8:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <sampling+0x1240>)
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	3301      	adds	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	4b09      	ldr	r3, [pc, #36]	; (8003408 <sampling+0x1240>)
 80033e2:	801a      	strh	r2, [r3, #0]
 80033e4:	4b08      	ldr	r3, [pc, #32]	; (8003408 <sampling+0x1240>)
 80033e6:	881b      	ldrh	r3, [r3, #0]
 80033e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ec:	f4ff adc2 	bcc.w	8002f74 <sampling+0xdac>


} // end of filer


bank_write=0;
 80033f0:	4b06      	ldr	r3, [pc, #24]	; (800340c <sampling+0x1244>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	801a      	strh	r2, [r3, #0]
}
 80033f6:	bf00      	nop
 80033f8:	f507 5785 	add.w	r7, r7, #4256	; 0x10a0
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bdb0      	pop	{r4, r5, r7, pc}
 8003400:	ffff0001 	.word	0xffff0001
 8003404:	20000c80 	.word	0x20000c80
 8003408:	20000c7c 	.word	0x20000c7c
 800340c:	200001d6 	.word	0x200001d6

08003410 <sine_count>:
mask_result=mask_tempB &1;


}

void sine_count(void) {         // sine_out is the output 9  bit  , works
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
int32_t sine_tempA;
int32_t sine_tempB;
int8_t sine_frac;


sine_counter=(sine_counterB>>5);  // up countr controlled by counter
 8003416:	4b2f      	ldr	r3, [pc, #188]	; (80034d4 <sine_count+0xc4>)
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	095b      	lsrs	r3, r3, #5
 800341c:	b29a      	uxth	r2, r3
 800341e:	4b2e      	ldr	r3, [pc, #184]	; (80034d8 <sine_count+0xc8>)
 8003420:	801a      	strh	r2, [r3, #0]
sine_frac=sine_counterB & 31;  // grab last 5 bits, actual position for linear interpol,fractional
 8003422:	4b2c      	ldr	r3, [pc, #176]	; (80034d4 <sine_count+0xc4>)
 8003424:	881b      	ldrh	r3, [r3, #0]
 8003426:	b25b      	sxtb	r3, r3
 8003428:	f003 031f 	and.w	r3, r3, #31
 800342c:	73fb      	strb	r3, [r7, #15]

	if (sine_counter>sine_length) sine_counter = sine_length;		// seems to be faster than using a for loop to calculate both values
 800342e:	4b2a      	ldr	r3, [pc, #168]	; (80034d8 <sine_count+0xc8>)
 8003430:	881a      	ldrh	r2, [r3, #0]
 8003432:	4b2a      	ldr	r3, [pc, #168]	; (80034dc <sine_count+0xcc>)
 8003434:	881b      	ldrh	r3, [r3, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d903      	bls.n	8003442 <sine_count+0x32>
 800343a:	4b28      	ldr	r3, [pc, #160]	; (80034dc <sine_count+0xcc>)
 800343c:	881a      	ldrh	r2, [r3, #0]
 800343e:	4b26      	ldr	r3, [pc, #152]	; (80034d8 <sine_count+0xc8>)
 8003440:	801a      	strh	r2, [r3, #0]

	sine_out = sine_block[sine_counter];  // 0- 40000
 8003442:	4b25      	ldr	r3, [pc, #148]	; (80034d8 <sine_count+0xc8>)
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	461a      	mov	r2, r3
 8003448:	4b25      	ldr	r3, [pc, #148]	; (80034e0 <sine_count+0xd0>)
 800344a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800344e:	461a      	mov	r2, r3
 8003450:	4b24      	ldr	r3, [pc, #144]	; (80034e4 <sine_count+0xd4>)
 8003452:	601a      	str	r2, [r3, #0]
	sine_tempA=sine_out; // grab first value , needs to be always plus
 8003454:	4b23      	ldr	r3, [pc, #140]	; (80034e4 <sine_count+0xd4>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60bb      	str	r3, [r7, #8]
	sine_tempA=sine_tempA-20000; //convert to signed
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 8003460:	3b20      	subs	r3, #32
 8003462:	60bb      	str	r3, [r7, #8]

	sine_counter++;
 8003464:	4b1c      	ldr	r3, [pc, #112]	; (80034d8 <sine_count+0xc8>)
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	3301      	adds	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	4b1a      	ldr	r3, [pc, #104]	; (80034d8 <sine_count+0xc8>)
 800346e:	801a      	strh	r2, [r3, #0]
	if (sine_counter>=sine_length)  sine_counter=0; // set to sample length
 8003470:	4b19      	ldr	r3, [pc, #100]	; (80034d8 <sine_count+0xc8>)
 8003472:	881a      	ldrh	r2, [r3, #0]
 8003474:	4b19      	ldr	r3, [pc, #100]	; (80034dc <sine_count+0xcc>)
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	429a      	cmp	r2, r3
 800347a:	d302      	bcc.n	8003482 <sine_count+0x72>
 800347c:	4b16      	ldr	r3, [pc, #88]	; (80034d8 <sine_count+0xc8>)
 800347e:	2200      	movs	r2, #0
 8003480:	801a      	strh	r2, [r3, #0]

			sine_out = sine_block[sine_counter];  // grab second value
 8003482:	4b15      	ldr	r3, [pc, #84]	; (80034d8 <sine_count+0xc8>)
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	461a      	mov	r2, r3
 8003488:	4b15      	ldr	r3, [pc, #84]	; (80034e0 <sine_count+0xd0>)
 800348a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800348e:	461a      	mov	r2, r3
 8003490:	4b14      	ldr	r3, [pc, #80]	; (80034e4 <sine_count+0xd4>)
 8003492:	601a      	str	r2, [r3, #0]
		
		sine_tempB=sine_out; // grab first value
 8003494:	4b13      	ldr	r3, [pc, #76]	; (80034e4 <sine_count+0xd4>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	607b      	str	r3, [r7, #4]
			sine_tempB=sine_tempB-20000;  // convert to signed and +256 to -256
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 80034a0:	3b20      	subs	r3, #32
 80034a2:	607b      	str	r3, [r7, #4]

			sine_tempB=	sine_tempB-sine_tempA;   // calculate fraction then add
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	607b      	str	r3, [r7, #4]
			sine_tempB=sine_tempB>>5; // div 32 or 32 upsample
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	115b      	asrs	r3, r3, #5
 80034b0:	607b      	str	r3, [r7, #4]

			sine_tempB=sine_tempB*sine_frac; // mult by steps , can overshoot !!
 80034b2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	fb02 f303 	mul.w	r3, r2, r3
 80034bc:	607b      	str	r3, [r7, #4]

			sine_out=(sine_tempA+sine_tempB);   // add back to start value
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4413      	add	r3, r2
 80034c4:	4a07      	ldr	r2, [pc, #28]	; (80034e4 <sine_count+0xd4>)
 80034c6:	6013      	str	r3, [r2, #0]
			//sine_tempA=sine_tempA; //needs

			//sine_out=sine_tempA;


}
 80034c8:	bf00      	nop
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	20000c2c 	.word	0x20000c2c
 80034d8:	20000c2a 	.word	0x20000c2a
 80034dc:	20000166 	.word	0x20000166
 80034e0:	08009654 	.word	0x08009654
 80034e4:	20000c30 	.word	0x20000c30

080034e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034ec:	b672      	cpsid	i
}
 80034ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80034f0:	e7fe      	b.n	80034f0 <Error_Handler+0x8>
	...

080034f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	607b      	str	r3, [r7, #4]
 80034fe:	4b10      	ldr	r3, [pc, #64]	; (8003540 <HAL_MspInit+0x4c>)
 8003500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003502:	4a0f      	ldr	r2, [pc, #60]	; (8003540 <HAL_MspInit+0x4c>)
 8003504:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003508:	6453      	str	r3, [r2, #68]	; 0x44
 800350a:	4b0d      	ldr	r3, [pc, #52]	; (8003540 <HAL_MspInit+0x4c>)
 800350c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003512:	607b      	str	r3, [r7, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	603b      	str	r3, [r7, #0]
 800351a:	4b09      	ldr	r3, [pc, #36]	; (8003540 <HAL_MspInit+0x4c>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	4a08      	ldr	r2, [pc, #32]	; (8003540 <HAL_MspInit+0x4c>)
 8003520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003524:	6413      	str	r3, [r2, #64]	; 0x40
 8003526:	4b06      	ldr	r3, [pc, #24]	; (8003540 <HAL_MspInit+0x4c>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	40023800 	.word	0x40023800

08003544 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b08a      	sub	sp, #40	; 0x28
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800354c:	f107 0314 	add.w	r3, r7, #20
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	605a      	str	r2, [r3, #4]
 8003556:	609a      	str	r2, [r3, #8]
 8003558:	60da      	str	r2, [r3, #12]
 800355a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a3c      	ldr	r2, [pc, #240]	; (8003654 <HAL_ADC_MspInit+0x110>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d171      	bne.n	800364a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003566:	2300      	movs	r3, #0
 8003568:	613b      	str	r3, [r7, #16]
 800356a:	4b3b      	ldr	r3, [pc, #236]	; (8003658 <HAL_ADC_MspInit+0x114>)
 800356c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356e:	4a3a      	ldr	r2, [pc, #232]	; (8003658 <HAL_ADC_MspInit+0x114>)
 8003570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003574:	6453      	str	r3, [r2, #68]	; 0x44
 8003576:	4b38      	ldr	r3, [pc, #224]	; (8003658 <HAL_ADC_MspInit+0x114>)
 8003578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357e:	613b      	str	r3, [r7, #16]
 8003580:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	4b34      	ldr	r3, [pc, #208]	; (8003658 <HAL_ADC_MspInit+0x114>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	4a33      	ldr	r2, [pc, #204]	; (8003658 <HAL_ADC_MspInit+0x114>)
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	6313      	str	r3, [r2, #48]	; 0x30
 8003592:	4b31      	ldr	r3, [pc, #196]	; (8003658 <HAL_ADC_MspInit+0x114>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	60bb      	str	r3, [r7, #8]
 80035a2:	4b2d      	ldr	r3, [pc, #180]	; (8003658 <HAL_ADC_MspInit+0x114>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	4a2c      	ldr	r2, [pc, #176]	; (8003658 <HAL_ADC_MspInit+0x114>)
 80035a8:	f043 0302 	orr.w	r3, r3, #2
 80035ac:	6313      	str	r3, [r2, #48]	; 0x30
 80035ae:	4b2a      	ldr	r3, [pc, #168]	; (8003658 <HAL_ADC_MspInit+0x114>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	60bb      	str	r3, [r7, #8]
 80035b8:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA5     ------> ADC1_IN5
    PB1     ------> ADC1_IN9
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4;
 80035ba:	2378      	movs	r3, #120	; 0x78
 80035bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035be:	2303      	movs	r3, #3
 80035c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c6:	f107 0314 	add.w	r3, r7, #20
 80035ca:	4619      	mov	r1, r3
 80035cc:	4823      	ldr	r0, [pc, #140]	; (800365c <HAL_ADC_MspInit+0x118>)
 80035ce:	f001 fca1 	bl	8004f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80035d2:	2302      	movs	r3, #2
 80035d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035d6:	2303      	movs	r3, #3
 80035d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035de:	f107 0314 	add.w	r3, r7, #20
 80035e2:	4619      	mov	r1, r3
 80035e4:	481e      	ldr	r0, [pc, #120]	; (8003660 <HAL_ADC_MspInit+0x11c>)
 80035e6:	f001 fc95 	bl	8004f14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80035ea:	4b1e      	ldr	r3, [pc, #120]	; (8003664 <HAL_ADC_MspInit+0x120>)
 80035ec:	4a1e      	ldr	r2, [pc, #120]	; (8003668 <HAL_ADC_MspInit+0x124>)
 80035ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80035f0:	4b1c      	ldr	r3, [pc, #112]	; (8003664 <HAL_ADC_MspInit+0x120>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035f6:	4b1b      	ldr	r3, [pc, #108]	; (8003664 <HAL_ADC_MspInit+0x120>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80035fc:	4b19      	ldr	r3, [pc, #100]	; (8003664 <HAL_ADC_MspInit+0x120>)
 80035fe:	2200      	movs	r2, #0
 8003600:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003602:	4b18      	ldr	r3, [pc, #96]	; (8003664 <HAL_ADC_MspInit+0x120>)
 8003604:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003608:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800360a:	4b16      	ldr	r3, [pc, #88]	; (8003664 <HAL_ADC_MspInit+0x120>)
 800360c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003610:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003612:	4b14      	ldr	r3, [pc, #80]	; (8003664 <HAL_ADC_MspInit+0x120>)
 8003614:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003618:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800361a:	4b12      	ldr	r3, [pc, #72]	; (8003664 <HAL_ADC_MspInit+0x120>)
 800361c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003620:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003622:	4b10      	ldr	r3, [pc, #64]	; (8003664 <HAL_ADC_MspInit+0x120>)
 8003624:	2200      	movs	r2, #0
 8003626:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003628:	4b0e      	ldr	r3, [pc, #56]	; (8003664 <HAL_ADC_MspInit+0x120>)
 800362a:	2200      	movs	r2, #0
 800362c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800362e:	480d      	ldr	r0, [pc, #52]	; (8003664 <HAL_ADC_MspInit+0x120>)
 8003630:	f001 f900 	bl	8004834 <HAL_DMA_Init>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800363a:	f7ff ff55 	bl	80034e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a08      	ldr	r2, [pc, #32]	; (8003664 <HAL_ADC_MspInit+0x120>)
 8003642:	639a      	str	r2, [r3, #56]	; 0x38
 8003644:	4a07      	ldr	r2, [pc, #28]	; (8003664 <HAL_ADC_MspInit+0x120>)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800364a:	bf00      	nop
 800364c:	3728      	adds	r7, #40	; 0x28
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40012000 	.word	0x40012000
 8003658:	40023800 	.word	0x40023800
 800365c:	40020000 	.word	0x40020000
 8003660:	40020400 	.word	0x40020400
 8003664:	200006d0 	.word	0x200006d0
 8003668:	40026470 	.word	0x40026470

0800366c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b08a      	sub	sp, #40	; 0x28
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003674:	f107 0314 	add.w	r3, r7, #20
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	605a      	str	r2, [r3, #4]
 800367e:	609a      	str	r2, [r3, #8]
 8003680:	60da      	str	r2, [r3, #12]
 8003682:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a22      	ldr	r2, [pc, #136]	; (8003714 <HAL_I2C_MspInit+0xa8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d13d      	bne.n	800370a <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800368e:	2300      	movs	r3, #0
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	4b21      	ldr	r3, [pc, #132]	; (8003718 <HAL_I2C_MspInit+0xac>)
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	4a20      	ldr	r2, [pc, #128]	; (8003718 <HAL_I2C_MspInit+0xac>)
 8003698:	f043 0302 	orr.w	r3, r3, #2
 800369c:	6313      	str	r3, [r2, #48]	; 0x30
 800369e:	4b1e      	ldr	r3, [pc, #120]	; (8003718 <HAL_I2C_MspInit+0xac>)
 80036a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	613b      	str	r3, [r7, #16]
 80036a8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB9     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80036aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036b0:	2312      	movs	r3, #18
 80036b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b4:	2300      	movs	r3, #0
 80036b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b8:	2303      	movs	r3, #3
 80036ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80036bc:	2309      	movs	r3, #9
 80036be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036c0:	f107 0314 	add.w	r3, r7, #20
 80036c4:	4619      	mov	r1, r3
 80036c6:	4815      	ldr	r0, [pc, #84]	; (800371c <HAL_I2C_MspInit+0xb0>)
 80036c8:	f001 fc24 	bl	8004f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80036cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036d2:	2312      	movs	r3, #18
 80036d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036da:	2303      	movs	r3, #3
 80036dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80036de:	2304      	movs	r3, #4
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036e2:	f107 0314 	add.w	r3, r7, #20
 80036e6:	4619      	mov	r1, r3
 80036e8:	480c      	ldr	r0, [pc, #48]	; (800371c <HAL_I2C_MspInit+0xb0>)
 80036ea:	f001 fc13 	bl	8004f14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80036ee:	2300      	movs	r3, #0
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	4b09      	ldr	r3, [pc, #36]	; (8003718 <HAL_I2C_MspInit+0xac>)
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	4a08      	ldr	r2, [pc, #32]	; (8003718 <HAL_I2C_MspInit+0xac>)
 80036f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036fc:	6413      	str	r3, [r2, #64]	; 0x40
 80036fe:	4b06      	ldr	r3, [pc, #24]	; (8003718 <HAL_I2C_MspInit+0xac>)
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800370a:	bf00      	nop
 800370c:	3728      	adds	r7, #40	; 0x28
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40005800 	.word	0x40005800
 8003718:	40023800 	.word	0x40023800
 800371c:	40020400 	.word	0x40020400

08003720 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08a      	sub	sp, #40	; 0x28
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003728:	f107 0314 	add.w	r3, r7, #20
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	605a      	str	r2, [r3, #4]
 8003732:	609a      	str	r2, [r3, #8]
 8003734:	60da      	str	r2, [r3, #12]
 8003736:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a19      	ldr	r2, [pc, #100]	; (80037a4 <HAL_SPI_MspInit+0x84>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d12c      	bne.n	800379c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	613b      	str	r3, [r7, #16]
 8003746:	4b18      	ldr	r3, [pc, #96]	; (80037a8 <HAL_SPI_MspInit+0x88>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	4a17      	ldr	r2, [pc, #92]	; (80037a8 <HAL_SPI_MspInit+0x88>)
 800374c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003750:	6413      	str	r3, [r2, #64]	; 0x40
 8003752:	4b15      	ldr	r3, [pc, #84]	; (80037a8 <HAL_SPI_MspInit+0x88>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800375a:	613b      	str	r3, [r7, #16]
 800375c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <HAL_SPI_MspInit+0x88>)
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	4a10      	ldr	r2, [pc, #64]	; (80037a8 <HAL_SPI_MspInit+0x88>)
 8003768:	f043 0302 	orr.w	r3, r3, #2
 800376c:	6313      	str	r3, [r2, #48]	; 0x30
 800376e:	4b0e      	ldr	r3, [pc, #56]	; (80037a8 <HAL_SPI_MspInit+0x88>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB15     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 800377a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800377e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003780:	2302      	movs	r3, #2
 8003782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003784:	2300      	movs	r3, #0
 8003786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003788:	2303      	movs	r3, #3
 800378a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800378c:	2305      	movs	r3, #5
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003790:	f107 0314 	add.w	r3, r7, #20
 8003794:	4619      	mov	r1, r3
 8003796:	4805      	ldr	r0, [pc, #20]	; (80037ac <HAL_SPI_MspInit+0x8c>)
 8003798:	f001 fbbc 	bl	8004f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800379c:	bf00      	nop
 800379e:	3728      	adds	r7, #40	; 0x28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40003800 	.word	0x40003800
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40020400 	.word	0x40020400

080037b0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08c      	sub	sp, #48	; 0x30
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b8:	f107 031c 	add.w	r3, r7, #28
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	605a      	str	r2, [r3, #4]
 80037c2:	609a      	str	r2, [r3, #8]
 80037c4:	60da      	str	r2, [r3, #12]
 80037c6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d0:	d12d      	bne.n	800382e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037d2:	2300      	movs	r3, #0
 80037d4:	61bb      	str	r3, [r7, #24]
 80037d6:	4b30      	ldr	r3, [pc, #192]	; (8003898 <HAL_TIM_Encoder_MspInit+0xe8>)
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	4a2f      	ldr	r2, [pc, #188]	; (8003898 <HAL_TIM_Encoder_MspInit+0xe8>)
 80037dc:	f043 0301 	orr.w	r3, r3, #1
 80037e0:	6413      	str	r3, [r2, #64]	; 0x40
 80037e2:	4b2d      	ldr	r3, [pc, #180]	; (8003898 <HAL_TIM_Encoder_MspInit+0xe8>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	61bb      	str	r3, [r7, #24]
 80037ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	617b      	str	r3, [r7, #20]
 80037f2:	4b29      	ldr	r3, [pc, #164]	; (8003898 <HAL_TIM_Encoder_MspInit+0xe8>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	4a28      	ldr	r2, [pc, #160]	; (8003898 <HAL_TIM_Encoder_MspInit+0xe8>)
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	6313      	str	r3, [r2, #48]	; 0x30
 80037fe:	4b26      	ldr	r3, [pc, #152]	; (8003898 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 800380a:	f248 0302 	movw	r3, #32770	; 0x8002
 800380e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003810:	2302      	movs	r3, #2
 8003812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003814:	2301      	movs	r3, #1
 8003816:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003818:	2300      	movs	r3, #0
 800381a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800381c:	2301      	movs	r3, #1
 800381e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003820:	f107 031c 	add.w	r3, r7, #28
 8003824:	4619      	mov	r1, r3
 8003826:	481d      	ldr	r0, [pc, #116]	; (800389c <HAL_TIM_Encoder_MspInit+0xec>)
 8003828:	f001 fb74 	bl	8004f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800382c:	e030      	b.n	8003890 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a1b      	ldr	r2, [pc, #108]	; (80038a0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d12b      	bne.n	8003890 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003838:	2300      	movs	r3, #0
 800383a:	613b      	str	r3, [r7, #16]
 800383c:	4b16      	ldr	r3, [pc, #88]	; (8003898 <HAL_TIM_Encoder_MspInit+0xe8>)
 800383e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003840:	4a15      	ldr	r2, [pc, #84]	; (8003898 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003842:	f043 0304 	orr.w	r3, r3, #4
 8003846:	6413      	str	r3, [r2, #64]	; 0x40
 8003848:	4b13      	ldr	r3, [pc, #76]	; (8003898 <HAL_TIM_Encoder_MspInit+0xe8>)
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	613b      	str	r3, [r7, #16]
 8003852:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003854:	2300      	movs	r3, #0
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	4b0f      	ldr	r3, [pc, #60]	; (8003898 <HAL_TIM_Encoder_MspInit+0xe8>)
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385c:	4a0e      	ldr	r2, [pc, #56]	; (8003898 <HAL_TIM_Encoder_MspInit+0xe8>)
 800385e:	f043 0302 	orr.w	r3, r3, #2
 8003862:	6313      	str	r3, [r2, #48]	; 0x30
 8003864:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003870:	23c0      	movs	r3, #192	; 0xc0
 8003872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003874:	2302      	movs	r3, #2
 8003876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003878:	2301      	movs	r3, #1
 800387a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800387c:	2300      	movs	r3, #0
 800387e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003880:	2302      	movs	r3, #2
 8003882:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003884:	f107 031c 	add.w	r3, r7, #28
 8003888:	4619      	mov	r1, r3
 800388a:	4806      	ldr	r0, [pc, #24]	; (80038a4 <HAL_TIM_Encoder_MspInit+0xf4>)
 800388c:	f001 fb42 	bl	8004f14 <HAL_GPIO_Init>
}
 8003890:	bf00      	nop
 8003892:	3730      	adds	r7, #48	; 0x30
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40023800 	.word	0x40023800
 800389c:	40020000 	.word	0x40020000
 80038a0:	40000800 	.word	0x40000800
 80038a4:	40020400 	.word	0x40020400

080038a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a0e      	ldr	r2, [pc, #56]	; (80038f0 <HAL_TIM_Base_MspInit+0x48>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d115      	bne.n	80038e6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80038ba:	2300      	movs	r3, #0
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	4b0d      	ldr	r3, [pc, #52]	; (80038f4 <HAL_TIM_Base_MspInit+0x4c>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	4a0c      	ldr	r2, [pc, #48]	; (80038f4 <HAL_TIM_Base_MspInit+0x4c>)
 80038c4:	f043 0302 	orr.w	r3, r3, #2
 80038c8:	6413      	str	r3, [r2, #64]	; 0x40
 80038ca:	4b0a      	ldr	r3, [pc, #40]	; (80038f4 <HAL_TIM_Base_MspInit+0x4c>)
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80038d6:	2200      	movs	r2, #0
 80038d8:	2100      	movs	r1, #0
 80038da:	201d      	movs	r0, #29
 80038dc:	f000 ff73 	bl	80047c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80038e0:	201d      	movs	r0, #29
 80038e2:	f000 ff8c 	bl	80047fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80038e6:	bf00      	nop
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40000400 	.word	0x40000400
 80038f4:	40023800 	.word	0x40023800

080038f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003900:	f107 030c 	add.w	r3, r7, #12
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	609a      	str	r2, [r3, #8]
 800390c:	60da      	str	r2, [r3, #12]
 800390e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a12      	ldr	r2, [pc, #72]	; (8003960 <HAL_TIM_MspPostInit+0x68>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d11d      	bne.n	8003956 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	60bb      	str	r3, [r7, #8]
 800391e:	4b11      	ldr	r3, [pc, #68]	; (8003964 <HAL_TIM_MspPostInit+0x6c>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	4a10      	ldr	r2, [pc, #64]	; (8003964 <HAL_TIM_MspPostInit+0x6c>)
 8003924:	f043 0302 	orr.w	r3, r3, #2
 8003928:	6313      	str	r3, [r2, #48]	; 0x30
 800392a:	4b0e      	ldr	r3, [pc, #56]	; (8003964 <HAL_TIM_MspPostInit+0x6c>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	60bb      	str	r3, [r7, #8]
 8003934:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003936:	2301      	movs	r3, #1
 8003938:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800393a:	2302      	movs	r3, #2
 800393c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393e:	2300      	movs	r3, #0
 8003940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003942:	2300      	movs	r3, #0
 8003944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003946:	2302      	movs	r3, #2
 8003948:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800394a:	f107 030c 	add.w	r3, r7, #12
 800394e:	4619      	mov	r1, r3
 8003950:	4805      	ldr	r0, [pc, #20]	; (8003968 <HAL_TIM_MspPostInit+0x70>)
 8003952:	f001 fadf 	bl	8004f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003956:	bf00      	nop
 8003958:	3720      	adds	r7, #32
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40000400 	.word	0x40000400
 8003964:	40023800 	.word	0x40023800
 8003968:	40020400 	.word	0x40020400

0800396c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003970:	e7fe      	b.n	8003970 <NMI_Handler+0x4>

08003972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003972:	b480      	push	{r7}
 8003974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003976:	e7fe      	b.n	8003976 <HardFault_Handler+0x4>

08003978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800397c:	e7fe      	b.n	800397c <MemManage_Handler+0x4>

0800397e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800397e:	b480      	push	{r7}
 8003980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003982:	e7fe      	b.n	8003982 <BusFault_Handler+0x4>

08003984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003988:	e7fe      	b.n	8003988 <UsageFault_Handler+0x4>

0800398a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800398a:	b480      	push	{r7}
 800398c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800398e:	bf00      	nop
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800399c:	bf00      	nop
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039a6:	b480      	push	{r7}
 80039a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039aa:	bf00      	nop
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039b8:	f000 f930 	bl	8003c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039bc:	bf00      	nop
 80039be:	bd80      	pop	{r7, pc}

080039c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80039c4:	4802      	ldr	r0, [pc, #8]	; (80039d0 <TIM3_IRQHandler+0x10>)
 80039c6:	f003 fd93 	bl	80074f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80039ca:	bf00      	nop
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20000824 	.word	0x20000824

080039d4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80039d8:	4802      	ldr	r0, [pc, #8]	; (80039e4 <DMA2_Stream4_IRQHandler+0x10>)
 80039da:	f001 f831 	bl	8004a40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80039de:	bf00      	nop
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	200006d0 	.word	0x200006d0

080039e8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	e00a      	b.n	8003a10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80039fa:	f3af 8000 	nop.w
 80039fe:	4601      	mov	r1, r0
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	60ba      	str	r2, [r7, #8]
 8003a06:	b2ca      	uxtb	r2, r1
 8003a08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	dbf0      	blt.n	80039fa <_read+0x12>
	}

return len;
 8003a18:	687b      	ldr	r3, [r7, #4]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
	return -1;
 8003a2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
 8003a42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a4a:	605a      	str	r2, [r3, #4]
	return 0;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <_isatty>:

int _isatty(int file)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
	return 1;
 8003a62:	2301      	movs	r3, #1
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
	return 0;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
	...

08003a8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a94:	4a14      	ldr	r2, [pc, #80]	; (8003ae8 <_sbrk+0x5c>)
 8003a96:	4b15      	ldr	r3, [pc, #84]	; (8003aec <_sbrk+0x60>)
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003aa0:	4b13      	ldr	r3, [pc, #76]	; (8003af0 <_sbrk+0x64>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d102      	bne.n	8003aae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003aa8:	4b11      	ldr	r3, [pc, #68]	; (8003af0 <_sbrk+0x64>)
 8003aaa:	4a12      	ldr	r2, [pc, #72]	; (8003af4 <_sbrk+0x68>)
 8003aac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003aae:	4b10      	ldr	r3, [pc, #64]	; (8003af0 <_sbrk+0x64>)
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d207      	bcs.n	8003acc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003abc:	f004 fb64 	bl	8008188 <__errno>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	220c      	movs	r2, #12
 8003ac4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aca:	e009      	b.n	8003ae0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003acc:	4b08      	ldr	r3, [pc, #32]	; (8003af0 <_sbrk+0x64>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ad2:	4b07      	ldr	r3, [pc, #28]	; (8003af0 <_sbrk+0x64>)
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4413      	add	r3, r2
 8003ada:	4a05      	ldr	r2, [pc, #20]	; (8003af0 <_sbrk+0x64>)
 8003adc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ade:	68fb      	ldr	r3, [r7, #12]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20020000 	.word	0x20020000
 8003aec:	00000400 	.word	0x00000400
 8003af0:	2000224c 	.word	0x2000224c
 8003af4:	20002268 	.word	0x20002268

08003af8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003afc:	4b08      	ldr	r3, [pc, #32]	; (8003b20 <SystemInit+0x28>)
 8003afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b02:	4a07      	ldr	r2, [pc, #28]	; (8003b20 <SystemInit+0x28>)
 8003b04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b0c:	4b04      	ldr	r3, [pc, #16]	; (8003b20 <SystemInit+0x28>)
 8003b0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b12:	609a      	str	r2, [r3, #8]
#endif
}
 8003b14:	bf00      	nop
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	e000ed00 	.word	0xe000ed00

08003b24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b5c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003b28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003b2a:	e003      	b.n	8003b34 <LoopCopyDataInit>

08003b2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003b2c:	4b0c      	ldr	r3, [pc, #48]	; (8003b60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003b2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003b30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003b32:	3104      	adds	r1, #4

08003b34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003b34:	480b      	ldr	r0, [pc, #44]	; (8003b64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003b36:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003b38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003b3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003b3c:	d3f6      	bcc.n	8003b2c <CopyDataInit>
  ldr  r2, =_sbss
 8003b3e:	4a0b      	ldr	r2, [pc, #44]	; (8003b6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003b40:	e002      	b.n	8003b48 <LoopFillZerobss>

08003b42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003b42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003b44:	f842 3b04 	str.w	r3, [r2], #4

08003b48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003b48:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003b4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003b4c:	d3f9      	bcc.n	8003b42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003b4e:	f7ff ffd3 	bl	8003af8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b52:	f004 fb1f 	bl	8008194 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b56:	f7fd f88f 	bl	8000c78 <main>
  bx  lr    
 8003b5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b5c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003b60:	0800a3d4 	.word	0x0800a3d4
  ldr  r0, =_sdata
 8003b64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003b68:	2000066c 	.word	0x2000066c
  ldr  r2, =_sbss
 8003b6c:	2000066c 	.word	0x2000066c
  ldr  r3, = _ebss
 8003b70:	20002264 	.word	0x20002264

08003b74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b74:	e7fe      	b.n	8003b74 <ADC_IRQHandler>
	...

08003b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b7c:	4b0e      	ldr	r3, [pc, #56]	; (8003bb8 <HAL_Init+0x40>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a0d      	ldr	r2, [pc, #52]	; (8003bb8 <HAL_Init+0x40>)
 8003b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b88:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <HAL_Init+0x40>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a0a      	ldr	r2, [pc, #40]	; (8003bb8 <HAL_Init+0x40>)
 8003b8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b94:	4b08      	ldr	r3, [pc, #32]	; (8003bb8 <HAL_Init+0x40>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a07      	ldr	r2, [pc, #28]	; (8003bb8 <HAL_Init+0x40>)
 8003b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ba0:	2003      	movs	r0, #3
 8003ba2:	f000 fe05 	bl	80047b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ba6:	2000      	movs	r0, #0
 8003ba8:	f000 f808 	bl	8003bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bac:	f7ff fca2 	bl	80034f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40023c00 	.word	0x40023c00

08003bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bc4:	4b12      	ldr	r3, [pc, #72]	; (8003c10 <HAL_InitTick+0x54>)
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	4b12      	ldr	r3, [pc, #72]	; (8003c14 <HAL_InitTick+0x58>)
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	4619      	mov	r1, r3
 8003bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 fe1d 	bl	800481a <HAL_SYSTICK_Config>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e00e      	b.n	8003c08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b0f      	cmp	r3, #15
 8003bee:	d80a      	bhi.n	8003c06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf8:	f000 fde5 	bl	80047c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bfc:	4a06      	ldr	r2, [pc, #24]	; (8003c18 <HAL_InitTick+0x5c>)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
 8003c04:	e000      	b.n	8003c08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	200005fc 	.word	0x200005fc
 8003c14:	20000604 	.word	0x20000604
 8003c18:	20000600 	.word	0x20000600

08003c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c20:	4b06      	ldr	r3, [pc, #24]	; (8003c3c <HAL_IncTick+0x20>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	461a      	mov	r2, r3
 8003c26:	4b06      	ldr	r3, [pc, #24]	; (8003c40 <HAL_IncTick+0x24>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	4a04      	ldr	r2, [pc, #16]	; (8003c40 <HAL_IncTick+0x24>)
 8003c2e:	6013      	str	r3, [r2, #0]
}
 8003c30:	bf00      	nop
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	20000604 	.word	0x20000604
 8003c40:	20002250 	.word	0x20002250

08003c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  return uwTick;
 8003c48:	4b03      	ldr	r3, [pc, #12]	; (8003c58 <HAL_GetTick+0x14>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	20002250 	.word	0x20002250

08003c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c64:	f7ff ffee 	bl	8003c44 <HAL_GetTick>
 8003c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c74:	d005      	beq.n	8003c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c76:	4b0a      	ldr	r3, [pc, #40]	; (8003ca0 <HAL_Delay+0x44>)
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4413      	add	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c82:	bf00      	nop
 8003c84:	f7ff ffde 	bl	8003c44 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d8f7      	bhi.n	8003c84 <HAL_Delay+0x28>
  {
  }
}
 8003c94:	bf00      	nop
 8003c96:	bf00      	nop
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20000604 	.word	0x20000604

08003ca4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e033      	b.n	8003d22 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d109      	bne.n	8003cd6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7ff fc3e 	bl	8003544 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	f003 0310 	and.w	r3, r3, #16
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d118      	bne.n	8003d14 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003cea:	f023 0302 	bic.w	r3, r3, #2
 8003cee:	f043 0202 	orr.w	r2, r3, #2
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 fb0c 	bl	8004314 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	f023 0303 	bic.w	r3, r3, #3
 8003d0a:	f043 0201 	orr.w	r2, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	641a      	str	r2, [r3, #64]	; 0x40
 8003d12:	e001      	b.n	8003d18 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
	...

08003d2c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d101      	bne.n	8003d46 <HAL_ADC_Start+0x1a>
 8003d42:	2302      	movs	r3, #2
 8003d44:	e097      	b.n	8003e76 <HAL_ADC_Start+0x14a>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d018      	beq.n	8003d8e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003d6c:	4b45      	ldr	r3, [pc, #276]	; (8003e84 <HAL_ADC_Start+0x158>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a45      	ldr	r2, [pc, #276]	; (8003e88 <HAL_ADC_Start+0x15c>)
 8003d72:	fba2 2303 	umull	r2, r3, r2, r3
 8003d76:	0c9a      	lsrs	r2, r3, #18
 8003d78:	4613      	mov	r3, r2
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	4413      	add	r3, r2
 8003d7e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003d80:	e002      	b.n	8003d88 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	3b01      	subs	r3, #1
 8003d86:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f9      	bne.n	8003d82 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d15f      	bne.n	8003e5c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003da4:	f023 0301 	bic.w	r3, r3, #1
 8003da8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d007      	beq.n	8003dce <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003dc6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dda:	d106      	bne.n	8003dea <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de0:	f023 0206 	bic.w	r2, r3, #6
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	645a      	str	r2, [r3, #68]	; 0x44
 8003de8:	e002      	b.n	8003df0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003df8:	4b24      	ldr	r3, [pc, #144]	; (8003e8c <HAL_ADC_Start+0x160>)
 8003dfa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003e04:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f003 031f 	and.w	r3, r3, #31
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10f      	bne.n	8003e32 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d129      	bne.n	8003e74 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e2e:	609a      	str	r2, [r3, #8]
 8003e30:	e020      	b.n	8003e74 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a16      	ldr	r2, [pc, #88]	; (8003e90 <HAL_ADC_Start+0x164>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d11b      	bne.n	8003e74 <HAL_ADC_Start+0x148>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d114      	bne.n	8003e74 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e58:	609a      	str	r2, [r3, #8]
 8003e5a:	e00b      	b.n	8003e74 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e60:	f043 0210 	orr.w	r2, r3, #16
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6c:	f043 0201 	orr.w	r2, r3, #1
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	200005fc 	.word	0x200005fc
 8003e88:	431bde83 	.word	0x431bde83
 8003e8c:	40012300 	.word	0x40012300
 8003e90:	40012000 	.word	0x40012000

08003e94 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d101      	bne.n	8003eb2 <HAL_ADC_Start_DMA+0x1e>
 8003eae:	2302      	movs	r3, #2
 8003eb0:	e0ce      	b.n	8004050 <HAL_ADC_Start_DMA+0x1bc>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d018      	beq.n	8003efa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0201 	orr.w	r2, r2, #1
 8003ed6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ed8:	4b5f      	ldr	r3, [pc, #380]	; (8004058 <HAL_ADC_Start_DMA+0x1c4>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a5f      	ldr	r2, [pc, #380]	; (800405c <HAL_ADC_Start_DMA+0x1c8>)
 8003ede:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee2:	0c9a      	lsrs	r2, r3, #18
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	4413      	add	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003eec:	e002      	b.n	8003ef4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f9      	bne.n	8003eee <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f08:	d107      	bne.n	8003f1a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f18:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	f040 8086 	bne.w	8004036 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003f32:	f023 0301 	bic.w	r3, r3, #1
 8003f36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d007      	beq.n	8003f5c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f54:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f68:	d106      	bne.n	8003f78 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6e:	f023 0206 	bic.w	r2, r3, #6
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	645a      	str	r2, [r3, #68]	; 0x44
 8003f76:	e002      	b.n	8003f7e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f86:	4b36      	ldr	r3, [pc, #216]	; (8004060 <HAL_ADC_Start_DMA+0x1cc>)
 8003f88:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8e:	4a35      	ldr	r2, [pc, #212]	; (8004064 <HAL_ADC_Start_DMA+0x1d0>)
 8003f90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f96:	4a34      	ldr	r2, [pc, #208]	; (8004068 <HAL_ADC_Start_DMA+0x1d4>)
 8003f98:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9e:	4a33      	ldr	r2, [pc, #204]	; (800406c <HAL_ADC_Start_DMA+0x1d8>)
 8003fa0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003faa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003fba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689a      	ldr	r2, [r3, #8]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	334c      	adds	r3, #76	; 0x4c
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f000 fcd8 	bl	8004990 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f003 031f 	and.w	r3, r3, #31
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10f      	bne.n	800400c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d129      	bne.n	800404e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004008:	609a      	str	r2, [r3, #8]
 800400a:	e020      	b.n	800404e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a17      	ldr	r2, [pc, #92]	; (8004070 <HAL_ADC_Start_DMA+0x1dc>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d11b      	bne.n	800404e <HAL_ADC_Start_DMA+0x1ba>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d114      	bne.n	800404e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689a      	ldr	r2, [r3, #8]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004032:	609a      	str	r2, [r3, #8]
 8004034:	e00b      	b.n	800404e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	f043 0210 	orr.w	r2, r3, #16
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004046:	f043 0201 	orr.w	r2, r3, #1
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3718      	adds	r7, #24
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	200005fc 	.word	0x200005fc
 800405c:	431bde83 	.word	0x431bde83
 8004060:	40012300 	.word	0x40012300
 8004064:	0800450d 	.word	0x0800450d
 8004068:	080045c7 	.word	0x080045c7
 800406c:	080045e3 	.word	0x080045e3
 8004070:	40012000 	.word	0x40012000

08004074 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d101      	bne.n	80040cc <HAL_ADC_ConfigChannel+0x1c>
 80040c8:	2302      	movs	r3, #2
 80040ca:	e113      	b.n	80042f4 <HAL_ADC_ConfigChannel+0x244>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b09      	cmp	r3, #9
 80040da:	d925      	bls.n	8004128 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68d9      	ldr	r1, [r3, #12]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	461a      	mov	r2, r3
 80040ea:	4613      	mov	r3, r2
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	4413      	add	r3, r2
 80040f0:	3b1e      	subs	r3, #30
 80040f2:	2207      	movs	r2, #7
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	43da      	mvns	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	400a      	ands	r2, r1
 8004100:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68d9      	ldr	r1, [r3, #12]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	b29b      	uxth	r3, r3
 8004112:	4618      	mov	r0, r3
 8004114:	4603      	mov	r3, r0
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	4403      	add	r3, r0
 800411a:	3b1e      	subs	r3, #30
 800411c:	409a      	lsls	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	60da      	str	r2, [r3, #12]
 8004126:	e022      	b.n	800416e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6919      	ldr	r1, [r3, #16]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	b29b      	uxth	r3, r3
 8004134:	461a      	mov	r2, r3
 8004136:	4613      	mov	r3, r2
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	4413      	add	r3, r2
 800413c:	2207      	movs	r2, #7
 800413e:	fa02 f303 	lsl.w	r3, r2, r3
 8004142:	43da      	mvns	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	400a      	ands	r2, r1
 800414a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6919      	ldr	r1, [r3, #16]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	b29b      	uxth	r3, r3
 800415c:	4618      	mov	r0, r3
 800415e:	4603      	mov	r3, r0
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	4403      	add	r3, r0
 8004164:	409a      	lsls	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b06      	cmp	r3, #6
 8004174:	d824      	bhi.n	80041c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	4613      	mov	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	3b05      	subs	r3, #5
 8004188:	221f      	movs	r2, #31
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43da      	mvns	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	400a      	ands	r2, r1
 8004196:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	4618      	mov	r0, r3
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	4613      	mov	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4413      	add	r3, r2
 80041b0:	3b05      	subs	r3, #5
 80041b2:	fa00 f203 	lsl.w	r2, r0, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	635a      	str	r2, [r3, #52]	; 0x34
 80041be:	e04c      	b.n	800425a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2b0c      	cmp	r3, #12
 80041c6:	d824      	bhi.n	8004212 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	4613      	mov	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4413      	add	r3, r2
 80041d8:	3b23      	subs	r3, #35	; 0x23
 80041da:	221f      	movs	r2, #31
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	43da      	mvns	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	400a      	ands	r2, r1
 80041e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	4618      	mov	r0, r3
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	4613      	mov	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	3b23      	subs	r3, #35	; 0x23
 8004204:	fa00 f203 	lsl.w	r2, r0, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	631a      	str	r2, [r3, #48]	; 0x30
 8004210:	e023      	b.n	800425a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	4613      	mov	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	3b41      	subs	r3, #65	; 0x41
 8004224:	221f      	movs	r2, #31
 8004226:	fa02 f303 	lsl.w	r3, r2, r3
 800422a:	43da      	mvns	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	400a      	ands	r2, r1
 8004232:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	b29b      	uxth	r3, r3
 8004240:	4618      	mov	r0, r3
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	4613      	mov	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	3b41      	subs	r3, #65	; 0x41
 800424e:	fa00 f203 	lsl.w	r2, r0, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	430a      	orrs	r2, r1
 8004258:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800425a:	4b29      	ldr	r3, [pc, #164]	; (8004300 <HAL_ADC_ConfigChannel+0x250>)
 800425c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a28      	ldr	r2, [pc, #160]	; (8004304 <HAL_ADC_ConfigChannel+0x254>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d10f      	bne.n	8004288 <HAL_ADC_ConfigChannel+0x1d8>
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b12      	cmp	r3, #18
 800426e:	d10b      	bne.n	8004288 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a1d      	ldr	r2, [pc, #116]	; (8004304 <HAL_ADC_ConfigChannel+0x254>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d12b      	bne.n	80042ea <HAL_ADC_ConfigChannel+0x23a>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a1c      	ldr	r2, [pc, #112]	; (8004308 <HAL_ADC_ConfigChannel+0x258>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d003      	beq.n	80042a4 <HAL_ADC_ConfigChannel+0x1f4>
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b11      	cmp	r3, #17
 80042a2:	d122      	bne.n	80042ea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a11      	ldr	r2, [pc, #68]	; (8004308 <HAL_ADC_ConfigChannel+0x258>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d111      	bne.n	80042ea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80042c6:	4b11      	ldr	r3, [pc, #68]	; (800430c <HAL_ADC_ConfigChannel+0x25c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a11      	ldr	r2, [pc, #68]	; (8004310 <HAL_ADC_ConfigChannel+0x260>)
 80042cc:	fba2 2303 	umull	r2, r3, r2, r3
 80042d0:	0c9a      	lsrs	r2, r3, #18
 80042d2:	4613      	mov	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4413      	add	r3, r2
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80042dc:	e002      	b.n	80042e4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	3b01      	subs	r3, #1
 80042e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f9      	bne.n	80042de <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	40012300 	.word	0x40012300
 8004304:	40012000 	.word	0x40012000
 8004308:	10000012 	.word	0x10000012
 800430c:	200005fc 	.word	0x200005fc
 8004310:	431bde83 	.word	0x431bde83

08004314 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800431c:	4b79      	ldr	r3, [pc, #484]	; (8004504 <ADC_Init+0x1f0>)
 800431e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	431a      	orrs	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004348:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6859      	ldr	r1, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	021a      	lsls	r2, r3, #8
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800436c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6859      	ldr	r1, [r3, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	430a      	orrs	r2, r1
 800437e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689a      	ldr	r2, [r3, #8]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800438e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6899      	ldr	r1, [r3, #8]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a6:	4a58      	ldr	r2, [pc, #352]	; (8004508 <ADC_Init+0x1f4>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d022      	beq.n	80043f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6899      	ldr	r1, [r3, #8]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6899      	ldr	r1, [r3, #8]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	609a      	str	r2, [r3, #8]
 80043f0:	e00f      	b.n	8004412 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004400:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004410:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0202 	bic.w	r2, r2, #2
 8004420:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6899      	ldr	r1, [r3, #8]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	7e1b      	ldrb	r3, [r3, #24]
 800442c:	005a      	lsls	r2, r3, #1
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 3020 	ldrb.w	r3, [r3, #32]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d01b      	beq.n	8004478 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800444e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800445e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6859      	ldr	r1, [r3, #4]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	3b01      	subs	r3, #1
 800446c:	035a      	lsls	r2, r3, #13
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	605a      	str	r2, [r3, #4]
 8004476:	e007      	b.n	8004488 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004486:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004496:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	3b01      	subs	r3, #1
 80044a4:	051a      	lsls	r2, r3, #20
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80044bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6899      	ldr	r1, [r3, #8]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80044ca:	025a      	lsls	r2, r3, #9
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6899      	ldr	r1, [r3, #8]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	029a      	lsls	r2, r3, #10
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	430a      	orrs	r2, r1
 80044f6:	609a      	str	r2, [r3, #8]
}
 80044f8:	bf00      	nop
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	40012300 	.word	0x40012300
 8004508:	0f000001 	.word	0x0f000001

0800450c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004518:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004522:	2b00      	cmp	r3, #0
 8004524:	d13c      	bne.n	80045a0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d12b      	bne.n	8004598 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004544:	2b00      	cmp	r3, #0
 8004546:	d127      	bne.n	8004598 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004552:	2b00      	cmp	r3, #0
 8004554:	d006      	beq.n	8004564 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004560:	2b00      	cmp	r3, #0
 8004562:	d119      	bne.n	8004598 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0220 	bic.w	r2, r2, #32
 8004572:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004584:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d105      	bne.n	8004598 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004590:	f043 0201 	orr.w	r2, r3, #1
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f7ff fd6b 	bl	8004074 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800459e:	e00e      	b.n	80045be <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	f003 0310 	and.w	r3, r3, #16
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f7ff fd75 	bl	800409c <HAL_ADC_ErrorCallback>
}
 80045b2:	e004      	b.n	80045be <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	4798      	blx	r3
}
 80045be:	bf00      	nop
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b084      	sub	sp, #16
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f7ff fd57 	bl	8004088 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045da:	bf00      	nop
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b084      	sub	sp, #16
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ee:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2240      	movs	r2, #64	; 0x40
 80045f4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fa:	f043 0204 	orr.w	r2, r3, #4
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f7ff fd4a 	bl	800409c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004608:	bf00      	nop
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <__NVIC_SetPriorityGrouping>:
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f003 0307 	and.w	r3, r3, #7
 800461e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004620:	4b0c      	ldr	r3, [pc, #48]	; (8004654 <__NVIC_SetPriorityGrouping+0x44>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800462c:	4013      	ands	r3, r2
 800462e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800463c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004642:	4a04      	ldr	r2, [pc, #16]	; (8004654 <__NVIC_SetPriorityGrouping+0x44>)
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	60d3      	str	r3, [r2, #12]
}
 8004648:	bf00      	nop
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr
 8004654:	e000ed00 	.word	0xe000ed00

08004658 <__NVIC_GetPriorityGrouping>:
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800465c:	4b04      	ldr	r3, [pc, #16]	; (8004670 <__NVIC_GetPriorityGrouping+0x18>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	0a1b      	lsrs	r3, r3, #8
 8004662:	f003 0307 	and.w	r3, r3, #7
}
 8004666:	4618      	mov	r0, r3
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	e000ed00 	.word	0xe000ed00

08004674 <__NVIC_EnableIRQ>:
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	4603      	mov	r3, r0
 800467c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800467e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004682:	2b00      	cmp	r3, #0
 8004684:	db0b      	blt.n	800469e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004686:	79fb      	ldrb	r3, [r7, #7]
 8004688:	f003 021f 	and.w	r2, r3, #31
 800468c:	4907      	ldr	r1, [pc, #28]	; (80046ac <__NVIC_EnableIRQ+0x38>)
 800468e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004692:	095b      	lsrs	r3, r3, #5
 8004694:	2001      	movs	r0, #1
 8004696:	fa00 f202 	lsl.w	r2, r0, r2
 800469a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800469e:	bf00      	nop
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	e000e100 	.word	0xe000e100

080046b0 <__NVIC_SetPriority>:
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	4603      	mov	r3, r0
 80046b8:	6039      	str	r1, [r7, #0]
 80046ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	db0a      	blt.n	80046da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	490c      	ldr	r1, [pc, #48]	; (80046fc <__NVIC_SetPriority+0x4c>)
 80046ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ce:	0112      	lsls	r2, r2, #4
 80046d0:	b2d2      	uxtb	r2, r2
 80046d2:	440b      	add	r3, r1
 80046d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80046d8:	e00a      	b.n	80046f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	4908      	ldr	r1, [pc, #32]	; (8004700 <__NVIC_SetPriority+0x50>)
 80046e0:	79fb      	ldrb	r3, [r7, #7]
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	3b04      	subs	r3, #4
 80046e8:	0112      	lsls	r2, r2, #4
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	440b      	add	r3, r1
 80046ee:	761a      	strb	r2, [r3, #24]
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	e000e100 	.word	0xe000e100
 8004700:	e000ed00 	.word	0xe000ed00

08004704 <NVIC_EncodePriority>:
{
 8004704:	b480      	push	{r7}
 8004706:	b089      	sub	sp, #36	; 0x24
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	f1c3 0307 	rsb	r3, r3, #7
 800471e:	2b04      	cmp	r3, #4
 8004720:	bf28      	it	cs
 8004722:	2304      	movcs	r3, #4
 8004724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	3304      	adds	r3, #4
 800472a:	2b06      	cmp	r3, #6
 800472c:	d902      	bls.n	8004734 <NVIC_EncodePriority+0x30>
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	3b03      	subs	r3, #3
 8004732:	e000      	b.n	8004736 <NVIC_EncodePriority+0x32>
 8004734:	2300      	movs	r3, #0
 8004736:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004738:	f04f 32ff 	mov.w	r2, #4294967295
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	43da      	mvns	r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	401a      	ands	r2, r3
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800474c:	f04f 31ff 	mov.w	r1, #4294967295
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	fa01 f303 	lsl.w	r3, r1, r3
 8004756:	43d9      	mvns	r1, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800475c:	4313      	orrs	r3, r2
}
 800475e:	4618      	mov	r0, r3
 8004760:	3724      	adds	r7, #36	; 0x24
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
	...

0800476c <SysTick_Config>:
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3b01      	subs	r3, #1
 8004778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800477c:	d301      	bcc.n	8004782 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800477e:	2301      	movs	r3, #1
 8004780:	e00f      	b.n	80047a2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004782:	4a0a      	ldr	r2, [pc, #40]	; (80047ac <SysTick_Config+0x40>)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3b01      	subs	r3, #1
 8004788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800478a:	210f      	movs	r1, #15
 800478c:	f04f 30ff 	mov.w	r0, #4294967295
 8004790:	f7ff ff8e 	bl	80046b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004794:	4b05      	ldr	r3, [pc, #20]	; (80047ac <SysTick_Config+0x40>)
 8004796:	2200      	movs	r2, #0
 8004798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800479a:	4b04      	ldr	r3, [pc, #16]	; (80047ac <SysTick_Config+0x40>)
 800479c:	2207      	movs	r2, #7
 800479e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	e000e010 	.word	0xe000e010

080047b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7ff ff29 	bl	8004610 <__NVIC_SetPriorityGrouping>
}
 80047be:	bf00      	nop
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b086      	sub	sp, #24
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	4603      	mov	r3, r0
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	607a      	str	r2, [r7, #4]
 80047d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047d8:	f7ff ff3e 	bl	8004658 <__NVIC_GetPriorityGrouping>
 80047dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	68b9      	ldr	r1, [r7, #8]
 80047e2:	6978      	ldr	r0, [r7, #20]
 80047e4:	f7ff ff8e 	bl	8004704 <NVIC_EncodePriority>
 80047e8:	4602      	mov	r2, r0
 80047ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ee:	4611      	mov	r1, r2
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7ff ff5d 	bl	80046b0 <__NVIC_SetPriority>
}
 80047f6:	bf00      	nop
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b082      	sub	sp, #8
 8004802:	af00      	add	r7, sp, #0
 8004804:	4603      	mov	r3, r0
 8004806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff ff31 	bl	8004674 <__NVIC_EnableIRQ>
}
 8004812:	bf00      	nop
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b082      	sub	sp, #8
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7ff ffa2 	bl	800476c <SysTick_Config>
 8004828:	4603      	mov	r3, r0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
	...

08004834 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800483c:	2300      	movs	r3, #0
 800483e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004840:	f7ff fa00 	bl	8003c44 <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e099      	b.n	8004984 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0201 	bic.w	r2, r2, #1
 800486e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004870:	e00f      	b.n	8004892 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004872:	f7ff f9e7 	bl	8003c44 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b05      	cmp	r3, #5
 800487e:	d908      	bls.n	8004892 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2220      	movs	r2, #32
 8004884:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2203      	movs	r2, #3
 800488a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e078      	b.n	8004984 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1e8      	bne.n	8004872 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	4b38      	ldr	r3, [pc, #224]	; (800498c <HAL_DMA_Init+0x158>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e8:	2b04      	cmp	r3, #4
 80048ea:	d107      	bne.n	80048fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f4:	4313      	orrs	r3, r2
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f023 0307 	bic.w	r3, r3, #7
 8004912:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	4313      	orrs	r3, r2
 800491c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	2b04      	cmp	r3, #4
 8004924:	d117      	bne.n	8004956 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	4313      	orrs	r3, r2
 800492e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00e      	beq.n	8004956 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 fa6f 	bl	8004e1c <DMA_CheckFifoParam>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d008      	beq.n	8004956 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2240      	movs	r2, #64	; 0x40
 8004948:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004952:	2301      	movs	r3, #1
 8004954:	e016      	b.n	8004984 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 fa26 	bl	8004db0 <DMA_CalcBaseAndBitshift>
 8004964:	4603      	mov	r3, r0
 8004966:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800496c:	223f      	movs	r2, #63	; 0x3f
 800496e:	409a      	lsls	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3718      	adds	r7, #24
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	f010803f 	.word	0xf010803f

08004990 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
 800499c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800499e:	2300      	movs	r3, #0
 80049a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d101      	bne.n	80049b6 <HAL_DMA_Start_IT+0x26>
 80049b2:	2302      	movs	r3, #2
 80049b4:	e040      	b.n	8004a38 <HAL_DMA_Start_IT+0xa8>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d12f      	bne.n	8004a2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2202      	movs	r2, #2
 80049ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	68b9      	ldr	r1, [r7, #8]
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f000 f9b8 	bl	8004d54 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e8:	223f      	movs	r2, #63	; 0x3f
 80049ea:	409a      	lsls	r2, r3
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0216 	orr.w	r2, r2, #22
 80049fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d007      	beq.n	8004a18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0208 	orr.w	r2, r2, #8
 8004a16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f042 0201 	orr.w	r2, r2, #1
 8004a26:	601a      	str	r2, [r3, #0]
 8004a28:	e005      	b.n	8004a36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004a32:	2302      	movs	r3, #2
 8004a34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3718      	adds	r7, #24
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a4c:	4b8e      	ldr	r3, [pc, #568]	; (8004c88 <HAL_DMA_IRQHandler+0x248>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a8e      	ldr	r2, [pc, #568]	; (8004c8c <HAL_DMA_IRQHandler+0x24c>)
 8004a52:	fba2 2303 	umull	r2, r3, r2, r3
 8004a56:	0a9b      	lsrs	r3, r3, #10
 8004a58:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a6a:	2208      	movs	r2, #8
 8004a6c:	409a      	lsls	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4013      	ands	r3, r2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d01a      	beq.n	8004aac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d013      	beq.n	8004aac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 0204 	bic.w	r2, r2, #4
 8004a92:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a98:	2208      	movs	r2, #8
 8004a9a:	409a      	lsls	r2, r3
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa4:	f043 0201 	orr.w	r2, r3, #1
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	409a      	lsls	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d012      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00b      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ace:	2201      	movs	r2, #1
 8004ad0:	409a      	lsls	r2, r3
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ada:	f043 0202 	orr.w	r2, r3, #2
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae6:	2204      	movs	r2, #4
 8004ae8:	409a      	lsls	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	4013      	ands	r3, r2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d012      	beq.n	8004b18 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00b      	beq.n	8004b18 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b04:	2204      	movs	r2, #4
 8004b06:	409a      	lsls	r2, r3
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b10:	f043 0204 	orr.w	r2, r3, #4
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b1c:	2210      	movs	r2, #16
 8004b1e:	409a      	lsls	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	4013      	ands	r3, r2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d043      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0308 	and.w	r3, r3, #8
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d03c      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3a:	2210      	movs	r2, #16
 8004b3c:	409a      	lsls	r2, r3
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d018      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d108      	bne.n	8004b70 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d024      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	4798      	blx	r3
 8004b6e:	e01f      	b.n	8004bb0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d01b      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	4798      	blx	r3
 8004b80:	e016      	b.n	8004bb0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d107      	bne.n	8004ba0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 0208 	bic.w	r2, r2, #8
 8004b9e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	409a      	lsls	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4013      	ands	r3, r2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 808f 	beq.w	8004ce0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0310 	and.w	r3, r3, #16
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 8087 	beq.w	8004ce0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	409a      	lsls	r2, r3
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b05      	cmp	r3, #5
 8004be8:	d136      	bne.n	8004c58 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0216 	bic.w	r2, r2, #22
 8004bf8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	695a      	ldr	r2, [r3, #20]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c08:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d103      	bne.n	8004c1a <HAL_DMA_IRQHandler+0x1da>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d007      	beq.n	8004c2a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0208 	bic.w	r2, r2, #8
 8004c28:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2e:	223f      	movs	r2, #63	; 0x3f
 8004c30:	409a      	lsls	r2, r3
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d07e      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	4798      	blx	r3
        }
        return;
 8004c56:	e079      	b.n	8004d4c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d01d      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10d      	bne.n	8004c90 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d031      	beq.n	8004ce0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	4798      	blx	r3
 8004c84:	e02c      	b.n	8004ce0 <HAL_DMA_IRQHandler+0x2a0>
 8004c86:	bf00      	nop
 8004c88:	200005fc 	.word	0x200005fc
 8004c8c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d023      	beq.n	8004ce0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	4798      	blx	r3
 8004ca0:	e01e      	b.n	8004ce0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10f      	bne.n	8004cd0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 0210 	bic.w	r2, r2, #16
 8004cbe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d003      	beq.n	8004ce0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d032      	beq.n	8004d4e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d022      	beq.n	8004d3a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2205      	movs	r2, #5
 8004cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0201 	bic.w	r2, r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	60bb      	str	r3, [r7, #8]
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d307      	bcc.n	8004d28 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1f2      	bne.n	8004d0c <HAL_DMA_IRQHandler+0x2cc>
 8004d26:	e000      	b.n	8004d2a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004d28:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d005      	beq.n	8004d4e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	4798      	blx	r3
 8004d4a:	e000      	b.n	8004d4e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004d4c:	bf00      	nop
    }
  }
}
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
 8004d60:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d70:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	2b40      	cmp	r3, #64	; 0x40
 8004d80:	d108      	bne.n	8004d94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004d92:	e007      	b.n	8004da4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	60da      	str	r2, [r3, #12]
}
 8004da4:	bf00      	nop
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	3b10      	subs	r3, #16
 8004dc0:	4a14      	ldr	r2, [pc, #80]	; (8004e14 <DMA_CalcBaseAndBitshift+0x64>)
 8004dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc6:	091b      	lsrs	r3, r3, #4
 8004dc8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004dca:	4a13      	ldr	r2, [pc, #76]	; (8004e18 <DMA_CalcBaseAndBitshift+0x68>)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4413      	add	r3, r2
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2b03      	cmp	r3, #3
 8004ddc:	d909      	bls.n	8004df2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004de6:	f023 0303 	bic.w	r3, r3, #3
 8004dea:	1d1a      	adds	r2, r3, #4
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	659a      	str	r2, [r3, #88]	; 0x58
 8004df0:	e007      	b.n	8004e02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004dfa:	f023 0303 	bic.w	r3, r3, #3
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	aaaaaaab 	.word	0xaaaaaaab
 8004e18:	08009b20 	.word	0x08009b20

08004e1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e24:	2300      	movs	r3, #0
 8004e26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d11f      	bne.n	8004e76 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	2b03      	cmp	r3, #3
 8004e3a:	d856      	bhi.n	8004eea <DMA_CheckFifoParam+0xce>
 8004e3c:	a201      	add	r2, pc, #4	; (adr r2, 8004e44 <DMA_CheckFifoParam+0x28>)
 8004e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e42:	bf00      	nop
 8004e44:	08004e55 	.word	0x08004e55
 8004e48:	08004e67 	.word	0x08004e67
 8004e4c:	08004e55 	.word	0x08004e55
 8004e50:	08004eeb 	.word	0x08004eeb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d046      	beq.n	8004eee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e64:	e043      	b.n	8004eee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e6e:	d140      	bne.n	8004ef2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e74:	e03d      	b.n	8004ef2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e7e:	d121      	bne.n	8004ec4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2b03      	cmp	r3, #3
 8004e84:	d837      	bhi.n	8004ef6 <DMA_CheckFifoParam+0xda>
 8004e86:	a201      	add	r2, pc, #4	; (adr r2, 8004e8c <DMA_CheckFifoParam+0x70>)
 8004e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8c:	08004e9d 	.word	0x08004e9d
 8004e90:	08004ea3 	.word	0x08004ea3
 8004e94:	08004e9d 	.word	0x08004e9d
 8004e98:	08004eb5 	.word	0x08004eb5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8004ea0:	e030      	b.n	8004f04 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d025      	beq.n	8004efa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eb2:	e022      	b.n	8004efa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ebc:	d11f      	bne.n	8004efe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004ec2:	e01c      	b.n	8004efe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d903      	bls.n	8004ed2 <DMA_CheckFifoParam+0xb6>
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	2b03      	cmp	r3, #3
 8004ece:	d003      	beq.n	8004ed8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ed0:	e018      	b.n	8004f04 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	73fb      	strb	r3, [r7, #15]
      break;
 8004ed6:	e015      	b.n	8004f04 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004edc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00e      	beq.n	8004f02 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ee8:	e00b      	b.n	8004f02 <DMA_CheckFifoParam+0xe6>
      break;
 8004eea:	bf00      	nop
 8004eec:	e00a      	b.n	8004f04 <DMA_CheckFifoParam+0xe8>
      break;
 8004eee:	bf00      	nop
 8004ef0:	e008      	b.n	8004f04 <DMA_CheckFifoParam+0xe8>
      break;
 8004ef2:	bf00      	nop
 8004ef4:	e006      	b.n	8004f04 <DMA_CheckFifoParam+0xe8>
      break;
 8004ef6:	bf00      	nop
 8004ef8:	e004      	b.n	8004f04 <DMA_CheckFifoParam+0xe8>
      break;
 8004efa:	bf00      	nop
 8004efc:	e002      	b.n	8004f04 <DMA_CheckFifoParam+0xe8>
      break;   
 8004efe:	bf00      	nop
 8004f00:	e000      	b.n	8004f04 <DMA_CheckFifoParam+0xe8>
      break;
 8004f02:	bf00      	nop
    }
  } 
  
  return status; 
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop

08004f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b089      	sub	sp, #36	; 0x24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	61fb      	str	r3, [r7, #28]
 8004f2e:	e159      	b.n	80051e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f30:	2201      	movs	r2, #1
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	fa02 f303 	lsl.w	r3, r2, r3
 8004f38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	4013      	ands	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	f040 8148 	bne.w	80051de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f003 0303 	and.w	r3, r3, #3
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d005      	beq.n	8004f66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d130      	bne.n	8004fc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	005b      	lsls	r3, r3, #1
 8004f70:	2203      	movs	r2, #3
 8004f72:	fa02 f303 	lsl.w	r3, r2, r3
 8004f76:	43db      	mvns	r3, r3
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8a:	69ba      	ldr	r2, [r7, #24]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa4:	43db      	mvns	r3, r3
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	091b      	lsrs	r3, r3, #4
 8004fb2:	f003 0201 	and.w	r2, r3, #1
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f003 0303 	and.w	r3, r3, #3
 8004fd0:	2b03      	cmp	r3, #3
 8004fd2:	d017      	beq.n	8005004 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	2203      	movs	r2, #3
 8004fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe4:	43db      	mvns	r3, r3
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f003 0303 	and.w	r3, r3, #3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d123      	bne.n	8005058 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	08da      	lsrs	r2, r3, #3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3208      	adds	r2, #8
 8005018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800501c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	220f      	movs	r2, #15
 8005028:	fa02 f303 	lsl.w	r3, r2, r3
 800502c:	43db      	mvns	r3, r3
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	4013      	ands	r3, r2
 8005032:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	fa02 f303 	lsl.w	r3, r2, r3
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	4313      	orrs	r3, r2
 8005048:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	08da      	lsrs	r2, r3, #3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	3208      	adds	r2, #8
 8005052:	69b9      	ldr	r1, [r7, #24]
 8005054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	2203      	movs	r2, #3
 8005064:	fa02 f303 	lsl.w	r3, r2, r3
 8005068:	43db      	mvns	r3, r3
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	4013      	ands	r3, r2
 800506e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f003 0203 	and.w	r2, r3, #3
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	fa02 f303 	lsl.w	r3, r2, r3
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	4313      	orrs	r3, r2
 8005084:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 80a2 	beq.w	80051de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800509a:	2300      	movs	r3, #0
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	4b57      	ldr	r3, [pc, #348]	; (80051fc <HAL_GPIO_Init+0x2e8>)
 80050a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a2:	4a56      	ldr	r2, [pc, #344]	; (80051fc <HAL_GPIO_Init+0x2e8>)
 80050a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050a8:	6453      	str	r3, [r2, #68]	; 0x44
 80050aa:	4b54      	ldr	r3, [pc, #336]	; (80051fc <HAL_GPIO_Init+0x2e8>)
 80050ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050b6:	4a52      	ldr	r2, [pc, #328]	; (8005200 <HAL_GPIO_Init+0x2ec>)
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	089b      	lsrs	r3, r3, #2
 80050bc:	3302      	adds	r3, #2
 80050be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	220f      	movs	r2, #15
 80050ce:	fa02 f303 	lsl.w	r3, r2, r3
 80050d2:	43db      	mvns	r3, r3
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	4013      	ands	r3, r2
 80050d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a49      	ldr	r2, [pc, #292]	; (8005204 <HAL_GPIO_Init+0x2f0>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d019      	beq.n	8005116 <HAL_GPIO_Init+0x202>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a48      	ldr	r2, [pc, #288]	; (8005208 <HAL_GPIO_Init+0x2f4>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d013      	beq.n	8005112 <HAL_GPIO_Init+0x1fe>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a47      	ldr	r2, [pc, #284]	; (800520c <HAL_GPIO_Init+0x2f8>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d00d      	beq.n	800510e <HAL_GPIO_Init+0x1fa>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a46      	ldr	r2, [pc, #280]	; (8005210 <HAL_GPIO_Init+0x2fc>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d007      	beq.n	800510a <HAL_GPIO_Init+0x1f6>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a45      	ldr	r2, [pc, #276]	; (8005214 <HAL_GPIO_Init+0x300>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d101      	bne.n	8005106 <HAL_GPIO_Init+0x1f2>
 8005102:	2304      	movs	r3, #4
 8005104:	e008      	b.n	8005118 <HAL_GPIO_Init+0x204>
 8005106:	2307      	movs	r3, #7
 8005108:	e006      	b.n	8005118 <HAL_GPIO_Init+0x204>
 800510a:	2303      	movs	r3, #3
 800510c:	e004      	b.n	8005118 <HAL_GPIO_Init+0x204>
 800510e:	2302      	movs	r3, #2
 8005110:	e002      	b.n	8005118 <HAL_GPIO_Init+0x204>
 8005112:	2301      	movs	r3, #1
 8005114:	e000      	b.n	8005118 <HAL_GPIO_Init+0x204>
 8005116:	2300      	movs	r3, #0
 8005118:	69fa      	ldr	r2, [r7, #28]
 800511a:	f002 0203 	and.w	r2, r2, #3
 800511e:	0092      	lsls	r2, r2, #2
 8005120:	4093      	lsls	r3, r2
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	4313      	orrs	r3, r2
 8005126:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005128:	4935      	ldr	r1, [pc, #212]	; (8005200 <HAL_GPIO_Init+0x2ec>)
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	089b      	lsrs	r3, r3, #2
 800512e:	3302      	adds	r3, #2
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005136:	4b38      	ldr	r3, [pc, #224]	; (8005218 <HAL_GPIO_Init+0x304>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	43db      	mvns	r3, r3
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	4013      	ands	r3, r2
 8005144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	4313      	orrs	r3, r2
 8005158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800515a:	4a2f      	ldr	r2, [pc, #188]	; (8005218 <HAL_GPIO_Init+0x304>)
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005160:	4b2d      	ldr	r3, [pc, #180]	; (8005218 <HAL_GPIO_Init+0x304>)
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	43db      	mvns	r3, r3
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	4013      	ands	r3, r2
 800516e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	4313      	orrs	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005184:	4a24      	ldr	r2, [pc, #144]	; (8005218 <HAL_GPIO_Init+0x304>)
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800518a:	4b23      	ldr	r3, [pc, #140]	; (8005218 <HAL_GPIO_Init+0x304>)
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	43db      	mvns	r3, r3
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	4013      	ands	r3, r2
 8005198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80051ae:	4a1a      	ldr	r2, [pc, #104]	; (8005218 <HAL_GPIO_Init+0x304>)
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051b4:	4b18      	ldr	r3, [pc, #96]	; (8005218 <HAL_GPIO_Init+0x304>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	43db      	mvns	r3, r3
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	4013      	ands	r3, r2
 80051c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d003      	beq.n	80051d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051d8:	4a0f      	ldr	r2, [pc, #60]	; (8005218 <HAL_GPIO_Init+0x304>)
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	3301      	adds	r3, #1
 80051e2:	61fb      	str	r3, [r7, #28]
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	2b0f      	cmp	r3, #15
 80051e8:	f67f aea2 	bls.w	8004f30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80051ec:	bf00      	nop
 80051ee:	bf00      	nop
 80051f0:	3724      	adds	r7, #36	; 0x24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	40023800 	.word	0x40023800
 8005200:	40013800 	.word	0x40013800
 8005204:	40020000 	.word	0x40020000
 8005208:	40020400 	.word	0x40020400
 800520c:	40020800 	.word	0x40020800
 8005210:	40020c00 	.word	0x40020c00
 8005214:	40021000 	.word	0x40021000
 8005218:	40013c00 	.word	0x40013c00

0800521c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	460b      	mov	r3, r1
 8005226:	807b      	strh	r3, [r7, #2]
 8005228:	4613      	mov	r3, r2
 800522a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800522c:	787b      	ldrb	r3, [r7, #1]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005232:	887a      	ldrh	r2, [r7, #2]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005238:	e003      	b.n	8005242 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800523a:	887b      	ldrh	r3, [r7, #2]
 800523c:	041a      	lsls	r2, r3, #16
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	619a      	str	r2, [r3, #24]
}
 8005242:	bf00      	nop
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
	...

08005250 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e12b      	b.n	80054ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d106      	bne.n	800527c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7fe f9f8 	bl	800366c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2224      	movs	r2, #36	; 0x24
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 0201 	bic.w	r2, r2, #1
 8005292:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80052b4:	f001 fbbc 	bl	8006a30 <HAL_RCC_GetPCLK1Freq>
 80052b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	4a81      	ldr	r2, [pc, #516]	; (80054c4 <HAL_I2C_Init+0x274>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d807      	bhi.n	80052d4 <HAL_I2C_Init+0x84>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4a80      	ldr	r2, [pc, #512]	; (80054c8 <HAL_I2C_Init+0x278>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	bf94      	ite	ls
 80052cc:	2301      	movls	r3, #1
 80052ce:	2300      	movhi	r3, #0
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	e006      	b.n	80052e2 <HAL_I2C_Init+0x92>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4a7d      	ldr	r2, [pc, #500]	; (80054cc <HAL_I2C_Init+0x27c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	bf94      	ite	ls
 80052dc:	2301      	movls	r3, #1
 80052de:	2300      	movhi	r3, #0
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e0e7      	b.n	80054ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	4a78      	ldr	r2, [pc, #480]	; (80054d0 <HAL_I2C_Init+0x280>)
 80052ee:	fba2 2303 	umull	r2, r3, r2, r3
 80052f2:	0c9b      	lsrs	r3, r3, #18
 80052f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	430a      	orrs	r2, r1
 8005308:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	4a6a      	ldr	r2, [pc, #424]	; (80054c4 <HAL_I2C_Init+0x274>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d802      	bhi.n	8005324 <HAL_I2C_Init+0xd4>
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	3301      	adds	r3, #1
 8005322:	e009      	b.n	8005338 <HAL_I2C_Init+0xe8>
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800532a:	fb02 f303 	mul.w	r3, r2, r3
 800532e:	4a69      	ldr	r2, [pc, #420]	; (80054d4 <HAL_I2C_Init+0x284>)
 8005330:	fba2 2303 	umull	r2, r3, r2, r3
 8005334:	099b      	lsrs	r3, r3, #6
 8005336:	3301      	adds	r3, #1
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6812      	ldr	r2, [r2, #0]
 800533c:	430b      	orrs	r3, r1
 800533e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800534a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	495c      	ldr	r1, [pc, #368]	; (80054c4 <HAL_I2C_Init+0x274>)
 8005354:	428b      	cmp	r3, r1
 8005356:	d819      	bhi.n	800538c <HAL_I2C_Init+0x13c>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	1e59      	subs	r1, r3, #1
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	005b      	lsls	r3, r3, #1
 8005362:	fbb1 f3f3 	udiv	r3, r1, r3
 8005366:	1c59      	adds	r1, r3, #1
 8005368:	f640 73fc 	movw	r3, #4092	; 0xffc
 800536c:	400b      	ands	r3, r1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <HAL_I2C_Init+0x138>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	1e59      	subs	r1, r3, #1
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005380:	3301      	adds	r3, #1
 8005382:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005386:	e051      	b.n	800542c <HAL_I2C_Init+0x1dc>
 8005388:	2304      	movs	r3, #4
 800538a:	e04f      	b.n	800542c <HAL_I2C_Init+0x1dc>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d111      	bne.n	80053b8 <HAL_I2C_Init+0x168>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	1e58      	subs	r0, r3, #1
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6859      	ldr	r1, [r3, #4]
 800539c:	460b      	mov	r3, r1
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	440b      	add	r3, r1
 80053a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80053a6:	3301      	adds	r3, #1
 80053a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	bf0c      	ite	eq
 80053b0:	2301      	moveq	r3, #1
 80053b2:	2300      	movne	r3, #0
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	e012      	b.n	80053de <HAL_I2C_Init+0x18e>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	1e58      	subs	r0, r3, #1
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6859      	ldr	r1, [r3, #4]
 80053c0:	460b      	mov	r3, r1
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	440b      	add	r3, r1
 80053c6:	0099      	lsls	r1, r3, #2
 80053c8:	440b      	add	r3, r1
 80053ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80053ce:	3301      	adds	r3, #1
 80053d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	bf0c      	ite	eq
 80053d8:	2301      	moveq	r3, #1
 80053da:	2300      	movne	r3, #0
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <HAL_I2C_Init+0x196>
 80053e2:	2301      	movs	r3, #1
 80053e4:	e022      	b.n	800542c <HAL_I2C_Init+0x1dc>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10e      	bne.n	800540c <HAL_I2C_Init+0x1bc>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	1e58      	subs	r0, r3, #1
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6859      	ldr	r1, [r3, #4]
 80053f6:	460b      	mov	r3, r1
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	440b      	add	r3, r1
 80053fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8005400:	3301      	adds	r3, #1
 8005402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800540a:	e00f      	b.n	800542c <HAL_I2C_Init+0x1dc>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	1e58      	subs	r0, r3, #1
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6859      	ldr	r1, [r3, #4]
 8005414:	460b      	mov	r3, r1
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	440b      	add	r3, r1
 800541a:	0099      	lsls	r1, r3, #2
 800541c:	440b      	add	r3, r1
 800541e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005422:	3301      	adds	r3, #1
 8005424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005428:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800542c:	6879      	ldr	r1, [r7, #4]
 800542e:	6809      	ldr	r1, [r1, #0]
 8005430:	4313      	orrs	r3, r2
 8005432:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69da      	ldr	r2, [r3, #28]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	431a      	orrs	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800545a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	6911      	ldr	r1, [r2, #16]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	68d2      	ldr	r2, [r2, #12]
 8005466:	4311      	orrs	r1, r2
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	6812      	ldr	r2, [r2, #0]
 800546c:	430b      	orrs	r3, r1
 800546e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	695a      	ldr	r2, [r3, #20]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	431a      	orrs	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0201 	orr.w	r2, r2, #1
 800549a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2220      	movs	r2, #32
 80054a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	000186a0 	.word	0x000186a0
 80054c8:	001e847f 	.word	0x001e847f
 80054cc:	003d08ff 	.word	0x003d08ff
 80054d0:	431bde83 	.word	0x431bde83
 80054d4:	10624dd3 	.word	0x10624dd3

080054d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b088      	sub	sp, #32
 80054dc:	af02      	add	r7, sp, #8
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	4608      	mov	r0, r1
 80054e2:	4611      	mov	r1, r2
 80054e4:	461a      	mov	r2, r3
 80054e6:	4603      	mov	r3, r0
 80054e8:	817b      	strh	r3, [r7, #10]
 80054ea:	460b      	mov	r3, r1
 80054ec:	813b      	strh	r3, [r7, #8]
 80054ee:	4613      	mov	r3, r2
 80054f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054f2:	f7fe fba7 	bl	8003c44 <HAL_GetTick>
 80054f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b20      	cmp	r3, #32
 8005502:	f040 80d9 	bne.w	80056b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	2319      	movs	r3, #25
 800550c:	2201      	movs	r2, #1
 800550e:	496d      	ldr	r1, [pc, #436]	; (80056c4 <HAL_I2C_Mem_Write+0x1ec>)
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f000 fc7f 	bl	8005e14 <I2C_WaitOnFlagUntilTimeout>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d001      	beq.n	8005520 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800551c:	2302      	movs	r3, #2
 800551e:	e0cc      	b.n	80056ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005526:	2b01      	cmp	r3, #1
 8005528:	d101      	bne.n	800552e <HAL_I2C_Mem_Write+0x56>
 800552a:	2302      	movs	r3, #2
 800552c:	e0c5      	b.n	80056ba <HAL_I2C_Mem_Write+0x1e2>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b01      	cmp	r3, #1
 8005542:	d007      	beq.n	8005554 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f042 0201 	orr.w	r2, r2, #1
 8005552:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005562:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2221      	movs	r2, #33	; 0x21
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2240      	movs	r2, #64	; 0x40
 8005570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6a3a      	ldr	r2, [r7, #32]
 800557e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005584:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800558a:	b29a      	uxth	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4a4d      	ldr	r2, [pc, #308]	; (80056c8 <HAL_I2C_Mem_Write+0x1f0>)
 8005594:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005596:	88f8      	ldrh	r0, [r7, #6]
 8005598:	893a      	ldrh	r2, [r7, #8]
 800559a:	8979      	ldrh	r1, [r7, #10]
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	9301      	str	r3, [sp, #4]
 80055a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	4603      	mov	r3, r0
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f000 fab6 	bl	8005b18 <I2C_RequestMemoryWrite>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d052      	beq.n	8005658 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e081      	b.n	80056ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 fd00 	bl	8005fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00d      	beq.n	80055e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	2b04      	cmp	r3, #4
 80055cc:	d107      	bne.n	80055de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e06b      	b.n	80056ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e6:	781a      	ldrb	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	1c5a      	adds	r2, r3, #1
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055fc:	3b01      	subs	r3, #1
 80055fe:	b29a      	uxth	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005608:	b29b      	uxth	r3, r3
 800560a:	3b01      	subs	r3, #1
 800560c:	b29a      	uxth	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	f003 0304 	and.w	r3, r3, #4
 800561c:	2b04      	cmp	r3, #4
 800561e:	d11b      	bne.n	8005658 <HAL_I2C_Mem_Write+0x180>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005624:	2b00      	cmp	r3, #0
 8005626:	d017      	beq.n	8005658 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	781a      	ldrb	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005642:	3b01      	subs	r3, #1
 8005644:	b29a      	uxth	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800564e:	b29b      	uxth	r3, r3
 8005650:	3b01      	subs	r3, #1
 8005652:	b29a      	uxth	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1aa      	bne.n	80055b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f000 fcec 	bl	8006042 <I2C_WaitOnBTFFlagUntilTimeout>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00d      	beq.n	800568c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005674:	2b04      	cmp	r3, #4
 8005676:	d107      	bne.n	8005688 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005686:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e016      	b.n	80056ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800569a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2220      	movs	r2, #32
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80056b4:	2300      	movs	r3, #0
 80056b6:	e000      	b.n	80056ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80056b8:	2302      	movs	r3, #2
  }
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3718      	adds	r7, #24
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	00100002 	.word	0x00100002
 80056c8:	ffff0000 	.word	0xffff0000

080056cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b08c      	sub	sp, #48	; 0x30
 80056d0:	af02      	add	r7, sp, #8
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	4608      	mov	r0, r1
 80056d6:	4611      	mov	r1, r2
 80056d8:	461a      	mov	r2, r3
 80056da:	4603      	mov	r3, r0
 80056dc:	817b      	strh	r3, [r7, #10]
 80056de:	460b      	mov	r3, r1
 80056e0:	813b      	strh	r3, [r7, #8]
 80056e2:	4613      	mov	r3, r2
 80056e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056e6:	f7fe faad 	bl	8003c44 <HAL_GetTick>
 80056ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	2b20      	cmp	r3, #32
 80056f6:	f040 8208 	bne.w	8005b0a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	2319      	movs	r3, #25
 8005700:	2201      	movs	r2, #1
 8005702:	497b      	ldr	r1, [pc, #492]	; (80058f0 <HAL_I2C_Mem_Read+0x224>)
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f000 fb85 	bl	8005e14 <I2C_WaitOnFlagUntilTimeout>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d001      	beq.n	8005714 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005710:	2302      	movs	r3, #2
 8005712:	e1fb      	b.n	8005b0c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800571a:	2b01      	cmp	r3, #1
 800571c:	d101      	bne.n	8005722 <HAL_I2C_Mem_Read+0x56>
 800571e:	2302      	movs	r3, #2
 8005720:	e1f4      	b.n	8005b0c <HAL_I2C_Mem_Read+0x440>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b01      	cmp	r3, #1
 8005736:	d007      	beq.n	8005748 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f042 0201 	orr.w	r2, r2, #1
 8005746:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005756:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2222      	movs	r2, #34	; 0x22
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2240      	movs	r2, #64	; 0x40
 8005764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005772:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005778:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577e:	b29a      	uxth	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4a5b      	ldr	r2, [pc, #364]	; (80058f4 <HAL_I2C_Mem_Read+0x228>)
 8005788:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800578a:	88f8      	ldrh	r0, [r7, #6]
 800578c:	893a      	ldrh	r2, [r7, #8]
 800578e:	8979      	ldrh	r1, [r7, #10]
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	9301      	str	r3, [sp, #4]
 8005794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	4603      	mov	r3, r0
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 fa52 	bl	8005c44 <I2C_RequestMemoryRead>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e1b0      	b.n	8005b0c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d113      	bne.n	80057da <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057b2:	2300      	movs	r3, #0
 80057b4:	623b      	str	r3, [r7, #32]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	623b      	str	r3, [r7, #32]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	623b      	str	r3, [r7, #32]
 80057c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	e184      	b.n	8005ae4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d11b      	bne.n	800581a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057f2:	2300      	movs	r3, #0
 80057f4:	61fb      	str	r3, [r7, #28]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	61fb      	str	r3, [r7, #28]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	61fb      	str	r3, [r7, #28]
 8005806:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	e164      	b.n	8005ae4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800581e:	2b02      	cmp	r3, #2
 8005820:	d11b      	bne.n	800585a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005830:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005840:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005842:	2300      	movs	r3, #0
 8005844:	61bb      	str	r3, [r7, #24]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	61bb      	str	r3, [r7, #24]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	699b      	ldr	r3, [r3, #24]
 8005854:	61bb      	str	r3, [r7, #24]
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	e144      	b.n	8005ae4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800585a:	2300      	movs	r3, #0
 800585c:	617b      	str	r3, [r7, #20]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	617b      	str	r3, [r7, #20]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	617b      	str	r3, [r7, #20]
 800586e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005870:	e138      	b.n	8005ae4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005876:	2b03      	cmp	r3, #3
 8005878:	f200 80f1 	bhi.w	8005a5e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005880:	2b01      	cmp	r3, #1
 8005882:	d123      	bne.n	80058cc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005886:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f000 fc1b 	bl	80060c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d001      	beq.n	8005898 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e139      	b.n	8005b0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	691a      	ldr	r2, [r3, #16]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	b2d2      	uxtb	r2, r2
 80058a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b4:	3b01      	subs	r3, #1
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	3b01      	subs	r3, #1
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058ca:	e10b      	b.n	8005ae4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d14e      	bne.n	8005972 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058da:	2200      	movs	r2, #0
 80058dc:	4906      	ldr	r1, [pc, #24]	; (80058f8 <HAL_I2C_Mem_Read+0x22c>)
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 fa98 	bl	8005e14 <I2C_WaitOnFlagUntilTimeout>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d008      	beq.n	80058fc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e10e      	b.n	8005b0c <HAL_I2C_Mem_Read+0x440>
 80058ee:	bf00      	nop
 80058f0:	00100002 	.word	0x00100002
 80058f4:	ffff0000 	.word	0xffff0000
 80058f8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800590a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	691a      	ldr	r2, [r3, #16]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005916:	b2d2      	uxtb	r2, r2
 8005918:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	1c5a      	adds	r2, r3, #1
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005928:	3b01      	subs	r3, #1
 800592a:	b29a      	uxth	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005934:	b29b      	uxth	r3, r3
 8005936:	3b01      	subs	r3, #1
 8005938:	b29a      	uxth	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	691a      	ldr	r2, [r3, #16]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005948:	b2d2      	uxtb	r2, r2
 800594a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005950:	1c5a      	adds	r2, r3, #1
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800595a:	3b01      	subs	r3, #1
 800595c:	b29a      	uxth	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005966:	b29b      	uxth	r3, r3
 8005968:	3b01      	subs	r3, #1
 800596a:	b29a      	uxth	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005970:	e0b8      	b.n	8005ae4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005978:	2200      	movs	r2, #0
 800597a:	4966      	ldr	r1, [pc, #408]	; (8005b14 <HAL_I2C_Mem_Read+0x448>)
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f000 fa49 	bl	8005e14 <I2C_WaitOnFlagUntilTimeout>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e0bf      	b.n	8005b0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800599a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	691a      	ldr	r2, [r3, #16]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a6:	b2d2      	uxtb	r2, r2
 80059a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b8:	3b01      	subs	r3, #1
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	3b01      	subs	r3, #1
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d4:	2200      	movs	r2, #0
 80059d6:	494f      	ldr	r1, [pc, #316]	; (8005b14 <HAL_I2C_Mem_Read+0x448>)
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f000 fa1b 	bl	8005e14 <I2C_WaitOnFlagUntilTimeout>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d001      	beq.n	80059e8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e091      	b.n	8005b0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	691a      	ldr	r2, [r3, #16]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	b2d2      	uxtb	r2, r2
 8005a04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	1c5a      	adds	r2, r3, #1
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a14:	3b01      	subs	r3, #1
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	3b01      	subs	r3, #1
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	691a      	ldr	r2, [r3, #16]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a34:	b2d2      	uxtb	r2, r2
 8005a36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	3b01      	subs	r3, #1
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a5c:	e042      	b.n	8005ae4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f000 fb2e 	bl	80060c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d001      	beq.n	8005a72 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e04c      	b.n	8005b0c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	691a      	ldr	r2, [r3, #16]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7c:	b2d2      	uxtb	r2, r2
 8005a7e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	f003 0304 	and.w	r3, r3, #4
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	d118      	bne.n	8005ae4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	691a      	ldr	r2, [r3, #16]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	b2d2      	uxtb	r2, r2
 8005abe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac4:	1c5a      	adds	r2, r3, #1
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	3b01      	subs	r3, #1
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f47f aec2 	bne.w	8005872 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2220      	movs	r2, #32
 8005af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	e000      	b.n	8005b0c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005b0a:	2302      	movs	r3, #2
  }
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3728      	adds	r7, #40	; 0x28
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	00010004 	.word	0x00010004

08005b18 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b088      	sub	sp, #32
 8005b1c:	af02      	add	r7, sp, #8
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	4608      	mov	r0, r1
 8005b22:	4611      	mov	r1, r2
 8005b24:	461a      	mov	r2, r3
 8005b26:	4603      	mov	r3, r0
 8005b28:	817b      	strh	r3, [r7, #10]
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	813b      	strh	r3, [r7, #8]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	6a3b      	ldr	r3, [r7, #32]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 f960 	bl	8005e14 <I2C_WaitOnFlagUntilTimeout>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00d      	beq.n	8005b76 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b68:	d103      	bne.n	8005b72 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e05f      	b.n	8005c36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b76:	897b      	ldrh	r3, [r7, #10]
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	6a3a      	ldr	r2, [r7, #32]
 8005b8a:	492d      	ldr	r1, [pc, #180]	; (8005c40 <I2C_RequestMemoryWrite+0x128>)
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 f998 	bl	8005ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e04c      	b.n	8005c36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	617b      	str	r3, [r7, #20]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	617b      	str	r3, [r7, #20]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	617b      	str	r3, [r7, #20]
 8005bb0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bb4:	6a39      	ldr	r1, [r7, #32]
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f000 fa02 	bl	8005fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00d      	beq.n	8005bde <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	2b04      	cmp	r3, #4
 8005bc8:	d107      	bne.n	8005bda <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bd8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e02b      	b.n	8005c36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bde:	88fb      	ldrh	r3, [r7, #6]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d105      	bne.n	8005bf0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005be4:	893b      	ldrh	r3, [r7, #8]
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	611a      	str	r2, [r3, #16]
 8005bee:	e021      	b.n	8005c34 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005bf0:	893b      	ldrh	r3, [r7, #8]
 8005bf2:	0a1b      	lsrs	r3, r3, #8
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c00:	6a39      	ldr	r1, [r7, #32]
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f000 f9dc 	bl	8005fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00d      	beq.n	8005c2a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c12:	2b04      	cmp	r3, #4
 8005c14:	d107      	bne.n	8005c26 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e005      	b.n	8005c36 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c2a:	893b      	ldrh	r3, [r7, #8]
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3718      	adds	r7, #24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	00010002 	.word	0x00010002

08005c44 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b088      	sub	sp, #32
 8005c48:	af02      	add	r7, sp, #8
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	4608      	mov	r0, r1
 8005c4e:	4611      	mov	r1, r2
 8005c50:	461a      	mov	r2, r3
 8005c52:	4603      	mov	r3, r0
 8005c54:	817b      	strh	r3, [r7, #10]
 8005c56:	460b      	mov	r3, r1
 8005c58:	813b      	strh	r3, [r7, #8]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c6c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c80:	9300      	str	r3, [sp, #0]
 8005c82:	6a3b      	ldr	r3, [r7, #32]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f000 f8c2 	bl	8005e14 <I2C_WaitOnFlagUntilTimeout>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00d      	beq.n	8005cb2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ca4:	d103      	bne.n	8005cae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e0aa      	b.n	8005e08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005cb2:	897b      	ldrh	r3, [r7, #10]
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005cc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	6a3a      	ldr	r2, [r7, #32]
 8005cc6:	4952      	ldr	r1, [pc, #328]	; (8005e10 <I2C_RequestMemoryRead+0x1cc>)
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f000 f8fa 	bl	8005ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d001      	beq.n	8005cd8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e097      	b.n	8005e08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cd8:	2300      	movs	r3, #0
 8005cda:	617b      	str	r3, [r7, #20]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	617b      	str	r3, [r7, #20]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf0:	6a39      	ldr	r1, [r7, #32]
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 f964 	bl	8005fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00d      	beq.n	8005d1a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d02:	2b04      	cmp	r3, #4
 8005d04:	d107      	bne.n	8005d16 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e076      	b.n	8005e08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d1a:	88fb      	ldrh	r3, [r7, #6]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d105      	bne.n	8005d2c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d20:	893b      	ldrh	r3, [r7, #8]
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	611a      	str	r2, [r3, #16]
 8005d2a:	e021      	b.n	8005d70 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d2c:	893b      	ldrh	r3, [r7, #8]
 8005d2e:	0a1b      	lsrs	r3, r3, #8
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d3c:	6a39      	ldr	r1, [r7, #32]
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 f93e 	bl	8005fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00d      	beq.n	8005d66 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4e:	2b04      	cmp	r3, #4
 8005d50:	d107      	bne.n	8005d62 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e050      	b.n	8005e08 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d66:	893b      	ldrh	r3, [r7, #8]
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d72:	6a39      	ldr	r1, [r7, #32]
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f000 f923 	bl	8005fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00d      	beq.n	8005d9c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d84:	2b04      	cmp	r3, #4
 8005d86:	d107      	bne.n	8005d98 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d96:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e035      	b.n	8005e08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005daa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	9300      	str	r3, [sp, #0]
 8005db0:	6a3b      	ldr	r3, [r7, #32]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f000 f82b 	bl	8005e14 <I2C_WaitOnFlagUntilTimeout>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00d      	beq.n	8005de0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dd2:	d103      	bne.n	8005ddc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e013      	b.n	8005e08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005de0:	897b      	ldrh	r3, [r7, #10]
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	f043 0301 	orr.w	r3, r3, #1
 8005de8:	b2da      	uxtb	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df2:	6a3a      	ldr	r2, [r7, #32]
 8005df4:	4906      	ldr	r1, [pc, #24]	; (8005e10 <I2C_RequestMemoryRead+0x1cc>)
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	f000 f863 	bl	8005ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d001      	beq.n	8005e06 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e000      	b.n	8005e08 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3718      	adds	r7, #24
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	00010002 	.word	0x00010002

08005e14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	603b      	str	r3, [r7, #0]
 8005e20:	4613      	mov	r3, r2
 8005e22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e24:	e025      	b.n	8005e72 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2c:	d021      	beq.n	8005e72 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e2e:	f7fd ff09 	bl	8003c44 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	683a      	ldr	r2, [r7, #0]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d302      	bcc.n	8005e44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d116      	bne.n	8005e72 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2220      	movs	r2, #32
 8005e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5e:	f043 0220 	orr.w	r2, r3, #32
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e023      	b.n	8005eba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	0c1b      	lsrs	r3, r3, #16
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d10d      	bne.n	8005e98 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	43da      	mvns	r2, r3
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	4013      	ands	r3, r2
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	bf0c      	ite	eq
 8005e8e:	2301      	moveq	r3, #1
 8005e90:	2300      	movne	r3, #0
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	461a      	mov	r2, r3
 8005e96:	e00c      	b.n	8005eb2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	43da      	mvns	r2, r3
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	bf0c      	ite	eq
 8005eaa:	2301      	moveq	r3, #1
 8005eac:	2300      	movne	r3, #0
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	79fb      	ldrb	r3, [r7, #7]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d0b6      	beq.n	8005e26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b084      	sub	sp, #16
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	60f8      	str	r0, [r7, #12]
 8005eca:	60b9      	str	r1, [r7, #8]
 8005ecc:	607a      	str	r2, [r7, #4]
 8005ece:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ed0:	e051      	b.n	8005f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	695b      	ldr	r3, [r3, #20]
 8005ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ee0:	d123      	bne.n	8005f2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ef0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005efa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2220      	movs	r2, #32
 8005f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f16:	f043 0204 	orr.w	r2, r3, #4
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e046      	b.n	8005fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f30:	d021      	beq.n	8005f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f32:	f7fd fe87 	bl	8003c44 <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d302      	bcc.n	8005f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d116      	bne.n	8005f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2220      	movs	r2, #32
 8005f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f62:	f043 0220 	orr.w	r2, r3, #32
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e020      	b.n	8005fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	0c1b      	lsrs	r3, r3, #16
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d10c      	bne.n	8005f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	43da      	mvns	r2, r3
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	bf14      	ite	ne
 8005f92:	2301      	movne	r3, #1
 8005f94:	2300      	moveq	r3, #0
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	e00b      	b.n	8005fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	43da      	mvns	r2, r3
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	bf14      	ite	ne
 8005fac:	2301      	movne	r3, #1
 8005fae:	2300      	moveq	r3, #0
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d18d      	bne.n	8005ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fcc:	e02d      	b.n	800602a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f000 f8ce 	bl	8006170 <I2C_IsAcknowledgeFailed>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e02d      	b.n	800603a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe4:	d021      	beq.n	800602a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fe6:	f7fd fe2d 	bl	8003c44 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d302      	bcc.n	8005ffc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d116      	bne.n	800602a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2220      	movs	r2, #32
 8006006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006016:	f043 0220 	orr.w	r2, r3, #32
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e007      	b.n	800603a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006034:	2b80      	cmp	r3, #128	; 0x80
 8006036:	d1ca      	bne.n	8005fce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b084      	sub	sp, #16
 8006046:	af00      	add	r7, sp, #0
 8006048:	60f8      	str	r0, [r7, #12]
 800604a:	60b9      	str	r1, [r7, #8]
 800604c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800604e:	e02d      	b.n	80060ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f000 f88d 	bl	8006170 <I2C_IsAcknowledgeFailed>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d001      	beq.n	8006060 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e02d      	b.n	80060bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006066:	d021      	beq.n	80060ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006068:	f7fd fdec 	bl	8003c44 <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	429a      	cmp	r2, r3
 8006076:	d302      	bcc.n	800607e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d116      	bne.n	80060ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2220      	movs	r2, #32
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006098:	f043 0220 	orr.w	r2, r3, #32
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e007      	b.n	80060bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	f003 0304 	and.w	r3, r3, #4
 80060b6:	2b04      	cmp	r3, #4
 80060b8:	d1ca      	bne.n	8006050 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060d0:	e042      	b.n	8006158 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	f003 0310 	and.w	r3, r3, #16
 80060dc:	2b10      	cmp	r3, #16
 80060de:	d119      	bne.n	8006114 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f06f 0210 	mvn.w	r2, #16
 80060e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2220      	movs	r2, #32
 80060f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e029      	b.n	8006168 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006114:	f7fd fd96 	bl	8003c44 <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	68ba      	ldr	r2, [r7, #8]
 8006120:	429a      	cmp	r2, r3
 8006122:	d302      	bcc.n	800612a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d116      	bne.n	8006158 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2220      	movs	r2, #32
 8006134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006144:	f043 0220 	orr.w	r2, r3, #32
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e007      	b.n	8006168 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006162:	2b40      	cmp	r3, #64	; 0x40
 8006164:	d1b5      	bne.n	80060d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006186:	d11b      	bne.n	80061c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006190:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2220      	movs	r2, #32
 800619c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ac:	f043 0204 	orr.w	r2, r3, #4
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e000      	b.n	80061c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
	...

080061d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e267      	b.n	80066b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d075      	beq.n	80062da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061ee:	4b88      	ldr	r3, [pc, #544]	; (8006410 <HAL_RCC_OscConfig+0x240>)
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f003 030c 	and.w	r3, r3, #12
 80061f6:	2b04      	cmp	r3, #4
 80061f8:	d00c      	beq.n	8006214 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061fa:	4b85      	ldr	r3, [pc, #532]	; (8006410 <HAL_RCC_OscConfig+0x240>)
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006202:	2b08      	cmp	r3, #8
 8006204:	d112      	bne.n	800622c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006206:	4b82      	ldr	r3, [pc, #520]	; (8006410 <HAL_RCC_OscConfig+0x240>)
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800620e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006212:	d10b      	bne.n	800622c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006214:	4b7e      	ldr	r3, [pc, #504]	; (8006410 <HAL_RCC_OscConfig+0x240>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d05b      	beq.n	80062d8 <HAL_RCC_OscConfig+0x108>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d157      	bne.n	80062d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e242      	b.n	80066b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006234:	d106      	bne.n	8006244 <HAL_RCC_OscConfig+0x74>
 8006236:	4b76      	ldr	r3, [pc, #472]	; (8006410 <HAL_RCC_OscConfig+0x240>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a75      	ldr	r2, [pc, #468]	; (8006410 <HAL_RCC_OscConfig+0x240>)
 800623c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006240:	6013      	str	r3, [r2, #0]
 8006242:	e01d      	b.n	8006280 <HAL_RCC_OscConfig+0xb0>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800624c:	d10c      	bne.n	8006268 <HAL_RCC_OscConfig+0x98>
 800624e:	4b70      	ldr	r3, [pc, #448]	; (8006410 <HAL_RCC_OscConfig+0x240>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a6f      	ldr	r2, [pc, #444]	; (8006410 <HAL_RCC_OscConfig+0x240>)
 8006254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006258:	6013      	str	r3, [r2, #0]
 800625a:	4b6d      	ldr	r3, [pc, #436]	; (8006410 <HAL_RCC_OscConfig+0x240>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a6c      	ldr	r2, [pc, #432]	; (8006410 <HAL_RCC_OscConfig+0x240>)
 8006260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006264:	6013      	str	r3, [r2, #0]
 8006266:	e00b      	b.n	8006280 <HAL_RCC_OscConfig+0xb0>
 8006268:	4b69      	ldr	r3, [pc, #420]	; (8006410 <HAL_RCC_OscConfig+0x240>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a68      	ldr	r2, [pc, #416]	; (8006410 <HAL_RCC_OscConfig+0x240>)
 800626e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006272:	6013      	str	r3, [r2, #0]
 8006274:	4b66      	ldr	r3, [pc, #408]	; (8006410 <HAL_RCC_OscConfig+0x240>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a65      	ldr	r2, [pc, #404]	; (8006410 <HAL_RCC_OscConfig+0x240>)
 800627a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800627e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d013      	beq.n	80062b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006288:	f7fd fcdc 	bl	8003c44 <HAL_GetTick>
 800628c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800628e:	e008      	b.n	80062a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006290:	f7fd fcd8 	bl	8003c44 <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	2b64      	cmp	r3, #100	; 0x64
 800629c:	d901      	bls.n	80062a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e207      	b.n	80066b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062a2:	4b5b      	ldr	r3, [pc, #364]	; (8006410 <HAL_RCC_OscConfig+0x240>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d0f0      	beq.n	8006290 <HAL_RCC_OscConfig+0xc0>
 80062ae:	e014      	b.n	80062da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b0:	f7fd fcc8 	bl	8003c44 <HAL_GetTick>
 80062b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062b6:	e008      	b.n	80062ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062b8:	f7fd fcc4 	bl	8003c44 <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	2b64      	cmp	r3, #100	; 0x64
 80062c4:	d901      	bls.n	80062ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e1f3      	b.n	80066b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062ca:	4b51      	ldr	r3, [pc, #324]	; (8006410 <HAL_RCC_OscConfig+0x240>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1f0      	bne.n	80062b8 <HAL_RCC_OscConfig+0xe8>
 80062d6:	e000      	b.n	80062da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0302 	and.w	r3, r3, #2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d063      	beq.n	80063ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062e6:	4b4a      	ldr	r3, [pc, #296]	; (8006410 <HAL_RCC_OscConfig+0x240>)
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f003 030c 	and.w	r3, r3, #12
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00b      	beq.n	800630a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062f2:	4b47      	ldr	r3, [pc, #284]	; (8006410 <HAL_RCC_OscConfig+0x240>)
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062fa:	2b08      	cmp	r3, #8
 80062fc:	d11c      	bne.n	8006338 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062fe:	4b44      	ldr	r3, [pc, #272]	; (8006410 <HAL_RCC_OscConfig+0x240>)
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d116      	bne.n	8006338 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800630a:	4b41      	ldr	r3, [pc, #260]	; (8006410 <HAL_RCC_OscConfig+0x240>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0302 	and.w	r3, r3, #2
 8006312:	2b00      	cmp	r3, #0
 8006314:	d005      	beq.n	8006322 <HAL_RCC_OscConfig+0x152>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d001      	beq.n	8006322 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e1c7      	b.n	80066b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006322:	4b3b      	ldr	r3, [pc, #236]	; (8006410 <HAL_RCC_OscConfig+0x240>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	00db      	lsls	r3, r3, #3
 8006330:	4937      	ldr	r1, [pc, #220]	; (8006410 <HAL_RCC_OscConfig+0x240>)
 8006332:	4313      	orrs	r3, r2
 8006334:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006336:	e03a      	b.n	80063ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d020      	beq.n	8006382 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006340:	4b34      	ldr	r3, [pc, #208]	; (8006414 <HAL_RCC_OscConfig+0x244>)
 8006342:	2201      	movs	r2, #1
 8006344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006346:	f7fd fc7d 	bl	8003c44 <HAL_GetTick>
 800634a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800634c:	e008      	b.n	8006360 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800634e:	f7fd fc79 	bl	8003c44 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	2b02      	cmp	r3, #2
 800635a:	d901      	bls.n	8006360 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e1a8      	b.n	80066b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006360:	4b2b      	ldr	r3, [pc, #172]	; (8006410 <HAL_RCC_OscConfig+0x240>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0302 	and.w	r3, r3, #2
 8006368:	2b00      	cmp	r3, #0
 800636a:	d0f0      	beq.n	800634e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800636c:	4b28      	ldr	r3, [pc, #160]	; (8006410 <HAL_RCC_OscConfig+0x240>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	00db      	lsls	r3, r3, #3
 800637a:	4925      	ldr	r1, [pc, #148]	; (8006410 <HAL_RCC_OscConfig+0x240>)
 800637c:	4313      	orrs	r3, r2
 800637e:	600b      	str	r3, [r1, #0]
 8006380:	e015      	b.n	80063ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006382:	4b24      	ldr	r3, [pc, #144]	; (8006414 <HAL_RCC_OscConfig+0x244>)
 8006384:	2200      	movs	r2, #0
 8006386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006388:	f7fd fc5c 	bl	8003c44 <HAL_GetTick>
 800638c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800638e:	e008      	b.n	80063a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006390:	f7fd fc58 	bl	8003c44 <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	2b02      	cmp	r3, #2
 800639c:	d901      	bls.n	80063a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e187      	b.n	80066b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063a2:	4b1b      	ldr	r3, [pc, #108]	; (8006410 <HAL_RCC_OscConfig+0x240>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1f0      	bne.n	8006390 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0308 	and.w	r3, r3, #8
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d036      	beq.n	8006428 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d016      	beq.n	80063f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063c2:	4b15      	ldr	r3, [pc, #84]	; (8006418 <HAL_RCC_OscConfig+0x248>)
 80063c4:	2201      	movs	r2, #1
 80063c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063c8:	f7fd fc3c 	bl	8003c44 <HAL_GetTick>
 80063cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063ce:	e008      	b.n	80063e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063d0:	f7fd fc38 	bl	8003c44 <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d901      	bls.n	80063e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e167      	b.n	80066b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063e2:	4b0b      	ldr	r3, [pc, #44]	; (8006410 <HAL_RCC_OscConfig+0x240>)
 80063e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063e6:	f003 0302 	and.w	r3, r3, #2
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d0f0      	beq.n	80063d0 <HAL_RCC_OscConfig+0x200>
 80063ee:	e01b      	b.n	8006428 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063f0:	4b09      	ldr	r3, [pc, #36]	; (8006418 <HAL_RCC_OscConfig+0x248>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063f6:	f7fd fc25 	bl	8003c44 <HAL_GetTick>
 80063fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063fc:	e00e      	b.n	800641c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063fe:	f7fd fc21 	bl	8003c44 <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	2b02      	cmp	r3, #2
 800640a:	d907      	bls.n	800641c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	e150      	b.n	80066b2 <HAL_RCC_OscConfig+0x4e2>
 8006410:	40023800 	.word	0x40023800
 8006414:	42470000 	.word	0x42470000
 8006418:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800641c:	4b88      	ldr	r3, [pc, #544]	; (8006640 <HAL_RCC_OscConfig+0x470>)
 800641e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006420:	f003 0302 	and.w	r3, r3, #2
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1ea      	bne.n	80063fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0304 	and.w	r3, r3, #4
 8006430:	2b00      	cmp	r3, #0
 8006432:	f000 8097 	beq.w	8006564 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006436:	2300      	movs	r3, #0
 8006438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800643a:	4b81      	ldr	r3, [pc, #516]	; (8006640 <HAL_RCC_OscConfig+0x470>)
 800643c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10f      	bne.n	8006466 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006446:	2300      	movs	r3, #0
 8006448:	60bb      	str	r3, [r7, #8]
 800644a:	4b7d      	ldr	r3, [pc, #500]	; (8006640 <HAL_RCC_OscConfig+0x470>)
 800644c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644e:	4a7c      	ldr	r2, [pc, #496]	; (8006640 <HAL_RCC_OscConfig+0x470>)
 8006450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006454:	6413      	str	r3, [r2, #64]	; 0x40
 8006456:	4b7a      	ldr	r3, [pc, #488]	; (8006640 <HAL_RCC_OscConfig+0x470>)
 8006458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800645e:	60bb      	str	r3, [r7, #8]
 8006460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006462:	2301      	movs	r3, #1
 8006464:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006466:	4b77      	ldr	r3, [pc, #476]	; (8006644 <HAL_RCC_OscConfig+0x474>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800646e:	2b00      	cmp	r3, #0
 8006470:	d118      	bne.n	80064a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006472:	4b74      	ldr	r3, [pc, #464]	; (8006644 <HAL_RCC_OscConfig+0x474>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a73      	ldr	r2, [pc, #460]	; (8006644 <HAL_RCC_OscConfig+0x474>)
 8006478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800647c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800647e:	f7fd fbe1 	bl	8003c44 <HAL_GetTick>
 8006482:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006484:	e008      	b.n	8006498 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006486:	f7fd fbdd 	bl	8003c44 <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	2b02      	cmp	r3, #2
 8006492:	d901      	bls.n	8006498 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e10c      	b.n	80066b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006498:	4b6a      	ldr	r3, [pc, #424]	; (8006644 <HAL_RCC_OscConfig+0x474>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d0f0      	beq.n	8006486 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d106      	bne.n	80064ba <HAL_RCC_OscConfig+0x2ea>
 80064ac:	4b64      	ldr	r3, [pc, #400]	; (8006640 <HAL_RCC_OscConfig+0x470>)
 80064ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b0:	4a63      	ldr	r2, [pc, #396]	; (8006640 <HAL_RCC_OscConfig+0x470>)
 80064b2:	f043 0301 	orr.w	r3, r3, #1
 80064b6:	6713      	str	r3, [r2, #112]	; 0x70
 80064b8:	e01c      	b.n	80064f4 <HAL_RCC_OscConfig+0x324>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	2b05      	cmp	r3, #5
 80064c0:	d10c      	bne.n	80064dc <HAL_RCC_OscConfig+0x30c>
 80064c2:	4b5f      	ldr	r3, [pc, #380]	; (8006640 <HAL_RCC_OscConfig+0x470>)
 80064c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c6:	4a5e      	ldr	r2, [pc, #376]	; (8006640 <HAL_RCC_OscConfig+0x470>)
 80064c8:	f043 0304 	orr.w	r3, r3, #4
 80064cc:	6713      	str	r3, [r2, #112]	; 0x70
 80064ce:	4b5c      	ldr	r3, [pc, #368]	; (8006640 <HAL_RCC_OscConfig+0x470>)
 80064d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d2:	4a5b      	ldr	r2, [pc, #364]	; (8006640 <HAL_RCC_OscConfig+0x470>)
 80064d4:	f043 0301 	orr.w	r3, r3, #1
 80064d8:	6713      	str	r3, [r2, #112]	; 0x70
 80064da:	e00b      	b.n	80064f4 <HAL_RCC_OscConfig+0x324>
 80064dc:	4b58      	ldr	r3, [pc, #352]	; (8006640 <HAL_RCC_OscConfig+0x470>)
 80064de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e0:	4a57      	ldr	r2, [pc, #348]	; (8006640 <HAL_RCC_OscConfig+0x470>)
 80064e2:	f023 0301 	bic.w	r3, r3, #1
 80064e6:	6713      	str	r3, [r2, #112]	; 0x70
 80064e8:	4b55      	ldr	r3, [pc, #340]	; (8006640 <HAL_RCC_OscConfig+0x470>)
 80064ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ec:	4a54      	ldr	r2, [pc, #336]	; (8006640 <HAL_RCC_OscConfig+0x470>)
 80064ee:	f023 0304 	bic.w	r3, r3, #4
 80064f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d015      	beq.n	8006528 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064fc:	f7fd fba2 	bl	8003c44 <HAL_GetTick>
 8006500:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006502:	e00a      	b.n	800651a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006504:	f7fd fb9e 	bl	8003c44 <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006512:	4293      	cmp	r3, r2
 8006514:	d901      	bls.n	800651a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e0cb      	b.n	80066b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800651a:	4b49      	ldr	r3, [pc, #292]	; (8006640 <HAL_RCC_OscConfig+0x470>)
 800651c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	2b00      	cmp	r3, #0
 8006524:	d0ee      	beq.n	8006504 <HAL_RCC_OscConfig+0x334>
 8006526:	e014      	b.n	8006552 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006528:	f7fd fb8c 	bl	8003c44 <HAL_GetTick>
 800652c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800652e:	e00a      	b.n	8006546 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006530:	f7fd fb88 	bl	8003c44 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	f241 3288 	movw	r2, #5000	; 0x1388
 800653e:	4293      	cmp	r3, r2
 8006540:	d901      	bls.n	8006546 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e0b5      	b.n	80066b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006546:	4b3e      	ldr	r3, [pc, #248]	; (8006640 <HAL_RCC_OscConfig+0x470>)
 8006548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1ee      	bne.n	8006530 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006552:	7dfb      	ldrb	r3, [r7, #23]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d105      	bne.n	8006564 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006558:	4b39      	ldr	r3, [pc, #228]	; (8006640 <HAL_RCC_OscConfig+0x470>)
 800655a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655c:	4a38      	ldr	r2, [pc, #224]	; (8006640 <HAL_RCC_OscConfig+0x470>)
 800655e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006562:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	2b00      	cmp	r3, #0
 800656a:	f000 80a1 	beq.w	80066b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800656e:	4b34      	ldr	r3, [pc, #208]	; (8006640 <HAL_RCC_OscConfig+0x470>)
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f003 030c 	and.w	r3, r3, #12
 8006576:	2b08      	cmp	r3, #8
 8006578:	d05c      	beq.n	8006634 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	2b02      	cmp	r3, #2
 8006580:	d141      	bne.n	8006606 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006582:	4b31      	ldr	r3, [pc, #196]	; (8006648 <HAL_RCC_OscConfig+0x478>)
 8006584:	2200      	movs	r2, #0
 8006586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006588:	f7fd fb5c 	bl	8003c44 <HAL_GetTick>
 800658c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800658e:	e008      	b.n	80065a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006590:	f7fd fb58 	bl	8003c44 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	2b02      	cmp	r3, #2
 800659c:	d901      	bls.n	80065a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e087      	b.n	80066b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065a2:	4b27      	ldr	r3, [pc, #156]	; (8006640 <HAL_RCC_OscConfig+0x470>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1f0      	bne.n	8006590 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	69da      	ldr	r2, [r3, #28]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	431a      	orrs	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065bc:	019b      	lsls	r3, r3, #6
 80065be:	431a      	orrs	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c4:	085b      	lsrs	r3, r3, #1
 80065c6:	3b01      	subs	r3, #1
 80065c8:	041b      	lsls	r3, r3, #16
 80065ca:	431a      	orrs	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d0:	061b      	lsls	r3, r3, #24
 80065d2:	491b      	ldr	r1, [pc, #108]	; (8006640 <HAL_RCC_OscConfig+0x470>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065d8:	4b1b      	ldr	r3, [pc, #108]	; (8006648 <HAL_RCC_OscConfig+0x478>)
 80065da:	2201      	movs	r2, #1
 80065dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065de:	f7fd fb31 	bl	8003c44 <HAL_GetTick>
 80065e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065e4:	e008      	b.n	80065f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065e6:	f7fd fb2d 	bl	8003c44 <HAL_GetTick>
 80065ea:	4602      	mov	r2, r0
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d901      	bls.n	80065f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e05c      	b.n	80066b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065f8:	4b11      	ldr	r3, [pc, #68]	; (8006640 <HAL_RCC_OscConfig+0x470>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d0f0      	beq.n	80065e6 <HAL_RCC_OscConfig+0x416>
 8006604:	e054      	b.n	80066b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006606:	4b10      	ldr	r3, [pc, #64]	; (8006648 <HAL_RCC_OscConfig+0x478>)
 8006608:	2200      	movs	r2, #0
 800660a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800660c:	f7fd fb1a 	bl	8003c44 <HAL_GetTick>
 8006610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006612:	e008      	b.n	8006626 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006614:	f7fd fb16 	bl	8003c44 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b02      	cmp	r3, #2
 8006620:	d901      	bls.n	8006626 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e045      	b.n	80066b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006626:	4b06      	ldr	r3, [pc, #24]	; (8006640 <HAL_RCC_OscConfig+0x470>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1f0      	bne.n	8006614 <HAL_RCC_OscConfig+0x444>
 8006632:	e03d      	b.n	80066b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d107      	bne.n	800664c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e038      	b.n	80066b2 <HAL_RCC_OscConfig+0x4e2>
 8006640:	40023800 	.word	0x40023800
 8006644:	40007000 	.word	0x40007000
 8006648:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800664c:	4b1b      	ldr	r3, [pc, #108]	; (80066bc <HAL_RCC_OscConfig+0x4ec>)
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d028      	beq.n	80066ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006664:	429a      	cmp	r2, r3
 8006666:	d121      	bne.n	80066ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006672:	429a      	cmp	r2, r3
 8006674:	d11a      	bne.n	80066ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800667c:	4013      	ands	r3, r2
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006682:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006684:	4293      	cmp	r3, r2
 8006686:	d111      	bne.n	80066ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006692:	085b      	lsrs	r3, r3, #1
 8006694:	3b01      	subs	r3, #1
 8006696:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006698:	429a      	cmp	r2, r3
 800669a:	d107      	bne.n	80066ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d001      	beq.n	80066b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e000      	b.n	80066b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3718      	adds	r7, #24
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	40023800 	.word	0x40023800

080066c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d101      	bne.n	80066d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e0cc      	b.n	800686e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066d4:	4b68      	ldr	r3, [pc, #416]	; (8006878 <HAL_RCC_ClockConfig+0x1b8>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0307 	and.w	r3, r3, #7
 80066dc:	683a      	ldr	r2, [r7, #0]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d90c      	bls.n	80066fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066e2:	4b65      	ldr	r3, [pc, #404]	; (8006878 <HAL_RCC_ClockConfig+0x1b8>)
 80066e4:	683a      	ldr	r2, [r7, #0]
 80066e6:	b2d2      	uxtb	r2, r2
 80066e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ea:	4b63      	ldr	r3, [pc, #396]	; (8006878 <HAL_RCC_ClockConfig+0x1b8>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0307 	and.w	r3, r3, #7
 80066f2:	683a      	ldr	r2, [r7, #0]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d001      	beq.n	80066fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e0b8      	b.n	800686e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b00      	cmp	r3, #0
 8006706:	d020      	beq.n	800674a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	2b00      	cmp	r3, #0
 8006712:	d005      	beq.n	8006720 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006714:	4b59      	ldr	r3, [pc, #356]	; (800687c <HAL_RCC_ClockConfig+0x1bc>)
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	4a58      	ldr	r2, [pc, #352]	; (800687c <HAL_RCC_ClockConfig+0x1bc>)
 800671a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800671e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0308 	and.w	r3, r3, #8
 8006728:	2b00      	cmp	r3, #0
 800672a:	d005      	beq.n	8006738 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800672c:	4b53      	ldr	r3, [pc, #332]	; (800687c <HAL_RCC_ClockConfig+0x1bc>)
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	4a52      	ldr	r2, [pc, #328]	; (800687c <HAL_RCC_ClockConfig+0x1bc>)
 8006732:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006736:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006738:	4b50      	ldr	r3, [pc, #320]	; (800687c <HAL_RCC_ClockConfig+0x1bc>)
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	494d      	ldr	r1, [pc, #308]	; (800687c <HAL_RCC_ClockConfig+0x1bc>)
 8006746:	4313      	orrs	r3, r2
 8006748:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	2b00      	cmp	r3, #0
 8006754:	d044      	beq.n	80067e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	2b01      	cmp	r3, #1
 800675c:	d107      	bne.n	800676e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800675e:	4b47      	ldr	r3, [pc, #284]	; (800687c <HAL_RCC_ClockConfig+0x1bc>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d119      	bne.n	800679e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e07f      	b.n	800686e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	2b02      	cmp	r3, #2
 8006774:	d003      	beq.n	800677e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800677a:	2b03      	cmp	r3, #3
 800677c:	d107      	bne.n	800678e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800677e:	4b3f      	ldr	r3, [pc, #252]	; (800687c <HAL_RCC_ClockConfig+0x1bc>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d109      	bne.n	800679e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e06f      	b.n	800686e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800678e:	4b3b      	ldr	r3, [pc, #236]	; (800687c <HAL_RCC_ClockConfig+0x1bc>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e067      	b.n	800686e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800679e:	4b37      	ldr	r3, [pc, #220]	; (800687c <HAL_RCC_ClockConfig+0x1bc>)
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f023 0203 	bic.w	r2, r3, #3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	4934      	ldr	r1, [pc, #208]	; (800687c <HAL_RCC_ClockConfig+0x1bc>)
 80067ac:	4313      	orrs	r3, r2
 80067ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067b0:	f7fd fa48 	bl	8003c44 <HAL_GetTick>
 80067b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067b6:	e00a      	b.n	80067ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067b8:	f7fd fa44 	bl	8003c44 <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d901      	bls.n	80067ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e04f      	b.n	800686e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ce:	4b2b      	ldr	r3, [pc, #172]	; (800687c <HAL_RCC_ClockConfig+0x1bc>)
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f003 020c 	and.w	r2, r3, #12
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	429a      	cmp	r2, r3
 80067de:	d1eb      	bne.n	80067b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067e0:	4b25      	ldr	r3, [pc, #148]	; (8006878 <HAL_RCC_ClockConfig+0x1b8>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0307 	and.w	r3, r3, #7
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d20c      	bcs.n	8006808 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ee:	4b22      	ldr	r3, [pc, #136]	; (8006878 <HAL_RCC_ClockConfig+0x1b8>)
 80067f0:	683a      	ldr	r2, [r7, #0]
 80067f2:	b2d2      	uxtb	r2, r2
 80067f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067f6:	4b20      	ldr	r3, [pc, #128]	; (8006878 <HAL_RCC_ClockConfig+0x1b8>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0307 	and.w	r3, r3, #7
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	429a      	cmp	r2, r3
 8006802:	d001      	beq.n	8006808 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e032      	b.n	800686e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0304 	and.w	r3, r3, #4
 8006810:	2b00      	cmp	r3, #0
 8006812:	d008      	beq.n	8006826 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006814:	4b19      	ldr	r3, [pc, #100]	; (800687c <HAL_RCC_ClockConfig+0x1bc>)
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	4916      	ldr	r1, [pc, #88]	; (800687c <HAL_RCC_ClockConfig+0x1bc>)
 8006822:	4313      	orrs	r3, r2
 8006824:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0308 	and.w	r3, r3, #8
 800682e:	2b00      	cmp	r3, #0
 8006830:	d009      	beq.n	8006846 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006832:	4b12      	ldr	r3, [pc, #72]	; (800687c <HAL_RCC_ClockConfig+0x1bc>)
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	00db      	lsls	r3, r3, #3
 8006840:	490e      	ldr	r1, [pc, #56]	; (800687c <HAL_RCC_ClockConfig+0x1bc>)
 8006842:	4313      	orrs	r3, r2
 8006844:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006846:	f000 f821 	bl	800688c <HAL_RCC_GetSysClockFreq>
 800684a:	4602      	mov	r2, r0
 800684c:	4b0b      	ldr	r3, [pc, #44]	; (800687c <HAL_RCC_ClockConfig+0x1bc>)
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	091b      	lsrs	r3, r3, #4
 8006852:	f003 030f 	and.w	r3, r3, #15
 8006856:	490a      	ldr	r1, [pc, #40]	; (8006880 <HAL_RCC_ClockConfig+0x1c0>)
 8006858:	5ccb      	ldrb	r3, [r1, r3]
 800685a:	fa22 f303 	lsr.w	r3, r2, r3
 800685e:	4a09      	ldr	r2, [pc, #36]	; (8006884 <HAL_RCC_ClockConfig+0x1c4>)
 8006860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006862:	4b09      	ldr	r3, [pc, #36]	; (8006888 <HAL_RCC_ClockConfig+0x1c8>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4618      	mov	r0, r3
 8006868:	f7fd f9a8 	bl	8003bbc <HAL_InitTick>

  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	40023c00 	.word	0x40023c00
 800687c:	40023800 	.word	0x40023800
 8006880:	08009b08 	.word	0x08009b08
 8006884:	200005fc 	.word	0x200005fc
 8006888:	20000600 	.word	0x20000600

0800688c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800688c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006890:	b090      	sub	sp, #64	; 0x40
 8006892:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006894:	2300      	movs	r3, #0
 8006896:	637b      	str	r3, [r7, #52]	; 0x34
 8006898:	2300      	movs	r3, #0
 800689a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800689c:	2300      	movs	r3, #0
 800689e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068a4:	4b59      	ldr	r3, [pc, #356]	; (8006a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	f003 030c 	and.w	r3, r3, #12
 80068ac:	2b08      	cmp	r3, #8
 80068ae:	d00d      	beq.n	80068cc <HAL_RCC_GetSysClockFreq+0x40>
 80068b0:	2b08      	cmp	r3, #8
 80068b2:	f200 80a1 	bhi.w	80069f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d002      	beq.n	80068c0 <HAL_RCC_GetSysClockFreq+0x34>
 80068ba:	2b04      	cmp	r3, #4
 80068bc:	d003      	beq.n	80068c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80068be:	e09b      	b.n	80069f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068c0:	4b53      	ldr	r3, [pc, #332]	; (8006a10 <HAL_RCC_GetSysClockFreq+0x184>)
 80068c2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80068c4:	e09b      	b.n	80069fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068c6:	4b53      	ldr	r3, [pc, #332]	; (8006a14 <HAL_RCC_GetSysClockFreq+0x188>)
 80068c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80068ca:	e098      	b.n	80069fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068cc:	4b4f      	ldr	r3, [pc, #316]	; (8006a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068d4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068d6:	4b4d      	ldr	r3, [pc, #308]	; (8006a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d028      	beq.n	8006934 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068e2:	4b4a      	ldr	r3, [pc, #296]	; (8006a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	099b      	lsrs	r3, r3, #6
 80068e8:	2200      	movs	r2, #0
 80068ea:	623b      	str	r3, [r7, #32]
 80068ec:	627a      	str	r2, [r7, #36]	; 0x24
 80068ee:	6a3b      	ldr	r3, [r7, #32]
 80068f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80068f4:	2100      	movs	r1, #0
 80068f6:	4b47      	ldr	r3, [pc, #284]	; (8006a14 <HAL_RCC_GetSysClockFreq+0x188>)
 80068f8:	fb03 f201 	mul.w	r2, r3, r1
 80068fc:	2300      	movs	r3, #0
 80068fe:	fb00 f303 	mul.w	r3, r0, r3
 8006902:	4413      	add	r3, r2
 8006904:	4a43      	ldr	r2, [pc, #268]	; (8006a14 <HAL_RCC_GetSysClockFreq+0x188>)
 8006906:	fba0 1202 	umull	r1, r2, r0, r2
 800690a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800690c:	460a      	mov	r2, r1
 800690e:	62ba      	str	r2, [r7, #40]	; 0x28
 8006910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006912:	4413      	add	r3, r2
 8006914:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006918:	2200      	movs	r2, #0
 800691a:	61bb      	str	r3, [r7, #24]
 800691c:	61fa      	str	r2, [r7, #28]
 800691e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006922:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006926:	f7f9 ffe1 	bl	80008ec <__aeabi_uldivmod>
 800692a:	4602      	mov	r2, r0
 800692c:	460b      	mov	r3, r1
 800692e:	4613      	mov	r3, r2
 8006930:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006932:	e053      	b.n	80069dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006934:	4b35      	ldr	r3, [pc, #212]	; (8006a0c <HAL_RCC_GetSysClockFreq+0x180>)
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	099b      	lsrs	r3, r3, #6
 800693a:	2200      	movs	r2, #0
 800693c:	613b      	str	r3, [r7, #16]
 800693e:	617a      	str	r2, [r7, #20]
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006946:	f04f 0b00 	mov.w	fp, #0
 800694a:	4652      	mov	r2, sl
 800694c:	465b      	mov	r3, fp
 800694e:	f04f 0000 	mov.w	r0, #0
 8006952:	f04f 0100 	mov.w	r1, #0
 8006956:	0159      	lsls	r1, r3, #5
 8006958:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800695c:	0150      	lsls	r0, r2, #5
 800695e:	4602      	mov	r2, r0
 8006960:	460b      	mov	r3, r1
 8006962:	ebb2 080a 	subs.w	r8, r2, sl
 8006966:	eb63 090b 	sbc.w	r9, r3, fp
 800696a:	f04f 0200 	mov.w	r2, #0
 800696e:	f04f 0300 	mov.w	r3, #0
 8006972:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006976:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800697a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800697e:	ebb2 0408 	subs.w	r4, r2, r8
 8006982:	eb63 0509 	sbc.w	r5, r3, r9
 8006986:	f04f 0200 	mov.w	r2, #0
 800698a:	f04f 0300 	mov.w	r3, #0
 800698e:	00eb      	lsls	r3, r5, #3
 8006990:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006994:	00e2      	lsls	r2, r4, #3
 8006996:	4614      	mov	r4, r2
 8006998:	461d      	mov	r5, r3
 800699a:	eb14 030a 	adds.w	r3, r4, sl
 800699e:	603b      	str	r3, [r7, #0]
 80069a0:	eb45 030b 	adc.w	r3, r5, fp
 80069a4:	607b      	str	r3, [r7, #4]
 80069a6:	f04f 0200 	mov.w	r2, #0
 80069aa:	f04f 0300 	mov.w	r3, #0
 80069ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80069b2:	4629      	mov	r1, r5
 80069b4:	028b      	lsls	r3, r1, #10
 80069b6:	4621      	mov	r1, r4
 80069b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80069bc:	4621      	mov	r1, r4
 80069be:	028a      	lsls	r2, r1, #10
 80069c0:	4610      	mov	r0, r2
 80069c2:	4619      	mov	r1, r3
 80069c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c6:	2200      	movs	r2, #0
 80069c8:	60bb      	str	r3, [r7, #8]
 80069ca:	60fa      	str	r2, [r7, #12]
 80069cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069d0:	f7f9 ff8c 	bl	80008ec <__aeabi_uldivmod>
 80069d4:	4602      	mov	r2, r0
 80069d6:	460b      	mov	r3, r1
 80069d8:	4613      	mov	r3, r2
 80069da:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80069dc:	4b0b      	ldr	r3, [pc, #44]	; (8006a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	0c1b      	lsrs	r3, r3, #16
 80069e2:	f003 0303 	and.w	r3, r3, #3
 80069e6:	3301      	adds	r3, #1
 80069e8:	005b      	lsls	r3, r3, #1
 80069ea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80069ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80069f6:	e002      	b.n	80069fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80069f8:	4b05      	ldr	r3, [pc, #20]	; (8006a10 <HAL_RCC_GetSysClockFreq+0x184>)
 80069fa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80069fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3740      	adds	r7, #64	; 0x40
 8006a04:	46bd      	mov	sp, r7
 8006a06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a0a:	bf00      	nop
 8006a0c:	40023800 	.word	0x40023800
 8006a10:	00f42400 	.word	0x00f42400
 8006a14:	017d7840 	.word	0x017d7840

08006a18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a1c:	4b03      	ldr	r3, [pc, #12]	; (8006a2c <HAL_RCC_GetHCLKFreq+0x14>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	200005fc 	.word	0x200005fc

08006a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a34:	f7ff fff0 	bl	8006a18 <HAL_RCC_GetHCLKFreq>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	4b05      	ldr	r3, [pc, #20]	; (8006a50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	0a9b      	lsrs	r3, r3, #10
 8006a40:	f003 0307 	and.w	r3, r3, #7
 8006a44:	4903      	ldr	r1, [pc, #12]	; (8006a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a46:	5ccb      	ldrb	r3, [r1, r3]
 8006a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	40023800 	.word	0x40023800
 8006a54:	08009b18 	.word	0x08009b18

08006a58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e07b      	b.n	8006b62 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d108      	bne.n	8006a84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a7a:	d009      	beq.n	8006a90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	61da      	str	r2, [r3, #28]
 8006a82:	e005      	b.n	8006a90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d106      	bne.n	8006ab0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f7fc fe38 	bl	8003720 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ac6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006ad8:	431a      	orrs	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ae2:	431a      	orrs	r2, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	f003 0302 	and.w	r3, r3, #2
 8006aec:	431a      	orrs	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	431a      	orrs	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b00:	431a      	orrs	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	69db      	ldr	r3, [r3, #28]
 8006b06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b0a:	431a      	orrs	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b14:	ea42 0103 	orr.w	r1, r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	430a      	orrs	r2, r1
 8006b26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	699b      	ldr	r3, [r3, #24]
 8006b2c:	0c1b      	lsrs	r3, r3, #16
 8006b2e:	f003 0104 	and.w	r1, r3, #4
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b36:	f003 0210 	and.w	r2, r3, #16
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	69da      	ldr	r2, [r3, #28]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b088      	sub	sp, #32
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	60f8      	str	r0, [r7, #12]
 8006b72:	60b9      	str	r1, [r7, #8]
 8006b74:	603b      	str	r3, [r7, #0]
 8006b76:	4613      	mov	r3, r2
 8006b78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d101      	bne.n	8006b8c <HAL_SPI_Transmit+0x22>
 8006b88:	2302      	movs	r3, #2
 8006b8a:	e126      	b.n	8006dda <HAL_SPI_Transmit+0x270>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b94:	f7fd f856 	bl	8003c44 <HAL_GetTick>
 8006b98:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006b9a:	88fb      	ldrh	r3, [r7, #6]
 8006b9c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d002      	beq.n	8006bb0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006baa:	2302      	movs	r3, #2
 8006bac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006bae:	e10b      	b.n	8006dc8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d002      	beq.n	8006bbc <HAL_SPI_Transmit+0x52>
 8006bb6:	88fb      	ldrh	r3, [r7, #6]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d102      	bne.n	8006bc2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006bc0:	e102      	b.n	8006dc8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2203      	movs	r2, #3
 8006bc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	88fa      	ldrh	r2, [r7, #6]
 8006bda:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	88fa      	ldrh	r2, [r7, #6]
 8006be0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c08:	d10f      	bne.n	8006c2a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c34:	2b40      	cmp	r3, #64	; 0x40
 8006c36:	d007      	beq.n	8006c48 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c50:	d14b      	bne.n	8006cea <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d002      	beq.n	8006c60 <HAL_SPI_Transmit+0xf6>
 8006c5a:	8afb      	ldrh	r3, [r7, #22]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d13e      	bne.n	8006cde <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c64:	881a      	ldrh	r2, [r3, #0]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c70:	1c9a      	adds	r2, r3, #2
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006c84:	e02b      	b.n	8006cde <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f003 0302 	and.w	r3, r3, #2
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d112      	bne.n	8006cba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c98:	881a      	ldrh	r2, [r3, #0]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca4:	1c9a      	adds	r2, r3, #2
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	86da      	strh	r2, [r3, #54]	; 0x36
 8006cb8:	e011      	b.n	8006cde <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cba:	f7fc ffc3 	bl	8003c44 <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	683a      	ldr	r2, [r7, #0]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d803      	bhi.n	8006cd2 <HAL_SPI_Transmit+0x168>
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd0:	d102      	bne.n	8006cd8 <HAL_SPI_Transmit+0x16e>
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d102      	bne.n	8006cde <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006cdc:	e074      	b.n	8006dc8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1ce      	bne.n	8006c86 <HAL_SPI_Transmit+0x11c>
 8006ce8:	e04c      	b.n	8006d84 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d002      	beq.n	8006cf8 <HAL_SPI_Transmit+0x18e>
 8006cf2:	8afb      	ldrh	r3, [r7, #22]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d140      	bne.n	8006d7a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	330c      	adds	r3, #12
 8006d02:	7812      	ldrb	r2, [r2, #0]
 8006d04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0a:	1c5a      	adds	r2, r3, #1
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	3b01      	subs	r3, #1
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006d1e:	e02c      	b.n	8006d7a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f003 0302 	and.w	r3, r3, #2
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d113      	bne.n	8006d56 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	330c      	adds	r3, #12
 8006d38:	7812      	ldrb	r2, [r2, #0]
 8006d3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d40:	1c5a      	adds	r2, r3, #1
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	86da      	strh	r2, [r3, #54]	; 0x36
 8006d54:	e011      	b.n	8006d7a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d56:	f7fc ff75 	bl	8003c44 <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	683a      	ldr	r2, [r7, #0]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d803      	bhi.n	8006d6e <HAL_SPI_Transmit+0x204>
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6c:	d102      	bne.n	8006d74 <HAL_SPI_Transmit+0x20a>
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d102      	bne.n	8006d7a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d78:	e026      	b.n	8006dc8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1cd      	bne.n	8006d20 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d84:	69ba      	ldr	r2, [r7, #24]
 8006d86:	6839      	ldr	r1, [r7, #0]
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f000 f8b3 	bl	8006ef4 <SPI_EndRxTxTransaction>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d002      	beq.n	8006d9a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2220      	movs	r2, #32
 8006d98:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d10a      	bne.n	8006db8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006da2:	2300      	movs	r3, #0
 8006da4:	613b      	str	r3, [r7, #16]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	613b      	str	r3, [r7, #16]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	613b      	str	r3, [r7, #16]
 8006db6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d002      	beq.n	8006dc6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	77fb      	strb	r3, [r7, #31]
 8006dc4:	e000      	b.n	8006dc8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006dc6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006dd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3720      	adds	r7, #32
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
	...

08006de4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b088      	sub	sp, #32
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	603b      	str	r3, [r7, #0]
 8006df0:	4613      	mov	r3, r2
 8006df2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006df4:	f7fc ff26 	bl	8003c44 <HAL_GetTick>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfc:	1a9b      	subs	r3, r3, r2
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	4413      	add	r3, r2
 8006e02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e04:	f7fc ff1e 	bl	8003c44 <HAL_GetTick>
 8006e08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e0a:	4b39      	ldr	r3, [pc, #228]	; (8006ef0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	015b      	lsls	r3, r3, #5
 8006e10:	0d1b      	lsrs	r3, r3, #20
 8006e12:	69fa      	ldr	r2, [r7, #28]
 8006e14:	fb02 f303 	mul.w	r3, r2, r3
 8006e18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e1a:	e054      	b.n	8006ec6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e22:	d050      	beq.n	8006ec6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e24:	f7fc ff0e 	bl	8003c44 <HAL_GetTick>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	69fa      	ldr	r2, [r7, #28]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d902      	bls.n	8006e3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d13d      	bne.n	8006eb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	685a      	ldr	r2, [r3, #4]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e52:	d111      	bne.n	8006e78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e5c:	d004      	beq.n	8006e68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e66:	d107      	bne.n	8006e78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e80:	d10f      	bne.n	8006ea2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e90:	601a      	str	r2, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ea0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e017      	b.n	8006ee6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d101      	bne.n	8006ec0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	689a      	ldr	r2, [r3, #8]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	4013      	ands	r3, r2
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	bf0c      	ite	eq
 8006ed6:	2301      	moveq	r3, #1
 8006ed8:	2300      	movne	r3, #0
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	461a      	mov	r2, r3
 8006ede:	79fb      	ldrb	r3, [r7, #7]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d19b      	bne.n	8006e1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3720      	adds	r7, #32
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	200005fc 	.word	0x200005fc

08006ef4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b088      	sub	sp, #32
 8006ef8:	af02      	add	r7, sp, #8
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006f00:	4b1b      	ldr	r3, [pc, #108]	; (8006f70 <SPI_EndRxTxTransaction+0x7c>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a1b      	ldr	r2, [pc, #108]	; (8006f74 <SPI_EndRxTxTransaction+0x80>)
 8006f06:	fba2 2303 	umull	r2, r3, r2, r3
 8006f0a:	0d5b      	lsrs	r3, r3, #21
 8006f0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006f10:	fb02 f303 	mul.w	r3, r2, r3
 8006f14:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f1e:	d112      	bne.n	8006f46 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	2200      	movs	r2, #0
 8006f28:	2180      	movs	r1, #128	; 0x80
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f7ff ff5a 	bl	8006de4 <SPI_WaitFlagStateUntilTimeout>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d016      	beq.n	8006f64 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f3a:	f043 0220 	orr.w	r2, r3, #32
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e00f      	b.n	8006f66 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00a      	beq.n	8006f62 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f5c:	2b80      	cmp	r3, #128	; 0x80
 8006f5e:	d0f2      	beq.n	8006f46 <SPI_EndRxTxTransaction+0x52>
 8006f60:	e000      	b.n	8006f64 <SPI_EndRxTxTransaction+0x70>
        break;
 8006f62:	bf00      	nop
  }

  return HAL_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3718      	adds	r7, #24
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	200005fc 	.word	0x200005fc
 8006f74:	165e9f81 	.word	0x165e9f81

08006f78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e041      	b.n	800700e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d106      	bne.n	8006fa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7fc fc82 	bl	80038a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	3304      	adds	r3, #4
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	4610      	mov	r0, r2
 8006fb8:	f000 fd54 	bl	8007a64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
	...

08007018 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b01      	cmp	r3, #1
 800702a:	d001      	beq.n	8007030 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e03c      	b.n	80070aa <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2202      	movs	r2, #2
 8007034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a1e      	ldr	r2, [pc, #120]	; (80070b8 <HAL_TIM_Base_Start+0xa0>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d018      	beq.n	8007074 <HAL_TIM_Base_Start+0x5c>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800704a:	d013      	beq.n	8007074 <HAL_TIM_Base_Start+0x5c>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a1a      	ldr	r2, [pc, #104]	; (80070bc <HAL_TIM_Base_Start+0xa4>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d00e      	beq.n	8007074 <HAL_TIM_Base_Start+0x5c>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a19      	ldr	r2, [pc, #100]	; (80070c0 <HAL_TIM_Base_Start+0xa8>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d009      	beq.n	8007074 <HAL_TIM_Base_Start+0x5c>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a17      	ldr	r2, [pc, #92]	; (80070c4 <HAL_TIM_Base_Start+0xac>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d004      	beq.n	8007074 <HAL_TIM_Base_Start+0x5c>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a16      	ldr	r2, [pc, #88]	; (80070c8 <HAL_TIM_Base_Start+0xb0>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d111      	bne.n	8007098 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f003 0307 	and.w	r3, r3, #7
 800707e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2b06      	cmp	r3, #6
 8007084:	d010      	beq.n	80070a8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f042 0201 	orr.w	r2, r2, #1
 8007094:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007096:	e007      	b.n	80070a8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f042 0201 	orr.w	r2, r2, #1
 80070a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3714      	adds	r7, #20
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	40010000 	.word	0x40010000
 80070bc:	40000400 	.word	0x40000400
 80070c0:	40000800 	.word	0x40000800
 80070c4:	40000c00 	.word	0x40000c00
 80070c8:	40014000 	.word	0x40014000

080070cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d001      	beq.n	80070e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e044      	b.n	800716e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2202      	movs	r2, #2
 80070e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68da      	ldr	r2, [r3, #12]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f042 0201 	orr.w	r2, r2, #1
 80070fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a1e      	ldr	r2, [pc, #120]	; (800717c <HAL_TIM_Base_Start_IT+0xb0>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d018      	beq.n	8007138 <HAL_TIM_Base_Start_IT+0x6c>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800710e:	d013      	beq.n	8007138 <HAL_TIM_Base_Start_IT+0x6c>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a1a      	ldr	r2, [pc, #104]	; (8007180 <HAL_TIM_Base_Start_IT+0xb4>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d00e      	beq.n	8007138 <HAL_TIM_Base_Start_IT+0x6c>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a19      	ldr	r2, [pc, #100]	; (8007184 <HAL_TIM_Base_Start_IT+0xb8>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d009      	beq.n	8007138 <HAL_TIM_Base_Start_IT+0x6c>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a17      	ldr	r2, [pc, #92]	; (8007188 <HAL_TIM_Base_Start_IT+0xbc>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d004      	beq.n	8007138 <HAL_TIM_Base_Start_IT+0x6c>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a16      	ldr	r2, [pc, #88]	; (800718c <HAL_TIM_Base_Start_IT+0xc0>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d111      	bne.n	800715c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	f003 0307 	and.w	r3, r3, #7
 8007142:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2b06      	cmp	r3, #6
 8007148:	d010      	beq.n	800716c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f042 0201 	orr.w	r2, r2, #1
 8007158:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800715a:	e007      	b.n	800716c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f042 0201 	orr.w	r2, r2, #1
 800716a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3714      	adds	r7, #20
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	40010000 	.word	0x40010000
 8007180:	40000400 	.word	0x40000400
 8007184:	40000800 	.word	0x40000800
 8007188:	40000c00 	.word	0x40000c00
 800718c:	40014000 	.word	0x40014000

08007190 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d101      	bne.n	80071a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	e041      	b.n	8007226 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d106      	bne.n	80071bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f839 	bl	800722e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2202      	movs	r2, #2
 80071c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	3304      	adds	r3, #4
 80071cc:	4619      	mov	r1, r3
 80071ce:	4610      	mov	r0, r2
 80071d0:	f000 fc48 	bl	8007a64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800722e:	b480      	push	{r7}
 8007230:	b083      	sub	sp, #12
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007236:	bf00      	nop
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
	...

08007244 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d109      	bne.n	8007268 <HAL_TIM_PWM_Start+0x24>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800725a:	b2db      	uxtb	r3, r3
 800725c:	2b01      	cmp	r3, #1
 800725e:	bf14      	ite	ne
 8007260:	2301      	movne	r3, #1
 8007262:	2300      	moveq	r3, #0
 8007264:	b2db      	uxtb	r3, r3
 8007266:	e022      	b.n	80072ae <HAL_TIM_PWM_Start+0x6a>
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	2b04      	cmp	r3, #4
 800726c:	d109      	bne.n	8007282 <HAL_TIM_PWM_Start+0x3e>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b01      	cmp	r3, #1
 8007278:	bf14      	ite	ne
 800727a:	2301      	movne	r3, #1
 800727c:	2300      	moveq	r3, #0
 800727e:	b2db      	uxtb	r3, r3
 8007280:	e015      	b.n	80072ae <HAL_TIM_PWM_Start+0x6a>
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	2b08      	cmp	r3, #8
 8007286:	d109      	bne.n	800729c <HAL_TIM_PWM_Start+0x58>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b01      	cmp	r3, #1
 8007292:	bf14      	ite	ne
 8007294:	2301      	movne	r3, #1
 8007296:	2300      	moveq	r3, #0
 8007298:	b2db      	uxtb	r3, r3
 800729a:	e008      	b.n	80072ae <HAL_TIM_PWM_Start+0x6a>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	bf14      	ite	ne
 80072a8:	2301      	movne	r3, #1
 80072aa:	2300      	moveq	r3, #0
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d001      	beq.n	80072b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e068      	b.n	8007388 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d104      	bne.n	80072c6 <HAL_TIM_PWM_Start+0x82>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2202      	movs	r2, #2
 80072c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072c4:	e013      	b.n	80072ee <HAL_TIM_PWM_Start+0xaa>
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	2b04      	cmp	r3, #4
 80072ca:	d104      	bne.n	80072d6 <HAL_TIM_PWM_Start+0x92>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2202      	movs	r2, #2
 80072d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072d4:	e00b      	b.n	80072ee <HAL_TIM_PWM_Start+0xaa>
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	2b08      	cmp	r3, #8
 80072da:	d104      	bne.n	80072e6 <HAL_TIM_PWM_Start+0xa2>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2202      	movs	r2, #2
 80072e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072e4:	e003      	b.n	80072ee <HAL_TIM_PWM_Start+0xaa>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2202      	movs	r2, #2
 80072ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2201      	movs	r2, #1
 80072f4:	6839      	ldr	r1, [r7, #0]
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 fe5a 	bl	8007fb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a23      	ldr	r2, [pc, #140]	; (8007390 <HAL_TIM_PWM_Start+0x14c>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d107      	bne.n	8007316 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007314:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a1d      	ldr	r2, [pc, #116]	; (8007390 <HAL_TIM_PWM_Start+0x14c>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d018      	beq.n	8007352 <HAL_TIM_PWM_Start+0x10e>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007328:	d013      	beq.n	8007352 <HAL_TIM_PWM_Start+0x10e>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a19      	ldr	r2, [pc, #100]	; (8007394 <HAL_TIM_PWM_Start+0x150>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d00e      	beq.n	8007352 <HAL_TIM_PWM_Start+0x10e>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a17      	ldr	r2, [pc, #92]	; (8007398 <HAL_TIM_PWM_Start+0x154>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d009      	beq.n	8007352 <HAL_TIM_PWM_Start+0x10e>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a16      	ldr	r2, [pc, #88]	; (800739c <HAL_TIM_PWM_Start+0x158>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d004      	beq.n	8007352 <HAL_TIM_PWM_Start+0x10e>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a14      	ldr	r2, [pc, #80]	; (80073a0 <HAL_TIM_PWM_Start+0x15c>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d111      	bne.n	8007376 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	f003 0307 	and.w	r3, r3, #7
 800735c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2b06      	cmp	r3, #6
 8007362:	d010      	beq.n	8007386 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f042 0201 	orr.w	r2, r2, #1
 8007372:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007374:	e007      	b.n	8007386 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f042 0201 	orr.w	r2, r2, #1
 8007384:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	40010000 	.word	0x40010000
 8007394:	40000400 	.word	0x40000400
 8007398:	40000800 	.word	0x40000800
 800739c:	40000c00 	.word	0x40000c00
 80073a0:	40014000 	.word	0x40014000

080073a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d101      	bne.n	80073b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e097      	b.n	80074e8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d106      	bne.n	80073d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f7fc f9ef 	bl	80037b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2202      	movs	r2, #2
 80073d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	6812      	ldr	r2, [r2, #0]
 80073e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073e8:	f023 0307 	bic.w	r3, r3, #7
 80073ec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	3304      	adds	r3, #4
 80073f6:	4619      	mov	r1, r3
 80073f8:	4610      	mov	r0, r2
 80073fa:	f000 fb33 	bl	8007a64 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	6a1b      	ldr	r3, [r3, #32]
 8007414:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	4313      	orrs	r3, r2
 800741e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007426:	f023 0303 	bic.w	r3, r3, #3
 800742a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	689a      	ldr	r2, [r3, #8]
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	021b      	lsls	r3, r3, #8
 8007436:	4313      	orrs	r3, r2
 8007438:	693a      	ldr	r2, [r7, #16]
 800743a:	4313      	orrs	r3, r2
 800743c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007444:	f023 030c 	bic.w	r3, r3, #12
 8007448:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007450:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007454:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	68da      	ldr	r2, [r3, #12]
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	69db      	ldr	r3, [r3, #28]
 800745e:	021b      	lsls	r3, r3, #8
 8007460:	4313      	orrs	r3, r2
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	4313      	orrs	r3, r2
 8007466:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	011a      	lsls	r2, r3, #4
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	031b      	lsls	r3, r3, #12
 8007474:	4313      	orrs	r3, r2
 8007476:	693a      	ldr	r2, [r7, #16]
 8007478:	4313      	orrs	r3, r2
 800747a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007482:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800748a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	011b      	lsls	r3, r3, #4
 8007496:	4313      	orrs	r3, r2
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	4313      	orrs	r3, r2
 800749c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	693a      	ldr	r2, [r7, #16]
 80074ac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2201      	movs	r2, #1
 80074c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3718      	adds	r7, #24
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	f003 0302 	and.w	r3, r3, #2
 8007502:	2b02      	cmp	r3, #2
 8007504:	d122      	bne.n	800754c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	f003 0302 	and.w	r3, r3, #2
 8007510:	2b02      	cmp	r3, #2
 8007512:	d11b      	bne.n	800754c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f06f 0202 	mvn.w	r2, #2
 800751c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2201      	movs	r2, #1
 8007522:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	699b      	ldr	r3, [r3, #24]
 800752a:	f003 0303 	and.w	r3, r3, #3
 800752e:	2b00      	cmp	r3, #0
 8007530:	d003      	beq.n	800753a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 fa77 	bl	8007a26 <HAL_TIM_IC_CaptureCallback>
 8007538:	e005      	b.n	8007546 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 fa69 	bl	8007a12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fa7a 	bl	8007a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	f003 0304 	and.w	r3, r3, #4
 8007556:	2b04      	cmp	r3, #4
 8007558:	d122      	bne.n	80075a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	f003 0304 	and.w	r3, r3, #4
 8007564:	2b04      	cmp	r3, #4
 8007566:	d11b      	bne.n	80075a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f06f 0204 	mvn.w	r2, #4
 8007570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2202      	movs	r2, #2
 8007576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007582:	2b00      	cmp	r3, #0
 8007584:	d003      	beq.n	800758e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 fa4d 	bl	8007a26 <HAL_TIM_IC_CaptureCallback>
 800758c:	e005      	b.n	800759a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 fa3f 	bl	8007a12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 fa50 	bl	8007a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	f003 0308 	and.w	r3, r3, #8
 80075aa:	2b08      	cmp	r3, #8
 80075ac:	d122      	bne.n	80075f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	f003 0308 	and.w	r3, r3, #8
 80075b8:	2b08      	cmp	r3, #8
 80075ba:	d11b      	bne.n	80075f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f06f 0208 	mvn.w	r2, #8
 80075c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2204      	movs	r2, #4
 80075ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	69db      	ldr	r3, [r3, #28]
 80075d2:	f003 0303 	and.w	r3, r3, #3
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fa23 	bl	8007a26 <HAL_TIM_IC_CaptureCallback>
 80075e0:	e005      	b.n	80075ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 fa15 	bl	8007a12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 fa26 	bl	8007a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	f003 0310 	and.w	r3, r3, #16
 80075fe:	2b10      	cmp	r3, #16
 8007600:	d122      	bne.n	8007648 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	f003 0310 	and.w	r3, r3, #16
 800760c:	2b10      	cmp	r3, #16
 800760e:	d11b      	bne.n	8007648 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f06f 0210 	mvn.w	r2, #16
 8007618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2208      	movs	r2, #8
 800761e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	69db      	ldr	r3, [r3, #28]
 8007626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800762a:	2b00      	cmp	r3, #0
 800762c:	d003      	beq.n	8007636 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f9f9 	bl	8007a26 <HAL_TIM_IC_CaptureCallback>
 8007634:	e005      	b.n	8007642 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 f9eb 	bl	8007a12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f9fc 	bl	8007a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	2b01      	cmp	r3, #1
 8007654:	d10e      	bne.n	8007674 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	f003 0301 	and.w	r3, r3, #1
 8007660:	2b01      	cmp	r3, #1
 8007662:	d107      	bne.n	8007674 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f06f 0201 	mvn.w	r2, #1
 800766c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f7fa f91a 	bl	80018a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800767e:	2b80      	cmp	r3, #128	; 0x80
 8007680:	d10e      	bne.n	80076a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800768c:	2b80      	cmp	r3, #128	; 0x80
 800768e:	d107      	bne.n	80076a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fd26 	bl	80080ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076aa:	2b40      	cmp	r3, #64	; 0x40
 80076ac:	d10e      	bne.n	80076cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b8:	2b40      	cmp	r3, #64	; 0x40
 80076ba:	d107      	bne.n	80076cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80076c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 f9c1 	bl	8007a4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	f003 0320 	and.w	r3, r3, #32
 80076d6:	2b20      	cmp	r3, #32
 80076d8:	d10e      	bne.n	80076f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	f003 0320 	and.w	r3, r3, #32
 80076e4:	2b20      	cmp	r3, #32
 80076e6:	d107      	bne.n	80076f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f06f 0220 	mvn.w	r2, #32
 80076f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 fcf0 	bl	80080d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076f8:	bf00      	nop
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800770c:	2300      	movs	r3, #0
 800770e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007716:	2b01      	cmp	r3, #1
 8007718:	d101      	bne.n	800771e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800771a:	2302      	movs	r3, #2
 800771c:	e0ae      	b.n	800787c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2201      	movs	r2, #1
 8007722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2b0c      	cmp	r3, #12
 800772a:	f200 809f 	bhi.w	800786c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800772e:	a201      	add	r2, pc, #4	; (adr r2, 8007734 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007734:	08007769 	.word	0x08007769
 8007738:	0800786d 	.word	0x0800786d
 800773c:	0800786d 	.word	0x0800786d
 8007740:	0800786d 	.word	0x0800786d
 8007744:	080077a9 	.word	0x080077a9
 8007748:	0800786d 	.word	0x0800786d
 800774c:	0800786d 	.word	0x0800786d
 8007750:	0800786d 	.word	0x0800786d
 8007754:	080077eb 	.word	0x080077eb
 8007758:	0800786d 	.word	0x0800786d
 800775c:	0800786d 	.word	0x0800786d
 8007760:	0800786d 	.word	0x0800786d
 8007764:	0800782b 	.word	0x0800782b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68b9      	ldr	r1, [r7, #8]
 800776e:	4618      	mov	r0, r3
 8007770:	f000 f9f8 	bl	8007b64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	699a      	ldr	r2, [r3, #24]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f042 0208 	orr.w	r2, r2, #8
 8007782:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	699a      	ldr	r2, [r3, #24]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f022 0204 	bic.w	r2, r2, #4
 8007792:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6999      	ldr	r1, [r3, #24]
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	691a      	ldr	r2, [r3, #16]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	430a      	orrs	r2, r1
 80077a4:	619a      	str	r2, [r3, #24]
      break;
 80077a6:	e064      	b.n	8007872 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68b9      	ldr	r1, [r7, #8]
 80077ae:	4618      	mov	r0, r3
 80077b0:	f000 fa3e 	bl	8007c30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	699a      	ldr	r2, [r3, #24]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	699a      	ldr	r2, [r3, #24]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6999      	ldr	r1, [r3, #24]
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	021a      	lsls	r2, r3, #8
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	430a      	orrs	r2, r1
 80077e6:	619a      	str	r2, [r3, #24]
      break;
 80077e8:	e043      	b.n	8007872 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68b9      	ldr	r1, [r7, #8]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f000 fa89 	bl	8007d08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	69da      	ldr	r2, [r3, #28]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f042 0208 	orr.w	r2, r2, #8
 8007804:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	69da      	ldr	r2, [r3, #28]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f022 0204 	bic.w	r2, r2, #4
 8007814:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	69d9      	ldr	r1, [r3, #28]
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	691a      	ldr	r2, [r3, #16]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	430a      	orrs	r2, r1
 8007826:	61da      	str	r2, [r3, #28]
      break;
 8007828:	e023      	b.n	8007872 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68b9      	ldr	r1, [r7, #8]
 8007830:	4618      	mov	r0, r3
 8007832:	f000 fad3 	bl	8007ddc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	69da      	ldr	r2, [r3, #28]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007844:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	69da      	ldr	r2, [r3, #28]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007854:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	69d9      	ldr	r1, [r3, #28]
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	021a      	lsls	r2, r3, #8
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	430a      	orrs	r2, r1
 8007868:	61da      	str	r2, [r3, #28]
      break;
 800786a:	e002      	b.n	8007872 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	75fb      	strb	r3, [r7, #23]
      break;
 8007870:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800787a:	7dfb      	ldrb	r3, [r7, #23]
}
 800787c:	4618      	mov	r0, r3
 800787e:	3718      	adds	r7, #24
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800788e:	2300      	movs	r3, #0
 8007890:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007898:	2b01      	cmp	r3, #1
 800789a:	d101      	bne.n	80078a0 <HAL_TIM_ConfigClockSource+0x1c>
 800789c:	2302      	movs	r3, #2
 800789e:	e0b4      	b.n	8007a0a <HAL_TIM_ConfigClockSource+0x186>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2202      	movs	r2, #2
 80078ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80078be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68ba      	ldr	r2, [r7, #8]
 80078ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078d8:	d03e      	beq.n	8007958 <HAL_TIM_ConfigClockSource+0xd4>
 80078da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078de:	f200 8087 	bhi.w	80079f0 <HAL_TIM_ConfigClockSource+0x16c>
 80078e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078e6:	f000 8086 	beq.w	80079f6 <HAL_TIM_ConfigClockSource+0x172>
 80078ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078ee:	d87f      	bhi.n	80079f0 <HAL_TIM_ConfigClockSource+0x16c>
 80078f0:	2b70      	cmp	r3, #112	; 0x70
 80078f2:	d01a      	beq.n	800792a <HAL_TIM_ConfigClockSource+0xa6>
 80078f4:	2b70      	cmp	r3, #112	; 0x70
 80078f6:	d87b      	bhi.n	80079f0 <HAL_TIM_ConfigClockSource+0x16c>
 80078f8:	2b60      	cmp	r3, #96	; 0x60
 80078fa:	d050      	beq.n	800799e <HAL_TIM_ConfigClockSource+0x11a>
 80078fc:	2b60      	cmp	r3, #96	; 0x60
 80078fe:	d877      	bhi.n	80079f0 <HAL_TIM_ConfigClockSource+0x16c>
 8007900:	2b50      	cmp	r3, #80	; 0x50
 8007902:	d03c      	beq.n	800797e <HAL_TIM_ConfigClockSource+0xfa>
 8007904:	2b50      	cmp	r3, #80	; 0x50
 8007906:	d873      	bhi.n	80079f0 <HAL_TIM_ConfigClockSource+0x16c>
 8007908:	2b40      	cmp	r3, #64	; 0x40
 800790a:	d058      	beq.n	80079be <HAL_TIM_ConfigClockSource+0x13a>
 800790c:	2b40      	cmp	r3, #64	; 0x40
 800790e:	d86f      	bhi.n	80079f0 <HAL_TIM_ConfigClockSource+0x16c>
 8007910:	2b30      	cmp	r3, #48	; 0x30
 8007912:	d064      	beq.n	80079de <HAL_TIM_ConfigClockSource+0x15a>
 8007914:	2b30      	cmp	r3, #48	; 0x30
 8007916:	d86b      	bhi.n	80079f0 <HAL_TIM_ConfigClockSource+0x16c>
 8007918:	2b20      	cmp	r3, #32
 800791a:	d060      	beq.n	80079de <HAL_TIM_ConfigClockSource+0x15a>
 800791c:	2b20      	cmp	r3, #32
 800791e:	d867      	bhi.n	80079f0 <HAL_TIM_ConfigClockSource+0x16c>
 8007920:	2b00      	cmp	r3, #0
 8007922:	d05c      	beq.n	80079de <HAL_TIM_ConfigClockSource+0x15a>
 8007924:	2b10      	cmp	r3, #16
 8007926:	d05a      	beq.n	80079de <HAL_TIM_ConfigClockSource+0x15a>
 8007928:	e062      	b.n	80079f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6818      	ldr	r0, [r3, #0]
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	6899      	ldr	r1, [r3, #8]
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	685a      	ldr	r2, [r3, #4]
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	f000 fb19 	bl	8007f70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800794c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	68ba      	ldr	r2, [r7, #8]
 8007954:	609a      	str	r2, [r3, #8]
      break;
 8007956:	e04f      	b.n	80079f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6818      	ldr	r0, [r3, #0]
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	6899      	ldr	r1, [r3, #8]
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	685a      	ldr	r2, [r3, #4]
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	f000 fb02 	bl	8007f70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	689a      	ldr	r2, [r3, #8]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800797a:	609a      	str	r2, [r3, #8]
      break;
 800797c:	e03c      	b.n	80079f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6818      	ldr	r0, [r3, #0]
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	6859      	ldr	r1, [r3, #4]
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	461a      	mov	r2, r3
 800798c:	f000 fa76 	bl	8007e7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2150      	movs	r1, #80	; 0x50
 8007996:	4618      	mov	r0, r3
 8007998:	f000 facf 	bl	8007f3a <TIM_ITRx_SetConfig>
      break;
 800799c:	e02c      	b.n	80079f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6818      	ldr	r0, [r3, #0]
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	6859      	ldr	r1, [r3, #4]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	461a      	mov	r2, r3
 80079ac:	f000 fa95 	bl	8007eda <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2160      	movs	r1, #96	; 0x60
 80079b6:	4618      	mov	r0, r3
 80079b8:	f000 fabf 	bl	8007f3a <TIM_ITRx_SetConfig>
      break;
 80079bc:	e01c      	b.n	80079f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6818      	ldr	r0, [r3, #0]
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	6859      	ldr	r1, [r3, #4]
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	461a      	mov	r2, r3
 80079cc:	f000 fa56 	bl	8007e7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2140      	movs	r1, #64	; 0x40
 80079d6:	4618      	mov	r0, r3
 80079d8:	f000 faaf 	bl	8007f3a <TIM_ITRx_SetConfig>
      break;
 80079dc:	e00c      	b.n	80079f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4619      	mov	r1, r3
 80079e8:	4610      	mov	r0, r2
 80079ea:	f000 faa6 	bl	8007f3a <TIM_ITRx_SetConfig>
      break;
 80079ee:	e003      	b.n	80079f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	73fb      	strb	r3, [r7, #15]
      break;
 80079f4:	e000      	b.n	80079f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80079f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a12:	b480      	push	{r7}
 8007a14:	b083      	sub	sp, #12
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a1a:	bf00      	nop
 8007a1c:	370c      	adds	r7, #12
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr

08007a26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a26:	b480      	push	{r7}
 8007a28:	b083      	sub	sp, #12
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a2e:	bf00      	nop
 8007a30:	370c      	adds	r7, #12
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	b083      	sub	sp, #12
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a42:	bf00      	nop
 8007a44:	370c      	adds	r7, #12
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr

08007a4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a4e:	b480      	push	{r7}
 8007a50:	b083      	sub	sp, #12
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a56:	bf00      	nop
 8007a58:	370c      	adds	r7, #12
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
	...

08007a64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a34      	ldr	r2, [pc, #208]	; (8007b48 <TIM_Base_SetConfig+0xe4>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d00f      	beq.n	8007a9c <TIM_Base_SetConfig+0x38>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a82:	d00b      	beq.n	8007a9c <TIM_Base_SetConfig+0x38>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a31      	ldr	r2, [pc, #196]	; (8007b4c <TIM_Base_SetConfig+0xe8>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d007      	beq.n	8007a9c <TIM_Base_SetConfig+0x38>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a30      	ldr	r2, [pc, #192]	; (8007b50 <TIM_Base_SetConfig+0xec>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d003      	beq.n	8007a9c <TIM_Base_SetConfig+0x38>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a2f      	ldr	r2, [pc, #188]	; (8007b54 <TIM_Base_SetConfig+0xf0>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d108      	bne.n	8007aae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a25      	ldr	r2, [pc, #148]	; (8007b48 <TIM_Base_SetConfig+0xe4>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d01b      	beq.n	8007aee <TIM_Base_SetConfig+0x8a>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007abc:	d017      	beq.n	8007aee <TIM_Base_SetConfig+0x8a>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a22      	ldr	r2, [pc, #136]	; (8007b4c <TIM_Base_SetConfig+0xe8>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d013      	beq.n	8007aee <TIM_Base_SetConfig+0x8a>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a21      	ldr	r2, [pc, #132]	; (8007b50 <TIM_Base_SetConfig+0xec>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d00f      	beq.n	8007aee <TIM_Base_SetConfig+0x8a>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a20      	ldr	r2, [pc, #128]	; (8007b54 <TIM_Base_SetConfig+0xf0>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d00b      	beq.n	8007aee <TIM_Base_SetConfig+0x8a>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a1f      	ldr	r2, [pc, #124]	; (8007b58 <TIM_Base_SetConfig+0xf4>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d007      	beq.n	8007aee <TIM_Base_SetConfig+0x8a>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a1e      	ldr	r2, [pc, #120]	; (8007b5c <TIM_Base_SetConfig+0xf8>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d003      	beq.n	8007aee <TIM_Base_SetConfig+0x8a>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a1d      	ldr	r2, [pc, #116]	; (8007b60 <TIM_Base_SetConfig+0xfc>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d108      	bne.n	8007b00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007af4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	695b      	ldr	r3, [r3, #20]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	689a      	ldr	r2, [r3, #8]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a08      	ldr	r2, [pc, #32]	; (8007b48 <TIM_Base_SetConfig+0xe4>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d103      	bne.n	8007b34 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	691a      	ldr	r2, [r3, #16]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	615a      	str	r2, [r3, #20]
}
 8007b3a:	bf00      	nop
 8007b3c:	3714      	adds	r7, #20
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	40010000 	.word	0x40010000
 8007b4c:	40000400 	.word	0x40000400
 8007b50:	40000800 	.word	0x40000800
 8007b54:	40000c00 	.word	0x40000c00
 8007b58:	40014000 	.word	0x40014000
 8007b5c:	40014400 	.word	0x40014400
 8007b60:	40014800 	.word	0x40014800

08007b64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b087      	sub	sp, #28
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	f023 0201 	bic.w	r2, r3, #1
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a1b      	ldr	r3, [r3, #32]
 8007b7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	699b      	ldr	r3, [r3, #24]
 8007b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f023 0303 	bic.w	r3, r3, #3
 8007b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	f023 0302 	bic.w	r3, r3, #2
 8007bac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4a1c      	ldr	r2, [pc, #112]	; (8007c2c <TIM_OC1_SetConfig+0xc8>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d10c      	bne.n	8007bda <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	f023 0308 	bic.w	r3, r3, #8
 8007bc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	697a      	ldr	r2, [r7, #20]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f023 0304 	bic.w	r3, r3, #4
 8007bd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4a13      	ldr	r2, [pc, #76]	; (8007c2c <TIM_OC1_SetConfig+0xc8>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d111      	bne.n	8007c06 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	693a      	ldr	r2, [r7, #16]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	699b      	ldr	r3, [r3, #24]
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	693a      	ldr	r2, [r7, #16]
 8007c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	685a      	ldr	r2, [r3, #4]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	697a      	ldr	r2, [r7, #20]
 8007c1e:	621a      	str	r2, [r3, #32]
}
 8007c20:	bf00      	nop
 8007c22:	371c      	adds	r7, #28
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr
 8007c2c:	40010000 	.word	0x40010000

08007c30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b087      	sub	sp, #28
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a1b      	ldr	r3, [r3, #32]
 8007c3e:	f023 0210 	bic.w	r2, r3, #16
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a1b      	ldr	r3, [r3, #32]
 8007c4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	021b      	lsls	r3, r3, #8
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	4313      	orrs	r3, r2
 8007c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	f023 0320 	bic.w	r3, r3, #32
 8007c7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	011b      	lsls	r3, r3, #4
 8007c82:	697a      	ldr	r2, [r7, #20]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a1e      	ldr	r2, [pc, #120]	; (8007d04 <TIM_OC2_SetConfig+0xd4>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d10d      	bne.n	8007cac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	011b      	lsls	r3, r3, #4
 8007c9e:	697a      	ldr	r2, [r7, #20]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007caa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4a15      	ldr	r2, [pc, #84]	; (8007d04 <TIM_OC2_SetConfig+0xd4>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d113      	bne.n	8007cdc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	695b      	ldr	r3, [r3, #20]
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	693a      	ldr	r2, [r7, #16]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	693a      	ldr	r2, [r7, #16]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	693a      	ldr	r2, [r7, #16]
 8007ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	685a      	ldr	r2, [r3, #4]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	697a      	ldr	r2, [r7, #20]
 8007cf4:	621a      	str	r2, [r3, #32]
}
 8007cf6:	bf00      	nop
 8007cf8:	371c      	adds	r7, #28
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	40010000 	.word	0x40010000

08007d08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b087      	sub	sp, #28
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a1b      	ldr	r3, [r3, #32]
 8007d16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a1b      	ldr	r3, [r3, #32]
 8007d22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	69db      	ldr	r3, [r3, #28]
 8007d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f023 0303 	bic.w	r3, r3, #3
 8007d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	021b      	lsls	r3, r3, #8
 8007d58:	697a      	ldr	r2, [r7, #20]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4a1d      	ldr	r2, [pc, #116]	; (8007dd8 <TIM_OC3_SetConfig+0xd0>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d10d      	bne.n	8007d82 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	021b      	lsls	r3, r3, #8
 8007d74:	697a      	ldr	r2, [r7, #20]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a14      	ldr	r2, [pc, #80]	; (8007dd8 <TIM_OC3_SetConfig+0xd0>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d113      	bne.n	8007db2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	695b      	ldr	r3, [r3, #20]
 8007d9e:	011b      	lsls	r3, r3, #4
 8007da0:	693a      	ldr	r2, [r7, #16]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	011b      	lsls	r3, r3, #4
 8007dac:	693a      	ldr	r2, [r7, #16]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	693a      	ldr	r2, [r7, #16]
 8007db6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	685a      	ldr	r2, [r3, #4]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	697a      	ldr	r2, [r7, #20]
 8007dca:	621a      	str	r2, [r3, #32]
}
 8007dcc:	bf00      	nop
 8007dce:	371c      	adds	r7, #28
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr
 8007dd8:	40010000 	.word	0x40010000

08007ddc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b087      	sub	sp, #28
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a1b      	ldr	r3, [r3, #32]
 8007df6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	69db      	ldr	r3, [r3, #28]
 8007e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	021b      	lsls	r3, r3, #8
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	031b      	lsls	r3, r3, #12
 8007e2e:	693a      	ldr	r2, [r7, #16]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a10      	ldr	r2, [pc, #64]	; (8007e78 <TIM_OC4_SetConfig+0x9c>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d109      	bne.n	8007e50 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	695b      	ldr	r3, [r3, #20]
 8007e48:	019b      	lsls	r3, r3, #6
 8007e4a:	697a      	ldr	r2, [r7, #20]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	693a      	ldr	r2, [r7, #16]
 8007e68:	621a      	str	r2, [r3, #32]
}
 8007e6a:	bf00      	nop
 8007e6c:	371c      	adds	r7, #28
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	40010000 	.word	0x40010000

08007e7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b087      	sub	sp, #28
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6a1b      	ldr	r3, [r3, #32]
 8007e8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	f023 0201 	bic.w	r2, r3, #1
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	699b      	ldr	r3, [r3, #24]
 8007e9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ea6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	011b      	lsls	r3, r3, #4
 8007eac:	693a      	ldr	r2, [r7, #16]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	f023 030a 	bic.w	r3, r3, #10
 8007eb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007eba:	697a      	ldr	r2, [r7, #20]
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	693a      	ldr	r2, [r7, #16]
 8007ec6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	697a      	ldr	r2, [r7, #20]
 8007ecc:	621a      	str	r2, [r3, #32]
}
 8007ece:	bf00      	nop
 8007ed0:	371c      	adds	r7, #28
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr

08007eda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007eda:	b480      	push	{r7}
 8007edc:	b087      	sub	sp, #28
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	60f8      	str	r0, [r7, #12]
 8007ee2:	60b9      	str	r1, [r7, #8]
 8007ee4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6a1b      	ldr	r3, [r3, #32]
 8007eea:	f023 0210 	bic.w	r2, r3, #16
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6a1b      	ldr	r3, [r3, #32]
 8007efc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	031b      	lsls	r3, r3, #12
 8007f0a:	697a      	ldr	r2, [r7, #20]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	011b      	lsls	r3, r3, #4
 8007f1c:	693a      	ldr	r2, [r7, #16]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	697a      	ldr	r2, [r7, #20]
 8007f26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	693a      	ldr	r2, [r7, #16]
 8007f2c:	621a      	str	r2, [r3, #32]
}
 8007f2e:	bf00      	nop
 8007f30:	371c      	adds	r7, #28
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr

08007f3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f3a:	b480      	push	{r7}
 8007f3c:	b085      	sub	sp, #20
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
 8007f42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f52:	683a      	ldr	r2, [r7, #0]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	f043 0307 	orr.w	r3, r3, #7
 8007f5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	609a      	str	r2, [r3, #8]
}
 8007f64:	bf00      	nop
 8007f66:	3714      	adds	r7, #20
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b087      	sub	sp, #28
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
 8007f7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	021a      	lsls	r2, r3, #8
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	431a      	orrs	r2, r3
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	697a      	ldr	r2, [r7, #20]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	697a      	ldr	r2, [r7, #20]
 8007fa2:	609a      	str	r2, [r3, #8]
}
 8007fa4:	bf00      	nop
 8007fa6:	371c      	adds	r7, #28
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b087      	sub	sp, #28
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	f003 031f 	and.w	r3, r3, #31
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6a1a      	ldr	r2, [r3, #32]
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	43db      	mvns	r3, r3
 8007fd2:	401a      	ands	r2, r3
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6a1a      	ldr	r2, [r3, #32]
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	f003 031f 	and.w	r3, r3, #31
 8007fe2:	6879      	ldr	r1, [r7, #4]
 8007fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8007fe8:	431a      	orrs	r2, r3
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	621a      	str	r2, [r3, #32]
}
 8007fee:	bf00      	nop
 8007ff0:	371c      	adds	r7, #28
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
	...

08007ffc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800800c:	2b01      	cmp	r3, #1
 800800e:	d101      	bne.n	8008014 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008010:	2302      	movs	r3, #2
 8008012:	e050      	b.n	80080b6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2202      	movs	r2, #2
 8008020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800803a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	4313      	orrs	r3, r2
 8008044:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a1c      	ldr	r2, [pc, #112]	; (80080c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d018      	beq.n	800808a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008060:	d013      	beq.n	800808a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a18      	ldr	r2, [pc, #96]	; (80080c8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d00e      	beq.n	800808a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a16      	ldr	r2, [pc, #88]	; (80080cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d009      	beq.n	800808a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a15      	ldr	r2, [pc, #84]	; (80080d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d004      	beq.n	800808a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a13      	ldr	r2, [pc, #76]	; (80080d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d10c      	bne.n	80080a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008090:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	4313      	orrs	r3, r2
 800809a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3714      	adds	r7, #20
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop
 80080c4:	40010000 	.word	0x40010000
 80080c8:	40000400 	.word	0x40000400
 80080cc:	40000800 	.word	0x40000800
 80080d0:	40000c00 	.word	0x40000c00
 80080d4:	40014000 	.word	0x40014000

080080d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <arm_sin_f32>:
 8008100:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800817c <arm_sin_f32+0x7c>
 8008104:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008108:	ee20 7a07 	vmul.f32	s14, s0, s14
 800810c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008110:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8008114:	d42c      	bmi.n	8008170 <arm_sin_f32+0x70>
 8008116:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800811a:	eddf 6a19 	vldr	s13, [pc, #100]	; 8008180 <arm_sin_f32+0x80>
 800811e:	4a19      	ldr	r2, [pc, #100]	; (8008184 <arm_sin_f32+0x84>)
 8008120:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008124:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008128:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800812c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008134:	bfa8      	it	ge
 8008136:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 800813a:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800813e:	ee17 3a10 	vmov	r3, s14
 8008142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008146:	ee07 3a10 	vmov	s14, r3
 800814a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800814e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8008152:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008156:	edd1 6a01 	vldr	s13, [r1, #4]
 800815a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800815e:	ed91 0a00 	vldr	s0, [r1]
 8008162:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008166:	ee27 0a00 	vmul.f32	s0, s14, s0
 800816a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800816e:	4770      	bx	lr
 8008170:	ee17 3a90 	vmov	r3, s15
 8008174:	3b01      	subs	r3, #1
 8008176:	ee07 3a90 	vmov	s15, r3
 800817a:	e7cc      	b.n	8008116 <arm_sin_f32+0x16>
 800817c:	3e22f983 	.word	0x3e22f983
 8008180:	44000000 	.word	0x44000000
 8008184:	08009b28 	.word	0x08009b28

08008188 <__errno>:
 8008188:	4b01      	ldr	r3, [pc, #4]	; (8008190 <__errno+0x8>)
 800818a:	6818      	ldr	r0, [r3, #0]
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	20000608 	.word	0x20000608

08008194 <__libc_init_array>:
 8008194:	b570      	push	{r4, r5, r6, lr}
 8008196:	4d0d      	ldr	r5, [pc, #52]	; (80081cc <__libc_init_array+0x38>)
 8008198:	4c0d      	ldr	r4, [pc, #52]	; (80081d0 <__libc_init_array+0x3c>)
 800819a:	1b64      	subs	r4, r4, r5
 800819c:	10a4      	asrs	r4, r4, #2
 800819e:	2600      	movs	r6, #0
 80081a0:	42a6      	cmp	r6, r4
 80081a2:	d109      	bne.n	80081b8 <__libc_init_array+0x24>
 80081a4:	4d0b      	ldr	r5, [pc, #44]	; (80081d4 <__libc_init_array+0x40>)
 80081a6:	4c0c      	ldr	r4, [pc, #48]	; (80081d8 <__libc_init_array+0x44>)
 80081a8:	f000 ffae 	bl	8009108 <_init>
 80081ac:	1b64      	subs	r4, r4, r5
 80081ae:	10a4      	asrs	r4, r4, #2
 80081b0:	2600      	movs	r6, #0
 80081b2:	42a6      	cmp	r6, r4
 80081b4:	d105      	bne.n	80081c2 <__libc_init_array+0x2e>
 80081b6:	bd70      	pop	{r4, r5, r6, pc}
 80081b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80081bc:	4798      	blx	r3
 80081be:	3601      	adds	r6, #1
 80081c0:	e7ee      	b.n	80081a0 <__libc_init_array+0xc>
 80081c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80081c6:	4798      	blx	r3
 80081c8:	3601      	adds	r6, #1
 80081ca:	e7f2      	b.n	80081b2 <__libc_init_array+0x1e>
 80081cc:	0800a3cc 	.word	0x0800a3cc
 80081d0:	0800a3cc 	.word	0x0800a3cc
 80081d4:	0800a3cc 	.word	0x0800a3cc
 80081d8:	0800a3d0 	.word	0x0800a3d0

080081dc <memset>:
 80081dc:	4402      	add	r2, r0
 80081de:	4603      	mov	r3, r0
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d100      	bne.n	80081e6 <memset+0xa>
 80081e4:	4770      	bx	lr
 80081e6:	f803 1b01 	strb.w	r1, [r3], #1
 80081ea:	e7f9      	b.n	80081e0 <memset+0x4>

080081ec <iprintf>:
 80081ec:	b40f      	push	{r0, r1, r2, r3}
 80081ee:	4b0a      	ldr	r3, [pc, #40]	; (8008218 <iprintf+0x2c>)
 80081f0:	b513      	push	{r0, r1, r4, lr}
 80081f2:	681c      	ldr	r4, [r3, #0]
 80081f4:	b124      	cbz	r4, 8008200 <iprintf+0x14>
 80081f6:	69a3      	ldr	r3, [r4, #24]
 80081f8:	b913      	cbnz	r3, 8008200 <iprintf+0x14>
 80081fa:	4620      	mov	r0, r4
 80081fc:	f000 f866 	bl	80082cc <__sinit>
 8008200:	ab05      	add	r3, sp, #20
 8008202:	9a04      	ldr	r2, [sp, #16]
 8008204:	68a1      	ldr	r1, [r4, #8]
 8008206:	9301      	str	r3, [sp, #4]
 8008208:	4620      	mov	r0, r4
 800820a:	f000 f9bd 	bl	8008588 <_vfiprintf_r>
 800820e:	b002      	add	sp, #8
 8008210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008214:	b004      	add	sp, #16
 8008216:	4770      	bx	lr
 8008218:	20000608 	.word	0x20000608

0800821c <std>:
 800821c:	2300      	movs	r3, #0
 800821e:	b510      	push	{r4, lr}
 8008220:	4604      	mov	r4, r0
 8008222:	e9c0 3300 	strd	r3, r3, [r0]
 8008226:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800822a:	6083      	str	r3, [r0, #8]
 800822c:	8181      	strh	r1, [r0, #12]
 800822e:	6643      	str	r3, [r0, #100]	; 0x64
 8008230:	81c2      	strh	r2, [r0, #14]
 8008232:	6183      	str	r3, [r0, #24]
 8008234:	4619      	mov	r1, r3
 8008236:	2208      	movs	r2, #8
 8008238:	305c      	adds	r0, #92	; 0x5c
 800823a:	f7ff ffcf 	bl	80081dc <memset>
 800823e:	4b05      	ldr	r3, [pc, #20]	; (8008254 <std+0x38>)
 8008240:	6263      	str	r3, [r4, #36]	; 0x24
 8008242:	4b05      	ldr	r3, [pc, #20]	; (8008258 <std+0x3c>)
 8008244:	62a3      	str	r3, [r4, #40]	; 0x28
 8008246:	4b05      	ldr	r3, [pc, #20]	; (800825c <std+0x40>)
 8008248:	62e3      	str	r3, [r4, #44]	; 0x2c
 800824a:	4b05      	ldr	r3, [pc, #20]	; (8008260 <std+0x44>)
 800824c:	6224      	str	r4, [r4, #32]
 800824e:	6323      	str	r3, [r4, #48]	; 0x30
 8008250:	bd10      	pop	{r4, pc}
 8008252:	bf00      	nop
 8008254:	08008b31 	.word	0x08008b31
 8008258:	08008b53 	.word	0x08008b53
 800825c:	08008b8b 	.word	0x08008b8b
 8008260:	08008baf 	.word	0x08008baf

08008264 <_cleanup_r>:
 8008264:	4901      	ldr	r1, [pc, #4]	; (800826c <_cleanup_r+0x8>)
 8008266:	f000 b8af 	b.w	80083c8 <_fwalk_reent>
 800826a:	bf00      	nop
 800826c:	08008e89 	.word	0x08008e89

08008270 <__sfmoreglue>:
 8008270:	b570      	push	{r4, r5, r6, lr}
 8008272:	2268      	movs	r2, #104	; 0x68
 8008274:	1e4d      	subs	r5, r1, #1
 8008276:	4355      	muls	r5, r2
 8008278:	460e      	mov	r6, r1
 800827a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800827e:	f000 f8e5 	bl	800844c <_malloc_r>
 8008282:	4604      	mov	r4, r0
 8008284:	b140      	cbz	r0, 8008298 <__sfmoreglue+0x28>
 8008286:	2100      	movs	r1, #0
 8008288:	e9c0 1600 	strd	r1, r6, [r0]
 800828c:	300c      	adds	r0, #12
 800828e:	60a0      	str	r0, [r4, #8]
 8008290:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008294:	f7ff ffa2 	bl	80081dc <memset>
 8008298:	4620      	mov	r0, r4
 800829a:	bd70      	pop	{r4, r5, r6, pc}

0800829c <__sfp_lock_acquire>:
 800829c:	4801      	ldr	r0, [pc, #4]	; (80082a4 <__sfp_lock_acquire+0x8>)
 800829e:	f000 b8b3 	b.w	8008408 <__retarget_lock_acquire_recursive>
 80082a2:	bf00      	nop
 80082a4:	20002255 	.word	0x20002255

080082a8 <__sfp_lock_release>:
 80082a8:	4801      	ldr	r0, [pc, #4]	; (80082b0 <__sfp_lock_release+0x8>)
 80082aa:	f000 b8ae 	b.w	800840a <__retarget_lock_release_recursive>
 80082ae:	bf00      	nop
 80082b0:	20002255 	.word	0x20002255

080082b4 <__sinit_lock_acquire>:
 80082b4:	4801      	ldr	r0, [pc, #4]	; (80082bc <__sinit_lock_acquire+0x8>)
 80082b6:	f000 b8a7 	b.w	8008408 <__retarget_lock_acquire_recursive>
 80082ba:	bf00      	nop
 80082bc:	20002256 	.word	0x20002256

080082c0 <__sinit_lock_release>:
 80082c0:	4801      	ldr	r0, [pc, #4]	; (80082c8 <__sinit_lock_release+0x8>)
 80082c2:	f000 b8a2 	b.w	800840a <__retarget_lock_release_recursive>
 80082c6:	bf00      	nop
 80082c8:	20002256 	.word	0x20002256

080082cc <__sinit>:
 80082cc:	b510      	push	{r4, lr}
 80082ce:	4604      	mov	r4, r0
 80082d0:	f7ff fff0 	bl	80082b4 <__sinit_lock_acquire>
 80082d4:	69a3      	ldr	r3, [r4, #24]
 80082d6:	b11b      	cbz	r3, 80082e0 <__sinit+0x14>
 80082d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082dc:	f7ff bff0 	b.w	80082c0 <__sinit_lock_release>
 80082e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80082e4:	6523      	str	r3, [r4, #80]	; 0x50
 80082e6:	4b13      	ldr	r3, [pc, #76]	; (8008334 <__sinit+0x68>)
 80082e8:	4a13      	ldr	r2, [pc, #76]	; (8008338 <__sinit+0x6c>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80082ee:	42a3      	cmp	r3, r4
 80082f0:	bf04      	itt	eq
 80082f2:	2301      	moveq	r3, #1
 80082f4:	61a3      	streq	r3, [r4, #24]
 80082f6:	4620      	mov	r0, r4
 80082f8:	f000 f820 	bl	800833c <__sfp>
 80082fc:	6060      	str	r0, [r4, #4]
 80082fe:	4620      	mov	r0, r4
 8008300:	f000 f81c 	bl	800833c <__sfp>
 8008304:	60a0      	str	r0, [r4, #8]
 8008306:	4620      	mov	r0, r4
 8008308:	f000 f818 	bl	800833c <__sfp>
 800830c:	2200      	movs	r2, #0
 800830e:	60e0      	str	r0, [r4, #12]
 8008310:	2104      	movs	r1, #4
 8008312:	6860      	ldr	r0, [r4, #4]
 8008314:	f7ff ff82 	bl	800821c <std>
 8008318:	68a0      	ldr	r0, [r4, #8]
 800831a:	2201      	movs	r2, #1
 800831c:	2109      	movs	r1, #9
 800831e:	f7ff ff7d 	bl	800821c <std>
 8008322:	68e0      	ldr	r0, [r4, #12]
 8008324:	2202      	movs	r2, #2
 8008326:	2112      	movs	r1, #18
 8008328:	f7ff ff78 	bl	800821c <std>
 800832c:	2301      	movs	r3, #1
 800832e:	61a3      	str	r3, [r4, #24]
 8008330:	e7d2      	b.n	80082d8 <__sinit+0xc>
 8008332:	bf00      	nop
 8008334:	0800a32c 	.word	0x0800a32c
 8008338:	08008265 	.word	0x08008265

0800833c <__sfp>:
 800833c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833e:	4607      	mov	r7, r0
 8008340:	f7ff ffac 	bl	800829c <__sfp_lock_acquire>
 8008344:	4b1e      	ldr	r3, [pc, #120]	; (80083c0 <__sfp+0x84>)
 8008346:	681e      	ldr	r6, [r3, #0]
 8008348:	69b3      	ldr	r3, [r6, #24]
 800834a:	b913      	cbnz	r3, 8008352 <__sfp+0x16>
 800834c:	4630      	mov	r0, r6
 800834e:	f7ff ffbd 	bl	80082cc <__sinit>
 8008352:	3648      	adds	r6, #72	; 0x48
 8008354:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008358:	3b01      	subs	r3, #1
 800835a:	d503      	bpl.n	8008364 <__sfp+0x28>
 800835c:	6833      	ldr	r3, [r6, #0]
 800835e:	b30b      	cbz	r3, 80083a4 <__sfp+0x68>
 8008360:	6836      	ldr	r6, [r6, #0]
 8008362:	e7f7      	b.n	8008354 <__sfp+0x18>
 8008364:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008368:	b9d5      	cbnz	r5, 80083a0 <__sfp+0x64>
 800836a:	4b16      	ldr	r3, [pc, #88]	; (80083c4 <__sfp+0x88>)
 800836c:	60e3      	str	r3, [r4, #12]
 800836e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008372:	6665      	str	r5, [r4, #100]	; 0x64
 8008374:	f000 f847 	bl	8008406 <__retarget_lock_init_recursive>
 8008378:	f7ff ff96 	bl	80082a8 <__sfp_lock_release>
 800837c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008380:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008384:	6025      	str	r5, [r4, #0]
 8008386:	61a5      	str	r5, [r4, #24]
 8008388:	2208      	movs	r2, #8
 800838a:	4629      	mov	r1, r5
 800838c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008390:	f7ff ff24 	bl	80081dc <memset>
 8008394:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008398:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800839c:	4620      	mov	r0, r4
 800839e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083a0:	3468      	adds	r4, #104	; 0x68
 80083a2:	e7d9      	b.n	8008358 <__sfp+0x1c>
 80083a4:	2104      	movs	r1, #4
 80083a6:	4638      	mov	r0, r7
 80083a8:	f7ff ff62 	bl	8008270 <__sfmoreglue>
 80083ac:	4604      	mov	r4, r0
 80083ae:	6030      	str	r0, [r6, #0]
 80083b0:	2800      	cmp	r0, #0
 80083b2:	d1d5      	bne.n	8008360 <__sfp+0x24>
 80083b4:	f7ff ff78 	bl	80082a8 <__sfp_lock_release>
 80083b8:	230c      	movs	r3, #12
 80083ba:	603b      	str	r3, [r7, #0]
 80083bc:	e7ee      	b.n	800839c <__sfp+0x60>
 80083be:	bf00      	nop
 80083c0:	0800a32c 	.word	0x0800a32c
 80083c4:	ffff0001 	.word	0xffff0001

080083c8 <_fwalk_reent>:
 80083c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083cc:	4606      	mov	r6, r0
 80083ce:	4688      	mov	r8, r1
 80083d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80083d4:	2700      	movs	r7, #0
 80083d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083da:	f1b9 0901 	subs.w	r9, r9, #1
 80083de:	d505      	bpl.n	80083ec <_fwalk_reent+0x24>
 80083e0:	6824      	ldr	r4, [r4, #0]
 80083e2:	2c00      	cmp	r4, #0
 80083e4:	d1f7      	bne.n	80083d6 <_fwalk_reent+0xe>
 80083e6:	4638      	mov	r0, r7
 80083e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083ec:	89ab      	ldrh	r3, [r5, #12]
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d907      	bls.n	8008402 <_fwalk_reent+0x3a>
 80083f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083f6:	3301      	adds	r3, #1
 80083f8:	d003      	beq.n	8008402 <_fwalk_reent+0x3a>
 80083fa:	4629      	mov	r1, r5
 80083fc:	4630      	mov	r0, r6
 80083fe:	47c0      	blx	r8
 8008400:	4307      	orrs	r7, r0
 8008402:	3568      	adds	r5, #104	; 0x68
 8008404:	e7e9      	b.n	80083da <_fwalk_reent+0x12>

08008406 <__retarget_lock_init_recursive>:
 8008406:	4770      	bx	lr

08008408 <__retarget_lock_acquire_recursive>:
 8008408:	4770      	bx	lr

0800840a <__retarget_lock_release_recursive>:
 800840a:	4770      	bx	lr

0800840c <sbrk_aligned>:
 800840c:	b570      	push	{r4, r5, r6, lr}
 800840e:	4e0e      	ldr	r6, [pc, #56]	; (8008448 <sbrk_aligned+0x3c>)
 8008410:	460c      	mov	r4, r1
 8008412:	6831      	ldr	r1, [r6, #0]
 8008414:	4605      	mov	r5, r0
 8008416:	b911      	cbnz	r1, 800841e <sbrk_aligned+0x12>
 8008418:	f000 fb7a 	bl	8008b10 <_sbrk_r>
 800841c:	6030      	str	r0, [r6, #0]
 800841e:	4621      	mov	r1, r4
 8008420:	4628      	mov	r0, r5
 8008422:	f000 fb75 	bl	8008b10 <_sbrk_r>
 8008426:	1c43      	adds	r3, r0, #1
 8008428:	d00a      	beq.n	8008440 <sbrk_aligned+0x34>
 800842a:	1cc4      	adds	r4, r0, #3
 800842c:	f024 0403 	bic.w	r4, r4, #3
 8008430:	42a0      	cmp	r0, r4
 8008432:	d007      	beq.n	8008444 <sbrk_aligned+0x38>
 8008434:	1a21      	subs	r1, r4, r0
 8008436:	4628      	mov	r0, r5
 8008438:	f000 fb6a 	bl	8008b10 <_sbrk_r>
 800843c:	3001      	adds	r0, #1
 800843e:	d101      	bne.n	8008444 <sbrk_aligned+0x38>
 8008440:	f04f 34ff 	mov.w	r4, #4294967295
 8008444:	4620      	mov	r0, r4
 8008446:	bd70      	pop	{r4, r5, r6, pc}
 8008448:	2000225c 	.word	0x2000225c

0800844c <_malloc_r>:
 800844c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008450:	1ccd      	adds	r5, r1, #3
 8008452:	f025 0503 	bic.w	r5, r5, #3
 8008456:	3508      	adds	r5, #8
 8008458:	2d0c      	cmp	r5, #12
 800845a:	bf38      	it	cc
 800845c:	250c      	movcc	r5, #12
 800845e:	2d00      	cmp	r5, #0
 8008460:	4607      	mov	r7, r0
 8008462:	db01      	blt.n	8008468 <_malloc_r+0x1c>
 8008464:	42a9      	cmp	r1, r5
 8008466:	d905      	bls.n	8008474 <_malloc_r+0x28>
 8008468:	230c      	movs	r3, #12
 800846a:	603b      	str	r3, [r7, #0]
 800846c:	2600      	movs	r6, #0
 800846e:	4630      	mov	r0, r6
 8008470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008474:	4e2e      	ldr	r6, [pc, #184]	; (8008530 <_malloc_r+0xe4>)
 8008476:	f000 fdbb 	bl	8008ff0 <__malloc_lock>
 800847a:	6833      	ldr	r3, [r6, #0]
 800847c:	461c      	mov	r4, r3
 800847e:	bb34      	cbnz	r4, 80084ce <_malloc_r+0x82>
 8008480:	4629      	mov	r1, r5
 8008482:	4638      	mov	r0, r7
 8008484:	f7ff ffc2 	bl	800840c <sbrk_aligned>
 8008488:	1c43      	adds	r3, r0, #1
 800848a:	4604      	mov	r4, r0
 800848c:	d14d      	bne.n	800852a <_malloc_r+0xde>
 800848e:	6834      	ldr	r4, [r6, #0]
 8008490:	4626      	mov	r6, r4
 8008492:	2e00      	cmp	r6, #0
 8008494:	d140      	bne.n	8008518 <_malloc_r+0xcc>
 8008496:	6823      	ldr	r3, [r4, #0]
 8008498:	4631      	mov	r1, r6
 800849a:	4638      	mov	r0, r7
 800849c:	eb04 0803 	add.w	r8, r4, r3
 80084a0:	f000 fb36 	bl	8008b10 <_sbrk_r>
 80084a4:	4580      	cmp	r8, r0
 80084a6:	d13a      	bne.n	800851e <_malloc_r+0xd2>
 80084a8:	6821      	ldr	r1, [r4, #0]
 80084aa:	3503      	adds	r5, #3
 80084ac:	1a6d      	subs	r5, r5, r1
 80084ae:	f025 0503 	bic.w	r5, r5, #3
 80084b2:	3508      	adds	r5, #8
 80084b4:	2d0c      	cmp	r5, #12
 80084b6:	bf38      	it	cc
 80084b8:	250c      	movcc	r5, #12
 80084ba:	4629      	mov	r1, r5
 80084bc:	4638      	mov	r0, r7
 80084be:	f7ff ffa5 	bl	800840c <sbrk_aligned>
 80084c2:	3001      	adds	r0, #1
 80084c4:	d02b      	beq.n	800851e <_malloc_r+0xd2>
 80084c6:	6823      	ldr	r3, [r4, #0]
 80084c8:	442b      	add	r3, r5
 80084ca:	6023      	str	r3, [r4, #0]
 80084cc:	e00e      	b.n	80084ec <_malloc_r+0xa0>
 80084ce:	6822      	ldr	r2, [r4, #0]
 80084d0:	1b52      	subs	r2, r2, r5
 80084d2:	d41e      	bmi.n	8008512 <_malloc_r+0xc6>
 80084d4:	2a0b      	cmp	r2, #11
 80084d6:	d916      	bls.n	8008506 <_malloc_r+0xba>
 80084d8:	1961      	adds	r1, r4, r5
 80084da:	42a3      	cmp	r3, r4
 80084dc:	6025      	str	r5, [r4, #0]
 80084de:	bf18      	it	ne
 80084e0:	6059      	strne	r1, [r3, #4]
 80084e2:	6863      	ldr	r3, [r4, #4]
 80084e4:	bf08      	it	eq
 80084e6:	6031      	streq	r1, [r6, #0]
 80084e8:	5162      	str	r2, [r4, r5]
 80084ea:	604b      	str	r3, [r1, #4]
 80084ec:	4638      	mov	r0, r7
 80084ee:	f104 060b 	add.w	r6, r4, #11
 80084f2:	f000 fd83 	bl	8008ffc <__malloc_unlock>
 80084f6:	f026 0607 	bic.w	r6, r6, #7
 80084fa:	1d23      	adds	r3, r4, #4
 80084fc:	1af2      	subs	r2, r6, r3
 80084fe:	d0b6      	beq.n	800846e <_malloc_r+0x22>
 8008500:	1b9b      	subs	r3, r3, r6
 8008502:	50a3      	str	r3, [r4, r2]
 8008504:	e7b3      	b.n	800846e <_malloc_r+0x22>
 8008506:	6862      	ldr	r2, [r4, #4]
 8008508:	42a3      	cmp	r3, r4
 800850a:	bf0c      	ite	eq
 800850c:	6032      	streq	r2, [r6, #0]
 800850e:	605a      	strne	r2, [r3, #4]
 8008510:	e7ec      	b.n	80084ec <_malloc_r+0xa0>
 8008512:	4623      	mov	r3, r4
 8008514:	6864      	ldr	r4, [r4, #4]
 8008516:	e7b2      	b.n	800847e <_malloc_r+0x32>
 8008518:	4634      	mov	r4, r6
 800851a:	6876      	ldr	r6, [r6, #4]
 800851c:	e7b9      	b.n	8008492 <_malloc_r+0x46>
 800851e:	230c      	movs	r3, #12
 8008520:	603b      	str	r3, [r7, #0]
 8008522:	4638      	mov	r0, r7
 8008524:	f000 fd6a 	bl	8008ffc <__malloc_unlock>
 8008528:	e7a1      	b.n	800846e <_malloc_r+0x22>
 800852a:	6025      	str	r5, [r4, #0]
 800852c:	e7de      	b.n	80084ec <_malloc_r+0xa0>
 800852e:	bf00      	nop
 8008530:	20002258 	.word	0x20002258

08008534 <__sfputc_r>:
 8008534:	6893      	ldr	r3, [r2, #8]
 8008536:	3b01      	subs	r3, #1
 8008538:	2b00      	cmp	r3, #0
 800853a:	b410      	push	{r4}
 800853c:	6093      	str	r3, [r2, #8]
 800853e:	da08      	bge.n	8008552 <__sfputc_r+0x1e>
 8008540:	6994      	ldr	r4, [r2, #24]
 8008542:	42a3      	cmp	r3, r4
 8008544:	db01      	blt.n	800854a <__sfputc_r+0x16>
 8008546:	290a      	cmp	r1, #10
 8008548:	d103      	bne.n	8008552 <__sfputc_r+0x1e>
 800854a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800854e:	f000 bb33 	b.w	8008bb8 <__swbuf_r>
 8008552:	6813      	ldr	r3, [r2, #0]
 8008554:	1c58      	adds	r0, r3, #1
 8008556:	6010      	str	r0, [r2, #0]
 8008558:	7019      	strb	r1, [r3, #0]
 800855a:	4608      	mov	r0, r1
 800855c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008560:	4770      	bx	lr

08008562 <__sfputs_r>:
 8008562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008564:	4606      	mov	r6, r0
 8008566:	460f      	mov	r7, r1
 8008568:	4614      	mov	r4, r2
 800856a:	18d5      	adds	r5, r2, r3
 800856c:	42ac      	cmp	r4, r5
 800856e:	d101      	bne.n	8008574 <__sfputs_r+0x12>
 8008570:	2000      	movs	r0, #0
 8008572:	e007      	b.n	8008584 <__sfputs_r+0x22>
 8008574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008578:	463a      	mov	r2, r7
 800857a:	4630      	mov	r0, r6
 800857c:	f7ff ffda 	bl	8008534 <__sfputc_r>
 8008580:	1c43      	adds	r3, r0, #1
 8008582:	d1f3      	bne.n	800856c <__sfputs_r+0xa>
 8008584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008588 <_vfiprintf_r>:
 8008588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800858c:	460d      	mov	r5, r1
 800858e:	b09d      	sub	sp, #116	; 0x74
 8008590:	4614      	mov	r4, r2
 8008592:	4698      	mov	r8, r3
 8008594:	4606      	mov	r6, r0
 8008596:	b118      	cbz	r0, 80085a0 <_vfiprintf_r+0x18>
 8008598:	6983      	ldr	r3, [r0, #24]
 800859a:	b90b      	cbnz	r3, 80085a0 <_vfiprintf_r+0x18>
 800859c:	f7ff fe96 	bl	80082cc <__sinit>
 80085a0:	4b89      	ldr	r3, [pc, #548]	; (80087c8 <_vfiprintf_r+0x240>)
 80085a2:	429d      	cmp	r5, r3
 80085a4:	d11b      	bne.n	80085de <_vfiprintf_r+0x56>
 80085a6:	6875      	ldr	r5, [r6, #4]
 80085a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085aa:	07d9      	lsls	r1, r3, #31
 80085ac:	d405      	bmi.n	80085ba <_vfiprintf_r+0x32>
 80085ae:	89ab      	ldrh	r3, [r5, #12]
 80085b0:	059a      	lsls	r2, r3, #22
 80085b2:	d402      	bmi.n	80085ba <_vfiprintf_r+0x32>
 80085b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085b6:	f7ff ff27 	bl	8008408 <__retarget_lock_acquire_recursive>
 80085ba:	89ab      	ldrh	r3, [r5, #12]
 80085bc:	071b      	lsls	r3, r3, #28
 80085be:	d501      	bpl.n	80085c4 <_vfiprintf_r+0x3c>
 80085c0:	692b      	ldr	r3, [r5, #16]
 80085c2:	b9eb      	cbnz	r3, 8008600 <_vfiprintf_r+0x78>
 80085c4:	4629      	mov	r1, r5
 80085c6:	4630      	mov	r0, r6
 80085c8:	f000 fb5a 	bl	8008c80 <__swsetup_r>
 80085cc:	b1c0      	cbz	r0, 8008600 <_vfiprintf_r+0x78>
 80085ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085d0:	07dc      	lsls	r4, r3, #31
 80085d2:	d50e      	bpl.n	80085f2 <_vfiprintf_r+0x6a>
 80085d4:	f04f 30ff 	mov.w	r0, #4294967295
 80085d8:	b01d      	add	sp, #116	; 0x74
 80085da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085de:	4b7b      	ldr	r3, [pc, #492]	; (80087cc <_vfiprintf_r+0x244>)
 80085e0:	429d      	cmp	r5, r3
 80085e2:	d101      	bne.n	80085e8 <_vfiprintf_r+0x60>
 80085e4:	68b5      	ldr	r5, [r6, #8]
 80085e6:	e7df      	b.n	80085a8 <_vfiprintf_r+0x20>
 80085e8:	4b79      	ldr	r3, [pc, #484]	; (80087d0 <_vfiprintf_r+0x248>)
 80085ea:	429d      	cmp	r5, r3
 80085ec:	bf08      	it	eq
 80085ee:	68f5      	ldreq	r5, [r6, #12]
 80085f0:	e7da      	b.n	80085a8 <_vfiprintf_r+0x20>
 80085f2:	89ab      	ldrh	r3, [r5, #12]
 80085f4:	0598      	lsls	r0, r3, #22
 80085f6:	d4ed      	bmi.n	80085d4 <_vfiprintf_r+0x4c>
 80085f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085fa:	f7ff ff06 	bl	800840a <__retarget_lock_release_recursive>
 80085fe:	e7e9      	b.n	80085d4 <_vfiprintf_r+0x4c>
 8008600:	2300      	movs	r3, #0
 8008602:	9309      	str	r3, [sp, #36]	; 0x24
 8008604:	2320      	movs	r3, #32
 8008606:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800860a:	f8cd 800c 	str.w	r8, [sp, #12]
 800860e:	2330      	movs	r3, #48	; 0x30
 8008610:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80087d4 <_vfiprintf_r+0x24c>
 8008614:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008618:	f04f 0901 	mov.w	r9, #1
 800861c:	4623      	mov	r3, r4
 800861e:	469a      	mov	sl, r3
 8008620:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008624:	b10a      	cbz	r2, 800862a <_vfiprintf_r+0xa2>
 8008626:	2a25      	cmp	r2, #37	; 0x25
 8008628:	d1f9      	bne.n	800861e <_vfiprintf_r+0x96>
 800862a:	ebba 0b04 	subs.w	fp, sl, r4
 800862e:	d00b      	beq.n	8008648 <_vfiprintf_r+0xc0>
 8008630:	465b      	mov	r3, fp
 8008632:	4622      	mov	r2, r4
 8008634:	4629      	mov	r1, r5
 8008636:	4630      	mov	r0, r6
 8008638:	f7ff ff93 	bl	8008562 <__sfputs_r>
 800863c:	3001      	adds	r0, #1
 800863e:	f000 80aa 	beq.w	8008796 <_vfiprintf_r+0x20e>
 8008642:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008644:	445a      	add	r2, fp
 8008646:	9209      	str	r2, [sp, #36]	; 0x24
 8008648:	f89a 3000 	ldrb.w	r3, [sl]
 800864c:	2b00      	cmp	r3, #0
 800864e:	f000 80a2 	beq.w	8008796 <_vfiprintf_r+0x20e>
 8008652:	2300      	movs	r3, #0
 8008654:	f04f 32ff 	mov.w	r2, #4294967295
 8008658:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800865c:	f10a 0a01 	add.w	sl, sl, #1
 8008660:	9304      	str	r3, [sp, #16]
 8008662:	9307      	str	r3, [sp, #28]
 8008664:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008668:	931a      	str	r3, [sp, #104]	; 0x68
 800866a:	4654      	mov	r4, sl
 800866c:	2205      	movs	r2, #5
 800866e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008672:	4858      	ldr	r0, [pc, #352]	; (80087d4 <_vfiprintf_r+0x24c>)
 8008674:	f7f7 fdb4 	bl	80001e0 <memchr>
 8008678:	9a04      	ldr	r2, [sp, #16]
 800867a:	b9d8      	cbnz	r0, 80086b4 <_vfiprintf_r+0x12c>
 800867c:	06d1      	lsls	r1, r2, #27
 800867e:	bf44      	itt	mi
 8008680:	2320      	movmi	r3, #32
 8008682:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008686:	0713      	lsls	r3, r2, #28
 8008688:	bf44      	itt	mi
 800868a:	232b      	movmi	r3, #43	; 0x2b
 800868c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008690:	f89a 3000 	ldrb.w	r3, [sl]
 8008694:	2b2a      	cmp	r3, #42	; 0x2a
 8008696:	d015      	beq.n	80086c4 <_vfiprintf_r+0x13c>
 8008698:	9a07      	ldr	r2, [sp, #28]
 800869a:	4654      	mov	r4, sl
 800869c:	2000      	movs	r0, #0
 800869e:	f04f 0c0a 	mov.w	ip, #10
 80086a2:	4621      	mov	r1, r4
 80086a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086a8:	3b30      	subs	r3, #48	; 0x30
 80086aa:	2b09      	cmp	r3, #9
 80086ac:	d94e      	bls.n	800874c <_vfiprintf_r+0x1c4>
 80086ae:	b1b0      	cbz	r0, 80086de <_vfiprintf_r+0x156>
 80086b0:	9207      	str	r2, [sp, #28]
 80086b2:	e014      	b.n	80086de <_vfiprintf_r+0x156>
 80086b4:	eba0 0308 	sub.w	r3, r0, r8
 80086b8:	fa09 f303 	lsl.w	r3, r9, r3
 80086bc:	4313      	orrs	r3, r2
 80086be:	9304      	str	r3, [sp, #16]
 80086c0:	46a2      	mov	sl, r4
 80086c2:	e7d2      	b.n	800866a <_vfiprintf_r+0xe2>
 80086c4:	9b03      	ldr	r3, [sp, #12]
 80086c6:	1d19      	adds	r1, r3, #4
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	9103      	str	r1, [sp, #12]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	bfbb      	ittet	lt
 80086d0:	425b      	neglt	r3, r3
 80086d2:	f042 0202 	orrlt.w	r2, r2, #2
 80086d6:	9307      	strge	r3, [sp, #28]
 80086d8:	9307      	strlt	r3, [sp, #28]
 80086da:	bfb8      	it	lt
 80086dc:	9204      	strlt	r2, [sp, #16]
 80086de:	7823      	ldrb	r3, [r4, #0]
 80086e0:	2b2e      	cmp	r3, #46	; 0x2e
 80086e2:	d10c      	bne.n	80086fe <_vfiprintf_r+0x176>
 80086e4:	7863      	ldrb	r3, [r4, #1]
 80086e6:	2b2a      	cmp	r3, #42	; 0x2a
 80086e8:	d135      	bne.n	8008756 <_vfiprintf_r+0x1ce>
 80086ea:	9b03      	ldr	r3, [sp, #12]
 80086ec:	1d1a      	adds	r2, r3, #4
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	9203      	str	r2, [sp, #12]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	bfb8      	it	lt
 80086f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80086fa:	3402      	adds	r4, #2
 80086fc:	9305      	str	r3, [sp, #20]
 80086fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80087e4 <_vfiprintf_r+0x25c>
 8008702:	7821      	ldrb	r1, [r4, #0]
 8008704:	2203      	movs	r2, #3
 8008706:	4650      	mov	r0, sl
 8008708:	f7f7 fd6a 	bl	80001e0 <memchr>
 800870c:	b140      	cbz	r0, 8008720 <_vfiprintf_r+0x198>
 800870e:	2340      	movs	r3, #64	; 0x40
 8008710:	eba0 000a 	sub.w	r0, r0, sl
 8008714:	fa03 f000 	lsl.w	r0, r3, r0
 8008718:	9b04      	ldr	r3, [sp, #16]
 800871a:	4303      	orrs	r3, r0
 800871c:	3401      	adds	r4, #1
 800871e:	9304      	str	r3, [sp, #16]
 8008720:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008724:	482c      	ldr	r0, [pc, #176]	; (80087d8 <_vfiprintf_r+0x250>)
 8008726:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800872a:	2206      	movs	r2, #6
 800872c:	f7f7 fd58 	bl	80001e0 <memchr>
 8008730:	2800      	cmp	r0, #0
 8008732:	d03f      	beq.n	80087b4 <_vfiprintf_r+0x22c>
 8008734:	4b29      	ldr	r3, [pc, #164]	; (80087dc <_vfiprintf_r+0x254>)
 8008736:	bb1b      	cbnz	r3, 8008780 <_vfiprintf_r+0x1f8>
 8008738:	9b03      	ldr	r3, [sp, #12]
 800873a:	3307      	adds	r3, #7
 800873c:	f023 0307 	bic.w	r3, r3, #7
 8008740:	3308      	adds	r3, #8
 8008742:	9303      	str	r3, [sp, #12]
 8008744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008746:	443b      	add	r3, r7
 8008748:	9309      	str	r3, [sp, #36]	; 0x24
 800874a:	e767      	b.n	800861c <_vfiprintf_r+0x94>
 800874c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008750:	460c      	mov	r4, r1
 8008752:	2001      	movs	r0, #1
 8008754:	e7a5      	b.n	80086a2 <_vfiprintf_r+0x11a>
 8008756:	2300      	movs	r3, #0
 8008758:	3401      	adds	r4, #1
 800875a:	9305      	str	r3, [sp, #20]
 800875c:	4619      	mov	r1, r3
 800875e:	f04f 0c0a 	mov.w	ip, #10
 8008762:	4620      	mov	r0, r4
 8008764:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008768:	3a30      	subs	r2, #48	; 0x30
 800876a:	2a09      	cmp	r2, #9
 800876c:	d903      	bls.n	8008776 <_vfiprintf_r+0x1ee>
 800876e:	2b00      	cmp	r3, #0
 8008770:	d0c5      	beq.n	80086fe <_vfiprintf_r+0x176>
 8008772:	9105      	str	r1, [sp, #20]
 8008774:	e7c3      	b.n	80086fe <_vfiprintf_r+0x176>
 8008776:	fb0c 2101 	mla	r1, ip, r1, r2
 800877a:	4604      	mov	r4, r0
 800877c:	2301      	movs	r3, #1
 800877e:	e7f0      	b.n	8008762 <_vfiprintf_r+0x1da>
 8008780:	ab03      	add	r3, sp, #12
 8008782:	9300      	str	r3, [sp, #0]
 8008784:	462a      	mov	r2, r5
 8008786:	4b16      	ldr	r3, [pc, #88]	; (80087e0 <_vfiprintf_r+0x258>)
 8008788:	a904      	add	r1, sp, #16
 800878a:	4630      	mov	r0, r6
 800878c:	f3af 8000 	nop.w
 8008790:	4607      	mov	r7, r0
 8008792:	1c78      	adds	r0, r7, #1
 8008794:	d1d6      	bne.n	8008744 <_vfiprintf_r+0x1bc>
 8008796:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008798:	07d9      	lsls	r1, r3, #31
 800879a:	d405      	bmi.n	80087a8 <_vfiprintf_r+0x220>
 800879c:	89ab      	ldrh	r3, [r5, #12]
 800879e:	059a      	lsls	r2, r3, #22
 80087a0:	d402      	bmi.n	80087a8 <_vfiprintf_r+0x220>
 80087a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087a4:	f7ff fe31 	bl	800840a <__retarget_lock_release_recursive>
 80087a8:	89ab      	ldrh	r3, [r5, #12]
 80087aa:	065b      	lsls	r3, r3, #25
 80087ac:	f53f af12 	bmi.w	80085d4 <_vfiprintf_r+0x4c>
 80087b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087b2:	e711      	b.n	80085d8 <_vfiprintf_r+0x50>
 80087b4:	ab03      	add	r3, sp, #12
 80087b6:	9300      	str	r3, [sp, #0]
 80087b8:	462a      	mov	r2, r5
 80087ba:	4b09      	ldr	r3, [pc, #36]	; (80087e0 <_vfiprintf_r+0x258>)
 80087bc:	a904      	add	r1, sp, #16
 80087be:	4630      	mov	r0, r6
 80087c0:	f000 f880 	bl	80088c4 <_printf_i>
 80087c4:	e7e4      	b.n	8008790 <_vfiprintf_r+0x208>
 80087c6:	bf00      	nop
 80087c8:	0800a350 	.word	0x0800a350
 80087cc:	0800a370 	.word	0x0800a370
 80087d0:	0800a330 	.word	0x0800a330
 80087d4:	0800a390 	.word	0x0800a390
 80087d8:	0800a39a 	.word	0x0800a39a
 80087dc:	00000000 	.word	0x00000000
 80087e0:	08008563 	.word	0x08008563
 80087e4:	0800a396 	.word	0x0800a396

080087e8 <_printf_common>:
 80087e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087ec:	4616      	mov	r6, r2
 80087ee:	4699      	mov	r9, r3
 80087f0:	688a      	ldr	r2, [r1, #8]
 80087f2:	690b      	ldr	r3, [r1, #16]
 80087f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087f8:	4293      	cmp	r3, r2
 80087fa:	bfb8      	it	lt
 80087fc:	4613      	movlt	r3, r2
 80087fe:	6033      	str	r3, [r6, #0]
 8008800:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008804:	4607      	mov	r7, r0
 8008806:	460c      	mov	r4, r1
 8008808:	b10a      	cbz	r2, 800880e <_printf_common+0x26>
 800880a:	3301      	adds	r3, #1
 800880c:	6033      	str	r3, [r6, #0]
 800880e:	6823      	ldr	r3, [r4, #0]
 8008810:	0699      	lsls	r1, r3, #26
 8008812:	bf42      	ittt	mi
 8008814:	6833      	ldrmi	r3, [r6, #0]
 8008816:	3302      	addmi	r3, #2
 8008818:	6033      	strmi	r3, [r6, #0]
 800881a:	6825      	ldr	r5, [r4, #0]
 800881c:	f015 0506 	ands.w	r5, r5, #6
 8008820:	d106      	bne.n	8008830 <_printf_common+0x48>
 8008822:	f104 0a19 	add.w	sl, r4, #25
 8008826:	68e3      	ldr	r3, [r4, #12]
 8008828:	6832      	ldr	r2, [r6, #0]
 800882a:	1a9b      	subs	r3, r3, r2
 800882c:	42ab      	cmp	r3, r5
 800882e:	dc26      	bgt.n	800887e <_printf_common+0x96>
 8008830:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008834:	1e13      	subs	r3, r2, #0
 8008836:	6822      	ldr	r2, [r4, #0]
 8008838:	bf18      	it	ne
 800883a:	2301      	movne	r3, #1
 800883c:	0692      	lsls	r2, r2, #26
 800883e:	d42b      	bmi.n	8008898 <_printf_common+0xb0>
 8008840:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008844:	4649      	mov	r1, r9
 8008846:	4638      	mov	r0, r7
 8008848:	47c0      	blx	r8
 800884a:	3001      	adds	r0, #1
 800884c:	d01e      	beq.n	800888c <_printf_common+0xa4>
 800884e:	6823      	ldr	r3, [r4, #0]
 8008850:	68e5      	ldr	r5, [r4, #12]
 8008852:	6832      	ldr	r2, [r6, #0]
 8008854:	f003 0306 	and.w	r3, r3, #6
 8008858:	2b04      	cmp	r3, #4
 800885a:	bf08      	it	eq
 800885c:	1aad      	subeq	r5, r5, r2
 800885e:	68a3      	ldr	r3, [r4, #8]
 8008860:	6922      	ldr	r2, [r4, #16]
 8008862:	bf0c      	ite	eq
 8008864:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008868:	2500      	movne	r5, #0
 800886a:	4293      	cmp	r3, r2
 800886c:	bfc4      	itt	gt
 800886e:	1a9b      	subgt	r3, r3, r2
 8008870:	18ed      	addgt	r5, r5, r3
 8008872:	2600      	movs	r6, #0
 8008874:	341a      	adds	r4, #26
 8008876:	42b5      	cmp	r5, r6
 8008878:	d11a      	bne.n	80088b0 <_printf_common+0xc8>
 800887a:	2000      	movs	r0, #0
 800887c:	e008      	b.n	8008890 <_printf_common+0xa8>
 800887e:	2301      	movs	r3, #1
 8008880:	4652      	mov	r2, sl
 8008882:	4649      	mov	r1, r9
 8008884:	4638      	mov	r0, r7
 8008886:	47c0      	blx	r8
 8008888:	3001      	adds	r0, #1
 800888a:	d103      	bne.n	8008894 <_printf_common+0xac>
 800888c:	f04f 30ff 	mov.w	r0, #4294967295
 8008890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008894:	3501      	adds	r5, #1
 8008896:	e7c6      	b.n	8008826 <_printf_common+0x3e>
 8008898:	18e1      	adds	r1, r4, r3
 800889a:	1c5a      	adds	r2, r3, #1
 800889c:	2030      	movs	r0, #48	; 0x30
 800889e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088a2:	4422      	add	r2, r4
 80088a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088ac:	3302      	adds	r3, #2
 80088ae:	e7c7      	b.n	8008840 <_printf_common+0x58>
 80088b0:	2301      	movs	r3, #1
 80088b2:	4622      	mov	r2, r4
 80088b4:	4649      	mov	r1, r9
 80088b6:	4638      	mov	r0, r7
 80088b8:	47c0      	blx	r8
 80088ba:	3001      	adds	r0, #1
 80088bc:	d0e6      	beq.n	800888c <_printf_common+0xa4>
 80088be:	3601      	adds	r6, #1
 80088c0:	e7d9      	b.n	8008876 <_printf_common+0x8e>
	...

080088c4 <_printf_i>:
 80088c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088c8:	7e0f      	ldrb	r7, [r1, #24]
 80088ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80088cc:	2f78      	cmp	r7, #120	; 0x78
 80088ce:	4691      	mov	r9, r2
 80088d0:	4680      	mov	r8, r0
 80088d2:	460c      	mov	r4, r1
 80088d4:	469a      	mov	sl, r3
 80088d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80088da:	d807      	bhi.n	80088ec <_printf_i+0x28>
 80088dc:	2f62      	cmp	r7, #98	; 0x62
 80088de:	d80a      	bhi.n	80088f6 <_printf_i+0x32>
 80088e0:	2f00      	cmp	r7, #0
 80088e2:	f000 80d8 	beq.w	8008a96 <_printf_i+0x1d2>
 80088e6:	2f58      	cmp	r7, #88	; 0x58
 80088e8:	f000 80a3 	beq.w	8008a32 <_printf_i+0x16e>
 80088ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80088f4:	e03a      	b.n	800896c <_printf_i+0xa8>
 80088f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80088fa:	2b15      	cmp	r3, #21
 80088fc:	d8f6      	bhi.n	80088ec <_printf_i+0x28>
 80088fe:	a101      	add	r1, pc, #4	; (adr r1, 8008904 <_printf_i+0x40>)
 8008900:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008904:	0800895d 	.word	0x0800895d
 8008908:	08008971 	.word	0x08008971
 800890c:	080088ed 	.word	0x080088ed
 8008910:	080088ed 	.word	0x080088ed
 8008914:	080088ed 	.word	0x080088ed
 8008918:	080088ed 	.word	0x080088ed
 800891c:	08008971 	.word	0x08008971
 8008920:	080088ed 	.word	0x080088ed
 8008924:	080088ed 	.word	0x080088ed
 8008928:	080088ed 	.word	0x080088ed
 800892c:	080088ed 	.word	0x080088ed
 8008930:	08008a7d 	.word	0x08008a7d
 8008934:	080089a1 	.word	0x080089a1
 8008938:	08008a5f 	.word	0x08008a5f
 800893c:	080088ed 	.word	0x080088ed
 8008940:	080088ed 	.word	0x080088ed
 8008944:	08008a9f 	.word	0x08008a9f
 8008948:	080088ed 	.word	0x080088ed
 800894c:	080089a1 	.word	0x080089a1
 8008950:	080088ed 	.word	0x080088ed
 8008954:	080088ed 	.word	0x080088ed
 8008958:	08008a67 	.word	0x08008a67
 800895c:	682b      	ldr	r3, [r5, #0]
 800895e:	1d1a      	adds	r2, r3, #4
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	602a      	str	r2, [r5, #0]
 8008964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008968:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800896c:	2301      	movs	r3, #1
 800896e:	e0a3      	b.n	8008ab8 <_printf_i+0x1f4>
 8008970:	6820      	ldr	r0, [r4, #0]
 8008972:	6829      	ldr	r1, [r5, #0]
 8008974:	0606      	lsls	r6, r0, #24
 8008976:	f101 0304 	add.w	r3, r1, #4
 800897a:	d50a      	bpl.n	8008992 <_printf_i+0xce>
 800897c:	680e      	ldr	r6, [r1, #0]
 800897e:	602b      	str	r3, [r5, #0]
 8008980:	2e00      	cmp	r6, #0
 8008982:	da03      	bge.n	800898c <_printf_i+0xc8>
 8008984:	232d      	movs	r3, #45	; 0x2d
 8008986:	4276      	negs	r6, r6
 8008988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800898c:	485e      	ldr	r0, [pc, #376]	; (8008b08 <_printf_i+0x244>)
 800898e:	230a      	movs	r3, #10
 8008990:	e019      	b.n	80089c6 <_printf_i+0x102>
 8008992:	680e      	ldr	r6, [r1, #0]
 8008994:	602b      	str	r3, [r5, #0]
 8008996:	f010 0f40 	tst.w	r0, #64	; 0x40
 800899a:	bf18      	it	ne
 800899c:	b236      	sxthne	r6, r6
 800899e:	e7ef      	b.n	8008980 <_printf_i+0xbc>
 80089a0:	682b      	ldr	r3, [r5, #0]
 80089a2:	6820      	ldr	r0, [r4, #0]
 80089a4:	1d19      	adds	r1, r3, #4
 80089a6:	6029      	str	r1, [r5, #0]
 80089a8:	0601      	lsls	r1, r0, #24
 80089aa:	d501      	bpl.n	80089b0 <_printf_i+0xec>
 80089ac:	681e      	ldr	r6, [r3, #0]
 80089ae:	e002      	b.n	80089b6 <_printf_i+0xf2>
 80089b0:	0646      	lsls	r6, r0, #25
 80089b2:	d5fb      	bpl.n	80089ac <_printf_i+0xe8>
 80089b4:	881e      	ldrh	r6, [r3, #0]
 80089b6:	4854      	ldr	r0, [pc, #336]	; (8008b08 <_printf_i+0x244>)
 80089b8:	2f6f      	cmp	r7, #111	; 0x6f
 80089ba:	bf0c      	ite	eq
 80089bc:	2308      	moveq	r3, #8
 80089be:	230a      	movne	r3, #10
 80089c0:	2100      	movs	r1, #0
 80089c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089c6:	6865      	ldr	r5, [r4, #4]
 80089c8:	60a5      	str	r5, [r4, #8]
 80089ca:	2d00      	cmp	r5, #0
 80089cc:	bfa2      	ittt	ge
 80089ce:	6821      	ldrge	r1, [r4, #0]
 80089d0:	f021 0104 	bicge.w	r1, r1, #4
 80089d4:	6021      	strge	r1, [r4, #0]
 80089d6:	b90e      	cbnz	r6, 80089dc <_printf_i+0x118>
 80089d8:	2d00      	cmp	r5, #0
 80089da:	d04d      	beq.n	8008a78 <_printf_i+0x1b4>
 80089dc:	4615      	mov	r5, r2
 80089de:	fbb6 f1f3 	udiv	r1, r6, r3
 80089e2:	fb03 6711 	mls	r7, r3, r1, r6
 80089e6:	5dc7      	ldrb	r7, [r0, r7]
 80089e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80089ec:	4637      	mov	r7, r6
 80089ee:	42bb      	cmp	r3, r7
 80089f0:	460e      	mov	r6, r1
 80089f2:	d9f4      	bls.n	80089de <_printf_i+0x11a>
 80089f4:	2b08      	cmp	r3, #8
 80089f6:	d10b      	bne.n	8008a10 <_printf_i+0x14c>
 80089f8:	6823      	ldr	r3, [r4, #0]
 80089fa:	07de      	lsls	r6, r3, #31
 80089fc:	d508      	bpl.n	8008a10 <_printf_i+0x14c>
 80089fe:	6923      	ldr	r3, [r4, #16]
 8008a00:	6861      	ldr	r1, [r4, #4]
 8008a02:	4299      	cmp	r1, r3
 8008a04:	bfde      	ittt	le
 8008a06:	2330      	movle	r3, #48	; 0x30
 8008a08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a10:	1b52      	subs	r2, r2, r5
 8008a12:	6122      	str	r2, [r4, #16]
 8008a14:	f8cd a000 	str.w	sl, [sp]
 8008a18:	464b      	mov	r3, r9
 8008a1a:	aa03      	add	r2, sp, #12
 8008a1c:	4621      	mov	r1, r4
 8008a1e:	4640      	mov	r0, r8
 8008a20:	f7ff fee2 	bl	80087e8 <_printf_common>
 8008a24:	3001      	adds	r0, #1
 8008a26:	d14c      	bne.n	8008ac2 <_printf_i+0x1fe>
 8008a28:	f04f 30ff 	mov.w	r0, #4294967295
 8008a2c:	b004      	add	sp, #16
 8008a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a32:	4835      	ldr	r0, [pc, #212]	; (8008b08 <_printf_i+0x244>)
 8008a34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008a38:	6829      	ldr	r1, [r5, #0]
 8008a3a:	6823      	ldr	r3, [r4, #0]
 8008a3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a40:	6029      	str	r1, [r5, #0]
 8008a42:	061d      	lsls	r5, r3, #24
 8008a44:	d514      	bpl.n	8008a70 <_printf_i+0x1ac>
 8008a46:	07df      	lsls	r7, r3, #31
 8008a48:	bf44      	itt	mi
 8008a4a:	f043 0320 	orrmi.w	r3, r3, #32
 8008a4e:	6023      	strmi	r3, [r4, #0]
 8008a50:	b91e      	cbnz	r6, 8008a5a <_printf_i+0x196>
 8008a52:	6823      	ldr	r3, [r4, #0]
 8008a54:	f023 0320 	bic.w	r3, r3, #32
 8008a58:	6023      	str	r3, [r4, #0]
 8008a5a:	2310      	movs	r3, #16
 8008a5c:	e7b0      	b.n	80089c0 <_printf_i+0xfc>
 8008a5e:	6823      	ldr	r3, [r4, #0]
 8008a60:	f043 0320 	orr.w	r3, r3, #32
 8008a64:	6023      	str	r3, [r4, #0]
 8008a66:	2378      	movs	r3, #120	; 0x78
 8008a68:	4828      	ldr	r0, [pc, #160]	; (8008b0c <_printf_i+0x248>)
 8008a6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a6e:	e7e3      	b.n	8008a38 <_printf_i+0x174>
 8008a70:	0659      	lsls	r1, r3, #25
 8008a72:	bf48      	it	mi
 8008a74:	b2b6      	uxthmi	r6, r6
 8008a76:	e7e6      	b.n	8008a46 <_printf_i+0x182>
 8008a78:	4615      	mov	r5, r2
 8008a7a:	e7bb      	b.n	80089f4 <_printf_i+0x130>
 8008a7c:	682b      	ldr	r3, [r5, #0]
 8008a7e:	6826      	ldr	r6, [r4, #0]
 8008a80:	6961      	ldr	r1, [r4, #20]
 8008a82:	1d18      	adds	r0, r3, #4
 8008a84:	6028      	str	r0, [r5, #0]
 8008a86:	0635      	lsls	r5, r6, #24
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	d501      	bpl.n	8008a90 <_printf_i+0x1cc>
 8008a8c:	6019      	str	r1, [r3, #0]
 8008a8e:	e002      	b.n	8008a96 <_printf_i+0x1d2>
 8008a90:	0670      	lsls	r0, r6, #25
 8008a92:	d5fb      	bpl.n	8008a8c <_printf_i+0x1c8>
 8008a94:	8019      	strh	r1, [r3, #0]
 8008a96:	2300      	movs	r3, #0
 8008a98:	6123      	str	r3, [r4, #16]
 8008a9a:	4615      	mov	r5, r2
 8008a9c:	e7ba      	b.n	8008a14 <_printf_i+0x150>
 8008a9e:	682b      	ldr	r3, [r5, #0]
 8008aa0:	1d1a      	adds	r2, r3, #4
 8008aa2:	602a      	str	r2, [r5, #0]
 8008aa4:	681d      	ldr	r5, [r3, #0]
 8008aa6:	6862      	ldr	r2, [r4, #4]
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	4628      	mov	r0, r5
 8008aac:	f7f7 fb98 	bl	80001e0 <memchr>
 8008ab0:	b108      	cbz	r0, 8008ab6 <_printf_i+0x1f2>
 8008ab2:	1b40      	subs	r0, r0, r5
 8008ab4:	6060      	str	r0, [r4, #4]
 8008ab6:	6863      	ldr	r3, [r4, #4]
 8008ab8:	6123      	str	r3, [r4, #16]
 8008aba:	2300      	movs	r3, #0
 8008abc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ac0:	e7a8      	b.n	8008a14 <_printf_i+0x150>
 8008ac2:	6923      	ldr	r3, [r4, #16]
 8008ac4:	462a      	mov	r2, r5
 8008ac6:	4649      	mov	r1, r9
 8008ac8:	4640      	mov	r0, r8
 8008aca:	47d0      	blx	sl
 8008acc:	3001      	adds	r0, #1
 8008ace:	d0ab      	beq.n	8008a28 <_printf_i+0x164>
 8008ad0:	6823      	ldr	r3, [r4, #0]
 8008ad2:	079b      	lsls	r3, r3, #30
 8008ad4:	d413      	bmi.n	8008afe <_printf_i+0x23a>
 8008ad6:	68e0      	ldr	r0, [r4, #12]
 8008ad8:	9b03      	ldr	r3, [sp, #12]
 8008ada:	4298      	cmp	r0, r3
 8008adc:	bfb8      	it	lt
 8008ade:	4618      	movlt	r0, r3
 8008ae0:	e7a4      	b.n	8008a2c <_printf_i+0x168>
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	4632      	mov	r2, r6
 8008ae6:	4649      	mov	r1, r9
 8008ae8:	4640      	mov	r0, r8
 8008aea:	47d0      	blx	sl
 8008aec:	3001      	adds	r0, #1
 8008aee:	d09b      	beq.n	8008a28 <_printf_i+0x164>
 8008af0:	3501      	adds	r5, #1
 8008af2:	68e3      	ldr	r3, [r4, #12]
 8008af4:	9903      	ldr	r1, [sp, #12]
 8008af6:	1a5b      	subs	r3, r3, r1
 8008af8:	42ab      	cmp	r3, r5
 8008afa:	dcf2      	bgt.n	8008ae2 <_printf_i+0x21e>
 8008afc:	e7eb      	b.n	8008ad6 <_printf_i+0x212>
 8008afe:	2500      	movs	r5, #0
 8008b00:	f104 0619 	add.w	r6, r4, #25
 8008b04:	e7f5      	b.n	8008af2 <_printf_i+0x22e>
 8008b06:	bf00      	nop
 8008b08:	0800a3a1 	.word	0x0800a3a1
 8008b0c:	0800a3b2 	.word	0x0800a3b2

08008b10 <_sbrk_r>:
 8008b10:	b538      	push	{r3, r4, r5, lr}
 8008b12:	4d06      	ldr	r5, [pc, #24]	; (8008b2c <_sbrk_r+0x1c>)
 8008b14:	2300      	movs	r3, #0
 8008b16:	4604      	mov	r4, r0
 8008b18:	4608      	mov	r0, r1
 8008b1a:	602b      	str	r3, [r5, #0]
 8008b1c:	f7fa ffb6 	bl	8003a8c <_sbrk>
 8008b20:	1c43      	adds	r3, r0, #1
 8008b22:	d102      	bne.n	8008b2a <_sbrk_r+0x1a>
 8008b24:	682b      	ldr	r3, [r5, #0]
 8008b26:	b103      	cbz	r3, 8008b2a <_sbrk_r+0x1a>
 8008b28:	6023      	str	r3, [r4, #0]
 8008b2a:	bd38      	pop	{r3, r4, r5, pc}
 8008b2c:	20002260 	.word	0x20002260

08008b30 <__sread>:
 8008b30:	b510      	push	{r4, lr}
 8008b32:	460c      	mov	r4, r1
 8008b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b38:	f000 fab2 	bl	80090a0 <_read_r>
 8008b3c:	2800      	cmp	r0, #0
 8008b3e:	bfab      	itete	ge
 8008b40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b42:	89a3      	ldrhlt	r3, [r4, #12]
 8008b44:	181b      	addge	r3, r3, r0
 8008b46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b4a:	bfac      	ite	ge
 8008b4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b4e:	81a3      	strhlt	r3, [r4, #12]
 8008b50:	bd10      	pop	{r4, pc}

08008b52 <__swrite>:
 8008b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b56:	461f      	mov	r7, r3
 8008b58:	898b      	ldrh	r3, [r1, #12]
 8008b5a:	05db      	lsls	r3, r3, #23
 8008b5c:	4605      	mov	r5, r0
 8008b5e:	460c      	mov	r4, r1
 8008b60:	4616      	mov	r6, r2
 8008b62:	d505      	bpl.n	8008b70 <__swrite+0x1e>
 8008b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b68:	2302      	movs	r3, #2
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f000 f9c8 	bl	8008f00 <_lseek_r>
 8008b70:	89a3      	ldrh	r3, [r4, #12]
 8008b72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b7a:	81a3      	strh	r3, [r4, #12]
 8008b7c:	4632      	mov	r2, r6
 8008b7e:	463b      	mov	r3, r7
 8008b80:	4628      	mov	r0, r5
 8008b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b86:	f000 b869 	b.w	8008c5c <_write_r>

08008b8a <__sseek>:
 8008b8a:	b510      	push	{r4, lr}
 8008b8c:	460c      	mov	r4, r1
 8008b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b92:	f000 f9b5 	bl	8008f00 <_lseek_r>
 8008b96:	1c43      	adds	r3, r0, #1
 8008b98:	89a3      	ldrh	r3, [r4, #12]
 8008b9a:	bf15      	itete	ne
 8008b9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ba2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ba6:	81a3      	strheq	r3, [r4, #12]
 8008ba8:	bf18      	it	ne
 8008baa:	81a3      	strhne	r3, [r4, #12]
 8008bac:	bd10      	pop	{r4, pc}

08008bae <__sclose>:
 8008bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bb2:	f000 b8d3 	b.w	8008d5c <_close_r>
	...

08008bb8 <__swbuf_r>:
 8008bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bba:	460e      	mov	r6, r1
 8008bbc:	4614      	mov	r4, r2
 8008bbe:	4605      	mov	r5, r0
 8008bc0:	b118      	cbz	r0, 8008bca <__swbuf_r+0x12>
 8008bc2:	6983      	ldr	r3, [r0, #24]
 8008bc4:	b90b      	cbnz	r3, 8008bca <__swbuf_r+0x12>
 8008bc6:	f7ff fb81 	bl	80082cc <__sinit>
 8008bca:	4b21      	ldr	r3, [pc, #132]	; (8008c50 <__swbuf_r+0x98>)
 8008bcc:	429c      	cmp	r4, r3
 8008bce:	d12b      	bne.n	8008c28 <__swbuf_r+0x70>
 8008bd0:	686c      	ldr	r4, [r5, #4]
 8008bd2:	69a3      	ldr	r3, [r4, #24]
 8008bd4:	60a3      	str	r3, [r4, #8]
 8008bd6:	89a3      	ldrh	r3, [r4, #12]
 8008bd8:	071a      	lsls	r2, r3, #28
 8008bda:	d52f      	bpl.n	8008c3c <__swbuf_r+0x84>
 8008bdc:	6923      	ldr	r3, [r4, #16]
 8008bde:	b36b      	cbz	r3, 8008c3c <__swbuf_r+0x84>
 8008be0:	6923      	ldr	r3, [r4, #16]
 8008be2:	6820      	ldr	r0, [r4, #0]
 8008be4:	1ac0      	subs	r0, r0, r3
 8008be6:	6963      	ldr	r3, [r4, #20]
 8008be8:	b2f6      	uxtb	r6, r6
 8008bea:	4283      	cmp	r3, r0
 8008bec:	4637      	mov	r7, r6
 8008bee:	dc04      	bgt.n	8008bfa <__swbuf_r+0x42>
 8008bf0:	4621      	mov	r1, r4
 8008bf2:	4628      	mov	r0, r5
 8008bf4:	f000 f948 	bl	8008e88 <_fflush_r>
 8008bf8:	bb30      	cbnz	r0, 8008c48 <__swbuf_r+0x90>
 8008bfa:	68a3      	ldr	r3, [r4, #8]
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	60a3      	str	r3, [r4, #8]
 8008c00:	6823      	ldr	r3, [r4, #0]
 8008c02:	1c5a      	adds	r2, r3, #1
 8008c04:	6022      	str	r2, [r4, #0]
 8008c06:	701e      	strb	r6, [r3, #0]
 8008c08:	6963      	ldr	r3, [r4, #20]
 8008c0a:	3001      	adds	r0, #1
 8008c0c:	4283      	cmp	r3, r0
 8008c0e:	d004      	beq.n	8008c1a <__swbuf_r+0x62>
 8008c10:	89a3      	ldrh	r3, [r4, #12]
 8008c12:	07db      	lsls	r3, r3, #31
 8008c14:	d506      	bpl.n	8008c24 <__swbuf_r+0x6c>
 8008c16:	2e0a      	cmp	r6, #10
 8008c18:	d104      	bne.n	8008c24 <__swbuf_r+0x6c>
 8008c1a:	4621      	mov	r1, r4
 8008c1c:	4628      	mov	r0, r5
 8008c1e:	f000 f933 	bl	8008e88 <_fflush_r>
 8008c22:	b988      	cbnz	r0, 8008c48 <__swbuf_r+0x90>
 8008c24:	4638      	mov	r0, r7
 8008c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c28:	4b0a      	ldr	r3, [pc, #40]	; (8008c54 <__swbuf_r+0x9c>)
 8008c2a:	429c      	cmp	r4, r3
 8008c2c:	d101      	bne.n	8008c32 <__swbuf_r+0x7a>
 8008c2e:	68ac      	ldr	r4, [r5, #8]
 8008c30:	e7cf      	b.n	8008bd2 <__swbuf_r+0x1a>
 8008c32:	4b09      	ldr	r3, [pc, #36]	; (8008c58 <__swbuf_r+0xa0>)
 8008c34:	429c      	cmp	r4, r3
 8008c36:	bf08      	it	eq
 8008c38:	68ec      	ldreq	r4, [r5, #12]
 8008c3a:	e7ca      	b.n	8008bd2 <__swbuf_r+0x1a>
 8008c3c:	4621      	mov	r1, r4
 8008c3e:	4628      	mov	r0, r5
 8008c40:	f000 f81e 	bl	8008c80 <__swsetup_r>
 8008c44:	2800      	cmp	r0, #0
 8008c46:	d0cb      	beq.n	8008be0 <__swbuf_r+0x28>
 8008c48:	f04f 37ff 	mov.w	r7, #4294967295
 8008c4c:	e7ea      	b.n	8008c24 <__swbuf_r+0x6c>
 8008c4e:	bf00      	nop
 8008c50:	0800a350 	.word	0x0800a350
 8008c54:	0800a370 	.word	0x0800a370
 8008c58:	0800a330 	.word	0x0800a330

08008c5c <_write_r>:
 8008c5c:	b538      	push	{r3, r4, r5, lr}
 8008c5e:	4d07      	ldr	r5, [pc, #28]	; (8008c7c <_write_r+0x20>)
 8008c60:	4604      	mov	r4, r0
 8008c62:	4608      	mov	r0, r1
 8008c64:	4611      	mov	r1, r2
 8008c66:	2200      	movs	r2, #0
 8008c68:	602a      	str	r2, [r5, #0]
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	f7f7 ffe7 	bl	8000c3e <_write>
 8008c70:	1c43      	adds	r3, r0, #1
 8008c72:	d102      	bne.n	8008c7a <_write_r+0x1e>
 8008c74:	682b      	ldr	r3, [r5, #0]
 8008c76:	b103      	cbz	r3, 8008c7a <_write_r+0x1e>
 8008c78:	6023      	str	r3, [r4, #0]
 8008c7a:	bd38      	pop	{r3, r4, r5, pc}
 8008c7c:	20002260 	.word	0x20002260

08008c80 <__swsetup_r>:
 8008c80:	4b32      	ldr	r3, [pc, #200]	; (8008d4c <__swsetup_r+0xcc>)
 8008c82:	b570      	push	{r4, r5, r6, lr}
 8008c84:	681d      	ldr	r5, [r3, #0]
 8008c86:	4606      	mov	r6, r0
 8008c88:	460c      	mov	r4, r1
 8008c8a:	b125      	cbz	r5, 8008c96 <__swsetup_r+0x16>
 8008c8c:	69ab      	ldr	r3, [r5, #24]
 8008c8e:	b913      	cbnz	r3, 8008c96 <__swsetup_r+0x16>
 8008c90:	4628      	mov	r0, r5
 8008c92:	f7ff fb1b 	bl	80082cc <__sinit>
 8008c96:	4b2e      	ldr	r3, [pc, #184]	; (8008d50 <__swsetup_r+0xd0>)
 8008c98:	429c      	cmp	r4, r3
 8008c9a:	d10f      	bne.n	8008cbc <__swsetup_r+0x3c>
 8008c9c:	686c      	ldr	r4, [r5, #4]
 8008c9e:	89a3      	ldrh	r3, [r4, #12]
 8008ca0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ca4:	0719      	lsls	r1, r3, #28
 8008ca6:	d42c      	bmi.n	8008d02 <__swsetup_r+0x82>
 8008ca8:	06dd      	lsls	r5, r3, #27
 8008caa:	d411      	bmi.n	8008cd0 <__swsetup_r+0x50>
 8008cac:	2309      	movs	r3, #9
 8008cae:	6033      	str	r3, [r6, #0]
 8008cb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008cb4:	81a3      	strh	r3, [r4, #12]
 8008cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8008cba:	e03e      	b.n	8008d3a <__swsetup_r+0xba>
 8008cbc:	4b25      	ldr	r3, [pc, #148]	; (8008d54 <__swsetup_r+0xd4>)
 8008cbe:	429c      	cmp	r4, r3
 8008cc0:	d101      	bne.n	8008cc6 <__swsetup_r+0x46>
 8008cc2:	68ac      	ldr	r4, [r5, #8]
 8008cc4:	e7eb      	b.n	8008c9e <__swsetup_r+0x1e>
 8008cc6:	4b24      	ldr	r3, [pc, #144]	; (8008d58 <__swsetup_r+0xd8>)
 8008cc8:	429c      	cmp	r4, r3
 8008cca:	bf08      	it	eq
 8008ccc:	68ec      	ldreq	r4, [r5, #12]
 8008cce:	e7e6      	b.n	8008c9e <__swsetup_r+0x1e>
 8008cd0:	0758      	lsls	r0, r3, #29
 8008cd2:	d512      	bpl.n	8008cfa <__swsetup_r+0x7a>
 8008cd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cd6:	b141      	cbz	r1, 8008cea <__swsetup_r+0x6a>
 8008cd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cdc:	4299      	cmp	r1, r3
 8008cde:	d002      	beq.n	8008ce6 <__swsetup_r+0x66>
 8008ce0:	4630      	mov	r0, r6
 8008ce2:	f000 f991 	bl	8009008 <_free_r>
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	6363      	str	r3, [r4, #52]	; 0x34
 8008cea:	89a3      	ldrh	r3, [r4, #12]
 8008cec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008cf0:	81a3      	strh	r3, [r4, #12]
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	6063      	str	r3, [r4, #4]
 8008cf6:	6923      	ldr	r3, [r4, #16]
 8008cf8:	6023      	str	r3, [r4, #0]
 8008cfa:	89a3      	ldrh	r3, [r4, #12]
 8008cfc:	f043 0308 	orr.w	r3, r3, #8
 8008d00:	81a3      	strh	r3, [r4, #12]
 8008d02:	6923      	ldr	r3, [r4, #16]
 8008d04:	b94b      	cbnz	r3, 8008d1a <__swsetup_r+0x9a>
 8008d06:	89a3      	ldrh	r3, [r4, #12]
 8008d08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d10:	d003      	beq.n	8008d1a <__swsetup_r+0x9a>
 8008d12:	4621      	mov	r1, r4
 8008d14:	4630      	mov	r0, r6
 8008d16:	f000 f92b 	bl	8008f70 <__smakebuf_r>
 8008d1a:	89a0      	ldrh	r0, [r4, #12]
 8008d1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d20:	f010 0301 	ands.w	r3, r0, #1
 8008d24:	d00a      	beq.n	8008d3c <__swsetup_r+0xbc>
 8008d26:	2300      	movs	r3, #0
 8008d28:	60a3      	str	r3, [r4, #8]
 8008d2a:	6963      	ldr	r3, [r4, #20]
 8008d2c:	425b      	negs	r3, r3
 8008d2e:	61a3      	str	r3, [r4, #24]
 8008d30:	6923      	ldr	r3, [r4, #16]
 8008d32:	b943      	cbnz	r3, 8008d46 <__swsetup_r+0xc6>
 8008d34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008d38:	d1ba      	bne.n	8008cb0 <__swsetup_r+0x30>
 8008d3a:	bd70      	pop	{r4, r5, r6, pc}
 8008d3c:	0781      	lsls	r1, r0, #30
 8008d3e:	bf58      	it	pl
 8008d40:	6963      	ldrpl	r3, [r4, #20]
 8008d42:	60a3      	str	r3, [r4, #8]
 8008d44:	e7f4      	b.n	8008d30 <__swsetup_r+0xb0>
 8008d46:	2000      	movs	r0, #0
 8008d48:	e7f7      	b.n	8008d3a <__swsetup_r+0xba>
 8008d4a:	bf00      	nop
 8008d4c:	20000608 	.word	0x20000608
 8008d50:	0800a350 	.word	0x0800a350
 8008d54:	0800a370 	.word	0x0800a370
 8008d58:	0800a330 	.word	0x0800a330

08008d5c <_close_r>:
 8008d5c:	b538      	push	{r3, r4, r5, lr}
 8008d5e:	4d06      	ldr	r5, [pc, #24]	; (8008d78 <_close_r+0x1c>)
 8008d60:	2300      	movs	r3, #0
 8008d62:	4604      	mov	r4, r0
 8008d64:	4608      	mov	r0, r1
 8008d66:	602b      	str	r3, [r5, #0]
 8008d68:	f7fa fe5b 	bl	8003a22 <_close>
 8008d6c:	1c43      	adds	r3, r0, #1
 8008d6e:	d102      	bne.n	8008d76 <_close_r+0x1a>
 8008d70:	682b      	ldr	r3, [r5, #0]
 8008d72:	b103      	cbz	r3, 8008d76 <_close_r+0x1a>
 8008d74:	6023      	str	r3, [r4, #0]
 8008d76:	bd38      	pop	{r3, r4, r5, pc}
 8008d78:	20002260 	.word	0x20002260

08008d7c <__sflush_r>:
 8008d7c:	898a      	ldrh	r2, [r1, #12]
 8008d7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d82:	4605      	mov	r5, r0
 8008d84:	0710      	lsls	r0, r2, #28
 8008d86:	460c      	mov	r4, r1
 8008d88:	d458      	bmi.n	8008e3c <__sflush_r+0xc0>
 8008d8a:	684b      	ldr	r3, [r1, #4]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	dc05      	bgt.n	8008d9c <__sflush_r+0x20>
 8008d90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	dc02      	bgt.n	8008d9c <__sflush_r+0x20>
 8008d96:	2000      	movs	r0, #0
 8008d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d9e:	2e00      	cmp	r6, #0
 8008da0:	d0f9      	beq.n	8008d96 <__sflush_r+0x1a>
 8008da2:	2300      	movs	r3, #0
 8008da4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008da8:	682f      	ldr	r7, [r5, #0]
 8008daa:	602b      	str	r3, [r5, #0]
 8008dac:	d032      	beq.n	8008e14 <__sflush_r+0x98>
 8008dae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008db0:	89a3      	ldrh	r3, [r4, #12]
 8008db2:	075a      	lsls	r2, r3, #29
 8008db4:	d505      	bpl.n	8008dc2 <__sflush_r+0x46>
 8008db6:	6863      	ldr	r3, [r4, #4]
 8008db8:	1ac0      	subs	r0, r0, r3
 8008dba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008dbc:	b10b      	cbz	r3, 8008dc2 <__sflush_r+0x46>
 8008dbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008dc0:	1ac0      	subs	r0, r0, r3
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008dc8:	6a21      	ldr	r1, [r4, #32]
 8008dca:	4628      	mov	r0, r5
 8008dcc:	47b0      	blx	r6
 8008dce:	1c43      	adds	r3, r0, #1
 8008dd0:	89a3      	ldrh	r3, [r4, #12]
 8008dd2:	d106      	bne.n	8008de2 <__sflush_r+0x66>
 8008dd4:	6829      	ldr	r1, [r5, #0]
 8008dd6:	291d      	cmp	r1, #29
 8008dd8:	d82c      	bhi.n	8008e34 <__sflush_r+0xb8>
 8008dda:	4a2a      	ldr	r2, [pc, #168]	; (8008e84 <__sflush_r+0x108>)
 8008ddc:	40ca      	lsrs	r2, r1
 8008dde:	07d6      	lsls	r6, r2, #31
 8008de0:	d528      	bpl.n	8008e34 <__sflush_r+0xb8>
 8008de2:	2200      	movs	r2, #0
 8008de4:	6062      	str	r2, [r4, #4]
 8008de6:	04d9      	lsls	r1, r3, #19
 8008de8:	6922      	ldr	r2, [r4, #16]
 8008dea:	6022      	str	r2, [r4, #0]
 8008dec:	d504      	bpl.n	8008df8 <__sflush_r+0x7c>
 8008dee:	1c42      	adds	r2, r0, #1
 8008df0:	d101      	bne.n	8008df6 <__sflush_r+0x7a>
 8008df2:	682b      	ldr	r3, [r5, #0]
 8008df4:	b903      	cbnz	r3, 8008df8 <__sflush_r+0x7c>
 8008df6:	6560      	str	r0, [r4, #84]	; 0x54
 8008df8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dfa:	602f      	str	r7, [r5, #0]
 8008dfc:	2900      	cmp	r1, #0
 8008dfe:	d0ca      	beq.n	8008d96 <__sflush_r+0x1a>
 8008e00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e04:	4299      	cmp	r1, r3
 8008e06:	d002      	beq.n	8008e0e <__sflush_r+0x92>
 8008e08:	4628      	mov	r0, r5
 8008e0a:	f000 f8fd 	bl	8009008 <_free_r>
 8008e0e:	2000      	movs	r0, #0
 8008e10:	6360      	str	r0, [r4, #52]	; 0x34
 8008e12:	e7c1      	b.n	8008d98 <__sflush_r+0x1c>
 8008e14:	6a21      	ldr	r1, [r4, #32]
 8008e16:	2301      	movs	r3, #1
 8008e18:	4628      	mov	r0, r5
 8008e1a:	47b0      	blx	r6
 8008e1c:	1c41      	adds	r1, r0, #1
 8008e1e:	d1c7      	bne.n	8008db0 <__sflush_r+0x34>
 8008e20:	682b      	ldr	r3, [r5, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d0c4      	beq.n	8008db0 <__sflush_r+0x34>
 8008e26:	2b1d      	cmp	r3, #29
 8008e28:	d001      	beq.n	8008e2e <__sflush_r+0xb2>
 8008e2a:	2b16      	cmp	r3, #22
 8008e2c:	d101      	bne.n	8008e32 <__sflush_r+0xb6>
 8008e2e:	602f      	str	r7, [r5, #0]
 8008e30:	e7b1      	b.n	8008d96 <__sflush_r+0x1a>
 8008e32:	89a3      	ldrh	r3, [r4, #12]
 8008e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e38:	81a3      	strh	r3, [r4, #12]
 8008e3a:	e7ad      	b.n	8008d98 <__sflush_r+0x1c>
 8008e3c:	690f      	ldr	r7, [r1, #16]
 8008e3e:	2f00      	cmp	r7, #0
 8008e40:	d0a9      	beq.n	8008d96 <__sflush_r+0x1a>
 8008e42:	0793      	lsls	r3, r2, #30
 8008e44:	680e      	ldr	r6, [r1, #0]
 8008e46:	bf08      	it	eq
 8008e48:	694b      	ldreq	r3, [r1, #20]
 8008e4a:	600f      	str	r7, [r1, #0]
 8008e4c:	bf18      	it	ne
 8008e4e:	2300      	movne	r3, #0
 8008e50:	eba6 0807 	sub.w	r8, r6, r7
 8008e54:	608b      	str	r3, [r1, #8]
 8008e56:	f1b8 0f00 	cmp.w	r8, #0
 8008e5a:	dd9c      	ble.n	8008d96 <__sflush_r+0x1a>
 8008e5c:	6a21      	ldr	r1, [r4, #32]
 8008e5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e60:	4643      	mov	r3, r8
 8008e62:	463a      	mov	r2, r7
 8008e64:	4628      	mov	r0, r5
 8008e66:	47b0      	blx	r6
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	dc06      	bgt.n	8008e7a <__sflush_r+0xfe>
 8008e6c:	89a3      	ldrh	r3, [r4, #12]
 8008e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e72:	81a3      	strh	r3, [r4, #12]
 8008e74:	f04f 30ff 	mov.w	r0, #4294967295
 8008e78:	e78e      	b.n	8008d98 <__sflush_r+0x1c>
 8008e7a:	4407      	add	r7, r0
 8008e7c:	eba8 0800 	sub.w	r8, r8, r0
 8008e80:	e7e9      	b.n	8008e56 <__sflush_r+0xda>
 8008e82:	bf00      	nop
 8008e84:	20400001 	.word	0x20400001

08008e88 <_fflush_r>:
 8008e88:	b538      	push	{r3, r4, r5, lr}
 8008e8a:	690b      	ldr	r3, [r1, #16]
 8008e8c:	4605      	mov	r5, r0
 8008e8e:	460c      	mov	r4, r1
 8008e90:	b913      	cbnz	r3, 8008e98 <_fflush_r+0x10>
 8008e92:	2500      	movs	r5, #0
 8008e94:	4628      	mov	r0, r5
 8008e96:	bd38      	pop	{r3, r4, r5, pc}
 8008e98:	b118      	cbz	r0, 8008ea2 <_fflush_r+0x1a>
 8008e9a:	6983      	ldr	r3, [r0, #24]
 8008e9c:	b90b      	cbnz	r3, 8008ea2 <_fflush_r+0x1a>
 8008e9e:	f7ff fa15 	bl	80082cc <__sinit>
 8008ea2:	4b14      	ldr	r3, [pc, #80]	; (8008ef4 <_fflush_r+0x6c>)
 8008ea4:	429c      	cmp	r4, r3
 8008ea6:	d11b      	bne.n	8008ee0 <_fflush_r+0x58>
 8008ea8:	686c      	ldr	r4, [r5, #4]
 8008eaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d0ef      	beq.n	8008e92 <_fflush_r+0xa>
 8008eb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008eb4:	07d0      	lsls	r0, r2, #31
 8008eb6:	d404      	bmi.n	8008ec2 <_fflush_r+0x3a>
 8008eb8:	0599      	lsls	r1, r3, #22
 8008eba:	d402      	bmi.n	8008ec2 <_fflush_r+0x3a>
 8008ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ebe:	f7ff faa3 	bl	8008408 <__retarget_lock_acquire_recursive>
 8008ec2:	4628      	mov	r0, r5
 8008ec4:	4621      	mov	r1, r4
 8008ec6:	f7ff ff59 	bl	8008d7c <__sflush_r>
 8008eca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ecc:	07da      	lsls	r2, r3, #31
 8008ece:	4605      	mov	r5, r0
 8008ed0:	d4e0      	bmi.n	8008e94 <_fflush_r+0xc>
 8008ed2:	89a3      	ldrh	r3, [r4, #12]
 8008ed4:	059b      	lsls	r3, r3, #22
 8008ed6:	d4dd      	bmi.n	8008e94 <_fflush_r+0xc>
 8008ed8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008eda:	f7ff fa96 	bl	800840a <__retarget_lock_release_recursive>
 8008ede:	e7d9      	b.n	8008e94 <_fflush_r+0xc>
 8008ee0:	4b05      	ldr	r3, [pc, #20]	; (8008ef8 <_fflush_r+0x70>)
 8008ee2:	429c      	cmp	r4, r3
 8008ee4:	d101      	bne.n	8008eea <_fflush_r+0x62>
 8008ee6:	68ac      	ldr	r4, [r5, #8]
 8008ee8:	e7df      	b.n	8008eaa <_fflush_r+0x22>
 8008eea:	4b04      	ldr	r3, [pc, #16]	; (8008efc <_fflush_r+0x74>)
 8008eec:	429c      	cmp	r4, r3
 8008eee:	bf08      	it	eq
 8008ef0:	68ec      	ldreq	r4, [r5, #12]
 8008ef2:	e7da      	b.n	8008eaa <_fflush_r+0x22>
 8008ef4:	0800a350 	.word	0x0800a350
 8008ef8:	0800a370 	.word	0x0800a370
 8008efc:	0800a330 	.word	0x0800a330

08008f00 <_lseek_r>:
 8008f00:	b538      	push	{r3, r4, r5, lr}
 8008f02:	4d07      	ldr	r5, [pc, #28]	; (8008f20 <_lseek_r+0x20>)
 8008f04:	4604      	mov	r4, r0
 8008f06:	4608      	mov	r0, r1
 8008f08:	4611      	mov	r1, r2
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	602a      	str	r2, [r5, #0]
 8008f0e:	461a      	mov	r2, r3
 8008f10:	f7fa fdae 	bl	8003a70 <_lseek>
 8008f14:	1c43      	adds	r3, r0, #1
 8008f16:	d102      	bne.n	8008f1e <_lseek_r+0x1e>
 8008f18:	682b      	ldr	r3, [r5, #0]
 8008f1a:	b103      	cbz	r3, 8008f1e <_lseek_r+0x1e>
 8008f1c:	6023      	str	r3, [r4, #0]
 8008f1e:	bd38      	pop	{r3, r4, r5, pc}
 8008f20:	20002260 	.word	0x20002260

08008f24 <__swhatbuf_r>:
 8008f24:	b570      	push	{r4, r5, r6, lr}
 8008f26:	460e      	mov	r6, r1
 8008f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f2c:	2900      	cmp	r1, #0
 8008f2e:	b096      	sub	sp, #88	; 0x58
 8008f30:	4614      	mov	r4, r2
 8008f32:	461d      	mov	r5, r3
 8008f34:	da08      	bge.n	8008f48 <__swhatbuf_r+0x24>
 8008f36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	602a      	str	r2, [r5, #0]
 8008f3e:	061a      	lsls	r2, r3, #24
 8008f40:	d410      	bmi.n	8008f64 <__swhatbuf_r+0x40>
 8008f42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f46:	e00e      	b.n	8008f66 <__swhatbuf_r+0x42>
 8008f48:	466a      	mov	r2, sp
 8008f4a:	f000 f8bb 	bl	80090c4 <_fstat_r>
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	dbf1      	blt.n	8008f36 <__swhatbuf_r+0x12>
 8008f52:	9a01      	ldr	r2, [sp, #4]
 8008f54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f5c:	425a      	negs	r2, r3
 8008f5e:	415a      	adcs	r2, r3
 8008f60:	602a      	str	r2, [r5, #0]
 8008f62:	e7ee      	b.n	8008f42 <__swhatbuf_r+0x1e>
 8008f64:	2340      	movs	r3, #64	; 0x40
 8008f66:	2000      	movs	r0, #0
 8008f68:	6023      	str	r3, [r4, #0]
 8008f6a:	b016      	add	sp, #88	; 0x58
 8008f6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008f70 <__smakebuf_r>:
 8008f70:	898b      	ldrh	r3, [r1, #12]
 8008f72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f74:	079d      	lsls	r5, r3, #30
 8008f76:	4606      	mov	r6, r0
 8008f78:	460c      	mov	r4, r1
 8008f7a:	d507      	bpl.n	8008f8c <__smakebuf_r+0x1c>
 8008f7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f80:	6023      	str	r3, [r4, #0]
 8008f82:	6123      	str	r3, [r4, #16]
 8008f84:	2301      	movs	r3, #1
 8008f86:	6163      	str	r3, [r4, #20]
 8008f88:	b002      	add	sp, #8
 8008f8a:	bd70      	pop	{r4, r5, r6, pc}
 8008f8c:	ab01      	add	r3, sp, #4
 8008f8e:	466a      	mov	r2, sp
 8008f90:	f7ff ffc8 	bl	8008f24 <__swhatbuf_r>
 8008f94:	9900      	ldr	r1, [sp, #0]
 8008f96:	4605      	mov	r5, r0
 8008f98:	4630      	mov	r0, r6
 8008f9a:	f7ff fa57 	bl	800844c <_malloc_r>
 8008f9e:	b948      	cbnz	r0, 8008fb4 <__smakebuf_r+0x44>
 8008fa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fa4:	059a      	lsls	r2, r3, #22
 8008fa6:	d4ef      	bmi.n	8008f88 <__smakebuf_r+0x18>
 8008fa8:	f023 0303 	bic.w	r3, r3, #3
 8008fac:	f043 0302 	orr.w	r3, r3, #2
 8008fb0:	81a3      	strh	r3, [r4, #12]
 8008fb2:	e7e3      	b.n	8008f7c <__smakebuf_r+0xc>
 8008fb4:	4b0d      	ldr	r3, [pc, #52]	; (8008fec <__smakebuf_r+0x7c>)
 8008fb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008fb8:	89a3      	ldrh	r3, [r4, #12]
 8008fba:	6020      	str	r0, [r4, #0]
 8008fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fc0:	81a3      	strh	r3, [r4, #12]
 8008fc2:	9b00      	ldr	r3, [sp, #0]
 8008fc4:	6163      	str	r3, [r4, #20]
 8008fc6:	9b01      	ldr	r3, [sp, #4]
 8008fc8:	6120      	str	r0, [r4, #16]
 8008fca:	b15b      	cbz	r3, 8008fe4 <__smakebuf_r+0x74>
 8008fcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fd0:	4630      	mov	r0, r6
 8008fd2:	f000 f889 	bl	80090e8 <_isatty_r>
 8008fd6:	b128      	cbz	r0, 8008fe4 <__smakebuf_r+0x74>
 8008fd8:	89a3      	ldrh	r3, [r4, #12]
 8008fda:	f023 0303 	bic.w	r3, r3, #3
 8008fde:	f043 0301 	orr.w	r3, r3, #1
 8008fe2:	81a3      	strh	r3, [r4, #12]
 8008fe4:	89a0      	ldrh	r0, [r4, #12]
 8008fe6:	4305      	orrs	r5, r0
 8008fe8:	81a5      	strh	r5, [r4, #12]
 8008fea:	e7cd      	b.n	8008f88 <__smakebuf_r+0x18>
 8008fec:	08008265 	.word	0x08008265

08008ff0 <__malloc_lock>:
 8008ff0:	4801      	ldr	r0, [pc, #4]	; (8008ff8 <__malloc_lock+0x8>)
 8008ff2:	f7ff ba09 	b.w	8008408 <__retarget_lock_acquire_recursive>
 8008ff6:	bf00      	nop
 8008ff8:	20002254 	.word	0x20002254

08008ffc <__malloc_unlock>:
 8008ffc:	4801      	ldr	r0, [pc, #4]	; (8009004 <__malloc_unlock+0x8>)
 8008ffe:	f7ff ba04 	b.w	800840a <__retarget_lock_release_recursive>
 8009002:	bf00      	nop
 8009004:	20002254 	.word	0x20002254

08009008 <_free_r>:
 8009008:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800900a:	2900      	cmp	r1, #0
 800900c:	d044      	beq.n	8009098 <_free_r+0x90>
 800900e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009012:	9001      	str	r0, [sp, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	f1a1 0404 	sub.w	r4, r1, #4
 800901a:	bfb8      	it	lt
 800901c:	18e4      	addlt	r4, r4, r3
 800901e:	f7ff ffe7 	bl	8008ff0 <__malloc_lock>
 8009022:	4a1e      	ldr	r2, [pc, #120]	; (800909c <_free_r+0x94>)
 8009024:	9801      	ldr	r0, [sp, #4]
 8009026:	6813      	ldr	r3, [r2, #0]
 8009028:	b933      	cbnz	r3, 8009038 <_free_r+0x30>
 800902a:	6063      	str	r3, [r4, #4]
 800902c:	6014      	str	r4, [r2, #0]
 800902e:	b003      	add	sp, #12
 8009030:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009034:	f7ff bfe2 	b.w	8008ffc <__malloc_unlock>
 8009038:	42a3      	cmp	r3, r4
 800903a:	d908      	bls.n	800904e <_free_r+0x46>
 800903c:	6825      	ldr	r5, [r4, #0]
 800903e:	1961      	adds	r1, r4, r5
 8009040:	428b      	cmp	r3, r1
 8009042:	bf01      	itttt	eq
 8009044:	6819      	ldreq	r1, [r3, #0]
 8009046:	685b      	ldreq	r3, [r3, #4]
 8009048:	1949      	addeq	r1, r1, r5
 800904a:	6021      	streq	r1, [r4, #0]
 800904c:	e7ed      	b.n	800902a <_free_r+0x22>
 800904e:	461a      	mov	r2, r3
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	b10b      	cbz	r3, 8009058 <_free_r+0x50>
 8009054:	42a3      	cmp	r3, r4
 8009056:	d9fa      	bls.n	800904e <_free_r+0x46>
 8009058:	6811      	ldr	r1, [r2, #0]
 800905a:	1855      	adds	r5, r2, r1
 800905c:	42a5      	cmp	r5, r4
 800905e:	d10b      	bne.n	8009078 <_free_r+0x70>
 8009060:	6824      	ldr	r4, [r4, #0]
 8009062:	4421      	add	r1, r4
 8009064:	1854      	adds	r4, r2, r1
 8009066:	42a3      	cmp	r3, r4
 8009068:	6011      	str	r1, [r2, #0]
 800906a:	d1e0      	bne.n	800902e <_free_r+0x26>
 800906c:	681c      	ldr	r4, [r3, #0]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	6053      	str	r3, [r2, #4]
 8009072:	4421      	add	r1, r4
 8009074:	6011      	str	r1, [r2, #0]
 8009076:	e7da      	b.n	800902e <_free_r+0x26>
 8009078:	d902      	bls.n	8009080 <_free_r+0x78>
 800907a:	230c      	movs	r3, #12
 800907c:	6003      	str	r3, [r0, #0]
 800907e:	e7d6      	b.n	800902e <_free_r+0x26>
 8009080:	6825      	ldr	r5, [r4, #0]
 8009082:	1961      	adds	r1, r4, r5
 8009084:	428b      	cmp	r3, r1
 8009086:	bf04      	itt	eq
 8009088:	6819      	ldreq	r1, [r3, #0]
 800908a:	685b      	ldreq	r3, [r3, #4]
 800908c:	6063      	str	r3, [r4, #4]
 800908e:	bf04      	itt	eq
 8009090:	1949      	addeq	r1, r1, r5
 8009092:	6021      	streq	r1, [r4, #0]
 8009094:	6054      	str	r4, [r2, #4]
 8009096:	e7ca      	b.n	800902e <_free_r+0x26>
 8009098:	b003      	add	sp, #12
 800909a:	bd30      	pop	{r4, r5, pc}
 800909c:	20002258 	.word	0x20002258

080090a0 <_read_r>:
 80090a0:	b538      	push	{r3, r4, r5, lr}
 80090a2:	4d07      	ldr	r5, [pc, #28]	; (80090c0 <_read_r+0x20>)
 80090a4:	4604      	mov	r4, r0
 80090a6:	4608      	mov	r0, r1
 80090a8:	4611      	mov	r1, r2
 80090aa:	2200      	movs	r2, #0
 80090ac:	602a      	str	r2, [r5, #0]
 80090ae:	461a      	mov	r2, r3
 80090b0:	f7fa fc9a 	bl	80039e8 <_read>
 80090b4:	1c43      	adds	r3, r0, #1
 80090b6:	d102      	bne.n	80090be <_read_r+0x1e>
 80090b8:	682b      	ldr	r3, [r5, #0]
 80090ba:	b103      	cbz	r3, 80090be <_read_r+0x1e>
 80090bc:	6023      	str	r3, [r4, #0]
 80090be:	bd38      	pop	{r3, r4, r5, pc}
 80090c0:	20002260 	.word	0x20002260

080090c4 <_fstat_r>:
 80090c4:	b538      	push	{r3, r4, r5, lr}
 80090c6:	4d07      	ldr	r5, [pc, #28]	; (80090e4 <_fstat_r+0x20>)
 80090c8:	2300      	movs	r3, #0
 80090ca:	4604      	mov	r4, r0
 80090cc:	4608      	mov	r0, r1
 80090ce:	4611      	mov	r1, r2
 80090d0:	602b      	str	r3, [r5, #0]
 80090d2:	f7fa fcb2 	bl	8003a3a <_fstat>
 80090d6:	1c43      	adds	r3, r0, #1
 80090d8:	d102      	bne.n	80090e0 <_fstat_r+0x1c>
 80090da:	682b      	ldr	r3, [r5, #0]
 80090dc:	b103      	cbz	r3, 80090e0 <_fstat_r+0x1c>
 80090de:	6023      	str	r3, [r4, #0]
 80090e0:	bd38      	pop	{r3, r4, r5, pc}
 80090e2:	bf00      	nop
 80090e4:	20002260 	.word	0x20002260

080090e8 <_isatty_r>:
 80090e8:	b538      	push	{r3, r4, r5, lr}
 80090ea:	4d06      	ldr	r5, [pc, #24]	; (8009104 <_isatty_r+0x1c>)
 80090ec:	2300      	movs	r3, #0
 80090ee:	4604      	mov	r4, r0
 80090f0:	4608      	mov	r0, r1
 80090f2:	602b      	str	r3, [r5, #0]
 80090f4:	f7fa fcb1 	bl	8003a5a <_isatty>
 80090f8:	1c43      	adds	r3, r0, #1
 80090fa:	d102      	bne.n	8009102 <_isatty_r+0x1a>
 80090fc:	682b      	ldr	r3, [r5, #0]
 80090fe:	b103      	cbz	r3, 8009102 <_isatty_r+0x1a>
 8009100:	6023      	str	r3, [r4, #0]
 8009102:	bd38      	pop	{r3, r4, r5, pc}
 8009104:	20002260 	.word	0x20002260

08009108 <_init>:
 8009108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800910a:	bf00      	nop
 800910c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800910e:	bc08      	pop	{r3}
 8009110:	469e      	mov	lr, r3
 8009112:	4770      	bx	lr

08009114 <_fini>:
 8009114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009116:	bf00      	nop
 8009118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800911a:	bc08      	pop	{r3}
 800911c:	469e      	mov	lr, r3
 800911e:	4770      	bx	lr
