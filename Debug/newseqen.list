
newseqen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9f0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000022b0  0800cb88  0800cb88  0001cb88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee38  0800ee38  00028f58  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee38  0800ee38  0001ee38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee40  0800ee40  00028f58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee40  0800ee40  0001ee40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee44  0800ee44  0001ee44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00008f58  20000000  0800ee48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009c78  20008f58  08017da0  00028f58  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012bd0  08017da0  00032bd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00028f58  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001853b  00000000  00000000  00028f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000285a  00000000  00000000  000414c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  00043d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b0  00000000  00000000  000451b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018db6  00000000  00000000  00046568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019167  00000000  00000000  0005f31e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1c10  00000000  00000000  00078485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  0011a095  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b08  00000000  00000000  0011a158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000d8  00000000  00000000  0011fc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20008f58 	.word	0x20008f58
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800cb70 	.word	0x0800cb70

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20008f5c 	.word	0x20008f5c
 80001d4:	0800cb70 	.word	0x0800cb70

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_dmul>:
 80001e8:	b570      	push	{r4, r5, r6, lr}
 80001ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001f6:	bf1d      	ittte	ne
 80001f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001fc:	ea94 0f0c 	teqne	r4, ip
 8000200:	ea95 0f0c 	teqne	r5, ip
 8000204:	f000 f8de 	bleq	80003c4 <__aeabi_dmul+0x1dc>
 8000208:	442c      	add	r4, r5
 800020a:	ea81 0603 	eor.w	r6, r1, r3
 800020e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000212:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000216:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021a:	bf18      	it	ne
 800021c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000228:	d038      	beq.n	800029c <__aeabi_dmul+0xb4>
 800022a:	fba0 ce02 	umull	ip, lr, r0, r2
 800022e:	f04f 0500 	mov.w	r5, #0
 8000232:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000236:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800023a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800023e:	f04f 0600 	mov.w	r6, #0
 8000242:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000246:	f09c 0f00 	teq	ip, #0
 800024a:	bf18      	it	ne
 800024c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000250:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000254:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000258:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800025c:	d204      	bcs.n	8000268 <__aeabi_dmul+0x80>
 800025e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000262:	416d      	adcs	r5, r5
 8000264:	eb46 0606 	adc.w	r6, r6, r6
 8000268:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800026c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000270:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000274:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000278:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800027c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000280:	bf88      	it	hi
 8000282:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000286:	d81e      	bhi.n	80002c6 <__aeabi_dmul+0xde>
 8000288:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a0:	ea46 0101 	orr.w	r1, r6, r1
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	ea81 0103 	eor.w	r1, r1, r3
 80002ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b0:	bfc2      	ittt	gt
 80002b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	popgt	{r4, r5, r6, pc}
 80002bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c0:	f04f 0e00 	mov.w	lr, #0
 80002c4:	3c01      	subs	r4, #1
 80002c6:	f300 80ab 	bgt.w	8000420 <__aeabi_dmul+0x238>
 80002ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ce:	bfde      	ittt	le
 80002d0:	2000      	movle	r0, #0
 80002d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002d6:	bd70      	pople	{r4, r5, r6, pc}
 80002d8:	f1c4 0400 	rsb	r4, r4, #0
 80002dc:	3c20      	subs	r4, #32
 80002de:	da35      	bge.n	800034c <__aeabi_dmul+0x164>
 80002e0:	340c      	adds	r4, #12
 80002e2:	dc1b      	bgt.n	800031c <__aeabi_dmul+0x134>
 80002e4:	f104 0414 	add.w	r4, r4, #20
 80002e8:	f1c4 0520 	rsb	r5, r4, #32
 80002ec:	fa00 f305 	lsl.w	r3, r0, r5
 80002f0:	fa20 f004 	lsr.w	r0, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea40 0002 	orr.w	r0, r0, r2
 80002fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000300:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000304:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000308:	fa21 f604 	lsr.w	r6, r1, r4
 800030c:	eb42 0106 	adc.w	r1, r2, r6
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f1c4 040c 	rsb	r4, r4, #12
 8000320:	f1c4 0520 	rsb	r5, r4, #32
 8000324:	fa00 f304 	lsl.w	r3, r0, r4
 8000328:	fa20 f005 	lsr.w	r0, r0, r5
 800032c:	fa01 f204 	lsl.w	r2, r1, r4
 8000330:	ea40 0002 	orr.w	r0, r0, r2
 8000334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000338:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 0520 	rsb	r5, r4, #32
 8000350:	fa00 f205 	lsl.w	r2, r0, r5
 8000354:	ea4e 0e02 	orr.w	lr, lr, r2
 8000358:	fa20 f304 	lsr.w	r3, r0, r4
 800035c:	fa01 f205 	lsl.w	r2, r1, r5
 8000360:	ea43 0302 	orr.w	r3, r3, r2
 8000364:	fa21 f004 	lsr.w	r0, r1, r4
 8000368:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800036c:	fa21 f204 	lsr.w	r2, r1, r4
 8000370:	ea20 0002 	bic.w	r0, r0, r2
 8000374:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800037c:	bf08      	it	eq
 800037e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f094 0f00 	teq	r4, #0
 8000388:	d10f      	bne.n	80003aa <__aeabi_dmul+0x1c2>
 800038a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800038e:	0040      	lsls	r0, r0, #1
 8000390:	eb41 0101 	adc.w	r1, r1, r1
 8000394:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3c01      	subeq	r4, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1a6>
 800039e:	ea41 0106 	orr.w	r1, r1, r6
 80003a2:	f095 0f00 	teq	r5, #0
 80003a6:	bf18      	it	ne
 80003a8:	4770      	bxne	lr
 80003aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ae:	0052      	lsls	r2, r2, #1
 80003b0:	eb43 0303 	adc.w	r3, r3, r3
 80003b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3d01      	subeq	r5, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1c6>
 80003be:	ea43 0306 	orr.w	r3, r3, r6
 80003c2:	4770      	bx	lr
 80003c4:	ea94 0f0c 	teq	r4, ip
 80003c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003cc:	bf18      	it	ne
 80003ce:	ea95 0f0c 	teqne	r5, ip
 80003d2:	d00c      	beq.n	80003ee <__aeabi_dmul+0x206>
 80003d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d8:	bf18      	it	ne
 80003da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003de:	d1d1      	bne.n	8000384 <__aeabi_dmul+0x19c>
 80003e0:	ea81 0103 	eor.w	r1, r1, r3
 80003e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd70      	pop	{r4, r5, r6, pc}
 80003ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f2:	bf06      	itte	eq
 80003f4:	4610      	moveq	r0, r2
 80003f6:	4619      	moveq	r1, r3
 80003f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fc:	d019      	beq.n	8000432 <__aeabi_dmul+0x24a>
 80003fe:	ea94 0f0c 	teq	r4, ip
 8000402:	d102      	bne.n	800040a <__aeabi_dmul+0x222>
 8000404:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000408:	d113      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800040a:	ea95 0f0c 	teq	r5, ip
 800040e:	d105      	bne.n	800041c <__aeabi_dmul+0x234>
 8000410:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000414:	bf1c      	itt	ne
 8000416:	4610      	movne	r0, r2
 8000418:	4619      	movne	r1, r3
 800041a:	d10a      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800041c:	ea81 0103 	eor.w	r1, r1, r3
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd70      	pop	{r4, r5, r6, pc}
 8000432:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000436:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800043a:	bd70      	pop	{r4, r5, r6, pc}

0800043c <__aeabi_drsub>:
 800043c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000440:	e002      	b.n	8000448 <__adddf3>
 8000442:	bf00      	nop

08000444 <__aeabi_dsub>:
 8000444:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000448 <__adddf3>:
 8000448:	b530      	push	{r4, r5, lr}
 800044a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800044e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	bf1f      	itttt	ne
 800045e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000462:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000466:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800046e:	f000 80e2 	beq.w	8000636 <__adddf3+0x1ee>
 8000472:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000476:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047a:	bfb8      	it	lt
 800047c:	426d      	neglt	r5, r5
 800047e:	dd0c      	ble.n	800049a <__adddf3+0x52>
 8000480:	442c      	add	r4, r5
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	ea82 0000 	eor.w	r0, r2, r0
 800048e:	ea83 0101 	eor.w	r1, r3, r1
 8000492:	ea80 0202 	eor.w	r2, r0, r2
 8000496:	ea81 0303 	eor.w	r3, r1, r3
 800049a:	2d36      	cmp	r5, #54	; 0x36
 800049c:	bf88      	it	hi
 800049e:	bd30      	pophi	{r4, r5, pc}
 80004a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x70>
 80004b2:	4240      	negs	r0, r0
 80004b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c4:	d002      	beq.n	80004cc <__adddf3+0x84>
 80004c6:	4252      	negs	r2, r2
 80004c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004cc:	ea94 0f05 	teq	r4, r5
 80004d0:	f000 80a7 	beq.w	8000622 <__adddf3+0x1da>
 80004d4:	f1a4 0401 	sub.w	r4, r4, #1
 80004d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004dc:	db0d      	blt.n	80004fa <__adddf3+0xb2>
 80004de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e2:	fa22 f205 	lsr.w	r2, r2, r5
 80004e6:	1880      	adds	r0, r0, r2
 80004e8:	f141 0100 	adc.w	r1, r1, #0
 80004ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f0:	1880      	adds	r0, r0, r2
 80004f2:	fa43 f305 	asr.w	r3, r3, r5
 80004f6:	4159      	adcs	r1, r3
 80004f8:	e00e      	b.n	8000518 <__adddf3+0xd0>
 80004fa:	f1a5 0520 	sub.w	r5, r5, #32
 80004fe:	f10e 0e20 	add.w	lr, lr, #32
 8000502:	2a01      	cmp	r2, #1
 8000504:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000508:	bf28      	it	cs
 800050a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	d507      	bpl.n	800052e <__adddf3+0xe6>
 800051e:	f04f 0e00 	mov.w	lr, #0
 8000522:	f1dc 0c00 	rsbs	ip, ip, #0
 8000526:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052a:	eb6e 0101 	sbc.w	r1, lr, r1
 800052e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000532:	d31b      	bcc.n	800056c <__adddf3+0x124>
 8000534:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000538:	d30c      	bcc.n	8000554 <__adddf3+0x10c>
 800053a:	0849      	lsrs	r1, r1, #1
 800053c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000540:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000544:	f104 0401 	add.w	r4, r4, #1
 8000548:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800054c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000550:	f080 809a 	bcs.w	8000688 <__adddf3+0x240>
 8000554:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000558:	bf08      	it	eq
 800055a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800055e:	f150 0000 	adcs.w	r0, r0, #0
 8000562:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000566:	ea41 0105 	orr.w	r1, r1, r5
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000570:	4140      	adcs	r0, r0
 8000572:	eb41 0101 	adc.w	r1, r1, r1
 8000576:	3c01      	subs	r4, #1
 8000578:	bf28      	it	cs
 800057a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800057e:	d2e9      	bcs.n	8000554 <__adddf3+0x10c>
 8000580:	f091 0f00 	teq	r1, #0
 8000584:	bf04      	itt	eq
 8000586:	4601      	moveq	r1, r0
 8000588:	2000      	moveq	r0, #0
 800058a:	fab1 f381 	clz	r3, r1
 800058e:	bf08      	it	eq
 8000590:	3320      	addeq	r3, #32
 8000592:	f1a3 030b 	sub.w	r3, r3, #11
 8000596:	f1b3 0220 	subs.w	r2, r3, #32
 800059a:	da0c      	bge.n	80005b6 <__adddf3+0x16e>
 800059c:	320c      	adds	r2, #12
 800059e:	dd08      	ble.n	80005b2 <__adddf3+0x16a>
 80005a0:	f102 0c14 	add.w	ip, r2, #20
 80005a4:	f1c2 020c 	rsb	r2, r2, #12
 80005a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ac:	fa21 f102 	lsr.w	r1, r1, r2
 80005b0:	e00c      	b.n	80005cc <__adddf3+0x184>
 80005b2:	f102 0214 	add.w	r2, r2, #20
 80005b6:	bfd8      	it	le
 80005b8:	f1c2 0c20 	rsble	ip, r2, #32
 80005bc:	fa01 f102 	lsl.w	r1, r1, r2
 80005c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c4:	bfdc      	itt	le
 80005c6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ca:	4090      	lslle	r0, r2
 80005cc:	1ae4      	subs	r4, r4, r3
 80005ce:	bfa2      	ittt	ge
 80005d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d4:	4329      	orrge	r1, r5
 80005d6:	bd30      	popge	{r4, r5, pc}
 80005d8:	ea6f 0404 	mvn.w	r4, r4
 80005dc:	3c1f      	subs	r4, #31
 80005de:	da1c      	bge.n	800061a <__adddf3+0x1d2>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc0e      	bgt.n	8000602 <__adddf3+0x1ba>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0220 	rsb	r2, r4, #32
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f302 	lsl.w	r3, r1, r2
 80005f4:	ea40 0003 	orr.w	r0, r0, r3
 80005f8:	fa21 f304 	lsr.w	r3, r1, r4
 80005fc:	ea45 0103 	orr.w	r1, r5, r3
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f1c4 040c 	rsb	r4, r4, #12
 8000606:	f1c4 0220 	rsb	r2, r4, #32
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 f304 	lsl.w	r3, r1, r4
 8000612:	ea40 0003 	orr.w	r0, r0, r3
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	fa21 f004 	lsr.w	r0, r1, r4
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f094 0f00 	teq	r4, #0
 8000626:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800062a:	bf06      	itte	eq
 800062c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000630:	3401      	addeq	r4, #1
 8000632:	3d01      	subne	r5, #1
 8000634:	e74e      	b.n	80004d4 <__adddf3+0x8c>
 8000636:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063a:	bf18      	it	ne
 800063c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000640:	d029      	beq.n	8000696 <__adddf3+0x24e>
 8000642:	ea94 0f05 	teq	r4, r5
 8000646:	bf08      	it	eq
 8000648:	ea90 0f02 	teqeq	r0, r2
 800064c:	d005      	beq.n	800065a <__adddf3+0x212>
 800064e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000652:	bf04      	itt	eq
 8000654:	4619      	moveq	r1, r3
 8000656:	4610      	moveq	r0, r2
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	ea91 0f03 	teq	r1, r3
 800065e:	bf1e      	ittt	ne
 8000660:	2100      	movne	r1, #0
 8000662:	2000      	movne	r0, #0
 8000664:	bd30      	popne	{r4, r5, pc}
 8000666:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066a:	d105      	bne.n	8000678 <__adddf3+0x230>
 800066c:	0040      	lsls	r0, r0, #1
 800066e:	4149      	adcs	r1, r1
 8000670:	bf28      	it	cs
 8000672:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd30      	pop	{r4, r5, pc}
 8000678:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800067c:	bf3c      	itt	cc
 800067e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000682:	bd30      	popcc	{r4, r5, pc}
 8000684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000688:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800068c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000690:	f04f 0000 	mov.w	r0, #0
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069a:	bf1a      	itte	ne
 800069c:	4619      	movne	r1, r3
 800069e:	4610      	movne	r0, r2
 80006a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a4:	bf1c      	itt	ne
 80006a6:	460b      	movne	r3, r1
 80006a8:	4602      	movne	r2, r0
 80006aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ae:	bf06      	itte	eq
 80006b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b4:	ea91 0f03 	teqeq	r1, r3
 80006b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	bf00      	nop

080006c0 <__aeabi_ui2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f04f 0500 	mov.w	r5, #0
 80006d8:	f04f 0100 	mov.w	r1, #0
 80006dc:	e750      	b.n	8000580 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_i2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f8:	bf48      	it	mi
 80006fa:	4240      	negmi	r0, r0
 80006fc:	f04f 0100 	mov.w	r1, #0
 8000700:	e73e      	b.n	8000580 <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_f2d>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000712:	bf1f      	itttt	ne
 8000714:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000718:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800071c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000720:	4770      	bxne	lr
 8000722:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000726:	bf08      	it	eq
 8000728:	4770      	bxeq	lr
 800072a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800072e:	bf04      	itt	eq
 8000730:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000734:	4770      	bxeq	lr
 8000736:	b530      	push	{r4, r5, lr}
 8000738:	f44f 7460 	mov.w	r4, #896	; 0x380
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	e71c      	b.n	8000580 <__adddf3+0x138>
 8000746:	bf00      	nop

08000748 <__aeabi_ul2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f04f 0500 	mov.w	r5, #0
 8000756:	e00a      	b.n	800076e <__aeabi_l2d+0x16>

08000758 <__aeabi_l2d>:
 8000758:	ea50 0201 	orrs.w	r2, r0, r1
 800075c:	bf08      	it	eq
 800075e:	4770      	bxeq	lr
 8000760:	b530      	push	{r4, r5, lr}
 8000762:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000766:	d502      	bpl.n	800076e <__aeabi_l2d+0x16>
 8000768:	4240      	negs	r0, r0
 800076a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800076e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000772:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000776:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077a:	f43f aed8 	beq.w	800052e <__adddf3+0xe6>
 800077e:	f04f 0203 	mov.w	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000796:	f1c2 0320 	rsb	r3, r2, #32
 800079a:	fa00 fc03 	lsl.w	ip, r0, r3
 800079e:	fa20 f002 	lsr.w	r0, r0, r2
 80007a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007a6:	ea40 000e 	orr.w	r0, r0, lr
 80007aa:	fa21 f102 	lsr.w	r1, r1, r2
 80007ae:	4414      	add	r4, r2
 80007b0:	e6bd      	b.n	800052e <__adddf3+0xe6>
 80007b2:	bf00      	nop

080007b4 <__aeabi_d2uiz>:
 80007b4:	004a      	lsls	r2, r1, #1
 80007b6:	d211      	bcs.n	80007dc <__aeabi_d2uiz+0x28>
 80007b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007bc:	d211      	bcs.n	80007e2 <__aeabi_d2uiz+0x2e>
 80007be:	d50d      	bpl.n	80007dc <__aeabi_d2uiz+0x28>
 80007c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007c8:	d40e      	bmi.n	80007e8 <__aeabi_d2uiz+0x34>
 80007ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007d6:	fa23 f002 	lsr.w	r0, r3, r2
 80007da:	4770      	bx	lr
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	4770      	bx	lr
 80007e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007e6:	d102      	bne.n	80007ee <__aeabi_d2uiz+0x3a>
 80007e8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ec:	4770      	bx	lr
 80007ee:	f04f 0000 	mov.w	r0, #0
 80007f2:	4770      	bx	lr

080007f4 <__aeabi_d2f>:
 80007f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007fc:	bf24      	itt	cs
 80007fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000802:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000806:	d90d      	bls.n	8000824 <__aeabi_d2f+0x30>
 8000808:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800080c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000810:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000814:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000818:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800081c:	bf08      	it	eq
 800081e:	f020 0001 	biceq.w	r0, r0, #1
 8000822:	4770      	bx	lr
 8000824:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000828:	d121      	bne.n	800086e <__aeabi_d2f+0x7a>
 800082a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800082e:	bfbc      	itt	lt
 8000830:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000834:	4770      	bxlt	lr
 8000836:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800083a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800083e:	f1c2 0218 	rsb	r2, r2, #24
 8000842:	f1c2 0c20 	rsb	ip, r2, #32
 8000846:	fa10 f30c 	lsls.w	r3, r0, ip
 800084a:	fa20 f002 	lsr.w	r0, r0, r2
 800084e:	bf18      	it	ne
 8000850:	f040 0001 	orrne.w	r0, r0, #1
 8000854:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000858:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800085c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000860:	ea40 000c 	orr.w	r0, r0, ip
 8000864:	fa23 f302 	lsr.w	r3, r3, r2
 8000868:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800086c:	e7cc      	b.n	8000808 <__aeabi_d2f+0x14>
 800086e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000872:	d107      	bne.n	8000884 <__aeabi_d2f+0x90>
 8000874:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000878:	bf1e      	ittt	ne
 800087a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800087e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000882:	4770      	bxne	lr
 8000884:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000888:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800088c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop

08000894 <__aeabi_uldivmod>:
 8000894:	b953      	cbnz	r3, 80008ac <__aeabi_uldivmod+0x18>
 8000896:	b94a      	cbnz	r2, 80008ac <__aeabi_uldivmod+0x18>
 8000898:	2900      	cmp	r1, #0
 800089a:	bf08      	it	eq
 800089c:	2800      	cmpeq	r0, #0
 800089e:	bf1c      	itt	ne
 80008a0:	f04f 31ff 	movne.w	r1, #4294967295
 80008a4:	f04f 30ff 	movne.w	r0, #4294967295
 80008a8:	f000 b974 	b.w	8000b94 <__aeabi_idiv0>
 80008ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b4:	f000 f806 	bl	80008c4 <__udivmoddi4>
 80008b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c0:	b004      	add	sp, #16
 80008c2:	4770      	bx	lr

080008c4 <__udivmoddi4>:
 80008c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c8:	9d08      	ldr	r5, [sp, #32]
 80008ca:	4604      	mov	r4, r0
 80008cc:	468e      	mov	lr, r1
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d14d      	bne.n	800096e <__udivmoddi4+0xaa>
 80008d2:	428a      	cmp	r2, r1
 80008d4:	4694      	mov	ip, r2
 80008d6:	d969      	bls.n	80009ac <__udivmoddi4+0xe8>
 80008d8:	fab2 f282 	clz	r2, r2
 80008dc:	b152      	cbz	r2, 80008f4 <__udivmoddi4+0x30>
 80008de:	fa01 f302 	lsl.w	r3, r1, r2
 80008e2:	f1c2 0120 	rsb	r1, r2, #32
 80008e6:	fa20 f101 	lsr.w	r1, r0, r1
 80008ea:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ee:	ea41 0e03 	orr.w	lr, r1, r3
 80008f2:	4094      	lsls	r4, r2
 80008f4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008f8:	0c21      	lsrs	r1, r4, #16
 80008fa:	fbbe f6f8 	udiv	r6, lr, r8
 80008fe:	fa1f f78c 	uxth.w	r7, ip
 8000902:	fb08 e316 	mls	r3, r8, r6, lr
 8000906:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800090a:	fb06 f107 	mul.w	r1, r6, r7
 800090e:	4299      	cmp	r1, r3
 8000910:	d90a      	bls.n	8000928 <__udivmoddi4+0x64>
 8000912:	eb1c 0303 	adds.w	r3, ip, r3
 8000916:	f106 30ff 	add.w	r0, r6, #4294967295
 800091a:	f080 811f 	bcs.w	8000b5c <__udivmoddi4+0x298>
 800091e:	4299      	cmp	r1, r3
 8000920:	f240 811c 	bls.w	8000b5c <__udivmoddi4+0x298>
 8000924:	3e02      	subs	r6, #2
 8000926:	4463      	add	r3, ip
 8000928:	1a5b      	subs	r3, r3, r1
 800092a:	b2a4      	uxth	r4, r4
 800092c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000930:	fb08 3310 	mls	r3, r8, r0, r3
 8000934:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000938:	fb00 f707 	mul.w	r7, r0, r7
 800093c:	42a7      	cmp	r7, r4
 800093e:	d90a      	bls.n	8000956 <__udivmoddi4+0x92>
 8000940:	eb1c 0404 	adds.w	r4, ip, r4
 8000944:	f100 33ff 	add.w	r3, r0, #4294967295
 8000948:	f080 810a 	bcs.w	8000b60 <__udivmoddi4+0x29c>
 800094c:	42a7      	cmp	r7, r4
 800094e:	f240 8107 	bls.w	8000b60 <__udivmoddi4+0x29c>
 8000952:	4464      	add	r4, ip
 8000954:	3802      	subs	r0, #2
 8000956:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800095a:	1be4      	subs	r4, r4, r7
 800095c:	2600      	movs	r6, #0
 800095e:	b11d      	cbz	r5, 8000968 <__udivmoddi4+0xa4>
 8000960:	40d4      	lsrs	r4, r2
 8000962:	2300      	movs	r3, #0
 8000964:	e9c5 4300 	strd	r4, r3, [r5]
 8000968:	4631      	mov	r1, r6
 800096a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800096e:	428b      	cmp	r3, r1
 8000970:	d909      	bls.n	8000986 <__udivmoddi4+0xc2>
 8000972:	2d00      	cmp	r5, #0
 8000974:	f000 80ef 	beq.w	8000b56 <__udivmoddi4+0x292>
 8000978:	2600      	movs	r6, #0
 800097a:	e9c5 0100 	strd	r0, r1, [r5]
 800097e:	4630      	mov	r0, r6
 8000980:	4631      	mov	r1, r6
 8000982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000986:	fab3 f683 	clz	r6, r3
 800098a:	2e00      	cmp	r6, #0
 800098c:	d14a      	bne.n	8000a24 <__udivmoddi4+0x160>
 800098e:	428b      	cmp	r3, r1
 8000990:	d302      	bcc.n	8000998 <__udivmoddi4+0xd4>
 8000992:	4282      	cmp	r2, r0
 8000994:	f200 80f9 	bhi.w	8000b8a <__udivmoddi4+0x2c6>
 8000998:	1a84      	subs	r4, r0, r2
 800099a:	eb61 0303 	sbc.w	r3, r1, r3
 800099e:	2001      	movs	r0, #1
 80009a0:	469e      	mov	lr, r3
 80009a2:	2d00      	cmp	r5, #0
 80009a4:	d0e0      	beq.n	8000968 <__udivmoddi4+0xa4>
 80009a6:	e9c5 4e00 	strd	r4, lr, [r5]
 80009aa:	e7dd      	b.n	8000968 <__udivmoddi4+0xa4>
 80009ac:	b902      	cbnz	r2, 80009b0 <__udivmoddi4+0xec>
 80009ae:	deff      	udf	#255	; 0xff
 80009b0:	fab2 f282 	clz	r2, r2
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	f040 8092 	bne.w	8000ade <__udivmoddi4+0x21a>
 80009ba:	eba1 010c 	sub.w	r1, r1, ip
 80009be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009c2:	fa1f fe8c 	uxth.w	lr, ip
 80009c6:	2601      	movs	r6, #1
 80009c8:	0c20      	lsrs	r0, r4, #16
 80009ca:	fbb1 f3f7 	udiv	r3, r1, r7
 80009ce:	fb07 1113 	mls	r1, r7, r3, r1
 80009d2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009d6:	fb0e f003 	mul.w	r0, lr, r3
 80009da:	4288      	cmp	r0, r1
 80009dc:	d908      	bls.n	80009f0 <__udivmoddi4+0x12c>
 80009de:	eb1c 0101 	adds.w	r1, ip, r1
 80009e2:	f103 38ff 	add.w	r8, r3, #4294967295
 80009e6:	d202      	bcs.n	80009ee <__udivmoddi4+0x12a>
 80009e8:	4288      	cmp	r0, r1
 80009ea:	f200 80cb 	bhi.w	8000b84 <__udivmoddi4+0x2c0>
 80009ee:	4643      	mov	r3, r8
 80009f0:	1a09      	subs	r1, r1, r0
 80009f2:	b2a4      	uxth	r4, r4
 80009f4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f8:	fb07 1110 	mls	r1, r7, r0, r1
 80009fc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a00:	fb0e fe00 	mul.w	lr, lr, r0
 8000a04:	45a6      	cmp	lr, r4
 8000a06:	d908      	bls.n	8000a1a <__udivmoddi4+0x156>
 8000a08:	eb1c 0404 	adds.w	r4, ip, r4
 8000a0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a10:	d202      	bcs.n	8000a18 <__udivmoddi4+0x154>
 8000a12:	45a6      	cmp	lr, r4
 8000a14:	f200 80bb 	bhi.w	8000b8e <__udivmoddi4+0x2ca>
 8000a18:	4608      	mov	r0, r1
 8000a1a:	eba4 040e 	sub.w	r4, r4, lr
 8000a1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a22:	e79c      	b.n	800095e <__udivmoddi4+0x9a>
 8000a24:	f1c6 0720 	rsb	r7, r6, #32
 8000a28:	40b3      	lsls	r3, r6
 8000a2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a32:	fa20 f407 	lsr.w	r4, r0, r7
 8000a36:	fa01 f306 	lsl.w	r3, r1, r6
 8000a3a:	431c      	orrs	r4, r3
 8000a3c:	40f9      	lsrs	r1, r7
 8000a3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a42:	fa00 f306 	lsl.w	r3, r0, r6
 8000a46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a4a:	0c20      	lsrs	r0, r4, #16
 8000a4c:	fa1f fe8c 	uxth.w	lr, ip
 8000a50:	fb09 1118 	mls	r1, r9, r8, r1
 8000a54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a58:	fb08 f00e 	mul.w	r0, r8, lr
 8000a5c:	4288      	cmp	r0, r1
 8000a5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a62:	d90b      	bls.n	8000a7c <__udivmoddi4+0x1b8>
 8000a64:	eb1c 0101 	adds.w	r1, ip, r1
 8000a68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a6c:	f080 8088 	bcs.w	8000b80 <__udivmoddi4+0x2bc>
 8000a70:	4288      	cmp	r0, r1
 8000a72:	f240 8085 	bls.w	8000b80 <__udivmoddi4+0x2bc>
 8000a76:	f1a8 0802 	sub.w	r8, r8, #2
 8000a7a:	4461      	add	r1, ip
 8000a7c:	1a09      	subs	r1, r1, r0
 8000a7e:	b2a4      	uxth	r4, r4
 8000a80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a84:	fb09 1110 	mls	r1, r9, r0, r1
 8000a88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a90:	458e      	cmp	lr, r1
 8000a92:	d908      	bls.n	8000aa6 <__udivmoddi4+0x1e2>
 8000a94:	eb1c 0101 	adds.w	r1, ip, r1
 8000a98:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a9c:	d26c      	bcs.n	8000b78 <__udivmoddi4+0x2b4>
 8000a9e:	458e      	cmp	lr, r1
 8000aa0:	d96a      	bls.n	8000b78 <__udivmoddi4+0x2b4>
 8000aa2:	3802      	subs	r0, #2
 8000aa4:	4461      	add	r1, ip
 8000aa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000aaa:	fba0 9402 	umull	r9, r4, r0, r2
 8000aae:	eba1 010e 	sub.w	r1, r1, lr
 8000ab2:	42a1      	cmp	r1, r4
 8000ab4:	46c8      	mov	r8, r9
 8000ab6:	46a6      	mov	lr, r4
 8000ab8:	d356      	bcc.n	8000b68 <__udivmoddi4+0x2a4>
 8000aba:	d053      	beq.n	8000b64 <__udivmoddi4+0x2a0>
 8000abc:	b15d      	cbz	r5, 8000ad6 <__udivmoddi4+0x212>
 8000abe:	ebb3 0208 	subs.w	r2, r3, r8
 8000ac2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ac6:	fa01 f707 	lsl.w	r7, r1, r7
 8000aca:	fa22 f306 	lsr.w	r3, r2, r6
 8000ace:	40f1      	lsrs	r1, r6
 8000ad0:	431f      	orrs	r7, r3
 8000ad2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ad6:	2600      	movs	r6, #0
 8000ad8:	4631      	mov	r1, r6
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	f1c2 0320 	rsb	r3, r2, #32
 8000ae2:	40d8      	lsrs	r0, r3
 8000ae4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae8:	fa21 f303 	lsr.w	r3, r1, r3
 8000aec:	4091      	lsls	r1, r2
 8000aee:	4301      	orrs	r1, r0
 8000af0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af4:	fa1f fe8c 	uxth.w	lr, ip
 8000af8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000afc:	fb07 3610 	mls	r6, r7, r0, r3
 8000b00:	0c0b      	lsrs	r3, r1, #16
 8000b02:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b06:	fb00 f60e 	mul.w	r6, r0, lr
 8000b0a:	429e      	cmp	r6, r3
 8000b0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000b10:	d908      	bls.n	8000b24 <__udivmoddi4+0x260>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b1a:	d22f      	bcs.n	8000b7c <__udivmoddi4+0x2b8>
 8000b1c:	429e      	cmp	r6, r3
 8000b1e:	d92d      	bls.n	8000b7c <__udivmoddi4+0x2b8>
 8000b20:	3802      	subs	r0, #2
 8000b22:	4463      	add	r3, ip
 8000b24:	1b9b      	subs	r3, r3, r6
 8000b26:	b289      	uxth	r1, r1
 8000b28:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b2c:	fb07 3316 	mls	r3, r7, r6, r3
 8000b30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b34:	fb06 f30e 	mul.w	r3, r6, lr
 8000b38:	428b      	cmp	r3, r1
 8000b3a:	d908      	bls.n	8000b4e <__udivmoddi4+0x28a>
 8000b3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b40:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b44:	d216      	bcs.n	8000b74 <__udivmoddi4+0x2b0>
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d914      	bls.n	8000b74 <__udivmoddi4+0x2b0>
 8000b4a:	3e02      	subs	r6, #2
 8000b4c:	4461      	add	r1, ip
 8000b4e:	1ac9      	subs	r1, r1, r3
 8000b50:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b54:	e738      	b.n	80009c8 <__udivmoddi4+0x104>
 8000b56:	462e      	mov	r6, r5
 8000b58:	4628      	mov	r0, r5
 8000b5a:	e705      	b.n	8000968 <__udivmoddi4+0xa4>
 8000b5c:	4606      	mov	r6, r0
 8000b5e:	e6e3      	b.n	8000928 <__udivmoddi4+0x64>
 8000b60:	4618      	mov	r0, r3
 8000b62:	e6f8      	b.n	8000956 <__udivmoddi4+0x92>
 8000b64:	454b      	cmp	r3, r9
 8000b66:	d2a9      	bcs.n	8000abc <__udivmoddi4+0x1f8>
 8000b68:	ebb9 0802 	subs.w	r8, r9, r2
 8000b6c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b70:	3801      	subs	r0, #1
 8000b72:	e7a3      	b.n	8000abc <__udivmoddi4+0x1f8>
 8000b74:	4646      	mov	r6, r8
 8000b76:	e7ea      	b.n	8000b4e <__udivmoddi4+0x28a>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	e794      	b.n	8000aa6 <__udivmoddi4+0x1e2>
 8000b7c:	4640      	mov	r0, r8
 8000b7e:	e7d1      	b.n	8000b24 <__udivmoddi4+0x260>
 8000b80:	46d0      	mov	r8, sl
 8000b82:	e77b      	b.n	8000a7c <__udivmoddi4+0x1b8>
 8000b84:	3b02      	subs	r3, #2
 8000b86:	4461      	add	r1, ip
 8000b88:	e732      	b.n	80009f0 <__udivmoddi4+0x12c>
 8000b8a:	4630      	mov	r0, r6
 8000b8c:	e709      	b.n	80009a2 <__udivmoddi4+0xde>
 8000b8e:	4464      	add	r4, ip
 8000b90:	3802      	subs	r0, #2
 8000b92:	e742      	b.n	8000a1a <__udivmoddi4+0x156>

08000b94 <__aeabi_idiv0>:
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <menu_vars>:
uint8_t*  menu_vars(char* menu_string,  uint8_t var_index   ){ // in comes name and index , out goes variable reference pointer
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	70fb      	strb	r3, [r7, #3]


	char menu_string2[8];
	//var_index=var_index&15;    //set var index ie  LFO[1].rate ,false
	uint8_t menu_countr=0; //  menu vars
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	75fb      	strb	r3, [r7, #23]
	uint8_t *menu_vars_var1=NULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]

	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000bac:	4bbd      	ldr	r3, [pc, #756]	; (8000ea4 <menu_vars+0x30c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	801a      	strh	r2, [r3, #0]
 8000bb2:	e01d      	b.n	8000bf0 <menu_vars+0x58>

		memcpy(menu_string2, menu_titles_final[i], 8);  // copy title list
 8000bb4:	4bbb      	ldr	r3, [pc, #748]	; (8000ea4 <menu_vars+0x30c>)
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4bbb      	ldr	r3, [pc, #748]	; (8000ea8 <menu_vars+0x310>)
 8000bbc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000bc0:	f107 0308 	add.w	r3, r7, #8
 8000bc4:	6810      	ldr	r0, [r2, #0]
 8000bc6:	6851      	ldr	r1, [r2, #4]
 8000bc8:	c303      	stmia	r3!, {r0, r1}
		if ((strncmp(menu_string, menu_string2, 8)) == 0) {
 8000bca:	f107 0308 	add.w	r3, r7, #8
 8000bce:	2208      	movs	r2, #8
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f00b ff2c 	bl	800ca30 <strncmp>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d102      	bne.n	8000be4 <menu_vars+0x4c>
			menu_countr = i;
 8000bde:	4bb1      	ldr	r3, [pc, #708]	; (8000ea4 <menu_vars+0x30c>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000be4:	4baf      	ldr	r3, [pc, #700]	; (8000ea4 <menu_vars+0x30c>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	4bad      	ldr	r3, [pc, #692]	; (8000ea4 <menu_vars+0x30c>)
 8000bee:	801a      	strh	r2, [r3, #0]
 8000bf0:	4bac      	ldr	r3, [pc, #688]	; (8000ea4 <menu_vars+0x30c>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	2b3c      	cmp	r3, #60	; 0x3c
 8000bf6:	d9dd      	bls.n	8000bb4 <menu_vars+0x1c>

		}
	}
	menu_vars_ref=menu_countr ;
 8000bf8:	4aac      	ldr	r2, [pc, #688]	; (8000eac <menu_vars+0x314>)
 8000bfa:	7dfb      	ldrb	r3, [r7, #23]
 8000bfc:	7013      	strb	r3, [r2, #0]
	if (var_index>menu_vars_index_limit[menu_countr]) var_index=menu_vars_index_limit[menu_countr];   // make sure it stays right
 8000bfe:	7dfb      	ldrb	r3, [r7, #23]
 8000c00:	4aab      	ldr	r2, [pc, #684]	; (8000eb0 <menu_vars+0x318>)
 8000c02:	5cd3      	ldrb	r3, [r2, r3]
 8000c04:	78fa      	ldrb	r2, [r7, #3]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d903      	bls.n	8000c12 <menu_vars+0x7a>
 8000c0a:	7dfb      	ldrb	r3, [r7, #23]
 8000c0c:	4aa8      	ldr	r2, [pc, #672]	; (8000eb0 <menu_vars+0x318>)
 8000c0e:	5cd3      	ldrb	r3, [r2, r3]
 8000c10:	70fb      	strb	r3, [r7, #3]

	switch(menu_countr){
 8000c12:	7dfb      	ldrb	r3, [r7, #23]
 8000c14:	2b3b      	cmp	r3, #59	; 0x3b
 8000c16:	f200 8243 	bhi.w	80010a0 <menu_vars+0x508>
 8000c1a:	a201      	add	r2, pc, #4	; (adr r2, 8000c20 <menu_vars+0x88>)
 8000c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c20:	08000d11 	.word	0x08000d11
 8000c24:	08000d17 	.word	0x08000d17
 8000c28:	08000d29 	.word	0x08000d29
 8000c2c:	08000d3d 	.word	0x08000d3d
 8000c30:	08000d51 	.word	0x08000d51
 8000c34:	08000d65 	.word	0x08000d65
 8000c38:	08000d79 	.word	0x08000d79
 8000c3c:	08000d7f 	.word	0x08000d7f
 8000c40:	08000d91 	.word	0x08000d91
 8000c44:	08000da5 	.word	0x08000da5
 8000c48:	08000db9 	.word	0x08000db9
 8000c4c:	08000dcd 	.word	0x08000dcd
 8000c50:	08000dd3 	.word	0x08000dd3
 8000c54:	08000de5 	.word	0x08000de5
 8000c58:	08000df9 	.word	0x08000df9
 8000c5c:	08000e0d 	.word	0x08000e0d
 8000c60:	08000e21 	.word	0x08000e21
 8000c64:	08000e35 	.word	0x08000e35
 8000c68:	08000e49 	.word	0x08000e49
 8000c6c:	08000e5d 	.word	0x08000e5d
 8000c70:	08000e71 	.word	0x08000e71
 8000c74:	08000e85 	.word	0x08000e85
 8000c78:	08000e8b 	.word	0x08000e8b
 8000c7c:	08000e91 	.word	0x08000e91
 8000c80:	08000e97 	.word	0x08000e97
 8000c84:	08000ecd 	.word	0x08000ecd
 8000c88:	08000edb 	.word	0x08000edb
 8000c8c:	08000ee9 	.word	0x08000ee9
 8000c90:	08000ef5 	.word	0x08000ef5
 8000c94:	08000f03 	.word	0x08000f03
 8000c98:	08000f11 	.word	0x08000f11
 8000c9c:	08000f1f 	.word	0x08000f1f
 8000ca0:	08000f2d 	.word	0x08000f2d
 8000ca4:	08000f3b 	.word	0x08000f3b
 8000ca8:	08000f49 	.word	0x08000f49
 8000cac:	08000f57 	.word	0x08000f57
 8000cb0:	08000f6b 	.word	0x08000f6b
 8000cb4:	08000f7d 	.word	0x08000f7d
 8000cb8:	08000f91 	.word	0x08000f91
 8000cbc:	08000fa5 	.word	0x08000fa5
 8000cc0:	08000fb9 	.word	0x08000fb9
 8000cc4:	08000fcb 	.word	0x08000fcb
 8000cc8:	08000fdf 	.word	0x08000fdf
 8000ccc:	08000ff3 	.word	0x08000ff3
 8000cd0:	08001007 	.word	0x08001007
 8000cd4:	0800100d 	.word	0x0800100d
 8000cd8:	08001013 	.word	0x08001013
 8000cdc:	08001019 	.word	0x08001019
 8000ce0:	0800101f 	.word	0x0800101f
 8000ce4:	08001025 	.word	0x08001025
 8000ce8:	08001037 	.word	0x08001037
 8000cec:	0800104b 	.word	0x0800104b
 8000cf0:	0800105f 	.word	0x0800105f
 8000cf4:	08001073 	.word	0x08001073
 8000cf8:	0800107d 	.word	0x0800107d
 8000cfc:	08001083 	.word	0x08001083
 8000d00:	08001089 	.word	0x08001089
 8000d04:	0800108f 	.word	0x0800108f
 8000d08:	08001095 	.word	0x08001095
 8000d0c:	0800109b 	.word	0x0800109b
	case 0:     menu_vars_var1= NULL; break;
 8000d10:	2300      	movs	r3, #0
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	e1c7      	b.n	80010a6 <menu_vars+0x50e>
	case 1:     menu_vars_var1= &LFO[var_index].rate   ; break;
 8000d16:	78fa      	ldrb	r2, [r7, #3]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	011b      	lsls	r3, r3, #4
 8000d1c:	4413      	add	r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	4a64      	ldr	r2, [pc, #400]	; (8000eb4 <menu_vars+0x31c>)
 8000d22:	4413      	add	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	e1be      	b.n	80010a6 <menu_vars+0x50e>
	case 2:     menu_vars_var1= &LFO[var_index].depth    ; break;
 8000d28:	78fa      	ldrb	r2, [r7, #3]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	011b      	lsls	r3, r3, #4
 8000d2e:	4413      	add	r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4a60      	ldr	r2, [pc, #384]	; (8000eb4 <menu_vars+0x31c>)
 8000d34:	4413      	add	r3, r2
 8000d36:	3301      	adds	r3, #1
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	e1b4      	b.n	80010a6 <menu_vars+0x50e>
	case 3:     menu_vars_var1= &LFO[var_index].delay    ; break;
 8000d3c:	78fa      	ldrb	r2, [r7, #3]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	011b      	lsls	r3, r3, #4
 8000d42:	4413      	add	r3, r2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	4a5b      	ldr	r2, [pc, #364]	; (8000eb4 <menu_vars+0x31c>)
 8000d48:	4413      	add	r3, r2
 8000d4a:	3304      	adds	r3, #4
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	e1aa      	b.n	80010a6 <menu_vars+0x50e>
	case 4:     menu_vars_var1= &LFO[var_index].offset    ; break;
 8000d50:	78fa      	ldrb	r2, [r7, #3]
 8000d52:	4613      	mov	r3, r2
 8000d54:	011b      	lsls	r3, r3, #4
 8000d56:	4413      	add	r3, r2
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	4a56      	ldr	r2, [pc, #344]	; (8000eb4 <menu_vars+0x31c>)
 8000d5c:	4413      	add	r3, r2
 8000d5e:	3303      	adds	r3, #3
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	e1a0      	b.n	80010a6 <menu_vars+0x50e>
	case 5:     menu_vars_var1= &patch[var_index].target    ; break;  // velocity etc
 8000d64:	78fa      	ldrb	r2, [r7, #3]
 8000d66:	4613      	mov	r3, r2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	4413      	add	r3, r2
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	4a52      	ldr	r2, [pc, #328]	; (8000eb8 <menu_vars+0x320>)
 8000d70:	4413      	add	r3, r2
 8000d72:	3301      	adds	r3, #1
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	e196      	b.n	80010a6 <menu_vars+0x50e>
	case 6:     menu_vars_var1= NULL   ; break;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	e193      	b.n	80010a6 <menu_vars+0x50e>
	case 7:     menu_vars_var1= &ADSR[var_index].attack    ; break;
 8000d7e:	78fb      	ldrb	r3, [r7, #3]
 8000d80:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d84:	fb02 f303 	mul.w	r3, r2, r3
 8000d88:	4a4c      	ldr	r2, [pc, #304]	; (8000ebc <menu_vars+0x324>)
 8000d8a:	4413      	add	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	e18a      	b.n	80010a6 <menu_vars+0x50e>
	case 8:     menu_vars_var1= &ADSR[var_index].decay    ; break;
 8000d90:	78fb      	ldrb	r3, [r7, #3]
 8000d92:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d96:	fb02 f303 	mul.w	r3, r2, r3
 8000d9a:	4a48      	ldr	r2, [pc, #288]	; (8000ebc <menu_vars+0x324>)
 8000d9c:	4413      	add	r3, r2
 8000d9e:	3301      	adds	r3, #1
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	e180      	b.n	80010a6 <menu_vars+0x50e>
	case 9:     menu_vars_var1= &ADSR[var_index].sustain    ; break;
 8000da4:	78fb      	ldrb	r3, [r7, #3]
 8000da6:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000daa:	fb02 f303 	mul.w	r3, r2, r3
 8000dae:	4a43      	ldr	r2, [pc, #268]	; (8000ebc <menu_vars+0x324>)
 8000db0:	4413      	add	r3, r2
 8000db2:	3302      	adds	r3, #2
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	e176      	b.n	80010a6 <menu_vars+0x50e>
	case 10:     menu_vars_var1= &ADSR[var_index].release    ; break;
 8000db8:	78fb      	ldrb	r3, [r7, #3]
 8000dba:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000dbe:	fb02 f303 	mul.w	r3, r2, r3
 8000dc2:	4a3e      	ldr	r2, [pc, #248]	; (8000ebc <menu_vars+0x324>)
 8000dc4:	4413      	add	r3, r2
 8000dc6:	3303      	adds	r3, #3
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	e16c      	b.n	80010a6 <menu_vars+0x50e>
	case 11:     menu_vars_var1= NULL  ; break;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	e169      	b.n	80010a6 <menu_vars+0x50e>
	case 12:     menu_vars_var1= &note[var_index].osc    ; break;
 8000dd2:	78fa      	ldrb	r2, [r7, #3]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	1a9b      	subs	r3, r3, r2
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	4a38      	ldr	r2, [pc, #224]	; (8000ec0 <menu_vars+0x328>)
 8000dde:	4413      	add	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	e160      	b.n	80010a6 <menu_vars+0x50e>
	case 13:     menu_vars_var1= &note[var_index].osc2    ; break;
 8000de4:	78fa      	ldrb	r2, [r7, #3]
 8000de6:	4613      	mov	r3, r2
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	1a9b      	subs	r3, r3, r2
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	4a34      	ldr	r2, [pc, #208]	; (8000ec0 <menu_vars+0x328>)
 8000df0:	4413      	add	r3, r2
 8000df2:	3301      	adds	r3, #1
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	e156      	b.n	80010a6 <menu_vars+0x50e>
	case 14:     menu_vars_var1= &note[var_index].pitch    ; break;
 8000df8:	78fa      	ldrb	r2, [r7, #3]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	1a9b      	subs	r3, r3, r2
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	4a2f      	ldr	r2, [pc, #188]	; (8000ec0 <menu_vars+0x328>)
 8000e04:	4413      	add	r3, r2
 8000e06:	3302      	adds	r3, #2
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	e14c      	b.n	80010a6 <menu_vars+0x50e>
	case 15:     menu_vars_var1= &note[var_index].duration    ; break;
 8000e0c:	78fa      	ldrb	r2, [r7, #3]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	1a9b      	subs	r3, r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	4a2a      	ldr	r2, [pc, #168]	; (8000ec0 <menu_vars+0x328>)
 8000e18:	4413      	add	r3, r2
 8000e1a:	3303      	adds	r3, #3
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	e142      	b.n	80010a6 <menu_vars+0x50e>
	case 16:     menu_vars_var1= &note[var_index].position    ; break;
 8000e20:	78fa      	ldrb	r2, [r7, #3]
 8000e22:	4613      	mov	r3, r2
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	1a9b      	subs	r3, r3, r2
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	4a25      	ldr	r2, [pc, #148]	; (8000ec0 <menu_vars+0x328>)
 8000e2c:	4413      	add	r3, r2
 8000e2e:	3304      	adds	r3, #4
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	e138      	b.n	80010a6 <menu_vars+0x50e>
	case 17:     menu_vars_var1= &note[var_index].transpose    ; break;
 8000e34:	78fa      	ldrb	r2, [r7, #3]
 8000e36:	4613      	mov	r3, r2
 8000e38:	00db      	lsls	r3, r3, #3
 8000e3a:	1a9b      	subs	r3, r3, r2
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	4a20      	ldr	r2, [pc, #128]	; (8000ec0 <menu_vars+0x328>)
 8000e40:	4413      	add	r3, r2
 8000e42:	3305      	adds	r3, #5
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	e12e      	b.n	80010a6 <menu_vars+0x50e>
	case 18:     menu_vars_var1= &note[var_index].timeshift    ; break;
 8000e48:	78fa      	ldrb	r2, [r7, #3]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	1a9b      	subs	r3, r3, r2
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	4a1b      	ldr	r2, [pc, #108]	; (8000ec0 <menu_vars+0x328>)
 8000e54:	4413      	add	r3, r2
 8000e56:	3306      	adds	r3, #6
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	e124      	b.n	80010a6 <menu_vars+0x50e>
	case 19:     menu_vars_var1= &note[var_index].velocity   ; break; // 16 bit
 8000e5c:	78fa      	ldrb	r2, [r7, #3]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	4a16      	ldr	r2, [pc, #88]	; (8000ec0 <menu_vars+0x328>)
 8000e68:	4413      	add	r3, r2
 8000e6a:	3307      	adds	r3, #7
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	e11a      	b.n	80010a6 <menu_vars+0x50e>
	case 20:     menu_vars_var1= &note[var_index].detune    ; break;
 8000e70:	78fa      	ldrb	r2, [r7, #3]
 8000e72:	4613      	mov	r3, r2
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	1a9b      	subs	r3, r3, r2
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	3308      	adds	r3, #8
 8000e7c:	4a10      	ldr	r2, [pc, #64]	; (8000ec0 <menu_vars+0x328>)
 8000e7e:	4413      	add	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	e110      	b.n	80010a6 <menu_vars+0x50e>
	case 21:     menu_vars_var1= NULL   ; break;
 8000e84:	2300      	movs	r3, #0
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	e10d      	b.n	80010a6 <menu_vars+0x50e>
	case 22:     menu_vars_var1= &seq.pos    ; break;
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <menu_vars+0x32c>)
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	e10a      	b.n	80010a6 <menu_vars+0x50e>
	case 23:     menu_vars_var1= &seq.tempo    ; break;
 8000e90:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <menu_vars+0x330>)
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	e107      	b.n	80010a6 <menu_vars+0x50e>
	case 24:     menu_vars_var1= &seq.notes1[var_index]   ; break;
 8000e96:	78fb      	ldrb	r3, [r7, #3]
 8000e98:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <menu_vars+0x32c>)
 8000e9a:	4413      	add	r3, r2
 8000e9c:	3302      	adds	r3, #2
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	e101      	b.n	80010a6 <menu_vars+0x50e>
 8000ea2:	bf00      	nop
 8000ea4:	20009842 	.word	0x20009842
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	20010c11 	.word	0x20010c11
 8000eb0:	0800df68 	.word	0x0800df68
 8000eb4:	2000ce44 	.word	0x2000ce44
 8000eb8:	2000dcac 	.word	0x2000dcac
 8000ebc:	2000d1f0 	.word	0x2000d1f0
 8000ec0:	20008e08 	.word	0x20008e08
 8000ec4:	2000dc7c 	.word	0x2000dc7c
 8000ec8:	2000dc7d 	.word	0x2000dc7d
	case 25:     menu_vars_var1= &seq.notes2[var_index]   ; break;
 8000ecc:	78fb      	ldrb	r3, [r7, #3]
 8000ece:	3310      	adds	r3, #16
 8000ed0:	4a77      	ldr	r2, [pc, #476]	; (80010b0 <menu_vars+0x518>)
 8000ed2:	4413      	add	r3, r2
 8000ed4:	3303      	adds	r3, #3
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	e0e5      	b.n	80010a6 <menu_vars+0x50e>
	case 26:     menu_vars_var1= &seq.loop [var_index]    ; break;
 8000eda:	78fb      	ldrb	r3, [r7, #3]
 8000edc:	3320      	adds	r3, #32
 8000ede:	4a74      	ldr	r2, [pc, #464]	; (80010b0 <menu_vars+0x518>)
 8000ee0:	4413      	add	r3, r2
 8000ee2:	3304      	adds	r3, #4
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	e0de      	b.n	80010a6 <menu_vars+0x50e>
	case 27: 	menu_vars_var1=&filter[var_index].cutoff_1 ;break;
 8000ee8:	78fb      	ldrb	r3, [r7, #3]
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	4a71      	ldr	r2, [pc, #452]	; (80010b4 <menu_vars+0x51c>)
 8000eee:	4413      	add	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	e0d8      	b.n	80010a6 <menu_vars+0x50e>
	case 28: 	menu_vars_var1=&filter[var_index].cutoff_2 ;break;  // fine tune
 8000ef4:	78fb      	ldrb	r3, [r7, #3]
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	4a6e      	ldr	r2, [pc, #440]	; (80010b4 <menu_vars+0x51c>)
 8000efa:	4413      	add	r3, r2
 8000efc:	3301      	adds	r3, #1
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	e0d1      	b.n	80010a6 <menu_vars+0x50e>
	case 29: 	menu_vars_var1=&filter[var_index].resonance ;break;
 8000f02:	78fb      	ldrb	r3, [r7, #3]
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	4a6b      	ldr	r2, [pc, #428]	; (80010b4 <menu_vars+0x51c>)
 8000f08:	4413      	add	r3, r2
 8000f0a:	3302      	adds	r3, #2
 8000f0c:	613b      	str	r3, [r7, #16]
 8000f0e:	e0ca      	b.n	80010a6 <menu_vars+0x50e>
	case 30: 	menu_vars_var1=&filter[var_index].q_level  ;break;
 8000f10:	78fb      	ldrb	r3, [r7, #3]
 8000f12:	00db      	lsls	r3, r3, #3
 8000f14:	4a67      	ldr	r2, [pc, #412]	; (80010b4 <menu_vars+0x51c>)
 8000f16:	4413      	add	r3, r2
 8000f18:	3303      	adds	r3, #3
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	e0c3      	b.n	80010a6 <menu_vars+0x50e>
	case 31: 	menu_vars_var1=&filter[var_index].level;break;
 8000f1e:	78fb      	ldrb	r3, [r7, #3]
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	4a64      	ldr	r2, [pc, #400]	; (80010b4 <menu_vars+0x51c>)
 8000f24:	4413      	add	r3, r2
 8000f26:	3304      	adds	r3, #4
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	e0bc      	b.n	80010a6 <menu_vars+0x50e>
	case 32: 	menu_vars_var1=&filter[var_index].feedback ;break;
 8000f2c:	78fb      	ldrb	r3, [r7, #3]
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	4a60      	ldr	r2, [pc, #384]	; (80010b4 <menu_vars+0x51c>)
 8000f32:	4413      	add	r3, r2
 8000f34:	3307      	adds	r3, #7
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	e0b5      	b.n	80010a6 <menu_vars+0x50e>
	case 33: 	menu_vars_var1=&filter[var_index].out_mix ;break;
 8000f3a:	78fb      	ldrb	r3, [r7, #3]
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	4a5d      	ldr	r2, [pc, #372]	; (80010b4 <menu_vars+0x51c>)
 8000f40:	4413      	add	r3, r2
 8000f42:	3306      	adds	r3, #6
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	e0ae      	b.n	80010a6 <menu_vars+0x50e>
	case 34: 	menu_vars_var1=&filter[var_index].poles ;break;
 8000f48:	78fb      	ldrb	r3, [r7, #3]
 8000f4a:	00db      	lsls	r3, r3, #3
 8000f4c:	4a59      	ldr	r2, [pc, #356]	; (80010b4 <menu_vars+0x51c>)
 8000f4e:	4413      	add	r3, r2
 8000f50:	3305      	adds	r3, #5
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	e0a7      	b.n	80010a6 <menu_vars+0x50e>
	case 35:     menu_vars_var1= &patch[var_index].target_index    ; break;     // select note
 8000f56:	78fa      	ldrb	r2, [r7, #3]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4413      	add	r3, r2
 8000f5e:	00db      	lsls	r3, r3, #3
 8000f60:	4a55      	ldr	r2, [pc, #340]	; (80010b8 <menu_vars+0x520>)
 8000f62:	4413      	add	r3, r2
 8000f64:	3302      	adds	r3, #2
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	e09d      	b.n	80010a6 <menu_vars+0x50e>
	case 36: 	menu_vars_var1=&patch[var_index].input1 ;break;
 8000f6a:	78fa      	ldrb	r2, [r7, #3]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	4413      	add	r3, r2
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	4a50      	ldr	r2, [pc, #320]	; (80010b8 <menu_vars+0x520>)
 8000f76:	4413      	add	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	e094      	b.n	80010a6 <menu_vars+0x50e>
	case 37: 	menu_vars_var1=&patch[var_index].input2 ;break;
 8000f7c:	78fa      	ldrb	r2, [r7, #3]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4413      	add	r3, r2
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	4a4c      	ldr	r2, [pc, #304]	; (80010b8 <menu_vars+0x520>)
 8000f88:	4413      	add	r3, r2
 8000f8a:	3303      	adds	r3, #3
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	e08a      	b.n	80010a6 <menu_vars+0x50e>
	case 38: 	menu_vars_var1=&patch[var_index].in_mix ;break;
 8000f90:	78fa      	ldrb	r2, [r7, #3]
 8000f92:	4613      	mov	r3, r2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	4413      	add	r3, r2
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	4a47      	ldr	r2, [pc, #284]	; (80010b8 <menu_vars+0x520>)
 8000f9c:	4413      	add	r3, r2
 8000f9e:	3304      	adds	r3, #4
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	e080      	b.n	80010a6 <menu_vars+0x50e>
	case 39: 	menu_vars_var1=&patch[var_index].in_offset ;break;
 8000fa4:	78fa      	ldrb	r2, [r7, #3]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	4a42      	ldr	r2, [pc, #264]	; (80010b8 <menu_vars+0x520>)
 8000fb0:	4413      	add	r3, r2
 8000fb2:	3305      	adds	r3, #5
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	e076      	b.n	80010a6 <menu_vars+0x50e>
	case 40:     menu_vars_var1= &LFO_slave1[var_index].rate   ; break;
 8000fb8:	78fa      	ldrb	r2, [r7, #3]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	4413      	add	r3, r2
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	4a3e      	ldr	r2, [pc, #248]	; (80010bc <menu_vars+0x524>)
 8000fc4:	4413      	add	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	e06d      	b.n	80010a6 <menu_vars+0x50e>
	case 41:     menu_vars_var1= &LFO_slave1[var_index].depth    ; break;
 8000fca:	78fa      	ldrb	r2, [r7, #3]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	4413      	add	r3, r2
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	4a39      	ldr	r2, [pc, #228]	; (80010bc <menu_vars+0x524>)
 8000fd6:	4413      	add	r3, r2
 8000fd8:	3301      	adds	r3, #1
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	e063      	b.n	80010a6 <menu_vars+0x50e>
	case 42:     menu_vars_var1= &LFO_slave1[var_index].delay    ; break;
 8000fde:	78fa      	ldrb	r2, [r7, #3]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	4413      	add	r3, r2
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	4a34      	ldr	r2, [pc, #208]	; (80010bc <menu_vars+0x524>)
 8000fea:	4413      	add	r3, r2
 8000fec:	3304      	adds	r3, #4
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	e059      	b.n	80010a6 <menu_vars+0x50e>
	case 43:     menu_vars_var1= &LFO_slave1[var_index].offset    ; break;
 8000ff2:	78fa      	ldrb	r2, [r7, #3]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	4413      	add	r3, r2
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	4a2f      	ldr	r2, [pc, #188]	; (80010bc <menu_vars+0x524>)
 8000ffe:	4413      	add	r3, r2
 8001000:	3303      	adds	r3, #3
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	e04f      	b.n	80010a6 <menu_vars+0x50e>
	case 44: 	menu_vars_var1=&sampler.start_MSB ;break;
 8001006:	4b2e      	ldr	r3, [pc, #184]	; (80010c0 <menu_vars+0x528>)
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	e04c      	b.n	80010a6 <menu_vars+0x50e>
	case 45: 	menu_vars_var1=&sampler.start_LSB ;break;
 800100c:	4b2d      	ldr	r3, [pc, #180]	; (80010c4 <menu_vars+0x52c>)
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	e049      	b.n	80010a6 <menu_vars+0x50e>
	case 46: 	menu_vars_var1=&sampler.end_MSB ;break;
 8001012:	4b2d      	ldr	r3, [pc, #180]	; (80010c8 <menu_vars+0x530>)
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	e046      	b.n	80010a6 <menu_vars+0x50e>
	case 47: 	menu_vars_var1=&sampler.end_LSB ;break;
 8001018:	4b2c      	ldr	r3, [pc, #176]	; (80010cc <menu_vars+0x534>)
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	e043      	b.n	80010a6 <menu_vars+0x50e>
	case 48: 	menu_vars_var1=&sampler.offset ;break;
 800101e:	4b2c      	ldr	r3, [pc, #176]	; (80010d0 <menu_vars+0x538>)
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	e040      	b.n	80010a6 <menu_vars+0x50e>
	case 49:     menu_vars_var1= &LFO_square[var_index].rate   ; break;
 8001024:	78fa      	ldrb	r2, [r7, #3]
 8001026:	4613      	mov	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	4a29      	ldr	r2, [pc, #164]	; (80010d4 <menu_vars+0x53c>)
 8001030:	4413      	add	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	e037      	b.n	80010a6 <menu_vars+0x50e>
	case 50:     menu_vars_var1= &LFO_square[var_index].depth    ; break;
 8001036:	78fa      	ldrb	r2, [r7, #3]
 8001038:	4613      	mov	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4a24      	ldr	r2, [pc, #144]	; (80010d4 <menu_vars+0x53c>)
 8001042:	4413      	add	r3, r2
 8001044:	3301      	adds	r3, #1
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	e02d      	b.n	80010a6 <menu_vars+0x50e>
	case 51:     menu_vars_var1= &LFO_square[var_index].offset    ; break;
 800104a:	78fa      	ldrb	r2, [r7, #3]
 800104c:	4613      	mov	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4a1f      	ldr	r2, [pc, #124]	; (80010d4 <menu_vars+0x53c>)
 8001056:	4413      	add	r3, r2
 8001058:	3302      	adds	r3, #2
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	e023      	b.n	80010a6 <menu_vars+0x50e>
	case 52:     menu_vars_var1= &LFO_square[var_index].delay    ; break;
 800105e:	78fa      	ldrb	r2, [r7, #3]
 8001060:	4613      	mov	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4a1a      	ldr	r2, [pc, #104]	; (80010d4 <menu_vars+0x53c>)
 800106a:	4413      	add	r3, r2
 800106c:	3303      	adds	r3, #3
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	e019      	b.n	80010a6 <menu_vars+0x50e>
	case 53:     menu_vars_var1= &LCD_Info[var_index]    ; break; // send as char
 8001072:	78fb      	ldrb	r3, [r7, #3]
 8001074:	4a18      	ldr	r2, [pc, #96]	; (80010d8 <menu_vars+0x540>)
 8001076:	4413      	add	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	e014      	b.n	80010a6 <menu_vars+0x50e>
	case 54: 	menu_vars_var1=&sampler.trigger_1 ;break;
 800107c:	4b17      	ldr	r3, [pc, #92]	; (80010dc <menu_vars+0x544>)
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	e011      	b.n	80010a6 <menu_vars+0x50e>
	case 55: 	menu_vars_var1=&sampler.trigger_2 ;break;
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <menu_vars+0x548>)
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	e00e      	b.n	80010a6 <menu_vars+0x50e>
	case 56: 	menu_vars_var1=&sampler.trigger_3 ;break;
 8001088:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <menu_vars+0x54c>)
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	e00b      	b.n	80010a6 <menu_vars+0x50e>
	case 57: 	menu_vars_var1=&sampler.trigger_4 ;break;
 800108e:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <menu_vars+0x550>)
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	e008      	b.n	80010a6 <menu_vars+0x50e>
	case 58: 	menu_vars_var1=&sampler.repeat  ;break;
 8001094:	4b15      	ldr	r3, [pc, #84]	; (80010ec <menu_vars+0x554>)
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	e005      	b.n	80010a6 <menu_vars+0x50e>
	case 59: 	menu_vars_var1=&sampler.sample_select  ;break;
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <menu_vars+0x558>)
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	e002      	b.n	80010a6 <menu_vars+0x50e>

	default :		menu_vars_var1= NULL   ; break;
 80010a0:	2300      	movs	r3, #0
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	bf00      	nop

	}
    // copy back address  ,ok
	// return the result number for later reference
	//menu_vars_var= menu_vars_var1;
	return menu_vars_var1;
 80010a6:	693b      	ldr	r3, [r7, #16]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	2000dc7c 	.word	0x2000dc7c
 80010b4:	20008e94 	.word	0x20008e94
 80010b8:	2000dcac 	.word	0x2000dcac
 80010bc:	2000d0ec 	.word	0x2000d0ec
 80010c0:	20008eb4 	.word	0x20008eb4
 80010c4:	20008eb5 	.word	0x20008eb5
 80010c8:	20008eb6 	.word	0x20008eb6
 80010cc:	20008eb7 	.word	0x20008eb7
 80010d0:	20008ebd 	.word	0x20008ebd
 80010d4:	2000d128 	.word	0x2000d128
 80010d8:	2001202c 	.word	0x2001202c
 80010dc:	20008eb8 	.word	0x20008eb8
 80010e0:	20008eb9 	.word	0x20008eb9
 80010e4:	20008eba 	.word	0x20008eba
 80010e8:	20008ebb 	.word	0x20008ebb
 80010ec:	20008ebc 	.word	0x20008ebc
 80010f0:	20008ebe 	.word	0x20008ebe

080010f4 <menu_parser>:
}




void menu_parser(void){          // parse out menus , shouldn't have to run (in theory) once filled ,only for feedback pointer maybe
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0

	    char menu_string[8]="xxxxxxxx";   // incoming string holder (single)
 80010fa:	4a6b      	ldr	r2, [pc, #428]	; (80012a8 <menu_parser+0x1b4>)
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001104:	e883 0003 	stmia.w	r3, {r0, r1}
	    char menu_string2[8]="hhhhhhhh";
 8001108:	4a68      	ldr	r2, [pc, #416]	; (80012ac <menu_parser+0x1b8>)
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001110:	e883 0003 	stmia.w	r3, {r0, r1}
	    uint8_t string_counter=0;
 8001114:	2300      	movs	r3, #0
 8001116:	75fb      	strb	r3, [r7, #23]
    	    uint16_t menu_searchsize=sizeof(default_menu)-8;   // this should fairly big always , leave gap at the end , atm 480
 8001118:	f640 3381 	movw	r3, #2945	; 0xb81
 800111c:	82bb      	strh	r3, [r7, #20]

	    if (string_search>menu_searchsize) {                    //this is ok
 800111e:	4b64      	ldr	r3, [pc, #400]	; (80012b0 <menu_parser+0x1bc>)
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	8aba      	ldrh	r2, [r7, #20]
 8001124:	429a      	cmp	r2, r3
 8001126:	f0c0 80bb 	bcc.w	80012a0 <menu_parser+0x1ac>
		    return;    }    // check if bigger than search area
	    //if (menu_counter>240)  return;
	    memcpy(menu_string,default_menu+string_search,8);    //copy 8 strings created menu array
 800112a:	4b61      	ldr	r3, [pc, #388]	; (80012b0 <menu_parser+0x1bc>)
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	461a      	mov	r2, r3
 8001130:	4b60      	ldr	r3, [pc, #384]	; (80012b4 <menu_parser+0x1c0>)
 8001132:	441a      	add	r2, r3
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	6810      	ldr	r0, [r2, #0]
 800113a:	6851      	ldr	r1, [r2, #4]
 800113c:	c303      	stmia	r3!, {r0, r1}
	    ////////////////////////////
	    for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 800113e:	2300      	movs	r3, #0
 8001140:	75fb      	strb	r3, [r7, #23]
 8001142:	e092      	b.n	800126a <menu_parser+0x176>

		    memcpy(menu_string2,menu_titles_final[string_counter],8);
 8001144:	7dfb      	ldrb	r3, [r7, #23]
 8001146:	4a5c      	ldr	r2, [pc, #368]	; (80012b8 <menu_parser+0x1c4>)
 8001148:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	6810      	ldr	r0, [r2, #0]
 8001150:	6851      	ldr	r1, [r2, #4]
 8001152:	c303      	stmia	r3!, {r0, r1}
		    if  ((strncmp(menu_string,menu_string2,8))==0) 								// compare and if true pass var,seq
 8001154:	1d39      	adds	r1, r7, #4
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	2208      	movs	r2, #8
 800115c:	4618      	mov	r0, r3
 800115e:	f00b fc67 	bl	800ca30 <strncmp>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d17d      	bne.n	8001264 <menu_parser+0x170>
		    {

			    if ((menu_counter>111 )&&(menu_counter<128 )) menu_counter=menu_counter+16;   // skip to second page
 8001168:	4b54      	ldr	r3, [pc, #336]	; (80012bc <menu_parser+0x1c8>)
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	2b6f      	cmp	r3, #111	; 0x6f
 800116e:	d909      	bls.n	8001184 <menu_parser+0x90>
 8001170:	4b52      	ldr	r3, [pc, #328]	; (80012bc <menu_parser+0x1c8>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	2b7f      	cmp	r3, #127	; 0x7f
 8001176:	d805      	bhi.n	8001184 <menu_parser+0x90>
 8001178:	4b50      	ldr	r3, [pc, #320]	; (80012bc <menu_parser+0x1c8>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	3310      	adds	r3, #16
 800117e:	b29a      	uxth	r2, r3
 8001180:	4b4e      	ldr	r3, [pc, #312]	; (80012bc <menu_parser+0x1c8>)
 8001182:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>239)&&(menu_counter<256 )) menu_counter=menu_counter+16; // skip
 8001184:	4b4d      	ldr	r3, [pc, #308]	; (80012bc <menu_parser+0x1c8>)
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	2bef      	cmp	r3, #239	; 0xef
 800118a:	d909      	bls.n	80011a0 <menu_parser+0xac>
 800118c:	4b4b      	ldr	r3, [pc, #300]	; (80012bc <menu_parser+0x1c8>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	2bff      	cmp	r3, #255	; 0xff
 8001192:	d805      	bhi.n	80011a0 <menu_parser+0xac>
 8001194:	4b49      	ldr	r3, [pc, #292]	; (80012bc <menu_parser+0x1c8>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	3310      	adds	r3, #16
 800119a:	b29a      	uxth	r2, r3
 800119c:	4b47      	ldr	r3, [pc, #284]	; (80012bc <menu_parser+0x1c8>)
 800119e:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>367)&&(menu_counter<384 )) menu_counter=menu_counter+16; // skip
 80011a0:	4b46      	ldr	r3, [pc, #280]	; (80012bc <menu_parser+0x1c8>)
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 80011a8:	d30a      	bcc.n	80011c0 <menu_parser+0xcc>
 80011aa:	4b44      	ldr	r3, [pc, #272]	; (80012bc <menu_parser+0x1c8>)
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80011b2:	d205      	bcs.n	80011c0 <menu_parser+0xcc>
 80011b4:	4b41      	ldr	r3, [pc, #260]	; (80012bc <menu_parser+0x1c8>)
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	3310      	adds	r3, #16
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	4b3f      	ldr	r3, [pc, #252]	; (80012bc <menu_parser+0x1c8>)
 80011be:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>495)&&(menu_counter<512 )) menu_counter=menu_counter+16; // skip
 80011c0:	4b3e      	ldr	r3, [pc, #248]	; (80012bc <menu_parser+0x1c8>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 80011c8:	d30a      	bcc.n	80011e0 <menu_parser+0xec>
 80011ca:	4b3c      	ldr	r3, [pc, #240]	; (80012bc <menu_parser+0x1c8>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011d2:	d205      	bcs.n	80011e0 <menu_parser+0xec>
 80011d4:	4b39      	ldr	r3, [pc, #228]	; (80012bc <menu_parser+0x1c8>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	3310      	adds	r3, #16
 80011da:	b29a      	uxth	r2, r3
 80011dc:	4b37      	ldr	r3, [pc, #220]	; (80012bc <menu_parser+0x1c8>)
 80011de:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>623)&&(menu_counter<640 )) menu_counter=menu_counter+16; // skip
 80011e0:	4b36      	ldr	r3, [pc, #216]	; (80012bc <menu_parser+0x1c8>)
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 80011e8:	d30a      	bcc.n	8001200 <menu_parser+0x10c>
 80011ea:	4b34      	ldr	r3, [pc, #208]	; (80012bc <menu_parser+0x1c8>)
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80011f2:	d205      	bcs.n	8001200 <menu_parser+0x10c>
 80011f4:	4b31      	ldr	r3, [pc, #196]	; (80012bc <menu_parser+0x1c8>)
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	3310      	adds	r3, #16
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	4b2f      	ldr	r3, [pc, #188]	; (80012bc <menu_parser+0x1c8>)
 80011fe:	801a      	strh	r2, [r3, #0]

			    menu_title_lut[menu_title_count]=  (string_counter <<16)+(menu_counter&1023);   // search result  and disp lcd position counter
 8001200:	7dfb      	ldrb	r3, [r7, #23]
 8001202:	041a      	lsls	r2, r3, #16
 8001204:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <menu_parser+0x1c8>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800120c:	18d1      	adds	r1, r2, r3
 800120e:	4b2c      	ldr	r3, [pc, #176]	; (80012c0 <menu_parser+0x1cc>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	461a      	mov	r2, r3
 8001214:	4b2b      	ldr	r3, [pc, #172]	; (80012c4 <menu_parser+0x1d0>)
 8001216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    			    memcpy(menu_index_list+(menu_title_count*2),default_menu+string_search-2,2); // get array  index under ,LFO[1]  etc ,ok
 800121a:	4b29      	ldr	r3, [pc, #164]	; (80012c0 <menu_parser+0x1cc>)
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	461a      	mov	r2, r3
 8001222:	4b29      	ldr	r3, [pc, #164]	; (80012c8 <menu_parser+0x1d4>)
 8001224:	18d0      	adds	r0, r2, r3
 8001226:	4b22      	ldr	r3, [pc, #136]	; (80012b0 <menu_parser+0x1bc>)
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	3b02      	subs	r3, #2
 800122c:	4a21      	ldr	r2, [pc, #132]	; (80012b4 <menu_parser+0x1c0>)
 800122e:	4413      	add	r3, r2
 8001230:	2202      	movs	r2, #2
 8001232:	4619      	mov	r1, r3
 8001234:	f00b fbe6 	bl	800ca04 <memcpy>
        			    menu_title_count++;
 8001238:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <menu_parser+0x1cc>)
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	3301      	adds	r3, #1
 800123e:	b29a      	uxth	r2, r3
 8001240:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <menu_parser+0x1cc>)
 8001242:	801a      	strh	r2, [r3, #0]
			    menu_counter++;
 8001244:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <menu_parser+0x1c8>)
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	3301      	adds	r3, #1
 800124a:	b29a      	uxth	r2, r3
 800124c:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <menu_parser+0x1c8>)
 800124e:	801a      	strh	r2, [r3, #0]
			    space_check=0;
 8001250:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <menu_parser+0x1d8>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
			    string_search=string_search+8;     // advance search position
 8001256:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <menu_parser+0x1bc>)
 8001258:	881b      	ldrh	r3, [r3, #0]
 800125a:	3308      	adds	r3, #8
 800125c:	b29a      	uxth	r2, r3
 800125e:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <menu_parser+0x1bc>)
 8001260:	801a      	strh	r2, [r3, #0]
    			    return;}
 8001262:	e01e      	b.n	80012a2 <menu_parser+0x1ae>
	    for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 8001264:	7dfb      	ldrb	r3, [r7, #23]
 8001266:	3301      	adds	r3, #1
 8001268:	75fb      	strb	r3, [r7, #23]
 800126a:	7dfb      	ldrb	r3, [r7, #23]
 800126c:	2b3c      	cmp	r3, #60	; 0x3c
 800126e:	f67f af69 	bls.w	8001144 <menu_parser+0x50>
    	    }
        if (space_check>1)  menu_counter++;   //this is ok
 8001272:	4b16      	ldr	r3, [pc, #88]	; (80012cc <menu_parser+0x1d8>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d905      	bls.n	8001286 <menu_parser+0x192>
 800127a:	4b10      	ldr	r3, [pc, #64]	; (80012bc <menu_parser+0x1c8>)
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	3301      	adds	r3, #1
 8001280:	b29a      	uxth	r2, r3
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <menu_parser+0x1c8>)
 8001284:	801a      	strh	r2, [r3, #0]
	    space_check++;  // count empty spaces or fill characters
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <menu_parser+0x1d8>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	3301      	adds	r3, #1
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <menu_parser+0x1d8>)
 8001290:	701a      	strb	r2, [r3, #0]
	    string_search++;
 8001292:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <menu_parser+0x1bc>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	3301      	adds	r3, #1
 8001298:	b29a      	uxth	r2, r3
 800129a:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <menu_parser+0x1bc>)
 800129c:	801a      	strh	r2, [r3, #0]
	    return;
 800129e:	e000      	b.n	80012a2 <menu_parser+0x1ae>
		    return;    }    // check if bigger than search area
 80012a0:	bf00      	nop

    }
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	0800d05c 	.word	0x0800d05c
 80012ac:	0800d064 	.word	0x0800d064
 80012b0:	2000dfcc 	.word	0x2000dfcc
 80012b4:	0800d3dc 	.word	0x0800d3dc
 80012b8:	20000000 	.word	0x20000000
 80012bc:	2000dfce 	.word	0x2000dfce
 80012c0:	2000dfd2 	.word	0x2000dfd2
 80012c4:	2000dfd4 	.word	0x2000dfd4
 80012c8:	2000e7d4 	.word	0x2000e7d4
 80012cc:	2000dfd0 	.word	0x2000dfd0

080012d0 <patch_target_parse>:

void patch_target_parse(void){    // records ptr for target options , works ok
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
uint8_t skip=0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	73fb      	strb	r3, [r7, #15]
		uint8_t counter;

for (counter=0;counter<20;counter++){
 80012da:	2300      	movs	r3, #0
 80012dc:	73bb      	strb	r3, [r7, #14]
 80012de:	e119      	b.n	8001514 <patch_target_parse+0x244>

			uint16_t* output_hold;
			uint8_t input_hold=patch[counter].input1;
 80012e0:	7bba      	ldrb	r2, [r7, #14]
 80012e2:	4991      	ldr	r1, [pc, #580]	; (8001528 <patch_target_parse+0x258>)
 80012e4:	4613      	mov	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	440b      	add	r3, r1
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	717b      	strb	r3, [r7, #5]
			if (patch[counter].input1>=(menu_lookup_count))    patch[counter].input1=0;    // limit
 80012f2:	7bba      	ldrb	r2, [r7, #14]
 80012f4:	498c      	ldr	r1, [pc, #560]	; (8001528 <patch_target_parse+0x258>)
 80012f6:	4613      	mov	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	440b      	add	r3, r1
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b3c      	cmp	r3, #60	; 0x3c
 8001304:	d908      	bls.n	8001318 <patch_target_parse+0x48>
 8001306:	7bba      	ldrb	r2, [r7, #14]
 8001308:	4987      	ldr	r1, [pc, #540]	; (8001528 <patch_target_parse+0x258>)
 800130a:	4613      	mov	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	440b      	add	r3, r1
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]

			switch(input_hold&3){     // lfo now , can add adsr later
 8001318:	797b      	ldrb	r3, [r7, #5]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	2b03      	cmp	r3, #3
 8001320:	d840      	bhi.n	80013a4 <patch_target_parse+0xd4>
 8001322:	a201      	add	r2, pc, #4	; (adr r2, 8001328 <patch_target_parse+0x58>)
 8001324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001328:	08001339 	.word	0x08001339
 800132c:	08001353 	.word	0x08001353
 8001330:	0800136f 	.word	0x0800136f
 8001334:	0800138b 	.word	0x0800138b

						case 0:   output_hold=&LFO[input_hold>>2].out[0];break;
 8001338:	797b      	ldrb	r3, [r7, #5]
 800133a:	089b      	lsrs	r3, r3, #2
 800133c:	b2db      	uxtb	r3, r3
 800133e:	461a      	mov	r2, r3
 8001340:	4613      	mov	r3, r2
 8001342:	011b      	lsls	r3, r3, #4
 8001344:	4413      	add	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4a78      	ldr	r2, [pc, #480]	; (800152c <patch_target_parse+0x25c>)
 800134a:	4413      	add	r3, r2
 800134c:	3306      	adds	r3, #6
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	e028      	b.n	80013a4 <patch_target_parse+0xd4>
						case 1:   output_hold=&LFO[input_hold>>2].out_saw[0];break;
 8001352:	797b      	ldrb	r3, [r7, #5]
 8001354:	089b      	lsrs	r3, r3, #2
 8001356:	b2db      	uxtb	r3, r3
 8001358:	461a      	mov	r2, r3
 800135a:	4613      	mov	r3, r2
 800135c:	011b      	lsls	r3, r3, #4
 800135e:	4413      	add	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	3318      	adds	r3, #24
 8001364:	4a71      	ldr	r2, [pc, #452]	; (800152c <patch_target_parse+0x25c>)
 8001366:	4413      	add	r3, r2
 8001368:	3302      	adds	r3, #2
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	e01a      	b.n	80013a4 <patch_target_parse+0xd4>
						case 2:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
 800136e:	797b      	ldrb	r3, [r7, #5]
 8001370:	089b      	lsrs	r3, r3, #2
 8001372:	b2db      	uxtb	r3, r3
 8001374:	461a      	mov	r2, r3
 8001376:	4613      	mov	r3, r2
 8001378:	011b      	lsls	r3, r3, #4
 800137a:	4413      	add	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	3328      	adds	r3, #40	; 0x28
 8001380:	4a6a      	ldr	r2, [pc, #424]	; (800152c <patch_target_parse+0x25c>)
 8001382:	4413      	add	r3, r2
 8001384:	3306      	adds	r3, #6
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	e00c      	b.n	80013a4 <patch_target_parse+0xd4>
						//case 3:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
						case 3:   output_hold=&LFO_square[input_hold>>2].out[0];break;
 800138a:	797b      	ldrb	r3, [r7, #5]
 800138c:	089b      	lsrs	r3, r3, #2
 800138e:	b2db      	uxtb	r3, r3
 8001390:	461a      	mov	r2, r3
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4a65      	ldr	r2, [pc, #404]	; (8001530 <patch_target_parse+0x260>)
 800139c:	4413      	add	r3, r2
 800139e:	3304      	adds	r3, #4
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	bf00      	nop
			}
			if (patch[counter].input1==41) output_hold=&adc_values[1];   // waiting on 8 values
 80013a4:	7bba      	ldrb	r2, [r7, #14]
 80013a6:	4960      	ldr	r1, [pc, #384]	; (8001528 <patch_target_parse+0x258>)
 80013a8:	4613      	mov	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	440b      	add	r3, r1
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b29      	cmp	r3, #41	; 0x29
 80013b6:	d101      	bne.n	80013bc <patch_target_parse+0xec>
 80013b8:	4b5e      	ldr	r3, [pc, #376]	; (8001534 <patch_target_parse+0x264>)
 80013ba:	60bb      	str	r3, [r7, #8]
			if (patch[counter].input1==42) output_hold=&adc_values[2]; // do this for other single values
 80013bc:	7bba      	ldrb	r2, [r7, #14]
 80013be:	495a      	ldr	r1, [pc, #360]	; (8001528 <patch_target_parse+0x258>)
 80013c0:	4613      	mov	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	440b      	add	r3, r1
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b2a      	cmp	r3, #42	; 0x2a
 80013ce:	d101      	bne.n	80013d4 <patch_target_parse+0x104>
 80013d0:	4b59      	ldr	r3, [pc, #356]	; (8001538 <patch_target_parse+0x268>)
 80013d2:	60bb      	str	r3, [r7, #8]
			if (patch[counter].input1==43) output_hold=&adc_values[0];
 80013d4:	7bba      	ldrb	r2, [r7, #14]
 80013d6:	4954      	ldr	r1, [pc, #336]	; (8001528 <patch_target_parse+0x258>)
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	440b      	add	r3, r1
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b2b      	cmp	r3, #43	; 0x2b
 80013e6:	d101      	bne.n	80013ec <patch_target_parse+0x11c>
 80013e8:	4b54      	ldr	r3, [pc, #336]	; (800153c <patch_target_parse+0x26c>)
 80013ea:	60bb      	str	r3, [r7, #8]


			patch[counter].in1_ptr=output_hold;   // sets input pointer to first sample , default is lfo[0].out [0]
 80013ec:	7bba      	ldrb	r2, [r7, #14]
 80013ee:	494e      	ldr	r1, [pc, #312]	; (8001528 <patch_target_parse+0x258>)
 80013f0:	4613      	mov	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	440b      	add	r3, r1
 80013fa:	3320      	adds	r3, #32
 80013fc:	68ba      	ldr	r2, [r7, #8]
 80013fe:	601a      	str	r2, [r3, #0]
			if (patch[counter].target) {  // test if above zero
 8001400:	7bba      	ldrb	r2, [r7, #14]
 8001402:	4949      	ldr	r1, [pc, #292]	; (8001528 <patch_target_parse+0x258>)
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	440b      	add	r3, r1
 800140e:	3301      	adds	r3, #1
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d07b      	beq.n	800150e <patch_target_parse+0x23e>
				uint8_t target_input=patch[counter].target; // copy to avoid messed up pointer
 8001416:	7bba      	ldrb	r2, [r7, #14]
 8001418:	4943      	ldr	r1, [pc, #268]	; (8001528 <patch_target_parse+0x258>)
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	440b      	add	r3, r1
 8001424:	3301      	adds	r3, #1
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	71fb      	strb	r3, [r7, #7]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	73fb      	strb	r3, [r7, #15]
 800142e:	e00a      	b.n	8001446 <patch_target_parse+0x176>
					if (patch_skip_list[target_input]==1)  target_input++;
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	4a43      	ldr	r2, [pc, #268]	; (8001540 <patch_target_parse+0x270>)
 8001434:	5cd3      	ldrb	r3, [r2, r3]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d102      	bne.n	8001440 <patch_target_parse+0x170>
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	3301      	adds	r3, #1
 800143e:	71fb      	strb	r3, [r7, #7]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	3301      	adds	r3, #1
 8001444:	73fb      	strb	r3, [r7, #15]
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	2b3c      	cmp	r3, #60	; 0x3c
 800144a:	d9f1      	bls.n	8001430 <patch_target_parse+0x160>
				}  // test against list and skip option if on 1
				if (target_input>(menu_lookup_count-1)) target_input=menu_lookup_count-1;
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	2b3c      	cmp	r3, #60	; 0x3c
 8001450:	d901      	bls.n	8001456 <patch_target_parse+0x186>
 8001452:	233c      	movs	r3, #60	; 0x3c
 8001454:	71fb      	strb	r3, [r7, #7]
				if (target_input!=35)  {     // make target index is not selected
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	2b23      	cmp	r3, #35	; 0x23
 800145a:	d04e      	beq.n	80014fa <patch_target_parse+0x22a>
			patch[counter].target=target_input; // write back corrected value
 800145c:	7bba      	ldrb	r2, [r7, #14]
 800145e:	4932      	ldr	r1, [pc, #200]	; (8001528 <patch_target_parse+0x258>)
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	440b      	add	r3, r1
 800146a:	3301      	adds	r3, #1
 800146c:	79fa      	ldrb	r2, [r7, #7]
 800146e:	701a      	strb	r2, [r3, #0]

			uint8_t target_index=patch[counter].target_index;
 8001470:	7bba      	ldrb	r2, [r7, #14]
 8001472:	492d      	ldr	r1, [pc, #180]	; (8001528 <patch_target_parse+0x258>)
 8001474:	4613      	mov	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	440b      	add	r3, r1
 800147e:	3302      	adds	r3, #2
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	71bb      	strb	r3, [r7, #6]
			if (target_index>menu_vars_index_limit[target_index]  )   // test limit
 8001484:	79bb      	ldrb	r3, [r7, #6]
 8001486:	4a2f      	ldr	r2, [pc, #188]	; (8001544 <patch_target_parse+0x274>)
 8001488:	5cd3      	ldrb	r3, [r2, r3]
 800148a:	79ba      	ldrb	r2, [r7, #6]
 800148c:	429a      	cmp	r2, r3
 800148e:	d903      	bls.n	8001498 <patch_target_parse+0x1c8>
			{	target_index=menu_vars_index_limit[target_index]; }
 8001490:	79bb      	ldrb	r3, [r7, #6]
 8001492:	4a2c      	ldr	r2, [pc, #176]	; (8001544 <patch_target_parse+0x274>)
 8001494:	5cd3      	ldrb	r3, [r2, r3]
 8001496:	71bb      	strb	r3, [r7, #6]
			patch[counter].target_index=target_index;
 8001498:	7bba      	ldrb	r2, [r7, #14]
 800149a:	4923      	ldr	r1, [pc, #140]	; (8001528 <patch_target_parse+0x258>)
 800149c:	4613      	mov	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	440b      	add	r3, r1
 80014a6:	3302      	adds	r3, #2
 80014a8:	79ba      	ldrb	r2, [r7, #6]
 80014aa:	701a      	strb	r2, [r3, #0]
			uint8_t*  target_out_ptr= menu_vars(menu_titles_final[target_input] , target_index    );
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	4a26      	ldr	r2, [pc, #152]	; (8001548 <patch_target_parse+0x278>)
 80014b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b4:	79ba      	ldrb	r2, [r7, #6]
 80014b6:	4611      	mov	r1, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fb6d 	bl	8000b98 <menu_vars>
 80014be:	6038      	str	r0, [r7, #0]
			if (target_out_ptr)           {patch[counter].out_ptr =target_out_ptr;     // write ptr
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d023      	beq.n	800150e <patch_target_parse+0x23e>
 80014c6:	7bba      	ldrb	r2, [r7, #14]
 80014c8:	4917      	ldr	r1, [pc, #92]	; (8001528 <patch_target_parse+0x258>)
 80014ca:	4613      	mov	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	440b      	add	r3, r1
 80014d4:	331c      	adds	r3, #28
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	601a      	str	r2, [r3, #0]
			patch[counter].limiter=menu_vars_limiter[menu_vars_ref]; }      // writes limiter value for particular patch , deosnt save
 80014da:	4b1c      	ldr	r3, [pc, #112]	; (800154c <patch_target_parse+0x27c>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	4619      	mov	r1, r3
 80014e0:	7bba      	ldrb	r2, [r7, #14]
 80014e2:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <patch_target_parse+0x280>)
 80014e4:	5c58      	ldrb	r0, [r3, r1]
 80014e6:	4910      	ldr	r1, [pc, #64]	; (8001528 <patch_target_parse+0x258>)
 80014e8:	4613      	mov	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	440b      	add	r3, r1
 80014f2:	3324      	adds	r3, #36	; 0x24
 80014f4:	4602      	mov	r2, r0
 80014f6:	701a      	strb	r2, [r3, #0]
 80014f8:	e009      	b.n	800150e <patch_target_parse+0x23e>
				}
				else patch[counter].target=0;  // write back 0 if failed
 80014fa:	7bba      	ldrb	r2, [r7, #14]
 80014fc:	490a      	ldr	r1, [pc, #40]	; (8001528 <patch_target_parse+0x258>)
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	440b      	add	r3, r1
 8001508:	3301      	adds	r3, #1
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
for (counter=0;counter<20;counter++){
 800150e:	7bbb      	ldrb	r3, [r7, #14]
 8001510:	3301      	adds	r3, #1
 8001512:	73bb      	strb	r3, [r7, #14]
 8001514:	7bbb      	ldrb	r3, [r7, #14]
 8001516:	2b13      	cmp	r3, #19
 8001518:	f67f aee2 	bls.w	80012e0 <patch_target_parse+0x10>
			}
		}
	}
 800151c:	bf00      	nop
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	2000dcac 	.word	0x2000dcac
 800152c:	2000ce44 	.word	0x2000ce44
 8001530:	2000d128 	.word	0x2000d128
 8001534:	20008dfa 	.word	0x20008dfa
 8001538:	20008dfc 	.word	0x20008dfc
 800153c:	20008df8 	.word	0x20008df8
 8001540:	0800dfe8 	.word	0x0800dfe8
 8001544:	0800df68 	.word	0x0800df68
 8001548:	20000000 	.word	0x20000000
 800154c:	20010c11 	.word	0x20010c11
 8001550:	0800dfa8 	.word	0x0800dfa8

08001554 <patch_target_replace>:

		}
	}*/
}

	void patch_target_replace(void){					// sttaight value replace  ,ok
 8001554:	b490      	push	{r4, r7}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
	    uint8_t loop_position=sampling_position&7;    // 0-7 , this comes usually from 0-512 loop / 64
 800155a:	4b3d      	ldr	r3, [pc, #244]	; (8001650 <patch_target_replace+0xfc>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	733b      	strb	r3, [r7, #12]
	    uint8_t counter;
	   uint8_t input_loop_position;

	    for (counter=0;counter<20;counter++){
 8001564:	2300      	movs	r3, #0
 8001566:	73fb      	strb	r3, [r7, #15]
 8001568:	e069      	b.n	800163e <patch_target_replace+0xea>



		    if (patch[counter].target) {         // check first for enable
 800156a:	7bfa      	ldrb	r2, [r7, #15]
 800156c:	4939      	ldr	r1, [pc, #228]	; (8001654 <patch_target_replace+0x100>)
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	440b      	add	r3, r1
 8001578:	3301      	adds	r3, #1
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d05b      	beq.n	8001638 <patch_target_replace+0xe4>

			if (patch[counter].input1>40) input_loop_position=0;  else input_loop_position=loop_position;// hack
 8001580:	7bfa      	ldrb	r2, [r7, #15]
 8001582:	4934      	ldr	r1, [pc, #208]	; (8001654 <patch_target_replace+0x100>)
 8001584:	4613      	mov	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	440b      	add	r3, r1
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b28      	cmp	r3, #40	; 0x28
 8001592:	d902      	bls.n	800159a <patch_target_replace+0x46>
 8001594:	2300      	movs	r3, #0
 8001596:	73bb      	strb	r3, [r7, #14]
 8001598:	e001      	b.n	800159e <patch_target_replace+0x4a>
 800159a:	7b3b      	ldrb	r3, [r7, #12]
 800159c:	73bb      	strb	r3, [r7, #14]

			patch[counter].output[loop_position]=*(patch[counter].in1_ptr+(input_loop_position));   //write output here
 800159e:	7bfa      	ldrb	r2, [r7, #15]
 80015a0:	492c      	ldr	r1, [pc, #176]	; (8001654 <patch_target_replace+0x100>)
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	440b      	add	r3, r1
 80015ac:	3320      	adds	r3, #32
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	7bbb      	ldrb	r3, [r7, #14]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	4413      	add	r3, r2
 80015b6:	7bfa      	ldrb	r2, [r7, #15]
 80015b8:	7b39      	ldrb	r1, [r7, #12]
 80015ba:	881c      	ldrh	r4, [r3, #0]
 80015bc:	4825      	ldr	r0, [pc, #148]	; (8001654 <patch_target_replace+0x100>)
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	440b      	add	r3, r1
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4403      	add	r3, r0
 80015cc:	4622      	mov	r2, r4
 80015ce:	80da      	strh	r2, [r3, #6]


			    uint8_t  *ptr_to_modify =patch[counter].out_ptr;       // select address , not always 8 bit ,ok
 80015d0:	7bfa      	ldrb	r2, [r7, #15]
 80015d2:	4920      	ldr	r1, [pc, #128]	; (8001654 <patch_target_replace+0x100>)
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	440b      	add	r3, r1
 80015de:	331c      	adds	r3, #28
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	60bb      	str	r3, [r7, #8]
			    uint16_t lfo_out_temp=  (patch[counter].output [loop_position])>>8;  // 0-256,
 80015e4:	7bfa      	ldrb	r2, [r7, #15]
 80015e6:	7b39      	ldrb	r1, [r7, #12]
 80015e8:	481a      	ldr	r0, [pc, #104]	; (8001654 <patch_target_replace+0x100>)
 80015ea:	4613      	mov	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	440b      	add	r3, r1
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4403      	add	r3, r0
 80015f8:	88db      	ldrh	r3, [r3, #6]
 80015fa:	0a1b      	lsrs	r3, r3, #8
 80015fc:	80fb      	strh	r3, [r7, #6]
			    uint8_t lfo_mod1=ptr_to_modify; //ok
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	717b      	strb	r3, [r7, #5]

			    uint8_t  var_replaced =  lfo_out_temp &255 ;   // grab lfo out *    data to be modfied
 8001602:	88fb      	ldrh	r3, [r7, #6]
 8001604:	737b      	strb	r3, [r7, #13]

			    if (var_replaced>patch[counter].limiter) var_replaced=patch[counter].limiter;  // limit lfo output
 8001606:	7bfa      	ldrb	r2, [r7, #15]
 8001608:	4912      	ldr	r1, [pc, #72]	; (8001654 <patch_target_replace+0x100>)
 800160a:	4613      	mov	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	440b      	add	r3, r1
 8001614:	3324      	adds	r3, #36	; 0x24
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	7b7a      	ldrb	r2, [r7, #13]
 800161a:	429a      	cmp	r2, r3
 800161c:	d909      	bls.n	8001632 <patch_target_replace+0xde>
 800161e:	7bfa      	ldrb	r2, [r7, #15]
 8001620:	490c      	ldr	r1, [pc, #48]	; (8001654 <patch_target_replace+0x100>)
 8001622:	4613      	mov	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	440b      	add	r3, r1
 800162c:	3324      	adds	r3, #36	; 0x24
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	737b      	strb	r3, [r7, #13]

			    *ptr_to_modify =var_replaced;   // replace original value,ok
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	7b7a      	ldrb	r2, [r7, #13]
 8001636:	701a      	strb	r2, [r3, #0]
	    for (counter=0;counter<20;counter++){
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	3301      	adds	r3, #1
 800163c:	73fb      	strb	r3, [r7, #15]
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	2b13      	cmp	r3, #19
 8001642:	d992      	bls.n	800156a <patch_target_replace+0x16>
		    }
	    }
    }
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bc90      	pop	{r4, r7}
 800164e:	4770      	bx	lr
 8001650:	2000ebe8 	.word	0x2000ebe8
 8001654:	2000dcac 	.word	0x2000dcac

08001658 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)    // unreliable
	{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
		if(TIM10==htim->Instance){     // send spi to display , ok
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a2e      	ldr	r2, [pc, #184]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d118      	bne.n	800169c <HAL_TIM_PeriodElapsedCallback+0x44>
		    HAL_SPI_Transmit_DMA(&hspi2,spi_tx_block+block_counter,54);
 800166a:	4b2e      	ldr	r3, [pc, #184]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	4b2d      	ldr	r3, [pc, #180]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001672:	4413      	add	r3, r2
 8001674:	2236      	movs	r2, #54	; 0x36
 8001676:	4619      	mov	r1, r3
 8001678:	482c      	ldr	r0, [pc, #176]	; (800172c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800167a:	f008 ff9f 	bl	800a5bc <HAL_SPI_Transmit_DMA>
		    			if (block_counter<3456) block_counter=block_counter+54; else block_counter=0;
 800167e:	4b29      	ldr	r3, [pc, #164]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	f5b3 6f58 	cmp.w	r3, #3456	; 0xd80
 8001686:	d206      	bcs.n	8001696 <HAL_TIM_PeriodElapsedCallback+0x3e>
 8001688:	4b26      	ldr	r3, [pc, #152]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	3336      	adds	r3, #54	; 0x36
 800168e:	b29a      	uxth	r2, r3
 8001690:	4b24      	ldr	r3, [pc, #144]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001692:	801a      	strh	r2, [r3, #0]
 8001694:	e002      	b.n	800169c <HAL_TIM_PeriodElapsedCallback+0x44>
 8001696:	4b23      	ldr	r3, [pc, #140]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001698:	2200      	movs	r2, #0
 800169a:	801a      	strh	r2, [r3, #0]

		}
		if(TIM3==htim->Instance)			//
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a23      	ldr	r2, [pc, #140]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d137      	bne.n	8001716 <HAL_TIM_PeriodElapsedCallback+0xbe>
	{
		    time_proc++;
 80016a6:	4b23      	ldr	r3, [pc, #140]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	3301      	adds	r3, #1
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	4b21      	ldr	r3, [pc, #132]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80016b0:	801a      	strh	r2, [r3, #0]
			play_hold=play_sample[sample_point<<1]; // this is 2
 80016b2:	4b21      	ldr	r3, [pc, #132]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4a20      	ldr	r2, [pc, #128]	; (800173c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80016bc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80016c0:	4b1f      	ldr	r3, [pc, #124]	; (8001740 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80016c2:	801a      	strh	r2, [r3, #0]
			play_hold2=play_sample[(sample_point<<1)+1];
 80016c4:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	3301      	adds	r3, #1
 80016ce:	4a1b      	ldr	r2, [pc, #108]	; (800173c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80016d0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80016d4:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80016d6:	801a      	strh	r2, [r3, #0]
			if (sample_point>1022)    {bank_write=2;sample_point=0;} else sample_point++;
 80016d8:	4b17      	ldr	r3, [pc, #92]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	b29b      	uxth	r3, r3
 80016de:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d906      	bls.n	80016f4 <HAL_TIM_PeriodElapsedCallback+0x9c>
 80016e6:	4b18      	ldr	r3, [pc, #96]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80016e8:	2202      	movs	r2, #2
 80016ea:	801a      	strh	r2, [r3, #0]
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	801a      	strh	r2, [r3, #0]
 80016f2:	e006      	b.n	8001702 <HAL_TIM_PeriodElapsedCallback+0xaa>
 80016f4:	4b10      	ldr	r3, [pc, #64]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	3301      	adds	r3, #1
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001700:	801a      	strh	r2, [r3, #0]

	TIM3->CCR1=play_hold ;  // keep readin sample storage
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	b29a      	uxth	r2, r3
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800170a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=play_hold2 ;   // load up counter on ch2
 800170c:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	b29a      	uxth	r2, r3
 8001712:	4b07      	ldr	r3, [pc, #28]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001714:	639a      	str	r2, [r3, #56]	; 0x38
	}
	}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40014400 	.word	0x40014400
 8001724:	20011e1c 	.word	0x20011e1c
 8001728:	20010e1c 	.word	0x20010e1c
 800172c:	200128ac 	.word	0x200128ac
 8001730:	40000400 	.word	0x40000400
 8001734:	2000ce40 	.word	0x2000ce40
 8001738:	2000a848 	.word	0x2000a848
 800173c:	20009844 	.word	0x20009844
 8001740:	2000a84a 	.word	0x2000a84a
 8001744:	2000a84c 	.word	0x2000a84c
 8001748:	20008e02 	.word	0x20008e02

0800174c <analoginputloopb>:



    void analoginputloopb(void){  //works ,getting obsolete
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0


	    menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 8001750:	4b32      	ldr	r3, [pc, #200]	; (800181c <analoginputloopb+0xd0>)
 8001752:	889b      	ldrh	r3, [r3, #4]
 8001754:	091b      	lsrs	r3, r3, #4
 8001756:	b29b      	uxth	r3, r3
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4b31      	ldr	r3, [pc, #196]	; (8001820 <analoginputloopb+0xd4>)
 800175c:	701a      	strb	r2, [r3, #0]
		//    menuSelectX=cursor_menu[2]&15;  // Y select inside page
        		    cursor_menu[1]=0;
 800175e:	4b2f      	ldr	r3, [pc, #188]	; (800181c <analoginputloopb+0xd0>)
 8001760:	2200      	movs	r2, #0
 8001762:	805a      	strh	r2, [r3, #2]
   		    cursor_menu[2]=enc2_dir;
 8001764:	4b2f      	ldr	r3, [pc, #188]	; (8001824 <analoginputloopb+0xd8>)
 8001766:	881a      	ldrh	r2, [r3, #0]
 8001768:	4b2c      	ldr	r3, [pc, #176]	; (800181c <analoginputloopb+0xd0>)
 800176a:	809a      	strh	r2, [r3, #4]

	    enc_temp=(((TIM2->CNT)+32767)>>1)&65535		;  // read counter tim2 ,divider ok
 800176c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001776:	337f      	adds	r3, #127	; 0x7f
 8001778:	085b      	lsrs	r3, r3, #1
 800177a:	b29a      	uxth	r2, r3
 800177c:	4b2a      	ldr	r3, [pc, #168]	; (8001828 <analoginputloopb+0xdc>)
 800177e:	801a      	strh	r2, [r3, #0]
	 //   enc2_store[enc2_store_count]=(((TIM4->CNT)+32767)>>1)&65535;  // read counter tim4, noisy
	    enc2_temp=(((TIM4->CNT)+32767)>>1)&65535;
 8001780:	4b2a      	ldr	r3, [pc, #168]	; (800182c <analoginputloopb+0xe0>)
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001788:	337f      	adds	r3, #127	; 0x7f
 800178a:	085b      	lsrs	r3, r3, #1
 800178c:	b29a      	uxth	r2, r3
 800178e:	4b28      	ldr	r3, [pc, #160]	; (8001830 <analoginputloopb+0xe4>)
 8001790:	801a      	strh	r2, [r3, #0]
	    enc2_store3=enc2_store2>>2;
	    enc2_temp=enc2_store3;
*/


	    if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-1;   //menu itme value change
 8001792:	4b25      	ldr	r3, [pc, #148]	; (8001828 <analoginputloopb+0xdc>)
 8001794:	881a      	ldrh	r2, [r3, #0]
 8001796:	4b27      	ldr	r3, [pc, #156]	; (8001834 <analoginputloopb+0xe8>)
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	d908      	bls.n	80017b0 <analoginputloopb+0x64>
 800179e:	4b26      	ldr	r3, [pc, #152]	; (8001838 <analoginputloopb+0xec>)
 80017a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	3b01      	subs	r3, #1
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	b21a      	sxth	r2, r3
 80017ac:	4b22      	ldr	r3, [pc, #136]	; (8001838 <analoginputloopb+0xec>)
 80017ae:	801a      	strh	r2, [r3, #0]
	    if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+1;
 80017b0:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <analoginputloopb+0xdc>)
 80017b2:	881a      	ldrh	r2, [r3, #0]
 80017b4:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <analoginputloopb+0xe8>)
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d208      	bcs.n	80017ce <analoginputloopb+0x82>
 80017bc:	4b1e      	ldr	r3, [pc, #120]	; (8001838 <analoginputloopb+0xec>)
 80017be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	3301      	adds	r3, #1
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	b21a      	sxth	r2, r3
 80017ca:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <analoginputloopb+0xec>)
 80017cc:	801a      	strh	r2, [r3, #0]


   //   if (enc2_temp>511) enc2_temp=511;  //mem overflow somewhere

      enc2_dir=65535-enc2_temp; //temp to try source data
 80017ce:	4b18      	ldr	r3, [pc, #96]	; (8001830 <analoginputloopb+0xe4>)
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	43db      	mvns	r3, r3
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	4b13      	ldr	r3, [pc, #76]	; (8001824 <analoginputloopb+0xd8>)
 80017d8:	801a      	strh	r2, [r3, #0]


      if (enc_dir>32760) enc_dir=0;
 80017da:	4b17      	ldr	r3, [pc, #92]	; (8001838 <analoginputloopb+0xec>)
 80017dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e0:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 80017e4:	4293      	cmp	r3, r2
 80017e6:	dd02      	ble.n	80017ee <analoginputloopb+0xa2>
 80017e8:	4b13      	ldr	r3, [pc, #76]	; (8001838 <analoginputloopb+0xec>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	801a      	strh	r2, [r3, #0]
			    if (enc_dir<0) enc_dir=16383;
 80017ee:	4b12      	ldr	r3, [pc, #72]	; (8001838 <analoginputloopb+0xec>)
 80017f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	da03      	bge.n	8001800 <analoginputloopb+0xb4>
 80017f8:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <analoginputloopb+0xec>)
 80017fa:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80017fe:	801a      	strh	r2, [r3, #0]

			    enc_tempB=enc_temp;
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <analoginputloopb+0xdc>)
 8001802:	881a      	ldrh	r2, [r3, #0]
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <analoginputloopb+0xe8>)
 8001806:	801a      	strh	r2, [r3, #0]

					    enc2_tempB=enc2_temp; // to effective as counter not getting reset
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <analoginputloopb+0xe4>)
 800180a:	881a      	ldrh	r2, [r3, #0]
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <analoginputloopb+0xf0>)
 800180e:	801a      	strh	r2, [r3, #0]


 //   potValues[counterVarB]=(potSource[counterVarB]>>4) & 15 ;  // reduce values for now ,use original for others , slow count


    }
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	2000c090 	.word	0x2000c090
 8001820:	2000983a 	.word	0x2000983a
 8001824:	2000c07a 	.word	0x2000c07a
 8001828:	2000c072 	.word	0x2000c072
 800182c:	40000800 	.word	0x40000800
 8001830:	2000c076 	.word	0x2000c076
 8001834:	2000c074 	.word	0x2000c074
 8001838:	2000c07c 	.word	0x2000c07c
 800183c:	2000c078 	.word	0x2000c078

08001840 <note_reset>:


void note_reset (void){          // reset deafult values before modulation , in case it gets left  with no modulator
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0

	note[0].velocity=255;note[1].velocity=255;note[2].velocity=255;note[3].velocity=255;note[4].velocity=255;note[5].velocity=255;note[6].velocity=255
 8001844:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <note_reset+0x78>)
 8001846:	22ff      	movs	r2, #255	; 0xff
 8001848:	71da      	strb	r2, [r3, #7]
 800184a:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <note_reset+0x78>)
 800184c:	22ff      	movs	r2, #255	; 0xff
 800184e:	755a      	strb	r2, [r3, #21]
 8001850:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <note_reset+0x78>)
 8001852:	22ff      	movs	r2, #255	; 0xff
 8001854:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8001858:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <note_reset+0x78>)
 800185a:	22ff      	movs	r2, #255	; 0xff
 800185c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8001860:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <note_reset+0x78>)
 8001862:	22ff      	movs	r2, #255	; 0xff
 8001864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001868:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <note_reset+0x78>)
 800186a:	22ff      	movs	r2, #255	; 0xff
 800186c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <note_reset+0x78>)
 8001872:	22ff      	movs	r2, #255	; 0xff
 8001874:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
																;note[0].detune=0;note[1].detune=0;note[2].detune=0;note[3].detune=0;note[4].detune=0;
 8001878:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <note_reset+0x78>)
 800187a:	2200      	movs	r2, #0
 800187c:	721a      	strb	r2, [r3, #8]
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <note_reset+0x78>)
 8001880:	2200      	movs	r2, #0
 8001882:	759a      	strb	r2, [r3, #22]
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <note_reset+0x78>)
 8001886:	2200      	movs	r2, #0
 8001888:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800188c:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <note_reset+0x78>)
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <note_reset+0x78>)
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	note[5].detune=0;note[6].detune=0;
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <note_reset+0x78>)
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80018a4:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <note_reset+0x78>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c


}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	20008e08 	.word	0x20008e08

080018bc <main_initial>:

void main_initial(void){
 80018bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018be:	b0dd      	sub	sp, #372	; 0x174
 80018c0:	af04      	add	r7, sp, #16
	const volatile uint8_t *userConfig=(const volatile uint8_t *)0x0800D2F0;
 80018c2:	4ba8      	ldr	r3, [pc, #672]	; (8001b64 <main_initial+0x2a8>)
 80018c4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158



	HAL_DMA_Init(&hdma_spi2_tx);
 80018c8:	48a7      	ldr	r0, [pc, #668]	; (8001b68 <main_initial+0x2ac>)
 80018ca:	f006 f961 	bl	8007b90 <HAL_DMA_Init>
	HAL_DMA_Init(&hdma_spi1_rx);
 80018ce:	48a7      	ldr	r0, [pc, #668]	; (8001b6c <main_initial+0x2b0>)
 80018d0:	f006 f95e 	bl	8007b90 <HAL_DMA_Init>
	HAL_DMA_Init(&hdma_spi1_tx);
 80018d4:	48a6      	ldr	r0, [pc, #664]	; (8001b70 <main_initial+0x2b4>)
 80018d6:	f006 f95b 	bl	8007b90 <HAL_DMA_Init>


	//LL_SPI_Enable(SPI2);

	  HAL_SPI_Init(&hspi2); // write to register hspi2
 80018da:	48a6      	ldr	r0, [pc, #664]	; (8001b74 <main_initial+0x2b8>)
 80018dc:	f008 fb06 	bl	8009eec <HAL_SPI_Init>
	  HAL_SPI_Init(&hspi1); // write to register hspi2
 80018e0:	48a5      	ldr	r0, [pc, #660]	; (8001b78 <main_initial+0x2bc>)
 80018e2:	f008 fb03 	bl	8009eec <HAL_SPI_Init>
	  // lcd_init(); // keep this late or have issues
	//HAL_TIM_Base_Start_IT(&htim1);  // This needs to work for irq   ,disbling tim1 made loop a lot faster
	//TIM1->CCER=0;
	HAL_TIM_Base_Start_IT(&htim3);  // This needs to work for irq
 80018e6:	48a5      	ldr	r0, [pc, #660]	; (8001b7c <main_initial+0x2c0>)
 80018e8:	f009 fb52 	bl	800af90 <HAL_TIM_Base_Start_IT>
	TIM3->CCER=0;
 80018ec:	4ba4      	ldr	r3, [pc, #656]	; (8001b80 <main_initial+0x2c4>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	621a      	str	r2, [r3, #32]
	HAL_TIM_Base_Start(&htim2);
 80018f2:	48a4      	ldr	r0, [pc, #656]	; (8001b84 <main_initial+0x2c8>)
 80018f4:	f009 faf2 	bl	800aedc <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 80018f8:	48a3      	ldr	r0, [pc, #652]	; (8001b88 <main_initial+0x2cc>)
 80018fa:	f009 faef 	bl	800aedc <HAL_TIM_Base_Start>
	//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  // they both work fine together
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80018fe:	2100      	movs	r1, #0
 8001900:	489e      	ldr	r0, [pc, #632]	; (8001b7c <main_initial+0x2c0>)
 8001902:	f009 fc89 	bl	800b218 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8001906:	2104      	movs	r1, #4
 8001908:	489c      	ldr	r0, [pc, #624]	; (8001b7c <main_initial+0x2c0>)
 800190a:	f009 fc85 	bl	800b218 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,pData, 63);
	TIM2->CNT=32000;
 800190e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001912:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001916:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_ADC_Start(&hadc1);
 8001918:	489c      	ldr	r0, [pc, #624]	; (8001b8c <main_initial+0x2d0>)
 800191a:	f004 fffb 	bl	8006914 <HAL_ADC_Start>
	HAL_ADC_Start_DMA(&hadc1, adc_source, 3072); //dma start ,needs this and adc start ,set sampling time to very long or it will fail
 800191e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001922:	499b      	ldr	r1, [pc, #620]	; (8001b90 <main_initial+0x2d4>)
 8001924:	4899      	ldr	r0, [pc, #612]	; (8001b8c <main_initial+0x2d0>)
 8001926:	f005 f935 	bl	8006b94 <HAL_ADC_Start_DMA>



	HAL_I2C_MspInit(&hi2c2);
 800192a:	489a      	ldr	r0, [pc, #616]	; (8001b94 <main_initial+0x2d8>)
 800192c:	f004 fb82 	bl	8006034 <HAL_I2C_MspInit>
	uint8_t	send_spi1[260]={0x02,0,1,0,128,129,130,131,132,133,134,135,136,137,138,250,0,0} ; //page program ,24bit(address)  +1-255 byte data  (page)
 8001930:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001934:	f5a3 768e 	sub.w	r6, r3, #284	; 0x11c
 8001938:	4b97      	ldr	r3, [pc, #604]	; (8001b98 <main_initial+0x2dc>)
 800193a:	4634      	mov	r4, r6
 800193c:	461d      	mov	r5, r3
 800193e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001940:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001942:	682b      	ldr	r3, [r5, #0]
 8001944:	461a      	mov	r2, r3
 8001946:	8022      	strh	r2, [r4, #0]
 8001948:	3402      	adds	r4, #2
 800194a:	0c1b      	lsrs	r3, r3, #16
 800194c:	7023      	strb	r3, [r4, #0]
 800194e:	f106 0313 	add.w	r3, r6, #19
 8001952:	22f1      	movs	r2, #241	; 0xf1
 8001954:	2100      	movs	r1, #0
 8001956:	4618      	mov	r0, r3
 8001958:	f00b f862 	bl	800ca20 <memset>


	HAL_Delay(5);
 800195c:	2005      	movs	r0, #5
 800195e:	f004 ff71 	bl	8006844 <HAL_Delay>



		//uint16_t sample_size=sizeof(RAM);

		uint16_t sample_size=32678;
 8001962:	f647 73a6 	movw	r3, #32678	; 0x7fa6
 8001966:	f8a7 3156 	strh.w	r3, [r7, #342]	; 0x156



		uint8_t* ram_ptr=&RAM[0];
 800196a:	4b8c      	ldr	r3, [pc, #560]	; (8001b9c <main_initial+0x2e0>)
 800196c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	//	 sample_size=16382;
		//		 ram_ptr=&RAM[16384];
		// FORMATTING NEEDS TO BE SPOT ON OR THERE IS NO WRITE

	//	byte_swap(ram_ptr,sample_size);    // correct order
				sample_save(2,ram_ptr, sample_size);  // write sample no 255
 8001970:	f8b7 3156 	ldrh.w	r3, [r7, #342]	; 0x156
 8001974:	461a      	mov	r2, r3
 8001976:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800197a:	2002      	movs	r0, #2
 800197c:	f002 ff60 	bl	8004840 <sample_save>
				send_spi1[0]=sampler_ram_clear_test(2);  // test written ok
 8001980:	2002      	movs	r0, #2
 8001982:	f002 ff05 	bl	8004790 <sampler_ram_clear_test>
 8001986:	4603      	mov	r3, r0
 8001988:	461a      	mov	r2, r3
 800198a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800198e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001992:	701a      	strb	r2, [r3, #0]



	uint8_t potSource2[64]={0};    // { [0 ... 112] = 64 };
 8001994:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001998:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	3304      	adds	r3, #4
 80019a2:	223c      	movs	r2, #60	; 0x3c
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f00b f83a 	bl	800ca20 <memset>
	uint16_t mem_count2=0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
	uint16_t mem_counter=0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	f8a7 315e 	strh.w	r3, [r7, #350]	; 0x15e

//flash_block_erase(0);



	flash_read_block2[0]=0x03; //read page 1
 80019b8:	4b79      	ldr	r3, [pc, #484]	; (8001ba0 <main_initial+0x2e4>)
 80019ba:	2203      	movs	r2, #3
 80019bc:	701a      	strb	r2, [r3, #0]
		flash_read_block2[1]=255;			// last patch for now
 80019be:	4b78      	ldr	r3, [pc, #480]	; (8001ba0 <main_initial+0x2e4>)
 80019c0:	22ff      	movs	r2, #255	; 0xff
 80019c2:	705a      	strb	r2, [r3, #1]
		flash_read_block2[2]=128;		// 1->127  = 32kbyte,but need 512 per step , only counts to 16383 ,    64*512
 80019c4:	4b76      	ldr	r3, [pc, #472]	; (8001ba0 <main_initial+0x2e4>)
 80019c6:	2280      	movs	r2, #128	; 0x80
 80019c8:	709a      	strb	r2, [r3, #2]
		flash_read_block2[3]=0;
 80019ca:	4b75      	ldr	r3, [pc, #468]	; (8001ba0 <main_initial+0x2e4>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	70da      	strb	r2, [r3, #3]

		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);HAL_SPI_TransmitReceive_DMA(&hspi1,flash_read_block2,flash_read_block2,1028);HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 80019d0:	2201      	movs	r2, #1
 80019d2:	2110      	movs	r1, #16
 80019d4:	4873      	ldr	r0, [pc, #460]	; (8001ba4 <main_initial+0x2e8>)
 80019d6:	f006 fe3f 	bl	8008658 <HAL_GPIO_WritePin>
 80019da:	f240 4304 	movw	r3, #1028	; 0x404
 80019de:	4a70      	ldr	r2, [pc, #448]	; (8001ba0 <main_initial+0x2e4>)
 80019e0:	496f      	ldr	r1, [pc, #444]	; (8001ba0 <main_initial+0x2e4>)
 80019e2:	4865      	ldr	r0, [pc, #404]	; (8001b78 <main_initial+0x2bc>)
 80019e4:	f008 fea0 	bl	800a728 <HAL_SPI_TransmitReceive_DMA>
 80019e8:	2200      	movs	r2, #0
 80019ea:	2110      	movs	r1, #16
 80019ec:	486d      	ldr	r0, [pc, #436]	; (8001ba4 <main_initial+0x2e8>)
 80019ee:	f006 fe33 	bl	8008658 <HAL_GPIO_WritePin>



	HAL_I2C_Mem_Read (&hi2c2,160,64, 2 , potSource, 512,1000); //ok
 80019f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f6:	9302      	str	r3, [sp, #8]
 80019f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	4b6a      	ldr	r3, [pc, #424]	; (8001ba8 <main_initial+0x2ec>)
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	2302      	movs	r3, #2
 8001a04:	2240      	movs	r2, #64	; 0x40
 8001a06:	21a0      	movs	r1, #160	; 0xa0
 8001a08:	4862      	ldr	r0, [pc, #392]	; (8001b94 <main_initial+0x2d8>)
 8001a0a:	f007 f895 	bl	8008b38 <HAL_I2C_Mem_Read>


		memcpy(&seq,potSource,46 );  // load from potSource  ,, causes problems with memory ,NEEDS TO BE CONTINUOS OR  WILL  GET CORRUPT
 8001a0e:	4a67      	ldr	r2, [pc, #412]	; (8001bac <main_initial+0x2f0>)
 8001a10:	4b65      	ldr	r3, [pc, #404]	; (8001ba8 <main_initial+0x2ec>)
 8001a12:	4614      	mov	r4, r2
 8001a14:	461d      	mov	r5, r3
 8001a16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a1e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001a22:	c407      	stmia	r4!, {r0, r1, r2}
 8001a24:	8023      	strh	r3, [r4, #0]
	    memcpy(&note,potSource+156,160 );   // this works but keep checking for fragmentation
 8001a26:	4b62      	ldr	r3, [pc, #392]	; (8001bb0 <main_initial+0x2f4>)
 8001a28:	22a0      	movs	r2, #160	; 0xa0
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4861      	ldr	r0, [pc, #388]	; (8001bb4 <main_initial+0x2f8>)
 8001a2e:	f00a ffe9 	bl	800ca04 <memcpy>
	    memcpy(&sampler,potSource+476,11 );
 8001a32:	4b61      	ldr	r3, [pc, #388]	; (8001bb8 <main_initial+0x2fc>)
 8001a34:	220b      	movs	r2, #11
 8001a36:	4619      	mov	r1, r3
 8001a38:	4860      	ldr	r0, [pc, #384]	; (8001bbc <main_initial+0x300>)
 8001a3a:	f00a ffe3 	bl	800ca04 <memcpy>

	    for(mem_counter=0;mem_counter<10;mem_counter++){
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f8a7 315e 	strh.w	r3, [r7, #350]	; 0x15e
 8001a44:	e080      	b.n	8001b48 <main_initial+0x28c>

			memcpy(&LFO[mem_counter],potSource+46+(mem_counter*6),6 );  // + 60 ,ok here
 8001a46:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	011b      	lsls	r3, r3, #4
 8001a4e:	4413      	add	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4a5b      	ldr	r2, [pc, #364]	; (8001bc0 <main_initial+0x304>)
 8001a54:	1898      	adds	r0, r3, r2
 8001a56:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4413      	add	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	332e      	adds	r3, #46	; 0x2e
 8001a64:	4a50      	ldr	r2, [pc, #320]	; (8001ba8 <main_initial+0x2ec>)
 8001a66:	4413      	add	r3, r2
 8001a68:	2206      	movs	r2, #6
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f00a ffca 	bl	800ca04 <memcpy>
			memcpy(&ADSR[mem_counter],potSource+106+(mem_counter*5),5 );  // +50  ,
 8001a70:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 8001a74:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8001a78:	fb02 f303 	mul.w	r3, r2, r3
 8001a7c:	4a51      	ldr	r2, [pc, #324]	; (8001bc4 <main_initial+0x308>)
 8001a7e:	1898      	adds	r0, r3, r2
 8001a80:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	336a      	adds	r3, #106	; 0x6a
 8001a8c:	4a46      	ldr	r2, [pc, #280]	; (8001ba8 <main_initial+0x2ec>)
 8001a8e:	4413      	add	r3, r2
 8001a90:	2205      	movs	r2, #5
 8001a92:	4619      	mov	r1, r3
 8001a94:	f00a ffb6 	bl	800ca04 <memcpy>
			memcpy(&patch[mem_counter],potSource+316+(mem_counter*3),3 );
 8001a98:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	4a48      	ldr	r2, [pc, #288]	; (8001bc8 <main_initial+0x30c>)
 8001aa6:	1898      	adds	r0, r3, r2
 8001aa8:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001aac:	4613      	mov	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4413      	add	r3, r2
 8001ab2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001ab6:	4a3c      	ldr	r2, [pc, #240]	; (8001ba8 <main_initial+0x2ec>)
 8001ab8:	4413      	add	r3, r2
 8001aba:	2203      	movs	r2, #3
 8001abc:	4619      	mov	r1, r3
 8001abe:	f00a ffa1 	bl	800ca04 <memcpy>
			memcpy(&patch[mem_counter+10],potSource+346+(mem_counter*3),3 );
 8001ac2:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 8001ac6:	f103 020a 	add.w	r2, r3, #10
 8001aca:	4613      	mov	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	4a3d      	ldr	r2, [pc, #244]	; (8001bc8 <main_initial+0x30c>)
 8001ad4:	1898      	adds	r0, r3, r2
 8001ad6:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001ada:	4613      	mov	r3, r2
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	4413      	add	r3, r2
 8001ae0:	f503 73ad 	add.w	r3, r3, #346	; 0x15a
 8001ae4:	4a30      	ldr	r2, [pc, #192]	; (8001ba8 <main_initial+0x2ec>)
 8001ae6:	4413      	add	r3, r2
 8001ae8:	2203      	movs	r2, #3
 8001aea:	4619      	mov	r1, r3
 8001aec:	f00a ff8a 	bl	800ca04 <memcpy>
			memcpy(&LFO_slave1[mem_counter],potSource+376+(mem_counter*6),6 );  // + 60 ,ok here
 8001af0:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001af4:	4613      	mov	r3, r2
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	4413      	add	r3, r2
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	4a33      	ldr	r2, [pc, #204]	; (8001bcc <main_initial+0x310>)
 8001afe:	1898      	adds	r0, r3, r2
 8001b00:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001b04:	4613      	mov	r3, r2
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	4413      	add	r3, r2
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001b10:	4a25      	ldr	r2, [pc, #148]	; (8001ba8 <main_initial+0x2ec>)
 8001b12:	4413      	add	r3, r2
 8001b14:	2206      	movs	r2, #6
 8001b16:	4619      	mov	r1, r3
 8001b18:	f00a ff74 	bl	800ca04 <memcpy>
			memcpy(&LFO_square[mem_counter],potSource+436+(mem_counter*4),4 );
 8001b1c:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001b20:	4613      	mov	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4a29      	ldr	r2, [pc, #164]	; (8001bd0 <main_initial+0x314>)
 8001b2a:	4413      	add	r3, r2
 8001b2c:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001b30:	0092      	lsls	r2, r2, #2
 8001b32:	f502 72da 	add.w	r2, r2, #436	; 0x1b4
 8001b36:	491c      	ldr	r1, [pc, #112]	; (8001ba8 <main_initial+0x2ec>)
 8001b38:	440a      	add	r2, r1
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	601a      	str	r2, [r3, #0]
	    for(mem_counter=0;mem_counter<10;mem_counter++){
 8001b3e:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 8001b42:	3301      	adds	r3, #1
 8001b44:	f8a7 315e 	strh.w	r3, [r7, #350]	; 0x15e
 8001b48:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 8001b4c:	2b09      	cmp	r3, #9
 8001b4e:	f67f af7a 	bls.w	8001a46 <main_initial+0x18a>


	    }


		for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8001b52:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <main_initial+0x318>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	801a      	strh	r2, [r3, #0]
 8001b58:	e094      	b.n	8001c84 <main_initial+0x3c8>

		for 	(n=0;n<18;n++){					// this is ok
 8001b5a:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <main_initial+0x31c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	801a      	strh	r2, [r3, #0]
 8001b60:	e086      	b.n	8001c70 <main_initial+0x3b4>
 8001b62:	bf00      	nop
 8001b64:	0800d2f0 	.word	0x0800d2f0
 8001b68:	200129c4 	.word	0x200129c4
 8001b6c:	20012904 	.word	0x20012904
 8001b70:	20012964 	.word	0x20012964
 8001b74:	200128ac 	.word	0x200128ac
 8001b78:	20012854 	.word	0x20012854
 8001b7c:	20012a6c 	.word	0x20012a6c
 8001b80:	40000400 	.word	0x40000400
 8001b84:	20012a24 	.word	0x20012a24
 8001b88:	20012ab4 	.word	0x20012ab4
 8001b8c:	20012758 	.word	0x20012758
 8001b90:	2000a854 	.word	0x2000a854
 8001b94:	20012800 	.word	0x20012800
 8001b98:	0800d06c 	.word	0x0800d06c
 8001b9c:	200001a4 	.word	0x200001a4
 8001ba0:	200122c0 	.word	0x200122c0
 8001ba4:	40020000 	.word	0x40020000
 8001ba8:	200095d8 	.word	0x200095d8
 8001bac:	2000dc7c 	.word	0x2000dc7c
 8001bb0:	20009674 	.word	0x20009674
 8001bb4:	20008e08 	.word	0x20008e08
 8001bb8:	200097b4 	.word	0x200097b4
 8001bbc:	20008eb4 	.word	0x20008eb4
 8001bc0:	2000ce44 	.word	0x2000ce44
 8001bc4:	2000d1f0 	.word	0x2000d1f0
 8001bc8:	2000dcac 	.word	0x2000dcac
 8001bcc:	2000d0ec 	.word	0x2000d0ec
 8001bd0:	2000d128 	.word	0x2000d128
 8001bd4:	20009842 	.word	0x20009842
 8001bd8:	2000983c 	.word	0x2000983c
			if (n==0) gfx_ram[(i*18)+n] = 128+(i&31);   // half page
 8001bdc:	4b8a      	ldr	r3, [pc, #552]	; (8001e08 <main_initial+0x54c>)
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d114      	bne.n	8001c0e <main_initial+0x352>
 8001be4:	4b89      	ldr	r3, [pc, #548]	; (8001e0c <main_initial+0x550>)
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	f003 031f 	and.w	r3, r3, #31
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	4b86      	ldr	r3, [pc, #536]	; (8001e0c <main_initial+0x550>)
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	440b      	add	r3, r1
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4b81      	ldr	r3, [pc, #516]	; (8001e08 <main_initial+0x54c>)
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	440b      	add	r3, r1
 8001c06:	3a80      	subs	r2, #128	; 0x80
 8001c08:	b2d1      	uxtb	r1, r2
 8001c0a:	4a81      	ldr	r2, [pc, #516]	; (8001e10 <main_initial+0x554>)
 8001c0c:	54d1      	strb	r1, [r2, r3]
			if (n==1) gfx_ram[(i*18)+n] = 128+((i>>5)*8);    // change x to 8
 8001c0e:	4b7e      	ldr	r3, [pc, #504]	; (8001e08 <main_initial+0x54c>)
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d114      	bne.n	8001c40 <main_initial+0x384>
 8001c16:	4b7d      	ldr	r3, [pc, #500]	; (8001e0c <main_initial+0x550>)
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	095b      	lsrs	r3, r3, #5
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	3310      	adds	r3, #16
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4b7a      	ldr	r3, [pc, #488]	; (8001e0c <main_initial+0x550>)
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	4619      	mov	r1, r3
 8001c28:	460b      	mov	r3, r1
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	440b      	add	r3, r1
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	4619      	mov	r1, r3
 8001c32:	4b75      	ldr	r3, [pc, #468]	; (8001e08 <main_initial+0x54c>)
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	440b      	add	r3, r1
 8001c38:	00d2      	lsls	r2, r2, #3
 8001c3a:	b2d1      	uxtb	r1, r2
 8001c3c:	4a74      	ldr	r2, [pc, #464]	; (8001e10 <main_initial+0x554>)
 8001c3e:	54d1      	strb	r1, [r2, r3]
			if (n>1)  gfx_ram[(i*18)+n] = 255;
 8001c40:	4b71      	ldr	r3, [pc, #452]	; (8001e08 <main_initial+0x54c>)
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d90d      	bls.n	8001c64 <main_initial+0x3a8>
 8001c48:	4b70      	ldr	r3, [pc, #448]	; (8001e0c <main_initial+0x550>)
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4613      	mov	r3, r2
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4413      	add	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	461a      	mov	r2, r3
 8001c58:	4b6b      	ldr	r3, [pc, #428]	; (8001e08 <main_initial+0x54c>)
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	4a6c      	ldr	r2, [pc, #432]	; (8001e10 <main_initial+0x554>)
 8001c60:	21ff      	movs	r1, #255	; 0xff
 8001c62:	54d1      	strb	r1, [r2, r3]
		for 	(n=0;n<18;n++){					// this is ok
 8001c64:	4b68      	ldr	r3, [pc, #416]	; (8001e08 <main_initial+0x54c>)
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	4b66      	ldr	r3, [pc, #408]	; (8001e08 <main_initial+0x54c>)
 8001c6e:	801a      	strh	r2, [r3, #0]
 8001c70:	4b65      	ldr	r3, [pc, #404]	; (8001e08 <main_initial+0x54c>)
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	2b11      	cmp	r3, #17
 8001c76:	d9b1      	bls.n	8001bdc <main_initial+0x320>
		for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8001c78:	4b64      	ldr	r3, [pc, #400]	; (8001e0c <main_initial+0x550>)
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	4b62      	ldr	r3, [pc, #392]	; (8001e0c <main_initial+0x550>)
 8001c82:	801a      	strh	r2, [r3, #0]
 8001c84:	4b61      	ldr	r3, [pc, #388]	; (8001e0c <main_initial+0x550>)
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	2b3f      	cmp	r3, #63	; 0x3f
 8001c8a:	f67f af66 	bls.w	8001b5a <main_initial+0x29e>

		}

		}
	seq.pos=0;
 8001c8e:	4b61      	ldr	r3, [pc, #388]	; (8001e14 <main_initial+0x558>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]


	uint32_t  tempo_hold=1;  // calculate tempo look up
 8001c94:	2301      	movs	r3, #1
 8001c96:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148


	  	for (i=1;i<256;i++) {     // change for 32khz   1-256 bpm
 8001c9a:	4b5c      	ldr	r3, [pc, #368]	; (8001e0c <main_initial+0x550>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	801a      	strh	r2, [r3, #0]
 8001ca0:	e01a      	b.n	8001cd8 <main_initial+0x41c>
	  		tempo_hold=i;
 8001ca2:	4b5a      	ldr	r3, [pc, #360]	; (8001e0c <main_initial+0x550>)
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
	  		tempo_hold=(60*seq_sample_rate)/(tempo_hold*16); //
 8001caa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001cae:	011b      	lsls	r3, r3, #4
 8001cb0:	4a59      	ldr	r2, [pc, #356]	; (8001e18 <main_initial+0x55c>)
 8001cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

	  	tempo_lut[i]=tempo_hold;
 8001cba:	4b54      	ldr	r3, [pc, #336]	; (8001e0c <main_initial+0x550>)
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001cc4:	b299      	uxth	r1, r3
 8001cc6:	4b55      	ldr	r3, [pc, #340]	; (8001e1c <main_initial+0x560>)
 8001cc8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  	for (i=1;i<256;i++) {     // change for 32khz   1-256 bpm
 8001ccc:	4b4f      	ldr	r3, [pc, #316]	; (8001e0c <main_initial+0x550>)
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	4b4d      	ldr	r3, [pc, #308]	; (8001e0c <main_initial+0x550>)
 8001cd6:	801a      	strh	r2, [r3, #0]
 8001cd8:	4b4c      	ldr	r3, [pc, #304]	; (8001e0c <main_initial+0x550>)
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	2bff      	cmp	r3, #255	; 0xff
 8001cde:	d9e0      	bls.n	8001ca2 <main_initial+0x3e6>
	  	}

	//isrMask=571; // def tempo 571=180bpm , 20 ms /isrcount

		noteTiming=24;
 8001ce0:	4b4f      	ldr	r3, [pc, #316]	; (8001e20 <main_initial+0x564>)
 8001ce2:	2218      	movs	r2, #24
 8001ce4:	701a      	strb	r2, [r3, #0]
		for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8001ce6:	4b49      	ldr	r3, [pc, #292]	; (8001e0c <main_initial+0x550>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	801a      	strh	r2, [r3, #0]
 8001cec:	e00b      	b.n	8001d06 <main_initial+0x44a>
			spell[i]=67;
 8001cee:	4b47      	ldr	r3, [pc, #284]	; (8001e0c <main_initial+0x550>)
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	4b4b      	ldr	r3, [pc, #300]	; (8001e24 <main_initial+0x568>)
 8001cf6:	2143      	movs	r1, #67	; 0x43
 8001cf8:	5499      	strb	r1, [r3, r2]
		for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8001cfa:	4b44      	ldr	r3, [pc, #272]	; (8001e0c <main_initial+0x550>)
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	4b42      	ldr	r3, [pc, #264]	; (8001e0c <main_initial+0x550>)
 8001d04:	801a      	strh	r2, [r3, #0]
 8001d06:	4b41      	ldr	r3, [pc, #260]	; (8001e0c <main_initial+0x550>)
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001d0e:	d3ee      	bcc.n	8001cee <main_initial+0x432>

		}

		gfx_clear();
 8001d10:	f002 f9a2 	bl	8004058 <gfx_clear>
	uint16_t pars_counter;

	for (pars_counter=0;pars_counter<menu_parser_limit;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8001d14:	2300      	movs	r3, #0
 8001d16:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8001d1a:	e006      	b.n	8001d2a <main_initial+0x46e>

			menu_parser();  // run it closer to default_menu size ,times, if default_menu is corrupt gfx breaks pretty bad
 8001d1c:	f7ff f9ea 	bl	80010f4 <menu_parser>
	for (pars_counter=0;pars_counter<menu_parser_limit;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8001d20:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8001d24:	3301      	adds	r3, #1
 8001d26:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8001d2a:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8001d2e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001d32:	d3f3      	bcc.n	8001d1c <main_initial+0x460>

		}
	for (i=0;i<16384;i++) {     // change for 32khz   1-256 bpm
 8001d34:	4b35      	ldr	r3, [pc, #212]	; (8001e0c <main_initial+0x550>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	801a      	strh	r2, [r3, #0]
 8001d3a:	e005      	b.n	8001d48 <main_initial+0x48c>
 8001d3c:	4b33      	ldr	r3, [pc, #204]	; (8001e0c <main_initial+0x550>)
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	3301      	adds	r3, #1
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	4b31      	ldr	r3, [pc, #196]	; (8001e0c <main_initial+0x550>)
 8001d46:	801a      	strh	r2, [r3, #0]
 8001d48:	4b30      	ldr	r3, [pc, #192]	; (8001e0c <main_initial+0x550>)
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d50:	d3f4      	bcc.n	8001d3c <main_initial+0x480>
//	RAM[i]=0;      disable for now
	}
	for (i=0;i<1024;i++) {     // change for 32khz   1-256 bpm
 8001d52:	4b2e      	ldr	r3, [pc, #184]	; (8001e0c <main_initial+0x550>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	801a      	strh	r2, [r3, #0]
 8001d58:	e005      	b.n	8001d66 <main_initial+0x4aa>
 8001d5a:	4b2c      	ldr	r3, [pc, #176]	; (8001e0c <main_initial+0x550>)
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	4b2a      	ldr	r3, [pc, #168]	; (8001e0c <main_initial+0x550>)
 8001d64:	801a      	strh	r2, [r3, #0]
 8001d66:	4b29      	ldr	r3, [pc, #164]	; (8001e0c <main_initial+0x550>)
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d6e:	d3f4      	bcc.n	8001d5a <main_initial+0x49e>

	}



		for (pars_counter=0;pars_counter<512;pars_counter++)	  default_menu3[pars_counter>>1]=64;
 8001d70:	2300      	movs	r3, #0
 8001d72:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8001d76:	e00c      	b.n	8001d92 <main_initial+0x4d6>
 8001d78:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8001d7c:	085b      	lsrs	r3, r3, #1
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	461a      	mov	r2, r3
 8001d82:	4b29      	ldr	r3, [pc, #164]	; (8001e28 <main_initial+0x56c>)
 8001d84:	2140      	movs	r1, #64	; 0x40
 8001d86:	5499      	strb	r1, [r3, r2]
 8001d88:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8001d92:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8001d96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d9a:	d3ed      	bcc.n	8001d78 <main_initial+0x4bc>

		default_menu3_size = strlen(default_menu3);  // grab menu size , this is needed
 8001d9c:	4822      	ldr	r0, [pc, #136]	; (8001e28 <main_initial+0x56c>)
 8001d9e:	f7fe fa1b 	bl	80001d8 <strlen>
 8001da2:	4603      	mov	r3, r0
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	4b21      	ldr	r3, [pc, #132]	; (8001e2c <main_initial+0x570>)
 8001da8:	801a      	strh	r2, [r3, #0]
			menu_title_count--;  //count back one
 8001daa:	4b21      	ldr	r3, [pc, #132]	; (8001e30 <main_initial+0x574>)
 8001dac:	881b      	ldrh	r3, [r3, #0]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	4b1f      	ldr	r3, [pc, #124]	; (8001e30 <main_initial+0x574>)
 8001db4:	801a      	strh	r2, [r3, #0]
			display_clear ();
 8001db6:	f002 f991 	bl	80040dc <display_clear>
			for (pars_counter=0;pars_counter<menu_title_count;pars_counter++)	default_menu3 [menu_title_lut[pars_counter]&1023]=48;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8001dc0:	e00e      	b.n	8001de0 <main_initial+0x524>
 8001dc2:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8001dc6:	4a1b      	ldr	r2, [pc, #108]	; (8001e34 <main_initial+0x578>)
 8001dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dd0:	4a15      	ldr	r2, [pc, #84]	; (8001e28 <main_initial+0x56c>)
 8001dd2:	2130      	movs	r1, #48	; 0x30
 8001dd4:	54d1      	strb	r1, [r2, r3]
 8001dd6:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8001dda:	3301      	adds	r3, #1
 8001ddc:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8001de0:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <main_initial+0x574>)
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d3ea      	bcc.n	8001dc2 <main_initial+0x506>
			note_reset();
 8001dec:	f7ff fd28 	bl	8001840 <note_reset>


			menuSelect=0;
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <main_initial+0x57c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	701a      	strb	r2, [r3, #0]
	// fill up sample
	firstbarLoop=0;
 8001df6:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <main_initial+0x580>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
	//sample_ram =  &RAM[0];    //  allocate half a second

}
 8001dfc:	bf00      	nop
 8001dfe:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e06:	bf00      	nop
 8001e08:	2000983c 	.word	0x2000983c
 8001e0c:	20009842 	.word	0x20009842
 8001e10:	2000c5a8 	.word	0x2000c5a8
 8001e14:	2000dc7c 	.word	0x2000dc7c
 8001e18:	0020b584 	.word	0x0020b584
 8001e1c:	2000c1a4 	.word	0x2000c1a4
 8001e20:	200093d4 	.word	0x200093d4
 8001e24:	20008cb4 	.word	0x20008cb4
 8001e28:	20008f74 	.word	0x20008f74
 8001e2c:	2000ebe2 	.word	0x2000ebe2
 8001e30:	2000dfd2 	.word	0x2000dfd2
 8001e34:	2000dfd4 	.word	0x2000dfd4
 8001e38:	2000983a 	.word	0x2000983a
 8001e3c:	2000983b 	.word	0x2000983b

08001e40 <patch_lists>:
void sampler_save(void){


}

void patch_lists(void){   //   ok
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
    uint8_t  list_counter;
    uint8_t list_counter2=0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	71bb      	strb	r3, [r7, #6]
    for (list_counter=0;list_counter<20;list_counter++){
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	71fb      	strb	r3, [r7, #7]
 8001e4e:	e02e      	b.n	8001eae <patch_lists+0x6e>

	if ((patch[list_counter].input1&3)== 3   )    { LFO_sqr_list[list_counter2]   =  (patch[list_counter].target_index&7)+48;   // only writes sqr related  to list ,others left off
 8001e50:	79fa      	ldrb	r2, [r7, #7]
 8001e52:	491c      	ldr	r1, [pc, #112]	; (8001ec4 <patch_lists+0x84>)
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	440b      	add	r3, r1
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	d11f      	bne.n	8001ea8 <patch_lists+0x68>
 8001e68:	79fa      	ldrb	r2, [r7, #7]
 8001e6a:	4916      	ldr	r1, [pc, #88]	; (8001ec4 <patch_lists+0x84>)
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	440b      	add	r3, r1
 8001e76:	3302      	adds	r3, #2
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	79bb      	ldrb	r3, [r7, #6]
 8001e82:	3230      	adds	r2, #48	; 0x30
 8001e84:	b2d1      	uxtb	r1, r2
 8001e86:	4a10      	ldr	r2, [pc, #64]	; (8001ec8 <patch_lists+0x88>)
 8001e88:	54d1      	strb	r1, [r2, r3]
	sqr_target_list[list_counter2] =  (patch[list_counter].target);   //just
 8001e8a:	79fa      	ldrb	r2, [r7, #7]
 8001e8c:	79b9      	ldrb	r1, [r7, #6]
 8001e8e:	480d      	ldr	r0, [pc, #52]	; (8001ec4 <patch_lists+0x84>)
 8001e90:	4613      	mov	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	4403      	add	r3, r0
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	781a      	ldrb	r2, [r3, #0]
 8001e9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <patch_lists+0x8c>)
 8001ea0:	545a      	strb	r2, [r3, r1]
	list_counter2++;
 8001ea2:	79bb      	ldrb	r3, [r7, #6]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	71bb      	strb	r3, [r7, #6]
    for (list_counter=0;list_counter<20;list_counter++){
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	71fb      	strb	r3, [r7, #7]
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	2b13      	cmp	r3, #19
 8001eb2:	d9cd      	bls.n	8001e50 <patch_lists+0x10>
	}

    }

}
 8001eb4:	bf00      	nop
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	2000dcac 	.word	0x2000dcac
 8001ec8:	20011e20 	.word	0x20011e20
 8001ecc:	20012090 	.word	0x20012090

08001ed0 <sampling>:

return  output;

}

void sampling(void){						// 330 atm or 8.5ms
 8001ed0:	b5b0      	push	{r4, r5, r7, lr}
 8001ed2:	b0f0      	sub	sp, #448	; 0x1c0
 8001ed4:	af00      	add	r7, sp, #0

//	if (time_proc>580) time_final=time_proc;

//time_proc=0;

	time_proc=0;
 8001ed6:	4bc1      	ldr	r3, [pc, #772]	; (80021dc <sampling+0x30c>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	801a      	strh	r2, [r3, #0]
	int32_t sample_accus[10] ={0,0,0,0,0,0,0,0,0,0};
 8001edc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001ee0:	2228      	movs	r2, #40	; 0x28
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f00a fd9b 	bl	800ca20 <memset>
uint8_t mask_i;
int32_t sample_Accu[10] ={0,0,0,0,0,0,0,0,0,0};   // accu for sample output or lookup
 8001eea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001eee:	2228      	movs	r2, #40	; 0x28
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f00a fd94 	bl	800ca20 <memset>
uint16_t tuned_list[10];
int32_t sample_adc;
int32_t ram_temp;
uint16_t sample_counts_temp[40]={1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
 8001ef8:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001efc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f00:	4618      	mov	r0, r3
 8001f02:	2350      	movs	r3, #80	; 0x50
 8001f04:	461a      	mov	r2, r3
 8001f06:	2100      	movs	r1, #0
 8001f08:	f00a fd8a 	bl	800ca20 <memset>
 8001f0c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001f10:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f14:	2201      	movs	r2, #1
 8001f16:	801a      	strh	r2, [r3, #0]
 8001f18:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001f1c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f20:	2201      	movs	r2, #1
 8001f22:	805a      	strh	r2, [r3, #2]
 8001f24:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001f28:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	809a      	strh	r2, [r3, #4]
 8001f30:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001f34:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f38:	2201      	movs	r2, #1
 8001f3a:	80da      	strh	r2, [r3, #6]
 8001f3c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001f40:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f44:	2201      	movs	r2, #1
 8001f46:	811a      	strh	r2, [r3, #8]
 8001f48:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001f4c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f50:	2201      	movs	r2, #1
 8001f52:	815a      	strh	r2, [r3, #10]
 8001f54:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001f58:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	819a      	strh	r2, [r3, #12]
 8001f60:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001f64:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f68:	2201      	movs	r2, #1
 8001f6a:	81da      	strh	r2, [r3, #14]
 8001f6c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001f70:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f74:	2201      	movs	r2, #1
 8001f76:	821a      	strh	r2, [r3, #16]
 8001f78:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001f7c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f80:	2201      	movs	r2, #1
 8001f82:	825a      	strh	r2, [r3, #18]
 8001f84:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001f88:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	829a      	strh	r2, [r3, #20]
 8001f90:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001f94:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f98:	2201      	movs	r2, #1
 8001f9a:	82da      	strh	r2, [r3, #22]
 8001f9c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001fa0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	831a      	strh	r2, [r3, #24]
 8001fa8:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001fac:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	835a      	strh	r2, [r3, #26]
 8001fb4:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001fb8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	839a      	strh	r2, [r3, #28]
 8001fc0:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001fc4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001fc8:	2201      	movs	r2, #1
 8001fca:	83da      	strh	r2, [r3, #30]
 8001fcc:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001fd0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	841a      	strh	r2, [r3, #32]
 8001fd8:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001fdc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	845a      	strh	r2, [r3, #34]	; 0x22
 8001fe4:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001fe8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001fec:	2201      	movs	r2, #1
 8001fee:	849a      	strh	r2, [r3, #36]	; 0x24
 8001ff0:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001ff4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	84da      	strh	r2, [r3, #38]	; 0x26
 8001ffc:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002000:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002004:	2201      	movs	r2, #1
 8002006:	851a      	strh	r2, [r3, #40]	; 0x28
 8002008:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800200c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002010:	2201      	movs	r2, #1
 8002012:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002014:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002018:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800201c:	2201      	movs	r2, #1
 800201e:	859a      	strh	r2, [r3, #44]	; 0x2c
 8002020:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002024:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002028:	2201      	movs	r2, #1
 800202a:	85da      	strh	r2, [r3, #46]	; 0x2e
 800202c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002030:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002034:	2201      	movs	r2, #1
 8002036:	861a      	strh	r2, [r3, #48]	; 0x30
 8002038:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800203c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002040:	2201      	movs	r2, #1
 8002042:	865a      	strh	r2, [r3, #50]	; 0x32
 8002044:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002048:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800204c:	2201      	movs	r2, #1
 800204e:	869a      	strh	r2, [r3, #52]	; 0x34
 8002050:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002054:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002058:	2201      	movs	r2, #1
 800205a:	86da      	strh	r2, [r3, #54]	; 0x36
 800205c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002060:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002064:	2201      	movs	r2, #1
 8002066:	871a      	strh	r2, [r3, #56]	; 0x38
 8002068:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800206c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002070:	2201      	movs	r2, #1
 8002072:	875a      	strh	r2, [r3, #58]	; 0x3a
 8002074:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002078:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800207c:	2201      	movs	r2, #1
 800207e:	879a      	strh	r2, [r3, #60]	; 0x3c
 8002080:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002084:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002088:	2201      	movs	r2, #1
 800208a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800208c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002090:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002094:	2201      	movs	r2, #1
 8002096:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800209a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800209e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80020a2:	2201      	movs	r2, #1
 80020a4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 80020a8:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80020ac:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80020b0:	2201      	movs	r2, #1
 80020b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80020b6:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80020ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80020be:	2201      	movs	r2, #1
 80020c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80020c4:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80020c8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80020cc:	2201      	movs	r2, #1
 80020ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
int32_t sample_input;


//if ((sampler.record_enable==0) && (flash_flag))   {  flash_page_read ((sampler.ram_seq)<<1 ); flash_flag=0;}

if (bank_write==2)  {sample_pointD=512;}  else sample_pointD=0;
 80020d2:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <sampling+0x310>)
 80020d4:	881b      	ldrh	r3, [r3, #0]
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d104      	bne.n	80020e4 <sampling+0x214>
 80020da:	4b42      	ldr	r3, [pc, #264]	; (80021e4 <sampling+0x314>)
 80020dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020e0:	801a      	strh	r2, [r3, #0]
 80020e2:	e002      	b.n	80020ea <sampling+0x21a>
 80020e4:	4b3f      	ldr	r3, [pc, #252]	; (80021e4 <sampling+0x314>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	801a      	strh	r2, [r3, #0]

bank_write=0;
 80020ea:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <sampling+0x310>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	801a      	strh	r2, [r3, #0]
memcpy(notes_joined,seq.notes1,16);
 80020f0:	2210      	movs	r2, #16
 80020f2:	493d      	ldr	r1, [pc, #244]	; (80021e8 <sampling+0x318>)
 80020f4:	483d      	ldr	r0, [pc, #244]	; (80021ec <sampling+0x31c>)
 80020f6:	f00a fc85 	bl	800ca04 <memcpy>
memcpy(notes_joined+16,seq.notes2,16);
 80020fa:	4b3d      	ldr	r3, [pc, #244]	; (80021f0 <sampling+0x320>)
 80020fc:	2210      	movs	r2, #16
 80020fe:	493d      	ldr	r1, [pc, #244]	; (80021f4 <sampling+0x324>)
 8002100:	4618      	mov	r0, r3
 8002102:	f00a fc7f 	bl	800ca04 <memcpy>
sample_pointB=sample_pointD;
 8002106:	4b37      	ldr	r3, [pc, #220]	; (80021e4 <sampling+0x314>)
 8002108:	881a      	ldrh	r2, [r3, #0]
 800210a:	4b3b      	ldr	r3, [pc, #236]	; (80021f8 <sampling+0x328>)
 800210c:	801a      	strh	r2, [r3, #0]
unsigned short tempo_start=0;  // enabled when i=isrMask;
 800210e:	2300      	movs	r3, #0
 8002110:	f8a7 31bc 	strh.w	r3, [r7, #444]	; 0x1bc

uint16_t i_total;
uint16_t tempo_mod=tempo_lut[seq.tempo];  // set tempo,speed from lut 40-200bpm  ,changed to 4x for note lenght
 8002114:	4b39      	ldr	r3, [pc, #228]	; (80021fc <sampling+0x32c>)
 8002116:	785b      	ldrb	r3, [r3, #1]
 8002118:	461a      	mov	r2, r3
 800211a:	4b39      	ldr	r3, [pc, #228]	; (8002200 <sampling+0x330>)
 800211c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002120:	f8a7 31ae 	strh.w	r3, [r7, #430]	; 0x1ae
//if (seq.tempo<40)  tempo_mod=511;  // syncs to main loop
uint8_t l;			// 35.002khz(0.02857ms) sample, 1 sample is temp count (16x=0.00045712) , *16=1 note ,at 300 (437bpm),(1/(0.00002857*tempo count*16)=1beat in s

tempo_sync=16384/((tempo_mod*16)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80
 8002124:	f8b7 31ae 	ldrh.w	r3, [r7, #430]	; 0x1ae
 8002128:	2b00      	cmp	r3, #0
 800212a:	da00      	bge.n	800212e <sampling+0x25e>
 800212c:	331f      	adds	r3, #31
 800212e:	115b      	asrs	r3, r3, #5
 8002130:	461a      	mov	r2, r3
 8002132:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002136:	fb93 f3f2 	sdiv	r3, r3, r2
 800213a:	ee07 3a90 	vmov	s15, r3
 800213e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002142:	4b30      	ldr	r3, [pc, #192]	; (8002204 <sampling+0x334>)
 8002144:	edc3 7a00 	vstr	s15, [r3]
tempo_sync=tempo_sync/80;  // bit weird her , this is adsr !
 8002148:	4b2e      	ldr	r3, [pc, #184]	; (8002204 <sampling+0x334>)
 800214a:	ed93 7a00 	vldr	s14, [r3]
 800214e:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8002208 <sampling+0x338>
 8002152:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002156:	4b2b      	ldr	r3, [pc, #172]	; (8002204 <sampling+0x334>)
 8002158:	edc3 7a00 	vstr	s15, [r3]

if ((tempo_mod==511 )   && (sampler.ram_seq<=256)    && (seq.pos>>4)      )   { next_isr=0; tempo_count=0; }   //  this should sync  rough
 800215c:	f8b7 31ae 	ldrh.w	r3, [r7, #430]	; 0x1ae
 8002160:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002164:	4293      	cmp	r3, r2
 8002166:	d110      	bne.n	800218a <sampling+0x2ba>
 8002168:	4b28      	ldr	r3, [pc, #160]	; (800220c <sampling+0x33c>)
 800216a:	8c1b      	ldrh	r3, [r3, #32]
 800216c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002170:	d80b      	bhi.n	800218a <sampling+0x2ba>
 8002172:	4b22      	ldr	r3, [pc, #136]	; (80021fc <sampling+0x32c>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	091b      	lsrs	r3, r3, #4
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d005      	beq.n	800218a <sampling+0x2ba>
 800217e:	4b24      	ldr	r3, [pc, #144]	; (8002210 <sampling+0x340>)
 8002180:	2200      	movs	r2, #0
 8002182:	801a      	strh	r2, [r3, #0]
 8002184:	4b23      	ldr	r3, [pc, #140]	; (8002214 <sampling+0x344>)
 8002186:	2200      	movs	r2, #0
 8002188:	801a      	strh	r2, [r3, #0]

seqpos_i=0; //reset
 800218a:	4b23      	ldr	r3, [pc, #140]	; (8002218 <sampling+0x348>)
 800218c:	2200      	movs	r2, #0
 800218e:	801a      	strh	r2, [r3, #0]
	sampler.trigger_position=0;     // reset sample start here
 8002190:	4b1e      	ldr	r3, [pc, #120]	; (800220c <sampling+0x33c>)
 8002192:	2200      	movs	r2, #0
 8002194:	819a      	strh	r2, [r3, #12]




uint8_t looper_dat[8]={1,3,7,15};
 8002196:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800219a:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800219e:	491f      	ldr	r1, [pc, #124]	; (800221c <sampling+0x34c>)
 80021a0:	4613      	mov	r3, r2
 80021a2:	c903      	ldmia	r1, {r0, r1}
 80021a4:	6018      	str	r0, [r3, #0]
 80021a6:	3304      	adds	r3, #4
 80021a8:	7019      	strb	r1, [r3, #0]
 80021aa:	1d53      	adds	r3, r2, #5
 80021ac:	2200      	movs	r2, #0
 80021ae:	801a      	strh	r2, [r3, #0]
 80021b0:	709a      	strb	r2, [r3, #2]
uint32_t lfo_tempo_hold;

if (tempo_mod_hold!=tempo_mod){					// lfo lut calculate only when changes tempo
 80021b2:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <sampling+0x350>)
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	f8b7 21ae 	ldrh.w	r2, [r7, #430]	; 0x1ae
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d05e      	beq.n	800227c <sampling+0x3ac>

		float lfo_tempo_calc=((1647099*4)/(tempo_mod)); // deafualt 1 note    12867  at 512
 80021be:	f8b7 31ae 	ldrh.w	r3, [r7, #430]	; 0x1ae
 80021c2:	4a18      	ldr	r2, [pc, #96]	; (8002224 <sampling+0x354>)
 80021c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80021c8:	ee07 3a90 	vmov	s15, r3
 80021cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021d0:	edc7 7a6a 	vstr	s15, [r7, #424]	; 0x1a8


						for (i=0;i<256;i++){								// 128 is 1 note
 80021d4:	4b14      	ldr	r3, [pc, #80]	; (8002228 <sampling+0x358>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	801a      	strh	r2, [r3, #0]
 80021da:	e04b      	b.n	8002274 <sampling+0x3a4>
 80021dc:	2000ce40 	.word	0x2000ce40
 80021e0:	20008e02 	.word	0x20008e02
 80021e4:	2000a84e 	.word	0x2000a84e
 80021e8:	2000dc7e 	.word	0x2000dc7e
 80021ec:	20010bf0 	.word	0x20010bf0
 80021f0:	20010c00 	.word	0x20010c00
 80021f4:	2000dc8f 	.word	0x2000dc8f
 80021f8:	20009840 	.word	0x20009840
 80021fc:	2000dc7c 	.word	0x2000dc7c
 8002200:	2000c1a4 	.word	0x2000c1a4
 8002204:	2000ca30 	.word	0x2000ca30
 8002208:	42a00000 	.word	0x42a00000
 800220c:	20008eb4 	.word	0x20008eb4
 8002210:	2000c054 	.word	0x2000c054
 8002214:	2000c080 	.word	0x2000c080
 8002218:	200120a4 	.word	0x200120a4
 800221c:	0800d170 	.word	0x0800d170
 8002220:	2000c5a4 	.word	0x2000c5a4
 8002224:	006487ec 	.word	0x006487ec
 8002228:	20009842 	.word	0x20009842
	lfo_tempo_hold=(((i+1)*lfo_tempo_calc))/16;               //  at 64 its 12867
 800222c:	4bc0      	ldr	r3, [pc, #768]	; (8002530 <sampling+0x660>)
 800222e:	881b      	ldrh	r3, [r3, #0]
 8002230:	3301      	adds	r3, #1
 8002232:	ee07 3a90 	vmov	s15, r3
 8002236:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800223a:	edd7 7a6a 	vldr	s15, [r7, #424]	; 0x1a8
 800223e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002242:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002246:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800224a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800224e:	ee17 3a90 	vmov	r3, s15
 8002252:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	lfo_tempo_lut[i]= lfo_tempo_hold;
 8002256:	4bb6      	ldr	r3, [pc, #728]	; (8002530 <sampling+0x660>)
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002260:	b299      	uxth	r1, r3
 8002262:	4bb4      	ldr	r3, [pc, #720]	; (8002534 <sampling+0x664>)
 8002264:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
						for (i=0;i<256;i++){								// 128 is 1 note
 8002268:	4bb1      	ldr	r3, [pc, #708]	; (8002530 <sampling+0x660>)
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	3301      	adds	r3, #1
 800226e:	b29a      	uxth	r2, r3
 8002270:	4baf      	ldr	r3, [pc, #700]	; (8002530 <sampling+0x660>)
 8002272:	801a      	strh	r2, [r3, #0]
 8002274:	4bae      	ldr	r3, [pc, #696]	; (8002530 <sampling+0x660>)
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	2bff      	cmp	r3, #255	; 0xff
 800227a:	d9d7      	bls.n	800222c <sampling+0x35c>

}}
tempo_mod_hold=tempo_mod;   // for lfo
 800227c:	4aae      	ldr	r2, [pc, #696]	; (8002538 <sampling+0x668>)
 800227e:	f8b7 31ae 	ldrh.w	r3, [r7, #430]	; 0x1ae
 8002282:	8013      	strh	r3, [r2, #0]

uint32_t  note_toggler[17]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //records note position on 0-512   using a bit
 8002284:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002288:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800228c:	4618      	mov	r0, r3
 800228e:	2344      	movs	r3, #68	; 0x44
 8002290:	461a      	mov	r2, r3
 8002292:	2100      	movs	r1, #0
 8002294:	f00a fbc4 	bl	800ca20 <memset>
for (i=0;i<16;i++) {  note_toggler[i]=0; }
 8002298:	4ba5      	ldr	r3, [pc, #660]	; (8002530 <sampling+0x660>)
 800229a:	2200      	movs	r2, #0
 800229c:	801a      	strh	r2, [r3, #0]
 800229e:	e00f      	b.n	80022c0 <sampling+0x3f0>
 80022a0:	4ba3      	ldr	r3, [pc, #652]	; (8002530 <sampling+0x660>)
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	4619      	mov	r1, r3
 80022a6:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80022aa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80022ae:	2200      	movs	r2, #0
 80022b0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80022b4:	4b9e      	ldr	r3, [pc, #632]	; (8002530 <sampling+0x660>)
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	3301      	adds	r3, #1
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	4b9c      	ldr	r3, [pc, #624]	; (8002530 <sampling+0x660>)
 80022be:	801a      	strh	r2, [r3, #0]
 80022c0:	4b9b      	ldr	r3, [pc, #620]	; (8002530 <sampling+0x660>)
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	2b0f      	cmp	r3, #15
 80022c6:	d9eb      	bls.n	80022a0 <sampling+0x3d0>
	//potSource[150]=(freq_point[0])*100; //0-2


patch_lists();
 80022c8:	f7ff fdba 	bl	8001e40 <patch_lists>
int32_t* osc_pointers[10];   // sample outs
uint8_t pars_counter;

//if (sampler.ram_seq>15871)  sampler.ram_seq=0;  //else sampler.ram_seq=sampler.ram_seq+1024;
//setup pointers for osc options
 for (pars_counter=0;pars_counter<4;pars_counter++)	{   // fill up pointers and reload vars
 80022cc:	2300      	movs	r3, #0
 80022ce:	f887 31bb 	strb.w	r3, [r7, #443]	; 0x1bb
 80022d2:	e100      	b.n	80024d6 <sampling+0x606>


		sample_accus[pars_counter]=sample_accus_hold[pars_counter];
 80022d4:	f897 21bb 	ldrb.w	r2, [r7, #443]	; 0x1bb
 80022d8:	f897 31bb 	ldrb.w	r3, [r7, #443]	; 0x1bb
 80022dc:	4997      	ldr	r1, [pc, #604]	; (800253c <sampling+0x66c>)
 80022de:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80022e8:	443b      	add	r3, r7
 80022ea:	f843 2c80 	str.w	r2, [r3, #-128]
	 if (note[pars_counter].osc==0) osc_pointers[pars_counter]=&sample_Accu[5];  // zero
 80022ee:	f897 21bb 	ldrb.w	r2, [r7, #443]	; 0x1bb
 80022f2:	4993      	ldr	r1, [pc, #588]	; (8002540 <sampling+0x670>)
 80022f4:	4613      	mov	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	1a9b      	subs	r3, r3, r2
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	440b      	add	r3, r1
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10a      	bne.n	800231a <sampling+0x44a>
 8002304:	f897 21bb 	ldrb.w	r2, [r7, #443]	; 0x1bb
 8002308:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800230c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002310:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8002314:	3114      	adds	r1, #20
 8002316:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 	 	 	 if (note[pars_counter].osc==1) osc_pointers[pars_counter]=&sample_accus[pars_counter];   // saw
 800231a:	f897 21bb 	ldrb.w	r2, [r7, #443]	; 0x1bb
 800231e:	4988      	ldr	r1, [pc, #544]	; (8002540 <sampling+0x670>)
 8002320:	4613      	mov	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	1a9b      	subs	r3, r3, r2
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	440b      	add	r3, r1
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d10d      	bne.n	800234c <sampling+0x47c>
 8002330:	f897 31bb 	ldrb.w	r3, [r7, #443]	; 0x1bb
 8002334:	f897 21bb 	ldrb.w	r2, [r7, #443]	; 0x1bb
 8002338:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4419      	add	r1, r3
 8002340:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002344:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==2) osc_pointers[pars_counter]=&sample_Accu[pars_counter];		// tri
 800234c:	f897 21bb 	ldrb.w	r2, [r7, #443]	; 0x1bb
 8002350:	497b      	ldr	r1, [pc, #492]	; (8002540 <sampling+0x670>)
 8002352:	4613      	mov	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	1a9b      	subs	r3, r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	440b      	add	r3, r1
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d10d      	bne.n	800237e <sampling+0x4ae>
 8002362:	f897 31bb 	ldrb.w	r3, [r7, #443]	; 0x1bb
 8002366:	f897 21bb 	ldrb.w	r2, [r7, #443]	; 0x1bb
 800236a:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4419      	add	r1, r3
 8002372:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002376:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800237a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==3) { osc_pointers[pars_counter]=&sample_Accu[pars_counter+6];sampler.one_shot=sampler.one_shot | (1<<pars_counter);}   // sine
 800237e:	f897 21bb 	ldrb.w	r2, [r7, #443]	; 0x1bb
 8002382:	496f      	ldr	r1, [pc, #444]	; (8002540 <sampling+0x670>)
 8002384:	4613      	mov	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	1a9b      	subs	r3, r3, r2
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	440b      	add	r3, r1
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b03      	cmp	r3, #3
 8002392:	d11c      	bne.n	80023ce <sampling+0x4fe>
 8002394:	f897 31bb 	ldrb.w	r3, [r7, #443]	; 0x1bb
 8002398:	3306      	adds	r3, #6
 800239a:	f897 21bb 	ldrb.w	r2, [r7, #443]	; 0x1bb
 800239e:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4419      	add	r1, r3
 80023a6:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80023aa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80023ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80023b2:	4b64      	ldr	r3, [pc, #400]	; (8002544 <sampling+0x674>)
 80023b4:	7c5b      	ldrb	r3, [r3, #17]
 80023b6:	b25a      	sxtb	r2, r3
 80023b8:	f897 31bb 	ldrb.w	r3, [r7, #443]	; 0x1bb
 80023bc:	2101      	movs	r1, #1
 80023be:	fa01 f303 	lsl.w	r3, r1, r3
 80023c2:	b25b      	sxtb	r3, r3
 80023c4:	4313      	orrs	r3, r2
 80023c6:	b25b      	sxtb	r3, r3
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	4b5e      	ldr	r3, [pc, #376]	; (8002544 <sampling+0x674>)
 80023cc:	745a      	strb	r2, [r3, #17]
	 			if (note[pars_counter].osc==4) { osc_pointers[pars_counter]=&sample_Accu[pars_counter+6];sampler.one_shot=sampler.one_shot &  ~(1<<pars_counter);}  // looping sample
 80023ce:	f897 21bb 	ldrb.w	r2, [r7, #443]	; 0x1bb
 80023d2:	495b      	ldr	r1, [pc, #364]	; (8002540 <sampling+0x670>)
 80023d4:	4613      	mov	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	1a9b      	subs	r3, r3, r2
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	440b      	add	r3, r1
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d11e      	bne.n	8002422 <sampling+0x552>
 80023e4:	f897 31bb 	ldrb.w	r3, [r7, #443]	; 0x1bb
 80023e8:	3306      	adds	r3, #6
 80023ea:	f897 21bb 	ldrb.w	r2, [r7, #443]	; 0x1bb
 80023ee:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4419      	add	r1, r3
 80023f6:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80023fa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80023fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002402:	4b50      	ldr	r3, [pc, #320]	; (8002544 <sampling+0x674>)
 8002404:	7c5b      	ldrb	r3, [r3, #17]
 8002406:	b25a      	sxtb	r2, r3
 8002408:	f897 31bb 	ldrb.w	r3, [r7, #443]	; 0x1bb
 800240c:	2101      	movs	r1, #1
 800240e:	fa01 f303 	lsl.w	r3, r1, r3
 8002412:	b25b      	sxtb	r3, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	b25b      	sxtb	r3, r3
 8002418:	4013      	ands	r3, r2
 800241a:	b25b      	sxtb	r3, r3
 800241c:	b2da      	uxtb	r2, r3
 800241e:	4b49      	ldr	r3, [pc, #292]	; (8002544 <sampling+0x674>)
 8002420:	745a      	strb	r2, [r3, #17]
	 			if (note[pars_counter].osc==5) osc_pointers[pars_counter]=&sample_adc;   // sine
 8002422:	f897 21bb 	ldrb.w	r2, [r7, #443]	; 0x1bb
 8002426:	4946      	ldr	r1, [pc, #280]	; (8002540 <sampling+0x670>)
 8002428:	4613      	mov	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	1a9b      	subs	r3, r3, r2
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	440b      	add	r3, r1
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b05      	cmp	r3, #5
 8002436:	d109      	bne.n	800244c <sampling+0x57c>
 8002438:	f897 21bb 	ldrb.w	r2, [r7, #443]	; 0x1bb
 800243c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002440:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002444:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8002448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==6) osc_pointers[pars_counter]=&ram_temp ;   // sine
 800244c:	f897 21bb 	ldrb.w	r2, [r7, #443]	; 0x1bb
 8002450:	493b      	ldr	r1, [pc, #236]	; (8002540 <sampling+0x670>)
 8002452:	4613      	mov	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	1a9b      	subs	r3, r3, r2
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	440b      	add	r3, r1
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b06      	cmp	r3, #6
 8002460:	d109      	bne.n	8002476 <sampling+0x5a6>
 8002462:	f897 21bb 	ldrb.w	r2, [r7, #443]	; 0x1bb
 8002466:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800246a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800246e:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8002472:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==7) osc_pointers[pars_counter]=&ram_temp ;   // trigger 0-16
 8002476:	f897 21bb 	ldrb.w	r2, [r7, #443]	; 0x1bb
 800247a:	4931      	ldr	r1, [pc, #196]	; (8002540 <sampling+0x670>)
 800247c:	4613      	mov	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	1a9b      	subs	r3, r3, r2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	440b      	add	r3, r1
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b07      	cmp	r3, #7
 800248a:	d109      	bne.n	80024a0 <sampling+0x5d0>
 800248c:	f897 21bb 	ldrb.w	r2, [r7, #443]	; 0x1bb
 8002490:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002494:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002498:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 800249c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc>7) osc_pointers[pars_counter]=&sample_Accu[5];  // zero
 80024a0:	f897 21bb 	ldrb.w	r2, [r7, #443]	; 0x1bb
 80024a4:	4926      	ldr	r1, [pc, #152]	; (8002540 <sampling+0x670>)
 80024a6:	4613      	mov	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	1a9b      	subs	r3, r3, r2
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	440b      	add	r3, r1
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b07      	cmp	r3, #7
 80024b4:	d90a      	bls.n	80024cc <sampling+0x5fc>
 80024b6:	f897 21bb 	ldrb.w	r2, [r7, #443]	; 0x1bb
 80024ba:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80024be:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80024c2:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80024c6:	3114      	adds	r1, #20
 80024c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 for (pars_counter=0;pars_counter<4;pars_counter++)	{   // fill up pointers and reload vars
 80024cc:	f897 31bb 	ldrb.w	r3, [r7, #443]	; 0x1bb
 80024d0:	3301      	adds	r3, #1
 80024d2:	f887 31bb 	strb.w	r3, [r7, #443]	; 0x1bb
 80024d6:	f897 31bb 	ldrb.w	r3, [r7, #443]	; 0x1bb
 80024da:	2b03      	cmp	r3, #3
 80024dc:	f67f aefa 	bls.w	80022d4 <sampling+0x404>


 }

note_holdA=0;
 80024e0:	4b19      	ldr	r3, [pc, #100]	; (8002548 <sampling+0x678>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]

// some good phasin and delays here
uint8_t cross_fade[2]={0,0};
 80024e6:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80024ea:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80024ee:	2200      	movs	r2, #0
 80024f0:	801a      	strh	r2, [r3, #0]
uint8_t fader[17]={0,1,5,11,19,28,39,51,64,76,88,99,108,116,122,126,127}; // sine curve for cross fade
 80024f2:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80024f6:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80024fa:	4a14      	ldr	r2, [pc, #80]	; (800254c <sampling+0x67c>)
 80024fc:	461c      	mov	r4, r3
 80024fe:	4615      	mov	r5, r2
 8002500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002504:	682b      	ldr	r3, [r5, #0]
 8002506:	7023      	strb	r3, [r4, #0]
	if ((ADSR[0].attack_data>1999)  &&  (ADSR[0].attack_data<2500)	)					{ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data	;	ADSR[0].buffer_temp=2500-ADSR[0].attack_data; } //500-0;
	if (ADSR[0].attack_data>3000)   																			{ADSR[0].buffer_temp=1; ADSR[0].attack_data=4000; }     // THE END

adsr_lut[i]= ADSR[0].buffer_temp*0.001;
}*/
isr_change=0;
 8002508:	4b11      	ldr	r3, [pc, #68]	; (8002550 <sampling+0x680>)
 800250a:	2200      	movs	r2, #0
 800250c:	801a      	strh	r2, [r3, #0]
uint8_t seq_dat=(1<<(((adc_values[0]>>3))+1))-1;
 800250e:	4b11      	ldr	r3, [pc, #68]	; (8002554 <sampling+0x684>)
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	08db      	lsrs	r3, r3, #3
 8002514:	b29b      	uxth	r3, r3
 8002516:	3301      	adds	r3, #1
 8002518:	2201      	movs	r2, #1
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3
///////////////////////////////////////////////////////////////
uint8_t note_plain;

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002526:	4b02      	ldr	r3, [pc, #8]	; (8002530 <sampling+0x660>)
 8002528:	2200      	movs	r2, #0
 800252a:	801a      	strh	r2, [r3, #0]
 800252c:	e236      	b.n	800299c <sampling+0xacc>
 800252e:	bf00      	nop
 8002530:	20009842 	.word	0x20009842
 8002534:	2000c3a4 	.word	0x2000c3a4
 8002538:	2000c5a4 	.word	0x2000c5a4
 800253c:	2000c058 	.word	0x2000c058
 8002540:	20008e08 	.word	0x20008e08
 8002544:	20008eb4 	.word	0x20008eb4
 8002548:	2000c056 	.word	0x2000c056
 800254c:	0800d178 	.word	0x0800d178
 8002550:	20009838 	.word	0x20009838
 8002554:	20008df8 	.word	0x20008df8

	i_total=i+sample_pointB;
 8002558:	4ba3      	ldr	r3, [pc, #652]	; (80027e8 <sampling+0x918>)
 800255a:	881a      	ldrh	r2, [r3, #0]
 800255c:	4ba3      	ldr	r3, [pc, #652]	; (80027ec <sampling+0x91c>)
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	4413      	add	r3, r2
 8002562:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
	sampling_position=i>>6;   //   0-8 steps
 8002566:	4ba0      	ldr	r3, [pc, #640]	; (80027e8 <sampling+0x918>)
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	099b      	lsrs	r3, r3, #6
 800256c:	b29b      	uxth	r3, r3
 800256e:	b2da      	uxtb	r2, r3
 8002570:	4b9f      	ldr	r3, [pc, #636]	; (80027f0 <sampling+0x920>)
 8002572:	701a      	strb	r2, [r3, #0]
	sampling_position_b=(sampling_position+7)&7;
 8002574:	4b9e      	ldr	r3, [pc, #632]	; (80027f0 <sampling+0x920>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	3307      	adds	r3, #7
 800257a:	b2db      	uxtb	r3, r3
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	b2da      	uxtb	r2, r3
 8002582:	4b9c      	ldr	r3, [pc, #624]	; (80027f4 <sampling+0x924>)
 8002584:	701a      	strb	r2, [r3, #0]
	note_plain=seq.notes1[seq.pos & 7 ];
 8002586:	4b9c      	ldr	r3, [pc, #624]	; (80027f8 <sampling+0x928>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	4a9a      	ldr	r2, [pc, #616]	; (80027f8 <sampling+0x928>)
 8002590:	4413      	add	r3, r2
 8002592:	789b      	ldrb	r3, [r3, #2]
 8002594:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
potValues[i&255]=potSource[i&255]>>4; //just to update values
 8002598:	4b93      	ldr	r3, [pc, #588]	; (80027e8 <sampling+0x918>)
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	4a97      	ldr	r2, [pc, #604]	; (80027fc <sampling+0x92c>)
 80025a0:	5cd2      	ldrb	r2, [r2, r3]
 80025a2:	4b91      	ldr	r3, [pc, #580]	; (80027e8 <sampling+0x918>)
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	0912      	lsrs	r2, r2, #4
 80025aa:	b2d1      	uxtb	r1, r2
 80025ac:	4a94      	ldr	r2, [pc, #592]	; (8002800 <sampling+0x930>)
 80025ae:	54d1      	strb	r1, [r2, r3]

//tempo_large++;
//if (tempo_large>=(tempo_mod*4096))  tempo_large=0;     // use it count for lfo long  16*16 notes

if (tempo_count>=tempo_mod) { next_isr=(next_isr+1)& 4095;tempo_count=0;isr_change=next_isr+1;  }  else {tempo_count++;  }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 80025b0:	4b94      	ldr	r3, [pc, #592]	; (8002804 <sampling+0x934>)
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	f8b7 21ae 	ldrh.w	r2, [r7, #430]	; 0x1ae
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d812      	bhi.n	80025e2 <sampling+0x712>
 80025bc:	4b92      	ldr	r3, [pc, #584]	; (8002808 <sampling+0x938>)
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	3301      	adds	r3, #1
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	4b8f      	ldr	r3, [pc, #572]	; (8002808 <sampling+0x938>)
 80025cc:	801a      	strh	r2, [r3, #0]
 80025ce:	4b8d      	ldr	r3, [pc, #564]	; (8002804 <sampling+0x934>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	801a      	strh	r2, [r3, #0]
 80025d4:	4b8c      	ldr	r3, [pc, #560]	; (8002808 <sampling+0x938>)
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	3301      	adds	r3, #1
 80025da:	b29a      	uxth	r2, r3
 80025dc:	4b8b      	ldr	r3, [pc, #556]	; (800280c <sampling+0x93c>)
 80025de:	801a      	strh	r2, [r3, #0]
 80025e0:	e005      	b.n	80025ee <sampling+0x71e>
 80025e2:	4b88      	ldr	r3, [pc, #544]	; (8002804 <sampling+0x934>)
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	3301      	adds	r3, #1
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	4b86      	ldr	r3, [pc, #536]	; (8002804 <sampling+0x934>)
 80025ec:	801a      	strh	r2, [r3, #0]
// tempo_count is about 1000-400
	tempo_start=0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	f8a7 31bc 	strh.w	r3, [r7, #444]	; 0x1bc
	if ((next_isr>>4) != (seq.pos)) { 					//     min 6400 cycles per seq.pos ,         next note step 140ms
 80025f4:	4b84      	ldr	r3, [pc, #528]	; (8002808 <sampling+0x938>)
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	091b      	lsrs	r3, r3, #4
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	4b7e      	ldr	r3, [pc, #504]	; (80027f8 <sampling+0x928>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	b29b      	uxth	r3, r3
 8002602:	429a      	cmp	r2, r3
 8002604:	d009      	beq.n	800261a <sampling+0x74a>
		seq.pos=(next_isr>>4); // seq pos =256 max , isr = 1/16 of a note, note lenght is 1-4
 8002606:	4b80      	ldr	r3, [pc, #512]	; (8002808 <sampling+0x938>)
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	091b      	lsrs	r3, r3, #4
 800260c:	b29b      	uxth	r3, r3
 800260e:	b2da      	uxtb	r2, r3
 8002610:	4b79      	ldr	r3, [pc, #484]	; (80027f8 <sampling+0x928>)
 8002612:	701a      	strb	r2, [r3, #0]
		tempo_start=1;
 8002614:	2301      	movs	r3, #1
 8002616:	f8a7 31bc 	strh.w	r3, [r7, #444]	; 0x1bc
}

	//if ((next_isr&7)==0+(sampler.offset&7))	note[3].position=1;  // for sample     run always


	if(tempo_start  )    // Calculates only on note change, gotta change seq.pos somehow  , only activates when change in seq pos ie once in ten bankwrites ,rare
 800261a:	f8b7 31bc 	ldrh.w	r3, [r7, #444]	; 0x1bc
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 81ac 	beq.w	800297c <sampling+0xaac>
	{
		serial_tosend=1;
 8002624:	4b7a      	ldr	r3, [pc, #488]	; (8002810 <sampling+0x940>)
 8002626:	2201      	movs	r2, #1
 8002628:	701a      	strb	r2, [r3, #0]
		//note_reset();
		//note[1].timeshift=(adc_values[1])&31; //assigned pots to start of loopers 0-16,works
		seqpos_i=i+1;   //record postion
 800262a:	4b6f      	ldr	r3, [pc, #444]	; (80027e8 <sampling+0x918>)
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	3301      	adds	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	4b78      	ldr	r3, [pc, #480]	; (8002814 <sampling+0x944>)
 8002634:	801a      	strh	r2, [r3, #0]


	//	note[2].timeshift=note[1].timeshift=note[3].timeshift=note[4].timeshift;
		uint8_t   loop_temp1[4];
		loop_temp1[0]=seq.pos&7;
 8002636:	4b70      	ldr	r3, [pc, #448]	; (80027f8 <sampling+0x928>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	b2da      	uxtb	r2, r3
 8002640:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002644:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002648:	701a      	strb	r2, [r3, #0]
	//	loop_temp1[3]=adc_values[0]>>2;




		seq.loop[0]=(note[0].timeshift+loop_temp1[0])&31;
 800264a:	4b73      	ldr	r3, [pc, #460]	; (8002818 <sampling+0x948>)
 800264c:	799a      	ldrb	r2, [r3, #6]
 800264e:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002652:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	4413      	add	r3, r2
 800265a:	b2db      	uxtb	r3, r3
 800265c:	f003 031f 	and.w	r3, r3, #31
 8002660:	b2da      	uxtb	r2, r3
 8002662:	4b65      	ldr	r3, [pc, #404]	; (80027f8 <sampling+0x928>)
 8002664:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		seq.loop[1]=(note[1].timeshift+loop_temp1[0])&31;
 8002668:	4b6b      	ldr	r3, [pc, #428]	; (8002818 <sampling+0x948>)
 800266a:	7d1a      	ldrb	r2, [r3, #20]
 800266c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002670:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	4413      	add	r3, r2
 8002678:	b2db      	uxtb	r3, r3
 800267a:	f003 031f 	and.w	r3, r3, #31
 800267e:	b2da      	uxtb	r2, r3
 8002680:	4b5d      	ldr	r3, [pc, #372]	; (80027f8 <sampling+0x928>)
 8002682:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		seq.loop[2]=(note[2].timeshift+loop_temp1[0])&31; // this is really handy with sync to notes
 8002686:	4b64      	ldr	r3, [pc, #400]	; (8002818 <sampling+0x948>)
 8002688:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800268c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002690:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	4413      	add	r3, r2
 8002698:	b2db      	uxtb	r3, r3
 800269a:	f003 031f 	and.w	r3, r3, #31
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	4b55      	ldr	r3, [pc, #340]	; (80027f8 <sampling+0x928>)
 80026a2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		seq.loop[3]=(note[3].timeshift+loop_temp1[0])&31;
 80026a6:	4b5c      	ldr	r3, [pc, #368]	; (8002818 <sampling+0x948>)
 80026a8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80026ac:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80026b0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	4413      	add	r3, r2
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	f003 031f 	and.w	r3, r3, #31
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	4b4d      	ldr	r3, [pc, #308]	; (80027f8 <sampling+0x928>)
 80026c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		//seq.loop[5]=(note[5].timeshift+loop_temp1[0])&31;


			note[0].pitch=(notes_joined[seq.loop[0]])+(note[0].transpose);    // maybe join 1 and 2
 80026c6:	4b4c      	ldr	r3, [pc, #304]	; (80027f8 <sampling+0x928>)
 80026c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026cc:	461a      	mov	r2, r3
 80026ce:	4b53      	ldr	r3, [pc, #332]	; (800281c <sampling+0x94c>)
 80026d0:	5c9a      	ldrb	r2, [r3, r2]
 80026d2:	4b51      	ldr	r3, [pc, #324]	; (8002818 <sampling+0x948>)
 80026d4:	795b      	ldrb	r3, [r3, #5]
 80026d6:	4413      	add	r3, r2
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	4b4f      	ldr	r3, [pc, #316]	; (8002818 <sampling+0x948>)
 80026dc:	709a      	strb	r2, [r3, #2]
			//note[0].pitch=note[1].pitch+(note[0].transpose); // just double
			note[1].pitch=(notes_joined[seq.loop[1]])+(note[1].transpose);  //loop 8 notes from pos and x times
 80026de:	4b46      	ldr	r3, [pc, #280]	; (80027f8 <sampling+0x928>)
 80026e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026e4:	461a      	mov	r2, r3
 80026e6:	4b4d      	ldr	r3, [pc, #308]	; (800281c <sampling+0x94c>)
 80026e8:	5c9a      	ldrb	r2, [r3, r2]
 80026ea:	4b4b      	ldr	r3, [pc, #300]	; (8002818 <sampling+0x948>)
 80026ec:	7cdb      	ldrb	r3, [r3, #19]
 80026ee:	4413      	add	r3, r2
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	4b49      	ldr	r3, [pc, #292]	; (8002818 <sampling+0x948>)
 80026f4:	741a      	strb	r2, [r3, #16]
			note[2].pitch=(notes_joined[seq.loop[2]])+(note[2].transpose);  //loop 8 notes from pos and x times
 80026f6:	4b40      	ldr	r3, [pc, #256]	; (80027f8 <sampling+0x928>)
 80026f8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80026fc:	461a      	mov	r2, r3
 80026fe:	4b47      	ldr	r3, [pc, #284]	; (800281c <sampling+0x94c>)
 8002700:	5c9a      	ldrb	r2, [r3, r2]
 8002702:	4b45      	ldr	r3, [pc, #276]	; (8002818 <sampling+0x948>)
 8002704:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002708:	4413      	add	r3, r2
 800270a:	b2da      	uxtb	r2, r3
 800270c:	4b42      	ldr	r3, [pc, #264]	; (8002818 <sampling+0x948>)
 800270e:	779a      	strb	r2, [r3, #30]

		note[3].pitch=(notes_joined[seq.loop[3]])+(note[3].transpose); ;  //loop 8 notes from pos and x times ,might disable normal adsr completely
 8002710:	4b39      	ldr	r3, [pc, #228]	; (80027f8 <sampling+0x928>)
 8002712:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002716:	461a      	mov	r2, r3
 8002718:	4b40      	ldr	r3, [pc, #256]	; (800281c <sampling+0x94c>)
 800271a:	5c9a      	ldrb	r2, [r3, r2]
 800271c:	4b3e      	ldr	r3, [pc, #248]	; (8002818 <sampling+0x948>)
 800271e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002722:	4413      	add	r3, r2
 8002724:	b2da      	uxtb	r2, r3
 8002726:	4b3c      	ldr	r3, [pc, #240]	; (8002818 <sampling+0x948>)
 8002728:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		// --------------------- sampler
		uint8_t pos_divide=15;
 800272c:	230f      	movs	r3, #15
 800272e:	f887 31ba 	strb.w	r3, [r7, #442]	; 0x1ba
		if (sampler.repeat) pos_divide=15>>sampler.repeat;
 8002732:	4b3b      	ldr	r3, [pc, #236]	; (8002820 <sampling+0x950>)
 8002734:	7a1b      	ldrb	r3, [r3, #8]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d006      	beq.n	8002748 <sampling+0x878>
 800273a:	4b39      	ldr	r3, [pc, #228]	; (8002820 <sampling+0x950>)
 800273c:	7a1b      	ldrb	r3, [r3, #8]
 800273e:	461a      	mov	r2, r3
 8002740:	230f      	movs	r3, #15
 8002742:	4113      	asrs	r3, r2
 8002744:	f887 31ba 	strb.w	r3, [r7, #442]	; 0x1ba

		if (sampler.trigger_1==((seq.pos&pos_divide)+1))  sampler.trigger_position=1;
 8002748:	4b35      	ldr	r3, [pc, #212]	; (8002820 <sampling+0x950>)
 800274a:	791b      	ldrb	r3, [r3, #4]
 800274c:	4619      	mov	r1, r3
 800274e:	4b2a      	ldr	r3, [pc, #168]	; (80027f8 <sampling+0x928>)
 8002750:	781a      	ldrb	r2, [r3, #0]
 8002752:	f897 31ba 	ldrb.w	r3, [r7, #442]	; 0x1ba
 8002756:	4013      	ands	r3, r2
 8002758:	b2db      	uxtb	r3, r3
 800275a:	3301      	adds	r3, #1
 800275c:	4299      	cmp	r1, r3
 800275e:	d102      	bne.n	8002766 <sampling+0x896>
 8002760:	4b2f      	ldr	r3, [pc, #188]	; (8002820 <sampling+0x950>)
 8002762:	2201      	movs	r2, #1
 8002764:	819a      	strh	r2, [r3, #12]
		if (sampler.trigger_2==((seq.pos&pos_divide)+1))  sampler.trigger_position=1;
 8002766:	4b2e      	ldr	r3, [pc, #184]	; (8002820 <sampling+0x950>)
 8002768:	795b      	ldrb	r3, [r3, #5]
 800276a:	4619      	mov	r1, r3
 800276c:	4b22      	ldr	r3, [pc, #136]	; (80027f8 <sampling+0x928>)
 800276e:	781a      	ldrb	r2, [r3, #0]
 8002770:	f897 31ba 	ldrb.w	r3, [r7, #442]	; 0x1ba
 8002774:	4013      	ands	r3, r2
 8002776:	b2db      	uxtb	r3, r3
 8002778:	3301      	adds	r3, #1
 800277a:	4299      	cmp	r1, r3
 800277c:	d102      	bne.n	8002784 <sampling+0x8b4>
 800277e:	4b28      	ldr	r3, [pc, #160]	; (8002820 <sampling+0x950>)
 8002780:	2201      	movs	r2, #1
 8002782:	819a      	strh	r2, [r3, #12]
		if (sampler.trigger_3==((seq.pos&pos_divide)+1))  sampler.trigger_position=1;
 8002784:	4b26      	ldr	r3, [pc, #152]	; (8002820 <sampling+0x950>)
 8002786:	799b      	ldrb	r3, [r3, #6]
 8002788:	4619      	mov	r1, r3
 800278a:	4b1b      	ldr	r3, [pc, #108]	; (80027f8 <sampling+0x928>)
 800278c:	781a      	ldrb	r2, [r3, #0]
 800278e:	f897 31ba 	ldrb.w	r3, [r7, #442]	; 0x1ba
 8002792:	4013      	ands	r3, r2
 8002794:	b2db      	uxtb	r3, r3
 8002796:	3301      	adds	r3, #1
 8002798:	4299      	cmp	r1, r3
 800279a:	d102      	bne.n	80027a2 <sampling+0x8d2>
 800279c:	4b20      	ldr	r3, [pc, #128]	; (8002820 <sampling+0x950>)
 800279e:	2201      	movs	r2, #1
 80027a0:	819a      	strh	r2, [r3, #12]
		if (sampler.trigger_4==((seq.pos&pos_divide)+1))  sampler.trigger_position=1;
 80027a2:	4b1f      	ldr	r3, [pc, #124]	; (8002820 <sampling+0x950>)
 80027a4:	79db      	ldrb	r3, [r3, #7]
 80027a6:	4619      	mov	r1, r3
 80027a8:	4b13      	ldr	r3, [pc, #76]	; (80027f8 <sampling+0x928>)
 80027aa:	781a      	ldrb	r2, [r3, #0]
 80027ac:	f897 31ba 	ldrb.w	r3, [r7, #442]	; 0x1ba
 80027b0:	4013      	ands	r3, r2
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	3301      	adds	r3, #1
 80027b6:	4299      	cmp	r1, r3
 80027b8:	d102      	bne.n	80027c0 <sampling+0x8f0>
 80027ba:	4b19      	ldr	r3, [pc, #100]	; (8002820 <sampling+0x950>)
 80027bc:	2201      	movs	r2, #1
 80027be:	819a      	strh	r2, [r3, #12]
		if(sampler.trigger_position) note[3].position=1;
 80027c0:	4b17      	ldr	r3, [pc, #92]	; (8002820 <sampling+0x950>)
 80027c2:	899b      	ldrh	r3, [r3, #12]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <sampling+0x900>
 80027c8:	4b13      	ldr	r3, [pc, #76]	; (8002818 <sampling+0x948>)
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

		patch_target_replace();
 80027d0:	f7fe fec0 	bl	8001554 <patch_target_replace>
		uint8_t detune_temp=0;
 80027d4:	2300      	movs	r3, #0
 80027d6:	f887 31b9 	strb.w	r3, [r7, #441]	; 0x1b9
//		if(detune_temp>27) detune_temp=27;
		   //this is for sine skip mask

//	note[3].tuned=sine_lut[MajorNote[detune_temp]];	//sets freq ,1.0594  * 16536 =17518  ,
//	note[3].tuned= (note[3].tuned*1200)>>10;  // modify different sample size , just need single cycle length and thats it
		mask_result =0;
 80027da:	4b12      	ldr	r3, [pc, #72]	; (8002824 <sampling+0x954>)
 80027dc:	2200      	movs	r2, #0
 80027de:	801a      	strh	r2, [r3, #0]
		uint8_t note_number;
		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 80027e0:	2300      	movs	r3, #0
 80027e2:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
 80027e6:	e0c4      	b.n	8002972 <sampling+0xaa2>
 80027e8:	20009842 	.word	0x20009842
 80027ec:	20009840 	.word	0x20009840
 80027f0:	2000ebe8 	.word	0x2000ebe8
 80027f4:	2000ebe9 	.word	0x2000ebe9
 80027f8:	2000dc7c 	.word	0x2000dc7c
 80027fc:	200095d8 	.word	0x200095d8
 8002800:	200093d8 	.word	0x200093d8
 8002804:	2000c080 	.word	0x2000c080
 8002808:	2000c054 	.word	0x2000c054
 800280c:	20009838 	.word	0x20009838
 8002810:	20010e15 	.word	0x20010e15
 8002814:	200120a4 	.word	0x200120a4
 8002818:	20008e08 	.word	0x20008e08
 800281c:	20010bf0 	.word	0x20010bf0
 8002820:	20008eb4 	.word	0x20008eb4
 8002824:	2000a850 	.word	0x2000a850
   // note[0].tuned=7181;
  //  detune_temp=(note[mask_i].pitch+(note[mask_i].detune))&31    ;
	//	if(detune_temp>27) detune_temp=27;


		    detune_temp=note[mask_i].pitch+note[mask_i].detune;
 8002828:	f897 21bf 	ldrb.w	r2, [r7, #447]	; 0x1bf
 800282c:	492f      	ldr	r1, [pc, #188]	; (80028ec <sampling+0xa1c>)
 800282e:	4613      	mov	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	1a9b      	subs	r3, r3, r2
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	440b      	add	r3, r1
 8002838:	3302      	adds	r3, #2
 800283a:	7819      	ldrb	r1, [r3, #0]
 800283c:	f897 21bf 	ldrb.w	r2, [r7, #447]	; 0x1bf
 8002840:	482a      	ldr	r0, [pc, #168]	; (80028ec <sampling+0xa1c>)
 8002842:	4613      	mov	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	1a9b      	subs	r3, r3, r2
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	4403      	add	r3, r0
 800284c:	3308      	adds	r3, #8
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	440b      	add	r3, r1
 8002852:	f887 31b9 	strb.w	r3, [r7, #441]	; 0x1b9

	//if	   (detune_temp>=30) detune_temp=30;
	//note[mask_i].tuned=(sample_Noteadd[MajorNote[detune_temp]]);   // put unit tune here

		        if (detune_temp>pitch_limit ) detune_temp=pitch_limit;
 8002856:	f897 31b9 	ldrb.w	r3, [r7, #441]	; 0x1b9
 800285a:	2b3c      	cmp	r3, #60	; 0x3c
 800285c:	d902      	bls.n	8002864 <sampling+0x994>
 800285e:	233c      	movs	r3, #60	; 0x3c
 8002860:	f887 31b9 	strb.w	r3, [r7, #441]	; 0x1b9
		    if (detune_temp>30 )   note_number=MinorNote[detune_temp-31];    // for now
 8002864:	f897 31b9 	ldrb.w	r3, [r7, #441]	; 0x1b9
 8002868:	2b1e      	cmp	r3, #30
 800286a:	d907      	bls.n	800287c <sampling+0x9ac>
 800286c:	f897 31b9 	ldrb.w	r3, [r7, #441]	; 0x1b9
 8002870:	3b1f      	subs	r3, #31
 8002872:	4a1f      	ldr	r2, [pc, #124]	; (80028f0 <sampling+0xa20>)
 8002874:	5cd3      	ldrb	r3, [r2, r3]
 8002876:	f887 31b8 	strb.w	r3, [r7, #440]	; 0x1b8
 800287a:	e005      	b.n	8002888 <sampling+0x9b8>
	else note_number=MajorNote[detune_temp];
 800287c:	f897 31b9 	ldrb.w	r3, [r7, #441]	; 0x1b9
 8002880:	4a1c      	ldr	r2, [pc, #112]	; (80028f4 <sampling+0xa24>)
 8002882:	5cd3      	ldrb	r3, [r2, r3]
 8002884:	f887 31b8 	strb.w	r3, [r7, #440]	; 0x1b8
		    note[mask_i].tuned=sample_Noteadd[note_number];
 8002888:	f897 31b8 	ldrb.w	r3, [r7, #440]	; 0x1b8
 800288c:	f897 21bf 	ldrb.w	r2, [r7, #447]	; 0x1bf
 8002890:	4919      	ldr	r1, [pc, #100]	; (80028f8 <sampling+0xa28>)
 8002892:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8002896:	4915      	ldr	r1, [pc, #84]	; (80028ec <sampling+0xa1c>)
 8002898:	4613      	mov	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	1a9b      	subs	r3, r3, r2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	440b      	add	r3, r1
 80028a2:	330c      	adds	r3, #12
 80028a4:	4602      	mov	r2, r0
 80028a6:	801a      	strh	r2, [r3, #0]
	if ((note[mask_i].velocity)&&(note[mask_i].osc))	    LCD_Info[15+mask_i]=major_notes[note_number]; else LCD_Info[15+mask_i]=95;
 80028a8:	f897 21bf 	ldrb.w	r2, [r7, #447]	; 0x1bf
 80028ac:	490f      	ldr	r1, [pc, #60]	; (80028ec <sampling+0xa1c>)
 80028ae:	4613      	mov	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	1a9b      	subs	r3, r3, r2
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	440b      	add	r3, r1
 80028b8:	3307      	adds	r3, #7
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d021      	beq.n	8002904 <sampling+0xa34>
 80028c0:	f897 21bf 	ldrb.w	r2, [r7, #447]	; 0x1bf
 80028c4:	4909      	ldr	r1, [pc, #36]	; (80028ec <sampling+0xa1c>)
 80028c6:	4613      	mov	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	1a9b      	subs	r3, r3, r2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	440b      	add	r3, r1
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d016      	beq.n	8002904 <sampling+0xa34>
 80028d6:	f897 21b8 	ldrb.w	r2, [r7, #440]	; 0x1b8
 80028da:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
 80028de:	330f      	adds	r3, #15
 80028e0:	4906      	ldr	r1, [pc, #24]	; (80028fc <sampling+0xa2c>)
 80028e2:	5c89      	ldrb	r1, [r1, r2]
 80028e4:	4a06      	ldr	r2, [pc, #24]	; (8002900 <sampling+0xa30>)
 80028e6:	54d1      	strb	r1, [r2, r3]
 80028e8:	e012      	b.n	8002910 <sampling+0xa40>
 80028ea:	bf00      	nop
 80028ec:	20008e08 	.word	0x20008e08
 80028f0:	0800e488 	.word	0x0800e488
 80028f4:	0800e468 	.word	0x0800e468
 80028f8:	0800e4a8 	.word	0x0800e4a8
 80028fc:	0800e428 	.word	0x0800e428
 8002900:	2001202c 	.word	0x2001202c
 8002904:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
 8002908:	330f      	adds	r3, #15
 800290a:	4a9f      	ldr	r2, [pc, #636]	; (8002b88 <sampling+0xcb8>)
 800290c:	215f      	movs	r1, #95	; 0x5f
 800290e:	54d1      	strb	r1, [r2, r3]
	//note[mask_i].tuned=sample_Noteadd[MajorNote[detune_temp]];   // put unit tune here

		float tune_temp=note[mask_i].tuned;
 8002910:	f897 21bf 	ldrb.w	r2, [r7, #447]	; 0x1bf
 8002914:	499d      	ldr	r1, [pc, #628]	; (8002b8c <sampling+0xcbc>)
 8002916:	4613      	mov	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	1a9b      	subs	r3, r3, r2
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	440b      	add	r3, r1
 8002920:	330c      	adds	r3, #12
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	ee07 3a90 	vmov	s15, r3
 8002928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800292c:	edc7 7a5a 	vstr	s15, [r7, #360]	; 0x168
		note[mask_i].tuned=tune_temp*0.99;	// this works
 8002930:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 8002934:	f7fd fee6 	bl	8000704 <__aeabi_f2d>
 8002938:	a391      	add	r3, pc, #580	; (adr r3, 8002b80 <sampling+0xcb0>)
 800293a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293e:	f7fd fc53 	bl	80001e8 <__aeabi_dmul>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	f897 41bf 	ldrb.w	r4, [r7, #447]	; 0x1bf
 800294a:	4610      	mov	r0, r2
 800294c:	4619      	mov	r1, r3
 800294e:	f7fd ff31 	bl	80007b4 <__aeabi_d2uiz>
 8002952:	4603      	mov	r3, r0
 8002954:	b299      	uxth	r1, r3
 8002956:	4a8d      	ldr	r2, [pc, #564]	; (8002b8c <sampling+0xcbc>)
 8002958:	4623      	mov	r3, r4
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	1b1b      	subs	r3, r3, r4
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	4413      	add	r3, r2
 8002962:	330c      	adds	r3, #12
 8002964:	460a      	mov	r2, r1
 8002966:	801a      	strh	r2, [r3, #0]
		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8002968:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
 800296c:	3301      	adds	r3, #1
 800296e:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
 8002972:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
 8002976:	2b04      	cmp	r3, #4
 8002978:	f67f af56 	bls.w	8002828 <sampling+0x958>
		//note_tuned[3]=2751;
	} // end of note calcualte



	if ((i&63)==0)
 800297c:	4b84      	ldr	r3, [pc, #528]	; (8002b90 <sampling+0xcc0>)
 800297e:	881b      	ldrh	r3, [r3, #0]
 8002980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002984:	2b00      	cmp	r3, #0
 8002986:	d103      	bne.n	8002990 <sampling+0xac0>
	{
	    LFO_square_one_pulse();
 8002988:	f000 fe5e 	bl	8003648 <LFO_square_one_pulse>

		LFO_source_synced();
 800298c:	f000 ff00 	bl	8003790 <LFO_source_synced>
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002990:	4b7f      	ldr	r3, [pc, #508]	; (8002b90 <sampling+0xcc0>)
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	3301      	adds	r3, #1
 8002996:	b29a      	uxth	r2, r3
 8002998:	4b7d      	ldr	r3, [pc, #500]	; (8002b90 <sampling+0xcc0>)
 800299a:	801a      	strh	r2, [r3, #0]
 800299c:	4b7c      	ldr	r3, [pc, #496]	; (8002b90 <sampling+0xcc0>)
 800299e:	881b      	ldrh	r3, [r3, #0]
 80029a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029a4:	f4ff add8 	bcc.w	8002558 <sampling+0x688>
int32_t  sample_temp3;
int32_t  sample_temp4;
int32_t  sample_temp5;


memcpy(&sample_counts_temp,sample_counts_holder,80);
 80029a8:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80029ac:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80029b0:	4a78      	ldr	r2, [pc, #480]	; (8002b94 <sampling+0xcc4>)
 80029b2:	4618      	mov	r0, r3
 80029b4:	4611      	mov	r1, r2
 80029b6:	2350      	movs	r3, #80	; 0x50
 80029b8:	461a      	mov	r2, r3
 80029ba:	f00a f823 	bl	800ca04 <memcpy>

sample_counts_temp[30]=note[0].tuned;
 80029be:	4b73      	ldr	r3, [pc, #460]	; (8002b8c <sampling+0xcbc>)
 80029c0:	899a      	ldrh	r2, [r3, #12]
 80029c2:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80029c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80029ca:	879a      	strh	r2, [r3, #60]	; 0x3c
sample_counts_temp[31]=note[1].tuned;
 80029cc:	4b6f      	ldr	r3, [pc, #444]	; (8002b8c <sampling+0xcbc>)
 80029ce:	8b5a      	ldrh	r2, [r3, #26]
 80029d0:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80029d4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80029d8:	87da      	strh	r2, [r3, #62]	; 0x3e
sample_counts_temp[32]=note[2].tuned;
 80029da:	4b6c      	ldr	r3, [pc, #432]	; (8002b8c <sampling+0xcbc>)
 80029dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80029de:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80029e2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80029e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
sample_counts_temp[33]=note[3].tuned;
 80029ea:	4b68      	ldr	r3, [pc, #416]	; (8002b8c <sampling+0xcbc>)
 80029ec:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 80029ee:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80029f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80029f6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42


uint32_t*  sine_ptr_temp[5];
	sampler.start=(sampler.start_MSB<<8)+sampler.start_LSB;
 80029fa:	4b67      	ldr	r3, [pc, #412]	; (8002b98 <sampling+0xcc8>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	021b      	lsls	r3, r3, #8
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	4b64      	ldr	r3, [pc, #400]	; (8002b98 <sampling+0xcc8>)
 8002a06:	785b      	ldrb	r3, [r3, #1]
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	4b62      	ldr	r3, [pc, #392]	; (8002b98 <sampling+0xcc8>)
 8002a10:	825a      	strh	r2, [r3, #18]
	sampler.end=(sampler.end_MSB<<8)+sampler.end_LSB;
 8002a12:	4b61      	ldr	r3, [pc, #388]	; (8002b98 <sampling+0xcc8>)
 8002a14:	789b      	ldrb	r3, [r3, #2]
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	021b      	lsls	r3, r3, #8
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	4b5e      	ldr	r3, [pc, #376]	; (8002b98 <sampling+0xcc8>)
 8002a1e:	78db      	ldrb	r3, [r3, #3]
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	4413      	add	r3, r2
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	4b5c      	ldr	r3, [pc, #368]	; (8002b98 <sampling+0xcc8>)
 8002a28:	829a      	strh	r2, [r3, #20]
	if ((sampler.one_shot&2) && (sine_counter[7]>(sampler.end-1000))&& (note[1].osc==3))     {note[0].position=0; sine_counter[7] =0;}
	if ((sampler.one_shot&4) && (sine_counter[11]>(sampler.end-1000))&& (note[2].osc==3))     {note[0].position=0; sine_counter[8] =0;}
	if ((sampler.one_shot&8) && (sine_counter[14]>(sampler.end-1000))&& (note[3].osc==3))  {note[0].position=0; sine_counter[9] =0;}
*/

	sine_ptr_temp[0]=&sine_counter[3];
 8002a2a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002a2e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002a32:	4a5a      	ldr	r2, [pc, #360]	; (8002b9c <sampling+0xccc>)
 8002a34:	601a      	str	r2, [r3, #0]
	sine_ptr_temp[1]=&sine_counter[6];
 8002a36:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002a3a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002a3e:	4a58      	ldr	r2, [pc, #352]	; (8002ba0 <sampling+0xcd0>)
 8002a40:	605a      	str	r2, [r3, #4]
	sine_ptr_temp[2]=&sine_counter[9];
 8002a42:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002a46:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002a4a:	4a56      	ldr	r2, [pc, #344]	; (8002ba4 <sampling+0xcd4>)
 8002a4c:	609a      	str	r2, [r3, #8]
	sine_ptr_temp[3]=&sine_counter[12];
 8002a4e:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002a52:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002a56:	4a54      	ldr	r2, [pc, #336]	; (8002ba8 <sampling+0xcd8>)
 8002a58:	60da      	str	r2, [r3, #12]


	if(sampler.start_MSB>sampler.end_MSB) sampler.start_MSB=0; //flip to 0  for now
 8002a5a:	4b4f      	ldr	r3, [pc, #316]	; (8002b98 <sampling+0xcc8>)
 8002a5c:	781a      	ldrb	r2, [r3, #0]
 8002a5e:	4b4e      	ldr	r3, [pc, #312]	; (8002b98 <sampling+0xcc8>)
 8002a60:	789b      	ldrb	r3, [r3, #2]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d902      	bls.n	8002a6c <sampling+0xb9c>
 8002a66:	4b4c      	ldr	r3, [pc, #304]	; (8002b98 <sampling+0xcc8>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
	if (sampler.ram_seq<sampler.start)      sampler.ram_seq=sampler.start;
 8002a6c:	4b4a      	ldr	r3, [pc, #296]	; (8002b98 <sampling+0xcc8>)
 8002a6e:	8c1a      	ldrh	r2, [r3, #32]
 8002a70:	4b49      	ldr	r3, [pc, #292]	; (8002b98 <sampling+0xcc8>)
 8002a72:	8a5b      	ldrh	r3, [r3, #18]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d203      	bcs.n	8002a80 <sampling+0xbb0>
 8002a78:	4b47      	ldr	r3, [pc, #284]	; (8002b98 <sampling+0xcc8>)
 8002a7a:	8a5a      	ldrh	r2, [r3, #18]
 8002a7c:	4b46      	ldr	r3, [pc, #280]	; (8002b98 <sampling+0xcc8>)
 8002a7e:	841a      	strh	r2, [r3, #32]
	if ((sampler.ram_seq+256)>sampler.end) sampler.ram_seq=sampler.start;     // just for playback counter
 8002a80:	4b45      	ldr	r3, [pc, #276]	; (8002b98 <sampling+0xcc8>)
 8002a82:	8c1b      	ldrh	r3, [r3, #32]
 8002a84:	33ff      	adds	r3, #255	; 0xff
 8002a86:	4a44      	ldr	r2, [pc, #272]	; (8002b98 <sampling+0xcc8>)
 8002a88:	8a92      	ldrh	r2, [r2, #20]
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	db03      	blt.n	8002a96 <sampling+0xbc6>
 8002a8e:	4b42      	ldr	r3, [pc, #264]	; (8002b98 <sampling+0xcc8>)
 8002a90:	8a5a      	ldrh	r2, [r3, #18]
 8002a92:	4b41      	ldr	r3, [pc, #260]	; (8002b98 <sampling+0xcc8>)
 8002a94:	841a      	strh	r2, [r3, #32]

	sampler.length=sampler.end-sampler.start;
 8002a96:	4b40      	ldr	r3, [pc, #256]	; (8002b98 <sampling+0xcc8>)
 8002a98:	8a9a      	ldrh	r2, [r3, #20]
 8002a9a:	4b3f      	ldr	r3, [pc, #252]	; (8002b98 <sampling+0xcc8>)
 8002a9c:	8a5b      	ldrh	r3, [r3, #18]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	4b3d      	ldr	r3, [pc, #244]	; (8002b98 <sampling+0xcc8>)
 8002aa4:	82da      	strh	r2, [r3, #22]

	if(sampler.trigger_position ) { sampler.ram_seq=sampler.start; }   // starts her not perfect , figure out better
 8002aa6:	4b3c      	ldr	r3, [pc, #240]	; (8002b98 <sampling+0xcc8>)
 8002aa8:	899b      	ldrh	r3, [r3, #12]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <sampling+0xbe6>
 8002aae:	4b3a      	ldr	r3, [pc, #232]	; (8002b98 <sampling+0xcc8>)
 8002ab0:	8a5a      	ldrh	r2, [r3, #18]
 8002ab2:	4b39      	ldr	r3, [pc, #228]	; (8002b98 <sampling+0xcc8>)
 8002ab4:	841a      	strh	r2, [r3, #32]

	//if(sine_counter[9]<=sampler.start) sine_counter[9]=sampler.start;


	//if (sine_counter[9]>((sampler.length+sampler.start+sampler_offset)-256))   {sine_counter[9]=sampler.start+sampler_offset; note[3].position=0;}// jump to start , turn off
	if (sampler.ram_seq>((sampler.length+sampler.start)-512))   {sampler.ram_seq=sampler.start; note[3].position=0;} // one shot
 8002ab6:	4b38      	ldr	r3, [pc, #224]	; (8002b98 <sampling+0xcc8>)
 8002ab8:	8adb      	ldrh	r3, [r3, #22]
 8002aba:	461a      	mov	r2, r3
 8002abc:	4b36      	ldr	r3, [pc, #216]	; (8002b98 <sampling+0xcc8>)
 8002abe:	8a5b      	ldrh	r3, [r3, #18]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f2a3 13ff 	subw	r3, r3, #511	; 0x1ff
 8002ac6:	4a34      	ldr	r2, [pc, #208]	; (8002b98 <sampling+0xcc8>)
 8002ac8:	8c12      	ldrh	r2, [r2, #32]
 8002aca:	4293      	cmp	r3, r2
 8002acc:	dc07      	bgt.n	8002ade <sampling+0xc0e>
 8002ace:	4b32      	ldr	r3, [pc, #200]	; (8002b98 <sampling+0xcc8>)
 8002ad0:	8a5a      	ldrh	r2, [r3, #18]
 8002ad2:	4b31      	ldr	r3, [pc, #196]	; (8002b98 <sampling+0xcc8>)
 8002ad4:	841a      	strh	r2, [r3, #32]
 8002ad6:	4b2d      	ldr	r3, [pc, #180]	; (8002b8c <sampling+0xcbc>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e



//tuned_list[0]=6397;
uint16_t accu_count[4];
memcpy(&accu_count,sample_accu_counter,8);  // copy counters
 8002ade:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002ae2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002ae6:	4a31      	ldr	r2, [pc, #196]	; (8002bac <sampling+0xcdc>)
 8002ae8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002aec:	e883 0003 	stmia.w	r3, {r0, r1}

memcpy(&sample_accus,sample_accus_hold,16);    // this is good
 8002af0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002af4:	2210      	movs	r2, #16
 8002af6:	492e      	ldr	r1, [pc, #184]	; (8002bb0 <sampling+0xce0>)
 8002af8:	4618      	mov	r0, r3
 8002afa:	f009 ff83 	bl	800ca04 <memcpy>


uint8_t*  sample_block_ptr=&flash_read_block ;    // temporary only
 8002afe:	4b2d      	ldr	r3, [pc, #180]	; (8002bb4 <sampling+0xce4>)
 8002b00:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // when readin low till the end
*/



	if(counter_16>64) counter_16=0;
 8002b04:	4b2c      	ldr	r3, [pc, #176]	; (8002bb8 <sampling+0xce8>)
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	2b40      	cmp	r3, #64	; 0x40
 8002b0a:	d902      	bls.n	8002b12 <sampling+0xc42>
 8002b0c:	4b2a      	ldr	r3, [pc, #168]	; (8002bb8 <sampling+0xce8>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	801a      	strh	r2, [r3, #0]

	  uint32_t sample_flash_address=(254<<16)+((128+counter_16) <<8);  // change this soemthing mroe friendly , also keep last 64k for menus ,wavs maybe just before as well
 8002b12:	4b29      	ldr	r3, [pc, #164]	; (8002bb8 <sampling+0xce8>)
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	3380      	adds	r3, #128	; 0x80
 8002b18:	021b      	lsls	r3, r3, #8
 8002b1a:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8002b1e:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198


	 sample_flash_address=((sampler.sample_select*127)<<8)+(sampler.ram_seq*2);  //let see , limited now with a 1k byte delay
 8002b22:	4b1d      	ldr	r3, [pc, #116]	; (8002b98 <sampling+0xcc8>)
 8002b24:	7a9b      	ldrb	r3, [r3, #10]
 8002b26:	461a      	mov	r2, r3
 8002b28:	4613      	mov	r3, r2
 8002b2a:	01db      	lsls	r3, r3, #7
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	021a      	lsls	r2, r3, #8
 8002b30:	4b19      	ldr	r3, [pc, #100]	; (8002b98 <sampling+0xcc8>)
 8002b32:	8c1b      	ldrh	r3, [r3, #32]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	4413      	add	r3, r2
 8002b38:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198

	  sampler_1k_load(sample_flash_address);
 8002b3c:	f8d7 0198 	ldr.w	r0, [r7, #408]	; 0x198
 8002b40:	f001 fff4 	bl	8004b2c <sampler_1k_load>
	//if((sampler.ram_seq&255)==0)	  sampler_1k_load(sample_flash_address);

	counter_16=counter_16+2;   // jump 512 bytes
 8002b44:	4b1c      	ldr	r3, [pc, #112]	; (8002bb8 <sampling+0xce8>)
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	3302      	adds	r3, #2
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	4b1a      	ldr	r3, [pc, #104]	; (8002bb8 <sampling+0xce8>)
 8002b4e:	801a      	strh	r2, [r3, #0]
if (sampler.ram_seq>14000) memcpy(&error_data,flash_read_block2,127);
 8002b50:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <sampling+0xcc8>)
 8002b52:	8c1b      	ldrh	r3, [r3, #32]
 8002b54:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d904      	bls.n	8002b66 <sampling+0xc96>
 8002b5c:	227f      	movs	r2, #127	; 0x7f
 8002b5e:	4917      	ldr	r1, [pc, #92]	; (8002bbc <sampling+0xcec>)
 8002b60:	4817      	ldr	r0, [pc, #92]	; (8002bc0 <sampling+0xcf0>)
 8002b62:	f009 ff4f 	bl	800ca04 <memcpy>
	uint16_t*   ram_ptr=  &RAM	;  // pointer goes to LSB !!!!
 8002b66:	4b17      	ldr	r3, [pc, #92]	; (8002bc4 <sampling+0xcf4>)
 8002b68:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	uint16_t* sample_ptr= &flash_read_block;
 8002b6c:	4b11      	ldr	r3, [pc, #68]	; (8002bb4 <sampling+0xce4>)
 8002b6e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190


//	if ((sampler.ram_seq&255)==0)  ram_ptr=  &flash_read_block[128];

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002b72:	4b07      	ldr	r3, [pc, #28]	; (8002b90 <sampling+0xcc0>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	801a      	strh	r2, [r3, #0]
 8002b78:	e251      	b.n	800301e <sampling+0x114e>
 8002b7a:	bf00      	nop
 8002b7c:	f3af 8000 	nop.w
 8002b80:	7ae147ae 	.word	0x7ae147ae
 8002b84:	3fefae14 	.word	0x3fefae14
 8002b88:	2001202c 	.word	0x2001202c
 8002b8c:	20008e08 	.word	0x20008e08
 8002b90:	20009842 	.word	0x20009842
 8002b94:	20009374 	.word	0x20009374
 8002b98:	20008eb4 	.word	0x20008eb4
 8002b9c:	200097e4 	.word	0x200097e4
 8002ba0:	200097f0 	.word	0x200097f0
 8002ba4:	200097fc 	.word	0x200097fc
 8002ba8:	20009808 	.word	0x20009808
 8002bac:	200093c4 	.word	0x200093c4
 8002bb0:	2000c058 	.word	0x2000c058
 8002bb4:	200120ac 	.word	0x200120ac
 8002bb8:	200126c8 	.word	0x200126c8
 8002bbc:	200122c0 	.word	0x200122c0
 8002bc0:	200126d0 	.word	0x200126d0
 8002bc4:	200001a4 	.word	0x200001a4
	i_total=i+sample_pointB;
 8002bc8:	4bbd      	ldr	r3, [pc, #756]	; (8002ec0 <sampling+0xff0>)
 8002bca:	881a      	ldrh	r2, [r3, #0]
 8002bcc:	4bbd      	ldr	r3, [pc, #756]	; (8002ec4 <sampling+0xff4>)
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
	sampling_position=(i>>6);
 8002bd6:	4bba      	ldr	r3, [pc, #744]	; (8002ec0 <sampling+0xff0>)
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	099b      	lsrs	r3, r3, #6
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	4bb9      	ldr	r3, [pc, #740]	; (8002ec8 <sampling+0xff8>)
 8002be2:	701a      	strb	r2, [r3, #0]


	sample_adc=input_holder[i>>1];
 8002be4:	4bb6      	ldr	r3, [pc, #728]	; (8002ec0 <sampling+0xff0>)
 8002be6:	881b      	ldrh	r3, [r3, #0]
 8002be8:	085b      	lsrs	r3, r3, #1
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	461a      	mov	r2, r3
 8002bee:	4bb7      	ldr	r3, [pc, #732]	; (8002ecc <sampling+0xffc>)
 8002bf0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002bf4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	sample_adc=(sample_adc-2040)<<11;
 8002bf8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002bfc:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 8002c00:	02db      	lsls	r3, r3, #11
 8002c02:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	   ram_temp=*(ram_ptr+(sampler.ram_seq));    // works
 8002c06:	4bb2      	ldr	r3, [pc, #712]	; (8002ed0 <sampling+0x1000>)
 8002c08:	8c1b      	ldrh	r3, [r3, #32]
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002c10:	4413      	add	r3, r2
 8002c12:	881b      	ldrh	r3, [r3, #0]
 8002c14:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

	    debug_value=ram_temp;
 8002c18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c1c:	ee07 3a90 	vmov	s15, r3
 8002c20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c24:	4bab      	ldr	r3, [pc, #684]	; (8002ed4 <sampling+0x1004>)
 8002c26:	edc3 7a00 	vstr	s15, [r3]
	ram_temp=(ram_temp-32767)<<4;
 8002c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c2e:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8002c32:	3b7f      	subs	r3, #127	; 0x7f
 8002c34:	011b      	lsls	r3, r3, #4
 8002c36:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc


	sample_input=*(sample_ptr+(sampler.ram_seq&255));
 8002c3a:	4ba5      	ldr	r3, [pc, #660]	; (8002ed0 <sampling+0x1000>)
 8002c3c:	8c1b      	ldrh	r3, [r3, #32]
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8002c46:	4413      	add	r3, r2
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	sample_input=(sample_input-32767)<<4;
 8002c4e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002c52:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8002c56:	3b7f      	subs	r3, #127	; 0x7f
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

	if	((i&1)==1)  sampler.ram_seq=sampler.ram_seq+1;  // half speed
 8002c5e:	4b98      	ldr	r3, [pc, #608]	; (8002ec0 <sampling+0xff0>)
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d005      	beq.n	8002c76 <sampling+0xda6>
 8002c6a:	4b99      	ldr	r3, [pc, #612]	; (8002ed0 <sampling+0x1000>)
 8002c6c:	8c1b      	ldrh	r3, [r3, #32]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	4b97      	ldr	r3, [pc, #604]	; (8002ed0 <sampling+0x1000>)
 8002c74:	841a      	strh	r2, [r3, #32]



	if (i==seqpos_i) {sample_counts_temp[20]=sample_counts_temp[30]; 		//delay tuned changed till correct time
 8002c76:	4b92      	ldr	r3, [pc, #584]	; (8002ec0 <sampling+0xff0>)
 8002c78:	881a      	ldrh	r2, [r3, #0]
 8002c7a:	4b97      	ldr	r3, [pc, #604]	; (8002ed8 <sampling+0x1008>)
 8002c7c:	881b      	ldrh	r3, [r3, #0]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d129      	bne.n	8002cd6 <sampling+0xe06>
 8002c82:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002c86:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c8a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8002c8c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002c90:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c94:	851a      	strh	r2, [r3, #40]	; 0x28
	sample_counts_temp[21]=sample_counts_temp[31];
 8002c96:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002c9a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c9e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002ca0:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002ca4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ca8:	855a      	strh	r2, [r3, #42]	; 0x2a
	sample_counts_temp[22]=sample_counts_temp[32];
 8002caa:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002cae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002cb2:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002cb6:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002cba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002cbe:	859a      	strh	r2, [r3, #44]	; 0x2c
	sample_counts_temp[23]=sample_counts_temp[33];
 8002cc0:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002cc4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002cc8:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8002ccc:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002cd0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002cd4:	85da      	strh	r2, [r3, #46]	; 0x2e
	}

	if ((i&63)==0)	{
 8002cd6:	4b7a      	ldr	r3, [pc, #488]	; (8002ec0 <sampling+0xff0>)
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f040 8095 	bne.w	8002e0e <sampling+0xf3e>
	  //  LFO_source_new(); // calculate lfo maybe 8 times for now
	    patch_target_replace();    // update values , not too bad
 8002ce4:	f7fe fc36 	bl	8001554 <patch_target_replace>
float freq_temp=arm_sin_f32(filter[0].cutoff_1*0.006159)    ;   // need this for useful filter
 8002ce8:	4b7c      	ldr	r3, [pc, #496]	; (8002edc <sampling+0x100c>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7fd fcf7 	bl	80006e0 <__aeabi_i2d>
 8002cf2:	a36f      	add	r3, pc, #444	; (adr r3, 8002eb0 <sampling+0xfe0>)
 8002cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf8:	f7fd fa76 	bl	80001e8 <__aeabi_dmul>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4610      	mov	r0, r2
 8002d02:	4619      	mov	r1, r3
 8002d04:	f7fd fd76 	bl	80007f4 <__aeabi_d2f>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	ee00 3a10 	vmov	s0, r3
 8002d0e:	f009 fe07 	bl	800c920 <arm_sin_f32>
 8002d12:	ed87 0a61 	vstr	s0, [r7, #388]	; 0x184
	freq_pointer[0] [sampling_position]=1-freq_temp; // problem was selecting accu instead of out , good now
 8002d16:	4b6c      	ldr	r3, [pc, #432]	; (8002ec8 <sampling+0xff8>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002d1e:	edd7 7a61 	vldr	s15, [r7, #388]	; 0x184
 8002d22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d26:	4a6e      	ldr	r2, [pc, #440]	; (8002ee0 <sampling+0x1010>)
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	edc3 7a00 	vstr	s15, [r3]
	 freq_temp=arm_sin_f32(filter[1].cutoff_1*0.006)    ;
 8002d30:	4b6a      	ldr	r3, [pc, #424]	; (8002edc <sampling+0x100c>)
 8002d32:	7a1b      	ldrb	r3, [r3, #8]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fd fcd3 	bl	80006e0 <__aeabi_i2d>
 8002d3a:	a35f      	add	r3, pc, #380	; (adr r3, 8002eb8 <sampling+0xfe8>)
 8002d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d40:	f7fd fa52 	bl	80001e8 <__aeabi_dmul>
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	4610      	mov	r0, r2
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	f7fd fd52 	bl	80007f4 <__aeabi_d2f>
 8002d50:	4603      	mov	r3, r0
 8002d52:	ee00 3a10 	vmov	s0, r3
 8002d56:	f009 fde3 	bl	800c920 <arm_sin_f32>
 8002d5a:	ed87 0a61 	vstr	s0, [r7, #388]	; 0x184
	freq_pointer[1] [sampling_position] =1-freq_temp ; // filter lfos
 8002d5e:	4b5a      	ldr	r3, [pc, #360]	; (8002ec8 <sampling+0xff8>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002d66:	edd7 7a61 	vldr	s15, [r7, #388]	; 0x184
 8002d6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d6e:	4a5c      	ldr	r2, [pc, #368]	; (8002ee0 <sampling+0x1010>)
 8002d70:	3309      	adds	r3, #9
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	edc3 7a00 	vstr	s15, [r3]
	freq_temp=arm_sin_f32(filter[2].cutoff_1*0.006)    ;
 8002d7a:	4b58      	ldr	r3, [pc, #352]	; (8002edc <sampling+0x100c>)
 8002d7c:	7c1b      	ldrb	r3, [r3, #16]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fd fcae 	bl	80006e0 <__aeabi_i2d>
 8002d84:	a34c      	add	r3, pc, #304	; (adr r3, 8002eb8 <sampling+0xfe8>)
 8002d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8a:	f7fd fa2d 	bl	80001e8 <__aeabi_dmul>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	4610      	mov	r0, r2
 8002d94:	4619      	mov	r1, r3
 8002d96:	f7fd fd2d 	bl	80007f4 <__aeabi_d2f>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	ee00 3a10 	vmov	s0, r3
 8002da0:	f009 fdbe 	bl	800c920 <arm_sin_f32>
 8002da4:	ed87 0a61 	vstr	s0, [r7, #388]	; 0x184
	freq_pointer[2] [sampling_position] =1-freq_temp ; // filter lfos
 8002da8:	4b47      	ldr	r3, [pc, #284]	; (8002ec8 <sampling+0xff8>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002db0:	edd7 7a61 	vldr	s15, [r7, #388]	; 0x184
 8002db4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002db8:	4a49      	ldr	r2, [pc, #292]	; (8002ee0 <sampling+0x1010>)
 8002dba:	3312      	adds	r3, #18
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	edc3 7a00 	vstr	s15, [r3]
	 freq_temp=arm_sin_f32(filter[3].cutoff_1*0.006)    ;
 8002dc4:	4b45      	ldr	r3, [pc, #276]	; (8002edc <sampling+0x100c>)
 8002dc6:	7e1b      	ldrb	r3, [r3, #24]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fd fc89 	bl	80006e0 <__aeabi_i2d>
 8002dce:	a33a      	add	r3, pc, #232	; (adr r3, 8002eb8 <sampling+0xfe8>)
 8002dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd4:	f7fd fa08 	bl	80001e8 <__aeabi_dmul>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4610      	mov	r0, r2
 8002dde:	4619      	mov	r1, r3
 8002de0:	f7fd fd08 	bl	80007f4 <__aeabi_d2f>
 8002de4:	4603      	mov	r3, r0
 8002de6:	ee00 3a10 	vmov	s0, r3
 8002dea:	f009 fd99 	bl	800c920 <arm_sin_f32>
 8002dee:	ed87 0a61 	vstr	s0, [r7, #388]	; 0x184
	freq_pointer[3] [sampling_position] =1-freq_temp ; // filter lfos
 8002df2:	4b35      	ldr	r3, [pc, #212]	; (8002ec8 <sampling+0xff8>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002dfa:	edd7 7a61 	vldr	s15, [r7, #388]	; 0x184
 8002dfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e02:	4a37      	ldr	r2, [pc, #220]	; (8002ee0 <sampling+0x1010>)
 8002e04:	331b      	adds	r3, #27
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	edc3 7a00 	vstr	s15, [r3]

	}

		sample_accus[0] = sample_accus[0] + sample_counts_temp[20];  // normal adder full volume
 8002e0e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002e12:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 8002e16:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8002e1a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
		sample_accus[1] = sample_accus[1] + sample_counts_temp[21];
 8002e22:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002e26:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 8002e2a:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8002e2e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8002e30:	4413      	add	r3, r2
 8002e32:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
		sample_accus[2] = sample_accus[2] + sample_counts_temp[22]; // bouncing somewhere
 8002e36:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002e3a:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 8002e3e:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8002e42:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8002e44:	4413      	add	r3, r2
 8002e46:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
		sample_accus[3] = sample_accus[3] + sample_counts_temp[23];  // 6 cycles
 8002e4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e4e:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 8002e52:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8002e56:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8002e58:	4413      	add	r3, r2
 8002e5a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

			if (sample_accus[0]>524287) sample_accus[0] =-0-sample_accus[0] ; // faster >  than &  ,strange,  or is even worse
 8002e5e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002e62:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e66:	db04      	blt.n	8002e72 <sampling+0xfa2>
 8002e68:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002e6c:	425b      	negs	r3, r3
 8002e6e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
			if (sample_accus[1]>524287) sample_accus[1] =-0-sample_accus[1] ; // faster >  than &  ,strange
 8002e72:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002e76:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e7a:	db04      	blt.n	8002e86 <sampling+0xfb6>
 8002e7c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002e80:	425b      	negs	r3, r3
 8002e82:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
			if (sample_accus[2]>524287) sample_accus[2] =-0-sample_accus[2] ; //
 8002e86:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002e8a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e8e:	db04      	blt.n	8002e9a <sampling+0xfca>
 8002e90:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002e94:	425b      	negs	r3, r3
 8002e96:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
			if (sample_accus[3]>524287) sample_accus[3] =-0-sample_accus[3] ; //  6 cycles
 8002e9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e9e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ea2:	db1f      	blt.n	8002ee4 <sampling+0x1014>
 8002ea4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ea8:	425b      	negs	r3, r3
 8002eaa:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002eae:	e019      	b.n	8002ee4 <sampling+0x1014>
 8002eb0:	f9378ee3 	.word	0xf9378ee3
 8002eb4:	3f793a2d 	.word	0x3f793a2d
 8002eb8:	bc6a7efa 	.word	0xbc6a7efa
 8002ebc:	3f789374 	.word	0x3f789374
 8002ec0:	20009842 	.word	0x20009842
 8002ec4:	20009840 	.word	0x20009840
 8002ec8:	2000ebe8 	.word	0x2000ebe8
 8002ecc:	2000ca38 	.word	0x2000ca38
 8002ed0:	20008eb4 	.word	0x20008eb4
 8002ed4:	200120a8 	.word	0x200120a8
 8002ed8:	200120a4 	.word	0x200120a4
 8002edc:	20008e94 	.word	0x20008e94
 8002ee0:	2000c110 	.word	0x2000c110

			sample_Accu[0]=(abs(sample_accus[0])-262144)<<1;
 8002ee4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	bfb8      	it	lt
 8002eec:	425b      	neglt	r3, r3
 8002eee:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
			sample_Accu[1]=(abs(sample_accus[1])-262144)<<1;
 8002ef8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	bfb8      	it	lt
 8002f00:	425b      	neglt	r3, r3
 8002f02:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
			sample_Accu[2]=(abs(sample_accus[2])-262144)<<1;
 8002f0c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	bfb8      	it	lt
 8002f14:	425b      	neglt	r3, r3
 8002f16:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			sample_Accu[3]=(abs(sample_accus[3])-262144)<<1;
 8002f20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	bfb8      	it	lt
 8002f28:	425b      	neglt	r3, r3
 8002f2a:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

					sample_temp1=(*osc_pointers[0])*note[0].velocity;// needs cut a bit  maybe some diff vol settings
 8002f34:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002f38:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a4f      	ldr	r2, [pc, #316]	; (8003080 <sampling+0x11b0>)
 8002f42:	79d2      	ldrb	r2, [r2, #7]
 8002f44:	fb02 f303 	mul.w	r3, r2, r3
 8002f48:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
					sample_temp2=(sample_temp1)>>2;
 8002f4c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f50:	109b      	asrs	r3, r3, #2
 8002f52:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

					sample_temp1=(*osc_pointers[1])*note[1].velocity; // needs cut a bit  ,default 20bit
 8002f56:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002f5a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a47      	ldr	r2, [pc, #284]	; (8003080 <sampling+0x11b0>)
 8002f64:	7d52      	ldrb	r2, [r2, #21]
 8002f66:	fb02 f303 	mul.w	r3, r2, r3
 8002f6a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
					sample_temp3=sample_temp1>>2; // 20+8
 8002f6e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f72:	109b      	asrs	r3, r3, #2
 8002f74:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178

					sample_temp1=(*osc_pointers[2])*note[2].velocity;      // needs some gain fine tune !
 8002f78:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002f7c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a3e      	ldr	r2, [pc, #248]	; (8003080 <sampling+0x11b0>)
 8002f86:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 8002f8a:	fb02 f303 	mul.w	r3, r2, r3
 8002f8e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
					sample_temp4 =sample_temp1>>2;    // 64 default 20+8
 8002f92:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f96:	109b      	asrs	r3, r3, #2
 8002f98:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174

					if (note[3].position) sample_Accu[9]=sample_input;
 8002f9c:	4b38      	ldr	r3, [pc, #224]	; (8003080 <sampling+0x11b0>)
 8002f9e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <sampling+0x10de>
 8002fa6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002faa:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
					//if (note[3].position) sample_Accu[9]=(ram_temp+sample_Accu[9])>>1; // bit hot , also  add avr

					sample_temp1=(*osc_pointers[3])*	note[3].velocity;  // sine out is 16bit, add 4 then 16+8
 8002fae:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002fb2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a31      	ldr	r2, [pc, #196]	; (8003080 <sampling+0x11b0>)
 8002fbc:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 8002fc0:	fb02 f303 	mul.w	r3, r2, r3
 8002fc4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180



					sample_temp5 =sample_temp1>>2;
 8002fc8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002fcc:	109b      	asrs	r3, r3, #2
 8002fce:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
					//sample_Accu[3] =sine_out>>4;
	play_holder0[i]=sample_temp2;  // write to bank
 8002fd2:	4b2c      	ldr	r3, [pc, #176]	; (8003084 <sampling+0x11b4>)
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <sampling+0x11b8>)
 8002fda:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8002fde:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder1[i]=sample_temp3;
 8002fe2:	4b28      	ldr	r3, [pc, #160]	; (8003084 <sampling+0x11b4>)
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4a28      	ldr	r2, [pc, #160]	; (800308c <sampling+0x11bc>)
 8002fea:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8002fee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder2[i]=sample_temp4;
 8002ff2:	4b24      	ldr	r3, [pc, #144]	; (8003084 <sampling+0x11b4>)
 8002ff4:	881b      	ldrh	r3, [r3, #0]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4a25      	ldr	r2, [pc, #148]	; (8003090 <sampling+0x11c0>)
 8002ffa:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8002ffe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder3[i]=sample_temp5;
 8003002:	4b20      	ldr	r3, [pc, #128]	; (8003084 <sampling+0x11b4>)
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	4619      	mov	r1, r3
 8003008:	4a22      	ldr	r2, [pc, #136]	; (8003094 <sampling+0x11c4>)
 800300a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800300e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8003012:	4b1c      	ldr	r3, [pc, #112]	; (8003084 <sampling+0x11b4>)
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	3301      	adds	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	4b1a      	ldr	r3, [pc, #104]	; (8003084 <sampling+0x11b4>)
 800301c:	801a      	strh	r2, [r3, #0]
 800301e:	4b19      	ldr	r3, [pc, #100]	; (8003084 <sampling+0x11b4>)
 8003020:	881b      	ldrh	r3, [r3, #0]
 8003022:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003026:	f4ff adcf 	bcc.w	8002bc8 <sampling+0xcf8>
	} // end of osc , doing some sound

						    if(note[3].position)		sine_counter[9]=sine_counter[9]+256;  // count up when on
 800302a:	4b15      	ldr	r3, [pc, #84]	; (8003080 <sampling+0x11b0>)
 800302c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <sampling+0x1170>
 8003034:	4b18      	ldr	r3, [pc, #96]	; (8003098 <sampling+0x11c8>)
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800303c:	4a16      	ldr	r2, [pc, #88]	; (8003098 <sampling+0x11c8>)
 800303e:	6253      	str	r3, [r2, #36]	; 0x24

    memcpy(&sample_accus_hold,sample_accus,16);
 8003040:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003044:	2210      	movs	r2, #16
 8003046:	4619      	mov	r1, r3
 8003048:	4814      	ldr	r0, [pc, #80]	; (800309c <sampling+0x11cc>)
 800304a:	f009 fcdb 	bl	800ca04 <memcpy>
    memcpy(&sample_accu_counter,accu_count,8);   // copy back
 800304e:	4914      	ldr	r1, [pc, #80]	; (80030a0 <sampling+0x11d0>)
 8003050:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8003054:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 8003058:	460b      	mov	r3, r1
 800305a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800305e:	e883 0003 	stmia.w	r3, {r0, r1}
    memcpy(&sample_counts_holder,sample_counts_temp,80);
 8003062:	4a10      	ldr	r2, [pc, #64]	; (80030a4 <sampling+0x11d4>)
 8003064:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8003068:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800306c:	4610      	mov	r0, r2
 800306e:	4619      	mov	r1, r3
 8003070:	2350      	movs	r3, #80	; 0x50
 8003072:	461a      	mov	r2, r3
 8003074:	f009 fcc6 	bl	800ca04 <memcpy>
    int32_t filter_Accu2;

    //uint16_t* click=&input_holder[0];


			for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 8003078:	4b02      	ldr	r3, [pc, #8]	; (8003084 <sampling+0x11b4>)
 800307a:	2200      	movs	r2, #0
 800307c:	801a      	strh	r2, [r3, #0]
 800307e:	e2b0      	b.n	80035e2 <sampling+0x1712>
 8003080:	20008e08 	.word	0x20008e08
 8003084:	20009842 	.word	0x20009842
 8003088:	200103ec 	.word	0x200103ec
 800308c:	2000ebec 	.word	0x2000ebec
 8003090:	2000f3ec 	.word	0x2000f3ec
 8003094:	2000fbec 	.word	0x2000fbec
 8003098:	200097d8 	.word	0x200097d8
 800309c:	2000c058 	.word	0x2000c058
 80030a0:	200093c4 	.word	0x200093c4
 80030a4:	20009374 	.word	0x20009374
				i_total=i+sample_pointB;
 80030a8:	4bbd      	ldr	r3, [pc, #756]	; (80033a0 <sampling+0x14d0>)
 80030aa:	881a      	ldrh	r2, [r3, #0]
 80030ac:	4bbd      	ldr	r3, [pc, #756]	; (80033a4 <sampling+0x14d4>)
 80030ae:	881b      	ldrh	r3, [r3, #0]
 80030b0:	4413      	add	r3, r2
 80030b2:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e

			sampling_position=(i>>6);
 80030b6:	4bba      	ldr	r3, [pc, #744]	; (80033a0 <sampling+0x14d0>)
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	099b      	lsrs	r3, r3, #6
 80030bc:	b29b      	uxth	r3, r3
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	4bb9      	ldr	r3, [pc, #740]	; (80033a8 <sampling+0x14d8>)
 80030c2:	701a      	strb	r2, [r3, #0]
			// filter 1
			if (		(note_toggler[i>>5]	)==(1<<(i&31)	)) 				{ADSR[0].attack_trigger =0;  trigger_counter++; trigger_counter=trigger_counter&1023  ;}
 80030c4:	4bb6      	ldr	r3, [pc, #728]	; (80033a0 <sampling+0x14d0>)
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	095b      	lsrs	r3, r3, #5
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	461a      	mov	r2, r3
 80030ce:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80030d2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80030d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030da:	4ab1      	ldr	r2, [pc, #708]	; (80033a0 <sampling+0x14d0>)
 80030dc:	8812      	ldrh	r2, [r2, #0]
 80030de:	f002 021f 	and.w	r2, r2, #31
 80030e2:	2101      	movs	r1, #1
 80030e4:	fa01 f202 	lsl.w	r2, r1, r2
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d10f      	bne.n	800310c <sampling+0x123c>
 80030ec:	4baf      	ldr	r3, [pc, #700]	; (80033ac <sampling+0x14dc>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	711a      	strb	r2, [r3, #4]
 80030f2:	4baf      	ldr	r3, [pc, #700]	; (80033b0 <sampling+0x14e0>)
 80030f4:	881b      	ldrh	r3, [r3, #0]
 80030f6:	3301      	adds	r3, #1
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	4bad      	ldr	r3, [pc, #692]	; (80033b0 <sampling+0x14e0>)
 80030fc:	801a      	strh	r2, [r3, #0]
 80030fe:	4bac      	ldr	r3, [pc, #688]	; (80033b0 <sampling+0x14e0>)
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003106:	b29a      	uxth	r2, r3
 8003108:	4ba9      	ldr	r3, [pc, #676]	; (80033b0 <sampling+0x14e0>)
 800310a:	801a      	strh	r2, [r3, #0]

			phase_bank0[i&31]= sample_Accu[0]=play_holder0[i];
 800310c:	4ba4      	ldr	r3, [pc, #656]	; (80033a0 <sampling+0x14d0>)
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	461a      	mov	r2, r3
 8003112:	4ba8      	ldr	r3, [pc, #672]	; (80033b4 <sampling+0x14e4>)
 8003114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003118:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800311c:	4ba0      	ldr	r3, [pc, #640]	; (80033a0 <sampling+0x14d0>)
 800311e:	881b      	ldrh	r3, [r3, #0]
 8003120:	f003 031f 	and.w	r3, r3, #31
 8003124:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003128:	49a3      	ldr	r1, [pc, #652]	; (80033b8 <sampling+0x14e8>)
 800312a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			phase_bank1[i&31]=sample_Accu[1]=play_holder1[i] ; // saw
 800312e:	4b9c      	ldr	r3, [pc, #624]	; (80033a0 <sampling+0x14d0>)
 8003130:	881b      	ldrh	r3, [r3, #0]
 8003132:	461a      	mov	r2, r3
 8003134:	4ba1      	ldr	r3, [pc, #644]	; (80033bc <sampling+0x14ec>)
 8003136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800313a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800313e:	4b98      	ldr	r3, [pc, #608]	; (80033a0 <sampling+0x14d0>)
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	f003 031f 	and.w	r3, r3, #31
 8003146:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800314a:	499d      	ldr	r1, [pc, #628]	; (80033c0 <sampling+0x14f0>)
 800314c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			phase_bank2[i&31]=sample_Accu[2]=play_holder2[i];  // sine input
 8003150:	4b93      	ldr	r3, [pc, #588]	; (80033a0 <sampling+0x14d0>)
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	461a      	mov	r2, r3
 8003156:	4b9b      	ldr	r3, [pc, #620]	; (80033c4 <sampling+0x14f4>)
 8003158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800315c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003160:	4b8f      	ldr	r3, [pc, #572]	; (80033a0 <sampling+0x14d0>)
 8003162:	881b      	ldrh	r3, [r3, #0]
 8003164:	f003 031f 	and.w	r3, r3, #31
 8003168:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800316c:	4996      	ldr	r1, [pc, #600]	; (80033c8 <sampling+0x14f8>)
 800316e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			phase_bank3[i&31]=sample_Accu[3]=play_holder3[i] ;
 8003172:	4b8b      	ldr	r3, [pc, #556]	; (80033a0 <sampling+0x14d0>)
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	461a      	mov	r2, r3
 8003178:	4b94      	ldr	r3, [pc, #592]	; (80033cc <sampling+0x14fc>)
 800317a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800317e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003182:	4b87      	ldr	r3, [pc, #540]	; (80033a0 <sampling+0x14d0>)
 8003184:	881b      	ldrh	r3, [r3, #0]
 8003186:	f003 031f 	and.w	r3, r3, #31
 800318a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800318e:	4990      	ldr	r1, [pc, #576]	; (80033d0 <sampling+0x1500>)
 8003190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


	if (filter[0].resonance)	sample_Accu[0]=(sample_Accu[0]>>1)+(phase_bank0[  ((i&31)+(31-(filter[0].resonance&31)))&31]>>1); // PHASER
 8003194:	4b8f      	ldr	r3, [pc, #572]	; (80033d4 <sampling+0x1504>)
 8003196:	789b      	ldrb	r3, [r3, #2]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d012      	beq.n	80031c2 <sampling+0x12f2>
 800319c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80031a0:	105a      	asrs	r2, r3, #1
 80031a2:	4b7f      	ldr	r3, [pc, #508]	; (80033a0 <sampling+0x14d0>)
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	4619      	mov	r1, r3
 80031a8:	4b8a      	ldr	r3, [pc, #552]	; (80033d4 <sampling+0x1504>)
 80031aa:	789b      	ldrb	r3, [r3, #2]
 80031ac:	1acb      	subs	r3, r1, r3
 80031ae:	3b01      	subs	r3, #1
 80031b0:	f003 031f 	and.w	r3, r3, #31
 80031b4:	4980      	ldr	r1, [pc, #512]	; (80033b8 <sampling+0x14e8>)
 80031b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80031ba:	105b      	asrs	r3, r3, #1
 80031bc:	4413      	add	r3, r2
 80031be:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	if (filter[1].resonance)	sample_Accu[1]=(sample_Accu[1]>>1)+(phase_bank1[  ((i&31)+(31-(filter[1].resonance&31)))&31]>>1);
 80031c2:	4b84      	ldr	r3, [pc, #528]	; (80033d4 <sampling+0x1504>)
 80031c4:	7a9b      	ldrb	r3, [r3, #10]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d012      	beq.n	80031f0 <sampling+0x1320>
 80031ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031ce:	105a      	asrs	r2, r3, #1
 80031d0:	4b73      	ldr	r3, [pc, #460]	; (80033a0 <sampling+0x14d0>)
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	4619      	mov	r1, r3
 80031d6:	4b7f      	ldr	r3, [pc, #508]	; (80033d4 <sampling+0x1504>)
 80031d8:	7a9b      	ldrb	r3, [r3, #10]
 80031da:	1acb      	subs	r3, r1, r3
 80031dc:	3b01      	subs	r3, #1
 80031de:	f003 031f 	and.w	r3, r3, #31
 80031e2:	4977      	ldr	r1, [pc, #476]	; (80033c0 <sampling+0x14f0>)
 80031e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80031e8:	105b      	asrs	r3, r3, #1
 80031ea:	4413      	add	r3, r2
 80031ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	if (filter[2].resonance)	sample_Accu[2]=(sample_Accu[2]>>1)+(phase_bank2[  ((i&31)+(31-(filter[2].resonance&31)))&31]>>1);
 80031f0:	4b78      	ldr	r3, [pc, #480]	; (80033d4 <sampling+0x1504>)
 80031f2:	7c9b      	ldrb	r3, [r3, #18]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d012      	beq.n	800321e <sampling+0x134e>
 80031f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80031fc:	105a      	asrs	r2, r3, #1
 80031fe:	4b68      	ldr	r3, [pc, #416]	; (80033a0 <sampling+0x14d0>)
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	4619      	mov	r1, r3
 8003204:	4b73      	ldr	r3, [pc, #460]	; (80033d4 <sampling+0x1504>)
 8003206:	7c9b      	ldrb	r3, [r3, #18]
 8003208:	1acb      	subs	r3, r1, r3
 800320a:	3b01      	subs	r3, #1
 800320c:	f003 031f 	and.w	r3, r3, #31
 8003210:	496d      	ldr	r1, [pc, #436]	; (80033c8 <sampling+0x14f8>)
 8003212:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003216:	105b      	asrs	r3, r3, #1
 8003218:	4413      	add	r3, r2
 800321a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	if (filter[3].resonance)	sample_Accu[3]=(sample_Accu[3]>>1)+(phase_bank3[  ((i&31)+(31-(filter[3].resonance&31)))&31]>>1);
 800321e:	4b6d      	ldr	r3, [pc, #436]	; (80033d4 <sampling+0x1504>)
 8003220:	7e9b      	ldrb	r3, [r3, #26]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d012      	beq.n	800324c <sampling+0x137c>
 8003226:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800322a:	105a      	asrs	r2, r3, #1
 800322c:	4b5c      	ldr	r3, [pc, #368]	; (80033a0 <sampling+0x14d0>)
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	4619      	mov	r1, r3
 8003232:	4b68      	ldr	r3, [pc, #416]	; (80033d4 <sampling+0x1504>)
 8003234:	7e9b      	ldrb	r3, [r3, #26]
 8003236:	1acb      	subs	r3, r1, r3
 8003238:	3b01      	subs	r3, #1
 800323a:	f003 031f 	and.w	r3, r3, #31
 800323e:	4964      	ldr	r1, [pc, #400]	; (80033d0 <sampling+0x1500>)
 8003240:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003244:	105b      	asrs	r3, r3, #1
 8003246:	4413      	add	r3, r2
 8003248:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	// this section is about 100 tmr cycles
			if ((i&63)==0){frq_point();
 800324c:	4b54      	ldr	r3, [pc, #336]	; (80033a0 <sampling+0x14d0>)
 800324e:	881b      	ldrh	r3, [r3, #0]
 8003250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <sampling+0x138c>
 8003258:	f000 fbe2 	bl	8003a20 <frq_point>


   // vol lfo


		filter_accus[1]=sample_Accu[0]; // saw
 800325c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003260:	ee07 3a90 	vmov	s15, r3
 8003264:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003268:	4b5b      	ldr	r3, [pc, #364]	; (80033d8 <sampling+0x1508>)
 800326a:	edc3 7a01 	vstr	s15, [r3, #4]
		filter_accus[1]=filter_accus[1]-(filter_accus[3]*filter_res[0]);
 800326e:	4b5a      	ldr	r3, [pc, #360]	; (80033d8 <sampling+0x1508>)
 8003270:	ed93 7a01 	vldr	s14, [r3, #4]
 8003274:	4b58      	ldr	r3, [pc, #352]	; (80033d8 <sampling+0x1508>)
 8003276:	edd3 6a03 	vldr	s13, [r3, #12]
 800327a:	4b58      	ldr	r3, [pc, #352]	; (80033dc <sampling+0x150c>)
 800327c:	edd3 7a00 	vldr	s15, [r3]
 8003280:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003284:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003288:	4b53      	ldr	r3, [pc, #332]	; (80033d8 <sampling+0x1508>)
 800328a:	edc3 7a01 	vstr	s15, [r3, #4]

		filter_accus[2]=(filter_accus[1]*freq_point[0])+(filter_accus[2]*freq_point[1]);      //short=fast , adding makes it slower
 800328e:	4b52      	ldr	r3, [pc, #328]	; (80033d8 <sampling+0x1508>)
 8003290:	ed93 7a01 	vldr	s14, [r3, #4]
 8003294:	4b52      	ldr	r3, [pc, #328]	; (80033e0 <sampling+0x1510>)
 8003296:	edd3 7a00 	vldr	s15, [r3]
 800329a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800329e:	4b4e      	ldr	r3, [pc, #312]	; (80033d8 <sampling+0x1508>)
 80032a0:	edd3 6a02 	vldr	s13, [r3, #8]
 80032a4:	4b4e      	ldr	r3, [pc, #312]	; (80033e0 <sampling+0x1510>)
 80032a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80032aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032b2:	4b49      	ldr	r3, [pc, #292]	; (80033d8 <sampling+0x1508>)
 80032b4:	edc3 7a02 	vstr	s15, [r3, #8]
		filter_accus[3]=(filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]);			// int32 after conversions is no quicker
 80032b8:	4b47      	ldr	r3, [pc, #284]	; (80033d8 <sampling+0x1508>)
 80032ba:	ed93 7a02 	vldr	s14, [r3, #8]
 80032be:	4b48      	ldr	r3, [pc, #288]	; (80033e0 <sampling+0x1510>)
 80032c0:	edd3 7a00 	vldr	s15, [r3]
 80032c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032c8:	4b43      	ldr	r3, [pc, #268]	; (80033d8 <sampling+0x1508>)
 80032ca:	edd3 6a03 	vldr	s13, [r3, #12]
 80032ce:	4b44      	ldr	r3, [pc, #272]	; (80033e0 <sampling+0x1510>)
 80032d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80032d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032dc:	4b3e      	ldr	r3, [pc, #248]	; (80033d8 <sampling+0x1508>)
 80032de:	edc3 7a03 	vstr	s15, [r3, #12]
		sample_Accu[0]=filter_accus[3];
 80032e2:	4b3d      	ldr	r3, [pc, #244]	; (80033d8 <sampling+0x1508>)
 80032e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80032e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032ec:	ee17 3a90 	vmov	r3, s15
 80032f0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	//	sample_Accu[3]=play_holder2[i] >>5;
		filter_accus[4]=sample_Accu[1];
 80032f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032f8:	ee07 3a90 	vmov	s15, r3
 80032fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003300:	4b35      	ldr	r3, [pc, #212]	; (80033d8 <sampling+0x1508>)
 8003302:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[4]=filter_accus[4]-(filter_accus[6]*filter_res[1]);
 8003306:	4b34      	ldr	r3, [pc, #208]	; (80033d8 <sampling+0x1508>)
 8003308:	ed93 7a04 	vldr	s14, [r3, #16]
 800330c:	4b32      	ldr	r3, [pc, #200]	; (80033d8 <sampling+0x1508>)
 800330e:	edd3 6a06 	vldr	s13, [r3, #24]
 8003312:	4b32      	ldr	r3, [pc, #200]	; (80033dc <sampling+0x150c>)
 8003314:	edd3 7a01 	vldr	s15, [r3, #4]
 8003318:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800331c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003320:	4b2d      	ldr	r3, [pc, #180]	; (80033d8 <sampling+0x1508>)
 8003322:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[5]=(filter_accus[4]*freq_point[2])+(filter_accus[5]*freq_point[3]);   // 30 cyles for 2 poles
 8003326:	4b2c      	ldr	r3, [pc, #176]	; (80033d8 <sampling+0x1508>)
 8003328:	ed93 7a04 	vldr	s14, [r3, #16]
 800332c:	4b2c      	ldr	r3, [pc, #176]	; (80033e0 <sampling+0x1510>)
 800332e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003332:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003336:	4b28      	ldr	r3, [pc, #160]	; (80033d8 <sampling+0x1508>)
 8003338:	edd3 6a05 	vldr	s13, [r3, #20]
 800333c:	4b28      	ldr	r3, [pc, #160]	; (80033e0 <sampling+0x1510>)
 800333e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003342:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003346:	ee77 7a27 	vadd.f32	s15, s14, s15
 800334a:	4b23      	ldr	r3, [pc, #140]	; (80033d8 <sampling+0x1508>)
 800334c:	edc3 7a05 	vstr	s15, [r3, #20]
		filter_accus[6]=(filter_accus[5]*freq_point[2])+(filter_accus[6]*freq_point[3]);
 8003350:	4b21      	ldr	r3, [pc, #132]	; (80033d8 <sampling+0x1508>)
 8003352:	ed93 7a05 	vldr	s14, [r3, #20]
 8003356:	4b22      	ldr	r3, [pc, #136]	; (80033e0 <sampling+0x1510>)
 8003358:	edd3 7a02 	vldr	s15, [r3, #8]
 800335c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003360:	4b1d      	ldr	r3, [pc, #116]	; (80033d8 <sampling+0x1508>)
 8003362:	edd3 6a06 	vldr	s13, [r3, #24]
 8003366:	4b1e      	ldr	r3, [pc, #120]	; (80033e0 <sampling+0x1510>)
 8003368:	edd3 7a03 	vldr	s15, [r3, #12]
 800336c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003370:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003374:	4b18      	ldr	r3, [pc, #96]	; (80033d8 <sampling+0x1508>)
 8003376:	edc3 7a06 	vstr	s15, [r3, #24]
		sample_Accu[1]=filter_accus[6];
 800337a:	4b17      	ldr	r3, [pc, #92]	; (80033d8 <sampling+0x1508>)
 800337c:	edd3 7a06 	vldr	s15, [r3, #24]
 8003380:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003384:	ee17 3a90 	vmov	r3, s15
 8003388:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

		filter_accus[7]=sample_Accu[2];
 800338c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003390:	ee07 3a90 	vmov	s15, r3
 8003394:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003398:	4b0f      	ldr	r3, [pc, #60]	; (80033d8 <sampling+0x1508>)
 800339a:	edc3 7a07 	vstr	s15, [r3, #28]
 800339e:	e021      	b.n	80033e4 <sampling+0x1514>
 80033a0:	20009842 	.word	0x20009842
 80033a4:	20009840 	.word	0x20009840
 80033a8:	2000ebe8 	.word	0x2000ebe8
 80033ac:	2000d1f0 	.word	0x2000d1f0
 80033b0:	2000c1a0 	.word	0x2000c1a0
 80033b4:	200103ec 	.word	0x200103ec
 80033b8:	20011e2c 	.word	0x20011e2c
 80033bc:	2000ebec 	.word	0x2000ebec
 80033c0:	20011eac 	.word	0x20011eac
 80033c4:	2000f3ec 	.word	0x2000f3ec
 80033c8:	20011f2c 	.word	0x20011f2c
 80033cc:	2000fbec 	.word	0x2000fbec
 80033d0:	20011fac 	.word	0x20011fac
 80033d4:	20008e94 	.word	0x20008e94
 80033d8:	2000c0b4 	.word	0x2000c0b4
 80033dc:	2000c0a0 	.word	0x2000c0a0
 80033e0:	2000c0f0 	.word	0x2000c0f0
		filter_accus[7]=filter_accus[7]-(filter_accus[9]*filter_res[2]);  // resonance
 80033e4:	4b8c      	ldr	r3, [pc, #560]	; (8003618 <sampling+0x1748>)
 80033e6:	ed93 7a07 	vldr	s14, [r3, #28]
 80033ea:	4b8b      	ldr	r3, [pc, #556]	; (8003618 <sampling+0x1748>)
 80033ec:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80033f0:	4b8a      	ldr	r3, [pc, #552]	; (800361c <sampling+0x174c>)
 80033f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80033f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033fe:	4b86      	ldr	r3, [pc, #536]	; (8003618 <sampling+0x1748>)
 8003400:	edc3 7a07 	vstr	s15, [r3, #28]
				filter_accus[8]=(filter_accus[7]*freq_point[4])+(filter_accus[8]*freq_point[5]);   // 30 cyles for 2 poles
 8003404:	4b84      	ldr	r3, [pc, #528]	; (8003618 <sampling+0x1748>)
 8003406:	ed93 7a07 	vldr	s14, [r3, #28]
 800340a:	4b85      	ldr	r3, [pc, #532]	; (8003620 <sampling+0x1750>)
 800340c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003410:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003414:	4b80      	ldr	r3, [pc, #512]	; (8003618 <sampling+0x1748>)
 8003416:	edd3 6a08 	vldr	s13, [r3, #32]
 800341a:	4b81      	ldr	r3, [pc, #516]	; (8003620 <sampling+0x1750>)
 800341c:	edd3 7a05 	vldr	s15, [r3, #20]
 8003420:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003428:	4b7b      	ldr	r3, [pc, #492]	; (8003618 <sampling+0x1748>)
 800342a:	edc3 7a08 	vstr	s15, [r3, #32]
				filter_accus[9]=(filter_accus[8]*freq_point[4])+(filter_accus[9]*freq_point[5]);
 800342e:	4b7a      	ldr	r3, [pc, #488]	; (8003618 <sampling+0x1748>)
 8003430:	ed93 7a08 	vldr	s14, [r3, #32]
 8003434:	4b7a      	ldr	r3, [pc, #488]	; (8003620 <sampling+0x1750>)
 8003436:	edd3 7a04 	vldr	s15, [r3, #16]
 800343a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800343e:	4b76      	ldr	r3, [pc, #472]	; (8003618 <sampling+0x1748>)
 8003440:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8003444:	4b76      	ldr	r3, [pc, #472]	; (8003620 <sampling+0x1750>)
 8003446:	edd3 7a05 	vldr	s15, [r3, #20]
 800344a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800344e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003452:	4b71      	ldr	r3, [pc, #452]	; (8003618 <sampling+0x1748>)
 8003454:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				sample_Accu[2]=filter_accus[9];
 8003458:	4b6f      	ldr	r3, [pc, #444]	; (8003618 <sampling+0x1748>)
 800345a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800345e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003462:	ee17 3a90 	vmov	r3, s15
 8003466:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

				filter_accus[10]=sample_Accu[3];
 800346a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800346e:	ee07 3a90 	vmov	s15, r3
 8003472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003476:	4b68      	ldr	r3, [pc, #416]	; (8003618 <sampling+0x1748>)
 8003478:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				filter_accus[10]=filter_accus[10]-(filter_accus[12]*filter_res[3]);
 800347c:	4b66      	ldr	r3, [pc, #408]	; (8003618 <sampling+0x1748>)
 800347e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003482:	4b65      	ldr	r3, [pc, #404]	; (8003618 <sampling+0x1748>)
 8003484:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8003488:	4b64      	ldr	r3, [pc, #400]	; (800361c <sampling+0x174c>)
 800348a:	edd3 7a03 	vldr	s15, [r3, #12]
 800348e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003492:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003496:	4b60      	ldr	r3, [pc, #384]	; (8003618 <sampling+0x1748>)
 8003498:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
						filter_accus[11]=(filter_accus[10]*freq_point[6])+(filter_accus[11]*freq_point[7]);   // 30 cyles for 2 poles
 800349c:	4b5e      	ldr	r3, [pc, #376]	; (8003618 <sampling+0x1748>)
 800349e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80034a2:	4b5f      	ldr	r3, [pc, #380]	; (8003620 <sampling+0x1750>)
 80034a4:	edd3 7a06 	vldr	s15, [r3, #24]
 80034a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034ac:	4b5a      	ldr	r3, [pc, #360]	; (8003618 <sampling+0x1748>)
 80034ae:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80034b2:	4b5b      	ldr	r3, [pc, #364]	; (8003620 <sampling+0x1750>)
 80034b4:	edd3 7a07 	vldr	s15, [r3, #28]
 80034b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034c0:	4b55      	ldr	r3, [pc, #340]	; (8003618 <sampling+0x1748>)
 80034c2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
						filter_accus[12]=(filter_accus[11]*freq_point[6])+(filter_accus[12]*freq_point[7]);
 80034c6:	4b54      	ldr	r3, [pc, #336]	; (8003618 <sampling+0x1748>)
 80034c8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80034cc:	4b54      	ldr	r3, [pc, #336]	; (8003620 <sampling+0x1750>)
 80034ce:	edd3 7a06 	vldr	s15, [r3, #24]
 80034d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034d6:	4b50      	ldr	r3, [pc, #320]	; (8003618 <sampling+0x1748>)
 80034d8:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80034dc:	4b50      	ldr	r3, [pc, #320]	; (8003620 <sampling+0x1750>)
 80034de:	edd3 7a07 	vldr	s15, [r3, #28]
 80034e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ea:	4b4b      	ldr	r3, [pc, #300]	; (8003618 <sampling+0x1748>)
 80034ec:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
						sample_Accu[3]=filter_accus[12];
 80034f0:	4b49      	ldr	r3, [pc, #292]	; (8003618 <sampling+0x1748>)
 80034f2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80034f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034fa:	ee17 3a90 	vmov	r3, s15
 80034fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	//	filter_accus[11]=filter_accus[5]; //write back new value
		//sample_Accu[0] =sample_Accu[1];

				//sample_Accu[0]=(sample_Accu[0]>>2)+(play_holder0[(i+550)&511]>>2);   // just need 7 samples for aphaser at 500 hz

		filter_Accu=filter_Accu2=0;
 8003502:	2300      	movs	r3, #0
 8003504:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8003508:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800350c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
		filter_Accu=(sample_Accu[0]+sample_Accu[1])>>16;
 8003510:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003514:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003518:	4413      	add	r3, r2
 800351a:	141b      	asrs	r3, r3, #16
 800351c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4



		filter_Accu2=(sample_Accu[2]+sample_Accu[3])>>16; //filter + drum out
 8003520:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8003524:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003528:	4413      	add	r3, r2
 800352a:	141b      	asrs	r3, r3, #16
 800352c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
		//filter_Accu=play_holder0[i];


		 if (one_shot!=199)   one_shot++;  //play one attack then stop
 8003530:	4b3c      	ldr	r3, [pc, #240]	; (8003624 <sampling+0x1754>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2bc7      	cmp	r3, #199	; 0xc7
 8003536:	d005      	beq.n	8003544 <sampling+0x1674>
 8003538:	4b3a      	ldr	r3, [pc, #232]	; (8003624 <sampling+0x1754>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	3301      	adds	r3, #1
 800353e:	b2da      	uxtb	r2, r3
 8003540:	4b38      	ldr	r3, [pc, #224]	; (8003624 <sampling+0x1754>)
 8003542:	701a      	strb	r2, [r3, #0]

		 //if (filter_Accu>0xFFFF) {filter_Accu=0xFFFF;clipping++;} else if (filter_Accu<-65535) filter_Accu=-65535;  // limiter to 16 bits
		 if (filter_Accu>0x3FF) {filter_Accu=0x3FF;clipping++;} else if (filter_Accu<-1023) filter_Accu=-1023;  // limiter to 11 bits
 8003544:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800354c:	db0a      	blt.n	8003564 <sampling+0x1694>
 800354e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003552:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8003556:	4b34      	ldr	r3, [pc, #208]	; (8003628 <sampling+0x1758>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	3301      	adds	r3, #1
 800355c:	b2da      	uxtb	r2, r3
 800355e:	4b32      	ldr	r3, [pc, #200]	; (8003628 <sampling+0x1758>)
 8003560:	701a      	strb	r2, [r3, #0]
 8003562:	e007      	b.n	8003574 <sampling+0x16a4>
 8003564:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003568:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 800356c:	dc02      	bgt.n	8003574 <sampling+0x16a4>
 800356e:	4b2f      	ldr	r3, [pc, #188]	; (800362c <sampling+0x175c>)
 8003570:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
		 if (filter_Accu2>0x3FF) {filter_Accu2=0x3FF;clipping++;} else if (filter_Accu2<-1023) filter_Accu2=-1023;  // limiter to 11 bits
 8003574:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800357c:	db0a      	blt.n	8003594 <sampling+0x16c4>
 800357e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003582:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8003586:	4b28      	ldr	r3, [pc, #160]	; (8003628 <sampling+0x1758>)
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	3301      	adds	r3, #1
 800358c:	b2da      	uxtb	r2, r3
 800358e:	4b26      	ldr	r3, [pc, #152]	; (8003628 <sampling+0x1758>)
 8003590:	701a      	strb	r2, [r3, #0]
 8003592:	e007      	b.n	80035a4 <sampling+0x16d4>
 8003594:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003598:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 800359c:	dc02      	bgt.n	80035a4 <sampling+0x16d4>
 800359e:	4b23      	ldr	r3, [pc, #140]	; (800362c <sampling+0x175c>)
 80035a0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0



		 play_sample[(i_total<<1)]=(filter_Accu)+1023;   // final output disable for now 2544
 80035a4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80035b4:	b291      	uxth	r1, r2
 80035b6:	4a1e      	ldr	r2, [pc, #120]	; (8003630 <sampling+0x1760>)
 80035b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		 play_sample[(i_total<<1)+1]=(filter_Accu2)+1023;
 80035bc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	3301      	adds	r3, #1
 80035ca:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80035ce:	b291      	uxth	r1, r2
 80035d0:	4a17      	ldr	r2, [pc, #92]	; (8003630 <sampling+0x1760>)
 80035d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 80035d6:	4b17      	ldr	r3, [pc, #92]	; (8003634 <sampling+0x1764>)
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	3301      	adds	r3, #1
 80035dc:	b29a      	uxth	r2, r3
 80035de:	4b15      	ldr	r3, [pc, #84]	; (8003634 <sampling+0x1764>)
 80035e0:	801a      	strh	r2, [r3, #0]
 80035e2:	4b14      	ldr	r3, [pc, #80]	; (8003634 <sampling+0x1764>)
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035ea:	f4ff ad5d 	bcc.w	80030a8 <sampling+0x11d8>
		} // end of filer


		//time_final=time_proc;   // in samples

		if (bank_write)   error_count++;  // if bank write is high it means too much stall here
 80035ee:	4b12      	ldr	r3, [pc, #72]	; (8003638 <sampling+0x1768>)
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d006      	beq.n	8003604 <sampling+0x1734>
 80035f6:	4b11      	ldr	r3, [pc, #68]	; (800363c <sampling+0x176c>)
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	3301      	adds	r3, #1
 80035fe:	b29a      	uxth	r2, r3
 8003600:	4b0e      	ldr	r3, [pc, #56]	; (800363c <sampling+0x176c>)
 8003602:	801a      	strh	r2, [r3, #0]
		time_final[0]=time_proc;
 8003604:	4b0e      	ldr	r3, [pc, #56]	; (8003640 <sampling+0x1770>)
 8003606:	881a      	ldrh	r2, [r3, #0]
 8003608:	4b0e      	ldr	r3, [pc, #56]	; (8003644 <sampling+0x1774>)
 800360a:	801a      	strh	r2, [r3, #0]


		//bank_write=0;   /// total 320 sample time (39khz)
		}
 800360c:	bf00      	nop
 800360e:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
 8003612:	46bd      	mov	sp, r7
 8003614:	bdb0      	pop	{r4, r5, r7, pc}
 8003616:	bf00      	nop
 8003618:	2000c0b4 	.word	0x2000c0b4
 800361c:	2000c0a0 	.word	0x2000c0a0
 8003620:	2000c0f0 	.word	0x2000c0f0
 8003624:	2000c070 	.word	0x2000c070
 8003628:	20010bec 	.word	0x20010bec
 800362c:	fffffc01 	.word	0xfffffc01
 8003630:	20009844 	.word	0x20009844
 8003634:	20009842 	.word	0x20009842
 8003638:	20008e02 	.word	0x20008e02
 800363c:	2000ce42 	.word	0x2000ce42
 8003640:	2000ce40 	.word	0x2000ce40
 8003644:	2000ce3c 	.word	0x2000ce3c

08003648 <LFO_square_one_pulse>:
    *(return_array + 2) = sine_tuned;
    return (sine_tempA);   // add back to start value -20k-20k  or about 16bit

    }

void LFO_square_one_pulse(void){   // sends one pulse synced to seq.pos , rate= pulse width in notes , delay = start position
 8003648:	b490      	push	{r4, r7}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
       // uint16_t  temp_pulse=0;
	uint8_t seqpos = seq.pos ;
 800364e:	4b4d      	ldr	r3, [pc, #308]	; (8003784 <LFO_square_one_pulse+0x13c>)
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	717b      	strb	r3, [r7, #5]
     //   uint16_t counter_up; // starts at 0+delay
	//uint8_t pulse_high;
	uint8_t pulse_low;
	uint8_t seq_div=7;
 8003654:	2307      	movs	r3, #7
 8003656:	71fb      	strb	r3, [r7, #7]
	uint8_t lfo_c ;
	//uint16_t pulse_length;     // 1 note -32 ? with fractions  0-8 then 0-16 then 0-32 then 0-64 ,repeat
	uint8_t delay;

	for (lfo_c=0;lfo_c<10;lfo_c++){
 8003658:	2300      	movs	r3, #0
 800365a:	71bb      	strb	r3, [r7, #6]
 800365c:	e088      	b.n	8003770 <LFO_square_one_pulse+0x128>

	    pulse_low=LFO_square[lfo_c].rate;
 800365e:	79ba      	ldrb	r2, [r7, #6]
 8003660:	4949      	ldr	r1, [pc, #292]	; (8003788 <LFO_square_one_pulse+0x140>)
 8003662:	4613      	mov	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4413      	add	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	440b      	add	r3, r1
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	713b      	strb	r3, [r7, #4]
	 //   if (LFO_square[lfo_c].delay<8) delay=LFO_square[lfo_c].delay;  else delay=7;
	    delay=LFO_square[lfo_c].delay;
 8003670:	79ba      	ldrb	r2, [r7, #6]
 8003672:	4945      	ldr	r1, [pc, #276]	; (8003788 <LFO_square_one_pulse+0x140>)
 8003674:	4613      	mov	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	3303      	adds	r3, #3
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	70fb      	strb	r3, [r7, #3]

	    if ((pulse_low&32) 	|| 	(delay&32)) 						 {seq_div=63;}  // This is the end
 8003684:	793b      	ldrb	r3, [r7, #4]
 8003686:	f003 0320 	and.w	r3, r3, #32
 800368a:	2b00      	cmp	r3, #0
 800368c:	d104      	bne.n	8003698 <LFO_square_one_pulse+0x50>
 800368e:	78fb      	ldrb	r3, [r7, #3]
 8003690:	f003 0320 	and.w	r3, r3, #32
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <LFO_square_one_pulse+0x54>
 8003698:	233f      	movs	r3, #63	; 0x3f
 800369a:	71fb      	strb	r3, [r7, #7]
	    if  ((pulse_low&16) 	|| 	(delay&16)) 								 {seq_div=31;}
 800369c:	793b      	ldrb	r3, [r7, #4]
 800369e:	f003 0310 	and.w	r3, r3, #16
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d104      	bne.n	80036b0 <LFO_square_one_pulse+0x68>
 80036a6:	78fb      	ldrb	r3, [r7, #3]
 80036a8:	f003 0310 	and.w	r3, r3, #16
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <LFO_square_one_pulse+0x6c>
 80036b0:	231f      	movs	r3, #31
 80036b2:	71fb      	strb	r3, [r7, #7]
	    if  ((pulse_low&8) 	|| 	(delay&8)) 								{ seq_div=15;}
 80036b4:	793b      	ldrb	r3, [r7, #4]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d104      	bne.n	80036c8 <LFO_square_one_pulse+0x80>
 80036be:	78fb      	ldrb	r3, [r7, #3]
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <LFO_square_one_pulse+0x84>
 80036c8:	230f      	movs	r3, #15
 80036ca:	71fb      	strb	r3, [r7, #7]
	    if  ((pulse_low&7) 	|| 	(delay&7)) 									 {seq_div=7;}
 80036cc:	793b      	ldrb	r3, [r7, #4]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d104      	bne.n	80036e0 <LFO_square_one_pulse+0x98>
 80036d6:	78fb      	ldrb	r3, [r7, #3]
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <LFO_square_one_pulse+0x9c>
 80036e0:	2307      	movs	r3, #7
 80036e2:	71fb      	strb	r3, [r7, #7]

	    //delay=(delay*seq_div)>>3;   // this is the start


	    if (((seqpos&seq_div)<=pulse_low)  &&	((seqpos&seq_div)>=delay))	LFO_square[lfo_c].out[sampling_position]=((LFO_square[lfo_c].depth))<<8;  // high
 80036e4:	797a      	ldrb	r2, [r7, #5]
 80036e6:	79fb      	ldrb	r3, [r7, #7]
 80036e8:	4013      	ands	r3, r2
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	793a      	ldrb	r2, [r7, #4]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d321      	bcc.n	8003736 <LFO_square_one_pulse+0xee>
 80036f2:	797a      	ldrb	r2, [r7, #5]
 80036f4:	79fb      	ldrb	r3, [r7, #7]
 80036f6:	4013      	ands	r3, r2
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	78fa      	ldrb	r2, [r7, #3]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d81a      	bhi.n	8003736 <LFO_square_one_pulse+0xee>
 8003700:	79ba      	ldrb	r2, [r7, #6]
 8003702:	4921      	ldr	r1, [pc, #132]	; (8003788 <LFO_square_one_pulse+0x140>)
 8003704:	4613      	mov	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	3301      	adds	r3, #1
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	b29b      	uxth	r3, r3
 8003714:	79ba      	ldrb	r2, [r7, #6]
 8003716:	491d      	ldr	r1, [pc, #116]	; (800378c <LFO_square_one_pulse+0x144>)
 8003718:	7809      	ldrb	r1, [r1, #0]
 800371a:	460c      	mov	r4, r1
 800371c:	021b      	lsls	r3, r3, #8
 800371e:	b298      	uxth	r0, r3
 8003720:	4919      	ldr	r1, [pc, #100]	; (8003788 <LFO_square_one_pulse+0x140>)
 8003722:	4613      	mov	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	4423      	add	r3, r4
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	440b      	add	r3, r1
 8003730:	4602      	mov	r2, r0
 8003732:	809a      	strh	r2, [r3, #4]
 8003734:	e019      	b.n	800376a <LFO_square_one_pulse+0x122>
	    else LFO_square[lfo_c].out[sampling_position]=(LFO_square[lfo_c].offset)<<8;		//low
 8003736:	79ba      	ldrb	r2, [r7, #6]
 8003738:	4913      	ldr	r1, [pc, #76]	; (8003788 <LFO_square_one_pulse+0x140>)
 800373a:	4613      	mov	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	440b      	add	r3, r1
 8003744:	3302      	adds	r3, #2
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	b29b      	uxth	r3, r3
 800374a:	79ba      	ldrb	r2, [r7, #6]
 800374c:	490f      	ldr	r1, [pc, #60]	; (800378c <LFO_square_one_pulse+0x144>)
 800374e:	7809      	ldrb	r1, [r1, #0]
 8003750:	460c      	mov	r4, r1
 8003752:	021b      	lsls	r3, r3, #8
 8003754:	b298      	uxth	r0, r3
 8003756:	490c      	ldr	r1, [pc, #48]	; (8003788 <LFO_square_one_pulse+0x140>)
 8003758:	4613      	mov	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	4423      	add	r3, r4
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	440b      	add	r3, r1
 8003766:	4602      	mov	r2, r0
 8003768:	809a      	strh	r2, [r3, #4]
	for (lfo_c=0;lfo_c<10;lfo_c++){
 800376a:	79bb      	ldrb	r3, [r7, #6]
 800376c:	3301      	adds	r3, #1
 800376e:	71bb      	strb	r3, [r7, #6]
 8003770:	79bb      	ldrb	r3, [r7, #6]
 8003772:	2b09      	cmp	r3, #9
 8003774:	f67f af73 	bls.w	800365e <LFO_square_one_pulse+0x16>

	}
    }
 8003778:	bf00      	nop
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bc90      	pop	{r4, r7}
 8003782:	4770      	bx	lr
 8003784:	2000dc7c 	.word	0x2000dc7c
 8003788:	2000d128 	.word	0x2000d128
 800378c:	2000ebe8 	.word	0x2000ebe8

08003790 <LFO_source_synced>:



	}

void LFO_source_synced(void){     // lfo , ok
 8003790:	b590      	push	{r4, r7, lr}
 8003792:	b08d      	sub	sp, #52	; 0x34
 8003794:	af00      	add	r7, sp, #0


	float	freq_temp=0;
 8003796:	f04f 0300 	mov.w	r3, #0
 800379a:	617b      	str	r3, [r7, #20]
	float 	freq2_temp=0;
 800379c:	f04f 0300 	mov.w	r3, #0
 80037a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t 	freq_saw=0;
 80037a2:	2300      	movs	r3, #0
 80037a4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t lfo_c ;
	float offset=0;
 80037a6:	f04f 0300 	mov.w	r3, #0
 80037aa:	613b      	str	r3, [r7, #16]
	uint32_t lfo_accu_temp;
	int16_t  output_hold;
	int32_t freq_tri;
	uint32_t offset2;
	uint32_t freq_temp_saw;
	uint32_t delay_value=0;
 80037ac:	2300      	movs	r3, #0
 80037ae:	60fb      	str	r3, [r7, #12]
	uint16_t rate;

	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 80037b0:	2300      	movs	r3, #0
 80037b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80037b6:	e117      	b.n	80039e8 <LFO_source_synced+0x258>

	rate= LFO[lfo_c].rate;
 80037b8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80037bc:	4992      	ldr	r1, [pc, #584]	; (8003a08 <LFO_source_synced+0x278>)
 80037be:	4613      	mov	r3, r2
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	4413      	add	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	837b      	strh	r3, [r7, #26]
	if (rate>10) rate=10;
 80037cc:	8b7b      	ldrh	r3, [r7, #26]
 80037ce:	2b0a      	cmp	r3, #10
 80037d0:	d901      	bls.n	80037d6 <LFO_source_synced+0x46>
 80037d2:	230a      	movs	r3, #10
 80037d4:	837b      	strh	r3, [r7, #26]

	lfo_accu_temp=(next_isr&((1<<rate)-1))*(65535>>rate);   // calculate from next_isr
 80037d6:	4b8d      	ldr	r3, [pc, #564]	; (8003a0c <LFO_source_synced+0x27c>)
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	4619      	mov	r1, r3
 80037dc:	8b7b      	ldrh	r3, [r7, #26]
 80037de:	2201      	movs	r2, #1
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	400b      	ands	r3, r1
 80037e8:	8b7a      	ldrh	r2, [r7, #26]
 80037ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80037ee:	fa41 f202 	asr.w	r2, r1, r2
 80037f2:	fb02 f303 	mul.w	r3, r2, r3
 80037f6:	60bb      	str	r3, [r7, #8]

	// if (lfo_c==0)     debug_value=lfo_accu_temp;

	 delay_value=8192*(LFO[lfo_c].delay&7);  //not ok
 80037f8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80037fc:	4982      	ldr	r1, [pc, #520]	; (8003a08 <LFO_source_synced+0x278>)
 80037fe:	4613      	mov	r3, r2
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	4413      	add	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	440b      	add	r3, r1
 8003808:	3304      	adds	r3, #4
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	035b      	lsls	r3, r3, #13
 8003812:	60fb      	str	r3, [r7, #12]

	 freq_temp=lfo_accu_temp*0.0000479376;
 8003814:	68b8      	ldr	r0, [r7, #8]
 8003816:	f7fc ff53 	bl	80006c0 <__aeabi_ui2d>
 800381a:	a379      	add	r3, pc, #484	; (adr r3, 8003a00 <LFO_source_synced+0x270>)
 800381c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003820:	f7fc fce2 	bl	80001e8 <__aeabi_dmul>
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	4610      	mov	r0, r2
 800382a:	4619      	mov	r1, r3
 800382c:	f7fc ffe2 	bl	80007f4 <__aeabi_d2f>
 8003830:	4603      	mov	r3, r0
 8003832:	617b      	str	r3, [r7, #20]

	 freq2_temp=arm_sin_f32(freq_temp);   // +10 cycles
 8003834:	ed97 0a05 	vldr	s0, [r7, #20]
 8003838:	f009 f872 	bl	800c920 <arm_sin_f32>
 800383c:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	freq_temp=LFO[lfo_c].depth;
 8003840:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003844:	4970      	ldr	r1, [pc, #448]	; (8003a08 <LFO_source_synced+0x278>)
 8003846:	4613      	mov	r3, r2
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	4413      	add	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	3301      	adds	r3, #1
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	ee07 3a90 	vmov	s15, r3
 8003858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800385c:	edc7 7a05 	vstr	s15, [r7, #20]
	 freq_temp= (freq2_temp*freq_temp)*256;
 8003860:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003864:	edd7 7a05 	vldr	s15, [r7, #20]
 8003868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800386c:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8003a10 <LFO_source_synced+0x280>
 8003870:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003874:	edc7 7a05 	vstr	s15, [r7, #20]

	 freq_temp_saw=(lfo_accu_temp+delay_value)&65535        ;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4413      	add	r3, r2
 800387e:	b29b      	uxth	r3, r3
 8003880:	61fb      	str	r3, [r7, #28]

 		offset=(LFO[lfo_c].offset<<8); //  limit now for finetuning
 8003882:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003886:	4960      	ldr	r1, [pc, #384]	; (8003a08 <LFO_source_synced+0x278>)
 8003888:	4613      	mov	r3, r2
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	4413      	add	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	3303      	adds	r3, #3
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	021b      	lsls	r3, r3, #8
 8003898:	ee07 3a90 	vmov	s15, r3
 800389c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038a0:	edc7 7a04 	vstr	s15, [r7, #16]
			offset2=offset;
 80038a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80038a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038ac:	ee17 3a90 	vmov	r3, s15
 80038b0:	607b      	str	r3, [r7, #4]
 		freq2_temp=(freq_temp+offset);
 80038b2:	ed97 7a05 	vldr	s14, [r7, #20]
 80038b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80038ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038be:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		if (freq2_temp>65534)  freq2_temp=65535;
 80038c2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80038c6:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8003a14 <LFO_source_synced+0x284>
 80038ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d2:	dd01      	ble.n	80038d8 <LFO_source_synced+0x148>
 80038d4:	4b50      	ldr	r3, [pc, #320]	; (8003a18 <LFO_source_synced+0x288>)
 80038d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	//	if (freq2_temp<-32766) {  freq2_temp=-32767; }  // clip to 13bit -/+ 8000

						output_hold=freq2_temp;
 80038d8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80038dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038e0:	ee17 3a90 	vmov	r3, s15
 80038e4:	807b      	strh	r3, [r7, #2]
				if (freq_temp_saw>65534)  freq_temp_saw=65535;
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d902      	bls.n	80038f6 <LFO_source_synced+0x166>
 80038f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038f4:	61fb      	str	r3, [r7, #28]
					//	lfo_accu_temp=lfo_accu_temp/6;
					freq_saw=((freq_temp_saw*LFO[lfo_c].depth)>>8)+offset2;   // 51 000  + offset
 80038f6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80038fa:	4943      	ldr	r1, [pc, #268]	; (8003a08 <LFO_source_synced+0x278>)
 80038fc:	4613      	mov	r3, r2
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	4413      	add	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	3301      	adds	r3, #1
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	461a      	mov	r2, r3
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	fb02 f303 	mul.w	r3, r2, r3
 8003912:	0a1b      	lsrs	r3, r3, #8
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	4413      	add	r3, r2
 8003918:	62bb      	str	r3, [r7, #40]	; 0x28

					if (freq_saw>65534)  freq_saw=65535;   // clip
 800391a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003920:	4293      	cmp	r3, r2
 8003922:	d902      	bls.n	800392a <LFO_source_synced+0x19a>
 8003924:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003928:	62bb      	str	r3, [r7, #40]	; 0x28
				//	freq_saw=65535-freq_saw;
					LFO[lfo_c].out[sampling_position]=output_hold; // sine out
 800392a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800392e:	4b3b      	ldr	r3, [pc, #236]	; (8003a1c <LFO_source_synced+0x28c>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	461c      	mov	r4, r3
 8003934:	8878      	ldrh	r0, [r7, #2]
 8003936:	4934      	ldr	r1, [pc, #208]	; (8003a08 <LFO_source_synced+0x278>)
 8003938:	4613      	mov	r3, r2
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	4413      	add	r3, r2
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	4423      	add	r3, r4
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	440b      	add	r3, r1
 8003946:	4602      	mov	r2, r0
 8003948:	80da      	strh	r2, [r3, #6]
				   LFO[lfo_c].out_saw[sampling_position]=freq_saw;    // saw 16 bit
 800394a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800394e:	4b33      	ldr	r3, [pc, #204]	; (8003a1c <LFO_source_synced+0x28c>)
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	461c      	mov	r4, r3
 8003954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003956:	b298      	uxth	r0, r3
 8003958:	492b      	ldr	r1, [pc, #172]	; (8003a08 <LFO_source_synced+0x278>)
 800395a:	4613      	mov	r3, r2
 800395c:	011b      	lsls	r3, r3, #4
 800395e:	4413      	add	r3, r2
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	4423      	add	r3, r4
 8003964:	330c      	adds	r3, #12
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	440b      	add	r3, r1
 800396a:	4602      	mov	r2, r0
 800396c:	805a      	strh	r2, [r3, #2]


				   if(freq_temp_saw<32768)   freq_tri=freq_temp_saw; else freq_tri=65536-freq_temp_saw;    // 0-32767
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003974:	d202      	bcs.n	800397c <LFO_source_synced+0x1ec>
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	623b      	str	r3, [r7, #32]
 800397a:	e003      	b.n	8003984 <LFO_source_synced+0x1f4>
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8003982:	623b      	str	r3, [r7, #32]
				   freq_tri=((freq_tri*LFO[lfo_c].depth)>>7)+offset2 ; // tri 16 bit
 8003984:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003988:	491f      	ldr	r1, [pc, #124]	; (8003a08 <LFO_source_synced+0x278>)
 800398a:	4613      	mov	r3, r2
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	4413      	add	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	440b      	add	r3, r1
 8003994:	3301      	adds	r3, #1
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	461a      	mov	r2, r3
 800399a:	6a3b      	ldr	r3, [r7, #32]
 800399c:	fb02 f303 	mul.w	r3, r2, r3
 80039a0:	11db      	asrs	r3, r3, #7
 80039a2:	461a      	mov	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4413      	add	r3, r2
 80039a8:	623b      	str	r3, [r7, #32]
				//   freq_tri=((freq_tri*255)>>7)+offset2 ; // tri 16 bit
				   if (freq_tri>65534)  freq_tri=65535;   // clip
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80039b0:	4293      	cmp	r3, r2
 80039b2:	dd02      	ble.n	80039ba <LFO_source_synced+0x22a>
 80039b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039b8:	623b      	str	r3, [r7, #32]
				  LFO[lfo_c].out_tri[sampling_position]=freq_tri;
 80039ba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80039be:	4b17      	ldr	r3, [pc, #92]	; (8003a1c <LFO_source_synced+0x28c>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	461c      	mov	r4, r3
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	b298      	uxth	r0, r3
 80039c8:	490f      	ldr	r1, [pc, #60]	; (8003a08 <LFO_source_synced+0x278>)
 80039ca:	4613      	mov	r3, r2
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	4413      	add	r3, r2
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	4423      	add	r3, r4
 80039d4:	3314      	adds	r3, #20
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	440b      	add	r3, r1
 80039da:	4602      	mov	r2, r0
 80039dc:	80da      	strh	r2, [r3, #6]
	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 80039de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039e2:	3301      	adds	r3, #1
 80039e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80039e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039ec:	2b09      	cmp	r3, #9
 80039ee:	f67f aee3 	bls.w	80037b8 <LFO_source_synced+0x28>

		} // lfo gen : 0=f1 , 1=tempo,2=pitch



	}
 80039f2:	bf00      	nop
 80039f4:	bf00      	nop
 80039f6:	3734      	adds	r7, #52	; 0x34
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd90      	pop	{r4, r7, pc}
 80039fc:	f3af 8000 	nop.w
 8003a00:	64dc8498 	.word	0x64dc8498
 8003a04:	3f092213 	.word	0x3f092213
 8003a08:	2000ce44 	.word	0x2000ce44
 8003a0c:	2000c054 	.word	0x2000c054
 8003a10:	43800000 	.word	0x43800000
 8003a14:	477ffe00 	.word	0x477ffe00
 8003a18:	477fff00 	.word	0x477fff00
 8003a1c:	2000ebe8 	.word	0x2000ebe8

08003a20 <frq_point>:


void  frq_point(void){
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
	freq_point[0]=freq_pointer[0] [sampling_position];; // load up coeffs
 8003a24:	4b84      	ldr	r3, [pc, #528]	; (8003c38 <frq_point+0x218>)
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	4a84      	ldr	r2, [pc, #528]	; (8003c3c <frq_point+0x21c>)
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a83      	ldr	r2, [pc, #524]	; (8003c40 <frq_point+0x220>)
 8003a32:	6013      	str	r3, [r2, #0]

			freq_point[2]=freq_pointer[1] [sampling_position];  // ok , array was too short
 8003a34:	4b80      	ldr	r3, [pc, #512]	; (8003c38 <frq_point+0x218>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	4a80      	ldr	r2, [pc, #512]	; (8003c3c <frq_point+0x21c>)
 8003a3a:	3309      	adds	r3, #9
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a7f      	ldr	r2, [pc, #508]	; (8003c40 <frq_point+0x220>)
 8003a44:	6093      	str	r3, [r2, #8]
			freq_point[4]=freq_pointer[2] [sampling_position];  // ok , array was too short
 8003a46:	4b7c      	ldr	r3, [pc, #496]	; (8003c38 <frq_point+0x218>)
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	4a7c      	ldr	r2, [pc, #496]	; (8003c3c <frq_point+0x21c>)
 8003a4c:	3312      	adds	r3, #18
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a7a      	ldr	r2, [pc, #488]	; (8003c40 <frq_point+0x220>)
 8003a56:	6113      	str	r3, [r2, #16]
			freq_point[6]=freq_pointer[3] [sampling_position];  // ok , array was too short
 8003a58:	4b77      	ldr	r3, [pc, #476]	; (8003c38 <frq_point+0x218>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	4a77      	ldr	r2, [pc, #476]	; (8003c3c <frq_point+0x21c>)
 8003a5e:	331b      	adds	r3, #27
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4413      	add	r3, r2
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a76      	ldr	r2, [pc, #472]	; (8003c40 <frq_point+0x220>)
 8003a68:	6193      	str	r3, [r2, #24]

			if (freq_point[0]>1) freq_point[0]=1; else if (freq_point[0]<0) freq_point[0]=0;// just in case
 8003a6a:	4b75      	ldr	r3, [pc, #468]	; (8003c40 <frq_point+0x220>)
 8003a6c:	edd3 7a00 	vldr	s15, [r3]
 8003a70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a7c:	dd04      	ble.n	8003a88 <frq_point+0x68>
 8003a7e:	4b70      	ldr	r3, [pc, #448]	; (8003c40 <frq_point+0x220>)
 8003a80:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	e00b      	b.n	8003aa0 <frq_point+0x80>
 8003a88:	4b6d      	ldr	r3, [pc, #436]	; (8003c40 <frq_point+0x220>)
 8003a8a:	edd3 7a00 	vldr	s15, [r3]
 8003a8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a96:	d503      	bpl.n	8003aa0 <frq_point+0x80>
 8003a98:	4b69      	ldr	r3, [pc, #420]	; (8003c40 <frq_point+0x220>)
 8003a9a:	f04f 0200 	mov.w	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]
			if (freq_point[4]>1) freq_point[4]=1; else if (freq_point[4]<0) freq_point[4]=0;// just in case
 8003aa0:	4b67      	ldr	r3, [pc, #412]	; (8003c40 <frq_point+0x220>)
 8003aa2:	edd3 7a04 	vldr	s15, [r3, #16]
 8003aa6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003aaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab2:	dd04      	ble.n	8003abe <frq_point+0x9e>
 8003ab4:	4b62      	ldr	r3, [pc, #392]	; (8003c40 <frq_point+0x220>)
 8003ab6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003aba:	611a      	str	r2, [r3, #16]
 8003abc:	e00b      	b.n	8003ad6 <frq_point+0xb6>
 8003abe:	4b60      	ldr	r3, [pc, #384]	; (8003c40 <frq_point+0x220>)
 8003ac0:	edd3 7a04 	vldr	s15, [r3, #16]
 8003ac4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003acc:	d503      	bpl.n	8003ad6 <frq_point+0xb6>
 8003ace:	4b5c      	ldr	r3, [pc, #368]	; (8003c40 <frq_point+0x220>)
 8003ad0:	f04f 0200 	mov.w	r2, #0
 8003ad4:	611a      	str	r2, [r3, #16]
			if (freq_point[2]>1) freq_point[2]=1; else if (freq_point[2]<0) freq_point[2]=0;// just in case
 8003ad6:	4b5a      	ldr	r3, [pc, #360]	; (8003c40 <frq_point+0x220>)
 8003ad8:	edd3 7a02 	vldr	s15, [r3, #8]
 8003adc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ae0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae8:	dd04      	ble.n	8003af4 <frq_point+0xd4>
 8003aea:	4b55      	ldr	r3, [pc, #340]	; (8003c40 <frq_point+0x220>)
 8003aec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003af0:	609a      	str	r2, [r3, #8]
 8003af2:	e00b      	b.n	8003b0c <frq_point+0xec>
 8003af4:	4b52      	ldr	r3, [pc, #328]	; (8003c40 <frq_point+0x220>)
 8003af6:	edd3 7a02 	vldr	s15, [r3, #8]
 8003afa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b02:	d503      	bpl.n	8003b0c <frq_point+0xec>
 8003b04:	4b4e      	ldr	r3, [pc, #312]	; (8003c40 <frq_point+0x220>)
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	609a      	str	r2, [r3, #8]
			if (freq_point[6]>1) freq_point[6]=1; else if (freq_point[6]<0) freq_point[6]=0;// just in case
 8003b0c:	4b4c      	ldr	r3, [pc, #304]	; (8003c40 <frq_point+0x220>)
 8003b0e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003b12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b1e:	dd04      	ble.n	8003b2a <frq_point+0x10a>
 8003b20:	4b47      	ldr	r3, [pc, #284]	; (8003c40 <frq_point+0x220>)
 8003b22:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003b26:	619a      	str	r2, [r3, #24]
 8003b28:	e00b      	b.n	8003b42 <frq_point+0x122>
 8003b2a:	4b45      	ldr	r3, [pc, #276]	; (8003c40 <frq_point+0x220>)
 8003b2c:	edd3 7a06 	vldr	s15, [r3, #24]
 8003b30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b38:	d503      	bpl.n	8003b42 <frq_point+0x122>
 8003b3a:	4b41      	ldr	r3, [pc, #260]	; (8003c40 <frq_point+0x220>)
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	619a      	str	r2, [r3, #24]

			freq_point[1]=1-freq_point[0];
 8003b42:	4b3f      	ldr	r3, [pc, #252]	; (8003c40 <frq_point+0x220>)
 8003b44:	edd3 7a00 	vldr	s15, [r3]
 8003b48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b50:	4b3b      	ldr	r3, [pc, #236]	; (8003c40 <frq_point+0x220>)
 8003b52:	edc3 7a01 	vstr	s15, [r3, #4]
			freq_point[3]=1-freq_point[2];
 8003b56:	4b3a      	ldr	r3, [pc, #232]	; (8003c40 <frq_point+0x220>)
 8003b58:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b64:	4b36      	ldr	r3, [pc, #216]	; (8003c40 <frq_point+0x220>)
 8003b66:	edc3 7a03 	vstr	s15, [r3, #12]
			freq_point[5]=1-freq_point[4];
 8003b6a:	4b35      	ldr	r3, [pc, #212]	; (8003c40 <frq_point+0x220>)
 8003b6c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003b70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b78:	4b31      	ldr	r3, [pc, #196]	; (8003c40 <frq_point+0x220>)
 8003b7a:	edc3 7a05 	vstr	s15, [r3, #20]
			freq_point[7]=1-freq_point[6];
 8003b7e:	4b30      	ldr	r3, [pc, #192]	; (8003c40 <frq_point+0x220>)
 8003b80:	edd3 7a06 	vldr	s15, [r3, #24]
 8003b84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b8c:	4b2c      	ldr	r3, [pc, #176]	; (8003c40 <frq_point+0x220>)
 8003b8e:	edc3 7a07 	vstr	s15, [r3, #28]

			filter_res[0]=freq_point[0]*0.2;
 8003b92:	4b2b      	ldr	r3, [pc, #172]	; (8003c40 <frq_point+0x220>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fc fdb4 	bl	8000704 <__aeabi_f2d>
 8003b9c:	a324      	add	r3, pc, #144	; (adr r3, 8003c30 <frq_point+0x210>)
 8003b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba2:	f7fc fb21 	bl	80001e8 <__aeabi_dmul>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	460b      	mov	r3, r1
 8003baa:	4610      	mov	r0, r2
 8003bac:	4619      	mov	r1, r3
 8003bae:	f7fc fe21 	bl	80007f4 <__aeabi_d2f>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	4a23      	ldr	r2, [pc, #140]	; (8003c44 <frq_point+0x224>)
 8003bb6:	6013      	str	r3, [r2, #0]
			filter_res[1]=freq_point[1]*0.2;
 8003bb8:	4b21      	ldr	r3, [pc, #132]	; (8003c40 <frq_point+0x220>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fc fda1 	bl	8000704 <__aeabi_f2d>
 8003bc2:	a31b      	add	r3, pc, #108	; (adr r3, 8003c30 <frq_point+0x210>)
 8003bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc8:	f7fc fb0e 	bl	80001e8 <__aeabi_dmul>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4610      	mov	r0, r2
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	f7fc fe0e 	bl	80007f4 <__aeabi_d2f>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	4a1a      	ldr	r2, [pc, #104]	; (8003c44 <frq_point+0x224>)
 8003bdc:	6053      	str	r3, [r2, #4]
			filter_res[2]=freq_point[2]*0.2;
 8003bde:	4b18      	ldr	r3, [pc, #96]	; (8003c40 <frq_point+0x220>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fc fd8e 	bl	8000704 <__aeabi_f2d>
 8003be8:	a311      	add	r3, pc, #68	; (adr r3, 8003c30 <frq_point+0x210>)
 8003bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bee:	f7fc fafb 	bl	80001e8 <__aeabi_dmul>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	4610      	mov	r0, r2
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	f7fc fdfb 	bl	80007f4 <__aeabi_d2f>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	4a10      	ldr	r2, [pc, #64]	; (8003c44 <frq_point+0x224>)
 8003c02:	6093      	str	r3, [r2, #8]
			filter_res[3]=freq_point[3]*0.2;
 8003c04:	4b0e      	ldr	r3, [pc, #56]	; (8003c40 <frq_point+0x220>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fc fd7b 	bl	8000704 <__aeabi_f2d>
 8003c0e:	a308      	add	r3, pc, #32	; (adr r3, 8003c30 <frq_point+0x210>)
 8003c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c14:	f7fc fae8 	bl	80001e8 <__aeabi_dmul>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	4619      	mov	r1, r3
 8003c20:	f7fc fde8 	bl	80007f4 <__aeabi_d2f>
 8003c24:	4603      	mov	r3, r0
 8003c26:	4a07      	ldr	r2, [pc, #28]	; (8003c44 <frq_point+0x224>)
 8003c28:	60d3      	str	r3, [r2, #12]

}
 8003c2a:	bf00      	nop
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	9999999a 	.word	0x9999999a
 8003c34:	3fc99999 	.word	0x3fc99999
 8003c38:	2000ebe8 	.word	0x2000ebe8
 8003c3c:	2000c110 	.word	0x2000c110
 8003c40:	2000c0f0 	.word	0x2000c0f0
 8003c44:	2000c0a0 	.word	0x2000c0a0

08003c48 <display_process>:
// disableplay related data

void display_process(void){							// keep data processing here
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0




}   // end o void
 8003c4c:	bf00      	nop
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
	...

08003c58 <displayBuffer2>:


    void displayBuffer2 (void){       // only for feedback line now
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
														    //when scrolling maybe use this only until  settled
	uint16_t feedback_loc=(menu_title_lut[enc_out1]&896)+107;														// start 2*8 bit then squeeze in 20*6 bit characters
 8003c5e:	4b72      	ldr	r3, [pc, #456]	; (8003e28 <displayBuffer2+0x1d0>)
 8003c60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c64:	461a      	mov	r2, r3
 8003c66:	4b71      	ldr	r3, [pc, #452]	; (8003e2c <displayBuffer2+0x1d4>)
 8003c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	336b      	adds	r3, #107	; 0x6b
 8003c76:	80bb      	strh	r3, [r7, #4]

	uint8_t crap_hold9=(menu_title_lut[enc_out1]>>16)&255;
 8003c78:	4b6b      	ldr	r3, [pc, #428]	; (8003e28 <displayBuffer2+0x1d0>)
 8003c7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	4b6a      	ldr	r3, [pc, #424]	; (8003e2c <displayBuffer2+0x1d4>)
 8003c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c86:	0c1b      	lsrs	r3, r3, #16
 8003c88:	70fb      	strb	r3, [r7, #3]

	memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 8003c8a:	78fb      	ldrb	r3, [r7, #3]
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4a68      	ldr	r2, [pc, #416]	; (8003e30 <displayBuffer2+0x1d8>)
 8003c90:	4413      	add	r3, r2
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	4b67      	ldr	r3, [pc, #412]	; (8003e34 <displayBuffer2+0x1dc>)
 8003c96:	6810      	ldr	r0, [r2, #0]
 8003c98:	6851      	ldr	r1, [r2, #4]
 8003c9a:	c303      	stmia	r3!, {r0, r1}
	 char temp_char[]="  ";
 8003c9c:	4a66      	ldr	r2, [pc, #408]	; (8003e38 <displayBuffer2+0x1e0>)
 8003c9e:	463b      	mov	r3, r7
 8003ca0:	6812      	ldr	r2, [r2, #0]
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	8019      	strh	r1, [r3, #0]
 8003ca6:	3302      	adds	r3, #2
 8003ca8:	0c12      	lsrs	r2, r2, #16
 8003caa:	701a      	strb	r2, [r3, #0]
	// char temp_char2[]="________";
				 memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 8003cac:	4b5e      	ldr	r3, [pc, #376]	; (8003e28 <displayBuffer2+0x1d0>)
 8003cae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	4b61      	ldr	r3, [pc, #388]	; (8003e3c <displayBuffer2+0x1e4>)
 8003cb8:	4413      	add	r3, r2
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	803b      	strh	r3, [r7, #0]
				 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 8003cc0:	463b      	mov	r3, r7
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f008 fe70 	bl	800c9a8 <atoi>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	4b5c      	ldr	r3, [pc, #368]	; (8003e40 <displayBuffer2+0x1e8>)
 8003cce:	701a      	strb	r2, [r3, #0]

	menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8003cd0:	4b5b      	ldr	r3, [pc, #364]	; (8003e40 <displayBuffer2+0x1e8>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4857      	ldr	r0, [pc, #348]	; (8003e34 <displayBuffer2+0x1dc>)
 8003cd8:	f7fc ff5e 	bl	8000b98 <menu_vars>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	4a59      	ldr	r2, [pc, #356]	; (8003e44 <displayBuffer2+0x1ec>)
 8003ce0:	6013      	str	r3, [r2, #0]


	     memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+crap_hold9),8);   // copy feedback data for reading,ok
 8003ce2:	88bb      	ldrh	r3, [r7, #4]
 8003ce4:	3308      	adds	r3, #8
 8003ce6:	4a58      	ldr	r2, [pc, #352]	; (8003e48 <displayBuffer2+0x1f0>)
 8003ce8:	1898      	adds	r0, r3, r2
 8003cea:	78fb      	ldrb	r3, [r7, #3]
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	4a50      	ldr	r2, [pc, #320]	; (8003e30 <displayBuffer2+0x1d8>)
 8003cf0:	4413      	add	r3, r2
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2208      	movs	r2, #8
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	f008 fe84 	bl	800ca04 <memcpy>
	     memcpy(default_menu3+feedback_loc+17,potSource+380,3);  // lcd out
 8003cfc:	88bb      	ldrh	r3, [r7, #4]
 8003cfe:	3311      	adds	r3, #17
 8003d00:	4a51      	ldr	r2, [pc, #324]	; (8003e48 <displayBuffer2+0x1f0>)
 8003d02:	4413      	add	r3, r2
 8003d04:	4951      	ldr	r1, [pc, #324]	; (8003e4c <displayBuffer2+0x1f4>)
 8003d06:	2203      	movs	r2, #3
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f008 fe7b 	bl	800ca04 <memcpy>
	     memcpy(default_menu3+feedback_loc+5,temp_char,2);
 8003d0e:	88bb      	ldrh	r3, [r7, #4]
 8003d10:	3305      	adds	r3, #5
 8003d12:	4a4d      	ldr	r2, [pc, #308]	; (8003e48 <displayBuffer2+0x1f0>)
 8003d14:	4413      	add	r3, r2
 8003d16:	883a      	ldrh	r2, [r7, #0]
 8003d18:	801a      	strh	r2, [r3, #0]

	     if (menu_vars_ref==5) target_display=1;
 8003d1a:	4b4d      	ldr	r3, [pc, #308]	; (8003e50 <displayBuffer2+0x1f8>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	2b05      	cmp	r3, #5
 8003d20:	d102      	bne.n	8003d28 <displayBuffer2+0xd0>
 8003d22:	4b4c      	ldr	r3, [pc, #304]	; (8003e54 <displayBuffer2+0x1fc>)
 8003d24:	2201      	movs	r2, #1
 8003d26:	701a      	strb	r2, [r3, #0]
	     if (menu_vars_ref==36) target_display=2;
 8003d28:	4b49      	ldr	r3, [pc, #292]	; (8003e50 <displayBuffer2+0x1f8>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b24      	cmp	r3, #36	; 0x24
 8003d2e:	d102      	bne.n	8003d36 <displayBuffer2+0xde>
 8003d30:	4b48      	ldr	r3, [pc, #288]	; (8003e54 <displayBuffer2+0x1fc>)
 8003d32:	2202      	movs	r2, #2
 8003d34:	701a      	strb	r2, [r3, #0]
	     if((48<menu_vars_ref)    && (menu_vars_ref<53)) target_display=3;
 8003d36:	4b46      	ldr	r3, [pc, #280]	; (8003e50 <displayBuffer2+0x1f8>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b30      	cmp	r3, #48	; 0x30
 8003d3c:	d906      	bls.n	8003d4c <displayBuffer2+0xf4>
 8003d3e:	4b44      	ldr	r3, [pc, #272]	; (8003e50 <displayBuffer2+0x1f8>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	2b34      	cmp	r3, #52	; 0x34
 8003d44:	d802      	bhi.n	8003d4c <displayBuffer2+0xf4>
 8003d46:	4b43      	ldr	r3, [pc, #268]	; (8003e54 <displayBuffer2+0x1fc>)
 8003d48:	2203      	movs	r2, #3
 8003d4a:	701a      	strb	r2, [r3, #0]
	 //    if((48<menu_vars_ref)    && (menu_vars_ref<53)) memcpy(LCD_Info+3, *(menu_titles_final+(*menu_vars_var)),8);  // send target for LFO_sqr  to LCD_Info


		 if (target_display)      // write LFO.target display , might use it for other things too
 8003d4c:	4b41      	ldr	r3, [pc, #260]	; (8003e54 <displayBuffer2+0x1fc>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d054      	beq.n	8003dfe <displayBuffer2+0x1a6>
	     	{
	     		uint8_t target_tmp1=*menu_vars_var ;   // this can be put anywhere now
 8003d54:	4b3b      	ldr	r3, [pc, #236]	; (8003e44 <displayBuffer2+0x1ec>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	71fb      	strb	r3, [r7, #7]
	     		if (target_tmp1>=menu_lookup_count) target_tmp1=0;    // check in case
 8003d5c:	79fb      	ldrb	r3, [r7, #7]
 8003d5e:	2b3c      	cmp	r3, #60	; 0x3c
 8003d60:	d901      	bls.n	8003d66 <displayBuffer2+0x10e>
 8003d62:	2300      	movs	r3, #0
 8003d64:	71fb      	strb	r3, [r7, #7]
	     		if (target_display==1) memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+target_tmp1),8);  // copy info for LFO
 8003d66:	4b3b      	ldr	r3, [pc, #236]	; (8003e54 <displayBuffer2+0x1fc>)
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d10c      	bne.n	8003d88 <displayBuffer2+0x130>
 8003d6e:	88bb      	ldrh	r3, [r7, #4]
 8003d70:	3308      	adds	r3, #8
 8003d72:	4a35      	ldr	r2, [pc, #212]	; (8003e48 <displayBuffer2+0x1f0>)
 8003d74:	1898      	adds	r0, r3, r2
 8003d76:	79fb      	ldrb	r3, [r7, #7]
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4a2d      	ldr	r2, [pc, #180]	; (8003e30 <displayBuffer2+0x1d8>)
 8003d7c:	4413      	add	r3, r2
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2208      	movs	r2, #8
 8003d82:	4619      	mov	r1, r3
 8003d84:	f008 fe3e 	bl	800ca04 <memcpy>
	     		if (target_display==2) memcpy(default_menu3+feedback_loc+8, *(patch_inputs+target_tmp1),8);  // Limited atm
 8003d88:	4b32      	ldr	r3, [pc, #200]	; (8003e54 <displayBuffer2+0x1fc>)
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d10c      	bne.n	8003daa <displayBuffer2+0x152>
 8003d90:	88bb      	ldrh	r3, [r7, #4]
 8003d92:	3308      	adds	r3, #8
 8003d94:	4a2c      	ldr	r2, [pc, #176]	; (8003e48 <displayBuffer2+0x1f0>)
 8003d96:	1898      	adds	r0, r3, r2
 8003d98:	79fb      	ldrb	r3, [r7, #7]
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4a2e      	ldr	r2, [pc, #184]	; (8003e58 <displayBuffer2+0x200>)
 8003d9e:	4413      	add	r3, r2
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2208      	movs	r2, #8
 8003da4:	4619      	mov	r1, r3
 8003da6:	f008 fe2d 	bl	800ca04 <memcpy>
	     	//	if (target_display==3) memcpy(LCD_Info+3,  *(patch[].target+target_tmp1),8);  // Limited atm
	     		if  (target_display==3)   //  patch feedback works ok
 8003daa:	4b2a      	ldr	r3, [pc, #168]	; (8003e54 <displayBuffer2+0x1fc>)
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	2b03      	cmp	r3, #3
 8003db0:	d125      	bne.n	8003dfe <displayBuffer2+0x1a6>
	     		    {    if (LFO_sqr_list[menu_index_in&7])   {memcpy(LCD_Info+3,  menu_titles_final[sqr_target_list[menu_index_in&7]],6);LCD_Info[10]=LFO_sqr_list[menu_index_in&7];
 8003db2:	4b23      	ldr	r3, [pc, #140]	; (8003e40 <displayBuffer2+0x1e8>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	4a28      	ldr	r2, [pc, #160]	; (8003e5c <displayBuffer2+0x204>)
 8003dbc:	5cd3      	ldrb	r3, [r2, r3]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d017      	beq.n	8003df2 <displayBuffer2+0x19a>
 8003dc2:	4827      	ldr	r0, [pc, #156]	; (8003e60 <displayBuffer2+0x208>)
 8003dc4:	4b1e      	ldr	r3, [pc, #120]	; (8003e40 <displayBuffer2+0x1e8>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	4a25      	ldr	r2, [pc, #148]	; (8003e64 <displayBuffer2+0x20c>)
 8003dce:	5cd3      	ldrb	r3, [r2, r3]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	4b17      	ldr	r3, [pc, #92]	; (8003e30 <displayBuffer2+0x1d8>)
 8003dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dd8:	2206      	movs	r2, #6
 8003dda:	4619      	mov	r1, r3
 8003ddc:	f008 fe12 	bl	800ca04 <memcpy>
 8003de0:	4b17      	ldr	r3, [pc, #92]	; (8003e40 <displayBuffer2+0x1e8>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	4a1c      	ldr	r2, [pc, #112]	; (8003e5c <displayBuffer2+0x204>)
 8003dea:	5cd2      	ldrb	r2, [r2, r3]
 8003dec:	4b1e      	ldr	r3, [pc, #120]	; (8003e68 <displayBuffer2+0x210>)
 8003dee:	729a      	strb	r2, [r3, #10]
 8003df0:	e005      	b.n	8003dfe <displayBuffer2+0x1a6>

	     		    }  // ok
	     		 else memcpy(LCD_Info+3,"        ",8); //11
 8003df2:	4b1b      	ldr	r3, [pc, #108]	; (8003e60 <displayBuffer2+0x208>)
 8003df4:	2208      	movs	r2, #8
 8003df6:	491d      	ldr	r1, [pc, #116]	; (8003e6c <displayBuffer2+0x214>)
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f008 fe03 	bl	800ca04 <memcpy>
	     		    }
	     	}

	     target_display=0;
 8003dfe:	4b15      	ldr	r3, [pc, #84]	; (8003e54 <displayBuffer2+0x1fc>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	701a      	strb	r2, [r3, #0]





	     if (disp_stepper==17) {disp_stepper=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8003e04:	4b1a      	ldr	r3, [pc, #104]	; (8003e70 <displayBuffer2+0x218>)
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	2b11      	cmp	r3, #17
 8003e0a:	d103      	bne.n	8003e14 <displayBuffer2+0x1bc>
 8003e0c:	4b18      	ldr	r3, [pc, #96]	; (8003e70 <displayBuffer2+0x218>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	701a      	strb	r2, [r3, #0]


    }    // displayBuffer2
 8003e12:	e005      	b.n	8003e20 <displayBuffer2+0x1c8>
	     if (disp_stepper==17) {disp_stepper=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8003e14:	4b16      	ldr	r3, [pc, #88]	; (8003e70 <displayBuffer2+0x218>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	4b14      	ldr	r3, [pc, #80]	; (8003e70 <displayBuffer2+0x218>)
 8003e1e:	701a      	strb	r2, [r3, #0]
    }    // displayBuffer2
 8003e20:	bf00      	nop
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	20008ed8 	.word	0x20008ed8
 8003e2c:	2000dfd4 	.word	0x2000dfd4
 8003e30:	20000000 	.word	0x20000000
 8003e34:	2000ebd8 	.word	0x2000ebd8
 8003e38:	0800d198 	.word	0x0800d198
 8003e3c:	2000e7d4 	.word	0x2000e7d4
 8003e40:	2000ebe0 	.word	0x2000ebe0
 8003e44:	2000ebd4 	.word	0x2000ebd4
 8003e48:	20008f74 	.word	0x20008f74
 8003e4c:	20009754 	.word	0x20009754
 8003e50:	20010c11 	.word	0x20010c11
 8003e54:	2000ebe7 	.word	0x2000ebe7
 8003e58:	200000f4 	.word	0x200000f4
 8003e5c:	20011e20 	.word	0x20011e20
 8003e60:	2001202f 	.word	0x2001202f
 8003e64:	20012090 	.word	0x20012090
 8003e68:	2001202c 	.word	0x2001202c
 8003e6c:	0800d18c 	.word	0x0800d18c
 8003e70:	20008e04 	.word	0x20008e04

08003e74 <SPI_command>:

void SPI_command(void){
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
// pins are all good , SPI is always the problem!!!
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 8003e7a:	4b18      	ldr	r3, [pc, #96]	; (8003edc <SPI_command+0x68>)
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d128      	bne.n	8003ed4 <SPI_command+0x60>
 8003e82:	4b17      	ldr	r3, [pc, #92]	; (8003ee0 <SPI_command+0x6c>)
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d124      	bne.n	8003ed4 <SPI_command+0x60>

uint8_t spi_store[5];

	//clk_pin=(i&1)^1;
		//bsrr_long=0;
		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8003e8a:	4b16      	ldr	r3, [pc, #88]	; (8003ee4 <SPI_command+0x70>)
 8003e8c:	881b      	ldrh	r3, [r3, #0]
 8003e8e:	0a1b      	lsrs	r3, r3, #8
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <SPI_command+0x2a>
 8003e96:	4b14      	ldr	r3, [pc, #80]	; (8003ee8 <SPI_command+0x74>)
 8003e98:	22f8      	movs	r2, #248	; 0xf8
 8003e9a:	701a      	strb	r2, [r3, #0]
 8003e9c:	e002      	b.n	8003ea4 <SPI_command+0x30>
 8003e9e:	4b12      	ldr	r3, [pc, #72]	; (8003ee8 <SPI_command+0x74>)
 8003ea0:	22fa      	movs	r2, #250	; 0xfa
 8003ea2:	701a      	strb	r2, [r3, #0]

	spi_store[0]=spi_byte&255;
 8003ea4:	4b10      	ldr	r3, [pc, #64]	; (8003ee8 <SPI_command+0x74>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	703b      	strb	r3, [r7, #0]
	spi_store[1]=((spi_hold>>4)<<4)&255;
 8003eaa:	4b0e      	ldr	r3, [pc, #56]	; (8003ee4 <SPI_command+0x70>)
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	091b      	lsrs	r3, r3, #4
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	707b      	strb	r3, [r7, #1]
	spi_store[2]=((spi_hold&15)<<4)&255;
 8003eb8:	4b0a      	ldr	r3, [pc, #40]	; (8003ee4 <SPI_command+0x70>)
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	011b      	lsls	r3, r3, #4
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	70bb      	strb	r3, [r7, #2]

// send this to spi for now
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3,3
 8003ec2:	4639      	mov	r1, r7
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	2203      	movs	r2, #3
 8003ec8:	4808      	ldr	r0, [pc, #32]	; (8003eec <SPI_command+0x78>)
 8003eca:	f006 f898 	bl	8009ffe <HAL_SPI_Transmit>
			);  // working good


//HAL_Delay(10);
	spi_enable=1; }
 8003ece:	4b03      	ldr	r3, [pc, #12]	; (8003edc <SPI_command+0x68>)
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	801a      	strh	r2, [r3, #0]
}
 8003ed4:	bf00      	nop
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	2000c084 	.word	0x2000c084
 8003ee0:	2000c08a 	.word	0x2000c08a
 8003ee4:	2000c088 	.word	0x2000c088
 8003ee8:	2000c086 	.word	0x2000c086
 8003eec:	200128ac 	.word	0x200128ac

08003ef0 <display_init>:

void display_init(void){
 8003ef0:	b5b0      	push	{r4, r5, r7, lr}
 8003ef2:	b08a      	sub	sp, #40	; 0x28
 8003ef4:	af00      	add	r7, sp, #0
	//uint8_t sp2_command=0xf8+(0<<1);
		 // uint16_t disp[]={  304,304,304,270,257,268,384,258,51,51,52,53,54,55,56,57,58,0};  // normal characters
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd 310 is extended instruction
 8003ef6:	4b22      	ldr	r3, [pc, #136]	; (8003f80 <display_init+0x90>)
 8003ef8:	1d3c      	adds	r4, r7, #4
 8003efa:	461d      	mov	r5, r3
 8003efc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f04:	682b      	ldr	r3, [r5, #0]
 8003f06:	8023      	strh	r3, [r4, #0]
		  if (spi_send==0){         // sets data byte
 8003f08:	4b1e      	ldr	r3, [pc, #120]	; (8003f84 <display_init+0x94>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d132      	bne.n	8003f76 <display_init+0x86>

switch(init){     //Remember every line advances +char on display ,,all this is mostly unneeded

default : init_b=init-6;displayBuffer2 ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 8003f10:	4b1d      	ldr	r3, [pc, #116]	; (8003f88 <display_init+0x98>)
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3b06      	subs	r3, #6
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	4b1c      	ldr	r3, [pc, #112]	; (8003f8c <display_init+0x9c>)
 8003f1c:	801a      	strh	r2, [r3, #0]
 8003f1e:	f7ff fe9b 	bl	8003c58 <displayBuffer2>
 8003f22:	4b1a      	ldr	r3, [pc, #104]	; (8003f8c <display_init+0x9c>)
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	461a      	mov	r2, r3
 8003f28:	4b19      	ldr	r3, [pc, #100]	; (8003f90 <display_init+0xa0>)
 8003f2a:	5c9b      	ldrb	r3, [r3, r2]
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	4b19      	ldr	r3, [pc, #100]	; (8003f94 <display_init+0xa4>)
 8003f30:	801a      	strh	r2, [r3, #0]
 8003f32:	bf00      	nop
}


if (init<6)	{HAL_Delay(3);spi_hold=disp[init]  ; } //delay needs to go
 8003f34:	4b14      	ldr	r3, [pc, #80]	; (8003f88 <display_init+0x98>)
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	2b05      	cmp	r3, #5
 8003f3a:	d80b      	bhi.n	8003f54 <display_init+0x64>
 8003f3c:	2003      	movs	r0, #3
 8003f3e:	f002 fc81 	bl	8006844 <HAL_Delay>
 8003f42:	4b11      	ldr	r3, [pc, #68]	; (8003f88 <display_init+0x98>)
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	3328      	adds	r3, #40	; 0x28
 8003f4a:	443b      	add	r3, r7
 8003f4c:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8003f50:	4b10      	ldr	r3, [pc, #64]	; (8003f94 <display_init+0xa4>)
 8003f52:	801a      	strh	r2, [r3, #0]

init++;   // after 6 it quits the rest is not needed
 8003f54:	4b0c      	ldr	r3, [pc, #48]	; (8003f88 <display_init+0x98>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <display_init+0x98>)
 8003f5e:	701a      	strb	r2, [r3, #0]
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 8003f60:	4b08      	ldr	r3, [pc, #32]	; (8003f84 <display_init+0x94>)
 8003f62:	2201      	movs	r2, #1
 8003f64:	701a      	strb	r2, [r3, #0]
 8003f66:	f7ff ff85 	bl	8003e74 <SPI_command>
 8003f6a:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <display_init+0x94>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	701a      	strb	r2, [r3, #0]
 8003f70:	4b09      	ldr	r3, [pc, #36]	; (8003f98 <display_init+0xa8>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	801a      	strh	r2, [r3, #0]


		  }

		//  if (init==5) display_fill();
}
 8003f76:	bf00      	nop
 8003f78:	3728      	adds	r7, #40	; 0x28
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bdb0      	pop	{r4, r5, r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	0800d19c 	.word	0x0800d19c
 8003f84:	2000c08a 	.word	0x2000c08a
 8003f88:	2000c08b 	.word	0x2000c08b
 8003f8c:	2000c08c 	.word	0x2000c08c
 8003f90:	20008cb4 	.word	0x20008cb4
 8003f94:	2000c088 	.word	0x2000c088
 8003f98:	2000c084 	.word	0x2000c084

08003f9c <gfx_TX_block>:
			if (gfx_send_counter==1151 ) { gfx_send_counter=0; disp_end=1; gfx_send_counter2=0;    } else gfx_send_counter++; ;

			} HAL_SPI_Transmit_DMA(&hspi2,spi_store,54);  // ok

}
void gfx_TX_block(void){         // send spi to lcd from gfx ram , full page needed initially as it writes commands as well
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0


			uint8_t spi_store[3];
			uint8_t spi_store2=0;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	73fb      	strb	r3, [r7, #15]
			uint8_t spi_store3=0;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	72bb      	strb	r3, [r7, #10]
			uint16_t  up_counter=0;
 8003faa:	2300      	movs	r3, #0
 8003fac:	81bb      	strh	r3, [r7, #12]
			uint8_t line_counter=0;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	72fb      	strb	r3, [r7, #11]

			gfx_send_counter=0;
 8003fb2:	4b25      	ldr	r3, [pc, #148]	; (8004048 <gfx_TX_block+0xac>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	801a      	strh	r2, [r3, #0]
			for (up_counter=0;up_counter<3456;up_counter=up_counter+3){     // no more than one line then needs pause
 8003fb8:	2300      	movs	r3, #0
 8003fba:	81bb      	strh	r3, [r7, #12]
 8003fbc:	e034      	b.n	8004028 <gfx_TX_block+0x8c>


			    spi_store3=gfx_ram[gfx_send_counter];
 8003fbe:	4b22      	ldr	r3, [pc, #136]	; (8004048 <gfx_TX_block+0xac>)
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	4b21      	ldr	r3, [pc, #132]	; (800404c <gfx_TX_block+0xb0>)
 8003fc6:	5c9b      	ldrb	r3, [r3, r2]
 8003fc8:	72bb      	strb	r3, [r7, #10]
			    if (line_counter>1) {spi_store2=250;					// 2ms delay between location commands , data is ok full speed
 8003fca:	7afb      	ldrb	r3, [r7, #11]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d902      	bls.n	8003fd6 <gfx_TX_block+0x3a>
 8003fd0:	23fa      	movs	r3, #250	; 0xfa
 8003fd2:	73fb      	strb	r3, [r7, #15]
 8003fd4:	e001      	b.n	8003fda <gfx_TX_block+0x3e>
			}
			else {spi_store2=248;    }//start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8003fd6:	23f8      	movs	r3, #248	; 0xf8
 8003fd8:	73fb      	strb	r3, [r7, #15]

					spi_store[0]=spi_store2;
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
 8003fdc:	713b      	strb	r3, [r7, #4]
					spi_store[1]=((spi_store3>>4)<<4);
 8003fde:	7abb      	ldrb	r3, [r7, #10]
 8003fe0:	091b      	lsrs	r3, r3, #4
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	717b      	strb	r3, [r7, #5]
					spi_store[2]=((spi_store3&15)<<4);
 8003fea:	7abb      	ldrb	r3, [r7, #10]
 8003fec:	011b      	lsls	r3, r3, #4
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	71bb      	strb	r3, [r7, #6]
					memcpy(spi_tx_block+up_counter,spi_store,3);
 8003ff2:	89bb      	ldrh	r3, [r7, #12]
 8003ff4:	4a16      	ldr	r2, [pc, #88]	; (8004050 <gfx_TX_block+0xb4>)
 8003ff6:	4413      	add	r3, r2
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	1d3b      	adds	r3, r7, #4
 8003ffc:	8819      	ldrh	r1, [r3, #0]
 8003ffe:	789b      	ldrb	r3, [r3, #2]
 8004000:	8011      	strh	r1, [r2, #0]
 8004002:	7093      	strb	r3, [r2, #2]
					if (line_counter==17 ) { line_counter=0;    } else line_counter++; //
 8004004:	7afb      	ldrb	r3, [r7, #11]
 8004006:	2b11      	cmp	r3, #17
 8004008:	d102      	bne.n	8004010 <gfx_TX_block+0x74>
 800400a:	2300      	movs	r3, #0
 800400c:	72fb      	strb	r3, [r7, #11]
 800400e:	e002      	b.n	8004016 <gfx_TX_block+0x7a>
 8004010:	7afb      	ldrb	r3, [r7, #11]
 8004012:	3301      	adds	r3, #1
 8004014:	72fb      	strb	r3, [r7, #11]
			 gfx_send_counter++; ;
 8004016:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <gfx_TX_block+0xac>)
 8004018:	881b      	ldrh	r3, [r3, #0]
 800401a:	3301      	adds	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	4b0a      	ldr	r3, [pc, #40]	; (8004048 <gfx_TX_block+0xac>)
 8004020:	801a      	strh	r2, [r3, #0]
			for (up_counter=0;up_counter<3456;up_counter=up_counter+3){     // no more than one line then needs pause
 8004022:	89bb      	ldrh	r3, [r7, #12]
 8004024:	3303      	adds	r3, #3
 8004026:	81bb      	strh	r3, [r7, #12]
 8004028:	89bb      	ldrh	r3, [r7, #12]
 800402a:	f5b3 6f58 	cmp.w	r3, #3456	; 0xd80
 800402e:	d3c6      	bcc.n	8003fbe <gfx_TX_block+0x22>

			} ;  // ok
			gfx_send_counter=0; disp_end=1;
 8004030:	4b05      	ldr	r3, [pc, #20]	; (8004048 <gfx_TX_block+0xac>)
 8004032:	2200      	movs	r2, #0
 8004034:	801a      	strh	r2, [r3, #0]
 8004036:	4b07      	ldr	r3, [pc, #28]	; (8004054 <gfx_TX_block+0xb8>)
 8004038:	2201      	movs	r2, #1
 800403a:	701a      	strb	r2, [r3, #0]

}
 800403c:	bf00      	nop
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	2000ca2a 	.word	0x2000ca2a
 800404c:	2000c5a8 	.word	0x2000c5a8
 8004050:	20010e1c 	.word	0x20010e1c
 8004054:	2000ca36 	.word	0x2000ca36

08004058 <gfx_clear>:

void gfx_clear(void){     // simple gfx ram clear ,besides feedback
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0

	for (n=0;n<1152 ;n=n+18)    {
 800405c:	4b19      	ldr	r3, [pc, #100]	; (80040c4 <gfx_clear+0x6c>)
 800405e:	2200      	movs	r2, #0
 8004060:	801a      	strh	r2, [r3, #0]
 8004062:	e01c      	b.n	800409e <gfx_clear+0x46>
				for (i=2;i<18;i++){ gfx_ram[n+i] =0;
 8004064:	4b18      	ldr	r3, [pc, #96]	; (80040c8 <gfx_clear+0x70>)
 8004066:	2202      	movs	r2, #2
 8004068:	801a      	strh	r2, [r3, #0]
 800406a:	e00e      	b.n	800408a <gfx_clear+0x32>
 800406c:	4b15      	ldr	r3, [pc, #84]	; (80040c4 <gfx_clear+0x6c>)
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	461a      	mov	r2, r3
 8004072:	4b15      	ldr	r3, [pc, #84]	; (80040c8 <gfx_clear+0x70>)
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	4413      	add	r3, r2
 8004078:	4a14      	ldr	r2, [pc, #80]	; (80040cc <gfx_clear+0x74>)
 800407a:	2100      	movs	r1, #0
 800407c:	54d1      	strb	r1, [r2, r3]
 800407e:	4b12      	ldr	r3, [pc, #72]	; (80040c8 <gfx_clear+0x70>)
 8004080:	881b      	ldrh	r3, [r3, #0]
 8004082:	3301      	adds	r3, #1
 8004084:	b29a      	uxth	r2, r3
 8004086:	4b10      	ldr	r3, [pc, #64]	; (80040c8 <gfx_clear+0x70>)
 8004088:	801a      	strh	r2, [r3, #0]
 800408a:	4b0f      	ldr	r3, [pc, #60]	; (80040c8 <gfx_clear+0x70>)
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	2b11      	cmp	r3, #17
 8004090:	d9ec      	bls.n	800406c <gfx_clear+0x14>
	for (n=0;n<1152 ;n=n+18)    {
 8004092:	4b0c      	ldr	r3, [pc, #48]	; (80040c4 <gfx_clear+0x6c>)
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	3312      	adds	r3, #18
 8004098:	b29a      	uxth	r2, r3
 800409a:	4b0a      	ldr	r3, [pc, #40]	; (80040c4 <gfx_clear+0x6c>)
 800409c:	801a      	strh	r2, [r3, #0]
 800409e:	4b09      	ldr	r3, [pc, #36]	; (80040c4 <gfx_clear+0x6c>)
 80040a0:	881b      	ldrh	r3, [r3, #0]
 80040a2:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80040a6:	d3dd      	bcc.n	8004064 <gfx_clear+0xc>

				}  }
	 gfx_send_swap=0;  // disable line skip
 80040a8:	4b09      	ldr	r3, [pc, #36]	; (80040d0 <gfx_clear+0x78>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	701a      	strb	r2, [r3, #0]
	 gfx_send_counter=0;    //reset page
 80040ae:	4b09      	ldr	r3, [pc, #36]	; (80040d4 <gfx_clear+0x7c>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	801a      	strh	r2, [r3, #0]
	 disp_end=0;     //  should disable display process till one page
 80040b4:	4b08      	ldr	r3, [pc, #32]	; (80040d8 <gfx_clear+0x80>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	701a      	strb	r2, [r3, #0]

}
 80040ba:	bf00      	nop
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	2000983c 	.word	0x2000983c
 80040c8:	20009842 	.word	0x20009842
 80040cc:	2000c5a8 	.word	0x2000c5a8
 80040d0:	2000ca2c 	.word	0x2000ca2c
 80040d4:	2000ca2a 	.word	0x2000ca2a
 80040d8:	2000ca36 	.word	0x2000ca36

080040dc <display_clear>:

		 gfx_send();

	 }  }

void display_clear (void){ //  simple character clear on default menu3
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0

	uint16_t disp_counter=0;
 80040e2:	2300      	movs	r3, #0
 80040e4:	80fb      	strh	r3, [r7, #6]
	for (disp_counter=0;disp_counter<1024;disp_counter++){
 80040e6:	2300      	movs	r3, #0
 80040e8:	80fb      	strh	r3, [r7, #6]
 80040ea:	e006      	b.n	80040fa <display_clear+0x1e>
		default_menu3[disp_counter]=47;
 80040ec:	88fb      	ldrh	r3, [r7, #6]
 80040ee:	4a08      	ldr	r2, [pc, #32]	; (8004110 <display_clear+0x34>)
 80040f0:	212f      	movs	r1, #47	; 0x2f
 80040f2:	54d1      	strb	r1, [r2, r3]
	for (disp_counter=0;disp_counter<1024;disp_counter++){
 80040f4:	88fb      	ldrh	r3, [r7, #6]
 80040f6:	3301      	adds	r3, #1
 80040f8:	80fb      	strh	r3, [r7, #6]
 80040fa:	88fb      	ldrh	r3, [r7, #6]
 80040fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004100:	d3f4      	bcc.n	80040ec <display_clear+0x10>
	}


}
 8004102:	bf00      	nop
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	20008f74 	.word	0x20008f74

08004114 <display_generate>:
void display_generate(void){    // display character generate, 1+1+16 chars
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
uint8_t counter;
	gfx_clear_flag=0;
 8004118:	4b05      	ldr	r3, [pc, #20]	; (8004130 <display_generate+0x1c>)
 800411a:	2200      	movs	r2, #0
 800411c:	701a      	strb	r2, [r3, #0]
//	for (counter=0;counter<18;counter++) {
	display_process();
 800411e:	f7ff fd93 	bl	8003c48 <display_process>
		  displayBuffer2(); // 5 cycles max for the lot or  0.2ms
 8004122:	f7ff fd99 	bl	8003c58 <displayBuffer2>
	// if(!gfx_clear_flag)   gfx_send_swap=1;   // enable line swapping
	 disp_end=0;   ///reset till next full page
 8004126:	4b03      	ldr	r3, [pc, #12]	; (8004134 <display_generate+0x20>)
 8004128:	2200      	movs	r2, #0
 800412a:	701a      	strb	r2, [r3, #0]

	//  if (!disp_stepper) break;

}
 800412c:	bf00      	nop
 800412e:	bd80      	pop	{r7, pc}
 8004130:	2000ebea 	.word	0x2000ebea
 8004134:	2000ca36 	.word	0x2000ca36

08004138 <gfx_line_fill>:



}

void gfx_line_fill (){   // fills a line to gfx_ram from default_menu3 also fills gfx_block
 8004138:	b480      	push	{r7}
 800413a:	b08b      	sub	sp, #44	; 0x2c
 800413c:	af00      	add	r7, sp, #0
		    // this now is the  emain char to disp
   // uint8_t line_selected=(loop_counter&7)+((menu_title_lut[enc_out1]>>7)*8);

    uint16_t cursor= menu_title_lut[enc_out1];
 800413e:	4b5c      	ldr	r3, [pc, #368]	; (80042b0 <gfx_line_fill+0x178>)
 8004140:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004144:	461a      	mov	r2, r3
 8004146:	4b5b      	ldr	r3, [pc, #364]	; (80042b4 <gfx_line_fill+0x17c>)
 8004148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800414c:	84bb      	strh	r3, [r7, #36]	; 0x24
    uint16_t line_selected=(loop_counter&7)+((cursor>>7)*8);    // thsi needs to be 1024/16
 800414e:	4b5a      	ldr	r3, [pc, #360]	; (80042b8 <gfx_line_fill+0x180>)
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	b29b      	uxth	r3, r3
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	b29a      	uxth	r2, r3
 800415a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800415c:	09db      	lsrs	r3, r3, #7
 800415e:	b29b      	uxth	r3, r3
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	b29b      	uxth	r3, r3
 8004164:	4413      	add	r3, r2
 8004166:	847b      	strh	r3, [r7, #34]	; 0x22
    uint16_t start_line=(line_selected&7)*144;
 8004168:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	b29b      	uxth	r3, r3
 8004170:	461a      	mov	r2, r3
 8004172:	00d2      	lsls	r2, r2, #3
 8004174:	4413      	add	r3, r2
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	843b      	strh	r3, [r7, #32]
     uint16_t end_line=start_line+144;
 800417a:	8c3b      	ldrh	r3, [r7, #32]
 800417c:	3390      	adds	r3, #144	; 0x90
 800417e:	83fb      	strh	r3, [r7, #30]
     disp_end=1;
 8004180:	4b4e      	ldr	r3, [pc, #312]	; (80042bc <gfx_line_fill+0x184>)
 8004182:	2201      	movs	r2, #1
 8004184:	701a      	strb	r2, [r3, #0]
   //  uint8_t  character=default_menu3[(i-2)+(line_selected*16)]-47;
    uint8_t char_skip=0;
 8004186:	2300      	movs	r3, #0
 8004188:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
     uint16_t character;
     uint8_t spi_store[3];
     uint8_t spi_store3=0;
 800418c:	2300      	movs	r3, #0
 800418e:	777b      	strb	r3, [r7, #29]
     uint8_t reverse[16]={0};
 8004190:	2300      	movs	r3, #0
 8004192:	607b      	str	r3, [r7, #4]
 8004194:	f107 0308 	add.w	r3, r7, #8
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	605a      	str	r2, [r3, #4]
 800419e:	609a      	str	r2, [r3, #8]



     if ((cursor>>4) == line_selected)    reverse [(cursor&15)]=1;
 80041a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041a2:	091b      	lsrs	r3, r3, #4
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d107      	bne.n	80041bc <gfx_line_fill+0x84>
 80041ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	3328      	adds	r3, #40	; 0x28
 80041b4:	443b      	add	r3, r7
 80041b6:	2201      	movs	r2, #1
 80041b8:	f803 2c24 	strb.w	r2, [r3, #-36]

     for (n=start_line;n<end_line ;n=n+18)    {    //  8*18   , 0-1152
 80041bc:	4a40      	ldr	r2, [pc, #256]	; (80042c0 <gfx_line_fill+0x188>)
 80041be:	8c3b      	ldrh	r3, [r7, #32]
 80041c0:	8013      	strh	r3, [r2, #0]
 80041c2:	e068      	b.n	8004296 <gfx_line_fill+0x15e>

	 for (i=0;i<16;i++){
 80041c4:	4b3f      	ldr	r3, [pc, #252]	; (80042c4 <gfx_line_fill+0x18c>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	801a      	strh	r2, [r3, #0]
 80041ca:	e055      	b.n	8004278 <gfx_line_fill+0x140>
		 character=((default_menu3[i+(line_selected*16)]-47)*8)+char_skip;
 80041cc:	4b3d      	ldr	r3, [pc, #244]	; (80042c4 <gfx_line_fill+0x18c>)
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	461a      	mov	r2, r3
 80041d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	4413      	add	r3, r2
 80041d8:	4a3b      	ldr	r2, [pc, #236]	; (80042c8 <gfx_line_fill+0x190>)
 80041da:	5cd3      	ldrb	r3, [r2, r3]
 80041dc:	3b2f      	subs	r3, #47	; 0x2f
 80041de:	b29b      	uxth	r3, r3
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	4413      	add	r3, r2
 80041ec:	837b      	strh	r3, [r7, #26]
		 spi_store3= gfx_char[character&1023 ];     // limited characters
 80041ee:	8b7b      	ldrh	r3, [r7, #26]
 80041f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041f4:	4a35      	ldr	r2, [pc, #212]	; (80042cc <gfx_line_fill+0x194>)
 80041f6:	5cd3      	ldrb	r3, [r2, r3]
 80041f8:	777b      	strb	r3, [r7, #29]
		spi_store3=spi_store3^(reverse[i]*127);
 80041fa:	4b32      	ldr	r3, [pc, #200]	; (80042c4 <gfx_line_fill+0x18c>)
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	3328      	adds	r3, #40	; 0x28
 8004200:	443b      	add	r3, r7
 8004202:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004206:	461a      	mov	r2, r3
 8004208:	01d2      	lsls	r2, r2, #7
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	b2db      	uxtb	r3, r3
 800420e:	b25a      	sxtb	r2, r3
 8004210:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8004214:	4053      	eors	r3, r2
 8004216:	b25b      	sxtb	r3, r3
 8004218:	777b      	strb	r3, [r7, #29]
		 gfx_ram[n+i+2]=spi_store3;
 800421a:	4b29      	ldr	r3, [pc, #164]	; (80042c0 <gfx_line_fill+0x188>)
 800421c:	881b      	ldrh	r3, [r3, #0]
 800421e:	461a      	mov	r2, r3
 8004220:	4b28      	ldr	r3, [pc, #160]	; (80042c4 <gfx_line_fill+0x18c>)
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	4413      	add	r3, r2
 8004226:	3302      	adds	r3, #2
 8004228:	4929      	ldr	r1, [pc, #164]	; (80042d0 <gfx_line_fill+0x198>)
 800422a:	7f7a      	ldrb	r2, [r7, #29]
 800422c:	54ca      	strb	r2, [r1, r3]

						    spi_store[0]=250;
 800422e:	23fa      	movs	r3, #250	; 0xfa
 8004230:	753b      	strb	r3, [r7, #20]
						    spi_store[1]=((spi_store3>>4)<<4);
 8004232:	7f7b      	ldrb	r3, [r7, #29]
 8004234:	091b      	lsrs	r3, r3, #4
 8004236:	b2db      	uxtb	r3, r3
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	b2db      	uxtb	r3, r3
 800423c:	757b      	strb	r3, [r7, #21]
						    spi_store[2]=((spi_store3&15)<<4);
 800423e:	7f7b      	ldrb	r3, [r7, #29]
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	b2db      	uxtb	r3, r3
 8004244:	75bb      	strb	r3, [r7, #22]
						    memcpy(spi_tx_block+(((n+i)*3)+6),spi_store,3);  // writes only data no command
 8004246:	4b1e      	ldr	r3, [pc, #120]	; (80042c0 <gfx_line_fill+0x188>)
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	461a      	mov	r2, r3
 800424c:	4b1d      	ldr	r3, [pc, #116]	; (80042c4 <gfx_line_fill+0x18c>)
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	441a      	add	r2, r3
 8004252:	4613      	mov	r3, r2
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	4413      	add	r3, r2
 8004258:	3306      	adds	r3, #6
 800425a:	4a1e      	ldr	r2, [pc, #120]	; (80042d4 <gfx_line_fill+0x19c>)
 800425c:	4413      	add	r3, r2
 800425e:	461a      	mov	r2, r3
 8004260:	f107 0314 	add.w	r3, r7, #20
 8004264:	8819      	ldrh	r1, [r3, #0]
 8004266:	789b      	ldrb	r3, [r3, #2]
 8004268:	8011      	strh	r1, [r2, #0]
 800426a:	7093      	strb	r3, [r2, #2]
	 for (i=0;i<16;i++){
 800426c:	4b15      	ldr	r3, [pc, #84]	; (80042c4 <gfx_line_fill+0x18c>)
 800426e:	881b      	ldrh	r3, [r3, #0]
 8004270:	3301      	adds	r3, #1
 8004272:	b29a      	uxth	r2, r3
 8004274:	4b13      	ldr	r3, [pc, #76]	; (80042c4 <gfx_line_fill+0x18c>)
 8004276:	801a      	strh	r2, [r3, #0]
 8004278:	4b12      	ldr	r3, [pc, #72]	; (80042c4 <gfx_line_fill+0x18c>)
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	2b0f      	cmp	r3, #15
 800427e:	d9a5      	bls.n	80041cc <gfx_line_fill+0x94>
		     }
	char_skip++;
 8004280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004284:	3301      	adds	r3, #1
 8004286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
     for (n=start_line;n<end_line ;n=n+18)    {    //  8*18   , 0-1152
 800428a:	4b0d      	ldr	r3, [pc, #52]	; (80042c0 <gfx_line_fill+0x188>)
 800428c:	881b      	ldrh	r3, [r3, #0]
 800428e:	3312      	adds	r3, #18
 8004290:	b29a      	uxth	r2, r3
 8004292:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <gfx_line_fill+0x188>)
 8004294:	801a      	strh	r2, [r3, #0]
 8004296:	4b0a      	ldr	r3, [pc, #40]	; (80042c0 <gfx_line_fill+0x188>)
 8004298:	881b      	ldrh	r3, [r3, #0]
 800429a:	8bfa      	ldrh	r2, [r7, #30]
 800429c:	429a      	cmp	r2, r3
 800429e:	d891      	bhi.n	80041c4 <gfx_line_fill+0x8c>
    }
    }
 80042a0:	bf00      	nop
 80042a2:	bf00      	nop
 80042a4:	372c      	adds	r7, #44	; 0x2c
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	20008ed8 	.word	0x20008ed8
 80042b4:	2000dfd4 	.word	0x2000dfd4
 80042b8:	2000983e 	.word	0x2000983e
 80042bc:	2000ca36 	.word	0x2000ca36
 80042c0:	2000983c 	.word	0x2000983c
 80042c4:	20009842 	.word	0x20009842
 80042c8:	20008f74 	.word	0x20008f74
 80042cc:	0800e028 	.word	0x0800e028
 80042d0:	2000c5a8 	.word	0x2000c5a8
 80042d4:	20010e1c 	.word	0x20010e1c

080042d8 <encoder2>:


void encoder2(void){  // encoder pos and data input
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0


	uint8_t crap_hold9=(menu_title_lut[enc_out1]>>16)&255;
 80042de:	4b5f      	ldr	r3, [pc, #380]	; (800445c <encoder2+0x184>)
 80042e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042e4:	461a      	mov	r2, r3
 80042e6:	4b5e      	ldr	r3, [pc, #376]	; (8004460 <encoder2+0x188>)
 80042e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042ec:	0c1b      	lsrs	r3, r3, #16
 80042ee:	71fb      	strb	r3, [r7, #7]

	    memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 80042f0:	79fb      	ldrb	r3, [r7, #7]
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4a5b      	ldr	r2, [pc, #364]	; (8004464 <encoder2+0x18c>)
 80042f6:	4413      	add	r3, r2
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	4b5b      	ldr	r3, [pc, #364]	; (8004468 <encoder2+0x190>)
 80042fc:	6810      	ldr	r0, [r2, #0]
 80042fe:	6851      	ldr	r1, [r2, #4]
 8004300:	c303      	stmia	r3!, {r0, r1}
	     char temp_char[]="  ";
 8004302:	4a5a      	ldr	r2, [pc, #360]	; (800446c <encoder2+0x194>)
 8004304:	1d3b      	adds	r3, r7, #4
 8004306:	6812      	ldr	r2, [r2, #0]
 8004308:	4611      	mov	r1, r2
 800430a:	8019      	strh	r1, [r3, #0]
 800430c:	3302      	adds	r3, #2
 800430e:	0c12      	lsrs	r2, r2, #16
 8004310:	701a      	strb	r2, [r3, #0]
				     memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 8004312:	4b52      	ldr	r3, [pc, #328]	; (800445c <encoder2+0x184>)
 8004314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	461a      	mov	r2, r3
 800431c:	4b54      	ldr	r3, [pc, #336]	; (8004470 <encoder2+0x198>)
 800431e:	4413      	add	r3, r2
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	b29b      	uxth	r3, r3
 8004324:	80bb      	strh	r3, [r7, #4]
				     menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 8004326:	1d3b      	adds	r3, r7, #4
 8004328:	4618      	mov	r0, r3
 800432a:	f008 fb3d 	bl	800c9a8 <atoi>
 800432e:	4603      	mov	r3, r0
 8004330:	b2da      	uxtb	r2, r3
 8004332:	4b50      	ldr	r3, [pc, #320]	; (8004474 <encoder2+0x19c>)
 8004334:	701a      	strb	r2, [r3, #0]
	    menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8004336:	4b4f      	ldr	r3, [pc, #316]	; (8004474 <encoder2+0x19c>)
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	4619      	mov	r1, r3
 800433c:	484a      	ldr	r0, [pc, #296]	; (8004468 <encoder2+0x190>)
 800433e:	f7fc fc2b 	bl	8000b98 <menu_vars>
 8004342:	4603      	mov	r3, r0
 8004344:	4a4c      	ldr	r2, [pc, #304]	; (8004478 <encoder2+0x1a0>)
 8004346:	6013      	str	r3, [r2, #0]
		if ((*menu_vars_var)>menu_vars_limiter[menu_vars_ref])     *menu_vars_var=menu_vars_limiter[menu_vars_ref];   // limit value sher too
 8004348:	4b4b      	ldr	r3, [pc, #300]	; (8004478 <encoder2+0x1a0>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	781a      	ldrb	r2, [r3, #0]
 800434e:	4b4b      	ldr	r3, [pc, #300]	; (800447c <encoder2+0x1a4>)
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	4619      	mov	r1, r3
 8004354:	4b4a      	ldr	r3, [pc, #296]	; (8004480 <encoder2+0x1a8>)
 8004356:	5c5b      	ldrb	r3, [r3, r1]
 8004358:	429a      	cmp	r2, r3
 800435a:	d907      	bls.n	800436c <encoder2+0x94>
 800435c:	4b47      	ldr	r3, [pc, #284]	; (800447c <encoder2+0x1a4>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	4619      	mov	r1, r3
 8004362:	4b45      	ldr	r3, [pc, #276]	; (8004478 <encoder2+0x1a0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a46      	ldr	r2, [pc, #280]	; (8004480 <encoder2+0x1a8>)
 8004368:	5c52      	ldrb	r2, [r2, r1]
 800436a:	701a      	strb	r2, [r3, #0]

	    // input encode ------------------------
	    if ((enc_dir!=enc_mem_dir)  )    ///write back value if encoder changed ;
 800436c:	4b45      	ldr	r3, [pc, #276]	; (8004484 <encoder2+0x1ac>)
 800436e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004372:	461a      	mov	r2, r3
 8004374:	4b44      	ldr	r3, [pc, #272]	; (8004488 <encoder2+0x1b0>)
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d024      	beq.n	80043c6 <encoder2+0xee>
	    {
		if (enc_dir>enc_mem_dir) 							*menu_vars_var=((*menu_vars_var)+1)&255;
 800437c:	4b41      	ldr	r3, [pc, #260]	; (8004484 <encoder2+0x1ac>)
 800437e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004382:	461a      	mov	r2, r3
 8004384:	4b40      	ldr	r3, [pc, #256]	; (8004488 <encoder2+0x1b0>)
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	429a      	cmp	r2, r3
 800438a:	dd07      	ble.n	800439c <encoder2+0xc4>
 800438c:	4b3a      	ldr	r3, [pc, #232]	; (8004478 <encoder2+0x1a0>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	781a      	ldrb	r2, [r3, #0]
 8004392:	4b39      	ldr	r3, [pc, #228]	; (8004478 <encoder2+0x1a0>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3201      	adds	r2, #1
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	701a      	strb	r2, [r3, #0]
	    if ((enc_dir<enc_mem_dir)&&(*menu_vars_var))		 *menu_vars_var=((*menu_vars_var)-1)&255;
 800439c:	4b39      	ldr	r3, [pc, #228]	; (8004484 <encoder2+0x1ac>)
 800439e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043a2:	461a      	mov	r2, r3
 80043a4:	4b38      	ldr	r3, [pc, #224]	; (8004488 <encoder2+0x1b0>)
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	da0c      	bge.n	80043c6 <encoder2+0xee>
 80043ac:	4b32      	ldr	r3, [pc, #200]	; (8004478 <encoder2+0x1a0>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d007      	beq.n	80043c6 <encoder2+0xee>
 80043b6:	4b30      	ldr	r3, [pc, #192]	; (8004478 <encoder2+0x1a0>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	781a      	ldrb	r2, [r3, #0]
 80043bc:	4b2e      	ldr	r3, [pc, #184]	; (8004478 <encoder2+0x1a0>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3a01      	subs	r2, #1
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	701a      	strb	r2, [r3, #0]
	    }
	    enc_mem_dir=enc_dir;
 80043c6:	4b2f      	ldr	r3, [pc, #188]	; (8004484 <encoder2+0x1ac>)
 80043c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	4b2e      	ldr	r3, [pc, #184]	; (8004488 <encoder2+0x1b0>)
 80043d0:	801a      	strh	r2, [r3, #0]

	    // location encode ------------------------

	    if ((enc2_dir!=enc2_mem_dir)  )    ///write back value if encoder changed ;
 80043d2:	4b2e      	ldr	r3, [pc, #184]	; (800448c <encoder2+0x1b4>)
 80043d4:	881a      	ldrh	r2, [r3, #0]
 80043d6:	4b2e      	ldr	r3, [pc, #184]	; (8004490 <encoder2+0x1b8>)
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d01d      	beq.n	800441a <encoder2+0x142>
	   	    {
	   		if (enc2_dir>enc2_mem_dir) 							enc_out1++;
 80043de:	4b2b      	ldr	r3, [pc, #172]	; (800448c <encoder2+0x1b4>)
 80043e0:	881a      	ldrh	r2, [r3, #0]
 80043e2:	4b2b      	ldr	r3, [pc, #172]	; (8004490 <encoder2+0x1b8>)
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d908      	bls.n	80043fc <encoder2+0x124>
 80043ea:	4b1c      	ldr	r3, [pc, #112]	; (800445c <encoder2+0x184>)
 80043ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	3301      	adds	r3, #1
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	b21a      	sxth	r2, r3
 80043f8:	4b18      	ldr	r3, [pc, #96]	; (800445c <encoder2+0x184>)
 80043fa:	801a      	strh	r2, [r3, #0]
	   	    if ((enc2_dir<enc2_mem_dir))		enc_out1--;
 80043fc:	4b23      	ldr	r3, [pc, #140]	; (800448c <encoder2+0x1b4>)
 80043fe:	881a      	ldrh	r2, [r3, #0]
 8004400:	4b23      	ldr	r3, [pc, #140]	; (8004490 <encoder2+0x1b8>)
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	429a      	cmp	r2, r3
 8004406:	d208      	bcs.n	800441a <encoder2+0x142>
 8004408:	4b14      	ldr	r3, [pc, #80]	; (800445c <encoder2+0x184>)
 800440a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29b      	uxth	r3, r3
 8004414:	b21a      	sxth	r2, r3
 8004416:	4b11      	ldr	r3, [pc, #68]	; (800445c <encoder2+0x184>)
 8004418:	801a      	strh	r2, [r3, #0]

	   	    }
	   	   if (enc_out1>menu_title_count) enc_out1=0;
 800441a:	4b10      	ldr	r3, [pc, #64]	; (800445c <encoder2+0x184>)
 800441c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004420:	461a      	mov	r2, r3
 8004422:	4b1c      	ldr	r3, [pc, #112]	; (8004494 <encoder2+0x1bc>)
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	dd02      	ble.n	8004430 <encoder2+0x158>
 800442a:	4b0c      	ldr	r3, [pc, #48]	; (800445c <encoder2+0x184>)
 800442c:	2200      	movs	r2, #0
 800442e:	801a      	strh	r2, [r3, #0]
	   	 if (enc_out1<0) enc_out1=menu_title_count;
 8004430:	4b0a      	ldr	r3, [pc, #40]	; (800445c <encoder2+0x184>)
 8004432:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004436:	2b00      	cmp	r3, #0
 8004438:	da04      	bge.n	8004444 <encoder2+0x16c>
 800443a:	4b16      	ldr	r3, [pc, #88]	; (8004494 <encoder2+0x1bc>)
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	b21a      	sxth	r2, r3
 8004440:	4b06      	ldr	r3, [pc, #24]	; (800445c <encoder2+0x184>)
 8004442:	801a      	strh	r2, [r3, #0]

	    enc2_mem_dir=enc2_dir;
 8004444:	4b11      	ldr	r3, [pc, #68]	; (800448c <encoder2+0x1b4>)
 8004446:	881a      	ldrh	r2, [r3, #0]
 8004448:	4b11      	ldr	r3, [pc, #68]	; (8004490 <encoder2+0x1b8>)
 800444a:	801a      	strh	r2, [r3, #0]
	   //-------------------

		    enc2_add=0;
 800444c:	4b12      	ldr	r3, [pc, #72]	; (8004498 <encoder2+0x1c0>)
 800444e:	2200      	movs	r2, #0
 8004450:	701a      	strb	r2, [r3, #0]

    }
 8004452:	bf00      	nop
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20008ed8 	.word	0x20008ed8
 8004460:	2000dfd4 	.word	0x2000dfd4
 8004464:	20000000 	.word	0x20000000
 8004468:	2000ebd8 	.word	0x2000ebd8
 800446c:	0800d198 	.word	0x0800d198
 8004470:	2000e7d4 	.word	0x2000e7d4
 8004474:	2000ebe0 	.word	0x2000ebe0
 8004478:	2000ebd4 	.word	0x2000ebd4
 800447c:	20010c11 	.word	0x20010c11
 8004480:	0800dfa8 	.word	0x0800dfa8
 8004484:	2000c07c 	.word	0x2000c07c
 8004488:	20010e16 	.word	0x20010e16
 800448c:	2000c07a 	.word	0x2000c07a
 8004490:	2000ebe4 	.word	0x2000ebe4
 8004494:	2000dfd2 	.word	0x2000dfd2
 8004498:	2000c07e 	.word	0x2000c07e

0800449c <menu3_fill>:


    void menu3_fill(void){   // looping write into default_menu3
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
	uint16_t   enc_up=disp_up_counter;
 80044a2:	4b4f      	ldr	r3, [pc, #316]	; (80045e0 <menu3_fill+0x144>)
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	81fb      	strh	r3, [r7, #14]

	if(enc_up>menu_title_count) {enc_up=0; disp_up_counter=0;}
 80044a8:	4b4e      	ldr	r3, [pc, #312]	; (80045e4 <menu3_fill+0x148>)
 80044aa:	881b      	ldrh	r3, [r3, #0]
 80044ac:	89fa      	ldrh	r2, [r7, #14]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d904      	bls.n	80044bc <menu3_fill+0x20>
 80044b2:	2300      	movs	r3, #0
 80044b4:	81fb      	strh	r3, [r7, #14]
 80044b6:	4b4a      	ldr	r3, [pc, #296]	; (80045e0 <menu3_fill+0x144>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	801a      	strh	r2, [r3, #0]

	uint8_t crap_hold10=(menu_title_lut[enc_up]>>16)&255;   // look up up menu_titles_final
 80044bc:	89fb      	ldrh	r3, [r7, #14]
 80044be:	4a4a      	ldr	r2, [pc, #296]	; (80045e8 <menu3_fill+0x14c>)
 80044c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044c4:	0c1b      	lsrs	r3, r3, #16
 80044c6:	737b      	strb	r3, [r7, #13]

	memcpy(menu_vars_in,*(menu_titles_final+crap_hold10),8);	// send back for menu vars ok
 80044c8:	7b7b      	ldrb	r3, [r7, #13]
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4a47      	ldr	r2, [pc, #284]	; (80045ec <menu3_fill+0x150>)
 80044ce:	4413      	add	r3, r2
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	4b47      	ldr	r3, [pc, #284]	; (80045f0 <menu3_fill+0x154>)
 80044d4:	6810      	ldr	r0, [r2, #0]
 80044d6:	6851      	ldr	r1, [r2, #4]
 80044d8:	c303      	stmia	r3!, {r0, r1}
	 char temp_char[]="  ";
 80044da:	4a46      	ldr	r2, [pc, #280]	; (80045f4 <menu3_fill+0x158>)
 80044dc:	1d3b      	adds	r3, r7, #4
 80044de:	6812      	ldr	r2, [r2, #0]
 80044e0:	4611      	mov	r1, r2
 80044e2:	8019      	strh	r1, [r3, #0]
 80044e4:	3302      	adds	r3, #2
 80044e6:	0c12      	lsrs	r2, r2, #16
 80044e8:	701a      	strb	r2, [r3, #0]
				 memcpy(temp_char,menu_index_list+((enc_up*2)),2);   // copy char to char,ok
 80044ea:	89fb      	ldrh	r3, [r7, #14]
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	461a      	mov	r2, r3
 80044f0:	4b41      	ldr	r3, [pc, #260]	; (80045f8 <menu3_fill+0x15c>)
 80044f2:	4413      	add	r3, r2
 80044f4:	881b      	ldrh	r3, [r3, #0]
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	80bb      	strh	r3, [r7, #4]
				 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 80044fa:	1d3b      	adds	r3, r7, #4
 80044fc:	4618      	mov	r0, r3
 80044fe:	f008 fa53 	bl	800c9a8 <atoi>
 8004502:	4603      	mov	r3, r0
 8004504:	b2da      	uxtb	r2, r3
 8004506:	4b3d      	ldr	r3, [pc, #244]	; (80045fc <menu3_fill+0x160>)
 8004508:	701a      	strb	r2, [r3, #0]

	menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 800450a:	4b3c      	ldr	r3, [pc, #240]	; (80045fc <menu3_fill+0x160>)
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	4619      	mov	r1, r3
 8004510:	4837      	ldr	r0, [pc, #220]	; (80045f0 <menu3_fill+0x154>)
 8004512:	f7fc fb41 	bl	8000b98 <menu_vars>
 8004516:	4603      	mov	r3, r0
 8004518:	4a39      	ldr	r2, [pc, #228]	; (8004600 <menu3_fill+0x164>)
 800451a:	6013      	str	r3, [r2, #0]

			lcd_out3=*menu_vars_var;
 800451c:	4b38      	ldr	r3, [pc, #224]	; (8004600 <menu3_fill+0x164>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	b29a      	uxth	r2, r3
 8004524:	4b37      	ldr	r3, [pc, #220]	; (8004604 <menu3_fill+0x168>)
 8004526:	801a      	strh	r2, [r3, #0]

		if (enc_out1==enc_up) 	lcd_temp=lcd_out3;  // this may be a problem
 8004528:	4b37      	ldr	r3, [pc, #220]	; (8004608 <menu3_fill+0x16c>)
 800452a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800452e:	461a      	mov	r2, r3
 8004530:	89fb      	ldrh	r3, [r7, #14]
 8004532:	429a      	cmp	r2, r3
 8004534:	d104      	bne.n	8004540 <menu3_fill+0xa4>
 8004536:	4b33      	ldr	r3, [pc, #204]	; (8004604 <menu3_fill+0x168>)
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	b2da      	uxtb	r2, r3
 800453c:	4b33      	ldr	r3, [pc, #204]	; (800460c <menu3_fill+0x170>)
 800453e:	701a      	strb	r2, [r3, #0]

		div_limit=lcd_out3;
 8004540:	4b30      	ldr	r3, [pc, #192]	; (8004604 <menu3_fill+0x168>)
 8004542:	881b      	ldrh	r3, [r3, #0]
 8004544:	b2da      	uxtb	r2, r3
 8004546:	4b32      	ldr	r3, [pc, #200]	; (8004610 <menu3_fill+0x174>)
 8004548:	701a      	strb	r2, [r3, #0]
			if (div_limit>9) div_limit=9;
 800454a:	4b31      	ldr	r3, [pc, #196]	; (8004610 <menu3_fill+0x174>)
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	2b09      	cmp	r3, #9
 8004550:	d902      	bls.n	8004558 <menu3_fill+0xbc>
 8004552:	4b2f      	ldr	r3, [pc, #188]	; (8004610 <menu3_fill+0x174>)
 8004554:	2209      	movs	r2, #9
 8004556:	701a      	strb	r2, [r3, #0]

		/*    if (lcd_out3>10)							div_limit= lcd_out3>>2;
				if (lcd_out3>40)							div_limit= lcd_out3>>5;*/


				uint16_t crap8=menu_title_lut[enc_up];
 8004558:	89fb      	ldrh	r3, [r7, #14]
 800455a:	4a23      	ldr	r2, [pc, #140]	; (80045e8 <menu3_fill+0x14c>)
 800455c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004560:	817b      	strh	r3, [r7, #10]

				default_menu3[crap8]=div_limit+48;
 8004562:	4b2b      	ldr	r3, [pc, #172]	; (8004610 <menu3_fill+0x174>)
 8004564:	781a      	ldrb	r2, [r3, #0]
 8004566:	897b      	ldrh	r3, [r7, #10]
 8004568:	3230      	adds	r2, #48	; 0x30
 800456a:	b2d1      	uxtb	r1, r2
 800456c:	4a29      	ldr	r2, [pc, #164]	; (8004614 <menu3_fill+0x178>)
 800456e:	54d1      	strb	r1, [r2, r3]
				if (menu_vars_ref==53)  default_menu3[crap8]=lcd_out3;   // keep in char , ok
 8004570:	4b29      	ldr	r3, [pc, #164]	; (8004618 <menu3_fill+0x17c>)
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	2b35      	cmp	r3, #53	; 0x35
 8004576:	d105      	bne.n	8004584 <menu3_fill+0xe8>
 8004578:	4b22      	ldr	r3, [pc, #136]	; (8004604 <menu3_fill+0x168>)
 800457a:	881a      	ldrh	r2, [r3, #0]
 800457c:	897b      	ldrh	r3, [r7, #10]
 800457e:	b2d1      	uxtb	r1, r2
 8004580:	4a24      	ldr	r2, [pc, #144]	; (8004614 <menu3_fill+0x178>)
 8004582:	54d1      	strb	r1, [r2, r3]

				if ((menu_vars_ref==24) | (menu_vars_ref==25))  default_menu3[crap8]=major_notes[lcd_out3&31];
 8004584:	4b24      	ldr	r3, [pc, #144]	; (8004618 <menu3_fill+0x17c>)
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	2b18      	cmp	r3, #24
 800458a:	bf0c      	ite	eq
 800458c:	2301      	moveq	r3, #1
 800458e:	2300      	movne	r3, #0
 8004590:	b2da      	uxtb	r2, r3
 8004592:	4b21      	ldr	r3, [pc, #132]	; (8004618 <menu3_fill+0x17c>)
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	2b19      	cmp	r3, #25
 8004598:	bf0c      	ite	eq
 800459a:	2301      	moveq	r3, #1
 800459c:	2300      	movne	r3, #0
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	4313      	orrs	r3, r2
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d008      	beq.n	80045ba <menu3_fill+0x11e>
 80045a8:	4b16      	ldr	r3, [pc, #88]	; (8004604 <menu3_fill+0x168>)
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	f003 021f 	and.w	r2, r3, #31
 80045b0:	897b      	ldrh	r3, [r7, #10]
 80045b2:	491a      	ldr	r1, [pc, #104]	; (800461c <menu3_fill+0x180>)
 80045b4:	5c89      	ldrb	r1, [r1, r2]
 80045b6:	4a17      	ldr	r2, [pc, #92]	; (8004614 <menu3_fill+0x178>)
 80045b8:	54d1      	strb	r1, [r2, r3]
				disp_up_counter++;
 80045ba:	4b09      	ldr	r3, [pc, #36]	; (80045e0 <menu3_fill+0x144>)
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	3301      	adds	r3, #1
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	4b07      	ldr	r3, [pc, #28]	; (80045e0 <menu3_fill+0x144>)
 80045c4:	801a      	strh	r2, [r3, #0]
				if(disp_up_counter>menu_title_count) disp_up_counter=0;  // just auto scans lcd_data , can be an issue
 80045c6:	4b06      	ldr	r3, [pc, #24]	; (80045e0 <menu3_fill+0x144>)
 80045c8:	881a      	ldrh	r2, [r3, #0]
 80045ca:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <menu3_fill+0x148>)
 80045cc:	881b      	ldrh	r3, [r3, #0]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d902      	bls.n	80045d8 <menu3_fill+0x13c>
 80045d2:	4b03      	ldr	r3, [pc, #12]	; (80045e0 <menu3_fill+0x144>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	801a      	strh	r2, [r3, #0]

    }
 80045d8:	bf00      	nop
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	20010e18 	.word	0x20010e18
 80045e4:	2000dfd2 	.word	0x2000dfd2
 80045e8:	2000dfd4 	.word	0x2000dfd4
 80045ec:	20000000 	.word	0x20000000
 80045f0:	2000ebd8 	.word	0x2000ebd8
 80045f4:	0800d198 	.word	0x0800d198
 80045f8:	2000e7d4 	.word	0x2000e7d4
 80045fc:	2000ebe0 	.word	0x2000ebe0
 8004600:	2000ebd4 	.word	0x2000ebd4
 8004604:	2000ca34 	.word	0x2000ca34
 8004608:	20008ed8 	.word	0x20008ed8
 800460c:	2000ebe6 	.word	0x2000ebe6
 8004610:	20010c12 	.word	0x20010c12
 8004614:	20008f74 	.word	0x20008f74
 8004618:	20010c11 	.word	0x20010c11
 800461c:	0800e428 	.word	0x0800e428

08004620 <LCD_Info_feedback>:

    void LCD_Info_feedback(void){
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
	  potSource[380]=(lcd_temp/100) +48;  // still works   , potsource ref is located in feedback line var  ,was sendin x16 values
 8004624:	4b53      	ldr	r3, [pc, #332]	; (8004774 <LCD_Info_feedback+0x154>)
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	4a53      	ldr	r2, [pc, #332]	; (8004778 <LCD_Info_feedback+0x158>)
 800462a:	fba2 2303 	umull	r2, r3, r2, r3
 800462e:	095b      	lsrs	r3, r3, #5
 8004630:	b2db      	uxtb	r3, r3
 8004632:	3330      	adds	r3, #48	; 0x30
 8004634:	b2da      	uxtb	r2, r3
 8004636:	4b51      	ldr	r3, [pc, #324]	; (800477c <LCD_Info_feedback+0x15c>)
 8004638:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
			    potSource[381]=((lcd_temp %100)/10)+48;		 // 0-160 to 0-10
 800463c:	4b4d      	ldr	r3, [pc, #308]	; (8004774 <LCD_Info_feedback+0x154>)
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	4a4d      	ldr	r2, [pc, #308]	; (8004778 <LCD_Info_feedback+0x158>)
 8004642:	fba2 1203 	umull	r1, r2, r2, r3
 8004646:	0952      	lsrs	r2, r2, #5
 8004648:	2164      	movs	r1, #100	; 0x64
 800464a:	fb01 f202 	mul.w	r2, r1, r2
 800464e:	1a9b      	subs	r3, r3, r2
 8004650:	b2db      	uxtb	r3, r3
 8004652:	4a4b      	ldr	r2, [pc, #300]	; (8004780 <LCD_Info_feedback+0x160>)
 8004654:	fba2 2303 	umull	r2, r3, r2, r3
 8004658:	08db      	lsrs	r3, r3, #3
 800465a:	b2db      	uxtb	r3, r3
 800465c:	3330      	adds	r3, #48	; 0x30
 800465e:	b2da      	uxtb	r2, r3
 8004660:	4b46      	ldr	r3, [pc, #280]	; (800477c <LCD_Info_feedback+0x15c>)
 8004662:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
			    potSource[382]=(lcd_temp%10)+48;
 8004666:	4b43      	ldr	r3, [pc, #268]	; (8004774 <LCD_Info_feedback+0x154>)
 8004668:	781a      	ldrb	r2, [r3, #0]
 800466a:	4b45      	ldr	r3, [pc, #276]	; (8004780 <LCD_Info_feedback+0x160>)
 800466c:	fba3 1302 	umull	r1, r3, r3, r2
 8004670:	08d9      	lsrs	r1, r3, #3
 8004672:	460b      	mov	r3, r1
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	440b      	add	r3, r1
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	b2db      	uxtb	r3, r3
 800467e:	3330      	adds	r3, #48	; 0x30
 8004680:	b2da      	uxtb	r2, r3
 8004682:	4b3e      	ldr	r3, [pc, #248]	; (800477c <LCD_Info_feedback+0x15c>)
 8004684:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e

			    LCD_Info[0]  =( seq.pos/100) +48;
 8004688:	4b3e      	ldr	r3, [pc, #248]	; (8004784 <LCD_Info_feedback+0x164>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	4a3a      	ldr	r2, [pc, #232]	; (8004778 <LCD_Info_feedback+0x158>)
 800468e:	fba2 2303 	umull	r2, r3, r2, r3
 8004692:	095b      	lsrs	r3, r3, #5
 8004694:	b2db      	uxtb	r3, r3
 8004696:	3330      	adds	r3, #48	; 0x30
 8004698:	b2da      	uxtb	r2, r3
 800469a:	4b3b      	ldr	r3, [pc, #236]	; (8004788 <LCD_Info_feedback+0x168>)
 800469c:	701a      	strb	r2, [r3, #0]
			    LCD_Info[1]  =( (seq.pos%100) /10)+48;
 800469e:	4b39      	ldr	r3, [pc, #228]	; (8004784 <LCD_Info_feedback+0x164>)
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	4a35      	ldr	r2, [pc, #212]	; (8004778 <LCD_Info_feedback+0x158>)
 80046a4:	fba2 1203 	umull	r1, r2, r2, r3
 80046a8:	0952      	lsrs	r2, r2, #5
 80046aa:	2164      	movs	r1, #100	; 0x64
 80046ac:	fb01 f202 	mul.w	r2, r1, r2
 80046b0:	1a9b      	subs	r3, r3, r2
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	4a32      	ldr	r2, [pc, #200]	; (8004780 <LCD_Info_feedback+0x160>)
 80046b6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ba:	08db      	lsrs	r3, r3, #3
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	3330      	adds	r3, #48	; 0x30
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	4b31      	ldr	r3, [pc, #196]	; (8004788 <LCD_Info_feedback+0x168>)
 80046c4:	705a      	strb	r2, [r3, #1]
			    LCD_Info[2]  =( seq.pos%10)+48 ;
 80046c6:	4b2f      	ldr	r3, [pc, #188]	; (8004784 <LCD_Info_feedback+0x164>)
 80046c8:	781a      	ldrb	r2, [r3, #0]
 80046ca:	4b2d      	ldr	r3, [pc, #180]	; (8004780 <LCD_Info_feedback+0x160>)
 80046cc:	fba3 1302 	umull	r1, r3, r3, r2
 80046d0:	08d9      	lsrs	r1, r3, #3
 80046d2:	460b      	mov	r3, r1
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	440b      	add	r3, r1
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	3330      	adds	r3, #48	; 0x30
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	4b29      	ldr	r3, [pc, #164]	; (8004788 <LCD_Info_feedback+0x168>)
 80046e4:	709a      	strb	r2, [r3, #2]

			    LCD_Info[11]  =( seq.pos>>6) +49;   // +1
 80046e6:	4b27      	ldr	r3, [pc, #156]	; (8004784 <LCD_Info_feedback+0x164>)
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	099b      	lsrs	r3, r3, #6
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	3331      	adds	r3, #49	; 0x31
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	4b25      	ldr	r3, [pc, #148]	; (8004788 <LCD_Info_feedback+0x168>)
 80046f4:	72da      	strb	r2, [r3, #11]
			    LCD_Info[12]  =( (seq.pos&63)>>4) +49;
 80046f6:	4b23      	ldr	r3, [pc, #140]	; (8004784 <LCD_Info_feedback+0x164>)
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	111b      	asrs	r3, r3, #4
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	f003 0303 	and.w	r3, r3, #3
 8004702:	b2db      	uxtb	r3, r3
 8004704:	3331      	adds	r3, #49	; 0x31
 8004706:	b2da      	uxtb	r2, r3
 8004708:	4b1f      	ldr	r3, [pc, #124]	; (8004788 <LCD_Info_feedback+0x168>)
 800470a:	731a      	strb	r2, [r3, #12]
			    LCD_Info[13]  =( (((seq.pos&15)+1)%100)/10)+48 ;
 800470c:	4b1d      	ldr	r3, [pc, #116]	; (8004784 <LCD_Info_feedback+0x164>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	f003 030f 	and.w	r3, r3, #15
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	4b18      	ldr	r3, [pc, #96]	; (8004778 <LCD_Info_feedback+0x158>)
 8004718:	fb83 1302 	smull	r1, r3, r3, r2
 800471c:	1159      	asrs	r1, r3, #5
 800471e:	17d3      	asrs	r3, r2, #31
 8004720:	1acb      	subs	r3, r1, r3
 8004722:	2164      	movs	r1, #100	; 0x64
 8004724:	fb01 f303 	mul.w	r3, r1, r3
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	4a18      	ldr	r2, [pc, #96]	; (800478c <LCD_Info_feedback+0x16c>)
 800472c:	fb82 1203 	smull	r1, r2, r2, r3
 8004730:	1092      	asrs	r2, r2, #2
 8004732:	17db      	asrs	r3, r3, #31
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	b2db      	uxtb	r3, r3
 8004738:	3330      	adds	r3, #48	; 0x30
 800473a:	b2da      	uxtb	r2, r3
 800473c:	4b12      	ldr	r3, [pc, #72]	; (8004788 <LCD_Info_feedback+0x168>)
 800473e:	735a      	strb	r2, [r3, #13]
			    LCD_Info[14]  =( ((seq.pos&15)+1)%10)+48 ;
 8004740:	4b10      	ldr	r3, [pc, #64]	; (8004784 <LCD_Info_feedback+0x164>)
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	f003 030f 	and.w	r3, r3, #15
 8004748:	1c5a      	adds	r2, r3, #1
 800474a:	4b10      	ldr	r3, [pc, #64]	; (800478c <LCD_Info_feedback+0x16c>)
 800474c:	fb83 1302 	smull	r1, r3, r3, r2
 8004750:	1099      	asrs	r1, r3, #2
 8004752:	17d3      	asrs	r3, r2, #31
 8004754:	1ac9      	subs	r1, r1, r3
 8004756:	460b      	mov	r3, r1
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	440b      	add	r3, r1
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	1ad1      	subs	r1, r2, r3
 8004760:	b2cb      	uxtb	r3, r1
 8004762:	3330      	adds	r3, #48	; 0x30
 8004764:	b2da      	uxtb	r2, r3
 8004766:	4b08      	ldr	r3, [pc, #32]	; (8004788 <LCD_Info_feedback+0x168>)
 8004768:	739a      	strb	r2, [r3, #14]



    }
 800476a:	bf00      	nop
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	2000ebe6 	.word	0x2000ebe6
 8004778:	51eb851f 	.word	0x51eb851f
 800477c:	200095d8 	.word	0x200095d8
 8004780:	cccccccd 	.word	0xcccccccd
 8004784:	2000dc7c 	.word	0x2000dc7c
 8004788:	2001202c 	.word	0x2001202c
 800478c:	66666667 	.word	0x66666667

08004790 <sampler_ram_clear_test>:
	//   Everything  with  managing sample data

	uint8_t  sampler_ram_clear_test(uint16_t sample_number){    // returns 15   if location is clear    or ok , else  0  , sample number is  0-511 (slow version)
 8004790:	b580      	push	{r7, lr}
 8004792:	b08c      	sub	sp, #48	; 0x30
 8004794:	af02      	add	r7, sp, #8
 8004796:	4603      	mov	r3, r0
 8004798:	80fb      	strh	r3, [r7, #6]



	//  HAL_SPI_Init(&hspi1); // write to register hspi2
	if (sample_number>509) return 0;
 800479a:	88fb      	ldrh	r3, [r7, #6]
 800479c:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80047a0:	d301      	bcc.n	80047a6 <sampler_ram_clear_test+0x16>
 80047a2:	2300      	movs	r3, #0
 80047a4:	e044      	b.n	8004830 <sampler_ram_clear_test+0xa0>
	MX_SPI1_Init();
 80047a6:	f000 ffbf 	bl	8005728 <MX_SPI1_Init>

	uint8_t spi_test[4];
	uint8_t test_counter=0;
 80047aa:	2300      	movs	r3, #0
 80047ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t test_return[24]={0};
 80047b0:	2300      	movs	r3, #0
 80047b2:	60bb      	str	r3, [r7, #8]
 80047b4:	f107 030c 	add.w	r3, r7, #12
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	605a      	str	r2, [r3, #4]
 80047be:	609a      	str	r2, [r3, #8]
 80047c0:	60da      	str	r2, [r3, #12]
 80047c2:	611a      	str	r2, [r3, #16]

	test_return[0]=0x03; //read page 1
 80047c4:	2303      	movs	r3, #3
 80047c6:	723b      	strb	r3, [r7, #8]
	test_return[1]=sample_number>>1; //24bit address msb
 80047c8:	88fb      	ldrh	r3, [r7, #6]
 80047ca:	085b      	lsrs	r3, r3, #1
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	727b      	strb	r3, [r7, #9]
	test_return[2]=(sample_number&1)<<7; //24bit address
 80047d2:	88fb      	ldrh	r3, [r7, #6]
 80047d4:	01db      	lsls	r3, r3, #7
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	72bb      	strb	r3, [r7, #10]
	test_return[3]=0; //24bit address lsb
 80047da:	2300      	movs	r3, #0
 80047dc:	72fb      	strb	r3, [r7, #11]
	////	test_return[2]=1; //
	//	test_return[3]=0;



	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // when readin low till the end
 80047de:	2200      	movs	r2, #0
 80047e0:	2110      	movs	r1, #16
 80047e2:	4815      	ldr	r0, [pc, #84]	; (8004838 <sampler_ram_clear_test+0xa8>)
 80047e4:	f003 ff38 	bl	8008658 <HAL_GPIO_WritePin>
	//HAL_SPI_ (&hspi1,test_return, 20, 1000);   // works fine
	HAL_SPI_TransmitReceive (&hspi1, test_return,test_return,  24, 100); // request data
 80047e8:	f107 0208 	add.w	r2, r7, #8
 80047ec:	f107 0108 	add.w	r1, r7, #8
 80047f0:	2364      	movs	r3, #100	; 0x64
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	2318      	movs	r3, #24
 80047f6:	4811      	ldr	r0, [pc, #68]	; (800483c <sampler_ram_clear_test+0xac>)
 80047f8:	f005 fd3d 	bl	800a276 <HAL_SPI_TransmitReceive>


	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);  // high end
 80047fc:	2201      	movs	r2, #1
 80047fe:	2110      	movs	r1, #16
 8004800:	480d      	ldr	r0, [pc, #52]	; (8004838 <sampler_ram_clear_test+0xa8>)
 8004802:	f003 ff29 	bl	8008658 <HAL_GPIO_WritePin>

	//HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
	for (test_counter=0;test_counter<20;test_counter++){
 8004806:	2300      	movs	r3, #0
 8004808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800480c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004810:	2b13      	cmp	r3, #19
 8004812:	d80c      	bhi.n	800482e <sampler_ram_clear_test+0x9e>
	    if (test_return[test_counter+20]!=255) return 0;  else return 15;
 8004814:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004818:	3314      	adds	r3, #20
 800481a:	3328      	adds	r3, #40	; 0x28
 800481c:	443b      	add	r3, r7
 800481e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8004822:	2bff      	cmp	r3, #255	; 0xff
 8004824:	d001      	beq.n	800482a <sampler_ram_clear_test+0x9a>
 8004826:	2300      	movs	r3, #0
 8004828:	e002      	b.n	8004830 <sampler_ram_clear_test+0xa0>
 800482a:	230f      	movs	r3, #15
 800482c:	e000      	b.n	8004830 <sampler_ram_clear_test+0xa0>

	}
	return 15;
 800482e:	230f      	movs	r3, #15
    }
 8004830:	4618      	mov	r0, r3
 8004832:	3728      	adds	r7, #40	; 0x28
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40020000 	.word	0x40020000
 800483c:	20012854 	.word	0x20012854

08004840 <sample_save>:

	    }

	}

 void sample_save(uint16_t sample_number, uint8_t* sample_data,  uint16_t  sample_size ){				// writes data to flash (slow version )
 8004840:	b580      	push	{r7, lr}
 8004842:	b0c8      	sub	sp, #288	; 0x120
 8004844:	af00      	add	r7, sp, #0
 8004846:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800484a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800484e:	6019      	str	r1, [r3, #0]
 8004850:	4611      	mov	r1, r2
 8004852:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004856:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800485a:	4602      	mov	r2, r0
 800485c:	801a      	strh	r2, [r3, #0]
 800485e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004862:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004866:	460a      	mov	r2, r1
 8004868:	801a      	strh	r2, [r3, #0]

		stop_toggle=1;  stop_start();   // halt for slow write
 800486a:	4bad      	ldr	r3, [pc, #692]	; (8004b20 <sample_save+0x2e0>)
 800486c:	2201      	movs	r2, #1
 800486e:	701a      	strb	r2, [r3, #0]
 8004870:	f001 fb04 	bl	8005e7c <stop_start>

		uint8_t spi_test[270]={0};
 8004874:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004878:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800487c:	2200      	movs	r2, #0
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	3304      	adds	r3, #4
 8004882:	f44f 7285 	mov.w	r2, #266	; 0x10a
 8004886:	2100      	movs	r1, #0
 8004888:	4618      	mov	r0, r3
 800488a:	f008 f8c9 	bl	800ca20 <memset>
		if (sample_number>509) return ;
 800488e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004892:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8004896:	881b      	ldrh	r3, [r3, #0]
 8004898:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800489c:	f080 8139 	bcs.w	8004b12 <sample_save+0x2d2>



			spi_test[1]=sample_number>>1; //24bit address msb
 80048a0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80048a4:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	085b      	lsrs	r3, r3, #1
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80048b4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80048b8:	705a      	strb	r2, [r3, #1]
			spi_test[2]=(sample_number&1)<<7; //24bit address
 80048ba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80048be:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	01db      	lsls	r3, r3, #7
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80048cc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80048d0:	709a      	strb	r2, [r3, #2]
			spi_test[3]=0; //24bit address lsb
 80048d2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80048d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80048da:	2200      	movs	r2, #0
 80048dc:	70da      	strb	r2, [r3, #3]

				//----formAT SECTION
					spi_test[0]=0x06; //enable write  , only lasts for single operation
 80048de:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80048e2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80048e6:	2206      	movs	r2, #6
 80048e8:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0); // start
 80048ea:	2200      	movs	r2, #0
 80048ec:	2110      	movs	r1, #16
 80048ee:	488d      	ldr	r0, [pc, #564]	; (8004b24 <sample_save+0x2e4>)
 80048f0:	f003 feb2 	bl	8008658 <HAL_GPIO_WritePin>
					HAL_SPI_Transmit(&hspi1, spi_test, 1, 1000);       // enable write
 80048f4:	f107 010c 	add.w	r1, r7, #12
 80048f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048fc:	2201      	movs	r2, #1
 80048fe:	488a      	ldr	r0, [pc, #552]	; (8004b28 <sample_save+0x2e8>)
 8004900:	f005 fb7d 	bl	8009ffe <HAL_SPI_Transmit>
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);   // end
 8004904:	2201      	movs	r2, #1
 8004906:	2110      	movs	r1, #16
 8004908:	4886      	ldr	r0, [pc, #536]	; (8004b24 <sample_save+0x2e4>)
 800490a:	f003 fea5 	bl	8008658 <HAL_GPIO_WritePin>
					HAL_Delay(5);
 800490e:	2005      	movs	r0, #5
 8004910:	f001 ff98 	bl	8006844 <HAL_Delay>
					spi_test[0]=0x52; //block
 8004914:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004918:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800491c:	2252      	movs	r2, #82	; 0x52
 800491e:	701a      	strb	r2, [r3, #0]

					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);         // enable for sector erase   , stays empty when enabled
 8004920:	2200      	movs	r2, #0
 8004922:	2110      	movs	r1, #16
 8004924:	487f      	ldr	r0, [pc, #508]	; (8004b24 <sample_save+0x2e4>)
 8004926:	f003 fe97 	bl	8008658 <HAL_GPIO_WritePin>
					HAL_SPI_Transmit(&hspi1, spi_test, 4, 1000);   //erase sector ,works       4kbytes   (block erase=32kbytes)
 800492a:	f107 010c 	add.w	r1, r7, #12
 800492e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004932:	2204      	movs	r2, #4
 8004934:	487c      	ldr	r0, [pc, #496]	; (8004b28 <sample_save+0x2e8>)
 8004936:	f005 fb62 	bl	8009ffe <HAL_SPI_Transmit>
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 800493a:	2201      	movs	r2, #1
 800493c:	2110      	movs	r1, #16
 800493e:	4879      	ldr	r0, [pc, #484]	; (8004b24 <sample_save+0x2e4>)
 8004940:	f003 fe8a 	bl	8008658 <HAL_GPIO_WritePin>
					HAL_Delay(250);  // SHOULD BE ENOUGH
 8004944:	20fa      	movs	r0, #250	; 0xfa
 8004946:	f001 ff7d 	bl	8006844 <HAL_Delay>



					if (sampler_ram_clear_test(sample_number)==0) return;    // quit if not empty
 800494a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800494e:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	4618      	mov	r0, r3
 8004956:	f7ff ff1b 	bl	8004790 <sampler_ram_clear_test>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 80da 	beq.w	8004b16 <sample_save+0x2d6>


		//uint16_t size_count=sample_size;

			spi_test[0]=0x03; //read page 1
 8004962:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004966:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800496a:	2203      	movs	r2, #3
 800496c:	701a      	strb	r2, [r3, #0]

			uint16_t write_counter=0;    // write start location
 800496e:	2300      	movs	r3, #0
 8004970:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
			uint8_t second_byte=(sample_number&1)<<7;
 8004974:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004978:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	01db      	lsls	r3, r3, #7
 8004980:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
			uint8_t max_count= sample_size>>8;
 8004984:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004988:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	0a1b      	lsrs	r3, r3, #8
 8004990:	b29b      	uxth	r3, r3
 8004992:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
			if (max_count>127) max_count=127;
 8004996:	f997 311d 	ldrsb.w	r3, [r7, #285]	; 0x11d
 800499a:	2b00      	cmp	r3, #0
 800499c:	da02      	bge.n	80049a4 <sample_save+0x164>
 800499e:	237f      	movs	r3, #127	; 0x7f
 80049a0:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d

					spi_test[0]=0x06; //enable write
 80049a4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80049a8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80049ac:	2206      	movs	r2, #6
 80049ae:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 80049b0:	2200      	movs	r2, #0
 80049b2:	2110      	movs	r1, #16
 80049b4:	485b      	ldr	r0, [pc, #364]	; (8004b24 <sample_save+0x2e4>)
 80049b6:	f003 fe4f 	bl	8008658 <HAL_GPIO_WritePin>
					HAL_SPI_Transmit(&hspi1, spi_test, 1, 1000);
 80049ba:	f107 010c 	add.w	r1, r7, #12
 80049be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049c2:	2201      	movs	r2, #1
 80049c4:	4858      	ldr	r0, [pc, #352]	; (8004b28 <sample_save+0x2e8>)
 80049c6:	f005 fb1a 	bl	8009ffe <HAL_SPI_Transmit>
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 80049ca:	2201      	movs	r2, #1
 80049cc:	2110      	movs	r1, #16
 80049ce:	4855      	ldr	r0, [pc, #340]	; (8004b24 <sample_save+0x2e4>)
 80049d0:	f003 fe42 	bl	8008658 <HAL_GPIO_WritePin>
					HAL_Delay(5);
 80049d4:	2005      	movs	r0, #5
 80049d6:	f001 ff35 	bl	8006844 <HAL_Delay>


					for (write_counter=0;write_counter<=max_count;write_counter++)  {
 80049da:	2300      	movs	r3, #0
 80049dc:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
 80049e0:	e06f      	b.n	8004ac2 <sample_save+0x282>

					    spi_test[0]=0x02; //write
 80049e2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80049e6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80049ea:	2202      	movs	r2, #2
 80049ec:	701a      	strb	r2, [r3, #0]
					    spi_test[1]=sample_number>>1; //0-256 this stays
 80049ee:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80049f2:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80049f6:	881b      	ldrh	r3, [r3, #0]
 80049f8:	085b      	lsrs	r3, r3, #1
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a02:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004a06:	705a      	strb	r2, [r3, #1]
					    spi_test[2]=write_counter+second_byte; //  0->127 or 128->255
 8004a08:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8004a0c:	b2da      	uxtb	r2, r3
 8004a0e:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8004a12:	4413      	add	r3, r2
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a1a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004a1e:	709a      	strb	r2, [r3, #2]
					    spi_test[3]=0; //24bit address lsb
 8004a20:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a24:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004a28:	2200      	movs	r2, #0
 8004a2a:	70da      	strb	r2, [r3, #3]

					//   spi_test[1]=255; //24bit address msb
					    			//		spi_test[2]=127+write_counter; //24bit address
					    			//		spi_test[3]=0; //24bit address lsb

					    memcpy  (spi_test+4 ,sample_data+(write_counter*256),  256);   // copy data to write buffer  sseems to be rolling over at 256
 8004a2c:	f107 030c 	add.w	r3, r7, #12
 8004a30:	3304      	adds	r3, #4
 8004a32:	f8b7 211e 	ldrh.w	r2, [r7, #286]	; 0x11e
 8004a36:	0212      	lsls	r2, r2, #8
 8004a38:	4611      	mov	r1, r2
 8004a3a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8004a3e:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004a42:	6812      	ldr	r2, [r2, #0]
 8004a44:	4411      	add	r1, r2
 8004a46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f007 ffda 	bl	800ca04 <memcpy>

					    spi_test[0]=0x06; //enable write each time
 8004a50:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a54:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004a58:	2206      	movs	r2, #6
 8004a5a:	701a      	strb	r2, [r3, #0]
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2110      	movs	r1, #16
 8004a60:	4830      	ldr	r0, [pc, #192]	; (8004b24 <sample_save+0x2e4>)
 8004a62:	f003 fdf9 	bl	8008658 <HAL_GPIO_WritePin>
					    HAL_SPI_Transmit(&hspi1, spi_test, 1, 1000);
 8004a66:	f107 010c 	add.w	r1, r7, #12
 8004a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a6e:	2201      	movs	r2, #1
 8004a70:	482d      	ldr	r0, [pc, #180]	; (8004b28 <sample_save+0x2e8>)
 8004a72:	f005 fac4 	bl	8009ffe <HAL_SPI_Transmit>
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8004a76:	2201      	movs	r2, #1
 8004a78:	2110      	movs	r1, #16
 8004a7a:	482a      	ldr	r0, [pc, #168]	; (8004b24 <sample_save+0x2e4>)
 8004a7c:	f003 fdec 	bl	8008658 <HAL_GPIO_WritePin>

					    spi_test[0]=0x02; //write
 8004a80:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a84:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004a88:	2202      	movs	r2, #2
 8004a8a:	701a      	strb	r2, [r3, #0]
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);   // low
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	2110      	movs	r1, #16
 8004a90:	4824      	ldr	r0, [pc, #144]	; (8004b24 <sample_save+0x2e4>)
 8004a92:	f003 fde1 	bl	8008658 <HAL_GPIO_WritePin>
					    HAL_SPI_Transmit(&hspi1, spi_test ,260, 1000);  //address,then data
 8004a96:	f107 010c 	add.w	r1, r7, #12
 8004a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a9e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004aa2:	4821      	ldr	r0, [pc, #132]	; (8004b28 <sample_save+0x2e8>)
 8004aa4:	f005 faab 	bl	8009ffe <HAL_SPI_Transmit>
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);  // high end
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	2110      	movs	r1, #16
 8004aac:	481d      	ldr	r0, [pc, #116]	; (8004b24 <sample_save+0x2e4>)
 8004aae:	f003 fdd3 	bl	8008658 <HAL_GPIO_WritePin>
					    HAL_Delay(10);
 8004ab2:	200a      	movs	r0, #10
 8004ab4:	f001 fec6 	bl	8006844 <HAL_Delay>
					for (write_counter=0;write_counter<=max_count;write_counter++)  {
 8004ab8:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8004abc:	3301      	adds	r3, #1
 8004abe:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
 8004ac2:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	f8b7 211e 	ldrh.w	r2, [r7, #286]	; 0x11e
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d988      	bls.n	80049e2 <sample_save+0x1a2>

					}


					spi_test[0]=0x04; //disable write
 8004ad0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ad4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004ad8:	2204      	movs	r2, #4
 8004ada:	701a      	strb	r2, [r3, #0]
										    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0); // low
 8004adc:	2200      	movs	r2, #0
 8004ade:	2110      	movs	r1, #16
 8004ae0:	4810      	ldr	r0, [pc, #64]	; (8004b24 <sample_save+0x2e4>)
 8004ae2:	f003 fdb9 	bl	8008658 <HAL_GPIO_WritePin>
										    HAL_SPI_Transmit(&hspi1, spi_test, 1, 1000);
 8004ae6:	f107 010c 	add.w	r1, r7, #12
 8004aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004aee:	2201      	movs	r2, #1
 8004af0:	480d      	ldr	r0, [pc, #52]	; (8004b28 <sample_save+0x2e8>)
 8004af2:	f005 fa84 	bl	8009ffe <HAL_SPI_Transmit>
										    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);   // high end
 8004af6:	2201      	movs	r2, #1
 8004af8:	2110      	movs	r1, #16
 8004afa:	480a      	ldr	r0, [pc, #40]	; (8004b24 <sample_save+0x2e4>)
 8004afc:	f003 fdac 	bl	8008658 <HAL_GPIO_WritePin>
										    HAL_Delay(20);  //should be enough in theory
 8004b00:	2014      	movs	r0, #20
 8004b02:	f001 fe9f 	bl	8006844 <HAL_Delay>


	 stop_toggle=2;  stop_start();  		// restart
 8004b06:	4b06      	ldr	r3, [pc, #24]	; (8004b20 <sample_save+0x2e0>)
 8004b08:	2202      	movs	r2, #2
 8004b0a:	701a      	strb	r2, [r3, #0]
 8004b0c:	f001 f9b6 	bl	8005e7c <stop_start>
 8004b10:	e002      	b.n	8004b18 <sample_save+0x2d8>
		if (sample_number>509) return ;
 8004b12:	bf00      	nop
 8004b14:	e000      	b.n	8004b18 <sample_save+0x2d8>
					if (sampler_ram_clear_test(sample_number)==0) return;    // quit if not empty
 8004b16:	bf00      	nop

	    }
 8004b18:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	20012750 	.word	0x20012750
 8004b24:	40020000 	.word	0x40020000
 8004b28:	20012854 	.word	0x20012854

08004b2c <sampler_1k_load>:




	void  sampler_1k_load(uint32_t load_address){   // 24 bit load address , for audio , 1kbyte   in 512 byte  chunks, last 64k off limits
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004b38:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8004b3c:	6018      	str	r0, [r3, #0]

	    uint8_t send_spi2[1030]={0} ;
 8004b3e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004b42:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	f240 4202 	movw	r2, #1026	; 0x402
 8004b50:	2100      	movs	r1, #0
 8004b52:	4618      	mov	r0, r3
 8004b54:	f007 ff64 	bl	800ca20 <memset>

	    load_address=load_address& 16777215; // 24 bit
 8004b58:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004b5c:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8004b60:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8004b64:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 8004b68:	6812      	ldr	r2, [r2, #0]
 8004b6a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004b6e:	601a      	str	r2, [r3, #0]
	    if (load_address >0xFEBFFF ) return;  // IMPORTANT !
 8004b70:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004b74:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a4c      	ldr	r2, [pc, #304]	; (8004cac <sampler_1k_load+0x180>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	f200 808f 	bhi.w	8004ca0 <sampler_1k_load+0x174>
	    send_spi2[0]=0x03; //read page 1
 8004b82:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004b86:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004b8a:	2203      	movs	r2, #3
 8004b8c:	701a      	strb	r2, [r3, #0]
	    send_spi2[1]=load_address>>16;			// last patch for now
 8004b8e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004b92:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	0c1b      	lsrs	r3, r3, #16
 8004b9a:	b2da      	uxtb	r2, r3
 8004b9c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004ba0:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004ba4:	705a      	strb	r2, [r3, #1]
	    send_spi2[2]=(load_address>>8)&255;    //
 8004ba6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004baa:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	0a1b      	lsrs	r3, r3, #8
 8004bb2:	b2da      	uxtb	r2, r3
 8004bb4:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004bb8:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004bbc:	709a      	strb	r2, [r3, #2]
	    send_spi2[3]=load_address&255;     // can start anywhere*/    // usally 0 padded when written
 8004bbe:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004bc2:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004bce:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004bd2:	70da      	strb	r2, [r3, #3]

	    current_spi[0]=send_spi2[0];   // to track  later
 8004bd4:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004bd8:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004bdc:	781a      	ldrb	r2, [r3, #0]
 8004bde:	4b34      	ldr	r3, [pc, #208]	; (8004cb0 <sampler_1k_load+0x184>)
 8004be0:	701a      	strb	r2, [r3, #0]
	    current_spi[1]=send_spi2[1];
 8004be2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004be6:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004bea:	785a      	ldrb	r2, [r3, #1]
 8004bec:	4b30      	ldr	r3, [pc, #192]	; (8004cb0 <sampler_1k_load+0x184>)
 8004bee:	705a      	strb	r2, [r3, #1]
	    current_spi[2]=send_spi2[2];
 8004bf0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004bf4:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004bf8:	789a      	ldrb	r2, [r3, #2]
 8004bfa:	4b2d      	ldr	r3, [pc, #180]	; (8004cb0 <sampler_1k_load+0x184>)
 8004bfc:	709a      	strb	r2, [r3, #2]
	    current_spi[3]=send_spi2[3];
 8004bfe:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004c02:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004c06:	78da      	ldrb	r2, [r3, #3]
 8004c08:	4b29      	ldr	r3, [pc, #164]	; (8004cb0 <sampler_1k_load+0x184>)
 8004c0a:	70da      	strb	r2, [r3, #3]

	    if ((flash_flag==3)&&(flash_bank_read==0))  {   memcpy( &flash_read_block, flash_read_block2+516,512); flash_flag=4; }  // second half
 8004c0c:	4b29      	ldr	r3, [pc, #164]	; (8004cb4 <sampler_1k_load+0x188>)
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b03      	cmp	r3, #3
 8004c14:	d10d      	bne.n	8004c32 <sampler_1k_load+0x106>
 8004c16:	4b28      	ldr	r3, [pc, #160]	; (8004cb8 <sampler_1k_load+0x18c>)
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d109      	bne.n	8004c32 <sampler_1k_load+0x106>
 8004c1e:	4b27      	ldr	r3, [pc, #156]	; (8004cbc <sampler_1k_load+0x190>)
 8004c20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c24:	4619      	mov	r1, r3
 8004c26:	4826      	ldr	r0, [pc, #152]	; (8004cc0 <sampler_1k_load+0x194>)
 8004c28:	f007 feec 	bl	800ca04 <memcpy>
 8004c2c:	4b21      	ldr	r3, [pc, #132]	; (8004cb4 <sampler_1k_load+0x188>)
 8004c2e:	2204      	movs	r2, #4
 8004c30:	701a      	strb	r2, [r3, #0]
	    if ((flash_flag==2)&&(flash_bank_read==1))   {   memcpy( &flash_read_block, flash_read_block2+4,512);   flash_flag=3;           }  // second half
 8004c32:	4b20      	ldr	r3, [pc, #128]	; (8004cb4 <sampler_1k_load+0x188>)
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d10d      	bne.n	8004c58 <sampler_1k_load+0x12c>
 8004c3c:	4b1e      	ldr	r3, [pc, #120]	; (8004cb8 <sampler_1k_load+0x18c>)
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d109      	bne.n	8004c58 <sampler_1k_load+0x12c>
 8004c44:	4b1f      	ldr	r3, [pc, #124]	; (8004cc4 <sampler_1k_load+0x198>)
 8004c46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	481c      	ldr	r0, [pc, #112]	; (8004cc0 <sampler_1k_load+0x194>)
 8004c4e:	f007 fed9 	bl	800ca04 <memcpy>
 8004c52:	4b18      	ldr	r3, [pc, #96]	; (8004cb4 <sampler_1k_load+0x188>)
 8004c54:	2203      	movs	r2, #3
 8004c56:	701a      	strb	r2, [r3, #0]
	    flash_bank_read=!flash_bank_read;
 8004c58:	4b17      	ldr	r3, [pc, #92]	; (8004cb8 <sampler_1k_load+0x18c>)
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	bf0c      	ite	eq
 8004c60:	2301      	moveq	r3, #1
 8004c62:	2300      	movne	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	461a      	mov	r2, r3
 8004c68:	4b13      	ldr	r3, [pc, #76]	; (8004cb8 <sampler_1k_load+0x18c>)
 8004c6a:	701a      	strb	r2, [r3, #0]

		    if ((flash_flag==4)&&  (flash_bank_read==1) )    {
 8004c6c:	4b11      	ldr	r3, [pc, #68]	; (8004cb4 <sampler_1k_load+0x188>)
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	d115      	bne.n	8004ca2 <sampler_1k_load+0x176>
 8004c76:	4b10      	ldr	r3, [pc, #64]	; (8004cb8 <sampler_1k_load+0x18c>)
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d111      	bne.n	8004ca2 <sampler_1k_load+0x176>

			HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);HAL_SPI_TransmitReceive_DMA(&hspi1, send_spi2,flash_read_block2,1028);
 8004c7e:	2200      	movs	r2, #0
 8004c80:	2110      	movs	r1, #16
 8004c82:	4811      	ldr	r0, [pc, #68]	; (8004cc8 <sampler_1k_load+0x19c>)
 8004c84:	f003 fce8 	bl	8008658 <HAL_GPIO_WritePin>
 8004c88:	f107 0108 	add.w	r1, r7, #8
 8004c8c:	f240 4304 	movw	r3, #1028	; 0x404
 8004c90:	4a0e      	ldr	r2, [pc, #56]	; (8004ccc <sampler_1k_load+0x1a0>)
 8004c92:	480f      	ldr	r0, [pc, #60]	; (8004cd0 <sampler_1k_load+0x1a4>)
 8004c94:	f005 fd48 	bl	800a728 <HAL_SPI_TransmitReceive_DMA>
		    //HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  //  terrible internet advice , put cs low before not after  !
		    flash_flag=0;  }
 8004c98:	4b06      	ldr	r3, [pc, #24]	; (8004cb4 <sampler_1k_load+0x188>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	701a      	strb	r2, [r3, #0]
 8004c9e:	e000      	b.n	8004ca2 <sampler_1k_load+0x176>
	    if (load_address >0xFEBFFF ) return;  // IMPORTANT !
 8004ca0:	bf00      	nop

	}
 8004ca2:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	00febfff 	.word	0x00febfff
 8004cb0:	200126cc 	.word	0x200126cc
 8004cb4:	20008ee4 	.word	0x20008ee4
 8004cb8:	200126c6 	.word	0x200126c6
 8004cbc:	200124c4 	.word	0x200124c4
 8004cc0:	200120ac 	.word	0x200120ac
 8004cc4:	200122c4 	.word	0x200122c4
 8004cc8:	40020000 	.word	0x40020000
 8004ccc:	200122c0 	.word	0x200122c0
 8004cd0:	20012854 	.word	0x20012854

08004cd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cd6:	b0a7      	sub	sp, #156	; 0x9c
 8004cd8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004cda:	f001 fd41 	bl	8006760 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004cde:	f000 fbf5 	bl	80054cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004ce2:	f000 ff9d 	bl	8005c20 <MX_GPIO_Init>
  MX_DMA_Init();
 8004ce6:	f000 ff55 	bl	8005b94 <MX_DMA_Init>
  MX_ADC1_Init();
 8004cea:	f000 fc59 	bl	80055a0 <MX_ADC1_Init>
  MX_SPI2_Init();
 8004cee:	f000 fd51 	bl	8005794 <MX_SPI2_Init>
  MX_TIM3_Init();
 8004cf2:	f000 fdd9 	bl	80058a8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8004cf6:	f000 fe59 	bl	80059ac <MX_TIM4_Init>
  MX_I2C2_Init();
 8004cfa:	f000 fce7 	bl	80056cc <MX_I2C2_Init>
  MX_SPI1_Init();
 8004cfe:	f000 fd13 	bl	8005728 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8004d02:	f000 fef3 	bl	8005aec <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8004d06:	f000 ff1b 	bl	8005b40 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8004d0a:	f000 fea5 	bl	8005a58 <MX_TIM10_Init>
  MX_TIM2_Init();
 8004d0e:	f000 fd77 	bl	8005800 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

main_initial();   // initial setup
 8004d12:	f7fc fdd3 	bl	80018bc <main_initial>
  while (1)																																																		//   while loop , random 20+ms freeze around 0.5 sec
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_counter++ ;
 8004d16:	4bb7      	ldr	r3, [pc, #732]	; (8004ff4 <main+0x320>)
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	4bb5      	ldr	r3, [pc, #724]	; (8004ff4 <main+0x320>)
 8004d20:	701a      	strb	r2, [r3, #0]
	  loop_counter2++;// this pretty slow now thanks to gfx , no skips though
 8004d22:	4bb5      	ldr	r3, [pc, #724]	; (8004ff8 <main+0x324>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3301      	adds	r3, #1
 8004d28:	4ab3      	ldr	r2, [pc, #716]	; (8004ff8 <main+0x324>)
 8004d2a:	6013      	str	r3, [r2, #0]

	  // if (menu_page<320) lcd_feedback();  //curious no issues with lcd without this  , maybe spell writing
	  uint32_t  millis = HAL_GetTick();
 8004d2c:	f001 fd7e 	bl	800682c <HAL_GetTick>
 8004d30:	67f8      	str	r0, [r7, #124]	; 0x7c


	  if 	((loop_counter2&7)==6)      {analoginputloopb();} // this is ok , plenty quick , no freeze here
 8004d32:	4bb1      	ldr	r3, [pc, #708]	; (8004ff8 <main+0x324>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0307 	and.w	r3, r3, #7
 8004d3a:	2b06      	cmp	r3, #6
 8004d3c:	d101      	bne.n	8004d42 <main+0x6e>
 8004d3e:	f7fc fd05 	bl	800174c <analoginputloopb>
			  if ((seq.tempo<40)&&(stop_toggle==0))    {stop_toggle=1; stop_start();stop_toggle=3; seq.tempo=50; }
 8004d42:	4bae      	ldr	r3, [pc, #696]	; (8004ffc <main+0x328>)
 8004d44:	785b      	ldrb	r3, [r3, #1]
 8004d46:	2b27      	cmp	r3, #39	; 0x27
 8004d48:	d80e      	bhi.n	8004d68 <main+0x94>
 8004d4a:	4bad      	ldr	r3, [pc, #692]	; (8005000 <main+0x32c>)
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10a      	bne.n	8004d68 <main+0x94>
 8004d52:	4bab      	ldr	r3, [pc, #684]	; (8005000 <main+0x32c>)
 8004d54:	2201      	movs	r2, #1
 8004d56:	701a      	strb	r2, [r3, #0]
 8004d58:	f001 f890 	bl	8005e7c <stop_start>
 8004d5c:	4ba8      	ldr	r3, [pc, #672]	; (8005000 <main+0x32c>)
 8004d5e:	2203      	movs	r2, #3
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	4ba6      	ldr	r3, [pc, #664]	; (8004ffc <main+0x328>)
 8004d64:	2232      	movs	r2, #50	; 0x32
 8004d66:	705a      	strb	r2, [r3, #1]
			  if ((seq.tempo<40)&&(stop_toggle==3))    {stop_toggle=2; stop_start();  stop_toggle=0;seq.tempo=50; }
 8004d68:	4ba4      	ldr	r3, [pc, #656]	; (8004ffc <main+0x328>)
 8004d6a:	785b      	ldrb	r3, [r3, #1]
 8004d6c:	2b27      	cmp	r3, #39	; 0x27
 8004d6e:	d80e      	bhi.n	8004d8e <main+0xba>
 8004d70:	4ba3      	ldr	r3, [pc, #652]	; (8005000 <main+0x32c>)
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	2b03      	cmp	r3, #3
 8004d76:	d10a      	bne.n	8004d8e <main+0xba>
 8004d78:	4ba1      	ldr	r3, [pc, #644]	; (8005000 <main+0x32c>)
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	701a      	strb	r2, [r3, #0]
 8004d7e:	f001 f87d 	bl	8005e7c <stop_start>
 8004d82:	4b9f      	ldr	r3, [pc, #636]	; (8005000 <main+0x32c>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	701a      	strb	r2, [r3, #0]
 8004d88:	4b9c      	ldr	r3, [pc, #624]	; (8004ffc <main+0x328>)
 8004d8a:	2232      	movs	r2, #50	; 0x32
 8004d8c:	705a      	strb	r2, [r3, #1]

	if (loop_counter2==9024) {    //   4096=1min=32bytes so 4mins per 128 bank or 15 writes/hour , no freeze here
 8004d8e:	4b9a      	ldr	r3, [pc, #616]	; (8004ff8 <main+0x324>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f5b3 5f0d 	cmp.w	r3, #9024	; 0x2340
 8004d96:	f040 8193 	bne.w	80050c0 <main+0x3ec>

		    if (mem_count>510) mem_count=0; else mem_count++;
 8004d9a:	4b9a      	ldr	r3, [pc, #616]	; (8005004 <main+0x330>)
 8004d9c:	881b      	ldrh	r3, [r3, #0]
 8004d9e:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8004da2:	d903      	bls.n	8004dac <main+0xd8>
 8004da4:	4b97      	ldr	r3, [pc, #604]	; (8005004 <main+0x330>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	801a      	strh	r2, [r3, #0]
 8004daa:	e005      	b.n	8004db8 <main+0xe4>
 8004dac:	4b95      	ldr	r3, [pc, #596]	; (8005004 <main+0x330>)
 8004dae:	881b      	ldrh	r3, [r3, #0]
 8004db0:	3301      	adds	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	4b93      	ldr	r3, [pc, #588]	; (8005004 <main+0x330>)
 8004db6:	801a      	strh	r2, [r3, #0]
		    if (mem_count>460) mem_count=461;  // this might feedback
 8004db8:	4b92      	ldr	r3, [pc, #584]	; (8005004 <main+0x330>)
 8004dba:	881b      	ldrh	r3, [r3, #0]
 8004dbc:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8004dc0:	d903      	bls.n	8004dca <main+0xf6>
 8004dc2:	4b90      	ldr	r3, [pc, #576]	; (8005004 <main+0x330>)
 8004dc4:	f240 12cd 	movw	r2, #461	; 0x1cd
 8004dc8:	801a      	strh	r2, [r3, #0]
		   // write to first this was moved for no logical reason ?

			  patch_target_parse(); //
 8004dca:	f7fc fa81 	bl	80012d0 <patch_target_parse>
			  uint16_t mem_count2=0;	// read values from stored
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a


			memcpy(potSource,&seq,46); // about 35
 8004dd4:	4a8c      	ldr	r2, [pc, #560]	; (8005008 <main+0x334>)
 8004dd6:	4b89      	ldr	r3, [pc, #548]	; (8004ffc <main+0x328>)
 8004dd8:	4614      	mov	r4, r2
 8004dda:	461d      	mov	r5, r3
 8004ddc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004dde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004de0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004de2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004de4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004de8:	c407      	stmia	r4!, {r0, r1, r2}
 8004dea:	8023      	strh	r3, [r4, #0]
			memcpy(potSource+476,&sampler,11);
 8004dec:	4b87      	ldr	r3, [pc, #540]	; (800500c <main+0x338>)
 8004dee:	220b      	movs	r2, #11
 8004df0:	4987      	ldr	r1, [pc, #540]	; (8005010 <main+0x33c>)
 8004df2:	4618      	mov	r0, r3
 8004df4:	f007 fe06 	bl	800ca04 <memcpy>
			for(i=0;i<10;i++){
 8004df8:	4b86      	ldr	r3, [pc, #536]	; (8005014 <main+0x340>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	801a      	strh	r2, [r3, #0]
 8004dfe:	e0a2      	b.n	8004f46 <main+0x272>
					memcpy(potSource+156+(i*14),&note[i],14 );  //grab note settings ,112 total , works
 8004e00:	4b84      	ldr	r3, [pc, #528]	; (8005014 <main+0x340>)
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	461a      	mov	r2, r3
 8004e06:	4613      	mov	r3, r2
 8004e08:	00db      	lsls	r3, r3, #3
 8004e0a:	1a9b      	subs	r3, r3, r2
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	339c      	adds	r3, #156	; 0x9c
 8004e10:	4a7d      	ldr	r2, [pc, #500]	; (8005008 <main+0x334>)
 8004e12:	1898      	adds	r0, r3, r2
 8004e14:	4b7f      	ldr	r3, [pc, #508]	; (8005014 <main+0x340>)
 8004e16:	881b      	ldrh	r3, [r3, #0]
 8004e18:	461a      	mov	r2, r3
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	00db      	lsls	r3, r3, #3
 8004e1e:	1a9b      	subs	r3, r3, r2
 8004e20:	005b      	lsls	r3, r3, #1
 8004e22:	4a7d      	ldr	r2, [pc, #500]	; (8005018 <main+0x344>)
 8004e24:	4413      	add	r3, r2
 8004e26:	220e      	movs	r2, #14
 8004e28:	4619      	mov	r1, r3
 8004e2a:	f007 fdeb 	bl	800ca04 <memcpy>

				memcpy(potSource+46+(i*6),&LFO[i],6 );  // + 60  ,ok
 8004e2e:	4b79      	ldr	r3, [pc, #484]	; (8005014 <main+0x340>)
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	461a      	mov	r2, r3
 8004e34:	4613      	mov	r3, r2
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	4413      	add	r3, r2
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	332e      	adds	r3, #46	; 0x2e
 8004e3e:	4a72      	ldr	r2, [pc, #456]	; (8005008 <main+0x334>)
 8004e40:	1898      	adds	r0, r3, r2
 8004e42:	4b74      	ldr	r3, [pc, #464]	; (8005014 <main+0x340>)
 8004e44:	881b      	ldrh	r3, [r3, #0]
 8004e46:	461a      	mov	r2, r3
 8004e48:	4613      	mov	r3, r2
 8004e4a:	011b      	lsls	r3, r3, #4
 8004e4c:	4413      	add	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4a72      	ldr	r2, [pc, #456]	; (800501c <main+0x348>)
 8004e52:	4413      	add	r3, r2
 8004e54:	2206      	movs	r2, #6
 8004e56:	4619      	mov	r1, r3
 8004e58:	f007 fdd4 	bl	800ca04 <memcpy>
				memcpy(potSource+106+(i*5),&ADSR[i],5 );  // +50  ,
 8004e5c:	4b6d      	ldr	r3, [pc, #436]	; (8005014 <main+0x340>)
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	461a      	mov	r2, r3
 8004e62:	4613      	mov	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	336a      	adds	r3, #106	; 0x6a
 8004e6a:	4a67      	ldr	r2, [pc, #412]	; (8005008 <main+0x334>)
 8004e6c:	1898      	adds	r0, r3, r2
 8004e6e:	4b69      	ldr	r3, [pc, #420]	; (8005014 <main+0x340>)
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	461a      	mov	r2, r3
 8004e74:	f44f 7307 	mov.w	r3, #540	; 0x21c
 8004e78:	fb02 f303 	mul.w	r3, r2, r3
 8004e7c:	4a68      	ldr	r2, [pc, #416]	; (8005020 <main+0x34c>)
 8004e7e:	4413      	add	r3, r2
 8004e80:	2205      	movs	r2, #5
 8004e82:	4619      	mov	r1, r3
 8004e84:	f007 fdbe 	bl	800ca04 <memcpy>
				memcpy(potSource+316+(i*3),&patch[i],3 );
 8004e88:	4b62      	ldr	r3, [pc, #392]	; (8005014 <main+0x340>)
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	4613      	mov	r3, r2
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	4413      	add	r3, r2
 8004e94:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004e98:	4a5b      	ldr	r2, [pc, #364]	; (8005008 <main+0x334>)
 8004e9a:	1898      	adds	r0, r3, r2
 8004e9c:	4b5d      	ldr	r3, [pc, #372]	; (8005014 <main+0x340>)
 8004e9e:	881b      	ldrh	r3, [r3, #0]
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	4a5e      	ldr	r2, [pc, #376]	; (8005024 <main+0x350>)
 8004eac:	4413      	add	r3, r2
 8004eae:	2203      	movs	r2, #3
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	f007 fda7 	bl	800ca04 <memcpy>
				memcpy(potSource+346+(i*3),&patch[i+10],3 );
 8004eb6:	4b57      	ldr	r3, [pc, #348]	; (8005014 <main+0x340>)
 8004eb8:	881b      	ldrh	r3, [r3, #0]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 73ad 	add.w	r3, r3, #346	; 0x15a
 8004ec6:	4a50      	ldr	r2, [pc, #320]	; (8005008 <main+0x334>)
 8004ec8:	1898      	adds	r0, r3, r2
 8004eca:	4b52      	ldr	r3, [pc, #328]	; (8005014 <main+0x340>)
 8004ecc:	881b      	ldrh	r3, [r3, #0]
 8004ece:	f103 020a 	add.w	r2, r3, #10
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	00db      	lsls	r3, r3, #3
 8004eda:	4a52      	ldr	r2, [pc, #328]	; (8005024 <main+0x350>)
 8004edc:	4413      	add	r3, r2
 8004ede:	2203      	movs	r2, #3
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	f007 fd8f 	bl	800ca04 <memcpy>
				memcpy(potSource+376+(i*6),&LFO_slave1[i],6 ); // ext llof settings
 8004ee6:	4b4b      	ldr	r3, [pc, #300]	; (8005014 <main+0x340>)
 8004ee8:	881b      	ldrh	r3, [r3, #0]
 8004eea:	461a      	mov	r2, r3
 8004eec:	4613      	mov	r3, r2
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	4413      	add	r3, r2
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004ef8:	4a43      	ldr	r2, [pc, #268]	; (8005008 <main+0x334>)
 8004efa:	1898      	adds	r0, r3, r2
 8004efc:	4b45      	ldr	r3, [pc, #276]	; (8005014 <main+0x340>)
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	461a      	mov	r2, r3
 8004f02:	4613      	mov	r3, r2
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	4413      	add	r3, r2
 8004f08:	005b      	lsls	r3, r3, #1
 8004f0a:	4a47      	ldr	r2, [pc, #284]	; (8005028 <main+0x354>)
 8004f0c:	4413      	add	r3, r2
 8004f0e:	2206      	movs	r2, #6
 8004f10:	4619      	mov	r1, r3
 8004f12:	f007 fd77 	bl	800ca04 <memcpy>
				memcpy(potSource+436+(i*4),&LFO_square[i],4 );
 8004f16:	4b3f      	ldr	r3, [pc, #252]	; (8005014 <main+0x340>)
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8004f20:	4a39      	ldr	r2, [pc, #228]	; (8005008 <main+0x334>)
 8004f22:	441a      	add	r2, r3
 8004f24:	4b3b      	ldr	r3, [pc, #236]	; (8005014 <main+0x340>)
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	4619      	mov	r1, r3
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	440b      	add	r3, r1
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	493e      	ldr	r1, [pc, #248]	; (800502c <main+0x358>)
 8004f34:	440b      	add	r3, r1
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6013      	str	r3, [r2, #0]
			for(i=0;i<10;i++){
 8004f3a:	4b36      	ldr	r3, [pc, #216]	; (8005014 <main+0x340>)
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	4b34      	ldr	r3, [pc, #208]	; (8005014 <main+0x340>)
 8004f44:	801a      	strh	r2, [r3, #0]
 8004f46:	4b33      	ldr	r3, [pc, #204]	; (8005014 <main+0x340>)
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	2b09      	cmp	r3, #9
 8004f4c:	f67f af58 	bls.w	8004e00 <main+0x12c>

			}	// copy vars into potSource

			//HAL_UART_Transmit(&huart1,serial_send,4, 100);  //send serial again

			mem_count2=0;
 8004f50:	2300      	movs	r3, #0
 8004f52:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
			//	mem_buf=0;
					// mem_verify=0;

					// for patch write start at 2048 for now
			 uint8_t mem_buf_list[50]={0};
 8004f56:	2300      	movs	r3, #0
 8004f58:	607b      	str	r3, [r7, #4]
 8004f5a:	f107 0308 	add.w	r3, r7, #8
 8004f5e:	222e      	movs	r2, #46	; 0x2e
 8004f60:	2100      	movs	r1, #0
 8004f62:	4618      	mov	r0, r3
 8004f64:	f007 fd5c 	bl	800ca20 <memset>
			 uint8_t mem_verify_list[50]={0};
 8004f68:	2300      	movs	r3, #0
 8004f6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f6c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004f70:	222e      	movs	r2, #46	; 0x2e
 8004f72:	2100      	movs	r1, #0
 8004f74:	4618      	mov	r0, r3
 8004f76:	f007 fd53 	bl	800ca20 <memset>
			 uint8_t read_counter=0;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			//  --   compare 50 bytes
			 memcpy(&mem_buf_list, potSource+mem_count,50);  // copy 50 from potsource
 8004f80:	4b20      	ldr	r3, [pc, #128]	; (8005004 <main+0x330>)
 8004f82:	881b      	ldrh	r3, [r3, #0]
 8004f84:	461a      	mov	r2, r3
 8004f86:	4b20      	ldr	r3, [pc, #128]	; (8005008 <main+0x334>)
 8004f88:	4413      	add	r3, r2
 8004f8a:	461c      	mov	r4, r3
 8004f8c:	1d3e      	adds	r6, r7, #4
 8004f8e:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8004f92:	4635      	mov	r5, r6
 8004f94:	4623      	mov	r3, r4
 8004f96:	6818      	ldr	r0, [r3, #0]
 8004f98:	6859      	ldr	r1, [r3, #4]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fa0:	3410      	adds	r4, #16
 8004fa2:	3610      	adds	r6, #16
 8004fa4:	4564      	cmp	r4, ip
 8004fa6:	d1f4      	bne.n	8004f92 <main+0x2be>
 8004fa8:	4632      	mov	r2, r6
 8004faa:	4623      	mov	r3, r4
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	8013      	strh	r3, [r2, #0]
			 mem_count2=((1+(mem_count>>6))<<6)+(mem_count&63);
 8004fb0:	4b14      	ldr	r3, [pc, #80]	; (8005004 <main+0x330>)
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	099b      	lsrs	r3, r3, #6
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	3301      	adds	r3, #1
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	019b      	lsls	r3, r3, #6
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	4b10      	ldr	r3, [pc, #64]	; (8005004 <main+0x330>)
 8004fc2:	881b      	ldrh	r3, [r3, #0]
 8004fc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	4413      	add	r3, r2
 8004fcc:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
			 HAL_I2C_Mem_Read(&hi2c2, 160,mem_count2, 2,mem_verify_list, 50,100);    // reading is quick , 50 bytse
 8004fd0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8004fd4:	2364      	movs	r3, #100	; 0x64
 8004fd6:	9302      	str	r3, [sp, #8]
 8004fd8:	2332      	movs	r3, #50	; 0x32
 8004fda:	9301      	str	r3, [sp, #4]
 8004fdc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	21a0      	movs	r1, #160	; 0xa0
 8004fe6:	4812      	ldr	r0, [pc, #72]	; (8005030 <main+0x35c>)
 8004fe8:	f003 fda6 	bl	8008b38 <HAL_I2C_Mem_Read>
			 for (read_counter=0;read_counter<50;read_counter++){
 8004fec:	2300      	movs	r3, #0
 8004fee:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8004ff2:	e038      	b.n	8005066 <main+0x392>
 8004ff4:	2000983e 	.word	0x2000983e
 8004ff8:	2000c098 	.word	0x2000c098
 8004ffc:	2000dc7c 	.word	0x2000dc7c
 8005000:	20012750 	.word	0x20012750
 8005004:	2000c096 	.word	0x2000c096
 8005008:	200095d8 	.word	0x200095d8
 800500c:	200097b4 	.word	0x200097b4
 8005010:	20008eb4 	.word	0x20008eb4
 8005014:	20009842 	.word	0x20009842
 8005018:	20008e08 	.word	0x20008e08
 800501c:	2000ce44 	.word	0x2000ce44
 8005020:	2000d1f0 	.word	0x2000d1f0
 8005024:	2000dcac 	.word	0x2000dcac
 8005028:	2000d0ec 	.word	0x2000d0ec
 800502c:	2000d128 	.word	0x2000d128
 8005030:	20012800 	.word	0x20012800

			     if (mem_verify_list[read_counter]!=mem_buf_list[read_counter])  { break;}  // exit if found difference
 8005034:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8005038:	3388      	adds	r3, #136	; 0x88
 800503a:	443b      	add	r3, r7
 800503c:	f813 2c50 	ldrb.w	r2, [r3, #-80]
 8005040:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8005044:	3388      	adds	r3, #136	; 0x88
 8005046:	443b      	add	r3, r7
 8005048:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 800504c:	429a      	cmp	r2, r3
 800504e:	d10f      	bne.n	8005070 <main+0x39c>
			     mem_count++;
 8005050:	4b6e      	ldr	r3, [pc, #440]	; (800520c <main+0x538>)
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	3301      	adds	r3, #1
 8005056:	b29a      	uxth	r2, r3
 8005058:	4b6c      	ldr	r3, [pc, #432]	; (800520c <main+0x538>)
 800505a:	801a      	strh	r2, [r3, #0]
			 for (read_counter=0;read_counter<50;read_counter++){
 800505c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8005060:	3301      	adds	r3, #1
 8005062:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8005066:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800506a:	2b31      	cmp	r3, #49	; 0x31
 800506c:	d9e2      	bls.n	8005034 <main+0x360>
 800506e:	e000      	b.n	8005072 <main+0x39e>
			     if (mem_verify_list[read_counter]!=mem_buf_list[read_counter])  { break;}  // exit if found difference
 8005070:	bf00      	nop

			 }
						 // ----- write changed data , might shift these off by one after a while to stop wear
						 mem_buf=potSource[mem_count];
 8005072:	4b66      	ldr	r3, [pc, #408]	; (800520c <main+0x538>)
 8005074:	881b      	ldrh	r3, [r3, #0]
 8005076:	461a      	mov	r2, r3
 8005078:	4b65      	ldr	r3, [pc, #404]	; (8005210 <main+0x53c>)
 800507a:	5c9a      	ldrb	r2, [r3, r2]
 800507c:	4b65      	ldr	r3, [pc, #404]	; (8005214 <main+0x540>)
 800507e:	701a      	strb	r2, [r3, #0]
						 mem_count2=((1+(mem_count>>6))<<6)+(mem_count&63);
 8005080:	4b62      	ldr	r3, [pc, #392]	; (800520c <main+0x538>)
 8005082:	881b      	ldrh	r3, [r3, #0]
 8005084:	099b      	lsrs	r3, r3, #6
 8005086:	b29b      	uxth	r3, r3
 8005088:	3301      	adds	r3, #1
 800508a:	b29b      	uxth	r3, r3
 800508c:	019b      	lsls	r3, r3, #6
 800508e:	b29a      	uxth	r2, r3
 8005090:	4b5e      	ldr	r3, [pc, #376]	; (800520c <main+0x538>)
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005098:	b29b      	uxth	r3, r3
 800509a:	4413      	add	r3, r2
 800509c:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

						HAL_I2C_Mem_Write(&hi2c2, 160,mem_count2 , 2, &mem_buf, 1, 100);   // write changed
 80050a0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80050a4:	2364      	movs	r3, #100	; 0x64
 80050a6:	9302      	str	r3, [sp, #8]
 80050a8:	2301      	movs	r3, #1
 80050aa:	9301      	str	r3, [sp, #4]
 80050ac:	4b59      	ldr	r3, [pc, #356]	; (8005214 <main+0x540>)
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	2302      	movs	r3, #2
 80050b2:	21a0      	movs	r1, #160	; 0xa0
 80050b4:	4858      	ldr	r0, [pc, #352]	; (8005218 <main+0x544>)
 80050b6:	f003 fc45 	bl	8008944 <HAL_I2C_Mem_Write>

			 // "&hi2c2"  actual register address  , write only when needed

		loop_counter2=0; //reset
 80050ba:	4b58      	ldr	r3, [pc, #352]	; (800521c <main+0x548>)
 80050bc:	2200      	movs	r2, #0
 80050be:	601a      	str	r2, [r3, #0]

		}


	if (serial_tosend){    // send on seq change
 80050c0:	4b57      	ldr	r3, [pc, #348]	; (8005220 <main+0x54c>)
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 8093 	beq.w	80051f0 <main+0x51c>
		uint16_t mem_counter=0;
 80050ca:	2300      	movs	r3, #0
 80050cc:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
		  memcpy(serial_source,&seq,36); // copy bits
 80050d0:	2224      	movs	r2, #36	; 0x24
 80050d2:	4954      	ldr	r1, [pc, #336]	; (8005224 <main+0x550>)
 80050d4:	4854      	ldr	r0, [pc, #336]	; (8005228 <main+0x554>)
 80050d6:	f007 fc95 	bl	800ca04 <memcpy>

		  memcpy(serial_source+96,potSource+252,64 );  // 4 * 16
 80050da:	4b54      	ldr	r3, [pc, #336]	; (800522c <main+0x558>)
 80050dc:	4954      	ldr	r1, [pc, #336]	; (8005230 <main+0x55c>)
 80050de:	2240      	movs	r2, #64	; 0x40
 80050e0:	4618      	mov	r0, r3
 80050e2:	f007 fc8f 	bl	800ca04 <memcpy>
		  for(mem_counter=0;mem_counter<10;mem_counter++){
 80050e6:	2300      	movs	r3, #0
 80050e8:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 80050ec:	e032      	b.n	8005154 <main+0x480>
			  if (mem_counter<4)memcpy(serial_source+96+(mem_counter*7),&note[mem_counter+6],7 );
 80050ee:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80050f2:	2b03      	cmp	r3, #3
 80050f4:	d814      	bhi.n	8005120 <main+0x44c>
 80050f6:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 80050fa:	4613      	mov	r3, r2
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	1a9b      	subs	r3, r3, r2
 8005100:	3360      	adds	r3, #96	; 0x60
 8005102:	4a49      	ldr	r2, [pc, #292]	; (8005228 <main+0x554>)
 8005104:	1898      	adds	r0, r3, r2
 8005106:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800510a:	1d9a      	adds	r2, r3, #6
 800510c:	4613      	mov	r3, r2
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	1a9b      	subs	r3, r3, r2
 8005112:	005b      	lsls	r3, r3, #1
 8005114:	4a47      	ldr	r2, [pc, #284]	; (8005234 <main+0x560>)
 8005116:	4413      	add	r3, r2
 8005118:	2207      	movs	r2, #7
 800511a:	4619      	mov	r1, r3
 800511c:	f007 fc72 	bl	800ca04 <memcpy>
						memcpy(serial_source+36+(mem_counter*6),&LFO_slave1[mem_counter],6 );  // insert lfo settings
 8005120:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8005124:	4613      	mov	r3, r2
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	4413      	add	r3, r2
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	3324      	adds	r3, #36	; 0x24
 800512e:	4a3e      	ldr	r2, [pc, #248]	; (8005228 <main+0x554>)
 8005130:	1898      	adds	r0, r3, r2
 8005132:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8005136:	4613      	mov	r3, r2
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	4413      	add	r3, r2
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	4a3e      	ldr	r2, [pc, #248]	; (8005238 <main+0x564>)
 8005140:	4413      	add	r3, r2
 8005142:	2206      	movs	r2, #6
 8005144:	4619      	mov	r1, r3
 8005146:	f007 fc5d 	bl	800ca04 <memcpy>
		  for(mem_counter=0;mem_counter<10;mem_counter++){
 800514a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800514e:	3301      	adds	r3, #1
 8005150:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8005154:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005158:	2b09      	cmp	r3, #9
 800515a:	d9c8      	bls.n	80050ee <main+0x41a>
				  }

		  while ((serial_source_temp[serial_up]==serial_source[serial_up]) &&(serial_up<161) )   {
 800515c:	e005      	b.n	800516a <main+0x496>
			  serial_up++;
 800515e:	4b37      	ldr	r3, [pc, #220]	; (800523c <main+0x568>)
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	3301      	adds	r3, #1
 8005164:	b2da      	uxtb	r2, r3
 8005166:	4b35      	ldr	r3, [pc, #212]	; (800523c <main+0x568>)
 8005168:	701a      	strb	r2, [r3, #0]
		  while ((serial_source_temp[serial_up]==serial_source[serial_up]) &&(serial_up<161) )   {
 800516a:	4b34      	ldr	r3, [pc, #208]	; (800523c <main+0x568>)
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	461a      	mov	r2, r3
 8005170:	4b33      	ldr	r3, [pc, #204]	; (8005240 <main+0x56c>)
 8005172:	5c9a      	ldrb	r2, [r3, r2]
 8005174:	4b31      	ldr	r3, [pc, #196]	; (800523c <main+0x568>)
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	4619      	mov	r1, r3
 800517a:	4b2b      	ldr	r3, [pc, #172]	; (8005228 <main+0x554>)
 800517c:	5c5b      	ldrb	r3, [r3, r1]
 800517e:	429a      	cmp	r2, r3
 8005180:	d103      	bne.n	800518a <main+0x4b6>
 8005182:	4b2e      	ldr	r3, [pc, #184]	; (800523c <main+0x568>)
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	2ba0      	cmp	r3, #160	; 0xa0
 8005188:	d9e9      	bls.n	800515e <main+0x48a>
		  }

		  serial_send[6]=0;
 800518a:	4b2e      	ldr	r3, [pc, #184]	; (8005244 <main+0x570>)
 800518c:	2200      	movs	r2, #0
 800518e:	719a      	strb	r2, [r3, #6]
		  serial_send[7]=seq.pos;  // chase
 8005190:	4b24      	ldr	r3, [pc, #144]	; (8005224 <main+0x550>)
 8005192:	781a      	ldrb	r2, [r3, #0]
 8005194:	4b2b      	ldr	r3, [pc, #172]	; (8005244 <main+0x570>)
 8005196:	71da      	strb	r2, [r3, #7]
		  serial_send[2]=serial_up;
 8005198:	4b28      	ldr	r3, [pc, #160]	; (800523c <main+0x568>)
 800519a:	781a      	ldrb	r2, [r3, #0]
 800519c:	4b29      	ldr	r3, [pc, #164]	; (8005244 <main+0x570>)
 800519e:	709a      	strb	r2, [r3, #2]
		  serial_send[3]=serial_source[serial_up];
 80051a0:	4b26      	ldr	r3, [pc, #152]	; (800523c <main+0x568>)
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	461a      	mov	r2, r3
 80051a6:	4b20      	ldr	r3, [pc, #128]	; (8005228 <main+0x554>)
 80051a8:	5c9a      	ldrb	r2, [r3, r2]
 80051aa:	4b26      	ldr	r3, [pc, #152]	; (8005244 <main+0x570>)
 80051ac:	70da      	strb	r2, [r3, #3]
		  serial_source_temp[serial_up]=serial_source[serial_up];
 80051ae:	4b23      	ldr	r3, [pc, #140]	; (800523c <main+0x568>)
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	4619      	mov	r1, r3
 80051b4:	4b21      	ldr	r3, [pc, #132]	; (800523c <main+0x568>)
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	461a      	mov	r2, r3
 80051ba:	4b1b      	ldr	r3, [pc, #108]	; (8005228 <main+0x554>)
 80051bc:	5c59      	ldrb	r1, [r3, r1]
 80051be:	4b20      	ldr	r3, [pc, #128]	; (8005240 <main+0x56c>)
 80051c0:	5499      	strb	r1, [r3, r2]
		  if (serial_up>161) serial_up=0; else serial_up++;
 80051c2:	4b1e      	ldr	r3, [pc, #120]	; (800523c <main+0x568>)
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	2ba1      	cmp	r3, #161	; 0xa1
 80051c8:	d903      	bls.n	80051d2 <main+0x4fe>
 80051ca:	4b1c      	ldr	r3, [pc, #112]	; (800523c <main+0x568>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	701a      	strb	r2, [r3, #0]
 80051d0:	e005      	b.n	80051de <main+0x50a>
 80051d2:	4b1a      	ldr	r3, [pc, #104]	; (800523c <main+0x568>)
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	3301      	adds	r3, #1
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	4b18      	ldr	r3, [pc, #96]	; (800523c <main+0x568>)
 80051dc:	701a      	strb	r2, [r3, #0]

		  HAL_UART_Transmit(&huart1,serial_send,8, 100);  //send serial
 80051de:	2364      	movs	r3, #100	; 0x64
 80051e0:	2208      	movs	r2, #8
 80051e2:	4918      	ldr	r1, [pc, #96]	; (8005244 <main+0x570>)
 80051e4:	4818      	ldr	r0, [pc, #96]	; (8005248 <main+0x574>)
 80051e6:	f007 f826 	bl	800c236 <HAL_UART_Transmit>
		  serial_tosend=0;
 80051ea:	4b0d      	ldr	r3, [pc, #52]	; (8005220 <main+0x54c>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	701a      	strb	r2, [r3, #0]
	}

		if (disp_end==1)	  {display_generate();}      // run this after gfx draw page finish
 80051f0:	4b16      	ldr	r3, [pc, #88]	; (800524c <main+0x578>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d101      	bne.n	80051fc <main+0x528>
 80051f8:	f7fe ff8c 	bl	8004114 <display_generate>

		if (init<6)				// after 6 its done for good   // no freeze here
 80051fc:	4b14      	ldr	r3, [pc, #80]	; (8005250 <main+0x57c>)
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	2b05      	cmp	r3, #5
 8005202:	d841      	bhi.n	8005288 <main+0x5b4>
		{
			for (i=0;i<6;i++) {display_init();}  //1-2ms ?  change length if flickering ,maybe initial data
 8005204:	4b13      	ldr	r3, [pc, #76]	; (8005254 <main+0x580>)
 8005206:	2200      	movs	r2, #0
 8005208:	801a      	strh	r2, [r3, #0]
 800520a:	e02d      	b.n	8005268 <main+0x594>
 800520c:	2000c096 	.word	0x2000c096
 8005210:	200095d8 	.word	0x200095d8
 8005214:	2000c09c 	.word	0x2000c09c
 8005218:	20012800 	.word	0x20012800
 800521c:	2000c098 	.word	0x2000c098
 8005220:	20010e15 	.word	0x20010e15
 8005224:	2000dc7c 	.word	0x2000dc7c
 8005228:	20010c14 	.word	0x20010c14
 800522c:	20010c74 	.word	0x20010c74
 8005230:	200096d4 	.word	0x200096d4
 8005234:	20008e08 	.word	0x20008e08
 8005238:	2000d0ec 	.word	0x2000d0ec
 800523c:	20010e14 	.word	0x20010e14
 8005240:	20010d14 	.word	0x20010d14
 8005244:	20008edc 	.word	0x20008edc
 8005248:	20012b44 	.word	0x20012b44
 800524c:	2000ca36 	.word	0x2000ca36
 8005250:	2000c08b 	.word	0x2000c08b
 8005254:	20009842 	.word	0x20009842
 8005258:	f7fe fe4a 	bl	8003ef0 <display_init>
 800525c:	4b89      	ldr	r3, [pc, #548]	; (8005484 <main+0x7b0>)
 800525e:	881b      	ldrh	r3, [r3, #0]
 8005260:	3301      	adds	r3, #1
 8005262:	b29a      	uxth	r2, r3
 8005264:	4b87      	ldr	r3, [pc, #540]	; (8005484 <main+0x7b0>)
 8005266:	801a      	strh	r2, [r3, #0]
 8005268:	4b86      	ldr	r3, [pc, #536]	; (8005484 <main+0x7b0>)
 800526a:	881b      	ldrh	r3, [r3, #0]
 800526c:	2b05      	cmp	r3, #5
 800526e:	d9f3      	bls.n	8005258 <main+0x584>

		if (init==6)  {HAL_TIM_Base_Start_IT(&htim10);HAL_TIM_Base_Start(&htim10);	 gfx_TX_block(); 				}
 8005270:	4b85      	ldr	r3, [pc, #532]	; (8005488 <main+0x7b4>)
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	2b06      	cmp	r3, #6
 8005276:	d107      	bne.n	8005288 <main+0x5b4>
 8005278:	4884      	ldr	r0, [pc, #528]	; (800548c <main+0x7b8>)
 800527a:	f005 fe89 	bl	800af90 <HAL_TIM_Base_Start_IT>
 800527e:	4883      	ldr	r0, [pc, #524]	; (800548c <main+0x7b8>)
 8005280:	f005 fe2c 	bl	800aedc <HAL_TIM_Base_Start>
 8005284:	f7fe fe8a 	bl	8003f9c <gfx_TX_block>
		}

		if (init > 5) {    //  around 3 cycles per single transmit  , plenty quick as is , spi lcd can really slow things down
 8005288:	4b7f      	ldr	r3, [pc, #508]	; (8005488 <main+0x7b4>)
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	2b05      	cmp	r3, #5
 800528e:	d903      	bls.n	8005298 <main+0x5c4>


		    //full page in mem for spi

		    //  little too fast
			 menu3_fill();encoder2();
 8005290:	f7ff f904 	bl	800449c <menu3_fill>
 8005294:	f7ff f820 	bl	80042d8 <encoder2>
		}


		if ((loop_counter2&1023)==0){ // grab adc readings + 3ms , 32 step  // no freeze
 8005298:	4b7d      	ldr	r3, [pc, #500]	; (8005490 <main+0x7bc>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d147      	bne.n	8005334 <main+0x660>



			//HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go

			HAL_ADCEx_InjectedStart(&hadc1) ;  // start injected mode normal conversion
 80052a4:	487b      	ldr	r0, [pc, #492]	; (8005494 <main+0x7c0>)
 80052a6:	f002 f879 	bl	800739c <HAL_ADCEx_InjectedStart>
			uint16_t adc_temp1[4]={0,0,0,0};
 80052aa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80052ae:	2200      	movs	r2, #0
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	605a      	str	r2, [r3, #4]

			HAL_ADC_PollForConversion(&hadc1,1);  // works but  slow ,blocking very slow, set quick time out
 80052b4:	2101      	movs	r1, #1
 80052b6:	4877      	ldr	r0, [pc, #476]	; (8005494 <main+0x7c0>)
 80052b8:	f001 fbe0 	bl	8006a7c <HAL_ADC_PollForConversion>

			adc_temp1[0]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 80052bc:	2101      	movs	r1, #1
 80052be:	4875      	ldr	r0, [pc, #468]	; (8005494 <main+0x7c0>)
 80052c0:	f002 f982 	bl	80075c8 <HAL_ADCEx_InjectedGetValue>
 80052c4:	4603      	mov	r3, r0
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			adc_temp1[1] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 80052cc:	2102      	movs	r1, #2
 80052ce:	4871      	ldr	r0, [pc, #452]	; (8005494 <main+0x7c0>)
 80052d0:	f002 f97a 	bl	80075c8 <HAL_ADCEx_InjectedGetValue>
 80052d4:	4603      	mov	r3, r0
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
			adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 80052dc:	2103      	movs	r1, #3
 80052de:	486d      	ldr	r0, [pc, #436]	; (8005494 <main+0x7c0>)
 80052e0:	f002 f972 	bl	80075c8 <HAL_ADCEx_InjectedGetValue>
 80052e4:	4603      	mov	r3, r0
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
			HAL_ADCEx_InjectedStop(&hadc1) ;
 80052ec:	4869      	ldr	r0, [pc, #420]	; (8005494 <main+0x7c0>)
 80052ee:	f002 f91f 	bl	8007530 <HAL_ADCEx_InjectedStop>
			//  adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
			adc_values[0]=	(4095-  adc_temp1[0])<<4;
 80052f2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80052f6:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 80052fa:	330f      	adds	r3, #15
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	011b      	lsls	r3, r3, #4
 8005300:	b29a      	uxth	r2, r3
 8005302:	4b65      	ldr	r3, [pc, #404]	; (8005498 <main+0x7c4>)
 8005304:	801a      	strh	r2, [r3, #0]
			adc_values[1]=	 (4095- adc_temp1[1])<<4;
 8005306:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800530a:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 800530e:	330f      	adds	r3, #15
 8005310:	b29b      	uxth	r3, r3
 8005312:	011b      	lsls	r3, r3, #4
 8005314:	b29a      	uxth	r2, r3
 8005316:	4b60      	ldr	r3, [pc, #384]	; (8005498 <main+0x7c4>)
 8005318:	805a      	strh	r2, [r3, #2]
			adc_values[2]=	 (4095-adc_temp1[2])<<4;
 800531a:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800531e:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8005322:	330f      	adds	r3, #15
 8005324:	b29b      	uxth	r3, r3
 8005326:	011b      	lsls	r3, r3, #4
 8005328:	b29a      	uxth	r2, r3
 800532a:	4b5b      	ldr	r3, [pc, #364]	; (8005498 <main+0x7c4>)
 800532c:	809a      	strh	r2, [r3, #4]
			//  adc_values[2]=	  adc_temp1[2]>>7;

			loop_counter=0;
 800532e:	4b5b      	ldr	r3, [pc, #364]	; (800549c <main+0x7c8>)
 8005330:	2200      	movs	r2, #0
 8005332:	701a      	strb	r2, [r3, #0]
		}

		if ((seq.pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 8005334:	4b5a      	ldr	r3, [pc, #360]	; (80054a0 <main+0x7cc>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2b07      	cmp	r3, #7
 800533a:	d106      	bne.n	800534a <main+0x676>
 800533c:	4b59      	ldr	r3, [pc, #356]	; (80054a4 <main+0x7d0>)
 800533e:	881b      	ldrh	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d102      	bne.n	800534a <main+0x676>
 8005344:	4b57      	ldr	r3, [pc, #348]	; (80054a4 <main+0x7d0>)
 8005346:	2201      	movs	r2, #1
 8005348:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,(seq.pos & 1)); // easy skip ?
 800534a:	4b55      	ldr	r3, [pc, #340]	; (80054a0 <main+0x7cc>)
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	b2db      	uxtb	r3, r3
 8005354:	461a      	mov	r2, r3
 8005356:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800535a:	4853      	ldr	r0, [pc, #332]	; (80054a8 <main+0x7d4>)
 800535c:	f003 f97c 	bl	8008658 <HAL_GPIO_WritePin>
	//	adc_flag=0;
		if (adc_flag) {     //  only for sending out  , poor quality
 8005360:	4b52      	ldr	r3, [pc, #328]	; (80054ac <main+0x7d8>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d051      	beq.n	800540c <main+0x738>


			uint16_t    adc_page=0; ;
 8005368:	2300      	movs	r3, #0
 800536a:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
			if		(adc_flag==1)	  	{	adc_page=0;			}	//dma start ,needs this and adc start ,set sampling time
 800536e:	4b4f      	ldr	r3, [pc, #316]	; (80054ac <main+0x7d8>)
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d102      	bne.n	800537c <main+0x6a8>
 8005376:	2300      	movs	r3, #0
 8005378:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
			if		(adc_flag==2)	  	{	adc_page=1536;  }
 800537c:	4b4b      	ldr	r3, [pc, #300]	; (80054ac <main+0x7d8>)
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	2b02      	cmp	r3, #2
 8005382:	d103      	bne.n	800538c <main+0x6b8>
 8005384:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005388:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82


			uint16_t    adc_convert_count;
			uint16_t    adc_convert_temp;
			for (i=0;i<512;i++){
 800538c:	4b3d      	ldr	r3, [pc, #244]	; (8005484 <main+0x7b0>)
 800538e:	2200      	movs	r2, #0
 8005390:	801a      	strh	r2, [r3, #0]
 8005392:	e033      	b.n	80053fc <main+0x728>
				adc_convert_count=(i*3)+adc_page;
 8005394:	4b3b      	ldr	r3, [pc, #236]	; (8005484 <main+0x7b0>)
 8005396:	881b      	ldrh	r3, [r3, #0]
 8005398:	461a      	mov	r2, r3
 800539a:	0052      	lsls	r2, r2, #1
 800539c:	4413      	add	r3, r2
 800539e:	b29a      	uxth	r2, r3
 80053a0:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80053a4:	4413      	add	r3, r2
 80053a6:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

				adc_convert_temp=adc_source[adc_convert_count]+adc_source[adc_convert_count+1]+adc_source[adc_convert_count+2]; //  17 470 khz  ~
 80053aa:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80053ae:	4a40      	ldr	r2, [pc, #256]	; (80054b0 <main+0x7dc>)
 80053b0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80053b4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80053b8:	3301      	adds	r3, #1
 80053ba:	493d      	ldr	r1, [pc, #244]	; (80054b0 <main+0x7dc>)
 80053bc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80053c0:	4413      	add	r3, r2
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80053c8:	3302      	adds	r3, #2
 80053ca:	4939      	ldr	r1, [pc, #228]	; (80054b0 <main+0x7dc>)
 80053cc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80053d0:	4413      	add	r3, r2
 80053d2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
				input_holder[i]=adc_convert_temp/3;
 80053d6:	4b2b      	ldr	r3, [pc, #172]	; (8005484 <main+0x7b0>)
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	4619      	mov	r1, r3
 80053dc:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80053e0:	4a34      	ldr	r2, [pc, #208]	; (80054b4 <main+0x7e0>)
 80053e2:	fba2 2303 	umull	r2, r3, r2, r3
 80053e6:	085b      	lsrs	r3, r3, #1
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	4b33      	ldr	r3, [pc, #204]	; (80054b8 <main+0x7e4>)
 80053ec:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			for (i=0;i<512;i++){
 80053f0:	4b24      	ldr	r3, [pc, #144]	; (8005484 <main+0x7b0>)
 80053f2:	881b      	ldrh	r3, [r3, #0]
 80053f4:	3301      	adds	r3, #1
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	4b22      	ldr	r3, [pc, #136]	; (8005484 <main+0x7b0>)
 80053fa:	801a      	strh	r2, [r3, #0]
 80053fc:	4b21      	ldr	r3, [pc, #132]	; (8005484 <main+0x7b0>)
 80053fe:	881b      	ldrh	r3, [r3, #0]
 8005400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005404:	d3c6      	bcc.n	8005394 <main+0x6c0>
				//	input_holder[i]=adc_source[(i*3)+adc_page];

			}
		//	if (sampler.record_enable)  {sampler_ram_record(); sampler.start_MSB=0; sampler.start_LSB=0;sampler.end_MSB=63;}

			adc_flag=0;
 8005406:	4b29      	ldr	r3, [pc, #164]	; (80054ac <main+0x7d8>)
 8005408:	2200      	movs	r2, #0
 800540a:	701a      	strb	r2, [r3, #0]
		}


		if ((sample_point>512)&&( sample_pointD==512)) bank_write=1;
 800540c:	4b2b      	ldr	r3, [pc, #172]	; (80054bc <main+0x7e8>)
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	b29b      	uxth	r3, r3
 8005412:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005416:	d90a      	bls.n	800542e <main+0x75a>
 8005418:	4b29      	ldr	r3, [pc, #164]	; (80054c0 <main+0x7ec>)
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005420:	d105      	bne.n	800542e <main+0x75a>
 8005422:	4b28      	ldr	r3, [pc, #160]	; (80054c4 <main+0x7f0>)
 8005424:	2201      	movs	r2, #1
 8005426:	801a      	strh	r2, [r3, #0]
		while  (bank_write)                         {							// wait for adc , priority
 8005428:	e001      	b.n	800542e <main+0x75a>

			sampling();
 800542a:	f7fc fd51 	bl	8001ed0 <sampling>
		while  (bank_write)                         {							// wait for adc , priority
 800542e:	4b25      	ldr	r3, [pc, #148]	; (80054c4 <main+0x7f0>)
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1f9      	bne.n	800542a <main+0x756>

	  	}   // should trigger this after adc reads also reset sample_point here

		if((millis-millis_stored)>5) {   // run gfx_line
 8005436:	4b24      	ldr	r3, [pc, #144]	; (80054c8 <main+0x7f4>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b05      	cmp	r3, #5
 8005440:	f67f ac69 	bls.w	8004d16 <main+0x42>

		  LCD_Info_feedback();
 8005444:	f7ff f8ec 	bl	8004620 <LCD_Info_feedback>
		    uint8_t up_counter2=0;
 8005448:	2300      	movs	r3, #0
 800544a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
					while ((up_counter2<8) && (init > 5) )								{
 800544e:	e00c      	b.n	800546a <main+0x796>

					gfx_line_fill();   // just run 8 times between sampling , dont need more
 8005450:	f7fe fe72 	bl	8004138 <gfx_line_fill>
					up_counter2++;
 8005454:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8005458:	3301      	adds	r3, #1
 800545a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
					loop_counter++;
 800545e:	4b0f      	ldr	r3, [pc, #60]	; (800549c <main+0x7c8>)
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	3301      	adds	r3, #1
 8005464:	b2da      	uxtb	r2, r3
 8005466:	4b0d      	ldr	r3, [pc, #52]	; (800549c <main+0x7c8>)
 8005468:	701a      	strb	r2, [r3, #0]
					while ((up_counter2<8) && (init > 5) )								{
 800546a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800546e:	2b07      	cmp	r3, #7
 8005470:	d803      	bhi.n	800547a <main+0x7a6>
 8005472:	4b05      	ldr	r3, [pc, #20]	; (8005488 <main+0x7b4>)
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	2b05      	cmp	r3, #5
 8005478:	d8ea      	bhi.n	8005450 <main+0x77c>
					}   millis_stored=millis;
 800547a:	4a13      	ldr	r2, [pc, #76]	; (80054c8 <main+0x7f4>)
 800547c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800547e:	6013      	str	r3, [r2, #0]
  {
 8005480:	e449      	b.n	8004d16 <main+0x42>
 8005482:	bf00      	nop
 8005484:	20009842 	.word	0x20009842
 8005488:	2000c08b 	.word	0x2000c08b
 800548c:	20012afc 	.word	0x20012afc
 8005490:	2000c098 	.word	0x2000c098
 8005494:	20012758 	.word	0x20012758
 8005498:	20008df8 	.word	0x20008df8
 800549c:	2000983e 	.word	0x2000983e
 80054a0:	2000dc7c 	.word	0x2000dc7c
 80054a4:	2000c082 	.word	0x2000c082
 80054a8:	40020800 	.word	0x40020800
 80054ac:	2000ce38 	.word	0x2000ce38
 80054b0:	2000a854 	.word	0x2000a854
 80054b4:	aaaaaaab 	.word	0xaaaaaaab
 80054b8:	2000ca38 	.word	0x2000ca38
 80054bc:	2000a848 	.word	0x2000a848
 80054c0:	2000a84e 	.word	0x2000a84e
 80054c4:	20008e02 	.word	0x20008e02
 80054c8:	20012754 	.word	0x20012754

080054cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b094      	sub	sp, #80	; 0x50
 80054d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80054d2:	f107 0320 	add.w	r3, r7, #32
 80054d6:	2230      	movs	r2, #48	; 0x30
 80054d8:	2100      	movs	r1, #0
 80054da:	4618      	mov	r0, r3
 80054dc:	f007 faa0 	bl	800ca20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80054e0:	f107 030c 	add.w	r3, r7, #12
 80054e4:	2200      	movs	r2, #0
 80054e6:	601a      	str	r2, [r3, #0]
 80054e8:	605a      	str	r2, [r3, #4]
 80054ea:	609a      	str	r2, [r3, #8]
 80054ec:	60da      	str	r2, [r3, #12]
 80054ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80054f0:	2300      	movs	r3, #0
 80054f2:	60bb      	str	r3, [r7, #8]
 80054f4:	4b28      	ldr	r3, [pc, #160]	; (8005598 <SystemClock_Config+0xcc>)
 80054f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f8:	4a27      	ldr	r2, [pc, #156]	; (8005598 <SystemClock_Config+0xcc>)
 80054fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054fe:	6413      	str	r3, [r2, #64]	; 0x40
 8005500:	4b25      	ldr	r3, [pc, #148]	; (8005598 <SystemClock_Config+0xcc>)
 8005502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005508:	60bb      	str	r3, [r7, #8]
 800550a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800550c:	2300      	movs	r3, #0
 800550e:	607b      	str	r3, [r7, #4]
 8005510:	4b22      	ldr	r3, [pc, #136]	; (800559c <SystemClock_Config+0xd0>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a21      	ldr	r2, [pc, #132]	; (800559c <SystemClock_Config+0xd0>)
 8005516:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800551a:	6013      	str	r3, [r2, #0]
 800551c:	4b1f      	ldr	r3, [pc, #124]	; (800559c <SystemClock_Config+0xd0>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005524:	607b      	str	r3, [r7, #4]
 8005526:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005528:	2302      	movs	r3, #2
 800552a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800552c:	2301      	movs	r3, #1
 800552e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005530:	2310      	movs	r3, #16
 8005532:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005534:	2302      	movs	r3, #2
 8005536:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005538:	2300      	movs	r3, #0
 800553a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800553c:	2308      	movs	r3, #8
 800553e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8005540:	2364      	movs	r3, #100	; 0x64
 8005542:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005544:	2302      	movs	r3, #2
 8005546:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005548:	2304      	movs	r3, #4
 800554a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800554c:	f107 0320 	add.w	r3, r7, #32
 8005550:	4618      	mov	r0, r3
 8005552:	f004 f873 	bl	800963c <HAL_RCC_OscConfig>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800555c:	f000 fca4 	bl	8005ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005560:	230f      	movs	r3, #15
 8005562:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005564:	2302      	movs	r3, #2
 8005566:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005568:	2300      	movs	r3, #0
 800556a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800556c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005570:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005572:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005576:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005578:	f107 030c 	add.w	r3, r7, #12
 800557c:	2103      	movs	r1, #3
 800557e:	4618      	mov	r0, r3
 8005580:	f004 fad4 	bl	8009b2c <HAL_RCC_ClockConfig>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800558a:	f000 fc8d 	bl	8005ea8 <Error_Handler>
  }
}
 800558e:	bf00      	nop
 8005590:	3750      	adds	r7, #80	; 0x50
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	40023800 	.word	0x40023800
 800559c:	40007000 	.word	0x40007000

080055a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08c      	sub	sp, #48	; 0x30
 80055a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80055a6:	f107 0320 	add.w	r3, r7, #32
 80055aa:	2200      	movs	r2, #0
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	605a      	str	r2, [r3, #4]
 80055b0:	609a      	str	r2, [r3, #8]
 80055b2:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80055b4:	463b      	mov	r3, r7
 80055b6:	2220      	movs	r2, #32
 80055b8:	2100      	movs	r1, #0
 80055ba:	4618      	mov	r0, r3
 80055bc:	f007 fa30 	bl	800ca20 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80055c0:	4b3e      	ldr	r3, [pc, #248]	; (80056bc <MX_ADC1_Init+0x11c>)
 80055c2:	4a3f      	ldr	r2, [pc, #252]	; (80056c0 <MX_ADC1_Init+0x120>)
 80055c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80055c6:	4b3d      	ldr	r3, [pc, #244]	; (80056bc <MX_ADC1_Init+0x11c>)
 80055c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80055cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80055ce:	4b3b      	ldr	r3, [pc, #236]	; (80056bc <MX_ADC1_Init+0x11c>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80055d4:	4b39      	ldr	r3, [pc, #228]	; (80056bc <MX_ADC1_Init+0x11c>)
 80055d6:	2201      	movs	r2, #1
 80055d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80055da:	4b38      	ldr	r3, [pc, #224]	; (80056bc <MX_ADC1_Init+0x11c>)
 80055dc:	2201      	movs	r2, #1
 80055de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80055e0:	4b36      	ldr	r3, [pc, #216]	; (80056bc <MX_ADC1_Init+0x11c>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80055e8:	4b34      	ldr	r3, [pc, #208]	; (80056bc <MX_ADC1_Init+0x11c>)
 80055ea:	2200      	movs	r2, #0
 80055ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80055ee:	4b33      	ldr	r3, [pc, #204]	; (80056bc <MX_ADC1_Init+0x11c>)
 80055f0:	4a34      	ldr	r2, [pc, #208]	; (80056c4 <MX_ADC1_Init+0x124>)
 80055f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80055f4:	4b31      	ldr	r3, [pc, #196]	; (80056bc <MX_ADC1_Init+0x11c>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80055fa:	4b30      	ldr	r3, [pc, #192]	; (80056bc <MX_ADC1_Init+0x11c>)
 80055fc:	2201      	movs	r2, #1
 80055fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8005600:	4b2e      	ldr	r3, [pc, #184]	; (80056bc <MX_ADC1_Init+0x11c>)
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8005608:	4b2c      	ldr	r3, [pc, #176]	; (80056bc <MX_ADC1_Init+0x11c>)
 800560a:	2200      	movs	r2, #0
 800560c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800560e:	482b      	ldr	r0, [pc, #172]	; (80056bc <MX_ADC1_Init+0x11c>)
 8005610:	f001 f93c 	bl	800688c <HAL_ADC_Init>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d001      	beq.n	800561e <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 800561a:	f000 fc45 	bl	8005ea8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800561e:	2309      	movs	r3, #9
 8005620:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8005622:	2301      	movs	r3, #1
 8005624:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8005626:	2306      	movs	r3, #6
 8005628:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800562a:	f107 0320 	add.w	r3, r7, #32
 800562e:	4619      	mov	r1, r3
 8005630:	4822      	ldr	r0, [pc, #136]	; (80056bc <MX_ADC1_Init+0x11c>)
 8005632:	f001 fc03 	bl	8006e3c <HAL_ADC_ConfigChannel>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 800563c:	f000 fc34 	bl	8005ea8 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8005640:	2300      	movs	r3, #0
 8005642:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8005644:	2301      	movs	r3, #1
 8005646:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8005648:	2303      	movs	r3, #3
 800564a:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_56CYCLES;
 800564c:	2303      	movs	r3, #3
 800564e:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8005650:	2300      	movs	r3, #0
 8005652:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8005654:	4b1c      	ldr	r3, [pc, #112]	; (80056c8 <MX_ADC1_Init+0x128>)
 8005656:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8005658:	2300      	movs	r3, #0
 800565a:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800565c:	2300      	movs	r3, #0
 800565e:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8005660:	2300      	movs	r3, #0
 8005662:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8005664:	463b      	mov	r3, r7
 8005666:	4619      	mov	r1, r3
 8005668:	4814      	ldr	r0, [pc, #80]	; (80056bc <MX_ADC1_Init+0x11c>)
 800566a:	f001 ffe5 	bl	8007638 <HAL_ADCEx_InjectedConfigChannel>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8005674:	f000 fc18 	bl	8005ea8 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8005678:	2302      	movs	r3, #2
 800567a:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 800567c:	2302      	movs	r3, #2
 800567e:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8005680:	463b      	mov	r3, r7
 8005682:	4619      	mov	r1, r3
 8005684:	480d      	ldr	r0, [pc, #52]	; (80056bc <MX_ADC1_Init+0x11c>)
 8005686:	f001 ffd7 	bl	8007638 <HAL_ADCEx_InjectedConfigChannel>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8005690:	f000 fc0a 	bl	8005ea8 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_8;
 8005694:	2308      	movs	r3, #8
 8005696:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 8005698:	2303      	movs	r3, #3
 800569a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800569c:	2300      	movs	r3, #0
 800569e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80056a0:	463b      	mov	r3, r7
 80056a2:	4619      	mov	r1, r3
 80056a4:	4805      	ldr	r0, [pc, #20]	; (80056bc <MX_ADC1_Init+0x11c>)
 80056a6:	f001 ffc7 	bl	8007638 <HAL_ADCEx_InjectedConfigChannel>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d001      	beq.n	80056b4 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 80056b0:	f000 fbfa 	bl	8005ea8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80056b4:	bf00      	nop
 80056b6:	3730      	adds	r7, #48	; 0x30
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	20012758 	.word	0x20012758
 80056c0:	40012000 	.word	0x40012000
 80056c4:	0f000001 	.word	0x0f000001
 80056c8:	000f0001 	.word	0x000f0001

080056cc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80056d0:	4b12      	ldr	r3, [pc, #72]	; (800571c <MX_I2C2_Init+0x50>)
 80056d2:	4a13      	ldr	r2, [pc, #76]	; (8005720 <MX_I2C2_Init+0x54>)
 80056d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80056d6:	4b11      	ldr	r3, [pc, #68]	; (800571c <MX_I2C2_Init+0x50>)
 80056d8:	4a12      	ldr	r2, [pc, #72]	; (8005724 <MX_I2C2_Init+0x58>)
 80056da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80056dc:	4b0f      	ldr	r3, [pc, #60]	; (800571c <MX_I2C2_Init+0x50>)
 80056de:	2200      	movs	r2, #0
 80056e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80056e2:	4b0e      	ldr	r3, [pc, #56]	; (800571c <MX_I2C2_Init+0x50>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80056e8:	4b0c      	ldr	r3, [pc, #48]	; (800571c <MX_I2C2_Init+0x50>)
 80056ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80056ee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80056f0:	4b0a      	ldr	r3, [pc, #40]	; (800571c <MX_I2C2_Init+0x50>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80056f6:	4b09      	ldr	r3, [pc, #36]	; (800571c <MX_I2C2_Init+0x50>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80056fc:	4b07      	ldr	r3, [pc, #28]	; (800571c <MX_I2C2_Init+0x50>)
 80056fe:	2200      	movs	r2, #0
 8005700:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005702:	4b06      	ldr	r3, [pc, #24]	; (800571c <MX_I2C2_Init+0x50>)
 8005704:	2200      	movs	r2, #0
 8005706:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005708:	4804      	ldr	r0, [pc, #16]	; (800571c <MX_I2C2_Init+0x50>)
 800570a:	f002 ffd7 	bl	80086bc <HAL_I2C_Init>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d001      	beq.n	8005718 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8005714:	f000 fbc8 	bl	8005ea8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005718:	bf00      	nop
 800571a:	bd80      	pop	{r7, pc}
 800571c:	20012800 	.word	0x20012800
 8005720:	40005800 	.word	0x40005800
 8005724:	000186a0 	.word	0x000186a0

08005728 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800572c:	4b17      	ldr	r3, [pc, #92]	; (800578c <MX_SPI1_Init+0x64>)
 800572e:	4a18      	ldr	r2, [pc, #96]	; (8005790 <MX_SPI1_Init+0x68>)
 8005730:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005732:	4b16      	ldr	r3, [pc, #88]	; (800578c <MX_SPI1_Init+0x64>)
 8005734:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005738:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800573a:	4b14      	ldr	r3, [pc, #80]	; (800578c <MX_SPI1_Init+0x64>)
 800573c:	2200      	movs	r2, #0
 800573e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005740:	4b12      	ldr	r3, [pc, #72]	; (800578c <MX_SPI1_Init+0x64>)
 8005742:	2200      	movs	r2, #0
 8005744:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005746:	4b11      	ldr	r3, [pc, #68]	; (800578c <MX_SPI1_Init+0x64>)
 8005748:	2200      	movs	r2, #0
 800574a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800574c:	4b0f      	ldr	r3, [pc, #60]	; (800578c <MX_SPI1_Init+0x64>)
 800574e:	2200      	movs	r2, #0
 8005750:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005752:	4b0e      	ldr	r3, [pc, #56]	; (800578c <MX_SPI1_Init+0x64>)
 8005754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005758:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800575a:	4b0c      	ldr	r3, [pc, #48]	; (800578c <MX_SPI1_Init+0x64>)
 800575c:	2200      	movs	r2, #0
 800575e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005760:	4b0a      	ldr	r3, [pc, #40]	; (800578c <MX_SPI1_Init+0x64>)
 8005762:	2200      	movs	r2, #0
 8005764:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005766:	4b09      	ldr	r3, [pc, #36]	; (800578c <MX_SPI1_Init+0x64>)
 8005768:	2200      	movs	r2, #0
 800576a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800576c:	4b07      	ldr	r3, [pc, #28]	; (800578c <MX_SPI1_Init+0x64>)
 800576e:	2200      	movs	r2, #0
 8005770:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005772:	4b06      	ldr	r3, [pc, #24]	; (800578c <MX_SPI1_Init+0x64>)
 8005774:	220a      	movs	r2, #10
 8005776:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005778:	4804      	ldr	r0, [pc, #16]	; (800578c <MX_SPI1_Init+0x64>)
 800577a:	f004 fbb7 	bl	8009eec <HAL_SPI_Init>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005784:	f000 fb90 	bl	8005ea8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005788:	bf00      	nop
 800578a:	bd80      	pop	{r7, pc}
 800578c:	20012854 	.word	0x20012854
 8005790:	40013000 	.word	0x40013000

08005794 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005798:	4b17      	ldr	r3, [pc, #92]	; (80057f8 <MX_SPI2_Init+0x64>)
 800579a:	4a18      	ldr	r2, [pc, #96]	; (80057fc <MX_SPI2_Init+0x68>)
 800579c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800579e:	4b16      	ldr	r3, [pc, #88]	; (80057f8 <MX_SPI2_Init+0x64>)
 80057a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80057a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80057a6:	4b14      	ldr	r3, [pc, #80]	; (80057f8 <MX_SPI2_Init+0x64>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80057ac:	4b12      	ldr	r3, [pc, #72]	; (80057f8 <MX_SPI2_Init+0x64>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80057b2:	4b11      	ldr	r3, [pc, #68]	; (80057f8 <MX_SPI2_Init+0x64>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80057b8:	4b0f      	ldr	r3, [pc, #60]	; (80057f8 <MX_SPI2_Init+0x64>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80057be:	4b0e      	ldr	r3, [pc, #56]	; (80057f8 <MX_SPI2_Init+0x64>)
 80057c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057c4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80057c6:	4b0c      	ldr	r3, [pc, #48]	; (80057f8 <MX_SPI2_Init+0x64>)
 80057c8:	2230      	movs	r2, #48	; 0x30
 80057ca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80057cc:	4b0a      	ldr	r3, [pc, #40]	; (80057f8 <MX_SPI2_Init+0x64>)
 80057ce:	2200      	movs	r2, #0
 80057d0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80057d2:	4b09      	ldr	r3, [pc, #36]	; (80057f8 <MX_SPI2_Init+0x64>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057d8:	4b07      	ldr	r3, [pc, #28]	; (80057f8 <MX_SPI2_Init+0x64>)
 80057da:	2200      	movs	r2, #0
 80057dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80057de:	4b06      	ldr	r3, [pc, #24]	; (80057f8 <MX_SPI2_Init+0x64>)
 80057e0:	220a      	movs	r2, #10
 80057e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80057e4:	4804      	ldr	r0, [pc, #16]	; (80057f8 <MX_SPI2_Init+0x64>)
 80057e6:	f004 fb81 	bl	8009eec <HAL_SPI_Init>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80057f0:	f000 fb5a 	bl	8005ea8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80057f4:	bf00      	nop
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	200128ac 	.word	0x200128ac
 80057fc:	40003800 	.word	0x40003800

08005800 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b08c      	sub	sp, #48	; 0x30
 8005804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005806:	f107 030c 	add.w	r3, r7, #12
 800580a:	2224      	movs	r2, #36	; 0x24
 800580c:	2100      	movs	r1, #0
 800580e:	4618      	mov	r0, r3
 8005810:	f007 f906 	bl	800ca20 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005814:	1d3b      	adds	r3, r7, #4
 8005816:	2200      	movs	r2, #0
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800581c:	4b21      	ldr	r3, [pc, #132]	; (80058a4 <MX_TIM2_Init+0xa4>)
 800581e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005822:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005824:	4b1f      	ldr	r3, [pc, #124]	; (80058a4 <MX_TIM2_Init+0xa4>)
 8005826:	2200      	movs	r2, #0
 8005828:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800582a:	4b1e      	ldr	r3, [pc, #120]	; (80058a4 <MX_TIM2_Init+0xa4>)
 800582c:	2200      	movs	r2, #0
 800582e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8005830:	4b1c      	ldr	r3, [pc, #112]	; (80058a4 <MX_TIM2_Init+0xa4>)
 8005832:	f04f 32ff 	mov.w	r2, #4294967295
 8005836:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8005838:	4b1a      	ldr	r3, [pc, #104]	; (80058a4 <MX_TIM2_Init+0xa4>)
 800583a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800583e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005840:	4b18      	ldr	r3, [pc, #96]	; (80058a4 <MX_TIM2_Init+0xa4>)
 8005842:	2200      	movs	r2, #0
 8005844:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005846:	2301      	movs	r3, #1
 8005848:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800584a:	2302      	movs	r3, #2
 800584c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800584e:	2301      	movs	r3, #1
 8005850:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005852:	2300      	movs	r3, #0
 8005854:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8005856:	2302      	movs	r3, #2
 8005858:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800585a:	2302      	movs	r3, #2
 800585c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800585e:	2301      	movs	r3, #1
 8005860:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005862:	2300      	movs	r3, #0
 8005864:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8005866:	2302      	movs	r3, #2
 8005868:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800586a:	f107 030c 	add.w	r3, r7, #12
 800586e:	4619      	mov	r1, r3
 8005870:	480c      	ldr	r0, [pc, #48]	; (80058a4 <MX_TIM2_Init+0xa4>)
 8005872:	f005 fd81 	bl	800b378 <HAL_TIM_Encoder_Init>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d001      	beq.n	8005880 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800587c:	f000 fb14 	bl	8005ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005880:	2300      	movs	r3, #0
 8005882:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005884:	2300      	movs	r3, #0
 8005886:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005888:	1d3b      	adds	r3, r7, #4
 800588a:	4619      	mov	r1, r3
 800588c:	4805      	ldr	r0, [pc, #20]	; (80058a4 <MX_TIM2_Init+0xa4>)
 800588e:	f006 fbfb 	bl	800c088 <HAL_TIMEx_MasterConfigSynchronization>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d001      	beq.n	800589c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8005898:	f000 fb06 	bl	8005ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800589c:	bf00      	nop
 800589e:	3730      	adds	r7, #48	; 0x30
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	20012a24 	.word	0x20012a24

080058a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b08e      	sub	sp, #56	; 0x38
 80058ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80058ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058b2:	2200      	movs	r2, #0
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	605a      	str	r2, [r3, #4]
 80058b8:	609a      	str	r2, [r3, #8]
 80058ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058bc:	f107 0320 	add.w	r3, r7, #32
 80058c0:	2200      	movs	r2, #0
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80058c6:	1d3b      	adds	r3, r7, #4
 80058c8:	2200      	movs	r2, #0
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	605a      	str	r2, [r3, #4]
 80058ce:	609a      	str	r2, [r3, #8]
 80058d0:	60da      	str	r2, [r3, #12]
 80058d2:	611a      	str	r2, [r3, #16]
 80058d4:	615a      	str	r2, [r3, #20]
 80058d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80058d8:	4b32      	ldr	r3, [pc, #200]	; (80059a4 <MX_TIM3_Init+0xfc>)
 80058da:	4a33      	ldr	r2, [pc, #204]	; (80059a8 <MX_TIM3_Init+0x100>)
 80058dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80058de:	4b31      	ldr	r3, [pc, #196]	; (80059a4 <MX_TIM3_Init+0xfc>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058e4:	4b2f      	ldr	r3, [pc, #188]	; (80059a4 <MX_TIM3_Init+0xfc>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2800;
 80058ea:	4b2e      	ldr	r3, [pc, #184]	; (80059a4 <MX_TIM3_Init+0xfc>)
 80058ec:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 80058f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80058f2:	4b2c      	ldr	r3, [pc, #176]	; (80059a4 <MX_TIM3_Init+0xfc>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80058f8:	4b2a      	ldr	r3, [pc, #168]	; (80059a4 <MX_TIM3_Init+0xfc>)
 80058fa:	2280      	movs	r2, #128	; 0x80
 80058fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80058fe:	4829      	ldr	r0, [pc, #164]	; (80059a4 <MX_TIM3_Init+0xfc>)
 8005900:	f005 fa9c 	bl	800ae3c <HAL_TIM_Base_Init>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800590a:	f000 facd 	bl	8005ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800590e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005912:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005914:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005918:	4619      	mov	r1, r3
 800591a:	4822      	ldr	r0, [pc, #136]	; (80059a4 <MX_TIM3_Init+0xfc>)
 800591c:	f005 fff8 	bl	800b910 <HAL_TIM_ConfigClockSource>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d001      	beq.n	800592a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8005926:	f000 fabf 	bl	8005ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800592a:	481e      	ldr	r0, [pc, #120]	; (80059a4 <MX_TIM3_Init+0xfc>)
 800592c:	f005 fc1a 	bl	800b164 <HAL_TIM_PWM_Init>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8005936:	f000 fab7 	bl	8005ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800593a:	2300      	movs	r3, #0
 800593c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800593e:	2300      	movs	r3, #0
 8005940:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005942:	f107 0320 	add.w	r3, r7, #32
 8005946:	4619      	mov	r1, r3
 8005948:	4816      	ldr	r0, [pc, #88]	; (80059a4 <MX_TIM3_Init+0xfc>)
 800594a:	f006 fb9d 	bl	800c088 <HAL_TIMEx_MasterConfigSynchronization>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d001      	beq.n	8005958 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8005954:	f000 faa8 	bl	8005ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005958:	2360      	movs	r3, #96	; 0x60
 800595a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800595c:	2300      	movs	r3, #0
 800595e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005960:	2300      	movs	r3, #0
 8005962:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8005964:	2304      	movs	r3, #4
 8005966:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005968:	1d3b      	adds	r3, r7, #4
 800596a:	2200      	movs	r2, #0
 800596c:	4619      	mov	r1, r3
 800596e:	480d      	ldr	r0, [pc, #52]	; (80059a4 <MX_TIM3_Init+0xfc>)
 8005970:	f005 ff0c 	bl	800b78c <HAL_TIM_PWM_ConfigChannel>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800597a:	f000 fa95 	bl	8005ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800597e:	1d3b      	adds	r3, r7, #4
 8005980:	2204      	movs	r2, #4
 8005982:	4619      	mov	r1, r3
 8005984:	4807      	ldr	r0, [pc, #28]	; (80059a4 <MX_TIM3_Init+0xfc>)
 8005986:	f005 ff01 	bl	800b78c <HAL_TIM_PWM_ConfigChannel>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d001      	beq.n	8005994 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8005990:	f000 fa8a 	bl	8005ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005994:	4803      	ldr	r0, [pc, #12]	; (80059a4 <MX_TIM3_Init+0xfc>)
 8005996:	f000 fd7d 	bl	8006494 <HAL_TIM_MspPostInit>

}
 800599a:	bf00      	nop
 800599c:	3738      	adds	r7, #56	; 0x38
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	20012a6c 	.word	0x20012a6c
 80059a8:	40000400 	.word	0x40000400

080059ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b08c      	sub	sp, #48	; 0x30
 80059b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80059b2:	f107 030c 	add.w	r3, r7, #12
 80059b6:	2224      	movs	r2, #36	; 0x24
 80059b8:	2100      	movs	r1, #0
 80059ba:	4618      	mov	r0, r3
 80059bc:	f007 f830 	bl	800ca20 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059c0:	1d3b      	adds	r3, r7, #4
 80059c2:	2200      	movs	r2, #0
 80059c4:	601a      	str	r2, [r3, #0]
 80059c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80059c8:	4b21      	ldr	r3, [pc, #132]	; (8005a50 <MX_TIM4_Init+0xa4>)
 80059ca:	4a22      	ldr	r2, [pc, #136]	; (8005a54 <MX_TIM4_Init+0xa8>)
 80059cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80059ce:	4b20      	ldr	r3, [pc, #128]	; (8005a50 <MX_TIM4_Init+0xa4>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059d4:	4b1e      	ldr	r3, [pc, #120]	; (8005a50 <MX_TIM4_Init+0xa4>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80059da:	4b1d      	ldr	r3, [pc, #116]	; (8005a50 <MX_TIM4_Init+0xa4>)
 80059dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059e0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80059e2:	4b1b      	ldr	r3, [pc, #108]	; (8005a50 <MX_TIM4_Init+0xa4>)
 80059e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80059ea:	4b19      	ldr	r3, [pc, #100]	; (8005a50 <MX_TIM4_Init+0xa4>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 80059f0:	2302      	movs	r3, #2
 80059f2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80059f4:	2302      	movs	r3, #2
 80059f6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80059f8:	2301      	movs	r3, #1
 80059fa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80059fc:	2300      	movs	r3, #0
 80059fe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 4;
 8005a00:	2304      	movs	r3, #4
 8005a02:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8005a04:	2302      	movs	r3, #2
 8005a06:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 4;
 8005a10:	2304      	movs	r3, #4
 8005a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005a14:	f107 030c 	add.w	r3, r7, #12
 8005a18:	4619      	mov	r1, r3
 8005a1a:	480d      	ldr	r0, [pc, #52]	; (8005a50 <MX_TIM4_Init+0xa4>)
 8005a1c:	f005 fcac 	bl	800b378 <HAL_TIM_Encoder_Init>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8005a26:	f000 fa3f 	bl	8005ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005a32:	1d3b      	adds	r3, r7, #4
 8005a34:	4619      	mov	r1, r3
 8005a36:	4806      	ldr	r0, [pc, #24]	; (8005a50 <MX_TIM4_Init+0xa4>)
 8005a38:	f006 fb26 	bl	800c088 <HAL_TIMEx_MasterConfigSynchronization>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8005a42:	f000 fa31 	bl	8005ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005a46:	bf00      	nop
 8005a48:	3730      	adds	r7, #48	; 0x30
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	20012ab4 	.word	0x20012ab4
 8005a54:	40000800 	.word	0x40000800

08005a58 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b088      	sub	sp, #32
 8005a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a5e:	1d3b      	adds	r3, r7, #4
 8005a60:	2200      	movs	r2, #0
 8005a62:	601a      	str	r2, [r3, #0]
 8005a64:	605a      	str	r2, [r3, #4]
 8005a66:	609a      	str	r2, [r3, #8]
 8005a68:	60da      	str	r2, [r3, #12]
 8005a6a:	611a      	str	r2, [r3, #16]
 8005a6c:	615a      	str	r2, [r3, #20]
 8005a6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8005a70:	4b1c      	ldr	r3, [pc, #112]	; (8005ae4 <MX_TIM10_Init+0x8c>)
 8005a72:	4a1d      	ldr	r2, [pc, #116]	; (8005ae8 <MX_TIM10_Init+0x90>)
 8005a74:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4;
 8005a76:	4b1b      	ldr	r3, [pc, #108]	; (8005ae4 <MX_TIM10_Init+0x8c>)
 8005a78:	2204      	movs	r2, #4
 8005a7a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a7c:	4b19      	ldr	r3, [pc, #100]	; (8005ae4 <MX_TIM10_Init+0x8c>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50000;
 8005a82:	4b18      	ldr	r3, [pc, #96]	; (8005ae4 <MX_TIM10_Init+0x8c>)
 8005a84:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005a88:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a8a:	4b16      	ldr	r3, [pc, #88]	; (8005ae4 <MX_TIM10_Init+0x8c>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005a90:	4b14      	ldr	r3, [pc, #80]	; (8005ae4 <MX_TIM10_Init+0x8c>)
 8005a92:	2280      	movs	r2, #128	; 0x80
 8005a94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8005a96:	4813      	ldr	r0, [pc, #76]	; (8005ae4 <MX_TIM10_Init+0x8c>)
 8005a98:	f005 f9d0 	bl	800ae3c <HAL_TIM_Base_Init>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8005aa2:	f000 fa01 	bl	8005ea8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 8005aa6:	480f      	ldr	r0, [pc, #60]	; (8005ae4 <MX_TIM10_Init+0x8c>)
 8005aa8:	f005 fb03 	bl	800b0b2 <HAL_TIM_OC_Init>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d001      	beq.n	8005ab6 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8005ab2:	f000 f9f9 	bl	8005ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005aba:	2300      	movs	r3, #0
 8005abc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005ac6:	1d3b      	adds	r3, r7, #4
 8005ac8:	2200      	movs	r2, #0
 8005aca:	4619      	mov	r1, r3
 8005acc:	4805      	ldr	r0, [pc, #20]	; (8005ae4 <MX_TIM10_Init+0x8c>)
 8005ace:	f005 fe01 	bl	800b6d4 <HAL_TIM_OC_ConfigChannel>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d001      	beq.n	8005adc <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8005ad8:	f000 f9e6 	bl	8005ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8005adc:	bf00      	nop
 8005ade:	3720      	adds	r7, #32
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	20012afc 	.word	0x20012afc
 8005ae8:	40014400 	.word	0x40014400

08005aec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005af0:	4b11      	ldr	r3, [pc, #68]	; (8005b38 <MX_USART1_UART_Init+0x4c>)
 8005af2:	4a12      	ldr	r2, [pc, #72]	; (8005b3c <MX_USART1_UART_Init+0x50>)
 8005af4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005af6:	4b10      	ldr	r3, [pc, #64]	; (8005b38 <MX_USART1_UART_Init+0x4c>)
 8005af8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005afc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005afe:	4b0e      	ldr	r3, [pc, #56]	; (8005b38 <MX_USART1_UART_Init+0x4c>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005b04:	4b0c      	ldr	r3, [pc, #48]	; (8005b38 <MX_USART1_UART_Init+0x4c>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005b0a:	4b0b      	ldr	r3, [pc, #44]	; (8005b38 <MX_USART1_UART_Init+0x4c>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8005b10:	4b09      	ldr	r3, [pc, #36]	; (8005b38 <MX_USART1_UART_Init+0x4c>)
 8005b12:	2208      	movs	r2, #8
 8005b14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b16:	4b08      	ldr	r3, [pc, #32]	; (8005b38 <MX_USART1_UART_Init+0x4c>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b1c:	4b06      	ldr	r3, [pc, #24]	; (8005b38 <MX_USART1_UART_Init+0x4c>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8005b22:	4805      	ldr	r0, [pc, #20]	; (8005b38 <MX_USART1_UART_Init+0x4c>)
 8005b24:	f006 fb32 	bl	800c18c <HAL_HalfDuplex_Init>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005b2e:	f000 f9bb 	bl	8005ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005b32:	bf00      	nop
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	20012b44 	.word	0x20012b44
 8005b3c:	40011000 	.word	0x40011000

08005b40 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005b44:	4b11      	ldr	r3, [pc, #68]	; (8005b8c <MX_USART6_UART_Init+0x4c>)
 8005b46:	4a12      	ldr	r2, [pc, #72]	; (8005b90 <MX_USART6_UART_Init+0x50>)
 8005b48:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8005b4a:	4b10      	ldr	r3, [pc, #64]	; (8005b8c <MX_USART6_UART_Init+0x4c>)
 8005b4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005b50:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005b52:	4b0e      	ldr	r3, [pc, #56]	; (8005b8c <MX_USART6_UART_Init+0x4c>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005b58:	4b0c      	ldr	r3, [pc, #48]	; (8005b8c <MX_USART6_UART_Init+0x4c>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005b5e:	4b0b      	ldr	r3, [pc, #44]	; (8005b8c <MX_USART6_UART_Init+0x4c>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005b64:	4b09      	ldr	r3, [pc, #36]	; (8005b8c <MX_USART6_UART_Init+0x4c>)
 8005b66:	220c      	movs	r2, #12
 8005b68:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b6a:	4b08      	ldr	r3, [pc, #32]	; (8005b8c <MX_USART6_UART_Init+0x4c>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b70:	4b06      	ldr	r3, [pc, #24]	; (8005b8c <MX_USART6_UART_Init+0x4c>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 8005b76:	4805      	ldr	r0, [pc, #20]	; (8005b8c <MX_USART6_UART_Init+0x4c>)
 8005b78:	f006 fb08 	bl	800c18c <HAL_HalfDuplex_Init>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8005b82:	f000 f991 	bl	8005ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005b86:	bf00      	nop
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	20012b88 	.word	0x20012b88
 8005b90:	40011400 	.word	0x40011400

08005b94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	607b      	str	r3, [r7, #4]
 8005b9e:	4b1f      	ldr	r3, [pc, #124]	; (8005c1c <MX_DMA_Init+0x88>)
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba2:	4a1e      	ldr	r2, [pc, #120]	; (8005c1c <MX_DMA_Init+0x88>)
 8005ba4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8005baa:	4b1c      	ldr	r3, [pc, #112]	; (8005c1c <MX_DMA_Init+0x88>)
 8005bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bb2:	607b      	str	r3, [r7, #4]
 8005bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	603b      	str	r3, [r7, #0]
 8005bba:	4b18      	ldr	r3, [pc, #96]	; (8005c1c <MX_DMA_Init+0x88>)
 8005bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bbe:	4a17      	ldr	r2, [pc, #92]	; (8005c1c <MX_DMA_Init+0x88>)
 8005bc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8005bc6:	4b15      	ldr	r3, [pc, #84]	; (8005c1c <MX_DMA_Init+0x88>)
 8005bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bce:	603b      	str	r3, [r7, #0]
 8005bd0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	2105      	movs	r1, #5
 8005bd6:	200f      	movs	r0, #15
 8005bd8:	f001 ffa3 	bl	8007b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8005bdc:	200f      	movs	r0, #15
 8005bde:	f001 ffbc 	bl	8007b5a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8005be2:	2200      	movs	r2, #0
 8005be4:	2100      	movs	r1, #0
 8005be6:	2038      	movs	r0, #56	; 0x38
 8005be8:	f001 ff9b 	bl	8007b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8005bec:	2038      	movs	r0, #56	; 0x38
 8005bee:	f001 ffb4 	bl	8007b5a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	203a      	movs	r0, #58	; 0x3a
 8005bf8:	f001 ff93 	bl	8007b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005bfc:	203a      	movs	r0, #58	; 0x3a
 8005bfe:	f001 ffac 	bl	8007b5a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 2, 0);
 8005c02:	2200      	movs	r2, #0
 8005c04:	2102      	movs	r1, #2
 8005c06:	203c      	movs	r0, #60	; 0x3c
 8005c08:	f001 ff8b 	bl	8007b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8005c0c:	203c      	movs	r0, #60	; 0x3c
 8005c0e:	f001 ffa4 	bl	8007b5a <HAL_NVIC_EnableIRQ>

}
 8005c12:	bf00      	nop
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	40023800 	.word	0x40023800

08005c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b088      	sub	sp, #32
 8005c24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c26:	f107 030c 	add.w	r3, r7, #12
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	601a      	str	r2, [r3, #0]
 8005c2e:	605a      	str	r2, [r3, #4]
 8005c30:	609a      	str	r2, [r3, #8]
 8005c32:	60da      	str	r2, [r3, #12]
 8005c34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c36:	2300      	movs	r3, #0
 8005c38:	60bb      	str	r3, [r7, #8]
 8005c3a:	4b35      	ldr	r3, [pc, #212]	; (8005d10 <MX_GPIO_Init+0xf0>)
 8005c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3e:	4a34      	ldr	r2, [pc, #208]	; (8005d10 <MX_GPIO_Init+0xf0>)
 8005c40:	f043 0301 	orr.w	r3, r3, #1
 8005c44:	6313      	str	r3, [r2, #48]	; 0x30
 8005c46:	4b32      	ldr	r3, [pc, #200]	; (8005d10 <MX_GPIO_Init+0xf0>)
 8005c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	60bb      	str	r3, [r7, #8]
 8005c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c52:	2300      	movs	r3, #0
 8005c54:	607b      	str	r3, [r7, #4]
 8005c56:	4b2e      	ldr	r3, [pc, #184]	; (8005d10 <MX_GPIO_Init+0xf0>)
 8005c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5a:	4a2d      	ldr	r2, [pc, #180]	; (8005d10 <MX_GPIO_Init+0xf0>)
 8005c5c:	f043 0302 	orr.w	r3, r3, #2
 8005c60:	6313      	str	r3, [r2, #48]	; 0x30
 8005c62:	4b2b      	ldr	r3, [pc, #172]	; (8005d10 <MX_GPIO_Init+0xf0>)
 8005c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	607b      	str	r3, [r7, #4]
 8005c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c6e:	2300      	movs	r3, #0
 8005c70:	603b      	str	r3, [r7, #0]
 8005c72:	4b27      	ldr	r3, [pc, #156]	; (8005d10 <MX_GPIO_Init+0xf0>)
 8005c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c76:	4a26      	ldr	r2, [pc, #152]	; (8005d10 <MX_GPIO_Init+0xf0>)
 8005c78:	f043 0304 	orr.w	r3, r3, #4
 8005c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8005c7e:	4b24      	ldr	r3, [pc, #144]	; (8005d10 <MX_GPIO_Init+0xf0>)
 8005c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c82:	f003 0304 	and.w	r3, r3, #4
 8005c86:	603b      	str	r3, [r7, #0]
 8005c88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c90:	4820      	ldr	r0, [pc, #128]	; (8005d14 <MX_GPIO_Init+0xf4>)
 8005c92:	f002 fce1 	bl	8008658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8005c96:	2201      	movs	r2, #1
 8005c98:	2110      	movs	r1, #16
 8005c9a:	481f      	ldr	r0, [pc, #124]	; (8005d18 <MX_GPIO_Init+0xf8>)
 8005c9c:	f002 fcdc 	bl	8008658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8005ca0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ca4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005caa:	2300      	movs	r3, #0
 8005cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8005cb2:	f107 030c 	add.w	r3, r7, #12
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	4816      	ldr	r0, [pc, #88]	; (8005d14 <MX_GPIO_Init+0xf4>)
 8005cba:	f002 fb49 	bl	8008350 <HAL_GPIO_Init>

  /*Configure GPIO pin : record_pin_Pin */
  GPIO_InitStruct.Pin = record_pin_Pin;
 8005cbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005cc4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8005cc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(record_pin_GPIO_Port, &GPIO_InitStruct);
 8005cce:	f107 030c 	add.w	r3, r7, #12
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	4811      	ldr	r0, [pc, #68]	; (8005d1c <MX_GPIO_Init+0xfc>)
 8005cd6:	f002 fb3b 	bl	8008350 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 8005cda:	2310      	movs	r3, #16
 8005cdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 8005cea:	f107 030c 	add.w	r3, r7, #12
 8005cee:	4619      	mov	r1, r3
 8005cf0:	4809      	ldr	r0, [pc, #36]	; (8005d18 <MX_GPIO_Init+0xf8>)
 8005cf2:	f002 fb2d 	bl	8008350 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	2104      	movs	r1, #4
 8005cfa:	2028      	movs	r0, #40	; 0x28
 8005cfc:	f001 ff11 	bl	8007b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005d00:	2028      	movs	r0, #40	; 0x28
 8005d02:	f001 ff2a 	bl	8007b5a <HAL_NVIC_EnableIRQ>

}
 8005d06:	bf00      	nop
 8005d08:	3720      	adds	r7, #32
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	40023800 	.word	0x40023800
 8005d14:	40020800 	.word	0x40020800
 8005d18:	40020000 	.word	0x40020000
 8005d1c:	40020400 	.word	0x40020400

08005d20 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */


	void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
		adc_flag=1;
 8005d28:	4b04      	ldr	r3, [pc, #16]	; (8005d3c <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	701a      	strb	r2, [r3, #0]

	}
 8005d2e:	bf00      	nop
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	2000ce38 	.word	0x2000ce38

08005d40 <HAL_ADC_ConvCpltCallback>:
	void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)   // get data after conversion
	{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
	adc_flag=2;
 8005d48:	4b07      	ldr	r3, [pc, #28]	; (8005d68 <HAL_ADC_ConvCpltCallback+0x28>)
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Stop_DMA(&hadc1); HAL_ADC_Start_DMA(&hadc1,& adc_source, 3072);    // try half sample rate   , its 17606  khz
 8005d4e:	4807      	ldr	r0, [pc, #28]	; (8005d6c <HAL_ADC_ConvCpltCallback+0x2c>)
 8005d50:	f001 f810 	bl	8006d74 <HAL_ADC_Stop_DMA>
 8005d54:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8005d58:	4905      	ldr	r1, [pc, #20]	; (8005d70 <HAL_ADC_ConvCpltCallback+0x30>)
 8005d5a:	4804      	ldr	r0, [pc, #16]	; (8005d6c <HAL_ADC_ConvCpltCallback+0x2c>)
 8005d5c:	f000 ff1a 	bl	8006b94 <HAL_ADC_Start_DMA>

	}
 8005d60:	bf00      	nop
 8005d62:	3708      	adds	r7, #8
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	2000ce38 	.word	0x2000ce38
 8005d6c:	20012758 	.word	0x20012758
 8005d70:	2000a854 	.word	0x2000a854

08005d74 <HAL_SPI_TxRxHalfCpltCallback>:

	void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef * hspi) {
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]

	    if (SPI1==hspi->Instance) {
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a10      	ldr	r2, [pc, #64]	; (8005dc4 <HAL_SPI_TxRxHalfCpltCallback+0x50>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d118      	bne.n	8005db8 <HAL_SPI_TxRxHalfCpltCallback+0x44>

				if  ((flash_read_block2[10]+   flash_read_block2[11]+  flash_read_block2[12]+  flash_read_block2[13])== 1020                  )
 8005d86:	4b10      	ldr	r3, [pc, #64]	; (8005dc8 <HAL_SPI_TxRxHalfCpltCallback+0x54>)
 8005d88:	7a9b      	ldrb	r3, [r3, #10]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	4b0e      	ldr	r3, [pc, #56]	; (8005dc8 <HAL_SPI_TxRxHalfCpltCallback+0x54>)
 8005d8e:	7adb      	ldrb	r3, [r3, #11]
 8005d90:	4413      	add	r3, r2
 8005d92:	4a0d      	ldr	r2, [pc, #52]	; (8005dc8 <HAL_SPI_TxRxHalfCpltCallback+0x54>)
 8005d94:	7b12      	ldrb	r2, [r2, #12]
 8005d96:	4413      	add	r3, r2
 8005d98:	4a0b      	ldr	r2, [pc, #44]	; (8005dc8 <HAL_SPI_TxRxHalfCpltCallback+0x54>)
 8005d9a:	7b52      	ldrb	r2, [r2, #13]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8005da2:	d109      	bne.n	8005db8 <HAL_SPI_TxRxHalfCpltCallback+0x44>

				    {
				    error_count++;
 8005da4:	4b09      	ldr	r3, [pc, #36]	; (8005dcc <HAL_SPI_TxRxHalfCpltCallback+0x58>)
 8005da6:	881b      	ldrh	r3, [r3, #0]
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	3301      	adds	r3, #1
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	4b07      	ldr	r3, [pc, #28]	; (8005dcc <HAL_SPI_TxRxHalfCpltCallback+0x58>)
 8005db0:	801a      	strh	r2, [r3, #0]
		//	memcpy(&error_data,flash_read_block2,127);  // maybe skipping address,, yup idiot Internet advice

						flash_flag=1;}
 8005db2:	4b07      	ldr	r3, [pc, #28]	; (8005dd0 <HAL_SPI_TxRxHalfCpltCallback+0x5c>)
 8005db4:	2201      	movs	r2, #1
 8005db6:	701a      	strb	r2, [r3, #0]


	}		}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr
 8005dc4:	40013000 	.word	0x40013000
 8005dc8:	200122c0 	.word	0x200122c0
 8005dcc:	2000ce42 	.word	0x2000ce42
 8005dd0:	20008ee4 	.word	0x20008ee4

08005dd4 <HAL_SPI_TxRxCpltCallback>:




	void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)   // when finished sending
		{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]

		   if (SPI1==hspi->Instance) {
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a07      	ldr	r2, [pc, #28]	; (8005e00 <HAL_SPI_TxRxCpltCallback+0x2c>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d107      	bne.n	8005df6 <HAL_SPI_TxRxCpltCallback+0x22>


		       flash_flag=2;
 8005de6:	4b07      	ldr	r3, [pc, #28]	; (8005e04 <HAL_SPI_TxRxCpltCallback+0x30>)
 8005de8:	2202      	movs	r2, #2
 8005dea:	701a      	strb	r2, [r3, #0]
		       HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);  //  end
 8005dec:	2201      	movs	r2, #1
 8005dee:	2110      	movs	r1, #16
 8005df0:	4805      	ldr	r0, [pc, #20]	; (8005e08 <HAL_SPI_TxRxCpltCallback+0x34>)
 8005df2:	f002 fc31 	bl	8008658 <HAL_GPIO_WritePin>
		   }
		}
 8005df6:	bf00      	nop
 8005df8:	3708      	adds	r7, #8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	40013000 	.word	0x40013000
 8005e04:	20008ee4 	.word	0x20008ee4
 8005e08:	40020000 	.word	0x40020000

08005e0c <HAL_SPI_ErrorCallback>:


	void HAL_SPI_ErrorCallback(SPI_HandleTypeDef * hspi) {
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
	   if (SPI1==hspi->Instance) {
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a07      	ldr	r2, [pc, #28]	; (8005e38 <HAL_SPI_ErrorCallback+0x2c>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d106      	bne.n	8005e2c <HAL_SPI_ErrorCallback+0x20>
error_count++;
 8005e1e:	4b07      	ldr	r3, [pc, #28]	; (8005e3c <HAL_SPI_ErrorCallback+0x30>)
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	3301      	adds	r3, #1
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	4b04      	ldr	r3, [pc, #16]	; (8005e3c <HAL_SPI_ErrorCallback+0x30>)
 8005e2a:	801a      	strh	r2, [r3, #0]

		   }
	}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr
 8005e38:	40013000 	.word	0x40013000
 8005e3c:	2000ce42 	.word	0x2000ce42

08005e40 <HAL_SPI_TxCpltCallback>:




void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)   // when finished sending
	{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
	    //
	 //   gfx_dma=1;
	//    if (SPI2==hspi->Instance) {gfx_dma=1;}


	}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == record_pin_Pin) {
 8005e5e:	88fb      	ldrh	r3, [r7, #6]
 8005e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e64:	d102      	bne.n	8005e6c <HAL_GPIO_EXTI_Callback+0x18>
   sampler.record_enable=1;
 8005e66:	4b04      	ldr	r3, [pc, #16]	; (8005e78 <HAL_GPIO_EXTI_Callback+0x24>)
 8005e68:	2201      	movs	r2, #1
 8005e6a:	739a      	strb	r2, [r3, #14]
  }
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	20008eb4 	.word	0x20008eb4

08005e7c <stop_start>:
//NVIC_DisableIRQ(TIM3_IRQn);   //  disables all tim irq
void stop_start	(void)             {
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	af00      	add	r7, sp, #0
  //  if (TIM3==htim ->Instance)
    if  (stop_toggle ==1) {HAL_TIM_Base_Stop_IT(&htim3);}
 8005e80:	4b07      	ldr	r3, [pc, #28]	; (8005ea0 <stop_start+0x24>)
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d102      	bne.n	8005e8e <stop_start+0x12>
 8005e88:	4806      	ldr	r0, [pc, #24]	; (8005ea4 <stop_start+0x28>)
 8005e8a:	f005 f8e3 	bl	800b054 <HAL_TIM_Base_Stop_IT>
    if  (stop_toggle ==2) HAL_TIM_Base_Start_IT(&htim3);;
 8005e8e:	4b04      	ldr	r3, [pc, #16]	; (8005ea0 <stop_start+0x24>)
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d102      	bne.n	8005e9c <stop_start+0x20>
 8005e96:	4803      	ldr	r0, [pc, #12]	; (8005ea4 <stop_start+0x28>)
 8005e98:	f005 f87a 	bl	800af90 <HAL_TIM_Base_Start_IT>

}
 8005e9c:	bf00      	nop
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	20012750 	.word	0x20012750
 8005ea4:	20012a6c 	.word	0x20012a6c

08005ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005eac:	b672      	cpsid	i
}
 8005eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005eb0:	e7fe      	b.n	8005eb0 <Error_Handler+0x8>
	...

08005eb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005eba:	2300      	movs	r3, #0
 8005ebc:	607b      	str	r3, [r7, #4]
 8005ebe:	4b12      	ldr	r3, [pc, #72]	; (8005f08 <HAL_MspInit+0x54>)
 8005ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec2:	4a11      	ldr	r2, [pc, #68]	; (8005f08 <HAL_MspInit+0x54>)
 8005ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8005eca:	4b0f      	ldr	r3, [pc, #60]	; (8005f08 <HAL_MspInit+0x54>)
 8005ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ed2:	607b      	str	r3, [r7, #4]
 8005ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	603b      	str	r3, [r7, #0]
 8005eda:	4b0b      	ldr	r3, [pc, #44]	; (8005f08 <HAL_MspInit+0x54>)
 8005edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ede:	4a0a      	ldr	r2, [pc, #40]	; (8005f08 <HAL_MspInit+0x54>)
 8005ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ee6:	4b08      	ldr	r3, [pc, #32]	; (8005f08 <HAL_MspInit+0x54>)
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eee:	603b      	str	r3, [r7, #0]
 8005ef0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	2101      	movs	r1, #1
 8005ef6:	f06f 0003 	mvn.w	r0, #3
 8005efa:	f001 fe12 	bl	8007b22 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005efe:	bf00      	nop
 8005f00:	3708      	adds	r7, #8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	40023800 	.word	0x40023800

08005f0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b08a      	sub	sp, #40	; 0x28
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f14:	f107 0314 	add.w	r3, r7, #20
 8005f18:	2200      	movs	r2, #0
 8005f1a:	601a      	str	r2, [r3, #0]
 8005f1c:	605a      	str	r2, [r3, #4]
 8005f1e:	609a      	str	r2, [r3, #8]
 8005f20:	60da      	str	r2, [r3, #12]
 8005f22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a3c      	ldr	r2, [pc, #240]	; (800601c <HAL_ADC_MspInit+0x110>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d171      	bne.n	8006012 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005f2e:	2300      	movs	r3, #0
 8005f30:	613b      	str	r3, [r7, #16]
 8005f32:	4b3b      	ldr	r3, [pc, #236]	; (8006020 <HAL_ADC_MspInit+0x114>)
 8005f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f36:	4a3a      	ldr	r2, [pc, #232]	; (8006020 <HAL_ADC_MspInit+0x114>)
 8005f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8005f3e:	4b38      	ldr	r3, [pc, #224]	; (8006020 <HAL_ADC_MspInit+0x114>)
 8005f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f46:	613b      	str	r3, [r7, #16]
 8005f48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	60fb      	str	r3, [r7, #12]
 8005f4e:	4b34      	ldr	r3, [pc, #208]	; (8006020 <HAL_ADC_MspInit+0x114>)
 8005f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f52:	4a33      	ldr	r2, [pc, #204]	; (8006020 <HAL_ADC_MspInit+0x114>)
 8005f54:	f043 0301 	orr.w	r3, r3, #1
 8005f58:	6313      	str	r3, [r2, #48]	; 0x30
 8005f5a:	4b31      	ldr	r3, [pc, #196]	; (8006020 <HAL_ADC_MspInit+0x114>)
 8005f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f66:	2300      	movs	r3, #0
 8005f68:	60bb      	str	r3, [r7, #8]
 8005f6a:	4b2d      	ldr	r3, [pc, #180]	; (8006020 <HAL_ADC_MspInit+0x114>)
 8005f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6e:	4a2c      	ldr	r2, [pc, #176]	; (8006020 <HAL_ADC_MspInit+0x114>)
 8005f70:	f043 0302 	orr.w	r3, r3, #2
 8005f74:	6313      	str	r3, [r2, #48]	; 0x30
 8005f76:	4b2a      	ldr	r3, [pc, #168]	; (8006020 <HAL_ADC_MspInit+0x114>)
 8005f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	60bb      	str	r3, [r7, #8]
 8005f80:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA0-WKUP     ------> ADC1_IN0
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0;
 8005f82:	2305      	movs	r3, #5
 8005f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f86:	2303      	movs	r3, #3
 8005f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f8e:	f107 0314 	add.w	r3, r7, #20
 8005f92:	4619      	mov	r1, r3
 8005f94:	4823      	ldr	r0, [pc, #140]	; (8006024 <HAL_ADC_MspInit+0x118>)
 8005f96:	f002 f9db 	bl	8008350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fa6:	f107 0314 	add.w	r3, r7, #20
 8005faa:	4619      	mov	r1, r3
 8005fac:	481e      	ldr	r0, [pc, #120]	; (8006028 <HAL_ADC_MspInit+0x11c>)
 8005fae:	f002 f9cf 	bl	8008350 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8005fb2:	4b1e      	ldr	r3, [pc, #120]	; (800602c <HAL_ADC_MspInit+0x120>)
 8005fb4:	4a1e      	ldr	r2, [pc, #120]	; (8006030 <HAL_ADC_MspInit+0x124>)
 8005fb6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005fb8:	4b1c      	ldr	r3, [pc, #112]	; (800602c <HAL_ADC_MspInit+0x120>)
 8005fba:	2200      	movs	r2, #0
 8005fbc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005fbe:	4b1b      	ldr	r3, [pc, #108]	; (800602c <HAL_ADC_MspInit+0x120>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005fc4:	4b19      	ldr	r3, [pc, #100]	; (800602c <HAL_ADC_MspInit+0x120>)
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005fca:	4b18      	ldr	r3, [pc, #96]	; (800602c <HAL_ADC_MspInit+0x120>)
 8005fcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005fd0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005fd2:	4b16      	ldr	r3, [pc, #88]	; (800602c <HAL_ADC_MspInit+0x120>)
 8005fd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fd8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005fda:	4b14      	ldr	r3, [pc, #80]	; (800602c <HAL_ADC_MspInit+0x120>)
 8005fdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005fe0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005fe2:	4b12      	ldr	r3, [pc, #72]	; (800602c <HAL_ADC_MspInit+0x120>)
 8005fe4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fe8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005fea:	4b10      	ldr	r3, [pc, #64]	; (800602c <HAL_ADC_MspInit+0x120>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ff0:	4b0e      	ldr	r3, [pc, #56]	; (800602c <HAL_ADC_MspInit+0x120>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005ff6:	480d      	ldr	r0, [pc, #52]	; (800602c <HAL_ADC_MspInit+0x120>)
 8005ff8:	f001 fdca 	bl	8007b90 <HAL_DMA_Init>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d001      	beq.n	8006006 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8006002:	f7ff ff51 	bl	8005ea8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a08      	ldr	r2, [pc, #32]	; (800602c <HAL_ADC_MspInit+0x120>)
 800600a:	639a      	str	r2, [r3, #56]	; 0x38
 800600c:	4a07      	ldr	r2, [pc, #28]	; (800602c <HAL_ADC_MspInit+0x120>)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006012:	bf00      	nop
 8006014:	3728      	adds	r7, #40	; 0x28
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	40012000 	.word	0x40012000
 8006020:	40023800 	.word	0x40023800
 8006024:	40020000 	.word	0x40020000
 8006028:	40020400 	.word	0x40020400
 800602c:	200127a0 	.word	0x200127a0
 8006030:	40026470 	.word	0x40026470

08006034 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b08a      	sub	sp, #40	; 0x28
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800603c:	f107 0314 	add.w	r3, r7, #20
 8006040:	2200      	movs	r2, #0
 8006042:	601a      	str	r2, [r3, #0]
 8006044:	605a      	str	r2, [r3, #4]
 8006046:	609a      	str	r2, [r3, #8]
 8006048:	60da      	str	r2, [r3, #12]
 800604a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a22      	ldr	r2, [pc, #136]	; (80060dc <HAL_I2C_MspInit+0xa8>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d13d      	bne.n	80060d2 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006056:	2300      	movs	r3, #0
 8006058:	613b      	str	r3, [r7, #16]
 800605a:	4b21      	ldr	r3, [pc, #132]	; (80060e0 <HAL_I2C_MspInit+0xac>)
 800605c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605e:	4a20      	ldr	r2, [pc, #128]	; (80060e0 <HAL_I2C_MspInit+0xac>)
 8006060:	f043 0302 	orr.w	r3, r3, #2
 8006064:	6313      	str	r3, [r2, #48]	; 0x30
 8006066:	4b1e      	ldr	r3, [pc, #120]	; (80060e0 <HAL_I2C_MspInit+0xac>)
 8006068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	613b      	str	r3, [r7, #16]
 8006070:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB9     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006072:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006078:	2312      	movs	r3, #18
 800607a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800607c:	2300      	movs	r3, #0
 800607e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006080:	2303      	movs	r3, #3
 8006082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8006084:	2309      	movs	r3, #9
 8006086:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006088:	f107 0314 	add.w	r3, r7, #20
 800608c:	4619      	mov	r1, r3
 800608e:	4815      	ldr	r0, [pc, #84]	; (80060e4 <HAL_I2C_MspInit+0xb0>)
 8006090:	f002 f95e 	bl	8008350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006094:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800609a:	2312      	movs	r3, #18
 800609c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800609e:	2300      	movs	r3, #0
 80060a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060a2:	2303      	movs	r3, #3
 80060a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80060a6:	2304      	movs	r3, #4
 80060a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060aa:	f107 0314 	add.w	r3, r7, #20
 80060ae:	4619      	mov	r1, r3
 80060b0:	480c      	ldr	r0, [pc, #48]	; (80060e4 <HAL_I2C_MspInit+0xb0>)
 80060b2:	f002 f94d 	bl	8008350 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80060b6:	2300      	movs	r3, #0
 80060b8:	60fb      	str	r3, [r7, #12]
 80060ba:	4b09      	ldr	r3, [pc, #36]	; (80060e0 <HAL_I2C_MspInit+0xac>)
 80060bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060be:	4a08      	ldr	r2, [pc, #32]	; (80060e0 <HAL_I2C_MspInit+0xac>)
 80060c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80060c4:	6413      	str	r3, [r2, #64]	; 0x40
 80060c6:	4b06      	ldr	r3, [pc, #24]	; (80060e0 <HAL_I2C_MspInit+0xac>)
 80060c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80060d2:	bf00      	nop
 80060d4:	3728      	adds	r7, #40	; 0x28
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	40005800 	.word	0x40005800
 80060e0:	40023800 	.word	0x40023800
 80060e4:	40020400 	.word	0x40020400

080060e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b08c      	sub	sp, #48	; 0x30
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060f0:	f107 031c 	add.w	r3, r7, #28
 80060f4:	2200      	movs	r2, #0
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	605a      	str	r2, [r3, #4]
 80060fa:	609a      	str	r2, [r3, #8]
 80060fc:	60da      	str	r2, [r3, #12]
 80060fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a77      	ldr	r2, [pc, #476]	; (80062e4 <HAL_SPI_MspInit+0x1fc>)
 8006106:	4293      	cmp	r3, r2
 8006108:	f040 8089 	bne.w	800621e <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800610c:	2300      	movs	r3, #0
 800610e:	61bb      	str	r3, [r7, #24]
 8006110:	4b75      	ldr	r3, [pc, #468]	; (80062e8 <HAL_SPI_MspInit+0x200>)
 8006112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006114:	4a74      	ldr	r2, [pc, #464]	; (80062e8 <HAL_SPI_MspInit+0x200>)
 8006116:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800611a:	6453      	str	r3, [r2, #68]	; 0x44
 800611c:	4b72      	ldr	r3, [pc, #456]	; (80062e8 <HAL_SPI_MspInit+0x200>)
 800611e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006120:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006124:	61bb      	str	r3, [r7, #24]
 8006126:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006128:	2300      	movs	r3, #0
 800612a:	617b      	str	r3, [r7, #20]
 800612c:	4b6e      	ldr	r3, [pc, #440]	; (80062e8 <HAL_SPI_MspInit+0x200>)
 800612e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006130:	4a6d      	ldr	r2, [pc, #436]	; (80062e8 <HAL_SPI_MspInit+0x200>)
 8006132:	f043 0301 	orr.w	r3, r3, #1
 8006136:	6313      	str	r3, [r2, #48]	; 0x30
 8006138:	4b6b      	ldr	r3, [pc, #428]	; (80062e8 <HAL_SPI_MspInit+0x200>)
 800613a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	617b      	str	r3, [r7, #20]
 8006142:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 8006144:	23e0      	movs	r3, #224	; 0xe0
 8006146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006148:	2302      	movs	r3, #2
 800614a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800614c:	2300      	movs	r3, #0
 800614e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006150:	2302      	movs	r3, #2
 8006152:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006154:	2305      	movs	r3, #5
 8006156:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006158:	f107 031c 	add.w	r3, r7, #28
 800615c:	4619      	mov	r1, r3
 800615e:	4863      	ldr	r0, [pc, #396]	; (80062ec <HAL_SPI_MspInit+0x204>)
 8006160:	f002 f8f6 	bl	8008350 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8006164:	4b62      	ldr	r3, [pc, #392]	; (80062f0 <HAL_SPI_MspInit+0x208>)
 8006166:	4a63      	ldr	r2, [pc, #396]	; (80062f4 <HAL_SPI_MspInit+0x20c>)
 8006168:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800616a:	4b61      	ldr	r3, [pc, #388]	; (80062f0 <HAL_SPI_MspInit+0x208>)
 800616c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8006170:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006172:	4b5f      	ldr	r3, [pc, #380]	; (80062f0 <HAL_SPI_MspInit+0x208>)
 8006174:	2200      	movs	r2, #0
 8006176:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006178:	4b5d      	ldr	r3, [pc, #372]	; (80062f0 <HAL_SPI_MspInit+0x208>)
 800617a:	2200      	movs	r2, #0
 800617c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800617e:	4b5c      	ldr	r3, [pc, #368]	; (80062f0 <HAL_SPI_MspInit+0x208>)
 8006180:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006184:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006186:	4b5a      	ldr	r3, [pc, #360]	; (80062f0 <HAL_SPI_MspInit+0x208>)
 8006188:	2200      	movs	r2, #0
 800618a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800618c:	4b58      	ldr	r3, [pc, #352]	; (80062f0 <HAL_SPI_MspInit+0x208>)
 800618e:	2200      	movs	r2, #0
 8006190:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8006192:	4b57      	ldr	r3, [pc, #348]	; (80062f0 <HAL_SPI_MspInit+0x208>)
 8006194:	2200      	movs	r2, #0
 8006196:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006198:	4b55      	ldr	r3, [pc, #340]	; (80062f0 <HAL_SPI_MspInit+0x208>)
 800619a:	2200      	movs	r2, #0
 800619c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800619e:	4b54      	ldr	r3, [pc, #336]	; (80062f0 <HAL_SPI_MspInit+0x208>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80061a4:	4852      	ldr	r0, [pc, #328]	; (80062f0 <HAL_SPI_MspInit+0x208>)
 80061a6:	f001 fcf3 	bl	8007b90 <HAL_DMA_Init>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d001      	beq.n	80061b4 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80061b0:	f7ff fe7a 	bl	8005ea8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a4e      	ldr	r2, [pc, #312]	; (80062f0 <HAL_SPI_MspInit+0x208>)
 80061b8:	64da      	str	r2, [r3, #76]	; 0x4c
 80061ba:	4a4d      	ldr	r2, [pc, #308]	; (80062f0 <HAL_SPI_MspInit+0x208>)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 80061c0:	4b4d      	ldr	r3, [pc, #308]	; (80062f8 <HAL_SPI_MspInit+0x210>)
 80061c2:	4a4e      	ldr	r2, [pc, #312]	; (80062fc <HAL_SPI_MspInit+0x214>)
 80061c4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 80061c6:	4b4c      	ldr	r3, [pc, #304]	; (80062f8 <HAL_SPI_MspInit+0x210>)
 80061c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80061cc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80061ce:	4b4a      	ldr	r3, [pc, #296]	; (80062f8 <HAL_SPI_MspInit+0x210>)
 80061d0:	2240      	movs	r2, #64	; 0x40
 80061d2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80061d4:	4b48      	ldr	r3, [pc, #288]	; (80062f8 <HAL_SPI_MspInit+0x210>)
 80061d6:	2200      	movs	r2, #0
 80061d8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80061da:	4b47      	ldr	r3, [pc, #284]	; (80062f8 <HAL_SPI_MspInit+0x210>)
 80061dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061e0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80061e2:	4b45      	ldr	r3, [pc, #276]	; (80062f8 <HAL_SPI_MspInit+0x210>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80061e8:	4b43      	ldr	r3, [pc, #268]	; (80062f8 <HAL_SPI_MspInit+0x210>)
 80061ea:	2200      	movs	r2, #0
 80061ec:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80061ee:	4b42      	ldr	r3, [pc, #264]	; (80062f8 <HAL_SPI_MspInit+0x210>)
 80061f0:	2200      	movs	r2, #0
 80061f2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80061f4:	4b40      	ldr	r3, [pc, #256]	; (80062f8 <HAL_SPI_MspInit+0x210>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80061fa:	4b3f      	ldr	r3, [pc, #252]	; (80062f8 <HAL_SPI_MspInit+0x210>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8006200:	483d      	ldr	r0, [pc, #244]	; (80062f8 <HAL_SPI_MspInit+0x210>)
 8006202:	f001 fcc5 	bl	8007b90 <HAL_DMA_Init>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d001      	beq.n	8006210 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 800620c:	f7ff fe4c 	bl	8005ea8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a39      	ldr	r2, [pc, #228]	; (80062f8 <HAL_SPI_MspInit+0x210>)
 8006214:	649a      	str	r2, [r3, #72]	; 0x48
 8006216:	4a38      	ldr	r2, [pc, #224]	; (80062f8 <HAL_SPI_MspInit+0x210>)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800621c:	e05e      	b.n	80062dc <HAL_SPI_MspInit+0x1f4>
  else if(hspi->Instance==SPI2)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a37      	ldr	r2, [pc, #220]	; (8006300 <HAL_SPI_MspInit+0x218>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d159      	bne.n	80062dc <HAL_SPI_MspInit+0x1f4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006228:	2300      	movs	r3, #0
 800622a:	613b      	str	r3, [r7, #16]
 800622c:	4b2e      	ldr	r3, [pc, #184]	; (80062e8 <HAL_SPI_MspInit+0x200>)
 800622e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006230:	4a2d      	ldr	r2, [pc, #180]	; (80062e8 <HAL_SPI_MspInit+0x200>)
 8006232:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006236:	6413      	str	r3, [r2, #64]	; 0x40
 8006238:	4b2b      	ldr	r3, [pc, #172]	; (80062e8 <HAL_SPI_MspInit+0x200>)
 800623a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006240:	613b      	str	r3, [r7, #16]
 8006242:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006244:	2300      	movs	r3, #0
 8006246:	60fb      	str	r3, [r7, #12]
 8006248:	4b27      	ldr	r3, [pc, #156]	; (80062e8 <HAL_SPI_MspInit+0x200>)
 800624a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624c:	4a26      	ldr	r2, [pc, #152]	; (80062e8 <HAL_SPI_MspInit+0x200>)
 800624e:	f043 0302 	orr.w	r3, r3, #2
 8006252:	6313      	str	r3, [r2, #48]	; 0x30
 8006254:	4b24      	ldr	r3, [pc, #144]	; (80062e8 <HAL_SPI_MspInit+0x200>)
 8006256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006258:	f003 0302 	and.w	r3, r3, #2
 800625c:	60fb      	str	r3, [r7, #12]
 800625e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8006260:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8006264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006266:	2302      	movs	r3, #2
 8006268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800626a:	2300      	movs	r3, #0
 800626c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800626e:	2303      	movs	r3, #3
 8006270:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006272:	2305      	movs	r3, #5
 8006274:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006276:	f107 031c 	add.w	r3, r7, #28
 800627a:	4619      	mov	r1, r3
 800627c:	4821      	ldr	r0, [pc, #132]	; (8006304 <HAL_SPI_MspInit+0x21c>)
 800627e:	f002 f867 	bl	8008350 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8006282:	4b21      	ldr	r3, [pc, #132]	; (8006308 <HAL_SPI_MspInit+0x220>)
 8006284:	4a21      	ldr	r2, [pc, #132]	; (800630c <HAL_SPI_MspInit+0x224>)
 8006286:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8006288:	4b1f      	ldr	r3, [pc, #124]	; (8006308 <HAL_SPI_MspInit+0x220>)
 800628a:	2200      	movs	r2, #0
 800628c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800628e:	4b1e      	ldr	r3, [pc, #120]	; (8006308 <HAL_SPI_MspInit+0x220>)
 8006290:	2240      	movs	r2, #64	; 0x40
 8006292:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006294:	4b1c      	ldr	r3, [pc, #112]	; (8006308 <HAL_SPI_MspInit+0x220>)
 8006296:	2200      	movs	r2, #0
 8006298:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800629a:	4b1b      	ldr	r3, [pc, #108]	; (8006308 <HAL_SPI_MspInit+0x220>)
 800629c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062a0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80062a2:	4b19      	ldr	r3, [pc, #100]	; (8006308 <HAL_SPI_MspInit+0x220>)
 80062a4:	2200      	movs	r2, #0
 80062a6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80062a8:	4b17      	ldr	r3, [pc, #92]	; (8006308 <HAL_SPI_MspInit+0x220>)
 80062aa:	2200      	movs	r2, #0
 80062ac:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80062ae:	4b16      	ldr	r3, [pc, #88]	; (8006308 <HAL_SPI_MspInit+0x220>)
 80062b0:	2200      	movs	r2, #0
 80062b2:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80062b4:	4b14      	ldr	r3, [pc, #80]	; (8006308 <HAL_SPI_MspInit+0x220>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80062ba:	4b13      	ldr	r3, [pc, #76]	; (8006308 <HAL_SPI_MspInit+0x220>)
 80062bc:	2200      	movs	r2, #0
 80062be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80062c0:	4811      	ldr	r0, [pc, #68]	; (8006308 <HAL_SPI_MspInit+0x220>)
 80062c2:	f001 fc65 	bl	8007b90 <HAL_DMA_Init>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <HAL_SPI_MspInit+0x1e8>
      Error_Handler();
 80062cc:	f7ff fdec 	bl	8005ea8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a0d      	ldr	r2, [pc, #52]	; (8006308 <HAL_SPI_MspInit+0x220>)
 80062d4:	649a      	str	r2, [r3, #72]	; 0x48
 80062d6:	4a0c      	ldr	r2, [pc, #48]	; (8006308 <HAL_SPI_MspInit+0x220>)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6393      	str	r3, [r2, #56]	; 0x38
}
 80062dc:	bf00      	nop
 80062de:	3730      	adds	r7, #48	; 0x30
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	40013000 	.word	0x40013000
 80062e8:	40023800 	.word	0x40023800
 80062ec:	40020000 	.word	0x40020000
 80062f0:	20012904 	.word	0x20012904
 80062f4:	40026410 	.word	0x40026410
 80062f8:	20012964 	.word	0x20012964
 80062fc:	40026440 	.word	0x40026440
 8006300:	40003800 	.word	0x40003800
 8006304:	40020400 	.word	0x40020400
 8006308:	200129c4 	.word	0x200129c4
 800630c:	40026070 	.word	0x40026070

08006310 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b08c      	sub	sp, #48	; 0x30
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006318:	f107 031c 	add.w	r3, r7, #28
 800631c:	2200      	movs	r2, #0
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	605a      	str	r2, [r3, #4]
 8006322:	609a      	str	r2, [r3, #8]
 8006324:	60da      	str	r2, [r3, #12]
 8006326:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006330:	d12d      	bne.n	800638e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006332:	2300      	movs	r3, #0
 8006334:	61bb      	str	r3, [r7, #24]
 8006336:	4b30      	ldr	r3, [pc, #192]	; (80063f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633a:	4a2f      	ldr	r2, [pc, #188]	; (80063f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800633c:	f043 0301 	orr.w	r3, r3, #1
 8006340:	6413      	str	r3, [r2, #64]	; 0x40
 8006342:	4b2d      	ldr	r3, [pc, #180]	; (80063f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	61bb      	str	r3, [r7, #24]
 800634c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800634e:	2300      	movs	r3, #0
 8006350:	617b      	str	r3, [r7, #20]
 8006352:	4b29      	ldr	r3, [pc, #164]	; (80063f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006356:	4a28      	ldr	r2, [pc, #160]	; (80063f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006358:	f043 0301 	orr.w	r3, r3, #1
 800635c:	6313      	str	r3, [r2, #48]	; 0x30
 800635e:	4b26      	ldr	r3, [pc, #152]	; (80063f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	617b      	str	r3, [r7, #20]
 8006368:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 800636a:	f248 0302 	movw	r3, #32770	; 0x8002
 800636e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006370:	2302      	movs	r3, #2
 8006372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006374:	2301      	movs	r3, #1
 8006376:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006378:	2300      	movs	r3, #0
 800637a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800637c:	2301      	movs	r3, #1
 800637e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006380:	f107 031c 	add.w	r3, r7, #28
 8006384:	4619      	mov	r1, r3
 8006386:	481d      	ldr	r0, [pc, #116]	; (80063fc <HAL_TIM_Encoder_MspInit+0xec>)
 8006388:	f001 ffe2 	bl	8008350 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800638c:	e030      	b.n	80063f0 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a1b      	ldr	r2, [pc, #108]	; (8006400 <HAL_TIM_Encoder_MspInit+0xf0>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d12b      	bne.n	80063f0 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006398:	2300      	movs	r3, #0
 800639a:	613b      	str	r3, [r7, #16]
 800639c:	4b16      	ldr	r3, [pc, #88]	; (80063f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800639e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a0:	4a15      	ldr	r2, [pc, #84]	; (80063f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80063a2:	f043 0304 	orr.w	r3, r3, #4
 80063a6:	6413      	str	r3, [r2, #64]	; 0x40
 80063a8:	4b13      	ldr	r3, [pc, #76]	; (80063f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80063aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ac:	f003 0304 	and.w	r3, r3, #4
 80063b0:	613b      	str	r3, [r7, #16]
 80063b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063b4:	2300      	movs	r3, #0
 80063b6:	60fb      	str	r3, [r7, #12]
 80063b8:	4b0f      	ldr	r3, [pc, #60]	; (80063f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80063ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063bc:	4a0e      	ldr	r2, [pc, #56]	; (80063f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80063be:	f043 0302 	orr.w	r3, r3, #2
 80063c2:	6313      	str	r3, [r2, #48]	; 0x30
 80063c4:	4b0c      	ldr	r3, [pc, #48]	; (80063f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80063c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c8:	f003 0302 	and.w	r3, r3, #2
 80063cc:	60fb      	str	r3, [r7, #12]
 80063ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80063d0:	23c0      	movs	r3, #192	; 0xc0
 80063d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063d4:	2302      	movs	r3, #2
 80063d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80063d8:	2301      	movs	r3, #1
 80063da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063dc:	2300      	movs	r3, #0
 80063de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80063e0:	2302      	movs	r3, #2
 80063e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063e4:	f107 031c 	add.w	r3, r7, #28
 80063e8:	4619      	mov	r1, r3
 80063ea:	4806      	ldr	r0, [pc, #24]	; (8006404 <HAL_TIM_Encoder_MspInit+0xf4>)
 80063ec:	f001 ffb0 	bl	8008350 <HAL_GPIO_Init>
}
 80063f0:	bf00      	nop
 80063f2:	3730      	adds	r7, #48	; 0x30
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	40023800 	.word	0x40023800
 80063fc:	40020000 	.word	0x40020000
 8006400:	40000800 	.word	0x40000800
 8006404:	40020400 	.word	0x40020400

08006408 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a1c      	ldr	r2, [pc, #112]	; (8006488 <HAL_TIM_Base_MspInit+0x80>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d116      	bne.n	8006448 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800641a:	2300      	movs	r3, #0
 800641c:	60fb      	str	r3, [r7, #12]
 800641e:	4b1b      	ldr	r3, [pc, #108]	; (800648c <HAL_TIM_Base_MspInit+0x84>)
 8006420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006422:	4a1a      	ldr	r2, [pc, #104]	; (800648c <HAL_TIM_Base_MspInit+0x84>)
 8006424:	f043 0302 	orr.w	r3, r3, #2
 8006428:	6413      	str	r3, [r2, #64]	; 0x40
 800642a:	4b18      	ldr	r3, [pc, #96]	; (800648c <HAL_TIM_Base_MspInit+0x84>)
 800642c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642e:	f003 0302 	and.w	r3, r3, #2
 8006432:	60fb      	str	r3, [r7, #12]
 8006434:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8006436:	2200      	movs	r2, #0
 8006438:	2101      	movs	r1, #1
 800643a:	201d      	movs	r0, #29
 800643c:	f001 fb71 	bl	8007b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006440:	201d      	movs	r0, #29
 8006442:	f001 fb8a 	bl	8007b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8006446:	e01a      	b.n	800647e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a10      	ldr	r2, [pc, #64]	; (8006490 <HAL_TIM_Base_MspInit+0x88>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d115      	bne.n	800647e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006452:	2300      	movs	r3, #0
 8006454:	60bb      	str	r3, [r7, #8]
 8006456:	4b0d      	ldr	r3, [pc, #52]	; (800648c <HAL_TIM_Base_MspInit+0x84>)
 8006458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800645a:	4a0c      	ldr	r2, [pc, #48]	; (800648c <HAL_TIM_Base_MspInit+0x84>)
 800645c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006460:	6453      	str	r3, [r2, #68]	; 0x44
 8006462:	4b0a      	ldr	r3, [pc, #40]	; (800648c <HAL_TIM_Base_MspInit+0x84>)
 8006464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800646a:	60bb      	str	r3, [r7, #8]
 800646c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 3, 0);
 800646e:	2200      	movs	r2, #0
 8006470:	2103      	movs	r1, #3
 8006472:	2019      	movs	r0, #25
 8006474:	f001 fb55 	bl	8007b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006478:	2019      	movs	r0, #25
 800647a:	f001 fb6e 	bl	8007b5a <HAL_NVIC_EnableIRQ>
}
 800647e:	bf00      	nop
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	40000400 	.word	0x40000400
 800648c:	40023800 	.word	0x40023800
 8006490:	40014400 	.word	0x40014400

08006494 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b088      	sub	sp, #32
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800649c:	f107 030c 	add.w	r3, r7, #12
 80064a0:	2200      	movs	r2, #0
 80064a2:	601a      	str	r2, [r3, #0]
 80064a4:	605a      	str	r2, [r3, #4]
 80064a6:	609a      	str	r2, [r3, #8]
 80064a8:	60da      	str	r2, [r3, #12]
 80064aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a12      	ldr	r2, [pc, #72]	; (80064fc <HAL_TIM_MspPostInit+0x68>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d11d      	bne.n	80064f2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80064b6:	2300      	movs	r3, #0
 80064b8:	60bb      	str	r3, [r7, #8]
 80064ba:	4b11      	ldr	r3, [pc, #68]	; (8006500 <HAL_TIM_MspPostInit+0x6c>)
 80064bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064be:	4a10      	ldr	r2, [pc, #64]	; (8006500 <HAL_TIM_MspPostInit+0x6c>)
 80064c0:	f043 0302 	orr.w	r3, r3, #2
 80064c4:	6313      	str	r3, [r2, #48]	; 0x30
 80064c6:	4b0e      	ldr	r3, [pc, #56]	; (8006500 <HAL_TIM_MspPostInit+0x6c>)
 80064c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	60bb      	str	r3, [r7, #8]
 80064d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80064d2:	2330      	movs	r3, #48	; 0x30
 80064d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064d6:	2302      	movs	r3, #2
 80064d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064da:	2300      	movs	r3, #0
 80064dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064de:	2300      	movs	r3, #0
 80064e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80064e2:	2302      	movs	r3, #2
 80064e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064e6:	f107 030c 	add.w	r3, r7, #12
 80064ea:	4619      	mov	r1, r3
 80064ec:	4805      	ldr	r0, [pc, #20]	; (8006504 <HAL_TIM_MspPostInit+0x70>)
 80064ee:	f001 ff2f 	bl	8008350 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80064f2:	bf00      	nop
 80064f4:	3720      	adds	r7, #32
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	40000400 	.word	0x40000400
 8006500:	40023800 	.word	0x40023800
 8006504:	40020400 	.word	0x40020400

08006508 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b08c      	sub	sp, #48	; 0x30
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006510:	f107 031c 	add.w	r3, r7, #28
 8006514:	2200      	movs	r2, #0
 8006516:	601a      	str	r2, [r3, #0]
 8006518:	605a      	str	r2, [r3, #4]
 800651a:	609a      	str	r2, [r3, #8]
 800651c:	60da      	str	r2, [r3, #12]
 800651e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a33      	ldr	r2, [pc, #204]	; (80065f4 <HAL_UART_MspInit+0xec>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d12d      	bne.n	8006586 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800652a:	2300      	movs	r3, #0
 800652c:	61bb      	str	r3, [r7, #24]
 800652e:	4b32      	ldr	r3, [pc, #200]	; (80065f8 <HAL_UART_MspInit+0xf0>)
 8006530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006532:	4a31      	ldr	r2, [pc, #196]	; (80065f8 <HAL_UART_MspInit+0xf0>)
 8006534:	f043 0310 	orr.w	r3, r3, #16
 8006538:	6453      	str	r3, [r2, #68]	; 0x44
 800653a:	4b2f      	ldr	r3, [pc, #188]	; (80065f8 <HAL_UART_MspInit+0xf0>)
 800653c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800653e:	f003 0310 	and.w	r3, r3, #16
 8006542:	61bb      	str	r3, [r7, #24]
 8006544:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006546:	2300      	movs	r3, #0
 8006548:	617b      	str	r3, [r7, #20]
 800654a:	4b2b      	ldr	r3, [pc, #172]	; (80065f8 <HAL_UART_MspInit+0xf0>)
 800654c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654e:	4a2a      	ldr	r2, [pc, #168]	; (80065f8 <HAL_UART_MspInit+0xf0>)
 8006550:	f043 0301 	orr.w	r3, r3, #1
 8006554:	6313      	str	r3, [r2, #48]	; 0x30
 8006556:	4b28      	ldr	r3, [pc, #160]	; (80065f8 <HAL_UART_MspInit+0xf0>)
 8006558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	617b      	str	r3, [r7, #20]
 8006560:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006562:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006568:	2302      	movs	r3, #2
 800656a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800656c:	2300      	movs	r3, #0
 800656e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006570:	2300      	movs	r3, #0
 8006572:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006574:	2307      	movs	r3, #7
 8006576:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006578:	f107 031c 	add.w	r3, r7, #28
 800657c:	4619      	mov	r1, r3
 800657e:	481f      	ldr	r0, [pc, #124]	; (80065fc <HAL_UART_MspInit+0xf4>)
 8006580:	f001 fee6 	bl	8008350 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8006584:	e031      	b.n	80065ea <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a1d      	ldr	r2, [pc, #116]	; (8006600 <HAL_UART_MspInit+0xf8>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d12c      	bne.n	80065ea <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8006590:	2300      	movs	r3, #0
 8006592:	613b      	str	r3, [r7, #16]
 8006594:	4b18      	ldr	r3, [pc, #96]	; (80065f8 <HAL_UART_MspInit+0xf0>)
 8006596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006598:	4a17      	ldr	r2, [pc, #92]	; (80065f8 <HAL_UART_MspInit+0xf0>)
 800659a:	f043 0320 	orr.w	r3, r3, #32
 800659e:	6453      	str	r3, [r2, #68]	; 0x44
 80065a0:	4b15      	ldr	r3, [pc, #84]	; (80065f8 <HAL_UART_MspInit+0xf0>)
 80065a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a4:	f003 0320 	and.w	r3, r3, #32
 80065a8:	613b      	str	r3, [r7, #16]
 80065aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065ac:	2300      	movs	r3, #0
 80065ae:	60fb      	str	r3, [r7, #12]
 80065b0:	4b11      	ldr	r3, [pc, #68]	; (80065f8 <HAL_UART_MspInit+0xf0>)
 80065b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b4:	4a10      	ldr	r2, [pc, #64]	; (80065f8 <HAL_UART_MspInit+0xf0>)
 80065b6:	f043 0301 	orr.w	r3, r3, #1
 80065ba:	6313      	str	r3, [r2, #48]	; 0x30
 80065bc:	4b0e      	ldr	r3, [pc, #56]	; (80065f8 <HAL_UART_MspInit+0xf0>)
 80065be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	60fb      	str	r3, [r7, #12]
 80065c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80065c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80065cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065ce:	2302      	movs	r3, #2
 80065d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80065d2:	2301      	movs	r3, #1
 80065d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065d6:	2300      	movs	r3, #0
 80065d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80065da:	2308      	movs	r3, #8
 80065dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065de:	f107 031c 	add.w	r3, r7, #28
 80065e2:	4619      	mov	r1, r3
 80065e4:	4805      	ldr	r0, [pc, #20]	; (80065fc <HAL_UART_MspInit+0xf4>)
 80065e6:	f001 feb3 	bl	8008350 <HAL_GPIO_Init>
}
 80065ea:	bf00      	nop
 80065ec:	3730      	adds	r7, #48	; 0x30
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	40011000 	.word	0x40011000
 80065f8:	40023800 	.word	0x40023800
 80065fc:	40020000 	.word	0x40020000
 8006600:	40011400 	.word	0x40011400

08006604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006604:	b480      	push	{r7}
 8006606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006608:	e7fe      	b.n	8006608 <NMI_Handler+0x4>

0800660a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800660a:	b480      	push	{r7}
 800660c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800660e:	e7fe      	b.n	800660e <HardFault_Handler+0x4>

08006610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006610:	b480      	push	{r7}
 8006612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006614:	e7fe      	b.n	8006614 <MemManage_Handler+0x4>

08006616 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006616:	b480      	push	{r7}
 8006618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800661a:	e7fe      	b.n	800661a <BusFault_Handler+0x4>

0800661c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800661c:	b480      	push	{r7}
 800661e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006620:	e7fe      	b.n	8006620 <UsageFault_Handler+0x4>

08006622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006622:	b480      	push	{r7}
 8006624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006626:	bf00      	nop
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006630:	b480      	push	{r7}
 8006632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006634:	bf00      	nop
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800663e:	b480      	push	{r7}
 8006640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006642:	bf00      	nop
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006650:	f000 f8d8 	bl	8006804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006654:	bf00      	nop
 8006656:	bd80      	pop	{r7, pc}

08006658 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800665c:	4802      	ldr	r0, [pc, #8]	; (8006668 <DMA1_Stream4_IRQHandler+0x10>)
 800665e:	f001 fc0d 	bl	8007e7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8006662:	bf00      	nop
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	200129c4 	.word	0x200129c4

0800666c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8006670:	4802      	ldr	r0, [pc, #8]	; (800667c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8006672:	f004 ff27 	bl	800b4c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006676:	bf00      	nop
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	20012afc 	.word	0x20012afc

08006680 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006684:	4802      	ldr	r0, [pc, #8]	; (8006690 <TIM3_IRQHandler+0x10>)
 8006686:	f004 ff1d 	bl	800b4c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800668a:	bf00      	nop
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	20012a6c 	.word	0x20012a6c

08006694 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(record_pin_Pin);
 8006698:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800669c:	f001 fff6 	bl	800868c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80066a0:	bf00      	nop
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80066a8:	4802      	ldr	r0, [pc, #8]	; (80066b4 <DMA2_Stream0_IRQHandler+0x10>)
 80066aa:	f001 fbe7 	bl	8007e7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80066ae:	bf00      	nop
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	20012904 	.word	0x20012904

080066b8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80066bc:	4802      	ldr	r0, [pc, #8]	; (80066c8 <DMA2_Stream2_IRQHandler+0x10>)
 80066be:	f001 fbdd 	bl	8007e7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80066c2:	bf00      	nop
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	20012964 	.word	0x20012964

080066cc <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80066d0:	4802      	ldr	r0, [pc, #8]	; (80066dc <DMA2_Stream4_IRQHandler+0x10>)
 80066d2:	f001 fbd3 	bl	8007e7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80066d6:	bf00      	nop
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	200127a0 	.word	0x200127a0

080066e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80066e0:	b480      	push	{r7}
 80066e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80066e4:	4b08      	ldr	r3, [pc, #32]	; (8006708 <SystemInit+0x28>)
 80066e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ea:	4a07      	ldr	r2, [pc, #28]	; (8006708 <SystemInit+0x28>)
 80066ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80066f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80066f4:	4b04      	ldr	r3, [pc, #16]	; (8006708 <SystemInit+0x28>)
 80066f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80066fa:	609a      	str	r2, [r3, #8]
#endif
}
 80066fc:	bf00      	nop
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	e000ed00 	.word	0xe000ed00

0800670c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800670c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006744 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006710:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006712:	e003      	b.n	800671c <LoopCopyDataInit>

08006714 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006714:	4b0c      	ldr	r3, [pc, #48]	; (8006748 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006716:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006718:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800671a:	3104      	adds	r1, #4

0800671c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800671c:	480b      	ldr	r0, [pc, #44]	; (800674c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800671e:	4b0c      	ldr	r3, [pc, #48]	; (8006750 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006720:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006722:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006724:	d3f6      	bcc.n	8006714 <CopyDataInit>
  ldr  r2, =_sbss
 8006726:	4a0b      	ldr	r2, [pc, #44]	; (8006754 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006728:	e002      	b.n	8006730 <LoopFillZerobss>

0800672a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800672a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800672c:	f842 3b04 	str.w	r3, [r2], #4

08006730 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006730:	4b09      	ldr	r3, [pc, #36]	; (8006758 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006732:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006734:	d3f9      	bcc.n	800672a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006736:	f7ff ffd3 	bl	80066e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800673a:	f006 f93f 	bl	800c9bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800673e:	f7fe fac9 	bl	8004cd4 <main>
  bx  lr    
 8006742:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006744:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006748:	0800ee48 	.word	0x0800ee48
  ldr  r0, =_sdata
 800674c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006750:	20008f58 	.word	0x20008f58
  ldr  r2, =_sbss
 8006754:	20008f58 	.word	0x20008f58
  ldr  r3, = _ebss
 8006758:	20012bd0 	.word	0x20012bd0

0800675c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800675c:	e7fe      	b.n	800675c <ADC_IRQHandler>
	...

08006760 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006764:	4b0e      	ldr	r3, [pc, #56]	; (80067a0 <HAL_Init+0x40>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a0d      	ldr	r2, [pc, #52]	; (80067a0 <HAL_Init+0x40>)
 800676a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800676e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006770:	4b0b      	ldr	r3, [pc, #44]	; (80067a0 <HAL_Init+0x40>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a0a      	ldr	r2, [pc, #40]	; (80067a0 <HAL_Init+0x40>)
 8006776:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800677a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800677c:	4b08      	ldr	r3, [pc, #32]	; (80067a0 <HAL_Init+0x40>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a07      	ldr	r2, [pc, #28]	; (80067a0 <HAL_Init+0x40>)
 8006782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006786:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006788:	2003      	movs	r0, #3
 800678a:	f001 f9bf 	bl	8007b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800678e:	2000      	movs	r0, #0
 8006790:	f000 f808 	bl	80067a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006794:	f7ff fb8e 	bl	8005eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	40023c00 	.word	0x40023c00

080067a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80067ac:	4b12      	ldr	r3, [pc, #72]	; (80067f8 <HAL_InitTick+0x54>)
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	4b12      	ldr	r3, [pc, #72]	; (80067fc <HAL_InitTick+0x58>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	4619      	mov	r1, r3
 80067b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80067ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80067be:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c2:	4618      	mov	r0, r3
 80067c4:	f001 f9d7 	bl	8007b76 <HAL_SYSTICK_Config>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e00e      	b.n	80067f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2b0f      	cmp	r3, #15
 80067d6:	d80a      	bhi.n	80067ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80067d8:	2200      	movs	r2, #0
 80067da:	6879      	ldr	r1, [r7, #4]
 80067dc:	f04f 30ff 	mov.w	r0, #4294967295
 80067e0:	f001 f99f 	bl	8007b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80067e4:	4a06      	ldr	r2, [pc, #24]	; (8006800 <HAL_InitTick+0x5c>)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	e000      	b.n	80067f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3708      	adds	r7, #8
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	20008ee8 	.word	0x20008ee8
 80067fc:	20008ef0 	.word	0x20008ef0
 8006800:	20008eec 	.word	0x20008eec

08006804 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006804:	b480      	push	{r7}
 8006806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006808:	4b06      	ldr	r3, [pc, #24]	; (8006824 <HAL_IncTick+0x20>)
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	461a      	mov	r2, r3
 800680e:	4b06      	ldr	r3, [pc, #24]	; (8006828 <HAL_IncTick+0x24>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4413      	add	r3, r2
 8006814:	4a04      	ldr	r2, [pc, #16]	; (8006828 <HAL_IncTick+0x24>)
 8006816:	6013      	str	r3, [r2, #0]
}
 8006818:	bf00      	nop
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	20008ef0 	.word	0x20008ef0
 8006828:	20012bcc 	.word	0x20012bcc

0800682c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800682c:	b480      	push	{r7}
 800682e:	af00      	add	r7, sp, #0
  return uwTick;
 8006830:	4b03      	ldr	r3, [pc, #12]	; (8006840 <HAL_GetTick+0x14>)
 8006832:	681b      	ldr	r3, [r3, #0]
}
 8006834:	4618      	mov	r0, r3
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	20012bcc 	.word	0x20012bcc

08006844 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800684c:	f7ff ffee 	bl	800682c <HAL_GetTick>
 8006850:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685c:	d005      	beq.n	800686a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800685e:	4b0a      	ldr	r3, [pc, #40]	; (8006888 <HAL_Delay+0x44>)
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	461a      	mov	r2, r3
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	4413      	add	r3, r2
 8006868:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800686a:	bf00      	nop
 800686c:	f7ff ffde 	bl	800682c <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	429a      	cmp	r2, r3
 800687a:	d8f7      	bhi.n	800686c <HAL_Delay+0x28>
  {
  }
}
 800687c:	bf00      	nop
 800687e:	bf00      	nop
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	20008ef0 	.word	0x20008ef0

0800688c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006894:	2300      	movs	r3, #0
 8006896:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e033      	b.n	800690a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d109      	bne.n	80068be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f7ff fb2e 	bl	8005f0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c2:	f003 0310 	and.w	r3, r3, #16
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d118      	bne.n	80068fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80068d2:	f023 0302 	bic.w	r3, r3, #2
 80068d6:	f043 0202 	orr.w	r2, r3, #2
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fbde 	bl	80070a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ee:	f023 0303 	bic.w	r3, r3, #3
 80068f2:	f043 0201 	orr.w	r2, r3, #1
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	641a      	str	r2, [r3, #64]	; 0x40
 80068fa:	e001      	b.n	8006900 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006908:	7bfb      	ldrb	r3, [r7, #15]
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
	...

08006914 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800691c:	2300      	movs	r3, #0
 800691e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006926:	2b01      	cmp	r3, #1
 8006928:	d101      	bne.n	800692e <HAL_ADC_Start+0x1a>
 800692a:	2302      	movs	r3, #2
 800692c:	e097      	b.n	8006a5e <HAL_ADC_Start+0x14a>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	2b01      	cmp	r3, #1
 8006942:	d018      	beq.n	8006976 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689a      	ldr	r2, [r3, #8]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f042 0201 	orr.w	r2, r2, #1
 8006952:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006954:	4b45      	ldr	r3, [pc, #276]	; (8006a6c <HAL_ADC_Start+0x158>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a45      	ldr	r2, [pc, #276]	; (8006a70 <HAL_ADC_Start+0x15c>)
 800695a:	fba2 2303 	umull	r2, r3, r2, r3
 800695e:	0c9a      	lsrs	r2, r3, #18
 8006960:	4613      	mov	r3, r2
 8006962:	005b      	lsls	r3, r3, #1
 8006964:	4413      	add	r3, r2
 8006966:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006968:	e002      	b.n	8006970 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	3b01      	subs	r3, #1
 800696e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1f9      	bne.n	800696a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	f003 0301 	and.w	r3, r3, #1
 8006980:	2b01      	cmp	r3, #1
 8006982:	d15f      	bne.n	8006a44 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006988:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800698c:	f023 0301 	bic.w	r3, r3, #1
 8006990:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d007      	beq.n	80069b6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80069ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069c2:	d106      	bne.n	80069d2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069c8:	f023 0206 	bic.w	r2, r3, #6
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	645a      	str	r2, [r3, #68]	; 0x44
 80069d0:	e002      	b.n	80069d8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80069e0:	4b24      	ldr	r3, [pc, #144]	; (8006a74 <HAL_ADC_Start+0x160>)
 80069e2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80069ec:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f003 031f 	and.w	r3, r3, #31
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10f      	bne.n	8006a1a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d129      	bne.n	8006a5c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	689a      	ldr	r2, [r3, #8]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006a16:	609a      	str	r2, [r3, #8]
 8006a18:	e020      	b.n	8006a5c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a16      	ldr	r2, [pc, #88]	; (8006a78 <HAL_ADC_Start+0x164>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d11b      	bne.n	8006a5c <HAL_ADC_Start+0x148>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d114      	bne.n	8006a5c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	689a      	ldr	r2, [r3, #8]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006a40:	609a      	str	r2, [r3, #8]
 8006a42:	e00b      	b.n	8006a5c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a48:	f043 0210 	orr.w	r2, r3, #16
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a54:	f043 0201 	orr.w	r2, r3, #1
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	20008ee8 	.word	0x20008ee8
 8006a70:	431bde83 	.word	0x431bde83
 8006a74:	40012300 	.word	0x40012300
 8006a78:	40012000 	.word	0x40012000

08006a7c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006a86:	2300      	movs	r3, #0
 8006a88:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a98:	d113      	bne.n	8006ac2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006aa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aa8:	d10b      	bne.n	8006ac2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aae:	f043 0220 	orr.w	r2, r3, #32
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e063      	b.n	8006b8a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006ac2:	f7ff feb3 	bl	800682c <HAL_GetTick>
 8006ac6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006ac8:	e021      	b.n	8006b0e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad0:	d01d      	beq.n	8006b0e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d007      	beq.n	8006ae8 <HAL_ADC_PollForConversion+0x6c>
 8006ad8:	f7ff fea8 	bl	800682c <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	683a      	ldr	r2, [r7, #0]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d212      	bcs.n	8006b0e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d00b      	beq.n	8006b0e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afa:	f043 0204 	orr.w	r2, r3, #4
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e03d      	b.n	8006b8a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0302 	and.w	r3, r3, #2
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d1d6      	bne.n	8006aca <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f06f 0212 	mvn.w	r2, #18
 8006b24:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d123      	bne.n	8006b88 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d11f      	bne.n	8006b88 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d006      	beq.n	8006b64 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d111      	bne.n	8006b88 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d105      	bne.n	8006b88 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b80:	f043 0201 	orr.w	r2, r3, #1
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
	...

08006b94 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b086      	sub	sp, #24
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d101      	bne.n	8006bb2 <HAL_ADC_Start_DMA+0x1e>
 8006bae:	2302      	movs	r3, #2
 8006bb0:	e0ce      	b.n	8006d50 <HAL_ADC_Start_DMA+0x1bc>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d018      	beq.n	8006bfa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	689a      	ldr	r2, [r3, #8]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f042 0201 	orr.w	r2, r2, #1
 8006bd6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006bd8:	4b5f      	ldr	r3, [pc, #380]	; (8006d58 <HAL_ADC_Start_DMA+0x1c4>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a5f      	ldr	r2, [pc, #380]	; (8006d5c <HAL_ADC_Start_DMA+0x1c8>)
 8006bde:	fba2 2303 	umull	r2, r3, r2, r3
 8006be2:	0c9a      	lsrs	r2, r3, #18
 8006be4:	4613      	mov	r3, r2
 8006be6:	005b      	lsls	r3, r3, #1
 8006be8:	4413      	add	r3, r2
 8006bea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006bec:	e002      	b.n	8006bf4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1f9      	bne.n	8006bee <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c08:	d107      	bne.n	8006c1a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	689a      	ldr	r2, [r3, #8]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c18:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	f003 0301 	and.w	r3, r3, #1
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	f040 8086 	bne.w	8006d36 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006c32:	f023 0301 	bic.w	r3, r3, #1
 8006c36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d007      	beq.n	8006c5c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006c54:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c68:	d106      	bne.n	8006c78 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c6e:	f023 0206 	bic.w	r2, r3, #6
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	645a      	str	r2, [r3, #68]	; 0x44
 8006c76:	e002      	b.n	8006c7e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006c86:	4b36      	ldr	r3, [pc, #216]	; (8006d60 <HAL_ADC_Start_DMA+0x1cc>)
 8006c88:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8e:	4a35      	ldr	r2, [pc, #212]	; (8006d64 <HAL_ADC_Start_DMA+0x1d0>)
 8006c90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c96:	4a34      	ldr	r2, [pc, #208]	; (8006d68 <HAL_ADC_Start_DMA+0x1d4>)
 8006c98:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9e:	4a33      	ldr	r2, [pc, #204]	; (8006d6c <HAL_ADC_Start_DMA+0x1d8>)
 8006ca0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006caa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	685a      	ldr	r2, [r3, #4]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006cba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	689a      	ldr	r2, [r3, #8]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	334c      	adds	r3, #76	; 0x4c
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f001 f806 	bl	8007cec <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	f003 031f 	and.w	r3, r3, #31
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10f      	bne.n	8006d0c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d129      	bne.n	8006d4e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	689a      	ldr	r2, [r3, #8]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006d08:	609a      	str	r2, [r3, #8]
 8006d0a:	e020      	b.n	8006d4e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a17      	ldr	r2, [pc, #92]	; (8006d70 <HAL_ADC_Start_DMA+0x1dc>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d11b      	bne.n	8006d4e <HAL_ADC_Start_DMA+0x1ba>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d114      	bne.n	8006d4e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	689a      	ldr	r2, [r3, #8]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006d32:	609a      	str	r2, [r3, #8]
 8006d34:	e00b      	b.n	8006d4e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3a:	f043 0210 	orr.w	r2, r3, #16
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d46:	f043 0201 	orr.w	r2, r3, #1
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3718      	adds	r7, #24
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	20008ee8 	.word	0x20008ee8
 8006d5c:	431bde83 	.word	0x431bde83
 8006d60:	40012300 	.word	0x40012300
 8006d64:	08007299 	.word	0x08007299
 8006d68:	08007353 	.word	0x08007353
 8006d6c:	0800736f 	.word	0x0800736f
 8006d70:	40012000 	.word	0x40012000

08006d74 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d101      	bne.n	8006d8e <HAL_ADC_Stop_DMA+0x1a>
 8006d8a:	2302      	movs	r3, #2
 8006d8c:	e048      	b.n	8006e20 <HAL_ADC_Stop_DMA+0xac>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	689a      	ldr	r2, [r3, #8]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f022 0201 	bic.w	r2, r2, #1
 8006da4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	f003 0301 	and.w	r3, r3, #1
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d130      	bne.n	8006e16 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	689a      	ldr	r2, [r3, #8]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006dc2:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	d10f      	bne.n	8006df2 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f000 ffe0 	bl	8007d9c <HAL_DMA_Abort>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d005      	beq.n	8006df2 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8006e00:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e06:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006e0a:	f023 0301 	bic.w	r3, r3, #1
 8006e0e:	f043 0201 	orr.w	r2, r3, #1
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8006e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006e46:	2300      	movs	r3, #0
 8006e48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d101      	bne.n	8006e58 <HAL_ADC_ConfigChannel+0x1c>
 8006e54:	2302      	movs	r3, #2
 8006e56:	e113      	b.n	8007080 <HAL_ADC_ConfigChannel+0x244>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2b09      	cmp	r3, #9
 8006e66:	d925      	bls.n	8006eb4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68d9      	ldr	r1, [r3, #12]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	461a      	mov	r2, r3
 8006e76:	4613      	mov	r3, r2
 8006e78:	005b      	lsls	r3, r3, #1
 8006e7a:	4413      	add	r3, r2
 8006e7c:	3b1e      	subs	r3, #30
 8006e7e:	2207      	movs	r2, #7
 8006e80:	fa02 f303 	lsl.w	r3, r2, r3
 8006e84:	43da      	mvns	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	400a      	ands	r2, r1
 8006e8c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68d9      	ldr	r1, [r3, #12]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	689a      	ldr	r2, [r3, #8]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	005b      	lsls	r3, r3, #1
 8006ea4:	4403      	add	r3, r0
 8006ea6:	3b1e      	subs	r3, #30
 8006ea8:	409a      	lsls	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	430a      	orrs	r2, r1
 8006eb0:	60da      	str	r2, [r3, #12]
 8006eb2:	e022      	b.n	8006efa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	6919      	ldr	r1, [r3, #16]
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	005b      	lsls	r3, r3, #1
 8006ec6:	4413      	add	r3, r2
 8006ec8:	2207      	movs	r2, #7
 8006eca:	fa02 f303 	lsl.w	r3, r2, r3
 8006ece:	43da      	mvns	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	400a      	ands	r2, r1
 8006ed6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	6919      	ldr	r1, [r3, #16]
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	689a      	ldr	r2, [r3, #8]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	4618      	mov	r0, r3
 8006eea:	4603      	mov	r3, r0
 8006eec:	005b      	lsls	r3, r3, #1
 8006eee:	4403      	add	r3, r0
 8006ef0:	409a      	lsls	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	430a      	orrs	r2, r1
 8006ef8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	2b06      	cmp	r3, #6
 8006f00:	d824      	bhi.n	8006f4c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	685a      	ldr	r2, [r3, #4]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4413      	add	r3, r2
 8006f12:	3b05      	subs	r3, #5
 8006f14:	221f      	movs	r2, #31
 8006f16:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1a:	43da      	mvns	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	400a      	ands	r2, r1
 8006f22:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	4618      	mov	r0, r3
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	685a      	ldr	r2, [r3, #4]
 8006f36:	4613      	mov	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	3b05      	subs	r3, #5
 8006f3e:	fa00 f203 	lsl.w	r2, r0, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	430a      	orrs	r2, r1
 8006f48:	635a      	str	r2, [r3, #52]	; 0x34
 8006f4a:	e04c      	b.n	8006fe6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	2b0c      	cmp	r3, #12
 8006f52:	d824      	bhi.n	8006f9e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	685a      	ldr	r2, [r3, #4]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4413      	add	r3, r2
 8006f64:	3b23      	subs	r3, #35	; 0x23
 8006f66:	221f      	movs	r2, #31
 8006f68:	fa02 f303 	lsl.w	r3, r2, r3
 8006f6c:	43da      	mvns	r2, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	400a      	ands	r2, r1
 8006f74:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	4618      	mov	r0, r3
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	685a      	ldr	r2, [r3, #4]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	3b23      	subs	r3, #35	; 0x23
 8006f90:	fa00 f203 	lsl.w	r2, r0, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	631a      	str	r2, [r3, #48]	; 0x30
 8006f9c:	e023      	b.n	8006fe6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	685a      	ldr	r2, [r3, #4]
 8006fa8:	4613      	mov	r3, r2
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	4413      	add	r3, r2
 8006fae:	3b41      	subs	r3, #65	; 0x41
 8006fb0:	221f      	movs	r2, #31
 8006fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb6:	43da      	mvns	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	400a      	ands	r2, r1
 8006fbe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	4618      	mov	r0, r3
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	685a      	ldr	r2, [r3, #4]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	4413      	add	r3, r2
 8006fd8:	3b41      	subs	r3, #65	; 0x41
 8006fda:	fa00 f203 	lsl.w	r2, r0, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	430a      	orrs	r2, r1
 8006fe4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006fe6:	4b29      	ldr	r3, [pc, #164]	; (800708c <HAL_ADC_ConfigChannel+0x250>)
 8006fe8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a28      	ldr	r2, [pc, #160]	; (8007090 <HAL_ADC_ConfigChannel+0x254>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d10f      	bne.n	8007014 <HAL_ADC_ConfigChannel+0x1d8>
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b12      	cmp	r3, #18
 8006ffa:	d10b      	bne.n	8007014 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a1d      	ldr	r2, [pc, #116]	; (8007090 <HAL_ADC_ConfigChannel+0x254>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d12b      	bne.n	8007076 <HAL_ADC_ConfigChannel+0x23a>
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a1c      	ldr	r2, [pc, #112]	; (8007094 <HAL_ADC_ConfigChannel+0x258>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d003      	beq.n	8007030 <HAL_ADC_ConfigChannel+0x1f4>
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b11      	cmp	r3, #17
 800702e:	d122      	bne.n	8007076 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a11      	ldr	r2, [pc, #68]	; (8007094 <HAL_ADC_ConfigChannel+0x258>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d111      	bne.n	8007076 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007052:	4b11      	ldr	r3, [pc, #68]	; (8007098 <HAL_ADC_ConfigChannel+0x25c>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a11      	ldr	r2, [pc, #68]	; (800709c <HAL_ADC_ConfigChannel+0x260>)
 8007058:	fba2 2303 	umull	r2, r3, r2, r3
 800705c:	0c9a      	lsrs	r2, r3, #18
 800705e:	4613      	mov	r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	4413      	add	r3, r2
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007068:	e002      	b.n	8007070 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	3b01      	subs	r3, #1
 800706e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1f9      	bne.n	800706a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3714      	adds	r7, #20
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr
 800708c:	40012300 	.word	0x40012300
 8007090:	40012000 	.word	0x40012000
 8007094:	10000012 	.word	0x10000012
 8007098:	20008ee8 	.word	0x20008ee8
 800709c:	431bde83 	.word	0x431bde83

080070a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80070a8:	4b79      	ldr	r3, [pc, #484]	; (8007290 <ADC_Init+0x1f0>)
 80070aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	431a      	orrs	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	685a      	ldr	r2, [r3, #4]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	6859      	ldr	r1, [r3, #4]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	021a      	lsls	r2, r3, #8
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	430a      	orrs	r2, r1
 80070e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	685a      	ldr	r2, [r3, #4]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80070f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	6859      	ldr	r1, [r3, #4]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	689a      	ldr	r2, [r3, #8]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	430a      	orrs	r2, r1
 800710a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	689a      	ldr	r2, [r3, #8]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800711a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6899      	ldr	r1, [r3, #8]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	68da      	ldr	r2, [r3, #12]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	430a      	orrs	r2, r1
 800712c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007132:	4a58      	ldr	r2, [pc, #352]	; (8007294 <ADC_Init+0x1f4>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d022      	beq.n	800717e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	689a      	ldr	r2, [r3, #8]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007146:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	6899      	ldr	r1, [r3, #8]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	430a      	orrs	r2, r1
 8007158:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	689a      	ldr	r2, [r3, #8]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007168:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	6899      	ldr	r1, [r3, #8]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	430a      	orrs	r2, r1
 800717a:	609a      	str	r2, [r3, #8]
 800717c:	e00f      	b.n	800719e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	689a      	ldr	r2, [r3, #8]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800718c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	689a      	ldr	r2, [r3, #8]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800719c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	689a      	ldr	r2, [r3, #8]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f022 0202 	bic.w	r2, r2, #2
 80071ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	6899      	ldr	r1, [r3, #8]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	7e1b      	ldrb	r3, [r3, #24]
 80071b8:	005a      	lsls	r2, r3, #1
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	430a      	orrs	r2, r1
 80071c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d01b      	beq.n	8007204 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	685a      	ldr	r2, [r3, #4]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	685a      	ldr	r2, [r3, #4]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80071ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	6859      	ldr	r1, [r3, #4]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f6:	3b01      	subs	r3, #1
 80071f8:	035a      	lsls	r2, r3, #13
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	430a      	orrs	r2, r1
 8007200:	605a      	str	r2, [r3, #4]
 8007202:	e007      	b.n	8007214 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	685a      	ldr	r2, [r3, #4]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007212:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007222:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	69db      	ldr	r3, [r3, #28]
 800722e:	3b01      	subs	r3, #1
 8007230:	051a      	lsls	r2, r3, #20
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	430a      	orrs	r2, r1
 8007238:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	689a      	ldr	r2, [r3, #8]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007248:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	6899      	ldr	r1, [r3, #8]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007256:	025a      	lsls	r2, r3, #9
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	430a      	orrs	r2, r1
 800725e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	689a      	ldr	r2, [r3, #8]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800726e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	6899      	ldr	r1, [r3, #8]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	029a      	lsls	r2, r3, #10
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	430a      	orrs	r2, r1
 8007282:	609a      	str	r2, [r3, #8]
}
 8007284:	bf00      	nop
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr
 8007290:	40012300 	.word	0x40012300
 8007294:	0f000001 	.word	0x0f000001

08007298 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d13c      	bne.n	800732c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d12b      	bne.n	8007324 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d127      	bne.n	8007324 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072da:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d006      	beq.n	80072f0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d119      	bne.n	8007324 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	685a      	ldr	r2, [r3, #4]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f022 0220 	bic.w	r2, r2, #32
 80072fe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007304:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007314:	2b00      	cmp	r3, #0
 8007316:	d105      	bne.n	8007324 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731c:	f043 0201 	orr.w	r2, r3, #1
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007324:	68f8      	ldr	r0, [r7, #12]
 8007326:	f7fe fd0b 	bl	8005d40 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800732a:	e00e      	b.n	800734a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007330:	f003 0310 	and.w	r3, r3, #16
 8007334:	2b00      	cmp	r3, #0
 8007336:	d003      	beq.n	8007340 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	f7ff fd75 	bl	8006e28 <HAL_ADC_ErrorCallback>
}
 800733e:	e004      	b.n	800734a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	4798      	blx	r3
}
 800734a:	bf00      	nop
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b084      	sub	sp, #16
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f7fe fcdd 	bl	8005d20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007366:	bf00      	nop
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b084      	sub	sp, #16
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2240      	movs	r2, #64	; 0x40
 8007380:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007386:	f043 0204 	orr.w	r2, r3, #4
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f7ff fd4a 	bl	8006e28 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007394:	bf00      	nop
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 800739c:	b480      	push	{r7}
 800739e:	b087      	sub	sp, #28
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80073a4:	2300      	movs	r3, #0
 80073a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80073a8:	2300      	movs	r3, #0
 80073aa:	617b      	str	r3, [r7, #20]
 80073ac:	2300      	movs	r3, #0
 80073ae:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d101      	bne.n	80073be <HAL_ADCEx_InjectedStart+0x22>
 80073ba:	2302      	movs	r3, #2
 80073bc:	e0aa      	b.n	8007514 <HAL_ADCEx_InjectedStart+0x178>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	f003 0301 	and.w	r3, r3, #1
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d018      	beq.n	8007406 <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689a      	ldr	r2, [r3, #8]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f042 0201 	orr.w	r2, r2, #1
 80073e2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80073e4:	4b4e      	ldr	r3, [pc, #312]	; (8007520 <HAL_ADCEx_InjectedStart+0x184>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a4e      	ldr	r2, [pc, #312]	; (8007524 <HAL_ADCEx_InjectedStart+0x188>)
 80073ea:	fba2 2303 	umull	r2, r3, r2, r3
 80073ee:	0c9a      	lsrs	r2, r3, #18
 80073f0:	4613      	mov	r3, r2
 80073f2:	005b      	lsls	r3, r3, #1
 80073f4:	4413      	add	r3, r2
 80073f6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80073f8:	e002      	b.n	8007400 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	3b01      	subs	r3, #1
 80073fe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1f9      	bne.n	80073fa <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	f003 0301 	and.w	r3, r3, #1
 8007410:	2b01      	cmp	r3, #1
 8007412:	d172      	bne.n	80074fa <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007418:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800741c:	f023 0301 	bic.w	r3, r3, #1
 8007420:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007430:	2b00      	cmp	r3, #0
 8007432:	d102      	bne.n	800743a <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f06f 0204 	mvn.w	r2, #4
 800744a:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800744c:	4b36      	ldr	r3, [pc, #216]	; (8007528 <HAL_ADCEx_InjectedStart+0x18c>)
 800744e:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	f003 031f 	and.w	r3, r3, #31
 8007458:	2b00      	cmp	r3, #0
 800745a:	d124      	bne.n	80074a6 <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007466:	2b00      	cmp	r3, #0
 8007468:	bf0c      	ite	eq
 800746a:	2301      	moveq	r3, #1
 800746c:	2300      	movne	r3, #0
 800746e:	b2db      	uxtb	r3, r3
 8007470:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800747c:	2b00      	cmp	r3, #0
 800747e:	bf0c      	ite	eq
 8007480:	2301      	moveq	r3, #1
 8007482:	2300      	movne	r3, #0
 8007484:	b2db      	uxtb	r3, r3
 8007486:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d041      	beq.n	8007512 <HAL_ADCEx_InjectedStart+0x176>
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d03e      	beq.n	8007512 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	689a      	ldr	r2, [r3, #8]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80074a2:	609a      	str	r2, [r3, #8]
 80074a4:	e035      	b.n	8007512 <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	bf0c      	ite	eq
 80074b4:	2301      	moveq	r3, #1
 80074b6:	2300      	movne	r3, #0
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	bf0c      	ite	eq
 80074ca:	2301      	moveq	r3, #1
 80074cc:	2300      	movne	r3, #0
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a15      	ldr	r2, [pc, #84]	; (800752c <HAL_ADCEx_InjectedStart+0x190>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d11a      	bne.n	8007512 <HAL_ADCEx_InjectedStart+0x176>
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d017      	beq.n	8007512 <HAL_ADCEx_InjectedStart+0x176>
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d014      	beq.n	8007512 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	689a      	ldr	r2, [r3, #8]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80074f6:	609a      	str	r2, [r3, #8]
 80074f8:	e00b      	b.n	8007512 <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fe:	f043 0210 	orr.w	r2, r3, #16
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800750a:	f043 0201 	orr.w	r2, r3, #1
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	371c      	adds	r7, #28
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr
 8007520:	20008ee8 	.word	0x20008ee8
 8007524:	431bde83 	.word	0x431bde83
 8007528:	40012300 	.word	0x40012300
 800752c:	40012000 	.word	0x40012000

08007530 <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007538:	2300      	movs	r3, #0
 800753a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007542:	2b01      	cmp	r3, #1
 8007544:	d101      	bne.n	800754a <HAL_ADCEx_InjectedStop+0x1a>
 8007546:	2302      	movs	r3, #2
 8007548:	e037      	b.n	80075ba <HAL_ADCEx_InjectedStop+0x8a>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800755a:	2b00      	cmp	r3, #0
 800755c:	d120      	bne.n	80075a0 <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8007568:	2b00      	cmp	r3, #0
 800756a:	d119      	bne.n	80075a0 <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689a      	ldr	r2, [r3, #8]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f022 0201 	bic.w	r2, r2, #1
 800757a:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f003 0301 	and.w	r3, r3, #1
 8007586:	2b00      	cmp	r3, #0
 8007588:	d112      	bne.n	80075b0 <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007592:	f023 0301 	bic.w	r3, r3, #1
 8007596:	f043 0201 	orr.w	r2, r3, #1
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800759e:	e007      	b.n	80075b0 <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a4:	f043 0220 	orr.w	r2, r3, #32
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80075b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
	...

080075c8 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 80075d2:	2300      	movs	r3, #0
 80075d4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f06f 0204 	mvn.w	r2, #4
 80075de:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	3b01      	subs	r3, #1
 80075e4:	2b03      	cmp	r3, #3
 80075e6:	d81f      	bhi.n	8007628 <HAL_ADCEx_InjectedGetValue+0x60>
 80075e8:	a201      	add	r2, pc, #4	; (adr r2, 80075f0 <HAL_ADCEx_InjectedGetValue+0x28>)
 80075ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ee:	bf00      	nop
 80075f0:	0800761f 	.word	0x0800761f
 80075f4:	08007615 	.word	0x08007615
 80075f8:	0800760b 	.word	0x0800760b
 80075fc:	08007601 	.word	0x08007601
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007606:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8007608:	e00f      	b.n	800762a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007610:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8007612:	e00a      	b.n	800762a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761a:	60fb      	str	r3, [r7, #12]
    }
    break;
 800761c:	e005      	b.n	800762a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007624:	60fb      	str	r3, [r7, #12]
    }
    break;
 8007626:	e000      	b.n	800762a <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8007628:	bf00      	nop
  }
  return tmp;
 800762a:	68fb      	ldr	r3, [r7, #12]
}
 800762c:	4618      	mov	r0, r3
 800762e:	3714      	adds	r7, #20
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007648:	2b01      	cmp	r3, #1
 800764a:	d101      	bne.n	8007650 <HAL_ADCEx_InjectedConfigChannel+0x18>
 800764c:	2302      	movs	r3, #2
 800764e:	e17e      	b.n	800794e <HAL_ADCEx_InjectedConfigChannel+0x316>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2b09      	cmp	r3, #9
 800765e:	d925      	bls.n	80076ac <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68d9      	ldr	r1, [r3, #12]
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	b29b      	uxth	r3, r3
 800766c:	461a      	mov	r2, r3
 800766e:	4613      	mov	r3, r2
 8007670:	005b      	lsls	r3, r3, #1
 8007672:	4413      	add	r3, r2
 8007674:	3b1e      	subs	r3, #30
 8007676:	2207      	movs	r2, #7
 8007678:	fa02 f303 	lsl.w	r3, r2, r3
 800767c:	43da      	mvns	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	400a      	ands	r2, r1
 8007684:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68d9      	ldr	r1, [r3, #12]
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	689a      	ldr	r2, [r3, #8]
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	b29b      	uxth	r3, r3
 8007696:	4618      	mov	r0, r3
 8007698:	4603      	mov	r3, r0
 800769a:	005b      	lsls	r3, r3, #1
 800769c:	4403      	add	r3, r0
 800769e:	3b1e      	subs	r3, #30
 80076a0:	409a      	lsls	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	430a      	orrs	r2, r1
 80076a8:	60da      	str	r2, [r3, #12]
 80076aa:	e022      	b.n	80076f2 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6919      	ldr	r1, [r3, #16]
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	461a      	mov	r2, r3
 80076ba:	4613      	mov	r3, r2
 80076bc:	005b      	lsls	r3, r3, #1
 80076be:	4413      	add	r3, r2
 80076c0:	2207      	movs	r2, #7
 80076c2:	fa02 f303 	lsl.w	r3, r2, r3
 80076c6:	43da      	mvns	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	400a      	ands	r2, r1
 80076ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	6919      	ldr	r1, [r3, #16]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	689a      	ldr	r2, [r3, #8]
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	b29b      	uxth	r3, r3
 80076e0:	4618      	mov	r0, r3
 80076e2:	4603      	mov	r3, r0
 80076e4:	005b      	lsls	r3, r3, #1
 80076e6:	4403      	add	r3, r0
 80076e8:	409a      	lsls	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	430a      	orrs	r2, r1
 80076f0:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8007700:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	691b      	ldr	r3, [r3, #16]
 800770c:	3b01      	subs	r3, #1
 800770e:	051a      	lsls	r2, r3, #20
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	430a      	orrs	r2, r1
 8007716:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	b2da      	uxtb	r2, r3
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	b2db      	uxtb	r3, r3
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	b2db      	uxtb	r3, r3
 800772e:	3303      	adds	r3, #3
 8007730:	b2db      	uxtb	r3, r3
 8007732:	461a      	mov	r2, r3
 8007734:	4613      	mov	r3, r2
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	4413      	add	r3, r2
 800773a:	221f      	movs	r2, #31
 800773c:	fa02 f303 	lsl.w	r3, r2, r3
 8007740:	43da      	mvns	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	400a      	ands	r2, r1
 8007748:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	b29b      	uxth	r3, r3
 8007756:	4618      	mov	r0, r3
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	b2da      	uxtb	r2, r3
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	b2db      	uxtb	r3, r3
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	b2db      	uxtb	r3, r3
 8007768:	3303      	adds	r3, #3
 800776a:	b2db      	uxtb	r3, r3
 800776c:	461a      	mov	r2, r3
 800776e:	4613      	mov	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	fa00 f203 	lsl.w	r2, r0, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	430a      	orrs	r2, r1
 800777e:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	699b      	ldr	r3, [r3, #24]
 8007784:	4a75      	ldr	r2, [pc, #468]	; (800795c <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d022      	beq.n	80077d0 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	689a      	ldr	r2, [r3, #8]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8007798:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6899      	ldr	r1, [r3, #8]
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	699a      	ldr	r2, [r3, #24]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	430a      	orrs	r2, r1
 80077aa:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	689a      	ldr	r2, [r3, #8]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80077ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	6899      	ldr	r1, [r3, #8]
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	69da      	ldr	r2, [r3, #28]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	430a      	orrs	r2, r1
 80077cc:	609a      	str	r2, [r3, #8]
 80077ce:	e00f      	b.n	80077f0 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	689a      	ldr	r2, [r3, #8]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80077de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	689a      	ldr	r2, [r3, #8]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80077ee:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	7d5b      	ldrb	r3, [r3, #21]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d008      	beq.n	800780a <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	685a      	ldr	r2, [r3, #4]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007806:	605a      	str	r2, [r3, #4]
 8007808:	e007      	b.n	800781a <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	685a      	ldr	r2, [r3, #4]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007818:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	7d1b      	ldrb	r3, [r3, #20]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d008      	beq.n	8007834 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007830:	605a      	str	r2, [r3, #4]
 8007832:	e007      	b.n	8007844 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	685a      	ldr	r2, [r3, #4]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007842:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	2b03      	cmp	r3, #3
 800784a:	d02e      	beq.n	80078aa <HAL_ADCEx_InjectedConfigChannel+0x272>
 800784c:	2b03      	cmp	r3, #3
 800784e:	d840      	bhi.n	80078d2 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8007850:	2b01      	cmp	r3, #1
 8007852:	d002      	beq.n	800785a <HAL_ADCEx_InjectedConfigChannel+0x222>
 8007854:	2b02      	cmp	r3, #2
 8007856:	d014      	beq.n	8007882 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8007858:	e03b      	b.n	80078d2 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	695b      	ldr	r3, [r3, #20]
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	6812      	ldr	r2, [r2, #0]
 8007864:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007868:	f023 030f 	bic.w	r3, r3, #15
 800786c:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	6959      	ldr	r1, [r3, #20]
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	68da      	ldr	r2, [r3, #12]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	430a      	orrs	r2, r1
 800787e:	615a      	str	r2, [r3, #20]
      break;
 8007880:	e03b      	b.n	80078fa <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	6812      	ldr	r2, [r2, #0]
 800788c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007890:	f023 030f 	bic.w	r3, r3, #15
 8007894:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	6999      	ldr	r1, [r3, #24]
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	68da      	ldr	r2, [r3, #12]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	430a      	orrs	r2, r1
 80078a6:	619a      	str	r2, [r3, #24]
      break;
 80078a8:	e027      	b.n	80078fa <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	69db      	ldr	r3, [r3, #28]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	6812      	ldr	r2, [r2, #0]
 80078b4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80078b8:	f023 030f 	bic.w	r3, r3, #15
 80078bc:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	69d9      	ldr	r1, [r3, #28]
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	68da      	ldr	r2, [r3, #12]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	430a      	orrs	r2, r1
 80078ce:	61da      	str	r2, [r3, #28]
      break;
 80078d0:	e013      	b.n	80078fa <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	6a1b      	ldr	r3, [r3, #32]
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	6812      	ldr	r2, [r2, #0]
 80078dc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80078e0:	f023 030f 	bic.w	r3, r3, #15
 80078e4:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6a19      	ldr	r1, [r3, #32]
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	68da      	ldr	r2, [r3, #12]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	430a      	orrs	r2, r1
 80078f6:	621a      	str	r2, [r3, #32]
      break;
 80078f8:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80078fa:	4b19      	ldr	r3, [pc, #100]	; (8007960 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80078fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a18      	ldr	r2, [pc, #96]	; (8007964 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d109      	bne.n	800791c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2b12      	cmp	r3, #18
 800790e:	d105      	bne.n	800791c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a10      	ldr	r2, [pc, #64]	; (8007964 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d10e      	bne.n	8007944 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a0f      	ldr	r2, [pc, #60]	; (8007968 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d003      	beq.n	8007938 <HAL_ADCEx_InjectedConfigChannel+0x300>
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2b11      	cmp	r3, #17
 8007936:	d105      	bne.n	8007944 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3714      	adds	r7, #20
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	000f0001 	.word	0x000f0001
 8007960:	40012300 	.word	0x40012300
 8007964:	40012000 	.word	0x40012000
 8007968:	10000012 	.word	0x10000012

0800796c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f003 0307 	and.w	r3, r3, #7
 800797a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800797c:	4b0c      	ldr	r3, [pc, #48]	; (80079b0 <__NVIC_SetPriorityGrouping+0x44>)
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007988:	4013      	ands	r3, r2
 800798a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800799c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800799e:	4a04      	ldr	r2, [pc, #16]	; (80079b0 <__NVIC_SetPriorityGrouping+0x44>)
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	60d3      	str	r3, [r2, #12]
}
 80079a4:	bf00      	nop
 80079a6:	3714      	adds	r7, #20
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr
 80079b0:	e000ed00 	.word	0xe000ed00

080079b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80079b4:	b480      	push	{r7}
 80079b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80079b8:	4b04      	ldr	r3, [pc, #16]	; (80079cc <__NVIC_GetPriorityGrouping+0x18>)
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	0a1b      	lsrs	r3, r3, #8
 80079be:	f003 0307 	and.w	r3, r3, #7
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr
 80079cc:	e000ed00 	.word	0xe000ed00

080079d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	4603      	mov	r3, r0
 80079d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	db0b      	blt.n	80079fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079e2:	79fb      	ldrb	r3, [r7, #7]
 80079e4:	f003 021f 	and.w	r2, r3, #31
 80079e8:	4907      	ldr	r1, [pc, #28]	; (8007a08 <__NVIC_EnableIRQ+0x38>)
 80079ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079ee:	095b      	lsrs	r3, r3, #5
 80079f0:	2001      	movs	r0, #1
 80079f2:	fa00 f202 	lsl.w	r2, r0, r2
 80079f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80079fa:	bf00      	nop
 80079fc:	370c      	adds	r7, #12
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	e000e100 	.word	0xe000e100

08007a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	4603      	mov	r3, r0
 8007a14:	6039      	str	r1, [r7, #0]
 8007a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	db0a      	blt.n	8007a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	b2da      	uxtb	r2, r3
 8007a24:	490c      	ldr	r1, [pc, #48]	; (8007a58 <__NVIC_SetPriority+0x4c>)
 8007a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a2a:	0112      	lsls	r2, r2, #4
 8007a2c:	b2d2      	uxtb	r2, r2
 8007a2e:	440b      	add	r3, r1
 8007a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007a34:	e00a      	b.n	8007a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	b2da      	uxtb	r2, r3
 8007a3a:	4908      	ldr	r1, [pc, #32]	; (8007a5c <__NVIC_SetPriority+0x50>)
 8007a3c:	79fb      	ldrb	r3, [r7, #7]
 8007a3e:	f003 030f 	and.w	r3, r3, #15
 8007a42:	3b04      	subs	r3, #4
 8007a44:	0112      	lsls	r2, r2, #4
 8007a46:	b2d2      	uxtb	r2, r2
 8007a48:	440b      	add	r3, r1
 8007a4a:	761a      	strb	r2, [r3, #24]
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr
 8007a58:	e000e100 	.word	0xe000e100
 8007a5c:	e000ed00 	.word	0xe000ed00

08007a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b089      	sub	sp, #36	; 0x24
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f003 0307 	and.w	r3, r3, #7
 8007a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	f1c3 0307 	rsb	r3, r3, #7
 8007a7a:	2b04      	cmp	r3, #4
 8007a7c:	bf28      	it	cs
 8007a7e:	2304      	movcs	r3, #4
 8007a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	3304      	adds	r3, #4
 8007a86:	2b06      	cmp	r3, #6
 8007a88:	d902      	bls.n	8007a90 <NVIC_EncodePriority+0x30>
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	3b03      	subs	r3, #3
 8007a8e:	e000      	b.n	8007a92 <NVIC_EncodePriority+0x32>
 8007a90:	2300      	movs	r3, #0
 8007a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a94:	f04f 32ff 	mov.w	r2, #4294967295
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a9e:	43da      	mvns	r2, r3
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	401a      	ands	r2, r3
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	fa01 f303 	lsl.w	r3, r1, r3
 8007ab2:	43d9      	mvns	r1, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ab8:	4313      	orrs	r3, r2
         );
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3724      	adds	r7, #36	; 0x24
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr
	...

08007ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ad8:	d301      	bcc.n	8007ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007ada:	2301      	movs	r3, #1
 8007adc:	e00f      	b.n	8007afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007ade:	4a0a      	ldr	r2, [pc, #40]	; (8007b08 <SysTick_Config+0x40>)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007ae6:	210f      	movs	r1, #15
 8007ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8007aec:	f7ff ff8e 	bl	8007a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007af0:	4b05      	ldr	r3, [pc, #20]	; (8007b08 <SysTick_Config+0x40>)
 8007af2:	2200      	movs	r2, #0
 8007af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007af6:	4b04      	ldr	r3, [pc, #16]	; (8007b08 <SysTick_Config+0x40>)
 8007af8:	2207      	movs	r2, #7
 8007afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3708      	adds	r7, #8
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	e000e010 	.word	0xe000e010

08007b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f7ff ff29 	bl	800796c <__NVIC_SetPriorityGrouping>
}
 8007b1a:	bf00      	nop
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b086      	sub	sp, #24
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	4603      	mov	r3, r0
 8007b2a:	60b9      	str	r1, [r7, #8]
 8007b2c:	607a      	str	r2, [r7, #4]
 8007b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007b30:	2300      	movs	r3, #0
 8007b32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007b34:	f7ff ff3e 	bl	80079b4 <__NVIC_GetPriorityGrouping>
 8007b38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	68b9      	ldr	r1, [r7, #8]
 8007b3e:	6978      	ldr	r0, [r7, #20]
 8007b40:	f7ff ff8e 	bl	8007a60 <NVIC_EncodePriority>
 8007b44:	4602      	mov	r2, r0
 8007b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b4a:	4611      	mov	r1, r2
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7ff ff5d 	bl	8007a0c <__NVIC_SetPriority>
}
 8007b52:	bf00      	nop
 8007b54:	3718      	adds	r7, #24
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b082      	sub	sp, #8
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	4603      	mov	r3, r0
 8007b62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f7ff ff31 	bl	80079d0 <__NVIC_EnableIRQ>
}
 8007b6e:	bf00      	nop
 8007b70:	3708      	adds	r7, #8
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b082      	sub	sp, #8
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f7ff ffa2 	bl	8007ac8 <SysTick_Config>
 8007b84:	4603      	mov	r3, r0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
	...

08007b90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b086      	sub	sp, #24
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007b9c:	f7fe fe46 	bl	800682c <HAL_GetTick>
 8007ba0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d101      	bne.n	8007bac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e099      	b.n	8007ce0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2202      	movs	r2, #2
 8007bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f022 0201 	bic.w	r2, r2, #1
 8007bca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007bcc:	e00f      	b.n	8007bee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007bce:	f7fe fe2d 	bl	800682c <HAL_GetTick>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	2b05      	cmp	r3, #5
 8007bda:	d908      	bls.n	8007bee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2220      	movs	r2, #32
 8007be0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2203      	movs	r2, #3
 8007be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e078      	b.n	8007ce0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 0301 	and.w	r3, r3, #1
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1e8      	bne.n	8007bce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007c04:	697a      	ldr	r2, [r7, #20]
 8007c06:	4b38      	ldr	r3, [pc, #224]	; (8007ce8 <HAL_DMA_Init+0x158>)
 8007c08:	4013      	ands	r3, r2
 8007c0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685a      	ldr	r2, [r3, #4]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007c1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	699b      	ldr	r3, [r3, #24]
 8007c2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a1b      	ldr	r3, [r3, #32]
 8007c38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007c3a:	697a      	ldr	r2, [r7, #20]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c44:	2b04      	cmp	r3, #4
 8007c46:	d107      	bne.n	8007c58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c50:	4313      	orrs	r3, r2
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	697a      	ldr	r2, [r7, #20]
 8007c5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	f023 0307 	bic.w	r3, r3, #7
 8007c6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c74:	697a      	ldr	r2, [r7, #20]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7e:	2b04      	cmp	r3, #4
 8007c80:	d117      	bne.n	8007cb2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c86:	697a      	ldr	r2, [r7, #20]
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00e      	beq.n	8007cb2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 fadf 	bl	8008258 <DMA_CheckFifoParam>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d008      	beq.n	8007cb2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2240      	movs	r2, #64	; 0x40
 8007ca4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e016      	b.n	8007ce0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	697a      	ldr	r2, [r7, #20]
 8007cb8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fa96 	bl	80081ec <DMA_CalcBaseAndBitshift>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cc8:	223f      	movs	r2, #63	; 0x3f
 8007cca:	409a      	lsls	r2, r3
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3718      	adds	r7, #24
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	f010803f 	.word	0xf010803f

08007cec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	607a      	str	r2, [r7, #4]
 8007cf8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d101      	bne.n	8007d12 <HAL_DMA_Start_IT+0x26>
 8007d0e:	2302      	movs	r3, #2
 8007d10:	e040      	b.n	8007d94 <HAL_DMA_Start_IT+0xa8>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d12f      	bne.n	8007d86 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2202      	movs	r2, #2
 8007d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	68b9      	ldr	r1, [r7, #8]
 8007d3a:	68f8      	ldr	r0, [r7, #12]
 8007d3c:	f000 fa28 	bl	8008190 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d44:	223f      	movs	r2, #63	; 0x3f
 8007d46:	409a      	lsls	r2, r3
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f042 0216 	orr.w	r2, r2, #22
 8007d5a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d007      	beq.n	8007d74 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f042 0208 	orr.w	r2, r2, #8
 8007d72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f042 0201 	orr.w	r2, r2, #1
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	e005      	b.n	8007d92 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007d8e:	2302      	movs	r3, #2
 8007d90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3718      	adds	r7, #24
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007da8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007daa:	f7fe fd3f 	bl	800682c <HAL_GetTick>
 8007dae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d008      	beq.n	8007dce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2280      	movs	r2, #128	; 0x80
 8007dc0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e052      	b.n	8007e74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f022 0216 	bic.w	r2, r2, #22
 8007ddc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	695a      	ldr	r2, [r3, #20]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007dec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d103      	bne.n	8007dfe <HAL_DMA_Abort+0x62>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d007      	beq.n	8007e0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f022 0208 	bic.w	r2, r2, #8
 8007e0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f022 0201 	bic.w	r2, r2, #1
 8007e1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e1e:	e013      	b.n	8007e48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007e20:	f7fe fd04 	bl	800682c <HAL_GetTick>
 8007e24:	4602      	mov	r2, r0
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	2b05      	cmp	r3, #5
 8007e2c:	d90c      	bls.n	8007e48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2220      	movs	r2, #32
 8007e32:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2203      	movs	r2, #3
 8007e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e015      	b.n	8007e74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1e4      	bne.n	8007e20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e5a:	223f      	movs	r2, #63	; 0x3f
 8007e5c:	409a      	lsls	r2, r3
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b086      	sub	sp, #24
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007e84:	2300      	movs	r3, #0
 8007e86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007e88:	4b8e      	ldr	r3, [pc, #568]	; (80080c4 <HAL_DMA_IRQHandler+0x248>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a8e      	ldr	r2, [pc, #568]	; (80080c8 <HAL_DMA_IRQHandler+0x24c>)
 8007e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e92:	0a9b      	lsrs	r3, r3, #10
 8007e94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ea6:	2208      	movs	r2, #8
 8007ea8:	409a      	lsls	r2, r3
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	4013      	ands	r3, r2
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d01a      	beq.n	8007ee8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f003 0304 	and.w	r3, r3, #4
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d013      	beq.n	8007ee8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f022 0204 	bic.w	r2, r2, #4
 8007ece:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ed4:	2208      	movs	r2, #8
 8007ed6:	409a      	lsls	r2, r3
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ee0:	f043 0201 	orr.w	r2, r3, #1
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eec:	2201      	movs	r2, #1
 8007eee:	409a      	lsls	r2, r3
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d012      	beq.n	8007f1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	695b      	ldr	r3, [r3, #20]
 8007efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00b      	beq.n	8007f1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	409a      	lsls	r2, r3
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f16:	f043 0202 	orr.w	r2, r3, #2
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f22:	2204      	movs	r2, #4
 8007f24:	409a      	lsls	r2, r3
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	4013      	ands	r3, r2
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d012      	beq.n	8007f54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 0302 	and.w	r3, r3, #2
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00b      	beq.n	8007f54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f40:	2204      	movs	r2, #4
 8007f42:	409a      	lsls	r2, r3
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f4c:	f043 0204 	orr.w	r2, r3, #4
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f58:	2210      	movs	r2, #16
 8007f5a:	409a      	lsls	r2, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	4013      	ands	r3, r2
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d043      	beq.n	8007fec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f003 0308 	and.w	r3, r3, #8
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d03c      	beq.n	8007fec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f76:	2210      	movs	r2, #16
 8007f78:	409a      	lsls	r2, r3
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d018      	beq.n	8007fbe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d108      	bne.n	8007fac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d024      	beq.n	8007fec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	4798      	blx	r3
 8007faa:	e01f      	b.n	8007fec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d01b      	beq.n	8007fec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	4798      	blx	r3
 8007fbc:	e016      	b.n	8007fec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d107      	bne.n	8007fdc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f022 0208 	bic.w	r2, r2, #8
 8007fda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d003      	beq.n	8007fec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ff0:	2220      	movs	r2, #32
 8007ff2:	409a      	lsls	r2, r3
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f000 808f 	beq.w	800811c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 0310 	and.w	r3, r3, #16
 8008008:	2b00      	cmp	r3, #0
 800800a:	f000 8087 	beq.w	800811c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008012:	2220      	movs	r2, #32
 8008014:	409a      	lsls	r2, r3
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b05      	cmp	r3, #5
 8008024:	d136      	bne.n	8008094 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f022 0216 	bic.w	r2, r2, #22
 8008034:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	695a      	ldr	r2, [r3, #20]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008044:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804a:	2b00      	cmp	r3, #0
 800804c:	d103      	bne.n	8008056 <HAL_DMA_IRQHandler+0x1da>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008052:	2b00      	cmp	r3, #0
 8008054:	d007      	beq.n	8008066 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f022 0208 	bic.w	r2, r2, #8
 8008064:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800806a:	223f      	movs	r2, #63	; 0x3f
 800806c:	409a      	lsls	r2, r3
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008086:	2b00      	cmp	r3, #0
 8008088:	d07e      	beq.n	8008188 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	4798      	blx	r3
        }
        return;
 8008092:	e079      	b.n	8008188 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d01d      	beq.n	80080de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d10d      	bne.n	80080cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d031      	beq.n	800811c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	4798      	blx	r3
 80080c0:	e02c      	b.n	800811c <HAL_DMA_IRQHandler+0x2a0>
 80080c2:	bf00      	nop
 80080c4:	20008ee8 	.word	0x20008ee8
 80080c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d023      	beq.n	800811c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	4798      	blx	r3
 80080dc:	e01e      	b.n	800811c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10f      	bne.n	800810c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f022 0210 	bic.w	r2, r2, #16
 80080fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008110:	2b00      	cmp	r3, #0
 8008112:	d003      	beq.n	800811c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008120:	2b00      	cmp	r3, #0
 8008122:	d032      	beq.n	800818a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008128:	f003 0301 	and.w	r3, r3, #1
 800812c:	2b00      	cmp	r3, #0
 800812e:	d022      	beq.n	8008176 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2205      	movs	r2, #5
 8008134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f022 0201 	bic.w	r2, r2, #1
 8008146:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	3301      	adds	r3, #1
 800814c:	60bb      	str	r3, [r7, #8]
 800814e:	697a      	ldr	r2, [r7, #20]
 8008150:	429a      	cmp	r2, r3
 8008152:	d307      	bcc.n	8008164 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 0301 	and.w	r3, r3, #1
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1f2      	bne.n	8008148 <HAL_DMA_IRQHandler+0x2cc>
 8008162:	e000      	b.n	8008166 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008164:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2201      	movs	r2, #1
 800816a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800817a:	2b00      	cmp	r3, #0
 800817c:	d005      	beq.n	800818a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	4798      	blx	r3
 8008186:	e000      	b.n	800818a <HAL_DMA_IRQHandler+0x30e>
        return;
 8008188:	bf00      	nop
    }
  }
}
 800818a:	3718      	adds	r7, #24
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	607a      	str	r2, [r7, #4]
 800819c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80081ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	2b40      	cmp	r3, #64	; 0x40
 80081bc:	d108      	bne.n	80081d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68ba      	ldr	r2, [r7, #8]
 80081cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80081ce:	e007      	b.n	80081e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	60da      	str	r2, [r3, #12]
}
 80081e0:	bf00      	nop
 80081e2:	3714      	adds	r7, #20
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	3b10      	subs	r3, #16
 80081fc:	4a14      	ldr	r2, [pc, #80]	; (8008250 <DMA_CalcBaseAndBitshift+0x64>)
 80081fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008202:	091b      	lsrs	r3, r3, #4
 8008204:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008206:	4a13      	ldr	r2, [pc, #76]	; (8008254 <DMA_CalcBaseAndBitshift+0x68>)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	4413      	add	r3, r2
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	461a      	mov	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2b03      	cmp	r3, #3
 8008218:	d909      	bls.n	800822e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008222:	f023 0303 	bic.w	r3, r3, #3
 8008226:	1d1a      	adds	r2, r3, #4
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	659a      	str	r2, [r3, #88]	; 0x58
 800822c:	e007      	b.n	800823e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008236:	f023 0303 	bic.w	r3, r3, #3
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008242:	4618      	mov	r0, r3
 8008244:	3714      	adds	r7, #20
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr
 800824e:	bf00      	nop
 8008250:	aaaaaaab 	.word	0xaaaaaaab
 8008254:	0800e528 	.word	0x0800e528

08008258 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008258:	b480      	push	{r7}
 800825a:	b085      	sub	sp, #20
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008260:	2300      	movs	r3, #0
 8008262:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008268:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	699b      	ldr	r3, [r3, #24]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d11f      	bne.n	80082b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	2b03      	cmp	r3, #3
 8008276:	d856      	bhi.n	8008326 <DMA_CheckFifoParam+0xce>
 8008278:	a201      	add	r2, pc, #4	; (adr r2, 8008280 <DMA_CheckFifoParam+0x28>)
 800827a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827e:	bf00      	nop
 8008280:	08008291 	.word	0x08008291
 8008284:	080082a3 	.word	0x080082a3
 8008288:	08008291 	.word	0x08008291
 800828c:	08008327 	.word	0x08008327
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008294:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008298:	2b00      	cmp	r3, #0
 800829a:	d046      	beq.n	800832a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80082a0:	e043      	b.n	800832a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80082aa:	d140      	bne.n	800832e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80082b0:	e03d      	b.n	800832e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082ba:	d121      	bne.n	8008300 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	2b03      	cmp	r3, #3
 80082c0:	d837      	bhi.n	8008332 <DMA_CheckFifoParam+0xda>
 80082c2:	a201      	add	r2, pc, #4	; (adr r2, 80082c8 <DMA_CheckFifoParam+0x70>)
 80082c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c8:	080082d9 	.word	0x080082d9
 80082cc:	080082df 	.word	0x080082df
 80082d0:	080082d9 	.word	0x080082d9
 80082d4:	080082f1 	.word	0x080082f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	73fb      	strb	r3, [r7, #15]
      break;
 80082dc:	e030      	b.n	8008340 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d025      	beq.n	8008336 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80082ee:	e022      	b.n	8008336 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80082f8:	d11f      	bne.n	800833a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80082fe:	e01c      	b.n	800833a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	2b02      	cmp	r3, #2
 8008304:	d903      	bls.n	800830e <DMA_CheckFifoParam+0xb6>
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	2b03      	cmp	r3, #3
 800830a:	d003      	beq.n	8008314 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800830c:	e018      	b.n	8008340 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	73fb      	strb	r3, [r7, #15]
      break;
 8008312:	e015      	b.n	8008340 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008318:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00e      	beq.n	800833e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	73fb      	strb	r3, [r7, #15]
      break;
 8008324:	e00b      	b.n	800833e <DMA_CheckFifoParam+0xe6>
      break;
 8008326:	bf00      	nop
 8008328:	e00a      	b.n	8008340 <DMA_CheckFifoParam+0xe8>
      break;
 800832a:	bf00      	nop
 800832c:	e008      	b.n	8008340 <DMA_CheckFifoParam+0xe8>
      break;
 800832e:	bf00      	nop
 8008330:	e006      	b.n	8008340 <DMA_CheckFifoParam+0xe8>
      break;
 8008332:	bf00      	nop
 8008334:	e004      	b.n	8008340 <DMA_CheckFifoParam+0xe8>
      break;
 8008336:	bf00      	nop
 8008338:	e002      	b.n	8008340 <DMA_CheckFifoParam+0xe8>
      break;   
 800833a:	bf00      	nop
 800833c:	e000      	b.n	8008340 <DMA_CheckFifoParam+0xe8>
      break;
 800833e:	bf00      	nop
    }
  } 
  
  return status; 
 8008340:	7bfb      	ldrb	r3, [r7, #15]
}
 8008342:	4618      	mov	r0, r3
 8008344:	3714      	adds	r7, #20
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop

08008350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008350:	b480      	push	{r7}
 8008352:	b089      	sub	sp, #36	; 0x24
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800835a:	2300      	movs	r3, #0
 800835c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800835e:	2300      	movs	r3, #0
 8008360:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008362:	2300      	movs	r3, #0
 8008364:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008366:	2300      	movs	r3, #0
 8008368:	61fb      	str	r3, [r7, #28]
 800836a:	e159      	b.n	8008620 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800836c:	2201      	movs	r2, #1
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	fa02 f303 	lsl.w	r3, r2, r3
 8008374:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	697a      	ldr	r2, [r7, #20]
 800837c:	4013      	ands	r3, r2
 800837e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008380:	693a      	ldr	r2, [r7, #16]
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	429a      	cmp	r2, r3
 8008386:	f040 8148 	bne.w	800861a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	f003 0303 	and.w	r3, r3, #3
 8008392:	2b01      	cmp	r3, #1
 8008394:	d005      	beq.n	80083a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d130      	bne.n	8008404 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	005b      	lsls	r3, r3, #1
 80083ac:	2203      	movs	r2, #3
 80083ae:	fa02 f303 	lsl.w	r3, r2, r3
 80083b2:	43db      	mvns	r3, r3
 80083b4:	69ba      	ldr	r2, [r7, #24]
 80083b6:	4013      	ands	r3, r2
 80083b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	68da      	ldr	r2, [r3, #12]
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	005b      	lsls	r3, r3, #1
 80083c2:	fa02 f303 	lsl.w	r3, r2, r3
 80083c6:	69ba      	ldr	r2, [r7, #24]
 80083c8:	4313      	orrs	r3, r2
 80083ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	69ba      	ldr	r2, [r7, #24]
 80083d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80083d8:	2201      	movs	r2, #1
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	fa02 f303 	lsl.w	r3, r2, r3
 80083e0:	43db      	mvns	r3, r3
 80083e2:	69ba      	ldr	r2, [r7, #24]
 80083e4:	4013      	ands	r3, r2
 80083e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	091b      	lsrs	r3, r3, #4
 80083ee:	f003 0201 	and.w	r2, r3, #1
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	fa02 f303 	lsl.w	r3, r2, r3
 80083f8:	69ba      	ldr	r2, [r7, #24]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	69ba      	ldr	r2, [r7, #24]
 8008402:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	f003 0303 	and.w	r3, r3, #3
 800840c:	2b03      	cmp	r3, #3
 800840e:	d017      	beq.n	8008440 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	005b      	lsls	r3, r3, #1
 800841a:	2203      	movs	r2, #3
 800841c:	fa02 f303 	lsl.w	r3, r2, r3
 8008420:	43db      	mvns	r3, r3
 8008422:	69ba      	ldr	r2, [r7, #24]
 8008424:	4013      	ands	r3, r2
 8008426:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	689a      	ldr	r2, [r3, #8]
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	005b      	lsls	r3, r3, #1
 8008430:	fa02 f303 	lsl.w	r3, r2, r3
 8008434:	69ba      	ldr	r2, [r7, #24]
 8008436:	4313      	orrs	r3, r2
 8008438:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	69ba      	ldr	r2, [r7, #24]
 800843e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	f003 0303 	and.w	r3, r3, #3
 8008448:	2b02      	cmp	r3, #2
 800844a:	d123      	bne.n	8008494 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	08da      	lsrs	r2, r3, #3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	3208      	adds	r2, #8
 8008454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008458:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	f003 0307 	and.w	r3, r3, #7
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	220f      	movs	r2, #15
 8008464:	fa02 f303 	lsl.w	r3, r2, r3
 8008468:	43db      	mvns	r3, r3
 800846a:	69ba      	ldr	r2, [r7, #24]
 800846c:	4013      	ands	r3, r2
 800846e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	691a      	ldr	r2, [r3, #16]
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	f003 0307 	and.w	r3, r3, #7
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	fa02 f303 	lsl.w	r3, r2, r3
 8008480:	69ba      	ldr	r2, [r7, #24]
 8008482:	4313      	orrs	r3, r2
 8008484:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	08da      	lsrs	r2, r3, #3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	3208      	adds	r2, #8
 800848e:	69b9      	ldr	r1, [r7, #24]
 8008490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	005b      	lsls	r3, r3, #1
 800849e:	2203      	movs	r2, #3
 80084a0:	fa02 f303 	lsl.w	r3, r2, r3
 80084a4:	43db      	mvns	r3, r3
 80084a6:	69ba      	ldr	r2, [r7, #24]
 80084a8:	4013      	ands	r3, r2
 80084aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	f003 0203 	and.w	r2, r3, #3
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	005b      	lsls	r3, r3, #1
 80084b8:	fa02 f303 	lsl.w	r3, r2, r3
 80084bc:	69ba      	ldr	r2, [r7, #24]
 80084be:	4313      	orrs	r3, r2
 80084c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	69ba      	ldr	r2, [r7, #24]
 80084c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f000 80a2 	beq.w	800861a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80084d6:	2300      	movs	r3, #0
 80084d8:	60fb      	str	r3, [r7, #12]
 80084da:	4b57      	ldr	r3, [pc, #348]	; (8008638 <HAL_GPIO_Init+0x2e8>)
 80084dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084de:	4a56      	ldr	r2, [pc, #344]	; (8008638 <HAL_GPIO_Init+0x2e8>)
 80084e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80084e4:	6453      	str	r3, [r2, #68]	; 0x44
 80084e6:	4b54      	ldr	r3, [pc, #336]	; (8008638 <HAL_GPIO_Init+0x2e8>)
 80084e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084ee:	60fb      	str	r3, [r7, #12]
 80084f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80084f2:	4a52      	ldr	r2, [pc, #328]	; (800863c <HAL_GPIO_Init+0x2ec>)
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	089b      	lsrs	r3, r3, #2
 80084f8:	3302      	adds	r3, #2
 80084fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	f003 0303 	and.w	r3, r3, #3
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	220f      	movs	r2, #15
 800850a:	fa02 f303 	lsl.w	r3, r2, r3
 800850e:	43db      	mvns	r3, r3
 8008510:	69ba      	ldr	r2, [r7, #24]
 8008512:	4013      	ands	r3, r2
 8008514:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a49      	ldr	r2, [pc, #292]	; (8008640 <HAL_GPIO_Init+0x2f0>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d019      	beq.n	8008552 <HAL_GPIO_Init+0x202>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a48      	ldr	r2, [pc, #288]	; (8008644 <HAL_GPIO_Init+0x2f4>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d013      	beq.n	800854e <HAL_GPIO_Init+0x1fe>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a47      	ldr	r2, [pc, #284]	; (8008648 <HAL_GPIO_Init+0x2f8>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d00d      	beq.n	800854a <HAL_GPIO_Init+0x1fa>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a46      	ldr	r2, [pc, #280]	; (800864c <HAL_GPIO_Init+0x2fc>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d007      	beq.n	8008546 <HAL_GPIO_Init+0x1f6>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a45      	ldr	r2, [pc, #276]	; (8008650 <HAL_GPIO_Init+0x300>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d101      	bne.n	8008542 <HAL_GPIO_Init+0x1f2>
 800853e:	2304      	movs	r3, #4
 8008540:	e008      	b.n	8008554 <HAL_GPIO_Init+0x204>
 8008542:	2307      	movs	r3, #7
 8008544:	e006      	b.n	8008554 <HAL_GPIO_Init+0x204>
 8008546:	2303      	movs	r3, #3
 8008548:	e004      	b.n	8008554 <HAL_GPIO_Init+0x204>
 800854a:	2302      	movs	r3, #2
 800854c:	e002      	b.n	8008554 <HAL_GPIO_Init+0x204>
 800854e:	2301      	movs	r3, #1
 8008550:	e000      	b.n	8008554 <HAL_GPIO_Init+0x204>
 8008552:	2300      	movs	r3, #0
 8008554:	69fa      	ldr	r2, [r7, #28]
 8008556:	f002 0203 	and.w	r2, r2, #3
 800855a:	0092      	lsls	r2, r2, #2
 800855c:	4093      	lsls	r3, r2
 800855e:	69ba      	ldr	r2, [r7, #24]
 8008560:	4313      	orrs	r3, r2
 8008562:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008564:	4935      	ldr	r1, [pc, #212]	; (800863c <HAL_GPIO_Init+0x2ec>)
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	089b      	lsrs	r3, r3, #2
 800856a:	3302      	adds	r3, #2
 800856c:	69ba      	ldr	r2, [r7, #24]
 800856e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008572:	4b38      	ldr	r3, [pc, #224]	; (8008654 <HAL_GPIO_Init+0x304>)
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	43db      	mvns	r3, r3
 800857c:	69ba      	ldr	r2, [r7, #24]
 800857e:	4013      	ands	r3, r2
 8008580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800858a:	2b00      	cmp	r3, #0
 800858c:	d003      	beq.n	8008596 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800858e:	69ba      	ldr	r2, [r7, #24]
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	4313      	orrs	r3, r2
 8008594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008596:	4a2f      	ldr	r2, [pc, #188]	; (8008654 <HAL_GPIO_Init+0x304>)
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800859c:	4b2d      	ldr	r3, [pc, #180]	; (8008654 <HAL_GPIO_Init+0x304>)
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	43db      	mvns	r3, r3
 80085a6:	69ba      	ldr	r2, [r7, #24]
 80085a8:	4013      	ands	r3, r2
 80085aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d003      	beq.n	80085c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80085b8:	69ba      	ldr	r2, [r7, #24]
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	4313      	orrs	r3, r2
 80085be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80085c0:	4a24      	ldr	r2, [pc, #144]	; (8008654 <HAL_GPIO_Init+0x304>)
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80085c6:	4b23      	ldr	r3, [pc, #140]	; (8008654 <HAL_GPIO_Init+0x304>)
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	43db      	mvns	r3, r3
 80085d0:	69ba      	ldr	r2, [r7, #24]
 80085d2:	4013      	ands	r3, r2
 80085d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d003      	beq.n	80085ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80085e2:	69ba      	ldr	r2, [r7, #24]
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80085ea:	4a1a      	ldr	r2, [pc, #104]	; (8008654 <HAL_GPIO_Init+0x304>)
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80085f0:	4b18      	ldr	r3, [pc, #96]	; (8008654 <HAL_GPIO_Init+0x304>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	43db      	mvns	r3, r3
 80085fa:	69ba      	ldr	r2, [r7, #24]
 80085fc:	4013      	ands	r3, r2
 80085fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008608:	2b00      	cmp	r3, #0
 800860a:	d003      	beq.n	8008614 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800860c:	69ba      	ldr	r2, [r7, #24]
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	4313      	orrs	r3, r2
 8008612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008614:	4a0f      	ldr	r2, [pc, #60]	; (8008654 <HAL_GPIO_Init+0x304>)
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	3301      	adds	r3, #1
 800861e:	61fb      	str	r3, [r7, #28]
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	2b0f      	cmp	r3, #15
 8008624:	f67f aea2 	bls.w	800836c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008628:	bf00      	nop
 800862a:	bf00      	nop
 800862c:	3724      	adds	r7, #36	; 0x24
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	40023800 	.word	0x40023800
 800863c:	40013800 	.word	0x40013800
 8008640:	40020000 	.word	0x40020000
 8008644:	40020400 	.word	0x40020400
 8008648:	40020800 	.word	0x40020800
 800864c:	40020c00 	.word	0x40020c00
 8008650:	40021000 	.word	0x40021000
 8008654:	40013c00 	.word	0x40013c00

08008658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	460b      	mov	r3, r1
 8008662:	807b      	strh	r3, [r7, #2]
 8008664:	4613      	mov	r3, r2
 8008666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008668:	787b      	ldrb	r3, [r7, #1]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d003      	beq.n	8008676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800866e:	887a      	ldrh	r2, [r7, #2]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008674:	e003      	b.n	800867e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008676:	887b      	ldrh	r3, [r7, #2]
 8008678:	041a      	lsls	r2, r3, #16
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	619a      	str	r2, [r3, #24]
}
 800867e:	bf00      	nop
 8008680:	370c      	adds	r7, #12
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr
	...

0800868c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b082      	sub	sp, #8
 8008690:	af00      	add	r7, sp, #0
 8008692:	4603      	mov	r3, r0
 8008694:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008696:	4b08      	ldr	r3, [pc, #32]	; (80086b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008698:	695a      	ldr	r2, [r3, #20]
 800869a:	88fb      	ldrh	r3, [r7, #6]
 800869c:	4013      	ands	r3, r2
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d006      	beq.n	80086b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80086a2:	4a05      	ldr	r2, [pc, #20]	; (80086b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80086a4:	88fb      	ldrh	r3, [r7, #6]
 80086a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80086a8:	88fb      	ldrh	r3, [r7, #6]
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7fd fbd2 	bl	8005e54 <HAL_GPIO_EXTI_Callback>
  }
}
 80086b0:	bf00      	nop
 80086b2:	3708      	adds	r7, #8
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	40013c00 	.word	0x40013c00

080086bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d101      	bne.n	80086ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	e12b      	b.n	8008926 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d106      	bne.n	80086e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f7fd fca6 	bl	8006034 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2224      	movs	r2, #36	; 0x24
 80086ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f022 0201 	bic.w	r2, r2, #1
 80086fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800870e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800871e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008720:	f001 fbbc 	bl	8009e9c <HAL_RCC_GetPCLK1Freq>
 8008724:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	4a81      	ldr	r2, [pc, #516]	; (8008930 <HAL_I2C_Init+0x274>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d807      	bhi.n	8008740 <HAL_I2C_Init+0x84>
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	4a80      	ldr	r2, [pc, #512]	; (8008934 <HAL_I2C_Init+0x278>)
 8008734:	4293      	cmp	r3, r2
 8008736:	bf94      	ite	ls
 8008738:	2301      	movls	r3, #1
 800873a:	2300      	movhi	r3, #0
 800873c:	b2db      	uxtb	r3, r3
 800873e:	e006      	b.n	800874e <HAL_I2C_Init+0x92>
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	4a7d      	ldr	r2, [pc, #500]	; (8008938 <HAL_I2C_Init+0x27c>)
 8008744:	4293      	cmp	r3, r2
 8008746:	bf94      	ite	ls
 8008748:	2301      	movls	r3, #1
 800874a:	2300      	movhi	r3, #0
 800874c:	b2db      	uxtb	r3, r3
 800874e:	2b00      	cmp	r3, #0
 8008750:	d001      	beq.n	8008756 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	e0e7      	b.n	8008926 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	4a78      	ldr	r2, [pc, #480]	; (800893c <HAL_I2C_Init+0x280>)
 800875a:	fba2 2303 	umull	r2, r3, r2, r3
 800875e:	0c9b      	lsrs	r3, r3, #18
 8008760:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	68ba      	ldr	r2, [r7, #8]
 8008772:	430a      	orrs	r2, r1
 8008774:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	6a1b      	ldr	r3, [r3, #32]
 800877c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	4a6a      	ldr	r2, [pc, #424]	; (8008930 <HAL_I2C_Init+0x274>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d802      	bhi.n	8008790 <HAL_I2C_Init+0xd4>
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	3301      	adds	r3, #1
 800878e:	e009      	b.n	80087a4 <HAL_I2C_Init+0xe8>
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008796:	fb02 f303 	mul.w	r3, r2, r3
 800879a:	4a69      	ldr	r2, [pc, #420]	; (8008940 <HAL_I2C_Init+0x284>)
 800879c:	fba2 2303 	umull	r2, r3, r2, r3
 80087a0:	099b      	lsrs	r3, r3, #6
 80087a2:	3301      	adds	r3, #1
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	6812      	ldr	r2, [r2, #0]
 80087a8:	430b      	orrs	r3, r1
 80087aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	69db      	ldr	r3, [r3, #28]
 80087b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80087b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	495c      	ldr	r1, [pc, #368]	; (8008930 <HAL_I2C_Init+0x274>)
 80087c0:	428b      	cmp	r3, r1
 80087c2:	d819      	bhi.n	80087f8 <HAL_I2C_Init+0x13c>
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	1e59      	subs	r1, r3, #1
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	005b      	lsls	r3, r3, #1
 80087ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80087d2:	1c59      	adds	r1, r3, #1
 80087d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80087d8:	400b      	ands	r3, r1
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00a      	beq.n	80087f4 <HAL_I2C_Init+0x138>
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	1e59      	subs	r1, r3, #1
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	005b      	lsls	r3, r3, #1
 80087e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80087ec:	3301      	adds	r3, #1
 80087ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087f2:	e051      	b.n	8008898 <HAL_I2C_Init+0x1dc>
 80087f4:	2304      	movs	r3, #4
 80087f6:	e04f      	b.n	8008898 <HAL_I2C_Init+0x1dc>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d111      	bne.n	8008824 <HAL_I2C_Init+0x168>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	1e58      	subs	r0, r3, #1
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6859      	ldr	r1, [r3, #4]
 8008808:	460b      	mov	r3, r1
 800880a:	005b      	lsls	r3, r3, #1
 800880c:	440b      	add	r3, r1
 800880e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008812:	3301      	adds	r3, #1
 8008814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008818:	2b00      	cmp	r3, #0
 800881a:	bf0c      	ite	eq
 800881c:	2301      	moveq	r3, #1
 800881e:	2300      	movne	r3, #0
 8008820:	b2db      	uxtb	r3, r3
 8008822:	e012      	b.n	800884a <HAL_I2C_Init+0x18e>
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	1e58      	subs	r0, r3, #1
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6859      	ldr	r1, [r3, #4]
 800882c:	460b      	mov	r3, r1
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	440b      	add	r3, r1
 8008832:	0099      	lsls	r1, r3, #2
 8008834:	440b      	add	r3, r1
 8008836:	fbb0 f3f3 	udiv	r3, r0, r3
 800883a:	3301      	adds	r3, #1
 800883c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008840:	2b00      	cmp	r3, #0
 8008842:	bf0c      	ite	eq
 8008844:	2301      	moveq	r3, #1
 8008846:	2300      	movne	r3, #0
 8008848:	b2db      	uxtb	r3, r3
 800884a:	2b00      	cmp	r3, #0
 800884c:	d001      	beq.n	8008852 <HAL_I2C_Init+0x196>
 800884e:	2301      	movs	r3, #1
 8008850:	e022      	b.n	8008898 <HAL_I2C_Init+0x1dc>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d10e      	bne.n	8008878 <HAL_I2C_Init+0x1bc>
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	1e58      	subs	r0, r3, #1
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6859      	ldr	r1, [r3, #4]
 8008862:	460b      	mov	r3, r1
 8008864:	005b      	lsls	r3, r3, #1
 8008866:	440b      	add	r3, r1
 8008868:	fbb0 f3f3 	udiv	r3, r0, r3
 800886c:	3301      	adds	r3, #1
 800886e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008876:	e00f      	b.n	8008898 <HAL_I2C_Init+0x1dc>
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	1e58      	subs	r0, r3, #1
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6859      	ldr	r1, [r3, #4]
 8008880:	460b      	mov	r3, r1
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	440b      	add	r3, r1
 8008886:	0099      	lsls	r1, r3, #2
 8008888:	440b      	add	r3, r1
 800888a:	fbb0 f3f3 	udiv	r3, r0, r3
 800888e:	3301      	adds	r3, #1
 8008890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008894:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008898:	6879      	ldr	r1, [r7, #4]
 800889a:	6809      	ldr	r1, [r1, #0]
 800889c:	4313      	orrs	r3, r2
 800889e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	69da      	ldr	r2, [r3, #28]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a1b      	ldr	r3, [r3, #32]
 80088b2:	431a      	orrs	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	430a      	orrs	r2, r1
 80088ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80088c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	6911      	ldr	r1, [r2, #16]
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	68d2      	ldr	r2, [r2, #12]
 80088d2:	4311      	orrs	r1, r2
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	6812      	ldr	r2, [r2, #0]
 80088d8:	430b      	orrs	r3, r1
 80088da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	695a      	ldr	r2, [r3, #20]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	699b      	ldr	r3, [r3, #24]
 80088ee:	431a      	orrs	r2, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	430a      	orrs	r2, r1
 80088f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f042 0201 	orr.w	r2, r2, #1
 8008906:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2220      	movs	r2, #32
 8008912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	000186a0 	.word	0x000186a0
 8008934:	001e847f 	.word	0x001e847f
 8008938:	003d08ff 	.word	0x003d08ff
 800893c:	431bde83 	.word	0x431bde83
 8008940:	10624dd3 	.word	0x10624dd3

08008944 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b088      	sub	sp, #32
 8008948:	af02      	add	r7, sp, #8
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	4608      	mov	r0, r1
 800894e:	4611      	mov	r1, r2
 8008950:	461a      	mov	r2, r3
 8008952:	4603      	mov	r3, r0
 8008954:	817b      	strh	r3, [r7, #10]
 8008956:	460b      	mov	r3, r1
 8008958:	813b      	strh	r3, [r7, #8]
 800895a:	4613      	mov	r3, r2
 800895c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800895e:	f7fd ff65 	bl	800682c <HAL_GetTick>
 8008962:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800896a:	b2db      	uxtb	r3, r3
 800896c:	2b20      	cmp	r3, #32
 800896e:	f040 80d9 	bne.w	8008b24 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	9300      	str	r3, [sp, #0]
 8008976:	2319      	movs	r3, #25
 8008978:	2201      	movs	r2, #1
 800897a:	496d      	ldr	r1, [pc, #436]	; (8008b30 <HAL_I2C_Mem_Write+0x1ec>)
 800897c:	68f8      	ldr	r0, [r7, #12]
 800897e:	f000 fc7f 	bl	8009280 <I2C_WaitOnFlagUntilTimeout>
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d001      	beq.n	800898c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008988:	2302      	movs	r3, #2
 800898a:	e0cc      	b.n	8008b26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008992:	2b01      	cmp	r3, #1
 8008994:	d101      	bne.n	800899a <HAL_I2C_Mem_Write+0x56>
 8008996:	2302      	movs	r3, #2
 8008998:	e0c5      	b.n	8008b26 <HAL_I2C_Mem_Write+0x1e2>
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2201      	movs	r2, #1
 800899e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f003 0301 	and.w	r3, r3, #1
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d007      	beq.n	80089c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f042 0201 	orr.w	r2, r2, #1
 80089be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80089ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2221      	movs	r2, #33	; 0x21
 80089d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2240      	movs	r2, #64	; 0x40
 80089dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6a3a      	ldr	r2, [r7, #32]
 80089ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80089f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089f6:	b29a      	uxth	r2, r3
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	4a4d      	ldr	r2, [pc, #308]	; (8008b34 <HAL_I2C_Mem_Write+0x1f0>)
 8008a00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008a02:	88f8      	ldrh	r0, [r7, #6]
 8008a04:	893a      	ldrh	r2, [r7, #8]
 8008a06:	8979      	ldrh	r1, [r7, #10]
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	9301      	str	r3, [sp, #4]
 8008a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0e:	9300      	str	r3, [sp, #0]
 8008a10:	4603      	mov	r3, r0
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f000 fab6 	bl	8008f84 <I2C_RequestMemoryWrite>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d052      	beq.n	8008ac4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e081      	b.n	8008b26 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a22:	697a      	ldr	r2, [r7, #20]
 8008a24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f000 fd00 	bl	800942c <I2C_WaitOnTXEFlagUntilTimeout>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d00d      	beq.n	8008a4e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a36:	2b04      	cmp	r3, #4
 8008a38:	d107      	bne.n	8008a4a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e06b      	b.n	8008b26 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a52:	781a      	ldrb	r2, [r3, #0]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5e:	1c5a      	adds	r2, r3, #1
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	3b01      	subs	r3, #1
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	695b      	ldr	r3, [r3, #20]
 8008a84:	f003 0304 	and.w	r3, r3, #4
 8008a88:	2b04      	cmp	r3, #4
 8008a8a:	d11b      	bne.n	8008ac4 <HAL_I2C_Mem_Write+0x180>
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d017      	beq.n	8008ac4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a98:	781a      	ldrb	r2, [r3, #0]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa4:	1c5a      	adds	r2, r3, #1
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	b29a      	uxth	r2, r3
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	3b01      	subs	r3, #1
 8008abe:	b29a      	uxth	r2, r3
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d1aa      	bne.n	8008a22 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008acc:	697a      	ldr	r2, [r7, #20]
 8008ace:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f000 fcec 	bl	80094ae <I2C_WaitOnBTFFlagUntilTimeout>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d00d      	beq.n	8008af8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae0:	2b04      	cmp	r3, #4
 8008ae2:	d107      	bne.n	8008af4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008af2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	e016      	b.n	8008b26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2220      	movs	r2, #32
 8008b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008b20:	2300      	movs	r3, #0
 8008b22:	e000      	b.n	8008b26 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008b24:	2302      	movs	r3, #2
  }
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3718      	adds	r7, #24
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	00100002 	.word	0x00100002
 8008b34:	ffff0000 	.word	0xffff0000

08008b38 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b08c      	sub	sp, #48	; 0x30
 8008b3c:	af02      	add	r7, sp, #8
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	4608      	mov	r0, r1
 8008b42:	4611      	mov	r1, r2
 8008b44:	461a      	mov	r2, r3
 8008b46:	4603      	mov	r3, r0
 8008b48:	817b      	strh	r3, [r7, #10]
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	813b      	strh	r3, [r7, #8]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008b52:	f7fd fe6b 	bl	800682c <HAL_GetTick>
 8008b56:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	2b20      	cmp	r3, #32
 8008b62:	f040 8208 	bne.w	8008f76 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b68:	9300      	str	r3, [sp, #0]
 8008b6a:	2319      	movs	r3, #25
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	497b      	ldr	r1, [pc, #492]	; (8008d5c <HAL_I2C_Mem_Read+0x224>)
 8008b70:	68f8      	ldr	r0, [r7, #12]
 8008b72:	f000 fb85 	bl	8009280 <I2C_WaitOnFlagUntilTimeout>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d001      	beq.n	8008b80 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008b7c:	2302      	movs	r3, #2
 8008b7e:	e1fb      	b.n	8008f78 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d101      	bne.n	8008b8e <HAL_I2C_Mem_Read+0x56>
 8008b8a:	2302      	movs	r3, #2
 8008b8c:	e1f4      	b.n	8008f78 <HAL_I2C_Mem_Read+0x440>
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2201      	movs	r2, #1
 8008b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 0301 	and.w	r3, r3, #1
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d007      	beq.n	8008bb4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f042 0201 	orr.w	r2, r2, #1
 8008bb2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008bc2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2222      	movs	r2, #34	; 0x22
 8008bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2240      	movs	r2, #64	; 0x40
 8008bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008be4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	4a5b      	ldr	r2, [pc, #364]	; (8008d60 <HAL_I2C_Mem_Read+0x228>)
 8008bf4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008bf6:	88f8      	ldrh	r0, [r7, #6]
 8008bf8:	893a      	ldrh	r2, [r7, #8]
 8008bfa:	8979      	ldrh	r1, [r7, #10]
 8008bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfe:	9301      	str	r3, [sp, #4]
 8008c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c02:	9300      	str	r3, [sp, #0]
 8008c04:	4603      	mov	r3, r0
 8008c06:	68f8      	ldr	r0, [r7, #12]
 8008c08:	f000 fa52 	bl	80090b0 <I2C_RequestMemoryRead>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d001      	beq.n	8008c16 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	e1b0      	b.n	8008f78 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d113      	bne.n	8008c46 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c1e:	2300      	movs	r3, #0
 8008c20:	623b      	str	r3, [r7, #32]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	695b      	ldr	r3, [r3, #20]
 8008c28:	623b      	str	r3, [r7, #32]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	699b      	ldr	r3, [r3, #24]
 8008c30:	623b      	str	r3, [r7, #32]
 8008c32:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c42:	601a      	str	r2, [r3, #0]
 8008c44:	e184      	b.n	8008f50 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d11b      	bne.n	8008c86 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c5e:	2300      	movs	r3, #0
 8008c60:	61fb      	str	r3, [r7, #28]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	695b      	ldr	r3, [r3, #20]
 8008c68:	61fb      	str	r3, [r7, #28]
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	699b      	ldr	r3, [r3, #24]
 8008c70:	61fb      	str	r3, [r7, #28]
 8008c72:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c82:	601a      	str	r2, [r3, #0]
 8008c84:	e164      	b.n	8008f50 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	d11b      	bne.n	8008cc6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c9c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cae:	2300      	movs	r3, #0
 8008cb0:	61bb      	str	r3, [r7, #24]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	695b      	ldr	r3, [r3, #20]
 8008cb8:	61bb      	str	r3, [r7, #24]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	699b      	ldr	r3, [r3, #24]
 8008cc0:	61bb      	str	r3, [r7, #24]
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	e144      	b.n	8008f50 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	617b      	str	r3, [r7, #20]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	695b      	ldr	r3, [r3, #20]
 8008cd0:	617b      	str	r3, [r7, #20]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	699b      	ldr	r3, [r3, #24]
 8008cd8:	617b      	str	r3, [r7, #20]
 8008cda:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008cdc:	e138      	b.n	8008f50 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ce2:	2b03      	cmp	r3, #3
 8008ce4:	f200 80f1 	bhi.w	8008eca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d123      	bne.n	8008d38 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cf2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008cf4:	68f8      	ldr	r0, [r7, #12]
 8008cf6:	f000 fc1b 	bl	8009530 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d001      	beq.n	8008d04 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	e139      	b.n	8008f78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	691a      	ldr	r2, [r3, #16]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0e:	b2d2      	uxtb	r2, r2
 8008d10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d16:	1c5a      	adds	r2, r3, #1
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d20:	3b01      	subs	r3, #1
 8008d22:	b29a      	uxth	r2, r3
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	3b01      	subs	r3, #1
 8008d30:	b29a      	uxth	r2, r3
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008d36:	e10b      	b.n	8008f50 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	d14e      	bne.n	8008dde <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d42:	9300      	str	r3, [sp, #0]
 8008d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d46:	2200      	movs	r2, #0
 8008d48:	4906      	ldr	r1, [pc, #24]	; (8008d64 <HAL_I2C_Mem_Read+0x22c>)
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f000 fa98 	bl	8009280 <I2C_WaitOnFlagUntilTimeout>
 8008d50:	4603      	mov	r3, r0
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d008      	beq.n	8008d68 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008d56:	2301      	movs	r3, #1
 8008d58:	e10e      	b.n	8008f78 <HAL_I2C_Mem_Read+0x440>
 8008d5a:	bf00      	nop
 8008d5c:	00100002 	.word	0x00100002
 8008d60:	ffff0000 	.word	0xffff0000
 8008d64:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	691a      	ldr	r2, [r3, #16]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d82:	b2d2      	uxtb	r2, r2
 8008d84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8a:	1c5a      	adds	r2, r3, #1
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d94:	3b01      	subs	r3, #1
 8008d96:	b29a      	uxth	r2, r3
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	3b01      	subs	r3, #1
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	691a      	ldr	r2, [r3, #16]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db4:	b2d2      	uxtb	r2, r2
 8008db6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dbc:	1c5a      	adds	r2, r3, #1
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	b29a      	uxth	r2, r3
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	3b01      	subs	r3, #1
 8008dd6:	b29a      	uxth	r2, r3
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008ddc:	e0b8      	b.n	8008f50 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de0:	9300      	str	r3, [sp, #0]
 8008de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de4:	2200      	movs	r2, #0
 8008de6:	4966      	ldr	r1, [pc, #408]	; (8008f80 <HAL_I2C_Mem_Read+0x448>)
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f000 fa49 	bl	8009280 <I2C_WaitOnFlagUntilTimeout>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d001      	beq.n	8008df8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	e0bf      	b.n	8008f78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	691a      	ldr	r2, [r3, #16]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e12:	b2d2      	uxtb	r2, r2
 8008e14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1a:	1c5a      	adds	r2, r3, #1
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e24:	3b01      	subs	r3, #1
 8008e26:	b29a      	uxth	r2, r3
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	3b01      	subs	r3, #1
 8008e34:	b29a      	uxth	r2, r3
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3c:	9300      	str	r3, [sp, #0]
 8008e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e40:	2200      	movs	r2, #0
 8008e42:	494f      	ldr	r1, [pc, #316]	; (8008f80 <HAL_I2C_Mem_Read+0x448>)
 8008e44:	68f8      	ldr	r0, [r7, #12]
 8008e46:	f000 fa1b 	bl	8009280 <I2C_WaitOnFlagUntilTimeout>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d001      	beq.n	8008e54 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	e091      	b.n	8008f78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	691a      	ldr	r2, [r3, #16]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6e:	b2d2      	uxtb	r2, r2
 8008e70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e76:	1c5a      	adds	r2, r3, #1
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e80:	3b01      	subs	r3, #1
 8008e82:	b29a      	uxth	r2, r3
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	3b01      	subs	r3, #1
 8008e90:	b29a      	uxth	r2, r3
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	691a      	ldr	r2, [r3, #16]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea0:	b2d2      	uxtb	r2, r2
 8008ea2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea8:	1c5a      	adds	r2, r3, #1
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	b29a      	uxth	r2, r3
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	3b01      	subs	r3, #1
 8008ec2:	b29a      	uxth	r2, r3
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008ec8:	e042      	b.n	8008f50 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ecc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	f000 fb2e 	bl	8009530 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d001      	beq.n	8008ede <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	e04c      	b.n	8008f78 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	691a      	ldr	r2, [r3, #16]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee8:	b2d2      	uxtb	r2, r2
 8008eea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef0:	1c5a      	adds	r2, r3, #1
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008efa:	3b01      	subs	r3, #1
 8008efc:	b29a      	uxth	r2, r3
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	3b01      	subs	r3, #1
 8008f0a:	b29a      	uxth	r2, r3
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	695b      	ldr	r3, [r3, #20]
 8008f16:	f003 0304 	and.w	r3, r3, #4
 8008f1a:	2b04      	cmp	r3, #4
 8008f1c:	d118      	bne.n	8008f50 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	691a      	ldr	r2, [r3, #16]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f28:	b2d2      	uxtb	r2, r2
 8008f2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f30:	1c5a      	adds	r2, r3, #1
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	b29a      	uxth	r2, r3
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	f47f aec2 	bne.w	8008cde <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2220      	movs	r2, #32
 8008f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2200      	movs	r2, #0
 8008f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008f72:	2300      	movs	r3, #0
 8008f74:	e000      	b.n	8008f78 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008f76:	2302      	movs	r3, #2
  }
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3728      	adds	r7, #40	; 0x28
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	00010004 	.word	0x00010004

08008f84 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b088      	sub	sp, #32
 8008f88:	af02      	add	r7, sp, #8
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	4608      	mov	r0, r1
 8008f8e:	4611      	mov	r1, r2
 8008f90:	461a      	mov	r2, r3
 8008f92:	4603      	mov	r3, r0
 8008f94:	817b      	strh	r3, [r7, #10]
 8008f96:	460b      	mov	r3, r1
 8008f98:	813b      	strh	r3, [r7, #8]
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008fac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb0:	9300      	str	r3, [sp, #0]
 8008fb2:	6a3b      	ldr	r3, [r7, #32]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f000 f960 	bl	8009280 <I2C_WaitOnFlagUntilTimeout>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00d      	beq.n	8008fe2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fd4:	d103      	bne.n	8008fde <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fdc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008fde:	2303      	movs	r3, #3
 8008fe0:	e05f      	b.n	80090a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008fe2:	897b      	ldrh	r3, [r7, #10]
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008ff0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff4:	6a3a      	ldr	r2, [r7, #32]
 8008ff6:	492d      	ldr	r1, [pc, #180]	; (80090ac <I2C_RequestMemoryWrite+0x128>)
 8008ff8:	68f8      	ldr	r0, [r7, #12]
 8008ffa:	f000 f998 	bl	800932e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d001      	beq.n	8009008 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e04c      	b.n	80090a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009008:	2300      	movs	r3, #0
 800900a:	617b      	str	r3, [r7, #20]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	695b      	ldr	r3, [r3, #20]
 8009012:	617b      	str	r3, [r7, #20]
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	699b      	ldr	r3, [r3, #24]
 800901a:	617b      	str	r3, [r7, #20]
 800901c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800901e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009020:	6a39      	ldr	r1, [r7, #32]
 8009022:	68f8      	ldr	r0, [r7, #12]
 8009024:	f000 fa02 	bl	800942c <I2C_WaitOnTXEFlagUntilTimeout>
 8009028:	4603      	mov	r3, r0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00d      	beq.n	800904a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009032:	2b04      	cmp	r3, #4
 8009034:	d107      	bne.n	8009046 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009044:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	e02b      	b.n	80090a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800904a:	88fb      	ldrh	r3, [r7, #6]
 800904c:	2b01      	cmp	r3, #1
 800904e:	d105      	bne.n	800905c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009050:	893b      	ldrh	r3, [r7, #8]
 8009052:	b2da      	uxtb	r2, r3
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	611a      	str	r2, [r3, #16]
 800905a:	e021      	b.n	80090a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800905c:	893b      	ldrh	r3, [r7, #8]
 800905e:	0a1b      	lsrs	r3, r3, #8
 8009060:	b29b      	uxth	r3, r3
 8009062:	b2da      	uxtb	r2, r3
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800906a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800906c:	6a39      	ldr	r1, [r7, #32]
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	f000 f9dc 	bl	800942c <I2C_WaitOnTXEFlagUntilTimeout>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00d      	beq.n	8009096 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907e:	2b04      	cmp	r3, #4
 8009080:	d107      	bne.n	8009092 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009090:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009092:	2301      	movs	r3, #1
 8009094:	e005      	b.n	80090a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009096:	893b      	ldrh	r3, [r7, #8]
 8009098:	b2da      	uxtb	r2, r3
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3718      	adds	r7, #24
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	00010002 	.word	0x00010002

080090b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b088      	sub	sp, #32
 80090b4:	af02      	add	r7, sp, #8
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	4608      	mov	r0, r1
 80090ba:	4611      	mov	r1, r2
 80090bc:	461a      	mov	r2, r3
 80090be:	4603      	mov	r3, r0
 80090c0:	817b      	strh	r3, [r7, #10]
 80090c2:	460b      	mov	r3, r1
 80090c4:	813b      	strh	r3, [r7, #8]
 80090c6:	4613      	mov	r3, r2
 80090c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80090d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80090ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ec:	9300      	str	r3, [sp, #0]
 80090ee:	6a3b      	ldr	r3, [r7, #32]
 80090f0:	2200      	movs	r2, #0
 80090f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80090f6:	68f8      	ldr	r0, [r7, #12]
 80090f8:	f000 f8c2 	bl	8009280 <I2C_WaitOnFlagUntilTimeout>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00d      	beq.n	800911e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800910c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009110:	d103      	bne.n	800911a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009118:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800911a:	2303      	movs	r3, #3
 800911c:	e0aa      	b.n	8009274 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800911e:	897b      	ldrh	r3, [r7, #10]
 8009120:	b2db      	uxtb	r3, r3
 8009122:	461a      	mov	r2, r3
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800912c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800912e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009130:	6a3a      	ldr	r2, [r7, #32]
 8009132:	4952      	ldr	r1, [pc, #328]	; (800927c <I2C_RequestMemoryRead+0x1cc>)
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f000 f8fa 	bl	800932e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800913a:	4603      	mov	r3, r0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d001      	beq.n	8009144 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009140:	2301      	movs	r3, #1
 8009142:	e097      	b.n	8009274 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009144:	2300      	movs	r3, #0
 8009146:	617b      	str	r3, [r7, #20]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	695b      	ldr	r3, [r3, #20]
 800914e:	617b      	str	r3, [r7, #20]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	699b      	ldr	r3, [r3, #24]
 8009156:	617b      	str	r3, [r7, #20]
 8009158:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800915a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800915c:	6a39      	ldr	r1, [r7, #32]
 800915e:	68f8      	ldr	r0, [r7, #12]
 8009160:	f000 f964 	bl	800942c <I2C_WaitOnTXEFlagUntilTimeout>
 8009164:	4603      	mov	r3, r0
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00d      	beq.n	8009186 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800916e:	2b04      	cmp	r3, #4
 8009170:	d107      	bne.n	8009182 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009180:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	e076      	b.n	8009274 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009186:	88fb      	ldrh	r3, [r7, #6]
 8009188:	2b01      	cmp	r3, #1
 800918a:	d105      	bne.n	8009198 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800918c:	893b      	ldrh	r3, [r7, #8]
 800918e:	b2da      	uxtb	r2, r3
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	611a      	str	r2, [r3, #16]
 8009196:	e021      	b.n	80091dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009198:	893b      	ldrh	r3, [r7, #8]
 800919a:	0a1b      	lsrs	r3, r3, #8
 800919c:	b29b      	uxth	r3, r3
 800919e:	b2da      	uxtb	r2, r3
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80091a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091a8:	6a39      	ldr	r1, [r7, #32]
 80091aa:	68f8      	ldr	r0, [r7, #12]
 80091ac:	f000 f93e 	bl	800942c <I2C_WaitOnTXEFlagUntilTimeout>
 80091b0:	4603      	mov	r3, r0
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00d      	beq.n	80091d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ba:	2b04      	cmp	r3, #4
 80091bc:	d107      	bne.n	80091ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e050      	b.n	8009274 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80091d2:	893b      	ldrh	r3, [r7, #8]
 80091d4:	b2da      	uxtb	r2, r3
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80091dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091de:	6a39      	ldr	r1, [r7, #32]
 80091e0:	68f8      	ldr	r0, [r7, #12]
 80091e2:	f000 f923 	bl	800942c <I2C_WaitOnTXEFlagUntilTimeout>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d00d      	beq.n	8009208 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f0:	2b04      	cmp	r3, #4
 80091f2:	d107      	bne.n	8009204 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009202:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009204:	2301      	movs	r3, #1
 8009206:	e035      	b.n	8009274 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009216:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921a:	9300      	str	r3, [sp, #0]
 800921c:	6a3b      	ldr	r3, [r7, #32]
 800921e:	2200      	movs	r2, #0
 8009220:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009224:	68f8      	ldr	r0, [r7, #12]
 8009226:	f000 f82b 	bl	8009280 <I2C_WaitOnFlagUntilTimeout>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d00d      	beq.n	800924c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800923a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800923e:	d103      	bne.n	8009248 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009246:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009248:	2303      	movs	r3, #3
 800924a:	e013      	b.n	8009274 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800924c:	897b      	ldrh	r3, [r7, #10]
 800924e:	b2db      	uxtb	r3, r3
 8009250:	f043 0301 	orr.w	r3, r3, #1
 8009254:	b2da      	uxtb	r2, r3
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800925c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925e:	6a3a      	ldr	r2, [r7, #32]
 8009260:	4906      	ldr	r1, [pc, #24]	; (800927c <I2C_RequestMemoryRead+0x1cc>)
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	f000 f863 	bl	800932e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009268:	4603      	mov	r3, r0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d001      	beq.n	8009272 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800926e:	2301      	movs	r3, #1
 8009270:	e000      	b.n	8009274 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009272:	2300      	movs	r3, #0
}
 8009274:	4618      	mov	r0, r3
 8009276:	3718      	adds	r7, #24
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	00010002 	.word	0x00010002

08009280 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
 8009286:	60f8      	str	r0, [r7, #12]
 8009288:	60b9      	str	r1, [r7, #8]
 800928a:	603b      	str	r3, [r7, #0]
 800928c:	4613      	mov	r3, r2
 800928e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009290:	e025      	b.n	80092de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009298:	d021      	beq.n	80092de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800929a:	f7fd fac7 	bl	800682c <HAL_GetTick>
 800929e:	4602      	mov	r2, r0
 80092a0:	69bb      	ldr	r3, [r7, #24]
 80092a2:	1ad3      	subs	r3, r2, r3
 80092a4:	683a      	ldr	r2, [r7, #0]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d302      	bcc.n	80092b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d116      	bne.n	80092de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2200      	movs	r2, #0
 80092b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2220      	movs	r2, #32
 80092ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ca:	f043 0220 	orr.w	r2, r3, #32
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	e023      	b.n	8009326 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	0c1b      	lsrs	r3, r3, #16
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d10d      	bne.n	8009304 <I2C_WaitOnFlagUntilTimeout+0x84>
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	695b      	ldr	r3, [r3, #20]
 80092ee:	43da      	mvns	r2, r3
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	4013      	ands	r3, r2
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	bf0c      	ite	eq
 80092fa:	2301      	moveq	r3, #1
 80092fc:	2300      	movne	r3, #0
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	461a      	mov	r2, r3
 8009302:	e00c      	b.n	800931e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	699b      	ldr	r3, [r3, #24]
 800930a:	43da      	mvns	r2, r3
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	4013      	ands	r3, r2
 8009310:	b29b      	uxth	r3, r3
 8009312:	2b00      	cmp	r3, #0
 8009314:	bf0c      	ite	eq
 8009316:	2301      	moveq	r3, #1
 8009318:	2300      	movne	r3, #0
 800931a:	b2db      	uxtb	r3, r3
 800931c:	461a      	mov	r2, r3
 800931e:	79fb      	ldrb	r3, [r7, #7]
 8009320:	429a      	cmp	r2, r3
 8009322:	d0b6      	beq.n	8009292 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009324:	2300      	movs	r3, #0
}
 8009326:	4618      	mov	r0, r3
 8009328:	3710      	adds	r7, #16
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}

0800932e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b084      	sub	sp, #16
 8009332:	af00      	add	r7, sp, #0
 8009334:	60f8      	str	r0, [r7, #12]
 8009336:	60b9      	str	r1, [r7, #8]
 8009338:	607a      	str	r2, [r7, #4]
 800933a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800933c:	e051      	b.n	80093e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	695b      	ldr	r3, [r3, #20]
 8009344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800934c:	d123      	bne.n	8009396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800935c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009366:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2200      	movs	r2, #0
 800936c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2220      	movs	r2, #32
 8009372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2200      	movs	r2, #0
 800937a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009382:	f043 0204 	orr.w	r2, r3, #4
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2200      	movs	r2, #0
 800938e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009392:	2301      	movs	r3, #1
 8009394:	e046      	b.n	8009424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800939c:	d021      	beq.n	80093e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800939e:	f7fd fa45 	bl	800682c <HAL_GetTick>
 80093a2:	4602      	mov	r2, r0
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	1ad3      	subs	r3, r2, r3
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d302      	bcc.n	80093b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d116      	bne.n	80093e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2200      	movs	r2, #0
 80093b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2220      	movs	r2, #32
 80093be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ce:	f043 0220 	orr.w	r2, r3, #32
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2200      	movs	r2, #0
 80093da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	e020      	b.n	8009424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	0c1b      	lsrs	r3, r3, #16
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d10c      	bne.n	8009406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	695b      	ldr	r3, [r3, #20]
 80093f2:	43da      	mvns	r2, r3
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	4013      	ands	r3, r2
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	bf14      	ite	ne
 80093fe:	2301      	movne	r3, #1
 8009400:	2300      	moveq	r3, #0
 8009402:	b2db      	uxtb	r3, r3
 8009404:	e00b      	b.n	800941e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	699b      	ldr	r3, [r3, #24]
 800940c:	43da      	mvns	r2, r3
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	4013      	ands	r3, r2
 8009412:	b29b      	uxth	r3, r3
 8009414:	2b00      	cmp	r3, #0
 8009416:	bf14      	ite	ne
 8009418:	2301      	movne	r3, #1
 800941a:	2300      	moveq	r3, #0
 800941c:	b2db      	uxtb	r3, r3
 800941e:	2b00      	cmp	r3, #0
 8009420:	d18d      	bne.n	800933e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009422:	2300      	movs	r3, #0
}
 8009424:	4618      	mov	r0, r3
 8009426:	3710      	adds	r7, #16
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009438:	e02d      	b.n	8009496 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f000 f8ce 	bl	80095dc <I2C_IsAcknowledgeFailed>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d001      	beq.n	800944a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	e02d      	b.n	80094a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009450:	d021      	beq.n	8009496 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009452:	f7fd f9eb 	bl	800682c <HAL_GetTick>
 8009456:	4602      	mov	r2, r0
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	1ad3      	subs	r3, r2, r3
 800945c:	68ba      	ldr	r2, [r7, #8]
 800945e:	429a      	cmp	r2, r3
 8009460:	d302      	bcc.n	8009468 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d116      	bne.n	8009496 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2200      	movs	r2, #0
 800946c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2220      	movs	r2, #32
 8009472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2200      	movs	r2, #0
 800947a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009482:	f043 0220 	orr.w	r2, r3, #32
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	e007      	b.n	80094a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	695b      	ldr	r3, [r3, #20]
 800949c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094a0:	2b80      	cmp	r3, #128	; 0x80
 80094a2:	d1ca      	bne.n	800943a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b084      	sub	sp, #16
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	60f8      	str	r0, [r7, #12]
 80094b6:	60b9      	str	r1, [r7, #8]
 80094b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80094ba:	e02d      	b.n	8009518 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f000 f88d 	bl	80095dc <I2C_IsAcknowledgeFailed>
 80094c2:	4603      	mov	r3, r0
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d001      	beq.n	80094cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	e02d      	b.n	8009528 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094d2:	d021      	beq.n	8009518 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094d4:	f7fd f9aa 	bl	800682c <HAL_GetTick>
 80094d8:	4602      	mov	r2, r0
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	1ad3      	subs	r3, r2, r3
 80094de:	68ba      	ldr	r2, [r7, #8]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d302      	bcc.n	80094ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d116      	bne.n	8009518 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2200      	movs	r2, #0
 80094ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2220      	movs	r2, #32
 80094f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009504:	f043 0220 	orr.w	r2, r3, #32
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2200      	movs	r2, #0
 8009510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	e007      	b.n	8009528 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	695b      	ldr	r3, [r3, #20]
 800951e:	f003 0304 	and.w	r3, r3, #4
 8009522:	2b04      	cmp	r3, #4
 8009524:	d1ca      	bne.n	80094bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009526:	2300      	movs	r3, #0
}
 8009528:	4618      	mov	r0, r3
 800952a:	3710      	adds	r7, #16
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800953c:	e042      	b.n	80095c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	695b      	ldr	r3, [r3, #20]
 8009544:	f003 0310 	and.w	r3, r3, #16
 8009548:	2b10      	cmp	r3, #16
 800954a:	d119      	bne.n	8009580 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f06f 0210 	mvn.w	r2, #16
 8009554:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2200      	movs	r2, #0
 800955a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2220      	movs	r2, #32
 8009560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2200      	movs	r2, #0
 8009568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2200      	movs	r2, #0
 8009578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	e029      	b.n	80095d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009580:	f7fd f954 	bl	800682c <HAL_GetTick>
 8009584:	4602      	mov	r2, r0
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	1ad3      	subs	r3, r2, r3
 800958a:	68ba      	ldr	r2, [r7, #8]
 800958c:	429a      	cmp	r2, r3
 800958e:	d302      	bcc.n	8009596 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d116      	bne.n	80095c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2220      	movs	r2, #32
 80095a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2200      	movs	r2, #0
 80095a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b0:	f043 0220 	orr.w	r2, r3, #32
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	e007      	b.n	80095d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	695b      	ldr	r3, [r3, #20]
 80095ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095ce:	2b40      	cmp	r3, #64	; 0x40
 80095d0:	d1b5      	bne.n	800953e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3710      	adds	r7, #16
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	695b      	ldr	r3, [r3, #20]
 80095ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095f2:	d11b      	bne.n	800962c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80095fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2220      	movs	r2, #32
 8009608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009618:	f043 0204 	orr.w	r2, r3, #4
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2200      	movs	r2, #0
 8009624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009628:	2301      	movs	r3, #1
 800962a:	e000      	b.n	800962e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	370c      	adds	r7, #12
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr
	...

0800963c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b086      	sub	sp, #24
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d101      	bne.n	800964e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	e267      	b.n	8009b1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f003 0301 	and.w	r3, r3, #1
 8009656:	2b00      	cmp	r3, #0
 8009658:	d075      	beq.n	8009746 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800965a:	4b88      	ldr	r3, [pc, #544]	; (800987c <HAL_RCC_OscConfig+0x240>)
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	f003 030c 	and.w	r3, r3, #12
 8009662:	2b04      	cmp	r3, #4
 8009664:	d00c      	beq.n	8009680 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009666:	4b85      	ldr	r3, [pc, #532]	; (800987c <HAL_RCC_OscConfig+0x240>)
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800966e:	2b08      	cmp	r3, #8
 8009670:	d112      	bne.n	8009698 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009672:	4b82      	ldr	r3, [pc, #520]	; (800987c <HAL_RCC_OscConfig+0x240>)
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800967a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800967e:	d10b      	bne.n	8009698 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009680:	4b7e      	ldr	r3, [pc, #504]	; (800987c <HAL_RCC_OscConfig+0x240>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009688:	2b00      	cmp	r3, #0
 800968a:	d05b      	beq.n	8009744 <HAL_RCC_OscConfig+0x108>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d157      	bne.n	8009744 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009694:	2301      	movs	r3, #1
 8009696:	e242      	b.n	8009b1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096a0:	d106      	bne.n	80096b0 <HAL_RCC_OscConfig+0x74>
 80096a2:	4b76      	ldr	r3, [pc, #472]	; (800987c <HAL_RCC_OscConfig+0x240>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a75      	ldr	r2, [pc, #468]	; (800987c <HAL_RCC_OscConfig+0x240>)
 80096a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096ac:	6013      	str	r3, [r2, #0]
 80096ae:	e01d      	b.n	80096ec <HAL_RCC_OscConfig+0xb0>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80096b8:	d10c      	bne.n	80096d4 <HAL_RCC_OscConfig+0x98>
 80096ba:	4b70      	ldr	r3, [pc, #448]	; (800987c <HAL_RCC_OscConfig+0x240>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a6f      	ldr	r2, [pc, #444]	; (800987c <HAL_RCC_OscConfig+0x240>)
 80096c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80096c4:	6013      	str	r3, [r2, #0]
 80096c6:	4b6d      	ldr	r3, [pc, #436]	; (800987c <HAL_RCC_OscConfig+0x240>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a6c      	ldr	r2, [pc, #432]	; (800987c <HAL_RCC_OscConfig+0x240>)
 80096cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096d0:	6013      	str	r3, [r2, #0]
 80096d2:	e00b      	b.n	80096ec <HAL_RCC_OscConfig+0xb0>
 80096d4:	4b69      	ldr	r3, [pc, #420]	; (800987c <HAL_RCC_OscConfig+0x240>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a68      	ldr	r2, [pc, #416]	; (800987c <HAL_RCC_OscConfig+0x240>)
 80096da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096de:	6013      	str	r3, [r2, #0]
 80096e0:	4b66      	ldr	r3, [pc, #408]	; (800987c <HAL_RCC_OscConfig+0x240>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a65      	ldr	r2, [pc, #404]	; (800987c <HAL_RCC_OscConfig+0x240>)
 80096e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80096ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d013      	beq.n	800971c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096f4:	f7fd f89a 	bl	800682c <HAL_GetTick>
 80096f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80096fa:	e008      	b.n	800970e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80096fc:	f7fd f896 	bl	800682c <HAL_GetTick>
 8009700:	4602      	mov	r2, r0
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	1ad3      	subs	r3, r2, r3
 8009706:	2b64      	cmp	r3, #100	; 0x64
 8009708:	d901      	bls.n	800970e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800970a:	2303      	movs	r3, #3
 800970c:	e207      	b.n	8009b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800970e:	4b5b      	ldr	r3, [pc, #364]	; (800987c <HAL_RCC_OscConfig+0x240>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009716:	2b00      	cmp	r3, #0
 8009718:	d0f0      	beq.n	80096fc <HAL_RCC_OscConfig+0xc0>
 800971a:	e014      	b.n	8009746 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800971c:	f7fd f886 	bl	800682c <HAL_GetTick>
 8009720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009722:	e008      	b.n	8009736 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009724:	f7fd f882 	bl	800682c <HAL_GetTick>
 8009728:	4602      	mov	r2, r0
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	1ad3      	subs	r3, r2, r3
 800972e:	2b64      	cmp	r3, #100	; 0x64
 8009730:	d901      	bls.n	8009736 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009732:	2303      	movs	r3, #3
 8009734:	e1f3      	b.n	8009b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009736:	4b51      	ldr	r3, [pc, #324]	; (800987c <HAL_RCC_OscConfig+0x240>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800973e:	2b00      	cmp	r3, #0
 8009740:	d1f0      	bne.n	8009724 <HAL_RCC_OscConfig+0xe8>
 8009742:	e000      	b.n	8009746 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f003 0302 	and.w	r3, r3, #2
 800974e:	2b00      	cmp	r3, #0
 8009750:	d063      	beq.n	800981a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009752:	4b4a      	ldr	r3, [pc, #296]	; (800987c <HAL_RCC_OscConfig+0x240>)
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	f003 030c 	and.w	r3, r3, #12
 800975a:	2b00      	cmp	r3, #0
 800975c:	d00b      	beq.n	8009776 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800975e:	4b47      	ldr	r3, [pc, #284]	; (800987c <HAL_RCC_OscConfig+0x240>)
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009766:	2b08      	cmp	r3, #8
 8009768:	d11c      	bne.n	80097a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800976a:	4b44      	ldr	r3, [pc, #272]	; (800987c <HAL_RCC_OscConfig+0x240>)
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009772:	2b00      	cmp	r3, #0
 8009774:	d116      	bne.n	80097a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009776:	4b41      	ldr	r3, [pc, #260]	; (800987c <HAL_RCC_OscConfig+0x240>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f003 0302 	and.w	r3, r3, #2
 800977e:	2b00      	cmp	r3, #0
 8009780:	d005      	beq.n	800978e <HAL_RCC_OscConfig+0x152>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	2b01      	cmp	r3, #1
 8009788:	d001      	beq.n	800978e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	e1c7      	b.n	8009b1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800978e:	4b3b      	ldr	r3, [pc, #236]	; (800987c <HAL_RCC_OscConfig+0x240>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	00db      	lsls	r3, r3, #3
 800979c:	4937      	ldr	r1, [pc, #220]	; (800987c <HAL_RCC_OscConfig+0x240>)
 800979e:	4313      	orrs	r3, r2
 80097a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80097a2:	e03a      	b.n	800981a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d020      	beq.n	80097ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80097ac:	4b34      	ldr	r3, [pc, #208]	; (8009880 <HAL_RCC_OscConfig+0x244>)
 80097ae:	2201      	movs	r2, #1
 80097b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097b2:	f7fd f83b 	bl	800682c <HAL_GetTick>
 80097b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097b8:	e008      	b.n	80097cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80097ba:	f7fd f837 	bl	800682c <HAL_GetTick>
 80097be:	4602      	mov	r2, r0
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	1ad3      	subs	r3, r2, r3
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	d901      	bls.n	80097cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80097c8:	2303      	movs	r3, #3
 80097ca:	e1a8      	b.n	8009b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097cc:	4b2b      	ldr	r3, [pc, #172]	; (800987c <HAL_RCC_OscConfig+0x240>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f003 0302 	and.w	r3, r3, #2
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d0f0      	beq.n	80097ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097d8:	4b28      	ldr	r3, [pc, #160]	; (800987c <HAL_RCC_OscConfig+0x240>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	691b      	ldr	r3, [r3, #16]
 80097e4:	00db      	lsls	r3, r3, #3
 80097e6:	4925      	ldr	r1, [pc, #148]	; (800987c <HAL_RCC_OscConfig+0x240>)
 80097e8:	4313      	orrs	r3, r2
 80097ea:	600b      	str	r3, [r1, #0]
 80097ec:	e015      	b.n	800981a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80097ee:	4b24      	ldr	r3, [pc, #144]	; (8009880 <HAL_RCC_OscConfig+0x244>)
 80097f0:	2200      	movs	r2, #0
 80097f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097f4:	f7fd f81a 	bl	800682c <HAL_GetTick>
 80097f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80097fa:	e008      	b.n	800980e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80097fc:	f7fd f816 	bl	800682c <HAL_GetTick>
 8009800:	4602      	mov	r2, r0
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	1ad3      	subs	r3, r2, r3
 8009806:	2b02      	cmp	r3, #2
 8009808:	d901      	bls.n	800980e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800980a:	2303      	movs	r3, #3
 800980c:	e187      	b.n	8009b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800980e:	4b1b      	ldr	r3, [pc, #108]	; (800987c <HAL_RCC_OscConfig+0x240>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f003 0302 	and.w	r3, r3, #2
 8009816:	2b00      	cmp	r3, #0
 8009818:	d1f0      	bne.n	80097fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f003 0308 	and.w	r3, r3, #8
 8009822:	2b00      	cmp	r3, #0
 8009824:	d036      	beq.n	8009894 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	695b      	ldr	r3, [r3, #20]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d016      	beq.n	800985c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800982e:	4b15      	ldr	r3, [pc, #84]	; (8009884 <HAL_RCC_OscConfig+0x248>)
 8009830:	2201      	movs	r2, #1
 8009832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009834:	f7fc fffa 	bl	800682c <HAL_GetTick>
 8009838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800983a:	e008      	b.n	800984e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800983c:	f7fc fff6 	bl	800682c <HAL_GetTick>
 8009840:	4602      	mov	r2, r0
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	1ad3      	subs	r3, r2, r3
 8009846:	2b02      	cmp	r3, #2
 8009848:	d901      	bls.n	800984e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800984a:	2303      	movs	r3, #3
 800984c:	e167      	b.n	8009b1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800984e:	4b0b      	ldr	r3, [pc, #44]	; (800987c <HAL_RCC_OscConfig+0x240>)
 8009850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009852:	f003 0302 	and.w	r3, r3, #2
 8009856:	2b00      	cmp	r3, #0
 8009858:	d0f0      	beq.n	800983c <HAL_RCC_OscConfig+0x200>
 800985a:	e01b      	b.n	8009894 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800985c:	4b09      	ldr	r3, [pc, #36]	; (8009884 <HAL_RCC_OscConfig+0x248>)
 800985e:	2200      	movs	r2, #0
 8009860:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009862:	f7fc ffe3 	bl	800682c <HAL_GetTick>
 8009866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009868:	e00e      	b.n	8009888 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800986a:	f7fc ffdf 	bl	800682c <HAL_GetTick>
 800986e:	4602      	mov	r2, r0
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	1ad3      	subs	r3, r2, r3
 8009874:	2b02      	cmp	r3, #2
 8009876:	d907      	bls.n	8009888 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009878:	2303      	movs	r3, #3
 800987a:	e150      	b.n	8009b1e <HAL_RCC_OscConfig+0x4e2>
 800987c:	40023800 	.word	0x40023800
 8009880:	42470000 	.word	0x42470000
 8009884:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009888:	4b88      	ldr	r3, [pc, #544]	; (8009aac <HAL_RCC_OscConfig+0x470>)
 800988a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800988c:	f003 0302 	and.w	r3, r3, #2
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1ea      	bne.n	800986a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f003 0304 	and.w	r3, r3, #4
 800989c:	2b00      	cmp	r3, #0
 800989e:	f000 8097 	beq.w	80099d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80098a2:	2300      	movs	r3, #0
 80098a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80098a6:	4b81      	ldr	r3, [pc, #516]	; (8009aac <HAL_RCC_OscConfig+0x470>)
 80098a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10f      	bne.n	80098d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80098b2:	2300      	movs	r3, #0
 80098b4:	60bb      	str	r3, [r7, #8]
 80098b6:	4b7d      	ldr	r3, [pc, #500]	; (8009aac <HAL_RCC_OscConfig+0x470>)
 80098b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ba:	4a7c      	ldr	r2, [pc, #496]	; (8009aac <HAL_RCC_OscConfig+0x470>)
 80098bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098c0:	6413      	str	r3, [r2, #64]	; 0x40
 80098c2:	4b7a      	ldr	r3, [pc, #488]	; (8009aac <HAL_RCC_OscConfig+0x470>)
 80098c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098ca:	60bb      	str	r3, [r7, #8]
 80098cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80098ce:	2301      	movs	r3, #1
 80098d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098d2:	4b77      	ldr	r3, [pc, #476]	; (8009ab0 <HAL_RCC_OscConfig+0x474>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d118      	bne.n	8009910 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80098de:	4b74      	ldr	r3, [pc, #464]	; (8009ab0 <HAL_RCC_OscConfig+0x474>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a73      	ldr	r2, [pc, #460]	; (8009ab0 <HAL_RCC_OscConfig+0x474>)
 80098e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80098ea:	f7fc ff9f 	bl	800682c <HAL_GetTick>
 80098ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098f0:	e008      	b.n	8009904 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80098f2:	f7fc ff9b 	bl	800682c <HAL_GetTick>
 80098f6:	4602      	mov	r2, r0
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	1ad3      	subs	r3, r2, r3
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	d901      	bls.n	8009904 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009900:	2303      	movs	r3, #3
 8009902:	e10c      	b.n	8009b1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009904:	4b6a      	ldr	r3, [pc, #424]	; (8009ab0 <HAL_RCC_OscConfig+0x474>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800990c:	2b00      	cmp	r3, #0
 800990e:	d0f0      	beq.n	80098f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	2b01      	cmp	r3, #1
 8009916:	d106      	bne.n	8009926 <HAL_RCC_OscConfig+0x2ea>
 8009918:	4b64      	ldr	r3, [pc, #400]	; (8009aac <HAL_RCC_OscConfig+0x470>)
 800991a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800991c:	4a63      	ldr	r2, [pc, #396]	; (8009aac <HAL_RCC_OscConfig+0x470>)
 800991e:	f043 0301 	orr.w	r3, r3, #1
 8009922:	6713      	str	r3, [r2, #112]	; 0x70
 8009924:	e01c      	b.n	8009960 <HAL_RCC_OscConfig+0x324>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	2b05      	cmp	r3, #5
 800992c:	d10c      	bne.n	8009948 <HAL_RCC_OscConfig+0x30c>
 800992e:	4b5f      	ldr	r3, [pc, #380]	; (8009aac <HAL_RCC_OscConfig+0x470>)
 8009930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009932:	4a5e      	ldr	r2, [pc, #376]	; (8009aac <HAL_RCC_OscConfig+0x470>)
 8009934:	f043 0304 	orr.w	r3, r3, #4
 8009938:	6713      	str	r3, [r2, #112]	; 0x70
 800993a:	4b5c      	ldr	r3, [pc, #368]	; (8009aac <HAL_RCC_OscConfig+0x470>)
 800993c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800993e:	4a5b      	ldr	r2, [pc, #364]	; (8009aac <HAL_RCC_OscConfig+0x470>)
 8009940:	f043 0301 	orr.w	r3, r3, #1
 8009944:	6713      	str	r3, [r2, #112]	; 0x70
 8009946:	e00b      	b.n	8009960 <HAL_RCC_OscConfig+0x324>
 8009948:	4b58      	ldr	r3, [pc, #352]	; (8009aac <HAL_RCC_OscConfig+0x470>)
 800994a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800994c:	4a57      	ldr	r2, [pc, #348]	; (8009aac <HAL_RCC_OscConfig+0x470>)
 800994e:	f023 0301 	bic.w	r3, r3, #1
 8009952:	6713      	str	r3, [r2, #112]	; 0x70
 8009954:	4b55      	ldr	r3, [pc, #340]	; (8009aac <HAL_RCC_OscConfig+0x470>)
 8009956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009958:	4a54      	ldr	r2, [pc, #336]	; (8009aac <HAL_RCC_OscConfig+0x470>)
 800995a:	f023 0304 	bic.w	r3, r3, #4
 800995e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d015      	beq.n	8009994 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009968:	f7fc ff60 	bl	800682c <HAL_GetTick>
 800996c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800996e:	e00a      	b.n	8009986 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009970:	f7fc ff5c 	bl	800682c <HAL_GetTick>
 8009974:	4602      	mov	r2, r0
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	1ad3      	subs	r3, r2, r3
 800997a:	f241 3288 	movw	r2, #5000	; 0x1388
 800997e:	4293      	cmp	r3, r2
 8009980:	d901      	bls.n	8009986 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009982:	2303      	movs	r3, #3
 8009984:	e0cb      	b.n	8009b1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009986:	4b49      	ldr	r3, [pc, #292]	; (8009aac <HAL_RCC_OscConfig+0x470>)
 8009988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800998a:	f003 0302 	and.w	r3, r3, #2
 800998e:	2b00      	cmp	r3, #0
 8009990:	d0ee      	beq.n	8009970 <HAL_RCC_OscConfig+0x334>
 8009992:	e014      	b.n	80099be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009994:	f7fc ff4a 	bl	800682c <HAL_GetTick>
 8009998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800999a:	e00a      	b.n	80099b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800999c:	f7fc ff46 	bl	800682c <HAL_GetTick>
 80099a0:	4602      	mov	r2, r0
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	1ad3      	subs	r3, r2, r3
 80099a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d901      	bls.n	80099b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80099ae:	2303      	movs	r3, #3
 80099b0:	e0b5      	b.n	8009b1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80099b2:	4b3e      	ldr	r3, [pc, #248]	; (8009aac <HAL_RCC_OscConfig+0x470>)
 80099b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099b6:	f003 0302 	and.w	r3, r3, #2
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d1ee      	bne.n	800999c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80099be:	7dfb      	ldrb	r3, [r7, #23]
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d105      	bne.n	80099d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80099c4:	4b39      	ldr	r3, [pc, #228]	; (8009aac <HAL_RCC_OscConfig+0x470>)
 80099c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c8:	4a38      	ldr	r2, [pc, #224]	; (8009aac <HAL_RCC_OscConfig+0x470>)
 80099ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	699b      	ldr	r3, [r3, #24]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	f000 80a1 	beq.w	8009b1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80099da:	4b34      	ldr	r3, [pc, #208]	; (8009aac <HAL_RCC_OscConfig+0x470>)
 80099dc:	689b      	ldr	r3, [r3, #8]
 80099de:	f003 030c 	and.w	r3, r3, #12
 80099e2:	2b08      	cmp	r3, #8
 80099e4:	d05c      	beq.n	8009aa0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	699b      	ldr	r3, [r3, #24]
 80099ea:	2b02      	cmp	r3, #2
 80099ec:	d141      	bne.n	8009a72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80099ee:	4b31      	ldr	r3, [pc, #196]	; (8009ab4 <HAL_RCC_OscConfig+0x478>)
 80099f0:	2200      	movs	r2, #0
 80099f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099f4:	f7fc ff1a 	bl	800682c <HAL_GetTick>
 80099f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80099fa:	e008      	b.n	8009a0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80099fc:	f7fc ff16 	bl	800682c <HAL_GetTick>
 8009a00:	4602      	mov	r2, r0
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	1ad3      	subs	r3, r2, r3
 8009a06:	2b02      	cmp	r3, #2
 8009a08:	d901      	bls.n	8009a0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	e087      	b.n	8009b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a0e:	4b27      	ldr	r3, [pc, #156]	; (8009aac <HAL_RCC_OscConfig+0x470>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d1f0      	bne.n	80099fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	69da      	ldr	r2, [r3, #28]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6a1b      	ldr	r3, [r3, #32]
 8009a22:	431a      	orrs	r2, r3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a28:	019b      	lsls	r3, r3, #6
 8009a2a:	431a      	orrs	r2, r3
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a30:	085b      	lsrs	r3, r3, #1
 8009a32:	3b01      	subs	r3, #1
 8009a34:	041b      	lsls	r3, r3, #16
 8009a36:	431a      	orrs	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a3c:	061b      	lsls	r3, r3, #24
 8009a3e:	491b      	ldr	r1, [pc, #108]	; (8009aac <HAL_RCC_OscConfig+0x470>)
 8009a40:	4313      	orrs	r3, r2
 8009a42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009a44:	4b1b      	ldr	r3, [pc, #108]	; (8009ab4 <HAL_RCC_OscConfig+0x478>)
 8009a46:	2201      	movs	r2, #1
 8009a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a4a:	f7fc feef 	bl	800682c <HAL_GetTick>
 8009a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a50:	e008      	b.n	8009a64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a52:	f7fc feeb 	bl	800682c <HAL_GetTick>
 8009a56:	4602      	mov	r2, r0
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	1ad3      	subs	r3, r2, r3
 8009a5c:	2b02      	cmp	r3, #2
 8009a5e:	d901      	bls.n	8009a64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009a60:	2303      	movs	r3, #3
 8009a62:	e05c      	b.n	8009b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a64:	4b11      	ldr	r3, [pc, #68]	; (8009aac <HAL_RCC_OscConfig+0x470>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d0f0      	beq.n	8009a52 <HAL_RCC_OscConfig+0x416>
 8009a70:	e054      	b.n	8009b1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a72:	4b10      	ldr	r3, [pc, #64]	; (8009ab4 <HAL_RCC_OscConfig+0x478>)
 8009a74:	2200      	movs	r2, #0
 8009a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a78:	f7fc fed8 	bl	800682c <HAL_GetTick>
 8009a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a7e:	e008      	b.n	8009a92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a80:	f7fc fed4 	bl	800682c <HAL_GetTick>
 8009a84:	4602      	mov	r2, r0
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	1ad3      	subs	r3, r2, r3
 8009a8a:	2b02      	cmp	r3, #2
 8009a8c:	d901      	bls.n	8009a92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009a8e:	2303      	movs	r3, #3
 8009a90:	e045      	b.n	8009b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a92:	4b06      	ldr	r3, [pc, #24]	; (8009aac <HAL_RCC_OscConfig+0x470>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d1f0      	bne.n	8009a80 <HAL_RCC_OscConfig+0x444>
 8009a9e:	e03d      	b.n	8009b1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	699b      	ldr	r3, [r3, #24]
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d107      	bne.n	8009ab8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	e038      	b.n	8009b1e <HAL_RCC_OscConfig+0x4e2>
 8009aac:	40023800 	.word	0x40023800
 8009ab0:	40007000 	.word	0x40007000
 8009ab4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009ab8:	4b1b      	ldr	r3, [pc, #108]	; (8009b28 <HAL_RCC_OscConfig+0x4ec>)
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	699b      	ldr	r3, [r3, #24]
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d028      	beq.n	8009b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d121      	bne.n	8009b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d11a      	bne.n	8009b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009ae2:	68fa      	ldr	r2, [r7, #12]
 8009ae4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009ae8:	4013      	ands	r3, r2
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009aee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d111      	bne.n	8009b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009afe:	085b      	lsrs	r3, r3, #1
 8009b00:	3b01      	subs	r3, #1
 8009b02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d107      	bne.n	8009b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d001      	beq.n	8009b1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e000      	b.n	8009b1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3718      	adds	r7, #24
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	40023800 	.word	0x40023800

08009b2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d101      	bne.n	8009b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	e0cc      	b.n	8009cda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009b40:	4b68      	ldr	r3, [pc, #416]	; (8009ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f003 0307 	and.w	r3, r3, #7
 8009b48:	683a      	ldr	r2, [r7, #0]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d90c      	bls.n	8009b68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b4e:	4b65      	ldr	r3, [pc, #404]	; (8009ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8009b50:	683a      	ldr	r2, [r7, #0]
 8009b52:	b2d2      	uxtb	r2, r2
 8009b54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b56:	4b63      	ldr	r3, [pc, #396]	; (8009ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f003 0307 	and.w	r3, r3, #7
 8009b5e:	683a      	ldr	r2, [r7, #0]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d001      	beq.n	8009b68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009b64:	2301      	movs	r3, #1
 8009b66:	e0b8      	b.n	8009cda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f003 0302 	and.w	r3, r3, #2
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d020      	beq.n	8009bb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f003 0304 	and.w	r3, r3, #4
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d005      	beq.n	8009b8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009b80:	4b59      	ldr	r3, [pc, #356]	; (8009ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	4a58      	ldr	r2, [pc, #352]	; (8009ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8009b86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009b8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f003 0308 	and.w	r3, r3, #8
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d005      	beq.n	8009ba4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009b98:	4b53      	ldr	r3, [pc, #332]	; (8009ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	4a52      	ldr	r2, [pc, #328]	; (8009ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8009b9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009ba2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ba4:	4b50      	ldr	r3, [pc, #320]	; (8009ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	494d      	ldr	r1, [pc, #308]	; (8009ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f003 0301 	and.w	r3, r3, #1
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d044      	beq.n	8009c4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d107      	bne.n	8009bda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009bca:	4b47      	ldr	r3, [pc, #284]	; (8009ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d119      	bne.n	8009c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e07f      	b.n	8009cda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	2b02      	cmp	r3, #2
 8009be0:	d003      	beq.n	8009bea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009be6:	2b03      	cmp	r3, #3
 8009be8:	d107      	bne.n	8009bfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009bea:	4b3f      	ldr	r3, [pc, #252]	; (8009ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d109      	bne.n	8009c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e06f      	b.n	8009cda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009bfa:	4b3b      	ldr	r3, [pc, #236]	; (8009ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f003 0302 	and.w	r3, r3, #2
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d101      	bne.n	8009c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009c06:	2301      	movs	r3, #1
 8009c08:	e067      	b.n	8009cda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009c0a:	4b37      	ldr	r3, [pc, #220]	; (8009ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	f023 0203 	bic.w	r2, r3, #3
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	4934      	ldr	r1, [pc, #208]	; (8009ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009c1c:	f7fc fe06 	bl	800682c <HAL_GetTick>
 8009c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c22:	e00a      	b.n	8009c3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c24:	f7fc fe02 	bl	800682c <HAL_GetTick>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	1ad3      	subs	r3, r2, r3
 8009c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d901      	bls.n	8009c3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009c36:	2303      	movs	r3, #3
 8009c38:	e04f      	b.n	8009cda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c3a:	4b2b      	ldr	r3, [pc, #172]	; (8009ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	f003 020c 	and.w	r2, r3, #12
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d1eb      	bne.n	8009c24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009c4c:	4b25      	ldr	r3, [pc, #148]	; (8009ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f003 0307 	and.w	r3, r3, #7
 8009c54:	683a      	ldr	r2, [r7, #0]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d20c      	bcs.n	8009c74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c5a:	4b22      	ldr	r3, [pc, #136]	; (8009ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8009c5c:	683a      	ldr	r2, [r7, #0]
 8009c5e:	b2d2      	uxtb	r2, r2
 8009c60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c62:	4b20      	ldr	r3, [pc, #128]	; (8009ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f003 0307 	and.w	r3, r3, #7
 8009c6a:	683a      	ldr	r2, [r7, #0]
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d001      	beq.n	8009c74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009c70:	2301      	movs	r3, #1
 8009c72:	e032      	b.n	8009cda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f003 0304 	and.w	r3, r3, #4
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d008      	beq.n	8009c92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009c80:	4b19      	ldr	r3, [pc, #100]	; (8009ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	4916      	ldr	r1, [pc, #88]	; (8009ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f003 0308 	and.w	r3, r3, #8
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d009      	beq.n	8009cb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009c9e:	4b12      	ldr	r3, [pc, #72]	; (8009ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	691b      	ldr	r3, [r3, #16]
 8009caa:	00db      	lsls	r3, r3, #3
 8009cac:	490e      	ldr	r1, [pc, #56]	; (8009ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009cb2:	f000 f821 	bl	8009cf8 <HAL_RCC_GetSysClockFreq>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	4b0b      	ldr	r3, [pc, #44]	; (8009ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8009cba:	689b      	ldr	r3, [r3, #8]
 8009cbc:	091b      	lsrs	r3, r3, #4
 8009cbe:	f003 030f 	and.w	r3, r3, #15
 8009cc2:	490a      	ldr	r1, [pc, #40]	; (8009cec <HAL_RCC_ClockConfig+0x1c0>)
 8009cc4:	5ccb      	ldrb	r3, [r1, r3]
 8009cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8009cca:	4a09      	ldr	r2, [pc, #36]	; (8009cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8009ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009cce:	4b09      	ldr	r3, [pc, #36]	; (8009cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f7fc fd66 	bl	80067a4 <HAL_InitTick>

  return HAL_OK;
 8009cd8:	2300      	movs	r3, #0
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	40023c00 	.word	0x40023c00
 8009ce8:	40023800 	.word	0x40023800
 8009cec:	0800e510 	.word	0x0800e510
 8009cf0:	20008ee8 	.word	0x20008ee8
 8009cf4:	20008eec 	.word	0x20008eec

08009cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009cfc:	b090      	sub	sp, #64	; 0x40
 8009cfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009d00:	2300      	movs	r3, #0
 8009d02:	637b      	str	r3, [r7, #52]	; 0x34
 8009d04:	2300      	movs	r3, #0
 8009d06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d08:	2300      	movs	r3, #0
 8009d0a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009d10:	4b59      	ldr	r3, [pc, #356]	; (8009e78 <HAL_RCC_GetSysClockFreq+0x180>)
 8009d12:	689b      	ldr	r3, [r3, #8]
 8009d14:	f003 030c 	and.w	r3, r3, #12
 8009d18:	2b08      	cmp	r3, #8
 8009d1a:	d00d      	beq.n	8009d38 <HAL_RCC_GetSysClockFreq+0x40>
 8009d1c:	2b08      	cmp	r3, #8
 8009d1e:	f200 80a1 	bhi.w	8009e64 <HAL_RCC_GetSysClockFreq+0x16c>
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d002      	beq.n	8009d2c <HAL_RCC_GetSysClockFreq+0x34>
 8009d26:	2b04      	cmp	r3, #4
 8009d28:	d003      	beq.n	8009d32 <HAL_RCC_GetSysClockFreq+0x3a>
 8009d2a:	e09b      	b.n	8009e64 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009d2c:	4b53      	ldr	r3, [pc, #332]	; (8009e7c <HAL_RCC_GetSysClockFreq+0x184>)
 8009d2e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8009d30:	e09b      	b.n	8009e6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009d32:	4b53      	ldr	r3, [pc, #332]	; (8009e80 <HAL_RCC_GetSysClockFreq+0x188>)
 8009d34:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009d36:	e098      	b.n	8009e6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009d38:	4b4f      	ldr	r3, [pc, #316]	; (8009e78 <HAL_RCC_GetSysClockFreq+0x180>)
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d40:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009d42:	4b4d      	ldr	r3, [pc, #308]	; (8009e78 <HAL_RCC_GetSysClockFreq+0x180>)
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d028      	beq.n	8009da0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009d4e:	4b4a      	ldr	r3, [pc, #296]	; (8009e78 <HAL_RCC_GetSysClockFreq+0x180>)
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	099b      	lsrs	r3, r3, #6
 8009d54:	2200      	movs	r2, #0
 8009d56:	623b      	str	r3, [r7, #32]
 8009d58:	627a      	str	r2, [r7, #36]	; 0x24
 8009d5a:	6a3b      	ldr	r3, [r7, #32]
 8009d5c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009d60:	2100      	movs	r1, #0
 8009d62:	4b47      	ldr	r3, [pc, #284]	; (8009e80 <HAL_RCC_GetSysClockFreq+0x188>)
 8009d64:	fb03 f201 	mul.w	r2, r3, r1
 8009d68:	2300      	movs	r3, #0
 8009d6a:	fb00 f303 	mul.w	r3, r0, r3
 8009d6e:	4413      	add	r3, r2
 8009d70:	4a43      	ldr	r2, [pc, #268]	; (8009e80 <HAL_RCC_GetSysClockFreq+0x188>)
 8009d72:	fba0 1202 	umull	r1, r2, r0, r2
 8009d76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009d78:	460a      	mov	r2, r1
 8009d7a:	62ba      	str	r2, [r7, #40]	; 0x28
 8009d7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d7e:	4413      	add	r3, r2
 8009d80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d84:	2200      	movs	r2, #0
 8009d86:	61bb      	str	r3, [r7, #24]
 8009d88:	61fa      	str	r2, [r7, #28]
 8009d8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009d8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009d92:	f7f6 fd7f 	bl	8000894 <__aeabi_uldivmod>
 8009d96:	4602      	mov	r2, r0
 8009d98:	460b      	mov	r3, r1
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d9e:	e053      	b.n	8009e48 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009da0:	4b35      	ldr	r3, [pc, #212]	; (8009e78 <HAL_RCC_GetSysClockFreq+0x180>)
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	099b      	lsrs	r3, r3, #6
 8009da6:	2200      	movs	r2, #0
 8009da8:	613b      	str	r3, [r7, #16]
 8009daa:	617a      	str	r2, [r7, #20]
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009db2:	f04f 0b00 	mov.w	fp, #0
 8009db6:	4652      	mov	r2, sl
 8009db8:	465b      	mov	r3, fp
 8009dba:	f04f 0000 	mov.w	r0, #0
 8009dbe:	f04f 0100 	mov.w	r1, #0
 8009dc2:	0159      	lsls	r1, r3, #5
 8009dc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009dc8:	0150      	lsls	r0, r2, #5
 8009dca:	4602      	mov	r2, r0
 8009dcc:	460b      	mov	r3, r1
 8009dce:	ebb2 080a 	subs.w	r8, r2, sl
 8009dd2:	eb63 090b 	sbc.w	r9, r3, fp
 8009dd6:	f04f 0200 	mov.w	r2, #0
 8009dda:	f04f 0300 	mov.w	r3, #0
 8009dde:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009de2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009de6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009dea:	ebb2 0408 	subs.w	r4, r2, r8
 8009dee:	eb63 0509 	sbc.w	r5, r3, r9
 8009df2:	f04f 0200 	mov.w	r2, #0
 8009df6:	f04f 0300 	mov.w	r3, #0
 8009dfa:	00eb      	lsls	r3, r5, #3
 8009dfc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009e00:	00e2      	lsls	r2, r4, #3
 8009e02:	4614      	mov	r4, r2
 8009e04:	461d      	mov	r5, r3
 8009e06:	eb14 030a 	adds.w	r3, r4, sl
 8009e0a:	603b      	str	r3, [r7, #0]
 8009e0c:	eb45 030b 	adc.w	r3, r5, fp
 8009e10:	607b      	str	r3, [r7, #4]
 8009e12:	f04f 0200 	mov.w	r2, #0
 8009e16:	f04f 0300 	mov.w	r3, #0
 8009e1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009e1e:	4629      	mov	r1, r5
 8009e20:	028b      	lsls	r3, r1, #10
 8009e22:	4621      	mov	r1, r4
 8009e24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009e28:	4621      	mov	r1, r4
 8009e2a:	028a      	lsls	r2, r1, #10
 8009e2c:	4610      	mov	r0, r2
 8009e2e:	4619      	mov	r1, r3
 8009e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e32:	2200      	movs	r2, #0
 8009e34:	60bb      	str	r3, [r7, #8]
 8009e36:	60fa      	str	r2, [r7, #12]
 8009e38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009e3c:	f7f6 fd2a 	bl	8000894 <__aeabi_uldivmod>
 8009e40:	4602      	mov	r2, r0
 8009e42:	460b      	mov	r3, r1
 8009e44:	4613      	mov	r3, r2
 8009e46:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009e48:	4b0b      	ldr	r3, [pc, #44]	; (8009e78 <HAL_RCC_GetSysClockFreq+0x180>)
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	0c1b      	lsrs	r3, r3, #16
 8009e4e:	f003 0303 	and.w	r3, r3, #3
 8009e52:	3301      	adds	r3, #1
 8009e54:	005b      	lsls	r3, r3, #1
 8009e56:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8009e58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009e62:	e002      	b.n	8009e6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009e64:	4b05      	ldr	r3, [pc, #20]	; (8009e7c <HAL_RCC_GetSysClockFreq+0x184>)
 8009e66:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009e68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3740      	adds	r7, #64	; 0x40
 8009e70:	46bd      	mov	sp, r7
 8009e72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e76:	bf00      	nop
 8009e78:	40023800 	.word	0x40023800
 8009e7c:	00f42400 	.word	0x00f42400
 8009e80:	017d7840 	.word	0x017d7840

08009e84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009e84:	b480      	push	{r7}
 8009e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009e88:	4b03      	ldr	r3, [pc, #12]	; (8009e98 <HAL_RCC_GetHCLKFreq+0x14>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr
 8009e96:	bf00      	nop
 8009e98:	20008ee8 	.word	0x20008ee8

08009e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009ea0:	f7ff fff0 	bl	8009e84 <HAL_RCC_GetHCLKFreq>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	4b05      	ldr	r3, [pc, #20]	; (8009ebc <HAL_RCC_GetPCLK1Freq+0x20>)
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	0a9b      	lsrs	r3, r3, #10
 8009eac:	f003 0307 	and.w	r3, r3, #7
 8009eb0:	4903      	ldr	r1, [pc, #12]	; (8009ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009eb2:	5ccb      	ldrb	r3, [r1, r3]
 8009eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	bd80      	pop	{r7, pc}
 8009ebc:	40023800 	.word	0x40023800
 8009ec0:	0800e520 	.word	0x0800e520

08009ec4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009ec8:	f7ff ffdc 	bl	8009e84 <HAL_RCC_GetHCLKFreq>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	4b05      	ldr	r3, [pc, #20]	; (8009ee4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009ed0:	689b      	ldr	r3, [r3, #8]
 8009ed2:	0b5b      	lsrs	r3, r3, #13
 8009ed4:	f003 0307 	and.w	r3, r3, #7
 8009ed8:	4903      	ldr	r1, [pc, #12]	; (8009ee8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009eda:	5ccb      	ldrb	r3, [r1, r3]
 8009edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	40023800 	.word	0x40023800
 8009ee8:	0800e520 	.word	0x0800e520

08009eec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d101      	bne.n	8009efe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009efa:	2301      	movs	r3, #1
 8009efc:	e07b      	b.n	8009ff6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d108      	bne.n	8009f18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f0e:	d009      	beq.n	8009f24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	61da      	str	r2, [r3, #28]
 8009f16:	e005      	b.n	8009f24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d106      	bne.n	8009f44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f7fc f8d2 	bl	80060e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2202      	movs	r2, #2
 8009f48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f5a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009f6c:	431a      	orrs	r2, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f76:	431a      	orrs	r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	691b      	ldr	r3, [r3, #16]
 8009f7c:	f003 0302 	and.w	r3, r3, #2
 8009f80:	431a      	orrs	r2, r3
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	695b      	ldr	r3, [r3, #20]
 8009f86:	f003 0301 	and.w	r3, r3, #1
 8009f8a:	431a      	orrs	r2, r3
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	699b      	ldr	r3, [r3, #24]
 8009f90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f94:	431a      	orrs	r2, r3
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	69db      	ldr	r3, [r3, #28]
 8009f9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f9e:	431a      	orrs	r2, r3
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6a1b      	ldr	r3, [r3, #32]
 8009fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fa8:	ea42 0103 	orr.w	r1, r2, r3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fb0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	430a      	orrs	r2, r1
 8009fba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	699b      	ldr	r3, [r3, #24]
 8009fc0:	0c1b      	lsrs	r3, r3, #16
 8009fc2:	f003 0104 	and.w	r1, r3, #4
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fca:	f003 0210 	and.w	r2, r3, #16
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	430a      	orrs	r2, r1
 8009fd4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	69da      	ldr	r2, [r3, #28]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009fe4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009ff4:	2300      	movs	r3, #0
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3708      	adds	r7, #8
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}

08009ffe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b088      	sub	sp, #32
 800a002:	af00      	add	r7, sp, #0
 800a004:	60f8      	str	r0, [r7, #12]
 800a006:	60b9      	str	r1, [r7, #8]
 800a008:	603b      	str	r3, [r7, #0]
 800a00a:	4613      	mov	r3, r2
 800a00c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a00e:	2300      	movs	r3, #0
 800a010:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d101      	bne.n	800a020 <HAL_SPI_Transmit+0x22>
 800a01c:	2302      	movs	r3, #2
 800a01e:	e126      	b.n	800a26e <HAL_SPI_Transmit+0x270>
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2201      	movs	r2, #1
 800a024:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a028:	f7fc fc00 	bl	800682c <HAL_GetTick>
 800a02c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a02e:	88fb      	ldrh	r3, [r7, #6]
 800a030:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d002      	beq.n	800a044 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a03e:	2302      	movs	r3, #2
 800a040:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a042:	e10b      	b.n	800a25c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d002      	beq.n	800a050 <HAL_SPI_Transmit+0x52>
 800a04a:	88fb      	ldrh	r3, [r7, #6]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d102      	bne.n	800a056 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a050:	2301      	movs	r3, #1
 800a052:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a054:	e102      	b.n	800a25c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2203      	movs	r2, #3
 800a05a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2200      	movs	r2, #0
 800a062:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	68ba      	ldr	r2, [r7, #8]
 800a068:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	88fa      	ldrh	r2, [r7, #6]
 800a06e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	88fa      	ldrh	r2, [r7, #6]
 800a074:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2200      	movs	r2, #0
 800a07a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2200      	movs	r2, #0
 800a080:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2200      	movs	r2, #0
 800a086:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2200      	movs	r2, #0
 800a08c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2200      	movs	r2, #0
 800a092:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a09c:	d10f      	bne.n	800a0be <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a0bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0c8:	2b40      	cmp	r3, #64	; 0x40
 800a0ca:	d007      	beq.n	800a0dc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a0da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	68db      	ldr	r3, [r3, #12]
 800a0e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0e4:	d14b      	bne.n	800a17e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d002      	beq.n	800a0f4 <HAL_SPI_Transmit+0xf6>
 800a0ee:	8afb      	ldrh	r3, [r7, #22]
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d13e      	bne.n	800a172 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0f8:	881a      	ldrh	r2, [r3, #0]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a104:	1c9a      	adds	r2, r3, #2
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a10e:	b29b      	uxth	r3, r3
 800a110:	3b01      	subs	r3, #1
 800a112:	b29a      	uxth	r2, r3
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a118:	e02b      	b.n	800a172 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	f003 0302 	and.w	r3, r3, #2
 800a124:	2b02      	cmp	r3, #2
 800a126:	d112      	bne.n	800a14e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a12c:	881a      	ldrh	r2, [r3, #0]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a138:	1c9a      	adds	r2, r3, #2
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a142:	b29b      	uxth	r3, r3
 800a144:	3b01      	subs	r3, #1
 800a146:	b29a      	uxth	r2, r3
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	86da      	strh	r2, [r3, #54]	; 0x36
 800a14c:	e011      	b.n	800a172 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a14e:	f7fc fb6d 	bl	800682c <HAL_GetTick>
 800a152:	4602      	mov	r2, r0
 800a154:	69bb      	ldr	r3, [r7, #24]
 800a156:	1ad3      	subs	r3, r2, r3
 800a158:	683a      	ldr	r2, [r7, #0]
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d803      	bhi.n	800a166 <HAL_SPI_Transmit+0x168>
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a164:	d102      	bne.n	800a16c <HAL_SPI_Transmit+0x16e>
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d102      	bne.n	800a172 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800a16c:	2303      	movs	r3, #3
 800a16e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a170:	e074      	b.n	800a25c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a176:	b29b      	uxth	r3, r3
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d1ce      	bne.n	800a11a <HAL_SPI_Transmit+0x11c>
 800a17c:	e04c      	b.n	800a218 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d002      	beq.n	800a18c <HAL_SPI_Transmit+0x18e>
 800a186:	8afb      	ldrh	r3, [r7, #22]
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d140      	bne.n	800a20e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	330c      	adds	r3, #12
 800a196:	7812      	ldrb	r2, [r2, #0]
 800a198:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a19e:	1c5a      	adds	r2, r3, #1
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	b29a      	uxth	r2, r3
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a1b2:	e02c      	b.n	800a20e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	f003 0302 	and.w	r3, r3, #2
 800a1be:	2b02      	cmp	r3, #2
 800a1c0:	d113      	bne.n	800a1ea <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	330c      	adds	r3, #12
 800a1cc:	7812      	ldrb	r2, [r2, #0]
 800a1ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1d4:	1c5a      	adds	r2, r3, #1
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	3b01      	subs	r3, #1
 800a1e2:	b29a      	uxth	r2, r3
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	86da      	strh	r2, [r3, #54]	; 0x36
 800a1e8:	e011      	b.n	800a20e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a1ea:	f7fc fb1f 	bl	800682c <HAL_GetTick>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	1ad3      	subs	r3, r2, r3
 800a1f4:	683a      	ldr	r2, [r7, #0]
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d803      	bhi.n	800a202 <HAL_SPI_Transmit+0x204>
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a200:	d102      	bne.n	800a208 <HAL_SPI_Transmit+0x20a>
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d102      	bne.n	800a20e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800a208:	2303      	movs	r3, #3
 800a20a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a20c:	e026      	b.n	800a25c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a212:	b29b      	uxth	r3, r3
 800a214:	2b00      	cmp	r3, #0
 800a216:	d1cd      	bne.n	800a1b4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a218:	69ba      	ldr	r2, [r7, #24]
 800a21a:	6839      	ldr	r1, [r7, #0]
 800a21c:	68f8      	ldr	r0, [r7, #12]
 800a21e:	f000 fdcb 	bl	800adb8 <SPI_EndRxTxTransaction>
 800a222:	4603      	mov	r3, r0
 800a224:	2b00      	cmp	r3, #0
 800a226:	d002      	beq.n	800a22e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2220      	movs	r2, #32
 800a22c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	689b      	ldr	r3, [r3, #8]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d10a      	bne.n	800a24c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a236:	2300      	movs	r3, #0
 800a238:	613b      	str	r3, [r7, #16]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	68db      	ldr	r3, [r3, #12]
 800a240:	613b      	str	r3, [r7, #16]
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	613b      	str	r3, [r7, #16]
 800a24a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a250:	2b00      	cmp	r3, #0
 800a252:	d002      	beq.n	800a25a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800a254:	2301      	movs	r3, #1
 800a256:	77fb      	strb	r3, [r7, #31]
 800a258:	e000      	b.n	800a25c <HAL_SPI_Transmit+0x25e>
  }

error:
 800a25a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2201      	movs	r2, #1
 800a260:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2200      	movs	r2, #0
 800a268:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a26c:	7ffb      	ldrb	r3, [r7, #31]
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3720      	adds	r7, #32
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}

0800a276 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a276:	b580      	push	{r7, lr}
 800a278:	b08c      	sub	sp, #48	; 0x30
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	60f8      	str	r0, [r7, #12]
 800a27e:	60b9      	str	r1, [r7, #8]
 800a280:	607a      	str	r2, [r7, #4]
 800a282:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a284:	2301      	movs	r3, #1
 800a286:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a288:	2300      	movs	r3, #0
 800a28a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a294:	2b01      	cmp	r3, #1
 800a296:	d101      	bne.n	800a29c <HAL_SPI_TransmitReceive+0x26>
 800a298:	2302      	movs	r3, #2
 800a29a:	e18a      	b.n	800a5b2 <HAL_SPI_TransmitReceive+0x33c>
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2201      	movs	r2, #1
 800a2a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a2a4:	f7fc fac2 	bl	800682c <HAL_GetTick>
 800a2a8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a2b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a2ba:	887b      	ldrh	r3, [r7, #2]
 800a2bc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a2be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d00f      	beq.n	800a2e6 <HAL_SPI_TransmitReceive+0x70>
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a2cc:	d107      	bne.n	800a2de <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d103      	bne.n	800a2de <HAL_SPI_TransmitReceive+0x68>
 800a2d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a2da:	2b04      	cmp	r3, #4
 800a2dc:	d003      	beq.n	800a2e6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a2de:	2302      	movs	r3, #2
 800a2e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a2e4:	e15b      	b.n	800a59e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d005      	beq.n	800a2f8 <HAL_SPI_TransmitReceive+0x82>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d002      	beq.n	800a2f8 <HAL_SPI_TransmitReceive+0x82>
 800a2f2:	887b      	ldrh	r3, [r7, #2]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d103      	bne.n	800a300 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a2fe:	e14e      	b.n	800a59e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a306:	b2db      	uxtb	r3, r3
 800a308:	2b04      	cmp	r3, #4
 800a30a:	d003      	beq.n	800a314 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2205      	movs	r2, #5
 800a310:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2200      	movs	r2, #0
 800a318:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	887a      	ldrh	r2, [r7, #2]
 800a324:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	887a      	ldrh	r2, [r7, #2]
 800a32a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	68ba      	ldr	r2, [r7, #8]
 800a330:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	887a      	ldrh	r2, [r7, #2]
 800a336:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	887a      	ldrh	r2, [r7, #2]
 800a33c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2200      	movs	r2, #0
 800a342:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2200      	movs	r2, #0
 800a348:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a354:	2b40      	cmp	r3, #64	; 0x40
 800a356:	d007      	beq.n	800a368 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	681a      	ldr	r2, [r3, #0]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a366:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	68db      	ldr	r3, [r3, #12]
 800a36c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a370:	d178      	bne.n	800a464 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d002      	beq.n	800a380 <HAL_SPI_TransmitReceive+0x10a>
 800a37a:	8b7b      	ldrh	r3, [r7, #26]
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	d166      	bne.n	800a44e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a384:	881a      	ldrh	r2, [r3, #0]
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a390:	1c9a      	adds	r2, r3, #2
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	3b01      	subs	r3, #1
 800a39e:	b29a      	uxth	r2, r3
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a3a4:	e053      	b.n	800a44e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	f003 0302 	and.w	r3, r3, #2
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	d11b      	bne.n	800a3ec <HAL_SPI_TransmitReceive+0x176>
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d016      	beq.n	800a3ec <HAL_SPI_TransmitReceive+0x176>
 800a3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	d113      	bne.n	800a3ec <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3c8:	881a      	ldrh	r2, [r3, #0]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3d4:	1c9a      	adds	r2, r3, #2
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	3b01      	subs	r3, #1
 800a3e2:	b29a      	uxth	r2, r3
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	689b      	ldr	r3, [r3, #8]
 800a3f2:	f003 0301 	and.w	r3, r3, #1
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d119      	bne.n	800a42e <HAL_SPI_TransmitReceive+0x1b8>
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3fe:	b29b      	uxth	r3, r3
 800a400:	2b00      	cmp	r3, #0
 800a402:	d014      	beq.n	800a42e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	68da      	ldr	r2, [r3, #12]
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a40e:	b292      	uxth	r2, r2
 800a410:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a416:	1c9a      	adds	r2, r3, #2
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a420:	b29b      	uxth	r3, r3
 800a422:	3b01      	subs	r3, #1
 800a424:	b29a      	uxth	r2, r3
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a42a:	2301      	movs	r3, #1
 800a42c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a42e:	f7fc f9fd 	bl	800682c <HAL_GetTick>
 800a432:	4602      	mov	r2, r0
 800a434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a436:	1ad3      	subs	r3, r2, r3
 800a438:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d807      	bhi.n	800a44e <HAL_SPI_TransmitReceive+0x1d8>
 800a43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a440:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a444:	d003      	beq.n	800a44e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a446:	2303      	movs	r3, #3
 800a448:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a44c:	e0a7      	b.n	800a59e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a452:	b29b      	uxth	r3, r3
 800a454:	2b00      	cmp	r3, #0
 800a456:	d1a6      	bne.n	800a3a6 <HAL_SPI_TransmitReceive+0x130>
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a45c:	b29b      	uxth	r3, r3
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d1a1      	bne.n	800a3a6 <HAL_SPI_TransmitReceive+0x130>
 800a462:	e07c      	b.n	800a55e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d002      	beq.n	800a472 <HAL_SPI_TransmitReceive+0x1fc>
 800a46c:	8b7b      	ldrh	r3, [r7, #26]
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d16b      	bne.n	800a54a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	330c      	adds	r3, #12
 800a47c:	7812      	ldrb	r2, [r2, #0]
 800a47e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a484:	1c5a      	adds	r2, r3, #1
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a48e:	b29b      	uxth	r3, r3
 800a490:	3b01      	subs	r3, #1
 800a492:	b29a      	uxth	r2, r3
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a498:	e057      	b.n	800a54a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	689b      	ldr	r3, [r3, #8]
 800a4a0:	f003 0302 	and.w	r3, r3, #2
 800a4a4:	2b02      	cmp	r3, #2
 800a4a6:	d11c      	bne.n	800a4e2 <HAL_SPI_TransmitReceive+0x26c>
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d017      	beq.n	800a4e2 <HAL_SPI_TransmitReceive+0x26c>
 800a4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d114      	bne.n	800a4e2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	330c      	adds	r3, #12
 800a4c2:	7812      	ldrb	r2, [r2, #0]
 800a4c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ca:	1c5a      	adds	r2, r3, #1
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	3b01      	subs	r3, #1
 800a4d8:	b29a      	uxth	r2, r3
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	689b      	ldr	r3, [r3, #8]
 800a4e8:	f003 0301 	and.w	r3, r3, #1
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d119      	bne.n	800a524 <HAL_SPI_TransmitReceive+0x2ae>
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d014      	beq.n	800a524 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	68da      	ldr	r2, [r3, #12]
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a504:	b2d2      	uxtb	r2, r2
 800a506:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a50c:	1c5a      	adds	r2, r3, #1
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a516:	b29b      	uxth	r3, r3
 800a518:	3b01      	subs	r3, #1
 800a51a:	b29a      	uxth	r2, r3
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a520:	2301      	movs	r3, #1
 800a522:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a524:	f7fc f982 	bl	800682c <HAL_GetTick>
 800a528:	4602      	mov	r2, r0
 800a52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52c:	1ad3      	subs	r3, r2, r3
 800a52e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a530:	429a      	cmp	r2, r3
 800a532:	d803      	bhi.n	800a53c <HAL_SPI_TransmitReceive+0x2c6>
 800a534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a53a:	d102      	bne.n	800a542 <HAL_SPI_TransmitReceive+0x2cc>
 800a53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d103      	bne.n	800a54a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a542:	2303      	movs	r3, #3
 800a544:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a548:	e029      	b.n	800a59e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a54e:	b29b      	uxth	r3, r3
 800a550:	2b00      	cmp	r3, #0
 800a552:	d1a2      	bne.n	800a49a <HAL_SPI_TransmitReceive+0x224>
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a558:	b29b      	uxth	r3, r3
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d19d      	bne.n	800a49a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a55e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a560:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a562:	68f8      	ldr	r0, [r7, #12]
 800a564:	f000 fc28 	bl	800adb8 <SPI_EndRxTxTransaction>
 800a568:	4603      	mov	r3, r0
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d006      	beq.n	800a57c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
 800a570:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2220      	movs	r2, #32
 800a578:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a57a:	e010      	b.n	800a59e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	689b      	ldr	r3, [r3, #8]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d10b      	bne.n	800a59c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a584:	2300      	movs	r3, #0
 800a586:	617b      	str	r3, [r7, #20]
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	68db      	ldr	r3, [r3, #12]
 800a58e:	617b      	str	r3, [r7, #20]
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	689b      	ldr	r3, [r3, #8]
 800a596:	617b      	str	r3, [r7, #20]
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	e000      	b.n	800a59e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a59c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a5ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3730      	adds	r7, #48	; 0x30
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
	...

0800a5bc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b086      	sub	sp, #24
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	60b9      	str	r1, [r7, #8]
 800a5c6:	4613      	mov	r3, r2
 800a5c8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d101      	bne.n	800a5dc <HAL_SPI_Transmit_DMA+0x20>
 800a5d8:	2302      	movs	r3, #2
 800a5da:	e09b      	b.n	800a714 <HAL_SPI_Transmit_DMA+0x158>
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d002      	beq.n	800a5f6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800a5f0:	2302      	movs	r3, #2
 800a5f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a5f4:	e089      	b.n	800a70a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d002      	beq.n	800a602 <HAL_SPI_Transmit_DMA+0x46>
 800a5fc:	88fb      	ldrh	r3, [r7, #6]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d102      	bne.n	800a608 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800a602:	2301      	movs	r3, #1
 800a604:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a606:	e080      	b.n	800a70a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2203      	movs	r2, #3
 800a60c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2200      	movs	r2, #0
 800a614:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	68ba      	ldr	r2, [r7, #8]
 800a61a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	88fa      	ldrh	r2, [r7, #6]
 800a620:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	88fa      	ldrh	r2, [r7, #6]
 800a626:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2200      	movs	r2, #0
 800a62c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2200      	movs	r2, #0
 800a632:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2200      	movs	r2, #0
 800a638:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2200      	movs	r2, #0
 800a63e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2200      	movs	r2, #0
 800a644:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	689b      	ldr	r3, [r3, #8]
 800a64a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a64e:	d10f      	bne.n	800a670 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a65e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a66e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a674:	4a29      	ldr	r2, [pc, #164]	; (800a71c <HAL_SPI_Transmit_DMA+0x160>)
 800a676:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a67c:	4a28      	ldr	r2, [pc, #160]	; (800a720 <HAL_SPI_Transmit_DMA+0x164>)
 800a67e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a684:	4a27      	ldr	r2, [pc, #156]	; (800a724 <HAL_SPI_Transmit_DMA+0x168>)
 800a686:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a68c:	2200      	movs	r2, #0
 800a68e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a698:	4619      	mov	r1, r3
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	330c      	adds	r3, #12
 800a6a0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a6a6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a6a8:	f7fd fb20 	bl	8007cec <HAL_DMA_Start_IT>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d00c      	beq.n	800a6cc <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6b6:	f043 0210 	orr.w	r2, r3, #16
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800a6ca:	e01e      	b.n	800a70a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6d6:	2b40      	cmp	r3, #64	; 0x40
 800a6d8:	d007      	beq.n	800a6ea <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	681a      	ldr	r2, [r3, #0]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6e8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	685a      	ldr	r2, [r3, #4]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f042 0220 	orr.w	r2, r2, #32
 800a6f8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	685a      	ldr	r2, [r3, #4]
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f042 0202 	orr.w	r2, r2, #2
 800a708:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2200      	movs	r2, #0
 800a70e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a712:	7dfb      	ldrb	r3, [r7, #23]
}
 800a714:	4618      	mov	r0, r3
 800a716:	3718      	adds	r7, #24
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}
 800a71c:	0800ab49 	.word	0x0800ab49
 800a720:	0800a969 	.word	0x0800a969
 800a724:	0800ab9d 	.word	0x0800ab9d

0800a728 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b086      	sub	sp, #24
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	60f8      	str	r0, [r7, #12]
 800a730:	60b9      	str	r1, [r7, #8]
 800a732:	607a      	str	r2, [r7, #4]
 800a734:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a736:	2300      	movs	r3, #0
 800a738:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a740:	2b01      	cmp	r3, #1
 800a742:	d101      	bne.n	800a748 <HAL_SPI_TransmitReceive_DMA+0x20>
 800a744:	2302      	movs	r3, #2
 800a746:	e0e3      	b.n	800a910 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2201      	movs	r2, #1
 800a74c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a756:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800a75e:	7dbb      	ldrb	r3, [r7, #22]
 800a760:	2b01      	cmp	r3, #1
 800a762:	d00d      	beq.n	800a780 <HAL_SPI_TransmitReceive_DMA+0x58>
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a76a:	d106      	bne.n	800a77a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	689b      	ldr	r3, [r3, #8]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d102      	bne.n	800a77a <HAL_SPI_TransmitReceive_DMA+0x52>
 800a774:	7dbb      	ldrb	r3, [r7, #22]
 800a776:	2b04      	cmp	r3, #4
 800a778:	d002      	beq.n	800a780 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800a77a:	2302      	movs	r3, #2
 800a77c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a77e:	e0c2      	b.n	800a906 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d005      	beq.n	800a792 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d002      	beq.n	800a792 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800a78c:	887b      	ldrh	r3, [r7, #2]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d102      	bne.n	800a798 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800a792:	2301      	movs	r3, #1
 800a794:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a796:	e0b6      	b.n	800a906 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	2b04      	cmp	r3, #4
 800a7a2:	d003      	beq.n	800a7ac <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2205      	movs	r2, #5
 800a7a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	68ba      	ldr	r2, [r7, #8]
 800a7b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	887a      	ldrh	r2, [r7, #2]
 800a7bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	887a      	ldrh	r2, [r7, #2]
 800a7c2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	887a      	ldrh	r2, [r7, #2]
 800a7ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	887a      	ldrh	r2, [r7, #2]
 800a7d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	2b04      	cmp	r3, #4
 800a7ec:	d108      	bne.n	800a800 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7f2:	4a49      	ldr	r2, [pc, #292]	; (800a918 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800a7f4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7fa:	4a48      	ldr	r2, [pc, #288]	; (800a91c <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800a7fc:	63da      	str	r2, [r3, #60]	; 0x3c
 800a7fe:	e007      	b.n	800a810 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a804:	4a46      	ldr	r2, [pc, #280]	; (800a920 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800a806:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a80c:	4a45      	ldr	r2, [pc, #276]	; (800a924 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800a80e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a814:	4a44      	ldr	r2, [pc, #272]	; (800a928 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800a816:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a81c:	2200      	movs	r2, #0
 800a81e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	330c      	adds	r3, #12
 800a82a:	4619      	mov	r1, r3
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a830:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a836:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a838:	f7fd fa58 	bl	8007cec <HAL_DMA_Start_IT>
 800a83c:	4603      	mov	r3, r0
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d00c      	beq.n	800a85c <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a846:	f043 0210 	orr.w	r2, r3, #16
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800a84e:	2301      	movs	r3, #1
 800a850:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2201      	movs	r2, #1
 800a856:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800a85a:	e054      	b.n	800a906 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	685a      	ldr	r2, [r3, #4]
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f042 0201 	orr.w	r2, r2, #1
 800a86a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a870:	2200      	movs	r2, #0
 800a872:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a878:	2200      	movs	r2, #0
 800a87a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a880:	2200      	movs	r2, #0
 800a882:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a888:	2200      	movs	r2, #0
 800a88a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a894:	4619      	mov	r1, r3
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	330c      	adds	r3, #12
 800a89c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8a2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a8a4:	f7fd fa22 	bl	8007cec <HAL_DMA_Start_IT>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d00c      	beq.n	800a8c8 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8b2:	f043 0210 	orr.w	r2, r3, #16
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800a8c6:	e01e      	b.n	800a906 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8d2:	2b40      	cmp	r3, #64	; 0x40
 800a8d4:	d007      	beq.n	800a8e6 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a8e4:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	685a      	ldr	r2, [r3, #4]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f042 0220 	orr.w	r2, r2, #32
 800a8f4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	685a      	ldr	r2, [r3, #4]
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f042 0202 	orr.w	r2, r2, #2
 800a904:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2200      	movs	r2, #0
 800a90a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a90e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a910:	4618      	mov	r0, r3
 800a912:	3718      	adds	r7, #24
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}
 800a918:	0800ab65 	.word	0x0800ab65
 800a91c:	0800aa11 	.word	0x0800aa11
 800a920:	0800ab81 	.word	0x0800ab81
 800a924:	0800aab9 	.word	0x0800aab9
 800a928:	0800ab9d 	.word	0x0800ab9d

0800a92c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b083      	sub	sp, #12
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a934:	bf00      	nop
 800a936:	370c      	adds	r7, #12
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr

0800a940 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a940:	b480      	push	{r7}
 800a942:	b083      	sub	sp, #12
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a948:	bf00      	nop
 800a94a:	370c      	adds	r7, #12
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr

0800a954 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800a95c:	bf00      	nop
 800a95e:	370c      	adds	r7, #12
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b086      	sub	sp, #24
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a974:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a976:	f7fb ff59 	bl	800682c <HAL_GetTick>
 800a97a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a98a:	d03b      	beq.n	800aa04 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	685a      	ldr	r2, [r3, #4]
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f022 0220 	bic.w	r2, r2, #32
 800a99a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	685a      	ldr	r2, [r3, #4]
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f022 0202 	bic.w	r2, r2, #2
 800a9aa:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a9ac:	693a      	ldr	r2, [r7, #16]
 800a9ae:	2164      	movs	r1, #100	; 0x64
 800a9b0:	6978      	ldr	r0, [r7, #20]
 800a9b2:	f000 fa01 	bl	800adb8 <SPI_EndRxTxTransaction>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d005      	beq.n	800a9c8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9c0:	f043 0220 	orr.w	r2, r3, #32
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d10a      	bne.n	800a9e6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	60fb      	str	r3, [r7, #12]
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	68db      	ldr	r3, [r3, #12]
 800a9da:	60fb      	str	r3, [r7, #12]
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	689b      	ldr	r3, [r3, #8]
 800a9e2:	60fb      	str	r3, [r7, #12]
 800a9e4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d003      	beq.n	800aa04 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a9fc:	6978      	ldr	r0, [r7, #20]
 800a9fe:	f7fb fa05 	bl	8005e0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800aa02:	e002      	b.n	800aa0a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800aa04:	6978      	ldr	r0, [r7, #20]
 800aa06:	f7fb fa1b 	bl	8005e40 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aa0a:	3718      	adds	r7, #24
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa1c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aa1e:	f7fb ff05 	bl	800682c <HAL_GetTick>
 800aa22:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa32:	d03b      	beq.n	800aaac <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	685a      	ldr	r2, [r3, #4]
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f022 0220 	bic.w	r2, r2, #32
 800aa42:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	689b      	ldr	r3, [r3, #8]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d10d      	bne.n	800aa68 <SPI_DMAReceiveCplt+0x58>
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aa54:	d108      	bne.n	800aa68 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	685a      	ldr	r2, [r3, #4]
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f022 0203 	bic.w	r2, r2, #3
 800aa64:	605a      	str	r2, [r3, #4]
 800aa66:	e007      	b.n	800aa78 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	685a      	ldr	r2, [r3, #4]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f022 0201 	bic.w	r2, r2, #1
 800aa76:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800aa78:	68ba      	ldr	r2, [r7, #8]
 800aa7a:	2164      	movs	r1, #100	; 0x64
 800aa7c:	68f8      	ldr	r0, [r7, #12]
 800aa7e:	f000 f935 	bl	800acec <SPI_EndRxTransaction>
 800aa82:	4603      	mov	r3, r0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d002      	beq.n	800aa8e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2220      	movs	r2, #32
 800aa8c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	2200      	movs	r2, #0
 800aa92:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2201      	movs	r2, #1
 800aa98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d003      	beq.n	800aaac <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800aaa4:	68f8      	ldr	r0, [r7, #12]
 800aaa6:	f7fb f9b1 	bl	8005e0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800aaaa:	e002      	b.n	800aab2 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	f7ff ff3d 	bl	800a92c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aab2:	3710      	adds	r7, #16
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aac6:	f7fb feb1 	bl	800682c <HAL_GetTick>
 800aaca:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aada:	d02f      	beq.n	800ab3c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	685a      	ldr	r2, [r3, #4]
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f022 0220 	bic.w	r2, r2, #32
 800aaea:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800aaec:	68ba      	ldr	r2, [r7, #8]
 800aaee:	2164      	movs	r1, #100	; 0x64
 800aaf0:	68f8      	ldr	r0, [r7, #12]
 800aaf2:	f000 f961 	bl	800adb8 <SPI_EndRxTxTransaction>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d005      	beq.n	800ab08 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab00:	f043 0220 	orr.w	r2, r3, #32
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	685a      	ldr	r2, [r3, #4]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f022 0203 	bic.w	r2, r2, #3
 800ab16:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2200      	movs	r2, #0
 800ab22:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2201      	movs	r2, #1
 800ab28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d003      	beq.n	800ab3c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ab34:	68f8      	ldr	r0, [r7, #12]
 800ab36:	f7fb f969 	bl	8005e0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ab3a:	e002      	b.n	800ab42 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800ab3c:	68f8      	ldr	r0, [r7, #12]
 800ab3e:	f7fb f949 	bl	8005dd4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ab42:	3710      	adds	r7, #16
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab54:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800ab56:	68f8      	ldr	r0, [r7, #12]
 800ab58:	f7ff fef2 	bl	800a940 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ab5c:	bf00      	nop
 800ab5e:	3710      	adds	r7, #16
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b084      	sub	sp, #16
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab70:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800ab72:	68f8      	ldr	r0, [r7, #12]
 800ab74:	f7ff feee 	bl	800a954 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ab78:	bf00      	nop
 800ab7a:	3710      	adds	r7, #16
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab8c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800ab8e:	68f8      	ldr	r0, [r7, #12]
 800ab90:	f7fb f8f0 	bl	8005d74 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ab94:	bf00      	nop
 800ab96:	3710      	adds	r7, #16
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b084      	sub	sp, #16
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aba8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	685a      	ldr	r2, [r3, #4]
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f022 0203 	bic.w	r2, r2, #3
 800abb8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abbe:	f043 0210 	orr.w	r2, r3, #16
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2201      	movs	r2, #1
 800abca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800abce:	68f8      	ldr	r0, [r7, #12]
 800abd0:	f7fb f91c 	bl	8005e0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800abd4:	bf00      	nop
 800abd6:	3710      	adds	r7, #16
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b088      	sub	sp, #32
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	60f8      	str	r0, [r7, #12]
 800abe4:	60b9      	str	r1, [r7, #8]
 800abe6:	603b      	str	r3, [r7, #0]
 800abe8:	4613      	mov	r3, r2
 800abea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800abec:	f7fb fe1e 	bl	800682c <HAL_GetTick>
 800abf0:	4602      	mov	r2, r0
 800abf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf4:	1a9b      	subs	r3, r3, r2
 800abf6:	683a      	ldr	r2, [r7, #0]
 800abf8:	4413      	add	r3, r2
 800abfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800abfc:	f7fb fe16 	bl	800682c <HAL_GetTick>
 800ac00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ac02:	4b39      	ldr	r3, [pc, #228]	; (800ace8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	015b      	lsls	r3, r3, #5
 800ac08:	0d1b      	lsrs	r3, r3, #20
 800ac0a:	69fa      	ldr	r2, [r7, #28]
 800ac0c:	fb02 f303 	mul.w	r3, r2, r3
 800ac10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ac12:	e054      	b.n	800acbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac1a:	d050      	beq.n	800acbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ac1c:	f7fb fe06 	bl	800682c <HAL_GetTick>
 800ac20:	4602      	mov	r2, r0
 800ac22:	69bb      	ldr	r3, [r7, #24]
 800ac24:	1ad3      	subs	r3, r2, r3
 800ac26:	69fa      	ldr	r2, [r7, #28]
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d902      	bls.n	800ac32 <SPI_WaitFlagStateUntilTimeout+0x56>
 800ac2c:	69fb      	ldr	r3, [r7, #28]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d13d      	bne.n	800acae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	685a      	ldr	r2, [r3, #4]
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ac40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac4a:	d111      	bne.n	800ac70 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	689b      	ldr	r3, [r3, #8]
 800ac50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac54:	d004      	beq.n	800ac60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	689b      	ldr	r3, [r3, #8]
 800ac5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac5e:	d107      	bne.n	800ac70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	681a      	ldr	r2, [r3, #0]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac78:	d10f      	bne.n	800ac9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ac88:	601a      	str	r2, [r3, #0]
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	681a      	ldr	r2, [r3, #0]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ac98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2200      	movs	r2, #0
 800aca6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800acaa:	2303      	movs	r3, #3
 800acac:	e017      	b.n	800acde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d101      	bne.n	800acb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800acb4:	2300      	movs	r3, #0
 800acb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	3b01      	subs	r3, #1
 800acbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	689a      	ldr	r2, [r3, #8]
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	4013      	ands	r3, r2
 800acc8:	68ba      	ldr	r2, [r7, #8]
 800acca:	429a      	cmp	r2, r3
 800accc:	bf0c      	ite	eq
 800acce:	2301      	moveq	r3, #1
 800acd0:	2300      	movne	r3, #0
 800acd2:	b2db      	uxtb	r3, r3
 800acd4:	461a      	mov	r2, r3
 800acd6:	79fb      	ldrb	r3, [r7, #7]
 800acd8:	429a      	cmp	r2, r3
 800acda:	d19b      	bne.n	800ac14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800acdc:	2300      	movs	r3, #0
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3720      	adds	r7, #32
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	20008ee8 	.word	0x20008ee8

0800acec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b086      	sub	sp, #24
 800acf0:	af02      	add	r7, sp, #8
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ad00:	d111      	bne.n	800ad26 <SPI_EndRxTransaction+0x3a>
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad0a:	d004      	beq.n	800ad16 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	689b      	ldr	r3, [r3, #8]
 800ad10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad14:	d107      	bne.n	800ad26 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad24:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ad2e:	d12a      	bne.n	800ad86 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad38:	d012      	beq.n	800ad60 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	9300      	str	r3, [sp, #0]
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	2200      	movs	r2, #0
 800ad42:	2180      	movs	r1, #128	; 0x80
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	f7ff ff49 	bl	800abdc <SPI_WaitFlagStateUntilTimeout>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d02d      	beq.n	800adac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad54:	f043 0220 	orr.w	r2, r3, #32
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ad5c:	2303      	movs	r3, #3
 800ad5e:	e026      	b.n	800adae <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	9300      	str	r3, [sp, #0]
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	2200      	movs	r2, #0
 800ad68:	2101      	movs	r1, #1
 800ad6a:	68f8      	ldr	r0, [r7, #12]
 800ad6c:	f7ff ff36 	bl	800abdc <SPI_WaitFlagStateUntilTimeout>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d01a      	beq.n	800adac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad7a:	f043 0220 	orr.w	r2, r3, #32
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ad82:	2303      	movs	r3, #3
 800ad84:	e013      	b.n	800adae <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	9300      	str	r3, [sp, #0]
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	2101      	movs	r1, #1
 800ad90:	68f8      	ldr	r0, [r7, #12]
 800ad92:	f7ff ff23 	bl	800abdc <SPI_WaitFlagStateUntilTimeout>
 800ad96:	4603      	mov	r3, r0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d007      	beq.n	800adac <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ada0:	f043 0220 	orr.w	r2, r3, #32
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ada8:	2303      	movs	r3, #3
 800adaa:	e000      	b.n	800adae <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800adac:	2300      	movs	r3, #0
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3710      	adds	r7, #16
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
	...

0800adb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b088      	sub	sp, #32
 800adbc:	af02      	add	r7, sp, #8
 800adbe:	60f8      	str	r0, [r7, #12]
 800adc0:	60b9      	str	r1, [r7, #8]
 800adc2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800adc4:	4b1b      	ldr	r3, [pc, #108]	; (800ae34 <SPI_EndRxTxTransaction+0x7c>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4a1b      	ldr	r2, [pc, #108]	; (800ae38 <SPI_EndRxTxTransaction+0x80>)
 800adca:	fba2 2303 	umull	r2, r3, r2, r3
 800adce:	0d5b      	lsrs	r3, r3, #21
 800add0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800add4:	fb02 f303 	mul.w	r3, r2, r3
 800add8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ade2:	d112      	bne.n	800ae0a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	9300      	str	r3, [sp, #0]
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	2200      	movs	r2, #0
 800adec:	2180      	movs	r1, #128	; 0x80
 800adee:	68f8      	ldr	r0, [r7, #12]
 800adf0:	f7ff fef4 	bl	800abdc <SPI_WaitFlagStateUntilTimeout>
 800adf4:	4603      	mov	r3, r0
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d016      	beq.n	800ae28 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adfe:	f043 0220 	orr.w	r2, r3, #32
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ae06:	2303      	movs	r3, #3
 800ae08:	e00f      	b.n	800ae2a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d00a      	beq.n	800ae26 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	3b01      	subs	r3, #1
 800ae14:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	689b      	ldr	r3, [r3, #8]
 800ae1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae20:	2b80      	cmp	r3, #128	; 0x80
 800ae22:	d0f2      	beq.n	800ae0a <SPI_EndRxTxTransaction+0x52>
 800ae24:	e000      	b.n	800ae28 <SPI_EndRxTxTransaction+0x70>
        break;
 800ae26:	bf00      	nop
  }

  return HAL_OK;
 800ae28:	2300      	movs	r3, #0
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3718      	adds	r7, #24
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	bf00      	nop
 800ae34:	20008ee8 	.word	0x20008ee8
 800ae38:	165e9f81 	.word	0x165e9f81

0800ae3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d101      	bne.n	800ae4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	e041      	b.n	800aed2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d106      	bne.n	800ae68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f7fb fad0 	bl	8006408 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2202      	movs	r2, #2
 800ae6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681a      	ldr	r2, [r3, #0]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	3304      	adds	r3, #4
 800ae78:	4619      	mov	r1, r3
 800ae7a:	4610      	mov	r0, r2
 800ae7c:	f000 fe38 	bl	800baf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2201      	movs	r2, #1
 800ae84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2201      	movs	r2, #1
 800ae94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2201      	movs	r2, #1
 800aea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2201      	movs	r2, #1
 800aeac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2201      	movs	r2, #1
 800aebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2201      	movs	r2, #1
 800aec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2201      	movs	r2, #1
 800aecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aed0:	2300      	movs	r3, #0
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3708      	adds	r7, #8
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
	...

0800aedc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800aedc:	b480      	push	{r7}
 800aede:	b085      	sub	sp, #20
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aeea:	b2db      	uxtb	r3, r3
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d001      	beq.n	800aef4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800aef0:	2301      	movs	r3, #1
 800aef2:	e03c      	b.n	800af6e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2202      	movs	r2, #2
 800aef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4a1e      	ldr	r2, [pc, #120]	; (800af7c <HAL_TIM_Base_Start+0xa0>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d018      	beq.n	800af38 <HAL_TIM_Base_Start+0x5c>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af0e:	d013      	beq.n	800af38 <HAL_TIM_Base_Start+0x5c>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4a1a      	ldr	r2, [pc, #104]	; (800af80 <HAL_TIM_Base_Start+0xa4>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d00e      	beq.n	800af38 <HAL_TIM_Base_Start+0x5c>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4a19      	ldr	r2, [pc, #100]	; (800af84 <HAL_TIM_Base_Start+0xa8>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d009      	beq.n	800af38 <HAL_TIM_Base_Start+0x5c>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a17      	ldr	r2, [pc, #92]	; (800af88 <HAL_TIM_Base_Start+0xac>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d004      	beq.n	800af38 <HAL_TIM_Base_Start+0x5c>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4a16      	ldr	r2, [pc, #88]	; (800af8c <HAL_TIM_Base_Start+0xb0>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d111      	bne.n	800af5c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	689b      	ldr	r3, [r3, #8]
 800af3e:	f003 0307 	and.w	r3, r3, #7
 800af42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2b06      	cmp	r3, #6
 800af48:	d010      	beq.n	800af6c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	681a      	ldr	r2, [r3, #0]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f042 0201 	orr.w	r2, r2, #1
 800af58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af5a:	e007      	b.n	800af6c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	681a      	ldr	r2, [r3, #0]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f042 0201 	orr.w	r2, r2, #1
 800af6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800af6c:	2300      	movs	r3, #0
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3714      	adds	r7, #20
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr
 800af7a:	bf00      	nop
 800af7c:	40010000 	.word	0x40010000
 800af80:	40000400 	.word	0x40000400
 800af84:	40000800 	.word	0x40000800
 800af88:	40000c00 	.word	0x40000c00
 800af8c:	40014000 	.word	0x40014000

0800af90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800af90:	b480      	push	{r7}
 800af92:	b085      	sub	sp, #20
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af9e:	b2db      	uxtb	r3, r3
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d001      	beq.n	800afa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800afa4:	2301      	movs	r3, #1
 800afa6:	e044      	b.n	800b032 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2202      	movs	r2, #2
 800afac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	68da      	ldr	r2, [r3, #12]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f042 0201 	orr.w	r2, r2, #1
 800afbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4a1e      	ldr	r2, [pc, #120]	; (800b040 <HAL_TIM_Base_Start_IT+0xb0>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d018      	beq.n	800affc <HAL_TIM_Base_Start_IT+0x6c>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afd2:	d013      	beq.n	800affc <HAL_TIM_Base_Start_IT+0x6c>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4a1a      	ldr	r2, [pc, #104]	; (800b044 <HAL_TIM_Base_Start_IT+0xb4>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d00e      	beq.n	800affc <HAL_TIM_Base_Start_IT+0x6c>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	4a19      	ldr	r2, [pc, #100]	; (800b048 <HAL_TIM_Base_Start_IT+0xb8>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d009      	beq.n	800affc <HAL_TIM_Base_Start_IT+0x6c>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a17      	ldr	r2, [pc, #92]	; (800b04c <HAL_TIM_Base_Start_IT+0xbc>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d004      	beq.n	800affc <HAL_TIM_Base_Start_IT+0x6c>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	4a16      	ldr	r2, [pc, #88]	; (800b050 <HAL_TIM_Base_Start_IT+0xc0>)
 800aff8:	4293      	cmp	r3, r2
 800affa:	d111      	bne.n	800b020 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	689b      	ldr	r3, [r3, #8]
 800b002:	f003 0307 	and.w	r3, r3, #7
 800b006:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2b06      	cmp	r3, #6
 800b00c:	d010      	beq.n	800b030 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	681a      	ldr	r2, [r3, #0]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f042 0201 	orr.w	r2, r2, #1
 800b01c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b01e:	e007      	b.n	800b030 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f042 0201 	orr.w	r2, r2, #1
 800b02e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b030:	2300      	movs	r3, #0
}
 800b032:	4618      	mov	r0, r3
 800b034:	3714      	adds	r7, #20
 800b036:	46bd      	mov	sp, r7
 800b038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03c:	4770      	bx	lr
 800b03e:	bf00      	nop
 800b040:	40010000 	.word	0x40010000
 800b044:	40000400 	.word	0x40000400
 800b048:	40000800 	.word	0x40000800
 800b04c:	40000c00 	.word	0x40000c00
 800b050:	40014000 	.word	0x40014000

0800b054 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b054:	b480      	push	{r7}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	68da      	ldr	r2, [r3, #12]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f022 0201 	bic.w	r2, r2, #1
 800b06a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	6a1a      	ldr	r2, [r3, #32]
 800b072:	f241 1311 	movw	r3, #4369	; 0x1111
 800b076:	4013      	ands	r3, r2
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d10f      	bne.n	800b09c <HAL_TIM_Base_Stop_IT+0x48>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	6a1a      	ldr	r2, [r3, #32]
 800b082:	f240 4344 	movw	r3, #1092	; 0x444
 800b086:	4013      	ands	r3, r2
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d107      	bne.n	800b09c <HAL_TIM_Base_Stop_IT+0x48>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	681a      	ldr	r2, [r3, #0]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f022 0201 	bic.w	r2, r2, #1
 800b09a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2201      	movs	r2, #1
 800b0a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b0a4:	2300      	movs	r3, #0
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	370c      	adds	r7, #12
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr

0800b0b2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800b0b2:	b580      	push	{r7, lr}
 800b0b4:	b082      	sub	sp, #8
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d101      	bne.n	800b0c4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	e041      	b.n	800b148 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d106      	bne.n	800b0de <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 f839 	bl	800b150 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2202      	movs	r2, #2
 800b0e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	3304      	adds	r3, #4
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	4610      	mov	r0, r2
 800b0f2:	f000 fcfd 	bl	800baf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2201      	movs	r2, #1
 800b0fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2201      	movs	r2, #1
 800b102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2201      	movs	r2, #1
 800b10a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2201      	movs	r2, #1
 800b112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2201      	movs	r2, #1
 800b11a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2201      	movs	r2, #1
 800b122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2201      	movs	r2, #1
 800b12a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2201      	movs	r2, #1
 800b132:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2201      	movs	r2, #1
 800b13a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2201      	movs	r2, #1
 800b142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b146:	2300      	movs	r3, #0
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3708      	adds	r7, #8
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800b150:	b480      	push	{r7}
 800b152:	b083      	sub	sp, #12
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800b158:	bf00      	nop
 800b15a:	370c      	adds	r7, #12
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr

0800b164 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b082      	sub	sp, #8
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d101      	bne.n	800b176 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b172:	2301      	movs	r3, #1
 800b174:	e041      	b.n	800b1fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b17c:	b2db      	uxtb	r3, r3
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d106      	bne.n	800b190 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2200      	movs	r2, #0
 800b186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 f839 	bl	800b202 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2202      	movs	r2, #2
 800b194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681a      	ldr	r2, [r3, #0]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	3304      	adds	r3, #4
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	4610      	mov	r0, r2
 800b1a4:	f000 fca4 	bl	800baf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2201      	movs	r2, #1
 800b1dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b1f8:	2300      	movs	r3, #0
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3708      	adds	r7, #8
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}

0800b202 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b202:	b480      	push	{r7}
 800b204:	b083      	sub	sp, #12
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b20a:	bf00      	nop
 800b20c:	370c      	adds	r7, #12
 800b20e:	46bd      	mov	sp, r7
 800b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b214:	4770      	bx	lr
	...

0800b218 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b084      	sub	sp, #16
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d109      	bne.n	800b23c <HAL_TIM_PWM_Start+0x24>
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b22e:	b2db      	uxtb	r3, r3
 800b230:	2b01      	cmp	r3, #1
 800b232:	bf14      	ite	ne
 800b234:	2301      	movne	r3, #1
 800b236:	2300      	moveq	r3, #0
 800b238:	b2db      	uxtb	r3, r3
 800b23a:	e022      	b.n	800b282 <HAL_TIM_PWM_Start+0x6a>
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	2b04      	cmp	r3, #4
 800b240:	d109      	bne.n	800b256 <HAL_TIM_PWM_Start+0x3e>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b248:	b2db      	uxtb	r3, r3
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	bf14      	ite	ne
 800b24e:	2301      	movne	r3, #1
 800b250:	2300      	moveq	r3, #0
 800b252:	b2db      	uxtb	r3, r3
 800b254:	e015      	b.n	800b282 <HAL_TIM_PWM_Start+0x6a>
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	2b08      	cmp	r3, #8
 800b25a:	d109      	bne.n	800b270 <HAL_TIM_PWM_Start+0x58>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b262:	b2db      	uxtb	r3, r3
 800b264:	2b01      	cmp	r3, #1
 800b266:	bf14      	ite	ne
 800b268:	2301      	movne	r3, #1
 800b26a:	2300      	moveq	r3, #0
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	e008      	b.n	800b282 <HAL_TIM_PWM_Start+0x6a>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b276:	b2db      	uxtb	r3, r3
 800b278:	2b01      	cmp	r3, #1
 800b27a:	bf14      	ite	ne
 800b27c:	2301      	movne	r3, #1
 800b27e:	2300      	moveq	r3, #0
 800b280:	b2db      	uxtb	r3, r3
 800b282:	2b00      	cmp	r3, #0
 800b284:	d001      	beq.n	800b28a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b286:	2301      	movs	r3, #1
 800b288:	e068      	b.n	800b35c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d104      	bne.n	800b29a <HAL_TIM_PWM_Start+0x82>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2202      	movs	r2, #2
 800b294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b298:	e013      	b.n	800b2c2 <HAL_TIM_PWM_Start+0xaa>
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	2b04      	cmp	r3, #4
 800b29e:	d104      	bne.n	800b2aa <HAL_TIM_PWM_Start+0x92>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2202      	movs	r2, #2
 800b2a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b2a8:	e00b      	b.n	800b2c2 <HAL_TIM_PWM_Start+0xaa>
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	2b08      	cmp	r3, #8
 800b2ae:	d104      	bne.n	800b2ba <HAL_TIM_PWM_Start+0xa2>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2202      	movs	r2, #2
 800b2b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b2b8:	e003      	b.n	800b2c2 <HAL_TIM_PWM_Start+0xaa>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2202      	movs	r2, #2
 800b2be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	6839      	ldr	r1, [r7, #0]
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f000 feb6 	bl	800c03c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	4a23      	ldr	r2, [pc, #140]	; (800b364 <HAL_TIM_PWM_Start+0x14c>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d107      	bne.n	800b2ea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b2e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	4a1d      	ldr	r2, [pc, #116]	; (800b364 <HAL_TIM_PWM_Start+0x14c>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d018      	beq.n	800b326 <HAL_TIM_PWM_Start+0x10e>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2fc:	d013      	beq.n	800b326 <HAL_TIM_PWM_Start+0x10e>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	4a19      	ldr	r2, [pc, #100]	; (800b368 <HAL_TIM_PWM_Start+0x150>)
 800b304:	4293      	cmp	r3, r2
 800b306:	d00e      	beq.n	800b326 <HAL_TIM_PWM_Start+0x10e>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4a17      	ldr	r2, [pc, #92]	; (800b36c <HAL_TIM_PWM_Start+0x154>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d009      	beq.n	800b326 <HAL_TIM_PWM_Start+0x10e>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	4a16      	ldr	r2, [pc, #88]	; (800b370 <HAL_TIM_PWM_Start+0x158>)
 800b318:	4293      	cmp	r3, r2
 800b31a:	d004      	beq.n	800b326 <HAL_TIM_PWM_Start+0x10e>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4a14      	ldr	r2, [pc, #80]	; (800b374 <HAL_TIM_PWM_Start+0x15c>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d111      	bne.n	800b34a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	689b      	ldr	r3, [r3, #8]
 800b32c:	f003 0307 	and.w	r3, r3, #7
 800b330:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2b06      	cmp	r3, #6
 800b336:	d010      	beq.n	800b35a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	681a      	ldr	r2, [r3, #0]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f042 0201 	orr.w	r2, r2, #1
 800b346:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b348:	e007      	b.n	800b35a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	681a      	ldr	r2, [r3, #0]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f042 0201 	orr.w	r2, r2, #1
 800b358:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b35a:	2300      	movs	r3, #0
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3710      	adds	r7, #16
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}
 800b364:	40010000 	.word	0x40010000
 800b368:	40000400 	.word	0x40000400
 800b36c:	40000800 	.word	0x40000800
 800b370:	40000c00 	.word	0x40000c00
 800b374:	40014000 	.word	0x40014000

0800b378 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b086      	sub	sp, #24
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d101      	bne.n	800b38c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b388:	2301      	movs	r3, #1
 800b38a:	e097      	b.n	800b4bc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b392:	b2db      	uxtb	r3, r3
 800b394:	2b00      	cmp	r3, #0
 800b396:	d106      	bne.n	800b3a6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2200      	movs	r2, #0
 800b39c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f7fa ffb5 	bl	8006310 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2202      	movs	r2, #2
 800b3aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	689b      	ldr	r3, [r3, #8]
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	6812      	ldr	r2, [r2, #0]
 800b3b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b3bc:	f023 0307 	bic.w	r3, r3, #7
 800b3c0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	3304      	adds	r3, #4
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	4610      	mov	r0, r2
 800b3ce:	f000 fb8f 	bl	800baf0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	699b      	ldr	r3, [r3, #24]
 800b3e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	6a1b      	ldr	r3, [r3, #32]
 800b3e8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	697a      	ldr	r2, [r7, #20]
 800b3f0:	4313      	orrs	r3, r2
 800b3f2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3fa:	f023 0303 	bic.w	r3, r3, #3
 800b3fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	689a      	ldr	r2, [r3, #8]
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	699b      	ldr	r3, [r3, #24]
 800b408:	021b      	lsls	r3, r3, #8
 800b40a:	4313      	orrs	r3, r2
 800b40c:	693a      	ldr	r2, [r7, #16]
 800b40e:	4313      	orrs	r3, r2
 800b410:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b418:	f023 030c 	bic.w	r3, r3, #12
 800b41c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b424:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b428:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	68da      	ldr	r2, [r3, #12]
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	69db      	ldr	r3, [r3, #28]
 800b432:	021b      	lsls	r3, r3, #8
 800b434:	4313      	orrs	r3, r2
 800b436:	693a      	ldr	r2, [r7, #16]
 800b438:	4313      	orrs	r3, r2
 800b43a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	691b      	ldr	r3, [r3, #16]
 800b440:	011a      	lsls	r2, r3, #4
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	6a1b      	ldr	r3, [r3, #32]
 800b446:	031b      	lsls	r3, r3, #12
 800b448:	4313      	orrs	r3, r2
 800b44a:	693a      	ldr	r2, [r7, #16]
 800b44c:	4313      	orrs	r3, r2
 800b44e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b456:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b45e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	685a      	ldr	r2, [r3, #4]
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	695b      	ldr	r3, [r3, #20]
 800b468:	011b      	lsls	r3, r3, #4
 800b46a:	4313      	orrs	r3, r2
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	4313      	orrs	r3, r2
 800b470:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	697a      	ldr	r2, [r7, #20]
 800b478:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	693a      	ldr	r2, [r7, #16]
 800b480:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	68fa      	ldr	r2, [r7, #12]
 800b488:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2201      	movs	r2, #1
 800b48e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2201      	movs	r2, #1
 800b496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2201      	movs	r2, #1
 800b49e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2201      	movs	r2, #1
 800b4a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b4ba:	2300      	movs	r3, #0
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3718      	adds	r7, #24
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b082      	sub	sp, #8
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	691b      	ldr	r3, [r3, #16]
 800b4d2:	f003 0302 	and.w	r3, r3, #2
 800b4d6:	2b02      	cmp	r3, #2
 800b4d8:	d122      	bne.n	800b520 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	68db      	ldr	r3, [r3, #12]
 800b4e0:	f003 0302 	and.w	r3, r3, #2
 800b4e4:	2b02      	cmp	r3, #2
 800b4e6:	d11b      	bne.n	800b520 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f06f 0202 	mvn.w	r2, #2
 800b4f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2201      	movs	r2, #1
 800b4f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	699b      	ldr	r3, [r3, #24]
 800b4fe:	f003 0303 	and.w	r3, r3, #3
 800b502:	2b00      	cmp	r3, #0
 800b504:	d003      	beq.n	800b50e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f000 fad3 	bl	800bab2 <HAL_TIM_IC_CaptureCallback>
 800b50c:	e005      	b.n	800b51a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 fac5 	bl	800ba9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f000 fad6 	bl	800bac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2200      	movs	r2, #0
 800b51e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	691b      	ldr	r3, [r3, #16]
 800b526:	f003 0304 	and.w	r3, r3, #4
 800b52a:	2b04      	cmp	r3, #4
 800b52c:	d122      	bne.n	800b574 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	f003 0304 	and.w	r3, r3, #4
 800b538:	2b04      	cmp	r3, #4
 800b53a:	d11b      	bne.n	800b574 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f06f 0204 	mvn.w	r2, #4
 800b544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2202      	movs	r2, #2
 800b54a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	699b      	ldr	r3, [r3, #24]
 800b552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b556:	2b00      	cmp	r3, #0
 800b558:	d003      	beq.n	800b562 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f000 faa9 	bl	800bab2 <HAL_TIM_IC_CaptureCallback>
 800b560:	e005      	b.n	800b56e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f000 fa9b 	bl	800ba9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f000 faac 	bl	800bac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2200      	movs	r2, #0
 800b572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	691b      	ldr	r3, [r3, #16]
 800b57a:	f003 0308 	and.w	r3, r3, #8
 800b57e:	2b08      	cmp	r3, #8
 800b580:	d122      	bne.n	800b5c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	68db      	ldr	r3, [r3, #12]
 800b588:	f003 0308 	and.w	r3, r3, #8
 800b58c:	2b08      	cmp	r3, #8
 800b58e:	d11b      	bne.n	800b5c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f06f 0208 	mvn.w	r2, #8
 800b598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2204      	movs	r2, #4
 800b59e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	69db      	ldr	r3, [r3, #28]
 800b5a6:	f003 0303 	and.w	r3, r3, #3
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d003      	beq.n	800b5b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 fa7f 	bl	800bab2 <HAL_TIM_IC_CaptureCallback>
 800b5b4:	e005      	b.n	800b5c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 fa71 	bl	800ba9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f000 fa82 	bl	800bac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	691b      	ldr	r3, [r3, #16]
 800b5ce:	f003 0310 	and.w	r3, r3, #16
 800b5d2:	2b10      	cmp	r3, #16
 800b5d4:	d122      	bne.n	800b61c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	f003 0310 	and.w	r3, r3, #16
 800b5e0:	2b10      	cmp	r3, #16
 800b5e2:	d11b      	bne.n	800b61c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f06f 0210 	mvn.w	r2, #16
 800b5ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2208      	movs	r2, #8
 800b5f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	69db      	ldr	r3, [r3, #28]
 800b5fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d003      	beq.n	800b60a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 fa55 	bl	800bab2 <HAL_TIM_IC_CaptureCallback>
 800b608:	e005      	b.n	800b616 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 fa47 	bl	800ba9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f000 fa58 	bl	800bac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2200      	movs	r2, #0
 800b61a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	691b      	ldr	r3, [r3, #16]
 800b622:	f003 0301 	and.w	r3, r3, #1
 800b626:	2b01      	cmp	r3, #1
 800b628:	d10e      	bne.n	800b648 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	68db      	ldr	r3, [r3, #12]
 800b630:	f003 0301 	and.w	r3, r3, #1
 800b634:	2b01      	cmp	r3, #1
 800b636:	d107      	bne.n	800b648 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f06f 0201 	mvn.w	r2, #1
 800b640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f7f6 f808 	bl	8001658 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	691b      	ldr	r3, [r3, #16]
 800b64e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b652:	2b80      	cmp	r3, #128	; 0x80
 800b654:	d10e      	bne.n	800b674 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	68db      	ldr	r3, [r3, #12]
 800b65c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b660:	2b80      	cmp	r3, #128	; 0x80
 800b662:	d107      	bne.n	800b674 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b66c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f000 fd82 	bl	800c178 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	691b      	ldr	r3, [r3, #16]
 800b67a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b67e:	2b40      	cmp	r3, #64	; 0x40
 800b680:	d10e      	bne.n	800b6a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	68db      	ldr	r3, [r3, #12]
 800b688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b68c:	2b40      	cmp	r3, #64	; 0x40
 800b68e:	d107      	bne.n	800b6a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 fa1d 	bl	800bada <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	691b      	ldr	r3, [r3, #16]
 800b6a6:	f003 0320 	and.w	r3, r3, #32
 800b6aa:	2b20      	cmp	r3, #32
 800b6ac:	d10e      	bne.n	800b6cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	68db      	ldr	r3, [r3, #12]
 800b6b4:	f003 0320 	and.w	r3, r3, #32
 800b6b8:	2b20      	cmp	r3, #32
 800b6ba:	d107      	bne.n	800b6cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f06f 0220 	mvn.w	r2, #32
 800b6c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f000 fd4c 	bl	800c164 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b6cc:	bf00      	nop
 800b6ce:	3708      	adds	r7, #8
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}

0800b6d4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b086      	sub	sp, #24
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	60f8      	str	r0, [r7, #12]
 800b6dc:	60b9      	str	r1, [r7, #8]
 800b6de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6ea:	2b01      	cmp	r3, #1
 800b6ec:	d101      	bne.n	800b6f2 <HAL_TIM_OC_ConfigChannel+0x1e>
 800b6ee:	2302      	movs	r3, #2
 800b6f0:	e048      	b.n	800b784 <HAL_TIM_OC_ConfigChannel+0xb0>
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2b0c      	cmp	r3, #12
 800b6fe:	d839      	bhi.n	800b774 <HAL_TIM_OC_ConfigChannel+0xa0>
 800b700:	a201      	add	r2, pc, #4	; (adr r2, 800b708 <HAL_TIM_OC_ConfigChannel+0x34>)
 800b702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b706:	bf00      	nop
 800b708:	0800b73d 	.word	0x0800b73d
 800b70c:	0800b775 	.word	0x0800b775
 800b710:	0800b775 	.word	0x0800b775
 800b714:	0800b775 	.word	0x0800b775
 800b718:	0800b74b 	.word	0x0800b74b
 800b71c:	0800b775 	.word	0x0800b775
 800b720:	0800b775 	.word	0x0800b775
 800b724:	0800b775 	.word	0x0800b775
 800b728:	0800b759 	.word	0x0800b759
 800b72c:	0800b775 	.word	0x0800b775
 800b730:	0800b775 	.word	0x0800b775
 800b734:	0800b775 	.word	0x0800b775
 800b738:	0800b767 	.word	0x0800b767
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	68b9      	ldr	r1, [r7, #8]
 800b742:	4618      	mov	r0, r3
 800b744:	f000 fa54 	bl	800bbf0 <TIM_OC1_SetConfig>
      break;
 800b748:	e017      	b.n	800b77a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	68b9      	ldr	r1, [r7, #8]
 800b750:	4618      	mov	r0, r3
 800b752:	f000 fab3 	bl	800bcbc <TIM_OC2_SetConfig>
      break;
 800b756:	e010      	b.n	800b77a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	68b9      	ldr	r1, [r7, #8]
 800b75e:	4618      	mov	r0, r3
 800b760:	f000 fb18 	bl	800bd94 <TIM_OC3_SetConfig>
      break;
 800b764:	e009      	b.n	800b77a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	68b9      	ldr	r1, [r7, #8]
 800b76c:	4618      	mov	r0, r3
 800b76e:	f000 fb7b 	bl	800be68 <TIM_OC4_SetConfig>
      break;
 800b772:	e002      	b.n	800b77a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800b774:	2301      	movs	r3, #1
 800b776:	75fb      	strb	r3, [r7, #23]
      break;
 800b778:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2200      	movs	r2, #0
 800b77e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b782:	7dfb      	ldrb	r3, [r7, #23]
}
 800b784:	4618      	mov	r0, r3
 800b786:	3718      	adds	r7, #24
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b086      	sub	sp, #24
 800b790:	af00      	add	r7, sp, #0
 800b792:	60f8      	str	r0, [r7, #12]
 800b794:	60b9      	str	r1, [r7, #8]
 800b796:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b798:	2300      	movs	r3, #0
 800b79a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	d101      	bne.n	800b7aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b7a6:	2302      	movs	r3, #2
 800b7a8:	e0ae      	b.n	800b908 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2b0c      	cmp	r3, #12
 800b7b6:	f200 809f 	bhi.w	800b8f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b7ba:	a201      	add	r2, pc, #4	; (adr r2, 800b7c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7c0:	0800b7f5 	.word	0x0800b7f5
 800b7c4:	0800b8f9 	.word	0x0800b8f9
 800b7c8:	0800b8f9 	.word	0x0800b8f9
 800b7cc:	0800b8f9 	.word	0x0800b8f9
 800b7d0:	0800b835 	.word	0x0800b835
 800b7d4:	0800b8f9 	.word	0x0800b8f9
 800b7d8:	0800b8f9 	.word	0x0800b8f9
 800b7dc:	0800b8f9 	.word	0x0800b8f9
 800b7e0:	0800b877 	.word	0x0800b877
 800b7e4:	0800b8f9 	.word	0x0800b8f9
 800b7e8:	0800b8f9 	.word	0x0800b8f9
 800b7ec:	0800b8f9 	.word	0x0800b8f9
 800b7f0:	0800b8b7 	.word	0x0800b8b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	68b9      	ldr	r1, [r7, #8]
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f000 f9f8 	bl	800bbf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	699a      	ldr	r2, [r3, #24]
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f042 0208 	orr.w	r2, r2, #8
 800b80e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	699a      	ldr	r2, [r3, #24]
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f022 0204 	bic.w	r2, r2, #4
 800b81e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	6999      	ldr	r1, [r3, #24]
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	691a      	ldr	r2, [r3, #16]
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	430a      	orrs	r2, r1
 800b830:	619a      	str	r2, [r3, #24]
      break;
 800b832:	e064      	b.n	800b8fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	68b9      	ldr	r1, [r7, #8]
 800b83a:	4618      	mov	r0, r3
 800b83c:	f000 fa3e 	bl	800bcbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	699a      	ldr	r2, [r3, #24]
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b84e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	699a      	ldr	r2, [r3, #24]
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b85e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	6999      	ldr	r1, [r3, #24]
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	691b      	ldr	r3, [r3, #16]
 800b86a:	021a      	lsls	r2, r3, #8
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	430a      	orrs	r2, r1
 800b872:	619a      	str	r2, [r3, #24]
      break;
 800b874:	e043      	b.n	800b8fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	68b9      	ldr	r1, [r7, #8]
 800b87c:	4618      	mov	r0, r3
 800b87e:	f000 fa89 	bl	800bd94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	69da      	ldr	r2, [r3, #28]
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f042 0208 	orr.w	r2, r2, #8
 800b890:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	69da      	ldr	r2, [r3, #28]
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f022 0204 	bic.w	r2, r2, #4
 800b8a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	69d9      	ldr	r1, [r3, #28]
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	691a      	ldr	r2, [r3, #16]
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	430a      	orrs	r2, r1
 800b8b2:	61da      	str	r2, [r3, #28]
      break;
 800b8b4:	e023      	b.n	800b8fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	68b9      	ldr	r1, [r7, #8]
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f000 fad3 	bl	800be68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	69da      	ldr	r2, [r3, #28]
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b8d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	69da      	ldr	r2, [r3, #28]
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b8e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	69d9      	ldr	r1, [r3, #28]
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	691b      	ldr	r3, [r3, #16]
 800b8ec:	021a      	lsls	r2, r3, #8
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	430a      	orrs	r2, r1
 800b8f4:	61da      	str	r2, [r3, #28]
      break;
 800b8f6:	e002      	b.n	800b8fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	75fb      	strb	r3, [r7, #23]
      break;
 800b8fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2200      	movs	r2, #0
 800b902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b906:	7dfb      	ldrb	r3, [r7, #23]
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3718      	adds	r7, #24
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b084      	sub	sp, #16
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b91a:	2300      	movs	r3, #0
 800b91c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b924:	2b01      	cmp	r3, #1
 800b926:	d101      	bne.n	800b92c <HAL_TIM_ConfigClockSource+0x1c>
 800b928:	2302      	movs	r3, #2
 800b92a:	e0b4      	b.n	800ba96 <HAL_TIM_ConfigClockSource+0x186>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2201      	movs	r2, #1
 800b930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2202      	movs	r2, #2
 800b938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	689b      	ldr	r3, [r3, #8]
 800b942:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b94a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b952:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	68ba      	ldr	r2, [r7, #8]
 800b95a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b964:	d03e      	beq.n	800b9e4 <HAL_TIM_ConfigClockSource+0xd4>
 800b966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b96a:	f200 8087 	bhi.w	800ba7c <HAL_TIM_ConfigClockSource+0x16c>
 800b96e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b972:	f000 8086 	beq.w	800ba82 <HAL_TIM_ConfigClockSource+0x172>
 800b976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b97a:	d87f      	bhi.n	800ba7c <HAL_TIM_ConfigClockSource+0x16c>
 800b97c:	2b70      	cmp	r3, #112	; 0x70
 800b97e:	d01a      	beq.n	800b9b6 <HAL_TIM_ConfigClockSource+0xa6>
 800b980:	2b70      	cmp	r3, #112	; 0x70
 800b982:	d87b      	bhi.n	800ba7c <HAL_TIM_ConfigClockSource+0x16c>
 800b984:	2b60      	cmp	r3, #96	; 0x60
 800b986:	d050      	beq.n	800ba2a <HAL_TIM_ConfigClockSource+0x11a>
 800b988:	2b60      	cmp	r3, #96	; 0x60
 800b98a:	d877      	bhi.n	800ba7c <HAL_TIM_ConfigClockSource+0x16c>
 800b98c:	2b50      	cmp	r3, #80	; 0x50
 800b98e:	d03c      	beq.n	800ba0a <HAL_TIM_ConfigClockSource+0xfa>
 800b990:	2b50      	cmp	r3, #80	; 0x50
 800b992:	d873      	bhi.n	800ba7c <HAL_TIM_ConfigClockSource+0x16c>
 800b994:	2b40      	cmp	r3, #64	; 0x40
 800b996:	d058      	beq.n	800ba4a <HAL_TIM_ConfigClockSource+0x13a>
 800b998:	2b40      	cmp	r3, #64	; 0x40
 800b99a:	d86f      	bhi.n	800ba7c <HAL_TIM_ConfigClockSource+0x16c>
 800b99c:	2b30      	cmp	r3, #48	; 0x30
 800b99e:	d064      	beq.n	800ba6a <HAL_TIM_ConfigClockSource+0x15a>
 800b9a0:	2b30      	cmp	r3, #48	; 0x30
 800b9a2:	d86b      	bhi.n	800ba7c <HAL_TIM_ConfigClockSource+0x16c>
 800b9a4:	2b20      	cmp	r3, #32
 800b9a6:	d060      	beq.n	800ba6a <HAL_TIM_ConfigClockSource+0x15a>
 800b9a8:	2b20      	cmp	r3, #32
 800b9aa:	d867      	bhi.n	800ba7c <HAL_TIM_ConfigClockSource+0x16c>
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d05c      	beq.n	800ba6a <HAL_TIM_ConfigClockSource+0x15a>
 800b9b0:	2b10      	cmp	r3, #16
 800b9b2:	d05a      	beq.n	800ba6a <HAL_TIM_ConfigClockSource+0x15a>
 800b9b4:	e062      	b.n	800ba7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6818      	ldr	r0, [r3, #0]
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	6899      	ldr	r1, [r3, #8]
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	685a      	ldr	r2, [r3, #4]
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	68db      	ldr	r3, [r3, #12]
 800b9c6:	f000 fb19 	bl	800bffc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	689b      	ldr	r3, [r3, #8]
 800b9d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b9d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	68ba      	ldr	r2, [r7, #8]
 800b9e0:	609a      	str	r2, [r3, #8]
      break;
 800b9e2:	e04f      	b.n	800ba84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6818      	ldr	r0, [r3, #0]
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	6899      	ldr	r1, [r3, #8]
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	685a      	ldr	r2, [r3, #4]
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	68db      	ldr	r3, [r3, #12]
 800b9f4:	f000 fb02 	bl	800bffc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	689a      	ldr	r2, [r3, #8]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ba06:	609a      	str	r2, [r3, #8]
      break;
 800ba08:	e03c      	b.n	800ba84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6818      	ldr	r0, [r3, #0]
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	6859      	ldr	r1, [r3, #4]
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	68db      	ldr	r3, [r3, #12]
 800ba16:	461a      	mov	r2, r3
 800ba18:	f000 fa76 	bl	800bf08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	2150      	movs	r1, #80	; 0x50
 800ba22:	4618      	mov	r0, r3
 800ba24:	f000 facf 	bl	800bfc6 <TIM_ITRx_SetConfig>
      break;
 800ba28:	e02c      	b.n	800ba84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6818      	ldr	r0, [r3, #0]
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	6859      	ldr	r1, [r3, #4]
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	68db      	ldr	r3, [r3, #12]
 800ba36:	461a      	mov	r2, r3
 800ba38:	f000 fa95 	bl	800bf66 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	2160      	movs	r1, #96	; 0x60
 800ba42:	4618      	mov	r0, r3
 800ba44:	f000 fabf 	bl	800bfc6 <TIM_ITRx_SetConfig>
      break;
 800ba48:	e01c      	b.n	800ba84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6818      	ldr	r0, [r3, #0]
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	6859      	ldr	r1, [r3, #4]
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	68db      	ldr	r3, [r3, #12]
 800ba56:	461a      	mov	r2, r3
 800ba58:	f000 fa56 	bl	800bf08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	2140      	movs	r1, #64	; 0x40
 800ba62:	4618      	mov	r0, r3
 800ba64:	f000 faaf 	bl	800bfc6 <TIM_ITRx_SetConfig>
      break;
 800ba68:	e00c      	b.n	800ba84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681a      	ldr	r2, [r3, #0]
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	4619      	mov	r1, r3
 800ba74:	4610      	mov	r0, r2
 800ba76:	f000 faa6 	bl	800bfc6 <TIM_ITRx_SetConfig>
      break;
 800ba7a:	e003      	b.n	800ba84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	73fb      	strb	r3, [r7, #15]
      break;
 800ba80:	e000      	b.n	800ba84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ba82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2201      	movs	r2, #1
 800ba88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ba94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3710      	adds	r7, #16
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}

0800ba9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba9e:	b480      	push	{r7}
 800baa0:	b083      	sub	sp, #12
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800baa6:	bf00      	nop
 800baa8:	370c      	adds	r7, #12
 800baaa:	46bd      	mov	sp, r7
 800baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab0:	4770      	bx	lr

0800bab2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bab2:	b480      	push	{r7}
 800bab4:	b083      	sub	sp, #12
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800baba:	bf00      	nop
 800babc:	370c      	adds	r7, #12
 800babe:	46bd      	mov	sp, r7
 800bac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac4:	4770      	bx	lr

0800bac6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bac6:	b480      	push	{r7}
 800bac8:	b083      	sub	sp, #12
 800baca:	af00      	add	r7, sp, #0
 800bacc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bace:	bf00      	nop
 800bad0:	370c      	adds	r7, #12
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr

0800bada <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bada:	b480      	push	{r7}
 800badc:	b083      	sub	sp, #12
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bae2:	bf00      	nop
 800bae4:	370c      	adds	r7, #12
 800bae6:	46bd      	mov	sp, r7
 800bae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baec:	4770      	bx	lr
	...

0800baf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b085      	sub	sp, #20
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	4a34      	ldr	r2, [pc, #208]	; (800bbd4 <TIM_Base_SetConfig+0xe4>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d00f      	beq.n	800bb28 <TIM_Base_SetConfig+0x38>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb0e:	d00b      	beq.n	800bb28 <TIM_Base_SetConfig+0x38>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	4a31      	ldr	r2, [pc, #196]	; (800bbd8 <TIM_Base_SetConfig+0xe8>)
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d007      	beq.n	800bb28 <TIM_Base_SetConfig+0x38>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	4a30      	ldr	r2, [pc, #192]	; (800bbdc <TIM_Base_SetConfig+0xec>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d003      	beq.n	800bb28 <TIM_Base_SetConfig+0x38>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	4a2f      	ldr	r2, [pc, #188]	; (800bbe0 <TIM_Base_SetConfig+0xf0>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d108      	bne.n	800bb3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	685b      	ldr	r3, [r3, #4]
 800bb34:	68fa      	ldr	r2, [r7, #12]
 800bb36:	4313      	orrs	r3, r2
 800bb38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	4a25      	ldr	r2, [pc, #148]	; (800bbd4 <TIM_Base_SetConfig+0xe4>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d01b      	beq.n	800bb7a <TIM_Base_SetConfig+0x8a>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb48:	d017      	beq.n	800bb7a <TIM_Base_SetConfig+0x8a>
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	4a22      	ldr	r2, [pc, #136]	; (800bbd8 <TIM_Base_SetConfig+0xe8>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d013      	beq.n	800bb7a <TIM_Base_SetConfig+0x8a>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	4a21      	ldr	r2, [pc, #132]	; (800bbdc <TIM_Base_SetConfig+0xec>)
 800bb56:	4293      	cmp	r3, r2
 800bb58:	d00f      	beq.n	800bb7a <TIM_Base_SetConfig+0x8a>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	4a20      	ldr	r2, [pc, #128]	; (800bbe0 <TIM_Base_SetConfig+0xf0>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d00b      	beq.n	800bb7a <TIM_Base_SetConfig+0x8a>
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	4a1f      	ldr	r2, [pc, #124]	; (800bbe4 <TIM_Base_SetConfig+0xf4>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d007      	beq.n	800bb7a <TIM_Base_SetConfig+0x8a>
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	4a1e      	ldr	r2, [pc, #120]	; (800bbe8 <TIM_Base_SetConfig+0xf8>)
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	d003      	beq.n	800bb7a <TIM_Base_SetConfig+0x8a>
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	4a1d      	ldr	r2, [pc, #116]	; (800bbec <TIM_Base_SetConfig+0xfc>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d108      	bne.n	800bb8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	68db      	ldr	r3, [r3, #12]
 800bb86:	68fa      	ldr	r2, [r7, #12]
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	695b      	ldr	r3, [r3, #20]
 800bb96:	4313      	orrs	r3, r2
 800bb98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	68fa      	ldr	r2, [r7, #12]
 800bb9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	689a      	ldr	r2, [r3, #8]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	681a      	ldr	r2, [r3, #0]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	4a08      	ldr	r2, [pc, #32]	; (800bbd4 <TIM_Base_SetConfig+0xe4>)
 800bbb4:	4293      	cmp	r3, r2
 800bbb6:	d103      	bne.n	800bbc0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	691a      	ldr	r2, [r3, #16]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	615a      	str	r2, [r3, #20]
}
 800bbc6:	bf00      	nop
 800bbc8:	3714      	adds	r7, #20
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd0:	4770      	bx	lr
 800bbd2:	bf00      	nop
 800bbd4:	40010000 	.word	0x40010000
 800bbd8:	40000400 	.word	0x40000400
 800bbdc:	40000800 	.word	0x40000800
 800bbe0:	40000c00 	.word	0x40000c00
 800bbe4:	40014000 	.word	0x40014000
 800bbe8:	40014400 	.word	0x40014400
 800bbec:	40014800 	.word	0x40014800

0800bbf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b087      	sub	sp, #28
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6a1b      	ldr	r3, [r3, #32]
 800bbfe:	f023 0201 	bic.w	r2, r3, #1
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6a1b      	ldr	r3, [r3, #32]
 800bc0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	699b      	ldr	r3, [r3, #24]
 800bc16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f023 0303 	bic.w	r3, r3, #3
 800bc26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	68fa      	ldr	r2, [r7, #12]
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	f023 0302 	bic.w	r3, r3, #2
 800bc38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	689b      	ldr	r3, [r3, #8]
 800bc3e:	697a      	ldr	r2, [r7, #20]
 800bc40:	4313      	orrs	r3, r2
 800bc42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	4a1c      	ldr	r2, [pc, #112]	; (800bcb8 <TIM_OC1_SetConfig+0xc8>)
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d10c      	bne.n	800bc66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	f023 0308 	bic.w	r3, r3, #8
 800bc52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	68db      	ldr	r3, [r3, #12]
 800bc58:	697a      	ldr	r2, [r7, #20]
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	f023 0304 	bic.w	r3, r3, #4
 800bc64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	4a13      	ldr	r2, [pc, #76]	; (800bcb8 <TIM_OC1_SetConfig+0xc8>)
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d111      	bne.n	800bc92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bc7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	695b      	ldr	r3, [r3, #20]
 800bc82:	693a      	ldr	r2, [r7, #16]
 800bc84:	4313      	orrs	r3, r2
 800bc86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	699b      	ldr	r3, [r3, #24]
 800bc8c:	693a      	ldr	r2, [r7, #16]
 800bc8e:	4313      	orrs	r3, r2
 800bc90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	693a      	ldr	r2, [r7, #16]
 800bc96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	68fa      	ldr	r2, [r7, #12]
 800bc9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	685a      	ldr	r2, [r3, #4]
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	697a      	ldr	r2, [r7, #20]
 800bcaa:	621a      	str	r2, [r3, #32]
}
 800bcac:	bf00      	nop
 800bcae:	371c      	adds	r7, #28
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr
 800bcb8:	40010000 	.word	0x40010000

0800bcbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b087      	sub	sp, #28
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6a1b      	ldr	r3, [r3, #32]
 800bcca:	f023 0210 	bic.w	r2, r3, #16
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6a1b      	ldr	r3, [r3, #32]
 800bcd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	699b      	ldr	r3, [r3, #24]
 800bce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bcea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bcf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	021b      	lsls	r3, r3, #8
 800bcfa:	68fa      	ldr	r2, [r7, #12]
 800bcfc:	4313      	orrs	r3, r2
 800bcfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	f023 0320 	bic.w	r3, r3, #32
 800bd06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	689b      	ldr	r3, [r3, #8]
 800bd0c:	011b      	lsls	r3, r3, #4
 800bd0e:	697a      	ldr	r2, [r7, #20]
 800bd10:	4313      	orrs	r3, r2
 800bd12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	4a1e      	ldr	r2, [pc, #120]	; (800bd90 <TIM_OC2_SetConfig+0xd4>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d10d      	bne.n	800bd38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	68db      	ldr	r3, [r3, #12]
 800bd28:	011b      	lsls	r3, r3, #4
 800bd2a:	697a      	ldr	r2, [r7, #20]
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	4a15      	ldr	r2, [pc, #84]	; (800bd90 <TIM_OC2_SetConfig+0xd4>)
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	d113      	bne.n	800bd68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bd46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bd4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	695b      	ldr	r3, [r3, #20]
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	693a      	ldr	r2, [r7, #16]
 800bd58:	4313      	orrs	r3, r2
 800bd5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	699b      	ldr	r3, [r3, #24]
 800bd60:	009b      	lsls	r3, r3, #2
 800bd62:	693a      	ldr	r2, [r7, #16]
 800bd64:	4313      	orrs	r3, r2
 800bd66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	693a      	ldr	r2, [r7, #16]
 800bd6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	68fa      	ldr	r2, [r7, #12]
 800bd72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	685a      	ldr	r2, [r3, #4]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	697a      	ldr	r2, [r7, #20]
 800bd80:	621a      	str	r2, [r3, #32]
}
 800bd82:	bf00      	nop
 800bd84:	371c      	adds	r7, #28
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr
 800bd8e:	bf00      	nop
 800bd90:	40010000 	.word	0x40010000

0800bd94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b087      	sub	sp, #28
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6a1b      	ldr	r3, [r3, #32]
 800bda2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6a1b      	ldr	r3, [r3, #32]
 800bdae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	69db      	ldr	r3, [r3, #28]
 800bdba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	f023 0303 	bic.w	r3, r3, #3
 800bdca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	68fa      	ldr	r2, [r7, #12]
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bddc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	689b      	ldr	r3, [r3, #8]
 800bde2:	021b      	lsls	r3, r3, #8
 800bde4:	697a      	ldr	r2, [r7, #20]
 800bde6:	4313      	orrs	r3, r2
 800bde8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	4a1d      	ldr	r2, [pc, #116]	; (800be64 <TIM_OC3_SetConfig+0xd0>)
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d10d      	bne.n	800be0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bdf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	68db      	ldr	r3, [r3, #12]
 800bdfe:	021b      	lsls	r3, r3, #8
 800be00:	697a      	ldr	r2, [r7, #20]
 800be02:	4313      	orrs	r3, r2
 800be04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800be0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	4a14      	ldr	r2, [pc, #80]	; (800be64 <TIM_OC3_SetConfig+0xd0>)
 800be12:	4293      	cmp	r3, r2
 800be14:	d113      	bne.n	800be3e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800be24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	695b      	ldr	r3, [r3, #20]
 800be2a:	011b      	lsls	r3, r3, #4
 800be2c:	693a      	ldr	r2, [r7, #16]
 800be2e:	4313      	orrs	r3, r2
 800be30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	699b      	ldr	r3, [r3, #24]
 800be36:	011b      	lsls	r3, r3, #4
 800be38:	693a      	ldr	r2, [r7, #16]
 800be3a:	4313      	orrs	r3, r2
 800be3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	693a      	ldr	r2, [r7, #16]
 800be42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	68fa      	ldr	r2, [r7, #12]
 800be48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	685a      	ldr	r2, [r3, #4]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	697a      	ldr	r2, [r7, #20]
 800be56:	621a      	str	r2, [r3, #32]
}
 800be58:	bf00      	nop
 800be5a:	371c      	adds	r7, #28
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr
 800be64:	40010000 	.word	0x40010000

0800be68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be68:	b480      	push	{r7}
 800be6a:	b087      	sub	sp, #28
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6a1b      	ldr	r3, [r3, #32]
 800be76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6a1b      	ldr	r3, [r3, #32]
 800be82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	685b      	ldr	r3, [r3, #4]
 800be88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	69db      	ldr	r3, [r3, #28]
 800be8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	021b      	lsls	r3, r3, #8
 800bea6:	68fa      	ldr	r2, [r7, #12]
 800bea8:	4313      	orrs	r3, r2
 800beaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800beb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	689b      	ldr	r3, [r3, #8]
 800beb8:	031b      	lsls	r3, r3, #12
 800beba:	693a      	ldr	r2, [r7, #16]
 800bebc:	4313      	orrs	r3, r2
 800bebe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	4a10      	ldr	r2, [pc, #64]	; (800bf04 <TIM_OC4_SetConfig+0x9c>)
 800bec4:	4293      	cmp	r3, r2
 800bec6:	d109      	bne.n	800bedc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bece:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	695b      	ldr	r3, [r3, #20]
 800bed4:	019b      	lsls	r3, r3, #6
 800bed6:	697a      	ldr	r2, [r7, #20]
 800bed8:	4313      	orrs	r3, r2
 800beda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	697a      	ldr	r2, [r7, #20]
 800bee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	68fa      	ldr	r2, [r7, #12]
 800bee6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	685a      	ldr	r2, [r3, #4]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	693a      	ldr	r2, [r7, #16]
 800bef4:	621a      	str	r2, [r3, #32]
}
 800bef6:	bf00      	nop
 800bef8:	371c      	adds	r7, #28
 800befa:	46bd      	mov	sp, r7
 800befc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf00:	4770      	bx	lr
 800bf02:	bf00      	nop
 800bf04:	40010000 	.word	0x40010000

0800bf08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b087      	sub	sp, #28
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	6a1b      	ldr	r3, [r3, #32]
 800bf18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	6a1b      	ldr	r3, [r3, #32]
 800bf1e:	f023 0201 	bic.w	r2, r3, #1
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	699b      	ldr	r3, [r3, #24]
 800bf2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bf32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	011b      	lsls	r3, r3, #4
 800bf38:	693a      	ldr	r2, [r7, #16]
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	f023 030a 	bic.w	r3, r3, #10
 800bf44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bf46:	697a      	ldr	r2, [r7, #20]
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	4313      	orrs	r3, r2
 800bf4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	693a      	ldr	r2, [r7, #16]
 800bf52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	697a      	ldr	r2, [r7, #20]
 800bf58:	621a      	str	r2, [r3, #32]
}
 800bf5a:	bf00      	nop
 800bf5c:	371c      	adds	r7, #28
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf64:	4770      	bx	lr

0800bf66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf66:	b480      	push	{r7}
 800bf68:	b087      	sub	sp, #28
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	60f8      	str	r0, [r7, #12]
 800bf6e:	60b9      	str	r1, [r7, #8]
 800bf70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	6a1b      	ldr	r3, [r3, #32]
 800bf76:	f023 0210 	bic.w	r2, r3, #16
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	699b      	ldr	r3, [r3, #24]
 800bf82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6a1b      	ldr	r3, [r3, #32]
 800bf88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bf90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	031b      	lsls	r3, r3, #12
 800bf96:	697a      	ldr	r2, [r7, #20]
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bfa2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	011b      	lsls	r3, r3, #4
 800bfa8:	693a      	ldr	r2, [r7, #16]
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	697a      	ldr	r2, [r7, #20]
 800bfb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	693a      	ldr	r2, [r7, #16]
 800bfb8:	621a      	str	r2, [r3, #32]
}
 800bfba:	bf00      	nop
 800bfbc:	371c      	adds	r7, #28
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc4:	4770      	bx	lr

0800bfc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bfc6:	b480      	push	{r7}
 800bfc8:	b085      	sub	sp, #20
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	6078      	str	r0, [r7, #4]
 800bfce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	689b      	ldr	r3, [r3, #8]
 800bfd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bfde:	683a      	ldr	r2, [r7, #0]
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	f043 0307 	orr.w	r3, r3, #7
 800bfe8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	68fa      	ldr	r2, [r7, #12]
 800bfee:	609a      	str	r2, [r3, #8]
}
 800bff0:	bf00      	nop
 800bff2:	3714      	adds	r7, #20
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr

0800bffc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b087      	sub	sp, #28
 800c000:	af00      	add	r7, sp, #0
 800c002:	60f8      	str	r0, [r7, #12]
 800c004:	60b9      	str	r1, [r7, #8]
 800c006:	607a      	str	r2, [r7, #4]
 800c008:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	689b      	ldr	r3, [r3, #8]
 800c00e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c016:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	021a      	lsls	r2, r3, #8
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	431a      	orrs	r2, r3
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	4313      	orrs	r3, r2
 800c024:	697a      	ldr	r2, [r7, #20]
 800c026:	4313      	orrs	r3, r2
 800c028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	697a      	ldr	r2, [r7, #20]
 800c02e:	609a      	str	r2, [r3, #8]
}
 800c030:	bf00      	nop
 800c032:	371c      	adds	r7, #28
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr

0800c03c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b087      	sub	sp, #28
 800c040:	af00      	add	r7, sp, #0
 800c042:	60f8      	str	r0, [r7, #12]
 800c044:	60b9      	str	r1, [r7, #8]
 800c046:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	f003 031f 	and.w	r3, r3, #31
 800c04e:	2201      	movs	r2, #1
 800c050:	fa02 f303 	lsl.w	r3, r2, r3
 800c054:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	6a1a      	ldr	r2, [r3, #32]
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	43db      	mvns	r3, r3
 800c05e:	401a      	ands	r2, r3
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	6a1a      	ldr	r2, [r3, #32]
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	f003 031f 	and.w	r3, r3, #31
 800c06e:	6879      	ldr	r1, [r7, #4]
 800c070:	fa01 f303 	lsl.w	r3, r1, r3
 800c074:	431a      	orrs	r2, r3
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	621a      	str	r2, [r3, #32]
}
 800c07a:	bf00      	nop
 800c07c:	371c      	adds	r7, #28
 800c07e:	46bd      	mov	sp, r7
 800c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c084:	4770      	bx	lr
	...

0800c088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c088:	b480      	push	{r7}
 800c08a:	b085      	sub	sp, #20
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c098:	2b01      	cmp	r3, #1
 800c09a:	d101      	bne.n	800c0a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c09c:	2302      	movs	r3, #2
 800c09e:	e050      	b.n	800c142 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2202      	movs	r2, #2
 800c0ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	689b      	ldr	r3, [r3, #8]
 800c0be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	68fa      	ldr	r2, [r7, #12]
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	68fa      	ldr	r2, [r7, #12]
 800c0d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	4a1c      	ldr	r2, [pc, #112]	; (800c150 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d018      	beq.n	800c116 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0ec:	d013      	beq.n	800c116 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	4a18      	ldr	r2, [pc, #96]	; (800c154 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d00e      	beq.n	800c116 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	4a16      	ldr	r2, [pc, #88]	; (800c158 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c0fe:	4293      	cmp	r3, r2
 800c100:	d009      	beq.n	800c116 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	4a15      	ldr	r2, [pc, #84]	; (800c15c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c108:	4293      	cmp	r3, r2
 800c10a:	d004      	beq.n	800c116 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	4a13      	ldr	r2, [pc, #76]	; (800c160 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800c112:	4293      	cmp	r3, r2
 800c114:	d10c      	bne.n	800c130 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c11c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	685b      	ldr	r3, [r3, #4]
 800c122:	68ba      	ldr	r2, [r7, #8]
 800c124:	4313      	orrs	r3, r2
 800c126:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	68ba      	ldr	r2, [r7, #8]
 800c12e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2201      	movs	r2, #1
 800c134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2200      	movs	r2, #0
 800c13c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c140:	2300      	movs	r3, #0
}
 800c142:	4618      	mov	r0, r3
 800c144:	3714      	adds	r7, #20
 800c146:	46bd      	mov	sp, r7
 800c148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14c:	4770      	bx	lr
 800c14e:	bf00      	nop
 800c150:	40010000 	.word	0x40010000
 800c154:	40000400 	.word	0x40000400
 800c158:	40000800 	.word	0x40000800
 800c15c:	40000c00 	.word	0x40000c00
 800c160:	40014000 	.word	0x40014000

0800c164 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c164:	b480      	push	{r7}
 800c166:	b083      	sub	sp, #12
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c16c:	bf00      	nop
 800c16e:	370c      	adds	r7, #12
 800c170:	46bd      	mov	sp, r7
 800c172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c176:	4770      	bx	lr

0800c178 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c178:	b480      	push	{r7}
 800c17a:	b083      	sub	sp, #12
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c180:	bf00      	nop
 800c182:	370c      	adds	r7, #12
 800c184:	46bd      	mov	sp, r7
 800c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18a:	4770      	bx	lr

0800c18c <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b082      	sub	sp, #8
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d101      	bne.n	800c19e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800c19a:	2301      	movs	r3, #1
 800c19c:	e047      	b.n	800c22e <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1a4:	b2db      	uxtb	r3, r3
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d106      	bne.n	800c1b8 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f7fa f9a8 	bl	8006508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2224      	movs	r2, #36	; 0x24
 800c1bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	68da      	ldr	r2, [r3, #12]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c1ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	f000 f931 	bl	800c438 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	691a      	ldr	r2, [r3, #16]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c1e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	695a      	ldr	r2, [r3, #20]
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800c1f4:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	695a      	ldr	r2, [r3, #20]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f042 0208 	orr.w	r2, r2, #8
 800c204:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	68da      	ldr	r2, [r3, #12]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c214:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2200      	movs	r2, #0
 800c21a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2220      	movs	r2, #32
 800c220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2220      	movs	r2, #32
 800c228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c22c:	2300      	movs	r3, #0
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3708      	adds	r7, #8
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}

0800c236 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c236:	b580      	push	{r7, lr}
 800c238:	b08a      	sub	sp, #40	; 0x28
 800c23a:	af02      	add	r7, sp, #8
 800c23c:	60f8      	str	r0, [r7, #12]
 800c23e:	60b9      	str	r1, [r7, #8]
 800c240:	603b      	str	r3, [r7, #0]
 800c242:	4613      	mov	r3, r2
 800c244:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c246:	2300      	movs	r3, #0
 800c248:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c250:	b2db      	uxtb	r3, r3
 800c252:	2b20      	cmp	r3, #32
 800c254:	d17c      	bne.n	800c350 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d002      	beq.n	800c262 <HAL_UART_Transmit+0x2c>
 800c25c:	88fb      	ldrh	r3, [r7, #6]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d101      	bne.n	800c266 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c262:	2301      	movs	r3, #1
 800c264:	e075      	b.n	800c352 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c26c:	2b01      	cmp	r3, #1
 800c26e:	d101      	bne.n	800c274 <HAL_UART_Transmit+0x3e>
 800c270:	2302      	movs	r3, #2
 800c272:	e06e      	b.n	800c352 <HAL_UART_Transmit+0x11c>
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2201      	movs	r2, #1
 800c278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	2200      	movs	r2, #0
 800c280:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	2221      	movs	r2, #33	; 0x21
 800c286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c28a:	f7fa facf 	bl	800682c <HAL_GetTick>
 800c28e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	88fa      	ldrh	r2, [r7, #6]
 800c294:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	88fa      	ldrh	r2, [r7, #6]
 800c29a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	689b      	ldr	r3, [r3, #8]
 800c2a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2a4:	d108      	bne.n	800c2b8 <HAL_UART_Transmit+0x82>
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	691b      	ldr	r3, [r3, #16]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d104      	bne.n	800c2b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	61bb      	str	r3, [r7, #24]
 800c2b6:	e003      	b.n	800c2c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800c2c8:	e02a      	b.n	800c320 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	9300      	str	r3, [sp, #0]
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	2180      	movs	r1, #128	; 0x80
 800c2d4:	68f8      	ldr	r0, [r7, #12]
 800c2d6:	f000 f840 	bl	800c35a <UART_WaitOnFlagUntilTimeout>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d001      	beq.n	800c2e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800c2e0:	2303      	movs	r3, #3
 800c2e2:	e036      	b.n	800c352 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800c2e4:	69fb      	ldr	r3, [r7, #28]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d10b      	bne.n	800c302 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c2ea:	69bb      	ldr	r3, [r7, #24]
 800c2ec:	881b      	ldrh	r3, [r3, #0]
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c2f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c2fa:	69bb      	ldr	r3, [r7, #24]
 800c2fc:	3302      	adds	r3, #2
 800c2fe:	61bb      	str	r3, [r7, #24]
 800c300:	e007      	b.n	800c312 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c302:	69fb      	ldr	r3, [r7, #28]
 800c304:	781a      	ldrb	r2, [r3, #0]
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c30c:	69fb      	ldr	r3, [r7, #28]
 800c30e:	3301      	adds	r3, #1
 800c310:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c316:	b29b      	uxth	r3, r3
 800c318:	3b01      	subs	r3, #1
 800c31a:	b29a      	uxth	r2, r3
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c324:	b29b      	uxth	r3, r3
 800c326:	2b00      	cmp	r3, #0
 800c328:	d1cf      	bne.n	800c2ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	9300      	str	r3, [sp, #0]
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	2200      	movs	r2, #0
 800c332:	2140      	movs	r1, #64	; 0x40
 800c334:	68f8      	ldr	r0, [r7, #12]
 800c336:	f000 f810 	bl	800c35a <UART_WaitOnFlagUntilTimeout>
 800c33a:	4603      	mov	r3, r0
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d001      	beq.n	800c344 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800c340:	2303      	movs	r3, #3
 800c342:	e006      	b.n	800c352 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2220      	movs	r2, #32
 800c348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800c34c:	2300      	movs	r3, #0
 800c34e:	e000      	b.n	800c352 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800c350:	2302      	movs	r3, #2
  }
}
 800c352:	4618      	mov	r0, r3
 800c354:	3720      	adds	r7, #32
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}

0800c35a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c35a:	b580      	push	{r7, lr}
 800c35c:	b090      	sub	sp, #64	; 0x40
 800c35e:	af00      	add	r7, sp, #0
 800c360:	60f8      	str	r0, [r7, #12]
 800c362:	60b9      	str	r1, [r7, #8]
 800c364:	603b      	str	r3, [r7, #0]
 800c366:	4613      	mov	r3, r2
 800c368:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c36a:	e050      	b.n	800c40e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c36c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c36e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c372:	d04c      	beq.n	800c40e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c376:	2b00      	cmp	r3, #0
 800c378:	d007      	beq.n	800c38a <UART_WaitOnFlagUntilTimeout+0x30>
 800c37a:	f7fa fa57 	bl	800682c <HAL_GetTick>
 800c37e:	4602      	mov	r2, r0
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	1ad3      	subs	r3, r2, r3
 800c384:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c386:	429a      	cmp	r2, r3
 800c388:	d241      	bcs.n	800c40e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	330c      	adds	r3, #12
 800c390:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c394:	e853 3f00 	ldrex	r3, [r3]
 800c398:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c39c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c3a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	330c      	adds	r3, #12
 800c3a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c3aa:	637a      	str	r2, [r7, #52]	; 0x34
 800c3ac:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c3b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c3b2:	e841 2300 	strex	r3, r2, [r1]
 800c3b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d1e5      	bne.n	800c38a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	3314      	adds	r3, #20
 800c3c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	e853 3f00 	ldrex	r3, [r3]
 800c3cc:	613b      	str	r3, [r7, #16]
   return(result);
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	f023 0301 	bic.w	r3, r3, #1
 800c3d4:	63bb      	str	r3, [r7, #56]	; 0x38
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	3314      	adds	r3, #20
 800c3dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c3de:	623a      	str	r2, [r7, #32]
 800c3e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3e2:	69f9      	ldr	r1, [r7, #28]
 800c3e4:	6a3a      	ldr	r2, [r7, #32]
 800c3e6:	e841 2300 	strex	r3, r2, [r1]
 800c3ea:	61bb      	str	r3, [r7, #24]
   return(result);
 800c3ec:	69bb      	ldr	r3, [r7, #24]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d1e5      	bne.n	800c3be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	2220      	movs	r2, #32
 800c3f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	2220      	movs	r2, #32
 800c3fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	2200      	movs	r2, #0
 800c406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c40a:	2303      	movs	r3, #3
 800c40c:	e00f      	b.n	800c42e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	681a      	ldr	r2, [r3, #0]
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	4013      	ands	r3, r2
 800c418:	68ba      	ldr	r2, [r7, #8]
 800c41a:	429a      	cmp	r2, r3
 800c41c:	bf0c      	ite	eq
 800c41e:	2301      	moveq	r3, #1
 800c420:	2300      	movne	r3, #0
 800c422:	b2db      	uxtb	r3, r3
 800c424:	461a      	mov	r2, r3
 800c426:	79fb      	ldrb	r3, [r7, #7]
 800c428:	429a      	cmp	r2, r3
 800c42a:	d09f      	beq.n	800c36c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c42c:	2300      	movs	r3, #0
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3740      	adds	r7, #64	; 0x40
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}
	...

0800c438 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c43c:	b0c0      	sub	sp, #256	; 0x100
 800c43e:	af00      	add	r7, sp, #0
 800c440:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	691b      	ldr	r3, [r3, #16]
 800c44c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c454:	68d9      	ldr	r1, [r3, #12]
 800c456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c45a:	681a      	ldr	r2, [r3, #0]
 800c45c:	ea40 0301 	orr.w	r3, r0, r1
 800c460:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c466:	689a      	ldr	r2, [r3, #8]
 800c468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c46c:	691b      	ldr	r3, [r3, #16]
 800c46e:	431a      	orrs	r2, r3
 800c470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c474:	695b      	ldr	r3, [r3, #20]
 800c476:	431a      	orrs	r2, r3
 800c478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c47c:	69db      	ldr	r3, [r3, #28]
 800c47e:	4313      	orrs	r3, r2
 800c480:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	68db      	ldr	r3, [r3, #12]
 800c48c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c490:	f021 010c 	bic.w	r1, r1, #12
 800c494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c498:	681a      	ldr	r2, [r3, #0]
 800c49a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c49e:	430b      	orrs	r3, r1
 800c4a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c4a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	695b      	ldr	r3, [r3, #20]
 800c4aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c4ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4b2:	6999      	ldr	r1, [r3, #24]
 800c4b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4b8:	681a      	ldr	r2, [r3, #0]
 800c4ba:	ea40 0301 	orr.w	r3, r0, r1
 800c4be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c4c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4c4:	681a      	ldr	r2, [r3, #0]
 800c4c6:	4b8f      	ldr	r3, [pc, #572]	; (800c704 <UART_SetConfig+0x2cc>)
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	d005      	beq.n	800c4d8 <UART_SetConfig+0xa0>
 800c4cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4d0:	681a      	ldr	r2, [r3, #0]
 800c4d2:	4b8d      	ldr	r3, [pc, #564]	; (800c708 <UART_SetConfig+0x2d0>)
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	d104      	bne.n	800c4e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c4d8:	f7fd fcf4 	bl	8009ec4 <HAL_RCC_GetPCLK2Freq>
 800c4dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c4e0:	e003      	b.n	800c4ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c4e2:	f7fd fcdb 	bl	8009e9c <HAL_RCC_GetPCLK1Freq>
 800c4e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c4ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4ee:	69db      	ldr	r3, [r3, #28]
 800c4f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c4f4:	f040 810c 	bne.w	800c710 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c4f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c502:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c506:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c50a:	4622      	mov	r2, r4
 800c50c:	462b      	mov	r3, r5
 800c50e:	1891      	adds	r1, r2, r2
 800c510:	65b9      	str	r1, [r7, #88]	; 0x58
 800c512:	415b      	adcs	r3, r3
 800c514:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c516:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c51a:	4621      	mov	r1, r4
 800c51c:	eb12 0801 	adds.w	r8, r2, r1
 800c520:	4629      	mov	r1, r5
 800c522:	eb43 0901 	adc.w	r9, r3, r1
 800c526:	f04f 0200 	mov.w	r2, #0
 800c52a:	f04f 0300 	mov.w	r3, #0
 800c52e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c532:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c536:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c53a:	4690      	mov	r8, r2
 800c53c:	4699      	mov	r9, r3
 800c53e:	4623      	mov	r3, r4
 800c540:	eb18 0303 	adds.w	r3, r8, r3
 800c544:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c548:	462b      	mov	r3, r5
 800c54a:	eb49 0303 	adc.w	r3, r9, r3
 800c54e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	2200      	movs	r2, #0
 800c55a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c55e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c562:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c566:	460b      	mov	r3, r1
 800c568:	18db      	adds	r3, r3, r3
 800c56a:	653b      	str	r3, [r7, #80]	; 0x50
 800c56c:	4613      	mov	r3, r2
 800c56e:	eb42 0303 	adc.w	r3, r2, r3
 800c572:	657b      	str	r3, [r7, #84]	; 0x54
 800c574:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c578:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c57c:	f7f4 f98a 	bl	8000894 <__aeabi_uldivmod>
 800c580:	4602      	mov	r2, r0
 800c582:	460b      	mov	r3, r1
 800c584:	4b61      	ldr	r3, [pc, #388]	; (800c70c <UART_SetConfig+0x2d4>)
 800c586:	fba3 2302 	umull	r2, r3, r3, r2
 800c58a:	095b      	lsrs	r3, r3, #5
 800c58c:	011c      	lsls	r4, r3, #4
 800c58e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c592:	2200      	movs	r2, #0
 800c594:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c598:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c59c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c5a0:	4642      	mov	r2, r8
 800c5a2:	464b      	mov	r3, r9
 800c5a4:	1891      	adds	r1, r2, r2
 800c5a6:	64b9      	str	r1, [r7, #72]	; 0x48
 800c5a8:	415b      	adcs	r3, r3
 800c5aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c5ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c5b0:	4641      	mov	r1, r8
 800c5b2:	eb12 0a01 	adds.w	sl, r2, r1
 800c5b6:	4649      	mov	r1, r9
 800c5b8:	eb43 0b01 	adc.w	fp, r3, r1
 800c5bc:	f04f 0200 	mov.w	r2, #0
 800c5c0:	f04f 0300 	mov.w	r3, #0
 800c5c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c5c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c5cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c5d0:	4692      	mov	sl, r2
 800c5d2:	469b      	mov	fp, r3
 800c5d4:	4643      	mov	r3, r8
 800c5d6:	eb1a 0303 	adds.w	r3, sl, r3
 800c5da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c5de:	464b      	mov	r3, r9
 800c5e0:	eb4b 0303 	adc.w	r3, fp, r3
 800c5e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c5e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5ec:	685b      	ldr	r3, [r3, #4]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c5f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c5f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	18db      	adds	r3, r3, r3
 800c600:	643b      	str	r3, [r7, #64]	; 0x40
 800c602:	4613      	mov	r3, r2
 800c604:	eb42 0303 	adc.w	r3, r2, r3
 800c608:	647b      	str	r3, [r7, #68]	; 0x44
 800c60a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c60e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c612:	f7f4 f93f 	bl	8000894 <__aeabi_uldivmod>
 800c616:	4602      	mov	r2, r0
 800c618:	460b      	mov	r3, r1
 800c61a:	4611      	mov	r1, r2
 800c61c:	4b3b      	ldr	r3, [pc, #236]	; (800c70c <UART_SetConfig+0x2d4>)
 800c61e:	fba3 2301 	umull	r2, r3, r3, r1
 800c622:	095b      	lsrs	r3, r3, #5
 800c624:	2264      	movs	r2, #100	; 0x64
 800c626:	fb02 f303 	mul.w	r3, r2, r3
 800c62a:	1acb      	subs	r3, r1, r3
 800c62c:	00db      	lsls	r3, r3, #3
 800c62e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c632:	4b36      	ldr	r3, [pc, #216]	; (800c70c <UART_SetConfig+0x2d4>)
 800c634:	fba3 2302 	umull	r2, r3, r3, r2
 800c638:	095b      	lsrs	r3, r3, #5
 800c63a:	005b      	lsls	r3, r3, #1
 800c63c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c640:	441c      	add	r4, r3
 800c642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c646:	2200      	movs	r2, #0
 800c648:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c64c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c650:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c654:	4642      	mov	r2, r8
 800c656:	464b      	mov	r3, r9
 800c658:	1891      	adds	r1, r2, r2
 800c65a:	63b9      	str	r1, [r7, #56]	; 0x38
 800c65c:	415b      	adcs	r3, r3
 800c65e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c660:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c664:	4641      	mov	r1, r8
 800c666:	1851      	adds	r1, r2, r1
 800c668:	6339      	str	r1, [r7, #48]	; 0x30
 800c66a:	4649      	mov	r1, r9
 800c66c:	414b      	adcs	r3, r1
 800c66e:	637b      	str	r3, [r7, #52]	; 0x34
 800c670:	f04f 0200 	mov.w	r2, #0
 800c674:	f04f 0300 	mov.w	r3, #0
 800c678:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c67c:	4659      	mov	r1, fp
 800c67e:	00cb      	lsls	r3, r1, #3
 800c680:	4651      	mov	r1, sl
 800c682:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c686:	4651      	mov	r1, sl
 800c688:	00ca      	lsls	r2, r1, #3
 800c68a:	4610      	mov	r0, r2
 800c68c:	4619      	mov	r1, r3
 800c68e:	4603      	mov	r3, r0
 800c690:	4642      	mov	r2, r8
 800c692:	189b      	adds	r3, r3, r2
 800c694:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c698:	464b      	mov	r3, r9
 800c69a:	460a      	mov	r2, r1
 800c69c:	eb42 0303 	adc.w	r3, r2, r3
 800c6a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c6a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c6b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c6b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	18db      	adds	r3, r3, r3
 800c6bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800c6be:	4613      	mov	r3, r2
 800c6c0:	eb42 0303 	adc.w	r3, r2, r3
 800c6c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c6ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c6ce:	f7f4 f8e1 	bl	8000894 <__aeabi_uldivmod>
 800c6d2:	4602      	mov	r2, r0
 800c6d4:	460b      	mov	r3, r1
 800c6d6:	4b0d      	ldr	r3, [pc, #52]	; (800c70c <UART_SetConfig+0x2d4>)
 800c6d8:	fba3 1302 	umull	r1, r3, r3, r2
 800c6dc:	095b      	lsrs	r3, r3, #5
 800c6de:	2164      	movs	r1, #100	; 0x64
 800c6e0:	fb01 f303 	mul.w	r3, r1, r3
 800c6e4:	1ad3      	subs	r3, r2, r3
 800c6e6:	00db      	lsls	r3, r3, #3
 800c6e8:	3332      	adds	r3, #50	; 0x32
 800c6ea:	4a08      	ldr	r2, [pc, #32]	; (800c70c <UART_SetConfig+0x2d4>)
 800c6ec:	fba2 2303 	umull	r2, r3, r2, r3
 800c6f0:	095b      	lsrs	r3, r3, #5
 800c6f2:	f003 0207 	and.w	r2, r3, #7
 800c6f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	4422      	add	r2, r4
 800c6fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c700:	e105      	b.n	800c90e <UART_SetConfig+0x4d6>
 800c702:	bf00      	nop
 800c704:	40011000 	.word	0x40011000
 800c708:	40011400 	.word	0x40011400
 800c70c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c710:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c714:	2200      	movs	r2, #0
 800c716:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c71a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c71e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c722:	4642      	mov	r2, r8
 800c724:	464b      	mov	r3, r9
 800c726:	1891      	adds	r1, r2, r2
 800c728:	6239      	str	r1, [r7, #32]
 800c72a:	415b      	adcs	r3, r3
 800c72c:	627b      	str	r3, [r7, #36]	; 0x24
 800c72e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c732:	4641      	mov	r1, r8
 800c734:	1854      	adds	r4, r2, r1
 800c736:	4649      	mov	r1, r9
 800c738:	eb43 0501 	adc.w	r5, r3, r1
 800c73c:	f04f 0200 	mov.w	r2, #0
 800c740:	f04f 0300 	mov.w	r3, #0
 800c744:	00eb      	lsls	r3, r5, #3
 800c746:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c74a:	00e2      	lsls	r2, r4, #3
 800c74c:	4614      	mov	r4, r2
 800c74e:	461d      	mov	r5, r3
 800c750:	4643      	mov	r3, r8
 800c752:	18e3      	adds	r3, r4, r3
 800c754:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c758:	464b      	mov	r3, r9
 800c75a:	eb45 0303 	adc.w	r3, r5, r3
 800c75e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c766:	685b      	ldr	r3, [r3, #4]
 800c768:	2200      	movs	r2, #0
 800c76a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c76e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c772:	f04f 0200 	mov.w	r2, #0
 800c776:	f04f 0300 	mov.w	r3, #0
 800c77a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c77e:	4629      	mov	r1, r5
 800c780:	008b      	lsls	r3, r1, #2
 800c782:	4621      	mov	r1, r4
 800c784:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c788:	4621      	mov	r1, r4
 800c78a:	008a      	lsls	r2, r1, #2
 800c78c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c790:	f7f4 f880 	bl	8000894 <__aeabi_uldivmod>
 800c794:	4602      	mov	r2, r0
 800c796:	460b      	mov	r3, r1
 800c798:	4b60      	ldr	r3, [pc, #384]	; (800c91c <UART_SetConfig+0x4e4>)
 800c79a:	fba3 2302 	umull	r2, r3, r3, r2
 800c79e:	095b      	lsrs	r3, r3, #5
 800c7a0:	011c      	lsls	r4, r3, #4
 800c7a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c7ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c7b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c7b4:	4642      	mov	r2, r8
 800c7b6:	464b      	mov	r3, r9
 800c7b8:	1891      	adds	r1, r2, r2
 800c7ba:	61b9      	str	r1, [r7, #24]
 800c7bc:	415b      	adcs	r3, r3
 800c7be:	61fb      	str	r3, [r7, #28]
 800c7c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c7c4:	4641      	mov	r1, r8
 800c7c6:	1851      	adds	r1, r2, r1
 800c7c8:	6139      	str	r1, [r7, #16]
 800c7ca:	4649      	mov	r1, r9
 800c7cc:	414b      	adcs	r3, r1
 800c7ce:	617b      	str	r3, [r7, #20]
 800c7d0:	f04f 0200 	mov.w	r2, #0
 800c7d4:	f04f 0300 	mov.w	r3, #0
 800c7d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c7dc:	4659      	mov	r1, fp
 800c7de:	00cb      	lsls	r3, r1, #3
 800c7e0:	4651      	mov	r1, sl
 800c7e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c7e6:	4651      	mov	r1, sl
 800c7e8:	00ca      	lsls	r2, r1, #3
 800c7ea:	4610      	mov	r0, r2
 800c7ec:	4619      	mov	r1, r3
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	4642      	mov	r2, r8
 800c7f2:	189b      	adds	r3, r3, r2
 800c7f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c7f8:	464b      	mov	r3, r9
 800c7fa:	460a      	mov	r2, r1
 800c7fc:	eb42 0303 	adc.w	r3, r2, r3
 800c800:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c808:	685b      	ldr	r3, [r3, #4]
 800c80a:	2200      	movs	r2, #0
 800c80c:	67bb      	str	r3, [r7, #120]	; 0x78
 800c80e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c810:	f04f 0200 	mov.w	r2, #0
 800c814:	f04f 0300 	mov.w	r3, #0
 800c818:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c81c:	4649      	mov	r1, r9
 800c81e:	008b      	lsls	r3, r1, #2
 800c820:	4641      	mov	r1, r8
 800c822:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c826:	4641      	mov	r1, r8
 800c828:	008a      	lsls	r2, r1, #2
 800c82a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c82e:	f7f4 f831 	bl	8000894 <__aeabi_uldivmod>
 800c832:	4602      	mov	r2, r0
 800c834:	460b      	mov	r3, r1
 800c836:	4b39      	ldr	r3, [pc, #228]	; (800c91c <UART_SetConfig+0x4e4>)
 800c838:	fba3 1302 	umull	r1, r3, r3, r2
 800c83c:	095b      	lsrs	r3, r3, #5
 800c83e:	2164      	movs	r1, #100	; 0x64
 800c840:	fb01 f303 	mul.w	r3, r1, r3
 800c844:	1ad3      	subs	r3, r2, r3
 800c846:	011b      	lsls	r3, r3, #4
 800c848:	3332      	adds	r3, #50	; 0x32
 800c84a:	4a34      	ldr	r2, [pc, #208]	; (800c91c <UART_SetConfig+0x4e4>)
 800c84c:	fba2 2303 	umull	r2, r3, r2, r3
 800c850:	095b      	lsrs	r3, r3, #5
 800c852:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c856:	441c      	add	r4, r3
 800c858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c85c:	2200      	movs	r2, #0
 800c85e:	673b      	str	r3, [r7, #112]	; 0x70
 800c860:	677a      	str	r2, [r7, #116]	; 0x74
 800c862:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c866:	4642      	mov	r2, r8
 800c868:	464b      	mov	r3, r9
 800c86a:	1891      	adds	r1, r2, r2
 800c86c:	60b9      	str	r1, [r7, #8]
 800c86e:	415b      	adcs	r3, r3
 800c870:	60fb      	str	r3, [r7, #12]
 800c872:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c876:	4641      	mov	r1, r8
 800c878:	1851      	adds	r1, r2, r1
 800c87a:	6039      	str	r1, [r7, #0]
 800c87c:	4649      	mov	r1, r9
 800c87e:	414b      	adcs	r3, r1
 800c880:	607b      	str	r3, [r7, #4]
 800c882:	f04f 0200 	mov.w	r2, #0
 800c886:	f04f 0300 	mov.w	r3, #0
 800c88a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c88e:	4659      	mov	r1, fp
 800c890:	00cb      	lsls	r3, r1, #3
 800c892:	4651      	mov	r1, sl
 800c894:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c898:	4651      	mov	r1, sl
 800c89a:	00ca      	lsls	r2, r1, #3
 800c89c:	4610      	mov	r0, r2
 800c89e:	4619      	mov	r1, r3
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	4642      	mov	r2, r8
 800c8a4:	189b      	adds	r3, r3, r2
 800c8a6:	66bb      	str	r3, [r7, #104]	; 0x68
 800c8a8:	464b      	mov	r3, r9
 800c8aa:	460a      	mov	r2, r1
 800c8ac:	eb42 0303 	adc.w	r3, r2, r3
 800c8b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c8b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	663b      	str	r3, [r7, #96]	; 0x60
 800c8bc:	667a      	str	r2, [r7, #100]	; 0x64
 800c8be:	f04f 0200 	mov.w	r2, #0
 800c8c2:	f04f 0300 	mov.w	r3, #0
 800c8c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c8ca:	4649      	mov	r1, r9
 800c8cc:	008b      	lsls	r3, r1, #2
 800c8ce:	4641      	mov	r1, r8
 800c8d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c8d4:	4641      	mov	r1, r8
 800c8d6:	008a      	lsls	r2, r1, #2
 800c8d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c8dc:	f7f3 ffda 	bl	8000894 <__aeabi_uldivmod>
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	460b      	mov	r3, r1
 800c8e4:	4b0d      	ldr	r3, [pc, #52]	; (800c91c <UART_SetConfig+0x4e4>)
 800c8e6:	fba3 1302 	umull	r1, r3, r3, r2
 800c8ea:	095b      	lsrs	r3, r3, #5
 800c8ec:	2164      	movs	r1, #100	; 0x64
 800c8ee:	fb01 f303 	mul.w	r3, r1, r3
 800c8f2:	1ad3      	subs	r3, r2, r3
 800c8f4:	011b      	lsls	r3, r3, #4
 800c8f6:	3332      	adds	r3, #50	; 0x32
 800c8f8:	4a08      	ldr	r2, [pc, #32]	; (800c91c <UART_SetConfig+0x4e4>)
 800c8fa:	fba2 2303 	umull	r2, r3, r2, r3
 800c8fe:	095b      	lsrs	r3, r3, #5
 800c900:	f003 020f 	and.w	r2, r3, #15
 800c904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	4422      	add	r2, r4
 800c90c:	609a      	str	r2, [r3, #8]
}
 800c90e:	bf00      	nop
 800c910:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c914:	46bd      	mov	sp, r7
 800c916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c91a:	bf00      	nop
 800c91c:	51eb851f 	.word	0x51eb851f

0800c920 <arm_sin_f32>:
 800c920:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800c99c <arm_sin_f32+0x7c>
 800c924:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c928:	ee20 7a07 	vmul.f32	s14, s0, s14
 800c92c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c930:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800c934:	d42c      	bmi.n	800c990 <arm_sin_f32+0x70>
 800c936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c93a:	eddf 6a19 	vldr	s13, [pc, #100]	; 800c9a0 <arm_sin_f32+0x80>
 800c93e:	4a19      	ldr	r2, [pc, #100]	; (800c9a4 <arm_sin_f32+0x84>)
 800c940:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c944:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c948:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c94c:	eef4 7ae6 	vcmpe.f32	s15, s13
 800c950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c954:	bfa8      	it	ge
 800c956:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 800c95a:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800c95e:	ee17 3a10 	vmov	r3, s14
 800c962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c966:	ee07 3a10 	vmov	s14, r3
 800c96a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800c96e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800c972:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c976:	edd1 6a01 	vldr	s13, [r1, #4]
 800c97a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c97e:	ed91 0a00 	vldr	s0, [r1]
 800c982:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c986:	ee27 0a00 	vmul.f32	s0, s14, s0
 800c98a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c98e:	4770      	bx	lr
 800c990:	ee17 3a90 	vmov	r3, s15
 800c994:	3b01      	subs	r3, #1
 800c996:	ee07 3a90 	vmov	s15, r3
 800c99a:	e7cc      	b.n	800c936 <arm_sin_f32+0x16>
 800c99c:	3e22f983 	.word	0x3e22f983
 800c9a0:	44000000 	.word	0x44000000
 800c9a4:	0800e530 	.word	0x0800e530

0800c9a8 <atoi>:
 800c9a8:	220a      	movs	r2, #10
 800c9aa:	2100      	movs	r1, #0
 800c9ac:	f000 b8d6 	b.w	800cb5c <strtol>

0800c9b0 <__errno>:
 800c9b0:	4b01      	ldr	r3, [pc, #4]	; (800c9b8 <__errno+0x8>)
 800c9b2:	6818      	ldr	r0, [r3, #0]
 800c9b4:	4770      	bx	lr
 800c9b6:	bf00      	nop
 800c9b8:	20008ef4 	.word	0x20008ef4

0800c9bc <__libc_init_array>:
 800c9bc:	b570      	push	{r4, r5, r6, lr}
 800c9be:	4d0d      	ldr	r5, [pc, #52]	; (800c9f4 <__libc_init_array+0x38>)
 800c9c0:	4c0d      	ldr	r4, [pc, #52]	; (800c9f8 <__libc_init_array+0x3c>)
 800c9c2:	1b64      	subs	r4, r4, r5
 800c9c4:	10a4      	asrs	r4, r4, #2
 800c9c6:	2600      	movs	r6, #0
 800c9c8:	42a6      	cmp	r6, r4
 800c9ca:	d109      	bne.n	800c9e0 <__libc_init_array+0x24>
 800c9cc:	4d0b      	ldr	r5, [pc, #44]	; (800c9fc <__libc_init_array+0x40>)
 800c9ce:	4c0c      	ldr	r4, [pc, #48]	; (800ca00 <__libc_init_array+0x44>)
 800c9d0:	f000 f8ce 	bl	800cb70 <_init>
 800c9d4:	1b64      	subs	r4, r4, r5
 800c9d6:	10a4      	asrs	r4, r4, #2
 800c9d8:	2600      	movs	r6, #0
 800c9da:	42a6      	cmp	r6, r4
 800c9dc:	d105      	bne.n	800c9ea <__libc_init_array+0x2e>
 800c9de:	bd70      	pop	{r4, r5, r6, pc}
 800c9e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9e4:	4798      	blx	r3
 800c9e6:	3601      	adds	r6, #1
 800c9e8:	e7ee      	b.n	800c9c8 <__libc_init_array+0xc>
 800c9ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9ee:	4798      	blx	r3
 800c9f0:	3601      	adds	r6, #1
 800c9f2:	e7f2      	b.n	800c9da <__libc_init_array+0x1e>
 800c9f4:	0800ee40 	.word	0x0800ee40
 800c9f8:	0800ee40 	.word	0x0800ee40
 800c9fc:	0800ee40 	.word	0x0800ee40
 800ca00:	0800ee44 	.word	0x0800ee44

0800ca04 <memcpy>:
 800ca04:	440a      	add	r2, r1
 800ca06:	4291      	cmp	r1, r2
 800ca08:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca0c:	d100      	bne.n	800ca10 <memcpy+0xc>
 800ca0e:	4770      	bx	lr
 800ca10:	b510      	push	{r4, lr}
 800ca12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca1a:	4291      	cmp	r1, r2
 800ca1c:	d1f9      	bne.n	800ca12 <memcpy+0xe>
 800ca1e:	bd10      	pop	{r4, pc}

0800ca20 <memset>:
 800ca20:	4402      	add	r2, r0
 800ca22:	4603      	mov	r3, r0
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d100      	bne.n	800ca2a <memset+0xa>
 800ca28:	4770      	bx	lr
 800ca2a:	f803 1b01 	strb.w	r1, [r3], #1
 800ca2e:	e7f9      	b.n	800ca24 <memset+0x4>

0800ca30 <strncmp>:
 800ca30:	b510      	push	{r4, lr}
 800ca32:	b17a      	cbz	r2, 800ca54 <strncmp+0x24>
 800ca34:	4603      	mov	r3, r0
 800ca36:	3901      	subs	r1, #1
 800ca38:	1884      	adds	r4, r0, r2
 800ca3a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ca3e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ca42:	4290      	cmp	r0, r2
 800ca44:	d101      	bne.n	800ca4a <strncmp+0x1a>
 800ca46:	42a3      	cmp	r3, r4
 800ca48:	d101      	bne.n	800ca4e <strncmp+0x1e>
 800ca4a:	1a80      	subs	r0, r0, r2
 800ca4c:	bd10      	pop	{r4, pc}
 800ca4e:	2800      	cmp	r0, #0
 800ca50:	d1f3      	bne.n	800ca3a <strncmp+0xa>
 800ca52:	e7fa      	b.n	800ca4a <strncmp+0x1a>
 800ca54:	4610      	mov	r0, r2
 800ca56:	e7f9      	b.n	800ca4c <strncmp+0x1c>

0800ca58 <_strtol_l.constprop.0>:
 800ca58:	2b01      	cmp	r3, #1
 800ca5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca5e:	d001      	beq.n	800ca64 <_strtol_l.constprop.0+0xc>
 800ca60:	2b24      	cmp	r3, #36	; 0x24
 800ca62:	d906      	bls.n	800ca72 <_strtol_l.constprop.0+0x1a>
 800ca64:	f7ff ffa4 	bl	800c9b0 <__errno>
 800ca68:	2316      	movs	r3, #22
 800ca6a:	6003      	str	r3, [r0, #0]
 800ca6c:	2000      	movs	r0, #0
 800ca6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca72:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cb58 <_strtol_l.constprop.0+0x100>
 800ca76:	460d      	mov	r5, r1
 800ca78:	462e      	mov	r6, r5
 800ca7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca7e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ca82:	f017 0708 	ands.w	r7, r7, #8
 800ca86:	d1f7      	bne.n	800ca78 <_strtol_l.constprop.0+0x20>
 800ca88:	2c2d      	cmp	r4, #45	; 0x2d
 800ca8a:	d132      	bne.n	800caf2 <_strtol_l.constprop.0+0x9a>
 800ca8c:	782c      	ldrb	r4, [r5, #0]
 800ca8e:	2701      	movs	r7, #1
 800ca90:	1cb5      	adds	r5, r6, #2
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d05b      	beq.n	800cb4e <_strtol_l.constprop.0+0xf6>
 800ca96:	2b10      	cmp	r3, #16
 800ca98:	d109      	bne.n	800caae <_strtol_l.constprop.0+0x56>
 800ca9a:	2c30      	cmp	r4, #48	; 0x30
 800ca9c:	d107      	bne.n	800caae <_strtol_l.constprop.0+0x56>
 800ca9e:	782c      	ldrb	r4, [r5, #0]
 800caa0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800caa4:	2c58      	cmp	r4, #88	; 0x58
 800caa6:	d14d      	bne.n	800cb44 <_strtol_l.constprop.0+0xec>
 800caa8:	786c      	ldrb	r4, [r5, #1]
 800caaa:	2310      	movs	r3, #16
 800caac:	3502      	adds	r5, #2
 800caae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cab2:	f108 38ff 	add.w	r8, r8, #4294967295
 800cab6:	f04f 0c00 	mov.w	ip, #0
 800caba:	fbb8 f9f3 	udiv	r9, r8, r3
 800cabe:	4666      	mov	r6, ip
 800cac0:	fb03 8a19 	mls	sl, r3, r9, r8
 800cac4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800cac8:	f1be 0f09 	cmp.w	lr, #9
 800cacc:	d816      	bhi.n	800cafc <_strtol_l.constprop.0+0xa4>
 800cace:	4674      	mov	r4, lr
 800cad0:	42a3      	cmp	r3, r4
 800cad2:	dd24      	ble.n	800cb1e <_strtol_l.constprop.0+0xc6>
 800cad4:	f1bc 0f00 	cmp.w	ip, #0
 800cad8:	db1e      	blt.n	800cb18 <_strtol_l.constprop.0+0xc0>
 800cada:	45b1      	cmp	r9, r6
 800cadc:	d31c      	bcc.n	800cb18 <_strtol_l.constprop.0+0xc0>
 800cade:	d101      	bne.n	800cae4 <_strtol_l.constprop.0+0x8c>
 800cae0:	45a2      	cmp	sl, r4
 800cae2:	db19      	blt.n	800cb18 <_strtol_l.constprop.0+0xc0>
 800cae4:	fb06 4603 	mla	r6, r6, r3, r4
 800cae8:	f04f 0c01 	mov.w	ip, #1
 800caec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800caf0:	e7e8      	b.n	800cac4 <_strtol_l.constprop.0+0x6c>
 800caf2:	2c2b      	cmp	r4, #43	; 0x2b
 800caf4:	bf04      	itt	eq
 800caf6:	782c      	ldrbeq	r4, [r5, #0]
 800caf8:	1cb5      	addeq	r5, r6, #2
 800cafa:	e7ca      	b.n	800ca92 <_strtol_l.constprop.0+0x3a>
 800cafc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800cb00:	f1be 0f19 	cmp.w	lr, #25
 800cb04:	d801      	bhi.n	800cb0a <_strtol_l.constprop.0+0xb2>
 800cb06:	3c37      	subs	r4, #55	; 0x37
 800cb08:	e7e2      	b.n	800cad0 <_strtol_l.constprop.0+0x78>
 800cb0a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800cb0e:	f1be 0f19 	cmp.w	lr, #25
 800cb12:	d804      	bhi.n	800cb1e <_strtol_l.constprop.0+0xc6>
 800cb14:	3c57      	subs	r4, #87	; 0x57
 800cb16:	e7db      	b.n	800cad0 <_strtol_l.constprop.0+0x78>
 800cb18:	f04f 3cff 	mov.w	ip, #4294967295
 800cb1c:	e7e6      	b.n	800caec <_strtol_l.constprop.0+0x94>
 800cb1e:	f1bc 0f00 	cmp.w	ip, #0
 800cb22:	da05      	bge.n	800cb30 <_strtol_l.constprop.0+0xd8>
 800cb24:	2322      	movs	r3, #34	; 0x22
 800cb26:	6003      	str	r3, [r0, #0]
 800cb28:	4646      	mov	r6, r8
 800cb2a:	b942      	cbnz	r2, 800cb3e <_strtol_l.constprop.0+0xe6>
 800cb2c:	4630      	mov	r0, r6
 800cb2e:	e79e      	b.n	800ca6e <_strtol_l.constprop.0+0x16>
 800cb30:	b107      	cbz	r7, 800cb34 <_strtol_l.constprop.0+0xdc>
 800cb32:	4276      	negs	r6, r6
 800cb34:	2a00      	cmp	r2, #0
 800cb36:	d0f9      	beq.n	800cb2c <_strtol_l.constprop.0+0xd4>
 800cb38:	f1bc 0f00 	cmp.w	ip, #0
 800cb3c:	d000      	beq.n	800cb40 <_strtol_l.constprop.0+0xe8>
 800cb3e:	1e69      	subs	r1, r5, #1
 800cb40:	6011      	str	r1, [r2, #0]
 800cb42:	e7f3      	b.n	800cb2c <_strtol_l.constprop.0+0xd4>
 800cb44:	2430      	movs	r4, #48	; 0x30
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d1b1      	bne.n	800caae <_strtol_l.constprop.0+0x56>
 800cb4a:	2308      	movs	r3, #8
 800cb4c:	e7af      	b.n	800caae <_strtol_l.constprop.0+0x56>
 800cb4e:	2c30      	cmp	r4, #48	; 0x30
 800cb50:	d0a5      	beq.n	800ca9e <_strtol_l.constprop.0+0x46>
 800cb52:	230a      	movs	r3, #10
 800cb54:	e7ab      	b.n	800caae <_strtol_l.constprop.0+0x56>
 800cb56:	bf00      	nop
 800cb58:	0800ed35 	.word	0x0800ed35

0800cb5c <strtol>:
 800cb5c:	4613      	mov	r3, r2
 800cb5e:	460a      	mov	r2, r1
 800cb60:	4601      	mov	r1, r0
 800cb62:	4802      	ldr	r0, [pc, #8]	; (800cb6c <strtol+0x10>)
 800cb64:	6800      	ldr	r0, [r0, #0]
 800cb66:	f7ff bf77 	b.w	800ca58 <_strtol_l.constprop.0>
 800cb6a:	bf00      	nop
 800cb6c:	20008ef4 	.word	0x20008ef4

0800cb70 <_init>:
 800cb70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb72:	bf00      	nop
 800cb74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb76:	bc08      	pop	{r3}
 800cb78:	469e      	mov	lr, r3
 800cb7a:	4770      	bx	lr

0800cb7c <_fini>:
 800cb7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb7e:	bf00      	nop
 800cb80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb82:	bc08      	pop	{r3}
 800cb84:	469e      	mov	lr, r3
 800cb86:	4770      	bx	lr
